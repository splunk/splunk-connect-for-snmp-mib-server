#
# PySNMP MIB module ACMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, TimeTicks, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Gauge32, Counter32, Counter64, enterprises, Unsigned32, Bits, mib_2, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Gauge32", "Counter32", "Counter64", "enterprises", "Unsigned32", "Bits", "mib-2", "Integer32", "NotificationType")
DisplayString, RowStatus, TimeStamp, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TimeStamp", "DateAndTime", "TextualConvention")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2))
acMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 18))
if mibBuilder.loadTexts: acMIB.setLastUpdated('000204081230Z')
if mibBuilder.loadTexts: acMIB.setOrganization('Lucent Technologies, Inc.')
class IntfIndex(TextualConvention, Integer32):
    status = 'current'

class ConnFailureCause(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("physical", 2))

class FrConnFailureCause(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("physical", 2), ("lmi", 3), ("dlci", 4))

class AtmConnFailureCause(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("physical", 2), ("oamAis", 3), ("oamRdi", 4))

class ImaGrpChannelEndState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("cfgAbtUnsupportedM", 4), ("cfgAbtIncSymmetry", 5), ("cfgAbtOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9))

sysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1))
equipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2))
channelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3))
intfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5))
connectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6))
userServiceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 7))
sysTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8))
systemEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1))
moduleEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2))
interfaceEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3))
connectionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4))
sysStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 9))
equipStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10))
intfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11))
connectionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12))
ipAtmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13))
iispRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14))
returnCode = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15))
sysControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16))
stratumConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17))
cellTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18))
sysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19))
ethernetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20))
alarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 21))
sysTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22))
fwDriverSup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23))
viprConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24))
toneAnnceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25))
gr303Config = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26))
gr303Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27))
atmTrunkingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28))
protectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29))
h248Config = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30))
h248SysControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31))
siteName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('current')
siteID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteID.setStatus('current')
siteEtherIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteEtherIpAddr.setStatus('current')
siteEtherIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteEtherIpMask.setStatus('current')
siteGatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteGatewayAddr.setStatus('current')
siteAtmAddrPrefix1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteAtmAddrPrefix1.setStatus('current')
siteAtmAddrUser1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteAtmAddrUser1.setStatus('current')
siteRemoteMgrAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrAddr1.setStatus('current')
siteRemoteMgrAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrAddr2.setStatus('current')
siteRemoteMgrAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrAddr3.setStatus('current')
siteRemoteMgrAddr4 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrAddr4.setStatus('current')
siteRemoteMgrAddr5 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrAddr5.setStatus('current')
siteMasterNodeAtmAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteMasterNodeAtmAddr1.setStatus('current')
siteMasterNodeAtmAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteMasterNodeAtmAddr2.setStatus('current')
siteEnhanceFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteEnhanceFeatures.setStatus('current')
siteTrapDialOutFeature = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("dialTerminal", 2), ("dialBeeper", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteTrapDialOutFeature.setStatus('current')
siteTrapDialOutPhoneNum = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteTrapDialOutPhoneNum.setStatus('current')
siteTrapDialOutBeeperData = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteTrapDialOutBeeperData.setStatus('current')
siteDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 19), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteDateAndTime.setStatus('current')
siteSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteSoftwareVersion.setStatus('current')
csTcpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTcpServerIpAddress.setStatus('current')
csTcpServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(1025)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTcpServerPortNumber.setStatus('current')
keepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keepAliveTimer.setStatus('current')
inactiveTimer = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inactiveTimer.setStatus('current')
siteMasterNodeAddrType1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("e164nsap", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteMasterNodeAddrType1.setStatus('current')
siteMasterNodeAddrType2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("e164nsap", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteMasterNodeAddrType2.setStatus('current')
inBandPrimaryIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inBandPrimaryIpAddress.setStatus('current')
inBandPrimaryIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inBandPrimaryIpMask.setStatus('current')
inBandBackupIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 29), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inBandBackupIpAddress.setStatus('current')
inBandBackupIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: inBandBackupIpMask.setStatus('current')
inBandSvcConnectionsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inBandSvcConnectionsAllowed.setStatus('current')
atmArpServer = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServer.setStatus('current')
atmArpServerRemoteConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("svc", 1), ("pvc", 2))).clone('svc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServerRemoteConnectionType.setStatus('current')
atmArpServerRemoteAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServerRemoteAtmAddress.setStatus('current')
atmArpServerRemoteAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("e164nsap", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServerRemoteAddrType.setStatus('current')
atmArpServerRemoteIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServerRemoteIpAddress.setStatus('current')
atmArpServerRemoteIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServerRemoteIpMask.setStatus('current')
atmArpServerEncapsulation = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("llc-snap", 1))).clone('llc-snap')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmArpServerEncapsulation.setStatus('current')
siteFallbackSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFallbackSoftwareVersion.setStatus('current')
siteUpgradeSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteUpgradeSoftwareVersion.setStatus('current')
siteSwitchIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteSwitchIpAddr.setStatus('current')
muxTcpType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("server", 1), ("client", 2))).clone('client')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxTcpType.setStatus('current')
loopbackLocationID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackLocationID.setStatus('current')
oamDebouncingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 300000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamDebouncingPeriod.setStatus('current')
svcPointToPointCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 47), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPointToPointCalls.setStatus('current')
svcPointToMultiPointCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 48), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPointToMultiPointCalls.setStatus('current')
svcPointToMultiPointParties = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 49), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPointToMultiPointParties.setStatus('current')
spvcCePointToPointCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 50), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcCePointToPointCalls.setStatus('current')
spvcTePointToPointCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 51), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcTePointToPointCalls.setStatus('current')
spvcAtmPointToPointCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 52), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcAtmPointToPointCalls.setStatus('current')
cgApiCirEmCirEmPvcCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgApiCirEmCirEmPvcCalls.setStatus('current')
cgApiCirEmAtmPvcCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgApiCirEmAtmPvcCalls.setStatus('current')
cgApiAtmAtmPvcCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgApiAtmAtmPvcCalls.setStatus('current')
cgApiPointToPointSvcCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgApiPointToPointSvcCalls.setStatus('current')
cgApiPointToMultiPointSvcCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgApiPointToMultiPointSvcCalls.setStatus('current')
cgApiPointToMultiPointParties = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgApiPointToMultiPointParties.setStatus('current')
callContrlResAllocApply = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callContrlResAllocApply.setStatus('current')
callContrlResAllocUsage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 60), Integer32().clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: callContrlResAllocUsage.setStatus('current')
siteFirmwarePatchNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFirmwarePatchNumber.setStatus('current')
spvcActRestartAll = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spvcActAtmRestartAll", 1), ("spvcActCeRestartAll", 2), ("spvcActTeRestartAll", 3), ("spvcActFrRestartAll", 4))).clone('spvcActAtmRestartAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcActRestartAll.setStatus('current')
cgSvcCutThroughOption = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cgSvcAcImplicitCutThrough", 1), ("cgSvcCgExplicitCutThrough", 2))).clone('cgSvcAcImplicitCutThrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgSvcCutThroughOption.setStatus('current')
sgApiCirEmEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sgApiCirEmEndPoints.setStatus('current')
sgApiAtmSvcEndPoints = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sgApiAtmSvcEndPoints.setStatus('current')
siteRemoteMgrSrcAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ibm", 2), ("interface", 3))).clone('interface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrSrcAddr1.setStatus('current')
siteRemoteMgrSrcAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ibm", 2), ("interface", 3))).clone('interface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrSrcAddr2.setStatus('current')
siteRemoteMgrSrcAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ibm", 2), ("interface", 3))).clone('interface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrSrcAddr3.setStatus('current')
siteRemoteMgrSrcAddr4 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ibm", 2), ("interface", 3))).clone('interface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrSrcAddr4.setStatus('current')
siteRemoteMgrSrcAddr5 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ibm", 2), ("interface", 3))).clone('interface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteRemoteMgrSrcAddr5.setStatus('current')
spvcFrPointToPointCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 71), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcFrPointToPointCalls.setStatus('current')
inBandAppAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inBandAppAtmAddress.setStatus('current')
inBandAppAtmAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("e164nsap", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inBandAppAtmAddrType.setStatus('current')
atmArpServer2RemoteAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServer2RemoteAtmAddress.setStatus('current')
atmArpServer2RemoteAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("e164nsap", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServer2RemoteAddrType.setStatus('current')
tasmMaxAnnceDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 36)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmMaxAnnceDiskSpace.setStatus('current')
tasmMaxAnnce = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmMaxAnnce.setStatus('current')
tasmMaxStdTones = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmMaxStdTones.setStatus('current')
tasmMemoryAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("re-initialize", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmMemoryAction.setStatus('current')
tasAnnceTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 80), )
if mibBuilder.loadTexts: tasAnnceTable.setStatus('current')
tasAnnceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 80, 1), ).setIndexNames((0, "ACMIB", "tasAnnceId"))
if mibBuilder.loadTexts: tasAnnceEntry.setStatus('current')
tasAnnceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 80, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tasAnnceId.setStatus('current')
tasAnnceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 80, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("voice", 1), ("toneVoice", 2), ("userTones", 3), ("music", 4), ("musicVoice", 5), ("toneMusic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasAnnceType.setStatus('current')
tasAnnceCmprsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 80, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uncompressed", 1), ("compress8k", 2), ("compress16k", 3), ("compress32k", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasAnnceCmprsType.setStatus('current')
tasAnnceValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 80, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("olderVersion", 2), ("corrupted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasAnnceValid.setStatus('current')
tasAnnceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 80, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasAnnceDescription.setStatus('current')
tasToneConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81), )
if mibBuilder.loadTexts: tasToneConfigTable.setStatus('current')
tasToneConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1), ).setIndexNames((0, "ACMIB", "tasToneId"))
if mibBuilder.loadTexts: tasToneConfigEntry.setStatus('current')
tasToneId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: tasToneId.setStatus('current')
tasToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dialTone", 1), ("reorderTone", 2), ("sitTone", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasToneType.setStatus('current')
tasToneFirstFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasToneFirstFreq.setStatus('current')
tasToneSecondFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasToneSecondFreq.setStatus('current')
tasToneThirdFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasToneThirdFreq.setStatus('current')
tasToneOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasToneOnTime.setStatus('current')
tasToneOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasToneOffTime.setStatus('current')
tasToneLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 81, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasToneLevel.setStatus('current')
atmArpServerAtmAddr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServerAtmAddr.setStatus('current')
atmArpServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("e164nsap", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpServerAddrType.setStatus('current')
spvcPointToMultiPointCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 84), Integer32().clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcPointToMultiPointCalls.setStatus('current')
spvcPointToMultiPointParties = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 85), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcPointToMultiPointParties.setStatus('current')
consoleIPAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 86), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleIPAddr1.setStatus('current')
consoleIPAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 87), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleIPAddr2.setStatus('current')
consoleIPAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 88), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleIPAddr3.setStatus('current')
consolePort1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePort1.setStatus('current')
consolePort2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePort2.setStatus('current')
consolePort3 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePort3.setStatus('current')
featureTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 92), )
if mibBuilder.loadTexts: featureTable.setStatus('current')
featureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 92, 1), ).setIndexNames((0, "ACMIB", "featureId"))
if mibBuilder.loadTexts: featureEntry.setStatus('current')
featureId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 92, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pnni", 1), ("gr303", 2), ("vipr", 3), ("h248", 4))))
if mibBuilder.loadTexts: featureId.setStatus('current')
featureStaticMem = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 92, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureStaticMem.setStatus('current')
featureDesiredStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 92, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featureDesiredStatus.setStatus('current')
featureCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 92, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureCurrentStatus.setStatus('current')
mediaGatewayControlType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sapphire", 1), ("h248", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mediaGatewayControlType.setStatus('current')
dspResourceTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 94), )
if mibBuilder.loadTexts: dspResourceTable.setStatus('current')
dspResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 94, 1), ).setIndexNames((0, "ACMIB", "dspResourceId"))
if mibBuilder.loadTexts: dspResourceEntry.setStatus('current')
dspResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 94, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("algoSet1-aal2-non-multiplexed", 1), ("algoSet1-aal2-std", 2), ("algoSet2-aal2-non-multiplexed", 3), ("algoSet2-aal2-std", 4), ("algoSet3-aal2-non-multiplexed", 5), ("algoSet3-aal2-std", 6), ("algoSet5-aal1", 7), ("algoSet6-aal2-std", 8), ("tone-annce-cas", 9), ("tone-annce-tas", 10))))
if mibBuilder.loadTexts: dspResourceId.setStatus('current')
dspResourceAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 94, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspResourceAvail.setStatus('current')
dspResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 94, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspResourceUsed.setStatus('current')
dspResourceUsedFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 94, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspResourceUsedFailed.setStatus('current')
dspResourceAvailFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 94, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspResourceAvailFailed.setStatus('current')
tasmMaxDigitControlBlocks = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmMaxDigitControlBlocks.setStatus('current')
tasmMaxTestControlBlocks = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmMaxTestControlBlocks.setStatus('current')
tasmMaxMemResvd = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasmMaxMemResvd.setStatus('current')
tasmControlBlockResAllocUsage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasmControlBlockResAllocUsage.setStatus('current')
tasmAnnceCacheMemResAllocUsage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasmAnnceCacheMemResAllocUsage.setStatus('current')
siteAlternateGatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 100), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteAlternateGatewayAddr.setStatus('current')
ipThrottlingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101))
ipThrottlingFeatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipThrottlingFeatureStatus.setStatus('current')
ipThrottlingAllowedInFrameRate = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipThrottlingAllowedInFrameRate.setStatus('current')
ipThrottlingLeakyBucketSize = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipThrottlingLeakyBucketSize.setStatus('current')
ipThrottlingStatsOdometerTimer = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThrottlingStatsOdometerTimer.setStatus('current')
ipThrottlingStatsOdometerReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipThrottlingStatsOdometerReset.setStatus('current')
ipThrottlingInPackets = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThrottlingInPackets.setStatus('current')
ipThrottlingInPacketsPassedEi = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThrottlingInPacketsPassedEi.setStatus('current')
ipThrottlingInPacketsDroppedEi = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThrottlingInPacketsDroppedEi.setStatus('current')
ipThrottlingInPacketsPassedIBM = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThrottlingInPacketsPassedIBM.setStatus('current')
ipThrottlingInPacketsDroppedIBM = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 101, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipThrottlingInPacketsDroppedIBM.setStatus('current')
csSapphireInterfaceAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 102), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csSapphireInterfaceAddress.setStatus('current')
trapActivationTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 103), )
if mibBuilder.loadTexts: trapActivationTable.setStatus('current')
trapActivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 103, 1), ).setIndexNames((0, "ACMIB", "trapGroupId"), (0, "ACMIB", "trapIndex"))
if mibBuilder.loadTexts: trapActivationEntry.setStatus('current')
trapGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("systemEvents", 1), ("moduleEvents", 2), ("interfaceEvents", 3), ("connectionEvents", 4))))
if mibBuilder.loadTexts: trapGroupId.setStatus('current')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 103, 1, 2), Integer32())
if mibBuilder.loadTexts: trapIndex.setStatus('current')
trapActivationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("permanently-activated", 3))).clone('activated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapActivationStatus.setStatus('current')
trapNames = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 103, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(50, 50)).setFixedLength(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNames.setStatus('current')
resetAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 103, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-all-active", 1), ("set-all-deactive", 2))).clone('set-all-active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAction.setStatus('current')
spvcGlobalPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcGlobalPriorityScheme.setStatus('current')
spvcPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcPriorityScheme.setStatus('current')
spvcTrunkingPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcTrunkingPriorityScheme.setStatus('current')
atmTrunkVccs = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 107), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkVccs.setStatus('current')
atmTrunkNarrowBandCalls = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 108), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkNarrowBandCalls.setStatus('current')
dspResourceFeatureConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 109))
dspReroutingFeature = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 1, 109, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto-rerouting-enabled", 2))).clone('auto-rerouting-enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspReroutingFeature.setStatus('current')
cardTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1), )
if mibBuilder.loadTexts: cardTable.setStatus('current')
cardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1), ).setIndexNames((0, "ACMIB", "cardSlot"))
if mibBuilder.loadTexts: cardEntry.setStatus('current')
cardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cardSlot.setStatus('current')
cardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64))).clone(namedValues=NamedValues(("none", 1), ("taxi", 2), ("oC-3c", 3), ("dS3-ATM", 4), ("dS1-CE", 5), ("dS1-ATM", 6), ("e1-CE", 7), ("e3-ATM", 8), ("highSpeed", 9), ("mSerial", 10), ("dSP1", 11), ("tWStation", 12), ("tWOffice", 13), ("cPU", 14), ("stratum", 15), ("pwrSupply", 16), ("protectionCard", 17), ("e1-ATM", 18), ("ethernet", 19), ("enhDS1", 20), ("enhE1", 21), ("oC-3cMMAQ", 22), ("oC-3cMMTS", 23), ("oC-3cSMAQ", 24), ("oC-3cSMTS", 25), ("sTM-1SMAQ", 26), ("sTM-1SMTS", 27), ("sTM-1MMAQ", 28), ("sTM-1MMTS", 29), ("dS3-FR", 30), ("dSP2A", 31), ("dS1-IMA", 32), ("e1-IMA", 33), ("alarm", 34), ("dSP2B", 35), ("aps-OC-3cSM", 36), ("aps-OC-3cMM", 37), ("msp-STM-1SM", 38), ("msp-STM-1MM", 39), ("cH-DS3", 40), ("cH-STS1", 41), ("rT-S", 42), ("cC-Server", 43), ("hD-E1", 44), ("hD-DS1", 45), ("dS3-IMA", 46), ("dSP2C", 47), ("tasm", 48), ("mD-DS1", 49), ("quadSerial", 50), ("mD-DS1-IMA", 51), ("mD-E1-IMA", 52), ("hD-DS1-IMA", 53), ("hD-E1-IMA", 54), ("chDS3STS1-3P", 55), ("unstDS3E3-3P", 56), ("dS3E3-ATM-3P", 57), ("oC12c-STM4-MM", 58), ("oC12c-STM4-SM", 59), ("dSP2D", 60), ("ethernet-4P", 61), ("chDS3STS1-3P-Prot", 62), ("alarm-fan", 63), ("dS1-Nx64CAS", 64))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardType.setStatus('current')
cardProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("protected", 2), ("wrongType", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProtectionStatus.setStatus('current')
cardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("standby", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperStatus.setStatus('current')
cardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("switchProtection", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminStatus.setStatus('current')
cardAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noAlarm", 1), ("wrongCardType", 2), ("lineFailed", 3), ("cardRemoved", 4), ("referenceClockFailed", 5), ("compositeClockFailed", 6), ("overload", 7), ("plus5vFailed", 8), ("plus120vFailed", 9), ("minus48vFailed", 10), ("unknownAlarm", 11), ("completeClockFailed", 12), ("backplaneCircuitryFailed", 13), ("powerFailed", 14), ("inputPortClkFailed", 15))).clone('noAlarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardAlarmStatus.setStatus('current')
cardCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCleiCode.setStatus('current')
cardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardRevision.setStatus('current')
cardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerialNumber.setStatus('current')
cardOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("dS3", 2), ("e3", 3), ("sTS1e", 4), ("oC12", 5), ("sTM4", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardOperatingMode.setStatus('current')
protectionConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unprotected", 1), ("protection", 2), ("working", 3))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionConfigMode.setStatus('current')
protectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inservice-Active", 2), ("inservice-Standby", 3), ("outOfService-Active", 4), ("outOfService-Standby", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionStatus.setStatus('current')
protectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionSlot.setStatus('current')
taxiPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 2), )
if mibBuilder.loadTexts: taxiPortConfigTable.setStatus('current')
taxiPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 2, 1), ).setIndexNames((0, "ACMIB", "taxiPortId"))
if mibBuilder.loadTexts: taxiPortConfigEntry.setStatus('current')
taxiPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: taxiPortId.setStatus('current')
taxiPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("taxi100", 1), ("taxi140", 2))).clone('taxi100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taxiPortType.setStatus('current')
taxiLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: taxiLineStatus.setStatus('current')
taxiOutputTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullRate", 1), ("halfRate", 2))).clone('fullRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taxiOutputTransferRate.setStatus('current')
ds3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3), )
if mibBuilder.loadTexts: ds3PortConfigTable.setStatus('current')
ds3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1), ).setIndexNames((0, "ACMIB", "ds3PortId"))
if mibBuilder.loadTexts: ds3PortConfigEntry.setStatus('current')
ds3PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: ds3PortId.setStatus('current')
ds3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbitParity", 1), ("clearChannel", 2), ("m13", 3), ("m23", 4))).clone('cbitParity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LineType.setStatus('current')
ds3LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("b3zs", 1))).clone('b3zs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LineCoding.setStatus('current')
ds3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2), ("lineLoop", 3), ("payloadLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LoopbackConfig.setStatus('current')
ds3TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("cardFreeRun", 3), ("adaptiveTiming", 4))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TransmitClockSource.setStatus('current')
ds3LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LineStatus.setStatus('current')
ds3LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LineBuildOut.setStatus('current')
ds3LineScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LineScramble.setStatus('current')
ds3CellMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plcp", 1), ("directMapping", 2))).clone('plcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3CellMapping.setStatus('current')
ds3SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCode", 1), ("lineLoopCode", 2), ("deactivateCode", 3), ("testPattern", 4))).clone('noCode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3SendCode.setStatus('current')
ds3OutputTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3OutputTxRate.setStatus('current')
msPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4), )
if mibBuilder.loadTexts: msPortConfigTable.setStatus('current')
msPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1), ).setIndexNames((0, "ACMIB", "msPortId"))
if mibBuilder.loadTexts: msPortConfigEntry.setStatus('current')
msPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 1), IntfIndex())
if mibBuilder.loadTexts: msPortId.setStatus('current')
msLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("nrz", 1))).clone('nrz')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msLineCoding.setStatus('current')
msBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503))).clone(namedValues=NamedValues(("baud300", 1), ("baud600", 2), ("baud900", 3), ("baud1200", 4), ("baud1800", 5), ("baud2400", 6), ("baud3600", 7), ("baud4800", 8), ("baud7200", 9), ("baud9600", 10), ("baud14400", 11), ("baud19200", 12), ("baud28800", 13), ("baud38400", 14), ("baud57600", 15), ("baud76800", 16), ("baud115200", 17), ("baud16k", 18), ("baud32k", 19), ("baud56k", 20), ("baud64k", 21), ("baud112k", 22), ("baud128k", 23), ("baud168k", 24), ("baud192k", 25), ("baud224k", 26), ("baud256k", 27), ("baud280k", 28), ("baud320k", 29), ("baud336k", 30), ("baud384k", 31), ("baud392k", 32), ("baud448k", 33), ("baud504k", 34), ("baud512k", 35), ("baud560k", 36), ("baud576k", 37), ("baud616k", 38), ("baud640k", 39), ("baud672k", 40), ("baud704k", 41), ("baud728k", 42), ("baud768k", 43), ("baud784k", 44), ("baud832k", 45), ("baud840k", 46), ("baud896k", 47), ("baud952k", 48), ("baud960k", 49), ("baud1008k", 50), ("baud1024k", 51), ("baud1064k", 52), ("baud1088k", 53), ("baud1120k", 54), ("baud1152k", 55), ("baud1176k", 56), ("baud1216k", 57), ("baud1232k", 58), ("baud1280k", 59), ("baud1288k", 60), ("baud1344k", 61), ("baud1400k", 62), ("baud1408k", 63), ("baud1456k", 64), ("baud1472k", 65), ("baud1512k", 66), ("baud1536k", 67), ("baud1568k", 68), ("baud1600k", 69), ("baud1624k", 70), ("baud1664k", 71), ("baud1680k", 72), ("baud1728k", 73), ("baud1736k", 74), ("baud1792k", 75), ("baud1856k", 76), ("baud1920k", 77), ("baud1984k", 78), ("baud2048k", 79), ("baud75", 80), ("baud1848k", 81), ("baud1904k", 82), ("baud1960k", 83), ("baud2016k", 84), ("baud2072k", 85), ("baud2112k", 86), ("baud2128k", 87), ("baud2176k", 88), ("baud2184k", 89), ("baud2240k", 90), ("baud2296k", 91), ("baud2304k", 92), ("baud2352k", 93), ("baud2368k", 94), ("baud2408k", 95), ("baud2432k", 96), ("baud2464k", 97), ("baud2496k", 98), ("baud2520k", 99), ("baud2560k", 100), ("baud2576k", 101), ("baud2624k", 102), ("baud2632k", 103), ("baud2688k", 104), ("baud2744k", 105), ("baud2752k", 106), ("baud2800k", 107), ("baud2816k", 108), ("baud2856k", 109), ("baud2880k", 110), ("baud2912k", 111), ("baud2944k", 112), ("baud2968k", 113), ("baud3008k", 114), ("baud3024k", 115), ("baud3072k", 116), ("baud3080k", 117), ("baud3136k", 118), ("baud3192k", 119), ("baud3200k", 120), ("baud3248k", 121), ("baud3264k", 122), ("baud3304k", 123), ("baud3328k", 124), ("baud3360k", 125), ("baud3392k", 126), ("baud3416k", 127), ("baud3456k", 128), ("baud3472k", 129), ("baud3520k", 130), ("baud3528k", 131), ("baud3584k", 132), ("baud3640k", 133), ("baud3648k", 134), ("baud3696k", 135), ("baud3712k", 136), ("baud3752k", 137), ("baud3776k", 138), ("baud3808k", 139), ("baud3840k", 140), ("baud3864k", 141), ("baud3904k", 142), ("baud3920k", 143), ("baud3968k", 144), ("baud3976k", 145), ("baud4032k", 146), ("baud4088k", 147), ("baud4096k", 148), ("baud4144k", 149), ("baud4160k", 150), ("baud4200k", 151), ("baud4224k", 152), ("baud4256k", 153), ("baud4288k", 154), ("baud4312k", 155), ("baud4352k", 156), ("baud4368k", 157), ("baud4416k", 158), ("baud4424k", 159), ("baud4480k", 160), ("baud4536k", 161), ("baud4544k", 162), ("baud4592k", 163), ("baud4608k", 164), ("baud4648k", 165), ("baud4672k", 166), ("baud4704k", 167), ("baud4736k", 168), ("baud4760k", 169), ("baud4800k", 170), ("baud4816k", 171), ("baud4864k", 172), ("baud4872k", 173), ("baud4928k", 174), ("baud4984k", 175), ("baud4992k", 176), ("baud5040k", 177), ("baud5056k", 178), ("baud5096k", 179), ("baud5120k", 180), ("baud5152k", 181), ("baud5184k", 182), ("baud5208k", 183), ("baud5248k", 184), ("baud5264k", 185), ("baud5312k", 186), ("baud5320k", 187), ("baud5376k", 188), ("baud5432k", 189), ("baud5440k", 190), ("baud5488k", 191), ("baud5504k", 192), ("baud5544k", 193), ("baud5568k", 194), ("baud5600k", 195), ("baud5632k", 196), ("baud5656k", 197), ("baud5696k", 198), ("baud5712k", 199), ("baud5760k", 200), ("baud5768k", 201), ("baud5824k", 202), ("baud5880k", 203), ("baud5888k", 204), ("baud5936k", 205), ("baud5952k", 206), ("baud5992k", 207), ("baud6016k", 208), ("baud6048k", 209), ("baud6080k", 210), ("baud6104k", 211), ("baud6144k", 212), ("baud6160k", 213), ("baud6208k", 214), ("baud6216k", 215), ("baud6272k", 216), ("baud6328k", 217), ("baud6336k", 218), ("baud6384k", 219), ("baud6400k", 220), ("baud6440k", 221), ("baud6464k", 222), ("baud6496k", 223), ("baud6528k", 224), ("baud6552k", 225), ("baud6592k", 226), ("baud6608k", 227), ("baud6656k", 228), ("baud6664k", 229), ("baud6720k", 230), ("baud6776k", 231), ("baud6784k", 232), ("baud6832k", 233), ("baud6848k", 234), ("baud6888k", 235), ("baud6912k", 236), ("baud6944k", 237), ("baud6976k", 238), ("baud7000k", 239), ("baud7040k", 240), ("baud7056k", 241), ("baud7104k", 242), ("baud7112k", 243), ("baud7168k", 244), ("baud7224k", 245), ("baud7232k", 246), ("baud7280k", 247), ("baud7296k", 248), ("baud7336k", 249), ("baud7360k", 250), ("baud7392k", 251), ("baud7424k", 252), ("baud7448k", 253), ("baud7488k", 254), ("baud7504k", 255)) + NamedValues(("baud7552k", 256), ("baud7560k", 257), ("baud7616k", 258), ("baud7680k", 259), ("baud7672k", 260), ("baud7728k", 261), ("baud7744k", 262), ("baud7784k", 263), ("baud7808k", 264), ("baud7840k", 265), ("baud7872k", 266), ("baud7896k", 267), ("baud7936k", 268), ("baud7952k", 269), ("baud8000k", 270), ("baud8008k", 271), ("baud8064k", 272), ("baud8120k", 273), ("baud8128k", 274), ("baud8176k", 275), ("baud8192k", 276), ("baud8232k", 277), ("baud8256k", 278), ("baud8288k", 279), ("baud8320k", 280), ("baud8344k", 281), ("baud8384k", 282), ("baud8400k", 283), ("baud8448k", 284), ("baud8456k", 285), ("baud8512k", 286), ("baud8568k", 287), ("baud8576k", 288), ("baud8624k", 289), ("baud8640k", 290), ("baud8680k", 291), ("baud8704k", 292), ("baud8736k", 293), ("baud8768k", 294), ("baud8792k", 295), ("baud8832k", 296), ("baud8848k", 297), ("baud8896k", 298), ("baud8904k", 299), ("baud8960k", 300), ("baud9016k", 301), ("baud9024k", 302), ("baud9072k", 303), ("baud9088k", 304), ("baud9128k", 305), ("baud9152k", 306), ("baud9184k", 307), ("baud9216k", 308), ("baud9240k", 309), ("baud9280k", 310), ("baud9296k", 311), ("baud9344k", 312), ("baud9352k", 313), ("baud9408k", 314), ("baud9464k", 315), ("baud9472k", 316), ("baud9520k", 317), ("baud9536k", 318), ("baud9576k", 319), ("baud9600k", 320), ("baud9632k", 321), ("baud9664k", 322), ("baud9688k", 323), ("baud9728k", 324), ("baud9744k", 325), ("baud9792k", 326), ("baud9800k", 327), ("baud9856k", 328), ("baud9912k", 329), ("baud9920k", 330), ("baud9968k", 331), ("baud9984k", 332), ("baud10024k", 333), ("baud10048k", 334), ("baud10080k", 335), ("baud10112k", 336), ("baud10136k", 337), ("baud10176k", 338), ("baud10192k", 339), ("baud10240k", 340), ("baud10248k", 341), ("baud10304k", 342), ("baud10360k", 343), ("baud10368k", 344), ("baud10416k", 345), ("baud10432k", 346), ("baud10472k", 347), ("baud10496k", 348), ("baud10528k", 349), ("baud10560k", 350), ("baud10584k", 351), ("baud10624k", 352), ("baud10640k", 353), ("baud10688k", 354), ("baud10696k", 355), ("baud10752k", 356), ("baud10808k", 357), ("baud10816k", 358), ("baud10864k", 359), ("baud10880k", 360), ("baud10920k", 361), ("baud10944k", 362), ("baud10976k", 363), ("baud11008k", 364), ("baud11032k", 365), ("baud11072k", 366), ("baud11088k", 367), ("baud11136k", 368), ("baud11144k", 369), ("baud11200k", 370), ("baud11256k", 371), ("baud11264k", 372), ("baud11312k", 373), ("baud11328k", 374), ("baud11368k", 375), ("baud11392k", 376), ("baud11424k", 377), ("baud11456k", 378), ("baud11480k", 379), ("baud11520k", 380), ("baud11536k", 381), ("baud11584k", 382), ("baud11592k", 383), ("baud11648k", 384), ("baud11704k", 385), ("baud11712k", 386), ("baud11760k", 387), ("baud11776k", 388), ("baud11816k", 389), ("baud11840k", 390), ("baud11872k", 391), ("baud11904k", 392), ("baud11928k", 393), ("baud11968k", 394), ("baud11984k", 395), ("baud12032k", 396), ("baud12040k", 397), ("baud12096k", 398), ("baud12152k", 399), ("baud12160k", 400), ("baud12208k", 401), ("baud12224k", 402), ("baud12264k", 403), ("baud12288k", 404), ("baud12320k", 405), ("baud12352k", 406), ("baud12376k", 407), ("baud12416k", 408), ("baud12432k", 409), ("baud12480k", 410), ("baud12488k", 411), ("baud12544k", 412), ("baud12600k", 413), ("baud12608k", 414), ("baud12656k", 415), ("baud12672k", 416), ("baud12712k", 417), ("baud12736k", 418), ("baud12768k", 419), ("baud12800k", 420), ("baud12824k", 421), ("baud12864k", 422), ("baud12880k", 423), ("baud12928k", 424), ("baud12936k", 425), ("baud12992k", 426), ("baud13048k", 427), ("baud13056k", 428), ("baud13104k", 429), ("baud13120k", 430), ("baud13160k", 431), ("baud13184k", 432), ("baud13216k", 433), ("baud13248k", 434), ("baud13272k", 435), ("baud13312k", 436), ("baud13328k", 437), ("baud13376k", 438), ("baud13384k", 439), ("baud13440k", 440), ("baud13496k", 441), ("baud13504k", 442), ("baud13552k", 443), ("baud13568k", 444), ("baud13608k", 445), ("baud13632k", 446), ("baud13664k", 447), ("baud13696k", 448), ("baud13720k", 449), ("baud13760k", 450), ("baud13776k", 451), ("baud13824k", 452), ("baud13832k", 453), ("baud13888k", 454), ("baud13944k", 455), ("baud13952k", 456), ("baud14000k", 457), ("baud14016k", 458), ("baud14056k", 459), ("baud14080k", 460), ("baud14112k", 461), ("baud14144k", 462), ("baud14168k", 463), ("baud14208k", 464), ("baud14224k", 465), ("baud14272k", 466), ("baud14280k", 467), ("baud14336k", 468), ("baud14400k", 469), ("baud14464k", 470), ("baud14528k", 471), ("baud14592k", 472), ("baud14656k", 473), ("baud14720k", 474), ("baud14784k", 475), ("baud14848k", 476), ("baud14912k", 477), ("baud14976k", 478), ("baud15040k", 479), ("baud15104k", 480), ("baud15168k", 481), ("baud15232k", 482), ("baud15296k", 483), ("baud15360k", 484), ("baud15424k", 485), ("baud15488k", 486), ("baud15552k", 487), ("baud15616k", 488), ("baud15680k", 489), ("baud15744k", 490), ("baud15808k", 491), ("baud15872k", 492), ("baud15936k", 493), ("baud16000k", 494), ("baud16064k", 495), ("baud16128k", 496), ("baud16192k", 497), ("baud16256k", 498), ("baud16320k", 499), ("baud16384k", 500), ("baud1544k", 501), ("baud230400", 502), ("baud150", 503))).clone('baud300')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msBaudRate.setStatus('current')
msProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rs232", 1), ("rs449", 2), ("rs530", 3), ("v35", 4), ("x21", 5), ("kg", 6), ("rs530A", 7))).clone('rs449')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msProtocol.setStatus('current')
msEquipmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msEquipmentType.setStatus('current')
msRs232XmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronous", 1), ("asynchronous", 2))).clone('synchronous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRs232XmitMode.setStatus('current')
msRs232Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRs232Parity.setStatus('current')
msRs232DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eight", 1), ("seven", 2), ("six", 3))).clone('eight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRs232DataBits.setStatus('current')
msRs232StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRs232StopBits.setStatus('current')
msTxDataClkSrcForDte = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localTiming", 1), ("txRxTiming", 2), ("txTiming", 3))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTxDataClkSrcForDte.setStatus('current')
msTxDataClkSrcForDce = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localTiming", 1), ("loopTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTxDataClkSrcForDce.setStatus('current')
msRxDataClkSrcForDce = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localTiming", 1), ("externalTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRxDataClkSrcForDce.setStatus('current')
msRxClkPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("inverted", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRxClkPolarity.setStatus('current')
msTxClkPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("inverted", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTxClkPolarity.setStatus('current')
msKgResync = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msKgResync.setStatus('current')
msHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("observed", 1), ("ignored", 2))).clone('ignored')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msHandshake.setStatus('current')
msSpeedAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSpeedAdaption.setStatus('current')
msBitStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msBitStuffing.setStatus('current')
msLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msLineStatus.setStatus('current')
msRxDataPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("inverted", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msRxDataPolarity.setStatus('current')
msTxDataPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("inverted", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTxDataPolarity.setStatus('current')
msLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2), ("lineLoop", 3))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msLoopbackConfig.setStatus('current')
msLOSDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msLOSDetection.setStatus('current')
ds1PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5), )
if mibBuilder.loadTexts: ds1PortConfigTable.setStatus('current')
ds1PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1), ).setIndexNames((0, "ACMIB", "ds1PortId"))
if mibBuilder.loadTexts: ds1PortConfigEntry.setStatus('current')
ds1PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: ds1PortId.setStatus('current')
ds1Channelization = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1Channelization.setStatus('current')
ds1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1LineType.setStatus('current')
ds1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1LineCoding.setStatus('current')
ds1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2), ("lineLoop", 3), ("payloadLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1LoopbackConfig.setStatus('current')
ds1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("adaptive", 3))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1TransmitClockSource.setStatus('current')
ds1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("upTo133Feet", 1), ("upTo266Feet", 2), ("upTo399Feet", 3), ("upTo533Feet", 4), ("upTo655Feet", 5), ("negative7-5Db", 6), ("negative15Db", 7), ("negative22-5Db", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1LineBuildOut.setStatus('current')
ds1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LineStatus.setStatus('current')
ds1EnhanceFeatureSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1EnhanceFeatureSet1.setStatus('current')
ds1DataTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("structured", 1), ("unstructured", 2))).clone('structured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1DataTransferType.setStatus('current')
ds1OamInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunkCond", 1), ("unframed1s", 2))).clone('trunkCond')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1OamInterworkingType.setStatus('current')
ds1ConnGatewayFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ConnGatewayFeature.setStatus('current')
ds1InLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aNSI", 1), ("ds1-ANI", 2))).clone('aNSI')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1InLineCode.setStatus('current')
oc3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6), )
if mibBuilder.loadTexts: oc3PortConfigTable.setStatus('current')
oc3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6, 1), ).setIndexNames((0, "ACMIB", "oc3PortId"))
if mibBuilder.loadTexts: oc3PortConfigEntry.setStatus('current')
oc3PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: oc3PortId.setStatus('current')
oc3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2), ("lineLoop", 3))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3LoopbackConfig.setStatus('current')
oc3TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3TransmitClockSource.setStatus('current')
oc3LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3LineStatus.setStatus('current')
oc3OutputTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullRate", 1), ("halfRate", 2))).clone('fullRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3OutputTransferRate.setStatus('current')
oc3APSConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unprotected", 1), ("working", 2), ("protection", 3))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSConfiguration.setStatus('current')
oc3APS = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16))
oc3APSPairConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1), )
if mibBuilder.loadTexts: oc3APSPairConfigTable.setStatus('current')
oc3APSPairConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1), ).setIndexNames((0, "ACMIB", "oc3APSPairId"))
if mibBuilder.loadTexts: oc3APSPairConfigEntry.setStatus('current')
oc3APSPairId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: oc3APSPairId.setStatus('current')
oc3APSPairMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2))).clone('unidirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSPairMode.setStatus('current')
oc3APSPairOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2))).clone('nonrevertive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairOption.setStatus('current')
oc3APSPairWorkingSFBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenToMinus4", 1), ("tenToMinus5", 2))).clone('tenToMinus4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSPairWorkingSFBERThreshold.setStatus('current')
oc3APSPairProtectionSFBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenToMinus4", 1), ("tenToMinus5", 2))).clone('tenToMinus4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSPairProtectionSFBERThreshold.setStatus('current')
oc3APSPairWorkingSDBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenToMinus5", 1), ("tenToMinus6", 2), ("tenToMinus7", 3), ("tenToMinus8", 4))).clone('tenToMinus5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSPairWorkingSDBERThreshold.setStatus('current')
oc3APSPairProtectionSDBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenToMinus5", 1), ("tenToMinus6", 2), ("tenToMinus7", 3), ("tenToMinus8", 4))).clone('tenToMinus5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSPairProtectionSDBERThreshold.setStatus('current')
oc3APSPairWTRPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSPairWTRPeriod.setStatus('current')
oc3APSWorkingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSWorkingSlot.setStatus('current')
oc3APSProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSProtectionSlot.setStatus('current')
oc3APSActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSActiveSlot.setStatus('current')
oc3APSPairStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noFailure", 1), ("modeMismatch", 2), ("swByteFailure", 3), ("chMismatch", 4))).clone('noFailure')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairStatus.setStatus('current')
oc3APSPairUserCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noAction", 1), ("manualSwitchToWorkingPort", 2), ("manualSwitchToProtectionPort", 3), ("forcedSwitchToWorkingPort", 4), ("forcedSwitchToProtectionPort", 5), ("lockoutProtection", 6), ("clear", 7))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSPairUserCommand.setStatus('current')
oc3APSPairCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10, 12, 14, 15, 17, 24, 26, 28, 30, 33, 40, 42, 44, 46, 47, 48, 49, 56, 58, 60, 62))).clone(namedValues=NamedValues(("localprotectDoNotRevert", 1), ("localprotectManualSw", 8), ("localprotectSD", 10), ("localprotectSF", 12), ("localprotectForced", 14), ("localprotectLockOut", 15), ("localworkingDoNotRevert", 17), ("localworkingManualSw", 24), ("localworkingSD", 26), ("localworkingSF", 28), ("localworkingForced", 30), ("remoteprotectDoNotRevert", 33), ("remoteprotectManualSw", 40), ("remoteprotectSD", 42), ("remoteprotectSF", 44), ("remoteprotectForced", 46), ("remoteprotectLockOut", 47), ("noRequest", 48), ("remoteworkingDoNotRevert", 49), ("remoteworkingManualSw", 56), ("remoteworkingSD", 58), ("remoteworkingSF", 60), ("remoteworkingForced", 62))).clone('noRequest')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairCurrentState.setStatus('current')
oc3APSPairWorkingLineSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192))).clone(namedValues=NamedValues(("noAlarm", 1), ("signalDegradation", 2), ("signalFailure", 4), ("lostCellDelineation", 8), ("switchByteFailure", 16), ("ais-l", 32), ("ais-p", 64), ("lop", 128), ("lof", 256), ("los", 512), ("moduleFailure", 1024), ("lineLoopBack", 2048), ("protocolFailure", 4096), ("adminOutOfService", 8192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairWorkingLineSignalStatus.setStatus('current')
oc3APSPairProtectionLineSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 16, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192))).clone(namedValues=NamedValues(("noAlarm", 1), ("signalDegradation", 2), ("signalFailure", 4), ("lostCellDelineation", 8), ("switchByteFailure", 16), ("ais-l", 32), ("ais-p", 64), ("lop", 128), ("lof", 256), ("los", 512), ("moduleFailure", 1024), ("lineLoopBack", 2048), ("protocolFailure", 4096), ("adminOutOfService", 8192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairProtectionLineSignalStatus.setStatus('current')
oc3APSPairStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8), )
if mibBuilder.loadTexts: oc3APSPairStatsTable.setStatus('current')
oc3APSPairStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1), ).setIndexNames((0, "ACMIB", "oc3APSPairStatsId"))
if mibBuilder.loadTexts: oc3APSPairStatsEntry.setStatus('current')
oc3APSPairStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: oc3APSPairStatsId.setStatus('current')
oc3APSPairWorkingSFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairWorkingSFDuration.setStatus('current')
oc3APSPairWorkingSDDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairWorkingSDDuration.setStatus('current')
oc3APSPairProtectionSFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairProtectionSFDuration.setStatus('current')
oc3APSPairProtectionSDDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairProtectionSDDuration.setStatus('current')
oc3APSPairTransmitK1K2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairTransmitK1K2Bytes.setStatus('current')
oc3APSPairReceiveK1K2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairReceiveK1K2Bytes.setStatus('current')
oc3APSPairSwitchOverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSPairSwitchOverCount.setStatus('current')
twoWireSourcePortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7), )
if mibBuilder.loadTexts: twoWireSourcePortConfigTable.setStatus('current')
twoWireSourcePortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1), ).setIndexNames((0, "ACMIB", "twoWireSourcePortId"))
if mibBuilder.loadTexts: twoWireSourcePortConfigEntry.setStatus('current')
twoWireSourcePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: twoWireSourcePortId.setStatus('current')
twoWireSourceLoopDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopStart", 1), ("groundStart", 2))).clone('loopStart')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceLoopDetection.setStatus('current')
twoWireSourceDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("dialPulse", 2))).clone('dtmf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceDialMode.setStatus('current')
twoWireSourceLoopBackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoopback", 1), ("facilityLoopback", 2))).clone('noLoopback')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceLoopBackConfig.setStatus('current')
twoWireSourceLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceLineStatus.setStatus('current')
twoWireSourceSignalingBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ab", 1), ("abcd", 2))).clone('ab')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceSignalingBits.setStatus('current')
twoWireSourceRingCadence = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("oneOnThreeOff", 1))).clone('oneOnThreeOff')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceRingCadence.setStatus('current')
twoWireSourceSignalingState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("dtmf", 2), ("ringBack", 3), ("connect", 4), ("onHook", 5), ("ringTrip", 6), ("nearEndDisconnect", 7), ("farEndDisconnect", 8))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceSignalingState.setStatus('current')
twoWireSourceTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("quietTime", 2), ("f-1004Hz", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoWireSourceTestMode.setStatus('current')
highSpeedPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 8), )
if mibBuilder.loadTexts: highSpeedPortConfigTable.setStatus('current')
highSpeedPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 8, 1), ).setIndexNames((0, "ACMIB", "highSpeedPortId"))
if mibBuilder.loadTexts: highSpeedPortConfigEntry.setStatus('current')
highSpeedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: highSpeedPortId.setStatus('current')
highSpeedPortInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedPortInputRate.setStatus('current')
highSpeedPortOutputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedPortOutputRate.setStatus('current')
dspPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 9), )
if mibBuilder.loadTexts: dspPortConfigTable.setStatus('current')
dspPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 9, 1), ).setIndexNames((0, "ACMIB", "dspPortId"))
if mibBuilder.loadTexts: dspPortConfigEntry.setStatus('current')
dspPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspPortId.setStatus('current')
twoWireSinkPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10), )
if mibBuilder.loadTexts: twoWireSinkPortConfigTable.setStatus('current')
twoWireSinkPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1), ).setIndexNames((0, "ACMIB", "twoWireSinkPortId"))
if mibBuilder.loadTexts: twoWireSinkPortConfigEntry.setStatus('current')
twoWireSinkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: twoWireSinkPortId.setStatus('current')
twoWireSinkLoopDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopStart", 1), ("groundStart", 2))).clone('loopStart')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkLoopDetection.setStatus('current')
twoWireSinkDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("dialPulse", 2))).clone('dtmf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkDialMode.setStatus('current')
twoWireSinkLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkLineStatus.setStatus('current')
twoWireSinkSignalingBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ab", 1), ("abcd", 2))).clone('ab')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkSignalingBits.setStatus('current')
twoWireSinkSignalingState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("onHook", 3), ("ringTrip", 4), ("nearEndDisconnect", 5), ("farEndDisconnect", 6))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkSignalingState.setStatus('current')
twoWireSinkTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("quietTime", 2), ("f-1004Hz", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoWireSinkTestMode.setStatus('current')
e3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11), )
if mibBuilder.loadTexts: e3PortConfigTable.setStatus('current')
e3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1), ).setIndexNames((0, "ACMIB", "e3PortId"))
if mibBuilder.loadTexts: e3PortConfigEntry.setStatus('current')
e3PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: e3PortId.setStatus('current')
e3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g832", 1), ("g751", 2))).clone('g832')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3LineType.setStatus('current')
e3LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hdb3", 1))).clone('hdb3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LineCoding.setStatus('current')
e3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2), ("lineLoop", 3), ("payloadLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3LoopbackConfig.setStatus('current')
e3TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("adaptiveTiming", 3))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3TransmitClockSource.setStatus('current')
e3LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LineStatus.setStatus('current')
e3LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('long')).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LineBuildOut.setStatus('current')
e3LineScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3LineScramble.setStatus('current')
e3CellMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("directMapping", 1), ("plcp", 2))).clone('directMapping')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3CellMapping.setStatus('current')
e1PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12), )
if mibBuilder.loadTexts: e1PortConfigTable.setStatus('current')
e1PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1), ).setIndexNames((0, "ACMIB", "e1PortId"))
if mibBuilder.loadTexts: e1PortConfigEntry.setStatus('current')
e1PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: e1PortId.setStatus('current')
e1Channelization = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1Channelization.setStatus('current')
e1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("crc-mf", 1))).clone('crc-mf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineType.setStatus('current')
e1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hdb3", 1))).clone('hdb3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineCoding.setStatus('current')
e1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2), ("lineLoop", 3))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1LoopbackConfig.setStatus('current')
e1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("adaptive", 3))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TransmitClockSource.setStatus('current')
e1LineNationalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("b00000", 1), ("b00001", 2), ("b00010", 3), ("b00011", 4), ("b00100", 5), ("b00101", 6), ("b00110", 7), ("b00111", 8), ("b01000", 9), ("b01001", 10), ("b01010", 11), ("b01011", 12), ("b01100", 13), ("b01101", 14), ("b01110", 15), ("b01111", 16), ("b10000", 17), ("b10001", 18), ("b10010", 19), ("b10011", 20), ("b10100", 21), ("b10101", 22), ("b10110", 23), ("b10111", 24), ("b11000", 25), ("b11001", 26), ("b11010", 27), ("b11011", 28), ("b11100", 29), ("b11101", 30), ("b11110", 31), ("b11111", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1LineNationalBits.setStatus('current')
e1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineStatus.setStatus('current')
e1TS16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cas", 1), ("ccs", 2))).clone('ccs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TS16.setStatus('current')
e1DataTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("structured", 1), ("unstructured", 2))).clone('structured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1DataTransferType.setStatus('current')
e1CRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1CRC4.setStatus('current')
e1OamInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunkCond", 1), ("unframed1s", 2))).clone('trunkCond')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1OamInterworkingType.setStatus('current')
e1EnhanceFeatureSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1EnhanceFeatureSet1.setStatus('current')
e1ConnGatewayFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ConnGatewayFeature.setStatus('current')
ethernetPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 13), )
if mibBuilder.loadTexts: ethernetPortConfigTable.setStatus('current')
ethernetPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 13, 1), ).setIndexNames((0, "ACMIB", "ethernetPortId"))
if mibBuilder.loadTexts: ethernetPortConfigEntry.setStatus('current')
ethernetPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: ethernetPortId.setStatus('current')
ethernetLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l-10BaseT", 1), ("l-100BaseT", 2), ("auto", 3))).clone('l-10BaseT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLinkType.setStatus('current')
ethernetPhysicalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPhysicalAddr.setStatus('current')
ethernetLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetLineStatus.setStatus('current')
ethernetDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetDuplexMode.setStatus('current')
dsp2PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 14), )
if mibBuilder.loadTexts: dsp2PortConfigTable.setStatus('current')
dsp2PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 14, 1), ).setIndexNames((0, "ACMIB", "dsp2PortId"))
if mibBuilder.loadTexts: dsp2PortConfigEntry.setStatus('current')
dsp2PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsp2PortId.setStatus('current')
imaPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 15), )
if mibBuilder.loadTexts: imaPortConfigTable.setStatus('current')
imaPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 15, 1), ).setIndexNames((0, "ACMIB", "imaPortId"))
if mibBuilder.loadTexts: imaPortConfigEntry.setStatus('current')
imaPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaPortId.setStatus('current')
sts1PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17), )
if mibBuilder.loadTexts: sts1PortConfigTable.setStatus('current')
sts1PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1), ).setIndexNames((0, "ACMIB", "sts1PortId"))
if mibBuilder.loadTexts: sts1PortConfigEntry.setStatus('current')
sts1PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 1), IntfIndex())
if mibBuilder.loadTexts: sts1PortId.setStatus('current')
sts1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("b3zs", 1))).clone('b3zs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1LineCoding.setStatus('current')
sts1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2), ("lineLoop", 3), ("payloadLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sts1LoopbackConfig.setStatus('current')
sts1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("cardFreeRun", 3))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sts1TransmitClockSource.setStatus('current')
sts1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sts1LineBuildOut.setStatus('current')
sts1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sts1LineStatus.setStatus('current')
sts1StsPointers = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("floating", 2))).clone('locked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sts1StsPointers.setStatus('current')
sts1VtPointers = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("floating", 2))).clone('locked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sts1VtPointers.setStatus('current')
tasmPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 18), )
if mibBuilder.loadTexts: tasmPortConfigTable.setStatus('current')
tasmPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 18, 1), ).setIndexNames((0, "ACMIB", "tasmPortId"))
if mibBuilder.loadTexts: tasmPortConfigEntry.setStatus('current')
tasmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasmPortId.setStatus('current')
protectionGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19), )
if mibBuilder.loadTexts: protectionGroupConfigTable.setStatus('current')
protectionGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1), ).setIndexNames((0, "ACMIB", "protectionSlotId"))
if mibBuilder.loadTexts: protectionGroupConfigEntry.setStatus('current')
protectionSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: protectionSlotId.setStatus('current')
workingSlotBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: workingSlotBitmap.setStatus('current')
protectionCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("forcedSwitchOverToProtection", 2))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionCommand.setStatus('current')
protectionCommandSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protectionCommandSlotId.setStatus('current')
protectionGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inservice-Active", 2), ("inservice-Standby", 3), ("outOfService-Active", 4), ("outOfService-Standby", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionGroupStatus.setStatus('current')
workingSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workingSlotId.setStatus('current')
workingFailedBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: workingFailedBitmap.setStatus('current')
protectionActiveCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionActiveCounter.setStatus('current')
protectionOOSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 2, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionOOSCounter.setStatus('current')
taxiChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 1), )
if mibBuilder.loadTexts: taxiChannelConfigTable.setStatus('current')
taxiChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 1, 1), ).setIndexNames((0, "ACMIB", "taxiChannelId"))
if mibBuilder.loadTexts: taxiChannelConfigEntry.setStatus('current')
taxiChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 1, 1, 1), IntfIndex())
if mibBuilder.loadTexts: taxiChannelId.setStatus('current')
taxiChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("atmUni4-0", 6))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taxiChannelIfType.setStatus('current')
taxiChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taxiChannelSecuFeature.setStatus('current')
ds3ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 2), )
if mibBuilder.loadTexts: ds3ChannelConfigTable.setStatus('current')
ds3ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 2, 1), ).setIndexNames((0, "ACMIB", "ds3ChannelId"))
if mibBuilder.loadTexts: ds3ChannelConfigEntry.setStatus('current')
ds3ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 2, 1, 1), IntfIndex())
if mibBuilder.loadTexts: ds3ChannelId.setStatus('current')
ds3ChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("frameRelayUni", 6), ("frameRelayNni", 7), ("atmPnni1-0", 8), ("atmUni4-0", 9), ("circuitEmulation", 10))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3ChannelIfType.setStatus('current')
ds3ChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3ChannelSecuFeature.setStatus('current')
ds1ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3), )
if mibBuilder.loadTexts: ds1ChannelConfigTable.setStatus('current')
ds1ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1), ).setIndexNames((0, "ACMIB", "ds1ChannelId"))
if mibBuilder.loadTexts: ds1ChannelConfigEntry.setStatus('current')
ds1ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 1), IntfIndex())
if mibBuilder.loadTexts: ds1ChannelId.setStatus('current')
ds1ChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("circuitEmulation", 6), ("frameRelayUni", 7), ("hdlcPassThrough", 8), ("pri-isdn-network", 9), ("dbCirEm", 10), ("frameRelayNni", 11), ("pri-isdn-user", 12), ("atmIma", 13), ("atmPnni1-0", 14), ("casTrunkLine", 15), ("atmUni4-0", 16), ("gr303", 17))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ChannelIfType.setStatus('current')
ds1ChannelDs0Map = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ChannelDs0Map.setStatus('current')
ds1ChannelCellMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("directMapping", 1), ("none", 2))).clone('directMapping')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ChannelCellMapping.setStatus('current')
ds1ChannelInputCodingRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("muLawPCM", 2), ("aLawPCM", 3), ("digital", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ChannelInputCodingRule.setStatus('current')
ds1ChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ChannelSecuFeature.setStatus('current')
ds1ChannelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ChannelSignaling.setStatus('current')
ds1ChannelCellScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1ChannelCellScramble.setStatus('current')
msChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4), )
if mibBuilder.loadTexts: msChannelConfigTable.setStatus('current')
msChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4, 1), ).setIndexNames((0, "ACMIB", "msChannelId"))
if mibBuilder.loadTexts: msChannelConfigEntry.setStatus('current')
msChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4, 1, 1), IntfIndex())
if mibBuilder.loadTexts: msChannelId.setStatus('current')
msChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("circuitEmulation", 6), ("terminalEmulation", 7), ("frameRelayUni", 8), ("hdlcPassThrough", 9), ("frameRelayNni", 10), ("atmPnni1-0", 11), ("atmUni4-0", 12))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msChannelIfType.setStatus('current')
msChannelCellBearingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lanet", 1), ("ccittDirectMapping", 2), ("none", 3))).clone('lanet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msChannelCellBearingMode.setStatus('current')
msChannelCellBearingAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("noiseTolerant", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msChannelCellBearingAddrMode.setStatus('current')
msChannelCellBearingPayloadFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dynamic", 1), ("threeEighthsRate", 2), ("oneQuarterRate", 3), ("oneEighthRate", 4))).clone('dynamic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: msChannelCellBearingPayloadFec.setStatus('current')
msChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msChannelSecuFeature.setStatus('current')
oc3ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 5), )
if mibBuilder.loadTexts: oc3ChannelConfigTable.setStatus('current')
oc3ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 5, 1), ).setIndexNames((0, "ACMIB", "oc3ChannelId"))
if mibBuilder.loadTexts: oc3ChannelConfigEntry.setStatus('current')
oc3ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 5, 1, 1), IntfIndex())
if mibBuilder.loadTexts: oc3ChannelId.setStatus('current')
oc3ChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("atmPnni1-0", 6), ("atmUni4-0", 7), ("atmVnnUni3-1", 8))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3ChannelIfType.setStatus('current')
oc3ChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3ChannelSecuFeature.setStatus('current')
twoWireSourceChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6), )
if mibBuilder.loadTexts: twoWireSourceChannelConfigTable.setStatus('current')
twoWireSourceChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1), ).setIndexNames((0, "ACMIB", "twoWireSourceChannelId"))
if mibBuilder.loadTexts: twoWireSourceChannelConfigEntry.setStatus('current')
twoWireSourceChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 1), IntfIndex())
if mibBuilder.loadTexts: twoWireSourceChannelId.setStatus('current')
twoWireSourceChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unconfigured", 1), ("circuitEmulation", 2))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoWireSourceChannelIfType.setStatus('current')
twoWireSourceChannelConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoWireSourceChannelConnectionType.setStatus('current')
twoWireSourceChannelCompandingLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("muLawPCM", 1), ("aLawPCM", 2))).clone('muLawPCM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceChannelCompandingLaw.setStatus('current')
twoWireSourceChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceChannelSecuFeature.setStatus('current')
twoWireSourceChannelVoiceCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("adpcm32k", 2), ("adpcm16k", 3), ("adpcm8k", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceChannelVoiceCompression.setStatus('current')
twoWireSourceChannelEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceChannelEchoCancellation.setStatus('current')
twoWireSourceChannelSilenceSupression = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceChannelSilenceSupression.setStatus('current')
twoWireSourceChannelEncapsulationAal = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal1", 1), ("lucent", 2))).clone('aal1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSourceChannelEncapsulationAal.setStatus('current')
twoWireSourceChannelSubscriberService = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("plar", 1), ("fxs", 2), ("s-signaling", 3))).clone('plar')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoWireSourceChannelSubscriberService.setStatus('current')
highSpeedChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 7), )
if mibBuilder.loadTexts: highSpeedChannelConfigTable.setStatus('current')
highSpeedChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 7, 1), ).setIndexNames((0, "ACMIB", "highSpeedChannelId"))
if mibBuilder.loadTexts: highSpeedChannelConfigEntry.setStatus('current')
highSpeedChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 7, 1, 1), IntfIndex())
if mibBuilder.loadTexts: highSpeedChannelId.setStatus('current')
highSpeedChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("circuitEmulation", 6), ("atmUni4-0", 7))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highSpeedChannelIfType.setStatus('current')
dspChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8), )
if mibBuilder.loadTexts: dspChannelConfigTable.setStatus('current')
dspChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8, 1), ).setIndexNames((0, "ACMIB", "dspChannelId"))
if mibBuilder.loadTexts: dspChannelConfigEntry.setStatus('current')
dspChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8, 1, 1), IntfIndex())
if mibBuilder.loadTexts: dspChannelId.setStatus('current')
dspChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unconfigured", 1), ("dsp", 2))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspChannelIfType.setStatus('current')
dspChannelInputCodingRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("muLawPCM", 1))).clone('muLawPCM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspChannelInputCodingRule.setStatus('current')
dspChannelVoiceCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adpcm32k", 1), ("adpcm16k", 2))).clone('adpcm32k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspChannelVoiceCompression.setStatus('current')
dspChannelEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspChannelEchoCancellation.setStatus('current')
dspChannelSilenceSupression = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspChannelSilenceSupression.setStatus('current')
twoWireSinkChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9), )
if mibBuilder.loadTexts: twoWireSinkChannelConfigTable.setStatus('current')
twoWireSinkChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1), ).setIndexNames((0, "ACMIB", "twoWireSinkChannelId"))
if mibBuilder.loadTexts: twoWireSinkChannelConfigEntry.setStatus('current')
twoWireSinkChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 1), IntfIndex())
if mibBuilder.loadTexts: twoWireSinkChannelId.setStatus('current')
twoWireSinkChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unconfigured", 1), ("circuitEmulation", 2))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: twoWireSinkChannelIfType.setStatus('current')
twoWireSinkChannelConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2))).clone('pvc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkChannelConnectionType.setStatus('current')
twoWireSinkChannelCompandingLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("muLawPCM", 1), ("aLawPCM", 2))).clone('muLawPCM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkChannelCompandingLaw.setStatus('current')
twoWireSinkChannelVoiceCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("adpcm32k", 2), ("adpcm16k", 3), ("adpcm8k", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkChannelVoiceCompression.setStatus('current')
twoWireSinkChannelEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkChannelEchoCancellation.setStatus('current')
twoWireSinkChannelSilenceSupression = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkChannelSilenceSupression.setStatus('current')
twoWireSinkChannelEncapsulationAal = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal1", 1), ("lucent", 2))).clone('aal1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkChannelEncapsulationAal.setStatus('current')
twoWireSinkChannelSubscriberService = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("fxo", 1))).clone('fxo')).setMaxAccess("readonly")
if mibBuilder.loadTexts: twoWireSinkChannelSubscriberService.setStatus('current')
e3ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 10), )
if mibBuilder.loadTexts: e3ChannelConfigTable.setStatus('current')
e3ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 10, 1), ).setIndexNames((0, "ACMIB", "e3ChannelId"))
if mibBuilder.loadTexts: e3ChannelConfigEntry.setStatus('current')
e3ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 10, 1, 1), IntfIndex())
if mibBuilder.loadTexts: e3ChannelId.setStatus('current')
e3ChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("atmPnni1-0", 6), ("atmUni4-0", 7), ("circuitEmulation", 8))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3ChannelIfType.setStatus('current')
e3ChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3ChannelSecuFeature.setStatus('current')
e1ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11), )
if mibBuilder.loadTexts: e1ChannelConfigTable.setStatus('current')
e1ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1), ).setIndexNames((0, "ACMIB", "e1ChannelId"))
if mibBuilder.loadTexts: e1ChannelConfigEntry.setStatus('current')
e1ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1, 1), IntfIndex())
if mibBuilder.loadTexts: e1ChannelId.setStatus('current')
e1ChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("circuitEmulation", 6), ("frameRelayUni", 7), ("hdlcPassThrough", 8), ("frameRelayNni", 9), ("atmIma", 10), ("atmPnni1-0", 11), ("pri-isdn-network", 12), ("pri-isdn-user", 13), ("casTrunkLine", 14), ("atmUni4-0", 15))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ChannelIfType.setStatus('current')
e1ChannelDs0Map = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ChannelDs0Map.setStatus('current')
e1ChannelCellMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("directMapping", 1), ("none", 2))).clone('directMapping')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ChannelCellMapping.setStatus('current')
e1ChannelInputCodingRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("muLawPCM", 2), ("aLawPCM", 3), ("digital", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ChannelInputCodingRule.setStatus('current')
e1ChannelSecuFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsecurable", 1), ("secured", 2), ("securable", 3))).clone('unsecurable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ChannelSecuFeature.setStatus('current')
e1ChannelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1ChannelSignaling.setStatus('current')
ethernetChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 12), )
if mibBuilder.loadTexts: ethernetChannelConfigTable.setStatus('current')
ethernetChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 12, 1), ).setIndexNames((0, "ACMIB", "ethernetChannelId"))
if mibBuilder.loadTexts: ethernetChannelConfigEntry.setStatus('current')
ethernetChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: ethernetChannelId.setStatus('current')
ethernetChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unconfigured", 1), ("bridge", 2), ("routing", 3))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetChannelIfType.setStatus('current')
dsp2Channel = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13))
dsp2ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 1), )
if mibBuilder.loadTexts: dsp2ChannelConfigTable.setStatus('current')
dsp2ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 1, 1), ).setIndexNames((0, "ACMIB", "dsp2ChannelId"))
if mibBuilder.loadTexts: dsp2ChannelConfigEntry.setStatus('current')
dsp2ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 1, 1, 1), IntfIndex())
if mibBuilder.loadTexts: dsp2ChannelId.setStatus('current')
dsp2ChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unconfigured", 1), ("dsp2", 2))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsp2ChannelIfType.setStatus('current')
dsp2ChannelAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAlarm", 1), ("dspFailure", 2))).clone('noAlarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsp2ChannelAlarmType.setStatus('current')
dsp2ChannelModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("algoSet1", 1), ("algoSet2", 2), ("algoSet3", 3), ("algoSet4", 4), ("algoSet5", 5), ("algoSet6", 6))).clone('algoSet2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsp2ChannelModeConfig.setStatus('current')
dsp2AlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 2), )
if mibBuilder.loadTexts: dsp2AlgorithmTable.setStatus('current')
dsp2AlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 2, 1), ).setIndexNames((0, "ACMIB", "dsp2AlgorithmId"), (0, "ACMIB", "dsp2AlgorithmType"))
if mibBuilder.loadTexts: dsp2AlgorithmEntry.setStatus('current')
dsp2AlgorithmId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 2, 1, 1), IntfIndex())
if mibBuilder.loadTexts: dsp2AlgorithmId.setStatus('current')
dsp2AlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("g726-voice-compression", 1), ("g165-echo-cancellation", 2), ("generic-silence-suppression", 3), ("fax-modem-tone-detection", 4), ("g729a-voice-compression", 5), ("g729b-silence-suppression", 6), ("g168-echo-cancellation64ms", 7), ("g168-echo-cancellation128ms", 8), ("v17-fax-algorithm-upto-14400-bps", 9), ("v29-fax-algorithm-upto-9600-bps", 10), ("v27ter-fax-algorithm-upto-2400-bps", 11), ("v21-fax-algorithm-upto-300-bps", 12))).clone('g726-voice-compression')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsp2AlgorithmType.setStatus('current')
imaGrpChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14), )
if mibBuilder.loadTexts: imaGrpChannelConfigTable.setStatus('current')
imaGrpChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1), ).setIndexNames((0, "ACMIB", "imaGrpChannelId"))
if mibBuilder.loadTexts: imaGrpChannelConfigEntry.setStatus('current')
imaGrpChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 1), IntfIndex())
if mibBuilder.loadTexts: imaGrpChannelId.setStatus('current')
imaGrpChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unconfigured", 1), ("atmUni3-0", 2), ("atmUni3-1", 3), ("iispUser", 4), ("iispNetwork", 5), ("atmPnni1-0", 6), ("atmUni4-0", 7))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelIfType.setStatus('current')
imaGrpChannelPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelPortMap.setStatus('current')
imaGrpChannelNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 4), ImaGrpChannelEndState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelNeState.setStatus('current')
imaGrpChannelFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 5), ImaGrpChannelEndState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelFeState.setStatus('current')
imaGrpChannelFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insuffLinksNe", 8), ("insuffLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelFailureStatus.setStatus('current')
imaGrpChannelSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symOperation", 1), ("asymOperation", 2), ("asymConfiguration", 3))).clone('symOperation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelSymmetry.setStatus('current')
imaGrpChannelMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelMinNumTxLinks.setStatus('current')
imaGrpChannelMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelMinNumRxLinks.setStatus('current')
imaGrpChannelNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2))).clone('ctc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelNeTxClkMode.setStatus('current')
imaGrpChannelFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelFeTxClkMode.setStatus('current')
imaGrpChannelTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelTxImaId.setStatus('current')
imaGrpChannelRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelRxImaId.setStatus('current')
imaGrpChannelTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))).clone(namedValues=NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))).clone('m128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelTxFrameLength.setStatus('current')
imaGrpChannelRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))).clone(namedValues=NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelRxFrameLength.setStatus('current')
imaGrpChannelDiffLinkDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelDiffLinkDelayMax.setStatus('current')
imaGrpChannelLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 17), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelLeastDelayLink.setStatus('current')
imaGrpChannelDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelDiffDelayMaxObs.setStatus('current')
imaGrpChannelAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelAlphaValue.setStatus('current')
imaGrpChannelBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelBetaValue.setStatus('current')
imaGrpChannelGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelGammaValue.setStatus('current')
imaGrpChannelStatsNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelStatsNeNumFailures.setStatus('current')
imaGrpChannelStatsFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelStatsFeNumFailures.setStatus('current')
imaGrpChannelStatsNumTxActLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelStatsNumTxActLnks.setStatus('current')
imaGrpChannelStatsNumRxActLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelStatsNumRxActLnks.setStatus('current')
imaGrpChannelStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelStatsTimer.setStatus('current')
imaGrpChannelCompatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 14, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGrpChannelCompatMode.setStatus('current')
tasmChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 15), )
if mibBuilder.loadTexts: tasmChannelConfigTable.setStatus('current')
tasmChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 15, 1), ).setIndexNames((0, "ACMIB", "tasmChannelId"))
if mibBuilder.loadTexts: tasmChannelConfigEntry.setStatus('current')
tasmChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 15, 1, 1), IntfIndex())
if mibBuilder.loadTexts: tasmChannelId.setStatus('current')
tasmChannelIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unconfigured", 1), ("toneAnnce", 2))).clone('unconfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmChannelIfType.setStatus('current')
tasmChannelAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAlarm", 1), ("tasmFailure", 2))).clone('noAlarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasmChannelAlarmType.setStatus('current')
tasmChannelModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 3, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("casMode", 1), ("tasMode", 2))).clone('casMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasmChannelModeConfig.setStatus('current')
atmUniConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1), )
if mibBuilder.loadTexts: atmUniConfigTable.setStatus('current')
atmUniConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1), ).setIndexNames((0, "ACMIB", "atmUniIfIndex"))
if mibBuilder.loadTexts: atmUniConfigEntry.setStatus('current')
atmUniIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmUniIfIndex.setStatus('current')
atmUniAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("private", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniAddrType.setStatus('current')
atmUniSvcMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniSvcMinVpi.setStatus('current')
atmUniSvcMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniSvcMaxVpi.setStatus('current')
atmUniSvcMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniSvcMinVci.setStatus('current')
atmUniSvcMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniSvcMaxVci.setStatus('current')
atmUniAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniAdminStatus.setStatus('current')
atmUniOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmUniOperStatus.setStatus('current')
atmUniNwPrefix1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniNwPrefix1.setStatus('current')
atmUniOverSubscription = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniOverSubscription.setStatus('current')
atmUniT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 11), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT303.setStatus('current')
atmUniT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 12), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT308.setStatus('current')
atmUniT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 13), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT309.setStatus('current')
atmUniT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 14), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT310.setStatus('current')
atmUniT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 15), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT313.setStatus('current')
atmUniT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 16), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT316.setStatus('current')
atmUniT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 17), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT317.setStatus('current')
atmUniT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 18), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT322.setStatus('current')
atmUniT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 19), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT398.setStatus('current')
atmUniT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 20), Integer32().clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniT399.setStatus('current')
atmUniMyNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniMyNeighborIpAddress.setStatus('current')
atmUniMyNeighborIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniMyNeighborIfName.setStatus('current')
atmUniVpiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniVpiSig.setStatus('current')
atmUniVciSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniVciSig.setStatus('current')
atmUniVpiIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniVpiIlmi.setStatus('current')
atmUniVciIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniVciIlmi.setStatus('current')
atmUniAtmSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniAtmSignalingStatus.setStatus('current')
atmUniMyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniMyIfName.setStatus('current')
atmUniIlmiProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiProtocolStatus.setStatus('current')
atmUniIlmiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmUniIlmiOperStatus.setStatus('current')
atmUniIlmiConfigProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiConfigProc.setStatus('current')
atmUniIlmiConnectProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiConnectProc.setStatus('current')
atmUniIlmiAttachPtProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiAttachPtProc.setStatus('current')
atmUniIlmiSecureLinkProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiSecureLinkProc.setStatus('current')
atmUniIlmiAddrRegProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiAddrRegProc.setStatus('current')
atmUniIlmiTimerS = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 37), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiTimerS.setStatus('current')
atmUniIlmiTimerT = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 38), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiTimerT.setStatus('current')
atmUniIlmiRetryK = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 39), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIlmiRetryK.setStatus('current')
atmUniIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniIntfType.setStatus('current')
atmUniUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniUserAddress.setStatus('current')
atmUniViSuppFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniViSuppFlag.setStatus('current')
atmUniUPCSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniUPCSupp.setStatus('current')
atmUniUbrLoadBalSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniUbrLoadBalSupp.setStatus('current')
atmUniAvailBwIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmUniAvailBwIgr.setStatus('current')
atmUniAvailBwEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmUniAvailBwEgr.setStatus('current')
atmUniVUNISuppFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniVUNISuppFlag.setStatus('current')
atmUniUserAddrOrgScope = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("localNetwork", 1), ("localNetworkPlusOne", 2), ("localNetworkPlusTwo", 3), ("siteMinusOne", 4), ("intraSite", 5), ("sitePlusOne", 6), ("organizationMinusOne", 7), ("intraOrganization", 8), ("organizationPlusOne", 9), ("communityMinusOne", 10), ("intraCommunity", 11), ("communityPlusOne", 12), ("regional", 13), ("interRegional", 14), ("global", 15))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniUserAddrOrgScope.setStatus('current')
atmUniSscopRxWndSz = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 256)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniSscopRxWndSz.setStatus('current')
atmUniConnTrafficShapingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmUniConnTrafficShapingFlag.setStatus('current')
atmIispConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2), )
if mibBuilder.loadTexts: atmIispConfigTable.setStatus('current')
atmIispConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1), ).setIndexNames((0, "ACMIB", "atmIispIfIndex"))
if mibBuilder.loadTexts: atmIispConfigEntry.setStatus('current')
atmIispIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmIispIfIndex.setStatus('current')
atmIispSvcMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispSvcMinVpi.setStatus('current')
atmIispSvcMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispSvcMaxVpi.setStatus('current')
atmIispSvcMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispSvcMinVci.setStatus('current')
atmIispSvcMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispSvcMaxVci.setStatus('current')
atmIispAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispAdminStatus.setStatus('current')
atmIispOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIispOperStatus.setStatus('current')
atmIispOverSubscription = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispOverSubscription.setStatus('current')
atmIispT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 9), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT303.setStatus('current')
atmIispT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 10), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT308.setStatus('current')
atmIispT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 11), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT309.setStatus('current')
atmIispT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 12), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT310.setStatus('current')
atmIispT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 13), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT316.setStatus('current')
atmIispT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 14), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT317.setStatus('current')
atmIispT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 15), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT322.setStatus('current')
atmIispT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 16), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT398.setStatus('current')
atmIispT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 17), Integer32().clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispT399.setStatus('current')
atmIispAtmSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispAtmSignalingStatus.setStatus('current')
atmIispAvailBwIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIispAvailBwIgr.setStatus('current')
atmIispAvailBwEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIispAvailBwEgr.setStatus('current')
atmIispUPCSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispUPCSupp.setStatus('current')
atmIispUbrLoadBalSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispUbrLoadBalSupp.setStatus('current')
atmIispSscopRxWndSz = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 256)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispSscopRxWndSz.setStatus('current')
atmIispConnTrafficShapingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIispConnTrafficShapingFlag.setStatus('current')
atmCirEmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3), )
if mibBuilder.loadTexts: atmCirEmConfigTable.setStatus('current')
atmCirEmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1), ).setIndexNames((0, "ACMIB", "atmCirEmIfIndex"))
if mibBuilder.loadTexts: atmCirEmConfigEntry.setStatus('current')
atmCirEmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmCirEmIfIndex.setStatus('current')
atmCirEmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCirEmAdminStatus.setStatus('current')
atmCirEmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCirEmOperStatus.setStatus('current')
atmCirEmCASIdleAbcdPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCirEmCASIdleAbcdPattern.setStatus('current')
atmCirEmCASBusyAbcdPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCirEmCASBusyAbcdPattern.setStatus('current')
atmCirEmAlarmDataPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCirEmAlarmDataPattern.setStatus('current')
atmCirEmTCPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("casIdle", 1), ("casBusy", 2))).clone('casBusy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCirEmTCPattern.setStatus('current')
atmCirEmDownStInterworking = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unSupp", 1), ("oAM", 2), ("trunkCond", 3))).clone('trunkCond')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCirEmDownStInterworking.setStatus('current')
atmTermEmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 4), )
if mibBuilder.loadTexts: atmTermEmConfigTable.setStatus('current')
atmTermEmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 4, 1), ).setIndexNames((0, "ACMIB", "atmTermEmIfIndex"))
if mibBuilder.loadTexts: atmTermEmConfigEntry.setStatus('current')
atmTermEmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 4, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmTermEmIfIndex.setStatus('current')
atmTermEmRxTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTermEmRxTimeOut.setStatus('current')
atmTermEmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTermEmAdminStatus.setStatus('current')
atmTermEmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTermEmOperStatus.setStatus('current')
hdlcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 5), )
if mibBuilder.loadTexts: hdlcConfigTable.setStatus('current')
hdlcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 5, 1), ).setIndexNames((0, "ACMIB", "hdlcIfIndex"))
if mibBuilder.loadTexts: hdlcConfigEntry.setStatus('current')
hdlcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 5, 1, 1), IntfIndex())
if mibBuilder.loadTexts: hdlcIfIndex.setStatus('current')
hdlcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcAdminStatus.setStatus('current')
hdlcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcOperStatus.setStatus('current')
hdlcThroughPut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k64", 1), ("k56", 2))).clone('k64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcThroughPut.setStatus('current')
hdlcDataInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcDataInversion.setStatus('current')
frUniConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6), )
if mibBuilder.loadTexts: frUniConfigTable.setStatus('current')
frUniConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1), ).setIndexNames((0, "ACMIB", "frUniIfIndex"))
if mibBuilder.loadTexts: frUniConfigEntry.setStatus('current')
frUniIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 1), IntfIndex())
if mibBuilder.loadTexts: frUniIfIndex.setStatus('current')
frUniAddrDlciLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("twoOctets10Bits", 1))).clone('twoOctets10Bits')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniAddrDlciLen.setStatus('current')
frUniDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLmi", 1), ("lmiDte", 2), ("lmiDce", 3), ("lmiNni", 4))).clone('noLmi')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniDlcmiState.setStatus('current')
frUniAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniAdminStatus.setStatus('current')
frUniOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniOperStatus.setStatus('current')
frUniOverSubscription = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniOverSubscription.setStatus('current')
frUniLmiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ccitt", 2), ("ansi", 3), ("att", 4))).clone('ccitt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniLmiProtocol.setStatus('current')
frUniInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frf5", 1), ("frf8", 2))).clone('frf8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniInterworkingType.setStatus('current')
frUniN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniN391.setStatus('current')
frUniN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniN392.setStatus('current')
frUniN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniN393.setStatus('current')
frUniT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniT391.setStatus('current')
frUniT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniT392.setStatus('current')
frUniAsyncLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniAsyncLmi.setStatus('current')
frLmiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiOperStatus.setStatus('current')
frUniNT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniNT3.setStatus('current')
frUniThroughPut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k64", 1), ("k56", 2))).clone('k64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frUniThroughPut.setStatus('current')
dspConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 7), )
if mibBuilder.loadTexts: dspConfigTable.setStatus('current')
dspConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 7, 1), ).setIndexNames((0, "ACMIB", "dspIfIndex"))
if mibBuilder.loadTexts: dspConfigEntry.setStatus('current')
dspIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 7, 1, 1), IntfIndex())
if mibBuilder.loadTexts: dspIfIndex.setStatus('current')
dspAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspAdminStatus.setStatus('current')
dspOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspOperStatus.setStatus('current')
bridgeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8), )
if mibBuilder.loadTexts: bridgeConfigTable.setStatus('current')
bridgeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1), ).setIndexNames((0, "ACMIB", "bridgeIfIndex"))
if mibBuilder.loadTexts: bridgeConfigEntry.setStatus('current')
bridgeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: bridgeIfIndex.setStatus('current')
bridgeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAdminStatus.setStatus('current')
bridgeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeOperStatus.setStatus('current')
bridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeNumber.setStatus('current')
bridgePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePortPriority.setStatus('current')
bridgePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePathCost.setStatus('current')
bridgeConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vc", 1), ("llc", 2))).clone('vc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeConnectionType.setStatus('current')
bridgeDomainTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9), )
if mibBuilder.loadTexts: bridgeDomainTable.setStatus('current')
bridgeDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1), ).setIndexNames((0, "ACMIB", "bridgeDomainNumber"))
if mibBuilder.loadTexts: bridgeDomainEntry.setStatus('current')
bridgeDomainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: bridgeDomainNumber.setStatus('current')
bridgeDomainAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainAdminStatus.setStatus('current')
bridgeDomainOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainOperStatus.setStatus('current')
bridgeDomainPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainPriority.setStatus('current')
bridgeDomainTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainTimeSinceTopologyChange.setStatus('current')
bridgeDomainDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainDesignatedRoot.setStatus('current')
bridgeDomainRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainRootCost.setStatus('current')
bridgeDomainRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainRootPort.setStatus('current')
bridgeDomainMaxMessageAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainMaxMessageAge.setStatus('current')
bridgeDomainHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainHelloTime.setStatus('current')
bridgeDomainHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainHoldTime.setStatus('current')
bridgeDomainForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainForwardDelay.setStatus('current')
bridgeDomainMaxBridgeAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainMaxBridgeAge.setStatus('current')
bridgeDomainBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainBridgeHelloTime.setStatus('current')
bridgeDomainBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainBridgeForwardDelay.setStatus('current')
bridgeDomainAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainAgingTime.setStatus('current')
bridgeDomainSpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainSpanningTree.setStatus('current')
bridgeDomainTopologyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainTopologyChanges.setStatus('current')
bridgeDomainLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainLearnedEntryDiscards.setStatus('current')
bridgeDomainTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainTimer.setStatus('current')
bridgeDomainDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDomainDefaultGateway.setStatus('current')
bridgeDomainPortStatusBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 9, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeDomainPortStatusBitmap.setStatus('current')
routerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10), )
if mibBuilder.loadTexts: routerConfigTable.setStatus('current')
routerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1), ).setIndexNames((0, "ACMIB", "routerIfIndex"))
if mibBuilder.loadTexts: routerConfigEntry.setStatus('current')
routerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: routerIfIndex.setStatus('current')
routerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerAdminStatus.setStatus('current')
routerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerOperStatus.setStatus('current')
routerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerIpAddress.setStatus('current')
routerIpNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerIpNetworkMask.setStatus('current')
routerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerNumber.setStatus('current')
routerEthernetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 10, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerEthernetIpAddress.setStatus('current')
isdnConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11))
isdnIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 1), )
if mibBuilder.loadTexts: isdnIntfConfigTable.setStatus('current')
isdnIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 1, 1), ).setIndexNames((0, "ACMIB", "isdnIntfId"))
if mibBuilder.loadTexts: isdnIntfConfigEntry.setStatus('current')
isdnIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: isdnIntfId.setStatus('current')
isdnIntfDChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnIntfDChanId.setStatus('current')
isdnIntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnIntfAdminStatus.setStatus('current')
isdnIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnIntfOperStatus.setStatus('current')
isdnIntfSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("pri-ni2", 1), ("pri-net5", 2), ("pri-1tr6", 3), ("pri-4ess", 4), ("pri-5ess", 5), ("pri-dass2", 6), ("pri-dms100", 7), ("pri-kdd", 8), ("pri-ntt", 9), ("pri-net5sw", 10), ("pri-ts014", 11), ("pri-vn", 12))).clone('pri-ni2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnIntfSwitchType.setStatus('current')
isdnL2ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2), )
if mibBuilder.loadTexts: isdnL2ConfigTable.setStatus('current')
isdnL2ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1), ).setIndexNames((0, "ACMIB", "isdnL2IntfId"))
if mibBuilder.loadTexts: isdnL2ConfigEntry.setStatus('current')
isdnL2IntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: isdnL2IntfId.setStatus('current')
isdnT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnT200.setStatus('current')
isdnT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnT203.setStatus('current')
isdnN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnN200.setStatus('current')
isdnN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnN201.setStatus('current')
isdnK = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnK.setStatus('current')
isdnL2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-initiated", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnL2OperStatus.setStatus('current')
isdnL2CurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tei-unassigned", 1), ("tei-assigned", 4), ("awaiting-establishment", 5), ("awaiting-release", 6), ("multiple-frame-established", 7), ("timer-recovery", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnL2CurrentState.setStatus('current')
isdnBChanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 3), )
if mibBuilder.loadTexts: isdnBChanConfigTable.setStatus('current')
isdnBChanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 3, 1), ).setIndexNames((0, "ACMIB", "isdnBChanId"))
if mibBuilder.loadTexts: isdnBChanConfigEntry.setStatus('current')
isdnBChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: isdnBChanId.setStatus('current')
isdnBChanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnBChanAdminStatus.setStatus('current')
isdnBChanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnBChanOperStatus.setStatus('current')
atmDbCirEmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12), )
if mibBuilder.loadTexts: atmDbCirEmConfigTable.setStatus('current')
atmDbCirEmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1), ).setIndexNames((0, "ACMIB", "atmDbCirEmIfIndex"))
if mibBuilder.loadTexts: atmDbCirEmConfigEntry.setStatus('current')
atmDbCirEmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmDbCirEmIfIndex.setStatus('current')
atmDbCirEmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDbCirEmAdminStatus.setStatus('current')
atmDbCirEmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDbCirEmOperStatus.setStatus('current')
atmDbCirEmIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1, 7), Integer32().clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDbCirEmIdlePattern.setStatus('current')
atmDbCirEmServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("plar", 1), ("fxo-loopstart", 2), ("fxs-loopstart", 3), ("fxo-groundstart", 4), ("fxs-groundstart", 5))).clone('plar')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDbCirEmServiceType.setStatus('current')
atmDbCirEmDbcesType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lucent", 1))).clone('lucent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDbCirEmDbcesType.setStatus('current')
atmDbCirEmIntegrationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDbCirEmIntegrationTime.setStatus('current')
lmiDlciConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 13), )
if mibBuilder.loadTexts: lmiDlciConfigTable.setStatus('current')
lmiDlciConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 13, 1), ).setIndexNames((0, "ACMIB", "lmiDlciIfIndex"), (0, "ACMIB", "lmiDlci"))
if mibBuilder.loadTexts: lmiDlciConfigEntry.setStatus('current')
lmiDlciIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 13, 1, 1), IntfIndex())
if mibBuilder.loadTexts: lmiDlciIfIndex.setStatus('current')
lmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 13, 1, 2), Integer32())
if mibBuilder.loadTexts: lmiDlci.setStatus('current')
lmiDlciOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiDlciOperStatus.setStatus('current')
lmiDlciStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiDlciStatusTime.setStatus('current')
dsp2ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 14), )
if mibBuilder.loadTexts: dsp2ConfigTable.setStatus('current')
dsp2ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 14, 1), ).setIndexNames((0, "ACMIB", "dsp2IfIndex"))
if mibBuilder.loadTexts: dsp2ConfigEntry.setStatus('current')
dsp2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 14, 1, 1), IntfIndex())
if mibBuilder.loadTexts: dsp2IfIndex.setStatus('current')
dsp2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsp2AdminStatus.setStatus('current')
dsp2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsp2OperStatus.setStatus('current')
dsp2LoadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsp2LoadCount.setStatus('current')
dsp2AalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal2-non-multiplexed", 1), ("aal2-standard", 2), ("aal1", 3))).clone('aal2-non-multiplexed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsp2AalMode.setStatus('current')
atmImaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15), )
if mibBuilder.loadTexts: atmImaConfigTable.setStatus('current')
atmImaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1), ).setIndexNames((0, "ACMIB", "atmImaIntfIndex"))
if mibBuilder.loadTexts: atmImaConfigEntry.setStatus('current')
atmImaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: atmImaIntfIndex.setStatus('current')
atmImaNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))).clone('notInGroup')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaNeTxState.setStatus('current')
atmImaNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))).clone('notInGroup')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaNeRxState.setStatus('current')
atmImaFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))).clone('notInGroup')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaFeTxState.setStatus('current')
atmImaFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))).clone('notInGroup')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaFeRxState.setStatus('current')
atmImaNeRxDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDefect", 1), ("linkFailure", 2), ("lif", 3), ("lods", 4))).clone('noDefect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaNeRxDefect.setStatus('current')
atmImaFeRxDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDefect", 1), ("linkFailure", 2), ("lif", 3), ("lods", 4))).clone('noDefect')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaFeRxDefect.setStatus('current')
atmImaAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmImaAdminStatus.setStatus('current')
atmImaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaOperStatus.setStatus('current')
atmPnniConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16), )
if mibBuilder.loadTexts: atmPnniConfigTable.setStatus('current')
atmPnniConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1), ).setIndexNames((0, "ACMIB", "atmPnniIfIndex"))
if mibBuilder.loadTexts: atmPnniConfigEntry.setStatus('current')
atmPnniIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmPnniIfIndex.setStatus('current')
atmPnniSvcMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniSvcMinVpi.setStatus('current')
atmPnniSvcMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniSvcMaxVpi.setStatus('current')
atmPnniSvcMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniSvcMinVci.setStatus('current')
atmPnniSvcMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniSvcMaxVci.setStatus('current')
atmPnniAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniAdminStatus.setStatus('current')
atmPnniOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniOperStatus.setStatus('current')
atmPnniT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 8), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT303.setStatus('current')
atmPnniT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 9), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT308.setStatus('current')
atmPnniT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 10), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT309.setStatus('current')
atmPnniT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 11), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT310.setStatus('current')
atmPnniT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 12), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT313.setStatus('current')
atmPnniT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 13), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT316.setStatus('current')
atmPnniT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 14), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT317.setStatus('current')
atmPnniT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 15), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT322.setStatus('current')
atmPnniT397 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 16), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT397.setStatus('current')
atmPnniT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 17), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT398.setStatus('current')
atmPnniT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 18), Integer32().clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniT399.setStatus('current')
atmPnniCbrServCatSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrServCatSupp.setStatus('current')
atmPnniCbrGcacClpEqualZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrGcacClpEqualZero.setStatus('current')
atmPnniCbrMaxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrMaxCellRate.setStatus('current')
atmPnniCbrAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrAvailCellRate.setStatus('current')
atmPnniCbrCellXerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrCellXerDelay.setStatus('current')
atmPnniCbrCellLossRatioZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrCellLossRatioZero.setStatus('current')
atmPnniCbrCellLossRatioZeroPlusOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrCellLossRatioZeroPlusOne.setStatus('current')
atmPnniCbrCellDelayVar = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniCbrCellDelayVar.setStatus('current')
atmPnniRtVbrServCatSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrServCatSupp.setStatus('current')
atmPnniRtVbrGcacClpEqualZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrGcacClpEqualZero.setStatus('current')
atmPnniRtVbrMaxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrMaxCellRate.setStatus('current')
atmPnniRtVbrAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrAvailCellRate.setStatus('current')
atmPnniRtVbrCellXerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrCellXerDelay.setStatus('current')
atmPnniRtVbrCellLossRatioZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrCellLossRatioZero.setStatus('current')
atmPnniRtVbrCellLossRatioZeroPlusOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrCellLossRatioZeroPlusOne.setStatus('current')
atmPnniRtVbrCellDelayVar = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrCellDelayVar.setStatus('current')
atmPnniRtVbrGcacPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrGcacPresent.setStatus('current')
atmPnniRtVbrCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrCellRateMargin.setStatus('current')
atmPnniRtVbrVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniRtVbrVarianceFactor.setStatus('current')
atmPnniNrtVbrServCatSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrServCatSupp.setStatus('current')
atmPnniNrtVbrGcacClpEqualZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrGcacClpEqualZero.setStatus('current')
atmPnniNrtVbrMaxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrMaxCellRate.setStatus('current')
atmPnniNrtVbrAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrAvailCellRate.setStatus('current')
atmPnniNrtVbrCellXerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrCellXerDelay.setStatus('current')
atmPnniNrtVbrCellLossRatioZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrCellLossRatioZero.setStatus('current')
atmPnniNrtVbrCellLossRatioZeroPlusOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrCellLossRatioZeroPlusOne.setStatus('current')
atmPnniNrtVbrGcacPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrGcacPresent.setStatus('current')
atmPnniNrtVbrCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrCellRateMargin.setStatus('current')
atmPnniNrtVbrVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniNrtVbrVarianceFactor.setStatus('current')
atmPnniAbrServCatSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniAbrServCatSupp.setStatus('current')
atmPnniAbrMaxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniAbrMaxCellRate.setStatus('current')
atmPnniAbrAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniAbrAvailCellRate.setStatus('current')
atmPnniUbrServCatSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniUbrServCatSupp.setStatus('current')
atmPnniUbrMaxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniUbrMaxCellRate.setStatus('current')
atmPnniOverSubscription = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniOverSubscription.setStatus('current')
atmPnniSgnlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniSgnlEnabled.setStatus('current')
atmPnniVpiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniVpiSig.setStatus('current')
atmPnniVciSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniVciSig.setStatus('current')
atmPnniAvailBwIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniAvailBwIgr.setStatus('current')
atmPnniAvailBwEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniAvailBwEgr.setStatus('current')
atmPnniUPCSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniUPCSupp.setStatus('current')
atmPnniUbrLoadBalSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniUbrLoadBalSupp.setStatus('current')
atmPnniSscopRxWndSz = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 256)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniSscopRxWndSz.setStatus('current')
atmPnniRemoteSvcMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniRemoteSvcMinVpi.setStatus('current')
atmPnniRemoteSvcMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniRemoteSvcMaxVpi.setStatus('current')
atmPnniRemoteSvcMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniRemoteSvcMinVci.setStatus('current')
atmPnniRemoteSvcMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniRemoteSvcMaxVci.setStatus('current')
atmPnniVpiIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniVpiIlmi.setStatus('current')
atmPnniVciIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniVciIlmi.setStatus('current')
atmPnniIlmiProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiProtocolStatus.setStatus('current')
atmPnniIlmiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPnniIlmiOperStatus.setStatus('current')
atmPnniIlmiConfigProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiConfigProc.setStatus('current')
atmPnniIlmiConnectProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiConnectProc.setStatus('current')
atmPnniIlmiAttachPtProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiAttachPtProc.setStatus('current')
atmPnniIlmiSecureLinkProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiSecureLinkProc.setStatus('current')
atmPnniIlmiAddrRegProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiAddrRegProc.setStatus('current')
atmPnniIlmiTimerS = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 75), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiTimerS.setStatus('current')
atmPnniIlmiTimerT = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 76), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiTimerT.setStatus('current')
atmPnniIlmiRetryK = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 77), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniIlmiRetryK.setStatus('current')
atmPnniConnTrafficShapingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 16, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPnniConnTrafficShapingFlag.setStatus('current')
atmVnnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17), )
if mibBuilder.loadTexts: atmVnnConfigTable.setStatus('current')
atmVnnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1), ).setIndexNames((0, "ACMIB", "atmVnnIfIndex"))
if mibBuilder.loadTexts: atmVnnConfigEntry.setStatus('current')
atmVnnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmVnnIfIndex.setStatus('current')
atmVnnAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("private", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnAddrType.setStatus('current')
atmVnnSvcMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnSvcMinVpi.setStatus('current')
atmVnnSvcMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnSvcMaxVpi.setStatus('current')
atmVnnSvcMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnSvcMinVci.setStatus('current')
atmVnnSvcMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnSvcMaxVci.setStatus('current')
atmVnnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnAdminStatus.setStatus('current')
atmVnnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnOperStatus.setStatus('current')
atmVnnOverSubscription = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnOverSubscription.setStatus('current')
atmVnnNwPrefix1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnNwPrefix1.setStatus('current')
atmVnnT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 11), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT303.setStatus('current')
atmVnnT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 12), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT308.setStatus('current')
atmVnnT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 13), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT309.setStatus('current')
atmVnnT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 14), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT310.setStatus('current')
atmVnnT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 15), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT313.setStatus('current')
atmVnnT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 16), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT316.setStatus('current')
atmVnnT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 17), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT317.setStatus('current')
atmVnnT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 18), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT322.setStatus('current')
atmVnnT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 19), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT398.setStatus('current')
atmVnnT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 20), Integer32().clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnT399.setStatus('current')
atmVnnMyNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnMyNeighborIpAddress.setStatus('current')
atmVnnMyNeighborIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnMyNeighborIfName.setStatus('current')
atmVnnVpiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnVpiSig.setStatus('current')
atmVnnVciSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnVciSig.setStatus('current')
atmVnnVpiIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnVpiIlmi.setStatus('current')
atmVnnVciIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnVciIlmi.setStatus('current')
atmVnnAtmSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnAtmSignalingStatus.setStatus('current')
atmVnnMyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnMyIfName.setStatus('current')
atmVnnIlmiProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnIlmiProtocolStatus.setStatus('current')
atmVnnIlmiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnIlmiOperStatus.setStatus('current')
atmVnnIlmiConfigProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnIlmiConfigProc.setStatus('current')
atmVnnIlmiConnectProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnIlmiConnectProc.setStatus('current')
atmVnnIlmiAttachPtProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnIlmiAttachPtProc.setStatus('current')
atmVnnIlmiSecureLinkProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnIlmiSecureLinkProc.setStatus('current')
atmVnnIlmiAddrRegProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnIlmiAddrRegProc.setStatus('current')
atmVnnIlmiTimerS = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 36), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnIlmiTimerS.setStatus('current')
atmVnnIlmiTimerT = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 37), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnIlmiTimerT.setStatus('current')
atmVnnIlmiRetryK = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 38), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnIlmiRetryK.setStatus('current')
atmVnnAvailBwIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnAvailBwIgr.setStatus('current')
atmVnnAvailBwEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVnnAvailBwEgr.setStatus('current')
atmVnnUPCSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnUPCSupp.setStatus('current')
atmVnnUbrLoadBalSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnUbrLoadBalSupp.setStatus('current')
atmVnnSscopRxWndSz = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 17, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 256)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVnnSscopRxWndSz.setStatus('current')
virtualIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18), )
if mibBuilder.loadTexts: virtualIntfConfigTable.setStatus('current')
virtualIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1), ).setIndexNames((0, "ACMIB", "virtualIntfConfigIf"), (0, "ACMIB", "virtualIntfConfigVi"))
if mibBuilder.loadTexts: virtualIntfConfigEntry.setStatus('current')
virtualIntfConfigIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1, 1), IntfIndex())
if mibBuilder.loadTexts: virtualIntfConfigIf.setStatus('current')
virtualIntfConfigVi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)).clone(1))
if mibBuilder.loadTexts: virtualIntfConfigVi.setStatus('current')
virtualIntfConfigCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualIntfConfigCellRate.setStatus('current')
virtualIntfConfigOverSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualIntfConfigOverSubs.setStatus('current')
virtualIntfConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualIntfConfigRowStatus.setStatus('current')
virtualIntfConfigUPCSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualIntfConfigUPCSupp.setStatus('current')
virtualIntfAvailBwEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIntfAvailBwEgr.setStatus('current')
virtualUNIConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19), )
if mibBuilder.loadTexts: virtualUNIConfigTable.setStatus('current')
virtualUNIConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1), ).setIndexNames((0, "ACMIB", "virtualUNIIfIndex"), (0, "ACMIB", "virtualUNIVUNIId"))
if mibBuilder.loadTexts: virtualUNIConfigEntry.setStatus('current')
virtualUNIIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 1), IntfIndex())
if mibBuilder.loadTexts: virtualUNIIfIndex.setStatus('current')
virtualUNIVUNIId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: virtualUNIVUNIId.setStatus('current')
virtualUNIVISupport = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIVISupport.setStatus('current')
virtualUNIMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIMinVpi.setStatus('current')
virtualUNIMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIMaxVpi.setStatus('current')
virtualUNIConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIConfigRowStatus.setStatus('current')
virtualUNIAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("private", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIAddrType.setStatus('current')
virtualUNISvcMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNISvcMinVpi.setStatus('current')
virtualUNISvcMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNISvcMaxVpi.setStatus('current')
virtualUNISvcMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNISvcMinVci.setStatus('current')
virtualUNISvcMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNISvcMaxVci.setStatus('current')
virtualUNIAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIAdminStatus.setStatus('current')
virtualUNIOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualUNIOperStatus.setStatus('current')
virtualUNINwPrefix1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNINwPrefix1.setStatus('current')
virtualUNIT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 15), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT303.setStatus('current')
virtualUNIT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 16), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT308.setStatus('current')
virtualUNIT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 17), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT309.setStatus('current')
virtualUNIT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 18), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT310.setStatus('current')
virtualUNIT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 19), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT313.setStatus('current')
virtualUNIT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 20), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT316.setStatus('current')
virtualUNIT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 21), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT317.setStatus('current')
virtualUNIT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 22), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT322.setStatus('current')
virtualUNIT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 23), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT398.setStatus('current')
virtualUNIT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 24), Integer32().clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIT399.setStatus('current')
virtualUNIMyNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIMyNeighborIpAddress.setStatus('current')
virtualUNIMyNeighborIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIMyNeighborIfName.setStatus('current')
virtualUNIVpiSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIVpiSig.setStatus('current')
virtualUNIVciSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIVciSig.setStatus('current')
virtualUNISignalingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNISignalingAdminStatus.setStatus('current')
virtualUNISignalingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualUNISignalingOperStatus.setStatus('current')
virtualUNIVpiIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIVpiIlmi.setStatus('current')
virtualUNIVciIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIVciIlmi.setStatus('current')
virtualUNIMyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIMyIfName.setStatus('current')
virtualUNIIlmiProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiProtocolStatus.setStatus('current')
virtualUNIIlmiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualUNIIlmiOperStatus.setStatus('current')
virtualUNIIlmiConfigProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiConfigProc.setStatus('current')
virtualUNIIlmiConnectProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiConnectProc.setStatus('current')
virtualUNIIlmiAttachPtProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiAttachPtProc.setStatus('current')
virtualUNIIlmiSecureLinkProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiSecureLinkProc.setStatus('current')
virtualUNIIlmiAddrRegProc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiAddrRegProc.setStatus('current')
virtualUNIIlmiTimerS = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 42), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiTimerS.setStatus('current')
virtualUNIIlmiTimerT = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 43), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiTimerT.setStatus('current')
virtualUNIIlmiRetryK = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 44), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIlmiRetryK.setStatus('current')
virtualUNIIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIIntfType.setStatus('current')
virtualUNIUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIUserAddress.setStatus('current')
virtualUNIUserAddrOrgScope = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("localNetwork", 1), ("localNetworkPlusOne", 2), ("localNetworkPlusTwo", 3), ("siteMinusOne", 4), ("intraSite", 5), ("sitePlusOne", 6), ("organizationMinusOne", 7), ("intraOrganization", 8), ("organizationPlusOne", 9), ("communityMinusOne", 10), ("intraCommunity", 11), ("communityPlusOne", 12), ("regional", 13), ("interRegional", 14), ("global", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNIUserAddrOrgScope.setStatus('current')
virtualUNISscopRxWndSz = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 19, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 256)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualUNISscopRxWndSz.setStatus('current')
casConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20))
casConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1), )
if mibBuilder.loadTexts: casConfigTable.setStatus('current')
casConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1), ).setIndexNames((0, "ACMIB", "casIfIndex"))
if mibBuilder.loadTexts: casConfigEntry.setStatus('current')
casIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 1), IntfIndex())
if mibBuilder.loadTexts: casIfIndex.setStatus('current')
casAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casAdminStatus.setStatus('current')
casOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: casOperStatus.setStatus('current')
casProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("wink-start", 1), ("loop-start-network", 2), ("loop-start-user", 3), ("ground-start-network", 4), ("ground-start-user", 5), ("itu-t-r2", 6))).clone('wink-start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casProtocolType.setStatus('current')
casDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("incoming", 2), ("outgoing", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casDirection.setStatus('current')
casAddressingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dtmf", 1), ("r1-mf", 2), ("r2-mf", 3))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casAddressingType.setStatus('current')
casBitPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ab", 1), ("abcd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casBitPatternType.setStatus('current')
casGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casGroupId.setStatus('current')
toneAnnceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 21), )
if mibBuilder.loadTexts: toneAnnceConfigTable.setStatus('current')
toneAnnceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 21, 1), ).setIndexNames((0, "ACMIB", "toneAnnceIfIndex"))
if mibBuilder.loadTexts: toneAnnceConfigEntry.setStatus('current')
toneAnnceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 21, 1, 1), IntfIndex())
if mibBuilder.loadTexts: toneAnnceIfIndex.setStatus('current')
toneAnnceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: toneAnnceAdminStatus.setStatus('current')
toneAnnceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: toneAnnceOperStatus.setStatus('current')
gr303IntfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22))
gr303IntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 1), )
if mibBuilder.loadTexts: gr303IntfConfigTable.setStatus('current')
gr303IntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 1, 1), ).setIndexNames((0, "ACMIB", "gr303IntfId"))
if mibBuilder.loadTexts: gr303IntfConfigEntry.setStatus('current')
gr303IntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: gr303IntfId.setStatus('current')
gr303TMCChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303TMCChannelId.setStatus('current')
gr303EOCChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303EOCChannelId.setStatus('current')
gr303IntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IntfAdminStatus.setStatus('current')
gr303IntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IntfOperStatus.setStatus('current')
gr303Ds0ChanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 2), )
if mibBuilder.loadTexts: gr303Ds0ChanConfigTable.setStatus('current')
gr303Ds0ChanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 2, 1), ).setIndexNames((0, "ACMIB", "gr303Ds0ChanId"))
if mibBuilder.loadTexts: gr303Ds0ChanConfigEntry.setStatus('current')
gr303Ds0ChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: gr303Ds0ChanId.setStatus('current')
gr303Ds0ChanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Ds0ChanAdminStatus.setStatus('current')
gr303Ds0ChanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 5, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Ds0ChanOperStatus.setStatus('current')
gr303IgConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1))
gr303IgConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1), )
if mibBuilder.loadTexts: gr303IgConfigTable.setStatus('current')
gr303IgConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1), ).setIndexNames((0, "ACMIB", "gr303IgId"))
if mibBuilder.loadTexts: gr303IgConfigEntry.setStatus('current')
gr303IgId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)))
if mibBuilder.loadTexts: gr303IgId.setStatus('current')
gr303IgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgRowStatus.setStatus('current')
gr303IgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgAdminStatus.setStatus('current')
gr303IgPrimaryTMCChanIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 4), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgPrimaryTMCChanIntfId.setStatus('current')
gr303IgPrimaryEOCChanIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 5), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgPrimaryEOCChanIntfId.setStatus('current')
gr303IgBackupTMCChanIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 6), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgBackupTMCChanIntfId.setStatus('current')
gr303IgBackupEOCChanIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 7), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgBackupEOCChanIntfId.setStatus('current')
gr303IgPrimaryTMCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standby-OutOfService", 1), ("standby-InService", 2), ("active-OutOfService", 3), ("active-InService", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgPrimaryTMCStatus.setStatus('current')
gr303IgPrimaryEOCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standby-OutOfService", 1), ("standby-InService", 2), ("active-OutOfService", 3), ("active-InService", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgPrimaryEOCStatus.setStatus('current')
gr303IgBackupTMCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standby-OutOfService", 1), ("standby-InService", 2), ("active-OutOfService", 3), ("active-InService", 4), ("null", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgBackupTMCStatus.setStatus('current')
gr303IgBackupEOCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standby-OutOfService", 1), ("standby-InService", 2), ("active-OutOfService", 3), ("active-InService", 4), ("null", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgBackupEOCStatus.setStatus('current')
gr303IgTMCProtSwitchProvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps-inhibit", 1), ("pps-enable", 2))).clone('pps-enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgTMCProtSwitchProvState.setStatus('current')
gr303IgEOCProtSwitchProvState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps-inhibit", 1), ("pps-enable", 2))).clone('pps-enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgEOCProtSwitchProvState.setStatus('current')
gr303IgTMCProtSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 1), ("normalSwitchToBackup", 2), ("normalSwitchToPrimary", 3), ("forcedSwitchToBackup", 4), ("forcedSwitchToPrimary", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgTMCProtSwitchCommand.setStatus('current')
gr303IgEOCProtSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 1), ("normalSwitchToBackup", 2), ("normalSwitchToPrimary", 3), ("forcedSwitchToBackup", 4), ("forcedSwitchToPrimary", 5))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgEOCProtSwitchCommand.setStatus('current')
gr303IgLocalDigitalSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lucent-5ess", 1), ("nortel-dms", 2))).clone('lucent-5ess')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgLocalDigitalSwitchType.setStatus('current')
gr303IgLocalDigitalSwitchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lucent-5ess-version-1", 1), ("nortel-dms-version-1", 2))).clone('lucent-5ess-version-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgLocalDigitalSwitchVersion.setStatus('current')
gr303IgIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 2), )
if mibBuilder.loadTexts: gr303IgIntfConfigTable.setStatus('current')
gr303IgIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 2, 1), ).setIndexNames((0, "ACMIB", "gr303IntfIgId"), (0, "ACMIB", "gr303IgIntfId"))
if mibBuilder.loadTexts: gr303IgIntfConfigEntry.setStatus('current')
gr303IntfIgId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)))
if mibBuilder.loadTexts: gr303IntfIgId.setStatus('current')
gr303IgIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: gr303IgIntfId.setStatus('current')
gr303IgIntfPhysId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgIntfPhysId.setStatus('current')
gr303IgIntfNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgIntfNetId.setStatus('current')
gr303IgIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgIntfRowStatus.setStatus('current')
gr303LapdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 4), )
if mibBuilder.loadTexts: gr303LapdConfigTable.setStatus('current')
gr303LapdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 4, 1), ).setIndexNames((0, "ACMIB", "gr303LapdIgId"))
if mibBuilder.loadTexts: gr303LapdConfigEntry.setStatus('current')
gr303LapdIgId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)))
if mibBuilder.loadTexts: gr303LapdIgId.setStatus('current')
gr303T200 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 350)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303T200.setStatus('current')
gr303T203 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303T203.setStatus('current')
gr303N200 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303N200.setStatus('current')
gr303K = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303K.setStatus('current')
gr303TMCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 5), )
if mibBuilder.loadTexts: gr303TMCConfigTable.setStatus('current')
gr303TMCConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 5, 1), ).setIndexNames((0, "ACMIB", "gr303TMCIgId"))
if mibBuilder.loadTexts: gr303TMCConfigEntry.setStatus('current')
gr303TMCIgId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)))
if mibBuilder.loadTexts: gr303TMCIgId.setStatus('current')
gr303TMCT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(700, 4700)).clone(700)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303TMCT303.setStatus('current')
gr303TMCT396 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 26, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(700, 14700)).clone(14700)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303TMCT396.setStatus('current')
gr303IgStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1))
gr303IgStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1), )
if mibBuilder.loadTexts: gr303IgStatsTable.setStatus('current')
gr303IgStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1), ).setIndexNames((0, "ACMIB", "gr303IgStatsIgId"))
if mibBuilder.loadTexts: gr303IgStatsEntry.setStatus('current')
gr303IgStatsIgId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)))
if mibBuilder.loadTexts: gr303IgStatsIgId.setStatus('current')
gr303IgStatsCurrentInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgStatsCurrentInCalls.setStatus('current')
gr303IgStatsCurrentOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgStatsCurrentOutCalls.setStatus('current')
gr303IgStatsOutCallSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgStatsOutCallSuccessful.setStatus('current')
gr303IgStatsOutCallFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgStatsOutCallFailed.setStatus('current')
gr303IgStatsInCallSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgStatsInCallSuccessful.setStatus('current')
gr303IgStatsInCallFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303IgStatsInCallFailed.setStatus('current')
gr303IgStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 27, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303IgStatsReset.setStatus('current')
atmPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1), )
if mibBuilder.loadTexts: atmPvcVccTable.setStatus('current')
atmPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1), ).setIndexNames((0, "ACMIB", "atmPvcVccIfA"), (0, "ACMIB", "atmPvcVccVpiA"), (0, "ACMIB", "atmPvcVccVciA"), (0, "ACMIB", "atmPvcVccIfB"), (0, "ACMIB", "atmPvcVccVpiB"), (0, "ACMIB", "atmPvcVccVciB"))
if mibBuilder.loadTexts: atmPvcVccEntry.setStatus('current')
atmPvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmPvcVccIfA.setStatus('current')
atmPvcVccVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVccVpiA.setStatus('current')
atmPvcVccVciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmPvcVccVciA.setStatus('current')
atmPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 4), IntfIndex())
if mibBuilder.loadTexts: atmPvcVccIfB.setStatus('current')
atmPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVccVpiB.setStatus('current')
atmPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmPvcVccVciB.setStatus('current')
atmPvcVccServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10), ("gfr2", 11))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccServiceTypeA2B.setStatus('current')
atmPvcVccSarTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccSarTypeA2B.setStatus('current')
atmPvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccPeakCellRateA2B.setStatus('current')
atmPvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccSusCellRateA2B.setStatus('current')
atmPvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 12), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccMaxBurstSizeA2B.setStatus('current')
atmPvcVccServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10), ("gfr2", 11))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccServiceTypeB2A.setStatus('current')
atmPvcVccSarTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccSarTypeB2A.setStatus('current')
atmPvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccPeakCellRateB2A.setStatus('current')
atmPvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 17), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccSusCellRateB2A.setStatus('current')
atmPvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 18), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccMaxBurstSizeB2A.setStatus('current')
atmPvcVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonsecured", 1), ("secured", 2))).clone('nonsecured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccType.setStatus('current')
atmPvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("pointToMultipointA2B", 3))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccFlow.setStatus('current')
atmPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 22), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccRowStatus.setStatus('current')
atmPvcVccFrwdErrCorrectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccFrwdErrCorrectionA2B.setStatus('current')
atmPvcVccFrwdErrCorrectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccFrwdErrCorrectionB2A.setStatus('current')
atmPvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccConnectionStatus.setStatus('current')
atmPvcVccOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("seg-Pt", 3), ("end-Seg-Pt", 4), ("intermediate-Pt", 5), ("intra-Segment-Pt", 6))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccOamStatus.setStatus('current')
atmPvcVccDualHomed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccDualHomed.setStatus('current')
atmPvcVccViA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccViA.setStatus('current')
atmPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccViB.setStatus('current')
atmPvcVccCnfrmTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccCnfrmTypeA2B.setStatus('current')
atmPvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccCnfrmTypeB2A.setStatus('current')
atmPvcVccVUNIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccVUNIA.setStatus('current')
atmPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccVUNIB.setStatus('current')
atmPvcVccOamStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("seg-Pt", 3), ("end-Seg-Pt", 4), ("intermediate-Pt", 5), ("intra-Segment-Pt", 6))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccOamStatusB.setStatus('current')
atmPvcVccOAMConnEndPtStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ete-active", 1), ("ete-ais-state", 2), ("ete-rdi-state", 3), ("ete-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccOAMConnEndPtStatusA.setStatus('current')
atmPvcVccOAMConnEndPtStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ete-active", 1), ("ete-ais-state", 2), ("ete-rdi-state", 3), ("ete-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccOAMConnEndPtStatusB.setStatus('current')
atmPvcVccOAMConnSegEndPtStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seg-active", 1), ("seg-ais-state", 2), ("seg-rdi-state", 3), ("seg-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccOAMConnSegEndPtStatusA.setStatus('current')
atmPvcVccOAMConnSegEndPtStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seg-active", 1), ("seg-ais-state", 2), ("seg-rdi-state", 3), ("seg-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccOAMConnSegEndPtStatusB.setStatus('current')
atmPvcVccMfsA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccMfsA2B.setStatus('current')
atmPvcVccMfsB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccMfsB2A.setStatus('current')
atmPvcVccConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 41), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccConnFailureCauseA.setStatus('current')
atmPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 42), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccConnFailureCauseB.setStatus('current')
atmPvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccTrafficShapingA2B.setStatus('current')
atmPvcVccTrafficShapingB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccTrafficShapingB2A.setStatus('current')
atmPvcVpcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2), )
if mibBuilder.loadTexts: atmPvcVpcTable.setStatus('current')
atmPvcVpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1), ).setIndexNames((0, "ACMIB", "atmPvcVpcIfA"), (0, "ACMIB", "atmPvcVpcVpiA"), (0, "ACMIB", "atmPvcVpcIfB"), (0, "ACMIB", "atmPvcVpcVpiB"))
if mibBuilder.loadTexts: atmPvcVpcEntry.setStatus('current')
atmPvcVpcIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmPvcVpcIfA.setStatus('current')
atmPvcVpcVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVpcVpiA.setStatus('current')
atmPvcVpcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 3), IntfIndex())
if mibBuilder.loadTexts: atmPvcVpcIfB.setStatus('current')
atmPvcVpcVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVpcVpiB.setStatus('current')
atmPvcVpcServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcServiceTypeA2B.setStatus('current')
atmPvcVpcSarTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcSarTypeA2B.setStatus('current')
atmPvcVpcPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcPeakCellRateA2B.setStatus('current')
atmPvcVpcSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcSusCellRateA2B.setStatus('current')
atmPvcVpcMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcMaxBurstSizeA2B.setStatus('current')
atmPvcVpcServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcServiceTypeB2A.setStatus('current')
atmPvcVpcSarTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcSarTypeB2A.setStatus('current')
atmPvcVpcPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 14), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcPeakCellRateB2A.setStatus('current')
atmPvcVpcSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 15), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcSusCellRateB2A.setStatus('current')
atmPvcVpcMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcMaxBurstSizeB2A.setStatus('current')
atmPvcVpcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonsecured", 1), ("secured", 2))).clone('nonsecured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcType.setStatus('current')
atmPvcVpcFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("pointToMultipointA2B", 3))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcFlow.setStatus('current')
atmPvcVpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 19), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcRowStatus.setStatus('current')
atmPvcVpcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcConnectionStatus.setStatus('current')
atmPvcVpcOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("seg-Pt", 3), ("end-Seg-Pt", 4), ("intermediate-Pt", 5), ("intra-Segment-Pt", 6))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcOamStatus.setStatus('current')
atmPvcVpcDualHomed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcDualHomed.setStatus('current')
atmPvcVpcViA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcViA.setStatus('current')
atmPvcVpcViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcViB.setStatus('current')
atmPvcVpcCnfrmTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcCnfrmTypeA2B.setStatus('current')
atmPvcVpcCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcCnfrmTypeB2A.setStatus('current')
atmPvcVpcVUNIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcVUNIA.setStatus('current')
atmPvcVpcVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcVUNIB.setStatus('current')
atmPvcVpcOamStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("seg-Pt", 3), ("end-Seg-Pt", 4), ("intermediate-Pt", 5), ("intra-Segment-Pt", 6))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcOamStatusB.setStatus('current')
atmPvcVpcOAMConnEndPtStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ete-active", 1), ("ete-ais-state", 2), ("ete-rdi-state", 3), ("ete-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcOAMConnEndPtStatusA.setStatus('current')
atmPvcVpcOAMConnEndPtStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ete-active", 1), ("ete-ais-state", 2), ("ete-rdi-state", 3), ("ete-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcOAMConnEndPtStatusB.setStatus('current')
atmPvcVpcOAMConnSegEndPtStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seg-active", 1), ("seg-ais-state", 2), ("seg-rdi-state", 3), ("seg-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcOAMConnSegEndPtStatusA.setStatus('current')
atmPvcVpcOAMConnSegEndPtStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seg-active", 1), ("seg-ais-state", 2), ("seg-rdi-state", 3), ("seg-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcOAMConnSegEndPtStatusB.setStatus('current')
atmPvcVpcConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 34), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcConnFailureCauseA.setStatus('current')
atmPvcVpcConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 35), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcConnFailureCauseB.setStatus('current')
atmPvcVpcTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcTrafficShapingA2B.setStatus('current')
atmPvcVpcTrafficShapingB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcTrafficShapingB2A.setStatus('current')
atmSvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3), )
if mibBuilder.loadTexts: atmSvcVccTable.setStatus('current')
atmSvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1), ).setIndexNames((0, "ACMIB", "atmSvcVccIfA"), (0, "ACMIB", "atmSvcVccVpiA"), (0, "ACMIB", "atmSvcVccVciA"), (0, "ACMIB", "atmSvcVccIfB"), (0, "ACMIB", "atmSvcVccVpiB"), (0, "ACMIB", "atmSvcVccVciB"))
if mibBuilder.loadTexts: atmSvcVccEntry.setStatus('current')
atmSvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmSvcVccIfA.setStatus('current')
atmSvcVccVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmSvcVccVpiA.setStatus('current')
atmSvcVccVciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmSvcVccVciA.setStatus('current')
atmSvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 4), IntfIndex())
if mibBuilder.loadTexts: atmSvcVccIfB.setStatus('current')
atmSvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmSvcVccVpiB.setStatus('current')
atmSvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmSvcVccVciB.setStatus('current')
atmSvcVccServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10))).clone('ubr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccServiceTypeA2B.setStatus('current')
atmSvcVccSarTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccSarTypeA2B.setStatus('current')
atmSvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 10), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccPeakCellRateA2B.setStatus('current')
atmSvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 11), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccSusCellRateA2B.setStatus('current')
atmSvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 12), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccMaxBurstSizeA2B.setStatus('current')
atmSvcVccServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10))).clone('ubr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccServiceTypeB2A.setStatus('current')
atmSvcVccSarTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccSarTypeB2A.setStatus('current')
atmSvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 16), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccPeakCellRateB2A.setStatus('current')
atmSvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 17), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccSusCellRateB2A.setStatus('current')
atmSvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 18), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccMaxBurstSizeB2A.setStatus('current')
atmSvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("duplex", 1), ("pointToMultipoint", 2))).clone('duplex')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccFlow.setStatus('current')
atmSvcVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonsecured", 1), ("secured", 2))).clone('nonsecured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccType.setStatus('current')
atmSvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccConnectionStatus.setStatus('current')
atmSvcVccViA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccViA.setStatus('current')
atmSvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccViB.setStatus('current')
atmSvcVccCnfrmTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccCnfrmTypeA2B.setStatus('current')
atmSvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccCnfrmTypeB2A.setStatus('current')
atmSvcVccVUNIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccVUNIA.setStatus('current')
atmSvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccVUNIB.setStatus('current')
atmSvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccTrafficShapingA2B.setStatus('current')
atmSvcVccTrafficShapingB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccTrafficShapingB2A.setStatus('current')
ipAtmAppPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4), )
if mibBuilder.loadTexts: ipAtmAppPvcVccTable.setStatus('current')
ipAtmAppPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1), ).setIndexNames((0, "ACMIB", "ipAtmAppPvcVccDestAddrA"), (0, "ACMIB", "ipAtmAppPvcVccSubnetMaskA"), (0, "ACMIB", "ipAtmAppPvcVccIfB"), (0, "ACMIB", "ipAtmAppPvcVccVpiB"), (0, "ACMIB", "ipAtmAppPvcVccVciB"))
if mibBuilder.loadTexts: ipAtmAppPvcVccEntry.setStatus('current')
ipAtmAppPvcVccDestAddrA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipAtmAppPvcVccDestAddrA.setStatus('current')
ipAtmAppPvcVccSubnetMaskA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipAtmAppPvcVccSubnetMaskA.setStatus('current')
ipAtmAppPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: ipAtmAppPvcVccIfB.setStatus('current')
ipAtmAppPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: ipAtmAppPvcVccVpiB.setStatus('current')
ipAtmAppPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipAtmAppPvcVccVciB.setStatus('current')
ipAtmAppPvcVccServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-express", 2))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccServiceTypeA2B.setStatus('current')
ipAtmAppPvcVccServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-express", 2), ("gfr2", 3))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccServiceTypeB2A.setStatus('current')
ipAtmAppPvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccPeakCellRateB2A.setStatus('current')
ipAtmAppPvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccSusCellRateB2A.setStatus('current')
ipAtmAppPvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccMaxBurstSizeB2A.setStatus('current')
ipAtmAppPvcVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("backup", 1))).clone('primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccType.setStatus('current')
ipAtmAppPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccRowStatus.setStatus('current')
ipAtmAppPvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccConnectionStatus.setStatus('current')
ipAtmAppPvcVccDualHomed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccDualHomed.setStatus('current')
ipAtmAppPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccViB.setStatus('current')
ipAtmAppPvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccCnfrmTypeB2A.setStatus('current')
ipAtmAppPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccVUNIB.setStatus('current')
ipAtmAppPvcVccMfsB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccMfsB2A.setStatus('current')
ipAtmAppPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 19), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccConnFailureCauseB.setStatus('current')
ipAtmAppPvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccTrafficShapingA2B.setStatus('current')
ipAtmAppPvcVccOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("end-Seg-Pt", 3))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccOamStatus.setStatus('current')
ipAtmAppSvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5), )
if mibBuilder.loadTexts: ipAtmAppSvcVccTable.setStatus('current')
ipAtmAppSvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1), ).setIndexNames((0, "ACMIB", "ipAtmAppSvcVccDestAddrA"), (0, "ACMIB", "ipAtmAppSvcVccSubnetMaskA"), (0, "ACMIB", "ipAtmAppSvcVccIfB"), (0, "ACMIB", "ipAtmAppSvcVccVpiB"), (0, "ACMIB", "ipAtmAppSvcVccVciB"))
if mibBuilder.loadTexts: ipAtmAppSvcVccEntry.setStatus('current')
ipAtmAppSvcVccDestAddrA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipAtmAppSvcVccDestAddrA.setStatus('current')
ipAtmAppSvcVccSubnetMaskA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipAtmAppSvcVccSubnetMaskA.setStatus('current')
ipAtmAppSvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 3), Integer32())
if mibBuilder.loadTexts: ipAtmAppSvcVccIfB.setStatus('current')
ipAtmAppSvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: ipAtmAppSvcVccVpiB.setStatus('current')
ipAtmAppSvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipAtmAppSvcVccVciB.setStatus('current')
ipAtmAppSvcVccServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-express", 2))).clone('ubr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccServiceTypeA2B.setStatus('current')
ipAtmAppSvcVccServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-express", 2))).clone('ubr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccServiceTypeB2A.setStatus('current')
ipAtmAppSvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 8), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccPeakCellRateB2A.setStatus('current')
ipAtmAppSvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 9), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccSusCellRateB2A.setStatus('current')
ipAtmAppSvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 10), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccMaxBurstSizeB2A.setStatus('current')
ipAtmAppSvcVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("backup", 1))).clone('primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccType.setStatus('current')
ipAtmAppSvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccConnectionStatus.setStatus('current')
ipAtmAppSvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppSvcVccViB.setStatus('current')
ipAtmAppSvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppSvcVccCnfrmTypeB2A.setStatus('current')
ipAtmAppSvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppSvcVccVUNIB.setStatus('current')
ipAtmAppSvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppSvcVccTrafficShapingA2B.setStatus('current')
cirEmAtmPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6), )
if mibBuilder.loadTexts: cirEmAtmPvcVccTable.setStatus('current')
cirEmAtmPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1), ).setIndexNames((0, "ACMIB", "cirEmAtmPvcVccIfA"), (0, "ACMIB", "cirEmAtmPvcVccIfB"), (0, "ACMIB", "cirEmAtmPvcVccVpiB"), (0, "ACMIB", "cirEmAtmPvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmPvcVccEntry.setStatus('current')
cirEmAtmPvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 1), IntfIndex())
if mibBuilder.loadTexts: cirEmAtmPvcVccIfA.setStatus('current')
cirEmAtmPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 2), IntfIndex())
if mibBuilder.loadTexts: cirEmAtmPvcVccIfB.setStatus('current')
cirEmAtmPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: cirEmAtmPvcVccVpiB.setStatus('current')
cirEmAtmPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cirEmAtmPvcVccVciB.setStatus('current')
cirEmAtmPvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr-1", 1), ("cbr-2", 2), ("cbr-3", 3), ("cbr-4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccServiceType.setStatus('current')
cirEmAtmPvcVccVoiceCompressionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("g726-16k", 2), ("g726-24k", 3), ("g726-32k", 4), ("g726-40k", 5), ("g729a-8k", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccVoiceCompressionA2B.setStatus('current')
cirEmAtmPvcVccSilenceDetectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccSilenceDetectionA2B.setStatus('current')
cirEmAtmPvcVccEchoCancellationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccEchoCancellationA2B.setStatus('current')
cirEmAtmPvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3), ("pointToMultipointA2B", 4), ("pointToMultipointB2A", 5))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccFlow.setStatus('current')
cirEmAtmPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccRowStatus.setStatus('current')
cirEmAtmPvcVccCngToneDetectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("bypass", 2), ("g726-32k", 3), ("faxRelay", 4), ("fxRlyMdmBypass", 5))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccCngToneDetectionA2B.setStatus('current')
cirEmAtmPvcVccCodingTranslationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccCodingTranslationA2B.setStatus('current')
cirEmAtmPvcVccVoiceCompressionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("g726-16k", 2), ("g726-24k", 3), ("g726-32k", 4), ("g726-40k", 5), ("g729a-8k", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccVoiceCompressionB2A.setStatus('current')
cirEmAtmPvcVccSilenceDetectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccSilenceDetectionB2A.setStatus('current')
cirEmAtmPvcVccEchoCancellationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccEchoCancellationB2A.setStatus('current')
cirEmAtmPvcVccCngToneDetectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("bypass", 2), ("g726-32k", 3), ("faxRelay", 4), ("fxRlyMdmBypass", 5))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccCngToneDetectionB2A.setStatus('current')
cirEmAtmPvcVccCodingTranslationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccCodingTranslationB2A.setStatus('current')
cirEmAtmPvcVccSarTypeB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("aal2", 3), ("aal1", 4), ("aal2Std", 5))).clone('aal1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccSarTypeB.setStatus('current')
cirEmAtmPvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccConnectionStatus.setStatus('current')
cirEmAtmPvcVccDualHomed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccDualHomed.setStatus('current')
cirEmAtmPvcVccOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("end-Seg-Pt", 3))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccOamStatus.setStatus('current')
cirEmAtmPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccViB.setStatus('current')
cirEmAtmPvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccCnfrmTypeB2A.setStatus('current')
cirEmAtmPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccVUNIB.setStatus('current')
cirEmAtmPvcVccAal2Cid = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccAal2Cid.setStatus('current')
cirEmAtmPvcVccOAMConnEndPtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ete-active", 1), ("ete-ais-state", 2), ("ete-rdi-state", 3), ("ete-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccOAMConnEndPtStatus.setStatus('current')
cirEmAtmPvcVccOAMConnSegEndPtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seg-active", 1), ("seg-ais-state", 2), ("seg-rdi-state", 3), ("seg-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccOAMConnSegEndPtStatus.setStatus('current')
cirEmAtmPvcVccConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 28), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccConnFailureCauseA.setStatus('current')
cirEmAtmPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 29), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccConnFailureCauseB.setStatus('current')
cirEmAtmPvcVccDigitCollectTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("dtmf", 2), ("mf", 3), ("mf-r2-frwd", 4), ("mf-r2-bkwd", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccDigitCollectTypeA2B.setStatus('current')
cirEmAtmPvcVccDigitCollectTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("dtmf", 2), ("mf", 3), ("mf-r2-frwd", 4), ("mf-r2-bkwd", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccDigitCollectTypeB2A.setStatus('current')
cirEmAtmPvcVccEncodingStdA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("atmForum", 2), ("itu-t", 3))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccEncodingStdA2B.setStatus('current')
cirEmAtmPvcVccEncodingStdB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("atmForum", 2), ("itu-t", 3))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccEncodingStdB2A.setStatus('current')
cirEmAtmPvcVccEncodingProfileIdA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccEncodingProfileIdA2B.setStatus('current')
cirEmAtmPvcVccEncodingProfileIdB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccEncodingProfileIdB2A.setStatus('current')
frAtmPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7), )
if mibBuilder.loadTexts: frAtmPvcVccTable.setStatus('current')
frAtmPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1), ).setIndexNames((0, "ACMIB", "frAtmPvcVccIfA"), (0, "ACMIB", "frAtmPvcVccDlciA"), (0, "ACMIB", "frAtmPvcVccIfB"), (0, "ACMIB", "frAtmPvcVccVpiB"), (0, "ACMIB", "frAtmPvcVccVciB"))
if mibBuilder.loadTexts: frAtmPvcVccEntry.setStatus('current')
frAtmPvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 1), IntfIndex())
if mibBuilder.loadTexts: frAtmPvcVccIfA.setStatus('current')
frAtmPvcVccDlciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: frAtmPvcVccDlciA.setStatus('current')
frAtmPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 3), IntfIndex())
if mibBuilder.loadTexts: frAtmPvcVccIfB.setStatus('current')
frAtmPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: frAtmPvcVccVpiB.setStatus('current')
frAtmPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: frAtmPvcVccVciB.setStatus('current')
frAtmPvcVccMaxFrameSizeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 6), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccMaxFrameSizeIn.setStatus('current')
frAtmPvcVccBcIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccBcIn.setStatus('current')
frAtmPvcVccBeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 8), Integer32().clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccBeIn.setStatus('current')
frAtmPvcVccCirIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccCirIn.setStatus('current')
frAtmPvcVccMaxFrameSizeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 10), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccMaxFrameSizeOut.setStatus('current')
frAtmPvcVccBcOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccBcOut.setStatus('current')
frAtmPvcVccBeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 12), Integer32().clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccBeOut.setStatus('current')
frAtmPvcVccCirOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccCirOut.setStatus('current')
frAtmPvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("gfr2", 7))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccServiceType.setStatus('current')
frAtmPvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccFlow.setStatus('current')
frAtmPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccRowStatus.setStatus('current')
frAtmPvcVccTimeLenIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccTimeLenIn.setStatus('current')
frAtmPvcVccInterWorkingFuncIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frf8-Transl", 1), ("frf8-Pass", 2), ("frf5", 3))).clone('frf8-Transl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccInterWorkingFuncIn.setStatus('current')
frAtmPvcVccTimeLenOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccTimeLenOut.setStatus('current')
frAtmPvcVccInterWorkingFuncOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frf8-Transl", 1), ("frf8-Pass", 2), ("frf5", 3))).clone('frf8-Transl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccInterWorkingFuncOut.setStatus('current')
frAtmPvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 21), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccPeakCellRateA2B.setStatus('current')
frAtmPvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 22), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccSusCellRateA2B.setStatus('current')
frAtmPvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 23), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccMaxBurstSizeA2B.setStatus('current')
frAtmPvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 24), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccPeakCellRateB2A.setStatus('current')
frAtmPvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 25), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccSusCellRateB2A.setStatus('current')
frAtmPvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 26), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccMaxBurstSizeB2A.setStatus('current')
frAtmPvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccConnectionStatus.setStatus('current')
frAtmPvcVccDualHomed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccDualHomed.setStatus('current')
frAtmPvcVccOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("end-Seg-Pt", 3))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccOamStatus.setStatus('current')
frAtmPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccViB.setStatus('current')
frAtmPvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccCnfrmTypeB2A.setStatus('current')
frAtmPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccVUNIB.setStatus('current')
frAtmPvcVccOAMConnEndPtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ete-active", 1), ("ete-ais-state", 2), ("ete-rdi-state", 3), ("ete-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccOAMConnEndPtStatus.setStatus('current')
frAtmPvcVccOAMSegEndPtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seg-active", 1), ("seg-ais-state", 2), ("seg-rdi-state", 3), ("seg-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccOAMSegEndPtStatus.setStatus('current')
frAtmPvcVccMfsB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccMfsB2A.setStatus('current')
frAtmPvcVccConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 36), FrConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccConnFailureCauseA.setStatus('current')
frAtmPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 37), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccConnFailureCauseB.setStatus('current')
frAtmPvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 7, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccTrafficShapingA2B.setStatus('current')
frFrPvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8), )
if mibBuilder.loadTexts: frFrPvcTable.setStatus('current')
frFrPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1), ).setIndexNames((0, "ACMIB", "frFrPvcIfA"), (0, "ACMIB", "frFrPvcDlciA"), (0, "ACMIB", "frFrPvcIfB"), (0, "ACMIB", "frFrPvcDlciB"))
if mibBuilder.loadTexts: frFrPvcEntry.setStatus('current')
frFrPvcIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 1), IntfIndex())
if mibBuilder.loadTexts: frFrPvcIfA.setStatus('current')
frFrPvcDlciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 2), Integer32())
if mibBuilder.loadTexts: frFrPvcDlciA.setStatus('current')
frFrPvcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 3), IntfIndex())
if mibBuilder.loadTexts: frFrPvcIfB.setStatus('current')
frFrPvcDlciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 4), Integer32())
if mibBuilder.loadTexts: frFrPvcDlciB.setStatus('current')
frFrPvcMaxFrameSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 5), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcMaxFrameSizeA2B.setStatus('current')
frFrPvcBcA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcBcA2B.setStatus('current')
frFrPvcBeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 7), Integer32().clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcBeA2B.setStatus('current')
frFrPvcCirA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcCirA2B.setStatus('current')
frFrPvcMaxFrameSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 9), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcMaxFrameSizeB2A.setStatus('current')
frFrPvcBcB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcBcB2A.setStatus('current')
frFrPvcBeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 11), Integer32().clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcBeB2A.setStatus('current')
frFrPvcCirB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcCirB2A.setStatus('current')
frFrPvcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcServiceType.setStatus('current')
frFrPvcFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcFlow.setStatus('current')
frFrPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcRowStatus.setStatus('current')
frFrPvcTimeLenA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcTimeLenA2B.setStatus('current')
frFrPvcInterWorkingFuncA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frf8-Transl", 1), ("frf8-Pass", 2), ("frf5", 3))).clone('frf8-Transl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcInterWorkingFuncA2B.setStatus('current')
frFrPvcTimeLenB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcTimeLenB2A.setStatus('current')
frFrPvcInterWorkingFuncB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frf8-Transl", 1), ("frf8-Pass", 2), ("frf5", 3))).clone('frf8-Transl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcInterWorkingFuncB2A.setStatus('current')
frFrPvcPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 20), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcPeakCellRateA2B.setStatus('current')
frFrPvcSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 21), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcSusCellRateA2B.setStatus('current')
frFrPvcMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 22), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcMaxBurstSizeA2B.setStatus('current')
frFrPvcPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 23), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcPeakCellRateB2A.setStatus('current')
frFrPvcSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 24), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcSusCellRateB2A.setStatus('current')
frFrPvcMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 25), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcMaxBurstSizeB2A.setStatus('current')
frFrPvcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcConnectionStatus.setStatus('current')
frFrPvcConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 27), FrConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcConnFailureCauseA.setStatus('current')
frFrPvcConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 8, 1, 28), FrConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcConnFailureCauseB.setStatus('current')
vbrAtmPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9), )
if mibBuilder.loadTexts: vbrAtmPvcVccTable.setStatus('current')
vbrAtmPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1), ).setIndexNames((0, "ACMIB", "vbrAtmPvcVccIfA"), (0, "ACMIB", "vbrAtmPvcVccIfB"), (0, "ACMIB", "vbrAtmPvcVccVpiB"), (0, "ACMIB", "vbrAtmPvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmPvcVccEntry.setStatus('current')
vbrAtmPvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vbrAtmPvcVccIfA.setStatus('current')
vbrAtmPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 2), IntfIndex())
if mibBuilder.loadTexts: vbrAtmPvcVccIfB.setStatus('current')
vbrAtmPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: vbrAtmPvcVccVpiB.setStatus('current')
vbrAtmPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vbrAtmPvcVccVciB.setStatus('current')
vbrAtmPvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("gfr2", 7))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccServiceType.setStatus('current')
vbrAtmPvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccPeakCellRateA2B.setStatus('current')
vbrAtmPvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccSusCellRateA2B.setStatus('current')
vbrAtmPvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccMaxBurstSizeA2B.setStatus('current')
vbrAtmPvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccPeakCellRateB2A.setStatus('current')
vbrAtmPvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccSusCellRateB2A.setStatus('current')
vbrAtmPvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccMaxBurstSizeB2A.setStatus('current')
vbrAtmPvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccFlow.setStatus('current')
vbrAtmPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccRowStatus.setStatus('current')
vbrAtmPvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccConnectionStatus.setStatus('current')
vbrAtmPvcVccDualHomed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccDualHomed.setStatus('current')
vbrAtmPvcVccOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("end-Seg-Pt", 3))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccOamStatus.setStatus('current')
vbrAtmPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccViB.setStatus('current')
vbrAtmPvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccCnfrmTypeB2A.setStatus('current')
vbrAtmPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccVUNIB.setStatus('current')
vbrAtmPvcVccOAMConnEndPtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ete-active", 1), ("ete-ais-state", 2), ("ete-rdi-state", 3), ("ete-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccOAMConnEndPtStatus.setStatus('current')
vbrAtmPvcVccOAMSegEndPtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seg-active", 1), ("seg-ais-state", 2), ("seg-rdi-state", 3), ("seg-ais-rdi-state", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccOAMSegEndPtStatus.setStatus('current')
vbrAtmPvcVccMfsB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccMfsB2A.setStatus('current')
vbrAtmPvcVccConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 23), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccConnFailureCauseA.setStatus('current')
vbrAtmPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 24), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccConnFailureCauseB.setStatus('current')
vbrAtmPvcVccSarTypeB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aal5", 2), ("aal2Std", 3))).clone('aal5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccSarTypeB.setStatus('current')
vbrAtmPvcVccAal2Cid = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccAal2Cid.setStatus('current')
vbrAtmPvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccTrafficShapingA2B.setStatus('current')
cirEmCirEmPvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10), )
if mibBuilder.loadTexts: cirEmCirEmPvcTable.setStatus('current')
cirEmCirEmPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1), ).setIndexNames((0, "ACMIB", "cirEmCirEmPvcIfA"), (0, "ACMIB", "cirEmCirEmPvcIfB"))
if mibBuilder.loadTexts: cirEmCirEmPvcEntry.setStatus('current')
cirEmCirEmPvcIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 1), IntfIndex())
if mibBuilder.loadTexts: cirEmCirEmPvcIfA.setStatus('current')
cirEmCirEmPvcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 2), IntfIndex())
if mibBuilder.loadTexts: cirEmCirEmPvcIfB.setStatus('current')
cirEmCirEmPvcEchoCancellationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcEchoCancellationA2B.setStatus('current')
cirEmCirEmPvcFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcFlow.setStatus('current')
cirEmCirEmPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcRowStatus.setStatus('current')
cirEmCirEmPvcCodingTranslationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcCodingTranslationA2B.setStatus('current')
cirEmCirEmPvcEchoCancellationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcEchoCancellationB2A.setStatus('current')
cirEmCirEmPvcCodingTranslationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcCodingTranslationB2A.setStatus('current')
cirEmCirEmPvcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcConnectionStatus.setStatus('current')
cirEmCirEmPvcInterworking = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcInterworking.setStatus('current')
cirEmCirEmPvcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr-1", 1), ("cbr-2", 2), ("cbr-3", 3), ("cbr-4", 4))).clone('cbr-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcServiceType.setStatus('current')
cirEmCirEmPvcConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 14), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcConnFailureCauseA.setStatus('current')
cirEmCirEmPvcConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 10, 1, 15), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcConnFailureCauseB.setStatus('current')
vbrVbrPvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11), )
if mibBuilder.loadTexts: vbrVbrPvcTable.setStatus('current')
vbrVbrPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1), ).setIndexNames((0, "ACMIB", "vbrVbrPvcIfA"), (0, "ACMIB", "vbrVbrPvcIfB"))
if mibBuilder.loadTexts: vbrVbrPvcEntry.setStatus('current')
vbrVbrPvcIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vbrVbrPvcIfA.setStatus('current')
vbrVbrPvcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 2), IntfIndex())
if mibBuilder.loadTexts: vbrVbrPvcIfB.setStatus('current')
vbrVbrPvcPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcPeakCellRateA2B.setStatus('current')
vbrVbrPvcSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 4), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcSusCellRateA2B.setStatus('current')
vbrVbrPvcMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcMaxBurstSizeA2B.setStatus('current')
vbrVbrPvcPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcPeakCellRateB2A.setStatus('current')
vbrVbrPvcSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcSusCellRateB2A.setStatus('current')
vbrVbrPvcMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcMaxBurstSizeB2A.setStatus('current')
vbrVbrPvcFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcFlow.setStatus('current')
vbrVbrPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcRowStatus.setStatus('current')
vbrVbrPvcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcConnectionStatus.setStatus('current')
vbrVbrPvcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcServiceType.setStatus('current')
vbrVbrPvcConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 13), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcConnFailureCauseA.setStatus('current')
vbrVbrPvcConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 11, 1, 14), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcConnFailureCauseB.setStatus('current')
bridgeBridgePvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12), )
if mibBuilder.loadTexts: bridgeBridgePvcTable.setStatus('current')
bridgeBridgePvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12, 1), ).setIndexNames((0, "ACMIB", "bridgeBridgePvcIfA"), (0, "ACMIB", "bridgeBridgePvcIfB"))
if mibBuilder.loadTexts: bridgeBridgePvcEntry.setStatus('current')
bridgeBridgePvcIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: bridgeBridgePvcIfA.setStatus('current')
bridgeBridgePvcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12, 1, 2), Integer32())
if mibBuilder.loadTexts: bridgeBridgePvcIfB.setStatus('current')
bridgeBridgePvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeBridgePvcRowStatus.setStatus('current')
bridgeBridgePvcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcConnectionStatus.setStatus('current')
bridgeBridgePvcConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12, 1, 5), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcConnFailureCauseA.setStatus('current')
bridgeBridgePvcConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 12, 1, 6), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcConnFailureCauseB.setStatus('current')
bridgeAtmPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13), )
if mibBuilder.loadTexts: bridgeAtmPvcVccTable.setStatus('current')
bridgeAtmPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1), ).setIndexNames((0, "ACMIB", "bridgeAtmPvcVccIfA"), (0, "ACMIB", "bridgeAtmPvcVccIfB"), (0, "ACMIB", "bridgeAtmPvcVccVpiB"), (0, "ACMIB", "bridgeAtmPvcVccVciB"))
if mibBuilder.loadTexts: bridgeAtmPvcVccEntry.setStatus('current')
bridgeAtmPvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: bridgeAtmPvcVccIfA.setStatus('current')
bridgeAtmPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 2), Integer32())
if mibBuilder.loadTexts: bridgeAtmPvcVccIfB.setStatus('current')
bridgeAtmPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: bridgeAtmPvcVccVpiB.setStatus('current')
bridgeAtmPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: bridgeAtmPvcVccVciB.setStatus('current')
bridgeAtmPvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("gfr2", 7))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccServiceType.setStatus('current')
bridgeAtmPvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccPeakCellRateB2A.setStatus('current')
bridgeAtmPvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccSusCellRateB2A.setStatus('current')
bridgeAtmPvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccMaxBurstSizeB2A.setStatus('current')
bridgeAtmPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccRowStatus.setStatus('current')
bridgeAtmPvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccConnectionStatus.setStatus('current')
bridgeAtmPvcVccDualHomed = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccDualHomed.setStatus('current')
bridgeAtmPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccViB.setStatus('current')
bridgeAtmPvcVccCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccCnfrmTypeB2A.setStatus('current')
bridgeAtmPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccVUNIB.setStatus('current')
bridgeAtmPvcVccMfsB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccMfsB2A.setStatus('current')
bridgeAtmPvcVccConnFailureCauseA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 17), ConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccConnFailureCauseA.setStatus('current')
bridgeAtmPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 18), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccConnFailureCauseB.setStatus('current')
bridgeAtmPvcVccOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("end-Seg-Pt", 3))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccOamStatus.setStatus('current')
bridgeAtmPvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccTrafficShapingA2B.setStatus('current')
cirEmAtmBkPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14), )
if mibBuilder.loadTexts: cirEmAtmBkPvcVccTable.setStatus('current')
cirEmAtmBkPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1), ).setIndexNames((0, "ACMIB", "cirEmAtmPvcVccIfA"), (0, "ACMIB", "cirEmAtmPvcVccIfB"), (0, "ACMIB", "cirEmAtmPvcVccVpiB"), (0, "ACMIB", "cirEmAtmPvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmBkPvcVccEntry.setStatus('current')
cirEmAtmBkPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccIfB.setStatus('current')
cirEmAtmBkPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccVpiB.setStatus('current')
cirEmAtmBkPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccVciB.setStatus('current')
cirEmAtmBkPvcVccActivePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccActivePvc.setStatus('current')
cirEmAtmBkPvcVccAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccAutoSwitch.setStatus('current')
cirEmAtmBkPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccRowStatus.setStatus('current')
cirEmAtmBkPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccViB.setStatus('current')
cirEmAtmBkPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccVUNIB.setStatus('current')
cirEmAtmBkPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 14, 1, 9), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmBkPvcVccConnFailureCauseB.setStatus('current')
vbrAtmBkPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15), )
if mibBuilder.loadTexts: vbrAtmBkPvcVccTable.setStatus('current')
vbrAtmBkPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1), ).setIndexNames((0, "ACMIB", "vbrAtmPvcVccIfA"), (0, "ACMIB", "vbrAtmPvcVccIfB"), (0, "ACMIB", "vbrAtmPvcVccVpiB"), (0, "ACMIB", "vbrAtmPvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmBkPvcVccEntry.setStatus('current')
vbrAtmBkPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmBkPvcVccIfB.setStatus('current')
vbrAtmBkPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmBkPvcVccVpiB.setStatus('current')
vbrAtmBkPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmBkPvcVccVciB.setStatus('current')
vbrAtmBkPvcVccActivePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmBkPvcVccActivePvc.setStatus('current')
vbrAtmBkPvcVccAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmBkPvcVccAutoSwitch.setStatus('current')
vbrAtmBkPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmBkPvcVccRowStatus.setStatus('current')
vbrAtmBkPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmBkPvcVccViB.setStatus('current')
vbrAtmBkPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmBkPvcVccVUNIB.setStatus('current')
vbrAtmBkPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 15, 1, 9), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmBkPvcVccConnFailureCauseB.setStatus('current')
atmSpvcVccAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 16), )
if mibBuilder.loadTexts: atmSpvcVccAddrTable.setStatus('current')
atmSpvcVccAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 16, 1), ).setIndexNames((0, "ACMIB", "atmSpvcVccIfA"))
if mibBuilder.loadTexts: atmSpvcVccAddrEntry.setStatus('current')
atmSpvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 16, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmSpvcVccIfA.setStatus('current')
atmSpvcVccAtmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccAtmPortAddr.setStatus('current')
atmSpvcVccAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 16, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccAddrRowStatus.setStatus('current')
atmSpvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17), )
if mibBuilder.loadTexts: atmSpvcVccTable.setStatus('current')
atmSpvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1), ).setIndexNames((0, "ACMIB", "atmSpvcVccIfA"), (0, "ACMIB", "atmSpvcVccVpiA"), (0, "ACMIB", "atmSpvcVccVciA"))
if mibBuilder.loadTexts: atmSpvcVccEntry.setStatus('current')
atmSpvcVccVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmSpvcVccVpiA.setStatus('current')
atmSpvcVccVciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmSpvcVccVciA.setStatus('current')
atmSpvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 3), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccIfB.setStatus('current')
atmSpvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccVpiB.setStatus('current')
atmSpvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccVciB.setStatus('current')
atmSpvcVccServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccServiceTypeA2B.setStatus('current')
atmSpvcVccSarTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccSarTypeA2B.setStatus('current')
atmSpvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccPeakCellRateA2B.setStatus('current')
atmSpvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccSusCellRateA2B.setStatus('current')
atmSpvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccMaxBurstSizeA2B.setStatus('current')
atmSpvcVccFrwdErrCorrectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccFrwdErrCorrectionA2B.setStatus('current')
atmSpvcVccServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccServiceTypeB2A.setStatus('current')
atmSpvcVccSarTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccSarTypeB2A.setStatus('current')
atmSpvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 14), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccPeakCellRateB2A.setStatus('current')
atmSpvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 15), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccSusCellRateB2A.setStatus('current')
atmSpvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccMaxBurstSizeB2A.setStatus('current')
atmSpvcVccFrwdErrCorrectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccFrwdErrCorrectionB2A.setStatus('current')
atmSpvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("pointToMultipointA2B", 3), ("simplexB2A", 4))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccFlow.setStatus('current')
atmSpvcVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonsecured", 1), ("secured", 2))).clone('nonsecured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccType.setStatus('current')
atmSpvcVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccConnType.setStatus('current')
atmSpvcVccLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccLeafReference.setStatus('current')
atmSpvcVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccOperStatus.setStatus('current')
atmSpvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 23), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRowStatus.setStatus('current')
atmSpvcVccViA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccViA.setStatus('current')
atmSpvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccViB.setStatus('current')
atmSpvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccTrafficShapingA2B.setStatus('current')
atmSpvcVccTrafficShapingB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 17, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccTrafficShapingB2A.setStatus('current')
atmSpvcVccActiveSvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18), )
if mibBuilder.loadTexts: atmSpvcVccActiveSvcTable.setStatus('current')
atmSpvcVccActiveSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1), ).setIndexNames((0, "ACMIB", "atmSpvcVccIfA"), (0, "ACMIB", "atmSpvcVccVpiA"), (0, "ACMIB", "atmSpvcVccVciA"))
if mibBuilder.loadTexts: atmSpvcVccActiveSvcEntry.setStatus('current')
atmSpvcVccRemoteAtmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRemoteAtmPortAddr.setStatus('current')
atmSpvcVccRemoteSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("required", 1), ("any", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRemoteSelectType.setStatus('current')
atmSpvcVccRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRemoteVpi.setStatus('current')
atmSpvcVccRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRemoteVci.setStatus('current')
atmSpvcVccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRetryInterval.setStatus('current')
atmSpvcVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRetryLimit.setStatus('current')
atmSpvcVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRestart.setStatus('current')
atmSpvcVccRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccRetryFailure.setStatus('current')
atmSpvcVccReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccReleaseCause.setStatus('current')
atmSpvcVccReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 18, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccReleaseDiag.setStatus('current')
cirEmAtmSpvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19), )
if mibBuilder.loadTexts: cirEmAtmSpvcVccTable.setStatus('current')
cirEmAtmSpvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1), ).setIndexNames((0, "ACMIB", "cirEmAtmSpvcVccIfA"))
if mibBuilder.loadTexts: cirEmAtmSpvcVccEntry.setStatus('current')
cirEmAtmSpvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 1), IntfIndex())
if mibBuilder.loadTexts: cirEmAtmSpvcVccIfA.setStatus('current')
cirEmAtmSpvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 2), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccIfB.setStatus('current')
cirEmAtmSpvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccVpiB.setStatus('current')
cirEmAtmSpvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccVciB.setStatus('current')
cirEmAtmSpvcVccVoiceCompressionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("g726-16k", 2), ("g726-24k", 3), ("g726-32k", 4), ("g726-40k", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccVoiceCompressionA2B.setStatus('current')
cirEmAtmSpvcVccSilenceDetectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccSilenceDetectionA2B.setStatus('current')
cirEmAtmSpvcVccEchoCancellationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccEchoCancellationA2B.setStatus('current')
cirEmAtmSpvcVccCngToneDetectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("bypass", 2), ("g726-32k", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccCngToneDetectionA2B.setStatus('current')
cirEmAtmSpvcVccCodingTranslationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccCodingTranslationA2B.setStatus('current')
cirEmAtmSpvcVccVoiceCompressionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("g726-16k", 2), ("g726-24k", 3), ("g726-32k", 4), ("g726-40k", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccVoiceCompressionB2A.setStatus('current')
cirEmAtmSpvcVccSilenceDetectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccSilenceDetectionB2A.setStatus('current')
cirEmAtmSpvcVccEchoCancellationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccEchoCancellationB2A.setStatus('current')
cirEmAtmSpvcVccCngToneDetectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("bypass", 2), ("g726-32k", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccCngToneDetectionB2A.setStatus('current')
cirEmAtmSpvcVccCodingTranslationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccCodingTranslationB2A.setStatus('current')
cirEmAtmSpvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3), ("pointToMultipointA2B", 4), ("pointToMultipointB2A", 5))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccFlow.setStatus('current')
cirEmAtmSpvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr-1", 1), ("cbr-2", 2), ("cbr-3", 3), ("cbr-4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccServiceType.setStatus('current')
cirEmAtmSpvcVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccConnType.setStatus('current')
cirEmAtmSpvcVccCePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccCePortAddr.setStatus('current')
cirEmAtmSpvcVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccOperStatus.setStatus('current')
cirEmAtmSpvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccRowStatus.setStatus('current')
cirEmAtmSpvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 19, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccViB.setStatus('current')
cirEmAtmSpvcVccActiveSvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20), )
if mibBuilder.loadTexts: cirEmAtmSpvcVccActiveSvcTable.setStatus('current')
cirEmAtmSpvcVccActiveSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1), ).setIndexNames((0, "ACMIB", "cirEmAtmSpvcVccIfA"))
if mibBuilder.loadTexts: cirEmAtmSpvcVccActiveSvcEntry.setStatus('current')
cirEmAtmSpvcVccRemoteCePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccRemoteCePortAddr.setStatus('current')
cirEmAtmSpvcVccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccRetryInterval.setStatus('current')
cirEmAtmSpvcVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccRetryLimit.setStatus('current')
cirEmAtmSpvcVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccRestart.setStatus('current')
cirEmAtmSpvcVccRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccRetryFailure.setStatus('current')
cirEmAtmSpvcVccReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccReleaseCause.setStatus('current')
cirEmAtmSpvcVccReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 20, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccReleaseDiag.setStatus('current')
vbrAtmSpvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21), )
if mibBuilder.loadTexts: vbrAtmSpvcVccTable.setStatus('current')
vbrAtmSpvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1), ).setIndexNames((0, "ACMIB", "vbrAtmSpvcVccIfA"))
if mibBuilder.loadTexts: vbrAtmSpvcVccEntry.setStatus('current')
vbrAtmSpvcVccIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vbrAtmSpvcVccIfA.setStatus('current')
vbrAtmSpvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 2), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccIfB.setStatus('current')
vbrAtmSpvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccVpiB.setStatus('current')
vbrAtmSpvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccVciB.setStatus('current')
vbrAtmSpvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt1", 2), ("vbr-nrt2", 3), ("vbr-rt1", 4), ("vbr-rt2", 5), ("vbr-express", 6))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccServiceType.setStatus('current')
vbrAtmSpvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccPeakCellRateA2B.setStatus('current')
vbrAtmSpvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccSusCellRateA2B.setStatus('current')
vbrAtmSpvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccMaxBurstSizeA2B.setStatus('current')
vbrAtmSpvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccPeakCellRateB2A.setStatus('current')
vbrAtmSpvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccSusCellRateB2A.setStatus('current')
vbrAtmSpvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccMaxBurstSizeB2A.setStatus('current')
vbrAtmSpvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccFlow.setStatus('current')
vbrAtmSpvcVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccConnType.setStatus('current')
vbrAtmSpvcVccVbrPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccVbrPortAddr.setStatus('current')
vbrAtmSpvcVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccOperStatus.setStatus('current')
vbrAtmSpvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccRowStatus.setStatus('current')
vbrAtmSpvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccViB.setStatus('current')
vbrAtmSpvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccTrafficShapingA2B.setStatus('current')
vbrAtmSpvcVccActiveSvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22), )
if mibBuilder.loadTexts: vbrAtmSpvcVccActiveSvcTable.setStatus('current')
vbrAtmSpvcVccActiveSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1), ).setIndexNames((0, "ACMIB", "vbrAtmSpvcVccIfA"))
if mibBuilder.loadTexts: vbrAtmSpvcVccActiveSvcEntry.setStatus('current')
vbrAtmSpvcVccRemoteVbrPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccRemoteVbrPortAddr.setStatus('current')
vbrAtmSpvcVccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccRetryInterval.setStatus('current')
vbrAtmSpvcVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccRetryLimit.setStatus('current')
vbrAtmSpvcVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccRestart.setStatus('current')
vbrAtmSpvcVccRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccRetryFailure.setStatus('current')
vbrAtmSpvcVccReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccReleaseCause.setStatus('current')
vbrAtmSpvcVccReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 22, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccReleaseDiag.setStatus('current')
atmSpvcVccRlsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 23), )
if mibBuilder.loadTexts: atmSpvcVccRlsTable.setStatus('current')
atmSpvcVccRlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 23, 1), ).setIndexNames((0, "ACMIB", "atmSpvcVccIfA"), (0, "ACMIB", "atmSpvcVccVpiA"), (0, "ACMIB", "atmSpvcVccVciA"))
if mibBuilder.loadTexts: atmSpvcVccRlsEntry.setStatus('current')
atmSpvcVccRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccRelease.setStatus('current')
cirEmAtmSpvcVccRlsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 24), )
if mibBuilder.loadTexts: cirEmAtmSpvcVccRlsTable.setStatus('current')
cirEmAtmSpvcVccRlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 24, 1), ).setIndexNames((0, "ACMIB", "cirEmAtmSpvcVccIfA"))
if mibBuilder.loadTexts: cirEmAtmSpvcVccRlsEntry.setStatus('current')
cirEmAtmSpvcVccRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccRelease.setStatus('current')
vbrAtmSpvcVccRlsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 25), )
if mibBuilder.loadTexts: vbrAtmSpvcVccRlsTable.setStatus('current')
vbrAtmSpvcVccRlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 25, 1), ).setIndexNames((0, "ACMIB", "vbrAtmSpvcVccIfA"))
if mibBuilder.loadTexts: vbrAtmSpvcVccRlsEntry.setStatus('current')
vbrAtmSpvcVccRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccRelease.setStatus('current')
frAtmBkPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26), )
if mibBuilder.loadTexts: frAtmBkPvcVccTable.setStatus('current')
frAtmBkPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1), ).setIndexNames((0, "ACMIB", "frAtmPvcVccIfA"), (0, "ACMIB", "frAtmPvcVccDlciA"), (0, "ACMIB", "frAtmPvcVccIfB"), (0, "ACMIB", "frAtmPvcVccVpiB"), (0, "ACMIB", "frAtmPvcVccVciB"))
if mibBuilder.loadTexts: frAtmBkPvcVccEntry.setStatus('current')
frAtmBkPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmBkPvcVccIfB.setStatus('current')
frAtmBkPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmBkPvcVccVpiB.setStatus('current')
frAtmBkPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmBkPvcVccVciB.setStatus('current')
frAtmBkPvcVccActivePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmBkPvcVccActivePvc.setStatus('current')
frAtmBkPvcVccAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmBkPvcVccAutoSwitch.setStatus('current')
frAtmBkPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmBkPvcVccRowStatus.setStatus('current')
frAtmBkPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmBkPvcVccViB.setStatus('current')
frAtmBkPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmBkPvcVccVUNIB.setStatus('current')
frAtmBkPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 26, 1, 9), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmBkPvcVccConnFailureCauseB.setStatus('current')
atmBkPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27), )
if mibBuilder.loadTexts: atmBkPvcVccTable.setStatus('current')
atmBkPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1), ).setIndexNames((0, "ACMIB", "atmPvcVccIfA"), (0, "ACMIB", "atmPvcVccVpiA"), (0, "ACMIB", "atmPvcVccVciA"), (0, "ACMIB", "atmPvcVccIfB"), (0, "ACMIB", "atmPvcVccVpiB"), (0, "ACMIB", "atmPvcVccVciB"))
if mibBuilder.loadTexts: atmBkPvcVccEntry.setStatus('current')
atmBkPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVccIfB.setStatus('current')
atmBkPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVccVpiB.setStatus('current')
atmBkPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVccVciB.setStatus('current')
atmBkPvcVccActivePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBkPvcVccActivePvc.setStatus('current')
atmBkPvcVccAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVccAutoSwitch.setStatus('current')
atmBkPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVccRowStatus.setStatus('current')
atmBkPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVccViB.setStatus('current')
atmBkPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVccVUNIB.setStatus('current')
atmBkPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 27, 1, 9), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBkPvcVccConnFailureCauseB.setStatus('current')
atmBkPvcVpcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28), )
if mibBuilder.loadTexts: atmBkPvcVpcTable.setStatus('current')
atmBkPvcVpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1), ).setIndexNames((0, "ACMIB", "atmPvcVpcIfA"), (0, "ACMIB", "atmPvcVpcVpiA"), (0, "ACMIB", "atmPvcVpcIfB"), (0, "ACMIB", "atmPvcVpcVpiB"))
if mibBuilder.loadTexts: atmBkPvcVpcEntry.setStatus('current')
atmBkPvcVpcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVpcIfB.setStatus('current')
atmBkPvcVpcVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVpcVpiB.setStatus('current')
atmBkPvcVpcActivePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBkPvcVpcActivePvc.setStatus('current')
atmBkPvcVpcAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVpcAutoSwitch.setStatus('current')
atmBkPvcVpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVpcRowStatus.setStatus('current')
atmBkPvcVpcViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVpcViB.setStatus('current')
atmBkPvcVpcVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmBkPvcVpcVUNIB.setStatus('current')
atmBkPvcVpcConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 28, 1, 8), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBkPvcVpcConnFailureCauseB.setStatus('current')
bridgeAtmBkPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29), )
if mibBuilder.loadTexts: bridgeAtmBkPvcVccTable.setStatus('current')
bridgeAtmBkPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1), ).setIndexNames((0, "ACMIB", "bridgeAtmPvcVccIfA"), (0, "ACMIB", "bridgeAtmPvcVccIfB"), (0, "ACMIB", "bridgeAtmPvcVccVpiB"), (0, "ACMIB", "bridgeAtmPvcVccVciB"))
if mibBuilder.loadTexts: bridgeAtmBkPvcVccEntry.setStatus('current')
bridgeAtmBkPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccIfB.setStatus('current')
bridgeAtmBkPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccVpiB.setStatus('current')
bridgeAtmBkPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccVciB.setStatus('current')
bridgeAtmBkPvcVccActivePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccActivePvc.setStatus('current')
bridgeAtmBkPvcVccAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccAutoSwitch.setStatus('current')
bridgeAtmBkPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccRowStatus.setStatus('current')
bridgeAtmBkPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccViB.setStatus('current')
bridgeAtmBkPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccVUNIB.setStatus('current')
bridgeAtmBkPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 29, 1, 9), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmBkPvcVccConnFailureCauseB.setStatus('current')
ipAtmBkAppPvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30), )
if mibBuilder.loadTexts: ipAtmBkAppPvcVccTable.setStatus('current')
ipAtmBkAppPvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1), ).setIndexNames((0, "ACMIB", "ipAtmAppPvcVccDestAddrA"), (0, "ACMIB", "ipAtmAppPvcVccSubnetMaskA"), (0, "ACMIB", "ipAtmAppPvcVccIfB"), (0, "ACMIB", "ipAtmAppPvcVccVpiB"), (0, "ACMIB", "ipAtmAppPvcVccVciB"))
if mibBuilder.loadTexts: ipAtmBkAppPvcVccEntry.setStatus('current')
ipAtmBkAppPvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccIfB.setStatus('current')
ipAtmBkAppPvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccVpiB.setStatus('current')
ipAtmBkAppPvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccVciB.setStatus('current')
ipAtmBkAppPvcVccActivePvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccActivePvc.setStatus('current')
ipAtmBkAppPvcVccAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccAutoSwitch.setStatus('current')
ipAtmBkAppPvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccRowStatus.setStatus('current')
ipAtmBkAppPvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccViB.setStatus('current')
ipAtmBkAppPvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccVUNIB.setStatus('current')
ipAtmBkAppPvcVccConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 30, 1, 9), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmBkAppPvcVccConnFailureCauseB.setStatus('current')
spvcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 31), )
if mibBuilder.loadTexts: spvcAddrTable.setStatus('current')
spvcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 31, 1), ).setIndexNames((0, "ACMIB", "spvcAddrIfA"))
if mibBuilder.loadTexts: spvcAddrEntry.setStatus('current')
spvcAddrIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 31, 1, 1), IntfIndex())
if mibBuilder.loadTexts: spvcAddrIfA.setStatus('current')
spvcAddrLocalPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 31, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcAddrLocalPortAddr.setStatus('current')
spvcAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 31, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcAddrRowStatus.setStatus('current')
frAtmSpvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32), )
if mibBuilder.loadTexts: frAtmSpvcVccTable.setStatus('current')
frAtmSpvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1), ).setIndexNames((0, "ACMIB", "spvcAddrIfA"), (0, "ACMIB", "frAtmSpvcVccDlciA"))
if mibBuilder.loadTexts: frAtmSpvcVccEntry.setStatus('current')
frAtmSpvcVccDlciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: frAtmSpvcVccDlciA.setStatus('current')
frAtmSpvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 2), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccIfB.setStatus('current')
frAtmSpvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccVpiB.setStatus('current')
frAtmSpvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccVciB.setStatus('current')
frAtmSpvcVccMaxFrameSizeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 5), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccMaxFrameSizeIn.setStatus('current')
frAtmSpvcVccBcIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccBcIn.setStatus('current')
frAtmSpvcVccBeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 7), Integer32().clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccBeIn.setStatus('current')
frAtmSpvcVccCirIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccCirIn.setStatus('current')
frAtmSpvcVccMaxFrameSizeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 9), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccMaxFrameSizeOut.setStatus('current')
frAtmSpvcVccBcOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccBcOut.setStatus('current')
frAtmSpvcVccBeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 11), Integer32().clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccBeOut.setStatus('current')
frAtmSpvcVccCirOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccCirOut.setStatus('current')
frAtmSpvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccServiceType.setStatus('current')
frAtmSpvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccFlow.setStatus('current')
frAtmSpvcVccTimeLenIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccTimeLenIn.setStatus('current')
frAtmSpvcVccTimeLenOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccTimeLenOut.setStatus('current')
frAtmSpvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 17), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccPeakCellRateA2B.setStatus('current')
frAtmSpvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 18), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccSusCellRateA2B.setStatus('current')
frAtmSpvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 19), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccMaxBurstSizeA2B.setStatus('current')
frAtmSpvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 20), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccPeakCellRateB2A.setStatus('current')
frAtmSpvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 21), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccSusCellRateB2A.setStatus('current')
frAtmSpvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 22), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccMaxBurstSizeB2A.setStatus('current')
frAtmSpvcVccInterWorkingFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frf8-Transl", 1), ("frf8-Pass", 2), ("frf5", 3))).clone('frf8-Transl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccInterWorkingFunc.setStatus('current')
frAtmSpvcVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccConnType.setStatus('current')
frAtmSpvcVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6), ("waitingForCall", 7), ("waitingForRetryTimer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccOperStatus.setStatus('current')
frAtmSpvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 26), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRowStatus.setStatus('current')
frAtmSpvcVccRemoteFrPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRemoteFrPortAddr.setStatus('current')
frAtmSpvcVccRemoteSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("required", 1), ("any", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRemoteSelectType.setStatus('current')
frAtmSpvcVccRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRemoteDlci.setStatus('current')
frAtmSpvcVccRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRemoteVpi.setStatus('current')
frAtmSpvcVccRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRemoteVci.setStatus('current')
frAtmSpvcVccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRetryInterval.setStatus('current')
frAtmSpvcVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRetryLimit.setStatus('current')
frAtmSpvcVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRestart.setStatus('current')
frAtmSpvcVccRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccRetryFailure.setStatus('current')
frAtmSpvcVccReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccReleaseCause.setStatus('current')
frAtmSpvcVccReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccReleaseDiag.setStatus('current')
frAtmSpvcVccRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccRelease.setStatus('current')
frAtmSpvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsCellsEncodedHiA.setStatus('current')
frAtmSpvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsCellsEncodedLoA.setStatus('current')
frAtmSpvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsCellsDecodedHiA.setStatus('current')
frAtmSpvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsCellsDecodedLoA.setStatus('current')
frAtmSpvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsInCellCountHiB.setStatus('current')
frAtmSpvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsInCellCountLoB.setStatus('current')
frAtmSpvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOutCellCountHiB.setStatus('current')
frAtmSpvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOutCellCountLoB.setStatus('current')
frAtmSpvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsTimer.setStatus('current')
frAtmSpvcVccStatsFramesDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsFramesDroppedA.setStatus('current')
frAtmSpvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
frAtmSpvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
frAtmSpvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
frAtmSpvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
frAtmSpvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsInOdometerCellCountHiB.setStatus('current')
frAtmSpvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsInOdometerCellCountLoB.setStatus('current')
frAtmSpvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOutOdometerCellCountHiB.setStatus('current')
frAtmSpvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOutOdometerCellCountLoB.setStatus('current')
frAtmSpvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOdometerTimer.setStatus('current')
frAtmSpvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccStatsOdometerReset.setStatus('current')
frAtmSpvcVccStatsAal5ErrFramesA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsAal5ErrFramesA.setStatus('current')
frAtmSpvcVccStatsFramesTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsFramesTaggedA.setStatus('current')
frAtmSpvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsCellsDroppedB.setStatus('current')
frAtmSpvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSpvcVccStatsCellsTaggedB.setStatus('current')
frAtmSpvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccVUNIB.setStatus('current')
frAtmSpvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccTrafficShapingA2B.setStatus('current')
frAtmSpvcVccPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 32, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priority-1", 1), ("priority-2", 2), ("priority-3", 3), ("priority-4", 4))).clone('priority-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmSpvcVccPriority.setStatus('current')
atmAtmSpvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33), )
if mibBuilder.loadTexts: atmAtmSpvcVccTable.setStatus('current')
atmAtmSpvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1), ).setIndexNames((0, "ACMIB", "spvcAddrIfA"), (0, "ACMIB", "atmAtmSpvcVccVpiA"), (0, "ACMIB", "atmAtmSpvcVccVciA"), (0, "ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvcVccEntry.setStatus('current')
atmAtmSpvcVccVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmAtmSpvcVccVpiA.setStatus('current')
atmAtmSpvcVccVciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmAtmSpvcVccVciA.setStatus('current')
atmAtmSpvcVccRemoteAtmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: atmAtmSpvcVccRemoteAtmPortAddr.setStatus('current')
atmAtmSpvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 4), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccIfB.setStatus('current')
atmAtmSpvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccVpiB.setStatus('current')
atmAtmSpvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccVciB.setStatus('current')
atmAtmSpvcVccServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccServiceTypeA2B.setStatus('current')
atmAtmSpvcVccSarTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccSarTypeA2B.setStatus('current')
atmAtmSpvcVccPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccPeakCellRateA2B.setStatus('current')
atmAtmSpvcVccSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccSusCellRateA2B.setStatus('current')
atmAtmSpvcVccMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccMaxBurstSizeA2B.setStatus('current')
atmAtmSpvcVccFrwdErrCorrectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccFrwdErrCorrectionA2B.setStatus('current')
atmAtmSpvcVccServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccServiceTypeB2A.setStatus('current')
atmAtmSpvcVccSarTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccSarTypeB2A.setStatus('current')
atmAtmSpvcVccPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 15), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccPeakCellRateB2A.setStatus('current')
atmAtmSpvcVccSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccSusCellRateB2A.setStatus('current')
atmAtmSpvcVccMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 17), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccMaxBurstSizeB2A.setStatus('current')
atmAtmSpvcVccFrwdErrCorrectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccFrwdErrCorrectionB2A.setStatus('current')
atmAtmSpvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("pointToMultipointA2B", 3), ("simplexB2A", 4), ("pointToMultipointB2A", 5))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccFlow.setStatus('current')
atmAtmSpvcVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonsecured", 1), ("secured", 2))).clone('nonsecured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccType.setStatus('current')
atmAtmSpvcVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccConnType.setStatus('current')
atmAtmSpvcVccLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccLeafReference.setStatus('current')
atmAtmSpvcVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6), ("waitingForCall", 7), ("waitingForRetryTimer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccOperStatus.setStatus('current')
atmAtmSpvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 24), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccRowStatus.setStatus('current')
atmAtmSpvcVccRemoteSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("required", 1), ("any", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccRemoteSelectType.setStatus('current')
atmAtmSpvcVccRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccRemoteVpi.setStatus('current')
atmAtmSpvcVccRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccRemoteVci.setStatus('current')
atmAtmSpvcVccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccRetryInterval.setStatus('current')
atmAtmSpvcVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccRetryLimit.setStatus('current')
atmAtmSpvcVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccRestart.setStatus('current')
atmAtmSpvcVccRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccRetryFailure.setStatus('current')
atmAtmSpvcVccReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccReleaseCause.setStatus('current')
atmAtmSpvcVccReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccReleaseDiag.setStatus('current')
atmAtmSpvcVccRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccRelease.setStatus('current')
atmAtmSpvcVccStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInCellCountHiA.setStatus('current')
atmAtmSpvcVccStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInCellCountLoA.setStatus('current')
atmAtmSpvcVccStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutCellCountHiA.setStatus('current')
atmAtmSpvcVccStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutCellCountLoA.setStatus('current')
atmAtmSpvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInCellCountHiB.setStatus('current')
atmAtmSpvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInCellCountLoB.setStatus('current')
atmAtmSpvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutCellCountHiB.setStatus('current')
atmAtmSpvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutCellCountLoB.setStatus('current')
atmAtmSpvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsTimer.setStatus('current')
atmAtmSpvcVccStatsFrwdErrCrrctnRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsFrwdErrCrrctnRateA2B.setStatus('current')
atmAtmSpvcVccStatsFrwdErrCrrctnRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsFrwdErrCrrctnRateB2A.setStatus('current')
atmAtmSpvcVccStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInOdometerCellCountHiA.setStatus('current')
atmAtmSpvcVccStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInOdometerCellCountLoA.setStatus('current')
atmAtmSpvcVccStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutOdometerCellCountHiA.setStatus('current')
atmAtmSpvcVccStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutOdometerCellCountLoA.setStatus('current')
atmAtmSpvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInOdometerCellCountHiB.setStatus('current')
atmAtmSpvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsInOdometerCellCountLoB.setStatus('current')
atmAtmSpvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutOdometerCellCountHiB.setStatus('current')
atmAtmSpvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOutOdometerCellCountLoB.setStatus('current')
atmAtmSpvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOdometerTimer.setStatus('current')
atmAtmSpvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsOdometerReset.setStatus('current')
atmAtmSpvcVccViA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccViA.setStatus('current')
atmAtmSpvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccViB.setStatus('current')
atmAtmSpvcVccStatsCellsDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsCellsDroppedA.setStatus('current')
atmAtmSpvcVccStatsCellsTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsCellsTaggedA.setStatus('current')
atmAtmSpvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsCellsDroppedB.setStatus('current')
atmAtmSpvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVccStatsCellsTaggedB.setStatus('current')
atmAtmSpvcVccVUNIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccVUNIA.setStatus('current')
atmAtmSpvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccVUNIB.setStatus('current')
atmAtmSpvcVccTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccTrafficShapingA2B.setStatus('current')
atmAtmSpvcVccTrafficShapingB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccTrafficShapingB2A.setStatus('current')
atmAtmSpvcVccPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 33, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priority-1", 1), ("priority-2", 2), ("priority-3", 3), ("priority-4", 4))).clone('priority-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVccPriority.setStatus('current')
cirAtmSpvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34), )
if mibBuilder.loadTexts: cirAtmSpvcVccTable.setStatus('current')
cirAtmSpvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1), ).setIndexNames((0, "ACMIB", "spvcAddrIfA"), (0, "ACMIB", "cirAtmSpvcVccRemoteCePortAddr"))
if mibBuilder.loadTexts: cirAtmSpvcVccEntry.setStatus('current')
cirAtmSpvcVccRemoteCePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cirAtmSpvcVccRemoteCePortAddr.setStatus('current')
cirAtmSpvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 2), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccIfB.setStatus('current')
cirAtmSpvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccVpiB.setStatus('current')
cirAtmSpvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccVciB.setStatus('current')
cirAtmSpvcVccVoiceCompressionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("g726-16k", 2), ("g726-24k", 3), ("g726-32k", 4), ("g726-40k", 5), ("g729a-8k", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccVoiceCompressionA2B.setStatus('current')
cirAtmSpvcVccSilenceDetectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccSilenceDetectionA2B.setStatus('current')
cirAtmSpvcVccEchoCancellationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccEchoCancellationA2B.setStatus('current')
cirAtmSpvcVccCngToneDetectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("bypass", 2), ("g726-32k", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccCngToneDetectionA2B.setStatus('current')
cirAtmSpvcVccCodingTranslationA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccCodingTranslationA2B.setStatus('current')
cirAtmSpvcVccVoiceCompressionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("g726-16k", 2), ("g726-24k", 3), ("g726-32k", 4), ("g726-40k", 5), ("g729a-8k", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccVoiceCompressionB2A.setStatus('current')
cirAtmSpvcVccSilenceDetectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccSilenceDetectionB2A.setStatus('current')
cirAtmSpvcVccEchoCancellationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccEchoCancellationB2A.setStatus('current')
cirAtmSpvcVccCngToneDetectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("bypass", 2), ("g726-32k", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccCngToneDetectionB2A.setStatus('current')
cirAtmSpvcVccCodingTranslationB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccCodingTranslationB2A.setStatus('current')
cirAtmSpvcVccFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3), ("pointToMultipointA2B", 4), ("pointToMultipointB2A", 5))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccFlow.setStatus('current')
cirAtmSpvcVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cbr-2", 2), ("cbr-3", 3), ("cbr-4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccServiceType.setStatus('current')
cirAtmSpvcVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccConnType.setStatus('current')
cirAtmSpvcVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6), ("waitingForCall", 7), ("waitingForRetryTimer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccOperStatus.setStatus('current')
cirAtmSpvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 19), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccRowStatus.setStatus('current')
cirAtmSpvcVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccViB.setStatus('current')
cirAtmSpvcVccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccRetryInterval.setStatus('current')
cirAtmSpvcVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccRetryLimit.setStatus('current')
cirAtmSpvcVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccRestart.setStatus('current')
cirAtmSpvcVccRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccRetryFailure.setStatus('current')
cirAtmSpvcVccReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccReleaseCause.setStatus('current')
cirAtmSpvcVccReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccReleaseDiag.setStatus('current')
cirAtmSpvcVccRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccRelease.setStatus('current')
cirAtmSpvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsCellsEncodedHiA.setStatus('current')
cirAtmSpvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsCellsEncodedLoA.setStatus('current')
cirAtmSpvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsCellsDecodedHiA.setStatus('current')
cirAtmSpvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsCellsDecodedLoA.setStatus('current')
cirAtmSpvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsInCellCountHiB.setStatus('current')
cirAtmSpvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsInCellCountLoB.setStatus('current')
cirAtmSpvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOutCellCountHiB.setStatus('current')
cirAtmSpvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOutCellCountLoB.setStatus('current')
cirAtmSpvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsTimer.setStatus('current')
cirAtmSpvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
cirAtmSpvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
cirAtmSpvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
cirAtmSpvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
cirAtmSpvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsInOdometerCellCountHiB.setStatus('current')
cirAtmSpvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsInOdometerCellCountLoB.setStatus('current')
cirAtmSpvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOutOdometerCellCountHiB.setStatus('current')
cirAtmSpvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOutOdometerCellCountLoB.setStatus('current')
cirAtmSpvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOdometerTimer.setStatus('current')
cirAtmSpvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsOdometerReset.setStatus('current')
cirAtmSpvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsCellsDroppedB.setStatus('current')
cirAtmSpvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirAtmSpvcVccStatsCellsTaggedB.setStatus('current')
cirAtmSpvcVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccVUNIB.setStatus('current')
cirAtmSpvcVccSarTypeB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal1", 1), ("aal2", 2))).clone('aal1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccSarTypeB.setStatus('current')
cirAtmSpvcVccPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 34, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priority-1", 1), ("priority-2", 2), ("priority-3", 3), ("priority-4", 4))).clone('priority-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirAtmSpvcVccPriority.setStatus('current')
vbrAtmSpvcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35), )
if mibBuilder.loadTexts: vbrAtmSpvcTable.setStatus('current')
vbrAtmSpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1), ).setIndexNames((0, "ACMIB", "spvcAddrIfA"), (0, "ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"))
if mibBuilder.loadTexts: vbrAtmSpvcEntry.setStatus('current')
vbrAtmSpvcRemoteVbrPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: vbrAtmSpvcRemoteVbrPortAddr.setStatus('current')
vbrAtmSpvcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 2), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcIfB.setStatus('current')
vbrAtmSpvcVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVpiB.setStatus('current')
vbrAtmSpvcVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVciB.setStatus('current')
vbrAtmSpvcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt1", 2), ("vbr-nrt2", 3), ("vbr-rt1", 4), ("vbr-rt2", 5), ("vbr-express", 6))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcServiceType.setStatus('current')
vbrAtmSpvcPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcPeakCellRateA2B.setStatus('current')
vbrAtmSpvcSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcSusCellRateA2B.setStatus('current')
vbrAtmSpvcMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcMaxBurstSizeA2B.setStatus('current')
vbrAtmSpvcPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcPeakCellRateB2A.setStatus('current')
vbrAtmSpvcSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcSusCellRateB2A.setStatus('current')
vbrAtmSpvcMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcMaxBurstSizeB2A.setStatus('current')
vbrAtmSpvcFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("simplexB2A", 3))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcFlow.setStatus('current')
vbrAtmSpvcConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcConnType.setStatus('current')
vbrAtmSpvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6), ("waitingForCall", 7), ("waitingForRetryTimer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcOperStatus.setStatus('current')
vbrAtmSpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcRowStatus.setStatus('current')
vbrAtmSpvcViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcViB.setStatus('current')
vbrAtmSpvcRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcRetryInterval.setStatus('current')
vbrAtmSpvcRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcRetryLimit.setStatus('current')
vbrAtmSpvcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcRestart.setStatus('current')
vbrAtmSpvcRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcRetryFailure.setStatus('current')
vbrAtmSpvcReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcReleaseCause.setStatus('current')
vbrAtmSpvcReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcReleaseDiag.setStatus('current')
vbrAtmSpvcRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcRelease.setStatus('current')
vbrAtmSpvcStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsCellsEncodedHiA.setStatus('current')
vbrAtmSpvcStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsCellsEncodedLoA.setStatus('current')
vbrAtmSpvcStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsCellsDecodedHiA.setStatus('current')
vbrAtmSpvcStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsCellsDecodedLoA.setStatus('current')
vbrAtmSpvcStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsInCellCountHiB.setStatus('current')
vbrAtmSpvcStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsInCellCountLoB.setStatus('current')
vbrAtmSpvcStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOutCellCountHiB.setStatus('current')
vbrAtmSpvcStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOutCellCountLoB.setStatus('current')
vbrAtmSpvcStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsTimer.setStatus('current')
vbrAtmSpvcStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOdometerCellsEncodedHiA.setStatus('current')
vbrAtmSpvcStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOdometerCellsEncodedLoA.setStatus('current')
vbrAtmSpvcStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOdometerCellsDecodedHiA.setStatus('current')
vbrAtmSpvcStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOdometerCellsDecodedLoA.setStatus('current')
vbrAtmSpvcStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsInOdometerCellCountHiB.setStatus('current')
vbrAtmSpvcStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsInOdometerCellCountLoB.setStatus('current')
vbrAtmSpvcStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOutOdometerCellCountHiB.setStatus('current')
vbrAtmSpvcStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOutOdometerCellCountLoB.setStatus('current')
vbrAtmSpvcStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOdometerTimer.setStatus('current')
vbrAtmSpvcStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcStatsOdometerReset.setStatus('current')
vbrAtmSpvcStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsCellsDroppedB.setStatus('current')
vbrAtmSpvcStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcStatsCellsTaggedB.setStatus('current')
vbrAtmSpvcVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVUNIB.setStatus('current')
vbrAtmSpvcTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcTrafficShapingA2B.setStatus('current')
vbrAtmSpvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 35, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priority-1", 1), ("priority-2", 2), ("priority-3", 3), ("priority-4", 4))).clone('priority-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcPriority.setStatus('current')
aal2TrunkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36), )
if mibBuilder.loadTexts: aal2TrunkConfigTable.setStatus('current')
aal2TrunkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1), ).setIndexNames((0, "ACMIB", "aal2TrunkConfigIf"), (0, "ACMIB", "aal2TrunkConfigVpi"), (0, "ACMIB", "aal2TrunkConfigVci"))
if mibBuilder.loadTexts: aal2TrunkConfigEntry.setStatus('current')
aal2TrunkConfigIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 1), IntfIndex())
if mibBuilder.loadTexts: aal2TrunkConfigIf.setStatus('current')
aal2TrunkConfigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: aal2TrunkConfigVpi.setStatus('current')
aal2TrunkConfigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: aal2TrunkConfigVci.setStatus('current')
aal2TrunkConfigServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("cbr-1", 1), ("cbr-2", 2), ("cbr-3", 3), ("cbr-4", 4), ("ubr", 5), ("vbr-nrt2", 6), ("vbr-nrt1", 7), ("vbr-rt2", 8), ("vbr-rt1", 9), ("vbr-express", 10))).clone('cbr-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigServiceType.setStatus('current')
aal2TrunkConfigPeakCellRateIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigPeakCellRateIgr.setStatus('current')
aal2TrunkConfigSusCellRateIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigSusCellRateIgr.setStatus('current')
aal2TrunkConfigMaxBurstSizeIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigMaxBurstSizeIgr.setStatus('current')
aal2TrunkConfigPeakCellRateEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigPeakCellRateEgr.setStatus('current')
aal2TrunkConfigSusCellRateEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigSusCellRateEgr.setStatus('current')
aal2TrunkConfigMaxBurstSizeEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigMaxBurstSizeEgr.setStatus('current')
aal2TrunkConfigFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("duplex", 1))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigFlow.setStatus('current')
aal2TrunkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigRowStatus.setStatus('current')
aal2TrunkConfigConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("inactiveA2B-B2A", 3), ("inactiveA2B", 4), ("inactiveB2A", 5))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2TrunkConfigConnectionStatus.setStatus('current')
aal2TrunkConfigViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigViB.setStatus('current')
aal2TrunkConfigCnfrmTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("best-effort", 1), ("one-bucket-notag-0plus1", 2), ("two-bucket-notag-0plus1-0plus1", 3), ("two-bucket-notag-0plus1-0", 4), ("two-bucket-tag-0plus1-0", 5), ("best-effort-tag", 6))).clone('best-effort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigCnfrmTypeB2A.setStatus('current')
aal2TrunkConfigVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigVUNIB.setStatus('current')
aal2TrunkAvailBwIgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2TrunkAvailBwIgr.setStatus('current')
aal2TrunkAvailBwEgr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2TrunkAvailBwEgr.setStatus('current')
aal2TrunkGR303 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkGR303.setStatus('current')
aal2TrunkConfigOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("end-Seg-Pt", 3))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkConfigOamStatus.setStatus('current')
aal2TrunkConnFailureCauseB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 21), AtmConnFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2TrunkConnFailureCauseB.setStatus('current')
aal2TrunkCuTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 36, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2TrunkCuTimer.setStatus('current')
gr303Aal2PvcVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37), )
if mibBuilder.loadTexts: gr303Aal2PvcVccTable.setStatus('current')
gr303Aal2PvcVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1), ).setIndexNames((0, "ACMIB", "gr303Aal2PvcVccGr303IgId"), (0, "ACMIB", "gr303Aal2PvcVccGr303CallRef"), (0, "ACMIB", "gr303Aal2PvcVccIfB"), (0, "ACMIB", "gr303Aal2PvcVccVpiB"), (0, "ACMIB", "gr303Aal2PvcVccVciB"), (0, "ACMIB", "gr303Aal2PvcVccAal2Cid"))
if mibBuilder.loadTexts: gr303Aal2PvcVccEntry.setStatus('current')
gr303Aal2PvcVccGr303IgId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)))
if mibBuilder.loadTexts: gr303Aal2PvcVccGr303IgId.setStatus('current')
gr303Aal2PvcVccGr303CallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: gr303Aal2PvcVccGr303CallRef.setStatus('current')
gr303Aal2PvcVccIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 3), IntfIndex())
if mibBuilder.loadTexts: gr303Aal2PvcVccIfB.setStatus('current')
gr303Aal2PvcVccVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: gr303Aal2PvcVccVpiB.setStatus('current')
gr303Aal2PvcVccVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: gr303Aal2PvcVccVciB.setStatus('current')
gr303Aal2PvcVccAal2Cid = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: gr303Aal2PvcVccAal2Cid.setStatus('current')
gr303Aal2PvcVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccRowStatus.setStatus('current')
gr303Aal2PvcVccVoiceEncodingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 7, 8, 9, 10, 11, 12, 256, 257))).clone(namedValues=NamedValues(("itut-profile-1", 1), ("itut-profile-3", 3), ("af-profile-6", 6), ("itut-profile-7", 7), ("af-profile-7", 8), ("af-profile-8", 9), ("af-profile-9", 10), ("af-profile-10", 11), ("af-profile-12", 12), ("custom", 256), ("default", 257))).clone('itut-profile-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccVoiceEncodingProfile.setStatus('current')
gr303Aal2PvcVccVoiceCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("g726-16k", 2), ("g726-24k", 3), ("g726-32k", 4), ("g726-40k", 5), ("g729a-8k", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccVoiceCompression.setStatus('current')
gr303Aal2PvcVccSilenceDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccSilenceDetection.setStatus('current')
gr303Aal2PvcVccEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("g165-nearEnd", 2), ("g168", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccEchoCancellation.setStatus('current')
gr303Aal2PvcVccCngToneDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("bypass", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccCngToneDetection.setStatus('current')
gr303Aal2PvcVccCodingTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("muLaw2muLaw", 2), ("aLaw2aLaw", 3), ("muLaw2aLaw", 4), ("aLaw2muLaw", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccCodingTranslation.setStatus('current')
gr303Aal2PvcVccConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303Aal2PvcVccConnectionStatus.setStatus('current')
gr303Aal2PvcVccAltLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 37, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 13, 29))).clone(namedValues=NamedValues(("alt-LoopReverseBattery", 1), ("alt-groundStart", 9), ("alt-loopStart", 13), ("alt-winkStart", 29))).clone('alt-loopStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gr303Aal2PvcVccAltLineType.setStatus('current')
atmAtmSpvcVpcTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38), )
if mibBuilder.loadTexts: atmAtmSpvcVpcTable.setStatus('current')
atmAtmSpvcVpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1), ).setIndexNames((0, "ACMIB", "spvcAddrIfA"), (0, "ACMIB", "atmAtmSpvcVpcVpiA"), (0, "ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvcVpcEntry.setStatus('current')
atmAtmSpvcVpcVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmAtmSpvcVpcVpiA.setStatus('current')
atmAtmSpvcVpcRemoteAtmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: atmAtmSpvcVpcRemoteAtmPortAddr.setStatus('current')
atmAtmSpvcVpcIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 3), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcIfB.setStatus('current')
atmAtmSpvcVpcVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcVpiB.setStatus('current')
atmAtmSpvcVpcServiceTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcServiceTypeA2B.setStatus('current')
atmAtmSpvcVpcSarTypeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcSarTypeA2B.setStatus('current')
atmAtmSpvcVpcPeakCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcPeakCellRateA2B.setStatus('current')
atmAtmSpvcVpcSusCellRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcSusCellRateA2B.setStatus('current')
atmAtmSpvcVpcMaxBurstSizeA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcMaxBurstSizeA2B.setStatus('current')
atmAtmSpvcVpcFrwdErrCorrectionA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcFrwdErrCorrectionA2B.setStatus('current')
atmAtmSpvcVpcServiceTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcServiceTypeB2A.setStatus('current')
atmAtmSpvcVpcSarTypeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal5", 1), ("aal3-4", 2), ("aal2", 3), ("aal1", 4), ("null", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcSarTypeB2A.setStatus('current')
atmAtmSpvcVpcPeakCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 13), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcPeakCellRateB2A.setStatus('current')
atmAtmSpvcVpcSusCellRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 14), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcSusCellRateB2A.setStatus('current')
atmAtmSpvcVpcMaxBurstSizeB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 15), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcMaxBurstSizeB2A.setStatus('current')
atmAtmSpvcVpcFrwdErrCorrectionB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcFrwdErrCorrectionB2A.setStatus('current')
atmAtmSpvcVpcFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("duplex", 1), ("simplexA2B", 2), ("pointToMultipointA2B", 3), ("simplexB2A", 4), ("pointToMultipointB2A", 5))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcFlow.setStatus('current')
atmAtmSpvcVpcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonsecured", 1), ("secured", 2))).clone('nonsecured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcType.setStatus('current')
atmAtmSpvcVpcConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeSvc", 1), ("passiveSvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcConnType.setStatus('current')
atmAtmSpvcVpcLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcLeafReference.setStatus('current')
atmAtmSpvcVpcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6), ("waitingForCall", 7), ("waitingForRetryTimer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcOperStatus.setStatus('current')
atmAtmSpvcVpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 22), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcRowStatus.setStatus('current')
atmAtmSpvcVpcRemoteSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("required", 1), ("any", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcRemoteSelectType.setStatus('current')
atmAtmSpvcVpcRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcRemoteVpi.setStatus('current')
atmAtmSpvcVpcRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcRetryInterval.setStatus('current')
atmAtmSpvcVpcRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcRetryLimit.setStatus('current')
atmAtmSpvcVpcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcRestart.setStatus('current')
atmAtmSpvcVpcRetryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcRetryFailure.setStatus('current')
atmAtmSpvcVpcReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcReleaseCause.setStatus('current')
atmAtmSpvcVpcReleaseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcReleaseDiag.setStatus('current')
atmAtmSpvcVpcRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("release", 1), ("noop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcRelease.setStatus('current')
atmAtmSpvcVpcStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInCellCountHiA.setStatus('current')
atmAtmSpvcVpcStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInCellCountLoA.setStatus('current')
atmAtmSpvcVpcStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutCellCountHiA.setStatus('current')
atmAtmSpvcVpcStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutCellCountLoA.setStatus('current')
atmAtmSpvcVpcStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInCellCountHiB.setStatus('current')
atmAtmSpvcVpcStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInCellCountLoB.setStatus('current')
atmAtmSpvcVpcStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutCellCountHiB.setStatus('current')
atmAtmSpvcVpcStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutCellCountLoB.setStatus('current')
atmAtmSpvcVpcStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsTimer.setStatus('current')
atmAtmSpvcVpcStatsFrwdErrCrrctnRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsFrwdErrCrrctnRateA2B.setStatus('current')
atmAtmSpvcVpcStatsFrwdErrCrrctnRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsFrwdErrCrrctnRateB2A.setStatus('current')
atmAtmSpvcVpcStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInOdometerCellCountHiA.setStatus('current')
atmAtmSpvcVpcStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInOdometerCellCountLoA.setStatus('current')
atmAtmSpvcVpcStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutOdometerCellCountHiA.setStatus('current')
atmAtmSpvcVpcStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutOdometerCellCountLoA.setStatus('current')
atmAtmSpvcVpcStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInOdometerCellCountHiB.setStatus('current')
atmAtmSpvcVpcStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsInOdometerCellCountLoB.setStatus('current')
atmAtmSpvcVpcStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutOdometerCellCountHiB.setStatus('current')
atmAtmSpvcVpcStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOutOdometerCellCountLoB.setStatus('current')
atmAtmSpvcVpcStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOdometerTimer.setStatus('current')
atmAtmSpvcVpcStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsOdometerReset.setStatus('current')
atmAtmSpvcVpcViA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcViA.setStatus('current')
atmAtmSpvcVpcViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcViB.setStatus('current')
atmAtmSpvcVpcStatsCellsDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsCellsDroppedA.setStatus('current')
atmAtmSpvcVpcStatsCellsTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsCellsTaggedA.setStatus('current')
atmAtmSpvcVpcStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsCellsDroppedB.setStatus('current')
atmAtmSpvcVpcStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtmSpvcVpcStatsCellsTaggedB.setStatus('current')
atmAtmSpvcVpcVUNIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcVUNIA.setStatus('current')
atmAtmSpvcVpcVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcVUNIB.setStatus('current')
atmAtmSpvcVpcTrafficShapingA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcTrafficShapingA2B.setStatus('current')
atmAtmSpvcVpcTrafficShapingB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcTrafficShapingB2A.setStatus('current')
atmAtmSpvcVpcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 38, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priority-1", 1), ("priority-2", 2), ("priority-3", 3), ("priority-4", 4))).clone('priority-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAtmSpvcVpcPriority.setStatus('current')
intfAtmPvcConnDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39), )
if mibBuilder.loadTexts: intfAtmPvcConnDisplayTable.setStatus('current')
intfAtmPvcConnDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39, 1), ).setIndexNames((0, "ACMIB", "intfAtmPvcConnDisplaySlot"), (0, "ACMIB", "intfAtmPvcConnDisplayPort"), (0, "ACMIB", "intfAtmPvcConnDisplayChannel"), (0, "ACMIB", "intfAtmPvcConnDisplayVpi"), (0, "ACMIB", "intfAtmPvcConnDisplayVci"))
if mibBuilder.loadTexts: intfAtmPvcConnDisplayEntry.setStatus('current')
intfAtmPvcConnDisplaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39, 1, 1), Integer32())
if mibBuilder.loadTexts: intfAtmPvcConnDisplaySlot.setStatus('current')
intfAtmPvcConnDisplayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39, 1, 2), Integer32())
if mibBuilder.loadTexts: intfAtmPvcConnDisplayPort.setStatus('current')
intfAtmPvcConnDisplayChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39, 1, 3), Integer32())
if mibBuilder.loadTexts: intfAtmPvcConnDisplayChannel.setStatus('current')
intfAtmPvcConnDisplayVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: intfAtmPvcConnDisplayVpi.setStatus('current')
intfAtmPvcConnDisplayVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: intfAtmPvcConnDisplayVci.setStatus('current')
intfAtmPvcConnDisplayFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 6, 39, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cnctnValid", 1), ("cnctnNull", 2), ("cnctnPtmpValid", 3), ("cnctnPtmpNull", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfAtmPvcConnDisplayFlowType.setStatus('current')
ds3PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 1), )
if mibBuilder.loadTexts: ds3PortStatsTable.setStatus('current')
ds3PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 1, 1), ).setIndexNames((0, "ACMIB", "ds3PortStatsId"))
if mibBuilder.loadTexts: ds3PortStatsEntry.setStatus('current')
ds3PortStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ds3PortStatsId.setStatus('current')
ds3PortStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PortStatsTimer.setStatus('current')
ds3PortStatsCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PortStatsCurrentSEFSs.setStatus('current')
ds3PortStatsCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PortStatsCurrentLCVs.setStatus('current')
ds3PortStatsCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PortStatsCurrentLESs.setStatus('current')
ds1PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 2), )
if mibBuilder.loadTexts: ds1PortStatsTable.setStatus('current')
ds1PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 2, 1), ).setIndexNames((0, "ACMIB", "ds1PortStatsId"))
if mibBuilder.loadTexts: ds1PortStatsEntry.setStatus('current')
ds1PortStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ds1PortStatsId.setStatus('current')
ds1PortStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PortStatsTimer.setStatus('current')
ds1PortStatsCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PortStatsCurrentESs.setStatus('current')
ds1PortStatsCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PortStatsCurrentSESs.setStatus('current')
ds1PortStatsCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PortStatsCurrentLCVs.setStatus('current')
oc3PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3), )
if mibBuilder.loadTexts: oc3PortStatsTable.setStatus('current')
oc3PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1), ).setIndexNames((0, "ACMIB", "oc3PortStatsId"))
if mibBuilder.loadTexts: oc3PortStatsEntry.setStatus('current')
oc3PortStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: oc3PortStatsId.setStatus('current')
oc3PortStatsSectionBip8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3PortStatsSectionBip8Errs.setStatus('current')
oc3PortStatsLineBip8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3PortStatsLineBip8Errs.setStatus('current')
oc3PortStatsPathBip8Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3PortStatsPathBip8Errs.setStatus('current')
oc3PortStatsLineFebeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3PortStatsLineFebeCount.setStatus('current')
oc3PortStatsPathFebeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3PortStatsPathFebeCount.setStatus('current')
oc3PortStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3PortStatsTimer.setStatus('current')
msPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 4), )
if mibBuilder.loadTexts: msPortStatsTable.setStatus('current')
msPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 4, 1), ).setIndexNames((0, "ACMIB", "msPortStatsId"))
if mibBuilder.loadTexts: msPortStatsEntry.setStatus('current')
msPortStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: msPortStatsId.setStatus('current')
msPortStatsFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msPortStatsFrameErrors.setStatus('current')
msPortStatsOutOfFrameSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msPortStatsOutOfFrameSeconds.setStatus('current')
msPortStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msPortStatsTimer.setStatus('current')
e3PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 5), )
if mibBuilder.loadTexts: e3PortStatsTable.setStatus('current')
e3PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 5, 1), ).setIndexNames((0, "ACMIB", "e3PortStatsId"))
if mibBuilder.loadTexts: e3PortStatsEntry.setStatus('current')
e3PortStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: e3PortStatsId.setStatus('current')
e3PortStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PortStatsTimer.setStatus('current')
e3PortStatsCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PortStatsCurrentSEFSs.setStatus('current')
e3PortStatsCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PortStatsCurrentLCVs.setStatus('current')
e3PortStatsCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PortStatsCurrentLESs.setStatus('current')
e1PortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 6), )
if mibBuilder.loadTexts: e1PortStatsTable.setStatus('current')
e1PortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 6, 1), ).setIndexNames((0, "ACMIB", "e1PortStatsId"))
if mibBuilder.loadTexts: e1PortStatsEntry.setStatus('current')
e1PortStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: e1PortStatsId.setStatus('current')
e1PortStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PortStatsTimer.setStatus('current')
e1PortStatsCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PortStatsCurrentESs.setStatus('current')
e1PortStatsCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PortStatsCurrentSESs.setStatus('current')
e1PortStatsCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PortStatsCurrentLCVs.setStatus('current')
ethernetPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7), )
if mibBuilder.loadTexts: ethernetPortStatsTable.setStatus('current')
ethernetPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1), ).setIndexNames((0, "ACMIB", "ethernetPortStatsId"))
if mibBuilder.loadTexts: ethernetPortStatsEntry.setStatus('current')
ethernetPortStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: ethernetPortStatsId.setStatus('current')
ethernetPortStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsTimer.setStatus('current')
ethernetPortStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsAlignmentErrors.setStatus('current')
ethernetPortStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsFCSErrors.setStatus('current')
ethernetPortStatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsSingleCollisionFrames.setStatus('current')
ethernetPortStatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsMultipleCollisionFrames.setStatus('current')
ethernetPortStatsSQETestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsSQETestErrors.setStatus('current')
ethernetPortStatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsDeferredTransmissions.setStatus('current')
ethernetPortStatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsLateCollisions.setStatus('current')
ethernetPortStatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsExcessiveCollisions.setStatus('current')
ethernetPortStatsInternalMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsInternalMacTransmitErrors.setStatus('current')
ethernetPortStatsCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsCarrierSenseErrors.setStatus('current')
ethernetPortStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsFrameTooLongs.setStatus('current')
ethernetPortStatsInternalMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortStatsInternalMacReceiveErrors.setStatus('current')
atmIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1), )
if mibBuilder.loadTexts: atmIfStatsTable.setStatus('current')
atmIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1), ).setIndexNames((0, "ACMIB", "atmIfStatsId"))
if mibBuilder.loadTexts: atmIfStatsEntry.setStatus('current')
atmIfStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmIfStatsId.setStatus('current')
atmIfStatsValidCellsInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsValidCellsInHi.setStatus('current')
atmIfStatsValidCellsInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsValidCellsInLo.setStatus('current')
atmIfStatsErroredCellsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsErroredCellsIn.setStatus('current')
atmIfStatsMismatchedCellsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsMismatchedCellsIn.setStatus('current')
atmIfStatsNullCellsOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsNullCellsOutHi.setStatus('current')
atmIfStatsNullCellsOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsNullCellsOutLo.setStatus('current')
atmIfStatsValidCellsOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsValidCellsOutHi.setStatus('current')
atmIfStatsValidCellsOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsValidCellsOutLo.setStatus('current')
atmIfStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStatsTimer.setStatus('current')
frUniStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2), )
if mibBuilder.loadTexts: frUniStatsTable.setStatus('current')
frUniStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1), ).setIndexNames((0, "ACMIB", "frUniStatsId"))
if mibBuilder.loadTexts: frUniStatsEntry.setStatus('current')
frUniStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 1), IntfIndex())
if mibBuilder.loadTexts: frUniStatsId.setStatus('current')
frUniStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsTimer.setStatus('current')
frUniStatsCellsMismatched = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsCellsMismatched.setStatus('current')
frUniStatsErroredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsErroredFrames.setStatus('current')
frUniStatsCellsEncodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsCellsEncodedHi.setStatus('current')
frUniStatsCellsEncodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsCellsEncodedLo.setStatus('current')
frUniStatsFramesEncodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsFramesEncodedHi.setStatus('current')
frUniStatsFramesEncodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsFramesEncodedLo.setStatus('current')
frUniStatsCellsDecodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsCellsDecodedHi.setStatus('current')
frUniStatsCellsDecodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsCellsDecodedLo.setStatus('current')
frUniStatsFramesDecodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsFramesDecodedHi.setStatus('current')
frUniStatsFramesDecodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsFramesDecodedLo.setStatus('current')
frUniStatsAAL5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frUniStatsAAL5Errors.setStatus('current')
cirEmIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3), )
if mibBuilder.loadTexts: cirEmIfStatsTable.setStatus('current')
cirEmIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3, 1), ).setIndexNames((0, "ACMIB", "cirEmIfStatsId"))
if mibBuilder.loadTexts: cirEmIfStatsEntry.setStatus('current')
cirEmIfStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3, 1, 1), IntfIndex())
if mibBuilder.loadTexts: cirEmIfStatsId.setStatus('current')
cirEmIfStatsCellsEncodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmIfStatsCellsEncodedHi.setStatus('current')
cirEmIfStatsCellsEncodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmIfStatsCellsEncodedLo.setStatus('current')
cirEmIfStatsCellsDecodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmIfStatsCellsDecodedHi.setStatus('current')
cirEmIfStatsCellsDecodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmIfStatsCellsDecodedLo.setStatus('current')
cirEmIfStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmIfStatsTimer.setStatus('current')
vbrIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4), )
if mibBuilder.loadTexts: vbrIfStatsTable.setStatus('current')
vbrIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4, 1), ).setIndexNames((0, "ACMIB", "vbrIfStatsId"))
if mibBuilder.loadTexts: vbrIfStatsEntry.setStatus('current')
vbrIfStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vbrIfStatsId.setStatus('current')
vbrIfStatsCellsEncodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrIfStatsCellsEncodedHi.setStatus('current')
vbrIfStatsCellsEncodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrIfStatsCellsEncodedLo.setStatus('current')
vbrIfStatsCellsDecodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrIfStatsCellsDecodedHi.setStatus('current')
vbrIfStatsCellsDecodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrIfStatsCellsDecodedLo.setStatus('current')
vbrIfStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrIfStatsTimer.setStatus('current')
frLmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5), )
if mibBuilder.loadTexts: frLmiStatsTable.setStatus('current')
frLmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1), ).setIndexNames((0, "ACMIB", "frLmiStatsId"))
if mibBuilder.loadTexts: frLmiStatsEntry.setStatus('current')
frLmiStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 1), IntfIndex())
if mibBuilder.loadTexts: frLmiStatsId.setStatus('current')
frLmiStatsEnqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsEnqRx.setStatus('current')
frLmiStatsEnqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsEnqTx.setStatus('current')
frLmiStatsStatusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsStatusRx.setStatus('current')
frLmiStatsStatusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsStatusTx.setStatus('current')
frLmiStatsAsyncRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsAsyncRx.setStatus('current')
frLmiStatsAsyncTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsAsyncTx.setStatus('current')
frLmiStatsPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsPktDisc.setStatus('current')
frLmiStatsT391Exp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsT391Exp.setStatus('current')
frLmiStatsT392Exp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsT392Exp.setStatus('current')
frLmiStatsLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsLinkReset.setStatus('current')
frLmiStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLmiStatsTimer.setStatus('current')
bridgeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6), )
if mibBuilder.loadTexts: bridgeStatsTable.setStatus('current')
bridgeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1), ).setIndexNames((0, "ACMIB", "bridgeStatsId"))
if mibBuilder.loadTexts: bridgeStatsEntry.setStatus('current')
bridgeStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: bridgeStatsId.setStatus('current')
bridgeStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTimer.setStatus('current')
bridgeStatsBasePortDelayExceededDiscardsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBasePortDelayExceededDiscardsHi.setStatus('current')
bridgeStatsBasePortDelayExceededDiscardsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBasePortDelayExceededDiscardsLo.setStatus('current')
bridgeStatsBasePortMtuExceededDiscardsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBasePortMtuExceededDiscardsHi.setStatus('current')
bridgeStatsBasePortMtuExceededDiscardsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsBasePortMtuExceededDiscardsLo.setStatus('current')
bridgeStatsTpPortInFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTpPortInFramesHi.setStatus('current')
bridgeStatsTpPortInFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTpPortInFramesLo.setStatus('current')
bridgeStatsTpPortOutFramesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTpPortOutFramesHi.setStatus('current')
bridgeStatsTpPortOutFramesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTpPortOutFramesLo.setStatus('current')
bridgeStatsTpPortInDiscardsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTpPortInDiscardsHi.setStatus('current')
bridgeStatsTpPortInDiscardsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTpPortInDiscardsLo.setStatus('current')
dbCirEmIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7), )
if mibBuilder.loadTexts: dbCirEmIfStatsTable.setStatus('current')
dbCirEmIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7, 1), ).setIndexNames((0, "ACMIB", "dbCirEmIfStatsId"))
if mibBuilder.loadTexts: dbCirEmIfStatsEntry.setStatus('current')
dbCirEmIfStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7, 1, 1), IntfIndex())
if mibBuilder.loadTexts: dbCirEmIfStatsId.setStatus('current')
dbCirEmIfStatsCellsEncodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbCirEmIfStatsCellsEncodedHi.setStatus('current')
dbCirEmIfStatsCellsEncodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbCirEmIfStatsCellsEncodedLo.setStatus('current')
dbCirEmIfStatsCellsDecodedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbCirEmIfStatsCellsDecodedHi.setStatus('current')
dbCirEmIfStatsCellsDecodedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbCirEmIfStatsCellsDecodedLo.setStatus('current')
dbCirEmIfStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbCirEmIfStatsTimer.setStatus('current')
atmImaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8), )
if mibBuilder.loadTexts: atmImaStatsTable.setStatus('current')
atmImaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1), ).setIndexNames((0, "ACMIB", "atmImaStatsId"))
if mibBuilder.loadTexts: atmImaStatsEntry.setStatus('current')
atmImaStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmImaStatsId.setStatus('current')
atmImaStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsTimer.setStatus('current')
atmImaStatsImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsImaViolations.setStatus('current')
atmImaStatsOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsOifAnomalies.setStatus('current')
atmImaStatsNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsNeTxNumFailures.setStatus('current')
atmImaStatsNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsNeRxNumFailures.setStatus('current')
atmImaStatsFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsFeTxNumFailures.setStatus('current')
atmImaStatsFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsFeRxNumFailures.setStatus('current')
atmImaStatsTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsTxStuffs.setStatus('current')
atmImaStatsRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaStatsRxStuffs.setStatus('current')
ilmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9), )
if mibBuilder.loadTexts: ilmiStatsTable.setStatus('current')
ilmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1), ).setIndexNames((0, "ACMIB", "ilmiStatsId"))
if mibBuilder.loadTexts: ilmiStatsEntry.setStatus('current')
ilmiStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 1), IntfIndex())
if mibBuilder.loadTexts: ilmiStatsId.setStatus('current')
ilmiStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsTimer.setStatus('current')
ilmiStatsLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsLinkResets.setStatus('current')
ilmiStatsAttachPtChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsAttachPtChanged.setStatus('current')
ilmiStatsAttachPtVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsAttachPtVerified.setStatus('current')
ilmiStatsSecureLnkProcInit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsSecureLnkProcInit.setStatus('current')
ilmiStatsColdStartRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsColdStartRx.setStatus('current')
ilmiStatsColdStartTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsColdStartTx.setStatus('current')
ilmiStatsPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsPduRx.setStatus('current')
ilmiStatsPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsPduTx.setStatus('current')
ilmiStatsReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsReqTimeouts.setStatus('current')
ilmiStatsPacketDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilmiStatsPacketDisc.setStatus('current')
vuniIlmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12), )
if mibBuilder.loadTexts: vuniIlmiStatsTable.setStatus('current')
vuniIlmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1), ).setIndexNames((0, "ACMIB", "vuniIlmiStatsId"), (0, "ACMIB", "vuniIlmiVUNIId"))
if mibBuilder.loadTexts: vuniIlmiStatsEntry.setStatus('current')
vuniIlmiStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vuniIlmiStatsId.setStatus('current')
vuniIlmiVUNIId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1))
if mibBuilder.loadTexts: vuniIlmiVUNIId.setStatus('current')
vuniIlmiStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsTimer.setStatus('current')
vuniIlmiStatsLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsLinkResets.setStatus('current')
vuniIlmiStatsAttachPtChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsAttachPtChanged.setStatus('current')
vuniIlmiStatsAttachPtVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsAttachPtVerified.setStatus('current')
vuniIlmiStatsSecureLnkProcInit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsSecureLnkProcInit.setStatus('current')
vuniIlmiStatsColdStartRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsColdStartRx.setStatus('current')
vuniIlmiStatsColdStartTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsColdStartTx.setStatus('current')
vuniIlmiStatsPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsPduRx.setStatus('current')
vuniIlmiStatsPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsPduTx.setStatus('current')
vuniIlmiStatsReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsReqTimeouts.setStatus('current')
vuniIlmiStatsPacketDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vuniIlmiStatsPacketDisc.setStatus('current')
vuniResetIlmiStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("reset", 2))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vuniResetIlmiStatistics.setStatus('current')
atmPvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1), )
if mibBuilder.loadTexts: atmPvcVccStatsTable.setStatus('current')
atmPvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1), ).setIndexNames((0, "ACMIB", "atmPvcVccStatsIfA"), (0, "ACMIB", "atmPvcVccStatsVpiA"), (0, "ACMIB", "atmPvcVccStatsVciA"), (0, "ACMIB", "atmPvcVccStatsIfB"), (0, "ACMIB", "atmPvcVccStatsVpiB"), (0, "ACMIB", "atmPvcVccStatsVciB"))
if mibBuilder.loadTexts: atmPvcVccStatsEntry.setStatus('current')
atmPvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmPvcVccStatsIfA.setStatus('current')
atmPvcVccStatsVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVccStatsVpiA.setStatus('current')
atmPvcVccStatsVciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmPvcVccStatsVciA.setStatus('current')
atmPvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 4), IntfIndex())
if mibBuilder.loadTexts: atmPvcVccStatsIfB.setStatus('current')
atmPvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVccStatsVpiB.setStatus('current')
atmPvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmPvcVccStatsVciB.setStatus('current')
atmPvcVccStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInCellCountHiA.setStatus('current')
atmPvcVccStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInCellCountLoA.setStatus('current')
atmPvcVccStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutCellCountHiA.setStatus('current')
atmPvcVccStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutCellCountLoA.setStatus('current')
atmPvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInCellCountHiB.setStatus('current')
atmPvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInCellCountLoB.setStatus('current')
atmPvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutCellCountHiB.setStatus('current')
atmPvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutCellCountLoB.setStatus('current')
atmPvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsTimer.setStatus('current')
atmPvcVccStatsFrwdErrCrrctnRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsFrwdErrCrrctnRateA2B.setStatus('current')
atmPvcVccStatsFrwdErrCrrctnRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsFrwdErrCrrctnRateB2A.setStatus('current')
atmPvcVccStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInOdometerCellCountHiA.setStatus('current')
atmPvcVccStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInOdometerCellCountLoA.setStatus('current')
atmPvcVccStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutOdometerCellCountHiA.setStatus('current')
atmPvcVccStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutOdometerCellCountLoA.setStatus('current')
atmPvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInOdometerCellCountHiB.setStatus('current')
atmPvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsInOdometerCellCountLoB.setStatus('current')
atmPvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutOdometerCellCountHiB.setStatus('current')
atmPvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOutOdometerCellCountLoB.setStatus('current')
atmPvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOdometerTimer.setStatus('current')
atmPvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVccStatsOdometerReset.setStatus('current')
atmPvcVccStatsOamAisTxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamAisTxA.setStatus('current')
atmPvcVccStatsOamAisRxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamAisRxA.setStatus('current')
atmPvcVccStatsOamRdiTxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamRdiTxA.setStatus('current')
atmPvcVccStatsOamRdiRxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamRdiRxA.setStatus('current')
atmPvcVccStatsOamAisTxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamAisTxB.setStatus('current')
atmPvcVccStatsOamAisRxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamAisRxB.setStatus('current')
atmPvcVccStatsOamRdiTxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamRdiTxB.setStatus('current')
atmPvcVccStatsOamRdiRxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsOamRdiRxB.setStatus('current')
atmPvcVccStatsCellsDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsCellsDroppedA.setStatus('current')
atmPvcVccStatsCellsTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsCellsTaggedA.setStatus('current')
atmPvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsCellsDroppedB.setStatus('current')
atmPvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVccStatsCellsTaggedB.setStatus('current')
atmPvcVpcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2), )
if mibBuilder.loadTexts: atmPvcVpcStatsTable.setStatus('current')
atmPvcVpcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1), ).setIndexNames((0, "ACMIB", "atmPvcVpcStatsIfA"), (0, "ACMIB", "atmPvcVpcStatsVpiA"), (0, "ACMIB", "atmPvcVpcStatsIfB"), (0, "ACMIB", "atmPvcVpcStatsVpiB"))
if mibBuilder.loadTexts: atmPvcVpcStatsEntry.setStatus('current')
atmPvcVpcStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmPvcVpcStatsIfA.setStatus('current')
atmPvcVpcStatsVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVpcStatsVpiA.setStatus('current')
atmPvcVpcStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 3), IntfIndex())
if mibBuilder.loadTexts: atmPvcVpcStatsIfB.setStatus('current')
atmPvcVpcStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmPvcVpcStatsVpiB.setStatus('current')
atmPvcVpcStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInCellCountHiA.setStatus('current')
atmPvcVpcStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInCellCountLoA.setStatus('current')
atmPvcVpcStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutCellCountHiA.setStatus('current')
atmPvcVpcStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutCellCountLoA.setStatus('current')
atmPvcVpcStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInCellCountHiB.setStatus('current')
atmPvcVpcStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInCellCountLoB.setStatus('current')
atmPvcVpcStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutCellCountHiB.setStatus('current')
atmPvcVpcStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutCellCountLoB.setStatus('current')
atmPvcVpcStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsTimer.setStatus('current')
atmPvcVpcStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInOdometerCellCountHiA.setStatus('current')
atmPvcVpcStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInOdometerCellCountLoA.setStatus('current')
atmPvcVpcStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutOdometerCellCountHiA.setStatus('current')
atmPvcVpcStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutOdometerCellCountLoA.setStatus('current')
atmPvcVpcStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInOdometerCellCountHiB.setStatus('current')
atmPvcVpcStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsInOdometerCellCountLoB.setStatus('current')
atmPvcVpcStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutOdometerCellCountHiB.setStatus('current')
atmPvcVpcStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOutOdometerCellCountLoB.setStatus('current')
atmPvcVpcStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOdometerTimer.setStatus('current')
atmPvcVpcStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPvcVpcStatsOdometerReset.setStatus('current')
atmPvcVpcStatsOamAisTxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamAisTxA.setStatus('current')
atmPvcVpcStatsOamAisRxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamAisRxA.setStatus('current')
atmPvcVpcStatsOamRdiTxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamRdiTxA.setStatus('current')
atmPvcVpcStatsOamRdiRxA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamRdiRxA.setStatus('current')
atmPvcVpcStatsOamAisTxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamAisTxB.setStatus('current')
atmPvcVpcStatsOamAisRxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamAisRxB.setStatus('current')
atmPvcVpcStatsOamRdiTxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamRdiTxB.setStatus('current')
atmPvcVpcStatsOamRdiRxB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsOamRdiRxB.setStatus('current')
atmPvcVpcStatsCellsDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsCellsDroppedA.setStatus('current')
atmPvcVpcStatsCellsTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsCellsTaggedA.setStatus('current')
atmPvcVpcStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsCellsDroppedB.setStatus('current')
atmPvcVpcStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPvcVpcStatsCellsTaggedB.setStatus('current')
atmSvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3), )
if mibBuilder.loadTexts: atmSvcVccStatsTable.setStatus('current')
atmSvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1), ).setIndexNames((0, "ACMIB", "atmSvcVccStatsIfA"), (0, "ACMIB", "atmSvcVccStatsVpiA"), (0, "ACMIB", "atmSvcVccStatsVciA"), (0, "ACMIB", "atmSvcVccStatsIfB"), (0, "ACMIB", "atmSvcVccStatsVpiB"), (0, "ACMIB", "atmSvcVccStatsVciB"))
if mibBuilder.loadTexts: atmSvcVccStatsEntry.setStatus('current')
atmSvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmSvcVccStatsIfA.setStatus('current')
atmSvcVccStatsVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmSvcVccStatsVpiA.setStatus('current')
atmSvcVccStatsVciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmSvcVccStatsVciA.setStatus('current')
atmSvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 4), IntfIndex())
if mibBuilder.loadTexts: atmSvcVccStatsIfB.setStatus('current')
atmSvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmSvcVccStatsVpiB.setStatus('current')
atmSvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmSvcVccStatsVciB.setStatus('current')
atmSvcVccStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInCellCountHiA.setStatus('current')
atmSvcVccStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInCellCountLoA.setStatus('current')
atmSvcVccStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutCellCountHiA.setStatus('current')
atmSvcVccStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutCellCountLoA.setStatus('current')
atmSvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInCellCountHiB.setStatus('current')
atmSvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInCellCountLoB.setStatus('current')
atmSvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutCellCountHiB.setStatus('current')
atmSvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutCellCountLoB.setStatus('current')
atmSvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsTimer.setStatus('current')
atmSvcVccStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInOdometerCellCountHiA.setStatus('current')
atmSvcVccStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInOdometerCellCountLoA.setStatus('current')
atmSvcVccStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutOdometerCellCountHiA.setStatus('current')
atmSvcVccStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutOdometerCellCountLoA.setStatus('current')
atmSvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInOdometerCellCountHiB.setStatus('current')
atmSvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsInOdometerCellCountLoB.setStatus('current')
atmSvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutOdometerCellCountHiB.setStatus('current')
atmSvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOutOdometerCellCountLoB.setStatus('current')
atmSvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsOdometerTimer.setStatus('current')
atmSvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVccStatsOdometerReset.setStatus('current')
atmSvcVccStatsCellsDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsCellsDroppedA.setStatus('current')
atmSvcVccStatsCellsTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsCellsTaggedA.setStatus('current')
atmSvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsCellsDroppedB.setStatus('current')
atmSvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVccStatsCellsTaggedB.setStatus('current')
ipAtmAppPvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4), )
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsTable.setStatus('current')
ipAtmAppPvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1), ).setIndexNames((0, "ACMIB", "ipAtmAppPvcVccStatsDestAddrA"), (0, "ACMIB", "ipAtmAppPvcVccStatsSubnetMaskA"), (0, "ACMIB", "ipAtmAppPvcVccStatsIfB"), (0, "ACMIB", "ipAtmAppPvcVccStatsVpiB"), (0, "ACMIB", "ipAtmAppPvcVccStatsVciB"))
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsEntry.setStatus('current')
ipAtmAppPvcVccStatsDestAddrA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsDestAddrA.setStatus('current')
ipAtmAppPvcVccStatsSubnetMaskA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsSubnetMaskA.setStatus('current')
ipAtmAppPvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 3), IntfIndex())
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsIfB.setStatus('current')
ipAtmAppPvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsVpiB.setStatus('current')
ipAtmAppPvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsVciB.setStatus('current')
ipAtmAppPvcVccStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInCellCountHiA.setStatus('current')
ipAtmAppPvcVccStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInCellCountLoA.setStatus('current')
ipAtmAppPvcVccStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutCellCountHiA.setStatus('current')
ipAtmAppPvcVccStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutCellCountLoA.setStatus('current')
ipAtmAppPvcVccStatsFramesInB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsFramesInB.setStatus('current')
ipAtmAppPvcVccStatsFramesOutB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsFramesOutB.setStatus('current')
ipAtmAppPvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInCellCountHiB.setStatus('current')
ipAtmAppPvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInCellCountLoB.setStatus('current')
ipAtmAppPvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutCellCountHiB.setStatus('current')
ipAtmAppPvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutCellCountLoB.setStatus('current')
ipAtmAppPvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsTimer.setStatus('current')
ipAtmAppPvcVccStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInOdometerCellCountHiA.setStatus('current')
ipAtmAppPvcVccStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInOdometerCellCountLoA.setStatus('current')
ipAtmAppPvcVccStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutOdometerCellCountHiA.setStatus('current')
ipAtmAppPvcVccStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutOdometerCellCountLoA.setStatus('current')
ipAtmAppPvcVccStatsOdometerFramesInB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOdometerFramesInB.setStatus('current')
ipAtmAppPvcVccStatsOdometerFramesOutB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOdometerFramesOutB.setStatus('current')
ipAtmAppPvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInOdometerCellCountHiB.setStatus('current')
ipAtmAppPvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsInOdometerCellCountLoB.setStatus('current')
ipAtmAppPvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutOdometerCellCountHiB.setStatus('current')
ipAtmAppPvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOutOdometerCellCountLoB.setStatus('current')
ipAtmAppPvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOdometerTimer.setStatus('current')
ipAtmAppPvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsOdometerReset.setStatus('current')
ipAtmAppPvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsCellsDroppedB.setStatus('current')
ipAtmAppPvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 4, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppPvcVccStatsCellsTaggedB.setStatus('current')
ipAtmAppSvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5), )
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsTable.setStatus('current')
ipAtmAppSvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1), ).setIndexNames((0, "ACMIB", "ipAtmAppSvcVccStatsDestAddrA"), (0, "ACMIB", "ipAtmAppSvcVccStatsSubnetMaskA"), (0, "ACMIB", "ipAtmAppSvcVccStatsIfB"), (0, "ACMIB", "ipAtmAppSvcVccStatsVpiB"), (0, "ACMIB", "ipAtmAppSvcVccStatsVciB"))
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsEntry.setStatus('current')
ipAtmAppSvcVccStatsDestAddrA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsDestAddrA.setStatus('current')
ipAtmAppSvcVccStatsSubnetMaskA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsSubnetMaskA.setStatus('current')
ipAtmAppSvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 3), IntfIndex())
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsIfB.setStatus('current')
ipAtmAppSvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsVpiB.setStatus('current')
ipAtmAppSvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsVciB.setStatus('current')
ipAtmAppSvcVccStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsInCellCountHiA.setStatus('current')
ipAtmAppSvcVccStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsInCellCountLoA.setStatus('current')
ipAtmAppSvcVccStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsOutCellCountHiA.setStatus('current')
ipAtmAppSvcVccStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsOutCellCountLoA.setStatus('current')
ipAtmAppSvcVccStatsFramesInB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsFramesInB.setStatus('current')
ipAtmAppSvcVccStatsFramesOutB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsFramesOutB.setStatus('current')
ipAtmAppSvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsInCellCountHiB.setStatus('current')
ipAtmAppSvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsInCellCountLoB.setStatus('current')
ipAtmAppSvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsOutCellCountHiB.setStatus('current')
ipAtmAppSvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsOutCellCountLoB.setStatus('current')
ipAtmAppSvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsTimer.setStatus('current')
ipAtmAppSvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsCellsDroppedB.setStatus('current')
ipAtmAppSvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAtmAppSvcVccStatsCellsTaggedB.setStatus('current')
cirEmAtmPvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6), )
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsTable.setStatus('current')
cirEmAtmPvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1), ).setIndexNames((0, "ACMIB", "cirEmAtmPvcVccStatsIfA"), (0, "ACMIB", "cirEmAtmPvcVccStatsIfB"), (0, "ACMIB", "cirEmAtmPvcVccStatsVpiB"), (0, "ACMIB", "cirEmAtmPvcVccStatsVciB"))
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsEntry.setStatus('current')
cirEmAtmPvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 1), IntfIndex())
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsIfA.setStatus('current')
cirEmAtmPvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 2), IntfIndex())
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsIfB.setStatus('current')
cirEmAtmPvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsVpiB.setStatus('current')
cirEmAtmPvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsVciB.setStatus('current')
cirEmAtmPvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsCellsEncodedHiA.setStatus('current')
cirEmAtmPvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsCellsEncodedLoA.setStatus('current')
cirEmAtmPvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsCellsDecodedHiA.setStatus('current')
cirEmAtmPvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsCellsDecodedLoA.setStatus('current')
cirEmAtmPvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsInCellCountHiB.setStatus('current')
cirEmAtmPvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsInCellCountLoB.setStatus('current')
cirEmAtmPvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOutCellCountHiB.setStatus('current')
cirEmAtmPvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOutCellCountLoB.setStatus('current')
cirEmAtmPvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsTimer.setStatus('current')
cirEmAtmPvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
cirEmAtmPvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
cirEmAtmPvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
cirEmAtmPvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
cirEmAtmPvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsInOdometerCellCountHiB.setStatus('current')
cirEmAtmPvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsInOdometerCellCountLoB.setStatus('current')
cirEmAtmPvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOutOdometerCellCountHiB.setStatus('current')
cirEmAtmPvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOutOdometerCellCountLoB.setStatus('current')
cirEmAtmPvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOdometerTimer.setStatus('current')
cirEmAtmPvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOdometerReset.setStatus('current')
cirEmAtmPvcVccStatsOamAisTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOamAisTx.setStatus('current')
cirEmAtmPvcVccStatsOamAisRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOamAisRx.setStatus('current')
cirEmAtmPvcVccStatsOamRdiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOamRdiTx.setStatus('current')
cirEmAtmPvcVccStatsOamRdiRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsOamRdiRx.setStatus('current')
cirEmAtmPvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsCellsDroppedB.setStatus('current')
cirEmAtmPvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmPvcVccStatsCellsTaggedB.setStatus('current')
frAtmPvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7), )
if mibBuilder.loadTexts: frAtmPvcVccStatsTable.setStatus('current')
frAtmPvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1), ).setIndexNames((0, "ACMIB", "frAtmPvcVccStatsIfA"), (0, "ACMIB", "frAtmPvcVccStatsDlciA"), (0, "ACMIB", "frAtmPvcVccStatsIfB"), (0, "ACMIB", "frAtmPvcVccStatsVpiB"), (0, "ACMIB", "frAtmPvcVccStatsVciB"))
if mibBuilder.loadTexts: frAtmPvcVccStatsEntry.setStatus('current')
frAtmPvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 1), IntfIndex())
if mibBuilder.loadTexts: frAtmPvcVccStatsIfA.setStatus('current')
frAtmPvcVccStatsDlciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: frAtmPvcVccStatsDlciA.setStatus('current')
frAtmPvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 3), IntfIndex())
if mibBuilder.loadTexts: frAtmPvcVccStatsIfB.setStatus('current')
frAtmPvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: frAtmPvcVccStatsVpiB.setStatus('current')
frAtmPvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: frAtmPvcVccStatsVciB.setStatus('current')
frAtmPvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsCellsEncodedHiA.setStatus('current')
frAtmPvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsCellsEncodedLoA.setStatus('current')
frAtmPvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsCellsDecodedHiA.setStatus('current')
frAtmPvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsCellsDecodedLoA.setStatus('current')
frAtmPvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsInCellCountHiB.setStatus('current')
frAtmPvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsInCellCountLoB.setStatus('current')
frAtmPvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOutCellCountHiB.setStatus('current')
frAtmPvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOutCellCountLoB.setStatus('current')
frAtmPvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsTimer.setStatus('current')
frAtmPvcVccStatsFramesDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsFramesDroppedA.setStatus('current')
frAtmPvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
frAtmPvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
frAtmPvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
frAtmPvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
frAtmPvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsInOdometerCellCountHiB.setStatus('current')
frAtmPvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsInOdometerCellCountLoB.setStatus('current')
frAtmPvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOutOdometerCellCountHiB.setStatus('current')
frAtmPvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOutOdometerCellCountLoB.setStatus('current')
frAtmPvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOdometerTimer.setStatus('current')
frAtmPvcVccStatsOdometerFramesDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOdometerFramesDroppedA.setStatus('current')
frAtmPvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmPvcVccStatsOdometerReset.setStatus('current')
frAtmPvcVccStatsOamAisTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOamAisTx.setStatus('current')
frAtmPvcVccStatsOamAisRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOamAisRx.setStatus('current')
frAtmPvcVccStatsOamRdiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOamRdiTx.setStatus('current')
frAtmPvcVccStatsOamRdiRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsOamRdiRx.setStatus('current')
frAtmPvcVccStatsAal5ErrFramesA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsAal5ErrFramesA.setStatus('current')
frAtmPvcVccStatsFramesTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsFramesTaggedA.setStatus('current')
frAtmPvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsCellsDroppedB.setStatus('current')
frAtmPvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 7, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmPvcVccStatsCellsTaggedB.setStatus('current')
frFrPvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8), )
if mibBuilder.loadTexts: frFrPvcStatsTable.setStatus('current')
frFrPvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1), ).setIndexNames((0, "ACMIB", "frFrPvcStatsIfA"), (0, "ACMIB", "frFrPvcStatsDlciA"), (0, "ACMIB", "frFrPvcStatsIfB"), (0, "ACMIB", "frFrPvcStatsDlciB"))
if mibBuilder.loadTexts: frFrPvcStatsEntry.setStatus('current')
frFrPvcStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 1), IntfIndex())
if mibBuilder.loadTexts: frFrPvcStatsIfA.setStatus('current')
frFrPvcStatsDlciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: frFrPvcStatsDlciA.setStatus('current')
frFrPvcStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 3), IntfIndex())
if mibBuilder.loadTexts: frFrPvcStatsIfB.setStatus('current')
frFrPvcStatsDlciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: frFrPvcStatsDlciB.setStatus('current')
frFrPvcStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsEncodedHiA.setStatus('current')
frFrPvcStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsEncodedLoA.setStatus('current')
frFrPvcStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsDecodedHiA.setStatus('current')
frFrPvcStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsDecodedLoA.setStatus('current')
frFrPvcStatsCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsEncodedHiB.setStatus('current')
frFrPvcStatsCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsEncodedLoB.setStatus('current')
frFrPvcStatsCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsDecodedHiB.setStatus('current')
frFrPvcStatsCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsCellsDecodedLoB.setStatus('current')
frFrPvcStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsTimer.setStatus('current')
frFrPvcStatsFramesDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsFramesDroppedA.setStatus('current')
frFrPvcStatsFramesDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsFramesDroppedB.setStatus('current')
frFrPvcStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsEncodedHiA.setStatus('current')
frFrPvcStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsEncodedLoA.setStatus('current')
frFrPvcStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsDecodedHiA.setStatus('current')
frFrPvcStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsDecodedLoA.setStatus('current')
frFrPvcStatsOdometerCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsEncodedHiB.setStatus('current')
frFrPvcStatsOdometerCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsEncodedLoB.setStatus('current')
frFrPvcStatsOdometerCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsDecodedHiB.setStatus('current')
frFrPvcStatsOdometerCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerCellsDecodedLoB.setStatus('current')
frFrPvcStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerTimer.setStatus('current')
frFrPvcStatsOdometerFramesDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerFramesDroppedA.setStatus('current')
frFrPvcStatsOdometerFramesDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsOdometerFramesDroppedB.setStatus('current')
frFrPvcStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frFrPvcStatsOdometerReset.setStatus('current')
frFrPvcStatsAal5ErrFramesA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsAal5ErrFramesA.setStatus('current')
frFrPvcStatsAal5ErrFramesB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsAal5ErrFramesB.setStatus('current')
frFrPvcStatsFramesTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsFramesTaggedA.setStatus('current')
frFrPvcStatsFramesTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 8, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frFrPvcStatsFramesTaggedB.setStatus('current')
vbrAtmPvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9), )
if mibBuilder.loadTexts: vbrAtmPvcVccStatsTable.setStatus('current')
vbrAtmPvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1), ).setIndexNames((0, "ACMIB", "vbrAtmPvcVccStatsIfA"), (0, "ACMIB", "vbrAtmPvcVccStatsIfB"), (0, "ACMIB", "vbrAtmPvcVccStatsVpiB"), (0, "ACMIB", "vbrAtmPvcVccStatsVciB"))
if mibBuilder.loadTexts: vbrAtmPvcVccStatsEntry.setStatus('current')
vbrAtmPvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vbrAtmPvcVccStatsIfA.setStatus('current')
vbrAtmPvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 2), IntfIndex())
if mibBuilder.loadTexts: vbrAtmPvcVccStatsIfB.setStatus('current')
vbrAtmPvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: vbrAtmPvcVccStatsVpiB.setStatus('current')
vbrAtmPvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vbrAtmPvcVccStatsVciB.setStatus('current')
vbrAtmPvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsCellsEncodedHiA.setStatus('current')
vbrAtmPvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsCellsEncodedLoA.setStatus('current')
vbrAtmPvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsCellsDecodedHiA.setStatus('current')
vbrAtmPvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsCellsDecodedLoA.setStatus('current')
vbrAtmPvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsInCellCountHiB.setStatus('current')
vbrAtmPvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsInCellCountLoB.setStatus('current')
vbrAtmPvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOutCellCountHiB.setStatus('current')
vbrAtmPvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOutCellCountLoB.setStatus('current')
vbrAtmPvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsTimer.setStatus('current')
vbrAtmPvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
vbrAtmPvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
vbrAtmPvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
vbrAtmPvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
vbrAtmPvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsInOdometerCellCountHiB.setStatus('current')
vbrAtmPvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsInOdometerCellCountLoB.setStatus('current')
vbrAtmPvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOutOdometerCellCountHiB.setStatus('current')
vbrAtmPvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOutOdometerCellCountLoB.setStatus('current')
vbrAtmPvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOdometerTimer.setStatus('current')
vbrAtmPvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOdometerReset.setStatus('current')
vbrAtmPvcVccStatsOamAisTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOamAisTx.setStatus('current')
vbrAtmPvcVccStatsOamAisRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOamAisRx.setStatus('current')
vbrAtmPvcVccStatsOamRdiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOamRdiTx.setStatus('current')
vbrAtmPvcVccStatsOamRdiRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsOamRdiRx.setStatus('current')
vbrAtmPvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsCellsDroppedB.setStatus('current')
vbrAtmPvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 9, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmPvcVccStatsCellsTaggedB.setStatus('current')
cirEmCirEmPvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10), )
if mibBuilder.loadTexts: cirEmCirEmPvcStatsTable.setStatus('current')
cirEmCirEmPvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1), ).setIndexNames((0, "ACMIB", "cirEmCirEmPvcStatsIfA"), (0, "ACMIB", "cirEmCirEmPvcStatsIfB"))
if mibBuilder.loadTexts: cirEmCirEmPvcStatsEntry.setStatus('current')
cirEmCirEmPvcStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 1), IntfIndex())
if mibBuilder.loadTexts: cirEmCirEmPvcStatsIfA.setStatus('current')
cirEmCirEmPvcStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 2), IntfIndex())
if mibBuilder.loadTexts: cirEmCirEmPvcStatsIfB.setStatus('current')
cirEmCirEmPvcStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsEncodedHiA.setStatus('current')
cirEmCirEmPvcStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsEncodedLoA.setStatus('current')
cirEmCirEmPvcStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsDecodedHiA.setStatus('current')
cirEmCirEmPvcStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsDecodedLoA.setStatus('current')
cirEmCirEmPvcStatsCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsEncodedHiB.setStatus('current')
cirEmCirEmPvcStatsCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsEncodedLoB.setStatus('current')
cirEmCirEmPvcStatsCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsDecodedHiB.setStatus('current')
cirEmCirEmPvcStatsCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsCellsDecodedLoB.setStatus('current')
cirEmCirEmPvcStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsTimer.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsEncodedHiA.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsEncodedLoA.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsDecodedHiA.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsDecodedLoA.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsEncodedHiB.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsEncodedLoB.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsDecodedHiB.setStatus('current')
cirEmCirEmPvcStatsOdometerCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerCellsDecodedLoB.setStatus('current')
cirEmCirEmPvcStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerTimer.setStatus('current')
cirEmCirEmPvcStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmCirEmPvcStatsOdometerReset.setStatus('current')
vbrVbrPvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11), )
if mibBuilder.loadTexts: vbrVbrPvcStatsTable.setStatus('current')
vbrVbrPvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1), ).setIndexNames((0, "ACMIB", "vbrVbrPvcStatsIfA"), (0, "ACMIB", "vbrVbrPvcStatsIfB"))
if mibBuilder.loadTexts: vbrVbrPvcStatsEntry.setStatus('current')
vbrVbrPvcStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vbrVbrPvcStatsIfA.setStatus('current')
vbrVbrPvcStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 2), IntfIndex())
if mibBuilder.loadTexts: vbrVbrPvcStatsIfB.setStatus('current')
vbrVbrPvcStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsEncodedHiA.setStatus('current')
vbrVbrPvcStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsEncodedLoA.setStatus('current')
vbrVbrPvcStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsDecodedHiA.setStatus('current')
vbrVbrPvcStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsDecodedLoA.setStatus('current')
vbrVbrPvcStatsCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsEncodedHiB.setStatus('current')
vbrVbrPvcStatsCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsEncodedLoB.setStatus('current')
vbrVbrPvcStatsCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsDecodedHiB.setStatus('current')
vbrVbrPvcStatsCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsCellsDecodedLoB.setStatus('current')
vbrVbrPvcStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsTimer.setStatus('current')
vbrVbrPvcStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsEncodedHiA.setStatus('current')
vbrVbrPvcStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsEncodedLoA.setStatus('current')
vbrVbrPvcStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsDecodedHiA.setStatus('current')
vbrVbrPvcStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsDecodedLoA.setStatus('current')
vbrVbrPvcStatsOdometerCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsEncodedHiB.setStatus('current')
vbrVbrPvcStatsOdometerCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsEncodedLoB.setStatus('current')
vbrVbrPvcStatsOdometerCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsDecodedHiB.setStatus('current')
vbrVbrPvcStatsOdometerCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerCellsDecodedLoB.setStatus('current')
vbrVbrPvcStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerTimer.setStatus('current')
vbrVbrPvcStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrVbrPvcStatsOdometerReset.setStatus('current')
bridgeBridgePvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12), )
if mibBuilder.loadTexts: bridgeBridgePvcStatsTable.setStatus('current')
bridgeBridgePvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1), ).setIndexNames((0, "ACMIB", "bridgeBridgePvcStatsIfA"), (0, "ACMIB", "bridgeBridgePvcStatsIfB"))
if mibBuilder.loadTexts: bridgeBridgePvcStatsEntry.setStatus('current')
bridgeBridgePvcStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 1), IntfIndex())
if mibBuilder.loadTexts: bridgeBridgePvcStatsIfA.setStatus('current')
bridgeBridgePvcStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 2), IntfIndex())
if mibBuilder.loadTexts: bridgeBridgePvcStatsIfB.setStatus('current')
bridgeBridgePvcStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsEncodedHiA.setStatus('current')
bridgeBridgePvcStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsEncodedLoA.setStatus('current')
bridgeBridgePvcStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsDecodedHiA.setStatus('current')
bridgeBridgePvcStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsDecodedLoA.setStatus('current')
bridgeBridgePvcStatsCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsEncodedHiB.setStatus('current')
bridgeBridgePvcStatsCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsEncodedLoB.setStatus('current')
bridgeBridgePvcStatsCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsDecodedHiB.setStatus('current')
bridgeBridgePvcStatsCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsCellsDecodedLoB.setStatus('current')
bridgeBridgePvcStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsTimer.setStatus('current')
bridgeBridgePvcStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsEncodedHiA.setStatus('current')
bridgeBridgePvcStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsEncodedLoA.setStatus('current')
bridgeBridgePvcStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsDecodedHiA.setStatus('current')
bridgeBridgePvcStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsDecodedLoA.setStatus('current')
bridgeBridgePvcStatsOdometerCellsEncodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsEncodedHiB.setStatus('current')
bridgeBridgePvcStatsOdometerCellsEncodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsEncodedLoB.setStatus('current')
bridgeBridgePvcStatsOdometerCellsDecodedHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsDecodedHiB.setStatus('current')
bridgeBridgePvcStatsOdometerCellsDecodedLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerCellsDecodedLoB.setStatus('current')
bridgeBridgePvcStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerTimer.setStatus('current')
bridgeBridgePvcStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeBridgePvcStatsOdometerReset.setStatus('current')
bridgeAtmPvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13), )
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsTable.setStatus('current')
bridgeAtmPvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1), ).setIndexNames((0, "ACMIB", "bridgeAtmPvcVccStatsIfA"), (0, "ACMIB", "bridgeAtmPvcVccStatsIfB"), (0, "ACMIB", "bridgeAtmPvcVccStatsVpiB"), (0, "ACMIB", "bridgeAtmPvcVccStatsVciB"))
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsEntry.setStatus('current')
bridgeAtmPvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 1), IntfIndex())
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsIfA.setStatus('current')
bridgeAtmPvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 2), IntfIndex())
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsIfB.setStatus('current')
bridgeAtmPvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsVpiB.setStatus('current')
bridgeAtmPvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsVciB.setStatus('current')
bridgeAtmPvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsCellsEncodedHiA.setStatus('current')
bridgeAtmPvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsCellsEncodedLoA.setStatus('current')
bridgeAtmPvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsCellsDecodedHiA.setStatus('current')
bridgeAtmPvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsCellsDecodedLoA.setStatus('current')
bridgeAtmPvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsInCellCountHiB.setStatus('current')
bridgeAtmPvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsInCellCountLoB.setStatus('current')
bridgeAtmPvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOutCellCountHiB.setStatus('current')
bridgeAtmPvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOutCellCountLoB.setStatus('current')
bridgeAtmPvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsTimer.setStatus('current')
bridgeAtmPvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
bridgeAtmPvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
bridgeAtmPvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
bridgeAtmPvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
bridgeAtmPvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsInOdometerCellCountHiB.setStatus('current')
bridgeAtmPvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsInOdometerCellCountLoB.setStatus('current')
bridgeAtmPvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOutOdometerCellCountHiB.setStatus('current')
bridgeAtmPvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOutOdometerCellCountLoB.setStatus('current')
bridgeAtmPvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOdometerTimer.setStatus('current')
bridgeAtmPvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOdometerReset.setStatus('current')
bridgeAtmPvcVccStatsOamAisTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOamAisTx.setStatus('current')
bridgeAtmPvcVccStatsOamAisRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOamAisRx.setStatus('current')
bridgeAtmPvcVccStatsOamRdiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOamRdiTx.setStatus('current')
bridgeAtmPvcVccStatsOamRdiRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsOamRdiRx.setStatus('current')
bridgeAtmPvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsCellsDroppedB.setStatus('current')
bridgeAtmPvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 13, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAtmPvcVccStatsCellsTaggedB.setStatus('current')
cirEmAtmSpvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14), )
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsTable.setStatus('current')
cirEmAtmSpvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1), ).setIndexNames((0, "ACMIB", "cirEmAtmSpvcVccStatsIfA"), (0, "ACMIB", "cirEmAtmSpvcVccStatsIfB"), (0, "ACMIB", "cirEmAtmSpvcVccStatsVpiB"), (0, "ACMIB", "cirEmAtmSpvcVccStatsVciB"))
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsEntry.setStatus('current')
cirEmAtmSpvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 1), IntfIndex())
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsIfA.setStatus('current')
cirEmAtmSpvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 2), IntfIndex())
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsIfB.setStatus('current')
cirEmAtmSpvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsVpiB.setStatus('current')
cirEmAtmSpvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsVciB.setStatus('current')
cirEmAtmSpvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsCellsEncodedHiA.setStatus('current')
cirEmAtmSpvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsCellsEncodedLoA.setStatus('current')
cirEmAtmSpvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsCellsDecodedHiA.setStatus('current')
cirEmAtmSpvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsCellsDecodedLoA.setStatus('current')
cirEmAtmSpvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsInCellCountHiB.setStatus('current')
cirEmAtmSpvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsInCellCountLoB.setStatus('current')
cirEmAtmSpvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOutCellCountHiB.setStatus('current')
cirEmAtmSpvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOutCellCountLoB.setStatus('current')
cirEmAtmSpvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsTimer.setStatus('current')
cirEmAtmSpvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
cirEmAtmSpvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
cirEmAtmSpvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
cirEmAtmSpvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
cirEmAtmSpvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsInOdometerCellCountHiB.setStatus('current')
cirEmAtmSpvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsInOdometerCellCountLoB.setStatus('current')
cirEmAtmSpvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOutOdometerCellCountHiB.setStatus('current')
cirEmAtmSpvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOutOdometerCellCountLoB.setStatus('current')
cirEmAtmSpvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOdometerTimer.setStatus('current')
cirEmAtmSpvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsOdometerReset.setStatus('current')
cirEmAtmSpvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsCellsDroppedB.setStatus('current')
cirEmAtmSpvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 14, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirEmAtmSpvcVccStatsCellsTaggedB.setStatus('current')
vbrAtmSpvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15), )
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsTable.setStatus('current')
vbrAtmSpvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1), ).setIndexNames((0, "ACMIB", "vbrAtmSpvcVccStatsIfA"), (0, "ACMIB", "vbrAtmSpvcVccStatsIfB"), (0, "ACMIB", "vbrAtmSpvcVccStatsVpiB"), (0, "ACMIB", "vbrAtmSpvcVccStatsVciB"))
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsEntry.setStatus('current')
vbrAtmSpvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 1), IntfIndex())
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsIfA.setStatus('current')
vbrAtmSpvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 2), IntfIndex())
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsIfB.setStatus('current')
vbrAtmSpvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsVpiB.setStatus('current')
vbrAtmSpvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsVciB.setStatus('current')
vbrAtmSpvcVccStatsCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsCellsEncodedHiA.setStatus('current')
vbrAtmSpvcVccStatsCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsCellsEncodedLoA.setStatus('current')
vbrAtmSpvcVccStatsCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsCellsDecodedHiA.setStatus('current')
vbrAtmSpvcVccStatsCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsCellsDecodedLoA.setStatus('current')
vbrAtmSpvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsInCellCountHiB.setStatus('current')
vbrAtmSpvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsInCellCountLoB.setStatus('current')
vbrAtmSpvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOutCellCountHiB.setStatus('current')
vbrAtmSpvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOutCellCountLoB.setStatus('current')
vbrAtmSpvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsTimer.setStatus('current')
vbrAtmSpvcVccStatsOdometerCellsEncodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOdometerCellsEncodedHiA.setStatus('current')
vbrAtmSpvcVccStatsOdometerCellsEncodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOdometerCellsEncodedLoA.setStatus('current')
vbrAtmSpvcVccStatsOdometerCellsDecodedHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOdometerCellsDecodedHiA.setStatus('current')
vbrAtmSpvcVccStatsOdometerCellsDecodedLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOdometerCellsDecodedLoA.setStatus('current')
vbrAtmSpvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsInOdometerCellCountHiB.setStatus('current')
vbrAtmSpvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsInOdometerCellCountLoB.setStatus('current')
vbrAtmSpvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOutOdometerCellCountHiB.setStatus('current')
vbrAtmSpvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOutOdometerCellCountLoB.setStatus('current')
vbrAtmSpvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOdometerTimer.setStatus('current')
vbrAtmSpvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsOdometerReset.setStatus('current')
vbrAtmSpvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsCellsDroppedB.setStatus('current')
vbrAtmSpvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 15, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vbrAtmSpvcVccStatsCellsTaggedB.setStatus('current')
atmSpvcVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16), )
if mibBuilder.loadTexts: atmSpvcVccStatsTable.setStatus('current')
atmSpvcVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1), ).setIndexNames((0, "ACMIB", "atmSpvcVccStatsIfA"), (0, "ACMIB", "atmSpvcVccStatsVpiA"), (0, "ACMIB", "atmSpvcVccStatsVciA"), (0, "ACMIB", "atmSpvcVccStatsIfB"), (0, "ACMIB", "atmSpvcVccStatsVpiB"), (0, "ACMIB", "atmSpvcVccStatsVciB"))
if mibBuilder.loadTexts: atmSpvcVccStatsEntry.setStatus('current')
atmSpvcVccStatsIfA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 1), IntfIndex())
if mibBuilder.loadTexts: atmSpvcVccStatsIfA.setStatus('current')
atmSpvcVccStatsVpiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmSpvcVccStatsVpiA.setStatus('current')
atmSpvcVccStatsVciA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmSpvcVccStatsVciA.setStatus('current')
atmSpvcVccStatsIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 4), IntfIndex())
if mibBuilder.loadTexts: atmSpvcVccStatsIfB.setStatus('current')
atmSpvcVccStatsVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmSpvcVccStatsVpiB.setStatus('current')
atmSpvcVccStatsVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmSpvcVccStatsVciB.setStatus('current')
atmSpvcVccStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInCellCountHiA.setStatus('current')
atmSpvcVccStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInCellCountLoA.setStatus('current')
atmSpvcVccStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutCellCountHiA.setStatus('current')
atmSpvcVccStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutCellCountLoA.setStatus('current')
atmSpvcVccStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInCellCountHiB.setStatus('current')
atmSpvcVccStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInCellCountLoB.setStatus('current')
atmSpvcVccStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutCellCountHiB.setStatus('current')
atmSpvcVccStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutCellCountLoB.setStatus('current')
atmSpvcVccStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsTimer.setStatus('current')
atmSpvcVccStatsFrwdErrCrrctnRateA2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsFrwdErrCrrctnRateA2B.setStatus('current')
atmSpvcVccStatsFrwdErrCrrctnRateB2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsFrwdErrCrrctnRateB2A.setStatus('current')
atmSpvcVccStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInOdometerCellCountHiA.setStatus('current')
atmSpvcVccStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInOdometerCellCountLoA.setStatus('current')
atmSpvcVccStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutOdometerCellCountHiA.setStatus('current')
atmSpvcVccStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutOdometerCellCountLoA.setStatus('current')
atmSpvcVccStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInOdometerCellCountHiB.setStatus('current')
atmSpvcVccStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsInOdometerCellCountLoB.setStatus('current')
atmSpvcVccStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutOdometerCellCountHiB.setStatus('current')
atmSpvcVccStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOutOdometerCellCountLoB.setStatus('current')
atmSpvcVccStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsOdometerTimer.setStatus('current')
atmSpvcVccStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcVccStatsOdometerReset.setStatus('current')
atmSpvcVccStatsCellsDroppedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsCellsDroppedA.setStatus('current')
atmSpvcVccStatsCellsTaggedA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsCellsTaggedA.setStatus('current')
atmSpvcVccStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsCellsDroppedB.setStatus('current')
atmSpvcVccStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 16, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcVccStatsCellsTaggedB.setStatus('current')
ipAtmArpSrvConnType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmArpSrvConnType.setStatus('current')
ipAtmIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmIpAddr.setStatus('current')
ipAtmIpMask = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAtmIpMask.setStatus('current')
atmArpTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 4), )
if mibBuilder.loadTexts: atmArpTable.setStatus('current')
atmArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 4, 1), ).setIndexNames((0, "ACMIB", "atmArpIpAddress"))
if mibBuilder.loadTexts: atmArpEntry.setStatus('current')
atmArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: atmArpIpAddress.setStatus('current')
atmArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpAtmAddress.setStatus('current')
atmArpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsap", 1), ("e164", 2), ("e164nsap", 3))).clone('nsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpAddrType.setStatus('current')
atmArpEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unconnected", 3), ("permanent", 4), ("pendingAtmAddr", 5), ("pendingIpAddr", 6), ("pendingConnect", 7))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmArpEntryState.setStatus('current')
atmArpEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmArpEntryRowStatus.setStatus('current')
appIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 5), )
if mibBuilder.loadTexts: appIpRouteTable.setStatus('current')
appIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 5, 1), ).setIndexNames((0, "ACMIB", "appIpRouteDest"), (0, "ACMIB", "appIpRouteMask"), (0, "ACMIB", "appIpRouteMetric1"))
if mibBuilder.loadTexts: appIpRouteEntry.setStatus('current')
appIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: appIpRouteDest.setStatus('current')
appIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: appIpRouteMask.setStatus('current')
appIpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: appIpRouteMetric1.setStatus('current')
appIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appIpRouteNextHop.setStatus('current')
appIpRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("inuse", 1), ("notinuse", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appIpRouteState.setStatus('current')
iispCbrRoutTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 1), )
if mibBuilder.loadTexts: iispCbrRoutTable.setStatus('current')
iispCbrRoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 1, 1), ).setIndexNames((0, "ACMIB", "iispCbrRoutLength"), (0, "ACMIB", "iispCbrRoutNsapAddr"))
if mibBuilder.loadTexts: iispCbrRoutEntry.setStatus('current')
iispCbrRoutLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: iispCbrRoutLength.setStatus('current')
iispCbrRoutNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: iispCbrRoutNsapAddr.setStatus('current')
iispCbrRoutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 1, 1, 3), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispCbrRoutIfIndex.setStatus('current')
iispCbrRoutRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispCbrRoutRowStatus.setStatus('current')
iispVbrRoutTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 2), )
if mibBuilder.loadTexts: iispVbrRoutTable.setStatus('current')
iispVbrRoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 2, 1), ).setIndexNames((0, "ACMIB", "iispVbrRoutLength"), (0, "ACMIB", "iispVbrRoutNsapAddr"))
if mibBuilder.loadTexts: iispVbrRoutEntry.setStatus('current')
iispVbrRoutLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: iispVbrRoutLength.setStatus('current')
iispVbrRoutNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: iispVbrRoutNsapAddr.setStatus('current')
iispVbrRoutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 2, 1, 3), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispVbrRoutIfIndex.setStatus('current')
iispVbrRoutRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispVbrRoutRowStatus.setStatus('current')
iispCbrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3), )
if mibBuilder.loadTexts: iispCbrRouteTable.setStatus('current')
iispCbrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1), ).setIndexNames((0, "ACMIB", "iispCbrRouteLength"), (0, "ACMIB", "iispCbrRouteNsapAddr"), (0, "ACMIB", "iispCbrRouteIfIndex"), (0, "ACMIB", "iispCbrRouteIfVuniId"))
if mibBuilder.loadTexts: iispCbrRouteEntry.setStatus('current')
iispCbrRouteLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: iispCbrRouteLength.setStatus('current')
iispCbrRouteNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: iispCbrRouteNsapAddr.setStatus('current')
iispCbrRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1, 3), IntfIndex())
if mibBuilder.loadTexts: iispCbrRouteIfIndex.setStatus('current')
iispCbrRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispCbrRouteRowStatus.setStatus('current')
iispCbrRouteIfVuniId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: iispCbrRouteIfVuniId.setStatus('current')
iispCbrRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 11, 21, 31, 41, 51, 132, 133, 134, 135, 136, 137))).clone(namedValues=NamedValues(("drmRouteTypeAny", 0), ("drmRouteTypeAtm", 1), ("drmRouteTypeIisp", 2), ("drmRouteTypeIlmiUser", 3), ("drmRouteTypeIsdn", 11), ("drmRouteTypeCe", 21), ("drmRouteTypeSs7", 31), ("drmRouteTypeFr", 41), ("drmRouteTypeCasTrunk", 51), ("drmRouteTypeEndPtAtm", 132), ("drmRouteTypeEndPtCe", 133), ("drmRouteTypeEndPtTe", 134), ("drmRouteTypeEndPtIsdn", 135), ("drmRouteTypeEndPtIp", 136), ("drmRouteTypeEndPtFr", 137)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispCbrRouteType.setStatus('current')
iispCbrRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("drmRouteDestAny", 0), ("drmRouteDestAtm", 1), ("drmRouteDestIsdn", 2), ("drmRouteDestCe", 3), ("drmRouteDestSs7", 4), ("drmRouteDestFr", 5), ("drmRouteDestAalIwf", 6), ("drmRouteDestEndPtAtm", 15), ("drmRouteDestEndPtCe", 16), ("drmRouteDestEndPtTe", 17), ("drmRouteDestEndPtIsdn", 18), ("drmRouteTypeEndPtIp", 19), ("drmRouteTypeEndPtFr", 20), ("drmRouteTypeEndPtCas", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispCbrRouteDest.setStatus('current')
iispVbrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4), )
if mibBuilder.loadTexts: iispVbrRouteTable.setStatus('current')
iispVbrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1), ).setIndexNames((0, "ACMIB", "iispVbrRouteLength"), (0, "ACMIB", "iispVbrRouteNsapAddr"), (0, "ACMIB", "iispVbrRouteIfIndex"), (0, "ACMIB", "iispVbrRouteIfVuniId"))
if mibBuilder.loadTexts: iispVbrRouteEntry.setStatus('current')
iispVbrRouteLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: iispVbrRouteLength.setStatus('current')
iispVbrRouteNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: iispVbrRouteNsapAddr.setStatus('current')
iispVbrRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1, 3), IntfIndex())
if mibBuilder.loadTexts: iispVbrRouteIfIndex.setStatus('current')
iispVbrRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispVbrRouteRowStatus.setStatus('current')
iispVbrRouteIfVuniId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: iispVbrRouteIfVuniId.setStatus('current')
iispVbrRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 11, 21, 31, 41, 51, 61, 132, 133, 134, 135, 136, 137))).clone(namedValues=NamedValues(("drmRouteTypeAny", 0), ("drmRouteTypeAtm", 1), ("drmRouteTypeIisp", 2), ("drmRouteTypeIlmiUser", 3), ("drmRouteTypeIsdn", 11), ("drmRouteTypeCe", 21), ("drmRouteTypeSs7", 31), ("drmRouteTypeFr", 41), ("drmRouteTypeCasTrunk", 51), ("drmRouteTypeIwfTrunk", 61), ("drmRouteTypeEndPtAtm", 132), ("drmRouteTypeEndPtCe", 133), ("drmRouteTypeEndPtTe", 134), ("drmRouteTypeEndPtIsdn", 135), ("drmRouteTypeEndPtIp", 136), ("drmRouteTypeEndPtFr", 137)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispVbrRouteType.setStatus('current')
iispVbrRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 14, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("drmRouteDestAny", 0), ("drmRouteDestAtm", 1), ("drmRouteDestIsdn", 2), ("drmRouteDestCe", 3), ("drmRouteDestSs7", 4), ("drmRouteDestFr", 5), ("drmRouteDestAalIwf", 6), ("drmRouteDestEndPtAny", 14), ("drmRouteDestEndPtAtm", 15), ("drmRouteDestEndPtCe", 16), ("drmRouteDestEndPtTe", 17), ("drmRouteDestEndPtIsdn", 18), ("drmRouteTypeEndPtIp", 19), ("drmRouteTypeEndPtFr", 20), ("drmRouteTypeEndPtCas", 21), ("drmRouteTypeEndPtTrkIwf", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iispVbrRouteDest.setStatus('current')
pvcFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304))).clone(namedValues=NamedValues(("vpiVciUnavailableA2B", 1), ("vpiVciUnavailableB2A", 2), ("bandwidthUnavailableA2B", 3), ("bandwidthUnavailableB2A", 4), ("qosUnavailableA2B", 5), ("qosUnavailableB2A", 6), ("internalResourceUnavailable", 7), ("cantUseSignalingChnlIgrsA2B", 8), ("cantUseSignalingChnlEgrsA2B", 9), ("cantUseSignalingChnlIgrsB2A", 10), ("cantUseSignalingChnlEgrsB2A", 11), ("cantUseManagementChnlIgrsA2B", 12), ("cantUseManagementChnlEgrsA2B", 13), ("cantUseManagementChnlIgrsB2A", 14), ("cantUseManagementChnlEgrsB2A", 15), ("vcLessThanVcMinIgrsA2B", 16), ("vcLessThanVcMinEgrsA2B", 17), ("vcLessThanVcMinIgrsB2A", 18), ("vcLessThanVcMinEgrsB2A", 19), ("vcGreaterThanVcMaxIgrsA2B", 20), ("vcGreaterThanVcMaxEgrsA2B", 21), ("vcGreaterThanVcMaxIgrsB2A", 22), ("vcGreaterThanVcMaxEgrsB2A", 23), ("vpLessThanVpMinIgrsA2B", 24), ("vpLessThanVpMinEgrsA2B", 25), ("vpLessThanVpMinIgrsB2A", 26), ("vpLessThanVpMinEgrsB2A", 27), ("vpGreaterThanVpMaxIgrsA2B", 28), ("vpGreaterThanVpMaxEgrsA2B", 29), ("vpGreaterThanVpMaxIgrsB2A", 30), ("vpGreaterThanVpMaxEgrsB2A", 31), ("vpGreaterThanVpMaxIispIgrsA2B", 32), ("vpGreaterThanVpMaxIispEgrsA2B", 33), ("vpGreaterThanVpMaxIispIgrsB2A", 34), ("vpGreaterThanVpMaxIispEgrsB2A", 35), ("rsvdChnlRangeIgrsA2B", 36), ("rsvdChnlRangeEgrsA2B", 37), ("rsvdChnlRangeIgrsB2A", 38), ("rsvdChnlRangeEgrsB2A", 39), ("internalSrvcTypeUnavailableA2B", 40), ("internalSrvcTypeUnavailableB2A", 41), ("unrecognizableBindTypeEgrsA2B", 42), ("unrecognizableBindTypeEgrsB2A", 43), ("callWithoutConnections", 44), ("callDataStructuresUnavailable", 45), ("cnctnDataStructuresUnavailable", 46), ("nullTrafficParametersRejectedA2B", 47), ("nullTrafficParametersRejectedB2A", 48), ("vpiWithinSvcRangeIgrsA2B", 49), ("vpiWithinSvcRangeEgrsA2B", 50), ("vpiWithinSvcRangeIgrsB2A", 51), ("vpiWithinSvcRangeEgrsB2A", 52), ("vpiInReservedListA2B", 53), ("vpiInReservedListB2A", 54), ("vpiInPvcListA2B", 55), ("vpiInPvcListB2A", 56), ("vpiInReleasedListA2B", 57), ("vpiInReleasedListB2A", 58), ("vciIsNotNullInVpcIgrsA2B", 59), ("vciIsNotNullInVpcEgrsA2B", 60), ("vciIsNotNullInVpcIgrsB2A", 61), ("vciIsNotNullInVpcEgrsB2A", 62), ("vpiInVpcReservedListA2B", 63), ("vpiInVpcReservedListB2A", 64), ("vpiVciInReservedListA2B", 65), ("vpiVciInReservedListB2A", 66), ("vpiInVpcPvcListA2B", 67), ("vpiInVpcPvcListB2A", 68), ("vpiVciInPvcListA2B", 69), ("vpiVciInPvcListB2A", 70), ("vpiInVpcReleasedListA2B", 71), ("vpiInVpcReleasedListB2A", 72), ("vpiVciInReleasedListA2B", 73), ("vpiVciInReleasedListB2A", 74), ("illegalMulticaseIdA2B", 75), ("illegalMulticaseIdB2A", 76), ("unsupportedConnectionA2B", 77), ("unsupportedConnectionB2A", 78), ("connectionsUnavailableInModuleA2B", 79), ("connectionsUnavailableInModuleB2A", 80), ("cbrBandwidthUnavailableIgrsA2B", 81), ("cbrBandwidthUnavailableEgrsA2B", 82), ("cbrBandwidthUnavailableIgrsB2A", 83), ("cbrBandwidthUnavailableEgrsB2A", 84), ("vbrBandwidthUnavailableIgrsA2B", 85), ("vbrBandwidthUnavailableEgrsA2B", 86), ("vbrBandwidthUnavailableIgrsB2A", 87), ("vbrBandwidthUnavailableEgrsB2A", 88), ("vpiVciWithinSvcRangeIgrsA2B", 89), ("vpiVciWithinSvcRangeEgrsA2B", 90), ("vpiVciWithinSvcRangeIgrsB2A", 91), ("vpiVciWithinSvcRangeEgrsB2A", 92), ("multicastDataStructuresUnavailable", 93), ("semaphoreTimeout", 94), ("dlciFoundInReservedList", 95), ("dlciFoundInPvcList", 96), ("dlciFoundInReleasedList", 97), ("invalidDlci", 98), ("slotA-OutOfRange", 99), ("portA-OutOfRange", 100), ("channelA-OutOfRange", 101), ("moduleA-Uninitialized", 102), ("physicalPortA-Uninitialized", 103), ("channelA-NotBound", 104), ("moduleA-UnrecognizablePortType", 105), ("slotB-OutOfRange", 106), ("portB-OutOfRange", 107), ("channelB-OutOfRange", 108), ("moduleB-Uninitialized", 109), ("physicalPortB-Uninitialized", 110), ("channelB-NotBound", 111), ("moduleB-UnrecognizablePortType", 112), ("interfaceA-NotAtm", 113), ("interfaceB-NotAtm", 114), ("unrecognizableServiceTypeA2B", 115), ("unrecognizableServiceTypeB2A", 116), ("unrecognizableSarTypeA2B", 117), ("unrecognizableSarTypeB2A", 118), ("interfaceA-NotCircuitEmulation", 119), ("interfaceB-NotCircuitEmulation", 120), ("unrecognizableSilenceDetectionMode", 121), ("unrecognizableEchoCancellationMode", 122), ("unrecognizableVoiceCompressionMode", 123), ("interfaceA-NotVbr", 124), ("interfaceB-NotVbr", 125), ("interfaceA-NotFrameRelay", 126), ("interfaceB-NotFrameRelay", 127), ("interfaceA-InHdlcPvcList", 128), ("interfaceA-InHdlcReleasedList", 129), ("interfaceA-InHdlcReservedList", 130), ("interfaceA-InTerminalEmulationPvcList", 131), ("interfaceA-InTerminalEmulationReleasedList", 132), ("interfaceA-InTerminalEmulationReservedList", 133), ("interfaceA-InCircuitEmulationPvcList", 134), ("interfaceA-InCircuitEmulationReleasedList", 135), ("interfaceA-InCircuitEmulationReservedList", 136), ("notNullVpcInNoisyLinkA2BIgrs", 137), ("notNullVpcInNoisyLinkA2BEgrs", 138), ("invalidVccInNoisyLinkA2BIgrs", 139), ("invalidVccInNoisyLinkA2BEgrs", 140), ("unsupportedFrwdErrCorrectValueA2B", 141), ("interfaceB-InHdlcPvcList", 142), ("interfaceB-InHdlcReleasedList", 143), ("interfaceB-InHdlcReservedList", 144), ("interfaceB-InTerminalEmulationPvcList", 145), ("interfaceB-InTerminalEmulationReleasedList", 146), ("interfaceB-InTerminalEmulationReservedList", 147), ("interfaceB-InCircuitEmulationPvcList", 148), ("interfaceB-InCircuitEmulationReleasedList", 149), ("interfaceB-InCircuitEmulationReservedList", 150), ("notNullVpcInNoisyLinkB2AIgrs", 151), ("notNullVpcInNoisyLinkB2AEgrs", 152), ("invalidVccInNoisyLinkB2AIgrs", 153), ("invalidVccInNoisyLinkB2AEgrs", 154), ("unsupportedFrwdErrCorrectValueB2A", 155), ("interfaceInUse", 156), ("unsupportedFrwdErrCorrectSettings", 157), ("unsupportedFlowSettings", 158), ("frwdErrCorrectResourceInternalError", 159), ("unsupportedConnection", 160), ("ipDestAddrSubnetAInReservedList", 161), ("ipDestAddrSubnetAInPvcList", 162), ("ipDestAddrSubnetAInReleasedList", 163), ("ipDestAddrSubnetBInReservedList", 164), ("ipDestAddrSubnetBInPvcList", 165), ("ipDestAddrSubnetBInReleasedList", 166), ("notCpuIpInterfaceA", 167), ("ipResourceUnavailable", 168), ("fecAutoInSimplexNotValid", 169), ("fecResourceUnavailable", 170), ("notBridgeInterfaceA", 171), ("notBridgeInterfaceB", 172), ("invalidBridgePortA2B", 173), ("invalidBridgePortB2A", 174), ("interfaceAInBridgePvcList", 175), ("interfaceBInBridgePvcList", 176), ("interfaceAInBridgeReleasedList", 177), ("interfaceBInBridgeReleasedList", 178), ("interfaceAInBridgeReservedList", 179), ("interfaceBInBridgeReservedList", 180), ("invalidDlciA", 181), ("invalidDlciB", 182), ("unrecognizableServiceType", 183), ("moduleAMcstNotSupported", 184), ("moduleBMcstNotSupported", 185), ("moduleAMultiPortMcstNotSupported", 186), ("moduleBMultiPortMcstNotSupported", 187), ("bcBeCirCannotBeNullA2B", 188), ("bcBeCirCannotBeNullB2A", 189), ("bcBeOrCirValTooHiA2B", 190), ("bcBeOrCirValTooHiB2A", 191), ("bcNotValidA2B", 192), ("bcNotValidB2A", 193), ("beNotValidA2B", 194), ("beNotValidB2A", 195), ("bcOrCirNotValidA2B", 196), ("bcOrCirNotValidB2A", 197), ("iWF-NotSupportedModuleA", 198), ("iWF-NotSupportedModuleB", 199), ("invalidMaxFrSizeA2B", 200), ("invalidMaxFrSizeB2A", 201), ("invalidSARType", 202), ("unrecognizableSilenceDetectionModeA2B", 203), ("unrecognizableEchoCancellationModeA2B", 204), ("unrecognizableVoiceCompressionModeA2B", 205), ("unrecognizableCallingToneDetectionA2B", 206), ("unrecognizableCodingTranslationA2B", 207), ("unrecognizableSilenceDetectionModeB2A", 208), ("unrecognizableEchoCancellationModeB2A", 209), ("unrecognizableVoiceCompressionModeB2A", 210), ("unrecognizableCallingToneDetectionB2A", 211), ("unrecognizableCodingTranslationB2A", 212), ("dspUnsupportedForMultiCastConns", 213), ("dspResourceUnavailable", 214), ("destOrSrcCannotBeDSPCard", 215), ("internalDSPResourceError", 216), ("echoCancellationOnlySupportedForDuplex", 217), ("cirEmCirEm-ThruPutMismatch", 218), ("vi-Cannot-Be-0", 219), ("vi-OOR", 220), ("vi-Mod-Limit-Exceeded", 221), ("vi-Resource-Unavail", 222), ("vi-Already-Exists", 223), ("vi-Does-Not-Exist", 224), ("vi-0-Non-Ubr-Conn-Not-Supp", 225), ("vi-OS-Cannot-Be-0", 226), ("vi-OS-OOR", 227), ("vi-CellRate-Too-Lo", 228), ("vi-CellRate-Too-Hi", 229), ("intf-CBR-CellRate-Exceeded", 230), ("intf-VBR-CellRate-Exceeded", 231), ("vi-Conn-CellRate-Exceeded", 232), ("vi-Not-Enabled", 233), ("vi-Should-Be-0", 234), ("vi-OOR-A", 235), ("vi-OOR-B", 236), ("vi-0-Non-Ubr-Conn-Not-SuppA2B", 237), ("vi-0-Non-Ubr-Conn-Not-SuppB2A", 238), ("vi-Should-Be-0-A", 239), ("vi-Should-Be-0-B", 240), ("vi-Cbr-Bw-Unavailable-Egrs", 241), ("vi-Cbr-Bw-Unavailable-Egrs-A", 242), ("vi-Cbr-Bw-Unavailable-Egrs-B", 243), ("vi-Vbr-Bw-Unavailable-Egrs", 244), ("vi-Vbr-Bw-Unavailable-Egrs-A", 245), ("vi-Vbr-Bw-Unavailable-Egrs-B", 246), ("vi-Not-Enabled-A", 247), ("vi-Not-Enabled-B", 248), ("pcrLessThanScr", 249), ("cnfrmTypeNotValidA2B", 250), ("cnfrmTypeNotValidB2A", 251), ("cnfrmType-ServiceType-Mismatch-A2B", 252), ("cnfrmType-ServiceType-Mismatch-B2A", 253), ("vuni-Should-Be-0", 254), ("vuni-Not-Enabled", 255)) + NamedValues(("vuni-OOR", 256), ("vuni-Already-Exists", 257), ("vuni-Does-Not-Exist", 258), ("vuni-Does-Not-Match-vi", 259), ("vuni-Should-Be-0-A", 260), ("vuni-Not-Enabled-A", 261), ("vuni-OOR-A", 262), ("vuni-Already-Exists-A", 263), ("vuni-Does-Not-Exist-A", 264), ("vuni-Does-Not-Match-vi-A", 265), ("vuni-Should-Be-0-B", 266), ("vuni-Not-Enabled-B", 267), ("vuni-OOR-B", 268), ("vuni-Already-Exists-B", 269), ("vuni-Does-Not-Exist-B", 270), ("vuni-Does-Not-Match-vi-B", 271), ("vuni-Vpi-OOR", 272), ("vuni-Vpi-OOR-A", 273), ("vuni-Vpi-OOR-B", 274), ("stdAal2TrunkResourceUnavailable", 275), ("stdAal2Dsp2ResourceUnavailable", 276), ("slotStdAal2ResourceUavailable", 277), ("stdAal2CIDAlreadyInUse", 278), ("stdAal2TrunkBWUavailableEgrs", 279), ("stdAal2TrunkBWUavailableIgrs", 280), ("stdAal2CIDInRsvRange", 281), ("stdAal2TrunkNotSetup", 282), ("aal2CIDOutOfRange", 283), ("dhpvcSwitchOver-PrimToBkup", 284), ("dhpvcSwitchOver-PrimToNone", 285), ("dhpvcSwitchOver-NoneToPrim", 286), ("dhpvcSwitchOver-NoneToBkup", 287), ("dhpvcSwitchOver-BkupToNone", 288), ("dhpvcSwitchOver-BkupToPrim", 289), ("dhpvcState-Prim-Pass-Fail-Bkup-Act-NoFail", 290), ("dhpvcState-Prim-Pass-NoFail-Bkup-Act-NoFail", 291), ("dhpvcState-Prim-Act-NoFail-Bkup-Pass-Fail", 292), ("dhpvcState-Prim-Act-NoFail-Bkup-Pass-NoFail", 293), ("pcrGreaterThanLinkSpeedIngrA2B", 294), ("pcrGreaterThanLinkSpeedIngrB2A", 295), ("pcrGreaterThanLinkSpeedEgrA2B", 296), ("pcrGreaterThanLinkSpeedEgrB2A", 297), ("aal2CuTimerOutOfRange", 298), ("unrecognizableDigitCollectTypeA2B", 299), ("unrecognizableDigitCollectTypeB2A", 300), ("queueTypeSarTypeMismatchA2B", 301), ("queueTypeSarTypeMismatchB2A", 302), ("pcrLessThanOrEqualToMcrA2B", 303), ("pcrLessThanOrEqualToMcrB2A", 304)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcFailureReasonCode.setStatus('current')
interfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 2), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIndex.setStatus('current')
interfaceType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("atmUni3-0", 1), ("atmUni3-1", 2), ("iispUser", 3), ("iispNetwork", 4), ("circuitEmulation", 5), ("frameRelayUni", 6), ("pri-isdn-user", 7), ("pri-isdn-network", 8), ("terminalEmulation", 9), ("dsp", 10), ("hdlcPassThrough", 11), ("bridge", 12), ("routing", 13), ("dbCirEm", 14), ("frameRelayNni", 15), ("dsp2", 16), ("atmIma", 17), ("atmPnni1-0", 18), ("atmUni4-0", 19), ("atmVnnUni3-1", 20), ("casTrunkLine", 21), ("toneAnnce", 22), ("gr303", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceType.setStatus('current')
interfaceFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75))).clone(namedValues=NamedValues(("interfaceInService", 1), ("interfaceNotNew", 2), ("interfaceExists", 3), ("bridgeGroupActive", 4), ("signalingNotEnabled", 5), ("firmwareOutOfDate", 6), ("t1SigEnableInterfaceNotSupported", 7), ("ts16ForData", 8), ("dbcesConfigured", 9), ("signalingEnabled", 10), ("channelizationEnabled", 15), ("unstructuredCEConfigured", 16), ("firmwareOutOfDate-ts16CAS-unsupported", 17), ("firmwareOutOfDate-interfaceType-unsupported", 18), ("firmwareOutOfDate-ts16-unsupported", 19), ("invalidPortMap", 20), ("otherInterfacesExistOnThisPort", 21), ("intfInIMAgroup", 22), ("errorCTC-portTxClkSrc-notLocal", 23), ("different-LoopbackConfig-on-Ports", 24), ("imaGChanNeTxClkMode-unsupported", 25), ("intfChange-Disallowed-on-APS-ProtectionPort", 26), ("intferfaceCurrentlyNotSupported", 27), ("failure-at-call-handler", 28), ("unstructuredCE-payloadloop", 29), ("channelConfigModeNotConforming", 30), ("usageOfReservedTimeSlot", 31), ("virtualIntf-and-AtmSignaling-bothCannotBeEnabled", 32), ("virtualUni-and-AtmSignaling-bothCannotBeEnabled", 33), ("virtualUni-notSupported", 34), ("atmUni-UbrLoadBalSupp-cannotBeEnabled-whenSignalingDisabled", 35), ("virtualInterface-notSupported", 36), ("card-doesNotSupport-UPC", 37), ("atmUni-SvcVpiVci-RangeCheck-Failure", 38), ("atmUni-SigVpiVci-Within-Svc-Range", 39), ("atmUni-Ilmi-Svc-Sig-VpiVci-Clash", 40), ("virtualUNI-VpiNotAvailable", 41), ("virtualUNI-InvalidVUNIId", 42), ("intfNotSupported-with-ds1LineType-d4", 43), ("intfNotSupported-with-ds1LineCoding-ami", 44), ("onlyCEsupported-with-msBitStuffing-enabled", 45), ("vISuppConnTrafficShapingMutuallyExclusive", 46), ("tS16onPortNotCAS", 47), ("channelizationDisabled", 48), ("primaryDS1InterfaceNotConfigured", 49), ("primaryTMCChanNotConfigured", 50), ("primaryTMCIntfAlreadyConfiguredInAnotherIg", 51), ("primaryTMCIntfCantBeChanged", 52), ("primaryEOCChanNotConfigured", 53), ("primaryEOCIntfAlreadyConfiguredInAnotherIg", 54), ("primaryTMC-EOCIntfShouldBeSame", 55), ("primaryEOCIntfCantBeChanged", 56), ("primaryTMC-BackupTMCIntfCantBeSame", 57), ("backupDS1InterfaceNotConfigured", 58), ("backupTMCChanNotConfigured", 59), ("backupTMCIntfAlreadyConfiguredInAnotherIg", 60), ("backupTMCIntfCantBeChanged", 61), ("primaryEOC-BackupEOCIntfCantBeSame", 62), ("backupEOCChanNotConfigured", 63), ("backupEOCIntfAlreadyConfiguredInAnotherIg", 64), ("backupTMC-EOCIntfShouldBeSame", 65), ("backupEOCIntfCantBeChanged", 66), ("newBWBelowCurrentAllocated", 67), ("newBWBelowCurrentAllocated-SvcsBeingDeleted", 68), ("newBWBelowCurrentAllocated-DeletePvcs", 69), ("newBWAboveCurrentAllocated", 70), ("primaryInactive-or-SecondaryActive-In-IntfProtTable", 71), ("onlyCEsupported-with-msLOSDetection-enabled", 72), ("nonMuxNotAllowed-with-FaxRelay", 73), ("invalid-DSPmode-and-AALmode-combination", 74), ("noBandwidth-For-SignalingConns", 75)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceFailureReasonCode.setStatus('current')
powerSupplyReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("overload", 1), ("overloadCleared", 2), ("plus5vFailed", 3), ("plus5vCleared", 4), ("plus120vFailed", 5), ("plus120vCleared", 6), ("minus48vFailed", 7), ("minus48vCleared", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyReasonCode.setStatus('current')
portId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portId.setStatus('current')
lineStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStatus.setStatus('current')
firmwareDownloadReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("cardInService", 1), ("errorInFile", 2), ("otherFailure", 3), ("wrongCardSubType", 4), ("driverUnavailable", 5), ("driverInvalidHeaderChecksum", 6), ("driverInvalidRecordChecksum", 7), ("requestReplyTimeout", 8), ("completeReplyTimeout", 9), ("mapFileCorrupted", 10), ("mapFileUnavailable", 11), ("mapFileInvalidChecksum", 12), ("mapFileNameImproper", 13), ("cfgFileCorrupted", 14), ("cfgFileUnavailable", 15), ("cfgFileInvalidChecksum", 16), ("wrongCardType", 17), ("removeCardBeforeFinish", 18), ("ioUnsupported", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareDownloadReasonCode.setStatus('current')
remoteRebootReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("ioCard1Reboot-OK", 1), ("ioCard2Reboot-OK", 2), ("ioCard3Reboot-OK", 3), ("ioCard4Reboot-OK", 4), ("ioCard5Reboot-OK", 5), ("ioCard6Reboot-OK", 6), ("ioCard7Reboot-OK", 7), ("ioCard8Reboot-OK", 8), ("ioCard9Reboot-OK", 9), ("ioCard10Reboot-OK", 10), ("ioCard11Reboot-OK", 11), ("ioCard12Reboot-OK", 12), ("ioCard13Reboot-OK", 13), ("ioCard14Reboot-OK", 14), ("ioCard15Reboot-OK", 15), ("ioCard16Reboot-OK", 16), ("ioCard1Reboot-NoCardInSlot", 17), ("ioCard2Reboot-NoCardInSlot", 18), ("ioCard3Reboot-NoCardInSlot", 19), ("ioCard4Reboot-NoCardInSlot", 20), ("ioCard5Reboot-NoCardInSlot", 21), ("ioCard6Reboot-NoCardInSlot", 22), ("ioCard7Reboot-NoCardInSlot", 23), ("ioCard8Reboot-NoCardInSlot", 24), ("ioCard9Reboot-NoCardInSlot", 25), ("ioCard10Reboot-NoCardInSlot", 26), ("ioCard11Reboot-NoCardInSlot", 27), ("ioCard12Reboot-NoCardInSlot", 28), ("ioCard13Reboot-NoCardInSlot", 29), ("ioCard14Reboot-NoCardInSlot", 30), ("ioCard15Reboot-NoCardInSlot", 31), ("ioCard16Reboot-NoCardInSlot", 32), ("allIOCardReboot-OK", 33), ("allIOCardReboot-NoIOCards", 34), ("chassisReboot-Proceeding", 35), ("backupCpuReboot-Proceeding", 36), ("backupCpuReboot-NoBackup", 37), ("primaryCpuReboot-Proceeding", 38), ("primaryCpuSwitchover-Proceeding", 39), ("primaryCpuSwitchover-NoBackup", 40), ("chassisReboot-Fail-VersionControlInProgress", 41), ("backupCpuReboot-Fail-VersionControlInProgress", 42), ("primaryCpuReboot-Fail-VersionControlInProgress", 43), ("primaryCpuSwitchover-Fail-VersionControlInProgress", 44), ("primaryCpuSwitchover-Fail-BkCPUDataBaseNotNew", 45), ("primaryCpuSwitchover-Fail-BkCPUBuildNotGood", 46), ("primaryCpuSwitchover-Fail-BkCPU-NotReady", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteRebootReasonCode.setStatus('current')
saveConfigurationReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("equipment-OK", 1), ("equipment-Fail-VersionControlInProgress", 2), ("equipment-Fail", 3), ("connections-OK", 4), ("connections-Fail-VersionControlInProgress", 5), ("connections-Fail", 6), ("routing-OK", 7), ("routing-Fail-VersionControlInProgress", 8), ("routing-Fail", 9), ("all-OK", 10), ("all-Fail-VersionControlInProgress", 11), ("all-Fail", 12), ("fileTransferFailed", 13), ("fileTransferCompleted", 14), ("unSupportedOption", 15), ("fail-backupCpuInitializationInProgress", 16), ("expect2ndCPURebootAfterSave", 17), ("expect2ndCPUCardFailedOrRemoved", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saveConfigurationReasonCode.setStatus('current')
versionConfigurationReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("upgrade-Start", 1), ("upgrade-Completed", 2), ("upgrade-Fail", 3), ("downgrade-Start", 4), ("downgrade-Completed", 5), ("downgrade-Fail", 6), ("upgrade-Fail-NoVersion", 7), ("upgrade-Fail-VersionControlInProgress", 8), ("downgrade-Fail-NoVersion", 9), ("downgrade-Fail-VersionControlInProgress", 10), ("upgrade-InProgress", 11), ("downgrade-InProgress", 12), ("upgrade-sanityCheck-InProgress", 13), ("downgrade-sanityCheck-InProgress", 14), ("upgrade-sanityCheck-Completed", 15), ("downgrade-sanityCheck-Completed", 16), ("upgrade-Fail-SanityCheckFail", 17), ("downgrade-Fail-SanityCheckFail", 18), ("upgrade-Fail-BkCPUFailedToRespond", 19), ("downgrade-Fail-BkCPUFailedToRespond", 20), ("upgrade-Fail-UserAbort", 21), ("downgrade-Fail-UserAbort", 22), ("synch-Start", 23), ("synch-InProgress", 24), ("synch-Completed", 25), ("synch-Fail", 26), ("synch-Fail-NoBkCPU", 27), ("synch-Fail-SameVersion", 28), ("synch-Fail-FileCRCFailed", 29), ("synch-Fail-VersionControlInProgress", 30), ("synch-Fail-UserAbort", 31), ("synch-Fail-SanityCheckFail", 32), ("synch-Fail-BkCPUFailedToRespond", 33), ("synch-sanityCheck-InProgress", 34), ("synch-sanityCheck-Completed", 35), ("failedToAbort", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionConfigurationReasonCode.setStatus('current')
percentComplete = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: percentComplete.setStatus('current')
ipTypeReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("siteEtherIpAddr", 1), ("siteEtherIpMask", 2), ("siteGatewayAddr", 3), ("siteRemoteMgrAddr1", 4), ("siteRemoteMgrAddr2", 5), ("siteRemoteMgrAddr3", 6), ("siteRemoteMgrAddr4", 7), ("siteRemoteMgrAddr5", 8), ("inBandPrimaryIpAddress", 9), ("inBandPrimaryIpMask", 10), ("inBandBackupIpAddress", 11), ("inBandBackupIpMask", 12), ("siteIncorrectGatewaySubnet", 13), ("siteGatewayInbandAddrMatch", 14), ("siteIncorrectInbandSubnet", 15), ("siteIncorrectEthernetSubnet", 16), ("cpuIpSameAsSwitchIpAddr", 17), ("cpuIpAddrInvalid", 18), ("cpuAndIpMaskInvalid", 19), ("switchAndCpuIpSubnetMismatch", 20), ("switchIpAddrInvalid", 21), ("switchAndIpMaskInvalid", 22), ("cpuIpMaskClashWithInbandSubnet", 23), ("switchIpMaskClashWithInbandSubnet", 24), ("siteGatewayAddrInvalid", 25), ("siteGatewayInbandAddrClash", 26), ("unableToApplyGatewayIpAddr", 27), ("unableToSetCpuIpInEPROM", 28), ("unableToApplyCpuIpAddr", 29), ("unableToApplySwitchIpAddr", 30), ("unableToRevertBackToCpuIpAddr", 31), ("gatewayAndCpuIpSubnetMismatch", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTypeReasonCode.setStatus('current')
timingReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalidForwardDelay-MaxAge", 1), ("invalidHelloTime-MaxAge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timingReasonCode.setStatus('current')
alarmCardReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inputContactClosed", 1), ("inputContactOpen", 2), ("outputActivated", 3), ("outputDactivated", 4), ("audibleLocalAlarmEnable", 5), ("audibleLocalAlarmCutoff", 6), ("audibleRemoteAlarmEnable", 7), ("audibleRemoteAlarmCutoff", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCardReasonCode.setStatus('current')
removeConfigFiles = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("from-PrimaryCPU", 1), ("from-BackupCPU", 2), ("chassisReboot", 3), ("failed-VersionControlInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: removeConfigFiles.setStatus('current')
spvcConfigFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("noSpvcConfigured", 1), ("spvcAlreadyConfigured", 2), ("noInterfaceConfigured", 3), ("interfaceNotConfiguredAsRequired", 4), ("notActiveSpvc", 6), ("slotA-OutofRange", 7), ("portA-OutofRange", 8), ("channelA-OutofRange", 9), ("vpiVciWithInSvcRange", 10), ("retryIntervalExceedsTheLimit", 11), ("interfaceNotConfiguredAsCE", 12), ("interfaceNotConfiguredAsVbr", 13), ("interfaceNotConfiguredAsAtm", 14), ("noAddressConfiguredOnTheInterface", 15), ("localAddressNotValid", 16), ("vpiVciUnavailable", 17), ("pvcAlreadySetupOnVpiVci", 18), ("pvcAlreadySetupOnInterface", 19), ("retryIntervalTooSmall", 20), ("interfaceNotConfiguredAsFr", 21), ("dlciUnavailable", 22), ("pvcAlreadySetupOnDlci", 23), ("frTrafficParamsUnsupp", 24), ("dsp2ParamsUnsupp", 25), ("sarNotConfigReq", 26), ("vuniNotMatch", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcConfigFailureCode.setStatus('current')
imaGrpChannelStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("startupFe", 1), ("cfgAbort", 2), ("cfgAbortFe", 3), ("insuffLinks", 4), ("insuffLinksFe", 5), ("blockedNe", 6), ("blockedFe", 7), ("timingSynch", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpChannelStatus.setStatus('current')
atmImaIntfStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lif", 1), ("lods", 2), ("txMisConnect", 3), ("rfi", 4), ("fault", 5), ("txUnusableFe", 6), ("rxUnusableFe", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmImaIntfStatus.setStatus('current')
deviceId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceId.setStatus('current')
oamTestFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalidSPCforOAM", 1), ("invalidIntfForOAM", 2), ("invalidLocationLength", 3), ("oamNotSupportedForThisConnection", 4), ("loopbackTestAlreadyRunning", 5), ("loopbackTestNotRunning", 6), ("oamLocalResourcesUnavailable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamTestFailureReasonCode.setStatus('current')
pnniCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("pnniInvEndSysPortId", 1), ("pnniNodeAdmStatNotUp", 2), ("pnniProtLnkStatDown", 3), ("pnniProtLnkStatUpNotAdv", 4), ("pnniProtLinkStatUpAdv", 5), ("pnniIntfAdmStatUp", 6), ("pnniNodeNotCfg", 7), ("pnniRtAddrAddedByIlmi", 8), ("pnniRtAddrDelByIlmi", 9), ("pnniLvlMismatchInNodeId", 10), ("pnniLvlMismatchInPGId", 11), ("pnniATMAddrInvInNodeId", 12), ("pnniATMAddrInvInPGId", 13), ("pnniIntfAdmStatNotDel", 14), ("pnniNodeAdmStatUp", 15), ("pnniNodeRowStatNotActive", 16), ("pnniNewRtAddrAdded", 17), ("pnniRtAddrMod", 18), ("pnniAdvtNodeIdNotMine", 19), ("pnniFeatureNotSupported", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniCode.setStatus('current')
swtchNodeIndx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swtchNodeIndx.setStatus('current')
oc3APSPairPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 24), Integer32())
if mibBuilder.loadTexts: oc3APSPairPortIndex.setStatus('current')
oc3APSReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10, 12, 14, 15, 17, 24, 26, 28, 30, 33, 40, 42, 44, 46, 47, 48, 49, 56, 58, 60, 62))).clone(namedValues=NamedValues(("localprotectDoNotRevert", 1), ("localprotectManualSw", 8), ("localprotectSD", 10), ("localprotectSF", 12), ("localprotectForced", 14), ("localprotectLockOut", 15), ("localworkingDoNotRevert", 17), ("localworkingManualSw", 24), ("localworkingSD", 26), ("localworkingSF", 28), ("localworkingForced", 30), ("remoteprotectDoNotRevert", 33), ("remoteprotectManualSw", 40), ("remoteprotectSD", 42), ("remoteprotectSF", 44), ("remoteprotectForced", 46), ("remoteprotectLockOut", 47), ("noRequest", 48), ("remoteworkingDoNotRevert", 49), ("remoteworkingManualSw", 56), ("remoteworkingSD", 58), ("remoteworkingSF", 60), ("remoteworkingForced", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSReasonCode.setStatus('current')
oc3APSK1K2Rx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSK1K2Rx.setStatus('current')
oc3APSK1K2Tx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSK1K2Tx.setStatus('current')
oc3APSSelectorState = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("w-active-p-standby", 1), ("w-standby-p-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSSelectorState.setStatus('current')
oc3APSWorkingLineSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024))).clone(namedValues=NamedValues(("noAlarm", 1), ("signalDegradation", 2), ("signalFailure", 4), ("lostCellDelineation", 8), ("switchByteFailure", 16), ("ais-l", 32), ("ais-p", 64), ("lop", 128), ("lof", 256), ("los", 512), ("moduleFailure", 1024)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSWorkingLineSignalStatus.setStatus('current')
oc3APSProtectionLineSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024))).clone(namedValues=NamedValues(("noAlarm", 1), ("signalDegradation", 2), ("signalFailure", 4), ("lostCellDelineation", 8), ("switchByteFailure", 16), ("ais-l", 32), ("ais-p", 64), ("lop", 128), ("lof", 256), ("los", 512), ("moduleFailure", 1024)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc3APSProtectionLineSignalStatus.setStatus('current')
arpStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("noArpEntries", 2), ("tryAgain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatus.setStatus('current')
routingStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("noRoutes", 2), ("tryAgain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingStatus.setStatus('current')
vpnTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("vpnAddOk", 1), ("vpnInternalFailure", 2), ("vpnTooMany", 3), ("vpnBadSlot", 4), ("vpnBadId", 5), ("vpnBadState", 6), ("vpnBadTimerVal", 7), ("vpnAlreadyExists", 8), ("vpnCantLocate", 9), ("vpnDelInProgress", 10), ("vpnLockedIdle", 11), ("vpnGeneralFailure", 12), ("vpnNotAllowed", 13), ("vpnShutting", 14), ("vpnDisabled", 15), ("vpnModifyOk", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTrapStatus.setStatus('current')
ipIntfStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("intOK", 1), ("intIntFailure", 2), ("intTooMany", 3), ("intBadSlot", 4), ("intBadId", 5), ("intBadState", 6), ("intBadTimer", 7), ("intExists", 8), ("intCantFind", 9), ("intDelInProgress", 10), ("intLockedIdle", 11), ("intBadNetMask", 12), ("intShutting", 13), ("intDisabled", 14), ("intNotHostAddr", 15), ("intBadIpAddr", 16), ("intBadRouterId", 17), ("intBadIntfId", 18), ("intCantFindRouter", 19), ("intCantFindIntf", 20), ("intCantOnSameSubnet", 21), ("intCantModIntfAddr", 22), ("intCantModIntfMask", 23), ("intCantModIntfRipVer", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIntfStatus.setStatus('current')
subChanStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("scOK", 1), ("scIntFailure", 2), ("scTooMany", 3), ("scBadSlot", 4), ("scBadId", 5), ("scBadState", 6), ("scBadTimerVal", 7), ("scExists", 8), ("scCantFind", 9), ("scDelInProgress", 10), ("scLockedIdle", 12), ("scSameVc", 13), ("scFailedSetup", 14), ("scShutting", 15), ("scDisabled", 16), ("scSetupErr", 17), ("scRemvErr", 18), ("scBadPortNo", 19), ("scBadImIpAddr", 20), ("scBadRouterId", 21), ("scBadIntfId", 22), ("scBadChanId", 23), ("scCantFindRouter", 24), ("scCantFindIntf", 25), ("scCantFindChan", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subChanStatus.setStatus('current')
routeSrvStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rsCardOK", 1), ("rsModInitFail", 2), ("rsIntfInitFail", 3), ("rsPortInitFail", 4), ("rsRipUpdateIntOK", 5), ("rsRipUpdateIntFail", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeSrvStatus.setStatus('current')
apsFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("protectionCard-notPresent", 1), ("protectionCardType-notAPS", 2), ("protectionCardType-incompatible", 3), ("protectionCard-notInUnconfiguredState", 4), ("protectionCard-notUnprotected", 5), ("resource-access-failure", 6), ("incorrect-APSconfiguration", 7), ("protectionPort-Active", 8), ("workingPort-localLoop-notAllowed", 9), ("protectionPort-localLoop-notAllowed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsFailureReasonCode.setStatus('current')
statRtStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("statRtOk", 1), ("statRtIntFailure", 2), ("statRtMany", 3), ("statRtSlot", 4), ("statRtBadId", 5), ("statRtBadState", 6), ("statRtBadTimer", 7), ("statRtExists", 8), ("statRtCantFind", 9), ("statRtDelInProgress", 10), ("statRtLockedIdle", 11), ("statRtBadNetMask", 12), ("statRtCorrelation", 13), ("statRtShutting", 14), ("statRtDisabled", 15), ("statRtBadMetric", 16), ("statRtBadIPAddr", 17), ("intfRtExists", 18), ("statRtBadSlot", 19), ("statRtBadRouterId", 20), ("statRtBadRouteId", 21), ("statRtBadRouteNetMask", 22), ("statRtBadRouteIpAddr", 23), ("statRtBadGtwyIpAddr", 24), ("statRtBadDestIpAddr", 25), ("statRtBadDestNetMask", 26), ("statRtCantFindRouter", 27), ("statRtCantFindRoute", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRtStatus.setStatus('current')
portFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("insufficientModuleBandwidth", 1), ("localLoopNotAllowedWhenInAPS", 2), ("msBitStuffingEnabledOnlyForCE", 3), ("invalidOption", 4), ("hasInterfaceInService", 5), ("unsupportedBaudRate", 6), ("msLOSDetectionNotEnabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFailureReasonCode.setStatus('current')
dlciNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlciNumber.setStatus('current')
ipAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 41), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddrNumber.setStatus('current')
pingStatusReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("not-Alive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingStatusReasonCode.setStatus('current')
primarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: primarySoftwareVersion.setStatus('current')
backupSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupSoftwareVersion.setStatus('current')
oamActDeactResultCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("eteCCActSuccTowardsFarEnd", 1), ("eteCCActSuccTowardsNearEnd", 2), ("eteCCActSuccTowardsBothEnd", 3), ("eteCCActDeniedTowardsFarEnd", 4), ("eteCCActDeniedTowardsNearEnd", 5), ("eteCCActDeniedTowardsBothEnd", 6), ("eteCCActFailedTowardsFarEnd", 7), ("eteCCActFailedTowardsNearEnd", 8), ("eteCCActFailedTowardsBothEnd", 9), ("eteCCDeactSuccTowardsFarEnd", 10), ("eteCCDeactSuccTowardsNearEnd", 11), ("eteCCDeactSuccTowardsBothEnd", 12), ("eteCCDeactDeniedTowardsFarEnd", 13), ("eteCCDeactDeniedTowardsNearEnd", 14), ("eteCCDeactDeniedTowardsBothEnd", 15), ("eteCCDeactFailedTowardsFarEnd", 16), ("eteCCDeactFailedTowardsNearEnd", 17), ("eteCCDeactFailedTowardsBothEnd", 18), ("segCCActSuccTowardsFarEnd", 19), ("segCCActSuccTowardsNearEnd", 20), ("segCCActSuccTowardsBothEnd", 21), ("segCCActDeniedTowardsFarEnd", 22), ("segCCActDeniedTowardsNearEnd", 23), ("segCCActDeniedTowardsBothEnd", 24), ("segCCActFailedTowardsFarEnd", 25), ("segCCActFailedTowardsNearEnd", 26), ("segCCActFailedTowardsBothEnd", 27), ("segCCDeactSuccTowardsFarEnd", 28), ("segCCDeactSuccTowardsNearEnd", 29), ("segCCDeactSuccTowardsBothEnd", 30), ("oamReqFunctionNotImplemented", 31), ("oamReqFailLocRsrcUnavl", 32), ("oamActDeactPrevReqInProgress", 33), ("oamActDeactInvalidParams", 34), ("oamActDeactInvalidIntf", 35), ("oamNotSupportedForThisConnection", 36), ("oamCCnotSupportedForThisConnection", 37), ("oamPrevActDeactReqFailed", 38), ("oamEteLossOfContinuitySet", 39), ("oamEteLossOfContinuityCleared", 40), ("oamSegLossOfContinuitySet", 41), ("oamSegLossOfContinuityCleared", 42), ("oamActDeactPMOnlySupportOC3", 43), ("oamPMnotSupportedForThisConnection", 44), ("oamPMBRnotSupportedForThisConnection", 45), ("etePMActSuccTowardsFarEnd", 46), ("etePMActSuccTowardsNearEnd", 47), ("etePMActSuccTowardsBothEnd", 48), ("etePMActDeniedTowardsFarEnd", 49), ("etePMActDeniedTowardsNearEnd", 50), ("etePMActDeniedTowardsBothEnd", 51), ("etePMActFailedTowardsFarEnd", 52), ("etePMActFailedTowardsNearEnd", 53), ("etePMActFailedTowardsBothEnd", 54), ("etePMDeactSuccTowardsFarEnd", 55), ("etePMDeactSuccTowardsNearEnd", 56), ("etePMDeactSuccTowardsBothEnd", 57), ("etePMBRActSuccTowardsFarEnd", 58), ("etePMBRActSuccTowardsNearEnd", 59), ("etePMBRActSuccTowardsBothEnd", 60), ("etePMBRActDeniedTowardsFarEnd", 61), ("etePMBRActDeniedTowardsNearEnd", 62), ("etePMBRActDeniedTowardsBothEnd", 63), ("etePMBRActFailedTowardsFarEnd", 64), ("etePMBRActFailedTowardsNearEnd", 65), ("etePMBRActFailedTowardsBothEnd", 66), ("etePMBRDeactSuccTowardsFarEnd", 67), ("etePMBRDeactSuccTowardsNearEnd", 68), ("etePMBRDeactSuccTowardsBothEnd", 69), ("segPMActSuccTowardsFarEnd", 70), ("segPMActSuccTowardsNearEnd", 71), ("segPMActSuccTowardsBothEnd", 72), ("segPMActDeniedTowardsFarEnd", 73), ("segPMActDeniedTowardsNearEnd", 74), ("segPMActDeniedTowardsBothEnd", 75), ("segPMActFailedTowardsFarEnd", 76), ("segPMActFailedTowardsNearEnd", 77), ("segPMActFailedTowardsBothEnd", 78), ("segPMDeactSuccTowardsFarEnd", 79), ("segPMDeactSuccTowardsNearEnd", 80), ("segPMDeactSuccTowardsBothEnd", 81), ("segPMBRActSuccTowardsFarEnd", 82), ("segPMBRActSuccTowardsNearEnd", 83), ("segPMBRActSuccTowardsBothEnd", 84), ("segPMBRActDeniedTowardsFarEnd", 85), ("segPMBRActDeniedTowardsNearEnd", 86), ("segPMBRActDeniedTowardsBothEnd", 87), ("segPMBRActFailedTowardsFarEnd", 88), ("segPMBRActFailedTowardsNearEnd", 89), ("segPMBRActFailedTowardsBothEnd", 90), ("segPMBRDeactSuccTowardsFarEnd", 91), ("segPMBRDeactSuccTowardsNearEnd", 92), ("segPMBRDeactSuccTowardsBothEnd", 93), ("eteSendPMCell", 94), ("eteReceiveBRErrMessage", 95), ("receiveBRErrMessage", 96), ("receiveFPMErrMessage", 97), ("sendPMCell", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactResultCode.setStatus('current')
tasCmprsAnnceReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cmprs-success", 1), ("cmprs-Fail-equipment-Fail", 2), ("cmprs-Fail-connections-Fail", 3), ("cmprs-Fail-resource-busy", 4), ("cmprs-Fail-resource-unavail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasCmprsAnnceReasonCode.setStatus('current')
tasTstLineReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tst-success", 1), ("tst-Fail-equipment-Fail", 2), ("tst-Fail-invalid-params", 3), ("tst-Fail-resource-unavail", 4), ("tst-Fail-resource-busy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasTstLineReasonCode.setStatus('current')
gr303PPSReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("forced", 1), ("normal", 2), ("userCommandFailed-inhibited", 3), ("userCommandFailed-PathOos", 4), ("userCommandFailed-badPathId", 5), ("userCommandFailed-maxRetry", 6), ("userCommandFailed-inprogress", 7), ("userCommandFailed-unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303PPSReasonCode.setStatus('current')
gr303PPSSource = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("byIdt", 2), ("byUser", 3), ("byLocalAgent", 4), ("suspendedByIdt", 5), ("suspendedByLocalAgent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gr303PPSSource.setStatus('current')
tasMemReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mem-init-success", 1), ("mem-init-Fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasMemReasonCode.setStatus('current')
tasTrapTstId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasTrapTstId.setStatus('current')
tasTrapAnnceId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasTrapAnnceId.setStatus('current')
atmVpi = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpi.setStatus('current')
atmVci = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVci.setStatus('current')
iptResultCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("interfaceProtectioniptAlreadyExistInterface", 1), ("interfaceProtectioniptInvalidInterface", 2), ("interfaceProtectioniptInvalidParams", 3), ("interfaceProtectioniptTryToDeleteEmptyTable", 4), ("interfaceProtectioniptInvalidConfiguation", 5), ("interfaceProtectioniptSuccessfulSwichOver", 6), ("interfaceProtectioniptSuccessfulSwichBack", 7), ("interfaceProtectioniptFailedSwichOver", 8), ("interfaceProtectioniptFailedSwichBack", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iptResultCode.setStatus('current')
pgtResultCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("interfaceProtectionpgtAlreadyExistInterface", 1), ("interfaceProtectionpgtInvalidInterface", 2), ("interfaceProtectionpgtInvalidParams", 3), ("interfaceProtectionpgtryToDeleteEmptyTable", 4), ("interfaceProtectionpgtSuccessfulSwichOver", 5), ("interfaceProtectionpgtSuccessfulSwichBack", 6), ("interfaceProtectionpgtFailedSwichOver", 7), ("interfaceProtectionpgtFailedSwichBack", 8), ("interfaceProtectionpgtInvalidConfiguation", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgtResultCode.setStatus('current')
tasmControlBlockAllocFailReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("res-alloc-success", 1), ("res-alloc-Fail-announce-control-blocks-mem-unavail", 2), ("res-alloc-Fail-digit-control-blocks-mem-unavail", 3), ("res-alloc-Fail-line-test-control-blocks-mem-unavail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasmControlBlockAllocFailReasonCode.setStatus('current')
tasmCacheMemAllocFailReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("res-alloc-success", 1), ("res-alloc-Fail-announce-cache-mem-unavail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tasmCacheMemAllocFailReasonCode.setStatus('current')
atmTrunkingConfigFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("localIWFAlreadyConfigured", 1), ("localIWFAtmAddressError", 2), ("localIWFIdOutOfRange", 3), ("maxNumberRmtIWFOutOfRange", 4), ("rmtIWFAlreadyConfigured", 5), ("rmtIWFIdOutOfRange", 6), ("rmtIWFAtmAddressError", 7), ("vccIdError", 8), ("vccPvcParameterNotAcceptable", 9), ("vccTrafficParameterNotValid", 10), ("vccViVuniNotValid", 11), ("vccTrunkParameterNotValid", 12), ("vccTrunkFeatureParameterNotValid", 13), ("localIwfNotConfigured", 14), ("localIwfIdNotMatch", 15), ("localIwfStatus", 16), ("rmtIwfNotConfigured", 17), ("rmtIwfModeNotCompatible", 18), ("rmtIwfStatus", 19), ("vccAlreadyConfigured", 20), ("vccPvcCacReject", 21), ("requiredFieldMissing", 22), ("outOfResource", 23), ("rowStatusError", 24), ("generalErrorUnspecified", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingConfigFailureCode.setStatus('current')
sapphireIntfAddressFailReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("address-assign-ok", 1), ("fail-Ilegal-IP-address", 2), ("fail-not-match-InBandManagement-Switch-Cpu-IP-Address", 3), ("fail-Switch-or-Cpu-IP-Address-unconfigured", 4), ("fail-InBandManagement-IP-Address-unconfigured", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapphireIntfAddressFailReasonCode.setStatus('current')
chassisOverTempAlarmReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 15, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisOverTempAlarmReasonCode.setStatus('current')
saveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("equipment", 1), ("connections", 2), ("routing", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saveConfiguration.setStatus('current')
upgradeSoftware = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("upgrade", 1), ("fallBack", 2), ("forceUpgrade", 3), ("forceFallBack", 4), ("synchronize", 5), ("abort", 6), ("forceSynchronize", 7), ("forceAbort", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeSoftware.setStatus('current')
purgePvcConnections = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 3), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: purgePvcConnections.setStatus('current')
purgeRoutingTable = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iispCbr", 1), ("iispVbr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: purgeRoutingTable.setStatus('current')
resetPortStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetPortStatistics.setStatus('current')
resetInterfaceStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 6), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetInterfaceStatistics.setStatus('current')
resetAllStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAllStatistics.setStatus('current')
upgradeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeIpAddress.setStatus('current')
upgradeAccountName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeAccountName.setStatus('current')
upgradeAccountPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeAccountPassword.setStatus('current')
upgradeCdromFile = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(79, 79)).setFixedLength(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeCdromFile.setStatus('current')
upgradeLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeLicenseKey.setStatus('current')
upgradeSwCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noActivity", 1), ("working", 2), ("doneSuccessfully", 3), ("doneWithError", 4), ("aborted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeSwCopyStatus.setStatus('current')
upgradeSwErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("none", 1), ("userAbort", 2), ("invalidIpAddress", 3), ("invalidAccountName", 4), ("invalidAccountPassword", 5), ("invalidCdromFile", 6), ("libraryCRCFail", 7), ("unableToOpenLibraryFile", 8), ("unableToLoadLibraryModule", 9), ("unableToFindTaskSymbolName", 10), ("failureInSpawningTask", 11), ("failureInCreatingMsgQ", 12), ("failureInCopyingDataFiles", 13), ("failureToRemoveNextTree", 14), ("unableToMakeNextTree", 15), ("unableToOpenFile", 16), ("unableToMakeFtpConnection", 17), ("unableToWriteFile", 18), ("unableToCompleteFtp", 19), ("fileCRCFail", 20), ("unableToWritePackageList", 21), ("taskSuspendOrDead", 22), ("unableToUpdateBackup", 23), ("cpuAbort", 24), ("failureToTakeSemaphore", 25), ("failureToRemoveFallBackTree", 26), ("unableToMakeFallBackTree", 27))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeSwErrorStatus.setStatus('current')
systemSwCopy = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("abort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwCopy.setStatus('current')
fwReleaseTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16), )
if mibBuilder.loadTexts: fwReleaseTable.setStatus('current')
fwReleaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1), ).setIndexNames((0, "ACMIB", "fwReleaseSlot"))
if mibBuilder.loadTexts: fwReleaseEntry.setStatus('current')
fwReleaseSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: fwReleaseSlot.setStatus('current')
fwReleaseRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwReleaseRunning.setStatus('current')
fwReleaseEpromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwReleaseEpromVersion.setStatus('current')
fwReleaseCurrentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwReleaseCurrentVersion.setStatus('current')
fwReleaseNextVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwReleaseNextVersion.setStatus('current')
fwReleaseUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwReleaseUpdate.setStatus('current')
fwReleaseUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eprom", 1), ("current", 2), ("next", 3))).clone('eprom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwReleaseUpgrade.setStatus('current')
resetBridgeDomainStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetBridgeDomainStatistics.setStatus('current')
remoteRebootCommand = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 100, 101, 102, 103, 200))).clone(namedValues=NamedValues(("ioCard1Reboot", 1), ("ioCard2Reboot", 2), ("ioCard3Reboot", 3), ("ioCard4Reboot", 4), ("ioCard5Reboot", 5), ("ioCard6Reboot", 6), ("ioCard7Reboot", 7), ("ioCard8Reboot", 8), ("ioCard9Reboot", 9), ("ioCard10Reboot", 10), ("ioCard11Reboot", 11), ("ioCard12Reboot", 12), ("ioCard13Reboot", 13), ("ioCard14Reboot", 14), ("ioCard15Reboot", 15), ("ioCard16Reboot", 16), ("allIOCardReboot", 100), ("chassisReboot", 101), ("backupCpuReboot", 102), ("primaryCpuReboot", 103), ("primaryCpuSwitchover", 200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteRebootCommand.setStatus('current')
resetFrLmiStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetFrLmiStatistics.setStatus('current')
removeConfigurationFiles = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("all", 1))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: removeConfigurationFiles.setStatus('current')
systemFilesDirtyBitStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFilesDirtyBitStatus.setStatus('current')
resetAtmIlmiStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAtmIlmiStatistics.setStatus('current')
resetImaGrpChannelStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 23), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetImaGrpChannelStatistics.setStatus('current')
oc3APSResetStats = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc3APSResetStats.setStatus('current')
resetsonetSectionStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetsonetSectionStatistics.setStatus('current')
resetsonetLineStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetsonetLineStatistics.setStatus('current')
resetsonetVTPathStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetsonetVTPathStatistics.setStatus('current')
viprVpnReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprVpnReset.setStatus('current')
svcRetBackupStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-sync", 1), ("sync-in-progress", 2), ("fully-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRetBackupStatus.setStatus('current')
resetsonetPathStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetsonetPathStatistics.setStatus('current')
ambientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ambientTemperature.setStatus('current')
remoteDbServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32))
remoteDbServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteDbServerIpAddress.setStatus('current')
remoteDbServerLogin = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteDbServerLogin.setStatus('current')
remoteDbServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteDbServerPassword.setStatus('current')
remoteDbServerDirectory = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(79, 79)).setFixedLength(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteDbServerDirectory.setStatus('current')
remoteDbCommand = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("remoteSave", 2), ("remoteLoad", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteDbCommand.setStatus('current')
remoteDbOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noActivity", 1), ("working", 2), ("doneSuccessfully", 3), ("doneWithError", 4), ("aborted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteDbOperationStatus.setStatus('current')
remoteDbOperationErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 16, 32, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("unableToMakeFtpConnection", 1), ("invalidDirectory", 2), ("unableToOpenDatabaseFile", 3), ("unableToCompleteFtp", 4), ("databaseSanityFail", 5), ("unableToUpdateBackup", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteDbOperationErrorStatus.setStatus('current')
stratumSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lineTiming", 1), ("compositeClock", 2), ("freerun", 3), ("t1BITS", 4), ("e1ETSI", 5))).clone('lineTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stratumSyncSource.setStatus('current')
stratumPrimaryLineId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stratumPrimaryLineId.setStatus('current')
stratumSecondaryLineId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stratumSecondaryLineId.setStatus('current')
stratumLevel = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stratum3", 1), ("stratum4", 2))).clone('stratum3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stratumLevel.setStatus('current')
stratumLineCommand = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gotoPrimaryLine", 1), ("gotoSecondaryLine", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stratumLineCommand.setStatus('current')
stratumLineTimingStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryLine", 1), ("secondaryLine", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stratumLineTimingStatus.setStatus('current')
stratumMode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("synchronized3", 1), ("synchronized4", 2), ("holdover", 3), ("freerun", 4), ("cardRemoved", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stratumMode.setStatus('current')
stratumBackupMode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("synchronized3", 1), ("synchronized4", 2), ("holdover", 3), ("freerun", 4), ("cardRemoved", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stratumBackupMode.setStatus('current')
stratumRefFailAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("holdover", 1), ("freerun", 2))).clone('holdover')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stratumRefFailAction.setStatus('current')
stratumPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unconfigured", 1), ("noalarm", 2), ("portAIS", 3), ("portLOF", 4), ("portLOS", 5), ("portFOS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stratumPortStatus.setStatus('current')
stratumBkupPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unconfigured", 1), ("noalarm", 2), ("portAIS", 3), ("portLOF", 4), ("portLOS", 5), ("portFOS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stratumBkupPortStatus.setStatus('current')
activeStratum = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 17, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stratumA", 1), ("stratumB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeStratum.setStatus('current')
cellTestIfB = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestIfB.setStatus('current')
cellTestVpiB = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestVpiB.setStatus('current')
cellTestVcidB = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestVcidB.setStatus('current')
cellTestServiceType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ubr", 1), ("vbr-nrt2", 2), ("vbr-nrt1", 3), ("vbr-rt2", 4), ("vbr-rt1", 5), ("vbr-express", 6), ("cbr4", 7), ("cbr3", 8), ("cbr2", 9), ("cbr1", 10))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestServiceType.setStatus('current')
cellTestConnType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("simplexTx", 1), ("simplexRx", 2), ("duplex", 3))).clone('simplexTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestConnType.setStatus('current')
cellTestProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("atm", 1), ("frame-relay", 2), ("hdlc", 4))).clone('atm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellTestProtocol.setStatus('current')
cellTestPayLoadTx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(88, 88)).setFixedLength(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestPayLoadTx.setStatus('current')
cellTestPayLoadRx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(88, 88)).setFixedLength(88)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellTestPayLoadRx.setStatus('current')
cellTestAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("send", 1), ("send-10", 2), ("setupconn", 3), ("stop", 4), ("clearTxStats", 5), ("clearRxStats", 6))).clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestAction.setStatus('current')
cellTestRxPduCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellTestRxPduCount.setStatus('current')
cellTestTxPduCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellTestTxPduCount.setStatus('current')
cellTestMismatchPduCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellTestMismatchPduCount.setStatus('current')
cellTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("not-running", 2))).clone('not-running')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cellTestStatus.setStatus('current')
cellTestVUNIB = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 18, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cellTestVUNIB.setStatus('current')
sysInfoTxOneCellTotal = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoTxOneCellTotal.setStatus('current')
sysInfoTxOneCellUsed = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoTxOneCellUsed.setStatus('current')
sysInfoTxOneCellHigh = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoTxOneCellHigh.setStatus('current')
sysInfoRxOneCellTotal = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRxOneCellTotal.setStatus('current')
sysInfoRxOneCellUsed = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRxOneCellUsed.setStatus('current')
sysInfoRxOneCellHigh = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRxOneCellHigh.setStatus('current')
sysInfoRxMultiCellTotal = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRxMultiCellTotal.setStatus('current')
sysInfoRxMultiCellUsed = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRxMultiCellUsed.setStatus('current')
sysInfoRxMultiCellHigh = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRxMultiCellHigh.setStatus('current')
sysInfoMsgPoolTotal = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoMsgPoolTotal.setStatus('current')
sysInfoMsgPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoMsgPoolUsed.setStatus('current')
sysInfoMsgPoolHigh = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoMsgPoolHigh.setStatus('current')
sysInfoDiscFreeKBytes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoDiscFreeKBytes.setStatus('current')
sysInfoCpuUtilization1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoCpuUtilization1.setStatus('current')
sysInfoCpuUtilization2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoCpuUtilization2.setStatus('current')
sysInfoSysUptime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoSysUptime.setStatus('current')
sysInfoBadCellRx = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoBadCellRx.setStatus('current')
sysInfoMisaligned = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoMisaligned.setStatus('current')
sysInfoClockAErr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoClockAErr.setStatus('current')
sysInfoClockBErr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoClockBErr.setStatus('current')
sysInfoBIPAErr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoBIPAErr.setStatus('current')
sysInfoBIPBErr = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoBIPBErr.setStatus('current')
sysInfoDiscTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoDiscTotalKBytes.setStatus('current')
sysInfoRAMFreeKBytes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRAMFreeKBytes.setStatus('current')
sysInfoRAMTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoRAMTotalKBytes.setStatus('current')
msgPoolViewTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 26), )
if mibBuilder.loadTexts: msgPoolViewTable.setStatus('current')
primaryCpuHwType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notKnown", 1), ("version1", 2), ("version2", 3))).clone('notKnown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryCpuHwType.setStatus('current')
secondaryCpuHwType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notKnown", 1), ("version1", 2), ("version2", 3))).clone('notKnown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryCpuHwType.setStatus('current')
msgPoolViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 26, 1), ).setIndexNames((0, "ACMIB", "msgPoolViewIndex"))
if mibBuilder.loadTexts: msgPoolViewEntry.setStatus('current')
msgPoolViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: msgPoolViewIndex.setStatus('current')
msgPoolViewTskId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgPoolViewTskId.setStatus('current')
msgPoolViewTskName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgPoolViewTskName.setStatus('current')
msgPoolViewMsgCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgPoolViewMsgCmd.setStatus('current')
sysInfoDiskCheck = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInfoDiskCheck.setStatus('current')
switchAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 19, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAvailable", 1), ("none", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmStatus.setStatus('current')
arp1Table = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 1), )
if mibBuilder.loadTexts: arp1Table.setStatus('current')
arp1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 1, 1), ).setIndexNames((0, "ACMIB", "arp1CardSlot"), (0, "ACMIB", "arp1BridgeGroupNum"), (0, "ACMIB", "arp1IpAddress"))
if mibBuilder.loadTexts: arp1Entry.setStatus('current')
arp1CardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: arp1CardSlot.setStatus('current')
arp1BridgeGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)))
if mibBuilder.loadTexts: arp1BridgeGroupNum.setStatus('current')
arp1IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: arp1IpAddress.setStatus('current')
arp1PhysicalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: arp1PhysicalAddr.setStatus('current')
arp1EntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arp1EntryAge.setStatus('current')
arp2Table = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 2), )
if mibBuilder.loadTexts: arp2Table.setStatus('current')
arp2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 2, 1), ).setIndexNames((0, "ACMIB", "arp2CardSlot"), (0, "ACMIB", "arp2BridgeGroupNum"), (0, "ACMIB", "arp2PhysicalAddr"))
if mibBuilder.loadTexts: arp2Entry.setStatus('current')
arp2CardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: arp2CardSlot.setStatus('current')
arp2BridgeGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)))
if mibBuilder.loadTexts: arp2BridgeGroupNum.setStatus('current')
arp2PhysicalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: arp2PhysicalAddr.setStatus('current')
arp2IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arp2IpAddress.setStatus('current')
arp2EntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arp2EntryAge.setStatus('current')
bridgeCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3), )
if mibBuilder.loadTexts: bridgeCacheTable.setStatus('current')
bridgeCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3, 1), ).setIndexNames((0, "ACMIB", "bridgeCacheCardSlot"), (0, "ACMIB", "bridgeCacheBridgeGroupNum"), (0, "ACMIB", "bridgeCachePhysicalAddr"))
if mibBuilder.loadTexts: bridgeCacheEntry.setStatus('current')
bridgeCacheCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: bridgeCacheCardSlot.setStatus('current')
bridgeCacheBridgeGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)))
if mibBuilder.loadTexts: bridgeCacheBridgeGroupNum.setStatus('current')
bridgeCachePhysicalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: bridgeCachePhysicalAddr.setStatus('current')
bridgeCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learned", 1), ("permanent", 2), ("policy", 3))).clone('learned')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCacheType.setStatus('current')
bridgeCacheSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCacheSourcePort.setStatus('current')
bridgeCacheEntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 20, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeCacheEntryAge.setStatus('current')
alarmStatusInputBitmap = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 21, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatusInputBitmap.setStatus('current')
alarmStatusOutputBitmap = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 21, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmStatusOutputBitmap.setStatus('current')
alarmSeverityLevelBitmap = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 21, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSeverityLevelBitmap.setStatus('current')
alarmAcoStatusBitmap = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 21, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAcoStatusBitmap.setStatus('current')
oamTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1))
oamTestIfB = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 1), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamTestIfB.setStatus('current')
oamTestVpiB = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamTestVpiB.setStatus('current')
oamTestVciB = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamTestVciB.setStatus('current')
oamTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-running", 1), ("running", 2), ("successful", 3), ("failure", 4), ("timedout", 5), ("waiting-for-response", 6))).clone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamTestStatus.setStatus('current')
oamTestAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sendLoopback", 1), ("sendContinuously", 2), ("stopTest", 3), ("resetTxCount", 4), ("resetRxCount", 5), ("resetMismatchCount", 6))).clone('sendLoopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamTestAction.setStatus('current')
oamTestTxCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamTestTxCount.setStatus('current')
oamTestRxCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamTestRxCount.setStatus('current')
oamTestMismatchCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamTestMismatchCount.setStatus('current')
oamTestLocationID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamTestLocationID.setStatus('current')
oamTestLoopbackType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("end-to-end", 1), ("segment-endpoint", 2), ("next-connection-point", 3), ("specific-location", 4))).clone('end-to-end')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamTestLoopbackType.setStatus('current')
oamActDeactTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2), )
if mibBuilder.loadTexts: oamActDeactTable.setStatus('current')
oamActDeactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1), ).setIndexNames((0, "ACMIB", "oamActDeactIfB"), (0, "ACMIB", "oamActDeactVpiB"), (0, "ACMIB", "oamActDeactVciB"))
if mibBuilder.loadTexts: oamActDeactEntry.setStatus('current')
oamActDeactIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 1), IntfIndex())
if mibBuilder.loadTexts: oamActDeactIfB.setStatus('current')
oamActDeactVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: oamActDeactVpiB.setStatus('current')
oamActDeactVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: oamActDeactVciB.setStatus('current')
oamActDeactFuncType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fpm-and-br", 1), ("fpm-only", 2), ("continuity-check", 3), ("pmbr-and-cc", 4), ("pm-and-cc", 5))).clone('continuity-check')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamActDeactFuncType.setStatus('current')
oamActDeactDirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("towards-far-end", 1), ("towards-near-end", 2), ("both-way", 3))).clone('towards-near-end')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamActDeactDirFlow.setStatus('current')
oamActDeactFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("end-to-end", 1), ("segment", 2))).clone('end-to-end')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamActDeactFlowType.setStatus('current')
oamActDeactBlkSizeAB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size128", 1), ("size256", 2), ("size512", 3), ("size1024", 4), ("size4096", 5), ("size8192", 6), ("size16384", 7), ("size32768", 8), ("size2048", 9))).clone('size1024')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamActDeactBlkSizeAB.setStatus('current')
oamActDeactBlkSizeBA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size128", 1), ("size256", 2), ("size512", 3), ("size1024", 4), ("size4096", 5), ("size8192", 6), ("size16384", 7), ("size32768", 8), ("size2048", 9))).clone('size1024')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamActDeactBlkSizeBA.setStatus('current')
oamActDeactStsSrcPointEteCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSrcPointEteCC.setStatus('current')
oamActDeactStsSnkPointEteCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSnkPointEteCC.setStatus('current')
oamActDeactRsltPrevReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("denied", 1), ("timedout", 2), ("locResrcUnavl", 3), ("oamUnsupported", 4), ("reqCancelled", 5), ("funcNotImplemented", 6), ("none", 7), ("successful", 8))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactRsltPrevReq.setStatus('current')
oamActDeactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamActDeactRowStatus.setStatus('current')
oamActDeactStsSrcPointEtePM = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSrcPointEtePM.setStatus('current')
oamActDeactStsSnkPointEtePM = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSnkPointEtePM.setStatus('current')
oamActDeactStsSrcPointEtePMBR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSrcPointEtePMBR.setStatus('current')
oamActDeactStsSnkPointEtePMBR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSnkPointEtePMBR.setStatus('current')
oamActDeactBRBlockError = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactBRBlockError.setStatus('current')
oamActDeactBRLostInsertedCell = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactBRLostInsertedCell.setStatus('current')
oamActDeactBRMisInsertedCell = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactBRMisInsertedCell.setStatus('current')
oamActDeactStsSrcPointSegPM = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSrcPointSegPM.setStatus('current')
oamActDeactStsSnkPointSegPM = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSnkPointSegPM.setStatus('current')
oamActDeactStsSrcPointSegPMBR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSrcPointSegPMBR.setStatus('current')
oamActDeactStsSnkPointSegPMBR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSnkPointSegPMBR.setStatus('current')
oamActDeactStsSrcPointSegCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSrcPointSegCC.setStatus('current')
oamActDeactStsSnkPointSegCC = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2), ("waitActConfirm", 3), ("waitDeactConfirm", 4))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamActDeactStsSnkPointSegCC.setStatus('current')
oamLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3), )
if mibBuilder.loadTexts: oamLoopbackTable.setStatus('current')
oamLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1), ).setIndexNames((0, "ACMIB", "oamLpbkIfB"), (0, "ACMIB", "oamLpbkVpiB"), (0, "ACMIB", "oamLpbkVciB"))
if mibBuilder.loadTexts: oamLoopbackEntry.setStatus('current')
oamLpbkIfB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 1), IntfIndex())
if mibBuilder.loadTexts: oamLpbkIfB.setStatus('current')
oamLpbkVpiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: oamLpbkVpiB.setStatus('current')
oamLpbkVciB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: oamLpbkVciB.setStatus('current')
oamLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("end-to-end", 1), ("segment-endpoint", 2), ("next-connection-point", 3), ("specific-location", 4))).clone('end-to-end')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLoopbackType.setStatus('current')
oamLpbkLocationID = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLpbkLocationID.setStatus('current')
oamLpbkAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sendLoopbackOnce", 1), ("sendLoopbackContinuously", 2), ("stopTest", 3), ("resetStats", 4))).clone('sendLoopbackOnce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamLpbkAction.setStatus('current')
oamLpbkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("waiting-for-response", 2), ("successful", 3), ("timedout", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLpbkStatus.setStatus('current')
oamLpbkTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLpbkTxCount.setStatus('current')
oamLpbkRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLpbkRxCount.setStatus('current')
oamLpbkMismatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLpbkMismatchCount.setStatus('current')
oamLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 22, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLpbkTimeout.setStatus('current')
viprRouterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1), )
if mibBuilder.loadTexts: viprRouterConfigTable.setStatus('current')
viprRouterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"))
if mibBuilder.loadTexts: viprRouterConfigEntry.setStatus('current')
viprSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: viprSlot.setStatus('current')
viprRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: viprRouterId.setStatus('current')
viprRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouterName.setStatus('current')
viprRouterNoOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRouterNoOfInterfaces.setStatus('current')
viprRouterNoOfRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRouterNoOfRoutes.setStatus('current')
viprRouterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouterAdminStatus.setStatus('current')
viprRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("unlocked-Init", 3), ("unlocked-Disable", 4), ("locked-Shutting", 5))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRouterOperStatus.setStatus('current')
viprRouterInitTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 8), Integer32().clone(192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouterInitTmr.setStatus('current')
viprRouterDisabWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 9), Integer32().clone(36000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouterDisabWarnTmr.setStatus('current')
viprRouterShutDwnWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 10), Integer32().clone(36000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouterShutDwnWarnTmr.setStatus('current')
viprRouterDisableWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouterDisableWarning.setStatus('current')
viprRouterDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("manual", 2), ("automatic", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRouterDisableReason.setStatus('current')
viprRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 1, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouterRowStatus.setStatus('current')
viprIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2), )
if mibBuilder.loadTexts: viprIntfConfigTable.setStatus('current')
viprIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "viprIntfId"))
if mibBuilder.loadTexts: viprIntfConfigEntry.setStatus('current')
viprIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: viprIntfId.setStatus('current')
viprIntfIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfIPAddress.setStatus('current')
viprIntfIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfIPNetMask.setStatus('current')
viprIntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfAdminStatus.setStatus('current')
viprIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("unlocked-Init", 3), ("unlocked-Disable", 4), ("locked-Shutting", 5))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprIntfOperStatus.setStatus('current')
viprIntfInitTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 6), Integer32().clone(192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfInitTmr.setStatus('current')
viprIntfDisabWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 7), Integer32().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfDisabWarnTmr.setStatus('current')
viprIntfShutDwnWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 8), Integer32().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfShutDwnWarnTmr.setStatus('current')
viprIntfDisableWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfDisableWarning.setStatus('current')
viprIntfDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("intfDisabled", 2), ("routDisabled", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprIntfDisableReason.setStatus('current')
viprIntfRipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version-1", 1), ("version-2", 2))).clone('version-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfRipVersion.setStatus('current')
viprIntfRipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("passive", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfRipMode.setStatus('current')
viprIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfRowStatus.setStatus('current')
viprIntfRipLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2))).clone('multicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfRipLineType.setStatus('current')
viprIntfAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprIntfAuthPasswd.setStatus('current')
viprSubChnlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3), )
if mibBuilder.loadTexts: viprSubChnlConfigTable.setStatus('current')
viprSubChnlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "viprIntfId"), (0, "ACMIB", "viprSubChnlId"))
if mibBuilder.loadTexts: viprSubChnlConfigEntry.setStatus('current')
viprSubChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: viprSubChnlId.setStatus('current')
viprSubChnlIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 2), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlIntfIndex.setStatus('current')
viprSubChnlTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("atm", 1), ("fR", 2), ("bridge", 3), ("routing", 4), ("inband", 5))).clone('atm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlTrafficType.setStatus('current')
viprSubChnlLlcEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vc", 1), ("llcSnap", 2))).clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlLlcEncapType.setStatus('current')
viprSubChnlMacEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macHdr", 1), ("noMacHdr", 2))).clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlMacEncapType.setStatus('current')
viprSubChnlTosFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlTosFeature.setStatus('current')
viprSubChnlTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlTosValue.setStatus('current')
viprSubChnlTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlTosMask.setStatus('current')
viprSubChnlVpiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlVpiDlci.setStatus('current')
viprSubChnlVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlVci.setStatus('current')
viprSubChnlSarType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("aal5", 1))).clone('aal5')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlSarType.setStatus('current')
viprSubChnlServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gold", 1), ("silver", 2), ("bronze", 3))).clone('gold')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlServiceType.setStatus('current')
viprSubChnlFwdErrCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eighthRate", 2), ("quarterRate", 3), ("halfRate", 4), ("autoHiQ", 5), ("auto", 6), ("autoLoQ", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlFwdErrCorrection.setStatus('current')
viprSubChnlInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("frf8", 1))).clone('frf8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlInterworkingType.setStatus('current')
viprSubChnlFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 15), Integer32().clone(19200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlFrameSize.setStatus('current')
viprSubChnlComBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlComBurstSize.setStatus('current')
viprSubChnlExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 17), Integer32().clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlExcessBurstSize.setStatus('current')
viprSubChnlCommitedInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlCommitedInfoRate.setStatus('current')
viprSubChnlTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlTimeInterval.setStatus('current')
viprSubChnlAtmPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 20), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlAtmPeakCellRate.setStatus('current')
viprSubChnlAtmSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 21), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlAtmSustainedCellRate.setStatus('current')
viprSubChnlAtmMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 22), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlAtmMaxBurstSize.setStatus('current')
viprSubChnlFrPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 23), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlFrPeakCellRate.setStatus('current')
viprSubChnlFrSustainedCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 24), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlFrSustainedCellRate.setStatus('current')
viprSubChnlFrMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 25), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlFrMaxBurstSize.setStatus('current')
viprSubChnlFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("duplex", 1))).clone('duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlFlowType.setStatus('current')
viprSubChnlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlAdminStatus.setStatus('current')
viprSubChnlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("unlocked-Init", 3), ("unlocked-Disable", 4), ("locked-Shutting", 5))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlOperStatus.setStatus('current')
viprSubChnlInitTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 29), Integer32().clone(192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlInitTmr.setStatus('current')
viprSubChnlDisabWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 30), Integer32().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlDisabWarnTmr.setStatus('current')
viprSubChnlShutDwnWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 31), Integer32().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlShutDwnWarnTmr.setStatus('current')
viprSubChnlDisableWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlDisableWarning.setStatus('current')
viprSubChnlDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("intfDisabled", 2), ("routDisabled", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlDisableReason.setStatus('current')
viprSubChnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 34), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlRowStatus.setStatus('current')
viprSubChnlImIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlImIpAddr.setStatus('current')
viprSubChnlImMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlImMask.setStatus('current')
viprSubChnlViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlViB.setStatus('current')
viprSubChnlVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlVUNIB.setStatus('current')
viprSubChnlTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlTrafficShaping.setStatus('current')
viprSubChnlAtmOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2), ("end-Seg-Pt", 3))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlAtmOamStatus.setStatus('current')
viprRouteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4), )
if mibBuilder.loadTexts: viprRouteConfigTable.setStatus('current')
viprRouteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "viprRouteId"))
if mibBuilder.loadTexts: viprRouteConfigEntry.setStatus('current')
viprRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: viprRouteId.setStatus('current')
viprRouteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteIPAddress.setStatus('current')
viprRouteIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteIPNetMask.setStatus('current')
viprRouteDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteDestAddress.setStatus('current')
viprRouteGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteGatewayAddress.setStatus('current')
viprRouteServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gold", 1), ("silver", 2), ("bronze", 3))).clone('gold')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteServiceType.setStatus('current')
viprRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteMetric.setStatus('current')
viprRouteAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteAdminStatus.setStatus('current')
viprRouteOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("unlocked-Init", 3), ("unlocked-Disable", 4), ("locked-Shutting", 5))).clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRouteOperStatus.setStatus('current')
viprRouteInitTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 10), Integer32().clone(192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteInitTmr.setStatus('current')
viprRouteDisabWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 11), Integer32().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteDisabWarnTmr.setStatus('current')
viprRouteShutDwnWarnTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 12), Integer32().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteShutDwnWarnTmr.setStatus('current')
viprRouteDisableWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteDisableWarning.setStatus('current')
viprRouteDisableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("intfDisabled", 2), ("routDisabled", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRouteDisableReason.setStatus('current')
viprRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteRowStatus.setStatus('current')
viprRouteDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 4, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRouteDestMask.setStatus('current')
viprRoutingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5), )
if mibBuilder.loadTexts: viprRoutingConfigTable.setStatus('current')
viprRoutingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "viprRoutingCommand"), (0, "ACMIB", "viprRoutingIndex"))
if mibBuilder.loadTexts: viprRoutingConfigEntry.setStatus('current')
viprRoutingCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start", 1), ("more", 2), ("abort", 3), ("retrieve", 4))))
if mibBuilder.loadTexts: viprRoutingCommand.setStatus('current')
viprRoutingIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingIPAddress.setStatus('current')
viprRoutingIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingIPNetMask.setStatus('current')
viprRoutingDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingDestAddress.setStatus('current')
viprRoutingGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingGatewayAddress.setStatus('current')
viprRoutingServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gold", 1), ("silver", 2), ("bronze", 3))).clone('gold')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingServiceType.setStatus('current')
viprRoutingType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stat", 1), ("rip", 2), ("ospf", 3), ("intf", 4))).clone('intf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingType.setStatus('current')
viprRoutingMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingMetric.setStatus('current')
viprRoutingDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingDestMask.setStatus('current')
viprRoutingAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprRoutingAge.setStatus('current')
viprRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 5, 1, 11), Integer32())
if mibBuilder.loadTexts: viprRoutingIndex.setStatus('current')
viprArpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6), )
if mibBuilder.loadTexts: viprArpConfigTable.setStatus('current')
viprArpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "viprArpCommand"), (0, "ACMIB", "viprArpIndex"))
if mibBuilder.loadTexts: viprArpConfigEntry.setStatus('current')
viprArpCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start", 1), ("more", 2), ("abort", 3), ("retrieve", 4))))
if mibBuilder.loadTexts: viprArpCommand.setStatus('current')
viprArpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprArpIPAddress.setStatus('current')
viprArpHwAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprArpHwAddress.setStatus('current')
viprArpEntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprArpEntryAge.setStatus('current')
viprArpInterfaceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprArpInterfaceIPAddress.setStatus('current')
viprArpInterfaceIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprArpInterfaceIPMask.setStatus('current')
viprArpInterfaceServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gold", 1), ("silver", 2), ("bronze", 3))).clone('gold')).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprArpInterfaceServiceType.setStatus('current')
viprArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 6, 1, 8), Integer32())
if mibBuilder.loadTexts: viprArpIndex.setStatus('current')
viprPingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 7), )
if mibBuilder.loadTexts: viprPingConfigTable.setStatus('current')
viprPingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 7, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "ipAddr"))
if mibBuilder.loadTexts: viprPingConfigEntry.setStatus('current')
ipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipAddr.setStatus('current')
pingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("not-Alive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingStatus.setStatus('current')
viprRipConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 8), )
if mibBuilder.loadTexts: viprRipConfigTable.setStatus('current')
viprRipConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 8, 1), ).setIndexNames((0, "ACMIB", "viprSlot"))
if mibBuilder.loadTexts: viprRipConfigEntry.setStatus('current')
viprRipUpdateInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 24, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 16, 30))).clone(namedValues=NamedValues(("lowUpdateInt", 8), ("mediumUpdateInt", 16), ("normalUpdateInt", 30))).clone('normalUpdateInt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprRipUpdateInt.setStatus('current')
viprVpnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9), )
if mibBuilder.loadTexts: viprVpnStatsTable.setStatus('current')
viprVpnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"))
if mibBuilder.loadTexts: viprVpnStatsEntry.setStatus('current')
viprVpnStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsTimer.setStatus('current')
viprVpnStatsIcmpOutEchoRPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutEchoRPs.setStatus('current')
viprVpnStatsIcmpOutDestURs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutDestURs.setStatus('current')
viprVpnStatsIcmpOutSrcQ = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutSrcQ.setStatus('current')
viprVpnStatsIcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutRedirects.setStatus('current')
viprVpnStatsIcmpOutEchoRQs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutEchoRQs.setStatus('current')
viprVpnStatsIcmpOutTimeXs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutTimeXs.setStatus('current')
viprVpnStatsIcmpOutParamps = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutParamps.setStatus('current')
viprVpnStatsIcmpOutTimeRQs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutTimeRQs.setStatus('current')
viprVpnStatsIcmpOutTimeRPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutTimeRPs.setStatus('current')
viprVpnStatsIcmpOutInfoRQs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutInfoRQs.setStatus('current')
viprVpnStatsIcmpOutInfoRPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutInfoRPs.setStatus('current')
viprVpnStatsIcmpOutMaskRQs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutMaskRQs.setStatus('current')
viprVpnStatsIcmpOutMaskRPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutMaskRPs.setStatus('current')
viprVpnStatsIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpOutErrors.setStatus('current')
viprVpnStatsIcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInErrors.setStatus('current')
viprVpnStatsIcmpInEchoRQs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInEchoRQs.setStatus('current')
viprVpnStatsIcmpInAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInAddrMasks.setStatus('current')
viprVpnStatsIcmpInAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInAddrMaskReps.setStatus('current')
viprVpnStatsIcmpInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInEchoReps.setStatus('current')
viprVpnStatsIcmpInDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInDestUnreachs.setStatus('current')
viprVpnStatsIcmpInSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInSrcQuenchs.setStatus('current')
viprVpnStatsIcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInTimeExcds.setStatus('current')
viprVpnStatsIcmpInParamProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInParamProbs.setStatus('current')
viprVpnStatsIcmpInTimeStamps = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInTimeStamps.setStatus('current')
viprVpnStatsIcmpInTimeStampsReps = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 10, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprVpnStatsIcmpInTimeStampsReps.setStatus('current')
viprStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10), )
if mibBuilder.loadTexts: viprStatsTable.setStatus('current')
viprStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "viprIntfId"), (0, "ACMIB", "viprSubChnlId"), (0, "ACMIB", "viprSubChnlIntfIndex"), (0, "ACMIB", "viprSubChnlVpiDlci"), (0, "ACMIB", "viprSubChnlVci"), (0, "ACMIB", "viprSubChnlTrafficType"))
if mibBuilder.loadTexts: viprStatsEntry.setStatus('current')
viprStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprStatsReset.setStatus('current')
viprStatsPacketsRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsPacketsRxHi.setStatus('current')
viprStatsPacketsRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsPacketsRxLo.setStatus('current')
viprStatsPacketsTxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsPacketsTxHi.setStatus('current')
viprStatsPacketsTxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsPacketsTxLo.setStatus('current')
viprStatsMismatchCrcHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsMismatchCrcHi.setStatus('current')
viprStatsMismatchCrcLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsMismatchCrcLo.setStatus('current')
viprStatsInsufficientPcktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsInsufficientPcktsHi.setStatus('current')
viprStatsInsufficientPcktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsInsufficientPcktsLo.setStatus('current')
viprStatsExceedAal5CellsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsExceedAal5CellsHi.setStatus('current')
viprStatsExceedAal5CellsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsExceedAal5CellsLo.setStatus('current')
viprStatsPrototypeErrorsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsPrototypeErrorsHi.setStatus('current')
viprStatsPrototypeErrorsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsPrototypeErrorsLo.setStatus('current')
viprStatsArpProtoRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsArpProtoRxHi.setStatus('current')
viprStatsArpProtoRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsArpProtoRxLo.setStatus('current')
viprStatsIPInHdrErrorsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsIPInHdrErrorsHi.setStatus('current')
viprStatsIPInHdrErrorsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsIPInHdrErrorsLo.setStatus('current')
viprStatsIPInAddrErrorsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsIPInAddrErrorsHi.setStatus('current')
viprStatsIPInAddrErrorsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprStatsIPInAddrErrorsLo.setStatus('current')
viprSubChnlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17), )
if mibBuilder.loadTexts: viprSubChnlStatsTable.setStatus('current')
viprSubChnlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1), ).setIndexNames((0, "ACMIB", "viprSlot"), (0, "ACMIB", "viprRouterId"), (0, "ACMIB", "viprIntfId"), (0, "ACMIB", "viprSubChnlId"), (0, "ACMIB", "viprSubChnlIntfIndex"), (0, "ACMIB", "viprSubChnlVpiDlci"), (0, "ACMIB", "viprSubChnlVci"), (0, "ACMIB", "viprSubChnlTrafficType"))
if mibBuilder.loadTexts: viprSubChnlStatsEntry.setStatus('current')
viprSubChnlStatsInCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInCellCountHiA.setStatus('current')
viprSubChnlStatsInCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInCellCountLoA.setStatus('current')
viprSubChnlStatsOutCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutCellCountHiA.setStatus('current')
viprSubChnlStatsOutCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutCellCountLoA.setStatus('current')
viprSubChnlStatsInCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInCellCountHiB.setStatus('current')
viprSubChnlStatsInCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInCellCountLoB.setStatus('current')
viprSubChnlStatsOutCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutCellCountHiB.setStatus('current')
viprSubChnlStatsOutCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutCellCountLoB.setStatus('current')
viprSubChnlStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsTimer.setStatus('current')
viprSubChnlStatsInOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInOdometerCellCountHiA.setStatus('current')
viprSubChnlStatsInOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInOdometerCellCountLoA.setStatus('current')
viprSubChnlStatsOutOdometerCellCountHiA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutOdometerCellCountHiA.setStatus('current')
viprSubChnlStatsOutOdometerCellCountLoA = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutOdometerCellCountLoA.setStatus('current')
viprSubChnlStatsInOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInOdometerCellCountHiB.setStatus('current')
viprSubChnlStatsInOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsInOdometerCellCountLoB.setStatus('current')
viprSubChnlStatsOutOdometerCellCountHiB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutOdometerCellCountHiB.setStatus('current')
viprSubChnlStatsOutOdometerCellCountLoB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOutOdometerCellCountLoB.setStatus('current')
viprSubChnlStatsOdometerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsOdometerTimer.setStatus('current')
viprSubChnlStatsOdometerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viprSubChnlStatsOdometerReset.setStatus('current')
viprSubChnlStatsCellsDroppedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsCellsDroppedB.setStatus('current')
viprSubChnlStatsCellsTaggedB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 12, 17, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viprSubChnlStatsCellsTaggedB.setStatus('current')
virtualIntfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 11), )
if mibBuilder.loadTexts: virtualIntfStatsTable.setStatus('current')
virtualIntfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 11, 1), ).setIndexNames((0, "ACMIB", "virtualIntfStatsIf"), (0, "ACMIB", "virtualIntfStatsVi"))
if mibBuilder.loadTexts: virtualIntfStatsEntry.setStatus('current')
virtualIntfStatsIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 11, 1, 1), IntfIndex())
if mibBuilder.loadTexts: virtualIntfStatsIf.setStatus('current')
virtualIntfStatsVi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: virtualIntfStatsVi.setStatus('current')
virtualIntfStatsEgrCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIntfStatsEgrCellCount.setStatus('current')
virtualIntfStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIntfStatsTimer.setStatus('current')
virtualIntfStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 11, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualIntfStatsReset.setStatus('current')
cardFwVerTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1), )
if mibBuilder.loadTexts: cardFwVerTable.setStatus('current')
cardFwVerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1), ).setIndexNames((0, "ACMIB", "cardFwVerSlot"))
if mibBuilder.loadTexts: cardFwVerEntry.setStatus('current')
cardFwVerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cardFwVerSlot.setStatus('current')
cardFwVerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardFwVerType.setStatus('current')
cardFwVerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwVerCurrent.setStatus('current')
cardFwVerCurrentIsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwVerCurrentIsDefault.setStatus('current')
cardFwVerNext = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardFwVerNext.setStatus('current')
cardFwVerNextIsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardFwVerNextIsDefault.setStatus('current')
cardFwDnldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("failed", 1), ("retry", 2), ("progress", 3), ("done", 4), ("wrongCardType", 5), ("wrongCardSType", 6), ("drvUnavailable", 7), ("drvInvHdrChksum", 8), ("drvInvRecChksum", 9), ("reqRepTimeout", 10), ("cmplRepTimeout", 11), ("mapCorrupted", 12), ("mapUnavailable", 13), ("mapInvChksum", 14), ("mapNameImprop", 15), ("cfgCorrupted", 16), ("cfgUnavailable", 17), ("cfgInvChksum", 18), ("removeCardBeforeFinish", 19), ("ioUnsupported", 20))).clone('done')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwDnldStatus.setStatus('current')
cardFwRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFwRetries.setStatus('current')
fwDriverTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2), )
if mibBuilder.loadTexts: fwDriverTable.setStatus('current')
fwDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1), ).setIndexNames((0, "ACMIB", "fwSlotId"), (0, "ACMIB", "fwDriverType"), (0, "ACMIB", "fwIsDefault"), (0, "ACMIB", "fwDriverName"))
if mibBuilder.loadTexts: fwDriverEntry.setStatus('current')
fwSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: fwSlotId.setStatus('current')
fwDriverType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: fwDriverType.setStatus('current')
fwIsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: fwIsDefault.setStatus('current')
fwDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13))
if mibBuilder.loadTexts: fwDriverName.setStatus('current')
fwDriverFrn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDriverFrn.setStatus('current')
fwDriverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDriverSize.setStatus('current')
fwDriverChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 23, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwDriverChecksum.setStatus('current')
tasCmprsAnnceId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAnnceId.setStatus('current')
tasCmprsAnnceReplaceId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAnnceReplaceId.setStatus('current')
tasCmprsAnnceFilename = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(79, 79)).setFixedLength(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAnnceFilename.setStatus('current')
tasCmprsAnnceDescription = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAnnceDescription.setStatus('current')
tasCmprsAnnceCmprsType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uncompressed", 1), ("compress8k", 2), ("compress16k", 3), ("compress32k", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAnnceCmprsType.setStatus('current')
tasCmprsAnnceType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("voice", 1), ("toneVoice", 2), ("userTones", 3), ("music", 4), ("musicVoice", 5), ("toneMusic", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAnnceType.setStatus('current')
tasCmprsAnnceIntfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 37), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAnnceIntfIndex.setStatus('current')
tasCmprsAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("compress", 1), ("delete", 2), ("store", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasCmprsAction.setStatus('current')
tasTstAnnceId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasTstAnnceId.setStatus('current')
tasTstAnnceIntfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 40), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasTstAnnceIntfIndex.setStatus('current')
tasTstAnnceLawType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a-Law", 1), ("u-Law", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasTstAnnceLawType.setStatus('current')
tasTstAnnceAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("playStart", 1), ("playStop", 2), ("playAbort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasTstAnnceAction.setStatus('current')
tasTstLineId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasTstLineId.setStatus('current')
tasTstLineIntfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 44), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasTstLineIntfIndex.setStatus('current')
tasTstLineAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tstStart", 1), ("tstStop", 2), ("tstAbort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasTstLineAction.setStatus('current')
tasMemIntfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 46), IntfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasMemIntfIndex.setStatus('current')
tasMemAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("re-initialize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tasMemAction.setStatus('current')
toneAnnceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 48), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: toneAnnceIpAddress.setStatus('current')
toneAnnceAccountName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: toneAnnceAccountName.setStatus('current')
toneAnnceAccountPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: toneAnnceAccountPassword.setStatus('current')
toneAnnceSourceFile = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(79, 79)).setFixedLength(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: toneAnnceSourceFile.setStatus('current')
toneAnnceDestinationFile = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: toneAnnceDestinationFile.setStatus('current')
toneAnnceFtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noActivity", 1), ("working", 2), ("doneSuccessfully", 3), ("doneWithError", 4), ("aborted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: toneAnnceFtpStatus.setStatus('current')
toneAnnceFtpErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 1), ("userAbort", 2), ("invalidIpAddress", 3), ("invalidAccountName", 4), ("invalidAccountPassword", 5), ("invalidSourceFile", 6), ("invalidDstFileNameFormat", 7), ("dstFileNameAlreadyExist", 8), ("tooManyAnnouncementNow", 9), ("diskSpaceUsageExceed", 10), ("unableToOpenFile", 11), ("unableToMakeFtpConnection", 12), ("unableToWriteFile", 13), ("unableToCompleteFtp", 14), ("unableToSpawnTask", 15), ("unableToOpenScsiAnncDir", 16), ("statFails", 17))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: toneAnnceFtpErrorStatus.setStatus('current')
toneAnnceFtpAction = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 25, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("abort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: toneAnnceFtpAction.setStatus('current')
atmTrunkingIWFBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 1))
atmTrunkingIWFIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingIWFIdentifier.setStatus('current')
atmTrunkingIWFLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingIWFLocalAddress.setStatus('current')
atmTrunkingIWFMaxRemoteIWF = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 1, 3), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingIWFMaxRemoteIWF.setStatus('current')
atmTrunkingIWFAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingIWFAdminStatus.setStatus('current')
atmTrunkingRemoteIWFTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 2), )
if mibBuilder.loadTexts: atmTrunkingRemoteIWFTable.setStatus('current')
atmTrunkingRemoteIWFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 2, 1), ).setIndexNames((0, "ACMIB", "atmTrunkingRemoteIWFIdentifier"))
if mibBuilder.loadTexts: atmTrunkingRemoteIWFEntry.setStatus('current')
atmTrunkingRemoteIWFIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: atmTrunkingRemoteIWFIdentifier.setStatus('current')
atmTrunkingRemoteIWFAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingRemoteIWFAddress.setStatus('current')
atmTrunkingRemoteIWFTrnkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switched", 1), ("non-switched", 2))).clone('switched')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingRemoteIWFTrnkMode.setStatus('current')
atmTrunkingRemoteIWFAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingRemoteIWFAdminStatus.setStatus('current')
atmTrunkingRemoteIWFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingRemoteIWFRowStatus.setStatus('current')
atmTrunkingSigVccTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3), )
if mibBuilder.loadTexts: atmTrunkingSigVccTable.setStatus('current')
atmTrunkingSigVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1), ).setIndexNames((0, "ACMIB", "atmTrunkingSigVccRmtIWFIdentifier"), (0, "ACMIB", "atmTrunkingSigVccIdentifier"))
if mibBuilder.loadTexts: atmTrunkingSigVccEntry.setStatus('current')
atmTrunkingSigVccRmtIWFIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: atmTrunkingSigVccRmtIWFIdentifier.setStatus('current')
atmTrunkingSigVccIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)))
if mibBuilder.loadTexts: atmTrunkingSigVccIdentifier.setStatus('current')
atmTrunkingSigVccOutgoingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 3), IntfIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccOutgoingIfIndex.setStatus('current')
atmTrunkingSigVccOutgoingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccOutgoingVpi.setStatus('current')
atmTrunkingSigVccOutgoingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccOutgoingVci.setStatus('current')
atmTrunkingSigVccOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccOwner.setStatus('current')
atmTrunkingSigVccInactiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 7), Integer32().clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccInactiveTimer.setStatus('current')
atmTrunkingSigVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc", 1), ("spvc", 2), ("svc", 3))).clone('svc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccType.setStatus('current')
atmTrunkingSigVccSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pss1", 1), ("dss1", 2), ("dpnss", 3), ("other", 4))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccSignaling.setStatus('current')
atmTrunkingSigVccFwPcr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 10), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccFwPcr01.setStatus('current')
atmTrunkingSigVccBwPcr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 11), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccBwPcr01.setStatus('current')
atmTrunkingSigVccFwScr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 12), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccFwScr01.setStatus('current')
atmTrunkingSigVccBwScr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 13), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccBwScr01.setStatus('current')
atmTrunkingSigVccFwMbs01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 14), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccFwMbs01.setStatus('current')
atmTrunkingSigVccBwMbs01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 15), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccBwMbs01.setStatus('current')
atmTrunkingSigVccMaxAal2Vcc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 16), Integer32().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccMaxAal2Vcc.setStatus('current')
atmTrunkingSigVccActiveAal2Vcc = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingSigVccActiveAal2Vcc.setStatus('current')
atmTrunkingSigVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("outOfService", 2), ("init", 3), ("connecting", 4), ("active", 5), ("release", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingSigVccOperStatus.setStatus('current')
atmTrunkingSigVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccRowStatus.setStatus('current')
atmTrunkingSigVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccViB.setStatus('current')
atmTrunkingSigVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccVUNIB.setStatus('current')
atmTrunkingSigVccRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 22), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccRetryTimer.setStatus('current')
atmTrunkingSigVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingSigVccRetryLimit.setStatus('current')
atmTrunkingSigVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingSigVccRestart.setStatus('current')
atmTrunkingSigVccPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priority-1", 1), ("priority-2", 2), ("priority-3", 3), ("priority-4", 4))).clone('priority-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingSigVccPriority.setStatus('current')
atmTrunkingSigVccRetryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingSigVccRetryCounter.setStatus('current')
atmTrunkingBrVccConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4), )
if mibBuilder.loadTexts: atmTrunkingBrVccConfigTable.setStatus('current')
atmTrunkingBrVccConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1), ).setIndexNames((0, "ACMIB", "atmTrunkingBrVccRmtIWFId"), (0, "ACMIB", "atmTrunkingBrVccId"))
if mibBuilder.loadTexts: atmTrunkingBrVccConfigEntry.setStatus('current')
atmTrunkingBrVccRmtIWFId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: atmTrunkingBrVccRmtIWFId.setStatus('current')
atmTrunkingBrVccSigVccId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingBrVccSigVccId.setStatus('current')
atmTrunkingBrVccId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: atmTrunkingBrVccId.setStatus('current')
atmTrunkingBrVccIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 4), IntfIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccIf.setStatus('current')
atmTrunkingBrVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccVpi.setStatus('current')
atmTrunkingBrVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccVci.setStatus('current')
atmTrunkingBrVccViB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccViB.setStatus('current')
atmTrunkingBrVccVUNIB = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccVUNIB.setStatus('current')
atmTrunkingBrVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("cbr-1", 1), ("cbr-2", 2), ("cbr-3", 3), ("cbr-4", 4), ("ubr", 5), ("vbr-nrt2", 6), ("vbr-nrt1", 7), ("vbr-rt2", 8), ("vbr-rt1", 9), ("vbr-express", 10))).clone('cbr-1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccServiceType.setStatus('current')
atmTrunkingBrVccSarType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal1", 1), ("aal2", 2))).clone('aal2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccSarType.setStatus('current')
atmTrunkingBrVccOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccOwner.setStatus('current')
atmTrunkingBrVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("outOfService", 2), ("init", 3), ("active", 4), ("release", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingBrVccOperStatus.setStatus('current')
atmTrunkingBrVccFwAtmPcr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 13), Integer32().clone(172)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccFwAtmPcr01.setStatus('current')
atmTrunkingBrVccBwAtmPcr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 14), Integer32().clone(172)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccBwAtmPcr01.setStatus('current')
atmTrunkingBrVccFwAtmScr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 15), Integer32().clone(172)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccFwAtmScr01.setStatus('current')
atmTrunkingBrVccBwAtmScr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 16), Integer32().clone(172)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccBwAtmScr01.setStatus('current')
atmTrunkingBrVccFwAtmMbs01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 17), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccFwAtmMbs01.setStatus('current')
atmTrunkingBrVccBwAtmMbs01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 18), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccBwAtmMbs01.setStatus('current')
atmTrunkingBrVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("svc", 1), ("spvc", 2), ("pvc", 3))).clone('svc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccConnType.setStatus('current')
atmTrunkingBrVccActiveChanCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingBrVccActiveChanCnt.setStatus('current')
atmTrunkingBrVccMaxAal2ChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccMaxAal2ChanId.setStatus('current')
atmTrunkingBrVccCircuitModeDataSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccCircuitModeDataSupp.setStatus('current')
atmTrunkingBrVccFrameModeSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccFrameModeSupp.setStatus('current')
atmTrunkingBrVccFaxModSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccFaxModSupp.setStatus('current')
atmTrunkingBrVccCASPktXportSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccCASPktXportSupp.setStatus('current')
atmTrunkingBrVccDTMFPktXportSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccDTMFPktXportSupp.setStatus('current')
atmTrunkingBrVccMFR1PktXportSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccMFR1PktXportSupp.setStatus('current')
atmTrunkingBrVccMFR2PktXportSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccMFR2PktXportSupp.setStatus('current')
atmTrunkingBrVccPCMEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("a-law", 2), ("u-law", 3))).clone('a-law')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccPCMEncoding.setStatus('current')
atmTrunkingBrVccMaxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccMaxFrameLength.setStatus('current')
atmTrunkingBrVccIdleChannSuprSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccIdleChannSuprSupp.setStatus('current')
atmTrunkingBrVccSilenceDetSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccSilenceDetSupp.setStatus('current')
atmTrunkingBrVccCompressionSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("g726-16K", 2), ("g726-24K", 3), ("g726-32K", 4), ("g726-40K", 5), ("g729a-8K", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccCompressionSpec.setStatus('current')
atmTrunkingBrVccAudioProfileSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("itu-t", 1), ("other", 2))).clone('itu-t')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccAudioProfileSource.setStatus('current')
atmTrunkingBrVccAudioProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccAudioProfileId.setStatus('current')
atmTrunkingBrVccAvailBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingBrVccAvailBw.setStatus('current')
atmTrunkingBrVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 37), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccRowStatus.setStatus('current')
atmTrunkingBrVccGr303Supp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccGr303Supp.setStatus('current')
atmTrunkingBrVccOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupp", 1), ("end-Pt", 2))).clone('unsupp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingBrVccOamStatus.setStatus('current')
atmTrunkingBrVccInactiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 40), Integer32().clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccInactiveTimer.setStatus('current')
atmTrunkingBrVccRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 41), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccRetryTimer.setStatus('current')
atmTrunkingBrVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 42), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTrunkingBrVccRetryLimit.setStatus('current')
atmTrunkingBrVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingBrVccRestart.setStatus('current')
atmTrunkingBrVccCuTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingBrVccCuTimer.setStatus('current')
atmTrunkingBrVccPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priority-1", 1), ("priority-2", 2), ("priority-3", 3), ("priority-4", 4))).clone('priority-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrunkingBrVccPriority.setStatus('current')
atmTrunkingBrVccRetryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 4, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingBrVccRetryCounter.setStatus('current')
atmTrunkingDataChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5), )
if mibBuilder.loadTexts: atmTrunkingDataChannelConfigTable.setStatus('current')
atmTrunkingDataChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1), ).setIndexNames((0, "ACMIB", "atmTrunkingDataChannelRmtIWFId"), (0, "ACMIB", "atmTrunkingDataChannelBrVccId"), (0, "ACMIB", "atmTrunkingDataChannelId"))
if mibBuilder.loadTexts: atmTrunkingDataChannelConfigEntry.setStatus('current')
atmTrunkingDataChannelRmtIWFId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: atmTrunkingDataChannelRmtIWFId.setStatus('current')
atmTrunkingDataChannelSigVccId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingDataChannelSigVccId.setStatus('current')
atmTrunkingDataChannelBrVccId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: atmTrunkingDataChannelBrVccId.setStatus('current')
atmTrunkingDataChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)))
if mibBuilder.loadTexts: atmTrunkingDataChannelId.setStatus('current')
atmTrunkingDataChanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingDataChanOperStatus.setStatus('current')
atmTrunkingDataChanOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingDataChanOwner.setStatus('current')
atmTrunkingDataChanNBIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 28, 5, 1, 7), IntfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrunkingDataChanNBIntf.setStatus('current')
h248TermIdTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1), )
if mibBuilder.loadTexts: h248TermIdTable.setStatus('current')
h248TermIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1), ).setIndexNames((0, "ACMIB", "h248TermSlotId"), (0, "ACMIB", "h248TermPhyPortId"), (0, "ACMIB", "h248TermLogPortId"), (0, "ACMIB", "h248TermChanId"), (0, "ACMIB", "h248TermVpi"), (0, "ACMIB", "h248TermVci"))
if mibBuilder.loadTexts: h248TermIdEntry.setStatus('current')
h248TermSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: h248TermSlotId.setStatus('current')
h248TermPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)))
if mibBuilder.loadTexts: h248TermPhyPortId.setStatus('current')
h248TermLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)))
if mibBuilder.loadTexts: h248TermLogPortId.setStatus('current')
h248TermChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)))
if mibBuilder.loadTexts: h248TermChanId.setStatus('current')
h248TermVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)))
if mibBuilder.loadTexts: h248TermVpi.setStatus('current')
h248TermVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)))
if mibBuilder.loadTexts: h248TermVci.setStatus('current')
h248TermId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248TermId.setStatus('current')
h248TermAal2Cid = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248TermAal2Cid.setStatus('current')
h248TermActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248TermActivation.setStatus('current')
h248TermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 30, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248TermRowStatus.setStatus('current')
h248MaxNumberOfContexts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 1), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MaxNumberOfContexts.setStatus('current')
h248MaxTerminationsPerContext = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 2), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MaxTerminationsPerContext.setStatus('current')
h248NormalMGExecutionTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 3), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248NormalMGExecutionTime.setStatus('current')
h248NormalMGCExecutionTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 4), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248NormalMGCExecutionTime.setStatus('current')
h248MGProvisionalResponseTimerValue = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 5), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MGProvisionalResponseTimerValue.setStatus('current')
h248MGCProvisionalResponseTimerValue = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 6), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MGCProvisionalResponseTimerValue.setStatus('current')
h248MGCIpAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MGCIpAddress1.setStatus('current')
h248MGCIpAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 18, 31, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h248MGCIpAddress2.setStatus('current')
protectionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 1), )
if mibBuilder.loadTexts: protectionGroupTable.setStatus('current')
protectionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 1, 1), ).setIndexNames((0, "ACMIB", "pgtGroupId"))
if mibBuilder.loadTexts: protectionGroupEntry.setStatus('current')
pgtGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pgtGroupId.setStatus('current')
pgtSwitchoverMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgtSwitchoverMethod.setStatus('current')
pgtSwitchbackMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgtSwitchbackMethod.setStatus('current')
pgtStandbySelection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sequential", 1), ("latest-used", 2), ("oldest-used", 3), ("random", 4), ("explicit", 5))).clone('sequential')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgtStandbySelection.setStatus('current')
pgtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgtRowStatus.setStatus('current')
interfaceProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2), )
if mibBuilder.loadTexts: interfaceProtectionTable.setStatus('current')
interfaceProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1), ).setIndexNames((0, "ACMIB", "iptGroupId"), (0, "ACMIB", "iptLogicalIntfId"))
if mibBuilder.loadTexts: interfaceProtectionEntry.setStatus('current')
iptGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: iptGroupId.setStatus('current')
iptLogicalIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: iptLogicalIntfId.setStatus('current')
iptPhysicalIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iptPhysicalIntfId.setStatus('current')
iptIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iptIntfType.setStatus('current')
iptOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: iptOperState.setStatus('current')
iptOperatingIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iptOperatingIntf.setStatus('current')
iptProtCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("switchover", 2), ("switchback", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iptProtCommand.setStatus('current')
iptSelectedStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iptSelectedStandby.setStatus('current')
iptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 18, 29, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iptRowStatus.setStatus('current')
systemColdStartNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 1))
if mibBuilder.loadTexts: systemColdStartNotify.setStatus('current')
systemWarmStartNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 2))
if mibBuilder.loadTexts: systemWarmStartNotify.setStatus('current')
ecdBootFailureNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 3))
if mibBuilder.loadTexts: ecdBootFailureNotify.setStatus('current')
referenceClockFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 4))
if mibBuilder.loadTexts: referenceClockFailNotify.setStatus('current')
referenceClockClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 5))
if mibBuilder.loadTexts: referenceClockClearedNotify.setStatus('current')
compositeClockFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 6))
if mibBuilder.loadTexts: compositeClockFailNotify.setStatus('current')
compositeClockClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 7))
if mibBuilder.loadTexts: compositeClockClearedNotify.setStatus('current')
stratumModeChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 8)).setObjects(("ACMIB", "stratumMode"))
if mibBuilder.loadTexts: stratumModeChangeNotify.setStatus('current')
powerSupplyStatusNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 9)).setObjects(("ACMIB", "powerSupplyReasonCode"))
if mibBuilder.loadTexts: powerSupplyStatusNotify.setStatus('current')
softwareDownloadStatusNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 10)).setObjects(("ACMIB", "upgradeSwCopyStatus"), ("ACMIB", "upgradeSwErrorStatus"))
if mibBuilder.loadTexts: softwareDownloadStatusNotify.setStatus('current')
muxReadyConfirmReceivedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 11))
if mibBuilder.loadTexts: muxReadyConfirmReceivedNotify.setStatus('current')
muxReadyConfirmNotReceivedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 12))
if mibBuilder.loadTexts: muxReadyConfirmNotReceivedNotify.setStatus('current')
oneWayMessageWhileInTwoWayStateNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 13))
if mibBuilder.loadTexts: oneWayMessageWhileInTwoWayStateNotify.setStatus('current')
inactivityTimerExpiredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 14))
if mibBuilder.loadTexts: inactivityTimerExpiredNotify.setStatus('current')
keepAliveTimerExpiredInLlDownStateNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 15))
if mibBuilder.loadTexts: keepAliveTimerExpiredInLlDownStateNotify.setStatus('current')
keepAliveTimerExpiredInOneWayStateNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 16))
if mibBuilder.loadTexts: keepAliveTimerExpiredInOneWayStateNotify.setStatus('current')
completeClockFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 17))
if mibBuilder.loadTexts: completeClockFailedNotify.setStatus('current')
completeClockRecoveredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 18))
if mibBuilder.loadTexts: completeClockRecoveredNotify.setStatus('current')
backplaneCircuitryFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 19))
if mibBuilder.loadTexts: backplaneCircuitryFailedNotify.setStatus('current')
backplaneCircuitryRecoveredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 20))
if mibBuilder.loadTexts: backplaneCircuitryRecoveredNotify.setStatus('current')
remoteRebootNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 21)).setObjects(("ACMIB", "remoteRebootReasonCode"))
if mibBuilder.loadTexts: remoteRebootNotify.setStatus('current')
saveConfigurationNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 22)).setObjects(("ACMIB", "saveConfigurationReasonCode"))
if mibBuilder.loadTexts: saveConfigurationNotify.setStatus('current')
versionConfigurationNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 23)).setObjects(("ACMIB", "versionConfigurationReasonCode"))
if mibBuilder.loadTexts: versionConfigurationNotify.setStatus('current')
fileTransferStatusNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 24)).setObjects(("ACMIB", "percentComplete"))
if mibBuilder.loadTexts: fileTransferStatusNotify.setStatus('current')
ipOrMaskInvalidNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 25)).setObjects(("ACMIB", "ipTypeReasonCode"))
if mibBuilder.loadTexts: ipOrMaskInvalidNotify.setStatus('current')
alarmCardInputChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 26)).setObjects(("ACMIB", "alarmCardReasonCode"), ("ACMIB", "deviceId"))
if mibBuilder.loadTexts: alarmCardInputChangeNotify.setStatus('current')
removeConfigFilesNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 27)).setObjects(("ACMIB", "removeConfigFiles"))
if mibBuilder.loadTexts: removeConfigFilesNotify.setStatus('current')
alarmCardOutputChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 28)).setObjects(("ACMIB", "alarmCardReasonCode"), ("ACMIB", "deviceId"))
if mibBuilder.loadTexts: alarmCardOutputChangeNotify.setStatus('current')
alarmCardAcoChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 29)).setObjects(("ACMIB", "alarmCardReasonCode"))
if mibBuilder.loadTexts: alarmCardAcoChangeNotify.setStatus('current')
snmpCommunityStringsChangedToPublicNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 30))
if mibBuilder.loadTexts: snmpCommunityStringsChangedToPublicNotify.setStatus('current')
pnniNodeCfgNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 31)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniNodeCfgNotify.setStatus('current')
pnniNodeCfgFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 32)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniNodeCfgFailNotify.setStatus('current')
pnniNodeModFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 33)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniNodeModFailNotify.setStatus('current')
pnniNodeDelFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 34)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniNodeDelFailNotify.setStatus('current')
pnniNodeOOSFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 35)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniNodeOOSFailNotify.setStatus('current')
pnniNodeISFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 36)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniNodeISFailNotify.setStatus('current')
pnniRtAddrCfgNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 37)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniRtAddrCfgNotify.setStatus('current')
pnniRtAddrCfgFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 38)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniRtAddrCfgFailNotify.setStatus('current')
pnniRtAddrModFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 39)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniRtAddrModFailNotify.setStatus('current')
pnniRtAddrDelFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 40)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniRtAddrDelFailNotify.setStatus('current')
pnniRtAddrAddByIlmiNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 41)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniRtAddrAddByIlmiNotify.setStatus('current')
pnniRtAddrDelByIlmiNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 42)).setObjects(("ACMIB", "swtchNodeIndx"), ("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniRtAddrDelByIlmiNotify.setStatus('current')
callContrlResAllocFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 43))
if mibBuilder.loadTexts: callContrlResAllocFailNotify.setStatus('current')
differentSystemSoftwareNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 44)).setObjects(("ACMIB", "primarySoftwareVersion"), ("ACMIB", "backupSoftwareVersion"))
if mibBuilder.loadTexts: differentSystemSoftwareNotify.setStatus('current')
inputPortClockFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 45))
if mibBuilder.loadTexts: inputPortClockFailNotify.setStatus('current')
inputPortClockClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 46))
if mibBuilder.loadTexts: inputPortClockClearedNotify.setStatus('current')
oldStratumCardNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 47))
if mibBuilder.loadTexts: oldStratumCardNotify.setStatus('current')
stratumCardMismatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 48))
if mibBuilder.loadTexts: stratumCardMismatchNotify.setStatus('current')
tasCmprsAnnceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 49)).setObjects(("ACMIB", "tasCmprsAnnceReasonCode"), ("ACMIB", "tasTrapAnnceId"))
if mibBuilder.loadTexts: tasCmprsAnnceNotify.setStatus('current')
tasTstLineNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 50)).setObjects(("ACMIB", "tasTstLineReasonCode"), ("ACMIB", "tasTrapTstId"))
if mibBuilder.loadTexts: tasTstLineNotify.setStatus('current')
tasMemNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 51)).setObjects(("ACMIB", "tasMemReasonCode"))
if mibBuilder.loadTexts: tasMemNotify.setStatus('current')
ambientTemperatureChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 52)).setObjects(("ACMIB", "ambientTemperature"))
if mibBuilder.loadTexts: ambientTemperatureChangeNotify.setStatus('current')
systemInsuffMemNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 53))
if mibBuilder.loadTexts: systemInsuffMemNotify.setStatus('current')
toneAnnceFtpStatusNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 54)).setObjects(("ACMIB", "toneAnnceFtpStatus"), ("ACMIB", "toneAnnceFtpErrorStatus"))
if mibBuilder.loadTexts: toneAnnceFtpStatusNotify.setStatus('current')
tasmControlBlockResAllocFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 55)).setObjects(("ACMIB", "tasmControlBlockAllocFailReasonCode"))
if mibBuilder.loadTexts: tasmControlBlockResAllocFailNotify.setStatus('current')
tasmCacheMemAllocFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 56)).setObjects(("ACMIB", "tasmCacheMemAllocFailReasonCode"))
if mibBuilder.loadTexts: tasmCacheMemAllocFailNotify.setStatus('current')
remoteDbOperationStatusNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 57)).setObjects(("ACMIB", "remoteDbOperationStatus"), ("ACMIB", "remoteDbOperationErrorStatus"))
if mibBuilder.loadTexts: remoteDbOperationStatusNotify.setStatus('current')
sapphireInterfaceAddressAssignFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 58)).setObjects(("ACMIB", "sapphireIntfAddressFailReasonCode"))
if mibBuilder.loadTexts: sapphireInterfaceAddressAssignFailNotify.setStatus('current')
switchAlarmStatusChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 59)).setObjects(("ACMIB", "switchAlarmStatus"))
if mibBuilder.loadTexts: switchAlarmStatusChangeNotify.setStatus('current')
chassisOverTempAlarmNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 1, 60)).setObjects(("ACMIB", "chassisOverTempAlarmReasonCode"))
if mibBuilder.loadTexts: chassisOverTempAlarmNotify.setStatus('current')
cardInsertionNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 1)).setObjects(("ACMIB", "cardSlot"), ("ACMIB", "cardType"), ("ACMIB", "cardProtectionStatus"), ("ACMIB", "cardOperStatus"))
if mibBuilder.loadTexts: cardInsertionNotify.setStatus('current')
cardRemovedOrFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 2)).setObjects(("ACMIB", "cardSlot"))
if mibBuilder.loadTexts: cardRemovedOrFailedNotify.setStatus('current')
lineStatusChangedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 3)).setObjects(("ACMIB", "portId"), ("ACMIB", "lineStatus"))
if mibBuilder.loadTexts: lineStatusChangedNotify.setStatus('current')
firmwareDownloadSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 4)).setObjects(("ACMIB", "fwReleaseSlot"))
if mibBuilder.loadTexts: firmwareDownloadSucceededNotify.setStatus('current')
firmwareDownloadFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 5)).setObjects(("ACMIB", "fwReleaseSlot"), ("ACMIB", "firmwareDownloadReasonCode"))
if mibBuilder.loadTexts: firmwareDownloadFailedNotify.setStatus('current')
moduleRebootNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 6)).setObjects(("ACMIB", "cardSlot"), ("ACMIB", "cardType"))
if mibBuilder.loadTexts: moduleRebootNotify.setStatus('current')
oc3APSStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 7)).setObjects(("ACMIB", "oc3APSPairPortIndex"), ("ACMIB", "oc3APSReasonCode"), ("ACMIB", "oc3APSK1K2Rx"), ("ACMIB", "oc3APSK1K2Tx"), ("ACMIB", "oc3APSSelectorState"), ("ACMIB", "oc3APSWorkingLineSignalStatus"), ("ACMIB", "oc3APSProtectionLineSignalStatus"))
if mibBuilder.loadTexts: oc3APSStateChangeNotify.setStatus('current')
oc3APSSwitchoverNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 8)).setObjects(("ACMIB", "oc3APSPairPortIndex"), ("ACMIB", "oc3APSReasonCode"), ("ACMIB", "oc3APSK1K2Rx"), ("ACMIB", "oc3APSK1K2Tx"), ("ACMIB", "oc3APSSelectorState"), ("ACMIB", "oc3APSWorkingLineSignalStatus"), ("ACMIB", "oc3APSProtectionLineSignalStatus"))
if mibBuilder.loadTexts: oc3APSSwitchoverNotify.setStatus('current')
portModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 9)).setObjects(("ACMIB", "portId"), ("ACMIB", "portFailureReasonCode"))
if mibBuilder.loadTexts: portModifyFailNotify.setStatus('current')
stratumActivitySwitchOverNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 10)).setObjects(("ACMIB", "activeStratum"))
if mibBuilder.loadTexts: stratumActivitySwitchOverNotify.setStatus('current')
imaGroupStatusChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 2, 11)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "imaGrpChannelNeState"), ("ACMIB", "imaGrpChannelFeState"), ("ACMIB", "imaGrpChannelFailureStatus"), ("ACMIB", "imaGrpChannelSymmetry"))
if mibBuilder.loadTexts: imaGroupStatusChangeNotify.setStatus('current')
interfaceCreatedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 1)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"))
if mibBuilder.loadTexts: interfaceCreatedNotify.setStatus('current')
interfaceDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 2)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: interfaceDeletedNotify.setStatus('current')
interfaceModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 3)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"))
if mibBuilder.loadTexts: interfaceModifiedNotify.setStatus('current')
interfaceModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 4)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: interfaceModifyFailNotify.setStatus('current')
interfaceOutOfServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 5)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"))
if mibBuilder.loadTexts: interfaceOutOfServiceNotify.setStatus('current')
interfaceInServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 6)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"))
if mibBuilder.loadTexts: interfaceInServiceNotify.setStatus('current')
bridgeDomainFullNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 7)).setObjects(("ACMIB", "bridgeDomainNumber"))
if mibBuilder.loadTexts: bridgeDomainFullNotify.setStatus('current')
bridgeDomainExceededForSlotNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 8)).setObjects(("ACMIB", "cardSlot"))
if mibBuilder.loadTexts: bridgeDomainExceededForSlotNotify.setStatus('current')
bridgeDomainNumberInUseNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 9)).setObjects(("ACMIB", "bridgeDomainNumber"))
if mibBuilder.loadTexts: bridgeDomainNumberInUseNotify.setStatus('current')
bridgeDomainInServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 10)).setObjects(("ACMIB", "bridgeDomainNumber"))
if mibBuilder.loadTexts: bridgeDomainInServiceNotify.setStatus('current')
bridgeDomainNumberInvalidNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 11)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: bridgeDomainNumberInvalidNotify.setStatus('current')
signalingModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 12)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: signalingModifyFailNotify.setStatus('current')
lmiIntfStatusNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 13)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "frLmiOperStatus"))
if mibBuilder.loadTexts: lmiIntfStatusNotify.setStatus('current')
isdnLapdDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 14)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "isdnIntfDChanId"))
if mibBuilder.loadTexts: isdnLapdDownNotify.setStatus('current')
isdnLapdUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 15)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "isdnIntfDChanId"))
if mibBuilder.loadTexts: isdnLapdUpNotify.setStatus('current')
bridgeDomainTimingRelationshipNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 16)).setObjects(("ACMIB", "bridgeDomainNumber"), ("ACMIB", "timingReasonCode"))
if mibBuilder.loadTexts: bridgeDomainTimingRelationshipNotify.setStatus('current')
ts16UsageModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 17)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: ts16UsageModifyFailNotify.setStatus('current')
ceServiceTypeModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 18)).setObjects(("ACMIB", "portId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: ceServiceTypeModifyFailNotify.setStatus('current')
channelizationModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 19)).setObjects(("ACMIB", "portId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: channelizationModifyFailNotify.setStatus('current')
cirEmSpvcConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 20)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: cirEmSpvcConfiguredNotify.setStatus('current')
cirEmSpvcConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 21)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: cirEmSpvcConfigFailNotify.setStatus('current')
cirEmSpvcDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 22)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: cirEmSpvcDeletedNotify.setStatus('current')
cirEmSpvcModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 23)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: cirEmSpvcModifiedNotify.setStatus('current')
cirEmSpvcModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 24)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: cirEmSpvcModifyFailNotify.setStatus('current')
vbrSpvcConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 25)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: vbrSpvcConfiguredNotify.setStatus('current')
vbrSpvcConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 26)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: vbrSpvcConfigFailNotify.setStatus('current')
vbrSpvcDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 27)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: vbrSpvcDeletedNotify.setStatus('current')
vbrSpvcModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 28)).setObjects(("ACMIB", "interfaceIndex"))
if mibBuilder.loadTexts: vbrSpvcModifiedNotify.setStatus('current')
vbrSpvcModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 29)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: vbrSpvcModifyFailNotify.setStatus('current')
atmSpvcConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 30)).setObjects(("ACMIB", "atmSpvcVccIfA"), ("ACMIB", "atmSpvcVccVpiA"), ("ACMIB", "atmSpvcVccVciA"))
if mibBuilder.loadTexts: atmSpvcConfiguredNotify.setStatus('current')
atmSpvcConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 31)).setObjects(("ACMIB", "atmSpvcVccIfA"), ("ACMIB", "atmSpvcVccVpiA"), ("ACMIB", "atmSpvcVccVciA"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: atmSpvcConfigFailNotify.setStatus('current')
atmSpvcDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 32)).setObjects(("ACMIB", "atmSpvcVccIfA"), ("ACMIB", "atmSpvcVccVpiA"), ("ACMIB", "atmSpvcVccVciA"))
if mibBuilder.loadTexts: atmSpvcDeletedNotify.setStatus('current')
atmSpvcModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 33)).setObjects(("ACMIB", "atmSpvcVccIfA"), ("ACMIB", "atmSpvcVccVpiA"), ("ACMIB", "atmSpvcVccVciA"))
if mibBuilder.loadTexts: atmSpvcModifiedNotify.setStatus('current')
atmSpvcModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 34)).setObjects(("ACMIB", "atmSpvcVccIfA"), ("ACMIB", "atmSpvcVccVpiA"), ("ACMIB", "atmSpvcVccVciA"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: atmSpvcModifyFailNotify.setStatus('current')
cRC4ModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 35)).setObjects(("ACMIB", "portId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: cRC4ModifyFailNotify.setStatus('current')
imaGrpChannelFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 36)).setObjects(("ACMIB", "imaGrpChannelId"), ("ACMIB", "imaGrpChannelStatus"))
if mibBuilder.loadTexts: imaGrpChannelFailNotify.setStatus('current')
atmImaIntfFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 37)).setObjects(("ACMIB", "atmImaIntfIndex"), ("ACMIB", "atmImaIntfStatus"))
if mibBuilder.loadTexts: atmImaIntfFailNotify.setStatus('current')
imaGrpChannelClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 38)).setObjects(("ACMIB", "imaGrpChannelId"), ("ACMIB", "imaGrpChannelStatus"))
if mibBuilder.loadTexts: imaGrpChannelClearedNotify.setStatus('current')
atmImaIntfClearedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 39)).setObjects(("ACMIB", "atmImaIntfIndex"), ("ACMIB", "atmImaIntfStatus"))
if mibBuilder.loadTexts: atmImaIntfClearedNotify.setStatus('current')
pnniProtLnkUpAndAdv = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 40)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniProtLnkUpAndAdv.setStatus('current')
pnniProtLinkUpAndNotAdv = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 41)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniProtLinkUpAndNotAdv.setStatus('current')
pnniProtLnkStatDown = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 42)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniProtLnkStatDown.setStatus('current')
pnniIntfCfgFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 43)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "pnniCode"))
if mibBuilder.loadTexts: pnniIntfCfgFailNotify.setStatus('current')
viprPingTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 44)).setObjects(("ACMIB", "viprSlot"), ("ACMIB", "viprRouterId"), ("ACMIB", "ipAddrNumber"), ("ACMIB", "pingStatusReasonCode"))
if mibBuilder.loadTexts: viprPingTrap.setStatus('current')
viprArpTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 45)).setObjects(("ACMIB", "viprSlot"), ("ACMIB", "viprRouterId"), ("ACMIB", "arpStatus"))
if mibBuilder.loadTexts: viprArpTrap.setStatus('current')
viprRoutingTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 46)).setObjects(("ACMIB", "viprSlot"), ("ACMIB", "viprRouterId"), ("ACMIB", "routingStatus"))
if mibBuilder.loadTexts: viprRoutingTrap.setStatus('current')
viprVpnTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 47)).setObjects(("ACMIB", "viprSlot"), ("ACMIB", "viprRouterId"), ("ACMIB", "vpnTrapStatus"))
if mibBuilder.loadTexts: viprVpnTrap.setStatus('current')
viprIpIntfTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 48)).setObjects(("ACMIB", "viprSlot"), ("ACMIB", "viprRouterId"), ("ACMIB", "viprIntfId"), ("ACMIB", "ipIntfStatus"))
if mibBuilder.loadTexts: viprIpIntfTrap.setStatus('current')
viprSubChanTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 49)).setObjects(("ACMIB", "viprSlot"), ("ACMIB", "viprRouterId"), ("ACMIB", "viprIntfId"), ("ACMIB", "viprSubChnlId"), ("ACMIB", "subChanStatus"))
if mibBuilder.loadTexts: viprSubChanTrap.setStatus('current')
viprRtSrvTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 50)).setObjects(("ACMIB", "cardSlot"), ("ACMIB", "routeSrvStatus"))
if mibBuilder.loadTexts: viprRtSrvTrap.setStatus('current')
atmSvcIntfLayer2Up = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 51)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"))
if mibBuilder.loadTexts: atmSvcIntfLayer2Up.setStatus('current')
atmSvcIntfLayer2Down = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 52)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"))
if mibBuilder.loadTexts: atmSvcIntfLayer2Down.setStatus('current')
apsConfigurationModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 53)).setObjects(("ACMIB", "oc3PortId"), ("ACMIB", "apsFailureReasonCode"))
if mibBuilder.loadTexts: apsConfigurationModifyFailNotify.setStatus('current')
viprStatRtTrap = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 54)).setObjects(("ACMIB", "viprSlot"), ("ACMIB", "viprRouterId"), ("ACMIB", "viprRouteId"), ("ACMIB", "statRtStatus"))
if mibBuilder.loadTexts: viprStatRtTrap.setStatus('current')
interfaceCreateFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 55)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceType"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: interfaceCreateFailNotify.setStatus('current')
virtualIntfCreatedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 56)).setObjects(("ACMIB", "virtualIntfConfigIf"), ("ACMIB", "virtualIntfConfigVi"))
if mibBuilder.loadTexts: virtualIntfCreatedNotify.setStatus('current')
virtualIntfModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 57)).setObjects(("ACMIB", "virtualIntfConfigIf"), ("ACMIB", "virtualIntfConfigVi"))
if mibBuilder.loadTexts: virtualIntfModifiedNotify.setStatus('current')
virtualIntfDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 58)).setObjects(("ACMIB", "virtualIntfConfigIf"), ("ACMIB", "virtualIntfConfigVi"))
if mibBuilder.loadTexts: virtualIntfDeleteNotify.setStatus('current')
virtualIntfModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 59)).setObjects(("ACMIB", "virtualIntfConfigIf"), ("ACMIB", "virtualIntfConfigVi"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: virtualIntfModifyFailNotify.setStatus('current')
frAtmSpvcConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 60)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "frAtmSpvcVccDlciA"))
if mibBuilder.loadTexts: frAtmSpvcConfiguredNotify.setStatus('current')
frAtmSpvcConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 61)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "frAtmSpvcVccDlciA"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: frAtmSpvcConfigFailNotify.setStatus('current')
frAtmSpvcDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 62)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "frAtmSpvcVccDlciA"))
if mibBuilder.loadTexts: frAtmSpvcDeletedNotify.setStatus('current')
frAtmSpvcModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 63)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "frAtmSpvcVccDlciA"))
if mibBuilder.loadTexts: frAtmSpvcModifiedNotify.setStatus('current')
frAtmSpvcModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 64)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "frAtmSpvcVccDlciA"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: frAtmSpvcModifyFailNotify.setStatus('current')
atmAtmSpvcConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 65)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVccVciA"), ("ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvcConfiguredNotify.setStatus('current')
atmAtmSpvcConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 66)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVccVciA"), ("ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: atmAtmSpvcConfigFailNotify.setStatus('current')
atmAtmSpvcDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 67)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVccVciA"), ("ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvcDeletedNotify.setStatus('current')
atmAtmSpvcModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 68)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVccVciA"), ("ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvcModifiedNotify.setStatus('current')
atmAtmSpvcModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 69)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVccVciA"), ("ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: atmAtmSpvcModifyFailNotify.setStatus('current')
cirAtmSpvcConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 70)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "cirAtmSpvcVccRemoteCePortAddr"))
if mibBuilder.loadTexts: cirAtmSpvcConfiguredNotify.setStatus('current')
cirAtmSpvcConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 71)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "cirAtmSpvcVccRemoteCePortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: cirAtmSpvcConfigFailNotify.setStatus('current')
cirAtmSpvcDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 72)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "cirAtmSpvcVccRemoteCePortAddr"))
if mibBuilder.loadTexts: cirAtmSpvcDeletedNotify.setStatus('current')
cirAtmSpvcModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 73)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "cirAtmSpvcVccRemoteCePortAddr"))
if mibBuilder.loadTexts: cirAtmSpvcModifiedNotify.setStatus('current')
cirAtmSpvcModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 74)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "cirAtmSpvcVccRemoteCePortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: cirAtmSpvcModifyFailNotify.setStatus('current')
vbrAtmSpvcConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 75)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"))
if mibBuilder.loadTexts: vbrAtmSpvcConfiguredNotify.setStatus('current')
vbrAtmSpvcConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 76)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: vbrAtmSpvcConfigFailNotify.setStatus('current')
vbrAtmSpvcDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 77)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"))
if mibBuilder.loadTexts: vbrAtmSpvcDeletedNotify.setStatus('current')
vbrAtmSpvcModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 78)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"))
if mibBuilder.loadTexts: vbrAtmSpvcModifiedNotify.setStatus('current')
vbrAtmSpvcModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 79)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: vbrAtmSpvcModifyFailNotify.setStatus('current')
virtualUNIIntfCreatedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 80)).setObjects(("ACMIB", "virtualUNIIfIndex"), ("ACMIB", "virtualUNIVUNIId"))
if mibBuilder.loadTexts: virtualUNIIntfCreatedNotify.setStatus('current')
virtualUNIIntfCreateFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 81)).setObjects(("ACMIB", "virtualUNIIfIndex"), ("ACMIB", "virtualUNIVUNIId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: virtualUNIIntfCreateFailNotify.setStatus('current')
virtualUNIIntfModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 82)).setObjects(("ACMIB", "virtualUNIIfIndex"), ("ACMIB", "virtualUNIVUNIId"))
if mibBuilder.loadTexts: virtualUNIIntfModifiedNotify.setStatus('current')
virtualUNIIntfDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 83)).setObjects(("ACMIB", "virtualUNIIfIndex"), ("ACMIB", "virtualUNIVUNIId"))
if mibBuilder.loadTexts: virtualUNIIntfDeleteNotify.setStatus('current')
virtualUNIIntfModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 84)).setObjects(("ACMIB", "virtualUNIIfIndex"), ("ACMIB", "virtualUNIVUNIId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: virtualUNIIntfModifyFailNotify.setStatus('current')
virtualUNIIntfOutOfServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 85)).setObjects(("ACMIB", "virtualUNIIfIndex"), ("ACMIB", "virtualUNIVUNIId"))
if mibBuilder.loadTexts: virtualUNIIntfOutOfServiceNotify.setStatus('current')
virtualUNIIntfInServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 86)).setObjects(("ACMIB", "virtualUNIIfIndex"), ("ACMIB", "virtualUNIVUNIId"))
if mibBuilder.loadTexts: virtualUNIIntfInServiceNotify.setStatus('current')
gr303IgCreatedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 87)).setObjects(("ACMIB", "gr303IgId"))
if mibBuilder.loadTexts: gr303IgCreatedNotify.setStatus('current')
gr303IgCreateFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 88)).setObjects(("ACMIB", "gr303IgId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: gr303IgCreateFailNotify.setStatus('current')
gr303IgModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 89)).setObjects(("ACMIB", "gr303IgId"))
if mibBuilder.loadTexts: gr303IgModifiedNotify.setStatus('current')
gr303IgDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 90)).setObjects(("ACMIB", "gr303IgId"))
if mibBuilder.loadTexts: gr303IgDeleteNotify.setStatus('current')
gr303IgModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 91)).setObjects(("ACMIB", "gr303IgId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: gr303IgModifyFailNotify.setStatus('current')
gr303IgOutOfServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 92)).setObjects(("ACMIB", "gr303IgId"))
if mibBuilder.loadTexts: gr303IgOutOfServiceNotify.setStatus('current')
gr303IgInServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 93)).setObjects(("ACMIB", "gr303IgId"))
if mibBuilder.loadTexts: gr303IgInServiceNotify.setStatus('current')
gr303IgIntfAddedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 94)).setObjects(("ACMIB", "gr303IntfIgId"), ("ACMIB", "gr303IgIntfId"))
if mibBuilder.loadTexts: gr303IgIntfAddedNotify.setStatus('current')
gr303IgIntfAddFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 95)).setObjects(("ACMIB", "gr303IntfIgId"), ("ACMIB", "gr303IgIntfId"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: gr303IgIntfAddFailNotify.setStatus('current')
gr303IgIntfDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 96)).setObjects(("ACMIB", "gr303IntfIgId"), ("ACMIB", "gr303IgIntfId"))
if mibBuilder.loadTexts: gr303IgIntfDeleteNotify.setStatus('current')
gr303TMCChanDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 97)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "gr303TMCChannelId"))
if mibBuilder.loadTexts: gr303TMCChanDownNotify.setStatus('current')
gr303EOCChanDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 98)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "gr303EOCChannelId"))
if mibBuilder.loadTexts: gr303EOCChanDownNotify.setStatus('current')
gr303TMCChanUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 99)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "gr303TMCChannelId"))
if mibBuilder.loadTexts: gr303TMCChanUpNotify.setStatus('current')
gr303EOCChanUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 100)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "gr303EOCChannelId"))
if mibBuilder.loadTexts: gr303EOCChanUpNotify.setStatus('current')
gr303PPSStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 101)).setObjects(("ACMIB", "gr303IgId"), ("ACMIB", "gr303PPSReasonCode"), ("ACMIB", "gr303PPSSource"), ("ACMIB", "gr303IgPrimaryTMCStatus"), ("ACMIB", "gr303IgPrimaryEOCStatus"), ("ACMIB", "gr303IgBackupTMCStatus"), ("ACMIB", "gr303IgBackupEOCStatus"))
if mibBuilder.loadTexts: gr303PPSStateChangeNotify.setStatus('current')
gr303PPSSwitchoverNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 102)).setObjects(("ACMIB", "gr303IgId"), ("ACMIB", "gr303PPSReasonCode"), ("ACMIB", "gr303PPSSource"), ("ACMIB", "gr303IgPrimaryTMCStatus"), ("ACMIB", "gr303IgPrimaryEOCStatus"), ("ACMIB", "gr303IgBackupTMCStatus"), ("ACMIB", "gr303IgBackupEOCStatus"))
if mibBuilder.loadTexts: gr303PPSSwitchoverNotify.setStatus('current')
gr303PPSCommandFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 103)).setObjects(("ACMIB", "gr303IgId"), ("ACMIB", "gr303PPSReasonCode"), ("ACMIB", "gr303PPSSource"), ("ACMIB", "gr303IgPrimaryTMCStatus"), ("ACMIB", "gr303IgPrimaryEOCStatus"), ("ACMIB", "gr303IgBackupTMCStatus"), ("ACMIB", "gr303IgBackupEOCStatus"))
if mibBuilder.loadTexts: gr303PPSCommandFailNotify.setStatus('current')
interfaceBandwidthChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 104)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "interfaceFailureReasonCode"))
if mibBuilder.loadTexts: interfaceBandwidthChangeNotify.setStatus('current')
atmAtmSpvpConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 105)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVpcVpiA"), ("ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvpConfiguredNotify.setStatus('current')
atmAtmSpvpConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 106)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVpcVpiA"), ("ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: atmAtmSpvpConfigFailNotify.setStatus('current')
atmAtmSpvpDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 107)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVpcVpiA"), ("ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvpDeletedNotify.setStatus('current')
atmAtmSpvpModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 108)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVpcVpiA"), ("ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"))
if mibBuilder.loadTexts: atmAtmSpvpModifiedNotify.setStatus('current')
atmAtmSpvpModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 109)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVpcVpiA"), ("ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"), ("ACMIB", "spvcConfigFailureCode"))
if mibBuilder.loadTexts: atmAtmSpvpModifyFailNotify.setStatus('current')
atmTrunkingLocalIWFConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 110)).setObjects(("ACMIB", "atmTrunkingIWFIdentifier"))
if mibBuilder.loadTexts: atmTrunkingLocalIWFConfiguredNotify.setStatus('current')
atmTrunkingLocalIWFConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 111)).setObjects(("ACMIB", "atmTrunkingIWFIdentifier"), ("ACMIB", "atmTrunkingConfigFailureCode"))
if mibBuilder.loadTexts: atmTrunkingLocalIWFConfigFailNotify.setStatus('current')
atmTrunkingLocalIWFModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 112)).setObjects(("ACMIB", "atmTrunkingIWFIdentifier"))
if mibBuilder.loadTexts: atmTrunkingLocalIWFModifiedNotify.setStatus('current')
atmTrunkingLocalIWFModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 113)).setObjects(("ACMIB", "atmTrunkingIWFIdentifier"), ("ACMIB", "atmTrunkingConfigFailureCode"))
if mibBuilder.loadTexts: atmTrunkingLocalIWFModifyFailNotify.setStatus('current')
atmTrunkingLocalIWFDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 114)).setObjects(("ACMIB", "atmTrunkingIWFIdentifier"))
if mibBuilder.loadTexts: atmTrunkingLocalIWFDeletedNotify.setStatus('current')
atmTrunkingLocalIWFDeleteFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 115)).setObjects(("ACMIB", "atmTrunkingIWFIdentifier"), ("ACMIB", "atmTrunkingConfigFailureCode"))
if mibBuilder.loadTexts: atmTrunkingLocalIWFDeleteFailNotify.setStatus('current')
atmTrunkingRemoteIWFConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 116)).setObjects(("ACMIB", "atmTrunkingRemoteIWFIdentifier"))
if mibBuilder.loadTexts: atmTrunkingRemoteIWFConfiguredNotify.setStatus('current')
atmTrunkingRemoteIWFConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 117)).setObjects(("ACMIB", "atmTrunkingRemoteIWFIdentifier"), ("ACMIB", "atmTrunkingConfigFailureCode"))
if mibBuilder.loadTexts: atmTrunkingRemoteIWFConfigFailNotify.setStatus('current')
atmTrunkingRemoteIWFDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 118)).setObjects(("ACMIB", "atmTrunkingRemoteIWFIdentifier"))
if mibBuilder.loadTexts: atmTrunkingRemoteIWFDeletedNotify.setStatus('current')
atmTrunkingRemoteIWFModifiedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 119)).setObjects(("ACMIB", "atmTrunkingRemoteIWFIdentifier"))
if mibBuilder.loadTexts: atmTrunkingRemoteIWFModifiedNotify.setStatus('current')
atmTrunkingRemoteIWFModifyFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 120)).setObjects(("ACMIB", "atmTrunkingRemoteIWFIdentifier"), ("ACMIB", "atmTrunkingConfigFailureCode"))
if mibBuilder.loadTexts: atmTrunkingRemoteIWFModifyFailNotify.setStatus('current')
atmTrunkingSigVccConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 121)).setObjects(("ACMIB", "atmTrunkingSigVccRmtIWFIdentifier"), ("ACMIB", "atmTrunkingSigVccIdentifier"))
if mibBuilder.loadTexts: atmTrunkingSigVccConfiguredNotify.setStatus('current')
atmTrunkingSigVccConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 122)).setObjects(("ACMIB", "atmTrunkingSigVccRmtIWFIdentifier"), ("ACMIB", "atmTrunkingSigVccIdentifier"), ("ACMIB", "atmTrunkingConfigFailureCode"))
if mibBuilder.loadTexts: atmTrunkingSigVccConfigFailNotify.setStatus('current')
atmTrunkingSigVccDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 123)).setObjects(("ACMIB", "atmTrunkingSigVccRmtIWFIdentifier"), ("ACMIB", "atmTrunkingSigVccIdentifier"))
if mibBuilder.loadTexts: atmTrunkingSigVccDeletedNotify.setStatus('current')
atmTrunkingBrVccConfiguredNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 124)).setObjects(("ACMIB", "atmTrunkingBrVccRmtIWFId"), ("ACMIB", "atmTrunkingBrVccId"))
if mibBuilder.loadTexts: atmTrunkingBrVccConfiguredNotify.setStatus('current')
atmTrunkingBrVccConfigFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 125)).setObjects(("ACMIB", "atmTrunkingBrVccRmtIWFId"), ("ACMIB", "atmTrunkingBrVccId"), ("ACMIB", "atmTrunkingConfigFailureCode"))
if mibBuilder.loadTexts: atmTrunkingBrVccConfigFailNotify.setStatus('current')
atmTrunkingBrVccDeletedNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 3, 126)).setObjects(("ACMIB", "atmTrunkingBrVccRmtIWFId"), ("ACMIB", "atmTrunkingBrVccId"))
if mibBuilder.loadTexts: atmTrunkingBrVccDeletedNotify.setStatus('current')
atmPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 1)).setObjects(("ACMIB", "atmPvcVccIfA"), ("ACMIB", "atmPvcVccVpiA"), ("ACMIB", "atmPvcVccVciA"), ("ACMIB", "atmPvcVccIfB"), ("ACMIB", "atmPvcVccVpiB"), ("ACMIB", "atmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: atmPvcVccReqFailNotify.setStatus('current')
atmPvcVpcReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 2)).setObjects(("ACMIB", "atmPvcVpcIfA"), ("ACMIB", "atmPvcVpcVpiA"), ("ACMIB", "atmPvcVpcIfB"), ("ACMIB", "atmPvcVpcVpiB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: atmPvcVpcReqFailNotify.setStatus('current')
ipAtmAppPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 3)).setObjects(("ACMIB", "ipAtmAppPvcVccDestAddrA"), ("ACMIB", "ipAtmAppPvcVccSubnetMaskA"), ("ACMIB", "ipAtmAppPvcVccIfB"), ("ACMIB", "ipAtmAppPvcVccVpiB"), ("ACMIB", "ipAtmAppPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: ipAtmAppPvcVccReqFailNotify.setStatus('current')
cirEmAtmPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 4)).setObjects(("ACMIB", "cirEmAtmPvcVccIfA"), ("ACMIB", "cirEmAtmPvcVccIfB"), ("ACMIB", "cirEmAtmPvcVccVpiB"), ("ACMIB", "cirEmAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: cirEmAtmPvcVccReqFailNotify.setStatus('current')
vbrAtmPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 5)).setObjects(("ACMIB", "vbrAtmPvcVccIfA"), ("ACMIB", "vbrAtmPvcVccIfB"), ("ACMIB", "vbrAtmPvcVccVpiB"), ("ACMIB", "vbrAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: vbrAtmPvcVccReqFailNotify.setStatus('current')
frAtmPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 6)).setObjects(("ACMIB", "frAtmPvcVccIfA"), ("ACMIB", "frAtmPvcVccDlciA"), ("ACMIB", "frAtmPvcVccIfB"), ("ACMIB", "frAtmPvcVccVpiB"), ("ACMIB", "frAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: frAtmPvcVccReqFailNotify.setStatus('current')
frFrPvcReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 7)).setObjects(("ACMIB", "frFrPvcIfA"), ("ACMIB", "frFrPvcDlciA"), ("ACMIB", "frFrPvcIfB"), ("ACMIB", "frFrPvcDlciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: frFrPvcReqFailNotify.setStatus('current')
cirEmCirEmPvcReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 8)).setObjects(("ACMIB", "cirEmCirEmPvcIfA"), ("ACMIB", "cirEmCirEmPvcIfB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: cirEmCirEmPvcReqFailNotify.setStatus('current')
vbrVbrPvcReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 9)).setObjects(("ACMIB", "vbrVbrPvcIfA"), ("ACMIB", "vbrVbrPvcIfB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: vbrVbrPvcReqFailNotify.setStatus('current')
atmPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 10)).setObjects(("ACMIB", "atmPvcVccIfA"), ("ACMIB", "atmPvcVccVpiA"), ("ACMIB", "atmPvcVccVciA"), ("ACMIB", "atmPvcVccIfB"), ("ACMIB", "atmPvcVccVpiB"), ("ACMIB", "atmPvcVccVciB"))
if mibBuilder.loadTexts: atmPvcVccSetupNotify.setStatus('current')
atmPvcVpcSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 11)).setObjects(("ACMIB", "atmPvcVpcIfA"), ("ACMIB", "atmPvcVpcVpiA"), ("ACMIB", "atmPvcVpcIfB"), ("ACMIB", "atmPvcVpcVpiB"))
if mibBuilder.loadTexts: atmPvcVpcSetupNotify.setStatus('current')
ipAtmAppPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 12)).setObjects(("ACMIB", "ipAtmAppPvcVccDestAddrA"), ("ACMIB", "ipAtmAppPvcVccSubnetMaskA"), ("ACMIB", "ipAtmAppPvcVccIfB"), ("ACMIB", "ipAtmAppPvcVccVpiB"), ("ACMIB", "ipAtmAppPvcVccVciB"))
if mibBuilder.loadTexts: ipAtmAppPvcVccSetupNotify.setStatus('current')
cirEmAtmPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 13)).setObjects(("ACMIB", "cirEmAtmPvcVccIfA"), ("ACMIB", "cirEmAtmPvcVccIfB"), ("ACMIB", "cirEmAtmPvcVccVpiB"), ("ACMIB", "cirEmAtmPvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmPvcVccSetupNotify.setStatus('current')
vbrAtmPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 14)).setObjects(("ACMIB", "vbrAtmPvcVccIfA"), ("ACMIB", "vbrAtmPvcVccIfB"), ("ACMIB", "vbrAtmPvcVccVpiB"), ("ACMIB", "vbrAtmPvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmPvcVccSetupNotify.setStatus('current')
frAtmPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 15)).setObjects(("ACMIB", "frAtmPvcVccIfA"), ("ACMIB", "frAtmPvcVccDlciA"), ("ACMIB", "frAtmPvcVccIfB"), ("ACMIB", "frAtmPvcVccVpiB"), ("ACMIB", "frAtmPvcVccVciB"))
if mibBuilder.loadTexts: frAtmPvcVccSetupNotify.setStatus('current')
frFrPvcSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 16)).setObjects(("ACMIB", "frFrPvcIfA"), ("ACMIB", "frFrPvcDlciA"), ("ACMIB", "frFrPvcIfB"), ("ACMIB", "frFrPvcDlciB"))
if mibBuilder.loadTexts: frFrPvcSetupNotify.setStatus('current')
cirEmCirEmPvcSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 17)).setObjects(("ACMIB", "cirEmCirEmPvcIfA"), ("ACMIB", "cirEmCirEmPvcIfB"))
if mibBuilder.loadTexts: cirEmCirEmPvcSetupNotify.setStatus('current')
vbrVbrPvcSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 18)).setObjects(("ACMIB", "vbrVbrPvcIfA"), ("ACMIB", "vbrVbrPvcIfB"))
if mibBuilder.loadTexts: vbrVbrPvcSetupNotify.setStatus('current')
atmPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 19)).setObjects(("ACMIB", "atmPvcVccIfA"), ("ACMIB", "atmPvcVccVpiA"), ("ACMIB", "atmPvcVccVciA"), ("ACMIB", "atmPvcVccIfB"), ("ACMIB", "atmPvcVccVpiB"), ("ACMIB", "atmPvcVccVciB"))
if mibBuilder.loadTexts: atmPvcVccTearDownNotify.setStatus('current')
atmPvcVpcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 20)).setObjects(("ACMIB", "atmPvcVpcIfA"), ("ACMIB", "atmPvcVpcVpiA"), ("ACMIB", "atmPvcVpcIfB"), ("ACMIB", "atmPvcVpcVpiB"))
if mibBuilder.loadTexts: atmPvcVpcTearDownNotify.setStatus('current')
ipAtmAppPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 21)).setObjects(("ACMIB", "ipAtmAppPvcVccDestAddrA"), ("ACMIB", "ipAtmAppPvcVccSubnetMaskA"), ("ACMIB", "ipAtmAppPvcVccIfB"), ("ACMIB", "ipAtmAppPvcVccVpiB"), ("ACMIB", "ipAtmAppPvcVccVciB"))
if mibBuilder.loadTexts: ipAtmAppPvcVccTearDownNotify.setStatus('current')
cirEmAtmPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 22)).setObjects(("ACMIB", "cirEmAtmPvcVccIfA"), ("ACMIB", "cirEmAtmPvcVccIfB"), ("ACMIB", "cirEmAtmPvcVccVpiB"), ("ACMIB", "cirEmAtmPvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmPvcVccTearDownNotify.setStatus('current')
vbrAtmPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 23)).setObjects(("ACMIB", "vbrAtmPvcVccIfA"), ("ACMIB", "vbrAtmPvcVccIfB"), ("ACMIB", "vbrAtmPvcVccVpiB"), ("ACMIB", "vbrAtmPvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmPvcVccTearDownNotify.setStatus('current')
frAtmPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 24)).setObjects(("ACMIB", "frAtmPvcVccIfA"), ("ACMIB", "frAtmPvcVccDlciA"), ("ACMIB", "frAtmPvcVccIfB"), ("ACMIB", "frAtmPvcVccVpiB"), ("ACMIB", "frAtmPvcVccVciB"))
if mibBuilder.loadTexts: frAtmPvcVccTearDownNotify.setStatus('current')
frFrPvcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 25)).setObjects(("ACMIB", "frFrPvcIfA"), ("ACMIB", "frFrPvcDlciA"), ("ACMIB", "frFrPvcIfB"), ("ACMIB", "frFrPvcDlciB"))
if mibBuilder.loadTexts: frFrPvcTearDownNotify.setStatus('current')
cirEmCirEmPvcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 26)).setObjects(("ACMIB", "cirEmCirEmPvcIfA"), ("ACMIB", "cirEmCirEmPvcIfB"))
if mibBuilder.loadTexts: cirEmCirEmPvcTearDownNotify.setStatus('current')
vbrVbrPvcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 27)).setObjects(("ACMIB", "vbrVbrPvcIfA"), ("ACMIB", "vbrVbrPvcIfB"))
if mibBuilder.loadTexts: vbrVbrPvcTearDownNotify.setStatus('current')
bridgeBridgePvcReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 28)).setObjects(("ACMIB", "bridgeBridgePvcIfA"), ("ACMIB", "bridgeBridgePvcIfB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: bridgeBridgePvcReqFailNotify.setStatus('current')
bridgeBridgePvcSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 29)).setObjects(("ACMIB", "bridgeBridgePvcIfA"), ("ACMIB", "bridgeBridgePvcIfB"))
if mibBuilder.loadTexts: bridgeBridgePvcSetupNotify.setStatus('current')
bridgeBridgePvcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 30)).setObjects(("ACMIB", "bridgeBridgePvcIfA"), ("ACMIB", "bridgeBridgePvcIfB"))
if mibBuilder.loadTexts: bridgeBridgePvcTearDownNotify.setStatus('current')
bridgeAtmPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 31)).setObjects(("ACMIB", "bridgeAtmPvcVccIfA"), ("ACMIB", "bridgeAtmPvcVccIfB"), ("ACMIB", "bridgeAtmPvcVccVpiB"), ("ACMIB", "bridgeAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: bridgeAtmPvcVccReqFailNotify.setStatus('current')
bridgeAtmPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 32)).setObjects(("ACMIB", "bridgeAtmPvcVccIfA"), ("ACMIB", "bridgeAtmPvcVccIfB"), ("ACMIB", "bridgeAtmPvcVccVpiB"), ("ACMIB", "bridgeAtmPvcVccVciB"))
if mibBuilder.loadTexts: bridgeAtmPvcVccSetupNotify.setStatus('current')
bridgeAtmPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 33)).setObjects(("ACMIB", "bridgeAtmPvcVccIfA"), ("ACMIB", "bridgeAtmPvcVccIfB"), ("ACMIB", "bridgeAtmPvcVccVpiB"), ("ACMIB", "bridgeAtmPvcVccVciB"))
if mibBuilder.loadTexts: bridgeAtmPvcVccTearDownNotify.setStatus('current')
cellTestReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 34)).setObjects(("ACMIB", "cellTestIfB"), ("ACMIB", "cellTestVpiB"), ("ACMIB", "cellTestVcidB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: cellTestReqFailNotify.setStatus('current')
lmiDlciStatusNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 35)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "dlciNumber"), ("ACMIB", "lmiDlciOperStatus"))
if mibBuilder.loadTexts: lmiDlciStatusNotify.setStatus('current')
cirEmAtmBkPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 36)).setObjects(("ACMIB", "cirEmAtmPvcVccIfA"), ("ACMIB", "cirEmAtmPvcVccIfB"), ("ACMIB", "cirEmAtmPvcVccVpiB"), ("ACMIB", "cirEmAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: cirEmAtmBkPvcVccReqFailNotify.setStatus('current')
cirEmAtmBkPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 37)).setObjects(("ACMIB", "cirEmAtmPvcVccIfA"), ("ACMIB", "cirEmAtmPvcVccIfB"), ("ACMIB", "cirEmAtmPvcVccVpiB"), ("ACMIB", "cirEmAtmPvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmBkPvcVccSetupNotify.setStatus('current')
cirEmAtmBkPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 38)).setObjects(("ACMIB", "cirEmAtmPvcVccIfA"), ("ACMIB", "cirEmAtmPvcVccIfB"), ("ACMIB", "cirEmAtmPvcVccVpiB"), ("ACMIB", "cirEmAtmPvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmBkPvcVccTearDownNotify.setStatus('current')
vbrAtmBkPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 39)).setObjects(("ACMIB", "vbrAtmPvcVccIfA"), ("ACMIB", "vbrAtmPvcVccIfB"), ("ACMIB", "vbrAtmPvcVccVpiB"), ("ACMIB", "vbrAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: vbrAtmBkPvcVccReqFailNotify.setStatus('current')
vbrAtmBkPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 40)).setObjects(("ACMIB", "vbrAtmPvcVccIfA"), ("ACMIB", "vbrAtmPvcVccIfB"), ("ACMIB", "vbrAtmPvcVccVpiB"), ("ACMIB", "vbrAtmPvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmBkPvcVccSetupNotify.setStatus('current')
vbrAtmBkPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 41)).setObjects(("ACMIB", "vbrAtmPvcVccIfA"), ("ACMIB", "vbrAtmPvcVccIfB"), ("ACMIB", "vbrAtmPvcVccVpiB"), ("ACMIB", "vbrAtmPvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmBkPvcVccTearDownNotify.setStatus('current')
atmBkPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 42)).setObjects(("ACMIB", "atmPvcVccIfA"), ("ACMIB", "atmPvcVccVpiA"), ("ACMIB", "atmPvcVccVciA"), ("ACMIB", "atmPvcVccIfB"), ("ACMIB", "atmPvcVccVpiB"), ("ACMIB", "atmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: atmBkPvcVccReqFailNotify.setStatus('current')
atmBkPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 43)).setObjects(("ACMIB", "atmPvcVccIfA"), ("ACMIB", "atmPvcVccVpiA"), ("ACMIB", "atmPvcVccVciA"), ("ACMIB", "atmPvcVccIfB"), ("ACMIB", "atmPvcVccVpiB"), ("ACMIB", "atmPvcVccVciB"))
if mibBuilder.loadTexts: atmBkPvcVccSetupNotify.setStatus('current')
atmBkPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 44)).setObjects(("ACMIB", "atmPvcVccIfA"), ("ACMIB", "atmPvcVccVpiA"), ("ACMIB", "atmPvcVccVciA"), ("ACMIB", "atmPvcVccIfB"), ("ACMIB", "atmPvcVccVpiB"), ("ACMIB", "atmPvcVccVciB"))
if mibBuilder.loadTexts: atmBkPvcVccTearDownNotify.setStatus('current')
frAtmBkPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 45)).setObjects(("ACMIB", "frAtmPvcVccIfA"), ("ACMIB", "frAtmPvcVccDlciA"), ("ACMIB", "frAtmPvcVccIfB"), ("ACMIB", "frAtmPvcVccVpiB"), ("ACMIB", "frAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: frAtmBkPvcVccReqFailNotify.setStatus('current')
frAtmBkPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 46)).setObjects(("ACMIB", "frAtmPvcVccIfA"), ("ACMIB", "frAtmPvcVccDlciA"), ("ACMIB", "frAtmPvcVccIfB"), ("ACMIB", "frAtmPvcVccVpiB"), ("ACMIB", "frAtmPvcVccVciB"))
if mibBuilder.loadTexts: frAtmBkPvcVccSetupNotify.setStatus('current')
frAtmBkPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 47)).setObjects(("ACMIB", "frAtmPvcVccIfA"), ("ACMIB", "frAtmPvcVccDlciA"), ("ACMIB", "frAtmPvcVccIfB"), ("ACMIB", "frAtmPvcVccVpiB"), ("ACMIB", "frAtmPvcVccVciB"))
if mibBuilder.loadTexts: frAtmBkPvcVccTearDownNotify.setStatus('current')
atmBkPvcVpcReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 48)).setObjects(("ACMIB", "atmPvcVpcIfA"), ("ACMIB", "atmPvcVpcVpiA"), ("ACMIB", "atmPvcVpcIfB"), ("ACMIB", "atmPvcVpcVpiB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: atmBkPvcVpcReqFailNotify.setStatus('current')
atmBkPvcVpcSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 49)).setObjects(("ACMIB", "atmPvcVpcIfA"), ("ACMIB", "atmPvcVpcVpiA"), ("ACMIB", "atmPvcVpcIfB"), ("ACMIB", "atmPvcVpcVpiB"))
if mibBuilder.loadTexts: atmBkPvcVpcSetupNotify.setStatus('current')
atmBkPvcVpcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 50)).setObjects(("ACMIB", "atmPvcVpcIfA"), ("ACMIB", "atmPvcVpcVpiA"), ("ACMIB", "atmPvcVpcIfB"), ("ACMIB", "atmPvcVpcVpiB"))
if mibBuilder.loadTexts: atmBkPvcVpcTearDownNotify.setStatus('current')
bridgeAtmBkPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 51)).setObjects(("ACMIB", "bridgeAtmPvcVccIfA"), ("ACMIB", "bridgeAtmPvcVccIfB"), ("ACMIB", "bridgeAtmPvcVccVpiB"), ("ACMIB", "bridgeAtmPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: bridgeAtmBkPvcVccReqFailNotify.setStatus('current')
bridgeAtmBkPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 52)).setObjects(("ACMIB", "bridgeAtmPvcVccIfA"), ("ACMIB", "bridgeAtmPvcVccIfB"), ("ACMIB", "bridgeAtmPvcVccVpiB"), ("ACMIB", "bridgeAtmPvcVccVciB"))
if mibBuilder.loadTexts: bridgeAtmBkPvcVccSetupNotify.setStatus('current')
bridgeAtmBkPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 53)).setObjects(("ACMIB", "bridgeAtmPvcVccIfA"), ("ACMIB", "bridgeAtmPvcVccIfB"), ("ACMIB", "bridgeAtmPvcVccVpiB"), ("ACMIB", "bridgeAtmPvcVccVciB"))
if mibBuilder.loadTexts: bridgeAtmBkPvcVccTearDownNotify.setStatus('current')
ipAtmBkAppPvcVccReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 54)).setObjects(("ACMIB", "ipAtmAppPvcVccDestAddrA"), ("ACMIB", "ipAtmAppPvcVccSubnetMaskA"), ("ACMIB", "ipAtmAppPvcVccIfB"), ("ACMIB", "ipAtmAppPvcVccVpiB"), ("ACMIB", "ipAtmAppPvcVccVciB"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: ipAtmBkAppPvcVccReqFailNotify.setStatus('current')
ipAtmBkAppPvcVccSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 55)).setObjects(("ACMIB", "ipAtmAppPvcVccDestAddrA"), ("ACMIB", "ipAtmAppPvcVccSubnetMaskA"), ("ACMIB", "ipAtmAppPvcVccIfB"), ("ACMIB", "ipAtmAppPvcVccVpiB"), ("ACMIB", "ipAtmAppPvcVccVciB"))
if mibBuilder.loadTexts: ipAtmBkAppPvcVccSetupNotify.setStatus('current')
ipAtmBkAppPvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 56)).setObjects(("ACMIB", "ipAtmAppPvcVccDestAddrA"), ("ACMIB", "ipAtmAppPvcVccSubnetMaskA"), ("ACMIB", "ipAtmAppPvcVccIfB"), ("ACMIB", "ipAtmAppPvcVccVpiB"), ("ACMIB", "ipAtmAppPvcVccVciB"))
if mibBuilder.loadTexts: ipAtmBkAppPvcVccTearDownNotify.setStatus('current')
cirEmAtmSpvcVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 57)).setObjects(("ACMIB", "cirEmAtmSpvcVccIfA"), ("ACMIB", "cirEmAtmSpvcVccIfB"), ("ACMIB", "cirEmAtmSpvcVccVpiB"), ("ACMIB", "cirEmAtmSpvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmSpvcVccSetUpNotify.setStatus('current')
vbrAtmSpvcVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 58)).setObjects(("ACMIB", "vbrAtmSpvcVccIfA"), ("ACMIB", "vbrAtmSpvcVccIfB"), ("ACMIB", "vbrAtmSpvcVccVpiB"), ("ACMIB", "vbrAtmSpvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmSpvcVccSetUpNotify.setStatus('current')
atmSpvcVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 59)).setObjects(("ACMIB", "atmSpvcVccIfA"), ("ACMIB", "atmSpvcVccVpiA"), ("ACMIB", "atmSpvcVccVciA"), ("ACMIB", "atmSpvcVccIfB"), ("ACMIB", "atmSpvcVccVpiB"), ("ACMIB", "atmSpvcVccVciB"))
if mibBuilder.loadTexts: atmSpvcVccSetUpNotify.setStatus('current')
cirEmAtmSpvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 60)).setObjects(("ACMIB", "cirEmAtmSpvcVccIfA"), ("ACMIB", "cirEmAtmSpvcVccIfB"), ("ACMIB", "cirEmAtmSpvcVccVpiB"), ("ACMIB", "cirEmAtmSpvcVccVciB"))
if mibBuilder.loadTexts: cirEmAtmSpvcVccTearDownNotify.setStatus('current')
vbrAtmSpvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 61)).setObjects(("ACMIB", "vbrAtmSpvcVccIfA"), ("ACMIB", "vbrAtmSpvcVccIfB"), ("ACMIB", "vbrAtmSpvcVccVpiB"), ("ACMIB", "vbrAtmSpvcVccVciB"))
if mibBuilder.loadTexts: vbrAtmSpvcVccTearDownNotify.setStatus('current')
atmSpvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 62)).setObjects(("ACMIB", "atmSpvcVccIfA"), ("ACMIB", "atmSpvcVccVpiA"), ("ACMIB", "atmSpvcVccVciA"), ("ACMIB", "atmSpvcVccIfB"), ("ACMIB", "atmSpvcVccVpiB"), ("ACMIB", "atmSpvcVccVciB"))
if mibBuilder.loadTexts: atmSpvcVccTearDownNotify.setStatus('current')
oamTestReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 63)).setObjects(("ACMIB", "oamTestIfB"), ("ACMIB", "oamTestVpiB"), ("ACMIB", "oamTestVciB"), ("ACMIB", "oamTestFailureReasonCode"))
if mibBuilder.loadTexts: oamTestReqFailNotify.setStatus('current')
oamActDeactResultNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 64)).setObjects(("ACMIB", "oamActDeactIfB"), ("ACMIB", "oamActDeactVpiB"), ("ACMIB", "oamActDeactVciB"), ("ACMIB", "oamActDeactResultCode"))
if mibBuilder.loadTexts: oamActDeactResultNotify.setStatus('current')
frAtmSpvcVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 65)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "frAtmSpvcVccDlciA"), ("ACMIB", "frAtmSpvcVccIfB"), ("ACMIB", "frAtmSpvcVccVpiB"), ("ACMIB", "frAtmSpvcVccVciB"))
if mibBuilder.loadTexts: frAtmSpvcVccSetUpNotify.setStatus('current')
frAtmSpvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 66)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "frAtmSpvcVccDlciA"), ("ACMIB", "frAtmSpvcVccIfB"), ("ACMIB", "frAtmSpvcVccVpiB"), ("ACMIB", "frAtmSpvcVccVciB"))
if mibBuilder.loadTexts: frAtmSpvcVccTearDownNotify.setStatus('current')
atmAtmSpvcVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 67)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVccVciA"), ("ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"), ("ACMIB", "atmAtmSpvcVccIfB"), ("ACMIB", "atmAtmSpvcVccVpiB"), ("ACMIB", "atmAtmSpvcVccVciB"))
if mibBuilder.loadTexts: atmAtmSpvcVccSetUpNotify.setStatus('current')
atmAtmSpvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 68)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVccVciA"), ("ACMIB", "atmAtmSpvcVccRemoteAtmPortAddr"), ("ACMIB", "atmAtmSpvcVccIfB"), ("ACMIB", "atmAtmSpvcVccVpiB"), ("ACMIB", "atmAtmSpvcVccVciB"))
if mibBuilder.loadTexts: atmAtmSpvcVccTearDownNotify.setStatus('current')
cirAtmSpvcVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 69)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "cirAtmSpvcVccRemoteCePortAddr"), ("ACMIB", "cirAtmSpvcVccIfB"), ("ACMIB", "cirAtmSpvcVccVpiB"), ("ACMIB", "cirAtmSpvcVccVciB"))
if mibBuilder.loadTexts: cirAtmSpvcVccSetUpNotify.setStatus('current')
cirAtmSpvcVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 70)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "cirAtmSpvcVccRemoteCePortAddr"), ("ACMIB", "cirAtmSpvcVccIfB"), ("ACMIB", "cirAtmSpvcVccVpiB"), ("ACMIB", "cirAtmSpvcVccVciB"))
if mibBuilder.loadTexts: cirAtmSpvcVccTearDownNotify.setStatus('current')
vbrAtmSpvcSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 71)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"), ("ACMIB", "vbrAtmSpvcIfB"), ("ACMIB", "vbrAtmSpvcVpiB"), ("ACMIB", "vbrAtmSpvcVciB"))
if mibBuilder.loadTexts: vbrAtmSpvcSetUpNotify.setStatus('current')
vbrAtmSpvcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 72)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "vbrAtmSpvcRemoteVbrPortAddr"), ("ACMIB", "vbrAtmSpvcIfB"), ("ACMIB", "vbrAtmSpvcVpiB"), ("ACMIB", "vbrAtmSpvcVciB"))
if mibBuilder.loadTexts: vbrAtmSpvcTearDownNotify.setStatus('current')
aal2TrunkConfigSetupNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 73)).setObjects(("ACMIB", "aal2TrunkConfigIf"), ("ACMIB", "aal2TrunkConfigVpi"), ("ACMIB", "aal2TrunkConfigVci"))
if mibBuilder.loadTexts: aal2TrunkConfigSetupNotify.setStatus('current')
aal2TrunkConfigTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 74)).setObjects(("ACMIB", "aal2TrunkConfigIf"), ("ACMIB", "aal2TrunkConfigVpi"), ("ACMIB", "aal2TrunkConfigVci"))
if mibBuilder.loadTexts: aal2TrunkConfigTearDownNotify.setStatus('current')
aal2TrunkConfigReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 75)).setObjects(("ACMIB", "aal2TrunkConfigIf"), ("ACMIB", "aal2TrunkConfigVpi"), ("ACMIB", "aal2TrunkConfigVci"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: aal2TrunkConfigReqFailNotify.setStatus('current')
gr303Aal2PvcConfigReqFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 76)).setObjects(("ACMIB", "gr303Aal2PvcVccGr303IgId"), ("ACMIB", "gr303Aal2PvcVccGr303CallRef"), ("ACMIB", "gr303Aal2PvcVccIfB"), ("ACMIB", "gr303Aal2PvcVccVpiB"), ("ACMIB", "gr303Aal2PvcVccVciB"), ("ACMIB", "gr303Aal2PvcVccAal2Cid"))
if mibBuilder.loadTexts: gr303Aal2PvcConfigReqFailNotify.setStatus('current')
gr303Aal2PvcSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 77)).setObjects(("ACMIB", "gr303Aal2PvcVccGr303IgId"), ("ACMIB", "gr303Aal2PvcVccGr303CallRef"), ("ACMIB", "gr303Aal2PvcVccIfB"), ("ACMIB", "gr303Aal2PvcVccVpiB"), ("ACMIB", "gr303Aal2PvcVccVciB"), ("ACMIB", "gr303Aal2PvcVccAal2Cid"))
if mibBuilder.loadTexts: gr303Aal2PvcSetUpNotify.setStatus('current')
gr303Aal2PvcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 78)).setObjects(("ACMIB", "gr303Aal2PvcVccGr303IgId"), ("ACMIB", "gr303Aal2PvcVccGr303CallRef"), ("ACMIB", "gr303Aal2PvcVccIfB"), ("ACMIB", "gr303Aal2PvcVccVpiB"), ("ACMIB", "gr303Aal2PvcVccVciB"), ("ACMIB", "gr303Aal2PvcVccAal2Cid"))
if mibBuilder.loadTexts: gr303Aal2PvcTearDownNotify.setStatus('current')
dhpvcChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 79)).setObjects(("ACMIB", "interfaceIndex"), ("ACMIB", "atmVpi"), ("ACMIB", "atmVci"), ("ACMIB", "pvcFailureReasonCode"))
if mibBuilder.loadTexts: dhpvcChangeNotify.setStatus('current')
atmAtmSpvcVpcSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 80)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVpcVpiA"), ("ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"), ("ACMIB", "atmAtmSpvcVpcIfB"), ("ACMIB", "atmAtmSpvcVccVpiB"))
if mibBuilder.loadTexts: atmAtmSpvcVpcSetUpNotify.setStatus('current')
atmAtmSpvcVpcTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 81)).setObjects(("ACMIB", "spvcAddrIfA"), ("ACMIB", "atmAtmSpvcVccVpiA"), ("ACMIB", "atmAtmSpvcVpcRemoteAtmPortAddr"), ("ACMIB", "atmAtmSpvcVpcIfB"), ("ACMIB", "atmAtmSpvcVpcVpiB"))
if mibBuilder.loadTexts: atmAtmSpvcVpcTearDownNotify.setStatus('current')
iptResultNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 82)).setObjects(("ACMIB", "iptGroupId"), ("ACMIB", "iptLogicalIntfId"), ("ACMIB", "iptResultCode"))
if mibBuilder.loadTexts: iptResultNotify.setStatus('current')
pgtResultNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 83)).setObjects(("ACMIB", "pgtGroupId"), ("ACMIB", "pgtResultCode"))
if mibBuilder.loadTexts: pgtResultNotify.setStatus('current')
atmTrunkingSigVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 84)).setObjects(("ACMIB", "atmTrunkingSigVccRmtIWFIdentifier"), ("ACMIB", "atmTrunkingSigVccIdentifier"))
if mibBuilder.loadTexts: atmTrunkingSigVccSetUpNotify.setStatus('current')
atmTrunkingSigVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 85)).setObjects(("ACMIB", "atmTrunkingSigVccRmtIWFIdentifier"), ("ACMIB", "atmTrunkingSigVccIdentifier"))
if mibBuilder.loadTexts: atmTrunkingSigVccTearDownNotify.setStatus('current')
atmTrunkingBrVccSetUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 86)).setObjects(("ACMIB", "atmTrunkingBrVccRmtIWFId"), ("ACMIB", "atmTrunkingBrVccId"))
if mibBuilder.loadTexts: atmTrunkingBrVccSetUpNotify.setStatus('current')
atmTrunkingBrVccTearDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 18, 8, 4, 87)).setObjects(("ACMIB", "atmTrunkingBrVccRmtIWFId"), ("ACMIB", "atmTrunkingBrVccId"))
if mibBuilder.loadTexts: atmTrunkingBrVccTearDownNotify.setStatus('current')
mibBuilder.exportSymbols("ACMIB", viprSubChnlCommitedInfoRate=viprSubChnlCommitedInfoRate, atmUniIlmiConfigProc=atmUniIlmiConfigProc, casConfigTable=casConfigTable, cirAtmSpvcVccRemoteCePortAddr=cirAtmSpvcVccRemoteCePortAddr, isdnBChanOperStatus=isdnBChanOperStatus, dsp2OperStatus=dsp2OperStatus, atmSpvcModifyFailNotify=atmSpvcModifyFailNotify, viprSubChnlAtmOamStatus=viprSubChnlAtmOamStatus, atmPnniAbrServCatSupp=atmPnniAbrServCatSupp, atmPnniRemoteSvcMinVpi=atmPnniRemoteSvcMinVpi, dsp2AlgorithmTable=dsp2AlgorithmTable, tasMemIntfIndex=tasMemIntfIndex, vbrAtmBkPvcVccVUNIB=vbrAtmBkPvcVccVUNIB, bridgeStatsTimer=bridgeStatsTimer, iispVbrRouteIfVuniId=iispVbrRouteIfVuniId, ipAtmAppPvcVccStatsInCellCountHiA=ipAtmAppPvcVccStatsInCellCountHiA, frAtmSpvcVccOperStatus=frAtmSpvcVccOperStatus, oamActDeactStsSrcPointSegCC=oamActDeactStsSrcPointSegCC, frAtmPvcVccInterWorkingFuncIn=frAtmPvcVccInterWorkingFuncIn, atmVnnIlmiAttachPtProc=atmVnnIlmiAttachPtProc, atmSvcVccStatsVpiB=atmSvcVccStatsVpiB, atmSvcVccStatsInCellCountLoB=atmSvcVccStatsInCellCountLoB, frUniStatsEntry=frUniStatsEntry, atmTrunkingBrVccBwAtmMbs01=atmTrunkingBrVccBwAtmMbs01, timingReasonCode=timingReasonCode, vbrAtmSpvcVccMaxBurstSizeA2B=vbrAtmSpvcVccMaxBurstSizeA2B, gr303IntfId=gr303IntfId, atmAtmSpvcVccFrwdErrCorrectionB2A=atmAtmSpvcVccFrwdErrCorrectionB2A, atmPvcVccStatsOamRdiTxA=atmPvcVccStatsOamRdiTxA, atmIispOperStatus=atmIispOperStatus, atmPvcVccConnectionStatus=atmPvcVccConnectionStatus, resetImaGrpChannelStatistics=resetImaGrpChannelStatistics, bridgeAtmPvcVccStatsOdometerTimer=bridgeAtmPvcVccStatsOdometerTimer, frUniStatsCellsEncodedLo=frUniStatsCellsEncodedLo, viprStatsReset=viprStatsReset, atmTrunkingDataChanNBIntf=atmTrunkingDataChanNBIntf, gr303IgLocalDigitalSwitchType=gr303IgLocalDigitalSwitchType, oc3ChannelSecuFeature=oc3ChannelSecuFeature, frAtmPvcVccOAMConnEndPtStatus=frAtmPvcVccOAMConnEndPtStatus, atmCirEmDownStInterworking=atmCirEmDownStInterworking, oamActDeactStsSnkPointEtePM=oamActDeactStsSnkPointEtePM, viprRouteDestMask=viprRouteDestMask, vbrAtmPvcVccStatsCellsDecodedHiA=vbrAtmPvcVccStatsCellsDecodedHiA, viprSubChnlFrSustainedCellRate=viprSubChnlFrSustainedCellRate, msChannelId=msChannelId, taxiPortType=taxiPortType, atmUniViSuppFlag=atmUniViSuppFlag, frAtmSpvcVccVUNIB=frAtmSpvcVccVUNIB, atmImaStatsNeRxNumFailures=atmImaStatsNeRxNumFailures, purgeRoutingTable=purgeRoutingTable, e3PortConfigEntry=e3PortConfigEntry, atmPvcVpcStatsInOdometerCellCountLoA=atmPvcVpcStatsInOdometerCellCountLoA, bridgeStatsTpPortInDiscardsHi=bridgeStatsTpPortInDiscardsHi, atmSpvcVccAddrEntry=atmSpvcVccAddrEntry, viprVpnStatsIcmpOutTimeXs=viprVpnStatsIcmpOutTimeXs, atmTrunkingDataChannelConfigEntry=atmTrunkingDataChannelConfigEntry, atmTrunkingBrVccMFR2PktXportSupp=atmTrunkingBrVccMFR2PktXportSupp, vbrAtmSpvcVccRlsEntry=vbrAtmSpvcVccRlsEntry, cirEmAtmSpvcVccConnType=cirEmAtmSpvcVccConnType, iispVbrRouteTable=iispVbrRouteTable, cirEmAtmPvcVccIfB=cirEmAtmPvcVccIfB, atmSvcVccStatsOutCellCountLoA=atmSvcVccStatsOutCellCountLoA, e3LoopbackConfig=e3LoopbackConfig, e1LineCoding=e1LineCoding, frFrPvcDlciB=frFrPvcDlciB, vbrAtmSpvcVccRowStatus=vbrAtmSpvcVccRowStatus, twoWireSourceChannelConfigTable=twoWireSourceChannelConfigTable, vbrAtmSpvcViB=vbrAtmSpvcViB, tasCmprsAction=tasCmprsAction, atmTrunkingSigVccVUNIB=atmTrunkingSigVccVUNIB, mibs=mibs, atmBkPvcVpcAutoSwitch=atmBkPvcVpcAutoSwitch, dsp2LoadCount=dsp2LoadCount, e1PortStatsTimer=e1PortStatsTimer, oc3APSPairReceiveK1K2Bytes=oc3APSPairReceiveK1K2Bytes, cirEmAtmSpvcVccStatsOdometerReset=cirEmAtmSpvcVccStatsOdometerReset, h248Config=h248Config, atmSpvcVccSusCellRateB2A=atmSpvcVccSusCellRateB2A, viprArpInterfaceIPMask=viprArpInterfaceIPMask, viprIntfDisabWarnTmr=viprIntfDisabWarnTmr, tasTstLineNotify=tasTstLineNotify, virtualUNIT316=virtualUNIT316, cirEmCirEmPvcConnFailureCauseA=cirEmCirEmPvcConnFailureCauseA, isdnLapdDownNotify=isdnLapdDownNotify, atmUniIlmiAddrRegProc=atmUniIlmiAddrRegProc, atmPvcVccStatsVpiB=atmPvcVccStatsVpiB, e1PortStatsCurrentESs=e1PortStatsCurrentESs, frUniInterworkingType=frUniInterworkingType, frAtmSpvcVccStatsCellsTaggedB=frAtmSpvcVccStatsCellsTaggedB, vbrAtmSpvcRowStatus=vbrAtmSpvcRowStatus, atmTrunkingSigVccViB=atmTrunkingSigVccViB, atmSpvcConfiguredNotify=atmSpvcConfiguredNotify, atmSpvcVccStatsOutCellCountHiA=atmSpvcVccStatsOutCellCountHiA, frAtmPvcVccSusCellRateA2B=frAtmPvcVccSusCellRateA2B, ipThrottlingInPacketsPassedEi=ipThrottlingInPacketsPassedEi, e1PortStatsTable=e1PortStatsTable, pgtGroupId=pgtGroupId, atmPnniSgnlEnabled=atmPnniSgnlEnabled, vbrAtmPvcVccStatsTimer=vbrAtmPvcVccStatsTimer, vbrAtmPvcVccStatsOutCellCountHiB=vbrAtmPvcVccStatsOutCellCountHiB, vbrAtmSpvcRetryFailure=vbrAtmSpvcRetryFailure, imaGrpChannelTxFrameLength=imaGrpChannelTxFrameLength, atmTrunkingSigVccConfiguredNotify=atmTrunkingSigVccConfiguredNotify, spvcPointToMultiPointCalls=spvcPointToMultiPointCalls, pnniNodeCfgFailNotify=pnniNodeCfgFailNotify, ipThrottlingConfig=ipThrottlingConfig, atmPvcVpcStatsInCellCountHiA=atmPvcVpcStatsInCellCountHiA, atmTrunkingIWFIdentifier=atmTrunkingIWFIdentifier, cirEmAtmSpvcVccCngToneDetectionB2A=cirEmAtmSpvcVccCngToneDetectionB2A, cirEmAtmSpvcVccFlow=cirEmAtmSpvcVccFlow, vbrAtmPvcVccAal2Cid=vbrAtmPvcVccAal2Cid, viprRouteConfigEntry=viprRouteConfigEntry, ipAtmAppSvcVccServiceTypeB2A=ipAtmAppSvcVccServiceTypeB2A, ipAtmAppSvcVccStatsEntry=ipAtmAppSvcVccStatsEntry, ipAtmAppSvcVccStatsVpiB=ipAtmAppSvcVccStatsVpiB, dsp2AlgorithmEntry=dsp2AlgorithmEntry, frAtmSpvcVccStatsCellsDecodedLoA=frAtmSpvcVccStatsCellsDecodedLoA, viprSubChnlStatsEntry=viprSubChnlStatsEntry, viprSubChnlFrameSize=viprSubChnlFrameSize, stratumPrimaryLineId=stratumPrimaryLineId, appIpRouteDest=appIpRouteDest, gr303Aal2PvcVccVoiceEncodingProfile=gr303Aal2PvcVccVoiceEncodingProfile, viprSubChnlConfigTable=viprSubChnlConfigTable, atmAtmSpvcVpcLeafReference=atmAtmSpvcVpcLeafReference, cirEmCirEmPvcStatsIfB=cirEmCirEmPvcStatsIfB, ds3ChannelIfType=ds3ChannelIfType, viprIntfInitTmr=viprIntfInitTmr, atmPvcVpcSarTypeA2B=atmPvcVpcSarTypeA2B, e1ChannelCellMapping=e1ChannelCellMapping, vbrAtmPvcVccConnectionStatus=vbrAtmPvcVccConnectionStatus, hdlcIfIndex=hdlcIfIndex, vbrAtmSpvcVccReleaseDiag=vbrAtmSpvcVccReleaseDiag, frAtmSpvcVccTable=frAtmSpvcVccTable, cardFwVerCurrent=cardFwVerCurrent, cirEmAtmSpvcVccStatsOdometerTimer=cirEmAtmSpvcVccStatsOdometerTimer, sysInfo=sysInfo, atmAtmSpvcVpcMaxBurstSizeA2B=atmAtmSpvcVpcMaxBurstSizeA2B, vbrAtmSpvcStatsOutCellCountHiB=vbrAtmSpvcStatsOutCellCountHiB, dsp2ChannelModeConfig=dsp2ChannelModeConfig, atmVnnT317=atmVnnT317, atmAtmSpvcVpcOperStatus=atmAtmSpvcVpcOperStatus, oc3PortStatsLineBip8Errs=oc3PortStatsLineBip8Errs, msPortStatsId=msPortStatsId, vbrVbrPvcStatsOdometerCellsEncodedHiB=vbrVbrPvcStatsOdometerCellsEncodedHiB, vbrAtmSpvcStatsOutOdometerCellCountHiB=vbrAtmSpvcStatsOutOdometerCellCountHiB, gr303Aal2PvcVccCngToneDetection=gr303Aal2PvcVccCngToneDetection, viprVpnStatsIcmpOutMaskRQs=viprVpnStatsIcmpOutMaskRQs, frFrPvcTimeLenA2B=frFrPvcTimeLenA2B, ipAtmAppPvcVccOamStatus=ipAtmAppPvcVccOamStatus, atmCirEmConfigEntry=atmCirEmConfigEntry, gr303Aal2PvcVccConnectionStatus=gr303Aal2PvcVccConnectionStatus, atmAtmSpvcVpcSarTypeB2A=atmAtmSpvcVpcSarTypeB2A, oc3APSPairSwitchOverCount=oc3APSPairSwitchOverCount, vbrAtmPvcVccStatsOamRdiTx=vbrAtmPvcVccStatsOamRdiTx, ds3LoopbackConfig=ds3LoopbackConfig, isdnT200=isdnT200, atmSvcVccTrafficShapingB2A=atmSvcVccTrafficShapingB2A, atmUniT303=atmUniT303, vbrVbrPvcSusCellRateA2B=vbrVbrPvcSusCellRateA2B, vbrAtmSpvcStatsOdometerCellsDecodedLoA=vbrAtmSpvcStatsOdometerCellsDecodedLoA, atmPvcVccStatsOutOdometerCellCountLoB=atmPvcVccStatsOutOdometerCellCountLoB, lmiDlciConfigEntry=lmiDlciConfigEntry, frLmiStatsTimer=frLmiStatsTimer, bridgeBridgePvcStatsCellsDecodedLoA=bridgeBridgePvcStatsCellsDecodedLoA, vbrAtmPvcVccTearDownNotify=vbrAtmPvcVccTearDownNotify, ds1ChannelId=ds1ChannelId, oc3APSPairOption=oc3APSPairOption, sysInfoCpuUtilization2=sysInfoCpuUtilization2, bridgeBridgePvcStatsCellsEncodedHiB=bridgeBridgePvcStatsCellsEncodedHiB, atmDbCirEmIntegrationTime=atmDbCirEmIntegrationTime, atmImaAdminStatus=atmImaAdminStatus, vbrAtmPvcVccStatsOdometerCellsEncodedLoA=vbrAtmPvcVccStatsOdometerCellsEncodedLoA, atmUniSvcMinVpi=atmUniSvcMinVpi, virtualUNINwPrefix1=virtualUNINwPrefix1, frUniConfigTable=frUniConfigTable, isdnL2ConfigTable=isdnL2ConfigTable, frAtmSpvcVccStatsOdometerCellsEncodedLoA=frAtmSpvcVccStatsOdometerCellsEncodedLoA, ipAddr=ipAddr, cirEmAtmSpvcVccSetUpNotify=cirEmAtmSpvcVccSetUpNotify, ipAtmBkAppPvcVccRowStatus=ipAtmBkAppPvcVccRowStatus, atmPvcVpcOAMConnSegEndPtStatusB=atmPvcVpcOAMConnSegEndPtStatusB, atmAtmSpvcVpcStatsInCellCountLoB=atmAtmSpvcVpcStatsInCellCountLoB, ethernetPortStatsSingleCollisionFrames=ethernetPortStatsSingleCollisionFrames, imaPortConfigTable=imaPortConfigTable, sysInfoClockBErr=sysInfoClockBErr, siteMasterNodeAddrType1=siteMasterNodeAddrType1, atmSpvcVccStatsVpiB=atmSpvcVccStatsVpiB, dsp2IfIndex=dsp2IfIndex, atmPnniUbrServCatSupp=atmPnniUbrServCatSupp, frUniThroughPut=frUniThroughPut, ipAtmAppPvcVccStatsOutOdometerCellCountHiA=ipAtmAppPvcVccStatsOutOdometerCellCountHiA, atmPvcVpcDualHomed=atmPvcVpcDualHomed, frUniNT3=frUniNT3, atmTrunkingBrVccConfigTable=atmTrunkingBrVccConfigTable, cirEmAtmSpvcVccStatsVpiB=cirEmAtmSpvcVccStatsVpiB, siteMasterNodeAddrType2=siteMasterNodeAddrType2, ethernetPortStatsMultipleCollisionFrames=ethernetPortStatsMultipleCollisionFrames, atmSpvcVccStatsOutOdometerCellCountLoA=atmSpvcVccStatsOutOdometerCellCountLoA, cirEmCirEmPvcStatsIfA=cirEmCirEmPvcStatsIfA, twoWireSourceTestMode=twoWireSourceTestMode, atmImaIntfIndex=atmImaIntfIndex, atmVnnAvailBwEgr=atmVnnAvailBwEgr, atmAtmSpvcVpcSusCellRateA2B=atmAtmSpvcVpcSusCellRateA2B, e1TS16=e1TS16, ethernetPortId=ethernetPortId, ds1PortStatsCurrentESs=ds1PortStatsCurrentESs, cellTestVpiB=cellTestVpiB, remoteDbOperationStatus=remoteDbOperationStatus, dspResourceUsedFailed=dspResourceUsedFailed, twoWireSourceChannelVoiceCompression=twoWireSourceChannelVoiceCompression, vbrAtmSpvcVccVciB=vbrAtmSpvcVccVciB, cirEmAtmSpvcVccCodingTranslationB2A=cirEmAtmSpvcVccCodingTranslationB2A, atmDbCirEmConfigTable=atmDbCirEmConfigTable, cirEmAtmPvcVccStatsOutOdometerCellCountHiB=cirEmAtmPvcVccStatsOutOdometerCellCountHiB, frAtmPvcVccTimeLenIn=frAtmPvcVccTimeLenIn, oc3APSPairStatus=oc3APSPairStatus, atmPnniT303=atmPnniT303, gr303Aal2PvcVccGr303IgId=gr303Aal2PvcVccGr303IgId, cirEmCirEmPvcStatsOdometerCellsDecodedLoB=cirEmCirEmPvcStatsOdometerCellsDecodedLoB, resetInterfaceStatistics=resetInterfaceStatistics, arp2BridgeGroupNum=arp2BridgeGroupNum, atmVnnVpiIlmi=atmVnnVpiIlmi, cirEmAtmSpvcVccStatsCellsTaggedB=cirEmAtmSpvcVccStatsCellsTaggedB, cirAtmSpvcVccIfB=cirAtmSpvcVccIfB, atmPnniIlmiTimerS=atmPnniIlmiTimerS, ds1PortStatsCurrentLCVs=ds1PortStatsCurrentLCVs, vbrSpvcModifiedNotify=vbrSpvcModifiedNotify, versionConfigurationReasonCode=versionConfigurationReasonCode, atmPvcVpcMaxBurstSizeA2B=atmPvcVpcMaxBurstSizeA2B, ethernetPortStatsInternalMacTransmitErrors=ethernetPortStatsInternalMacTransmitErrors, atmSpvcVccEntry=atmSpvcVccEntry, remoteRebootCommand=remoteRebootCommand, frAtmPvcVccTable=frAtmPvcVccTable, virtualIntfStatsReset=virtualIntfStatsReset, frAtmSpvcVccRemoteSelectType=frAtmSpvcVccRemoteSelectType, cgSvcCutThroughOption=cgSvcCutThroughOption, iispVbrRouteEntry=iispVbrRouteEntry, saveConfigurationNotify=saveConfigurationNotify, bridgeAdminStatus=bridgeAdminStatus, atmPnniIlmiAddrRegProc=atmPnniIlmiAddrRegProc, cellTestTxPduCount=cellTestTxPduCount, stratumActivitySwitchOverNotify=stratumActivitySwitchOverNotify, iispCbrRouteRowStatus=iispCbrRouteRowStatus, atmPnniSvcMinVci=atmPnniSvcMinVci, atmPvcVccStatsInOdometerCellCountLoA=atmPvcVccStatsInOdometerCellCountLoA, atmSpvcVccSetUpNotify=atmSpvcVccSetUpNotify, backplaneCircuitryRecoveredNotify=backplaneCircuitryRecoveredNotify, e1PortConfigEntry=e1PortConfigEntry, atmTrunkingSigVccSignaling=atmTrunkingSigVccSignaling, virtualUNIT303=virtualUNIT303, bridgeDomainDesignatedRoot=bridgeDomainDesignatedRoot, cirEmCirEmPvcStatsOdometerReset=cirEmCirEmPvcStatsOdometerReset, e3PortStatsId=e3PortStatsId, bridgeAtmPvcVccStatsInCellCountLoB=bridgeAtmPvcVccStatsInCellCountLoB)
mibBuilder.exportSymbols("ACMIB", frAtmSpvcVccConnType=frAtmSpvcVccConnType, cirAtmSpvcVccStatsInCellCountLoB=cirAtmSpvcVccStatsInCellCountLoB, cirEmAtmPvcVccStatsTimer=cirEmAtmPvcVccStatsTimer, e3PortStatsTimer=e3PortStatsTimer, atmTrunkingBrVccPriority=atmTrunkingBrVccPriority, frFrPvcStatsCellsDecodedHiA=frFrPvcStatsCellsDecodedHiA, atmSpvcVccVciB=atmSpvcVccVciB, twoWireSinkPortId=twoWireSinkPortId, ipThrottlingInPacketsPassedIBM=ipThrottlingInPacketsPassedIBM, atmAtmSpvcVpcStatsInOdometerCellCountHiA=atmAtmSpvcVpcStatsInOdometerCellCountHiA, atmPnniIlmiConnectProc=atmPnniIlmiConnectProc, ecdBootFailureNotify=ecdBootFailureNotify, frAtmSpvcVccServiceType=frAtmSpvcVccServiceType, atmPvcVpcMaxBurstSizeB2A=atmPvcVpcMaxBurstSizeB2A, atmImaOperStatus=atmImaOperStatus, vbrAtmBkPvcVccReqFailNotify=vbrAtmBkPvcVccReqFailNotify, virtualIntfConfigUPCSupp=virtualIntfConfigUPCSupp, iptLogicalIntfId=iptLogicalIntfId, protectionSlotId=protectionSlotId, atmPvcVccVpiB=atmPvcVccVpiB, atmAtmSpvcVpcConnType=atmAtmSpvcVpcConnType, cirEmAtmSpvcVccRetryLimit=cirEmAtmSpvcVccRetryLimit, ds1PortStatsTable=ds1PortStatsTable, frUniStatsId=frUniStatsId, atmAtmSpvcConfigFailNotify=atmAtmSpvcConfigFailNotify, atmBkPvcVpcActivePvc=atmBkPvcVpcActivePvc, bridgeAtmPvcVccStatsOutCellCountLoB=bridgeAtmPvcVccStatsOutCellCountLoB, toneAnnceFtpStatus=toneAnnceFtpStatus, csTcpServerPortNumber=csTcpServerPortNumber, dspResourceFeatureConfig=dspResourceFeatureConfig, vbrAtmSpvcVccTable=vbrAtmSpvcVccTable, viprRouterId=viprRouterId, svcPointToPointCalls=svcPointToPointCalls, dsp2ChannelAlarmType=dsp2ChannelAlarmType, atmTrunkingSigVccIdentifier=atmTrunkingSigVccIdentifier, atmSpvcVccFrwdErrCorrectionB2A=atmSpvcVccFrwdErrCorrectionB2A, viprVpnStatsIcmpOutSrcQ=viprVpnStatsIcmpOutSrcQ, cirAtmSpvcVccVUNIB=cirAtmSpvcVccVUNIB, atmIispT308=atmIispT308, atmIispT322=atmIispT322, gr303IgLocalDigitalSwitchVersion=gr303IgLocalDigitalSwitchVersion, atmSpvcVccTrafficShapingA2B=atmSpvcVccTrafficShapingA2B, atmUniIlmiConnectProc=atmUniIlmiConnectProc, viprSubChnlAtmPeakCellRate=viprSubChnlAtmPeakCellRate, oamActDeactDirFlow=oamActDeactDirFlow, siteUpgradeSoftwareVersion=siteUpgradeSoftwareVersion, ipAtmAppPvcVccReqFailNotify=ipAtmAppPvcVccReqFailNotify, atmUniSvcMaxVci=atmUniSvcMaxVci, sysInfoTxOneCellHigh=sysInfoTxOneCellHigh, frAtmPvcVccSusCellRateB2A=frAtmPvcVccSusCellRateB2A, atmTrunkingBrVccRestart=atmTrunkingBrVccRestart, ethernetPortStatsCarrierSenseErrors=ethernetPortStatsCarrierSenseErrors, viprSubChnlOperStatus=viprSubChnlOperStatus, ipAtmAppSvcVccIfB=ipAtmAppSvcVccIfB, atmSvcVccStatsOutOdometerCellCountLoB=atmSvcVccStatsOutOdometerCellCountLoB, frFrPvcStatsCellsDecodedHiB=frFrPvcStatsCellsDecodedHiB, virtualIntfModifiedNotify=virtualIntfModifiedNotify, casDirection=casDirection, twoWireSourceChannelConnectionType=twoWireSourceChannelConnectionType, vbrVbrPvcRowStatus=vbrVbrPvcRowStatus, imaGrpChannelMinNumRxLinks=imaGrpChannelMinNumRxLinks, atmSpvcVccStatsCellsTaggedA=atmSpvcVccStatsCellsTaggedA, atmPvcVpcSetupNotify=atmPvcVpcSetupNotify, sts1LoopbackConfig=sts1LoopbackConfig, frAtmPvcVccStatsIfB=frAtmPvcVccStatsIfB, cirEmAtmSpvcVccServiceType=cirEmAtmSpvcVccServiceType, oc3APSSwitchoverNotify=oc3APSSwitchoverNotify, highSpeedChannelConfigTable=highSpeedChannelConfigTable, atmVnnVciSig=atmVnnVciSig, vbrAtmSpvcVccMaxBurstSizeB2A=vbrAtmSpvcVccMaxBurstSizeB2A, interfaceBandwidthChangeNotify=interfaceBandwidthChangeNotify, viprRoutingAge=viprRoutingAge, atmTrunkingBrVccMaxFrameLength=atmTrunkingBrVccMaxFrameLength, ipAtmAppPvcVccStatsOutOdometerCellCountHiB=ipAtmAppPvcVccStatsOutOdometerCellCountHiB, atmSpvcVccActiveSvcTable=atmSpvcVccActiveSvcTable, viprSubChnlRowStatus=viprSubChnlRowStatus, viprStatsIPInHdrErrorsLo=viprStatsIPInHdrErrorsLo, atmTrunkingRemoteIWFIdentifier=atmTrunkingRemoteIWFIdentifier, tasmMaxDigitControlBlocks=tasmMaxDigitControlBlocks, atmSpvcVccReleaseDiag=atmSpvcVccReleaseDiag, frAtmSpvcVccCirOut=frAtmSpvcVccCirOut, atmAtmSpvcVccRetryLimit=atmAtmSpvcVccRetryLimit, viprArpConfigEntry=viprArpConfigEntry, viprStatsInsufficientPcktsLo=viprStatsInsufficientPcktsLo, cirEmAtmPvcVccConnFailureCauseA=cirEmAtmPvcVccConnFailureCauseA, ipAtmBkAppPvcVccVpiB=ipAtmBkAppPvcVccVpiB, cirEmAtmSpvcVccStatsInOdometerCellCountHiB=cirEmAtmSpvcVccStatsInOdometerCellCountHiB, bridgePortPriority=bridgePortPriority, atmPvcVpcStatsInOdometerCellCountHiA=atmPvcVpcStatsInOdometerCellCountHiA, routingStatus=routingStatus, mediaGatewayControlType=mediaGatewayControlType, atmPnniT397=atmPnniT397, atmVnnIlmiTimerS=atmVnnIlmiTimerS, cirEmCirEmPvcStatsTable=cirEmCirEmPvcStatsTable, oc3ChannelConfigEntry=oc3ChannelConfigEntry, lmiDlciStatusNotify=lmiDlciStatusNotify, portModifyFailNotify=portModifyFailNotify, iispCbrRoutNsapAddr=iispCbrRoutNsapAddr, viprRouterDisableWarning=viprRouterDisableWarning, h248MaxNumberOfContexts=h248MaxNumberOfContexts, msPortConfigTable=msPortConfigTable, virtualUNIAdminStatus=virtualUNIAdminStatus, gr303TMCChanDownNotify=gr303TMCChanDownNotify, aal2TrunkConfigMaxBurstSizeIgr=aal2TrunkConfigMaxBurstSizeIgr, oamLoopbackType=oamLoopbackType, tasmChannelModeConfig=tasmChannelModeConfig, atmAtmSpvcVpcStatsCellsTaggedB=atmAtmSpvcVpcStatsCellsTaggedB, csTcpServerIpAddress=csTcpServerIpAddress, cirEmAtmSpvcVccTearDownNotify=cirEmAtmSpvcVccTearDownNotify, vbrAtmSpvcVccStatsOutCellCountLoB=vbrAtmSpvcVccStatsOutCellCountLoB, atmPvcVpcVpiA=atmPvcVpcVpiA, vbrAtmPvcVccFlow=vbrAtmPvcVccFlow, bridgeDomainOperStatus=bridgeDomainOperStatus, h248TermVci=h248TermVci, ipAtmAppPvcVccStatsVpiB=ipAtmAppPvcVccStatsVpiB, tasAnnceEntry=tasAnnceEntry, atmSpvcVccStatsInCellCountHiA=atmSpvcVccStatsInCellCountHiA, atmSvcVccStatsOutCellCountHiA=atmSvcVccStatsOutCellCountHiA, atmVnnVpiSig=atmVnnVpiSig, highSpeedChannelConfigEntry=highSpeedChannelConfigEntry, frAtmBkPvcVccActivePvc=frAtmBkPvcVccActivePvc, ds1TransmitClockSource=ds1TransmitClockSource, isdnK=isdnK, atmPnniVciSig=atmPnniVciSig, dlciNumber=dlciNumber, atmTrunkingLocalIWFConfiguredNotify=atmTrunkingLocalIWFConfiguredNotify, ipAtmAppPvcVccStatsFramesInB=ipAtmAppPvcVccStatsFramesInB, bridgeAtmPvcVccStatsCellsEncodedLoA=bridgeAtmPvcVccStatsCellsEncodedLoA, viprStatsPacketsRxHi=viprStatsPacketsRxHi, cellTestVcidB=cellTestVcidB, atmTrunkingSigVccRetryCounter=atmTrunkingSigVccRetryCounter, bridgeDomainRootCost=bridgeDomainRootCost, gr303LapdConfigTable=gr303LapdConfigTable, atmPvcVccVciA=atmPvcVccVciA, vbrAtmSpvcVccStatsOutOdometerCellCountLoB=vbrAtmSpvcVccStatsOutOdometerCellCountLoB, frFrPvcPeakCellRateA2B=frFrPvcPeakCellRateA2B, bridgeAtmPvcVccConnFailureCauseB=bridgeAtmPvcVccConnFailureCauseB, spvcAddrEntry=spvcAddrEntry, viprRoutingDestMask=viprRoutingDestMask, imaGrpChannelMinNumTxLinks=imaGrpChannelMinNumTxLinks, atmTrunkingBrVccFaxModSupp=atmTrunkingBrVccFaxModSupp, ipAtmAppPvcVccStatsInOdometerCellCountLoB=ipAtmAppPvcVccStatsInOdometerCellCountLoB, twoWireSourceSignalingBits=twoWireSourceSignalingBits, sysInfoRxMultiCellUsed=sysInfoRxMultiCellUsed, atmArpServerRemoteAddrType=atmArpServerRemoteAddrType, viprIntfRipMode=viprIntfRipMode, oc3APSStateChangeNotify=oc3APSStateChangeNotify, atmSpvcVccVpiA=atmSpvcVccVpiA, viprIntfShutDwnWarnTmr=viprIntfShutDwnWarnTmr, atmAtmSpvcVccStatsInCellCountLoB=atmAtmSpvcVccStatsInCellCountLoB, oamActDeactStsSrcPointSegPM=oamActDeactStsSrcPointSegPM, bridgeAtmPvcVccStatsCellsTaggedB=bridgeAtmPvcVccStatsCellsTaggedB, lmiDlciStatusTime=lmiDlciStatusTime, atmAtmSpvcVpcStatsTimer=atmAtmSpvcVpcStatsTimer, vbrAtmSpvcRemoteVbrPortAddr=vbrAtmSpvcRemoteVbrPortAddr, atmPnniUPCSupp=atmPnniUPCSupp, frAtmSpvcVccTimeLenIn=frAtmSpvcVccTimeLenIn, frAtmSpvcVccIfB=frAtmSpvcVccIfB, iispCbrRouteNsapAddr=iispCbrRouteNsapAddr, atmTrunkingBrVccVUNIB=atmTrunkingBrVccVUNIB, ipOrMaskInvalidNotify=ipOrMaskInvalidNotify, atmUniIlmiTimerT=atmUniIlmiTimerT, oamLpbkTxCount=oamLpbkTxCount, bridgeConfigTable=bridgeConfigTable, vuniIlmiStatsPacketDisc=vuniIlmiStatsPacketDisc, gr303IgInServiceNotify=gr303IgInServiceNotify, frAtmPvcVccPeakCellRateA2B=frAtmPvcVccPeakCellRateA2B, virtualUNIUserAddress=virtualUNIUserAddress, virtualUNIIntfType=virtualUNIIntfType, vuniIlmiStatsColdStartTx=vuniIlmiStatsColdStartTx, cellTestVUNIB=cellTestVUNIB, gr303Aal2PvcVccVoiceCompression=gr303Aal2PvcVccVoiceCompression, inBandSvcConnectionsAllowed=inBandSvcConnectionsAllowed, frAtmBkPvcVccIfB=frAtmBkPvcVccIfB, viprVpnStatsIcmpInAddrMaskReps=viprVpnStatsIcmpInAddrMaskReps, cellTestIfB=cellTestIfB, aal2TrunkConnFailureCauseB=aal2TrunkConnFailureCauseB, e1PortStatsEntry=e1PortStatsEntry, atmIispSvcMaxVci=atmIispSvcMaxVci, viprSubChnlVci=viprSubChnlVci, atmTrunkingBrVccDTMFPktXportSupp=atmTrunkingBrVccDTMFPktXportSupp, atmSvcVccStatsIfB=atmSvcVccStatsIfB, atmVpi=atmVpi, atmUniNwPrefix1=atmUniNwPrefix1, atmPvcVccStatsEntry=atmPvcVccStatsEntry, imaPortConfigEntry=imaPortConfigEntry, dspPortId=dspPortId, bridgeAtmPvcVccStatsOamAisTx=bridgeAtmPvcVccStatsOamAisTx, frAtmPvcVccMaxFrameSizeOut=frAtmPvcVccMaxFrameSizeOut, atmPvcVccStatsOamRdiRxA=atmPvcVccStatsOamRdiRxA, atmArpServerRemoteIpMask=atmArpServerRemoteIpMask, sgApiCirEmEndPoints=sgApiCirEmEndPoints, frAtmSpvcVccStatsOdometerReset=frAtmSpvcVccStatsOdometerReset, frAtmPvcVccStatsOdometerFramesDroppedA=frAtmPvcVccStatsOdometerFramesDroppedA, viprRouterInitTmr=viprRouterInitTmr, consoleIPAddr1=consoleIPAddr1, atmPvcVccServiceTypeA2B=atmPvcVccServiceTypeA2B, cirEmAtmPvcVccStatsEntry=cirEmAtmPvcVccStatsEntry, h248TermIdTable=h248TermIdTable, cirEmAtmBkPvcVccConnFailureCauseB=cirEmAtmBkPvcVccConnFailureCauseB, atmTrunkingRemoteIWFEntry=atmTrunkingRemoteIWFEntry, frUniStatsCellsDecodedHi=frUniStatsCellsDecodedHi, atmSpvcVccRlsEntry=atmSpvcVccRlsEntry, atmAtmSpvcVpcFrwdErrCorrectionB2A=atmAtmSpvcVpcFrwdErrCorrectionB2A, cirEmAtmPvcVccAal2Cid=cirEmAtmPvcVccAal2Cid, atmTrunkingLocalIWFDeletedNotify=atmTrunkingLocalIWFDeletedNotify, toneAnnceAdminStatus=toneAnnceAdminStatus, atmTrunkingSigVccConfigFailNotify=atmTrunkingSigVccConfigFailNotify, atmVnnAdminStatus=atmVnnAdminStatus, viprSubChnlVUNIB=viprSubChnlVUNIB, cirEmAtmSpvcVccStatsCellsDroppedB=cirEmAtmSpvcVccStatsCellsDroppedB, lineStatusChangedNotify=lineStatusChangedNotify, e1ChannelIfType=e1ChannelIfType, bridgeDomainMaxMessageAge=bridgeDomainMaxMessageAge, atmPvcVpcStatsOutOdometerCellCountLoB=atmPvcVpcStatsOutOdometerCellCountLoB, routerNumber=routerNumber, vbrVbrPvcStatsTable=vbrVbrPvcStatsTable, atmTrunkingBrVccOwner=atmTrunkingBrVccOwner, vbrAtmPvcVccStatsIfA=vbrAtmPvcVccStatsIfA, e1PortConfigTable=e1PortConfigTable, tasAnnceTable=tasAnnceTable, ds1OamInterworkingType=ds1OamInterworkingType, sapphireInterfaceAddressAssignFailNotify=sapphireInterfaceAddressAssignFailNotify, atmSpvcVccMaxBurstSizeA2B=atmSpvcVccMaxBurstSizeA2B, atmAtmSpvcVccStatsInOdometerCellCountLoB=atmAtmSpvcVccStatsInOdometerCellCountLoB, ds1ChannelConfigTable=ds1ChannelConfigTable, frAtmSpvcVccRemoteVpi=frAtmSpvcVccRemoteVpi, viprVpnStatsIcmpOutEchoRPs=viprVpnStatsIcmpOutEchoRPs, cirEmAtmPvcVccStatsCellsDecodedHiA=cirEmAtmPvcVccStatsCellsDecodedHiA, casOperStatus=casOperStatus, ethernetLinkType=ethernetLinkType, atmAtmSpvcVpcRemoteAtmPortAddr=atmAtmSpvcVpcRemoteAtmPortAddr, cgApiCirEmAtmPvcCalls=cgApiCirEmAtmPvcCalls, atmPvcVccOamStatusB=atmPvcVccOamStatusB, iispCbrRoutLength=iispCbrRoutLength, iispVbrRoutIfIndex=iispVbrRoutIfIndex, frAtmSpvcVccStatsOdometerCellsDecodedLoA=frAtmSpvcVccStatsOdometerCellsDecodedLoA, cirAtmSpvcConfigFailNotify=cirAtmSpvcConfigFailNotify, oamActDeactFlowType=oamActDeactFlowType, cirEmAtmSpvcVccIfA=cirEmAtmSpvcVccIfA, cirEmAtmPvcVccSarTypeB=cirEmAtmPvcVccSarTypeB, ipAtmAppPvcVccStatsInCellCountHiB=ipAtmAppPvcVccStatsInCellCountHiB, msgPoolViewEntry=msgPoolViewEntry, viprVpnStatsIcmpOutErrors=viprVpnStatsIcmpOutErrors, cirEmAtmPvcVccStatsVpiB=cirEmAtmPvcVccStatsVpiB, oamLpbkRxCount=oamLpbkRxCount, completeClockRecoveredNotify=completeClockRecoveredNotify, gr303Aal2PvcVccTable=gr303Aal2PvcVccTable, cirEmAtmSpvcVccRlsTable=cirEmAtmSpvcVccRlsTable, atmAtmSpvcVccPeakCellRateB2A=atmAtmSpvcVccPeakCellRateB2A, oamTest=oamTest, frAtmSpvcVccStatsOdometerCellsEncodedHiA=frAtmSpvcVccStatsOdometerCellsEncodedHiA, atmTrunkingIWFAdminStatus=atmTrunkingIWFAdminStatus, frFrPvcSetupNotify=frFrPvcSetupNotify)
mibBuilder.exportSymbols("ACMIB", frAtmBkPvcVccVpiB=frAtmBkPvcVccVpiB, vbrAtmSpvcVccVbrPortAddr=vbrAtmSpvcVccVbrPortAddr, virtualIntfStatsEntry=virtualIntfStatsEntry, atmSvcIntfLayer2Down=atmSvcIntfLayer2Down, viprSubChnlStatsInOdometerCellCountLoB=viprSubChnlStatsInOdometerCellCountLoB, h248TermIdEntry=h248TermIdEntry, atmAtmSpvcConfiguredNotify=atmAtmSpvcConfiguredNotify, twoWireSourceDialMode=twoWireSourceDialMode, virtualIntfAvailBwEgr=virtualIntfAvailBwEgr, vbrAtmPvcVccStatsOdometerCellsDecodedHiA=vbrAtmPvcVccStatsOdometerCellsDecodedHiA, viprRouteDisableReason=viprRouteDisableReason, atmSvcVccVpiA=atmSvcVccVpiA, virtualIntfConfigVi=virtualIntfConfigVi, ipAtmAppPvcVccVciB=ipAtmAppPvcVccVciB, cirEmAtmPvcVccStatsIfA=cirEmAtmPvcVccStatsIfA, portFailureReasonCode=portFailureReasonCode, iispVbrRouteRowStatus=iispVbrRouteRowStatus, atmSvcVccServiceTypeA2B=atmSvcVccServiceTypeA2B, featureTable=featureTable, atmSvcVccStatsOutOdometerCellCountLoA=atmSvcVccStatsOutOdometerCellCountLoA, cirEmCirEmPvcStatsOdometerCellsDecodedLoA=cirEmCirEmPvcStatsOdometerCellsDecodedLoA, frAtmBkPvcVccReqFailNotify=frAtmBkPvcVccReqFailNotify, imaGrpChannelConfigTable=imaGrpChannelConfigTable, gr303IgConfigTable=gr303IgConfigTable, atmSpvcVccServiceTypeB2A=atmSpvcVccServiceTypeB2A, atmAtmSpvcVccStatsInOdometerCellCountHiB=atmAtmSpvcVccStatsInOdometerCellCountHiB, gr303IgBackupTMCChanIntfId=gr303IgBackupTMCChanIntfId, twoWireSinkChannelSilenceSupression=twoWireSinkChannelSilenceSupression, vbrAtmSpvcEntry=vbrAtmSpvcEntry, ds1InLineCode=ds1InLineCode, e1PortStatsId=e1PortStatsId, resetsonetPathStatistics=resetsonetPathStatistics, oamTestMismatchCount=oamTestMismatchCount, ds1ChannelSecuFeature=ds1ChannelSecuFeature, atmPnniCbrServCatSupp=atmPnniCbrServCatSupp, vbrAtmPvcVccViB=vbrAtmPvcVccViB, bridgeAtmBkPvcVccTearDownNotify=bridgeAtmBkPvcVccTearDownNotify, atmUniOperStatus=atmUniOperStatus, primarySoftwareVersion=primarySoftwareVersion, lmiIntfStatusNotify=lmiIntfStatusNotify, bridgeBridgePvcStatsCellsDecodedLoB=bridgeBridgePvcStatsCellsDecodedLoB, ds3PortId=ds3PortId, vbrAtmSpvcVUNIB=vbrAtmSpvcVUNIB, imaGroupStatusChangeNotify=imaGroupStatusChangeNotify, viprSubChnlAtmMaxBurstSize=viprSubChnlAtmMaxBurstSize, percentComplete=percentComplete, gr303Ds0ChanConfigEntry=gr303Ds0ChanConfigEntry, bridgeAtmBkPvcVccActivePvc=bridgeAtmBkPvcVccActivePvc, frAtmSpvcVccRowStatus=frAtmSpvcVccRowStatus, atmPnniCbrCellLossRatioZero=atmPnniCbrCellLossRatioZero, cirAtmSpvcVccVciB=cirAtmSpvcVccVciB, upgradeSoftware=upgradeSoftware, cgApiPointToMultiPointSvcCalls=cgApiPointToMultiPointSvcCalls, viprSubChnlFwdErrCorrection=viprSubChnlFwdErrCorrection, vbrAtmSpvcVccStatsOdometerCellsDecodedLoA=vbrAtmSpvcVccStatsOdometerCellsDecodedLoA, tasmChannelConfigEntry=tasmChannelConfigEntry, vbrAtmBkPvcVccTable=vbrAtmBkPvcVccTable, cirAtmSpvcVccRetryLimit=cirAtmSpvcVccRetryLimit, atmVci=atmVci, cirAtmSpvcVccStatsOdometerCellsEncodedHiA=cirAtmSpvcVccStatsOdometerCellsEncodedHiA, atmUniAdminStatus=atmUniAdminStatus, viprSubChnlServiceType=viprSubChnlServiceType, gr303IgIntfAddedNotify=gr303IgIntfAddedNotify, vbrAtmBkPvcVccTearDownNotify=vbrAtmBkPvcVccTearDownNotify, sysInfoClockAErr=sysInfoClockAErr, gr303IgBackupTMCStatus=gr303IgBackupTMCStatus, atmSpvcVccTable=atmSpvcVccTable, viprSubChnlTosMask=viprSubChnlTosMask, cirAtmSpvcVccRetryInterval=cirAtmSpvcVccRetryInterval, atmPvcVccVciB=atmPvcVccVciB, frUniAddrDlciLen=frUniAddrDlciLen, dspChannelInputCodingRule=dspChannelInputCodingRule, vbrVbrPvcMaxBurstSizeB2A=vbrVbrPvcMaxBurstSizeB2A, atmImaStatsRxStuffs=atmImaStatsRxStuffs, atmIfStatsValidCellsInLo=atmIfStatsValidCellsInLo, cardAdminStatus=cardAdminStatus, iispVbrRoutRowStatus=iispVbrRoutRowStatus, vbrAtmSpvcVccStatsEntry=vbrAtmSpvcVccStatsEntry, atmTrunkingBrVccMFR1PktXportSupp=atmTrunkingBrVccMFR1PktXportSupp, frLmiStatsTable=frLmiStatsTable, viprVpnStatsIcmpInTimeExcds=viprVpnStatsIcmpInTimeExcds, cardInsertionNotify=cardInsertionNotify, frAtmSpvcVccPeakCellRateB2A=frAtmSpvcVccPeakCellRateB2A, spvcTePointToPointCalls=spvcTePointToPointCalls, cirEmAtmSpvcVccEchoCancellationA2B=cirEmAtmSpvcVccEchoCancellationA2B, e1Channelization=e1Channelization, atmPvcVpcStatsCellsTaggedA=atmPvcVpcStatsCellsTaggedA, bridgeAtmPvcVccStatsOdometerCellsDecodedHiA=bridgeAtmPvcVccStatsOdometerCellsDecodedHiA, atmAtmSpvcVpcViA=atmAtmSpvcVpcViA, atmTrunkingBrVccGr303Supp=atmTrunkingBrVccGr303Supp, cirEmAtmSpvcVccIfB=cirEmAtmSpvcVccIfB, virtualIntfModifyFailNotify=virtualIntfModifyFailNotify, atmAtmSpvcVccSetUpNotify=atmAtmSpvcVccSetUpNotify, cirEmCirEmPvcTable=cirEmCirEmPvcTable, vbrVbrPvcServiceType=vbrVbrPvcServiceType, signalingModifyFailNotify=signalingModifyFailNotify, cirEmIfStatsTimer=cirEmIfStatsTimer, ethernetPortConfigEntry=ethernetPortConfigEntry, viprSubChnlInitTmr=viprSubChnlInitTmr, aal2TrunkConfigPeakCellRateEgr=aal2TrunkConfigPeakCellRateEgr, ipThrottlingStatsOdometerTimer=ipThrottlingStatsOdometerTimer, msChannelConfigTable=msChannelConfigTable, vbrAtmPvcVccConnFailureCauseA=vbrAtmPvcVccConnFailureCauseA, hdlcOperStatus=hdlcOperStatus, gr303N200=gr303N200, frAtmPvcVccStatsCellsDroppedB=frAtmPvcVccStatsCellsDroppedB, oc3ChannelConfigTable=oc3ChannelConfigTable, cirEmAtmSpvcVccReleaseDiag=cirEmAtmSpvcVccReleaseDiag, atmPnniRtVbrCellXerDelay=atmPnniRtVbrCellXerDelay, vbrVbrPvcStatsCellsEncodedHiB=vbrVbrPvcStatsCellsEncodedHiB, cirEmAtmBkPvcVccTearDownNotify=cirEmAtmBkPvcVccTearDownNotify, viprRoutingGatewayAddress=viprRoutingGatewayAddress, atmPvcVpcStatsOdometerTimer=atmPvcVpcStatsOdometerTimer, vbrAtmSpvcDeletedNotify=vbrAtmSpvcDeletedNotify, vbrAtmBkPvcVccConnFailureCauseB=vbrAtmBkPvcVccConnFailureCauseB, frFrPvcStatsCellsDecodedLoB=frFrPvcStatsCellsDecodedLoB, atmPvcVpcVUNIB=atmPvcVpcVUNIB, atmImaConfigEntry=atmImaConfigEntry, cirEmCirEmPvcTearDownNotify=cirEmCirEmPvcTearDownNotify, keepAliveTimerExpiredInOneWayStateNotify=keepAliveTimerExpiredInOneWayStateNotify, atmTrunkingBrVccOamStatus=atmTrunkingBrVccOamStatus, vbrAtmSpvcVccStatsCellsEncodedLoA=vbrAtmSpvcVccStatsCellsEncodedLoA, bridgeAtmBkPvcVccTable=bridgeAtmBkPvcVccTable, tasmMemoryAction=tasmMemoryAction, msKgResync=msKgResync, frUniT392=frUniT392, e3LineBuildOut=e3LineBuildOut, atmAtmSpvcVccStatsCellsDroppedB=atmAtmSpvcVccStatsCellsDroppedB, vbrVbrPvcConnFailureCauseA=vbrVbrPvcConnFailureCauseA, cirEmCirEmPvcConnFailureCauseB=cirEmCirEmPvcConnFailureCauseB, oamLpbkMismatchCount=oamLpbkMismatchCount, toneAnnceConfigEntry=toneAnnceConfigEntry, bridgeStatsTpPortInFramesLo=bridgeStatsTpPortInFramesLo, viprVpnStatsIcmpInTimeStampsReps=viprVpnStatsIcmpInTimeStampsReps, atmPvcVpcSusCellRateB2A=atmPvcVpcSusCellRateB2A, frAtmSpvcVccStatsInOdometerCellCountHiB=frAtmSpvcVccStatsInOdometerCellCountHiB, vbrAtmSpvcVccStatsCellsDecodedLoA=vbrAtmSpvcVccStatsCellsDecodedLoA, atmIispT316=atmIispT316, atmSvcVccEntry=atmSvcVccEntry, atmTermEmConfigTable=atmTermEmConfigTable, twoWireSourceSignalingState=twoWireSourceSignalingState, ipAtmAppPvcVccStatsOdometerReset=ipAtmAppPvcVccStatsOdometerReset, virtualUNIT317=virtualUNIT317, twoWireSinkSignalingBits=twoWireSinkSignalingBits, atmBkPvcVpcTable=atmBkPvcVpcTable, vbrAtmSpvcVccStatsVpiB=vbrAtmSpvcVccStatsVpiB, viprRoutingMetric=viprRoutingMetric, twoWireSinkChannelEncapsulationAal=twoWireSinkChannelEncapsulationAal, frAtmSpvcVccRemoteDlci=frAtmSpvcVccRemoteDlci, aal2TrunkConfigCnfrmTypeB2A=aal2TrunkConfigCnfrmTypeB2A, vbrAtmPvcVccIfB=vbrAtmPvcVccIfB, msPortStatsTable=msPortStatsTable, powerSupplyReasonCode=powerSupplyReasonCode, atmVnnAvailBwIgr=atmVnnAvailBwIgr, atmPvcVpcEntry=atmPvcVpcEntry, featureCurrentStatus=featureCurrentStatus, atmSpvcVccStatsOutOdometerCellCountHiB=atmSpvcVccStatsOutOdometerCellCountHiB, oc3APSWorkingLineSignalStatus=oc3APSWorkingLineSignalStatus, virtualUNIOperStatus=virtualUNIOperStatus, atmTrunkingSigVccFwScr01=atmTrunkingSigVccFwScr01, atmTrunkingRemoteIWFModifyFailNotify=atmTrunkingRemoteIWFModifyFailNotify, atmUniIlmiProtocolStatus=atmUniIlmiProtocolStatus, ipAtmAppPvcVccServiceTypeB2A=ipAtmAppPvcVccServiceTypeB2A, siteRemoteMgrAddr1=siteRemoteMgrAddr1, tasmPortId=tasmPortId, bridgeBridgePvcStatsTable=bridgeBridgePvcStatsTable, toneAnnceAccountPassword=toneAnnceAccountPassword, bridgeAtmPvcVccVpiB=bridgeAtmPvcVccVpiB, viprSubChnlStatsInCellCountHiA=viprSubChnlStatsInCellCountHiA, cirEmAtmPvcVccStatsOdometerCellsDecodedHiA=cirEmAtmPvcVccStatsOdometerCellsDecodedHiA, frAtmPvcVccStatsCellsEncodedLoA=frAtmPvcVccStatsCellsEncodedLoA, bridgeBridgePvcReqFailNotify=bridgeBridgePvcReqFailNotify, tasmMaxAnnce=tasmMaxAnnce, atmIispSvcMaxVpi=atmIispSvcMaxVpi, bridgeStatsTpPortOutFramesLo=bridgeStatsTpPortOutFramesLo, arp1Table=arp1Table, atmPnniAdminStatus=atmPnniAdminStatus, ipAtmAppSvcVccSusCellRateB2A=ipAtmAppSvcVccSusCellRateB2A, msChannelCellBearingAddrMode=msChannelCellBearingAddrMode, atmPnniT308=atmPnniT308, viprRouteIPAddress=viprRouteIPAddress, intfAtmPvcConnDisplayChannel=intfAtmPvcConnDisplayChannel, atmSvcVccStatsOutOdometerCellCountHiB=atmSvcVccStatsOutOdometerCellCountHiB, cirEmAtmPvcVccCodingTranslationB2A=cirEmAtmPvcVccCodingTranslationB2A, vbrVbrPvcTable=vbrVbrPvcTable, vbrVbrPvcStatsOdometerCellsEncodedLoB=vbrVbrPvcStatsOdometerCellsEncodedLoB, atmPvcVccFlow=atmPvcVccFlow, cirEmAtmSpvcVccStatsCellsEncodedHiA=cirEmAtmSpvcVccStatsCellsEncodedHiA, h248TermLogPortId=h248TermLogPortId, atmSpvcVccPeakCellRateB2A=atmSpvcVccPeakCellRateB2A, callContrlResAllocFailNotify=callContrlResAllocFailNotify, atmSvcVccCnfrmTypeA2B=atmSvcVccCnfrmTypeA2B, vbrAtmSpvcVccViB=vbrAtmSpvcVccViB, e3ChannelConfigTable=e3ChannelConfigTable, alarmCardReasonCode=alarmCardReasonCode, atmSvcVccStatsInOdometerCellCountLoA=atmSvcVccStatsInOdometerCellCountLoA, oc3APSResetStats=oc3APSResetStats, cellTestAction=cellTestAction, viprIntfIPAddress=viprIntfIPAddress, systemInsuffMemNotify=systemInsuffMemNotify, atmAtmSpvcVccStatsOdometerTimer=atmAtmSpvcVccStatsOdometerTimer, atmIispAtmSignalingStatus=atmIispAtmSignalingStatus, msRs232Parity=msRs232Parity, dsp2AlgorithmType=dsp2AlgorithmType, tasMemReasonCode=tasMemReasonCode, cirEmCirEmPvcInterworking=cirEmCirEmPvcInterworking, atmVnnSvcMaxVci=atmVnnSvcMaxVci, frFrPvcConnectionStatus=frFrPvcConnectionStatus, cirEmAtmSpvcVccStatsOdometerCellsEncodedHiA=cirEmAtmSpvcVccStatsOdometerCellsEncodedHiA, atmAtmSpvcVccStatsOutCellCountLoB=atmAtmSpvcVccStatsOutCellCountLoB, vbrIfStatsCellsDecodedHi=vbrIfStatsCellsDecodedHi, atmTrunkingSigVccRetryTimer=atmTrunkingSigVccRetryTimer, iispCbrRoutEntry=iispCbrRoutEntry, iispCbrRouteLength=iispCbrRouteLength, atmPnniIfIndex=atmPnniIfIndex, frFrPvcSusCellRateB2A=frFrPvcSusCellRateB2A, atmPnniNrtVbrServCatSupp=atmPnniNrtVbrServCatSupp, tasmMaxMemResvd=tasmMaxMemResvd, frAtmPvcVccStatsFramesTaggedA=frAtmPvcVccStatsFramesTaggedA, frUniT391=frUniT391, atmIispOverSubscription=atmIispOverSubscription, atmPvcVccStatsFrwdErrCrrctnRateA2B=atmPvcVccStatsFrwdErrCrrctnRateA2B, ipAtmAppPvcVccCnfrmTypeB2A=ipAtmAppPvcVccCnfrmTypeB2A, atmTrunkingBrVccAudioProfileId=atmTrunkingBrVccAudioProfileId, oamActDeactStsSnkPointEteCC=oamActDeactStsSnkPointEteCC, atmImaStatsId=atmImaStatsId, gr303IgStatsCurrentInCalls=gr303IgStatsCurrentInCalls, pnniNodeDelFailNotify=pnniNodeDelFailNotify, fwDriverSup=fwDriverSup, gr303T203=gr303T203, vbrAtmSpvcIfB=vbrAtmSpvcIfB, twoWireSinkPortConfigTable=twoWireSinkPortConfigTable, atmPvcVpcType=atmPvcVpcType, msLoopbackConfig=msLoopbackConfig, atmIfStatsTable=atmIfStatsTable, atmIfStatsId=atmIfStatsId, ipAtmAppSvcVccStatsVciB=ipAtmAppSvcVccStatsVciB, ipAtmAppPvcVccConnectionStatus=ipAtmAppPvcVccConnectionStatus, msSpeedAdaption=msSpeedAdaption, vbrVbrPvcPeakCellRateB2A=vbrVbrPvcPeakCellRateB2A, atmBkPvcVccReqFailNotify=atmBkPvcVccReqFailNotify, viprIntfRowStatus=viprIntfRowStatus, isdnIntfOperStatus=isdnIntfOperStatus, atmAtmSpvcVccSarTypeB2A=atmAtmSpvcVccSarTypeB2A, frFrPvcStatsAal5ErrFramesA=frFrPvcStatsAal5ErrFramesA, atmTrunkingRemoteIWFDeletedNotify=atmTrunkingRemoteIWFDeletedNotify, siteTrapDialOutFeature=siteTrapDialOutFeature, e1OamInterworkingType=e1OamInterworkingType, virtualUNIMyNeighborIfName=virtualUNIMyNeighborIfName, frAtmPvcVccCirIn=frAtmPvcVccCirIn, alarmConfig=alarmConfig, cirEmAtmSpvcVccEntry=cirEmAtmSpvcVccEntry, atmSpvcVccPeakCellRateA2B=atmSpvcVccPeakCellRateA2B, vbrAtmPvcVccServiceType=vbrAtmPvcVccServiceType)
mibBuilder.exportSymbols("ACMIB", tasToneLevel=tasToneLevel, differentSystemSoftwareNotify=differentSystemSoftwareNotify, cirEmAtmPvcVccServiceType=cirEmAtmPvcVccServiceType, gr303TMCT303=gr303TMCT303, referenceClockClearedNotify=referenceClockClearedNotify, ds1PortStatsId=ds1PortStatsId, viprVpnStatsIcmpOutDestURs=viprVpnStatsIcmpOutDestURs, frAtmSpvcVccStatsInOdometerCellCountLoB=frAtmSpvcVccStatsInOdometerCellCountLoB, vbrAtmSpvcOperStatus=vbrAtmSpvcOperStatus, oamActDeactRowStatus=oamActDeactRowStatus, atmTrunkingRemoteIWFConfigFailNotify=atmTrunkingRemoteIWFConfigFailNotify, frFrPvcReqFailNotify=frFrPvcReqFailNotify, msChannelIfType=msChannelIfType, bridgeCacheType=bridgeCacheType, atmSvcVccVUNIB=atmSvcVccVUNIB, ds3PortStatsId=ds3PortStatsId, twoWireSinkChannelEchoCancellation=twoWireSinkChannelEchoCancellation, e3LineStatus=e3LineStatus, atmPvcVccCnfrmTypeB2A=atmPvcVccCnfrmTypeB2A, atmTrunkingBrVccOperStatus=atmTrunkingBrVccOperStatus, atmAtmSpvcVccStatsOutCellCountHiB=atmAtmSpvcVccStatsOutCellCountHiB, bridgeAtmPvcVccStatsInOdometerCellCountLoB=bridgeAtmPvcVccStatsInOdometerCellCountLoB, cellTestRxPduCount=cellTestRxPduCount, isdnIntfDChanId=isdnIntfDChanId, tasCmprsAnnceFilename=tasCmprsAnnceFilename, atmImaFeRxState=atmImaFeRxState, atmAtmSpvcVpcVUNIA=atmAtmSpvcVpcVUNIA, pnniNodeISFailNotify=pnniNodeISFailNotify, gr303EOCChanDownNotify=gr303EOCChanDownNotify, atmSpvcVccStatsTimer=atmSpvcVccStatsTimer, cirAtmSpvcVccCngToneDetectionA2B=cirAtmSpvcVccCngToneDetectionA2B, dbCirEmIfStatsCellsEncodedLo=dbCirEmIfStatsCellsEncodedLo, atmAtmSpvcVccRemoteVpi=atmAtmSpvcVccRemoteVpi, vbrVbrPvcStatsOdometerReset=vbrVbrPvcStatsOdometerReset, frAtmSpvcVccStatsOutCellCountLoB=frAtmSpvcVccStatsOutCellCountLoB, cirEmAtmPvcVccStatsOutCellCountHiB=cirEmAtmPvcVccStatsOutCellCountHiB, fwReleaseTable=fwReleaseTable, bridgeDomainNumber=bridgeDomainNumber, atmImaStatsFeTxNumFailures=atmImaStatsFeTxNumFailures, sgApiAtmSvcEndPoints=sgApiAtmSvcEndPoints, dspResourceEntry=dspResourceEntry, remoteDbCommand=remoteDbCommand, atmAtmSpvcVpcStatsInCellCountLoA=atmAtmSpvcVpcStatsInCellCountLoA, atmUniIlmiSecureLinkProc=atmUniIlmiSecureLinkProc, vbrAtmSpvcStatsOutCellCountLoB=vbrAtmSpvcStatsOutCellCountLoB, systemWarmStartNotify=systemWarmStartNotify, atmSpvcVccStatsInCellCountLoB=atmSpvcVccStatsInCellCountLoB, atmCirEmConfigTable=atmCirEmConfigTable, vbrAtmPvcVccStatsOamRdiRx=vbrAtmPvcVccStatsOamRdiRx, aal2TrunkConfigOamStatus=aal2TrunkConfigOamStatus, e1ChannelSignaling=e1ChannelSignaling, portId=portId, fwReleaseCurrentVersion=fwReleaseCurrentVersion, atmBkPvcVpcViB=atmBkPvcVpcViB, virtualUNIIlmiTimerS=virtualUNIIlmiTimerS, gr303TMCChanUpNotify=gr303TMCChanUpNotify, frUniOperStatus=frUniOperStatus, atmSpvcVccActiveSvcEntry=atmSpvcVccActiveSvcEntry, atmTrunkingBrVccServiceType=atmTrunkingBrVccServiceType, vbrSpvcConfiguredNotify=vbrSpvcConfiguredNotify, gr303IgStatsIgId=gr303IgStatsIgId, e3PortStatsCurrentLESs=e3PortStatsCurrentLESs, cirEmIfStatsEntry=cirEmIfStatsEntry, atmSvcVccSusCellRateA2B=atmSvcVccSusCellRateA2B, vbrVbrPvcStatsCellsDecodedLoA=vbrVbrPvcStatsCellsDecodedLoA, frAtmSpvcVccStatsOdometerCellsDecodedHiA=frAtmSpvcVccStatsOdometerCellsDecodedHiA, bridgeCachePhysicalAddr=bridgeCachePhysicalAddr, h248TermSlotId=h248TermSlotId, imaGrpChannelStatsNumTxActLnks=imaGrpChannelStatsNumTxActLnks, tasAnnceDescription=tasAnnceDescription, ethernetPortStatsInternalMacReceiveErrors=ethernetPortStatsInternalMacReceiveErrors, cirAtmSpvcModifyFailNotify=cirAtmSpvcModifyFailNotify, cirEmAtmPvcVccStatsIfB=cirEmAtmPvcVccStatsIfB, imaGrpChannelFailNotify=imaGrpChannelFailNotify, gr303IgIntfPhysId=gr303IgIntfPhysId, ipAtmAppPvcVccStatsInCellCountLoB=ipAtmAppPvcVccStatsInCellCountLoB, bridgeBridgePvcEntry=bridgeBridgePvcEntry, vuniIlmiStatsColdStartRx=vuniIlmiStatsColdStartRx, cardAlarmStatus=cardAlarmStatus, cirEmAtmSpvcVccCodingTranslationA2B=cirEmAtmSpvcVccCodingTranslationA2B, atmTermEmConfigEntry=atmTermEmConfigEntry, pnniNodeOOSFailNotify=pnniNodeOOSFailNotify, spvcAddrLocalPortAddr=spvcAddrLocalPortAddr, gr303IgConfig=gr303IgConfig, gr303Aal2PvcSetUpNotify=gr303Aal2PvcSetUpNotify, atmSpvcVccStatsVciB=atmSpvcVccStatsVciB, ipThrottlingInPacketsDroppedIBM=ipThrottlingInPacketsDroppedIBM, atmTrunkingBrVccSilenceDetSupp=atmTrunkingBrVccSilenceDetSupp, ds1LineBuildOut=ds1LineBuildOut, ipAtmAppSvcVccCnfrmTypeB2A=ipAtmAppSvcVccCnfrmTypeB2A, atmAtmSpvcVpcViB=atmAtmSpvcVpcViB, oc3APSK1K2Tx=oc3APSK1K2Tx, siteRemoteMgrSrcAddr2=siteRemoteMgrSrcAddr2, cirEmAtmSpvcVccRetryInterval=cirEmAtmSpvcVccRetryInterval, cirAtmSpvcVccStatsOdometerCellsEncodedLoA=cirAtmSpvcVccStatsOdometerCellsEncodedLoA, oc3APSPairProtectionSFDuration=oc3APSPairProtectionSFDuration, frUniStatsFramesDecodedHi=frUniStatsFramesDecodedHi, ipAtmAppSvcVccStatsInCellCountLoB=ipAtmAppSvcVccStatsInCellCountLoB, atmAtmSpvcVpcRestart=atmAtmSpvcVpcRestart, ds3CellMapping=ds3CellMapping, vbrAtmSpvcStatsOdometerReset=vbrAtmSpvcStatsOdometerReset, frAtmPvcVccStatsIfA=frAtmPvcVccStatsIfA, atmPnniRtVbrGcacClpEqualZero=atmPnniRtVbrGcacClpEqualZero, vbrVbrPvcIfB=vbrVbrPvcIfB, frAtmSpvcVccMaxFrameSizeOut=frAtmSpvcVccMaxFrameSizeOut, oc3APSPairWorkingSDBERThreshold=oc3APSPairWorkingSDBERThreshold, consolePort2=consolePort2, imaGrpChannelAlphaValue=imaGrpChannelAlphaValue, frAtmSpvcVccStatsOutOdometerCellCountLoB=frAtmSpvcVccStatsOutOdometerCellCountLoB, ethernetChannelId=ethernetChannelId, protectionGroupConfigEntry=protectionGroupConfigEntry, gr303Aal2PvcVccVpiB=gr303Aal2PvcVccVpiB, ipAtmAppSvcVccStatsInCellCountHiB=ipAtmAppSvcVccStatsInCellCountHiB, ipAtmAppPvcVccStatsEntry=ipAtmAppPvcVccStatsEntry, isdnL2IntfId=isdnL2IntfId, atmPnniRtVbrAvailCellRate=atmPnniRtVbrAvailCellRate, ds1ChannelCellScramble=ds1ChannelCellScramble, atmPvcVpcIfA=atmPvcVpcIfA, vbrSpvcDeletedNotify=vbrSpvcDeletedNotify, ds3SendCode=ds3SendCode, frAtmPvcVccStatsTimer=frAtmPvcVccStatsTimer, atmPnniT310=atmPnniT310, virtualIntfConfigOverSubs=virtualIntfConfigOverSubs, iispVbrRoutTable=iispVbrRoutTable, imaGrpChannelFailureStatus=imaGrpChannelFailureStatus, atmPvcVccStatsOutOdometerCellCountHiA=atmPvcVccStatsOutOdometerCellCountHiA, atmBkPvcVccSetupNotify=atmBkPvcVccSetupNotify, lmiDlciIfIndex=lmiDlciIfIndex, frAtmPvcVccStatsEntry=frAtmPvcVccStatsEntry, inBandAppAtmAddrType=inBandAppAtmAddrType, bridgeBridgePvcStatsCellsEncodedLoB=bridgeBridgePvcStatsCellsEncodedLoB, aal2TrunkAvailBwEgr=aal2TrunkAvailBwEgr, ds3PortStatsCurrentSEFSs=ds3PortStatsCurrentSEFSs, ipAtmIpAddr=ipAtmIpAddr, viprVpnStatsIcmpOutInfoRPs=viprVpnStatsIcmpOutInfoRPs, oc3PortConfigTable=oc3PortConfigTable, e3TransmitClockSource=e3TransmitClockSource, oc3PortStatsId=oc3PortStatsId, gr303TMCT396=gr303TMCT396, atmPvcVpcStatsOamAisTxB=atmPvcVpcStatsOamAisTxB, lmiDlci=lmiDlci, atmUniAvailBwEgr=atmUniAvailBwEgr, viprRouterNoOfRoutes=viprRouterNoOfRoutes, atmPnniIlmiOperStatus=atmPnniIlmiOperStatus, atmPvcVccStatsInOdometerCellCountHiA=atmPvcVccStatsInOdometerCellCountHiA, cirEmAtmPvcVccDigitCollectTypeB2A=cirEmAtmPvcVccDigitCollectTypeB2A, atmDbCirEmIfIndex=atmDbCirEmIfIndex, atmArpServerAddrType=atmArpServerAddrType, atmArpEntryRowStatus=atmArpEntryRowStatus, gr303LapdIgId=gr303LapdIgId, msProtocol=msProtocol, fwReleaseSlot=fwReleaseSlot, tasmMaxStdTones=tasmMaxStdTones, atmPvcVpcStatsOamRdiTxA=atmPvcVpcStatsOamRdiTxA, atmAtmSpvcVpcServiceTypeA2B=atmAtmSpvcVpcServiceTypeA2B, atmSpvcVccRetryLimit=atmSpvcVccRetryLimit, lineStatus=lineStatus, viprRipConfigEntry=viprRipConfigEntry, inputPortClockClearedNotify=inputPortClockClearedNotify, siteMasterNodeAtmAddr2=siteMasterNodeAtmAddr2, sysInfoRxMultiCellHigh=sysInfoRxMultiCellHigh, twoWireSinkSignalingState=twoWireSinkSignalingState, bridgeDomainInServiceNotify=bridgeDomainInServiceNotify, aal2TrunkConfigRowStatus=aal2TrunkConfigRowStatus, cirEmAtmPvcVccStatsOdometerCellsEncodedLoA=cirEmAtmPvcVccStatsOdometerCellsEncodedLoA, frFrPvcStatsIfA=frFrPvcStatsIfA, gr303IgBackupEOCChanIntfId=gr303IgBackupEOCChanIntfId, ipAtmAppPvcVccStatsOutCellCountLoA=ipAtmAppPvcVccStatsOutCellCountLoA, atmUniT310=atmUniT310, iispCbrRouteDest=iispCbrRouteDest, atmCirEmIfIndex=atmCirEmIfIndex, cirEmAtmPvcVccTearDownNotify=cirEmAtmPvcVccTearDownNotify, cirEmIfStatsTable=cirEmIfStatsTable, atmAtmSpvcVpcRowStatus=atmAtmSpvcVpcRowStatus, oc3APSPairStatsEntry=oc3APSPairStatsEntry, bridgeAtmPvcVccIfA=bridgeAtmPvcVccIfA, siteTrapDialOutPhoneNum=siteTrapDialOutPhoneNum, e1LineStatus=e1LineStatus, msgPoolViewMsgCmd=msgPoolViewMsgCmd, cirAtmSpvcVccStatsOdometerTimer=cirAtmSpvcVccStatsOdometerTimer, viprStatsIPInHdrErrorsHi=viprStatsIPInHdrErrorsHi, vbrAtmPvcVccCnfrmTypeB2A=vbrAtmPvcVccCnfrmTypeB2A, atmVnnOverSubscription=atmVnnOverSubscription, atmVnnAtmSignalingStatus=atmVnnAtmSignalingStatus, frAtmPvcVccVpiB=frAtmPvcVccVpiB, oc3APSPairProtectionSDDuration=oc3APSPairProtectionSDDuration, msPortStatsOutOfFrameSeconds=msPortStatsOutOfFrameSeconds, vbrSpvcModifyFailNotify=vbrSpvcModifyFailNotify, iispRouting=iispRouting, atmPnniCbrMaxCellRate=atmPnniCbrMaxCellRate, atmAtmSpvcVpcVUNIB=atmAtmSpvcVpcVUNIB, atmAtmSpvcVccRetryFailure=atmAtmSpvcVccRetryFailure, iispVbrRouteDest=iispVbrRouteDest, vbrAtmPvcVccStatsCellsEncodedHiA=vbrAtmPvcVccStatsCellsEncodedHiA, tasCmprsAnnceType=tasCmprsAnnceType, atmPnniCbrCellXerDelay=atmPnniCbrCellXerDelay, dspResourceAvailFailed=dspResourceAvailFailed, ipAtmAppSvcVccServiceTypeA2B=ipAtmAppSvcVccServiceTypeA2B, frAtmSpvcVccPeakCellRateA2B=frAtmSpvcVccPeakCellRateA2B, cardRevision=cardRevision, atmVnnIlmiProtocolStatus=atmVnnIlmiProtocolStatus, viprStatsTable=viprStatsTable, siteRemoteMgrAddr2=siteRemoteMgrAddr2, bridgeStatsEntry=bridgeStatsEntry, atmPnniIlmiConfigProc=atmPnniIlmiConfigProc, atmAtmSpvcVccStatsOutOdometerCellCountLoB=atmAtmSpvcVccStatsOutOdometerCellCountLoB, ipAtmAppPvcVccDualHomed=ipAtmAppPvcVccDualHomed, gr303IgAdminStatus=gr303IgAdminStatus, frFrPvcStatsOdometerFramesDroppedA=frFrPvcStatsOdometerFramesDroppedA, bridgeStatsTable=bridgeStatsTable, virtualUNIAddrType=virtualUNIAddrType, ilmiStatsLinkResets=ilmiStatsLinkResets, vbrAtmSpvcStatsOutOdometerCellCountLoB=vbrAtmSpvcStatsOutOdometerCellCountLoB, oc3APSPairId=oc3APSPairId, cirEmAtmPvcVccStatsCellsDroppedB=cirEmAtmPvcVccStatsCellsDroppedB, frAtmPvcVccStatsInOdometerCellCountLoB=frAtmPvcVccStatsInOdometerCellCountLoB, frFrPvcStatsCellsDecodedLoA=frFrPvcStatsCellsDecodedLoA, remoteDbOperationStatusNotify=remoteDbOperationStatusNotify, siteEnhanceFeatures=siteEnhanceFeatures, cirEmAtmPvcVccEncodingProfileIdA2B=cirEmAtmPvcVccEncodingProfileIdA2B, atmAtmSpvcVccStatsInCellCountLoA=atmAtmSpvcVccStatsInCellCountLoA, virtualUNIMinVpi=virtualUNIMinVpi, atmSvcVccPeakCellRateB2A=atmSvcVccPeakCellRateB2A, atmTrunkingRemoteIWFConfiguredNotify=atmTrunkingRemoteIWFConfiguredNotify, atmPnniT322=atmPnniT322, atmAtmSpvcVpcRelease=atmAtmSpvcVpcRelease, aal2TrunkConfigSetupNotify=aal2TrunkConfigSetupNotify, oamActDeactResultCode=oamActDeactResultCode, gr303Ds0ChanOperStatus=gr303Ds0ChanOperStatus, atmBkPvcVccVpiB=atmBkPvcVccVpiB, atmPvcVccOAMConnSegEndPtStatusB=atmPvcVccOAMConnSegEndPtStatusB, frFrPvcStatsDlciA=frFrPvcStatsDlciA, oc3LoopbackConfig=oc3LoopbackConfig, tasmCacheMemAllocFailReasonCode=tasmCacheMemAllocFailReasonCode, ipAtmAppPvcVccStatsOutCellCountHiA=ipAtmAppPvcVccStatsOutCellCountHiA, cirEmAtmSpvcVccVoiceCompressionA2B=cirEmAtmSpvcVccVoiceCompressionA2B, routerIpAddress=routerIpAddress, cirEmAtmSpvcVccStatsOutCellCountLoB=cirEmAtmSpvcVccStatsOutCellCountLoB, bridgeDomainNumberInvalidNotify=bridgeDomainNumberInvalidNotify, vbrAtmSpvcVccStatsInOdometerCellCountHiB=vbrAtmSpvcVccStatsInOdometerCellCountHiB, spvcCePointToPointCalls=spvcCePointToPointCalls, cardFwVerType=cardFwVerType, oamTestIfB=oamTestIfB, frFrPvcStatsOdometerCellsDecodedLoA=frFrPvcStatsOdometerCellsDecodedLoA, atmTrunkingSigVccRmtIWFIdentifier=atmTrunkingSigVccRmtIWFIdentifier, atmAtmSpvcVccRowStatus=atmAtmSpvcVccRowStatus, bridgeDomainTopologyChanges=bridgeDomainTopologyChanges, atmSpvcVccRlsTable=atmSpvcVccRlsTable, vbrSpvcConfigFailNotify=vbrSpvcConfigFailNotify, atmAtmSpvcVccVciB=atmAtmSpvcVccVciB, fwDriverTable=fwDriverTable, taxiChannelIfType=taxiChannelIfType, atmPvcVpcStatsVpiA=atmPvcVpcStatsVpiA, viprRoutingIPAddress=viprRoutingIPAddress)
mibBuilder.exportSymbols("ACMIB", atmSpvcVccMaxBurstSizeB2A=atmSpvcVccMaxBurstSizeB2A, frAtmSpvcVccTimeLenOut=frAtmSpvcVccTimeLenOut, atmBkPvcVccTearDownNotify=atmBkPvcVccTearDownNotify, gr303EOCChanUpNotify=gr303EOCChanUpNotify, viprRoutingType=viprRoutingType, ipAtmAppPvcVccServiceTypeA2B=ipAtmAppPvcVccServiceTypeA2B, isdnBChanId=isdnBChanId, vuniIlmiVUNIId=vuniIlmiVUNIId, gr303IgCreateFailNotify=gr303IgCreateFailNotify, gr303IntfConfigEntry=gr303IntfConfigEntry, cirEmAtmPvcVccFlow=cirEmAtmPvcVccFlow, interfaceOutOfServiceNotify=interfaceOutOfServiceNotify, atmUniT317=atmUniT317, gr303IgStatsEntry=gr303IgStatsEntry, frAtmBkPvcVccSetupNotify=frAtmBkPvcVccSetupNotify, atmAtmSpvcVpcStatsOutOdometerCellCountHiA=atmAtmSpvcVpcStatsOutOdometerCellCountHiA, bridgeCacheBridgeGroupNum=bridgeCacheBridgeGroupNum, cirAtmSpvcVccVoiceCompressionB2A=cirAtmSpvcVccVoiceCompressionB2A, cirAtmSpvcVccStatsOdometerCellsDecodedHiA=cirAtmSpvcVccStatsOdometerCellsDecodedHiA, viprStatsEntry=viprStatsEntry, isdnLapdUpNotify=isdnLapdUpNotify, aal2TrunkConfigServiceType=aal2TrunkConfigServiceType, cirEmCirEmPvcStatsOdometerCellsEncodedLoB=cirEmCirEmPvcStatsOdometerCellsEncodedLoB, atmAtmSpvcVccViA=atmAtmSpvcVccViA, viprSubChnlFlowType=viprSubChnlFlowType, ds1ChannelIfType=ds1ChannelIfType, vbrAtmBkPvcVccVpiB=vbrAtmBkPvcVccVpiB, frUniN393=frUniN393, viprRoutingConfigTable=viprRoutingConfigTable, frAtmPvcVccOAMSegEndPtStatus=frAtmPvcVccOAMSegEndPtStatus, cirAtmSpvcVccVoiceCompressionA2B=cirAtmSpvcVccVoiceCompressionA2B, atmTrunkingBrVccInactiveTimer=atmTrunkingBrVccInactiveTimer, atmPvcVpcVpiB=atmPvcVpcVpiB, cirAtmSpvcVccStatsCellsDecodedHiA=cirAtmSpvcVccStatsCellsDecodedHiA, viprVpnTrap=viprVpnTrap, tasTstLineAction=tasTstLineAction, atmTrunkingBrVccFwAtmPcr01=atmTrunkingBrVccFwAtmPcr01, cirEmAtmPvcVccCnfrmTypeB2A=cirEmAtmPvcVccCnfrmTypeB2A, cellTestServiceType=cellTestServiceType, gr303IntfIgId=gr303IntfIgId, bridgeStatsTpPortInDiscardsLo=bridgeStatsTpPortInDiscardsLo, ipAddrNumber=ipAddrNumber, sysInfoDiskCheck=sysInfoDiskCheck, vbrAtmSpvcVciB=vbrAtmSpvcVciB, aal2TrunkConfigVpi=aal2TrunkConfigVpi, PYSNMP_MODULE_ID=acMIB, e1DataTransferType=e1DataTransferType, resetsonetSectionStatistics=resetsonetSectionStatistics, atmSvcVccStatsVciA=atmSvcVccStatsVciA, frLmiOperStatus=frLmiOperStatus, ipAtmAppPvcVccStatsTimer=ipAtmAppPvcVccStatsTimer, bridgeAtmPvcVccOamStatus=bridgeAtmPvcVccOamStatus, casConfig=casConfig, msgPoolViewTskId=msgPoolViewTskId, msBitStuffing=msBitStuffing, viprRouteAdminStatus=viprRouteAdminStatus, iispVbrRouteLength=iispVbrRouteLength, viprSubChnlFrPeakCellRate=viprSubChnlFrPeakCellRate, sts1LineBuildOut=sts1LineBuildOut, sts1TransmitClockSource=sts1TransmitClockSource, cirEmAtmPvcVccStatsOamRdiTx=cirEmAtmPvcVccStatsOamRdiTx, iispCbrRoutIfIndex=iispCbrRoutIfIndex, ds3ChannelConfigTable=ds3ChannelConfigTable, atmBkPvcVccAutoSwitch=atmBkPvcVccAutoSwitch, atmPvcVccCnfrmTypeA2B=atmPvcVccCnfrmTypeA2B, cirEmAtmSpvcVccOperStatus=cirEmAtmSpvcVccOperStatus, frFrPvcInterWorkingFuncB2A=frFrPvcInterWorkingFuncB2A, oamTestVciB=oamTestVciB, atmPvcVpcConnectionStatus=atmPvcVpcConnectionStatus, viprStatsPrototypeErrorsLo=viprStatsPrototypeErrorsLo, highSpeedPortId=highSpeedPortId, dsp2AlgorithmId=dsp2AlgorithmId, ipAtmAppPvcVccStatsInOdometerCellCountHiA=ipAtmAppPvcVccStatsInOdometerCellCountHiA, siteAtmAddrPrefix1=siteAtmAddrPrefix1, iispVbrRoutEntry=iispVbrRoutEntry, atmUniSscopRxWndSz=atmUniSscopRxWndSz, vbrVbrPvcStatsOdometerCellsDecodedHiA=vbrVbrPvcStatsOdometerCellsDecodedHiA, atmPvcVpcStatsOutOdometerCellCountHiB=atmPvcVpcStatsOutOdometerCellCountHiB, vbrAtmPvcVccSarTypeB=vbrAtmPvcVccSarTypeB, bridgeAtmPvcVccStatsIfB=bridgeAtmPvcVccStatsIfB, tasCmprsAnnceReplaceId=tasCmprsAnnceReplaceId, oamActDeactFuncType=oamActDeactFuncType, toneAnnceFtpAction=toneAnnceFtpAction, viprIntfAdminStatus=viprIntfAdminStatus, interfaceModifiedNotify=interfaceModifiedNotify, atmAtmSpvcVccViB=atmAtmSpvcVccViB, cardFwVerNextIsDefault=cardFwVerNextIsDefault, fwDriverChecksum=fwDriverChecksum, gr303Aal2PvcVccVciB=gr303Aal2PvcVccVciB, atmPnniOperStatus=atmPnniOperStatus, bridgeAtmPvcVccStatsInOdometerCellCountHiB=bridgeAtmPvcVccStatsInOdometerCellCountHiB, twoWireSinkChannelVoiceCompression=twoWireSinkChannelVoiceCompression, vpnTrapStatus=vpnTrapStatus, viprSlot=viprSlot, chassisOverTempAlarmNotify=chassisOverTempAlarmNotify, virtualIntfConfigIf=virtualIntfConfigIf, atmSpvcVccFlow=atmSpvcVccFlow, ds1ChannelDs0Map=ds1ChannelDs0Map, frUniN392=frUniN392, viprSubChnlStatsOutCellCountHiA=viprSubChnlStatsOutCellCountHiA, atmSvcVccStatsOdometerReset=atmSvcVccStatsOdometerReset, ipAtmAppPvcVccStatsOutOdometerCellCountLoA=ipAtmAppPvcVccStatsOutOdometerCellCountLoA, oamTestFailureReasonCode=oamTestFailureReasonCode, interfaceModifyFailNotify=interfaceModifyFailNotify, frUniLmiProtocol=frUniLmiProtocol, arp1EntryAge=arp1EntryAge, dspResourceAvail=dspResourceAvail, msTxClkPolarity=msTxClkPolarity, virtualUNIT322=virtualUNIT322, atmPvcVpcTable=atmPvcVpcTable, cirEmAtmPvcVccStatsInCellCountHiB=cirEmAtmPvcVccStatsInCellCountHiB, atmPnniRtVbrCellLossRatioZeroPlusOne=atmPnniRtVbrCellLossRatioZeroPlusOne, atmPvcVpcStatsOutCellCountHiB=atmPvcVpcStatsOutCellCountHiB, vbrAtmBkPvcVccSetupNotify=vbrAtmBkPvcVccSetupNotify, atmPvcVccStatsCellsTaggedB=atmPvcVccStatsCellsTaggedB, atmTrunkingSigVccFwMbs01=atmTrunkingSigVccFwMbs01, atmPvcVpcOAMConnSegEndPtStatusA=atmPvcVpcOAMConnSegEndPtStatusA, vbrAtmSpvcRestart=vbrAtmSpvcRestart, bridgeAtmPvcVccStatsOutOdometerCellCountLoB=bridgeAtmPvcVccStatsOutOdometerCellCountLoB, atmPvcVccSetupNotify=atmPvcVccSetupNotify, atmSpvcDeletedNotify=atmSpvcDeletedNotify, viprSubChnlConfigEntry=viprSubChnlConfigEntry, virtualUNIVpiSig=virtualUNIVpiSig, viprSubChnlTrafficType=viprSubChnlTrafficType, sysInfoRxOneCellTotal=sysInfoRxOneCellTotal, cirEmCirEmPvcStatsCellsEncodedLoA=cirEmCirEmPvcStatsCellsEncodedLoA, vbrAtmPvcVccOAMSegEndPtStatus=vbrAtmPvcVccOAMSegEndPtStatus, bridgeBridgePvcStatsOdometerCellsDecodedLoB=bridgeBridgePvcStatsOdometerCellsDecodedLoB, atmPvcVccOamStatus=atmPvcVccOamStatus, viprSubChnlMacEncapType=viprSubChnlMacEncapType, viprSubChnlSarType=viprSubChnlSarType, atmVnnConfigTable=atmVnnConfigTable, atmAtmSpvcVpcStatsOdometerTimer=atmAtmSpvcVpcStatsOdometerTimer, atmAtmSpvcVpcPriority=atmAtmSpvcVpcPriority, cirAtmSpvcVccCngToneDetectionB2A=cirAtmSpvcVccCngToneDetectionB2A, cardType=cardType, atmAtmSpvcVpcRetryLimit=atmAtmSpvcVpcRetryLimit, cirEmAtmPvcVccStatsOdometerCellsEncodedHiA=cirEmAtmPvcVccStatsOdometerCellsEncodedHiA, atmSpvcVccConnType=atmSpvcVccConnType, frAtmBkPvcVccRowStatus=frAtmBkPvcVccRowStatus, e1ChannelDs0Map=e1ChannelDs0Map, ipAtmBkAppPvcVccActivePvc=ipAtmBkAppPvcVccActivePvc, vbrAtmSpvcVccStatsIfA=vbrAtmSpvcVccStatsIfA, systemSwCopy=systemSwCopy, vbrAtmPvcVccOamStatus=vbrAtmPvcVccOamStatus, viprStatsArpProtoRxLo=viprStatsArpProtoRxLo, atmPvcVpcStatsIfA=atmPvcVpcStatsIfA, atmTrunkingRemoteIWFModifiedNotify=atmTrunkingRemoteIWFModifiedNotify, ethernetPortStatsExcessiveCollisions=ethernetPortStatsExcessiveCollisions, vbrVbrPvcStatsTimer=vbrVbrPvcStatsTimer, cirAtmSpvcVccRelease=cirAtmSpvcVccRelease, gr303TMCConfigTable=gr303TMCConfigTable, frFrPvcStatsFramesTaggedA=frFrPvcStatsFramesTaggedA, viprSubChnlStatsInCellCountLoA=viprSubChnlStatsInCellCountLoA, dspPortConfigEntry=dspPortConfigEntry, ipAtmBkAppPvcVccVUNIB=ipAtmBkAppPvcVccVUNIB, gr303IgBackupEOCStatus=gr303IgBackupEOCStatus, pnniRtAddrCfgFailNotify=pnniRtAddrCfgFailNotify, ilmiStatsPduRx=ilmiStatsPduRx, toneAnnceDestinationFile=toneAnnceDestinationFile, gr303IntfOperStatus=gr303IntfOperStatus, routerConfigTable=routerConfigTable, stratumBackupMode=stratumBackupMode, frAtmPvcVccBcIn=frAtmPvcVccBcIn, tasCmprsAnnceReasonCode=tasCmprsAnnceReasonCode, atmSvcVccStatsCellsDroppedB=atmSvcVccStatsCellsDroppedB, bridgeBridgePvcStatsOdometerCellsEncodedHiB=bridgeBridgePvcStatsOdometerCellsEncodedHiB, viprStatsPacketsTxHi=viprStatsPacketsTxHi, cirEmAtmPvcVccReqFailNotify=cirEmAtmPvcVccReqFailNotify, atmSvcVccConnectionStatus=atmSvcVccConnectionStatus, gr303IgPrimaryEOCStatus=gr303IgPrimaryEOCStatus, bridgeConfigEntry=bridgeConfigEntry, frAtmPvcVccVciB=frAtmPvcVccVciB, atmAtmSpvcVccVUNIA=atmAtmSpvcVccVUNIA, viprArpInterfaceIPAddress=viprArpInterfaceIPAddress, atmPvcVccViA=atmPvcVccViA, gr303Aal2PvcVccCodingTranslation=gr303Aal2PvcVccCodingTranslation, gr303IgStatsReset=gr303IgStatsReset, subChanStatus=subChanStatus, gr303Ds0ChanId=gr303Ds0ChanId, oamActDeactRsltPrevReq=oamActDeactRsltPrevReq, atmPnniNrtVbrGcacClpEqualZero=atmPnniNrtVbrGcacClpEqualZero, aal2TrunkGR303=aal2TrunkGR303, atmTrunkingSigVccBwMbs01=atmTrunkingSigVccBwMbs01, frAtmPvcVccConnFailureCauseB=frAtmPvcVccConnFailureCauseB, atmAtmSpvcVccServiceTypeB2A=atmAtmSpvcVccServiceTypeB2A, vbrAtmPvcVccStatsIfB=vbrAtmPvcVccStatsIfB, arp2Entry=arp2Entry, viprSubChnlStatsInCellCountHiB=viprSubChnlStatsInCellCountHiB, frAtmSpvcConfiguredNotify=frAtmSpvcConfiguredNotify, atmUniAtmSignalingStatus=atmUniAtmSignalingStatus, cirAtmSpvcVccStatsOutOdometerCellCountLoB=cirAtmSpvcVccStatsOutOdometerCellCountLoB, ds1DataTransferType=ds1DataTransferType, alarmCardOutputChangeNotify=alarmCardOutputChangeNotify, e3ChannelConfigEntry=e3ChannelConfigEntry, viprVpnStatsEntry=viprVpnStatsEntry, ilmiStatsReqTimeouts=ilmiStatsReqTimeouts, atmPvcVpcStatsInCellCountLoA=atmPvcVpcStatsInCellCountLoA, atmAtmSpvcVpcPeakCellRateA2B=atmAtmSpvcVpcPeakCellRateA2B, atmUniOverSubscription=atmUniOverSubscription, cirEmAtmPvcVccTable=cirEmAtmPvcVccTable, vbrAtmSpvcStatsInCellCountLoB=vbrAtmSpvcStatsInCellCountLoB, frAtmPvcVccStatsFramesDroppedA=frAtmPvcVccStatsFramesDroppedA, twoWireSourceChannelIfType=twoWireSourceChannelIfType, frAtmSpvcVccMaxFrameSizeIn=frAtmSpvcVccMaxFrameSizeIn, ipAtmBkAppPvcVccSetupNotify=ipAtmBkAppPvcVccSetupNotify, atmPvcVccMfsB2A=atmPvcVccMfsB2A, gr303Aal2PvcVccEntry=gr303Aal2PvcVccEntry, virtualUNIT310=virtualUNIT310, cirEmAtmSpvcVccActiveSvcEntry=cirEmAtmSpvcVccActiveSvcEntry, frLmiStatsT391Exp=frLmiStatsT391Exp, protectionGroup=protectionGroup, vbrAtmSpvcVccStatsVciB=vbrAtmSpvcVccStatsVciB, viprSubChnlTosValue=viprSubChnlTosValue, atmPvcVccStatsIfA=atmPvcVccStatsIfA, viprPingConfigEntry=viprPingConfigEntry, frFrPvcTearDownNotify=frFrPvcTearDownNotify, cirEmAtmBkPvcVccIfB=cirEmAtmBkPvcVccIfB, frFrPvcStatsCellsEncodedHiA=frFrPvcStatsCellsEncodedHiA, protectionGroupEntry=protectionGroupEntry, frFrPvcFlow=frFrPvcFlow, atmSpvcVccRemoteVci=atmSpvcVccRemoteVci, atmUniMyIfName=atmUniMyIfName, atmCirEmAdminStatus=atmCirEmAdminStatus, cirEmAtmBkPvcVccActivePvc=cirEmAtmBkPvcVccActivePvc, vbrAtmSpvcSetUpNotify=vbrAtmSpvcSetUpNotify, cirEmAtmPvcVccEchoCancellationB2A=cirEmAtmPvcVccEchoCancellationB2A, cirEmAtmPvcVccStatsOdometerTimer=cirEmAtmPvcVccStatsOdometerTimer, protectionActiveCounter=protectionActiveCounter, ipAtmAppPvcVccPeakCellRateB2A=ipAtmAppPvcVccPeakCellRateB2A, iptResultCode=iptResultCode, gr303IgId=gr303IgId, tasmChannelConfigTable=tasmChannelConfigTable, cirEmCirEmPvcIfB=cirEmCirEmPvcIfB, frAtmSpvcVccReleaseDiag=frAtmSpvcVccReleaseDiag, bridgeDomainTimer=bridgeDomainTimer, atmPnniCbrCellLossRatioZeroPlusOne=atmPnniCbrCellLossRatioZeroPlusOne, ipAtmAppPvcVccVpiB=ipAtmAppPvcVccVpiB, vbrVbrPvcPeakCellRateA2B=vbrVbrPvcPeakCellRateA2B, dsp2ConfigEntry=dsp2ConfigEntry, atmPvcVccVUNIA=atmPvcVccVUNIA, isdnBChanAdminStatus=isdnBChanAdminStatus, tasmChannelIfType=tasmChannelIfType, atmUniIlmiAttachPtProc=atmUniIlmiAttachPtProc, dspConfigEntry=dspConfigEntry, oamActDeactBRMisInsertedCell=oamActDeactBRMisInsertedCell, pnniProtLinkUpAndNotAdv=pnniProtLinkUpAndNotAdv, cirAtmSpvcVccStatsInOdometerCellCountHiB=cirAtmSpvcVccStatsInOdometerCellCountHiB, cirEmAtmPvcVccStatsInCellCountLoB=cirEmAtmPvcVccStatsInCellCountLoB, cirEmAtmSpvcVccSilenceDetectionA2B=cirEmAtmSpvcVccSilenceDetectionA2B, frAtmSpvcVccStatsOutCellCountHiB=frAtmSpvcVccStatsOutCellCountHiB, vbrAtmSpvcStatsCellsEncodedLoA=vbrAtmSpvcStatsCellsEncodedLoA, viprVpnStatsTable=viprVpnStatsTable, oc3APSPairStatsTable=oc3APSPairStatsTable)
mibBuilder.exportSymbols("ACMIB", sysInfoBIPBErr=sysInfoBIPBErr, ethernetPortStatsDeferredTransmissions=ethernetPortStatsDeferredTransmissions, atmAtmSpvcVccPeakCellRateA2B=atmAtmSpvcVccPeakCellRateA2B, cirEmAtmPvcVccStatsOamRdiRx=cirEmAtmPvcVccStatsOamRdiRx, frAtmSpvcConfigFailNotify=frAtmSpvcConfigFailNotify, oc3APSPairMode=oc3APSPairMode, viprVpnStatsIcmpOutMaskRPs=viprVpnStatsIcmpOutMaskRPs, dspPortConfigTable=dspPortConfigTable, frAtmPvcVccStatsInCellCountHiB=frAtmPvcVccStatsInCellCountHiB, taxiLineStatus=taxiLineStatus, vbrAtmSpvcPeakCellRateA2B=vbrAtmSpvcPeakCellRateA2B, vbrAtmSpvcTable=vbrAtmSpvcTable, ipAtmAppSvcVccMaxBurstSizeB2A=ipAtmAppSvcVccMaxBurstSizeB2A, vbrAtmSpvcVccStatsCellsEncodedHiA=vbrAtmSpvcVccStatsCellsEncodedHiA, ds1PortStatsEntry=ds1PortStatsEntry, dsp2ChannelId=dsp2ChannelId, equipConfig=equipConfig, frAtmPvcVccPeakCellRateB2A=frAtmPvcVccPeakCellRateB2A, viprArpIPAddress=viprArpIPAddress, tasToneSecondFreq=tasToneSecondFreq, bridgeAtmPvcVccStatsVpiB=bridgeAtmPvcVccStatsVpiB, alarmCardAcoChangeNotify=alarmCardAcoChangeNotify, switchAlarmStatusChangeNotify=switchAlarmStatusChangeNotify, callContrlResAllocApply=callContrlResAllocApply, casAdminStatus=casAdminStatus, gr303IntfConfigTable=gr303IntfConfigTable, cirEmAtmSpvcVccRlsEntry=cirEmAtmSpvcVccRlsEntry, e3CellMapping=e3CellMapping, bridgeDomainFullNotify=bridgeDomainFullNotify, removeConfigFilesNotify=removeConfigFilesNotify, cirEmAtmPvcVccStatsOdometerCellsDecodedLoA=cirEmAtmPvcVccStatsOdometerCellsDecodedLoA, oc3APS=oc3APS, resetsonetLineStatistics=resetsonetLineStatistics, atmPvcVccIfB=atmPvcVccIfB, twoWireSourceChannelEncapsulationAal=twoWireSourceChannelEncapsulationAal, cirAtmSpvcVccSetUpNotify=cirAtmSpvcVccSetUpNotify, atmVnnT308=atmVnnT308, gr303IgStatsInCallSuccessful=gr303IgStatsInCallSuccessful, ipThrottlingStatsOdometerReset=ipThrottlingStatsOdometerReset, atmAtmSpvcVccStatsInOdometerCellCountHiA=atmAtmSpvcVccStatsInOdometerCellCountHiA, aal2TrunkConfigSusCellRateIgr=aal2TrunkConfigSusCellRateIgr, vbrAtmSpvcVccStatsOutCellCountHiB=vbrAtmSpvcVccStatsOutCellCountHiB, ipAtmAppPvcVccVUNIB=ipAtmAppPvcVccVUNIB, atmTrunkingSigVccMaxAal2Vcc=atmTrunkingSigVccMaxAal2Vcc, ipAtmAppPvcVccViB=ipAtmAppPvcVccViB, atmPvcVpcStatsEntry=atmPvcVpcStatsEntry, gr303IgTMCProtSwitchProvState=gr303IgTMCProtSwitchProvState, alarmSeverityLevelBitmap=alarmSeverityLevelBitmap, highSpeedChannelIfType=highSpeedChannelIfType, atmImaNeTxState=atmImaNeTxState, frFrPvcInterWorkingFuncA2B=frFrPvcInterWorkingFuncA2B, msgPoolViewTable=msgPoolViewTable, viprStatsMismatchCrcHi=viprStatsMismatchCrcHi, ds1EnhanceFeatureSet1=ds1EnhanceFeatureSet1, viprVpnStatsTimer=viprVpnStatsTimer, spvcAddrTable=spvcAddrTable, vbrAtmSpvcVccStatsOdometerCellsDecodedHiA=vbrAtmSpvcVccStatsOdometerCellsDecodedHiA, ipAtmAppPvcVccStatsOutCellCountHiB=ipAtmAppPvcVccStatsOutCellCountHiB, dsp2AdminStatus=dsp2AdminStatus, atmSpvcVccStatsEntry=atmSpvcVccStatsEntry, atmSpvcVccStatsIfA=atmSpvcVccStatsIfA, oamDebouncingPeriod=oamDebouncingPeriod, atmPvcVpcIfB=atmPvcVpcIfB, siteRemoteMgrSrcAddr1=siteRemoteMgrSrcAddr1, frUniStatsCellsMismatched=frUniStatsCellsMismatched, viprSubChnlIntfIndex=viprSubChnlIntfIndex, atmSpvcVccRowStatus=atmSpvcVccRowStatus, atmPvcVccStatsFrwdErrCrrctnRateB2A=atmPvcVccStatsFrwdErrCrrctnRateB2A, atmTrunkingSigVccBwScr01=atmTrunkingSigVccBwScr01, virtualUNIIntfDeleteNotify=virtualUNIIntfDeleteNotify, viprRouterConfigTable=viprRouterConfigTable, aal2TrunkConfigConnectionStatus=aal2TrunkConfigConnectionStatus, atmTrunkingSigVccEntry=atmTrunkingSigVccEntry, featureStaticMem=featureStaticMem, atmImaFeRxDefect=atmImaFeRxDefect, cirAtmSpvcVccEntry=cirAtmSpvcVccEntry, ipAtmAppPvcVccStatsOutCellCountLoB=ipAtmAppPvcVccStatsOutCellCountLoB, resetFrLmiStatistics=resetFrLmiStatistics, frAtmPvcVccStatsOutCellCountLoB=frAtmPvcVccStatsOutCellCountLoB, ds3LineScramble=ds3LineScramble, intfAtmPvcConnDisplayPort=intfAtmPvcConnDisplayPort, atmPnniT313=atmPnniT313, cirEmAtmBkPvcVccVpiB=cirEmAtmBkPvcVccVpiB, atmPvcVpcStatsCellsTaggedB=atmPvcVpcStatsCellsTaggedB, atmAtmSpvcVpcType=atmAtmSpvcVpcType, atmIfStatsTimer=atmIfStatsTimer, atmBkPvcVpcVUNIB=atmBkPvcVpcVUNIB, atmBkPvcVccVciB=atmBkPvcVccVciB, oamLpbkLocationID=oamLpbkLocationID, oc3OutputTransferRate=oc3OutputTransferRate, callContrlResAllocUsage=callContrlResAllocUsage, cardSerialNumber=cardSerialNumber, bridgeAtmBkPvcVccSetupNotify=bridgeAtmBkPvcVccSetupNotify, frFrPvcStatsOdometerCellsDecodedHiB=frFrPvcStatsOdometerCellsDecodedHiB, backupSoftwareVersion=backupSoftwareVersion, virtualUNIIlmiSecureLinkProc=virtualUNIIlmiSecureLinkProc, atmPvcVccOAMConnSegEndPtStatusA=atmPvcVccOAMConnSegEndPtStatusA, channelConfig=channelConfig, ipAtmAppPvcVccIfB=ipAtmAppPvcVccIfB, sysInfoBIPAErr=sysInfoBIPAErr, atmTrunkingSigVccRetryLimit=atmTrunkingSigVccRetryLimit, bridgeAtmBkPvcVccRowStatus=bridgeAtmBkPvcVccRowStatus, oamTestReqFailNotify=oamTestReqFailNotify, frLmiStatsEnqRx=frLmiStatsEnqRx, vbrAtmPvcVccEntry=vbrAtmPvcVccEntry, cirEmAtmSpvcVccReleaseCause=cirEmAtmSpvcVccReleaseCause, cirEmAtmBkPvcVccVUNIB=cirEmAtmBkPvcVccVUNIB, imaGrpChannelFeState=imaGrpChannelFeState, atmTrunkingBrVccTearDownNotify=atmTrunkingBrVccTearDownNotify, frAtmPvcVccRowStatus=frAtmPvcVccRowStatus, frAtmPvcVccTrafficShapingA2B=frAtmPvcVccTrafficShapingA2B, cirEmAtmSpvcVccStatsCellsDecodedHiA=cirEmAtmSpvcVccStatsCellsDecodedHiA, frAtmBkPvcVccConnFailureCauseB=frAtmBkPvcVccConnFailureCauseB, atmAtmSpvcVccFrwdErrCorrectionA2B=atmAtmSpvcVccFrwdErrCorrectionA2B, cirAtmSpvcVccStatsCellsDroppedB=cirAtmSpvcVccStatsCellsDroppedB, ilmiStatsColdStartTx=ilmiStatsColdStartTx, atmSpvcVccRetryInterval=atmSpvcVccRetryInterval, taxiPortConfigEntry=taxiPortConfigEntry, featureEntry=featureEntry, cellTestPayLoadRx=cellTestPayLoadRx, gr303IgIntfAddFailNotify=gr303IgIntfAddFailNotify, twoWireSourceChannelId=twoWireSourceChannelId, atmPnniRtVbrServCatSupp=atmPnniRtVbrServCatSupp, vbrAtmPvcVccVUNIB=vbrAtmPvcVccVUNIB, atmTrunkingSigVccOutgoingVci=atmTrunkingSigVccOutgoingVci, cirAtmSpvcVccRetryFailure=cirAtmSpvcVccRetryFailure, vbrAtmSpvcStatsInCellCountHiB=vbrAtmSpvcStatsInCellCountHiB, twoWireSinkChannelConnectionType=twoWireSinkChannelConnectionType, spvcAddrRowStatus=spvcAddrRowStatus, dbCirEmIfStatsCellsDecodedLo=dbCirEmIfStatsCellsDecodedLo, vbrIfStatsTable=vbrIfStatsTable, firmwareDownloadFailedNotify=firmwareDownloadFailedNotify, cirAtmSpvcVccEchoCancellationB2A=cirAtmSpvcVccEchoCancellationB2A, ambientTemperatureChangeNotify=ambientTemperatureChangeNotify, vbrAtmSpvcVccRetryLimit=vbrAtmSpvcVccRetryLimit, atmImaStatsTxStuffs=atmImaStatsTxStuffs, virtualUNISscopRxWndSz=virtualUNISscopRxWndSz, stratumCardMismatchNotify=stratumCardMismatchNotify, vbrVbrPvcStatsOdometerCellsDecodedHiB=vbrVbrPvcStatsOdometerCellsDecodedHiB, isdnN201=isdnN201, viprPingTrap=viprPingTrap, atmTrunkingBrVccViB=atmTrunkingBrVccViB, keepAliveTimer=keepAliveTimer, ds3PortConfigEntry=ds3PortConfigEntry, atmPnniConfigEntry=atmPnniConfigEntry, atmTrunkNarrowBandCalls=atmTrunkNarrowBandCalls, atmAtmSpvcVccTearDownNotify=atmAtmSpvcVccTearDownNotify, atmAtmSpvcVpcTable=atmAtmSpvcVpcTable, virtualIntfStatsIf=virtualIntfStatsIf, vbrAtmBkPvcVccRowStatus=vbrAtmBkPvcVccRowStatus, atmPnniRtVbrVarianceFactor=atmPnniRtVbrVarianceFactor, vbrAtmSpvcStatsCellsDecodedHiA=vbrAtmSpvcStatsCellsDecodedHiA, atmTrunkingSigVccOperStatus=atmTrunkingSigVccOperStatus, frLmiStatsPktDisc=frLmiStatsPktDisc, sts1VtPointers=sts1VtPointers, cirAtmSpvcVccStatsOutOdometerCellCountHiB=cirAtmSpvcVccStatsOutOdometerCellCountHiB, atmPvcVccStatsVciA=atmPvcVccStatsVciA, cirEmCirEmPvcSetupNotify=cirEmCirEmPvcSetupNotify, msChannelSecuFeature=msChannelSecuFeature, atmSvcVccType=atmSvcVccType, pgtResultCode=pgtResultCode, atmSvcVccStatsOdometerTimer=atmSvcVccStatsOdometerTimer, vbrAtmSpvcMaxBurstSizeB2A=vbrAtmSpvcMaxBurstSizeB2A, cirEmAtmPvcVccConnectionStatus=cirEmAtmPvcVccConnectionStatus, atmImaNeRxDefect=atmImaNeRxDefect, oamActDeactVciB=oamActDeactVciB, atmIfStatsNullCellsOutHi=atmIfStatsNullCellsOutHi, ds1PortId=ds1PortId, atmPvcVccStatsTable=atmPvcVccStatsTable, ipAtmAppPvcVccStatsOdometerFramesOutB=ipAtmAppPvcVccStatsOdometerFramesOutB, vbrAtmSpvcPriority=vbrAtmSpvcPriority, viprVpnStatsIcmpOutTimeRPs=viprVpnStatsIcmpOutTimeRPs, atmVnnIlmiRetryK=atmVnnIlmiRetryK, atmSpvcVccStatsVpiA=atmSpvcVccStatsVpiA, secondaryCpuHwType=secondaryCpuHwType, atmIispT399=atmIispT399, iispVbrRouteIfIndex=iispVbrRouteIfIndex, atmIispT309=atmIispT309, routerEthernetIpAddress=routerEthernetIpAddress, virtualUNIIntfCreateFailNotify=virtualUNIIntfCreateFailNotify, vbrAtmSpvcStatsOdometerCellsEncodedHiA=vbrAtmSpvcStatsOdometerCellsEncodedHiA, sysTest=sysTest, frAtmPvcVccStatsOutCellCountHiB=frAtmPvcVccStatsOutCellCountHiB, ds1LoopbackConfig=ds1LoopbackConfig, arp1PhysicalAddr=arp1PhysicalAddr, atmTrunkingBrVccConfiguredNotify=atmTrunkingBrVccConfiguredNotify, atmSvcVccStatsInCellCountLoA=atmSvcVccStatsInCellCountLoA, frFrPvcBeA2B=frFrPvcBeA2B, atmAtmSpvcVpcRetryInterval=atmAtmSpvcVpcRetryInterval, imaGrpChannelStatus=imaGrpChannelStatus, cgApiCirEmCirEmPvcCalls=cgApiCirEmCirEmPvcCalls, interfaceCreateFailNotify=interfaceCreateFailNotify, tasToneOffTime=tasToneOffTime, remoteDbServerPassword=remoteDbServerPassword, tasmMaxTestControlBlocks=tasmMaxTestControlBlocks, tasToneThirdFreq=tasToneThirdFreq, bridgeDomainTimeSinceTopologyChange=bridgeDomainTimeSinceTopologyChange, atmUniMyNeighborIfName=atmUniMyNeighborIfName, arp1Entry=arp1Entry, vbrAtmSpvcRelease=vbrAtmSpvcRelease, viprSubChnlStatsCellsDroppedB=viprSubChnlStatsCellsDroppedB, atmAtmSpvcVpcStatsOutCellCountHiB=atmAtmSpvcVpcStatsOutCellCountHiB, isdnBChanConfigTable=isdnBChanConfigTable, atmSpvcVccStatsCellsDroppedB=atmSpvcVccStatsCellsDroppedB, ipAtmAppPvcVccStatsInCellCountLoA=ipAtmAppPvcVccStatsInCellCountLoA, FrConnFailureCause=FrConnFailureCause, tasCmprsAnnceIntfIndex=tasCmprsAnnceIntfIndex, viprSubChnlShutDwnWarnTmr=viprSubChnlShutDwnWarnTmr, arp2EntryAge=arp2EntryAge, atmSpvcModifiedNotify=atmSpvcModifiedNotify, atmImaNeRxState=atmImaNeRxState, bridgeAtmPvcVccMfsB2A=bridgeAtmPvcVccMfsB2A, atmPvcVccStatsOutCellCountLoB=atmPvcVccStatsOutCellCountLoB, virtualIntfConfigTable=virtualIntfConfigTable, oc3APSWorkingSlot=oc3APSWorkingSlot, frAtmSpvcVccRetryFailure=frAtmSpvcVccRetryFailure, tasTrapTstId=tasTrapTstId, vbrAtmPvcVccStatsEntry=vbrAtmPvcVccStatsEntry, viprSubChnlStatsOutCellCountLoB=viprSubChnlStatsOutCellCountLoB, ipAtmAppPvcVccTrafficShapingA2B=ipAtmAppPvcVccTrafficShapingA2B, atmPvcVpcConnFailureCauseB=atmPvcVpcConnFailureCauseB, msRxClkPolarity=msRxClkPolarity, virtualUNISvcMaxVpi=virtualUNISvcMaxVpi, oamActDeactStsSnkPointEtePMBR=oamActDeactStsSnkPointEtePMBR, atmPnniRtVbrMaxCellRate=atmPnniRtVbrMaxCellRate, vbrAtmSpvcVccStatsOdometerReset=vbrAtmSpvcVccStatsOdometerReset, frAtmPvcVccStatsVpiB=frAtmPvcVccStatsVpiB, atmSpvcVccAtmPortAddr=atmSpvcVccAtmPortAddr, oldStratumCardNotify=oldStratumCardNotify, vbrAtmSpvcFlow=vbrAtmSpvcFlow, cirEmAtmPvcVccRowStatus=cirEmAtmPvcVccRowStatus, vbrAtmSpvcVccRetryInterval=vbrAtmSpvcVccRetryInterval, atmPvcVpcStatsOamAisRxB=atmPvcVpcStatsOamAisRxB, viprSubChnlStatsOutOdometerCellCountLoA=viprSubChnlStatsOutOdometerCellCountLoA, appIpRouteTable=appIpRouteTable, frUniN391=frUniN391, aal2TrunkConfigMaxBurstSizeEgr=aal2TrunkConfigMaxBurstSizeEgr, featureDesiredStatus=featureDesiredStatus, atmPnniT309=atmPnniT309, atmPvcVpcStatsOutCellCountLoB=atmPvcVpcStatsOutCellCountLoB, atmPvcVccSusCellRateB2A=atmPvcVccSusCellRateB2A, gr303EOCChannelId=gr303EOCChannelId, ethernetPortStatsSQETestErrors=ethernetPortStatsSQETestErrors, cirEmAtmPvcVccSilenceDetectionA2B=cirEmAtmPvcVccSilenceDetectionA2B, frAtmBkPvcVccTable=frAtmBkPvcVccTable, vbrAtmSpvcVccStatsInCellCountHiB=vbrAtmSpvcVccStatsInCellCountHiB, frFrPvcCirA2B=frFrPvcCirA2B, cirEmIfStatsCellsDecodedLo=cirEmIfStatsCellsDecodedLo, viprSubChnlTimeInterval=viprSubChnlTimeInterval, ds1ChannelCellMapping=ds1ChannelCellMapping, gr303Ds0ChanAdminStatus=gr303Ds0ChanAdminStatus, oc3APSPairWorkingSFBERThreshold=oc3APSPairWorkingSFBERThreshold, vbrAtmSpvcStatsOdometerCellsDecodedHiA=vbrAtmSpvcStatsOdometerCellsDecodedHiA, atmBkPvcVccIfB=atmBkPvcVccIfB)
mibBuilder.exportSymbols("ACMIB", ipAtmAppSvcVccStatsOutCellCountHiA=ipAtmAppSvcVccStatsOutCellCountHiA, sysInfoRxOneCellUsed=sysInfoRxOneCellUsed, atmImaConfigTable=atmImaConfigTable, vbrVbrPvcStatsOdometerCellsDecodedLoB=vbrVbrPvcStatsOdometerCellsDecodedLoB, bridgeCacheEntry=bridgeCacheEntry, atmPvcVpcOamStatusB=atmPvcVpcOamStatusB, h248SysControl=h248SysControl, cirAtmSpvcVccReleaseCause=cirAtmSpvcVccReleaseCause, viprRouterNoOfInterfaces=viprRouterNoOfInterfaces, virtualUNIIntfModifiedNotify=virtualUNIIntfModifiedNotify, ipAtmAppSvcVccSubnetMaskA=ipAtmAppSvcVccSubnetMaskA, cirEmAtmSpvcVccViB=cirEmAtmSpvcVccViB, dspConfigTable=dspConfigTable, msPortStatsEntry=msPortStatsEntry, vbrAtmSpvcVccStatsInCellCountLoB=vbrAtmSpvcVccStatsInCellCountLoB, interfaceFailureReasonCode=interfaceFailureReasonCode, frAtmSpvcVccRemoteVci=frAtmSpvcVccRemoteVci, routerOperStatus=routerOperStatus, gr303Aal2PvcVccIfB=gr303Aal2PvcVccIfB, atmSvcVccPeakCellRateA2B=atmSvcVccPeakCellRateA2B, vbrAtmPvcVccPeakCellRateA2B=vbrAtmPvcVccPeakCellRateA2B, oc3APSSelectorState=oc3APSSelectorState, inBandBackupIpMask=inBandBackupIpMask, aal2TrunkCuTimer=aal2TrunkCuTimer, fwReleaseUpgrade=fwReleaseUpgrade, atmTrunkingBrVccActiveChanCnt=atmTrunkingBrVccActiveChanCnt, atmPvcVpcStatsOutCellCountLoA=atmPvcVpcStatsOutCellCountLoA, msgPoolViewTskName=msgPoolViewTskName, iispCbrRouteEntry=iispCbrRouteEntry, atmTrunkingIWFLocalAddress=atmTrunkingIWFLocalAddress, softwareDownloadStatusNotify=softwareDownloadStatusNotify, dhpvcChangeNotify=dhpvcChangeNotify, frAtmSpvcVccTrafficShapingA2B=frAtmSpvcVccTrafficShapingA2B, vbrAtmPvcVccStatsInCellCountHiB=vbrAtmPvcVccStatsInCellCountHiB, vbrAtmSpvcStatsOdometerTimer=vbrAtmSpvcStatsOdometerTimer, bridgeCacheTable=bridgeCacheTable, frAtmPvcVccInterWorkingFuncOut=frAtmPvcVccInterWorkingFuncOut, atmPvcVpcTrafficShapingB2A=atmPvcVpcTrafficShapingB2A, atmPvcVccTable=atmPvcVccTable, vbrAtmPvcVccStatsOdometerCellsEncodedHiA=vbrAtmPvcVccStatsOdometerCellsEncodedHiA, vbrAtmSpvcVccStatsOdometerCellsEncodedHiA=vbrAtmSpvcVccStatsOdometerCellsEncodedHiA, atmTrunkingBrVccCircuitModeDataSupp=atmTrunkingBrVccCircuitModeDataSupp, atmSpvcVccStatsFrwdErrCrrctnRateB2A=atmSpvcVccStatsFrwdErrCrrctnRateB2A, frAtmSpvcModifyFailNotify=frAtmSpvcModifyFailNotify, dspChannelIfType=dspChannelIfType, atmUniUbrLoadBalSupp=atmUniUbrLoadBalSupp, cirEmAtmSpvcVccRetryFailure=cirEmAtmSpvcVccRetryFailure, vbrAtmSpvcVccIfA=vbrAtmSpvcVccIfA, bridgeDomainAdminStatus=bridgeDomainAdminStatus, e3PortStatsCurrentSEFSs=e3PortStatsCurrentSEFSs, oamTestLocationID=oamTestLocationID, viprArpHwAddress=viprArpHwAddress, lmiDlciOperStatus=lmiDlciOperStatus, tasAnnceValid=tasAnnceValid, workingSlotId=workingSlotId, twoWireSourcePortConfigTable=twoWireSourcePortConfigTable, msPortConfigEntry=msPortConfigEntry, siteFirmwarePatchNumber=siteFirmwarePatchNumber, atmAtmSpvcVpcIfB=atmAtmSpvcVpcIfB, vbrAtmPvcVccPeakCellRateB2A=vbrAtmPvcVccPeakCellRateB2A, atmArpTable=atmArpTable, cirEmCirEmPvcCodingTranslationB2A=cirEmCirEmPvcCodingTranslationB2A, atmPnniAbrAvailCellRate=atmPnniAbrAvailCellRate, atmImaStatsTimer=atmImaStatsTimer, atmPvcVccStatsVciB=atmPvcVccStatsVciB, oamLpbkVpiB=oamLpbkVpiB, tasmControlBlockResAllocFailNotify=tasmControlBlockResAllocFailNotify, cirEmAtmPvcVccCodingTranslationA2B=cirEmAtmPvcVccCodingTranslationA2B, atmArpAtmAddress=atmArpAtmAddress, arpStatus=arpStatus, oamLpbkIfB=oamLpbkIfB, viprRoutingIndex=viprRoutingIndex, frLmiStatsEnqTx=frLmiStatsEnqTx, twoWireSinkChannelIfType=twoWireSinkChannelIfType, imaGrpChannelNeTxClkMode=imaGrpChannelNeTxClkMode, atmPnniNrtVbrMaxCellRate=atmPnniNrtVbrMaxCellRate, atmAtmSpvcVccSusCellRateB2A=atmAtmSpvcVccSusCellRateB2A, switchAlarmStatus=switchAlarmStatus, atmSvcVccIfA=atmSvcVccIfA, atmPnniRemoteSvcMaxVci=atmPnniRemoteSvcMaxVci, pnniRtAddrCfgNotify=pnniRtAddrCfgNotify, casProtocolType=casProtocolType, virtualUNISvcMinVpi=virtualUNISvcMinVpi, cirAtmSpvcVccStatsCellsEncodedHiA=cirAtmSpvcVccStatsCellsEncodedHiA, atmSpvcVccRemoteSelectType=atmSpvcVccRemoteSelectType, e3ChannelId=e3ChannelId, cirEmAtmSpvcVccTable=cirEmAtmSpvcVccTable, atmAtmSpvcVccVUNIB=atmAtmSpvcVccVUNIB, atmAtmSpvcVpcReleaseDiag=atmAtmSpvcVpcReleaseDiag, atmPvcVpcStatsInCellCountLoB=atmPvcVpcStatsInCellCountLoB, atmSvcVccStatsOutOdometerCellCountHiA=atmSvcVccStatsOutOdometerCellCountHiA, vbrAtmPvcVccStatsOutCellCountLoB=vbrAtmPvcVccStatsOutCellCountLoB, atmSpvcVccStatsOdometerReset=atmSpvcVccStatsOdometerReset, atmPnniRtVbrGcacPresent=atmPnniRtVbrGcacPresent, vbrAtmPvcVccTrafficShapingA2B=vbrAtmPvcVccTrafficShapingA2B, gr303IgPrimaryTMCChanIntfId=gr303IgPrimaryTMCChanIntfId, viprRouteInitTmr=viprRouteInitTmr, bridgeBridgePvcConnFailureCauseA=bridgeBridgePvcConnFailureCauseA, frAtmSpvcVccStatsInCellCountHiB=frAtmSpvcVccStatsInCellCountHiB, atmUniUserAddrOrgScope=atmUniUserAddrOrgScope, atmAtmSpvcVccStatsOutOdometerCellCountHiA=atmAtmSpvcVccStatsOutOdometerCellCountHiA, dbCirEmIfStatsEntry=dbCirEmIfStatsEntry, gr303IgPrimaryTMCStatus=gr303IgPrimaryTMCStatus, atmSvcVccStatsIfA=atmSvcVccStatsIfA, sysInfoMsgPoolTotal=sysInfoMsgPoolTotal, frAtmPvcVccStatsCellsEncodedHiA=frAtmPvcVccStatsCellsEncodedHiA, vuniIlmiStatsReqTimeouts=vuniIlmiStatsReqTimeouts, vbrAtmPvcVccStatsCellsEncodedLoA=vbrAtmPvcVccStatsCellsEncodedLoA, vbrVbrPvcStatsOdometerCellsDecodedLoA=vbrVbrPvcStatsOdometerCellsDecodedLoA, tasToneType=tasToneType, viprSubChnlStatsInOdometerCellCountHiB=viprSubChnlStatsInOdometerCellCountHiB, oc3LineStatus=oc3LineStatus, frAtmSpvcVccRetryLimit=frAtmSpvcVccRetryLimit, dsp2ConfigTable=dsp2ConfigTable, oamActDeactIfB=oamActDeactIfB, virtualIntfConfigEntry=virtualIntfConfigEntry, atmDbCirEmOperStatus=atmDbCirEmOperStatus, aal2TrunkConfigViB=aal2TrunkConfigViB, highSpeedPortConfigEntry=highSpeedPortConfigEntry, atmPvcVccOAMConnEndPtStatusA=atmPvcVccOAMConnEndPtStatusA, atmAtmSpvcVccLeafReference=atmAtmSpvcVccLeafReference, viprVpnStatsIcmpInSrcQuenchs=viprVpnStatsIcmpInSrcQuenchs, bridgeAtmPvcVccStatsCellsDroppedB=bridgeAtmPvcVccStatsCellsDroppedB, pgtSwitchbackMethod=pgtSwitchbackMethod, atmPvcVpcCnfrmTypeB2A=atmPvcVpcCnfrmTypeB2A, ds3PortStatsCurrentLESs=ds3PortStatsCurrentLESs, aal2TrunkConfigVUNIB=aal2TrunkConfigVUNIB, atmAtmSpvcVpcRetryFailure=atmAtmSpvcVpcRetryFailure, cirEmAtmSpvcVccStatsVciB=cirEmAtmSpvcVccStatsVciB, atmSpvcVccViB=atmSpvcVccViB, atmTrunkingSigVccOwner=atmTrunkingSigVccOwner, atmBkPvcVpcConnFailureCauseB=atmBkPvcVpcConnFailureCauseB, frFrPvcStatsFramesDroppedB=frFrPvcStatsFramesDroppedB, atmSvcVccIfB=atmSvcVccIfB, atmTrunkingBrVccConfigFailNotify=atmTrunkingBrVccConfigFailNotify, oamActDeactBRLostInsertedCell=oamActDeactBRLostInsertedCell, vbrVbrPvcStatsCellsEncodedLoB=vbrVbrPvcStatsCellsEncodedLoB, ipAtmAppPvcVccSusCellRateB2A=ipAtmAppPvcVccSusCellRateB2A, referenceClockFailNotify=referenceClockFailNotify, aal2TrunkConfigPeakCellRateIgr=aal2TrunkConfigPeakCellRateIgr, atmAtmSpvcVpcStatsOutCellCountLoA=atmAtmSpvcVpcStatsOutCellCountLoA, vbrAtmPvcVccStatsInOdometerCellCountLoB=vbrAtmPvcVccStatsInOdometerCellCountLoB, gr303PPSCommandFailNotify=gr303PPSCommandFailNotify, frAtmPvcVccMaxFrameSizeIn=frAtmPvcVccMaxFrameSizeIn, cirEmIfStatsCellsEncodedHi=cirEmIfStatsCellsEncodedHi, cirEmCirEmPvcStatsOdometerCellsDecodedHiB=cirEmCirEmPvcStatsOdometerCellsDecodedHiB, statRtStatus=statRtStatus, atmTrunkingSigVccOutgoingIfIndex=atmTrunkingSigVccOutgoingIfIndex, viprConfig=viprConfig, toneAnnceOperStatus=toneAnnceOperStatus, atmBkPvcVpcTearDownNotify=atmBkPvcVpcTearDownNotify, imaGrpChannelRxFrameLength=imaGrpChannelRxFrameLength, bridgeIfIndex=bridgeIfIndex, atmIispAvailBwIgr=atmIispAvailBwIgr, ipAtmAppSvcVccStatsSubnetMaskA=ipAtmAppSvcVccStatsSubnetMaskA, ipAtmAppPvcVccMfsB2A=ipAtmAppPvcVccMfsB2A, sts1LineCoding=sts1LineCoding, gr303Ds0ChanConfigTable=gr303Ds0ChanConfigTable, ipThrottlingInPackets=ipThrottlingInPackets, cirEmAtmSpvcVccRemoteCePortAddr=cirEmAtmSpvcVccRemoteCePortAddr, gr303IgCreatedNotify=gr303IgCreatedNotify, atmAtmSpvcVccVciA=atmAtmSpvcVccVciA, oc3PortStatsEntry=oc3PortStatsEntry, lmiDlciConfigTable=lmiDlciConfigTable, IntfIndex=IntfIndex, arp2IpAddress=arp2IpAddress, ipAtmAppSvcVccStatsTimer=ipAtmAppSvcVccStatsTimer, imaGrpChannelLeastDelayLink=imaGrpChannelLeastDelayLink, atmPnniT398=atmPnniT398, imaGrpChannelGammaValue=imaGrpChannelGammaValue, vbrAtmSpvcVccRlsTable=vbrAtmSpvcVccRlsTable, ds3LineType=ds3LineType, fileTransferStatusNotify=fileTransferStatusNotify, apsFailureReasonCode=apsFailureReasonCode, cirEmSpvcDeletedNotify=cirEmSpvcDeletedNotify, atmTrunkingBrVccRetryCounter=atmTrunkingBrVccRetryCounter, toneAnnceAccountName=toneAnnceAccountName, frLmiStatsStatusTx=frLmiStatsStatusTx, atmSvcIntfLayer2Up=atmSvcIntfLayer2Up, fwReleaseNextVersion=fwReleaseNextVersion, casConfigEntry=casConfigEntry, frUniStatsCellsEncodedHi=frUniStatsCellsEncodedHi, vbrAtmSpvcVccActiveSvcEntry=vbrAtmSpvcVccActiveSvcEntry, viprRouterConfigEntry=viprRouterConfigEntry, toneAnnceFtpStatusNotify=toneAnnceFtpStatusNotify, ipAtmAppPvcVccMaxBurstSizeB2A=ipAtmAppPvcVccMaxBurstSizeB2A, trapActivationTable=trapActivationTable, frUniStatsFramesEncodedLo=frUniStatsFramesEncodedLo, atmPvcVccStatsInCellCountLoB=atmPvcVccStatsInCellCountLoB, atmPnniIlmiSecureLinkProc=atmPnniIlmiSecureLinkProc, atmAtmSpvpDeletedNotify=atmAtmSpvpDeletedNotify, frLmiStatsStatusRx=frLmiStatsStatusRx, bridgeCacheSourcePort=bridgeCacheSourcePort, oc3APSPairConfigEntry=oc3APSPairConfigEntry, oc3APSPairUserCommand=oc3APSPairUserCommand, cirEmIfStatsCellsDecodedHi=cirEmIfStatsCellsDecodedHi, userServiceConfig=userServiceConfig, viprPingConfigTable=viprPingConfigTable, viprSubChnlStatsTable=viprSubChnlStatsTable, frFrPvcStatsCellsEncodedLoB=frFrPvcStatsCellsEncodedLoB, atmAtmSpvcVccRestart=atmAtmSpvcVccRestart, ethernetPortStatsId=ethernetPortStatsId, frFrPvcStatsIfB=frFrPvcStatsIfB, atmTrunkingBrVccCuTimer=atmTrunkingBrVccCuTimer, vuniIlmiStatsPduRx=vuniIlmiStatsPduRx, vbrAtmSpvcModifiedNotify=vbrAtmSpvcModifiedNotify, vbrAtmSpvcVccRelease=vbrAtmSpvcVccRelease, frLmiStatsAsyncRx=frLmiStatsAsyncRx, atmPvcVccTearDownNotify=atmPvcVccTearDownNotify, atmPvcVpcConnFailureCauseA=atmPvcVpcConnFailureCauseA, iispCbrRouteIfVuniId=iispCbrRouteIfVuniId, e3ChannelIfType=e3ChannelIfType, atmTrunkingRemoteIWFTable=atmTrunkingRemoteIWFTable, atmTermEmOperStatus=atmTermEmOperStatus, atmPnniAbrMaxCellRate=atmPnniAbrMaxCellRate, atmDbCirEmDbcesType=atmDbCirEmDbcesType, cardSlot=cardSlot, atmAtmSpvcVccStatsOutCellCountLoA=atmAtmSpvcVccStatsOutCellCountLoA, atmSvcVccSarTypeA2B=atmSvcVccSarTypeA2B, arp2CardSlot=arp2CardSlot, oamActDeactBRBlockError=oamActDeactBRBlockError, oamTestLoopbackType=oamTestLoopbackType, frAtmPvcVccCirOut=frAtmPvcVccCirOut, pnniRtAddrAddByIlmiNotify=pnniRtAddrAddByIlmiNotify, frUniStatsTable=frUniStatsTable, atmSpvcVccVpiB=atmSpvcVccVpiB, interfaceIndex=interfaceIndex, tasToneOnTime=tasToneOnTime, atmBkPvcVpcEntry=atmBkPvcVpcEntry, cirEmAtmSpvcVccStatsOdometerCellsDecodedLoA=cirEmAtmSpvcVccStatsOdometerCellsDecodedLoA, appIpRouteMetric1=appIpRouteMetric1, resetsonetVTPathStatistics=resetsonetVTPathStatistics, oamTestStatus=oamTestStatus, frAtmSpvcVccPriority=frAtmSpvcVccPriority, dspIfIndex=dspIfIndex, atmAtmSpvcVccIfB=atmAtmSpvcVccIfB, ds3LineBuildOut=ds3LineBuildOut, atmAtmSpvcVccRemoteVci=atmAtmSpvcVccRemoteVci, dbCirEmIfStatsId=dbCirEmIfStatsId, vbrVbrPvcStatsCellsDecodedHiA=vbrVbrPvcStatsCellsDecodedHiA, dsp2PortConfigTable=dsp2PortConfigTable, cRC4ModifyFailNotify=cRC4ModifyFailNotify, vuniIlmiStatsSecureLnkProcInit=vuniIlmiStatsSecureLnkProcInit, bridgeAtmPvcVccStatsOdometerCellsEncodedHiA=bridgeAtmPvcVccStatsOdometerCellsEncodedHiA, viprVpnStatsIcmpInErrors=viprVpnStatsIcmpInErrors, bridgeAtmPvcVccStatsInCellCountHiB=bridgeAtmPvcVccStatsInCellCountHiB, atmAtmSpvcVpcStatsInCellCountHiA=atmAtmSpvcVpcStatsInCellCountHiA, ipAtmAppPvcVccTable=ipAtmAppPvcVccTable, siteAtmAddrUser1=siteAtmAddrUser1, cirEmCirEmPvcStatsCellsDecodedLoA=cirEmCirEmPvcStatsCellsDecodedLoA, vbrAtmSpvcVccStatsOdometerCellsEncodedLoA=vbrAtmSpvcVccStatsOdometerCellsEncodedLoA, atmSpvcVccStatsTable=atmSpvcVccStatsTable, atmAtmSpvcVccTrafficShapingA2B=atmAtmSpvcVccTrafficShapingA2B, cirAtmSpvcVccSilenceDetectionB2A=cirAtmSpvcVccSilenceDetectionB2A)
mibBuilder.exportSymbols("ACMIB", atmPnniAvailBwIgr=atmPnniAvailBwIgr, systemFilesDirtyBitStatus=systemFilesDirtyBitStatus, virtualUNISvcMaxVci=virtualUNISvcMaxVci, atmPvcVccIfA=atmPvcVccIfA, cirEmAtmSpvcVccVoiceCompressionB2A=cirEmAtmSpvcVccVoiceCompressionB2A, frAtmPvcVccStatsOamRdiTx=frAtmPvcVccStatsOamRdiTx, atmAtmSpvcVpcStatsFrwdErrCrrctnRateA2B=atmAtmSpvcVpcStatsFrwdErrCrrctnRateA2B, ipAtmAppPvcVccEntry=ipAtmAppPvcVccEntry, cardOperatingMode=cardOperatingMode, atmBkPvcVccConnFailureCauseB=atmBkPvcVccConnFailureCauseB, bridgeCacheEntryAge=bridgeCacheEntryAge, atmArpEntryState=atmArpEntryState, vbrAtmSpvcVccPeakCellRateA2B=vbrAtmSpvcVccPeakCellRateA2B, cirEmAtmSpvcVccRelease=cirEmAtmSpvcVccRelease, vbrAtmPvcVccDualHomed=vbrAtmPvcVccDualHomed, isdnN200=isdnN200, imaGrpChannelStatsFeNumFailures=imaGrpChannelStatsFeNumFailures, ipAtmAppSvcVccVUNIB=ipAtmAppSvcVccVUNIB, frFrPvcBeB2A=frFrPvcBeB2A, oc3APSPairCurrentState=oc3APSPairCurrentState, iptOperatingIntf=iptOperatingIntf, tasCmprsAnnceId=tasCmprsAnnceId, oamTestVpiB=oamTestVpiB, tasmPortConfigEntry=tasmPortConfigEntry, spvcPriorityScheme=spvcPriorityScheme, atmIispConfigTable=atmIispConfigTable, pgtStandbySelection=pgtStandbySelection, atmPvcVccMaxBurstSizeA2B=atmPvcVccMaxBurstSizeA2B, alarmStatusInputBitmap=alarmStatusInputBitmap, spvcGlobalPriorityScheme=spvcGlobalPriorityScheme, vuniIlmiStatsTimer=vuniIlmiStatsTimer, oc3APSPairWorkingSDDuration=oc3APSPairWorkingSDDuration, oamActDeactTable=oamActDeactTable, virtualUNIIlmiOperStatus=virtualUNIIlmiOperStatus, msRs232XmitMode=msRs232XmitMode, ipAtmAppSvcVccVpiB=ipAtmAppSvcVccVpiB, imaGrpChannelConfigEntry=imaGrpChannelConfigEntry, atmIispConnTrafficShapingFlag=atmIispConnTrafficShapingFlag, frAtmPvcVccBeOut=frAtmPvcVccBeOut, iispCbrRouteIfIndex=iispCbrRouteIfIndex, e3PortStatsTable=e3PortStatsTable, trapGroupId=trapGroupId, atmAtmSpvcVccMaxBurstSizeB2A=atmAtmSpvcVccMaxBurstSizeB2A, tasmChannelAlarmType=tasmChannelAlarmType, bridgeDomainRootPort=bridgeDomainRootPort, frAtmPvcVccMfsB2A=frAtmPvcVccMfsB2A, viprIntfConfigTable=viprIntfConfigTable, atmTrunkingBrVccId=atmTrunkingBrVccId, cirEmAtmSpvcVccRowStatus=cirEmAtmSpvcVccRowStatus, frFrPvcStatsOdometerCellsDecodedHiA=frFrPvcStatsOdometerCellsDecodedHiA, atmSpvcVccViA=atmSpvcVccViA, vuniIlmiStatsLinkResets=vuniIlmiStatsLinkResets, cirEmCirEmPvcStatsCellsDecodedLoB=cirEmCirEmPvcStatsCellsDecodedLoB, intfAtmPvcConnDisplayTable=intfAtmPvcConnDisplayTable, ethernetPortStatsLateCollisions=ethernetPortStatsLateCollisions, frAtmSpvcModifiedNotify=frAtmSpvcModifiedNotify, atmCirEmAlarmDataPattern=atmCirEmAlarmDataPattern, atmPnniSvcMaxVpi=atmPnniSvcMaxVpi, atmTrunkingBrVccConfigEntry=atmTrunkingBrVccConfigEntry, imaGrpChannelTxImaId=imaGrpChannelTxImaId, svcPointToMultiPointCalls=svcPointToMultiPointCalls, atmPnniRtVbrCellRateMargin=atmPnniRtVbrCellRateMargin, interfaceProtectionEntry=interfaceProtectionEntry, cirAtmSpvcVccViB=cirAtmSpvcVccViB, firmwareDownloadReasonCode=firmwareDownloadReasonCode, atmPvcVccStatsOamAisRxA=atmPvcVccStatsOamAisRxA, ilmiStatsPacketDisc=ilmiStatsPacketDisc, frAtmPvcVccStatsCellsDecodedHiA=frAtmPvcVccStatsCellsDecodedHiA, siteEtherIpMask=siteEtherIpMask, gr303IgTMCProtSwitchCommand=gr303IgTMCProtSwitchCommand, frAtmSpvcVccMaxBurstSizeB2A=frAtmSpvcVccMaxBurstSizeB2A, atmTrunkingBrVccVci=atmTrunkingBrVccVci, ds3PortStatsTimer=ds3PortStatsTimer, frAtmPvcVccOamStatus=frAtmPvcVccOamStatus, virtualUNIVciIlmi=virtualUNIVciIlmi, taxiPortId=taxiPortId, viprRouteId=viprRouteId, bridgeAtmPvcVccTearDownNotify=bridgeAtmPvcVccTearDownNotify, vbrAtmSpvcSusCellRateA2B=vbrAtmSpvcSusCellRateA2B, saveConfigurationReasonCode=saveConfigurationReasonCode, bridgeDomainDefaultGateway=bridgeDomainDefaultGateway, viprSubChnlTosFeature=viprSubChnlTosFeature, atmPnniVciIlmi=atmPnniVciIlmi, remoteDbServerLogin=remoteDbServerLogin, atmCirEmCASIdleAbcdPattern=atmCirEmCASIdleAbcdPattern, vbrAtmSpvcVccTearDownNotify=vbrAtmSpvcVccTearDownNotify, cirAtmSpvcVccRestart=cirAtmSpvcVccRestart, routerConfigEntry=routerConfigEntry, powerSupplyStatusNotify=powerSupplyStatusNotify, cirEmAtmPvcVccIfA=cirEmAtmPvcVccIfA, viprRoutingDestAddress=viprRoutingDestAddress, ilmiStatsAttachPtVerified=ilmiStatsAttachPtVerified, atmPnniCbrGcacClpEqualZero=atmPnniCbrGcacClpEqualZero, h248TermChanId=h248TermChanId, atmSpvcVccStatsCellsTaggedB=atmSpvcVccStatsCellsTaggedB, oamTestRxCount=oamTestRxCount, msEquipmentType=msEquipmentType, atmSpvcVccStatsOutCellCountLoB=atmSpvcVccStatsOutCellCountLoB, sysInfoTxOneCellTotal=sysInfoTxOneCellTotal, siteID=siteID, atmIispT310=atmIispT310, frFrPvcServiceType=frFrPvcServiceType, atmSpvcVccReleaseCause=atmSpvcVccReleaseCause, atmPvcVccSarTypeA2B=atmPvcVccSarTypeA2B, frAtmPvcVccStatsVciB=frAtmPvcVccStatsVciB, cirAtmSpvcVccRowStatus=cirAtmSpvcVccRowStatus, frAtmPvcVccStatsAal5ErrFramesA=frAtmPvcVccStatsAal5ErrFramesA, bridgeStatsBasePortDelayExceededDiscardsLo=bridgeStatsBasePortDelayExceededDiscardsLo, cirEmAtmPvcVccStatsOutOdometerCellCountLoB=cirEmAtmPvcVccStatsOutOdometerCellCountLoB, vbrAtmBkPvcVccVciB=vbrAtmBkPvcVccVciB, atmAtmSpvcVccConnType=atmAtmSpvcVccConnType, vbrAtmSpvcStatsTimer=vbrAtmSpvcStatsTimer, virtualIntfStatsVi=virtualIntfStatsVi, twoWireSinkPortConfigEntry=twoWireSinkPortConfigEntry, atmPvcVpcOamStatus=atmPvcVpcOamStatus, h248MGProvisionalResponseTimerValue=h248MGProvisionalResponseTimerValue, pnniIntfCfgFailNotify=pnniIntfCfgFailNotify, tasMemNotify=tasMemNotify, ipAtmAppSvcVccTable=ipAtmAppSvcVccTable, oamActDeactStsSrcPointEtePMBR=oamActDeactStsSrcPointEtePMBR, siteTrapDialOutBeeperData=siteTrapDialOutBeeperData, frFrPvcCirB2A=frFrPvcCirB2A, ds3PortStatsCurrentLCVs=ds3PortStatsCurrentLCVs, frAtmSpvcVccStatsCellsEncodedLoA=frAtmSpvcVccStatsCellsEncodedLoA, frUniStatsCellsDecodedLo=frUniStatsCellsDecodedLo, vbrAtmPvcVccMaxBurstSizeB2A=vbrAtmPvcVccMaxBurstSizeB2A, viprSubChnlImMask=viprSubChnlImMask, tasTstAnnceId=tasTstAnnceId, atmSvcVccStatsInCellCountHiA=atmSvcVccStatsInCellCountHiA, atmPnniRtVbrCellLossRatioZero=atmPnniRtVbrCellLossRatioZero, atmAtmSpvpModifiedNotify=atmAtmSpvpModifiedNotify, imaGrpChannelBetaValue=imaGrpChannelBetaValue, siteSwitchIpAddr=siteSwitchIpAddr, bridgeBridgePvcStatsCellsEncodedHiA=bridgeBridgePvcStatsCellsEncodedHiA, stratumPortStatus=stratumPortStatus, h248NormalMGExecutionTime=h248NormalMGExecutionTime, imaGrpChannelStatsNumRxActLnks=imaGrpChannelStatsNumRxActLnks, gr303Aal2PvcVccAal2Cid=gr303Aal2PvcVccAal2Cid, imaGrpChannelNeState=imaGrpChannelNeState, inBandPrimaryIpMask=inBandPrimaryIpMask, frAtmSpvcVccSusCellRateB2A=frAtmSpvcVccSusCellRateB2A, ipAtmAppSvcVccStatsInCellCountLoA=ipAtmAppSvcVccStatsInCellCountLoA, gr303IgModifyFailNotify=gr303IgModifyFailNotify, atmCirEmTCPattern=atmCirEmTCPattern, atmSvcVccViB=atmSvcVccViB, virtualUNISignalingOperStatus=virtualUNISignalingOperStatus, frAtmPvcVccStatsTable=frAtmPvcVccStatsTable, cirEmCirEmPvcStatsOdometerTimer=cirEmCirEmPvcStatsOdometerTimer, vbrAtmSpvcVccSusCellRateB2A=vbrAtmSpvcVccSusCellRateB2A, atmPnniNrtVbrGcacPresent=atmPnniNrtVbrGcacPresent, msRxDataClkSrcForDce=msRxDataClkSrcForDce, atmAtmSpvcVpcStatsInOdometerCellCountHiB=atmAtmSpvcVpcStatsInOdometerCellCountHiB, alarmAcoStatusBitmap=alarmAcoStatusBitmap, ds3PortStatsTable=ds3PortStatsTable, atmAtmSpvcVpcVpiA=atmAtmSpvcVpcVpiA, ipTypeReasonCode=ipTypeReasonCode, cirEmAtmPvcVccVpiB=cirEmAtmPvcVccVpiB, ipAtmAppPvcVccStatsCellsTaggedB=ipAtmAppPvcVccStatsCellsTaggedB, bridgeDomainSpanningTree=bridgeDomainSpanningTree, frAtmPvcVccStatsOamAisRx=frAtmPvcVccStatsOamAisRx, viprRouteGatewayAddress=viprRouteGatewayAddress, vbrAtmSpvcVccStatsIfB=vbrAtmSpvcVccStatsIfB, atmAtmSpvcVpcSetUpNotify=atmAtmSpvcVpcSetUpNotify, atmAtmSpvcVpcPeakCellRateB2A=atmAtmSpvcVpcPeakCellRateB2A, cirEmAtmPvcVccStatsOamAisRx=cirEmAtmPvcVccStatsOamAisRx, frAtmSpvcVccBeIn=frAtmSpvcVccBeIn, frAtmPvcVccIfA=frAtmPvcVccIfA, upgradeAccountName=upgradeAccountName, viprSubChnlExcessBurstSize=viprSubChnlExcessBurstSize, viprSubChnlStatsOutOdometerCellCountHiB=viprSubChnlStatsOutOdometerCellCountHiB, interfaceProtectionTable=interfaceProtectionTable, vbrAtmBkPvcVccAutoSwitch=vbrAtmBkPvcVccAutoSwitch, loopbackLocationID=loopbackLocationID, atmPvcVpcCnfrmTypeA2B=atmPvcVpcCnfrmTypeA2B, frAtmSpvcVccStatsCellsDecodedHiA=frAtmSpvcVccStatsCellsDecodedHiA, stratumConfig=stratumConfig, arp1BridgeGroupNum=arp1BridgeGroupNum, atmUniVpiSig=atmUniVpiSig, atmPvcVpcTrafficShapingA2B=atmPvcVpcTrafficShapingA2B, dsp2ChannelIfType=dsp2ChannelIfType, atmTrunkingLocalIWFModifyFailNotify=atmTrunkingLocalIWFModifyFailNotify, gr303IntfConfig=gr303IntfConfig, frLmiStatsLinkReset=frLmiStatsLinkReset, frUniStatsErroredFrames=frUniStatsErroredFrames, h248MGCProvisionalResponseTimerValue=h248MGCProvisionalResponseTimerValue, frAtmPvcVccStatsOdometerReset=frAtmPvcVccStatsOdometerReset, atmSpvcVccStatsOutCellCountLoA=atmSpvcVccStatsOutCellCountLoA, cellTestStatus=cellTestStatus, atmPvcVpcStatsOamRdiRxB=atmPvcVpcStatsOamRdiRxB, atmAtmSpvcVccVpiA=atmAtmSpvcVccVpiA, ds3LineStatus=ds3LineStatus, ds3ChannelId=ds3ChannelId, imaGrpChannelDiffDelayMaxObs=imaGrpChannelDiffDelayMaxObs, gr303IntfAdminStatus=gr303IntfAdminStatus, ethernetPortStatsFCSErrors=ethernetPortStatsFCSErrors, ds3PortStatsEntry=ds3PortStatsEntry, routerIpNetworkMask=routerIpNetworkMask, twoWireSourceLoopBackConfig=twoWireSourceLoopBackConfig, imaGrpChannelStatsTimer=imaGrpChannelStatsTimer, atmPvcVccTrafficShapingB2A=atmPvcVccTrafficShapingB2A, atmAtmSpvcVpcTrafficShapingA2B=atmAtmSpvcVpcTrafficShapingA2B, bridgeAtmPvcVccStatsTable=bridgeAtmPvcVccStatsTable, bridgeAtmPvcVccStatsOutCellCountHiB=bridgeAtmPvcVccStatsOutCellCountHiB, dsp2Channel=dsp2Channel, oamLpbkStatus=oamLpbkStatus, atmPvcVpcOAMConnEndPtStatusA=atmPvcVpcOAMConnEndPtStatusA, atmAtmSpvcVccStatsCellsTaggedA=atmAtmSpvcVccStatsCellsTaggedA, viprIntfRipLineType=viprIntfRipLineType, viprSubChnlStatsTimer=viprSubChnlStatsTimer, siteAlternateGatewayAddr=siteAlternateGatewayAddr, fwReleaseEpromVersion=fwReleaseEpromVersion, frAtmPvcVccStatsCellsDecodedLoA=frAtmPvcVccStatsCellsDecodedLoA, gr303Config=gr303Config, atmSvcVccFlow=atmSvcVccFlow, atmAtmSpvcVccStatsOdometerReset=atmAtmSpvcVccStatsOdometerReset, vbrAtmSpvcConnType=vbrAtmSpvcConnType, cirEmCirEmPvcStatsCellsEncodedHiA=cirEmCirEmPvcStatsCellsEncodedHiA, bridgeAtmPvcVccRowStatus=bridgeAtmPvcVccRowStatus, frAtmSpvcVccVpiB=frAtmSpvcVccVpiB, atmPvcVccServiceTypeB2A=atmPvcVccServiceTypeB2A, atmPvcVccStatsInCellCountHiB=atmPvcVccStatsInCellCountHiB, casIfIndex=casIfIndex, atmPvcVccEntry=atmPvcVccEntry, atmPvcVpcSarTypeB2A=atmPvcVpcSarTypeB2A, viprVpnStatsIcmpOutParamps=viprVpnStatsIcmpOutParamps, cirEmAtmPvcVccEncodingProfileIdB2A=cirEmAtmPvcVccEncodingProfileIdB2A, vbrAtmSpvcVccOperStatus=vbrAtmSpvcVccOperStatus, intfAtmPvcConnDisplaySlot=intfAtmPvcConnDisplaySlot, iispVbrRouteType=iispVbrRouteType, atmVnnT310=atmVnnT310, cirAtmSpvcVccStatsCellsTaggedB=cirAtmSpvcVccStatsCellsTaggedB, isdnL2ConfigEntry=isdnL2ConfigEntry, cirEmCirEmPvcRowStatus=cirEmCirEmPvcRowStatus, viprStatRtTrap=viprStatRtTrap, atmTrunkingBrVccBwAtmScr01=atmTrunkingBrVccBwAtmScr01, atmAtmSpvcVccTable=atmAtmSpvcVccTable, imaGrpChannelStatsNeNumFailures=imaGrpChannelStatsNeNumFailures, atmSvcVccStatsCellsTaggedB=atmSvcVccStatsCellsTaggedB, e3LineCoding=e3LineCoding, frFrPvcStatsDlciB=frFrPvcStatsDlciB, frAtmSpvcVccStatsFramesTaggedA=frAtmSpvcVccStatsFramesTaggedA, e1ChannelConfigEntry=e1ChannelConfigEntry, vbrAtmSpvcStatsCellsDroppedB=vbrAtmSpvcStatsCellsDroppedB, frAtmPvcVccStatsOdometerTimer=frAtmPvcVccStatsOdometerTimer, atmTrunkingBrVccSarType=atmTrunkingBrVccSarType, tasTstLineId=tasTstLineId, atmBkPvcVpcReqFailNotify=atmBkPvcVpcReqFailNotify, gr303Aal2PvcVccAltLineType=gr303Aal2PvcVccAltLineType, bridgeDomainPriority=bridgeDomainPriority, atmPvcVccVpiA=atmPvcVccVpiA, gr303IgIntfConfigTable=gr303IgIntfConfigTable, atmUniT399=atmUniT399, ipAtmBkAppPvcVccReqFailNotify=ipAtmBkAppPvcVccReqFailNotify, viprSubChnlStatsInCellCountLoB=viprSubChnlStatsInCellCountLoB)
mibBuilder.exportSymbols("ACMIB", routeSrvStatus=routeSrvStatus, protectionSlot=protectionSlot, e1LineNationalBits=e1LineNationalBits, vbrAtmSpvcVccTrafficShapingA2B=vbrAtmSpvcVccTrafficShapingA2B, cellTestPayLoadTx=cellTestPayLoadTx, oamActDeactStsSnkPointSegPM=oamActDeactStsSnkPointSegPM, intfAtmPvcConnDisplayVpi=intfAtmPvcConnDisplayVpi, e3LineScramble=e3LineScramble, twoWireSourceChannelEchoCancellation=twoWireSourceChannelEchoCancellation, atmUniConfigTable=atmUniConfigTable, bridgeDomainAgingTime=bridgeDomainAgingTime, ethernetPortStatsFrameTooLongs=ethernetPortStatsFrameTooLongs, spvcActRestartAll=spvcActRestartAll, viprVpnStatsIcmpOutTimeRQs=viprVpnStatsIcmpOutTimeRQs, h248MaxTerminationsPerContext=h248MaxTerminationsPerContext, atmTrunkingMIBObjects=atmTrunkingMIBObjects, cirEmAtmBkPvcVccTable=cirEmAtmBkPvcVccTable, fwDriverType=fwDriverType, iptResultNotify=iptResultNotify, gr303IgEOCProtSwitchCommand=gr303IgEOCProtSwitchCommand, vbrAtmSpvcVccFlow=vbrAtmSpvcVccFlow, oc3APSPairWTRPeriod=oc3APSPairWTRPeriod, swtchNodeIndx=swtchNodeIndx, toneAnnceSourceFile=toneAnnceSourceFile, sysInfoRAMFreeKBytes=sysInfoRAMFreeKBytes, frFrPvcEntry=frFrPvcEntry, atmTrunkingBrVccVpi=atmTrunkingBrVccVpi, atmTrunkingSigVccDeletedNotify=atmTrunkingSigVccDeletedNotify, atmPvcVpcReqFailNotify=atmPvcVpcReqFailNotify, atmPvcVpcViB=atmPvcVpcViB, sts1LineStatus=sts1LineStatus, bridgeAtmBkPvcVccVUNIB=bridgeAtmBkPvcVccVUNIB, atmSvcVccVUNIA=atmSvcVccVUNIA, atmPvcVpcVUNIA=atmPvcVpcVUNIA, atmSpvcVccRelease=atmSpvcVccRelease, oamActDeactStsSnkPointSegCC=oamActDeactStsSnkPointSegCC, atmIispAvailBwEgr=atmIispAvailBwEgr, tasCmprsAnnceDescription=tasCmprsAnnceDescription, ds3PortConfigTable=ds3PortConfigTable, atmUniIlmiRetryK=atmUniIlmiRetryK, cirEmAtmBkPvcVccAutoSwitch=cirEmAtmBkPvcVccAutoSwitch, ts16UsageModifyFailNotify=ts16UsageModifyFailNotify, msLineCoding=msLineCoding, twoWireSourcePortConfigEntry=twoWireSourcePortConfigEntry, atmPnniT399=atmPnniT399, atmAtmSpvcVpcStatsOutCellCountLoB=atmAtmSpvcVpcStatsOutCellCountLoB, ds1PortStatsTimer=ds1PortStatsTimer, vbrVbrPvcStatsIfB=vbrVbrPvcStatsIfB, aal2TrunkConfigIf=aal2TrunkConfigIf, intfAtmPvcConnDisplayFlowType=intfAtmPvcConnDisplayFlowType, interfaceEvents=interfaceEvents, atmPvcVpcStatsInOdometerCellCountLoB=atmPvcVpcStatsInOdometerCellCountLoB, frAtmBkPvcVccTearDownNotify=frAtmBkPvcVccTearDownNotify, atmAtmSpvcVpcStatsOutOdometerCellCountLoB=atmAtmSpvcVpcStatsOutOdometerCellCountLoB, frFrPvcStatsOdometerCellsDecodedLoB=frFrPvcStatsOdometerCellsDecodedLoB, siteEtherIpAddr=siteEtherIpAddr, vbrAtmSpvcVccStatsOutOdometerCellCountHiB=vbrAtmSpvcVccStatsOutOdometerCellCountHiB, bridgeAtmPvcVccConnFailureCauseA=bridgeAtmPvcVccConnFailureCauseA, atmTrunkingBrVccRetryLimit=atmTrunkingBrVccRetryLimit, cirEmAtmSpvcVccStatsCellsDecodedLoA=cirEmAtmSpvcVccStatsCellsDecodedLoA, frFrPvcTimeLenB2A=frFrPvcTimeLenB2A, viprStatsInsufficientPcktsHi=viprStatsInsufficientPcktsHi, tasmCacheMemAllocFailNotify=tasmCacheMemAllocFailNotify, atmSvcVccStatsTimer=atmSvcVccStatsTimer, sts1StsPointers=sts1StsPointers, atmSvcVccStatsCellsDroppedA=atmSvcVccStatsCellsDroppedA, pnniNodeCfgNotify=pnniNodeCfgNotify, atmVnnAddrType=atmVnnAddrType, atmTrunkingDataChanOwner=atmTrunkingDataChanOwner, atmTrunkingSigVccRowStatus=atmTrunkingSigVccRowStatus, atmTrunkingDataChannelSigVccId=atmTrunkingDataChannelSigVccId, cardCleiCode=cardCleiCode, gr303Stats=gr303Stats, isdnIntfSwitchType=isdnIntfSwitchType, vbrVbrPvcIfA=vbrVbrPvcIfA, gr303LapdConfigEntry=gr303LapdConfigEntry, bridgeBridgePvcConnFailureCauseB=bridgeBridgePvcConnFailureCauseB, bridgeBridgePvcStatsEntry=bridgeBridgePvcStatsEntry, virtualUNISvcMinVci=virtualUNISvcMinVci, atmSvcVccVpiB=atmSvcVccVpiB, cirEmAtmSpvcVccStatsTimer=cirEmAtmSpvcVccStatsTimer, imaPortId=imaPortId, frFrPvcIfA=frFrPvcIfA, viprStatsPrototypeErrorsHi=viprStatsPrototypeErrorsHi, atmBkPvcVpcSetupNotify=atmBkPvcVpcSetupNotify, resetAllStatistics=resetAllStatistics, sysInfoRxMultiCellTotal=sysInfoRxMultiCellTotal, frAtmPvcVccEntry=frAtmPvcVccEntry, cirEmAtmBkPvcVccReqFailNotify=cirEmAtmBkPvcVccReqFailNotify, ds1Channelization=ds1Channelization, atmTermEmAdminStatus=atmTermEmAdminStatus, bridgeAtmPvcVccServiceType=bridgeAtmPvcVccServiceType, gr303Aal2PvcTearDownNotify=gr303Aal2PvcTearDownNotify, atmSpvcVccAddrRowStatus=atmSpvcVccAddrRowStatus, atmTrunkingRemoteIWFAddress=atmTrunkingRemoteIWFAddress, upgradeIpAddress=upgradeIpAddress, atmSpvcVccTrafficShapingB2A=atmSpvcVccTrafficShapingB2A, e3ChannelSecuFeature=e3ChannelSecuFeature, frFrPvcStatsOdometerTimer=frFrPvcStatsOdometerTimer, atmSpvcVccLeafReference=atmSpvcVccLeafReference, vbrIfStatsCellsEncodedHi=vbrIfStatsCellsEncodedHi, bridgeDomainTable=bridgeDomainTable, viprIntfAuthPasswd=viprIntfAuthPasswd, atmPnniNrtVbrAvailCellRate=atmPnniNrtVbrAvailCellRate, cardOperStatus=cardOperStatus, taxiChannelConfigEntry=taxiChannelConfigEntry, frAtmPvcVccStatsOdometerCellsDecodedLoA=frAtmPvcVccStatsOdometerCellsDecodedLoA, tasToneConfigEntry=tasToneConfigEntry, frUniStatsFramesEncodedHi=frUniStatsFramesEncodedHi, atmPvcVpcTearDownNotify=atmPvcVpcTearDownNotify, frFrPvcStatsFramesTaggedB=frFrPvcStatsFramesTaggedB, atmImaFeTxState=atmImaFeTxState, atmIfStatsValidCellsOutHi=atmIfStatsValidCellsOutHi, imaGrpChannelRxImaId=imaGrpChannelRxImaId, atmUniAddrType=atmUniAddrType, atmImaStatsFeRxNumFailures=atmImaStatsFeRxNumFailures, atmSpvcVccOperStatus=atmSpvcVccOperStatus, hdlcDataInversion=hdlcDataInversion, ipAtmAppSvcVccStatsDestAddrA=ipAtmAppSvcVccStatsDestAddrA, bridgeBridgePvcStatsIfA=bridgeBridgePvcStatsIfA, ipAtmBkAppPvcVccViB=ipAtmBkAppPvcVccViB, viprIntfRipVersion=viprIntfRipVersion, svcPointToMultiPointParties=svcPointToMultiPointParties, saveConfiguration=saveConfiguration, cirEmIfStatsCellsEncodedLo=cirEmIfStatsCellsEncodedLo, bridgeAtmPvcVccStatsIfA=bridgeAtmPvcVccStatsIfA, atmPnniNrtVbrCellRateMargin=atmPnniNrtVbrCellRateMargin, h248MGCIpAddress2=h248MGCIpAddress2, atmSpvcVccRemoteVpi=atmSpvcVccRemoteVpi, pgtResultNotify=pgtResultNotify, ipAtmAppSvcVccStatsCellsTaggedB=ipAtmAppSvcVccStatsCellsTaggedB, atmTrunkingBrVccDeletedNotify=atmTrunkingBrVccDeletedNotify, frAtmPvcVccVUNIB=frAtmPvcVccVUNIB, vbrAtmPvcVccOAMConnEndPtStatus=vbrAtmPvcVccOAMConnEndPtStatus, atmAtmSpvcVpcReleaseCause=atmAtmSpvcVpcReleaseCause, atmAtmSpvcVpcStatsOutCellCountHiA=atmAtmSpvcVpcStatsOutCellCountHiA, upgradeSwErrorStatus=upgradeSwErrorStatus, atmPvcVccStatsOdometerReset=atmPvcVccStatsOdometerReset, vbrAtmPvcVccVciB=vbrAtmPvcVccVciB, vbrVbrPvcConnFailureCauseB=vbrVbrPvcConnFailureCauseB, cirAtmSpvcVccTable=cirAtmSpvcVccTable, twoWireSourceChannelCompandingLaw=twoWireSourceChannelCompandingLaw, bridgeDomainLearnedEntryDiscards=bridgeDomainLearnedEntryDiscards, atmPnniIlmiRetryK=atmPnniIlmiRetryK, atmImaStatsTable=atmImaStatsTable, cardFwVerTable=cardFwVerTable, taxiChannelId=taxiChannelId, oc3APSProtectionLineSignalStatus=oc3APSProtectionLineSignalStatus, frAtmSpvcVccInterWorkingFunc=frAtmSpvcVccInterWorkingFunc, viprArpCommand=viprArpCommand, consoleIPAddr3=consoleIPAddr3, ds3TransmitClockSource=ds3TransmitClockSource, vbrAtmSpvcReleaseDiag=vbrAtmSpvcReleaseDiag, cirEmAtmSpvcVccStatsInCellCountLoB=cirEmAtmSpvcVccStatsInCellCountLoB, atmUniUserAddress=atmUniUserAddress, atmPvcVccStatsOamAisRxB=atmPvcVccStatsOamAisRxB, cirEmAtmSpvcVccCngToneDetectionA2B=cirEmAtmSpvcVccCngToneDetectionA2B, vbrAtmSpvcReleaseCause=vbrAtmSpvcReleaseCause, frAtmPvcVccFlow=frAtmPvcVccFlow, vuniIlmiStatsAttachPtChanged=vuniIlmiStatsAttachPtChanged, appIpRouteNextHop=appIpRouteNextHop, viprSubChnlStatsInOdometerCellCountLoA=viprSubChnlStatsInOdometerCellCountLoA, vbrAtmPvcVccStatsCellsDecodedLoA=vbrAtmPvcVccStatsCellsDecodedLoA, e1ChannelInputCodingRule=e1ChannelInputCodingRule, gr303IgOutOfServiceNotify=gr303IgOutOfServiceNotify, frAtmPvcVccStatsOdometerCellsEncodedLoA=frAtmPvcVccStatsOdometerCellsEncodedLoA, isdnIntfId=isdnIntfId, dsp2ChannelConfigEntry=dsp2ChannelConfigEntry, atmPvcVpcStatsCellsDroppedA=atmPvcVpcStatsCellsDroppedA, atmAtmSpvcVccFlow=atmAtmSpvcVccFlow, atmPvcVccType=atmPvcVccType, viprRouteMetric=viprRouteMetric, vbrAtmSpvcStatsOdometerCellsEncodedLoA=vbrAtmSpvcStatsOdometerCellsEncodedLoA, atmUniT316=atmUniT316, virtualIntfStatsTable=virtualIntfStatsTable, atmTrunkingDataChanOperStatus=atmTrunkingDataChanOperStatus, iptOperState=iptOperState, bridgeBridgePvcSetupNotify=bridgeBridgePvcSetupNotify, spvcFrPointToPointCalls=spvcFrPointToPointCalls, atmUniSvcMaxVpi=atmUniSvcMaxVpi, spvcPointToMultiPointParties=spvcPointToMultiPointParties, intfAtmPvcConnDisplayEntry=intfAtmPvcConnDisplayEntry, viprRouteDestAddress=viprRouteDestAddress, vbrAtmSpvcVccVpiB=vbrAtmSpvcVccVpiB, ipAtmBkAppPvcVccTable=ipAtmBkAppPvcVccTable, cirEmCirEmPvcFlow=cirEmCirEmPvcFlow, gr303IgIntfConfigEntry=gr303IgIntfConfigEntry, viprSubChnlVpiDlci=viprSubChnlVpiDlci, atmTrunkingSigVccTearDownNotify=atmTrunkingSigVccTearDownNotify, ipAtmAppSvcVccTrafficShapingA2B=ipAtmAppSvcVccTrafficShapingA2B, atmTrunkingBrVccRmtIWFId=atmTrunkingBrVccRmtIWFId, twoWireSourceChannelSecuFeature=twoWireSourceChannelSecuFeature, atmVnnOperStatus=atmVnnOperStatus, gr303IgIntfId=gr303IgIntfId, gr303IgStatsOutCallFailed=gr303IgStatsOutCallFailed, atmAtmSpvcDeletedNotify=atmAtmSpvcDeletedNotify, frAtmSpvcVccFlow=frAtmSpvcVccFlow, atmVnnT322=atmVnnT322, gr303T200=gr303T200, atmAtmSpvcVpcVpiB=atmAtmSpvcVpcVpiB, oamActDeactBlkSizeAB=oamActDeactBlkSizeAB, workingSlotBitmap=workingSlotBitmap, bridgeStatsBasePortDelayExceededDiscardsHi=bridgeStatsBasePortDelayExceededDiscardsHi, atmUniVciSig=atmUniVciSig, cirEmCirEmPvcStatsOdometerCellsDecodedHiA=cirEmCirEmPvcStatsOdometerCellsDecodedHiA, cirEmAtmSpvcVccStatsOdometerCellsDecodedHiA=cirEmAtmSpvcVccStatsOdometerCellsDecodedHiA, viprVpnStatsIcmpOutRedirects=viprVpnStatsIcmpOutRedirects, stratumLevel=stratumLevel, cirEmAtmPvcVccOAMConnSegEndPtStatus=cirEmAtmPvcVccOAMConnSegEndPtStatus, atmAtmSpvcModifiedNotify=atmAtmSpvcModifiedNotify, connectionEvents=connectionEvents, atmPvcVpcPeakCellRateB2A=atmPvcVpcPeakCellRateB2A, sts1PortConfigTable=sts1PortConfigTable, cirEmAtmPvcVccStatsInOdometerCellCountLoB=cirEmAtmPvcVccStatsInOdometerCellCountLoB, virtualUNIVpiIlmi=virtualUNIVpiIlmi, viprSubChnlImIpAddr=viprSubChnlImIpAddr, iispVbrRoutLength=iispVbrRoutLength, frAtmSpvcVccRemoteFrPortAddr=frAtmSpvcVccRemoteFrPortAddr, iptGroupId=iptGroupId, tasToneFirstFreq=tasToneFirstFreq, dspChannelConfigTable=dspChannelConfigTable, cirEmCirEmPvcConnectionStatus=cirEmCirEmPvcConnectionStatus, cirEmAtmBkPvcVccEntry=cirEmAtmBkPvcVccEntry, gr303Aal2PvcVccEchoCancellation=gr303Aal2PvcVccEchoCancellation, vuniIlmiStatsEntry=vuniIlmiStatsEntry, frAtmSpvcVccEntry=frAtmSpvcVccEntry, frFrPvcBcA2B=frFrPvcBcA2B, frAtmSpvcVccMaxBurstSizeA2B=frAtmSpvcVccMaxBurstSizeA2B, oc3APSPairProtectionSFBERThreshold=oc3APSPairProtectionSFBERThreshold, atmAtmSpvcVccType=atmAtmSpvcVccType, h248TermRowStatus=h248TermRowStatus, viprStatsIPInAddrErrorsLo=viprStatsIPInAddrErrorsLo, ImaGrpChannelEndState=ImaGrpChannelEndState, frUniConfigEntry=frUniConfigEntry, atmSvcVccViA=atmSvcVccViA, cirEmAtmPvcVccVciB=cirEmAtmPvcVccVciB, ipAtmBkAppPvcVccEntry=ipAtmBkAppPvcVccEntry, ilmiStatsSecureLnkProcInit=ilmiStatsSecureLnkProcInit, aal2TrunkAvailBwIgr=aal2TrunkAvailBwIgr, atmUniConfigEntry=atmUniConfigEntry, vbrVbrPvcStatsCellsEncodedLoA=vbrVbrPvcStatsCellsEncodedLoA, viprSubChnlDisableWarning=viprSubChnlDisableWarning, atmPvcVccStatsOutCellCountHiB=atmPvcVccStatsOutCellCountHiB, vbrAtmSpvcStatsInOdometerCellCountLoB=vbrAtmSpvcStatsInOdometerCellCountLoB, vbrAtmSpvcVpiB=vbrAtmSpvcVpiB, frAtmBkPvcVccEntry=frAtmBkPvcVccEntry, gr303IgDeleteNotify=gr303IgDeleteNotify, cirEmAtmSpvcVccStatsInCellCountHiB=cirEmAtmSpvcVccStatsInCellCountHiB, atmTrunkingBrVccIf=atmTrunkingBrVccIf, ds1LineStatus=ds1LineStatus, protectionOOSCounter=protectionOOSCounter, frFrPvcSusCellRateA2B=frFrPvcSusCellRateA2B, tasmControlBlockAllocFailReasonCode=tasmControlBlockAllocFailReasonCode, spvcAtmPointToPointCalls=spvcAtmPointToPointCalls)
mibBuilder.exportSymbols("ACMIB", oc3APSPairTransmitK1K2Bytes=oc3APSPairTransmitK1K2Bytes, atmImaIntfClearedNotify=atmImaIntfClearedNotify, bridgeAtmPvcVccStatsCellsDecodedLoA=bridgeAtmPvcVccStatsCellsDecodedLoA, cirAtmSpvcVccSilenceDetectionA2B=cirAtmSpvcVccSilenceDetectionA2B, oc3APSPairPortIndex=oc3APSPairPortIndex, tasToneId=tasToneId, gr303IgPrimaryEOCChanIntfId=gr303IgPrimaryEOCChanIntfId, atmAtmSpvcVpcStatsOutOdometerCellCountLoA=atmAtmSpvcVpcStatsOutOdometerCellCountLoA, ipAtmGroup=ipAtmGroup, frAtmPvcVccConnFailureCauseA=frAtmPvcVccConnFailureCauseA, cirAtmSpvcVccTearDownNotify=cirAtmSpvcVccTearDownNotify, e1LineType=e1LineType, gr303IgIntfNetId=gr303IgIntfNetId, atmPvcVpcStatsInCellCountHiB=atmPvcVpcStatsInCellCountHiB, vbrAtmSpvcVccStatsTable=vbrAtmSpvcVccStatsTable, atmUniVUNISuppFlag=atmUniVUNISuppFlag, atmIfStatsEntry=atmIfStatsEntry, sysControl=sysControl, vbrAtmSpvcVccStatsCellsDroppedB=vbrAtmSpvcVccStatsCellsDroppedB, viprVpnReset=viprVpnReset, cellTestProtocol=cellTestProtocol, frAtmPvcVccMaxBurstSizeB2A=frAtmPvcVccMaxBurstSizeB2A, atmSvcVccStatsTable=atmSvcVccStatsTable, cirEmCirEmPvcReqFailNotify=cirEmCirEmPvcReqFailNotify, intfConfig=intfConfig, atmPvcVccPeakCellRateB2A=atmPvcVccPeakCellRateB2A, frFrPvcStatsFramesDroppedA=frFrPvcStatsFramesDroppedA, vbrAtmSpvcStatsInOdometerCellCountHiB=vbrAtmSpvcStatsInOdometerCellCountHiB, atmPnniSvcMinVpi=atmPnniSvcMinVpi, cirEmAtmPvcVccStatsCellsDecodedLoA=cirEmAtmPvcVccStatsCellsDecodedLoA, cellTestMismatchPduCount=cellTestMismatchPduCount, ethernetPortConfigTable=ethernetPortConfigTable, ds1LineType=ds1LineType, atmPvcVpcViA=atmPvcVpcViA, atmVnnT399=atmVnnT399, atmPvcVpcSusCellRateA2B=atmPvcVpcSusCellRateA2B, h248TermVpi=h248TermVpi, atmPnniUbrMaxCellRate=atmPnniUbrMaxCellRate, vbrVbrPvcSusCellRateB2A=vbrVbrPvcSusCellRateB2A, atmSvcVccStatsOutCellCountHiB=atmSvcVccStatsOutCellCountHiB, bridgeAtmBkPvcVccConnFailureCauseB=bridgeAtmBkPvcVccConnFailureCauseB, ipThrottlingInPacketsDroppedEi=ipThrottlingInPacketsDroppedEi, ds1PortStatsCurrentSESs=ds1PortStatsCurrentSESs, atmTrunkingIWFMaxRemoteIWF=atmTrunkingIWFMaxRemoteIWF, oamTestTxCount=oamTestTxCount, atmBkPvcVccVUNIB=atmBkPvcVccVUNIB, pnniNodeModFailNotify=pnniNodeModFailNotify, oamLoopbackTable=oamLoopbackTable, ipAtmAppPvcVccStatsOdometerFramesInB=ipAtmAppPvcVccStatsOdometerFramesInB, atmUniConnTrafficShapingFlag=atmUniConnTrafficShapingFlag, atmSpvcVccStatsInCellCountLoA=atmSpvcVccStatsInCellCountLoA, pnniRtAddrDelByIlmiNotify=pnniRtAddrDelByIlmiNotify, atmPnniAvailBwEgr=atmPnniAvailBwEgr, cellTestConnType=cellTestConnType, twoWireSinkChannelId=twoWireSinkChannelId, bridgeBridgePvcTable=bridgeBridgePvcTable, frFrPvcTable=frFrPvcTable, ilmiStatsEntry=ilmiStatsEntry, atmTrunkingDataChannelRmtIWFId=atmTrunkingDataChannelRmtIWFId, cirEmAtmSpvcVccStatsOutCellCountHiB=cirEmAtmSpvcVccStatsOutCellCountHiB, iptProtCommand=iptProtCommand, twoWireSourceLoopDetection=twoWireSourceLoopDetection, ipAtmAppSvcVccType=ipAtmAppSvcVccType, frAtmSpvcVccRestart=frAtmSpvcVccRestart, viprVpnStatsIcmpInParamProbs=viprVpnStatsIcmpInParamProbs, dspChannelId=dspChannelId, frAtmSpvcVccStatsAal5ErrFramesA=frAtmSpvcVccStatsAal5ErrFramesA, msPortStatsTimer=msPortStatsTimer, frAtmSpvcVccDlciA=frAtmSpvcVccDlciA, siteRemoteMgrSrcAddr4=siteRemoteMgrSrcAddr4, atmAtmSpvcVccStatsOutOdometerCellCountHiB=atmAtmSpvcVccStatsOutOdometerCellCountHiB, ipAtmAppPvcVccStatsVciB=ipAtmAppPvcVccStatsVciB, inBandPrimaryIpAddress=inBandPrimaryIpAddress, workingFailedBitmap=workingFailedBitmap, atmTrunkingSigVccFwPcr01=atmTrunkingSigVccFwPcr01, atmTrunkingBrVccSigVccId=atmTrunkingBrVccSigVccId, cirAtmSpvcModifiedNotify=cirAtmSpvcModifiedNotify, atmAtmSpvcVpcStatsInOdometerCellCountLoB=atmAtmSpvcVpcStatsInOdometerCellCountLoB, frUniStatsAAL5Errors=frUniStatsAAL5Errors, oamActDeactVpiB=oamActDeactVpiB, atmTrunkingDataChannelConfigTable=atmTrunkingDataChannelConfigTable, twoWireSourcePortId=twoWireSourcePortId, ipAtmAppPvcVccStatsCellsDroppedB=ipAtmAppPvcVccStatsCellsDroppedB, bridgeBridgePvcTearDownNotify=bridgeBridgePvcTearDownNotify, atmSpvcVccTearDownNotify=atmSpvcVccTearDownNotify, muxReadyConfirmReceivedNotify=muxReadyConfirmReceivedNotify, atmPvcVccStatsCellsDroppedA=atmPvcVccStatsCellsDroppedA, atmVnnSvcMaxVpi=atmVnnSvcMaxVpi, viprRouteDisabWarnTmr=viprRouteDisabWarnTmr, atmPvcVpcStatsOutOdometerCellCountLoA=atmPvcVpcStatsOutOdometerCellCountLoA, atmPnniIlmiProtocolStatus=atmPnniIlmiProtocolStatus, viprSubChnlId=viprSubChnlId, atmArpServer2RemoteAtmAddress=atmArpServer2RemoteAtmAddress, atmBkPvcVccViB=atmBkPvcVccViB, vbrAtmSpvcConfiguredNotify=vbrAtmSpvcConfiguredNotify, atmTrunkingLocalIWFModifiedNotify=atmTrunkingLocalIWFModifiedNotify, pgtRowStatus=pgtRowStatus, atmSvcVccStatsOutCellCountLoB=atmSvcVccStatsOutCellCountLoB, apsConfigurationModifyFailNotify=apsConfigurationModifyFailNotify, vbrAtmPvcVccStatsOamAisTx=vbrAtmPvcVccStatsOamAisTx, ilmiStatsTable=ilmiStatsTable, viprRoutingConfigEntry=viprRoutingConfigEntry, gr303IgStatsOutCallSuccessful=gr303IgStatsOutCallSuccessful, atmVnnSscopRxWndSz=atmVnnSscopRxWndSz, ipAtmAppPvcVccType=ipAtmAppPvcVccType, tasmControlBlockResAllocUsage=tasmControlBlockResAllocUsage, atmPvcVccStatsTimer=atmPvcVccStatsTimer, atmAtmSpvcVccSarTypeA2B=atmAtmSpvcVccSarTypeA2B, atmPnniCbrCellDelayVar=atmPnniCbrCellDelayVar, frAtmSpvcVccStatsInCellCountLoB=frAtmSpvcVccStatsInCellCountLoB, atmImaIntfStatus=atmImaIntfStatus, stratumLineCommand=stratumLineCommand, ipAtmAppPvcVccStatsInOdometerCellCountLoA=ipAtmAppPvcVccStatsInOdometerCellCountLoA, viprSubChnlStatsOutOdometerCellCountHiA=viprSubChnlStatsOutOdometerCellCountHiA, viprStatsExceedAal5CellsHi=viprStatsExceedAal5CellsHi, h248MGCIpAddress1=h248MGCIpAddress1, vbrAtmSpvcVccRemoteVbrPortAddr=vbrAtmSpvcVccRemoteVbrPortAddr, cirEmAtmPvcVccViB=cirEmAtmPvcVccViB, atmSpvcVccStatsFrwdErrCrrctnRateA2B=atmSpvcVccStatsFrwdErrCrrctnRateA2B, msRs232DataBits=msRs232DataBits, frAtmSpvcVccCirIn=frAtmSpvcVccCirIn, imaGrpChannelFeTxClkMode=imaGrpChannelFeTxClkMode, vbrAtmSpvcServiceType=vbrAtmSpvcServiceType, iispCbrRoutTable=iispCbrRoutTable, atmArpServerAtmAddr=atmArpServerAtmAddr, tasmMaxAnnceDiskSpace=tasmMaxAnnceDiskSpace, bridgeAtmPvcVccStatsCellsDecodedHiA=bridgeAtmPvcVccStatsCellsDecodedHiA, atmIispAdminStatus=atmIispAdminStatus, atmAtmSpvcVpcTrafficShapingB2A=atmAtmSpvcVpcTrafficShapingB2A, frAtmSpvcVccTearDownNotify=frAtmSpvcVccTearDownNotify, cirEmCirEmPvcEntry=cirEmCirEmPvcEntry, stratumBkupPortStatus=stratumBkupPortStatus, cirEmAtmSpvcVccStatsOutOdometerCellCountLoB=cirEmAtmSpvcVccStatsOutOdometerCellCountLoB, atmAtmSpvcVpcStatsInOdometerCellCountLoA=atmAtmSpvcVpcStatsInOdometerCellCountLoA, atmTrunkingBrVccBwAtmPcr01=atmTrunkingBrVccBwAtmPcr01, frFrPvcConnFailureCauseA=frFrPvcConnFailureCauseA, cirEmAtmPvcVccEncodingStdB2A=cirEmAtmPvcVccEncodingStdB2A, atmPvcVpcRowStatus=atmPvcVpcRowStatus, atmSpvcVccStatsCellsDroppedA=atmSpvcVccStatsCellsDroppedA, atmSvcVccStatsCellsTaggedA=atmSvcVccStatsCellsTaggedA, cirAtmSpvcVccEchoCancellationA2B=cirAtmSpvcVccEchoCancellationA2B, cirEmAtmPvcVccStatsInOdometerCellCountHiB=cirEmAtmPvcVccStatsInOdometerCellCountHiB, ethernetChannelConfigTable=ethernetChannelConfigTable, frFrPvcMaxBurstSizeA2B=frFrPvcMaxBurstSizeA2B, atmTrunkingBrVccMaxAal2ChanId=atmTrunkingBrVccMaxAal2ChanId, stratumModeChangeNotify=stratumModeChangeNotify, cirAtmSpvcVccStatsOutCellCountHiB=cirAtmSpvcVccStatsOutCellCountHiB, atmPnniNrtVbrCellXerDelay=atmPnniNrtVbrCellXerDelay, bridgeBridgePvcIfB=bridgeBridgePvcIfB, consolePort1=consolePort1, protectionConfigMode=protectionConfigMode, vbrAtmPvcVccRowStatus=vbrAtmPvcVccRowStatus, vbrAtmSpvcVccActiveSvcTable=vbrAtmSpvcVccActiveSvcTable, atmIispSvcMinVci=atmIispSvcMinVci, atmAtmSpvcVccStatsFrwdErrCrrctnRateB2A=atmAtmSpvcVccStatsFrwdErrCrrctnRateB2A, atmPvcVccStatsInCellCountLoA=atmPvcVccStatsInCellCountLoA, cardFwVerNext=cardFwVerNext, frAtmPvcVccStatsOdometerCellsEncodedHiA=frAtmPvcVccStatsOdometerCellsEncodedHiA, dbCirEmIfStatsCellsDecodedHi=dbCirEmIfStatsCellsDecodedHi, ipAtmBkAppPvcVccAutoSwitch=ipAtmBkAppPvcVccAutoSwitch, bridgeDomainBridgeForwardDelay=bridgeDomainBridgeForwardDelay, cardProtectionStatus=cardProtectionStatus, imaGrpChannelSymmetry=imaGrpChannelSymmetry, ds1PortConfigTable=ds1PortConfigTable, hdlcConfigEntry=hdlcConfigEntry, atmSvcVccMaxBurstSizeB2A=atmSvcVccMaxBurstSizeB2A, bridgeAtmBkPvcVccVciB=bridgeAtmBkPvcVccVciB, bridgeCacheCardSlot=bridgeCacheCardSlot, cirEmSpvcConfigFailNotify=cirEmSpvcConfigFailNotify, atmPnniIlmiAttachPtProc=atmPnniIlmiAttachPtProc, gr303IgIntfDeleteNotify=gr303IgIntfDeleteNotify, cirEmAtmPvcVccSetupNotify=cirEmAtmPvcVccSetupNotify, viprRouterDisabWarnTmr=viprRouterDisabWarnTmr, atmTrunkingBrVccRowStatus=atmTrunkingBrVccRowStatus, bridgeAtmBkPvcVccViB=bridgeAtmBkPvcVccViB, cirEmAtmPvcVccEncodingStdA2B=cirEmAtmPvcVccEncodingStdA2B, atmTrunkingBrVccAvailBw=atmTrunkingBrVccAvailBw, atmPnniT317=atmPnniT317, viprRipConfigTable=viprRipConfigTable, frAtmPvcVccStatsOutOdometerCellCountLoB=frAtmPvcVccStatsOutOdometerCellCountLoB, vbrAtmPvcVccStatsVpiB=vbrAtmPvcVccStatsVpiB, frAtmSpvcVccStatsCellsEncodedHiA=frAtmSpvcVccStatsCellsEncodedHiA, iispVbrRoutNsapAddr=iispVbrRoutNsapAddr, dspChannelVoiceCompression=dspChannelVoiceCompression, frFrPvcStatsTimer=frFrPvcStatsTimer, toneAnnceFtpErrorStatus=toneAnnceFtpErrorStatus, cirEmAtmPvcVccSilenceDetectionB2A=cirEmAtmPvcVccSilenceDetectionB2A, dbCirEmIfStatsTimer=dbCirEmIfStatsTimer, cirEmCirEmPvcStatsCellsEncodedLoB=cirEmCirEmPvcStatsCellsEncodedLoB, vbrVbrPvcStatsEntry=vbrVbrPvcStatsEntry, vbrVbrPvcStatsOdometerCellsEncodedLoA=vbrVbrPvcStatsOdometerCellsEncodedLoA, cirEmIfStatsId=cirEmIfStatsId, viprSubChnlStatsOutCellCountHiB=viprSubChnlStatsOutCellCountHiB, h248TermPhyPortId=h248TermPhyPortId, atmUniVpiIlmi=atmUniVpiIlmi, atmPvcVpcStatsCellsDroppedB=atmPvcVpcStatsCellsDroppedB, atmTrunkingSigVccTable=atmTrunkingSigVccTable, dsp2ChannelConfigTable=dsp2ChannelConfigTable, vuniIlmiStatsId=vuniIlmiStatsId, viprStatsPacketsTxLo=viprStatsPacketsTxLo, ipAtmAppSvcVccConnectionStatus=ipAtmAppSvcVccConnectionStatus, frAtmSpvcVccBcIn=frAtmSpvcVccBcIn, bridgeStatsId=bridgeStatsId, e1ConnGatewayFeature=e1ConnGatewayFeature, atmBkPvcVccTable=atmBkPvcVccTable, oc3PortStatsLineFebeCount=oc3PortStatsLineFebeCount, vbrAtmSpvcVccStatsCellsTaggedB=vbrAtmSpvcVccStatsCellsTaggedB, vbrAtmPvcVccMfsB2A=vbrAtmPvcVccMfsB2A, bridgeDomainBridgeHelloTime=bridgeDomainBridgeHelloTime, cirAtmSpvcVccCodingTranslationA2B=cirAtmSpvcVccCodingTranslationA2B, vbrAtmSpvcVccStatsCellsDecodedHiA=vbrAtmSpvcVccStatsCellsDecodedHiA, ipAtmAppPvcVccStatsDestAddrA=ipAtmAppPvcVccStatsDestAddrA, dbCirEmIfStatsTable=dbCirEmIfStatsTable, ethernetPortStatsTable=ethernetPortStatsTable, gr303IgConfigEntry=gr303IgConfigEntry, siteRemoteMgrAddr4=siteRemoteMgrAddr4, protectionCommandSlotId=protectionCommandSlotId, h248TermId=h248TermId, bridgeDomainNumberInUseNotify=bridgeDomainNumberInUseNotify, twoWireSinkLineStatus=twoWireSinkLineStatus, imaGrpChannelPortMap=imaGrpChannelPortMap, virtualUNIIntfInServiceNotify=virtualUNIIntfInServiceNotify, atmTrunkingBrVccRetryTimer=atmTrunkingBrVccRetryTimer, atmVnnSvcMinVci=atmVnnSvcMinVci, cirAtmSpvcVccConnType=cirAtmSpvcVccConnType, iptPhysicalIntfId=iptPhysicalIntfId, bridgeAtmPvcVccVciB=bridgeAtmPvcVccVciB, frUniStatsFramesDecodedLo=frUniStatsFramesDecodedLo, spvcTrunkingPriorityScheme=spvcTrunkingPriorityScheme, cirEmAtmSpvcVccSilenceDetectionB2A=cirEmAtmSpvcVccSilenceDetectionB2A, atmIispSscopRxWndSz=atmIispSscopRxWndSz, bridgeAtmPvcVccStatsOdometerReset=bridgeAtmPvcVccStatsOdometerReset, ipAtmAppPvcVccStatsOdometerTimer=ipAtmAppPvcVccStatsOdometerTimer, cirAtmSpvcVccCodingTranslationB2A=cirAtmSpvcVccCodingTranslationB2A, trapIndex=trapIndex, virtualUNIVUNIId=virtualUNIVUNIId, cirEmAtmPvcVccConnFailureCauseB=cirEmAtmPvcVccConnFailureCauseB, bridgeAtmPvcVccCnfrmTypeB2A=bridgeAtmPvcVccCnfrmTypeB2A, atmImaStatsImaViolations=atmImaStatsImaViolations, atmAtmSpvcVccRemoteSelectType=atmAtmSpvcVccRemoteSelectType, cirEmAtmPvcVccStatsCellsTaggedB=cirEmAtmPvcVccStatsCellsTaggedB, bridgeBridgePvcStatsOdometerCellsDecodedHiA=bridgeBridgePvcStatsOdometerCellsDecodedHiA, bridgeAtmBkPvcVccReqFailNotify=bridgeAtmBkPvcVccReqFailNotify, ipIntfStatus=ipIntfStatus, atmAtmSpvcVccStatsCellsDroppedA=atmAtmSpvcVccStatsCellsDroppedA, bridgeAtmPvcVccEntry=bridgeAtmPvcVccEntry, vbrAtmSpvcStatsCellsEncodedHiA=vbrAtmSpvcStatsCellsEncodedHiA, viprSubChnlFrMaxBurstSize=viprSubChnlFrMaxBurstSize, sysInfoDiscTotalKBytes=sysInfoDiscTotalKBytes, bridgeAtmPvcVccStatsOamRdiRx=bridgeAtmPvcVccStatsOamRdiRx, aal2TrunkConfigReqFailNotify=aal2TrunkConfigReqFailNotify, atmAtmSpvcVpcServiceTypeB2A=atmAtmSpvcVpcServiceTypeB2A, bridgeDomainExceededForSlotNotify=bridgeDomainExceededForSlotNotify, moduleRebootNotify=moduleRebootNotify)
mibBuilder.exportSymbols("ACMIB", atmTrunkingDataChannelBrVccId=atmTrunkingDataChannelBrVccId, atmSvcVccServiceTypeB2A=atmSvcVccServiceTypeB2A, atmIfStatsErroredCellsIn=atmIfStatsErroredCellsIn, atmPvcVpcStatsOutOdometerCellCountHiA=atmPvcVpcStatsOutOdometerCellCountHiA, bridgeAtmPvcVccVUNIB=bridgeAtmPvcVccVUNIB, cardFwVerSlot=cardFwVerSlot, fwDriverSize=fwDriverSize, frAtmPvcVccCnfrmTypeB2A=frAtmPvcVccCnfrmTypeB2A, vbrAtmSpvcVccServiceType=vbrAtmSpvcVccServiceType, atmArpServerRemoteConnectionType=atmArpServerRemoteConnectionType, atmTrunkingIWFBaseGroup=atmTrunkingIWFBaseGroup, atmUniSvcMinVci=atmUniSvcMinVci, vbrAtmPvcVccStatsOamAisRx=vbrAtmPvcVccStatsOamAisRx, protectionGroupStatus=protectionGroupStatus, atmTrunkingSigVccBwPcr01=atmTrunkingSigVccBwPcr01, oamActDeactStsSrcPointEtePM=oamActDeactStsSrcPointEtePM, bridgeBridgePvcStatsOdometerCellsDecodedHiB=bridgeBridgePvcStatsOdometerCellsDecodedHiB, ethernetPortStatsAlignmentErrors=ethernetPortStatsAlignmentErrors, cirAtmSpvcVccStatsCellsDecodedLoA=cirAtmSpvcVccStatsCellsDecodedLoA, resetAction=resetAction, cirEmSpvcModifyFailNotify=cirEmSpvcModifyFailNotify, atmDbCirEmServiceType=atmDbCirEmServiceType, twoWireSinkLoopDetection=twoWireSinkLoopDetection, vbrAtmSpvcVccEntry=vbrAtmSpvcVccEntry, atmSvcVccTrafficShapingA2B=atmSvcVccTrafficShapingA2B, interfaceDeletedNotify=interfaceDeletedNotify, vbrAtmSpvcMaxBurstSizeA2B=vbrAtmSpvcMaxBurstSizeA2B, sysTraps=sysTraps, frFrPvcStatsOdometerCellsEncodedLoA=frFrPvcStatsOdometerCellsEncodedLoA, atmAtmSpvcVpcFlow=atmAtmSpvcVpcFlow, viprVpnStatsIcmpInEchoReps=viprVpnStatsIcmpInEchoReps, atmAtmSpvpConfigFailNotify=atmAtmSpvpConfigFailNotify, frAtmPvcVccBcOut=frAtmPvcVccBcOut, siteName=siteName, e1CRC4=e1CRC4, vbrVbrPvcStatsCellsDecodedLoB=vbrVbrPvcStatsCellsDecodedLoB, gr303IgStats=gr303IgStats, vbrAtmSpvcRetryLimit=vbrAtmSpvcRetryLimit, twoWireSinkChannelSubscriberService=twoWireSinkChannelSubscriberService, virtualUNIT398=virtualUNIT398, upgradeCdromFile=upgradeCdromFile, bridgeDomainTimingRelationshipNotify=bridgeDomainTimingRelationshipNotify, cgApiPointToPointSvcCalls=cgApiPointToPointSvcCalls, vbrVbrPvcStatsOdometerCellsEncodedHiA=vbrVbrPvcStatsOdometerCellsEncodedHiA, atmArpServer2RemoteAddrType=atmArpServer2RemoteAddrType, atmArpIpAddress=atmArpIpAddress, e1TransmitClockSource=e1TransmitClockSource, frFrPvcStatsOdometerReset=frFrPvcStatsOdometerReset, sysInfoBadCellRx=sysInfoBadCellRx, inputPortClockFailNotify=inputPortClockFailNotify, tasCmprsAnnceCmprsType=tasCmprsAnnceCmprsType, bridgeBridgePvcStatsCellsDecodedHiB=bridgeBridgePvcStatsCellsDecodedHiB, cirEmCirEmPvcStatsCellsDecodedHiA=cirEmCirEmPvcStatsCellsDecodedHiA, ds1ChannelInputCodingRule=ds1ChannelInputCodingRule, removeConfigurationFiles=removeConfigurationFiles, atmPvcVpcStatsTable=atmPvcVpcStatsTable, atmSpvcVccStatsInCellCountHiB=atmSpvcVccStatsInCellCountHiB, viprVpnStatsIcmpInAddrMasks=viprVpnStatsIcmpInAddrMasks, ipAtmAppSvcVccDestAddrA=ipAtmAppSvcVccDestAddrA, appIpRouteState=appIpRouteState, bridgeBridgePvcRowStatus=bridgeBridgePvcRowStatus, vbrAtmSpvcSusCellRateB2A=vbrAtmSpvcSusCellRateB2A, cirEmAtmSpvcVccVpiB=cirEmAtmSpvcVccVpiB, ipAtmAppSvcVccEntry=ipAtmAppSvcVccEntry, toneAnnceIpAddress=toneAnnceIpAddress, isdnL2CurrentState=isdnL2CurrentState, gr303TMCChannelId=gr303TMCChannelId, pnniCode=pnniCode, dspResourceTable=dspResourceTable, atmSpvcVccRetryFailure=atmSpvcVccRetryFailure, atmPvcVccMfsA2B=atmPvcVccMfsA2B, cirAtmSpvcVccStatsTimer=cirAtmSpvcVccStatsTimer, fwReleaseUpdate=fwReleaseUpdate, oamLpbkTimeout=oamLpbkTimeout, atmPvcVccStatsCellsDroppedB=atmPvcVccStatsCellsDroppedB, remoteDbOperationErrorStatus=remoteDbOperationErrorStatus, ipAtmAppSvcVccStatsOutCellCountHiB=ipAtmAppSvcVccStatsOutCellCountHiB, atmTermEmIfIndex=atmTermEmIfIndex, virtualIntfStatsTimer=virtualIntfStatsTimer, pvcFailureReasonCode=pvcFailureReasonCode, interfaceCreatedNotify=interfaceCreatedNotify, bridgeBridgePvcStatsOdometerCellsEncodedHiA=bridgeBridgePvcStatsOdometerCellsEncodedHiA, cirEmAtmSpvcVccStatsCellsEncodedLoA=cirEmAtmSpvcVccStatsCellsEncodedLoA, purgePvcConnections=purgePvcConnections, atmSpvcVccIfB=atmSpvcVccIfB, oc3ChannelIfType=oc3ChannelIfType, virtualUNIUserAddrOrgScope=virtualUNIUserAddrOrgScope, vbrAtmPvcVccStatsInCellCountLoB=vbrAtmPvcVccStatsInCellCountLoB, vbrAtmSpvcVccIfB=vbrAtmSpvcVccIfB, atmVnnUbrLoadBalSupp=atmVnnUbrLoadBalSupp, ipAtmAppPvcVccStatsSubnetMaskA=ipAtmAppPvcVccStatsSubnetMaskA, ipAtmAppSvcVccStatsTable=ipAtmAppSvcVccStatsTable, atmPnniNrtVbrCellLossRatioZero=atmPnniNrtVbrCellLossRatioZero, virtualUNIT399=virtualUNIT399, twoWireSinkTestMode=twoWireSinkTestMode, vbrAtmPvcVccStatsTable=vbrAtmPvcVccStatsTable, oamActDeactBlkSizeBA=oamActDeactBlkSizeBA, atmAtmSpvcVccStatsOutCellCountHiA=atmAtmSpvcVccStatsOutCellCountHiA, viprVpnStatsIcmpInTimeStamps=viprVpnStatsIcmpInTimeStamps, cirEmAtmBkPvcVccSetupNotify=cirEmAtmBkPvcVccSetupNotify, vuniResetIlmiStatistics=vuniResetIlmiStatistics, cirEmCirEmPvcStatsOdometerCellsEncodedHiA=cirEmCirEmPvcStatsOdometerCellsEncodedHiA, cirAtmSpvcVccSarTypeB=cirAtmSpvcVccSarTypeB, ilmiStatsColdStartRx=ilmiStatsColdStartRx, atmCirEmCASBusyAbcdPattern=atmCirEmCASBusyAbcdPattern, versionConfigurationNotify=versionConfigurationNotify, ceServiceTypeModifyFailNotify=ceServiceTypeModifyFailNotify, appIpRouteMask=appIpRouteMask, oc3APSK1K2Rx=oc3APSK1K2Rx, highSpeedPortInputRate=highSpeedPortInputRate, atmSpvcVccRemoteAtmPortAddr=atmSpvcVccRemoteAtmPortAddr, pnniRtAddrDelFailNotify=pnniRtAddrDelFailNotify, arp1CardSlot=arp1CardSlot, atmUniMyNeighborIpAddress=atmUniMyNeighborIpAddress, viprRoutingCommand=viprRoutingCommand, atmSpvcVccStatsOdometerTimer=atmSpvcVccStatsOdometerTimer, virtualUNIConfigEntry=virtualUNIConfigEntry, atmPvcVpcStatsOamRdiRxA=atmPvcVpcStatsOamRdiRxA, cirEmAtmPvcVccStatsCellsEncodedLoA=cirEmAtmPvcVccStatsCellsEncodedLoA, atmUniUPCSupp=atmUniUPCSupp, e3PortStatsEntry=e3PortStatsEntry, atmTrunkingSigVccRestart=atmTrunkingSigVccRestart, sysStatistics=sysStatistics, atmSpvcVccType=atmSpvcVccType, frFrPvcMaxBurstSizeB2A=frFrPvcMaxBurstSizeB2A, spvcConfigFailureCode=spvcConfigFailureCode, viprStatsMismatchCrcLo=viprStatsMismatchCrcLo, casGroupId=casGroupId, atmAtmSpvcVpcSarTypeA2B=atmAtmSpvcVpcSarTypeA2B, viprSubChnlLlcEncapType=viprSubChnlLlcEncapType, snmpCommunityStringsChangedToPublicNotify=snmpCommunityStringsChangedToPublicNotify, gr303TMCConfigEntry=gr303TMCConfigEntry, upgradeSwCopyStatus=upgradeSwCopyStatus, atmTrunkingBrVccIdleChannSuprSupp=atmTrunkingBrVccIdleChannSuprSupp, viprRouteShutDwnWarnTmr=viprRouteShutDwnWarnTmr, atmUniIntfType=atmUniIntfType, atmIispConfigEntry=atmIispConfigEntry, vbrAtmPvcVccTable=vbrAtmPvcVccTable, vbrAtmSpvcStatsCellsDecodedLoA=vbrAtmSpvcStatsCellsDecodedLoA, hdlcThroughPut=hdlcThroughPut, atmAtmSpvcVccStatsTimer=atmAtmSpvcVccStatsTimer, ipAtmAppPvcVccRowStatus=ipAtmAppPvcVccRowStatus, cirEmAtmPvcVccDualHomed=cirEmAtmPvcVccDualHomed, toneAnnceControl=toneAnnceControl, atmAtmSpvcVpcEntry=atmAtmSpvcVpcEntry, tasAnnceId=tasAnnceId, oamActDeactStsSrcPointEteCC=oamActDeactStsSrcPointEteCC, twoWireSourceChannelConfigEntry=twoWireSourceChannelConfigEntry, consolePort3=consolePort3, viprRouterShutDwnWarnTmr=viprRouterShutDwnWarnTmr, virtualIntfConfigCellRate=virtualIntfConfigCellRate, ipAtmAppSvcVccVciB=ipAtmAppSvcVccVciB, viprSubChnlDisabWarnTmr=viprSubChnlDisabWarnTmr, vbrVbrPvcMaxBurstSizeA2B=vbrVbrPvcMaxBurstSizeA2B, virtualUNIT308=virtualUNIT308, keepAliveTimerExpiredInLlDownStateNotify=keepAliveTimerExpiredInLlDownStateNotify, atmSpvcVccFrwdErrCorrectionA2B=atmSpvcVccFrwdErrCorrectionA2B, cirAtmSpvcConfiguredNotify=cirAtmSpvcConfiguredNotify, sysConfig=sysConfig, siteRemoteMgrSrcAddr3=siteRemoteMgrSrcAddr3, vbrVbrPvcTearDownNotify=vbrVbrPvcTearDownNotify, cirEmAtmPvcVccEchoCancellationA2B=cirEmAtmPvcVccEchoCancellationA2B, atmVnnMyNeighborIfName=atmVnnMyNeighborIfName, siteRemoteMgrSrcAddr5=siteRemoteMgrSrcAddr5, frAtmBkPvcVccViB=frAtmBkPvcVccViB, toneAnnceConfigTable=toneAnnceConfigTable, vbrAtmSpvcVccSusCellRateA2B=vbrAtmSpvcVccSusCellRateA2B, ethernetDuplexMode=ethernetDuplexMode, ethernetConfig=ethernetConfig, frUniStatsTimer=frUniStatsTimer, cirEmCirEmPvcStatsOdometerCellsEncodedHiB=cirEmCirEmPvcStatsOdometerCellsEncodedHiB, atmPvcVccMaxBurstSizeB2A=atmPvcVccMaxBurstSizeB2A, viprVpnStatsIcmpInEchoRQs=viprVpnStatsIcmpInEchoRQs, atmTrunkingBrVccCASPktXportSupp=atmTrunkingBrVccCASPktXportSupp, cirAtmSpvcVccStatsOdometerReset=cirAtmSpvcVccStatsOdometerReset, atmArpServerEncapsulation=atmArpServerEncapsulation, cirEmAtmSpvcVccActiveSvcTable=cirEmAtmSpvcVccActiveSvcTable, virtualIntfCreatedNotify=virtualIntfCreatedNotify, aal2TrunkConfigTable=aal2TrunkConfigTable, viprArpEntryAge=viprArpEntryAge, inBandBackupIpAddress=inBandBackupIpAddress, bridgeDomainForwardDelay=bridgeDomainForwardDelay, vbrAtmPvcVccReqFailNotify=vbrAtmPvcVccReqFailNotify, atmPvcVccConnFailureCauseB=atmPvcVccConnFailureCauseB, vbrIfStatsId=vbrIfStatsId, ipAtmBkAppPvcVccConnFailureCauseB=ipAtmBkAppPvcVccConnFailureCauseB, atmUniVciIlmi=atmUniVciIlmi, e1ChannelConfigTable=e1ChannelConfigTable, atmVnnNwPrefix1=atmVnnNwPrefix1, virtualUNIIlmiConfigProc=virtualUNIIlmiConfigProc, cirAtmSpvcVccStatsOdometerCellsDecodedLoA=cirAtmSpvcVccStatsOdometerCellsDecodedLoA, atmPnniVpiIlmi=atmPnniVpiIlmi, oc3PortStatsTable=oc3PortStatsTable, vbrAtmPvcVccSetupNotify=vbrAtmPvcVccSetupNotify, protectionStatus=protectionStatus, msRs232StopBits=msRs232StopBits, AtmConnFailureCause=AtmConnFailureCause, bridgeAtmPvcVccStatsOamRdiTx=bridgeAtmPvcVccStatsOamRdiTx, inactivityTimerExpiredNotify=inactivityTimerExpiredNotify, atmAtmSpvcModifyFailNotify=atmAtmSpvcModifyFailNotify, frFrPvcStatsOdometerCellsEncodedHiA=frFrPvcStatsOdometerCellsEncodedHiA, bridgeNumber=bridgeNumber, msTxDataClkSrcForDce=msTxDataClkSrcForDce, viprIntfConfigEntry=viprIntfConfigEntry, twoWireSourceRingCadence=twoWireSourceRingCadence, atmPvcVpcFlow=atmPvcVpcFlow, frUniOverSubscription=frUniOverSubscription, atmPnniRemoteSvcMaxVpi=atmPnniRemoteSvcMaxVpi, vbrAtmSpvcStatsCellsTaggedB=vbrAtmSpvcStatsCellsTaggedB, viprIntfDisableWarning=viprIntfDisableWarning, vbrAtmPvcVccStatsOdometerCellsDecodedLoA=vbrAtmPvcVccStatsOdometerCellsDecodedLoA, atmVnnIlmiConnectProc=atmVnnIlmiConnectProc, vbrAtmSpvcVccStatsTimer=vbrAtmSpvcVccStatsTimer, atmImaStatsNeTxNumFailures=atmImaStatsNeTxNumFailures, oneWayMessageWhileInTwoWayStateNotify=oneWayMessageWhileInTwoWayStateNotify, oamLoopbackEntry=oamLoopbackEntry, featureId=featureId, msTxDataPolarity=msTxDataPolarity, atmPnniOverSubscription=atmPnniOverSubscription, viprArpInterfaceServiceType=viprArpInterfaceServiceType, fwDriverFrn=fwDriverFrn, atmAtmSpvcVpcRemoteVpi=atmAtmSpvcVpcRemoteVpi, atmUniT308=atmUniT308, stratumLineTimingStatus=stratumLineTimingStatus, oc3APSPairWorkingLineSignalStatus=oc3APSPairWorkingLineSignalStatus, highSpeedPortConfigTable=highSpeedPortConfigTable, iptRowStatus=iptRowStatus, cirEmAtmBkPvcVccViB=cirEmAtmBkPvcVccViB, gr303PPSSwitchoverNotify=gr303PPSSwitchoverNotify, atmIfStatsNullCellsOutLo=atmIfStatsNullCellsOutLo, isdnT203=isdnT203, viprRouteIPNetMask=viprRouteIPNetMask, viprSubChnlStatsOutCellCountLoA=viprSubChnlStatsOutCellCountLoA, atmSvcVccTable=atmSvcVccTable, sapphireIntfAddressFailReasonCode=sapphireIntfAddressFailReasonCode, atmPvcVccSarTypeB2A=atmPvcVccSarTypeB2A, dbCirEmIfStatsCellsEncodedHi=dbCirEmIfStatsCellsEncodedHi, bridgeBridgePvcStatsOdometerCellsEncodedLoA=bridgeBridgePvcStatsOdometerCellsEncodedLoA, tasTstLineIntfIndex=tasTstLineIntfIndex, upgradeAccountPassword=upgradeAccountPassword, frAtmPvcVccStatsInCellCountLoB=frAtmPvcVccStatsInCellCountLoB, ethernetPhysicalAddr=ethernetPhysicalAddr, bridgeBridgePvcStatsCellsEncodedLoA=bridgeBridgePvcStatsCellsEncodedLoA, atmPvcVpcStatsTimer=atmPvcVpcStatsTimer, atmIispT303=atmIispT303, aal2TrunkConfigVci=aal2TrunkConfigVci, atmPnniSscopRxWndSz=atmPnniSscopRxWndSz, frAtmPvcVccBeIn=frAtmPvcVccBeIn, sysInfoDiscFreeKBytes=sysInfoDiscFreeKBytes, cirEmSpvcConfiguredNotify=cirEmSpvcConfiguredNotify, bridgeAtmPvcVccTrafficShapingA2B=bridgeAtmPvcVccTrafficShapingA2B, vbrAtmSpvcModifyFailNotify=vbrAtmSpvcModifyFailNotify, viprRouterDisableReason=viprRouterDisableReason, atmArpServerRemoteIpAddress=atmArpServerRemoteIpAddress)
mibBuilder.exportSymbols("ACMIB", msRxDataPolarity=msRxDataPolarity, virtualUNIConfigRowStatus=virtualUNIConfigRowStatus, atmIfStatsValidCellsInHi=atmIfStatsValidCellsInHi, alarmCardInputChangeNotify=alarmCardInputChangeNotify, ds1LineCoding=ds1LineCoding, atmVnnT313=atmVnnT313, iispVbrRouteNsapAddr=iispVbrRouteNsapAddr, sysInfoCpuUtilization1=sysInfoCpuUtilization1, cgApiPointToMultiPointParties=cgApiPointToMultiPointParties, atmTrunkingSigVccInactiveTimer=atmTrunkingSigVccInactiveTimer, e1PortId=e1PortId, atmPvcVccStatsOutOdometerCellCountHiB=atmPvcVccStatsOutOdometerCellCountHiB, virtualIntfDeleteNotify=virtualIntfDeleteNotify, bridgeBridgePvcStatsCellsDecodedHiA=bridgeBridgePvcStatsCellsDecodedHiA, virtualUNIIntfOutOfServiceNotify=virtualUNIIntfOutOfServiceNotify, cellTestReqFailNotify=cellTestReqFailNotify, gr303IgStatsTable=gr303IgStatsTable, frAtmSpvcVccVciB=frAtmSpvcVccVciB, virtualUNIIlmiAddrRegProc=virtualUNIIlmiAddrRegProc, atmAtmSpvcVpcStatsInCellCountHiB=atmAtmSpvcVpcStatsInCellCountHiB, gr303Aal2PvcVccGr303CallRef=gr303Aal2PvcVccGr303CallRef, bridgeAtmPvcVccStatsCellsEncodedHiA=bridgeAtmPvcVccStatsCellsEncodedHiA, chassisOverTempAlarmReasonCode=chassisOverTempAlarmReasonCode, compositeClockClearedNotify=compositeClockClearedNotify, msPortId=msPortId, atmBkPvcVpcVpiB=atmBkPvcVpcVpiB, bridgeAtmPvcVccStatsOutOdometerCellCountHiB=bridgeAtmPvcVccStatsOutOdometerCellCountHiB, tasmAnnceCacheMemResAllocUsage=tasmAnnceCacheMemResAllocUsage, atmIispIfIndex=atmIispIfIndex, cirEmAtmPvcVccDigitCollectTypeA2B=cirEmAtmPvcVccDigitCollectTypeA2B, inBandAppAtmAddress=inBandAppAtmAddress, frFrPvcStatsCellsEncodedHiB=frFrPvcStatsCellsEncodedHiB, viprSubChnlTrafficShaping=viprSubChnlTrafficShaping, bridgeAtmPvcVccReqFailNotify=bridgeAtmPvcVccReqFailNotify, bridgeStatsBasePortMtuExceededDiscardsLo=bridgeStatsBasePortMtuExceededDiscardsLo, casBitPatternType=casBitPatternType, vbrAtmPvcVccStatsCellsDroppedB=vbrAtmPvcVccStatsCellsDroppedB, tasTstAnnceLawType=tasTstAnnceLawType, virtualUNIIntfCreatedNotify=virtualUNIIntfCreatedNotify, gr303IgStatsCurrentOutCalls=gr303IgStatsCurrentOutCalls, ipAtmAppPvcVccStatsFramesOutB=ipAtmAppPvcVccStatsFramesOutB, viprRouterName=viprRouterName, sysInfoTxOneCellUsed=sysInfoTxOneCellUsed, frAtmPvcVccStatsInOdometerCellCountHiB=frAtmPvcVccStatsInOdometerCellCountHiB, atmAtmSpvcVccStatsFrwdErrCrrctnRateA2B=atmAtmSpvcVccStatsFrwdErrCrrctnRateA2B, atmPvcVpcStatsIfB=atmPvcVpcStatsIfB, atmAtmSpvcVccMaxBurstSizeA2B=atmAtmSpvcVccMaxBurstSizeA2B, connectionStatistics=connectionStatistics, frAtmBkPvcVccAutoSwitch=frAtmBkPvcVccAutoSwitch, ipThrottlingFeatureStatus=ipThrottlingFeatureStatus, atmImaStatsOifAnomalies=atmImaStatsOifAnomalies, gr303K=gr303K, frAtmPvcVccStatsOdometerCellsDecodedHiA=frAtmPvcVccStatsOdometerCellsDecodedHiA, atmBkPvcVccEntry=atmBkPvcVccEntry, e3PortConfigTable=e3PortConfigTable, vbrIfStatsEntry=vbrIfStatsEntry, oamLpbkVciB=oamLpbkVciB, vbrAtmPvcVccStatsOdometerReset=vbrAtmPvcVccStatsOdometerReset, highSpeedPortOutputRate=highSpeedPortOutputRate, frAtmPvcVccIfB=frAtmPvcVccIfB, atmBkPvcVpcRowStatus=atmBkPvcVpcRowStatus, oamActDeactStsSrcPointSegPMBR=oamActDeactStsSrcPointSegPMBR, vbrIfStatsTimer=vbrIfStatsTimer, cirEmAtmPvcVccCngToneDetectionA2B=cirEmAtmPvcVccCngToneDetectionA2B, e1ChannelSecuFeature=e1ChannelSecuFeature, frFrPvcRowStatus=frFrPvcRowStatus, bridgeBridgePvcStatsTimer=bridgeBridgePvcStatsTimer, oc3APSPairStatsId=oc3APSPairStatsId, oc3PortConfigEntry=oc3PortConfigEntry, viprArpTrap=viprArpTrap, frAtmSpvcVccBcOut=frAtmSpvcVccBcOut, gr303PPSSource=gr303PPSSource, atmSpvcVccSarTypeA2B=atmSpvcVccSarTypeA2B, bridgeBridgePvcStatsIfB=bridgeBridgePvcStatsIfB, muxTcpType=muxTcpType, atmAtmSpvcVccStatsInCellCountHiB=atmAtmSpvcVccStatsInCellCountHiB, virtualUNIIfIndex=virtualUNIIfIndex, viprSubChnlViB=viprSubChnlViB, h248TermActivation=h248TermActivation, cirAtmSpvcVccReleaseDiag=cirAtmSpvcVccReleaseDiag, atmPvcVccOAMConnEndPtStatusB=atmPvcVccOAMConnEndPtStatusB, sysInfoRAMTotalKBytes=sysInfoRAMTotalKBytes, ipAtmAppPvcVccStatsIfB=ipAtmAppPvcVccStatsIfB, bridgeAtmPvcVccStatsVciB=bridgeAtmPvcVccStatsVciB, atmPnniNrtVbrVarianceFactor=atmPnniNrtVbrVarianceFactor, aal2TrunkConfigTearDownNotify=aal2TrunkConfigTearDownNotify, atmVnnIlmiSecureLinkProc=atmVnnIlmiSecureLinkProc, atmIispT398=atmIispT398, ipAtmAppSvcVccStatsFramesInB=ipAtmAppSvcVccStatsFramesInB, remoteDbServerDirectory=remoteDbServerDirectory, completeClockFailedNotify=completeClockFailedNotify, moduleEvents=moduleEvents, cirEmAtmPvcVccVoiceCompressionB2A=cirEmAtmPvcVccVoiceCompressionB2A, frAtmPvcVccStatsOamRdiRx=frAtmPvcVccStatsOamRdiRx, twoWireSourceChannelSubscriberService=twoWireSourceChannelSubscriberService, e3LineType=e3LineType, viprRoutingServiceType=viprRoutingServiceType, frAtmSpvcVccStatsFramesDroppedA=frAtmSpvcVccStatsFramesDroppedA, viprRouterOperStatus=viprRouterOperStatus, tasTstAnnceIntfIndex=tasTstAnnceIntfIndex, atmPvcVccVUNIB=atmPvcVccVUNIB, vbrIfStatsCellsEncodedLo=vbrIfStatsCellsEncodedLo, cirEmAtmPvcVccStatsCellsEncodedHiA=cirEmAtmPvcVccStatsCellsEncodedHiA, atmIfStatsValidCellsOutLo=atmIfStatsValidCellsOutLo, iispCbrRouteType=iispCbrRouteType, siteMasterNodeAtmAddr1=siteMasterNodeAtmAddr1, vbrAtmPvcVccSusCellRateA2B=vbrAtmPvcVccSusCellRateA2B, vbrAtmSpvcTearDownNotify=vbrAtmSpvcTearDownNotify, gr303IgIntfRowStatus=gr303IgIntfRowStatus, compositeClockFailNotify=compositeClockFailNotify, ethernetChannelConfigEntry=ethernetChannelConfigEntry, atmAtmSpvcVccRetryInterval=atmAtmSpvcVccRetryInterval, sts1PortConfigEntry=sts1PortConfigEntry, vbrVbrPvcStatsCellsEncodedHiA=vbrVbrPvcStatsCellsEncodedHiA, vuniIlmiStatsTable=vuniIlmiStatsTable, trapActivationEntry=trapActivationEntry, frUniAsyncLmi=frUniAsyncLmi, iispCbrRoutRowStatus=iispCbrRoutRowStatus, atmDbCirEmAdminStatus=atmDbCirEmAdminStatus, frFrPvcBcB2A=frFrPvcBcB2A, vbrAtmPvcVccSusCellRateB2A=vbrAtmPvcVccSusCellRateB2A, cardFwDnldStatus=cardFwDnldStatus, atmSpvcVccVciA=atmSpvcVccVciA, oc3APSReasonCode=oc3APSReasonCode, cirEmCirEmPvcStatsCellsEncodedHiB=cirEmCirEmPvcStatsCellsEncodedHiB, vbrAtmSpvcVccConnType=vbrAtmSpvcVccConnType, gr303PPSReasonCode=gr303PPSReasonCode, atmSpvcVccStatsInOdometerCellCountLoB=atmSpvcVccStatsInOdometerCellCountLoB, atmSvcVccVciB=atmSvcVccVciB, cirEmAtmPvcVccStatsOdometerReset=cirEmAtmPvcVccStatsOdometerReset, bridgeAtmPvcVccStatsOamAisRx=bridgeAtmPvcVccStatsOamAisRx, frAtmPvcVccMaxBurstSizeA2B=frAtmPvcVccMaxBurstSizeA2B, oc3APSPairConfigTable=oc3APSPairConfigTable, atmVnnIlmiAddrRegProc=atmVnnIlmiAddrRegProc, atmTrunkingLocalIWFConfigFailNotify=atmTrunkingLocalIWFConfigFailNotify, vbrVbrPvcStatsIfA=vbrVbrPvcStatsIfA, virtualUNIT313=virtualUNIT313, atmPvcVccStatsInOdometerCellCountLoB=atmPvcVccStatsInOdometerCellCountLoB, atmPnniRemoteSvcMinVci=atmPnniRemoteSvcMinVci, cardFwVerCurrentIsDefault=cardFwVerCurrentIsDefault, ds1ChannelSignaling=ds1ChannelSignaling, pingStatusReasonCode=pingStatusReasonCode, vbrVbrPvcSetupNotify=vbrVbrPvcSetupNotify, frFrPvcStatsAal5ErrFramesB=frFrPvcStatsAal5ErrFramesB, ipAtmArpSrvConnType=ipAtmArpSrvConnType, ipAtmAppPvcVccStatsInOdometerCellCountHiB=ipAtmAppPvcVccStatsInOdometerCellCountHiB, atmPvcVccFrwdErrCorrectionB2A=atmPvcVccFrwdErrCorrectionB2A, tasToneConfigTable=tasToneConfigTable, bridgeDomainPortStatusBitmap=bridgeDomainPortStatusBitmap, atmPnniT316=atmPnniT316, frAtmPvcVccTimeLenOut=frAtmPvcVccTimeLenOut, cirEmCirEmPvcStatsOdometerCellsEncodedLoA=cirEmCirEmPvcStatsOdometerCellsEncodedLoA, e1PortStatsCurrentSESs=e1PortStatsCurrentSESs, frFrPvcStatsCellsEncodedLoA=frFrPvcStatsCellsEncodedLoA, cirEmAtmSpvcVccStatsOdometerCellsEncodedLoA=cirEmAtmSpvcVccStatsOdometerCellsEncodedLoA, frFrPvcMaxFrameSizeA2B=frFrPvcMaxFrameSizeA2B, atmSpvcVccIfA=atmSpvcVccIfA, backplaneCircuitryFailedNotify=backplaneCircuitryFailedNotify, atmAtmSpvcVpcStatsCellsTaggedA=atmAtmSpvcVpcStatsCellsTaggedA, protectionGroupConfigTable=protectionGroupConfigTable, vbrAtmSpvcTrafficShapingA2B=vbrAtmSpvcTrafficShapingA2B, ambientTemperature=ambientTemperature, ethernetLineStatus=ethernetLineStatus, frAtmBkPvcVccVUNIB=frAtmBkPvcVccVUNIB, upgradeLicenseKey=upgradeLicenseKey, atmUniT398=atmUniT398, atmAtmSpvcVccStatsInCellCountHiA=atmAtmSpvcVccStatsInCellCountHiA, tasAnnceCmprsType=tasAnnceCmprsType, frAtmPvcVccConnectionStatus=frAtmPvcVccConnectionStatus, dspChannelEchoCancellation=dspChannelEchoCancellation, frAtmSpvcVccSusCellRateA2B=frAtmSpvcVccSusCellRateA2B, cardEntry=cardEntry, gr303Aal2PvcVccRowStatus=gr303Aal2PvcVccRowStatus, imaGrpChannelDiffLinkDelayMax=imaGrpChannelDiffLinkDelayMax, siteRemoteMgrAddr5=siteRemoteMgrAddr5, cardFwVerEntry=cardFwVerEntry, gr303PPSStateChangeNotify=gr303PPSStateChangeNotify, hdlcConfigTable=hdlcConfigTable, arp2PhysicalAddr=arp2PhysicalAddr, cirEmAtmSpvcVccStatsIfA=cirEmAtmSpvcVccStatsIfA, siteFallbackSoftwareVersion=siteFallbackSoftwareVersion, oc3PortStatsSectionBip8Errs=oc3PortStatsSectionBip8Errs, stratumSyncSource=stratumSyncSource, vbrAtmPvcVccIfA=vbrAtmPvcVccIfA, acMIB=acMIB, consoleIPAddr2=consoleIPAddr2, frAtmPvcVccStatsDlciA=frAtmPvcVccStatsDlciA, sysInfoMsgPoolHigh=sysInfoMsgPoolHigh, activeStratum=activeStratum, bridgeDomainHoldTime=bridgeDomainHoldTime, msTxDataClkSrcForDte=msTxDataClkSrcForDte, frFrPvcStatsTable=frFrPvcStatsTable, cirEmAtmSpvcVccStatsEntry=cirEmAtmSpvcVccStatsEntry, cirEmCirEmPvcStatsCellsDecodedHiB=cirEmCirEmPvcStatsCellsDecodedHiB, fwReleaseEntry=fwReleaseEntry, ds3OutputTxRate=ds3OutputTxRate, atmAtmSpvcVccEntry=atmAtmSpvcVccEntry, vbrAtmSpvcVccStatsInOdometerCellCountLoB=vbrAtmSpvcVccStatsInOdometerCellCountLoB, atmUniT313=atmUniT313, dspReroutingFeature=dspReroutingFeature, bridgeBridgePvcStatsOdometerTimer=bridgeBridgePvcStatsOdometerTimer, atmPvcVccViB=atmPvcVccViB, bridgeBridgePvcConnectionStatus=bridgeBridgePvcConnectionStatus, ipAtmAppSvcVccStatsCellsDroppedB=ipAtmAppSvcVccStatsCellsDroppedB, cardTable=cardTable, dspAdminStatus=dspAdminStatus, cirAtmSpvcVccOperStatus=cirAtmSpvcVccOperStatus, e1ChannelId=e1ChannelId, atmSpvcVccStatsInOdometerCellCountHiA=atmSpvcVccStatsInOdometerCellCountHiA, bridgeAtmPvcVccViB=bridgeAtmPvcVccViB, atmDbCirEmConfigEntry=atmDbCirEmConfigEntry, atmTrunkingSigVccSetUpNotify=atmTrunkingSigVccSetUpNotify, atmAtmSpvcVccStatsInOdometerCellCountLoA=atmAtmSpvcVccStatsInOdometerCellCountLoA, virtualUNIMyIfName=virtualUNIMyIfName, cirEmSpvcModifiedNotify=cirEmSpvcModifiedNotify, atmDbCirEmIdlePattern=atmDbCirEmIdlePattern, atmIfStatsMismatchedCellsIn=atmIfStatsMismatchedCellsIn, atmTrunkingBrVccPCMEncoding=atmTrunkingBrVccPCMEncoding, e1LoopbackConfig=e1LoopbackConfig, viprRouteConfigTable=viprRouteConfigTable, atmSvcVccStatsInCellCountHiB=atmSvcVccStatsInCellCountHiB, ilmiStatsId=ilmiStatsId, resetPortStatistics=resetPortStatistics, atmTrunkingSigVccActiveAal2Vcc=atmTrunkingSigVccActiveAal2Vcc, viprRipUpdateInt=viprRipUpdateInt, twoWireSinkChannelConfigTable=twoWireSinkChannelConfigTable, atmPnniSvcMaxVci=atmPnniSvcMaxVci, virtualUNIMyNeighborIpAddress=virtualUNIMyNeighborIpAddress, viprSubChnlStatsInOdometerCellCountHiA=viprSubChnlStatsInOdometerCellCountHiA, atmImaIntfFailNotify=atmImaIntfFailNotify, atmPvcVpcServiceTypeA2B=atmPvcVpcServiceTypeA2B, cirEmAtmPvcVccStatsOamAisTx=cirEmAtmPvcVccStatsOamAisTx, vbrAtmSpvcVccPeakCellRateB2A=vbrAtmSpvcVccPeakCellRateB2A, dsp2PortConfigEntry=dsp2PortConfigEntry, oamActDeactStsSnkPointSegPMBR=oamActDeactStsSnkPointSegPMBR, atmTrunkingConfigFailureCode=atmTrunkingConfigFailureCode, systemColdStartNotify=systemColdStartNotify, atmTrunkingRemoteIWFTrnkMode=atmTrunkingRemoteIWFTrnkMode, atmPvcVpcOAMConnEndPtStatusB=atmPvcVpcOAMConnEndPtStatusB, returnCode=returnCode, cirEmAtmSpvcVccEchoCancellationB2A=cirEmAtmSpvcVccEchoCancellationB2A, ipAtmIpMask=ipAtmIpMask, frAtmSpvcVccStatsOdometerTimer=frAtmSpvcVccStatsOdometerTimer, atmSpvcVccStatsOutOdometerCellCountLoB=atmSpvcVccStatsOutOdometerCellCountLoB, ipAtmAppPvcVccSetupNotify=ipAtmAppPvcVccSetupNotify, bridgeBridgePvcStatsOdometerCellsDecodedLoA=bridgeBridgePvcStatsOdometerCellsDecodedLoA, vbrAtmSpvcVccStatsOdometerTimer=vbrAtmSpvcVccStatsOdometerTimer, gr303IgEOCProtSwitchProvState=gr303IgEOCProtSwitchProvState, bridgeAtmBkPvcVccIfB=bridgeAtmBkPvcVccIfB, iptSelectedStandby=iptSelectedStandby, atmPnniNrtVbrCellLossRatioZeroPlusOne=atmPnniNrtVbrCellLossRatioZeroPlusOne, fwReleaseRunning=fwReleaseRunning, ipAtmAppSvcVccStatsOutCellCountLoA=ipAtmAppSvcVccStatsOutCellCountLoA, viprRouteOperStatus=viprRouteOperStatus)
mibBuilder.exportSymbols("ACMIB", atmVnnIfIndex=atmVnnIfIndex, atmImaStatsEntry=atmImaStatsEntry, resetBridgeDomainStatistics=resetBridgeDomainStatistics, viprSubChnlStatsCellsTaggedB=viprSubChnlStatsCellsTaggedB, ds3ChannelConfigEntry=ds3ChannelConfigEntry, atmVnnConfigEntry=atmVnnConfigEntry, e1PortStatsCurrentLCVs=e1PortStatsCurrentLCVs, bridgeAtmPvcVccPeakCellRateB2A=bridgeAtmPvcVccPeakCellRateB2A, routerIfIndex=routerIfIndex, msLineStatus=msLineStatus, ipAtmAppSvcVccStatsInCellCountHiA=ipAtmAppSvcVccStatsInCellCountHiA, systemEvents=systemEvents, routerAdminStatus=routerAdminStatus, dspResourceUsed=dspResourceUsed, cirAtmSpvcVccPriority=cirAtmSpvcVccPriority, ethernetPortStatsTimer=ethernetPortStatsTimer, atmSvcVccStatsEntry=atmSvcVccStatsEntry, atmAtmSpvcVccSusCellRateA2B=atmAtmSpvcVccSusCellRateA2B, pnniProtLnkStatDown=pnniProtLnkStatDown, oamActDeactResultNotify=oamActDeactResultNotify, cirEmAtmSpvcVccCePortAddr=cirEmAtmSpvcVccCePortAddr, aal2TrunkConfigEntry=aal2TrunkConfigEntry, vbrAtmSpvcVccReleaseCause=vbrAtmSpvcVccReleaseCause, frAtmPvcVccReqFailNotify=frAtmPvcVccReqFailNotify, viprRouteDisableWarning=viprRouteDisableWarning, frAtmSpvcVccBeOut=frAtmSpvcVccBeOut, atmTrunkingBrVccFwAtmMbs01=atmTrunkingBrVccFwAtmMbs01, cirEmAtmPvcVccEntry=cirEmAtmPvcVccEntry, atmCirEmOperStatus=atmCirEmOperStatus, ds1ConnGatewayFeature=ds1ConnGatewayFeature, bridgeAtmPvcVccStatsOdometerCellsDecodedLoA=bridgeAtmPvcVccStatsOdometerCellsDecodedLoA, msHandshake=msHandshake, svcRetBackupStatus=svcRetBackupStatus, atmSvcVccVciA=atmSvcVccVciA, frFrPvcStatsOdometerFramesDroppedB=frFrPvcStatsOdometerFramesDroppedB, atmTrunkingSigVccOutgoingVpi=atmTrunkingSigVccOutgoingVpi, frAtmSpvcVccStatsOutOdometerCellCountHiB=frAtmSpvcVccStatsOutOdometerCellCountHiB, oc3APSConfiguration=oc3APSConfiguration, imaGrpChannelIfType=imaGrpChannelIfType, virtualIntfStatsEgrCellCount=virtualIntfStatsEgrCellCount, siteRemoteMgrAddr3=siteRemoteMgrAddr3, ilmiStatsPduTx=ilmiStatsPduTx, vbrAtmSpvcPeakCellRateB2A=vbrAtmSpvcPeakCellRateB2A, frFrPvcStatsOdometerCellsEncodedHiB=frFrPvcStatsOdometerCellsEncodedHiB, atmPvcVpcStatsInOdometerCellCountHiB=atmPvcVpcStatsInOdometerCellCountHiB, oc3PortId=oc3PortId, hdlcAdminStatus=hdlcAdminStatus, atmAtmSpvcVpcFrwdErrCorrectionA2B=atmAtmSpvcVpcFrwdErrCorrectionA2B, atmAtmSpvcVpcStatsOdometerReset=atmAtmSpvcVpcStatsOdometerReset, trapActivationStatus=trapActivationStatus, oc3APSProtectionSlot=oc3APSProtectionSlot, oc3APSPairProtectionSDBERThreshold=oc3APSPairProtectionSDBERThreshold, atmVnnT316=atmVnnT316, cirAtmSpvcVccStatsInCellCountHiB=cirAtmSpvcVccStatsInCellCountHiB, cirAtmSpvcVccStatsInOdometerCellCountLoB=cirAtmSpvcVccStatsInOdometerCellCountLoB, frAtmSpvcVccStatsCellsDroppedB=frAtmSpvcVccStatsCellsDroppedB, siteGatewayAddr=siteGatewayAddr, cirEmCirEmPvcEchoCancellationB2A=cirEmCirEmPvcEchoCancellationB2A, bridgeAtmPvcVccStatsEntry=bridgeAtmPvcVccStatsEntry, ethernetPortStatsEntry=ethernetPortStatsEntry, lucent=lucent, viprIntfDisableReason=viprIntfDisableReason, gr303IgModifiedNotify=gr303IgModifiedNotify, atmSpvcVccStatsInOdometerCellCountHiB=atmSpvcVccStatsInOdometerCellCountHiB, ipAtmAppPvcVccTearDownNotify=ipAtmAppPvcVccTearDownNotify, deviceId=deviceId, ipAtmAppPvcVccStatsTable=ipAtmAppPvcVccStatsTable, atmAtmSpvcVccStatsOutOdometerCellCountLoA=atmAtmSpvcVccStatsOutOdometerCellCountLoA, bridgeStatsTpPortOutFramesHi=bridgeStatsTpPortOutFramesHi, atmTrunkingSigVccPriority=atmTrunkingSigVccPriority, isdnBChanConfigEntry=isdnBChanConfigEntry, remoteRebootNotify=remoteRebootNotify, atmPvcVccStatsOutOdometerCellCountLoA=atmPvcVccStatsOutOdometerCellCountLoA, vbrAtmPvcVccVpiB=vbrAtmPvcVccVpiB, atmArpAddrType=atmArpAddrType, cirEmCirEmPvcCodingTranslationA2B=cirEmCirEmPvcCodingTranslationA2B, vbrVbrPvcStatsCellsDecodedHiB=vbrVbrPvcStatsCellsDecodedHiB, atmBkPvcVccRowStatus=atmBkPvcVccRowStatus, viprStatsPacketsRxLo=viprStatsPacketsRxLo, viprRouterAdminStatus=viprRouterAdminStatus, oamActDeactEntry=oamActDeactEntry, vbrAtmBkPvcVccViB=vbrAtmBkPvcVccViB, remoteDbServerGroup=remoteDbServerGroup, atmTrunkingBrVccAudioProfileSource=atmTrunkingBrVccAudioProfileSource, h248TermAal2Cid=h248TermAal2Cid, twoWireSinkDialMode=twoWireSinkDialMode, atmTrunkingBrVccSetUpNotify=atmTrunkingBrVccSetUpNotify, taxiChannelConfigTable=taxiChannelConfigTable, viprSubChnlStatsOdometerReset=viprSubChnlStatsOdometerReset, sts1PortId=sts1PortId, e3PortId=e3PortId, fwDriverEntry=fwDriverEntry, imaGrpChannelClearedNotify=imaGrpChannelClearedNotify, atmSpvcVccStatsVciA=atmSpvcVccStatsVciA, taxiOutputTransferRate=taxiOutputTransferRate, oamLpbkAction=oamLpbkAction, atmPvcVccStatsOutCellCountHiA=atmPvcVccStatsOutCellCountHiA, channelizationModifyFailNotify=channelizationModifyFailNotify, viprSubChnlInterworkingType=viprSubChnlInterworkingType, cellTest=cellTest, ipAtmAppPvcVccDestAddrA=ipAtmAppPvcVccDestAddrA, cirEmAtmPvcVccOAMConnEndPtStatus=cirEmAtmPvcVccOAMConnEndPtStatus, atmPvcVccStatsVpiA=atmPvcVccStatsVpiA, atmPvcVccStatsInCellCountHiA=atmPvcVccStatsInCellCountHiA, bridgeConnectionType=bridgeConnectionType, iispCbrRouteTable=iispCbrRouteTable, atmArpServerRemoteAtmAddress=atmArpServerRemoteAtmAddress, ConnFailureCause=ConnFailureCause, atmTrunkingBrVccCompressionSpec=atmTrunkingBrVccCompressionSpec, tasmChannelId=tasmChannelId, atmPvcVccRowStatus=atmPvcVccRowStatus, atmAtmSpvcVccServiceTypeA2B=atmAtmSpvcVccServiceTypeA2B, atmPvcVccStatsOutCellCountLoA=atmPvcVccStatsOutCellCountLoA, atmPvcVpcStatsOamAisTxA=atmPvcVpcStatsOamAisTxA, cirEmAtmPvcVccVUNIB=cirEmAtmPvcVccVUNIB, vbrAtmSpvcVccRetryFailure=vbrAtmSpvcVccRetryFailure, viprSubChnlStatsOutOdometerCellCountLoB=viprSubChnlStatsOutOdometerCellCountLoB, pnniRtAddrModFailNotify=pnniRtAddrModFailNotify, viprRouteServiceType=viprRouteServiceType, ipAtmAppPvcVccStatsOutOdometerCellCountLoB=ipAtmAppPvcVccStatsOutOdometerCellCountLoB, gr303TMCIgId=gr303TMCIgId, taxiPortConfigTable=taxiPortConfigTable, frAtmBkPvcVccVciB=frAtmBkPvcVccVciB, vbrAtmBkPvcVccEntry=vbrAtmBkPvcVccEntry, imaGrpChannelCompatMode=imaGrpChannelCompatMode, atmIispSvcMinVpi=atmIispSvcMinVpi, atmVnnVciIlmi=atmVnnVciIlmi, atmSvcVccStatsVpiA=atmSvcVccStatsVpiA, msChannelConfigEntry=msChannelConfigEntry, viprVpnStatsIcmpOutEchoRQs=viprVpnStatsIcmpOutEchoRQs, viprIntfId=viprIntfId, virtualUNIConfigTable=virtualUNIConfigTable, cirAtmSpvcVccStatsOutCellCountLoB=cirAtmSpvcVccStatsOutCellCountLoB, cirEmAtmSpvcVccStatsInOdometerCellCountLoB=cirEmAtmSpvcVccStatsInOdometerCellCountLoB, atmArpServer=atmArpServer, vbrVbrPvcStatsOdometerTimer=vbrVbrPvcStatsOdometerTimer, isdnIntfConfigEntry=isdnIntfConfigEntry, cirEmAtmPvcVccOamStatus=cirEmAtmPvcVccOamStatus, frAtmPvcVccStatsOutOdometerCellCountHiB=frAtmPvcVccStatsOutOdometerCellCountHiB, fwSlotId=fwSlotId, atmPvcVpcServiceTypeB2A=atmPvcVpcServiceTypeB2A, virtualUNIVciSig=virtualUNIVciSig, atmPvcVpcPeakCellRateA2B=atmPvcVpcPeakCellRateA2B, bridgeAtmPvcVccDualHomed=bridgeAtmPvcVccDualHomed, cirEmAtmBkPvcVccRowStatus=cirEmAtmBkPvcVccRowStatus, bridgePathCost=bridgePathCost, atmTrunkingRemoteIWFRowStatus=atmTrunkingRemoteIWFRowStatus, atmPvcVccStatsOdometerTimer=atmPvcVccStatsOdometerTimer, atmVnnIlmiOperStatus=atmVnnIlmiOperStatus, firmwareDownloadSucceededNotify=firmwareDownloadSucceededNotify, isdnIntfAdminStatus=isdnIntfAdminStatus, imaGrpChannelId=imaGrpChannelId, ds1PortConfigEntry=ds1PortConfigEntry, atmPvcVpcStatsVpiB=atmPvcVpcStatsVpiB, frAtmSpvcVccSetUpNotify=frAtmSpvcVccSetUpNotify, vbrAtmSpvcConfigFailNotify=vbrAtmSpvcConfigFailNotify, frFrPvcConnFailureCauseB=frFrPvcConnFailureCauseB, atmIispUbrLoadBalSupp=atmIispUbrLoadBalSupp, frUniDlcmiState=frUniDlcmiState, viprIpIntfTrap=viprIpIntfTrap, cirAtmSpvcVccFlow=cirAtmSpvcVccFlow, atmTrunkingDataChannelId=atmTrunkingDataChannelId, atmSpvcVccSusCellRateA2B=atmSpvcVccSusCellRateA2B, viprStatsExceedAal5CellsLo=viprStatsExceedAal5CellsLo, atmAtmSpvcVpcStatsOutOdometerCellCountHiB=atmAtmSpvcVpcStatsOutOdometerCellCountHiB, cirEmAtmPvcVccStatsTable=cirEmAtmPvcVccStatsTable, frAtmSpvcVccStatsTimer=frAtmSpvcVccStatsTimer, frAtmPvcVccStatsOamAisTx=frAtmPvcVccStatsOamAisTx, vbrVbrPvcFlow=vbrVbrPvcFlow, bridgeStatsTpPortInFramesHi=bridgeStatsTpPortInFramesHi, connectionConfig=connectionConfig, atmIispT317=atmIispT317, atmSpvcVccRestart=atmSpvcVccRestart, interfaceInServiceNotify=interfaceInServiceNotify, frFrPvcMaxFrameSizeB2A=frFrPvcMaxFrameSizeB2A, vuniIlmiStatsPduTx=vuniIlmiStatsPduTx, virtualUNIMaxVpi=virtualUNIMaxVpi, frAtmSpvcDeletedNotify=frAtmSpvcDeletedNotify, atmSpvcConfigFailNotify=atmSpvcConfigFailNotify, frLmiStatsId=frLmiStatsId, atmUniIlmiOperStatus=atmUniIlmiOperStatus, frAtmPvcVccServiceType=frAtmPvcVccServiceType, ipAtmAppPvcVccSubnetMaskA=ipAtmAppPvcVccSubnetMaskA, atmSpvcVccStatsOutOdometerCellCountHiA=atmSpvcVccStatsOutOdometerCellCountHiA, virtualUNIT309=virtualUNIT309, atmAtmSpvcVpcMaxBurstSizeB2A=atmAtmSpvcVpcMaxBurstSizeB2A, vuniIlmiStatsAttachPtVerified=vuniIlmiStatsAttachPtVerified, bridgeAtmPvcVccIfB=bridgeAtmPvcVccIfB, bridgeAtmPvcVccTable=bridgeAtmPvcVccTable, fwDriverName=fwDriverName, dspOperStatus=dspOperStatus, atmVnnIlmiTimerT=atmVnnIlmiTimerT, atmSvcVccStatsVciB=atmSvcVccStatsVciB, highSpeedChannelId=highSpeedChannelId, atmBkPvcVccActivePvc=atmBkPvcVccActivePvc, vbrVbrPvcReqFailNotify=vbrVbrPvcReqFailNotify, trapNames=trapNames, atmSvcVccStatsInOdometerCellCountLoB=atmSvcVccStatsInOdometerCellCountLoB, remoteDbServerIpAddress=remoteDbServerIpAddress, frAtmPvcVccViB=frAtmPvcVccViB, bridgeAtmPvcVccConnectionStatus=bridgeAtmPvcVccConnectionStatus, dspResourceId=dspResourceId, intfAtmPvcConnDisplayVci=intfAtmPvcConnDisplayVci, oc3PortStatsPathBip8Errs=oc3PortStatsPathBip8Errs, viprRouteRowStatus=viprRouteRowStatus, siteSoftwareVersion=siteSoftwareVersion, frAtmPvcVccSetupNotify=frAtmPvcVccSetupNotify, viprArpConfigTable=viprArpConfigTable, ipAtmAppSvcVccStatsFramesOutB=ipAtmAppSvcVccStatsFramesOutB, atmSpvcVccStatsIfB=atmSpvcVccStatsIfB, atmAtmSpvpConfiguredNotify=atmAtmSpvpConfiguredNotify, atmAtmSpvcVccStatsCellsTaggedB=atmAtmSpvcVccStatsCellsTaggedB, atmPvcVccFrwdErrCorrectionA2B=atmPvcVccFrwdErrCorrectionA2B, atmTrunkingBrVccFwAtmScr01=atmTrunkingBrVccFwAtmScr01, bridgeDomainMaxBridgeAge=bridgeDomainMaxBridgeAge, atmAtmSpvcVccReleaseCause=atmAtmSpvcVccReleaseCause, atmPvcVpcStatsOdometerReset=atmPvcVpcStatsOdometerReset, viprIntfIPNetMask=viprIntfIPNetMask, gr303IgRowStatus=gr303IgRowStatus, vbrVbrPvcEntry=vbrVbrPvcEntry, bridgeDomainEntry=bridgeDomainEntry, tasAnnceType=tasAnnceType, frFrPvcStatsEntry=frFrPvcStatsEntry, bridgeAtmPvcVccStatsOdometerCellsEncodedLoA=bridgeAtmPvcVccStatsOdometerCellsEncodedLoA, atmVnnMyIfName=atmVnnMyIfName, viprSubChanTrap=viprSubChanTrap, primaryCpuHwType=primaryCpuHwType, oc3APSActiveSlot=oc3APSActiveSlot, tasmPortConfigTable=tasmPortConfigTable, vbrAtmSpvcRetryInterval=vbrAtmSpvcRetryInterval, bridgeAtmPvcVccMaxBurstSizeB2A=bridgeAtmPvcVccMaxBurstSizeB2A, cirEmAtmPvcVccStatsVciB=cirEmAtmPvcVccStatsVciB, toneAnnceIfIndex=toneAnnceIfIndex, virtualUNIIlmiRetryK=virtualUNIIlmiRetryK, atmAtmSpvcVccVpiB=atmAtmSpvcVccVpiB, atmUniIfIndex=atmUniIfIndex, cirEmCirEmPvcStatsTimer=cirEmCirEmPvcStatsTimer, viprVpnStatsIcmpInDestUnreachs=viprVpnStatsIcmpInDestUnreachs, bridgeBridgePvcIfA=bridgeBridgePvcIfA, oc3ChannelId=oc3ChannelId, bridgeBridgePvcStatsOdometerCellsEncodedLoB=bridgeBridgePvcStatsOdometerCellsEncodedLoB, ipAtmBkAppPvcVccTearDownNotify=ipAtmBkAppPvcVccTearDownNotify, viprSubChnlComBurstSize=viprSubChnlComBurstSize, cirEmAtmPvcVccVoiceCompressionA2B=cirEmAtmPvcVccVoiceCompressionA2B, atmSpvcVccAddrTable=atmSpvcVccAddrTable, viprSubChnlAdminStatus=viprSubChnlAdminStatus, alarmStatusOutputBitmap=alarmStatusOutputBitmap, frAtmPvcVccDualHomed=frAtmPvcVccDualHomed, atmPvcVccStatsOamRdiTxB=atmPvcVccStatsOamRdiTxB, ilmiStatsAttachPtChanged=ilmiStatsAttachPtChanged, appIpRouteEntry=appIpRouteEntry, cardFwRetries=cardFwRetries, ilmiStatsTimer=ilmiStatsTimer, frUniAdminStatus=frUniAdminStatus)
mibBuilder.exportSymbols("ACMIB", frAtmPvcVccDlciA=frAtmPvcVccDlciA, frLmiStatsEntry=frLmiStatsEntry, bridgeAtmBkPvcVccEntry=bridgeAtmBkPvcVccEntry, bridgeAtmBkPvcVccVpiB=bridgeAtmBkPvcVccVpiB, atmTrunkingLocalIWFDeleteFailNotify=atmTrunkingLocalIWFDeleteFailNotify, atmAtmSpvcVpcStatsFrwdErrCrrctnRateB2A=atmAtmSpvcVpcStatsFrwdErrCrrctnRateB2A, msPortStatsFrameErrors=msPortStatsFrameErrors, oc3PortStatsTimer=oc3PortStatsTimer, viprStatsIPInAddrErrorsHi=viprStatsIPInAddrErrorsHi, dsp2PortId=dsp2PortId, frFrPvcDlciA=frFrPvcDlciA, cirAtmSpvcVccVpiB=cirAtmSpvcVccVpiB, arp1IpAddress=arp1IpAddress, viprSubChnlDisableReason=viprSubChnlDisableReason, oc3PortStatsPathFebeCount=oc3PortStatsPathFebeCount, protectionGroupTable=protectionGroupTable, vbrAtmPvcVccStatsOutOdometerCellCountHiB=vbrAtmPvcVccStatsOutOdometerCellCountHiB, atmSvcVccMaxBurstSizeA2B=atmSvcVccMaxBurstSizeA2B, atmSpvcVccStatsOutCellCountHiB=atmSpvcVccStatsOutCellCountHiB, pgtSwitchoverMethod=pgtSwitchoverMethod, atmUniT322=atmUniT322, frFrPvcIfB=frFrPvcIfB, spvcAddrIfA=spvcAddrIfA, frAtmPvcVccTearDownNotify=frAtmPvcVccTearDownNotify, resetAtmIlmiStatistics=resetAtmIlmiStatistics, oamTestAction=oamTestAction, msLOSDetection=msLOSDetection, intfStatistics=intfStatistics, atmPvcVccDualHomed=atmPvcVccDualHomed, bridgeAtmPvcVccStatsTimer=bridgeAtmPvcVccStatsTimer, cirEmCirEmPvcEchoCancellationA2B=cirEmCirEmPvcEchoCancellationA2B, atmSpvcVccServiceTypeA2B=atmSpvcVccServiceTypeA2B, cirEmAtmBkPvcVccVciB=cirEmAtmBkPvcVccVciB, inactiveTimer=inactiveTimer, vbrAtmPvcVccConnFailureCauseB=vbrAtmPvcVccConnFailureCauseB, frAtmSpvcVccRetryInterval=frAtmSpvcVccRetryInterval, atmAtmSpvcVpcSusCellRateB2A=atmAtmSpvcVpcSusCellRateB2A, frAtmSpvcVccReleaseCause=frAtmSpvcVccReleaseCause, virtualUNIIlmiAttachPtProc=virtualUNIIlmiAttachPtProc, dspChannelSilenceSupression=dspChannelSilenceSupression, viprRouterRowStatus=viprRouterRowStatus, bridgeBridgePvcStatsOdometerReset=bridgeBridgePvcStatsOdometerReset, equipStatistics=equipStatistics, interfaceType=interfaceType, cirAtmSpvcDeletedNotify=cirAtmSpvcDeletedNotify, frLmiStatsAsyncTx=frLmiStatsAsyncTx, cirEmAtmPvcVccStatsOutCellCountLoB=cirEmAtmPvcVccStatsOutCellCountLoB, atmTrunkingRemoteIWFAdminStatus=atmTrunkingRemoteIWFAdminStatus, atmVnnIlmiConfigProc=atmVnnIlmiConfigProc, atmPvcVccStatsOamAisTxB=atmPvcVccStatsOamAisTxB, bridgeAtmPvcVccSusCellRateB2A=bridgeAtmPvcVccSusCellRateB2A, viprSubChnlAtmSustainedCellRate=viprSubChnlAtmSustainedCellRate, cirAtmSpvcVccStatsCellsEncodedLoA=cirAtmSpvcVccStatsCellsEncodedLoA, virtualUNIIlmiTimerT=virtualUNIIlmiTimerT, msgPoolViewIndex=msgPoolViewIndex, atmTrunkingSigVccType=atmTrunkingSigVccType, ipThrottlingAllowedInFrameRate=ipThrottlingAllowedInFrameRate, atmPvcVpcStatsOamAisRxA=atmPvcVpcStatsOamAisRxA, oc3APSPairProtectionLineSignalStatus=oc3APSPairProtectionLineSignalStatus, casAddressingType=casAddressingType, ipAtmAppSvcVccPeakCellRateB2A=ipAtmAppSvcVccPeakCellRateB2A, atmPvcVpcStatsOutCellCountHiA=atmPvcVpcStatsOutCellCountHiA, atmTrunkVccs=atmTrunkVccs, bridgeDomainHelloTime=bridgeDomainHelloTime, sysInfoSysUptime=sysInfoSysUptime, muxReadyConfirmNotReceivedNotify=muxReadyConfirmNotReceivedNotify, cirEmAtmPvcVccCngToneDetectionB2A=cirEmAtmPvcVccCngToneDetectionB2A, atmUniIlmiTimerS=atmUniIlmiTimerS, sysInfoRxOneCellHigh=sysInfoRxOneCellHigh, atmSvcVccSusCellRateB2A=atmSvcVccSusCellRateB2A, vbrAtmPvcVccStatsOdometerTimer=vbrAtmPvcVccStatsOdometerTimer, cgApiAtmAtmPvcCalls=cgApiAtmAtmPvcCalls, cirEmAtmSpvcVccVciB=cirEmAtmSpvcVccVciB, atmPvcVccConnFailureCauseA=atmPvcVccConnFailureCauseA, vbrVbrPvcConnectionStatus=vbrVbrPvcConnectionStatus, atmPnniRtVbrCellDelayVar=atmPnniRtVbrCellDelayVar, cirEmAtmSpvcVccRestart=cirEmAtmSpvcVccRestart, gr303Aal2PvcConfigReqFailNotify=gr303Aal2PvcConfigReqFailNotify, ethernetChannelIfType=ethernetChannelIfType, atmUniT309=atmUniT309, atmPvcVccPeakCellRateA2B=atmPvcVccPeakCellRateA2B, stratumRefFailAction=stratumRefFailAction, atmSvcVccCnfrmTypeB2A=atmSvcVccCnfrmTypeB2A, msBaudRate=msBaudRate, atmPnniConnTrafficShapingFlag=atmPnniConnTrafficShapingFlag, pingStatus=pingStatus, vbrIfStatsCellsDecodedLo=vbrIfStatsCellsDecodedLo, viprRoutingTrap=viprRoutingTrap, atmVnnT303=atmVnnT303, atmSpvcVccSarTypeB2A=atmSpvcVccSarTypeB2A, csSapphireInterfaceAddress=csSapphireInterfaceAddress, isdnL2OperStatus=isdnL2OperStatus, atmPvcVccStatsOamRdiRxB=atmPvcVccStatsOamRdiRxB, e3PortStatsCurrentLCVs=e3PortStatsCurrentLCVs, cirEmAtmSpvcVccStatsTable=cirEmAtmSpvcVccStatsTable, viprVpnStatsIcmpOutInfoRQs=viprVpnStatsIcmpOutInfoRQs, oc3TransmitClockSource=oc3TransmitClockSource, atmPnniVpiSig=atmPnniVpiSig, sysInfoMsgPoolUsed=sysInfoMsgPoolUsed, taxiChannelSecuFeature=taxiChannelSecuFeature, atmAtmSpvcVpcTearDownNotify=atmAtmSpvcVpcTearDownNotify, vbrAtmPvcVccMaxBurstSizeA2B=vbrAtmPvcVccMaxBurstSizeA2B, virtualUNIIntfModifyFailNotify=virtualUNIIntfModifyFailNotify, gr303Aal2PvcVccSilenceDetection=gr303Aal2PvcVccSilenceDetection, atmPvcVccStatsInOdometerCellCountHiB=atmPvcVccStatsInOdometerCellCountHiB, iptIntfType=iptIntfType, stratumMode=stratumMode, dsp2AalMode=dsp2AalMode, atmPvcVccStatsCellsTaggedA=atmPvcVccStatsCellsTaggedA, cirEmAtmSpvcVccStatsOutOdometerCellCountHiB=cirEmAtmSpvcVccStatsOutOdometerCellCountHiB, frAtmSpvcVccRelease=frAtmSpvcVccRelease, atmAtmSpvcVccRelease=atmAtmSpvcVccRelease, ipAtmAppSvcVccViB=ipAtmAppSvcVccViB, atmVnnT309=atmVnnT309, ds3ChannelSecuFeature=ds3ChannelSecuFeature, atmTermEmRxTimeOut=atmTermEmRxTimeOut, atmPnniIlmiTimerT=atmPnniIlmiTimerT, twoWireSourceLineStatus=twoWireSourceLineStatus, e1EnhanceFeatureSet1=e1EnhanceFeatureSet1, fwIsDefault=fwIsDefault, vbrAtmSpvcVccSetUpNotify=vbrAtmSpvcVccSetUpNotify, atmAtmSpvcVpcRemoteSelectType=atmAtmSpvcVpcRemoteSelectType, remoteRebootReasonCode=remoteRebootReasonCode, viprArpIndex=viprArpIndex, sysInfoMisaligned=sysInfoMisaligned, ipThrottlingLeakyBucketSize=ipThrottlingLeakyBucketSize, siteDateAndTime=siteDateAndTime, atmAtmSpvcVccPriority=atmAtmSpvcVccPriority, twoWireSinkChannelConfigEntry=twoWireSinkChannelConfigEntry, msChannelCellBearingPayloadFec=msChannelCellBearingPayloadFec, frUniIfIndex=frUniIfIndex, virtualIntfConfigRowStatus=virtualIntfConfigRowStatus, frAtmPvcVccStatsCellsTaggedB=frAtmPvcVccStatsCellsTaggedB, viprSubChnlStatsOdometerTimer=viprSubChnlStatsOdometerTimer, atmAtmSpvpModifyFailNotify=atmAtmSpvpModifyFailNotify, atmAtmSpvcVccRemoteAtmPortAddr=atmAtmSpvcVccRemoteAtmPortAddr, bridgeOperStatus=bridgeOperStatus, isdnIntfConfigTable=isdnIntfConfigTable, atmPvcVccReqFailNotify=atmPvcVccReqFailNotify, vbrAtmBkPvcVccIfB=vbrAtmBkPvcVccIfB, atmPvcVccSusCellRateA2B=atmPvcVccSusCellRateA2B, ipAtmBkAppPvcVccVciB=ipAtmBkAppPvcVccVciB, atmPvcVccStatsIfB=atmPvcVccStatsIfB, virtualUNIIlmiConnectProc=virtualUNIIlmiConnectProc, ipAtmAppPvcVccConnFailureCauseB=ipAtmAppPvcVccConnFailureCauseB, viprIntfOperStatus=viprIntfOperStatus, viprStatsArpProtoRxHi=viprStatsArpProtoRxHi, gr303IgStatsInCallFailed=gr303IgStatsInCallFailed, ipAtmBkAppPvcVccIfB=ipAtmBkAppPvcVccIfB, ipAtmAppSvcVccStatsIfB=ipAtmAppSvcVccStatsIfB, atmPvcVccStatsOamAisTxA=atmPvcVccStatsOamAisTxA, vbrAtmPvcVccStatsOutOdometerCellCountLoB=vbrAtmPvcVccStatsOutOdometerCellCountLoB, aal2TrunkConfigSusCellRateEgr=aal2TrunkConfigSusCellRateEgr, dspChannelConfigEntry=dspChannelConfigEntry, viprRoutingIPNetMask=viprRoutingIPNetMask, h248NormalMGCExecutionTime=h248NormalMGCExecutionTime, tasTstAnnceAction=tasTstAnnceAction, stratumSecondaryLineId=stratumSecondaryLineId, virtualUNIIlmiProtocolStatus=virtualUNIIlmiProtocolStatus, atmSvcVccStatsInOdometerCellCountHiA=atmSvcVccStatsInOdometerCellCountHiA, atmAtmSpvcVpcStatsCellsDroppedA=atmAtmSpvcVpcStatsCellsDroppedA, ds1ChannelConfigEntry=ds1ChannelConfigEntry, atmTrunkingBrVccFrameModeSupp=atmTrunkingBrVccFrameModeSupp, atmVnnUPCSupp=atmVnnUPCSupp, vbrAtmPvcVccStatsCellsTaggedB=vbrAtmPvcVccStatsCellsTaggedB, twoWireSourceChannelSilenceSupression=twoWireSourceChannelSilenceSupression, frLmiStatsT392Exp=frLmiStatsT392Exp, atmPvcVpcStatsOamRdiTxB=atmPvcVpcStatsOamRdiTxB, atmSvcVccSarTypeB2A=atmSvcVccSarTypeB2A, atmSvcVccStatsInOdometerCellCountHiB=atmSvcVccStatsInOdometerCellCountHiB, frFrPvcStatsOdometerCellsEncodedLoB=frFrPvcStatsOdometerCellsEncodedLoB, vbrAtmPvcVccStatsInOdometerCellCountHiB=vbrAtmPvcVccStatsInOdometerCellCountHiB, atmVnnMyNeighborIpAddress=atmVnnMyNeighborIpAddress, atmPnniCbrAvailCellRate=atmPnniCbrAvailCellRate, atmPnniUbrLoadBalSupp=atmPnniUbrLoadBalSupp, atmPvcVccTrafficShapingA2B=atmPvcVccTrafficShapingA2B, bridgeStatsBasePortMtuExceededDiscardsHi=bridgeStatsBasePortMtuExceededDiscardsHi, tasMemAction=tasMemAction, msChannelCellBearingMode=msChannelCellBearingMode, ipAtmAppSvcVccStatsOutCellCountLoB=ipAtmAppSvcVccStatsOutCellCountLoB, ds3LineCoding=ds3LineCoding, virtualUNIVISupport=virtualUNIVISupport, bridgeAtmPvcVccSetupNotify=bridgeAtmPvcVccSetupNotify, atmAtmSpvcVpcStatsCellsDroppedB=atmAtmSpvcVpcStatsCellsDroppedB, cardRemovedOrFailedNotify=cardRemovedOrFailedNotify, bridgeAtmBkPvcVccAutoSwitch=bridgeAtmBkPvcVccAutoSwitch, atmUniAvailBwIgr=atmUniAvailBwIgr, aal2TrunkConfigFlow=aal2TrunkConfigFlow, arp2Table=arp2Table, cirEmCirEmPvcIfA=cirEmCirEmPvcIfA, viprRtSrvTrap=viprRtSrvTrap, atmVnnT398=atmVnnT398, vbrAtmBkPvcVccActivePvc=vbrAtmBkPvcVccActivePvc, vbrAtmPvcVccStatsVciB=vbrAtmPvcVccStatsVciB, vbrAtmSpvcVccRestart=vbrAtmSpvcVccRestart, twoWireSinkChannelCompandingLaw=twoWireSinkChannelCompandingLaw, atmIispUPCSupp=atmIispUPCSupp, cirEmCirEmPvcServiceType=cirEmCirEmPvcServiceType, atmBkPvcVpcIfB=atmBkPvcVpcIfB, tasTrapAnnceId=tasTrapAnnceId, removeConfigFiles=removeConfigFiles, atmTrunkingBrVccConnType=atmTrunkingBrVccConnType, atmAtmSpvcVccOperStatus=atmAtmSpvcVccOperStatus, cirEmCirEmPvcStatsEntry=cirEmCirEmPvcStatsEntry, atmVnnSvcMinVpi=atmVnnSvcMinVpi, virtualUNISignalingAdminStatus=virtualUNISignalingAdminStatus, isdnConfig=isdnConfig, cirEmAtmSpvcVccStatsIfB=cirEmAtmSpvcVccStatsIfB, frFrPvcPeakCellRateB2A=frFrPvcPeakCellRateB2A, atmPnniConfigTable=atmPnniConfigTable, tasCmprsAnnceNotify=tasCmprsAnnceNotify, tasTstLineReasonCode=tasTstLineReasonCode, oc3APSPairWorkingSFDuration=oc3APSPairWorkingSFDuration, atmAtmSpvcVccTrafficShapingB2A=atmAtmSpvcVccTrafficShapingB2A, pnniProtLnkUpAndAdv=pnniProtLnkUpAndAdv, cirAtmSpvcVccServiceType=cirAtmSpvcVccServiceType, protectionCommand=protectionCommand, atmArpEntry=atmArpEntry, atmSpvcVccStatsInOdometerCellCountLoA=atmSpvcVccStatsInOdometerCellCountLoA, atmAtmSpvcVccReleaseDiag=atmAtmSpvcVccReleaseDiag)
