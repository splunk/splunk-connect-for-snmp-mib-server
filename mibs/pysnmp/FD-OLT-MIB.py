#
# PySNMP MIB module FD-OLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FD-OLT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
epon, DeviceOperation, OperSwitch, DataDirection, DeviceStatus = mibBuilder.importSymbols("EPON-EOC-MIB", "epon", "DeviceOperation", "OperSwitch", "DataDirection", "DeviceStatus")
ponCardSlotId, = mibBuilder.importSymbols("FD-SYSTEM-MIB", "ponCardSlotId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibIdentifier, iso, ModuleIdentity, Integer32, Bits, TimeTicks, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "iso", "ModuleIdentity", "Integer32", "Bits", "TimeTicks", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "ObjectIdentity", "NotificationType")
MacAddress, TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
fdOlt = ModuleIdentity((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3))
if mibBuilder.loadTexts: fdOlt.setLastUpdated('201005271056Z')
if mibBuilder.loadTexts: fdOlt.setOrganization('epon eoc factory.')
oltBaseManageTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1), )
if mibBuilder.loadTexts: oltBaseManageTable.setStatus('current')
oltBaseManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltBaseManageEntry.setStatus('current')
oltId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: oltId.setStatus('current')
oltMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltMacAddr.setStatus('current')
oltWorkState = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 3), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltWorkState.setStatus('current')
oltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltEnable.setStatus('current')
maxPermitLLIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxPermitLLIDNumber.setStatus('current')
registeredLLIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: registeredLLIDNumber.setStatus('current')
accessedOnuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessedOnuNumber.setStatus('current')
linkIdExhaust = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIdExhaust.setStatus('current')
onuIdExhaust = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIdExhaust.setStatus('current')
linkIdOverWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkIdOverWrite.setStatus('current')
onuIdOverWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIdOverWrite.setStatus('current')
oltOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 20), DeviceOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltOperate.setStatus('current')
oltUpgradeStat = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8, 10))).clone(namedValues=NamedValues(("booting", 1), ("normalRun", 2), ("upgrading", 6), ("upgradeOk", 7), ("upgradeErr", 8), ("upgradeOnu", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltUpgradeStat.setStatus('current')
onuMgmtDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onuMgmtTk", 1), ("onuMgmtCtc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuMgmtDefType.setStatus('current')
oltAdvancedManage = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4))
oltChipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: oltChipInfoTable.setStatus('current')
oltChipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltChipInfoEntry.setStatus('current')
oltChipProCode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipProCode.setStatus('current')
oltChipVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipVer.setStatus('current')
oltChipFirmVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipFirmVer.setStatus('current')
oltChipBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipBootVer.setStatus('current')
oltChipPersVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipPersVer.setStatus('current')
oltChipApp0Ver = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipApp0Ver.setStatus('current')
oltChipApp1Ver = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipApp1Ver.setStatus('current')
oltChipDiagVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipDiagVer.setStatus('current')
oltOamRateTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2), )
if mibBuilder.loadTexts: oltOamRateTable.setStatus('current')
oltOamRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltOamRateEntry.setStatus('current')
minOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('sec/PDU').setMaxAccess("readwrite")
if mibBuilder.loadTexts: minOamRate.setStatus('current')
maxOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('PDUs/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxOamRate.setStatus('current')
oamRspTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamRspTimeout.setStatus('current')
discoveryParaTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3), )
if mibBuilder.loadTexts: discoveryParaTable.setStatus('current')
discoveryParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: discoveryParaEntry.setStatus('current')
discoverPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverPeriod.setStatus('current')
discoverWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(84, 131070)).clone(16319)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverWindow.setStatus('current')
discoverTimeoutVal = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('100ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverTimeoutVal.setStatus('current')
oltAdvancedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4), )
if mibBuilder.loadTexts: oltAdvancedConfigTable.setStatus('current')
oltAdvancedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltAdvancedConfigEntry.setStatus('current')
oltAddiVlanEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltAddiVlanEthType.setStatus('current')
onuUltraLongDistanceTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 2), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuUltraLongDistanceTrans.setStatus('current')
oltBroadCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 3), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltBroadCastRateCtl.setStatus('current')
oltMultiCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltMultiCastRateCtl.setStatus('current')
oltUnkUcCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 5), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltUnkUcCastRateCtl.setStatus('current')
oltBroadCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltBroadCastRate.setStatus('current')
oltBridgeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5), )
if mibBuilder.loadTexts: oltBridgeConfigTable.setStatus('current')
oltBridgeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltBridgeConfigEntry.setStatus('current')
dynMacAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2419200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynMacAgeTime.setStatus('current')
downStreamResetAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 2), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downStreamResetAgeTimer.setStatus('current')
bridgedVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgedVlanNumber.setStatus('current')
macOverWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macOverWrite.setStatus('current')
discardUnknownMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 5), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discardUnknownMac.setStatus('current')
forwardTagOnSimpleBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 6), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardTagOnSimpleBridge.setStatus('current')
dba = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6))
linkLevelSizeTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1), )
if mibBuilder.loadTexts: linkLevelSizeTable.setStatus('current')
linkLevelSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: linkLevelSizeEntry.setStatus('current')
level0Links = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: level0Links.setStatus('current')
level1Links = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: level1Links.setStatus('current')
level2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: level2Links.setStatus('current')
nonDbaLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonDbaLinks.setStatus('current')
dbaDropDownWeightTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2), )
if mibBuilder.loadTexts: dbaDropDownWeightTable.setStatus('current')
dbaDropDownWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: dbaDropDownWeightEntry.setStatus('current')
l0DropDownWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l0DropDownWeight.setStatus('current')
l1DropDownWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l1DropDownWeight.setStatus('current')
l2DropDownWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2DropDownWeight.setStatus('current')
dbaPollRateTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3), )
if mibBuilder.loadTexts: dbaPollRateTable.setStatus('current')
dbaPollRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: dbaPollRateEntry.setStatus('current')
l0PollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l0PollingRate.setStatus('current')
l1PollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l1PollingRate.setStatus('current')
l2PollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PollingRate.setStatus('current')
aggreBandWidthTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7), )
if mibBuilder.loadTexts: aggreBandWidthTable.setStatus('current')
aggreBandWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "directionId"))
if mibBuilder.loadTexts: aggreBandWidthEntry.setStatus('current')
directionId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1, 1), DataDirection())
if mibBuilder.loadTexts: directionId.setStatus('current')
aggreBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggreBandWidth.setStatus('current')
aggreMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggreMaxBurstSize.setStatus('current')
oltAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8), )
if mibBuilder.loadTexts: oltAclRuleTable.setStatus('current')
oltAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "oltPortId"))
if mibBuilder.loadTexts: oltAclRuleEntry.setStatus('current')
oltPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oltPonPort", 1), ("oltSniPort", 2))))
if mibBuilder.loadTexts: oltPortId.setStatus('current')
oltAclRuleData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltAclRuleData.setStatus('current')
priCopyMapTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 9), )
if mibBuilder.loadTexts: priCopyMapTable.setStatus('current')
priCopyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 9, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: priCopyMapEntry.setStatus('current')
priCopyMapData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 9, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priCopyMapData.setStatus('current')
oltIgmpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10))
igmpProxyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1), )
if mibBuilder.loadTexts: igmpProxyConfigTable.setStatus('current')
igmpProxyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: igmpProxyConfigEntry.setStatus('current')
maxIgmpGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxIgmpGroups.setStatus('current')
robustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: robustCount.setStatus('current')
queryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryInterval.setStatus('current')
queryRspTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryRspTimeout.setStatus('current')
queryMaxResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryMaxResTime.setStatus('current')
startQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startQueryCount.setStatus('current')
startupQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startupQueryInterval.setStatus('current')
lastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryCount.setStatus('current')
lastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryInterval.setStatus('current')
lastMemberQueryResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryResTime.setStatus('current')
upstreamRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upstreamRetransCount.setStatus('current')
upstreamRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upstreamRetransInterval.setStatus('current')
igmpQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQueues.setStatus('current')
igmpSlaMinGuaranteedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaMinGuaranteedBW.setStatus('current')
igmpSlaMaxAllowedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaMaxAllowedBW.setStatus('current')
igmpSlaDelaySensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sensitive", 1), ("tolerant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaDelaySensitive.setStatus('current')
igmpSlaMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaMaxBurstSize.setStatus('current')
igmpProxyOper = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("restorePara", 2), ("refreshGroups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProxyOper.setStatus('current')
igmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2), )
if mibBuilder.loadTexts: igmpGroupTable.setStatus('current')
igmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "igmpGroupIndex"))
if mibBuilder.loadTexts: igmpGroupEntry.setStatus('current')
igmpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: igmpGroupIndex.setStatus('current')
igmpGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupVlan.setStatus('current')
igmpGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupIpAddr.setStatus('current')
accessUserIdentifer = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11))
accessUserIdentiferConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1), )
if mibBuilder.loadTexts: accessUserIdentiferConfigTable.setStatus('current')
accessUserIdentiferConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: accessUserIdentiferConfigEntry.setStatus('current')
pppoePlusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1, 1, 1), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePlusEnable.setStatus('current')
dhcpOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1, 1, 2), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82.setStatus('current')
llid = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12))
llidConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1), )
if mibBuilder.loadTexts: llidConfigTable.setStatus('current')
llidConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: llidConfigEntry.setStatus('current')
linkId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: linkId.setStatus('current')
llidAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llidAssigned.setStatus('current')
associatedOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedOnuId.setStatus('current')
llidMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llidMac.setStatus('current')
linkOnLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 5), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOnLineStatus.setStatus('current')
keyChangeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keyChangeTimer.setStatus('current')
llidBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("simpleBridged", 1), ("dedicatedSingleVlan", 2), ("dedicatedDoubleVlan", 3), ("sharedVlan", 4), ("transparentVlan", 5), ("translatedVlan", 6), ("linkCrossConnect", 7), ("prioritiedVlan", 8), ("priorityCopySingleVlan", 9), ("priorityCopyDoubleVlan", 10), ("priorityCopySharedVlan", 11), ("prioritySharedVlan", 12), ("prioritySimpleBridged", 13), ("transparentPrioritySharedVlan", 14), ("transparentSharedVlanWithBroadcast", 15), ("doubleTaggedSharedVlan", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llidBridgeType.setStatus('current')
llidMacEntryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llidMacEntryLimit.setStatus('current')
crossConnectLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectLinkId.setStatus('current')
llidOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("block", 2), ("reRegist", 3), ("breakCrossLink", 4), ("restoreConfig", 5), ("deleteLinkEntry", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llidOperation.setStatus('current')
llidAdvancedManage = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2))
linkOamRateTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1), )
if mibBuilder.loadTexts: linkOamRateTable.setStatus('current')
linkOamRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: linkOamRateEntry.setStatus('current')
maxLinkOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLinkOamRate.setStatus('current')
minLinkOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minLinkOamRate.setStatus('current')
sla = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3))
llidSlaTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1), )
if mibBuilder.loadTexts: llidSlaTable.setStatus('current')
llidSlaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "directionId"))
if mibBuilder.loadTexts: llidSlaEntry.setStatus('current')
minGuaranteedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: minGuaranteedBW.setStatus('current')
maxAllowedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxAllowedBW.setStatus('current')
delaySensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tolerant", 1), ("sensitive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: delaySensitive.setStatus('current')
maxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBurstSize.setStatus('current')
slaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 5), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaEnable.setStatus('current')
slaWeightTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2), )
if mibBuilder.loadTexts: slaWeightTable.setStatus('current')
slaWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "directionId"))
if mibBuilder.loadTexts: slaWeightEntry.setStatus('current')
dbaTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbaTokens.setStatus('current')
schedulerMinTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulerMinTokens.setStatus('current')
schedulerMaxTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulerMaxTokens.setStatus('current')
forceReport = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceReport.setStatus('current')
multicastSlaTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3), )
if mibBuilder.loadTexts: multicastSlaTable.setStatus('current')
multicastSlaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: multicastSlaEntry.setStatus('current')
multiMinGuanBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiMinGuanBW.setStatus('current')
multiMaxAllowedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiMaxAllowedBW.setStatus('current')
multiDelaySensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sensitive", 1), ("tolerant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiDelaySensitive.setStatus('current')
multiMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiMaxBurstSize.setStatus('current')
llidVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4))
llidVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1), )
if mibBuilder.loadTexts: llidVlanCfgTable.setStatus('current')
llidVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "llidVlanTag"))
if mibBuilder.loadTexts: llidVlanCfgEntry.setStatus('current')
llidVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: llidVlanTag.setStatus('current')
llidVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llidVlanRowStatus.setStatus('current')
vlanLlidTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2), )
if mibBuilder.loadTexts: vlanLlidTable.setStatus('current')
vlanLlidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanLlidEntry.setStatus('current')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanId.setStatus('current')
linkIDsInVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIDsInVlan.setStatus('current')
priVlanTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3), )
if mibBuilder.loadTexts: priVlanTable.setStatus('current')
priVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: priVlanEntry.setStatus('current')
netVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netVlanId.setStatus('current')
upstreamCos = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upstreamCos.setStatus('current')
priSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cos", 1), ("tos", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: priSelector.setStatus('current')
minPriValue = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: minPriValue.setStatus('current')
maxPriValue = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: maxPriValue.setStatus('current')
transNonTosFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: transNonTosFrame.setStatus('current')
priVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: priVlanRowStatus.setStatus('current')
blockedLinkTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5), )
if mibBuilder.loadTexts: blockedLinkTable.setStatus('current')
blockedLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: blockedLinkEntry.setStatus('current')
blockedLinkMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blockedLinkMac.setStatus('current')
blockedMacOper = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("unblock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockedMacOper.setStatus('current')
macAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6))
dynamicMac = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1))
dynMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 1), )
if mibBuilder.loadTexts: dynMacOperTable.setStatus('current')
dynMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: dynMacOperEntry.setStatus('current')
dynMacOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("clear", 2), ("refresh", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynMacOperation.setStatus('current')
dynMacTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2), )
if mibBuilder.loadTexts: dynMacTable.setStatus('current')
dynMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "dynMacIndex"))
if mibBuilder.loadTexts: dynMacEntry.setStatus('current')
dynMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dynMacIndex.setStatus('current')
dynMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynMacAddr.setStatus('current')
staticMac = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2))
staticMacTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1), )
if mibBuilder.loadTexts: staticMacTable.setStatus('current')
staticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "staticMacIndex"))
if mibBuilder.loadTexts: staticMacEntry.setStatus('current')
staticMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: staticMacIndex.setStatus('current')
staticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacAddr.setStatus('current')
staticMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMacRowStatus.setStatus('current')
onuP2pTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13), )
if mibBuilder.loadTexts: onuP2pTable.setStatus('current')
onuP2pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"))
if mibBuilder.loadTexts: onuP2pEntry.setStatus('current')
onuP2pEnDis = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuP2pEnDis.setStatus('current')
onuP2pPonEnDis = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 65536, 65537))).clone(namedValues=NamedValues(("disdis", 0), ("disen", 1), ("endis", 65536), ("enen", 65537)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuP2pPonEnDis.setStatus('current')
fdOltConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20))
fdOltGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1))
oltBaseManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 1)).setObjects(("FD-OLT-MIB", "oltMacAddr"), ("FD-OLT-MIB", "oltWorkState"), ("FD-OLT-MIB", "oltEnable"), ("FD-OLT-MIB", "maxPermitLLIDNumber"), ("FD-OLT-MIB", "registeredLLIDNumber"), ("FD-OLT-MIB", "accessedOnuNumber"), ("FD-OLT-MIB", "oltUpgradeStat"), ("FD-OLT-MIB", "onuMgmtDefType"), ("FD-OLT-MIB", "oltOperate"), ("FD-OLT-MIB", "linkIdExhaust"), ("FD-OLT-MIB", "onuIdExhaust"), ("FD-OLT-MIB", "linkIdOverWrite"), ("FD-OLT-MIB", "onuIdOverWrite"), ("FD-OLT-MIB", "dynMacAgeTime"), ("FD-OLT-MIB", "downStreamResetAgeTimer"), ("FD-OLT-MIB", "bridgedVlanNumber"), ("FD-OLT-MIB", "macOverWrite"), ("FD-OLT-MIB", "discardUnknownMac"), ("FD-OLT-MIB", "forwardTagOnSimpleBridge"), ("FD-OLT-MIB", "level0Links"), ("FD-OLT-MIB", "level1Links"), ("FD-OLT-MIB", "level2Links"), ("FD-OLT-MIB", "nonDbaLinks"), ("FD-OLT-MIB", "l0DropDownWeight"), ("FD-OLT-MIB", "l1DropDownWeight"), ("FD-OLT-MIB", "l2DropDownWeight"), ("FD-OLT-MIB", "l0PollingRate"), ("FD-OLT-MIB", "l1PollingRate"), ("FD-OLT-MIB", "l2PollingRate"), ("FD-OLT-MIB", "aggreBandWidth"), ("FD-OLT-MIB", "aggreMaxBurstSize"), ("FD-OLT-MIB", "oltAclRuleData"), ("FD-OLT-MIB", "priCopyMapData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltBaseManageGroup = oltBaseManageGroup.setStatus('current')
oltAdvanceManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 2)).setObjects(("FD-OLT-MIB", "oltChipProCode"), ("FD-OLT-MIB", "oltChipVer"), ("FD-OLT-MIB", "oltChipFirmVer"), ("FD-OLT-MIB", "oltChipBootVer"), ("FD-OLT-MIB", "oltChipPersVer"), ("FD-OLT-MIB", "oltChipApp0Ver"), ("FD-OLT-MIB", "oltChipApp1Ver"), ("FD-OLT-MIB", "oltChipDiagVer"), ("FD-OLT-MIB", "minOamRate"), ("FD-OLT-MIB", "maxOamRate"), ("FD-OLT-MIB", "oamRspTimeout"), ("FD-OLT-MIB", "discoverPeriod"), ("FD-OLT-MIB", "discoverWindow"), ("FD-OLT-MIB", "discoverTimeoutVal"), ("FD-OLT-MIB", "oltAddiVlanEthType"), ("FD-OLT-MIB", "onuUltraLongDistanceTrans"), ("FD-OLT-MIB", "oltBroadCastRateCtl"), ("FD-OLT-MIB", "oltMultiCastRateCtl"), ("FD-OLT-MIB", "oltUnkUcCastRateCtl"), ("FD-OLT-MIB", "oltBroadCastRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltAdvanceManageGroup = oltAdvanceManageGroup.setStatus('current')
oltIgmpProxyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 3)).setObjects(("FD-OLT-MIB", "maxIgmpGroups"), ("FD-OLT-MIB", "robustCount"), ("FD-OLT-MIB", "queryInterval"), ("FD-OLT-MIB", "queryRspTimeout"), ("FD-OLT-MIB", "queryMaxResTime"), ("FD-OLT-MIB", "startQueryCount"), ("FD-OLT-MIB", "startupQueryInterval"), ("FD-OLT-MIB", "lastMemberQueryCount"), ("FD-OLT-MIB", "lastMemberQueryInterval"), ("FD-OLT-MIB", "lastMemberQueryResTime"), ("FD-OLT-MIB", "upstreamRetransCount"), ("FD-OLT-MIB", "upstreamRetransInterval"), ("FD-OLT-MIB", "igmpQueues"), ("FD-OLT-MIB", "igmpSlaMinGuaranteedBW"), ("FD-OLT-MIB", "igmpSlaMaxAllowedBW"), ("FD-OLT-MIB", "igmpSlaDelaySensitive"), ("FD-OLT-MIB", "igmpSlaMaxBurstSize"), ("FD-OLT-MIB", "igmpProxyOper"), ("FD-OLT-MIB", "igmpGroupVlan"), ("FD-OLT-MIB", "igmpGroupIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltIgmpProxyGroup = oltIgmpProxyGroup.setStatus('current')
oltPPPoEPlusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 4)).setObjects(("FD-OLT-MIB", "pppoePlusEnable"), ("FD-OLT-MIB", "dhcpOption82"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltPPPoEPlusGroup = oltPPPoEPlusGroup.setStatus('current')
oltLlidBaseManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 5)).setObjects(("FD-OLT-MIB", "llidAssigned"), ("FD-OLT-MIB", "associatedOnuId"), ("FD-OLT-MIB", "llidMac"), ("FD-OLT-MIB", "linkOnLineStatus"), ("FD-OLT-MIB", "keyChangeTimer"), ("FD-OLT-MIB", "llidBridgeType"), ("FD-OLT-MIB", "llidMacEntryLimit"), ("FD-OLT-MIB", "crossConnectLinkId"), ("FD-OLT-MIB", "llidOperation"), ("FD-OLT-MIB", "minGuaranteedBW"), ("FD-OLT-MIB", "maxAllowedBW"), ("FD-OLT-MIB", "delaySensitive"), ("FD-OLT-MIB", "maxBurstSize"), ("FD-OLT-MIB", "slaEnable"), ("FD-OLT-MIB", "dbaTokens"), ("FD-OLT-MIB", "schedulerMinTokens"), ("FD-OLT-MIB", "schedulerMaxTokens"), ("FD-OLT-MIB", "forceReport"), ("FD-OLT-MIB", "llidVlanRowStatus"), ("FD-OLT-MIB", "linkIDsInVlan"), ("FD-OLT-MIB", "netVlanId"), ("FD-OLT-MIB", "upstreamCos"), ("FD-OLT-MIB", "priSelector"), ("FD-OLT-MIB", "minPriValue"), ("FD-OLT-MIB", "maxPriValue"), ("FD-OLT-MIB", "transNonTosFrame"), ("FD-OLT-MIB", "priVlanRowStatus"), ("FD-OLT-MIB", "blockedLinkMac"), ("FD-OLT-MIB", "blockedMacOper"), ("FD-OLT-MIB", "dynMacOperation"), ("FD-OLT-MIB", "dynMacAddr"), ("FD-OLT-MIB", "staticMacAddr"), ("FD-OLT-MIB", "staticMacRowStatus"), ("FD-OLT-MIB", "multiMinGuanBW"), ("FD-OLT-MIB", "multiMaxAllowedBW"), ("FD-OLT-MIB", "multiDelaySensitive"), ("FD-OLT-MIB", "multiMaxBurstSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltLlidBaseManageGroup = oltLlidBaseManageGroup.setStatus('current')
oltLlidAdvanceManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 6)).setObjects(("FD-OLT-MIB", "maxLinkOamRate"), ("FD-OLT-MIB", "minLinkOamRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltLlidAdvanceManageGroup = oltLlidAdvanceManageGroup.setStatus('current')
onuP2pManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 7)).setObjects(("FD-OLT-MIB", "onuP2pEnDis"), ("FD-OLT-MIB", "onuP2pPonEnDis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    onuP2pManageGroup = onuP2pManageGroup.setStatus('current')
fdOltCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 2))
fdOltCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 2, 1)).setObjects(("FD-OLT-MIB", "oltBaseManageGroup"), ("FD-OLT-MIB", "oltIgmpProxyGroup"), ("FD-OLT-MIB", "oltPPPoEPlusGroup"), ("FD-OLT-MIB", "oltLlidBaseManageGroup"), ("FD-OLT-MIB", "onuP2pManageGroup"), ("FD-OLT-MIB", "oltAdvanceManageGroup"), ("FD-OLT-MIB", "oltLlidAdvanceManageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOltCompliance = fdOltCompliance.setStatus('current')
mibBuilder.exportSymbols("FD-OLT-MIB", blockedMacOper=blockedMacOper, oltLlidBaseManageGroup=oltLlidBaseManageGroup, registeredLLIDNumber=registeredLLIDNumber, llidMac=llidMac, oltChipInfoEntry=oltChipInfoEntry, forceReport=forceReport, dynMacOperEntry=dynMacOperEntry, oltBridgeConfigTable=oltBridgeConfigTable, oltChipApp0Ver=oltChipApp0Ver, oltId=oltId, staticMac=staticMac, igmpProxyOper=igmpProxyOper, minOamRate=minOamRate, oltChipVer=oltChipVer, oltAdvanceManageGroup=oltAdvanceManageGroup, aggreBandWidth=aggreBandWidth, staticMacAddr=staticMacAddr, upstreamRetransInterval=upstreamRetransInterval, fdOltGroups=fdOltGroups, oltMultiCastRateCtl=oltMultiCastRateCtl, priSelector=priSelector, l0DropDownWeight=l0DropDownWeight, staticMacEntry=staticMacEntry, oltIgmpProxy=oltIgmpProxy, llidBridgeType=llidBridgeType, accessUserIdentiferConfigEntry=accessUserIdentiferConfigEntry, priVlanRowStatus=priVlanRowStatus, dynMacTable=dynMacTable, dynMacEntry=dynMacEntry, blockedLinkMac=blockedLinkMac, igmpProxyConfigEntry=igmpProxyConfigEntry, directionId=directionId, multiMinGuanBW=multiMinGuanBW, staticMacIndex=staticMacIndex, minGuaranteedBW=minGuaranteedBW, llidOperation=llidOperation, oltIgmpProxyGroup=oltIgmpProxyGroup, discoverPeriod=discoverPeriod, staticMacTable=staticMacTable, dbaDropDownWeightEntry=dbaDropDownWeightEntry, crossConnectLinkId=crossConnectLinkId, l2PollingRate=l2PollingRate, queryMaxResTime=queryMaxResTime, oltBaseManageGroup=oltBaseManageGroup, oltChipApp1Ver=oltChipApp1Ver, level0Links=level0Links, igmpGroupTable=igmpGroupTable, linkOamRateEntry=linkOamRateEntry, oltLlidAdvanceManageGroup=oltLlidAdvanceManageGroup, llidVlanTag=llidVlanTag, linkIdOverWrite=linkIdOverWrite, vlanId=vlanId, oltChipFirmVer=oltChipFirmVer, oltAdvancedConfigTable=oltAdvancedConfigTable, dba=dba, dbaDropDownWeightTable=dbaDropDownWeightTable, sla=sla, priVlanEntry=priVlanEntry, startQueryCount=startQueryCount, blockedLinkEntry=blockedLinkEntry, discardUnknownMac=discardUnknownMac, aggreBandWidthEntry=aggreBandWidthEntry, accessUserIdentiferConfigTable=accessUserIdentiferConfigTable, slaWeightEntry=slaWeightEntry, igmpQueues=igmpQueues, netVlanId=netVlanId, oltOperate=oltOperate, oltBridgeConfigEntry=oltBridgeConfigEntry, igmpGroupVlan=igmpGroupVlan, onuP2pEntry=onuP2pEntry, vlanLlidEntry=vlanLlidEntry, discoveryParaTable=discoveryParaTable, macAddr=macAddr, level1Links=level1Links, staticMacRowStatus=staticMacRowStatus, upstreamRetransCount=upstreamRetransCount, keyChangeTimer=keyChangeTimer, multiDelaySensitive=multiDelaySensitive, lastMemberQueryResTime=lastMemberQueryResTime, maxPermitLLIDNumber=maxPermitLLIDNumber, oltChipInfoTable=oltChipInfoTable, PYSNMP_MODULE_ID=fdOlt, dbaPollRateEntry=dbaPollRateEntry, igmpProxyConfigTable=igmpProxyConfigTable, llidConfigTable=llidConfigTable, llidAdvancedManage=llidAdvancedManage, dynMacIndex=dynMacIndex, maxAllowedBW=maxAllowedBW, dynMacAgeTime=dynMacAgeTime, linkOnLineStatus=linkOnLineStatus, fdOlt=fdOlt, onuUltraLongDistanceTrans=onuUltraLongDistanceTrans, discoveryParaEntry=discoveryParaEntry, maxPriValue=maxPriValue, dbaTokens=dbaTokens, oltChipDiagVer=oltChipDiagVer, oamRspTimeout=oamRspTimeout, bridgedVlanNumber=bridgedVlanNumber, onuIdExhaust=onuIdExhaust, l2DropDownWeight=l2DropDownWeight, llid=llid, oltEnable=oltEnable, l1DropDownWeight=l1DropDownWeight, minPriValue=minPriValue, dynMacAddr=dynMacAddr, nonDbaLinks=nonDbaLinks, startupQueryInterval=startupQueryInterval, oltBroadCastRateCtl=oltBroadCastRateCtl, llidVlanCfgEntry=llidVlanCfgEntry, fdOltCompliances=fdOltCompliances, slaWeightTable=slaWeightTable, dynMacOperTable=dynMacOperTable, vlanLlidTable=vlanLlidTable, dhcpOption82=dhcpOption82, llidVlan=llidVlan, maxLinkOamRate=maxLinkOamRate, dynamicMac=dynamicMac, lastMemberQueryInterval=lastMemberQueryInterval, oltAddiVlanEthType=oltAddiVlanEthType, blockedLinkTable=blockedLinkTable, igmpGroupIndex=igmpGroupIndex, oltOamRateTable=oltOamRateTable, oltBroadCastRate=oltBroadCastRate, maxOamRate=maxOamRate, transNonTosFrame=transNonTosFrame, oltAdvancedManage=oltAdvancedManage, llidVlanRowStatus=llidVlanRowStatus, oltUnkUcCastRateCtl=oltUnkUcCastRateCtl, l0PollingRate=l0PollingRate, oltAclRuleTable=oltAclRuleTable, oltAclRuleData=oltAclRuleData, priCopyMapTable=priCopyMapTable, delaySensitive=delaySensitive, onuMgmtDefType=onuMgmtDefType, schedulerMaxTokens=schedulerMaxTokens, linkOamRateTable=linkOamRateTable, onuP2pTable=onuP2pTable, maxIgmpGroups=maxIgmpGroups, downStreamResetAgeTimer=downStreamResetAgeTimer, robustCount=robustCount, discoverWindow=discoverWindow, discoverTimeoutVal=discoverTimeoutVal, onuIdOverWrite=onuIdOverWrite, upstreamCos=upstreamCos, lastMemberQueryCount=lastMemberQueryCount, oltWorkState=oltWorkState, multicastSlaEntry=multicastSlaEntry, fdOltCompliance=fdOltCompliance, onuP2pPonEnDis=onuP2pPonEnDis, oltBaseManageEntry=oltBaseManageEntry, oltChipPersVer=oltChipPersVer, forwardTagOnSimpleBridge=forwardTagOnSimpleBridge, fdOltConformance=fdOltConformance, dynMacOperation=dynMacOperation, linkId=linkId, llidConfigEntry=llidConfigEntry, oltBaseManageTable=oltBaseManageTable, level2Links=level2Links, dbaPollRateTable=dbaPollRateTable, llidAssigned=llidAssigned, oltPPPoEPlusGroup=oltPPPoEPlusGroup, associatedOnuId=associatedOnuId, oltAclRuleEntry=oltAclRuleEntry, priCopyMapData=priCopyMapData, llidSlaEntry=llidSlaEntry, multiMaxBurstSize=multiMaxBurstSize, accessUserIdentifer=accessUserIdentifer, l1PollingRate=l1PollingRate, igmpSlaMaxAllowedBW=igmpSlaMaxAllowedBW, aggreBandWidthTable=aggreBandWidthTable, igmpSlaMaxBurstSize=igmpSlaMaxBurstSize, maxBurstSize=maxBurstSize, igmpSlaDelaySensitive=igmpSlaDelaySensitive, multiMaxAllowedBW=multiMaxAllowedBW, minLinkOamRate=minLinkOamRate, slaEnable=slaEnable, queryRspTimeout=queryRspTimeout, igmpGroupEntry=igmpGroupEntry, llidMacEntryLimit=llidMacEntryLimit, accessedOnuNumber=accessedOnuNumber, priVlanTable=priVlanTable, aggreMaxBurstSize=aggreMaxBurstSize, igmpSlaMinGuaranteedBW=igmpSlaMinGuaranteedBW, onuP2pManageGroup=onuP2pManageGroup, oltOamRateEntry=oltOamRateEntry, linkIdExhaust=linkIdExhaust, queryInterval=queryInterval, oltChipProCode=oltChipProCode, llidSlaTable=llidSlaTable, oltMacAddr=oltMacAddr, linkIDsInVlan=linkIDsInVlan, onuP2pEnDis=onuP2pEnDis, llidVlanCfgTable=llidVlanCfgTable, macOverWrite=macOverWrite, linkLevelSizeTable=linkLevelSizeTable, schedulerMinTokens=schedulerMinTokens, oltUpgradeStat=oltUpgradeStat, priCopyMapEntry=priCopyMapEntry, pppoePlusEnable=pppoePlusEnable, oltPortId=oltPortId, linkLevelSizeEntry=linkLevelSizeEntry, multicastSlaTable=multicastSlaTable, igmpGroupIpAddr=igmpGroupIpAddr, oltChipBootVer=oltChipBootVer, oltAdvancedConfigEntry=oltAdvancedConfigEntry)
