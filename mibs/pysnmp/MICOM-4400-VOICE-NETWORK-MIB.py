#
# PySNMP MIB module MICOM-4400-VOICE-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-4400-VOICE-NETWORK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:01:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Integer32, Counter64, Unsigned32, Gauge32, ObjectIdentity, Bits, ModuleIdentity, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Integer32", "Counter64", "Unsigned32", "Gauge32", "ObjectIdentity", "Bits", "ModuleIdentity", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_2vnet = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 21)).setLabel("micom-2vnet")
vnet_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1)).setLabel("vnet-configuration")
vnet_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 2)).setLabel("vnet-control")
vnet_status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3)).setLabel("vnet-status")
vnet_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4)).setLabel("vnet-statistics")
mcmVNETChCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 1), )
if mibBuilder.loadTexts: mcmVNETChCfgTable.setStatus('mandatory')
mcmVNETChCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 1, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgLimID"), (0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgChannelID"))
if mibBuilder.loadTexts: mcmVNETChCfgEntry.setStatus('mandatory')
mcmVNETChCfgLimID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChCfgLimID.setStatus('mandatory')
mcmVNETChCfgChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChCfgChannelID.setStatus('mandatory')
mcmVNETChCfgVoiceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETChCfgVoiceProfile.setStatus('mandatory')
mcmVNETChCfgSwitchingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETChCfgSwitchingProfile.setStatus('mandatory')
mcmVNETChCfgInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("not-available", 1), ("enhanced-loop-start-FXS", 2), ("enhanced-EandM", 3), ("enhanced-loop-start-FXO", 4), ("low-cost-loop-start-FXS", 5), ("low-cost-EandM", 6), ("low-cost-loop-start-FXO", 7), ("ground-start-FXS", 8), ("ground-start-FXO", 9), ("three-port", 10), ("dvm", 11), ("bri", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChCfgInterfaceType.setStatus('mandatory')
mcmVNETProfileCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2), )
if mibBuilder.loadTexts: mcmVNETProfileCfgTable.setStatus('mandatory')
mcmVNETProfileCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETProfileCfgProfileNum"))
if mibBuilder.loadTexts: mcmVNETProfileCfgEntry.setStatus('mandatory')
mcmVNETProfileCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETProfileCfgProfileNum.setStatus('mandatory')
mcmVNETProfileCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voiceFax", 1), ("voiceOnly", 2))).clone('voiceFax')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgMode.setStatus('mandatory')
mcmVNETProfileCfgDigitizingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rateG729", 1), ("rateG729-8K-40MS", 2))).clone('rateG729')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgDigitizingRate.setStatus('mandatory')
mcmVNETProfileCfgInputLevelGain = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgInputLevelGain.setStatus('mandatory')
mcmVNETProfileCfgOutputLevelAttn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgOutputLevelAttn.setStatus('mandatory')
mcmVNETProfileCfgBusyOutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("systemControlled", 1), ("forceOn", 2), ("forceOff", 3))).clone('systemControlled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgBusyOutMode.setStatus('mandatory')
mcmVNETProfileCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voiceActivated", 1), ("continuous", 2))).clone('voiceActivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgBandwidth.setStatus('mandatory')
mcmVNETProfileCfgBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regenerated", 1), ("silence", 2))).clone('regenerated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgBackground.setStatus('mandatory')
mcmVNETProfileCfgBRIPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pulses10PerSec", 1), ("pulses20PerSec", 2), ("pulses125PerSec", 3))).clone('pulses10PerSec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgBRIPulseRate.setStatus('obsolete')
mcmVNETProfileCfgEMSigFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dc", 1), ("tone2280", 2), ("pulsedDC", 3), ("winkStart", 4))).clone('dc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgEMSigFormat.setStatus('mandatory')
mcmVNETProfileCfgFXSSigFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("repeatedRing", 1), ("interruptedRing", 2))).clone('interruptedRing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgFXSSigFormat.setStatus('mandatory')
mcmVNETProfileCfgDVMSigFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("tieTrunk", 1), ("tieInvert", 2), ("tone2280", 3), ("clearChannel", 4), ("dC5B", 5), ("dC5BInvert", 6), ("r2PUNCOM", 7), ("r2Q421", 8), ("dC5RonTron", 9), ("israelCAS", 10), ("spainCAS", 11), ("winkStart", 12))).clone('tieTrunk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgDVMSigFormat.setStatus('mandatory')
mcmVNETProfileCfgNumberOfRings = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgNumberOfRings.setStatus('mandatory')
mcmVNETProfileCfgEMAnalOper = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoWire", 1), ("fourWire", 2))).clone('fourWire')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgEMAnalOper.setStatus('mandatory')
mcmVNETProfileCfgRingingFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq25Hz", 1), ("freq50Hz", 2))).clone('freq25Hz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgRingingFreq.setStatus('mandatory')
mcmVNETProfileCfgFaxDigRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("voiceRate", 1), ("rate2400", 2), ("rate4800", 3), ("rate7200", 4), ("rate9600", 5))).clone('voiceRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgFaxDigRate.setStatus('mandatory')
mcmVNETProfileCfgDiscSupervision = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tone", 1), ("powerInterrupt", 2))).clone('tone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgDiscSupervision.setStatus('mandatory')
mcmVNETProfileCfgLineImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("impedance600Ohms", 1), ("complex", 2))).clone('impedance600Ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgLineImpedance.setStatus('mandatory')
mcmVNETProfileCfgMaxOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("zerodBMNominal", 1), ("plus7dBM", 2))).clone('zerodBMNominal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgMaxOutputLevel.setStatus('mandatory')
mcmVNETProfileCfgRegenDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgRegenDelay.setStatus('mandatory')
mcmVNETProfileCfgDialDigTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgDialDigTimeLimit.setStatus('mandatory')
mcmVNETProfileCfgMaxNumForDig = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgMaxNumForDig.setStatus('mandatory')
mcmVNETProfileCfgRegenFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dialPulse", 1), ("dtmf", 2))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgRegenFormat.setStatus('mandatory')
mcmVNETProfileCfgCallProgTone = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("northAmerica", 1), ("japan", 2), ("unitedKingdom", 3), ("europe", 4), ("france", 5), ("centralAmerica", 6), ("chile", 7), ("australia", 8))).clone('northAmerica')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgCallProgTone.setStatus('mandatory')
mcmVNETProfileCfgDTMFDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgDTMFDetector.setStatus('mandatory')
mcmVNETProfileCfgJitters = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgJitters.setStatus('mandatory')
mcmVNETProfileCfgEchoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgEchoCanceller.setStatus('mandatory')
mcmVNETProfileCfgAutoGainControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgAutoGainControl.setStatus('mandatory')
mcmVNETProfileCfgCompanderFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uLaw", 1), ("aLaw", 2))).clone('uLaw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgCompanderFormat.setStatus('mandatory')
mcmVNETProfileCfgPremiumVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable-compress", 1), ("enable-notcompress", 2))).clone('disable-compress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgPremiumVoice.setStatus('mandatory')
mcmVNETProfileCfgEndOfDialChar = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgEndOfDialChar.setStatus('mandatory')
mcmVNETProfileCfgBckGrndNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("neg25dbm0", 1), ("neg30dbm0", 2), ("neg35dbm0", 3), ("neg40dbm0", 4), ("neg45dbm0", 5))).clone('neg30dbm0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgBckGrndNoiseLevel.setStatus('mandatory')
mcmVNETProfileCfgSilenceHngOvrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("msec100", 1), ("msec200", 2), ("msec300", 3), ("msec400", 4), ("msec500", 5), ("msec600", 6), ("msec700", 7), ("msec800", 8))).clone('msec300')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgSilenceHngOvrTime.setStatus('mandatory')
mcmVNETProfileCfgIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgIdlePattern.setStatus('mandatory')
mcmVNETProfileCfgEcanFilterLength = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("length128", 1), ("length256", 2))).clone('length256')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgEcanFilterLength.setStatus('mandatory')
mcmVNETProfileCfgEcanErlImprovement = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgEcanErlImprovement.setStatus('mandatory')
mcmVNETProfileCfgNoiseFloorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgNoiseFloorOffset.setStatus('mandatory')
mcmVNETProfileCfgDtmfGenBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("time50msec", 1), ("time60msec", 2), ("time70msec", 3), ("time100msec", 4))).clone('time100msec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgDtmfGenBurstLength.setStatus('mandatory')
mcmVNETProfileCfgDtmRegenBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("time50msec", 1), ("time60msec", 2), ("time70msec", 3), ("time100msec", 4))).clone('time100msec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETProfileCfgDtmRegenBurstLength.setStatus('mandatory')
mcmVNETSwProfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3), )
if mibBuilder.loadTexts: mcmVNETSwProfCfgTable.setStatus('mandatory')
mcmVNETSwProfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETSwProfCfgProfileNum"))
if mibBuilder.loadTexts: mcmVNETSwProfCfgEntry.setStatus('mandatory')
mcmVNETSwProfCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETSwProfCfgProfileNum.setStatus('mandatory')
mcmVNETSwProfCfgOutCallRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noRestriction", 1), ("closedUserGroupCall", 2), ("restrictionClassCall", 3), ("bothCUGandRCCall", 4), ("inhibitAll", 5))).clone('noRestriction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgOutCallRestrict.setStatus('mandatory')
mcmVNETSwProfCfgInCallRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noRestriction", 1), ("checkCUGID", 2), ("checkRestrictionClassCode", 3), ("cUGandPublicClassInhibit", 4), ("inhibitAll", 5))).clone('noRestriction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgInCallRestrict.setStatus('mandatory')
mcmVNETSwProfCfgCUGID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgCUGID.setStatus('mandatory')
mcmVNETSwProfCfgRestrictClassCd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgRestrictClassCd.setStatus('mandatory')
mcmVNETSwProfCfgAutoCallEntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgAutoCallEntNum.setStatus('mandatory')
mcmVNETSwProfCfgCallNegStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("specific", 1), ("bandwidth", 2), ("delay", 3))).clone('specific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgCallNegStrategy.setStatus('mandatory')
mcmVNETSwProfCfgTransmitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgTransmitPriority.setStatus('mandatory')
mcmVNETSwProfCfgAutoCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("masterHootnHoller", 2), ("slaveHootnHoller", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgAutoCallType.setStatus('mandatory')
mcmVNETSwProfCfgAddServerSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nas", 1), ("vncs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgAddServerSelect.setStatus('mandatory')
mcmVNETSwProfCfgOutCallMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enblock-only", 1), ("dynamic", 2))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETSwProfCfgOutCallMode.setStatus('mandatory')
mcmVNETIngressDigFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 4), )
if mibBuilder.loadTexts: mcmVNETIngressDigFilterTable.setStatus('mandatory')
mcmVNETIngressDigFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 4, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETIngressDigFilterIndex"))
if mibBuilder.loadTexts: mcmVNETIngressDigFilterEntry.setStatus('mandatory')
mcmVNETIngressDigFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETIngressDigFilterIndex.setStatus('mandatory')
mcmVNETIngressDigFilterIngressNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETIngressDigFilterIngressNum.setStatus('mandatory')
mcmVNETIngressDigFilterManipString = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone('#')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETIngressDigFilterManipString.setStatus('mandatory')
mcmVNETEgressDigManipTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 5), )
if mibBuilder.loadTexts: mcmVNETEgressDigManipTable.setStatus('mandatory')
mcmVNETEgressDigManipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 5, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETEgressDigManipIndex"))
if mibBuilder.loadTexts: mcmVNETEgressDigManipEntry.setStatus('mandatory')
mcmVNETEgressDigManipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETEgressDigManipIndex.setStatus('mandatory')
mcmVNETEgressDigManipPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETEgressDigManipPhoneNum.setStatus('mandatory')
mcmVNETEgressDigManipString = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETEgressDigManipString.setStatus('mandatory')
mcmVNETEgressDigManipChIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmVNETEgressDigManipChIDList.setStatus('mandatory')
nvmVNETChCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 6), )
if mibBuilder.loadTexts: nvmVNETChCfgTable.setStatus('mandatory')
nvmVNETChCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 6, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "nvmVNETChCfgLimID"), (0, "MICOM-4400-VOICE-NETWORK-MIB", "nvmVNETChCfgChannelID"))
if mibBuilder.loadTexts: nvmVNETChCfgEntry.setStatus('mandatory')
nvmVNETChCfgLimID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETChCfgLimID.setStatus('mandatory')
nvmVNETChCfgChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETChCfgChannelID.setStatus('mandatory')
nvmVNETChCfgVoiceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETChCfgVoiceProfile.setStatus('mandatory')
nvmVNETChCfgSwitchingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETChCfgSwitchingProfile.setStatus('mandatory')
nvmVNETChCfgInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("not-available", 1), ("enhanced-loop-start-FXS", 2), ("enhanced-EandM", 3), ("enhanced-loop-start-FXO", 4), ("low-cost-loop-start-FXS", 5), ("low-cost-EandM", 6), ("low-cost-loop-start-FXO", 7), ("ground-start-FXS", 8), ("ground-start-FXO", 9), ("three-port", 10), ("dvm", 11), ("bri", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETChCfgInterfaceType.setStatus('mandatory')
nvmVNETProfileCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7), )
if mibBuilder.loadTexts: nvmVNETProfileCfgTable.setStatus('mandatory')
nvmVNETProfileCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "nvmVNETProfileCfgProfileNum"))
if mibBuilder.loadTexts: nvmVNETProfileCfgEntry.setStatus('mandatory')
nvmVNETProfileCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgProfileNum.setStatus('mandatory')
nvmVNETProfileCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voiceFax", 1), ("voiceOnly", 2))).clone('voiceFax')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgMode.setStatus('mandatory')
nvmVNETProfileCfgDigitizingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rateG729", 1), ("rateG729-8k-40ms", 2))).clone('rateG729')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgDigitizingRate.setStatus('mandatory')
nvmVNETProfileCfgInputLevelGain = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgInputLevelGain.setStatus('mandatory')
nvmVNETProfileCfgOutputLevelAttn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgOutputLevelAttn.setStatus('mandatory')
nvmVNETProfileCfgBusyOutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("systemControlled", 1), ("forceOn", 2), ("forceOff", 3))).clone('systemControlled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgBusyOutMode.setStatus('mandatory')
nvmVNETProfileCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voiceActivated", 1), ("continuous", 2))).clone('voiceActivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgBandwidth.setStatus('mandatory')
nvmVNETProfileCfgBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regenerated", 1), ("silence", 2))).clone('regenerated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgBackground.setStatus('mandatory')
nvmVNETProfileCfgBRIPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pulses10PerSec", 1), ("pulses20PerSec", 2), ("pulses125PerSec", 3))).clone('pulses10PerSec')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgBRIPulseRate.setStatus('obsolete')
nvmVNETProfileCfgEMSigFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dc", 1), ("tone2280", 2), ("pulsedDC", 3), ("winkStart", 4))).clone('dc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgEMSigFormat.setStatus('mandatory')
nvmVNETProfileCfgFXSSigFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("repeatedRing", 1), ("interruptedRing", 2))).clone('interruptedRing')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgFXSSigFormat.setStatus('mandatory')
nvmVNETProfileCfgDVMSigFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("tieTrunk", 1), ("tieInvert", 2), ("tone2280", 3), ("clearChannel", 4), ("dC5B", 5), ("dC5BInvert", 6), ("r2PUNCOM", 7), ("r2Q421", 8), ("dC5RonTron", 9), ("israelCAS", 10), ("spainCAS", 11), ("winkStart", 12))).clone('tieTrunk')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgDVMSigFormat.setStatus('mandatory')
nvmVNETProfileCfgNumberOfRings = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgNumberOfRings.setStatus('mandatory')
nvmVNETProfileCfgEMAnalOper = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoWire", 1), ("fourWire", 2))).clone('fourWire')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgEMAnalOper.setStatus('mandatory')
nvmVNETProfileCfgRingingFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq25Hz", 1), ("freq50Hz", 2))).clone('freq25Hz')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgRingingFreq.setStatus('mandatory')
nvmVNETProfileCfgFaxDigRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("voiceRate", 1), ("rate2400", 2), ("rate4800", 3), ("rate7200", 4), ("rate9600", 5))).clone('voiceRate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgFaxDigRate.setStatus('mandatory')
nvmVNETProfileCfgDiscSupervision = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tone", 1), ("powerInterrupt", 2))).clone('tone')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgDiscSupervision.setStatus('mandatory')
nvmVNETProfileCfgLineImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("impedance600Ohms", 1), ("complex", 2))).clone('impedance600Ohms')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgLineImpedance.setStatus('mandatory')
nvmVNETProfileCfgMaxOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("zerodBMNominal", 1), ("plus7dBM", 2))).clone('zerodBMNominal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgMaxOutputLevel.setStatus('mandatory')
nvmVNETProfileCfgRegenDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgRegenDelay.setStatus('mandatory')
nvmVNETProfileCfgDialDigTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgDialDigTimeLimit.setStatus('mandatory')
nvmVNETProfileCfgMaxNumForDig = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgMaxNumForDig.setStatus('mandatory')
nvmVNETProfileCfgRegenFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dialPulse", 1), ("dtmf", 2))).clone('dtmf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgRegenFormat.setStatus('mandatory')
nvmVNETProfileCfgCallProgTone = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("northAmerica", 1), ("japan", 2), ("unitedKingdom", 3), ("europe-germany", 4), ("france", 5), ("centralAmerica", 6), ("chile", 7), ("australia", 8))).clone('northAmerica')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgCallProgTone.setStatus('mandatory')
nvmVNETProfileCfgDTMFDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgDTMFDetector.setStatus('mandatory')
nvmVNETProfileCfgJitters = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgJitters.setStatus('mandatory')
nvmVNETProfileCfgEchoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgEchoCanceller.setStatus('mandatory')
nvmVNETProfileCfgAutoGainControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgAutoGainControl.setStatus('mandatory')
nvmVNETProfileCfgCompanderFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uLaw", 1), ("aLaw", 2))).clone('uLaw')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgCompanderFormat.setStatus('mandatory')
nvmVNETProfileCfgPremiumVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable-compress", 1), ("enable-notcompress", 2))).clone('disable-compress')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgPremiumVoice.setStatus('mandatory')
nvmVNETProfileCfgEndOfDialChar = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgEndOfDialChar.setStatus('mandatory')
nvmVNETProfileCfgBckGrndNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("neg25dbm0", 1), ("neg30dbm0", 2), ("neg35dbm0", 3), ("neg40dbm0", 4), ("neg45dbm0", 5))).clone('neg30dbm0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgBckGrndNoiseLevel.setStatus('mandatory')
nvmVNETProfileCfgSilenceHngOvrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("msec100", 1), ("msec200", 2), ("msec300", 3), ("msec400", 4), ("msec500", 5), ("msec600", 6), ("msec700", 7), ("msec800", 8))).clone('msec300')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgSilenceHngOvrTime.setStatus('mandatory')
nvmVNETProfileCfgIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgIdlePattern.setStatus('mandatory')
nvmVNETProfileCfgEcanFilterLength = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("length128", 1), ("length256", 2))).clone(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgEcanFilterLength.setStatus('mandatory')
nvmVNETProfileCfgEcanErlImprovement = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgEcanErlImprovement.setStatus('mandatory')
nvmVNETProfileCfgNoiseFloorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgNoiseFloorOffset.setStatus('mandatory')
nvmVNETProfileCfgDtmfGenBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("time50msec", 1), ("time60msec", 2), ("time70msec", 3), ("time100msec", 4))).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgDtmfGenBurstLength.setStatus('mandatory')
nvmVNETProfileCfgDtmRegenBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 7, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("time50msec", 1), ("time60msec", 2), ("time70msec", 3), ("time100msec", 4))).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETProfileCfgDtmRegenBurstLength.setStatus('mandatory')
nvmVNETSwProfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8), )
if mibBuilder.loadTexts: nvmVNETSwProfCfgTable.setStatus('mandatory')
nvmVNETSwProfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "nvmVNETSwProfCfgProfileNum"))
if mibBuilder.loadTexts: nvmVNETSwProfCfgEntry.setStatus('mandatory')
nvmVNETSwProfCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgProfileNum.setStatus('mandatory')
nvmVNETSwProfCfgOutCallRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noRestriction", 1), ("closedUserGroupCall", 2), ("restrictionClassCall", 3), ("bothCUGandRCCall", 4), ("inhibitAll", 5))).clone('noRestriction')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgOutCallRestrict.setStatus('mandatory')
nvmVNETSwProfCfgInCallRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noRestriction", 1), ("checkCUGID", 2), ("checkRestrictionClassCode", 3), ("cUGandPublicClassInhibit", 4), ("inhibitAll", 5))).clone('noRestriction')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgInCallRestrict.setStatus('mandatory')
nvmVNETSwProfCfgCUGID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgCUGID.setStatus('mandatory')
nvmVNETSwProfCfgRestrictClassCd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgRestrictClassCd.setStatus('mandatory')
nvmVNETSwProfCfgAutoCallEntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgAutoCallEntNum.setStatus('mandatory')
nvmVNETSwProfCfgCallNegStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("specific", 1), ("bandwidth", 2), ("delay", 3))).clone('specific')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgCallNegStrategy.setStatus('mandatory')
nvmVNETSwProfCfgTransmitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgTransmitPriority.setStatus('mandatory')
nvmVNETSwProfCfgAutoCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("masterHootnHoller", 2), ("slaveHootnHoller", 3))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgAutoCallType.setStatus('mandatory')
nvmVNETSwProfCfgAddServerSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nas", 1), ("vncs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgAddServerSelect.setStatus('mandatory')
nvmVNETSwProfCfgOutCallMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enblock-only", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETSwProfCfgOutCallMode.setStatus('mandatory')
nvmVNETIngressDigFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 9), )
if mibBuilder.loadTexts: nvmVNETIngressDigFilterTable.setStatus('mandatory')
nvmVNETIngressDigFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 9, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "nvmVNETIngressDigFilterIndex"))
if mibBuilder.loadTexts: nvmVNETIngressDigFilterEntry.setStatus('mandatory')
nvmVNETIngressDigFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETIngressDigFilterIndex.setStatus('mandatory')
nvmVNETIngressDigFilterIngressNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETIngressDigFilterIngressNum.setStatus('mandatory')
nvmVNETIngressDigFilterManipString = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone('#')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETIngressDigFilterManipString.setStatus('mandatory')
nvmVNETEgressDigManipTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 10), )
if mibBuilder.loadTexts: nvmVNETEgressDigManipTable.setStatus('mandatory')
nvmVNETEgressDigManipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 10, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "nvmVNETEgressDigManipIndex"))
if mibBuilder.loadTexts: nvmVNETEgressDigManipEntry.setStatus('mandatory')
nvmVNETEgressDigManipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETEgressDigManipIndex.setStatus('mandatory')
nvmVNETEgressDigManipPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETEgressDigManipPhoneNum.setStatus('mandatory')
nvmVNETEgressDigManipString = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETEgressDigManipString.setStatus('mandatory')
nvmVNETEgressDigManipChIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmVNETEgressDigManipChIDList.setStatus('mandatory')
mcmVNETChStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1), )
if mibBuilder.loadTexts: mcmVNETChStatusTable.setStatus('mandatory')
mcmVNETChStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChStatusLimID"), (0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChStatusChannelID"))
if mibBuilder.loadTexts: mcmVNETChStatusEntry.setStatus('mandatory')
mcmVNETChStatusLimID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusLimID.setStatus('mandatory')
mcmVNETChStatusChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusChannelID.setStatus('mandatory')
mcmVNETChStatusInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("not-available", 1), ("enhanced-loop-start-FXS", 2), ("enhanced-EandM", 3), ("enhanced-loop-start-FXO", 4), ("low-cost-loop-start-FXS", 5), ("low-cost-EandM", 6), ("low-cost-loop-start-FXO", 7), ("ground-start-FXS", 8), ("ground-start-FXO", 9), ("three-port", 10), ("dvm", 11), ("bri", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusInterfaceType.setStatus('mandatory')
mcmVNETChStatusInterfaceSwID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusInterfaceSwID.setStatus('mandatory')
mcmVNETChStatusEMType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("typeI", 1), ("typeII", 2), ("typeIII", 3), ("typeIV", 4), ("typeV", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusEMType.setStatus('mandatory')
mcmVNETChStatusModelID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusModelID.setStatus('mandatory')
mcmVNETChStatusDSPOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("dead", 1), ("notReady", 2), ("downloadFailure", 3), ("forceConnected", 4), ("forceConnected-TimedOut", 5), ("idle", 6), ("switchConnectInProgress", 7), ("switchConnected", 8), ("switchDisconnectInProgress", 9), ("busyOut", 10), ("codeDownloadInProgress", 11), ("pcmChannelNotInstalled", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusDSPOperation.setStatus('mandatory')
mcmVNETChStatusNetworkConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("callInProgress", 2), ("locallyConnected", 3), ("remotelyConnected", 4), ("disconnectInProgress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusNetworkConnect.setStatus('mandatory')
mcmVNETChStatusRemoteChHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteChHwType.setStatus('mandatory')
mcmVNETChStatusRemoteChNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteChNodeName.setStatus('mandatory')
mcmVNETChStatusRemoteChNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteChNum.setStatus('mandatory')
mcmVNETChStatusRemoteChIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteChIfType.setStatus('mandatory')
mcmVNETChStatusRemoteFrameIfVer = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteFrameIfVer.setStatus('mandatory')
mcmVNETChStatusRemoteChVoiceAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteChVoiceAlg.setStatus('mandatory')
mcmVNETChStatusRemoteChFaxAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteChFaxAlg.setStatus('mandatory')
mcmVNETChStatusRemoteChModemAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusRemoteChModemAlg.setStatus('mandatory')
mcmVNETChStatusSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testPassed", 1), ("testFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusSelfTestResult.setStatus('mandatory')
mcmVNETChStatusFlashEPROM = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notInstalled", 1), ("valid", 2), ("erased", 3), ("invalidChecksum", 4), ("noAnalogInterfaceDriver", 5), ("securityViolation", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusFlashEPROM.setStatus('mandatory')
mcmVNETChStatusEPROM = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("currentlyOperating", 2), ("presentButNotOperating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusEPROM.setStatus('mandatory')
mcmVNETChStatusDspPROMVer = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusDspPROMVer.setStatus('mandatory')
mcmVNETChStatusPROMID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusPROMID.setStatus('mandatory')
mcmVNETChStatusInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("lessThanNeg25dBm", 1), ("neg24dBm", 2), ("neg21dBm", 3), ("neg18dBm", 4), ("neg15dBm", 5), ("neg12dBm", 6), ("neg10dBm", 7), ("neg8dBm", 8), ("neg6dBm", 9), ("neg5dBm", 10), ("neg4dBm", 11), ("neg3dBm", 12), ("neg2dBm", 13), ("neg1dBm", 14), ("zerodBm", 15), ("greaterThan0dBm", 16), ("notApplicable", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatusInputLevel.setStatus('mandatory')
voiceSysStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 2))
voiceSysStatusPhoneRegistrationStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("registrationComplete", 1), ("registrationInProgress", 2), ("nasAddressNotConfigured", 3), ("lostCommunicationWithNAS", 4), ("noResponseFromNAS", 5), ("registrationFailed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceSysStatusPhoneRegistrationStatus.setStatus('mandatory')
mcmVNETChStatsTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1), )
if mibBuilder.loadTexts: mcmVNETChStatsTable.setStatus('mandatory')
mcmVNETChStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChStatsLimID"), (0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChStatsChannelID"))
if mibBuilder.loadTexts: mcmVNETChStatsEntry.setStatus('mandatory')
mcmVNETChStatsLimID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsLimID.setStatus('mandatory')
mcmVNETChStatsChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsChannelID.setStatus('mandatory')
mcmVNETChStatsOutCallConnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsOutCallConnTime.setStatus('mandatory')
mcmVNETChStatsInCallConnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsInCallConnTime.setStatus('mandatory')
mcmVNETChStatsOutCallsSucceded = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsOutCallsSucceded.setStatus('mandatory')
mcmVNETChStatsOutCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsOutCallsFailed.setStatus('mandatory')
mcmVNETChStatsInCallsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsInCallsAccepted.setStatus('mandatory')
mcmVNETChStatsInCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsInCallsRejected.setStatus('mandatory')
mcmVNETChStatsNumberOfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsNumberOfResets.setStatus('mandatory')
mcmVNETChStatsNumberOfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsNumberOfRetries.setStatus('mandatory')
mcmVNETChStatsBBCFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsBBCFramesRcvd.setStatus('mandatory')
mcmVNETChStatsBEOFFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsBEOFFramesRcvd.setStatus('mandatory')
mcmVNETChStatsLostSpeechFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsLostSpeechFrames.setStatus('mandatory')
mcmVNETChStatsLostControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsLostControlFrames.setStatus('mandatory')
mcmVNETChStatsInvalPayloadFrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsInvalPayloadFrRcvd.setStatus('mandatory')
mcmVNETChStatsInvalPUMPMsgRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChStatsInvalPUMPMsgRcvd.setStatus('mandatory')
mcmVNETNetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2))
mcmVNETNetStatsSucceedOutSVCCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsSucceedOutSVCCalls.setStatus('mandatory')
mcmVNETNetStatsFailedOutSVCCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsFailedOutSVCCalls.setStatus('mandatory')
mcmVNETNetStatsAcceptedInCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsAcceptedInCalls.setStatus('mandatory')
mcmVNETNetStatsRejectedInCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsRejectedInCalls.setStatus('mandatory')
mcmVNETNetStatsSucceedDNARequests = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsSucceedDNARequests.setStatus('mandatory')
mcmVNETNetStatsFailedDNARequests = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsFailedDNARequests.setStatus('mandatory')
mcmVNETNetStatsFailedBuffAllocations = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsFailedBuffAllocations.setStatus('mandatory')
mcmVNETNetStatsNumActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 4, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETNetStatsNumActiveCalls.setStatus('mandatory')
mcmVNETChControlTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 2, 1), )
if mibBuilder.loadTexts: mcmVNETChControlTable.setStatus('mandatory')
mcmVNETChControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 2, 1, 1), ).setIndexNames((0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChControlLimID"), (0, "MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChControlChannelID"))
if mibBuilder.loadTexts: mcmVNETChControlEntry.setStatus('mandatory')
mcmVNETChControlLimID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChControlLimID.setStatus('mandatory')
mcmVNETChControlChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmVNETChControlChannelID.setStatus('mandatory')
mcmVNETChControlActionCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("resetChannel", 1), ("clearChannelCounters", 2), ("codeDownload", 3), ("disconnect", 4), ("loopbackTest", 5), ("terminateTests", 6), ("forceConnect", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmVNETChControlActionCmd.setStatus('mandatory')
mcmVNETSysControlActionCmd = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 21, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("clearNetworkCounters", 1), ("resetChannels", 2), ("clearChannelCounters", 3), ("download", 4), ("disconnect", 5), ("loopbackTests", 6), ("terminateTests", 7), ("forceConnects", 8), ("reRegisterPhoneNum", 9)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmVNETSysControlActionCmd.setStatus('mandatory')
mcmVNETDownloadFail = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgLimID"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgChannelID"))
mcmVNETOutOfOrder = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgLimID"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgChannelID"))
mcmVNETOutOfOrderRecovered = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgLimID"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgChannelID"))
mcmVNETFailedToSyncUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgLimID"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgChannelID"))
mcmVNETFailedToSyncUpRecovered = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,5)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgLimID"), ("MICOM-4400-VOICE-NETWORK-MIB", "mcmVNETChCfgChannelID"))
mcmVNETNoCVMCodeImage = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,6)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmVNETNoTUVMCodeImage = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,7)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmVNETNoDVMCodeImage = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 21) + (0,8)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mibBuilder.exportSymbols("MICOM-4400-VOICE-NETWORK-MIB", nvmVNETProfileCfgRingingFreq=nvmVNETProfileCfgRingingFreq, voiceSysStatusPhoneRegistrationStatus=voiceSysStatusPhoneRegistrationStatus, nvmVNETProfileCfgMaxNumForDig=nvmVNETProfileCfgMaxNumForDig, mcmVNETSysControlActionCmd=mcmVNETSysControlActionCmd, mcmVNETEgressDigManipPhoneNum=mcmVNETEgressDigManipPhoneNum, mcmVNETSwProfCfgEntry=mcmVNETSwProfCfgEntry, nvmVNETEgressDigManipChIDList=nvmVNETEgressDigManipChIDList, nvmVNETProfileCfgBusyOutMode=nvmVNETProfileCfgBusyOutMode, mcmVNETSwProfCfgAutoCallType=mcmVNETSwProfCfgAutoCallType, nvmVNETProfileCfgSilenceHngOvrTime=nvmVNETProfileCfgSilenceHngOvrTime, nvmVNETProfileCfgBackground=nvmVNETProfileCfgBackground, mcmVNETNetStatsGroup=mcmVNETNetStatsGroup, mcmVNETChControlActionCmd=mcmVNETChControlActionCmd, mcmVNETChStatusTable=mcmVNETChStatusTable, mcmVNETProfileCfgMaxNumForDig=mcmVNETProfileCfgMaxNumForDig, nvmVNETProfileCfgDiscSupervision=nvmVNETProfileCfgDiscSupervision, mcmVNETChStatsInCallsRejected=mcmVNETChStatsInCallsRejected, nvmVNETSwProfCfgInCallRestrict=nvmVNETSwProfCfgInCallRestrict, nvmVNETSwProfCfgRestrictClassCd=nvmVNETSwProfCfgRestrictClassCd, mcmVNETNetStatsSucceedOutSVCCalls=mcmVNETNetStatsSucceedOutSVCCalls, mcmVNETEgressDigManipEntry=mcmVNETEgressDigManipEntry, nvmVNETSwProfCfgAutoCallType=nvmVNETSwProfCfgAutoCallType, mcmVNETProfileCfgCallProgTone=mcmVNETProfileCfgCallProgTone, nvmVNETSwProfCfgCallNegStrategy=nvmVNETSwProfCfgCallNegStrategy, nvmVNETProfileCfgEMSigFormat=nvmVNETProfileCfgEMSigFormat, nvmVNETProfileCfgDialDigTimeLimit=nvmVNETProfileCfgDialDigTimeLimit, nvmVNETSwProfCfgAutoCallEntNum=nvmVNETSwProfCfgAutoCallEntNum, mcmVNETProfileCfgRingingFreq=mcmVNETProfileCfgRingingFreq, mcmVNETChStatsNumberOfResets=mcmVNETChStatsNumberOfResets, nvmVNETProfileCfgBckGrndNoiseLevel=nvmVNETProfileCfgBckGrndNoiseLevel, nvmVNETProfileCfgEndOfDialChar=nvmVNETProfileCfgEndOfDialChar, nvmVNETProfileCfgDtmRegenBurstLength=nvmVNETProfileCfgDtmRegenBurstLength, mcmVNETProfileCfgInputLevelGain=mcmVNETProfileCfgInputLevelGain, micom_2vnet=micom_2vnet, mcmVNETProfileCfgBandwidth=mcmVNETProfileCfgBandwidth, mcmVNETChStatusModelID=mcmVNETChStatusModelID, mcmVNETChStatusPROMID=mcmVNETChStatusPROMID, nvmVNETSwProfCfgProfileNum=nvmVNETSwProfCfgProfileNum, mcmVNETIngressDigFilterManipString=mcmVNETIngressDigFilterManipString, mcmVNETChStatusInterfaceSwID=mcmVNETChStatusInterfaceSwID, nvmVNETProfileCfgEMAnalOper=nvmVNETProfileCfgEMAnalOper, mcmVNETProfileCfgDtmRegenBurstLength=mcmVNETProfileCfgDtmRegenBurstLength, mcmVNETChControlChannelID=mcmVNETChControlChannelID, mcmVNETNoCVMCodeImage=mcmVNETNoCVMCodeImage, nvmVNETEgressDigManipEntry=nvmVNETEgressDigManipEntry, mcmVNETProfileCfgBRIPulseRate=mcmVNETProfileCfgBRIPulseRate, mcmVNETProfileCfgRegenDelay=mcmVNETProfileCfgRegenDelay, mcmVNETProfileCfgBusyOutMode=mcmVNETProfileCfgBusyOutMode, mcmVNETEgressDigManipChIDList=mcmVNETEgressDigManipChIDList, mcmVNETOutOfOrderRecovered=mcmVNETOutOfOrderRecovered, nvmVNETProfileCfgDtmfGenBurstLength=nvmVNETProfileCfgDtmfGenBurstLength, mcmVNETEgressDigManipIndex=mcmVNETEgressDigManipIndex, nvmVNETSwProfCfgEntry=nvmVNETSwProfCfgEntry, mcmVNETProfileCfgBackground=mcmVNETProfileCfgBackground, mcmVNETProfileCfgDiscSupervision=mcmVNETProfileCfgDiscSupervision, mcmVNETChStatusRemoteChFaxAlg=mcmVNETChStatusRemoteChFaxAlg, mcmVNETProfileCfgEcanFilterLength=mcmVNETProfileCfgEcanFilterLength, mcmVNETChStatsOutCallConnTime=mcmVNETChStatsOutCallConnTime, nvmVNETSwProfCfgAddServerSelect=nvmVNETSwProfCfgAddServerSelect, mcmVNETIngressDigFilterEntry=mcmVNETIngressDigFilterEntry, mcmVNETProfileCfgDtmfGenBurstLength=mcmVNETProfileCfgDtmfGenBurstLength, mcmVNETIngressDigFilterTable=mcmVNETIngressDigFilterTable, nvmVNETProfileCfgDVMSigFormat=nvmVNETProfileCfgDVMSigFormat, nvmVNETProfileCfgDTMFDetector=nvmVNETProfileCfgDTMFDetector, nvmVNETProfileCfgDigitizingRate=nvmVNETProfileCfgDigitizingRate, nvmVNETProfileCfgCompanderFormat=nvmVNETProfileCfgCompanderFormat, vnet_statistics=vnet_statistics, mcmVNETNetStatsRejectedInCalls=mcmVNETNetStatsRejectedInCalls, mcmVNETNetStatsFailedBuffAllocations=mcmVNETNetStatsFailedBuffAllocations, mcmVNETChStatsLostSpeechFrames=mcmVNETChStatsLostSpeechFrames, nvmVNETProfileCfgFaxDigRate=nvmVNETProfileCfgFaxDigRate, nvmVNETProfileCfgPremiumVoice=nvmVNETProfileCfgPremiumVoice, mcmVNETSwProfCfgAddServerSelect=mcmVNETSwProfCfgAddServerSelect, nvmVNETProfileCfgEcanErlImprovement=nvmVNETProfileCfgEcanErlImprovement, mcmVNETChStatusRemoteChHwType=mcmVNETChStatusRemoteChHwType, mcmVNETChStatsChannelID=mcmVNETChStatsChannelID, mcmVNETProfileCfgEntry=mcmVNETProfileCfgEntry, mcmVNETChStatusNetworkConnect=mcmVNETChStatusNetworkConnect, mcmVNETChStatsTable=mcmVNETChStatsTable, nvmVNETSwProfCfgOutCallMode=nvmVNETSwProfCfgOutCallMode, nvmVNETEgressDigManipIndex=nvmVNETEgressDigManipIndex, nvmVNETProfileCfgRegenDelay=nvmVNETProfileCfgRegenDelay, nvmVNETChCfgEntry=nvmVNETChCfgEntry, mcmVNETNetStatsNumActiveCalls=mcmVNETNetStatsNumActiveCalls, nvmVNETIngressDigFilterIndex=nvmVNETIngressDigFilterIndex, mcmVNETEgressDigManipString=mcmVNETEgressDigManipString, mcmVNETDownloadFail=mcmVNETDownloadFail, mcmVNETChStatusLimID=mcmVNETChStatusLimID, mcmVNETChStatsInCallsAccepted=mcmVNETChStatsInCallsAccepted, mcmVNETChStatusDspPROMVer=mcmVNETChStatusDspPROMVer, mcmVNETProfileCfgBckGrndNoiseLevel=mcmVNETProfileCfgBckGrndNoiseLevel, mcmVNETChCfgTable=mcmVNETChCfgTable, mcmVNETChStatusRemoteChNum=mcmVNETChStatusRemoteChNum, nvmVNETProfileCfgInputLevelGain=nvmVNETProfileCfgInputLevelGain, mcmVNETChStatsInCallConnTime=mcmVNETChStatsInCallConnTime, mcmVNETProfileCfgProfileNum=mcmVNETProfileCfgProfileNum, nvmVNETProfileCfgNoiseFloorOffset=nvmVNETProfileCfgNoiseFloorOffset, nvmVNETProfileCfgTable=nvmVNETProfileCfgTable, nvmVNETProfileCfgProfileNum=nvmVNETProfileCfgProfileNum, nvmVNETEgressDigManipPhoneNum=nvmVNETEgressDigManipPhoneNum, mcmVNETChStatusFlashEPROM=mcmVNETChStatusFlashEPROM, mcmVNETChControlLimID=mcmVNETChControlLimID, mcmVNETProfileCfgNumberOfRings=mcmVNETProfileCfgNumberOfRings, mcmVNETChControlEntry=mcmVNETChControlEntry, mcmVNETOutOfOrder=mcmVNETOutOfOrder, mcmVNETProfileCfgNoiseFloorOffset=mcmVNETProfileCfgNoiseFloorOffset, nvmVNETProfileCfgNumberOfRings=nvmVNETProfileCfgNumberOfRings, nvmVNETIngressDigFilterEntry=nvmVNETIngressDigFilterEntry, mcmVNETChStatusInterfaceType=mcmVNETChStatusInterfaceType, mcmVNETChControlTable=mcmVNETChControlTable, mcmVNETNoTUVMCodeImage=mcmVNETNoTUVMCodeImage, nvmVNETProfileCfgMode=nvmVNETProfileCfgMode, vnet_configuration=vnet_configuration, mcmVNETChStatusDSPOperation=mcmVNETChStatusDSPOperation, mcmVNETChStatsInvalPayloadFrRcvd=mcmVNETChStatsInvalPayloadFrRcvd, mcmVNETChStatsOutCallsSucceded=mcmVNETChStatsOutCallsSucceded, nvmVNETEgressDigManipString=nvmVNETEgressDigManipString, mcmVNETChCfgVoiceProfile=mcmVNETChCfgVoiceProfile, mcmVNETSwProfCfgAutoCallEntNum=mcmVNETSwProfCfgAutoCallEntNum, mcmVNETChStatsBEOFFramesRcvd=mcmVNETChStatsBEOFFramesRcvd, mcmVNETSwProfCfgRestrictClassCd=mcmVNETSwProfCfgRestrictClassCd, mcmVNETProfileCfgIdlePattern=mcmVNETProfileCfgIdlePattern, mcmVNETChCfgSwitchingProfile=mcmVNETChCfgSwitchingProfile, nvmVNETIngressDigFilterManipString=nvmVNETIngressDigFilterManipString, nvmVNETProfileCfgRegenFormat=nvmVNETProfileCfgRegenFormat, vnet_control=vnet_control, nvmVNETSwProfCfgCUGID=nvmVNETSwProfCfgCUGID, mcmVNETChCfgChannelID=mcmVNETChCfgChannelID, nvmVNETProfileCfgAutoGainControl=nvmVNETProfileCfgAutoGainControl, mcmVNETProfileCfgJitters=mcmVNETProfileCfgJitters, mcmVNETChStatusInputLevel=mcmVNETChStatusInputLevel, mcmVNETProfileCfgEchoCanceller=mcmVNETProfileCfgEchoCanceller, mcmVNETSwProfCfgTransmitPriority=mcmVNETSwProfCfgTransmitPriority, mcmVNETChCfgEntry=mcmVNETChCfgEntry, mcmVNETChCfgInterfaceType=mcmVNETChCfgInterfaceType, mcmVNETChStatusSelfTestResult=mcmVNETChStatusSelfTestResult, mcmVNETProfileCfgFaxDigRate=mcmVNETProfileCfgFaxDigRate, mcmVNETChStatusEMType=mcmVNETChStatusEMType, mcmVNETProfileCfgAutoGainControl=mcmVNETProfileCfgAutoGainControl, nvmVNETChCfgTable=nvmVNETChCfgTable, mcmVNETSwProfCfgCUGID=mcmVNETSwProfCfgCUGID, nvmVNETProfileCfgMaxOutputLevel=nvmVNETProfileCfgMaxOutputLevel, nvmVNETSwProfCfgOutCallRestrict=nvmVNETSwProfCfgOutCallRestrict, mcmVNETChStatusRemoteFrameIfVer=mcmVNETChStatusRemoteFrameIfVer, nvmVNETChCfgInterfaceType=nvmVNETChCfgInterfaceType, mcmVNETNetStatsFailedOutSVCCalls=mcmVNETNetStatsFailedOutSVCCalls, nvmVNETProfileCfgCallProgTone=nvmVNETProfileCfgCallProgTone, mcmVNETProfileCfgEcanErlImprovement=mcmVNETProfileCfgEcanErlImprovement, mcmVNETChStatsOutCallsFailed=mcmVNETChStatsOutCallsFailed, mcmVNETProfileCfgDialDigTimeLimit=mcmVNETProfileCfgDialDigTimeLimit, nvmVNETProfileCfgFXSSigFormat=nvmVNETProfileCfgFXSSigFormat, vnet_status=vnet_status, mcmVNETSwProfCfgInCallRestrict=mcmVNETSwProfCfgInCallRestrict, mcmVNETSwProfCfgTable=mcmVNETSwProfCfgTable, mcmVNETProfileCfgCompanderFormat=mcmVNETProfileCfgCompanderFormat, mcmVNETSwProfCfgOutCallMode=mcmVNETSwProfCfgOutCallMode, mcmVNETChStatusRemoteChIfType=mcmVNETChStatusRemoteChIfType, mcmVNETFailedToSyncUpRecovered=mcmVNETFailedToSyncUpRecovered, mcmVNETProfileCfgDTMFDetector=mcmVNETProfileCfgDTMFDetector, mcmVNETNetStatsSucceedDNARequests=mcmVNETNetStatsSucceedDNARequests, nvmVNETProfileCfgOutputLevelAttn=nvmVNETProfileCfgOutputLevelAttn, mcmVNETChStatsLimID=mcmVNETChStatsLimID, mcmVNETFailedToSyncUp=mcmVNETFailedToSyncUp, nvmVNETIngressDigFilterTable=nvmVNETIngressDigFilterTable, mcmVNETIngressDigFilterIngressNum=mcmVNETIngressDigFilterIngressNum, nvmVNETIngressDigFilterIngressNum=nvmVNETIngressDigFilterIngressNum, mcmVNETChStatsLostControlFrames=mcmVNETChStatsLostControlFrames, mcmVNETEgressDigManipTable=mcmVNETEgressDigManipTable, nvmVNETChCfgSwitchingProfile=nvmVNETChCfgSwitchingProfile, nvmVNETSwProfCfgTable=nvmVNETSwProfCfgTable, mcmVNETSwProfCfgOutCallRestrict=mcmVNETSwProfCfgOutCallRestrict, nvmVNETProfileCfgEcanFilterLength=nvmVNETProfileCfgEcanFilterLength, mcmVNETProfileCfgDVMSigFormat=mcmVNETProfileCfgDVMSigFormat, mcmVNETChStatusRemoteChModemAlg=mcmVNETChStatusRemoteChModemAlg, nvmVNETProfileCfgBRIPulseRate=nvmVNETProfileCfgBRIPulseRate, nvmVNETSwProfCfgTransmitPriority=nvmVNETSwProfCfgTransmitPriority, mcmVNETProfileCfgSilenceHngOvrTime=mcmVNETProfileCfgSilenceHngOvrTime, voiceSysStatusGroup=voiceSysStatusGroup, mcmVNETProfileCfgTable=mcmVNETProfileCfgTable, mcmVNETChStatsNumberOfRetries=mcmVNETChStatsNumberOfRetries, nvmVNETProfileCfgBandwidth=nvmVNETProfileCfgBandwidth, mcmVNETProfileCfgEndOfDialChar=mcmVNETProfileCfgEndOfDialChar, mcmVNETChStatusChannelID=mcmVNETChStatusChannelID, mcmVNETSwProfCfgCallNegStrategy=mcmVNETSwProfCfgCallNegStrategy, mcmVNETChStatsEntry=mcmVNETChStatsEntry, mcmVNETProfileCfgMaxOutputLevel=mcmVNETProfileCfgMaxOutputLevel, nvmVNETChCfgVoiceProfile=nvmVNETChCfgVoiceProfile, mcmVNETChStatusRemoteChNodeName=mcmVNETChStatusRemoteChNodeName, nvmVNETChCfgLimID=nvmVNETChCfgLimID, mcmVNETChCfgLimID=mcmVNETChCfgLimID, mcmVNETProfileCfgEMSigFormat=mcmVNETProfileCfgEMSigFormat, mcmVNETProfileCfgEMAnalOper=mcmVNETProfileCfgEMAnalOper, mcmVNETChStatsBBCFramesRcvd=mcmVNETChStatsBBCFramesRcvd, mcmVNETProfileCfgDigitizingRate=mcmVNETProfileCfgDigitizingRate, nvmVNETProfileCfgLineImpedance=nvmVNETProfileCfgLineImpedance, nvmVNETChCfgChannelID=nvmVNETChCfgChannelID, mcmVNETProfileCfgFXSSigFormat=mcmVNETProfileCfgFXSSigFormat, mcmVNETProfileCfgRegenFormat=mcmVNETProfileCfgRegenFormat, mcmVNETProfileCfgPremiumVoice=mcmVNETProfileCfgPremiumVoice, mcmVNETIngressDigFilterIndex=mcmVNETIngressDigFilterIndex, nvmVNETProfileCfgIdlePattern=nvmVNETProfileCfgIdlePattern, nvmVNETProfileCfgEntry=nvmVNETProfileCfgEntry, nvmVNETProfileCfgEchoCanceller=nvmVNETProfileCfgEchoCanceller, mcmVNETChStatsInvalPUMPMsgRcvd=mcmVNETChStatsInvalPUMPMsgRcvd, mcmVNETNetStatsAcceptedInCalls=mcmVNETNetStatsAcceptedInCalls, mcmVNETChStatusEntry=mcmVNETChStatusEntry, mcmVNETNetStatsFailedDNARequests=mcmVNETNetStatsFailedDNARequests, mcmVNETChStatusRemoteChVoiceAlg=mcmVNETChStatusRemoteChVoiceAlg, mcmVNETProfileCfgMode=mcmVNETProfileCfgMode, mcmVNETChStatusEPROM=mcmVNETChStatusEPROM, mcmVNETNoDVMCodeImage=mcmVNETNoDVMCodeImage, nvmVNETEgressDigManipTable=nvmVNETEgressDigManipTable, nvmVNETProfileCfgJitters=nvmVNETProfileCfgJitters, mcmVNETSwProfCfgProfileNum=mcmVNETSwProfCfgProfileNum, mcmVNETProfileCfgOutputLevelAttn=mcmVNETProfileCfgOutputLevelAttn, mcmVNETProfileCfgLineImpedance=mcmVNETProfileCfgLineImpedance)
