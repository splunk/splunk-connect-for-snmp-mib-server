#
# PySNMP MIB module ZTE-UAS-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZTE-UAS-MULTICAST-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:41:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, Unsigned32, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises, IpAddress, Integer32, MibIdentifier, ObjectIdentity, TimeTicks, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Unsigned32", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises", "IpAddress", "Integer32", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Counter64", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zxMulticastMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3902, 1006, 2))
if mibBuilder.loadTexts: zxMulticastMib.setLastUpdated('200610231700Z')
if mibBuilder.loadTexts: zxMulticastMib.setOrganization('ZTE Co.')
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxUas = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006))
zxUasMulticastMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1))
zxUasTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 2))
zxUasMulticastSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxUasMulticastSwitch.setStatus('current')
zxIgmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2))
zxPimGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3))
zxIgmpUasGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4))
zxIgmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1), )
if mibBuilder.loadTexts: zxIgmpGroupTable.setStatus('current')
zxIgmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpGroupAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpGroupInterface"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpGroupLastReporterCircuit"))
if mibBuilder.loadTexts: zxIgmpGroupEntry.setStatus('current')
zxIgmpGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupAddr.setStatus('current')
zxIgmpGroupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupInterface.setStatus('current')
zxIgmpGroupFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("ip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupFlag.setStatus('current')
zxIgmpGroupPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupPresent.setStatus('current')
zxIgmpGroupExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupExpire.setStatus('current')
zxIgmpGroupLastReporterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupLastReporterCircuit.setStatus('current')
zxIgmpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2), )
if mibBuilder.loadTexts: zxIgmpInterfaceTable.setStatus('current')
zxIgmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpInterface"))
if mibBuilder.loadTexts: zxIgmpInterfaceEntry.setStatus('current')
zxIgmpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInterface.setStatus('current')
zxIgmpInfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInfIpAddr.setStatus('current')
zxIgmpInfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInfMask.setStatus('current')
zxIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpVersion.setStatus('current')
zxIgmpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQueryInterval.setStatus('current')
zxIgmpLastMemQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpLastMemQueryIntvl.setStatus('current')
zxIgmpMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpMaxResponseTime.setStatus('current')
zxIgmpQuerierTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQuerierTimeout.setStatus('current')
zxIgmpQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQuerier.setStatus('current')
zxIgmpQuerierExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQuerierExpire.setStatus('current')
zxIgmpInboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInboundAcl.setStatus('current')
zxIgmpImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpImmediateLeave.setStatus('current')
zxIgmpInfRevPktTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3), )
if mibBuilder.loadTexts: zxIgmpInfRevPktTable.setStatus('current')
zxIgmpInfRevPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpRevPktInterface"))
if mibBuilder.loadTexts: zxIgmpInfRevPktEntry.setStatus('current')
zxIgmpRevPktInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktInterface.setStatus('current')
zxIgmpRevPktQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktQuery.setStatus('current')
zxIgmpRevPktReportV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktReportV2.setStatus('current')
zxIgmpRevPktLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktLeave.setStatus('current')
zxIgmpRevPktReportV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktReportV1.setStatus('current')
zxIgmpRevPktOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktOther.setStatus('current')
zxIgmpRevPktTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktTotal.setStatus('current')
zxIgmpInfSendPktTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4), )
if mibBuilder.loadTexts: zxIgmpInfSendPktTable.setStatus('current')
zxIgmpInfSendPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpSendPktInterface"))
if mibBuilder.loadTexts: zxIgmpInfSendPktEntry.setStatus('current')
zxIgmpSendPktInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktInterface.setStatus('current')
zxIgmpSendPktQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktQuery.setStatus('current')
zxIgmpSendPktSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktSpec.setStatus('current')
zxIgmpSendPktTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktTotal.setStatus('current')
zxIgmpServerLogTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5), )
if mibBuilder.loadTexts: zxIgmpServerLogTable.setStatus('current')
zxIgmpServerLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpServerLogInterface"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpServerLogGroupAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpServerLogSourceAddr"))
if mibBuilder.loadTexts: zxIgmpServerLogEntry.setStatus('current')
zxIgmpServerLogInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogInterface.setStatus('current')
zxIgmpServerLogProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pimSm", 1), ("pimDm", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogProtocol.setStatus('current')
zxIgmpServerLogVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogVpi.setStatus('current')
zxIgmpServerLogVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogVci.setStatus('current')
zxIgmpServerLogGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogGroupAddr.setStatus('current')
zxIgmpServerLogSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogSourceAddr.setStatus('current')
zxIgmpServerLogRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogRecTime.setStatus('current')
zxIgmpServerLogPPPoESID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogPPPoESID.setStatus('current')
zxPimBSR = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimBSR.setStatus('current')
zxPimCBsr = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimCBsr.setStatus('current')
zxPimCRP = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimCRP.setStatus('current')
zxPimRpMapTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4), )
if mibBuilder.loadTexts: zxPimRpMapTable.setStatus('current')
zxPimRpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimRpMapGroupAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimRpMapGroupMask"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimRpMapRpAddr"))
if mibBuilder.loadTexts: zxPimRpMapEntry.setStatus('current')
zxPimRpMapGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapGroupAddr.setStatus('current')
zxPimRpMapGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapGroupMask.setStatus('current')
zxPimRpMapRpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapRpAddr.setStatus('current')
zxPimRpMapRpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapRpDescr.setStatus('current')
zxPimSmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5), )
if mibBuilder.loadTexts: zxPimSmInterfaceTable.setStatus('current')
zxPimSmIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmInterface"))
if mibBuilder.loadTexts: zxPimSmIntfEntry.setStatus('current')
zxPimSmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmAddr.setStatus('current')
zxPimSmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmInterface.setStatus('current')
zxPimSmIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmIntfState.setStatus('current')
zxPimSmNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrCount.setStatus('current')
zxPimSmQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmQueryIntvl.setStatus('current')
zxPimSmDR = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmDR.setStatus('current')
zxPimSmDrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmDrPriority.setStatus('current')
zxPimSmNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6), )
if mibBuilder.loadTexts: zxPimSmNbrTable.setStatus('current')
zxPimSmNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmNbrAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmNbrIntf"))
if mibBuilder.loadTexts: zxPimSmNbrEntry.setStatus('current')
zxPimSmNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrAddr.setStatus('current')
zxPimSmNbrIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrIntf.setStatus('current')
zxPimSmNbrDrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrDrPriority.setStatus('current')
zxPimSmNbrUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrUptime.setStatus('current')
zxPimSmNbrExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrExpire.setStatus('current')
zxPimSmNbrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrVer.setStatus('current')
zxPimSmPktTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7), )
if mibBuilder.loadTexts: zxPimSmPktTable.setStatus('current')
zxPimSmPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmPktIntf"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmPktType"))
if mibBuilder.loadTexts: zxPimSmPktEntry.setStatus('current')
zxPimSmPktIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktIntf.setStatus('current')
zxPimSmPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("hello", 1), ("register", 2), ("register-Stop", 3), ("joinOrPrune", 4), ("bsr", 5), ("assert", 6), ("graft", 7), ("graft-ack", 8), ("crp-adv", 9), ("probe", 10), ("err-type", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktType.setStatus('current')
zxPimSmPktRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktRxOk.setStatus('current')
zxPimSmPktTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktTxOk.setStatus('current')
zxPimSmPktRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktRxError.setStatus('current')
zxPimSmPktTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktTxError.setStatus('current')
zxIgmpUasAclSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasAclSwitch.setStatus('current')
zxIgmpUasPrivateServerLogSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasPrivateServerLogSwitch.setStatus('current')
zxIgmpUasAclTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3), )
if mibBuilder.loadTexts: zxIgmpUasAclTable.setStatus('current')
zxIgmpUasAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasAclSourceAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasAclDestAddr"))
if mibBuilder.loadTexts: zxIgmpUasAclEntry.setStatus('current')
zxIgmpUasAclSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasAclSourceAddr.setStatus('current')
zxIgmpUasAclDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasAclDestAddr.setStatus('current')
zxIgmpUasServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4), )
if mibBuilder.loadTexts: zxIgmpUasServiceProfileTable.setStatus('current')
zxIgmpUasServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasServiceProfileNumber"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasServiceProfilePrwGroup"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasServiceProfilePrwGroupMask"))
if mibBuilder.loadTexts: zxIgmpUasServiceProfileEntry.setStatus('current')
zxIgmpUasServiceProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileNumber.setStatus('current')
zxIgmpUasServiceProfileAccGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileAccGroup.setStatus('current')
zxIgmpUasServiceProfileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileDescr.setStatus('current')
zxIgmpUasServiceProfileMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxGroup.setStatus('current')
zxIgmpUasServiceProfileMaxPrwGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxPrwGroup.setStatus('current')
zxIgmpUasServiceProfilePrwGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwGroup.setStatus('current')
zxIgmpUasServiceProfilePrwGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwGroupMask.setStatus('current')
zxIgmpUasServiceProfileMaxPrwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxPrwCount.setStatus('current')
zxIgmpUasServiceProfilePrwResumeIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwResumeIntvl.setStatus('current')
mibBuilder.exportSymbols("ZTE-UAS-MULTICAST-MIB", zxIgmpUasServiceProfilePrwGroup=zxIgmpUasServiceProfilePrwGroup, zxIgmpRevPktOther=zxIgmpRevPktOther, zxIgmpUasServiceProfileNumber=zxIgmpUasServiceProfileNumber, zxPimSmNbrVer=zxPimSmNbrVer, zxPimBSR=zxPimBSR, zxIgmpUasAclDestAddr=zxIgmpUasAclDestAddr, zxIgmpSendPktQuery=zxIgmpSendPktQuery, zxMulticastMib=zxMulticastMib, zxIgmpQuerier=zxIgmpQuerier, zxPimSmPktTable=zxPimSmPktTable, zxIgmpUasServiceProfilePrwGroupMask=zxIgmpUasServiceProfilePrwGroupMask, zxIgmpUasServiceProfileAccGroup=zxIgmpUasServiceProfileAccGroup, zxIgmpUasAclTable=zxIgmpUasAclTable, zxIgmpGroupLastReporterCircuit=zxIgmpGroupLastReporterCircuit, zxIgmpServerLogVpi=zxIgmpServerLogVpi, zxIgmpRevPktInterface=zxIgmpRevPktInterface, zxIgmpSendPktInterface=zxIgmpSendPktInterface, zxIgmpUasServiceProfileMaxPrwCount=zxIgmpUasServiceProfileMaxPrwCount, zxPimSmPktRxOk=zxPimSmPktRxOk, zxIgmpQueryInterval=zxIgmpQueryInterval, zxIgmpInterfaceEntry=zxIgmpInterfaceEntry, zxIgmpInfMask=zxIgmpInfMask, zxPimSmPktTxOk=zxPimSmPktTxOk, zxPimRpMapRpAddr=zxPimRpMapRpAddr, zxPimSmNbrTable=zxPimSmNbrTable, zxIgmpInfSendPktEntry=zxIgmpInfSendPktEntry, zxIgmpGroup=zxIgmpGroup, zxIgmpInterface=zxIgmpInterface, zxIgmpServerLogProtocol=zxIgmpServerLogProtocol, zxPimCRP=zxPimCRP, zxIgmpMaxResponseTime=zxIgmpMaxResponseTime, zxPimSmPktEntry=zxPimSmPktEntry, zxIgmpServerLogInterface=zxIgmpServerLogInterface, zxUasMulticastSwitch=zxUasMulticastSwitch, zxIgmpRevPktReportV2=zxIgmpRevPktReportV2, zxIgmpUasServiceProfileMaxPrwGroup=zxIgmpUasServiceProfileMaxPrwGroup, zxIgmpGroupPresent=zxIgmpGroupPresent, zxIgmpInfSendPktTable=zxIgmpInfSendPktTable, zxIgmpUasServiceProfileDescr=zxIgmpUasServiceProfileDescr, zxPimSmNbrCount=zxPimSmNbrCount, zxPimRpMapGroupAddr=zxPimRpMapGroupAddr, zxIgmpInfIpAddr=zxIgmpInfIpAddr, zxUas=zxUas, zxIgmpUasPrivateServerLogSwitch=zxIgmpUasPrivateServerLogSwitch, zxPimSmPktRxError=zxPimSmPktRxError, zxIgmpRevPktLeave=zxIgmpRevPktLeave, zxIgmpVersion=zxIgmpVersion, zxIgmpServerLogVci=zxIgmpServerLogVci, zxPimSmPktType=zxPimSmPktType, zxIgmpSendPktTotal=zxIgmpSendPktTotal, zxPimSmNbrAddr=zxPimSmNbrAddr, zxIgmpGroupFlag=zxIgmpGroupFlag, zxIgmpUasAclSourceAddr=zxIgmpUasAclSourceAddr, zxIgmpInterfaceTable=zxIgmpInterfaceTable, zxIgmpRevPktTotal=zxIgmpRevPktTotal, zxIgmpServerLogEntry=zxIgmpServerLogEntry, zxIgmpRevPktQuery=zxIgmpRevPktQuery, zxPimSmNbrUptime=zxPimSmNbrUptime, zxIgmpGroupEntry=zxIgmpGroupEntry, zxPimSmNbrEntry=zxPimSmNbrEntry, zxUasTraps=zxUasTraps, zxPimSmNbrDrPriority=zxPimSmNbrDrPriority, zxPimSmInterfaceTable=zxPimSmInterfaceTable, zxPimSmAddr=zxPimSmAddr, zxIgmpServerLogPPPoESID=zxIgmpServerLogPPPoESID, zxPimSmIntfEntry=zxPimSmIntfEntry, zte=zte, zxIgmpInfRevPktTable=zxIgmpInfRevPktTable, zxPimSmPktIntf=zxPimSmPktIntf, zxPimGroup=zxPimGroup, zxIgmpGroupExpire=zxIgmpGroupExpire, zxIgmpUasAclEntry=zxIgmpUasAclEntry, zxIgmpGroupTable=zxIgmpGroupTable, zxIgmpImmediateLeave=zxIgmpImmediateLeave, zxPimRpMapEntry=zxPimRpMapEntry, zxIgmpQuerierExpire=zxIgmpQuerierExpire, zxIgmpUasServiceProfileEntry=zxIgmpUasServiceProfileEntry, zxPimSmDrPriority=zxPimSmDrPriority, zxIgmpServerLogTable=zxIgmpServerLogTable, zxPimSmPktTxError=zxPimSmPktTxError, zxIgmpUasServiceProfilePrwResumeIntvl=zxIgmpUasServiceProfilePrwResumeIntvl, zxPimSmDR=zxPimSmDR, zxIgmpUasServiceProfileTable=zxIgmpUasServiceProfileTable, zxIgmpUasAclSwitch=zxIgmpUasAclSwitch, zxIgmpQuerierTimeout=zxIgmpQuerierTimeout, PYSNMP_MODULE_ID=zxMulticastMib, zxPimSmInterface=zxPimSmInterface, zxIgmpUasServiceProfileMaxGroup=zxIgmpUasServiceProfileMaxGroup, zxIgmpLastMemQueryIntvl=zxIgmpLastMemQueryIntvl, zxIgmpServerLogSourceAddr=zxIgmpServerLogSourceAddr, zxPimSmQueryIntvl=zxPimSmQueryIntvl, zxPimCBsr=zxPimCBsr, zxIgmpSendPktSpec=zxIgmpSendPktSpec, zxUasMulticastMibObjects=zxUasMulticastMibObjects, zxIgmpServerLogRecTime=zxIgmpServerLogRecTime, zxIgmpUasGroup=zxIgmpUasGroup, zxIgmpRevPktReportV1=zxIgmpRevPktReportV1, zxIgmpInboundAcl=zxIgmpInboundAcl, zxIgmpInfRevPktEntry=zxIgmpInfRevPktEntry, zxPimSmNbrExpire=zxPimSmNbrExpire, zxIgmpServerLogGroupAddr=zxIgmpServerLogGroupAddr, zxPimSmNbrIntf=zxPimSmNbrIntf, zxPimRpMapRpDescr=zxPimRpMapRpDescr, zxPimSmIntfState=zxPimSmIntfState, zxPimRpMapGroupMask=zxPimRpMapGroupMask, zxIgmpGroupAddr=zxIgmpGroupAddr, zxPimRpMapTable=zxPimRpMapTable, zxIgmpGroupInterface=zxIgmpGroupInterface)
