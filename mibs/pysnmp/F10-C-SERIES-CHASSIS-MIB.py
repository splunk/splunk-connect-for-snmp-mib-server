#
# PySNMP MIB module F10-C-SERIES-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-C-SERIES-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10ProcessorModuleType, F10ChassisType, F10CardOperStatus, F10HundredthdB, F10ChassisMode, F10MfgDate, F10SwDate, F10CSeriesPortType, F10CSeriesCardType = mibBuilder.importSymbols("FORCE10-TC", "F10ProcessorModuleType", "F10ChassisType", "F10CardOperStatus", "F10HundredthdB", "F10ChassisMode", "F10MfgDate", "F10SwDate", "F10CSeriesPortType", "F10CSeriesCardType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, NotificationType, MibIdentifier, IpAddress, Gauge32, Bits, Unsigned32, ModuleIdentity, Counter32, ObjectIdentity, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "MibIdentifier", "IpAddress", "Gauge32", "Bits", "Unsigned32", "ModuleIdentity", "Counter32", "ObjectIdentity", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DateAndTime, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "DisplayString", "TextualConvention")
f10CSerChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 8))
f10CSerChassisMib.setRevisions(('2012-07-18 12:00', '2008-09-02 12:00', '2007-06-28 12:00', '2007-05-22 12:00', '2013-05-17 12:00', '1906-05-01 00:00',))
if mibBuilder.loadTexts: f10CSerChassisMib.setLastUpdated('201305171200Z')
if mibBuilder.loadTexts: f10CSerChassisMib.setOrganization('Dell Inc')
f10CSerChassisObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1))
chObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1))
chSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2))
chRpmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3))
chAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 4))
chLineCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5))
chType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 1), F10ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chType.setStatus('current')
chChassisMode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 2), F10ChassisMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chChassisMode.setStatus('current')
chSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSwVersion.setStatus('current')
chMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chMacAddr.setStatus('current')
chSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSerialNumber.setStatus('current')
chPartNum = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPartNum.setStatus('current')
chProductRev = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chProductRev.setStatus('current')
chVendorId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chVendorId.setStatus('current')
chDateCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 9), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chDateCode.setStatus('current')
chCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCountryCode.setStatus('current')
chNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSlots.setStatus('current')
chNumLinecards = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumLinecards.setStatus('current')
chNumFanTrays = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumFanTrays.setStatus('current')
chNumPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumPowerSupplies.setStatus('current')
chNumSfmSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSfmSlots.setStatus('current')
chPiecePartID = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPiecePartID.setStatus('current')
chPPIDRevision = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPPIDRevision.setStatus('current')
chServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chServiceTag.setStatus('current')
chExpressServiceCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chExpressServiceCode.setStatus('current')
chSysCardTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1), )
if mibBuilder.loadTexts: chSysCardTable.setStatus('current')
chSysCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysCardSlotIndex"))
if mibBuilder.loadTexts: chSysCardEntry.setStatus('current')
chSysCardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSlotIndex.setStatus('current')
chSysCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 2), F10CSeriesCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardType.setStatus('current')
chSysCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumber.setStatus('current')
chSysCardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumPorts.setStatus('current')
chSysCardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardTemp.setStatus('current')
chSysCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardUpTime.setStatus('current')
chSysCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardAdminStatus.setStatus('current')
chSysCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 8), F10CardOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardOperStatus.setStatus('current')
chSysCardBootFlashA = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardBootFlashA.setStatus('current')
chSysCardBootFlashB = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardBootFlashB.setStatus('current')
chSysCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSerialNumber.setStatus('current')
chSysCardPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPartNum.setStatus('current')
chSysCardProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardProductRev.setStatus('current')
chSysCardVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardVendorId.setStatus('current')
chSysCardDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 15), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardDateCode.setStatus('current')
chSysCardCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardCountryCode.setStatus('current')
chSysCardPiecePartID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPiecePartID.setStatus('current')
chSysCardPPIDRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPPIDRevision.setStatus('current')
chSysCardServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardServiceTag.setStatus('current')
chSysCardExpressServiceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardExpressServiceCode.setStatus('current')
chSysPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2), )
if mibBuilder.loadTexts: chSysPortTable.setStatus('current')
chSysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysPortSlotIndex"), (0, "F10-C-SERIES-CHASSIS-MIB", "chSysPortIndex"))
if mibBuilder.loadTexts: chSysPortEntry.setStatus('current')
chSysPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortSlotIndex.setStatus('current')
chSysPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIndex.setStatus('current')
chSysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 3), F10CSeriesPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortType.setStatus('current')
chSysPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortAdminStatus.setStatus('current')
chSysPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("portDown", 2), ("portProblem", 3), ("cardProblem", 4), ("cardDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortOperStatus.setStatus('current')
chSysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIfIndex.setStatus('current')
chSysXfpRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 2, 1, 7), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysXfpRecvPower.setStatus('current')
chSysProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3), )
if mibBuilder.loadTexts: chSysProcessorTable.setStatus('current')
chSysProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysProcessorSlotIndex"), (0, "F10-C-SERIES-CHASSIS-MIB", "chSysProcessorIndex"))
if mibBuilder.loadTexts: chSysProcessorEntry.setStatus('current')
chSysProcessorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorSlotIndex.setStatus('current')
chSysProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorIndex.setStatus('current')
chSysProcessorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 3), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorModule.setStatus('current')
chSysProcessorUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorUpTime.setStatus('current')
chSysProcessorNvramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorNvramSize.setStatus('current')
chSysProcessorMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorMemSize.setStatus('current')
chSysSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4), )
if mibBuilder.loadTexts: chSysSwModuleTable.setStatus('current')
chSysSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysSwSlotIndex"), (0, "F10-C-SERIES-CHASSIS-MIB", "chSysSwProcessorIndex"))
if mibBuilder.loadTexts: chSysSwModuleEntry.setStatus('current')
chSysSwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwSlotIndex.setStatus('current')
chSysSwProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwProcessorIndex.setStatus('current')
chSysSwRuntimeImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setStatus('current')
chSysSwRuntimeImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 4), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setStatus('current')
chSysSwCurrentBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setStatus('current')
chSysSwCurrentBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setStatus('current')
chSysSwCurrentBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setStatus('current')
chSysSwBackupBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setStatus('current')
chSysSwBackupBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setStatus('current')
chSysSwBackupBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setStatus('current')
chSysSwNextRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwNextRebootImage.setStatus('current')
chSysSwCurrentBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setStatus('current')
chSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5), )
if mibBuilder.loadTexts: chSysPowerSupplyTable.setStatus('current')
chSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyIndex"))
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setStatus('current')
chSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setStatus('current')
chSysPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setStatus('current')
chSysPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("absent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyType.setStatus('current')
chSysPowerSupplyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("version1", 2), ("version2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyVersion.setStatus('current')
chSysPowerSupplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("low", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyMode.setStatus('current')
chSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6), )
if mibBuilder.loadTexts: chSysFanTrayTable.setStatus('current')
chSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysFanTrayIndex"))
if mibBuilder.loadTexts: chSysFanTrayEntry.setStatus('current')
chSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayIndex.setStatus('current')
chSysFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setStatus('current')
chSysSfmTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7), )
if mibBuilder.loadTexts: chSysSfmTable.setStatus('current')
chSysSfmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysSfmIndex"))
if mibBuilder.loadTexts: chSysSfmEntry.setStatus('current')
chSysSfmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmIndex.setStatus('current')
chSysSfmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmAdminStatus.setStatus('current')
chSysSfmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("absent", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmOperStatus.setStatus('current')
chSysSfmErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("not-available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmErrorStatus.setStatus('current')
chRpmNumRpms = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmNumRpms.setStatus('current')
chRpmSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmSlotNumber.setStatus('current')
chRpmUptime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmUptime.setStatus('current')
chRpmLastSwitchDate = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmLastSwitchDate.setStatus('current')
chRpmMajorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMajorAlarmStatus.setStatus('current')
chRpmMinorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMinorAlarmStatus.setStatus('current')
chRpmUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7), )
if mibBuilder.loadTexts: chRpmUtilTable.setStatus('current')
chRpmUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chRpmCpuIndex"))
if mibBuilder.loadTexts: chRpmUtilEntry.setStatus('current')
chRpmCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuIndex.setStatus('current')
chRpmCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 2), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuType.setStatus('current')
chRpmCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Sec.setStatus('current')
chRpmCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil1Min.setStatus('current')
chRpmCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Min.setStatus('current')
chRpmMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 3, 7, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMemUsageUtil.setStatus('current')
chLineCardUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1), )
if mibBuilder.loadTexts: chLineCardUtilTable.setStatus('current')
chLineCardUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1), ).setIndexNames((0, "F10-C-SERIES-CHASSIS-MIB", "chSysCardNumber"))
if mibBuilder.loadTexts: chLineCardUtilEntry.setStatus('current')
chLineCardCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Sec.setStatus('current')
chLineCardCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil1Min.setStatus('current')
chLineCardCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Min.setStatus('current')
chLineCardMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 8, 1, 5, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardMemUsageUtil.setStatus('current')
f10CSerChassisMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2))
f10CSerChassisMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 1))
f10CSerChassisMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2))
f10CSerChassisMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 1, 1)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "f10CSerComponentGroup"), ("F10-C-SERIES-CHASSIS-MIB", "f10CSerSystemGroup"), ("F10-C-SERIES-CHASSIS-MIB", "f10CSerRpmGroup"), ("F10-C-SERIES-CHASSIS-MIB", "f10CSerLineCardGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerChassisMibCompliance = f10CSerChassisMibCompliance.setStatus('current')
f10CSerComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 1)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chType"), ("F10-C-SERIES-CHASSIS-MIB", "chChassisMode"), ("F10-C-SERIES-CHASSIS-MIB", "chSwVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chMacAddr"), ("F10-C-SERIES-CHASSIS-MIB", "chSerialNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chPartNum"), ("F10-C-SERIES-CHASSIS-MIB", "chProductRev"), ("F10-C-SERIES-CHASSIS-MIB", "chVendorId"), ("F10-C-SERIES-CHASSIS-MIB", "chDateCode"), ("F10-C-SERIES-CHASSIS-MIB", "chCountryCode"), ("F10-C-SERIES-CHASSIS-MIB", "chPiecePartID"), ("F10-C-SERIES-CHASSIS-MIB", "chPPIDRevision"), ("F10-C-SERIES-CHASSIS-MIB", "chServiceTag"), ("F10-C-SERIES-CHASSIS-MIB", "chExpressServiceCode"), ("F10-C-SERIES-CHASSIS-MIB", "chNumSlots"), ("F10-C-SERIES-CHASSIS-MIB", "chNumLinecards"), ("F10-C-SERIES-CHASSIS-MIB", "chNumFanTrays"), ("F10-C-SERIES-CHASSIS-MIB", "chNumPowerSupplies"), ("F10-C-SERIES-CHASSIS-MIB", "chNumSfmSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerComponentGroup = f10CSerComponentGroup.setStatus('current')
f10CSerSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 2)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chSysCardType"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardNumPorts"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardTemp"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardUpTime"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardAdminStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardBootFlashA"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardBootFlashB"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardSerialNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardPartNum"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardProductRev"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardVendorId"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardDateCode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardCountryCode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardPiecePartID"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardPPIDRevision"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardServiceTag"), ("F10-C-SERIES-CHASSIS-MIB", "chSysCardExpressServiceCode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortType"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortAdminStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPortIfIndex"), ("F10-C-SERIES-CHASSIS-MIB", "chSysXfpRecvPower"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorModule"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorUpTime"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorNvramSize"), ("F10-C-SERIES-CHASSIS-MIB", "chSysProcessorMemSize"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgDate"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgDate"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgDate"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwNextRebootImage"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImage"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyType"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyVersion"), ("F10-C-SERIES-CHASSIS-MIB", "chSysPowerSupplyMode"), ("F10-C-SERIES-CHASSIS-MIB", "chSysFanTrayOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSfmAdminStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSfmOperStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chSysSfmErrorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerSystemGroup = f10CSerSystemGroup.setStatus('current')
f10CSerRpmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 3)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chRpmNumRpms"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmSlotNumber"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmUptime"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmLastSwitchDate"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmMajorAlarmStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmMinorAlarmStatus"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuType"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuUtil5Sec"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuUtil1Min"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmCpuUtil5Min"), ("F10-C-SERIES-CHASSIS-MIB", "chRpmMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerRpmGroup = f10CSerRpmGroup.setStatus('current')
f10CSerLineCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 8, 2, 2, 4)).setObjects(("F10-C-SERIES-CHASSIS-MIB", "chLineCardCpuUtil5Sec"), ("F10-C-SERIES-CHASSIS-MIB", "chLineCardCpuUtil1Min"), ("F10-C-SERIES-CHASSIS-MIB", "chLineCardCpuUtil5Min"), ("F10-C-SERIES-CHASSIS-MIB", "chLineCardMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10CSerLineCardGroup = f10CSerLineCardGroup.setStatus('current')
mibBuilder.exportSymbols("F10-C-SERIES-CHASSIS-MIB", chNumLinecards=chNumLinecards, chLineCardMemUsageUtil=chLineCardMemUsageUtil, chNumSfmSlots=chNumSfmSlots, chSysCardSerialNumber=chSysCardSerialNumber, chSysProcessorModule=chSysProcessorModule, chSysCardProductRev=chSysCardProductRev, chRpmNumRpms=chRpmNumRpms, chSysCardUpTime=chSysCardUpTime, chRpmCpuUtil1Min=chRpmCpuUtil1Min, chSysCardBootFlashB=chSysCardBootFlashB, chRpmCpuType=chRpmCpuType, chSysSfmOperStatus=chSysSfmOperStatus, chSysSwProcessorIndex=chSysSwProcessorIndex, chSysCardPartNum=chSysCardPartNum, chSysCardDateCode=chSysCardDateCode, chSysSwModuleTable=chSysSwModuleTable, chSysSwCurrentBootImgStatus=chSysSwCurrentBootImgStatus, chRpmLastSwitchDate=chRpmLastSwitchDate, chSysPortIndex=chSysPortIndex, chPPIDRevision=chPPIDRevision, chNumSlots=chNumSlots, chSwVersion=chSwVersion, chSysProcessorNvramSize=chSysProcessorNvramSize, chSysCardNumber=chSysCardNumber, chSysFanTrayEntry=chSysFanTrayEntry, chSysObjects=chSysObjects, chProductRev=chProductRev, chRpmMemUsageUtil=chRpmMemUsageUtil, chSysPortAdminStatus=chSysPortAdminStatus, chSysXfpRecvPower=chSysXfpRecvPower, chSysSfmAdminStatus=chSysSfmAdminStatus, chLineCardCpuUtil5Min=chLineCardCpuUtil5Min, chSysSfmIndex=chSysSfmIndex, f10CSerChassisMibConformance=f10CSerChassisMibConformance, chSysSwModuleEntry=chSysSwModuleEntry, chSysSwCurrentBootImgVersion=chSysSwCurrentBootImgVersion, chRpmUtilTable=chRpmUtilTable, chRpmObjects=chRpmObjects, chSysCardVendorId=chSysCardVendorId, chSysCardSlotIndex=chSysCardSlotIndex, chSysProcessorIndex=chSysProcessorIndex, f10CSerChassisMibCompliances=f10CSerChassisMibCompliances, chSysFanTrayOperStatus=chSysFanTrayOperStatus, chSysCardExpressServiceCode=chSysCardExpressServiceCode, chSysSfmTable=chSysSfmTable, chExpressServiceCode=chExpressServiceCode, chObjects=chObjects, chCountryCode=chCountryCode, chSysProcessorSlotIndex=chSysProcessorSlotIndex, chVendorId=chVendorId, chSysPortEntry=chSysPortEntry, chSysSwCurrentBootImgDate=chSysSwCurrentBootImgDate, chSysSwBackupBootImgStatus=chSysSwBackupBootImgStatus, chRpmCpuUtil5Sec=chRpmCpuUtil5Sec, f10CSerComponentGroup=f10CSerComponentGroup, chRpmMajorAlarmStatus=chRpmMajorAlarmStatus, chSysPortSlotIndex=chSysPortSlotIndex, chRpmUtilEntry=chRpmUtilEntry, f10CSerChassisMibGroups=f10CSerChassisMibGroups, chSysProcessorUpTime=chSysProcessorUpTime, chRpmSlotNumber=chRpmSlotNumber, chSysProcessorMemSize=chSysProcessorMemSize, chType=chType, chNumPowerSupplies=chNumPowerSupplies, f10CSerChassisMibCompliance=f10CSerChassisMibCompliance, chLineCardUtilEntry=chLineCardUtilEntry, f10CSerRpmGroup=f10CSerRpmGroup, chPiecePartID=chPiecePartID, chRpmCpuUtil5Min=chRpmCpuUtil5Min, chLineCardCpuUtil5Sec=chLineCardCpuUtil5Sec, chSysCardTable=chSysCardTable, chSysPowerSupplyIndex=chSysPowerSupplyIndex, chSysFanTrayIndex=chSysFanTrayIndex, chSysCardEntry=chSysCardEntry, chSysPowerSupplyMode=chSysPowerSupplyMode, chSysFanTrayTable=chSysFanTrayTable, chSysSwBackupBootImgVersion=chSysSwBackupBootImgVersion, chSysPowerSupplyVersion=chSysPowerSupplyVersion, f10CSerChassisObject=f10CSerChassisObject, f10CSerSystemGroup=f10CSerSystemGroup, chPartNum=chPartNum, chSysPowerSupplyEntry=chSysPowerSupplyEntry, chSysSfmEntry=chSysSfmEntry, chSysCardNumPorts=chSysCardNumPorts, chSysCardTemp=chSysCardTemp, chRpmUptime=chRpmUptime, chSysPortTable=chSysPortTable, chSysSwNextRebootImage=chSysSwNextRebootImage, f10CSerChassisMib=f10CSerChassisMib, chSysPowerSupplyType=chSysPowerSupplyType, chSysSwBackupBootImgDate=chSysSwBackupBootImgDate, chDateCode=chDateCode, chSysSwRuntimeImgVersion=chSysSwRuntimeImgVersion, chLineCardCpuUtil1Min=chLineCardCpuUtil1Min, chSysCardServiceTag=chSysCardServiceTag, chAlarmObjects=chAlarmObjects, chNumFanTrays=chNumFanTrays, chSysCardCountryCode=chSysCardCountryCode, f10CSerLineCardGroup=f10CSerLineCardGroup, chSysPortIfIndex=chSysPortIfIndex, chSysSfmErrorStatus=chSysSfmErrorStatus, chSysCardAdminStatus=chSysCardAdminStatus, chSysPowerSupplyTable=chSysPowerSupplyTable, chSysCardType=chSysCardType, chSysPortOperStatus=chSysPortOperStatus, chSysPowerSupplyOperStatus=chSysPowerSupplyOperStatus, chSysCardBootFlashA=chSysCardBootFlashA, chSysProcessorTable=chSysProcessorTable, chSysCardOperStatus=chSysCardOperStatus, chSysCardPiecePartID=chSysCardPiecePartID, chSysCardPPIDRevision=chSysCardPPIDRevision, PYSNMP_MODULE_ID=f10CSerChassisMib, chMacAddr=chMacAddr, chSysSwCurrentBootImage=chSysSwCurrentBootImage, chSysProcessorEntry=chSysProcessorEntry, chSerialNumber=chSerialNumber, chSysSwRuntimeImgDate=chSysSwRuntimeImgDate, chChassisMode=chChassisMode, chSysSwSlotIndex=chSysSwSlotIndex, chLineCardUtilTable=chLineCardUtilTable, chLineCardObjects=chLineCardObjects, chSysPortType=chSysPortType, chRpmMinorAlarmStatus=chRpmMinorAlarmStatus, chRpmCpuIndex=chRpmCpuIndex, chServiceTag=chServiceTag)
