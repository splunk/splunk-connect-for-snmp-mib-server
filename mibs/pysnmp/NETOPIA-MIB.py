#
# PySNMP MIB module NETOPIA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETOPIA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
DdpAddress, = mibBuilder.importSymbols("RFC1243-MIB", "DdpAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Bits, TimeTicks, ObjectIdentity, IpAddress, Unsigned32, enterprises, iso, Integer32, Counter32, ModuleIdentity, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Bits", "TimeTicks", "ObjectIdentity", "IpAddress", "Unsigned32", "enterprises", "iso", "Integer32", "Counter32", "ModuleIdentity", "Counter64", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
farallon = MibIdentifier((1, 3, 6, 1, 4, 1, 304))
netopia = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1))
class ATNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class HostNameOrIpAddr(OctetString):
    pass

class UInteger(Gauge32):
    pass

sysParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 1))
clockParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 2))
sysStats = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3))
ipParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4))
ripParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 5))
atParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6))
macipParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7))
dhcpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8))
aurpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9))
bootParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10))
snmpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11))
isdnParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12))
consoleParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13))
pcCardParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14))
logParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15))
filterParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16))
hwVersion = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVersion.setStatus('mandatory')
fwVersion = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwVersion.setStatus('mandatory')
productMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMIBVersion.setStatus('mandatory')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
modelNumber = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelNumber.setStatus('mandatory')
bootTime = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootTime.setStatus('mandatory')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemClock.setStatus('mandatory')
currentCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentCpuUtil.setStatus('mandatory')
averageCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageCpuUtil.setStatus('mandatory')
currentBufs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentBufs.setStatus('mandatory')
averageBufs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageBufs.setStatus('mandatory')
totalRAM = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRAM.setStatus('mandatory')
usedRAM = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedRAM.setStatus('mandatory')
totalFEPROM = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFEPROM.setStatus('mandatory')
usedFEPROM = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usedFEPROM.setStatus('mandatory')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('mandatory')
ipNetMask = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetMask.setStatus('mandatory')
ipBcastForm = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOnes", 1), ("allZeros", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBcastForm.setStatus('mandatory')
ipEncap = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEncap.setStatus('mandatory')
ipDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultGateway.setStatus('mandatory')
ipDomainName = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDomainName.setStatus('mandatory')
ipDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 7), )
if mibBuilder.loadTexts: ipDNSServerTable.setStatus('mandatory')
ipDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 7, 1), ).setIndexNames((0, "NETOPIA-MIB", "ipDNSServerIndex"))
if mibBuilder.loadTexts: ipDNSServerEntry.setStatus('mandatory')
ipDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDNSServerIndex.setStatus('mandatory')
ipDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDNSServerAddress.setStatus('mandatory')
ipDNSServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDNSServerStatus.setStatus('mandatory')
ripEnTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripEnTxEnable.setStatus('mandatory')
ripEnRxEnable = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripEnRxEnable.setStatus('mandatory')
atportXTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 1), )
if mibBuilder.loadTexts: atportXTable.setStatus('mandatory')
atportXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 1, 1), ).setIndexNames((0, "NETOPIA-MIB", "atportXIndex"))
if mibBuilder.loadTexts: atportXEntry.setStatus('mandatory')
atportXIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportXIndex.setStatus('mandatory')
atportXHide = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("visible", 1), ("hidden", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportXHide.setStatus('mandatory')
atportXSeed = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("softseed", 2), ("hardseed", 3), ("noseed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportXSeed.setStatus('mandatory')
atportZoneTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 2), )
if mibBuilder.loadTexts: atportZoneTable.setStatus('mandatory')
atportZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 2, 1), ).setIndexNames((0, "NETOPIA-MIB", "atportZonePort"), (0, "NETOPIA-MIB", "atportZoneName"))
if mibBuilder.loadTexts: atportZoneEntry.setStatus('mandatory')
atportZonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZonePort.setStatus('mandatory')
atportZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZoneName.setStatus('mandatory')
atportZoneDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("notDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZoneDefault.setStatus('mandatory')
atportZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportZoneStatus.setStatus('mandatory')
atportTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 3), )
if mibBuilder.loadTexts: atportTrafficTable.setStatus('mandatory')
atportTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 3, 1), ).setIndexNames((0, "NETOPIA-MIB", "atportTrafficIndex"))
if mibBuilder.loadTexts: atportTrafficEntry.setStatus('mandatory')
atportTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportTrafficIndex.setStatus('mandatory')
atportTrafficRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportTrafficRxBytes.setStatus('mandatory')
atportTrafficRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportTrafficRxPackets.setStatus('mandatory')
atportTrafficTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportTrafficTxBytes.setStatus('mandatory')
atportTrafficTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atportTrafficTxPackets.setStatus('mandatory')
deviceNBPObject = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceNBPObject.setStatus('mandatory')
macipSupport = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("ipSubnetting", 2), ("kipForwarding", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macipSupport.setStatus('mandatory')
macipIpSubIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macipIpSubIpAddr.setStatus('mandatory')
macipIpSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macipIpSubNetMask.setStatus('mandatory')
macipFirstClientIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macipFirstClientIpAddr.setStatus('mandatory')
macipNumStaticAddrs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macipNumStaticAddrs.setStatus('mandatory')
macipNumDynamicAddrs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macipNumDynamicAddrs.setStatus('mandatory')
macipMaxAddrs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipMaxAddrs.setStatus('mandatory')
macipUnusedDynamicAddrs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipUnusedDynamicAddrs.setStatus('mandatory')
macipAssignRequests = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipAssignRequests.setStatus('mandatory')
macipServerRequests = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipServerRequests.setStatus('mandatory')
macipRefusedAssignRequests = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipRefusedAssignRequests.setStatus('mandatory')
macipBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipBadRequests.setStatus('mandatory')
macipForwardedAtFrames = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipForwardedAtFrames.setStatus('mandatory')
macipForwardedAtOctets = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipForwardedAtOctets.setStatus('mandatory')
macipDroppedAtFrames = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipDroppedAtFrames.setStatus('mandatory')
macipForwardedIpFrames = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipForwardedIpFrames.setStatus('mandatory')
macipForwardedIpOctets = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipForwardedIpOctets.setStatus('mandatory')
macipDroppedIpFrames = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipDroppedIpFrames.setStatus('mandatory')
macipClientTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 19), )
if mibBuilder.loadTexts: macipClientTable.setStatus('mandatory')
macipClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 19, 1), ).setIndexNames((0, "NETOPIA-MIB", "macipClientIpAddr"))
if mibBuilder.loadTexts: macipClientEntry.setStatus('mandatory')
macipClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 19, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipClientIpAddr.setStatus('mandatory')
macipClientIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipClientIpAddrType.setStatus('mandatory')
macipClientAtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 19, 1, 3), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipClientAtAddr.setStatus('mandatory')
macipClientIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 7, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macipClientIdleTime.setStatus('mandatory')
dhcpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1))
dhcpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2))
dhcpSupport = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSupport.setStatus('mandatory')
dhcpFirstClientAddr = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpFirstClientAddr.setStatus('mandatory')
dhcpNumClientAddrs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpNumClientAddrs.setStatus('mandatory')
dhcpMaxClientAddrs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpMaxClientAddrs.setStatus('mandatory')
dhcpServerName = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerName.setStatus('mandatory')
dhcpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6))
dhcpOptionTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 1), )
if mibBuilder.loadTexts: dhcpOptionTable.setStatus('mandatory')
dhcpOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 1, 1), ).setIndexNames((0, "NETOPIA-MIB", "dhcpOptionCode"))
if mibBuilder.loadTexts: dhcpOptionEntry.setStatus('mandatory')
dhcpOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionCode.setStatus('mandatory')
dhcpOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionName.setStatus('mandatory')
dhcpOptionValueObject = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionValueObject.setStatus('mandatory')
dhcpOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("beingServed", 1), ("notBeingServed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOptionStatus.setStatus('mandatory')
dhcpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDefaultGateway.setStatus('mandatory')
dhcpDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 3), )
if mibBuilder.loadTexts: dhcpDNSServerTable.setStatus('mandatory')
dhcpDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 3, 1), ).setIndexNames((0, "NETOPIA-MIB", "dhcpDNSServerIndex"))
if mibBuilder.loadTexts: dhcpDNSServerEntry.setStatus('mandatory')
dhcpDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDNSServerIndex.setStatus('mandatory')
dhcpDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDNSServerAddress.setStatus('mandatory')
dhcpDNSServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDNSServerStatus.setStatus('mandatory')
dhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDomainName.setStatus('mandatory')
dhcpNetBiosNameServer = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpNetBiosNameServer.setStatus('mandatory')
dhcpNetBiosTcpNodeType = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("nodeTypeB", 1), ("nodeTypeP", 2), ("nodeTypeM", 4), ("nodeTypeH", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpNetBiosTcpNodeType.setStatus('mandatory')
dhcpNetBiosTcpScope = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 1, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpNetBiosTcpScope.setStatus('mandatory')
dhcpUnassignedClientAddrs = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpUnassignedClientAddrs.setStatus('mandatory')
dhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 2), )
if mibBuilder.loadTexts: dhcpClientTable.setStatus('mandatory')
dhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 2, 1), ).setIndexNames((0, "NETOPIA-MIB", "dhcpClientIpAddr"))
if mibBuilder.loadTexts: dhcpClientEntry.setStatus('mandatory')
dhcpClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientIpAddr.setStatus('mandatory')
dhcpClientIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientIdentifier.setStatus('mandatory')
dhcpClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offered", 1), ("leased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientState.setStatus('mandatory')
dhcpClientTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientTimeLeft.setStatus('mandatory')
dhcpMRBindingTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 3), )
if mibBuilder.loadTexts: dhcpMRBindingTable.setStatus('mandatory')
dhcpMRBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 3, 1), ).setIndexNames((0, "NETOPIA-MIB", "dhcpMRBindingIpAddr"))
if mibBuilder.loadTexts: dhcpMRBindingEntry.setStatus('mandatory')
dhcpMRBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpMRBindingIpAddr.setStatus('mandatory')
dhcpMRBindingClientIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 8, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpMRBindingClientIdentifier.setStatus('mandatory')
aurpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1))
aurpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2))
aurpTunCfgTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1), )
if mibBuilder.loadTexts: aurpTunCfgTable.setStatus('mandatory')
aurpTunCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpTunCfgPortIndex"))
if mibBuilder.loadTexts: aurpTunCfgEntry.setStatus('mandatory')
aurpTunCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunCfgPortIndex.setStatus('mandatory')
aurpTunCfgSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpTunCfgSupport.setStatus('mandatory')
aurpTunCfgAcceptAnyPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acceptAnyPartner", 1), ("dontAcceptAnyPartner", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpTunCfgAcceptAnyPartner.setStatus('mandatory')
aurpTunCfgNetworkRemapping = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpTunCfgNetworkRemapping.setStatus('mandatory')
aurpTunCfgClustering = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpTunCfgClustering.setStatus('mandatory')
aurpTunCfgHopCountReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpTunCfgHopCountReduction.setStatus('mandatory')
aurpRemapRangeCfgTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 2), )
if mibBuilder.loadTexts: aurpRemapRangeCfgTable.setStatus('mandatory')
aurpRemapRangeCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 2, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpRemapRangeCfgPortIndex"), (0, "NETOPIA-MIB", "aurpRemapRangeCfgIndex"))
if mibBuilder.loadTexts: aurpRemapRangeCfgEntry.setStatus('mandatory')
aurpRemapRangeCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapRangeCfgPortIndex.setStatus('mandatory')
aurpRemapRangeCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapRangeCfgIndex.setStatus('mandatory')
aurpRemapRangeCfgNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 2, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapRangeCfgNetStart.setStatus('mandatory')
aurpRemapRangeCfgNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 2, 1, 4), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpRemapRangeCfgNetEnd.setStatus('mandatory')
aurpCfgPartnerTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 3), )
if mibBuilder.loadTexts: aurpCfgPartnerTable.setStatus('mandatory')
aurpCfgPartnerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 3, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpCfgPartnerPortIndex"), (0, "NETOPIA-MIB", "aurpCfgPartnerName"))
if mibBuilder.loadTexts: aurpCfgPartnerEntry.setStatus('mandatory')
aurpCfgPartnerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpCfgPartnerPortIndex.setStatus('mandatory')
aurpCfgPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 3, 1, 2), HostNameOrIpAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpCfgPartnerName.setStatus('mandatory')
aurpCfgPartnerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpCfgPartnerIpAddr.setStatus('mandatory')
aurpCfgPartnerInitiateConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiate", 1), ("dontInitiate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpCfgPartnerInitiateConnection.setStatus('mandatory')
aurpCfgPartnerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aurpCfgPartnerStatus.setStatus('mandatory')
aurpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1), )
if mibBuilder.loadTexts: aurpTunnelTable.setStatus('mandatory')
aurpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpTunnelPortIndex"))
if mibBuilder.loadTexts: aurpTunnelEntry.setStatus('mandatory')
aurpTunnelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelPortIndex.setStatus('mandatory')
aurpTunnelPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("serialPpp", 3), ("serialNonStandard", 4), ("frameRelay", 5), ("x25", 6), ("osi", 7), ("decnetIV", 8), ("ipx", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelPortType.setStatus('mandatory')
aurpTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("hasActiveConnections", 2), ("noActiveConnections", 3), ("inactive", 4), ("inactiveLoopDetected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelStatus.setStatus('mandatory')
aurpTunnelAcceptAnyPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("dontAccept", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelAcceptAnyPartner.setStatus('mandatory')
aurpTunnelNetworkRemapping = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelNetworkRemapping.setStatus('mandatory')
aurpTunnelClustering = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelClustering.setStatus('mandatory')
aurpTunnelHopCountReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelHopCountReduction.setStatus('mandatory')
aurpTunnelDomainIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelDomainIdentifier.setStatus('mandatory')
aurpTunnelOpenRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelOpenRequests.setStatus('mandatory')
aurpTunnelRouterDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelRouterDowns.setStatus('mandatory')
aurpTunnelRemapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelRemapErrors.setStatus('mandatory')
aurpTunnelClusterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelClusterErrors.setStatus('mandatory')
aurpTunnelBrokenConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelBrokenConnections.setStatus('mandatory')
aurpTunnelInvalidVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelInvalidVersionErrors.setStatus('mandatory')
aurpTunnelAuthenticationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpTunnelAuthenticationErrors.setStatus('mandatory')
aurpConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2), )
if mibBuilder.loadTexts: aurpConnectionTable.setStatus('mandatory')
aurpConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpConnectionPortIndex"), (0, "NETOPIA-MIB", "aurpConnectionIndex"))
if mibBuilder.loadTexts: aurpConnectionEntry.setStatus('mandatory')
aurpConnectionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionPortIndex.setStatus('mandatory')
aurpConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionIndex.setStatus('mandatory')
aurpConnectionAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionAddress.setStatus('mandatory')
aurpConnectionSentRIs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionSentRIs.setStatus('mandatory')
aurpConnectionRecvRIs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionRecvRIs.setStatus('mandatory')
aurpConnectionSentZIs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionSentZIs.setStatus('mandatory')
aurpConnectionRecvZIs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionRecvZIs.setStatus('mandatory')
aurpConnectionSentGZNs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionSentGZNs.setStatus('mandatory')
aurpConnectionRecvGZNs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionRecvGZNs.setStatus('mandatory')
aurpConnectionSentGDZLs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionSentGDZLs.setStatus('mandatory')
aurpConnectionRecvGDZLs = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionRecvGDZLs.setStatus('mandatory')
aurpConnectionBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionBadSequence.setStatus('mandatory')
aurpConnectionUpdateSendingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionUpdateSendingRate.setStatus('mandatory')
aurpConnectionLastHeardFromTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpConnectionLastHeardFromTimeout.setStatus('mandatory')
aurpRemapRangeTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 3), )
if mibBuilder.loadTexts: aurpRemapRangeTable.setStatus('mandatory')
aurpRemapRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 3, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpRemapRangePortIndex"), (0, "NETOPIA-MIB", "aurpRemapRangeNetStart"))
if mibBuilder.loadTexts: aurpRemapRangeEntry.setStatus('mandatory')
aurpRemapRangePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapRangePortIndex.setStatus('mandatory')
aurpRemapRangeNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 3, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapRangeNetStart.setStatus('mandatory')
aurpRemapRangeNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 3, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapRangeNetEnd.setStatus('mandatory')
aurpRemapRangeRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapRangeRouterAddress.setStatus('mandatory')
aurpRemapTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4), )
if mibBuilder.loadTexts: aurpRemapTable.setStatus('mandatory')
aurpRemapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpRemapPortIndex"), (0, "NETOPIA-MIB", "aurpRemapNetStart"))
if mibBuilder.loadTexts: aurpRemapEntry.setStatus('mandatory')
aurpRemapPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapPortIndex.setStatus('mandatory')
aurpRemapNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4, 1, 2), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapNetStart.setStatus('mandatory')
aurpRemapNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapNetEnd.setStatus('mandatory')
aurpRemapUIDI = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapUIDI.setStatus('mandatory')
aurpRemapUINetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4, 1, 5), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapUINetStart.setStatus('mandatory')
aurpRemapUINetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 4, 1, 6), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpRemapUINetEnd.setStatus('mandatory')
aurpClusterTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5), )
if mibBuilder.loadTexts: aurpClusterTable.setStatus('mandatory')
aurpClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpClusterPortIndex"), (0, "NETOPIA-MIB", "aurpClusterIndex"))
if mibBuilder.loadTexts: aurpClusterEntry.setStatus('mandatory')
aurpClusterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterPortIndex.setStatus('mandatory')
aurpClusterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterIndex.setStatus('mandatory')
aurpClusterNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterNetStart.setStatus('mandatory')
aurpClusterNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1, 4), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterNetEnd.setStatus('mandatory')
aurpClusterUIDI = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterUIDI.setStatus('mandatory')
aurpClusterNumberOfNetworks = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterNumberOfNetworks.setStatus('mandatory')
aurpClusterHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterHopCount.setStatus('mandatory')
aurpClusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 6), )
if mibBuilder.loadTexts: aurpClusterMemberTable.setStatus('mandatory')
aurpClusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 6, 1), ).setIndexNames((0, "NETOPIA-MIB", "aurpClusterMemberPortIndex"), (0, "NETOPIA-MIB", "aurpClusterMemberIndex"), (0, "NETOPIA-MIB", "aurpClusterMemberUINetStart"))
if mibBuilder.loadTexts: aurpClusterMemberEntry.setStatus('mandatory')
aurpClusterMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterMemberPortIndex.setStatus('mandatory')
aurpClusterMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterMemberIndex.setStatus('mandatory')
aurpClusterMemberUINetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 6, 1, 3), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterMemberUINetStart.setStatus('mandatory')
aurpClusterMemberUINetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 9, 2, 6, 1, 4), ATNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aurpClusterMemberUINetEnd.setStatus('mandatory')
deviceRestart = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dontRestart", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceRestart.setStatus('mandatory')
restoreDefaultConfig = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dontRestore", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restoreDefaultConfig.setStatus('mandatory')
tftpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3))
tftpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpMaxRetries.setStatus('mandatory')
tftpServerName = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 2), HostNameOrIpAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerName.setStatus('mandatory')
tftpFwFileName = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwFileName.setStatus('mandatory')
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('mandatory')
tftpReadFw = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readingFw", 1), ("notReadingFw", 2), ("readFw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpReadFw.setStatus('mandatory')
tftpReadConfig = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readingConfig", 1), ("notReadingConfig", 2), ("readConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpReadConfig.setStatus('mandatory')
tftpWriteConfig = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("writingConfig", 1), ("notWritingConfig", 2), ("writeConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpWriteConfig.setStatus('mandatory')
tftpCurrentTransferOctets = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 10, 3, 8), UInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCurrentTransferOctets.setStatus('mandatory')
snmpIpTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 1), )
if mibBuilder.loadTexts: snmpIpTrapRcvrTable.setStatus('mandatory')
snmpIpTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 1, 1), ).setIndexNames((0, "NETOPIA-MIB", "snmpIpTrapRcvrName"))
if mibBuilder.loadTexts: snmpIpTrapRcvrEntry.setStatus('mandatory')
snmpIpTrapRcvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 1, 1, 1), HostNameOrIpAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpIpTrapRcvrName.setStatus('mandatory')
snmpIpTrapRcvrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpIpTrapRcvrCommunity.setStatus('mandatory')
snmpIpTrapRcvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpIpTrapRcvrIpAddress.setStatus('mandatory')
snmpIpTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpIpTrapRcvrStatus.setStatus('mandatory')
snmpAtTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2), )
if mibBuilder.loadTexts: snmpAtTrapRcvrTable.setStatus('mandatory')
snmpAtTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2, 1), ).setIndexNames((0, "NETOPIA-MIB", "snmpAtTrapRcvrNBPObject"), (0, "NETOPIA-MIB", "snmpAtTrapRcvrNBPZone"))
if mibBuilder.loadTexts: snmpAtTrapRcvrEntry.setStatus('mandatory')
snmpAtTrapRcvrNBPObject = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAtTrapRcvrNBPObject.setStatus('mandatory')
snmpAtTrapRcvrNBPZone = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAtTrapRcvrNBPZone.setStatus('mandatory')
snmpAtTrapRcvrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAtTrapRcvrCommunity.setStatus('mandatory')
snmpAtTrapRcvrDdpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2, 1, 4), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAtTrapRcvrDdpAddress.setStatus('mandatory')
snmpAtTrapRcvrLastConfirmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAtTrapRcvrLastConfirmTime.setStatus('mandatory')
snmpAtTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAtTrapRcvrStatus.setStatus('mandatory')
snmpAtTrapRcvrCacheEntryLifetime = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAtTrapRcvrCacheEntryLifetime.setStatus('mandatory')
snmpUnAuthIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUnAuthIpAddr.setStatus('mandatory')
snmpUnAuthCommunity = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 11, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUnAuthCommunity.setStatus('mandatory')
isdnSwitchType = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ntDms100Custom", 1), ("att5essCustom", 2), ("nationalIsdn1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnSwitchType.setStatus('mandatory')
isdnDirNum1 = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDirNum1.setStatus('mandatory')
isdnSpid1 = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnSpid1.setStatus('mandatory')
isdnDirNum2 = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDirNum2.setStatus('mandatory')
isdnSpid2 = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnSpid2.setStatus('mandatory')
connProfileTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6), )
if mibBuilder.loadTexts: connProfileTable.setStatus('mandatory')
connProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1), ).setIndexNames((0, "NETOPIA-MIB", "connProfIndex"))
if mibBuilder.loadTexts: connProfileEntry.setStatus('mandatory')
connProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connProfIndex.setStatus('mandatory')
connProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 2), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfName.setStatus('mandatory')
connProfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfEnable.setStatus('mandatory')
connProfPermittedUse = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dialIn", 1), ("dialOut", 2), ("dialInOrOut", 3))).clone('dialInOrOut')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPermittedUse.setStatus('mandatory')
connProfIsdnDialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 5), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfIsdnDialNum.setStatus('mandatory')
connProfIsdnBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneBChannel", 1), ("twoBChannels", 2), ("dynamicBandwidth", 3))).clone('oneBChannel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfIsdnBandwidth.setStatus('mandatory')
connProfDialOnDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfDialOnDemand.setStatus('mandatory')
connProfDialBack = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfDialBack.setStatus('mandatory')
connProfIsdnOutDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("place64KCall", 1), ("place56KCall", 2))).clone('place56KCall')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfIsdnOutDataRate.setStatus('mandatory')
connProfRemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 10), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfRemIpAddr.setStatus('mandatory')
connProfRemSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 11), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfRemSubnetMask.setStatus('mandatory')
connProfRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dontRxRip", 1), ("rxRip", 2))).clone('dontRxRip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfRxRip.setStatus('mandatory')
connProfTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dontTxRip", 1), ("txRip", 2))).clone('dontTxRip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfTxRip.setStatus('mandatory')
connProfFilterSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfFilterSetIndex.setStatus('mandatory')
connProfIdleSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfIdleSeconds.setStatus('mandatory')
connProfPppMaxRecvUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 16), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPppMaxRecvUnit.setStatus('mandatory')
connProfPppLinkCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("negotiateStacCompression", 1), ("noCompression", 2))).clone('noCompression')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPppLinkCompression.setStatus('mandatory')
connProfPppSendAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authNone", 1), ("authPAP", 2), ("authCHAP", 3))).clone('authNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPppSendAuthProt.setStatus('mandatory')
connProfPppSendAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 19), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPppSendAuthName.setStatus('mandatory')
connProfPppSendAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 20), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPppSendAuthSecret.setStatus('mandatory')
connProfPppRecvAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 21), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPppRecvAuthName.setStatus('mandatory')
connProfPppRecvAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 22), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfPppRecvAuthSecret.setStatus('mandatory')
connProfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfStatus.setStatus('mandatory')
ansProfConnProfRequired = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connProfRequired", 1), ("connProfNotRequired", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfConnProfRequired.setStatus('mandatory')
ansProfIsdnBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneBChannel", 1), ("twoBChannels", 2), ("dynamicBandwidth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfIsdnBandwidth.setStatus('mandatory')
ansProfIsdnInForce56K = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dontForce56K", 1), ("force56K", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfIsdnInForce56K.setStatus('mandatory')
ansProfRxRip = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dontRxRip", 1), ("rxRip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfRxRip.setStatus('mandatory')
ansProfTxRip = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dontTxRip", 1), ("txRip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfTxRip.setStatus('mandatory')
ansProfFilterSetIndex = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfFilterSetIndex.setStatus('mandatory')
ansProfIdleSeconds = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfIdleSeconds.setStatus('mandatory')
ansProfPppMaxRecvUnit = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfPppMaxRecvUnit.setStatus('mandatory')
ansProfPppLinkCompression = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("negotiateStacCompression", 1), ("noCompression", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfPppLinkCompression.setStatus('mandatory')
ansProfPppRecvAuthProt = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authNone", 1), ("authPAP", 2), ("authCHAP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfPppRecvAuthProt.setStatus('mandatory')
ansProfChapChallengeName = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansProfChapChallengeName.setStatus('mandatory')
schedConnTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18), )
if mibBuilder.loadTexts: schedConnTable.setStatus('mandatory')
schedConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1), ).setIndexNames((0, "NETOPIA-MIB", "schedConnIndex"))
if mibBuilder.loadTexts: schedConnEntry.setStatus('mandatory')
schedConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedConnIndex.setStatus('mandatory')
schedConnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedConnEnable.setStatus('mandatory')
schedConnDayMask = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedConnDayMask.setStatus('mandatory')
schedConnStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(12, 12), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedConnStartTime.setStatus('mandatory')
schedConnDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedConnDuration.setStatus('mandatory')
schedConnRemPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedConnRemPeer.setStatus('mandatory')
schedConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 12, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedConnStatus.setStatus('mandatory')
consolePortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortSpeed.setStatus('mandatory')
consolePortDataBits = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortDataBits.setStatus('mandatory')
consolePortStopBits = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("onePointFive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortStopBits.setStatus('mandatory')
consolePortParity = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePortParity.setStatus('mandatory')
consolePortRxChars = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consolePortRxChars.setStatus('mandatory')
consolePortTxChars = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consolePortTxChars.setStatus('mandatory')
consolePortParityErrors = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consolePortParityErrors.setStatus('mandatory')
consolePortFramingErrors = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consolePortFramingErrors.setStatus('mandatory')
consolePortOverrunErrors = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consolePortOverrunErrors.setStatus('mandatory')
pcCardSlotTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 1), )
if mibBuilder.loadTexts: pcCardSlotTable.setStatus('mandatory')
pcCardSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 1, 1), ).setIndexNames((0, "NETOPIA-MIB", "pcCardSlotIndex"))
if mibBuilder.loadTexts: pcCardSlotEntry.setStatus('mandatory')
pcCardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardSlotIndex.setStatus('mandatory')
pcCardSlotCardPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardSlotCardPresent.setStatus('mandatory')
pcCardCardTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 2), )
if mibBuilder.loadTexts: pcCardCardTable.setStatus('mandatory')
pcCardCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 2, 1), ).setIndexNames((0, "NETOPIA-MIB", "pcCardSlotIndex"))
if mibBuilder.loadTexts: pcCardCardEntry.setStatus('mandatory')
pcCardCardMfrName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardCardMfrName.setStatus('mandatory')
pcCardCardProdName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardCardProdName.setStatus('mandatory')
pcCardCardProdInfo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardCardProdInfo1.setStatus('mandatory')
pcCardCardProdInfo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardCardProdInfo2.setStatus('mandatory')
pcCardCardFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardCardFunction.setStatus('mandatory')
pcCardModemTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 3), )
if mibBuilder.loadTexts: pcCardModemTable.setStatus('mandatory')
pcCardModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 3, 1), ).setIndexNames((0, "NETOPIA-MIB", "pcCardSlotIndex"))
if mibBuilder.loadTexts: pcCardModemEntry.setStatus('mandatory')
pcCardModemActive = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemActive.setStatus('mandatory')
pcCardModemSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemSessions.setStatus('mandatory')
pcCardModemTotalRxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemTotalRxChars.setStatus('mandatory')
pcCardModemTotalTxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemTotalTxChars.setStatus('mandatory')
pcCardModemConnTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4), )
if mibBuilder.loadTexts: pcCardModemConnTable.setStatus('mandatory')
pcCardModemConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4, 1), ).setIndexNames((0, "NETOPIA-MIB", "pcCardSlotIndex"))
if mibBuilder.loadTexts: pcCardModemConnEntry.setStatus('mandatory')
pcCardModemConnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemConnSpeed.setStatus('mandatory')
pcCardModemConnDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemConnDataBits.setStatus('mandatory')
pcCardModemConnStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("onePointFive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemConnStopBits.setStatus('mandatory')
pcCardModemConnParity = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemConnParity.setStatus('mandatory')
pcCardModemConnRxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemConnRxChars.setStatus('mandatory')
pcCardModemConnTxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 14, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcCardModemConnTxChars.setStatus('mandatory')
eventLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogEnable.setStatus('mandatory')
eventLogSize = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSize.setStatus('mandatory')
eventLogCount = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogCount.setStatus('mandatory')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 4), )
if mibBuilder.loadTexts: eventLogTable.setStatus('mandatory')
eventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 4, 1), ).setIndexNames((0, "NETOPIA-MIB", "eventLogIndex"))
if mibBuilder.loadTexts: eventLogEntry.setStatus('mandatory')
eventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogIndex.setStatus('mandatory')
eventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogTime.setStatus('mandatory')
eventLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDescr.setStatus('mandatory')
eventLogDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDetail.setStatus('mandatory')
eventLogRawEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRawEntry.setStatus('mandatory')
isdnLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnLogEnable.setStatus('mandatory')
isdnLogSize = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnLogSize.setStatus('mandatory')
isdnLogCount = MibScalar((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnLogCount.setStatus('mandatory')
isdnLogTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 8), )
if mibBuilder.loadTexts: isdnLogTable.setStatus('mandatory')
isdnLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 8, 1), ).setIndexNames((0, "NETOPIA-MIB", "eventLogIndex"))
if mibBuilder.loadTexts: isdnLogEntry.setStatus('mandatory')
isdnLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnLogIndex.setStatus('mandatory')
isdnLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnLogTime.setStatus('mandatory')
isdnLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnLogDescr.setStatus('mandatory')
isdnLogDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnLogDetail.setStatus('mandatory')
isdnLogRawEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 15, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnLogRawEntry.setStatus('mandatory')
filterSetTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 1), )
if mibBuilder.loadTexts: filterSetTable.setStatus('mandatory')
filterSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 1, 1), ).setIndexNames((0, "NETOPIA-MIB", "filterSetIndex"))
if mibBuilder.loadTexts: filterSetEntry.setStatus('mandatory')
filterSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterSetIndex.setStatus('mandatory')
filterSetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterSetEnable.setStatus('mandatory')
filterSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 1, 1, 3), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSetName.setStatus('mandatory')
filterSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterSetStatus.setStatus('mandatory')
ipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2), )
if mibBuilder.loadTexts: ipFilterTable.setStatus('mandatory')
ipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1), ).setIndexNames((0, "NETOPIA-MIB", "filterSetIndex"), (0, "NETOPIA-MIB", "ipFilterDirection"), (0, "NETOPIA-MIB", "ipFilterIndex"))
if mibBuilder.loadTexts: ipFilterEntry.setStatus('mandatory')
ipFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterDirection.setStatus('mandatory')
ipFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterIndex.setStatus('mandatory')
ipFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterEnable.setStatus('mandatory')
ipFilterForward = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterForward.setStatus('mandatory')
ipFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 5), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcMask.setStatus('mandatory')
ipFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 6), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcAddr.setStatus('mandatory')
ipFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 7), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstMask.setStatus('mandatory')
ipFilterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 8), IpAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstAddr.setStatus('mandatory')
ipFilterProtType = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterProtType.setStatus('mandatory')
ipFilterSrcPortComparison = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("lt", 2), ("le", 3), ("eq", 4), ("ne", 5), ("gt", 6), ("ge", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcPortComparison.setStatus('mandatory')
ipFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcPort.setStatus('mandatory')
ipFilterDstPortComparison = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("lt", 2), ("le", 3), ("eq", 4), ("ne", 5), ("gt", 6), ("ge", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstPortComparison.setStatus('mandatory')
ipFilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstPort.setStatus('mandatory')
ipFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterStatus.setStatus('mandatory')
genericFilterTable = MibTable((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3), )
if mibBuilder.loadTexts: genericFilterTable.setStatus('mandatory')
genericFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1), ).setIndexNames((0, "NETOPIA-MIB", "filterSetIndex"), (0, "NETOPIA-MIB", "genericFilterDirection"), (0, "NETOPIA-MIB", "genericFilterIndex"))
if mibBuilder.loadTexts: genericFilterEntry.setStatus('mandatory')
genericFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericFilterDirection.setStatus('mandatory')
genericFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericFilterIndex.setStatus('mandatory')
genericFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterEnable.setStatus('mandatory')
genericFilterForward = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterForward.setStatus('mandatory')
genericFilterOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterOffset.setStatus('mandatory')
genericFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterMask.setStatus('mandatory')
genericFilterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterValue.setStatus('mandatory')
genericFilterComparison = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("lt", 2), ("le", 3), ("eq", 4), ("ne", 5), ("gt", 6), ("ge", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterComparison.setStatus('mandatory')
genericFilterChained = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chained", 1), ("notChained", 2))).clone('notChained')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterChained.setStatus('mandatory')
genericFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 304, 1, 3, 1, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericFilterStatus.setStatus('mandatory')
mibBuilder.exportSymbols("NETOPIA-MIB", genericFilterOffset=genericFilterOffset, aurpClusterMemberTable=aurpClusterMemberTable, macipForwardedIpFrames=macipForwardedIpFrames, genericFilterChained=genericFilterChained, snmpIpTrapRcvrName=snmpIpTrapRcvrName, ansProfPppRecvAuthProt=ansProfPppRecvAuthProt, tftpReadFw=tftpReadFw, aurpParams=aurpParams, aurpConnectionRecvGDZLs=aurpConnectionRecvGDZLs, ripEnRxEnable=ripEnRxEnable, connProfPppSendAuthName=connProfPppSendAuthName, ipFilterProtType=ipFilterProtType, ipFilterSrcMask=ipFilterSrcMask, ripParams=ripParams, filterSetEntry=filterSetEntry, genericFilterComparison=genericFilterComparison, ansProfIdleSeconds=ansProfIdleSeconds, tftpMaxRetries=tftpMaxRetries, dhcpDNSServerEntry=dhcpDNSServerEntry, bootParams=bootParams, ipFilterDstPortComparison=ipFilterDstPortComparison, aurpTunnelNetworkRemapping=aurpTunnelNetworkRemapping, eventLogTable=eventLogTable, deviceRestart=deviceRestart, aurpClusterMemberPortIndex=aurpClusterMemberPortIndex, isdnLogTable=isdnLogTable, connProfIsdnBandwidth=connProfIsdnBandwidth, macipClientIpAddrType=macipClientIpAddrType, consolePortOverrunErrors=consolePortOverrunErrors, connProfEnable=connProfEnable, sysStats=sysStats, ipFilterStatus=ipFilterStatus, aurpConnectionUpdateSendingRate=aurpConnectionUpdateSendingRate, aurpTunnelPortIndex=aurpTunnelPortIndex, snmpAtTrapRcvrCacheEntryLifetime=snmpAtTrapRcvrCacheEntryLifetime, ipFilterForward=ipFilterForward, ipFilterTable=ipFilterTable, currentBufs=currentBufs, atportZonePort=atportZonePort, atportXIndex=atportXIndex, ipBcastForm=ipBcastForm, snmpAtTrapRcvrStatus=snmpAtTrapRcvrStatus, connProfIndex=connProfIndex, connProfStatus=connProfStatus, snmpIpTrapRcvrTable=snmpIpTrapRcvrTable, snmpAtTrapRcvrCommunity=snmpAtTrapRcvrCommunity, aurpTunnelInvalidVersionErrors=aurpTunnelInvalidVersionErrors, ipFilterDirection=ipFilterDirection, macipDroppedAtFrames=macipDroppedAtFrames, dhcpOptionCode=dhcpOptionCode, aurpClusterNumberOfNetworks=aurpClusterNumberOfNetworks, isdnLogEntry=isdnLogEntry, atportZoneEntry=atportZoneEntry, aurpRemapUINetEnd=aurpRemapUINetEnd, dhcpNumClientAddrs=dhcpNumClientAddrs, schedConnDayMask=schedConnDayMask, dhcpMRBindingEntry=dhcpMRBindingEntry, eventLogEnable=eventLogEnable, eventLogDetail=eventLogDetail, aurpTunCfgAcceptAnyPartner=aurpTunCfgAcceptAnyPartner, aurpCfgPartnerIpAddr=aurpCfgPartnerIpAddr, ipDNSServerEntry=ipDNSServerEntry, ipDNSServerTable=ipDNSServerTable, aurpRemapNetStart=aurpRemapNetStart, snmpAtTrapRcvrDdpAddress=snmpAtTrapRcvrDdpAddress, eventLogSize=eventLogSize, connProfDialOnDemand=connProfDialOnDemand, macipClientEntry=macipClientEntry, aurpCfgPartnerStatus=aurpCfgPartnerStatus, connProfPppRecvAuthName=connProfPppRecvAuthName, dhcpClientTimeLeft=dhcpClientTimeLeft, pcCardModemSessions=pcCardModemSessions, genericFilterDirection=genericFilterDirection, connProfIdleSeconds=connProfIdleSeconds, snmpUnAuthCommunity=snmpUnAuthCommunity, connProfileEntry=connProfileEntry, aurpRemapRangeCfgTable=aurpRemapRangeCfgTable, pcCardModemTable=pcCardModemTable, aurpTunnelDomainIdentifier=aurpTunnelDomainIdentifier, aurpCfgPartnerTable=aurpCfgPartnerTable, snmpIpTrapRcvrStatus=snmpIpTrapRcvrStatus, pcCardModemEntry=pcCardModemEntry, filterParams=filterParams, totalFEPROM=totalFEPROM, aurpRemapRangeRouterAddress=aurpRemapRangeRouterAddress, isdnDirNum1=isdnDirNum1, ansProfPppMaxRecvUnit=ansProfPppMaxRecvUnit, atportTrafficTable=atportTrafficTable, aurpRemapRangeEntry=aurpRemapRangeEntry, ATNetworkNumber=ATNetworkNumber, filterSetEnable=filterSetEnable, ipFilterEntry=ipFilterEntry, aurpTunnelHopCountReduction=aurpTunnelHopCountReduction, macipSupport=macipSupport, ipAddr=ipAddr, ipDefaultGateway=ipDefaultGateway, dhcpDomainName=dhcpDomainName, macipClientTable=macipClientTable, aurpClusterMemberEntry=aurpClusterMemberEntry, aurpTunnelBrokenConnections=aurpTunnelBrokenConnections, aurpTunnelAcceptAnyPartner=aurpTunnelAcceptAnyPartner, macipDroppedIpFrames=macipDroppedIpFrames, isdnLogIndex=isdnLogIndex, aurpInfo=aurpInfo, dhcpClientState=dhcpClientState, pcCardModemConnStopBits=pcCardModemConnStopBits, aurpTunnelAuthenticationErrors=aurpTunnelAuthenticationErrors, modelNumber=modelNumber, aurpRemapRangeCfgPortIndex=aurpRemapRangeCfgPortIndex, macipServerRequests=macipServerRequests, genericFilterIndex=genericFilterIndex, tftpFwFileName=tftpFwFileName, connProfRemIpAddr=connProfRemIpAddr, aurpClusterPortIndex=aurpClusterPortIndex, macipIpSubIpAddr=macipIpSubIpAddr, pcCardParams=pcCardParams, pcCardCardProdInfo2=pcCardCardProdInfo2, ipFilterSrcPortComparison=ipFilterSrcPortComparison, dhcpDNSServerAddress=dhcpDNSServerAddress, snmpAtTrapRcvrTable=snmpAtTrapRcvrTable, macipClientAtAddr=macipClientAtAddr, ansProfFilterSetIndex=ansProfFilterSetIndex, eventLogRawEntry=eventLogRawEntry, pcCardModemConnTable=pcCardModemConnTable, aurpConnectionIndex=aurpConnectionIndex, deviceNBPObject=deviceNBPObject, aurpTunCfgTable=aurpTunCfgTable, usedRAM=usedRAM, systemClock=systemClock, sysParams=sysParams, consolePortDataBits=consolePortDataBits, dhcpMaxClientAddrs=dhcpMaxClientAddrs, dhcpClientEntry=dhcpClientEntry, filterSetName=filterSetName, pcCardModemConnParity=pcCardModemConnParity, isdnLogTime=isdnLogTime, macipForwardedAtFrames=macipForwardedAtFrames, pcCardCardFunction=pcCardCardFunction, genericFilterEntry=genericFilterEntry, filterSetStatus=filterSetStatus, atportTrafficRxPackets=atportTrafficRxPackets, tftpReadConfig=tftpReadConfig, genericFilterForward=genericFilterForward, snmpAtTrapRcvrLastConfirmTime=snmpAtTrapRcvrLastConfirmTime, aurpClusterTable=aurpClusterTable, atportTrafficIndex=atportTrafficIndex, ipFilterSrcAddr=ipFilterSrcAddr, dhcpClientIpAddr=dhcpClientIpAddr, pcCardSlotEntry=pcCardSlotEntry, netopia=netopia, consolePortFramingErrors=consolePortFramingErrors, macipBadRequests=macipBadRequests, isdnSpid1=isdnSpid1, aurpClusterUIDI=aurpClusterUIDI, aurpCfgPartnerName=aurpCfgPartnerName, dhcpConfig=dhcpConfig, snmpAtTrapRcvrNBPObject=snmpAtTrapRcvrNBPObject, pcCardModemConnSpeed=pcCardModemConnSpeed, ipFilterDstAddr=ipFilterDstAddr, isdnLogDetail=isdnLogDetail, atportTrafficEntry=atportTrafficEntry, productMIBVersion=productMIBVersion, aurpConnectionLastHeardFromTimeout=aurpConnectionLastHeardFromTimeout, pcCardModemConnTxChars=pcCardModemConnTxChars, aurpClusterMemberUINetEnd=aurpClusterMemberUINetEnd, bootTime=bootTime, connProfPppLinkCompression=connProfPppLinkCompression, connProfIsdnOutDataRate=connProfIsdnOutDataRate, ipDNSServerAddress=ipDNSServerAddress, pcCardModemConnRxChars=pcCardModemConnRxChars, tftpParams=tftpParams, restoreDefaultConfig=restoreDefaultConfig, aurpTunnelStatus=aurpTunnelStatus, aurpConnectionRecvGZNs=aurpConnectionRecvGZNs, tftpConfigFileName=tftpConfigFileName, pcCardModemConnEntry=pcCardModemConnEntry, tftpCurrentTransferOctets=tftpCurrentTransferOctets, macipFirstClientIpAddr=macipFirstClientIpAddr, aurpClusterMemberIndex=aurpClusterMemberIndex, atportZoneName=atportZoneName, genericFilterValue=genericFilterValue, eventLogDescr=eventLogDescr, consoleParams=consoleParams, eventLogEntry=eventLogEntry, ansProfPppLinkCompression=ansProfPppLinkCompression, aurpRemapRangeCfgNetStart=aurpRemapRangeCfgNetStart, aurpClusterNetEnd=aurpClusterNetEnd, genericFilterTable=genericFilterTable, aurpConnectionSentGZNs=aurpConnectionSentGZNs, atportXTable=atportXTable, aurpConnectionBadSequence=aurpConnectionBadSequence, macipNumStaticAddrs=macipNumStaticAddrs, aurpRemapRangeCfgNetEnd=aurpRemapRangeCfgNetEnd, connProfTxRip=connProfTxRip, isdnParams=isdnParams, aurpConnectionPortIndex=aurpConnectionPortIndex, ansProfConnProfRequired=ansProfConnProfRequired, pcCardCardEntry=pcCardCardEntry, ipFilterDstMask=ipFilterDstMask, macipUnusedDynamicAddrs=macipUnusedDynamicAddrs, ipDNSServerIndex=ipDNSServerIndex, totalRAM=totalRAM, ipDNSServerStatus=ipDNSServerStatus, averageBufs=averageBufs, dhcpMRBindingIpAddr=dhcpMRBindingIpAddr, macipNumDynamicAddrs=macipNumDynamicAddrs, consolePortParity=consolePortParity, connProfileTable=connProfileTable, isdnSwitchType=isdnSwitchType, dhcpDNSServerTable=dhcpDNSServerTable, pcCardSlotTable=pcCardSlotTable, macipParams=macipParams, filterSetIndex=filterSetIndex, dhcpClientTable=dhcpClientTable, snmpIpTrapRcvrCommunity=snmpIpTrapRcvrCommunity, genericFilterEnable=genericFilterEnable, aurpTunnelClustering=aurpTunnelClustering, connProfFilterSetIndex=connProfFilterSetIndex, aurpTunCfgClustering=aurpTunCfgClustering, aurpRemapPortIndex=aurpRemapPortIndex, aurpTunnelRemapErrors=aurpTunnelRemapErrors, UInteger=UInteger, pcCardModemTotalTxChars=pcCardModemTotalTxChars, connProfRxRip=connProfRxRip, ipEncap=ipEncap, aurpConnectionAddress=aurpConnectionAddress, dhcpDNSServerStatus=dhcpDNSServerStatus, pcCardModemTotalRxChars=pcCardModemTotalRxChars, aurpConnectionEntry=aurpConnectionEntry, dhcpUnassignedClientAddrs=dhcpUnassignedClientAddrs, aurpRemapRangeNetEnd=aurpRemapRangeNetEnd, macipRefusedAssignRequests=macipRefusedAssignRequests, dhcpOptionValueObject=dhcpOptionValueObject, aurpCfgPartnerEntry=aurpCfgPartnerEntry, schedConnIndex=schedConnIndex, aurpRemapUINetStart=aurpRemapUINetStart, aurpRemapUIDI=aurpRemapUIDI, aurpClusterEntry=aurpClusterEntry, aurpRemapTable=aurpRemapTable, ansProfIsdnBandwidth=ansProfIsdnBandwidth, aurpRemapRangeTable=aurpRemapRangeTable, atportTrafficRxBytes=atportTrafficRxBytes, aurpRemapNetEnd=aurpRemapNetEnd, HostNameOrIpAddr=HostNameOrIpAddr, aurpConnectionSentZIs=aurpConnectionSentZIs, connProfRemSubnetMask=connProfRemSubnetMask, aurpRemapRangeCfgEntry=aurpRemapRangeCfgEntry, atParams=atParams, schedConnStartTime=schedConnStartTime, ansProfRxRip=ansProfRxRip, dhcpMRBindingClientIdentifier=dhcpMRBindingClientIdentifier, aurpTunCfgEntry=aurpTunCfgEntry, pcCardCardProdName=pcCardCardProdName, isdnLogRawEntry=isdnLogRawEntry)
mibBuilder.exportSymbols("NETOPIA-MIB", dhcpClientIdentifier=dhcpClientIdentifier, ansProfIsdnInForce56K=ansProfIsdnInForce56K, currentCpuUtil=currentCpuUtil, aurpClusterMemberUINetStart=aurpClusterMemberUINetStart, ipDomainName=ipDomainName, ripEnTxEnable=ripEnTxEnable, dhcpOptions=dhcpOptions, atportZoneStatus=atportZoneStatus, snmpAtTrapRcvrNBPZone=snmpAtTrapRcvrNBPZone, ipNetMask=ipNetMask, atportTrafficTxBytes=atportTrafficTxBytes, hwVersion=hwVersion, ipParams=ipParams, atportXSeed=atportXSeed, aurpRemapRangePortIndex=aurpRemapRangePortIndex, genericFilterStatus=genericFilterStatus, pcCardCardTable=pcCardCardTable, consolePortParityErrors=consolePortParityErrors, atportXEntry=atportXEntry, consolePortStopBits=consolePortStopBits, farallon=farallon, isdnLogSize=isdnLogSize, consolePortRxChars=consolePortRxChars, aurpTunCfgNetworkRemapping=aurpTunCfgNetworkRemapping, ipFilterDstPort=ipFilterDstPort, ipFilterSrcPort=ipFilterSrcPort, ipFilterEnable=ipFilterEnable, tftpWriteConfig=tftpWriteConfig, snmpUnAuthIpAddr=snmpUnAuthIpAddr, connProfName=connProfName, averageCpuUtil=averageCpuUtil, dhcpNetBiosTcpScope=dhcpNetBiosTcpScope, isdnSpid2=isdnSpid2, dhcpMRBindingTable=dhcpMRBindingTable, snmpIpTrapRcvrEntry=snmpIpTrapRcvrEntry, aurpCfgPartnerInitiateConnection=aurpCfgPartnerInitiateConnection, dhcpDNSServerIndex=dhcpDNSServerIndex, filterSetTable=filterSetTable, dhcpOptionEntry=dhcpOptionEntry, eventLogCount=eventLogCount, schedConnStatus=schedConnStatus, fwVersion=fwVersion, macipForwardedAtOctets=macipForwardedAtOctets, aurpCfgPartnerPortIndex=aurpCfgPartnerPortIndex, isdnLogDescr=isdnLogDescr, connProfPppRecvAuthSecret=connProfPppRecvAuthSecret, aurpTunnelEntry=aurpTunnelEntry, tftpServerName=tftpServerName, aurpClusterIndex=aurpClusterIndex, dhcpDefaultGateway=dhcpDefaultGateway, eventLogTime=eventLogTime, ipFilterIndex=ipFilterIndex, aurpConfig=aurpConfig, aurpTunnelTable=aurpTunnelTable, connProfDialBack=connProfDialBack, snmpAtTrapRcvrEntry=snmpAtTrapRcvrEntry, aurpRemapRangeCfgIndex=aurpRemapRangeCfgIndex, atportZoneTable=atportZoneTable, pcCardSlotIndex=pcCardSlotIndex, consolePortSpeed=consolePortSpeed, connProfIsdnDialNum=connProfIsdnDialNum, macipForwardedIpOctets=macipForwardedIpOctets, ansProfTxRip=ansProfTxRip, aurpRemapRangeNetStart=aurpRemapRangeNetStart, usedFEPROM=usedFEPROM, schedConnTable=schedConnTable, atportXHide=atportXHide, aurpConnectionRecvRIs=aurpConnectionRecvRIs, dhcpInfo=dhcpInfo, clockParams=clockParams, atportTrafficTxPackets=atportTrafficTxPackets, pcCardCardMfrName=pcCardCardMfrName, serialNumber=serialNumber, aurpConnectionSentRIs=aurpConnectionSentRIs, dhcpNetBiosTcpNodeType=dhcpNetBiosTcpNodeType, connProfPppSendAuthProt=connProfPppSendAuthProt, aurpTunnelClusterErrors=aurpTunnelClusterErrors, macipIpSubNetMask=macipIpSubNetMask, aurpTunnelOpenRequests=aurpTunnelOpenRequests, dhcpParams=dhcpParams, dhcpServerName=dhcpServerName, logParams=logParams, dhcpNetBiosNameServer=dhcpNetBiosNameServer, macipMaxAddrs=macipMaxAddrs, snmpIpTrapRcvrIpAddress=snmpIpTrapRcvrIpAddress, aurpConnectionRecvZIs=aurpConnectionRecvZIs, schedConnEnable=schedConnEnable, dhcpFirstClientAddr=dhcpFirstClientAddr, isdnLogCount=isdnLogCount, consolePortTxChars=consolePortTxChars, aurpClusterHopCount=aurpClusterHopCount, pcCardModemActive=pcCardModemActive, macipAssignRequests=macipAssignRequests, aurpTunCfgPortIndex=aurpTunCfgPortIndex, aurpClusterNetStart=aurpClusterNetStart, eventLogIndex=eventLogIndex, dhcpSupport=dhcpSupport, schedConnDuration=schedConnDuration, schedConnEntry=schedConnEntry, ansProfChapChallengeName=ansProfChapChallengeName, pcCardModemConnDataBits=pcCardModemConnDataBits, genericFilterMask=genericFilterMask, atportZoneDefault=atportZoneDefault, pcCardSlotCardPresent=pcCardSlotCardPresent, aurpRemapEntry=aurpRemapEntry, connProfPppMaxRecvUnit=connProfPppMaxRecvUnit, macipClientIdleTime=macipClientIdleTime, schedConnRemPeer=schedConnRemPeer, aurpConnectionTable=aurpConnectionTable, connProfPermittedUse=connProfPermittedUse, macipClientIpAddr=macipClientIpAddr, pcCardCardProdInfo1=pcCardCardProdInfo1, isdnDirNum2=isdnDirNum2, aurpTunnelRouterDowns=aurpTunnelRouterDowns, snmpParams=snmpParams, dhcpOptionStatus=dhcpOptionStatus, aurpTunCfgHopCountReduction=aurpTunCfgHopCountReduction, aurpConnectionSentGDZLs=aurpConnectionSentGDZLs, connProfPppSendAuthSecret=connProfPppSendAuthSecret, aurpTunnelPortType=aurpTunnelPortType, isdnLogEnable=isdnLogEnable, dhcpOptionTable=dhcpOptionTable, dhcpOptionName=dhcpOptionName, aurpTunCfgSupport=aurpTunCfgSupport)
