#
# PySNMP MIB module CISCO-SWITCH-HARDWARE-CAPACITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-HARDWARE-CAPACITY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:56:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
Percent, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Percent")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoInterfaceIndexList, = mibBuilder.importSymbols("CISCO-TC", "CiscoInterfaceIndexList")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, Counter64, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Gauge32, iso, Bits, NotificationType, IpAddress, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Gauge32", "iso", "Bits", "NotificationType", "IpAddress", "Integer32", "ObjectIdentity")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
ciscoSwitchHardwareCapacityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 663))
ciscoSwitchHardwareCapacityMIB.setRevisions(('2014-09-16 00:00', '2014-01-24 00:00', '2013-05-08 00:00', '2010-11-22 00:00', '2008-07-02 00:00',))
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIB.setLastUpdated('201409160000Z')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIB.setOrganization('Cisco Systems, Inc.')
ciscoSwitchHardwareCapacityMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 0))
ciscoSwitchHardwareCapacityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1))
ciscoSwitchHardwareCapacityMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 2))
cshcForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1))
cshcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2))
cshcCPURateLimiterResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3))
cshcIcamResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4))
cshcNetflowFlowMaskResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5))
cshcNetflowResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6))
cshcQosResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7))
class CshcInternalChannelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("eobc", 1), ("ibc", 2))

cshcL2Forwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1))
cshcMacUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cshcMacUsageTable.setStatus('current')
cshcMacUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcMacUsageEntry.setStatus('current')
cshcMacCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacCollisions.setStatus('current')
cshcMacUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacUsed.setStatus('current')
cshcMacTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacTotal.setStatus('current')
cshcMacMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacMcast.setStatus('current')
cshcMacUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacUcast.setStatus('current')
cshcMacLines = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacLines.setStatus('current')
cshcMacLinesFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacLinesFull.setStatus('current')
cshcVpnCamUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cshcVpnCamUsageTable.setStatus('current')
cshcVpnCamUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcVpnCamUsageEntry.setStatus('current')
cshcVpnCamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcVpnCamUsed.setStatus('current')
cshcVpnCamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcVpnCamTotal.setStatus('current')
cshcL3Forwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2))
cshcFibTcamUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cshcFibTcamUsageTable.setStatus('current')
cshcFibTcamUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcFibTcamUsageEntry.setStatus('current')
cshc72bitsFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc72bitsFibTcamUsed.setStatus('current')
cshc72bitsFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc72bitsFibTcamTotal.setStatus('current')
cshc144bitsFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc144bitsFibTcamUsed.setStatus('current')
cshc144bitsFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc144bitsFibTcamTotal.setStatus('current')
cshc288bitsFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc288bitsFibTcamUsed.setStatus('current')
cshc288bitsFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc288bitsFibTcamTotal.setStatus('current')
cshcProtocolFibTcamUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageTable.setStatus('current')
cshcProtocolFibTcamUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamProtocol"))
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageEntry.setStatus('current')
cshcProtocolFibTcamProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ipv4", 1), ("mpls", 2), ("eom", 3), ("ipv6", 4), ("ipv4Multicast", 5), ("ipv6Multicast", 6), ("l2VpnPeer", 7), ("l2VpnIpv4Multicast", 8), ("l2VpnIpv6Multicast", 9), ("fcoe", 10), ("mplsVpn", 11), ("fcMpls", 12), ("ipv6LocalLink", 13), ("allProtocols", 14))))
if mibBuilder.loadTexts: cshcProtocolFibTcamProtocol.setStatus('current')
cshcProtocolFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamUsed.setStatus('current')
cshcProtocolFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamTotal.setStatus('current')
cshcProtocolFibTcamLogicalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamLogicalUsed.setStatus('current')
cshcProtocolFibTcamLogicalTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamLogicalTotal.setStatus('current')
cshcProtocolFibTcamWidthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleWidth", 1), ("doubleWidth", 2), ("quadWidth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamWidthType.setStatus('current')
cshcAdjacencyUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3), )
if mibBuilder.loadTexts: cshcAdjacencyUsageTable.setStatus('current')
cshcAdjacencyUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcAdjacencyUsageEntry.setStatus('current')
cshcAdjacencyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyUsed.setStatus('current')
cshcAdjacencyTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyTotal.setStatus('current')
cshcForwardingLoadTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cshcForwardingLoadTable.setStatus('current')
cshcForwardingLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcForwardingLoadEntry.setStatus('current')
cshcForwardingLoadPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1, 1), CounterBasedGauge64()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcForwardingLoadPktRate.setStatus('current')
cshcForwardingLoadPktPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1, 2), CounterBasedGauge64()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcForwardingLoadPktPeakRate.setStatus('current')
cshcForwardingLoadPktPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcForwardingLoadPktPeakTime.setStatus('current')
cshcAdjacencyResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5), )
if mibBuilder.loadTexts: cshcAdjacencyResourceUsageTable.setStatus('current')
cshcAdjacencyResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceIndex"))
if mibBuilder.loadTexts: cshcAdjacencyResourceUsageEntry.setStatus('current')
cshcAdjacencyResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cshcAdjacencyResourceIndex.setStatus('current')
cshcAdjacencyResourceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyResourceDescr.setStatus('current')
cshcAdjacencyResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyResourceUsed.setStatus('current')
cshcAdjacencyResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyResourceTotal.setStatus('current')
cshcMetResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6), )
if mibBuilder.loadTexts: cshcMetResourceUsageTable.setStatus('current')
cshcMetResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceIndex"))
if mibBuilder.loadTexts: cshcMetResourceUsageEntry.setStatus('current')
cshcMetResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cshcMetResourceIndex.setStatus('current')
cshcMetResourceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceDescr.setStatus('current')
cshcMetResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceUsed.setStatus('current')
cshcMetResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceTotal.setStatus('current')
cshcMetResourceMcastGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceMcastGrp.setStatus('current')
cshcModuleInterfaceDropsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1), )
if mibBuilder.loadTexts: cshcModuleInterfaceDropsTable.setStatus('current')
cshcModuleInterfaceDropsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcModuleInterfaceDropsEntry.setStatus('current')
cshcModTxTotalDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModTxTotalDroppedPackets.setStatus('current')
cshcModRxTotalDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModRxTotalDroppedPackets.setStatus('current')
cshcModTxTopDropPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModTxTopDropPort.setStatus('current')
cshcModRxTopDropPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModRxTopDropPort.setStatus('current')
cshcModTxTopDropIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 5), CiscoInterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModTxTopDropIfIndexList.setStatus('current')
cshcModRxTopDropIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 6), CiscoInterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModRxTopDropIfIndexList.setStatus('current')
cshcInterfaceBufferTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2), )
if mibBuilder.loadTexts: cshcInterfaceBufferTable.setStatus('current')
cshcInterfaceBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cshcInterfaceBufferEntry.setStatus('current')
cshcInterfaceTransmitBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2, 1, 1), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcInterfaceTransmitBufferSize.setStatus('current')
cshcInterfaceReceiveBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcInterfaceReceiveBufferSize.setStatus('current')
cshcInternalChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3), )
if mibBuilder.loadTexts: cshcInternalChannelTable.setStatus('current')
cshcInternalChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlType"))
if mibBuilder.loadTexts: cshcInternalChannelEntry.setStatus('current')
cshcIntlChnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 1), CshcInternalChannelType())
if mibBuilder.loadTexts: cshcIntlChnlType.setStatus('current')
cshcIntlChnlRxPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 2), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlRxPacketRate.setStatus('current')
cshcIntlChnlRxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlRxTotalPackets.setStatus('current')
cshcIntlChnlRxDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlRxDroppedPackets.setStatus('current')
cshcIntlChnlTxPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 5), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlTxPacketRate.setStatus('current')
cshcIntlChnlTxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlTxTotalPackets.setStatus('current')
cshcIntlChnlTxDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlTxDroppedPackets.setStatus('current')
cshcCPURateLimiterResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1), )
if mibBuilder.loadTexts: cshcCPURateLimiterResourcesTable.setStatus('current')
cshcCPURateLimiterResourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterNetworkLayer"))
if mibBuilder.loadTexts: cshcCPURateLimiterResourcesEntry.setStatus('current')
cshcCPURateLimiterNetworkLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2), ("layer2Input", 3), ("layer2Output", 4))))
if mibBuilder.loadTexts: cshcCPURateLimiterNetworkLayer.setStatus('current')
cshcCPURateLimiterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcCPURateLimiterTotal.setStatus('current')
cshcCPURateLimiterUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcCPURateLimiterUsed.setStatus('current')
cshcCPURateLimiterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcCPURateLimiterReserved.setStatus('current')
cshcIcamUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1), )
if mibBuilder.loadTexts: cshcIcamUtilizationTable.setStatus('current')
cshcIcamUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcIcamUtilizationEntry.setStatus('current')
cshcIcamCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIcamCreated.setStatus('current')
cshcIcamFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIcamFailed.setStatus('current')
cshcIcamUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIcamUtilization.setStatus('current')
cshcNetflowFlowMaskTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1), )
if mibBuilder.loadTexts: cshcNetflowFlowMaskTable.setStatus('current')
cshcNetflowFlowMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskAddrType"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskIndex"))
if mibBuilder.loadTexts: cshcNetflowFlowMaskEntry.setStatus('current')
cshcNetflowFlowMaskAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cshcNetflowFlowMaskAddrType.setStatus('current')
cshcNetflowFlowMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cshcNetflowFlowMaskIndex.setStatus('current')
cshcNetflowFlowMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("null", 1), ("srcOnly", 2), ("destOnly", 3), ("srcDest", 4), ("interfaceSrcDest", 5), ("fullFlow", 6), ("interfaceFullFlow", 7), ("interfaceFullFlowOrFullFlow", 8), ("atleastInterfaceSrcDest", 9), ("atleastFullFlow", 10), ("atleastInterfaceFullFlow", 11), ("atleastSrc", 12), ("atleastDst", 13), ("atleastSrcDst", 14), ("shortest", 15), ("lessThanFullFlow", 16), ("exceptFullFlow", 17), ("exceptInterfaceFullFlow", 18), ("interfaceDest", 19), ("atleastInterfaceDest", 20), ("interfaceSrc", 21), ("atleastInterfaceSrc", 22), ("srcOnlyCR", 23), ("dstOnlyCR", 24), ("fullFlowCR", 25), ("interfaceFullFlowCR", 26), ("max", 27), ("conflict", 28), ("err", 29), ("unused", 30), ("fullFlow1", 31), ("fullFlow2", 32), ("fullFlow3", 33), ("vlanFullFlow1", 34), ("vlanFullFlow2", 35), ("vlanFullFlow3", 36), ("reserved", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowFlowMaskType.setStatus('current')
cshcNetflowFlowMaskFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 4), Bits().clone(namedValues=NamedValues(("null", 0), ("ipAcgIngress", 1), ("ipAcgEgress", 2), ("natIngress", 3), ("natEngress", 4), ("natInside", 5), ("pbr", 6), ("cryptoIngress", 7), ("cryptoEgress", 8), ("qos", 9), ("idsIngress", 10), ("tcpIntrcptEgress", 11), ("guardian", 12), ("ipv6AcgIngress", 13), ("ipv6AcgEgress", 14), ("mcastAcgIngress", 15), ("mcastAcgEgress", 16), ("mcastStub", 17), ("mcastUrd", 18), ("ipDsIngress", 19), ("ipDsEgress", 20), ("ipVaclIngress", 21), ("ipVaclEgress", 22), ("macVaclIngress", 23), ("macVaclEgress", 24), ("inspIngress", 25), ("inspEgress", 26), ("authProxy", 27), ("rpf", 28), ("wccpIngress", 29), ("wccpEgress", 30), ("inspDummyIngress", 31), ("inspDummyEgress", 32), ("nbarIngress", 33), ("nbarEgress", 34), ("ipv6Rpf", 35), ("ipv6GlobalDefault", 36), ("dai", 37), ("ipPaclIngress", 38), ("macPaclIngress", 39), ("mplsIcmpBridge", 40), ("ipSlb", 41), ("ipv4Default", 42), ("ipv6Default", 43), ("mplsDefault", 44), ("erSpanTermination", 45), ("ipv6Mcast", 46), ("ipDsL3Ingress", 47), ("ipDsL3Egress", 48), ("cryptoRedirectIngress", 49), ("otherDefault", 50), ("ipRecir", 51), ("iPAdmissionL3Eou", 52), ("iPAdmissionL2Eou", 53), ("iPAdmissionL2EouArp", 54), ("ipAdmissionL2Http", 55), ("ipAdmissionL2HttpArp", 56), ("ipv4L3IntfNde", 57), ("ipv4L2IntfNde", 58), ("ipSguardIngress", 59), ("pvtHostsIngress", 60), ("vrfNatIngress", 61), ("tcpAdjustMssIngress", 62), ("tcpAdjustMssEgress", 63), ("eomIw", 64), ("eomIw2", 65), ("ipv4VrfNdeEgress", 66), ("l1Egress", 67), ("l1Ingress", 68), ("l1GlobalEgress", 69), ("l1GlobalIngress", 70), ("ipDot1xAcl", 71), ("ipDot1xAclArp", 72), ("dot1ad", 73), ("ipSpanPcap", 74), ("ipv6CryptoRedirectIngress", 75), ("svcAcclrtIngress", 76), ("ipv6SvcAcclrtIngress", 77), ("nfAggregation", 78), ("nfSampling", 79), ("ipv6Guardian", 80), ("ipv6Qos", 81), ("none", 82)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowFlowMaskFeature.setStatus('current')
cshcNetflowResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1), )
if mibBuilder.loadTexts: cshcNetflowResourceUsageTable.setStatus('current')
cshcNetflowResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageIndex"))
if mibBuilder.loadTexts: cshcNetflowResourceUsageEntry.setStatus('current')
cshcNetflowResourceUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cshcNetflowResourceUsageIndex.setStatus('current')
cshcNetflowResourceUsageDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageDescr.setStatus('current')
cshcNetflowResourceUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageUtil.setStatus('current')
cshcNetflowResourceUsageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageUsed.setStatus('current')
cshcNetflowResourceUsageFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageFree.setStatus('current')
cshcNetflowResourceUsageFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageFail.setStatus('current')
cshcQosResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1), )
if mibBuilder.loadTexts: cshcQosResourceUsageTable.setStatus('current')
cshcQosResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceType"))
if mibBuilder.loadTexts: cshcQosResourceUsageEntry.setStatus('current')
cshcQosResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aggregatePolicers", 1), ("distributedPolicers", 2), ("policerProfiles", 3))))
if mibBuilder.loadTexts: cshcQosResourceType.setStatus('current')
cshcQosResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcQosResourceUsed.setStatus('current')
cshcQosResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcQosResourceTotal.setStatus('current')
ciscoSwitchHardwareCapacityMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1))
ciscoSwitchHardwareCapacityMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2))
ciscoSwitchHardwareCapacityMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 1)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance = ciscoSwitchHardwareCapacityMIBCompliance.setStatus('deprecated')
ciscoSwitchHardwareCapacityMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 2)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance1 = ciscoSwitchHardwareCapacityMIBCompliance1.setStatus('deprecated')
ciscoSwitchHardwareCapacityMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 3)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTopDropIfIndexListGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceUsageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance2 = ciscoSwitchHardwareCapacityMIBCompliance2.setStatus('deprecated')
ciscoSwitchHardwareCapacityMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 4)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTopDropIfIndexListGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamWidthTypeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance3 = ciscoSwitchHardwareCapacityMIBCompliance3.setStatus('current')
cshcMacUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 1)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacCollisions"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcMacUsageGroup = cshcMacUsageGroup.setStatus('current')
cshcVpnCamUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 2)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcVpnCamUsageGroup = cshcVpnCamUsageGroup.setStatus('current')
cshcFibTcamUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 3)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc72bitsFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc72bitsFibTcamTotal"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc144bitsFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc144bitsFibTcamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcFibTcamUsageGroup = cshcFibTcamUsageGroup.setStatus('current')
cshcProtocolFibTcamUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 4)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcProtocolFibTcamUsageGroup = cshcProtocolFibTcamUsageGroup.setStatus('current')
cshcAdjacencyUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 5)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcAdjacencyUsageGroup = cshcAdjacencyUsageGroup.setStatus('current')
cshcForwardingLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 6)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadPktRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadPktPeakRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadPktPeakTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcForwardingLoadGroup = cshcForwardingLoadGroup.setStatus('current')
cshcModuleInterfaceDropsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 7)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTxTotalDroppedPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModRxTotalDroppedPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTxTopDropPort"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModRxTopDropPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcModuleInterfaceDropsGroup = cshcModuleInterfaceDropsGroup.setStatus('current')
cshcInterfaceBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 8)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceTransmitBufferSize"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceReceiveBufferSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcInterfaceBufferGroup = cshcInterfaceBufferGroup.setStatus('current')
cshcInternalChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 9)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlRxPacketRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlRxTotalPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlRxDroppedPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlTxPacketRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlTxTotalPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlTxDroppedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcInternalChannelGroup = cshcInternalChannelGroup.setStatus('current')
cshcCPURateLimiterResourcesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 10)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterTotal"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterReserved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcCPURateLimiterResourcesGroup = cshcCPURateLimiterResourcesGroup.setStatus('current')
cshcIcamResourcesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 11)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamCreated"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamFailed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcIcamResourcesGroup = cshcIcamResourcesGroup.setStatus('current')
cshcNetflowFlowMaskResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 12)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskType"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskFeature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcNetflowFlowMaskResourceGroup = cshcNetflowFlowMaskResourceGroup.setStatus('current')
cshcFibTcamUsageExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 13)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc288bitsFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc288bitsFibTcamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcFibTcamUsageExtGroup = cshcFibTcamUsageExtGroup.setStatus('current')
cshcNetflowFlowResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 14)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageDescr"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageUtil"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageFree"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcNetflowFlowResourceUsageGroup = cshcNetflowFlowResourceUsageGroup.setStatus('current')
cshcMacUsageExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 15)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacMcast"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUcast"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacLines"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacLinesFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcMacUsageExtGroup = cshcMacUsageExtGroup.setStatus('current')
cshcProtocolFibTcamUsageExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 16)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamLogicalUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamLogicalTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcProtocolFibTcamUsageExtGroup = cshcProtocolFibTcamUsageExtGroup.setStatus('current')
cshcAdjacencyResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 17)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceDescr"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcAdjacencyResourceUsageGroup = cshcAdjacencyResourceUsageGroup.setStatus('current')
cshcQosResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 18)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcQosResourceUsageGroup = cshcQosResourceUsageGroup.setStatus('current')
cshcModTopDropIfIndexListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 19)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTxTopDropIfIndexList"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModRxTopDropIfIndexList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcModTopDropIfIndexListGroup = cshcModTopDropIfIndexListGroup.setStatus('current')
cshcMetResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 20)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceDescr"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceTotal"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceMcastGrp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcMetResourceUsageGroup = cshcMetResourceUsageGroup.setStatus('current')
cshcProtocolFibTcamWidthTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 21)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamWidthType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcProtocolFibTcamWidthTypeGroup = cshcProtocolFibTcamWidthTypeGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", cshcForwardingLoadEntry=cshcForwardingLoadEntry, cshcIcamCreated=cshcIcamCreated, ciscoSwitchHardwareCapacityMIBCompliance2=ciscoSwitchHardwareCapacityMIBCompliance2, cshcNetflowResourceUsageFree=cshcNetflowResourceUsageFree, cshc72bitsFibTcamTotal=cshc72bitsFibTcamTotal, cshcProtocolFibTcamUsed=cshcProtocolFibTcamUsed, cshcIntlChnlRxPacketRate=cshcIntlChnlRxPacketRate, cshcNetflowResourceUsage=cshcNetflowResourceUsage, cshcAdjacencyUsageEntry=cshcAdjacencyUsageEntry, cshcCPURateLimiterResourcesGroup=cshcCPURateLimiterResourcesGroup, cshcProtocolFibTcamLogicalUsed=cshcProtocolFibTcamLogicalUsed, cshcNetflowFlowMaskResources=cshcNetflowFlowMaskResources, cshcVpnCamUsageEntry=cshcVpnCamUsageEntry, cshcInterfaceTransmitBufferSize=cshcInterfaceTransmitBufferSize, cshcNetflowFlowMaskType=cshcNetflowFlowMaskType, ciscoSwitchHardwareCapacityMIBObjects=ciscoSwitchHardwareCapacityMIBObjects, cshcNetflowResourceUsageTable=cshcNetflowResourceUsageTable, cshcInterface=cshcInterface, cshcIntlChnlRxTotalPackets=cshcIntlChnlRxTotalPackets, cshcAdjacencyResourceUsed=cshcAdjacencyResourceUsed, cshcIcamFailed=cshcIcamFailed, cshcL2Forwarding=cshcL2Forwarding, PYSNMP_MODULE_ID=ciscoSwitchHardwareCapacityMIB, cshcMetResourceMcastGrp=cshcMetResourceMcastGrp, cshcNetflowResourceUsageDescr=cshcNetflowResourceUsageDescr, cshcForwardingLoadPktPeakRate=cshcForwardingLoadPktPeakRate, cshcModRxTopDropIfIndexList=cshcModRxTopDropIfIndexList, ciscoSwitchHardwareCapacityMIB=ciscoSwitchHardwareCapacityMIB, cshcIcamUtilizationEntry=cshcIcamUtilizationEntry, cshcIcamUtilizationTable=cshcIcamUtilizationTable, cshcIntlChnlTxPacketRate=cshcIntlChnlTxPacketRate, cshcQosResourceUsageTable=cshcQosResourceUsageTable, cshcForwardingLoadPktRate=cshcForwardingLoadPktRate, cshcNetflowFlowResourceUsageGroup=cshcNetflowFlowResourceUsageGroup, cshcIcamResourcesGroup=cshcIcamResourcesGroup, cshcMetResourceDescr=cshcMetResourceDescr, cshc144bitsFibTcamTotal=cshc144bitsFibTcamTotal, cshcNetflowFlowMaskAddrType=cshcNetflowFlowMaskAddrType, cshcNetflowResourceUsageIndex=cshcNetflowResourceUsageIndex, cshcCPURateLimiterUsed=cshcCPURateLimiterUsed, ciscoSwitchHardwareCapacityMIBCompliance3=ciscoSwitchHardwareCapacityMIBCompliance3, cshcQosResourceUsed=cshcQosResourceUsed, cshcNetflowFlowMaskResourceGroup=cshcNetflowFlowMaskResourceGroup, cshcNetflowResourceUsageUtil=cshcNetflowResourceUsageUtil, cshcL3Forwarding=cshcL3Forwarding, ciscoSwitchHardwareCapacityMIBGroups=ciscoSwitchHardwareCapacityMIBGroups, cshcInterfaceBufferEntry=cshcInterfaceBufferEntry, cshcIntlChnlType=cshcIntlChnlType, cshcModRxTopDropPort=cshcModRxTopDropPort, cshcProtocolFibTcamTotal=cshcProtocolFibTcamTotal, cshcCPURateLimiterResourcesTable=cshcCPURateLimiterResourcesTable, cshcMacUsageExtGroup=cshcMacUsageExtGroup, cshcMacUcast=cshcMacUcast, cshcForwarding=cshcForwarding, cshcMacTotal=cshcMacTotal, cshcCPURateLimiterResources=cshcCPURateLimiterResources, cshcInternalChannelGroup=cshcInternalChannelGroup, cshcAdjacencyUsageTable=cshcAdjacencyUsageTable, cshc288bitsFibTcamUsed=cshc288bitsFibTcamUsed, cshcForwardingLoadPktPeakTime=cshcForwardingLoadPktPeakTime, cshcFibTcamUsageTable=cshcFibTcamUsageTable, cshcQosResourceType=cshcQosResourceType, cshcNetflowResourceUsageUsed=cshcNetflowResourceUsageUsed, cshcIcamUtilization=cshcIcamUtilization, cshcProtocolFibTcamLogicalTotal=cshcProtocolFibTcamLogicalTotal, cshc288bitsFibTcamTotal=cshc288bitsFibTcamTotal, cshcQosResourceUsage=cshcQosResourceUsage, cshcAdjacencyResourceUsageGroup=cshcAdjacencyResourceUsageGroup, cshcFibTcamUsageExtGroup=cshcFibTcamUsageExtGroup, cshcInterfaceReceiveBufferSize=cshcInterfaceReceiveBufferSize, cshcProtocolFibTcamUsageExtGroup=cshcProtocolFibTcamUsageExtGroup, cshcMacUsageEntry=cshcMacUsageEntry, cshcModuleInterfaceDropsTable=cshcModuleInterfaceDropsTable, cshcAdjacencyUsed=cshcAdjacencyUsed, cshcMacUsageGroup=cshcMacUsageGroup, cshcForwardingLoadGroup=cshcForwardingLoadGroup, cshcInterfaceBufferGroup=cshcInterfaceBufferGroup, cshcModTxTopDropPort=cshcModTxTopDropPort, cshcCPURateLimiterTotal=cshcCPURateLimiterTotal, cshcVpnCamUsageTable=cshcVpnCamUsageTable, cshcModRxTotalDroppedPackets=cshcModRxTotalDroppedPackets, cshcProtocolFibTcamWidthType=cshcProtocolFibTcamWidthType, cshcVpnCamUsageGroup=cshcVpnCamUsageGroup, cshcMetResourceIndex=cshcMetResourceIndex, cshcModTxTotalDroppedPackets=cshcModTxTotalDroppedPackets, cshcProtocolFibTcamUsageEntry=cshcProtocolFibTcamUsageEntry, cshcAdjacencyResourceTotal=cshcAdjacencyResourceTotal, ciscoSwitchHardwareCapacityMIBConformance=ciscoSwitchHardwareCapacityMIBConformance, cshcQosResourceUsageEntry=cshcQosResourceUsageEntry, cshcQosResourceTotal=cshcQosResourceTotal, cshcMacMcast=cshcMacMcast, cshcAdjacencyResourceDescr=cshcAdjacencyResourceDescr, cshcFibTcamUsageGroup=cshcFibTcamUsageGroup, cshcNetflowResourceUsageFail=cshcNetflowResourceUsageFail, cshcNetflowFlowMaskTable=cshcNetflowFlowMaskTable, cshcNetflowFlowMaskEntry=cshcNetflowFlowMaskEntry, cshcMetResourceTotal=cshcMetResourceTotal, cshcAdjacencyTotal=cshcAdjacencyTotal, cshcNetflowResourceUsageEntry=cshcNetflowResourceUsageEntry, cshcIcamResources=cshcIcamResources, cshcInterfaceBufferTable=cshcInterfaceBufferTable, cshc72bitsFibTcamUsed=cshc72bitsFibTcamUsed, CshcInternalChannelType=CshcInternalChannelType, cshcProtocolFibTcamProtocol=cshcProtocolFibTcamProtocol, cshcInternalChannelEntry=cshcInternalChannelEntry, cshcVpnCamUsed=cshcVpnCamUsed, cshcAdjacencyResourceIndex=cshcAdjacencyResourceIndex, cshcForwardingLoadTable=cshcForwardingLoadTable, cshcIntlChnlTxDroppedPackets=cshcIntlChnlTxDroppedPackets, cshcMetResourceUsed=cshcMetResourceUsed, cshcProtocolFibTcamUsageGroup=cshcProtocolFibTcamUsageGroup, cshcAdjacencyResourceUsageTable=cshcAdjacencyResourceUsageTable, cshcModuleInterfaceDropsGroup=cshcModuleInterfaceDropsGroup, cshcModTopDropIfIndexListGroup=cshcModTopDropIfIndexListGroup, cshc144bitsFibTcamUsed=cshc144bitsFibTcamUsed, cshcIntlChnlTxTotalPackets=cshcIntlChnlTxTotalPackets, cshcCPURateLimiterNetworkLayer=cshcCPURateLimiterNetworkLayer, cshcAdjacencyResourceUsageEntry=cshcAdjacencyResourceUsageEntry, cshcMacUsed=cshcMacUsed, cshcMacLinesFull=cshcMacLinesFull, ciscoSwitchHardwareCapacityMIBCompliances=ciscoSwitchHardwareCapacityMIBCompliances, cshcMacUsageTable=cshcMacUsageTable, cshcInternalChannelTable=cshcInternalChannelTable, cshcMetResourceUsageGroup=cshcMetResourceUsageGroup, cshcVpnCamTotal=cshcVpnCamTotal, cshcProtocolFibTcamUsageTable=cshcProtocolFibTcamUsageTable, cshcModTxTopDropIfIndexList=cshcModTxTopDropIfIndexList, cshcProtocolFibTcamWidthTypeGroup=cshcProtocolFibTcamWidthTypeGroup, cshcCPURateLimiterResourcesEntry=cshcCPURateLimiterResourcesEntry, cshcMetResourceUsageTable=cshcMetResourceUsageTable, cshcNetflowFlowMaskFeature=cshcNetflowFlowMaskFeature, cshcFibTcamUsageEntry=cshcFibTcamUsageEntry, ciscoSwitchHardwareCapacityMIBCompliance1=ciscoSwitchHardwareCapacityMIBCompliance1, cshcCPURateLimiterReserved=cshcCPURateLimiterReserved, cshcMacCollisions=cshcMacCollisions, cshcQosResourceUsageGroup=cshcQosResourceUsageGroup, cshcMacLines=cshcMacLines, cshcIntlChnlRxDroppedPackets=cshcIntlChnlRxDroppedPackets, cshcNetflowFlowMaskIndex=cshcNetflowFlowMaskIndex, cshcAdjacencyUsageGroup=cshcAdjacencyUsageGroup, ciscoSwitchHardwareCapacityMIBCompliance=ciscoSwitchHardwareCapacityMIBCompliance, cshcMetResourceUsageEntry=cshcMetResourceUsageEntry, cshcModuleInterfaceDropsEntry=cshcModuleInterfaceDropsEntry, ciscoSwitchHardwareCapacityMIBNotifs=ciscoSwitchHardwareCapacityMIBNotifs)
