#
# PySNMP MIB module MELLANOX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MELLANOX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:00:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, MibIdentifier, ObjectIdentity, Unsigned32, IpAddress, ModuleIdentity, Counter32, Gauge32, Counter64, NotificationType, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "MibIdentifier", "ObjectIdentity", "Unsigned32", "IpAddress", "ModuleIdentity", "Counter32", "Gauge32", "Counter64", "NotificationType", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mellanox = ModuleIdentity((1, 3, 6, 1, 4, 1, 33049))
mellanox.setRevisions(('2011-01-31 00:00', '2010-12-12 00:00', '2010-02-01 00:00', '2010-01-01 00:00', '2009-10-03 00:00', '2009-03-03 00:00',))
if mibBuilder.loadTexts: mellanox.setLastUpdated('201101310000Z')
if mibBuilder.loadTexts: mellanox.setOrganization('Mellanox Technologies, Inc.')
class IbGuid(TextualConvention, OctetString):
    reference = 'InfiniBand Architecture Release 1.2.1 Vol. 1 Section 4.1.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

mellanoxProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 1))
mellanoxMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2))
generalMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1))
gmVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1))
gmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2))
ibSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2))
ibVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1))
ibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2))
subnetMngr = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 3))
smVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 3, 1))
smNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2))
bxBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4))
bxVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1))
bxNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2))
mlxIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5))
mlxIBCAInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1))
mlxIBSwitchInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2))
mlxIBRouterInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3))
mlxIBPortInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4))
mlxIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5))
gmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1))
type = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: type.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
swVersion = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVersion.setStatus('current')
buildInfo = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildInfo.setStatus('current')
nodeName = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeName.setStatus('current')
procmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2))
procTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: procTable.setStatus('current')
procEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "procIndex"))
if mibBuilder.loadTexts: procEntry.setStatus('current')
procIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: procIndex.setStatus('current')
procName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procName.setStatus('current')
procStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procStatus.setStatus('current')
procNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procNumFailures.setStatus('current')
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3))
fsTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: fsTable.setStatus('current')
fsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "fsIndex"))
if mibBuilder.loadTexts: fsEntry.setStatus('current')
fsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fsIndex.setStatus('current')
fsMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMountPoint.setStatus('current')
fsSpaceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceTotal.setStatus('current')
fsSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceUsed.setStatus('current')
fsSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceFree.setStatus('current')
fsSpaceAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsSpaceAvail.setStatus('current')
cpus = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4))
cpuTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cpuTable.setStatus('current')
cpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "cpuIndex"))
if mibBuilder.loadTexts: cpuEntry.setStatus('current')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpuIndex.setStatus('current')
idleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idleTime.setStatus('current')
systemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('current')
userTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 1, 1, 4, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTime.setStatus('current')
ibInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1))
invTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: invTable.setStatus('current')
invEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "invIndex"))
if mibBuilder.loadTexts: invEntry.setStatus('current')
invIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: invIndex.setStatus('current')
invName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invName.setStatus('current')
invType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invType.setStatus('current')
invPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invPartNum.setStatus('current')
invSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSerialNum.setStatus('current')
invFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invFirmware.setStatus('current')
invHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invHealthStatus.setStatus('current')
ibPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2))
cntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: cntTable.setStatus('current')
cntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "cntIndex"))
if mibBuilder.loadTexts: cntEntry.setStatus('current')
cntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntIndex.setStatus('current')
cntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntName.setStatus('current')
cntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPort.setStatus('current')
cntPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPhyState.setStatus('current')
cntLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLogState.setStatus('current')
cntRate = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRate.setStatus('current')
cntMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMTU.setStatus('current')
cntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvData.setStatus('current')
cntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvPkts.setStatus('current')
cntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitData.setStatus('current')
cntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitPkts.setStatus('current')
cntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvErr.setStatus('current')
cntXmitDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitDiscard.setStatus('current')
cntXmitWait = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntXmitWait.setStatus('current')
cntSymErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSymErr.setStatus('current')
cntVL15Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntVL15Drop.setStatus('current')
cntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSpeed.setStatus('current')
cntWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntWidth.setStatus('current')
cntOperationalVLs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntOperationalVLs.setStatus('current')
cntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSupportedSpeeds.setStatus('current')
cntSupportedWidths = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSupportedWidths.setStatus('current')
cntMaxSupportedMTUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntMaxSupportedMTUs.setStatus('current')
cntVLCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntVLCapabilities.setStatus('current')
cntGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntGUID.setStatus('current')
cntLID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 2, 1, 2, 1, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLID.setStatus('current')
bxInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1))
bxInvTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1), )
if mibBuilder.loadTexts: bxInvTable.setStatus('current')
bxInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxInvIndex"))
if mibBuilder.loadTexts: bxInvEntry.setStatus('current')
bxInvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxInvIndex.setStatus('current')
bxInvName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvName.setStatus('current')
bxInvType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvType.setStatus('current')
bxInvPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvPartNum.setStatus('current')
bxInvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvSerialNum.setStatus('current')
bxInvFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxInvFirmware.setStatus('current')
bxIbPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2))
bxIbCntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1), )
if mibBuilder.loadTexts: bxIbCntTable.setStatus('current')
bxIbCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxIbCntIndex"))
if mibBuilder.loadTexts: bxIbCntEntry.setStatus('current')
bxIbCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxIbCntIndex.setStatus('current')
bxIbCntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntName.setStatus('current')
bxIbCntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntPort.setStatus('current')
bxIbCntLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntLogState.setStatus('current')
bxIbCntPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntPhyState.setStatus('current')
bxIbCntRate = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRate.setStatus('current')
bxIbCntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSupportedSpeeds.setStatus('current')
bxIbCntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSpeed.setStatus('current')
bxIbCntSupportedWidths = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSupportedWidths.setStatus('current')
bxIbCntWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntWidth.setStatus('current')
bxIbCntMaxSupportedMTUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntMaxSupportedMTUs.setStatus('current')
bxIbCntMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntMTU.setStatus('current')
bxIbCntVLCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntVLCapabilities.setStatus('current')
bxIbCntOperationalVLs = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntOperationalVLs.setStatus('current')
bxIbCntGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntGUID.setStatus('current')
bxIbCntLID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntLID.setStatus('current')
bxIbCntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRcvPkts.setStatus('current')
bxIbCntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRcvData.setStatus('current')
bxIbCntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntRcvErr.setStatus('current')
bxIbCntSymErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntSymErr.setStatus('current')
bxIbCntVL15Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntVL15Drop.setStatus('current')
bxIbCntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitPkts.setStatus('current')
bxIbCntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitData.setStatus('current')
bxIbCntXmitWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitWaits.setStatus('current')
bxIbCntXmitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxIbCntXmitDiscards.setStatus('current')
bxEthPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3))
bxEthCntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1), )
if mibBuilder.loadTexts: bxEthCntTable.setStatus('current')
bxEthCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxEthCntIndex"))
if mibBuilder.loadTexts: bxEthCntEntry.setStatus('current')
bxEthCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxEthCntIndex.setStatus('current')
bxEthCntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntName.setStatus('current')
bxEthCntAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntAdminMode.setStatus('current')
bxEthCntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntStatus.setStatus('current')
bxEthCntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntSupportedSpeeds.setStatus('current')
bxEthCntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntSpeed.setStatus('current')
bxEthCntDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntDuplex.setStatus('current')
bxEthCntMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntMTU.setStatus('current')
bxEthCntFlowcontrolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntFlowcontrolStatus.setStatus('current')
bxEthCntFlowcontrolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntFlowcontrolMode.setStatus('current')
bxEthCntFlowcontrolPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntFlowcontrolPriorities.setStatus('current')
bxEthCntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvPkts.setStatus('current')
bxEthCntRcvUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvUcastPkts.setStatus('current')
bxEthCntRcvMcatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvMcatsPkts.setStatus('current')
bxEthCntRcvBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvBcastPkts.setStatus('current')
bxEthCntRcvJumboPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvJumboPkts.setStatus('current')
bxEthCntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvData.setStatus('current')
bxEthCntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvErr.setStatus('current')
bxEthCntRcvNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvNoBuffer.setStatus('current')
bxEthCntRcvRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvRunt.setStatus('current')
bxEthCntRcvCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntRcvCRC.setStatus('current')
bxEthCntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitPkts.setStatus('current')
bxEthCntXmitUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitUcastPkts.setStatus('current')
bxEthCntXmitMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitMcastPkts.setStatus('current')
bxEthCntXmitBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitBcastPkts.setStatus('current')
bxEthCntXmitJumboPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitJumboPkts.setStatus('current')
bxEthCntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitData.setStatus('current')
bxEthCntXmitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 3, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxEthCntXmitErr.setStatus('current')
bxFcPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4))
bxFcCntTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1), )
if mibBuilder.loadTexts: bxFcCntTable.setStatus('current')
bxFcCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1), ).setIndexNames((0, "MELLANOX-MIB", "bxFcCntIndex"))
if mibBuilder.loadTexts: bxFcCntEntry.setStatus('current')
bxFcCntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bxFcCntIndex.setStatus('current')
bxFcCntName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntName.setStatus('current')
bxFcCntAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntAdminMode.setStatus('current')
bxFcCntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntStatus.setStatus('current')
bxFcCntSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntSupportedSpeeds.setStatus('current')
bxFcCntSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntSpeed.setStatus('current')
bxFcCntWWPN = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntWWPN.setStatus('current')
bxFcCntFCID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntFCID.setStatus('current')
bxFcCntRcvCreditsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvCreditsAlloc.setStatus('current')
bxFcCntXmitCreditsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitCreditsAlloc.setStatus('current')
bxFcCntRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvPkts.setStatus('current')
bxFcCntRcvData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvData.setStatus('current')
bxFcCntRcvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvDiscards.setStatus('current')
bxFcCntRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvErr.setStatus('current')
bxFcCntRcvCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvCRC.setStatus('current')
bxFcCntRcvUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvUnknown.setStatus('current')
bxFcCntRcvLong = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvLong.setStatus('current')
bxFcCntRcvShort = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvShort.setStatus('current')
bxFcCntRcvOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvOffline.setStatus('current')
bxFcCntRcvLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvLinkReset.setStatus('current')
bxFcCntRcvNonOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvNonOperational.setStatus('current')
bxFcCntRcvRemainCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntRcvRemainCredits.setStatus('current')
bxFcCntXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitPkts.setStatus('current')
bxFcCntXmitData = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitData.setStatus('current')
bxFcCntXmitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitDiscards.setStatus('current')
bxFcCntXmitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitErr.setStatus('current')
bxFcCntXmitOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitOffline.setStatus('current')
bxFcCntXmitLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitLinkReset.setStatus('current')
bxFcCntXmitNonOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitNonOperational.setStatus('current')
bxFcCntXmitRemainCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 4, 1, 4, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bxFcCntXmitRemainCredits.setStatus('current')
asicChipDown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 1))
if mibBuilder.loadTexts: asicChipDown.setStatus('current')
asicOverTempReset = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 2))
if mibBuilder.loadTexts: asicOverTempReset.setStatus('current')
asicOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 3))
if mibBuilder.loadTexts: asicOverTemp.setStatus('current')
lowPower = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 2, 2, 4))
if mibBuilder.loadTexts: lowPower.setStatus('current')
bxAsicChipDown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2, 1))
if mibBuilder.loadTexts: bxAsicChipDown.setStatus('current')
bxAsicOverTempReset = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2, 2))
if mibBuilder.loadTexts: bxAsicOverTempReset.setStatus('current')
bxAsicOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 4, 2, 3))
if mibBuilder.loadTexts: bxAsicOverTemp.setStatus('current')
internalBusError = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 1))
if mibBuilder.loadTexts: internalBusError.setStatus('current')
ibSMup = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2, 1))
if mibBuilder.loadTexts: ibSMup.setStatus('current')
ibSMdown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2, 2))
if mibBuilder.loadTexts: ibSMdown.setStatus('current')
ibSMrestart = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 3, 2, 3))
if mibBuilder.loadTexts: ibSMrestart.setStatus('current')
procCrash = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 2))
if mibBuilder.loadTexts: procCrash.setStatus('current')
cpuUtilHigh = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 3))
if mibBuilder.loadTexts: cpuUtilHigh.setStatus('current')
procUnexpectedExit = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 4))
if mibBuilder.loadTexts: procUnexpectedExit.setStatus('current')
unexpectedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 5))
if mibBuilder.loadTexts: unexpectedShutdown.setStatus('current')
diskSpaceLow = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 6))
if mibBuilder.loadTexts: diskSpaceLow.setStatus('current')
systemHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 7))
if mibBuilder.loadTexts: systemHealthStatus.setStatus('current')
lowPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 8))
if mibBuilder.loadTexts: lowPowerRecover.setStatus('current')
insufficientFans = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 9))
if mibBuilder.loadTexts: insufficientFans.setStatus('current')
insufficientFansRecover = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 1, 2, 10))
if mibBuilder.loadTexts: insufficientFansRecover.setStatus('current')
mlxIBCAInfoTableNumCAs = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAInfoTableNumCAs.setStatus('current')
mlxIBCAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2), )
if mibBuilder.loadTexts: mlxIBCAInfoTable.setStatus('current')
mlxIBCAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBCAIndex"))
if mibBuilder.loadTexts: mlxIBCAInfoEntry.setStatus('current')
mlxIBCAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBCAIndex.setStatus('current')
mlxIBCADeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCADeviceName.setStatus('current')
mlxIBCAPCIDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIDomain.setStatus('current')
mlxIBCAPCIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIBus.setStatus('current')
mlxIBCAPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCISlot.setStatus('current')
mlxIBCAPCIFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIFunction.setStatus('current')
mlxIBCAPCIPhysicalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPCIPhysicalSlot.setStatus('current')
mlxIBCAIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAIrq.setStatus('current')
mlxIBCAModelString = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAModelString.setStatus('current')
mlxIBCASerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCASerialNumber.setStatus('current')
mlxIBCAPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAPartNumber.setStatus('current')
mlxIBCANodeGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 12), IbGuid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCANodeGUID.setStatus('current')
mlxIBCASystemImageGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 13), IbGuid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCASystemImageGUID.setStatus('current')
mlxIBCAFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAFirmwareVersion.setStatus('current')
mlxIBCAHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAHardwareVersion.setStatus('current')
mlxIBCAHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unhealthy", 0), ("healthy", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAHealthStatus.setStatus('current')
mlxIBCANumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCANumPorts.setStatus('current')
mlxIBCAType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("hca", 2), ("tca", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBCAType.setStatus('current')
mlxIBSwitchInfoTableNumSwitches = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBSwitchInfoTableNumSwitches.setStatus('current')
mlxIBSwitchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 2), )
if mibBuilder.loadTexts: mlxIBSwitchInfoTable.setStatus('current')
mlxIBSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBSwitchIndex"))
if mibBuilder.loadTexts: mlxIBSwitchInfoEntry.setStatus('current')
mlxIBSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBSwitchIndex.setStatus('current')
mlxIBRouterInfoTableNumRouters = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBRouterInfoTableNumRouters.setStatus('current')
mlxIBRouterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 2), )
if mibBuilder.loadTexts: mlxIBRouterInfoTable.setStatus('current')
mlxIBRouterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBRouterIndex"))
if mibBuilder.loadTexts: mlxIBRouterInfoEntry.setStatus('current')
mlxIBRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBRouterIndex.setStatus('current')
mlxIBPortInfoTableNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortInfoTableNumPorts.setStatus('current')
mlxIBPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2), )
if mibBuilder.loadTexts: mlxIBPortInfoTable.setStatus('current')
mlxIBPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1), ).setIndexNames((0, "MELLANOX-MIB", "mlxIBPortIndex"))
if mibBuilder.loadTexts: mlxIBPortInfoEntry.setStatus('current')
mlxIBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mlxIBPortIndex.setStatus('current')
mlxIBPortLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortLocalPortNumber.setStatus('current')
mlxIBPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("armed", 3), ("active", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortState.setStatus('current')
mlxIBPortPhysicalState = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sleep", 1), ("polling", 2), ("disabled", 3), ("portConfigTraining", 4), ("linkUp", 5), ("linkErrorRecovery", 6), ("phyTest", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortPhysicalState.setStatus('current')
mlxIBPortGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 5), IbGuid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortGUID.setStatus('current')
mlxIBPortNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channelAdapter", 1), ("switch", 2), ("router", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortNodeType.setStatus('current')
mlxIBPortNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33049, 2, 5, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlxIBPortNodeIndex.setStatus('current')
mlxIBCAHealthStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 1)).setObjects(("MELLANOX-MIB", "mlxIBCAIndex"), ("MELLANOX-MIB", "mlxIBCAHealthStatus"), ("MELLANOX-MIB", "mlxIBCADeviceName"))
if mibBuilder.loadTexts: mlxIBCAHealthStatusChange.setStatus('current')
mlxIBCAInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 2)).setObjects(("MELLANOX-MIB", "mlxIBCAIndex"))
if mibBuilder.loadTexts: mlxIBCAInsertion.setStatus('current')
mlxIBCARemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 3)).setObjects(("MELLANOX-MIB", "mlxIBCAIndex"))
if mibBuilder.loadTexts: mlxIBCARemoval.setStatus('current')
mlxIBSwitchInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 4)).setObjects(("MELLANOX-MIB", "mlxIBSwitchIndex"))
if mibBuilder.loadTexts: mlxIBSwitchInsertion.setStatus('current')
mlxIBSwitchRemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 5)).setObjects(("MELLANOX-MIB", "mlxIBSwitchIndex"))
if mibBuilder.loadTexts: mlxIBSwitchRemoval.setStatus('current')
mlxIBRouterInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 6)).setObjects(("MELLANOX-MIB", "mlxIBRouterIndex"))
if mibBuilder.loadTexts: mlxIBRouterInsertion.setStatus('current')
mlxIBRouterRemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 7)).setObjects(("MELLANOX-MIB", "mlxIBRouterIndex"))
if mibBuilder.loadTexts: mlxIBRouterRemoval.setStatus('current')
mlxIBPortStateChange = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 8)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"), ("MELLANOX-MIB", "mlxIBPortState"), ("MELLANOX-MIB", "mlxIBPortGUID"), ("MELLANOX-MIB", "mlxIBPortNodeType"), ("MELLANOX-MIB", "mlxIBPortNodeIndex"))
if mibBuilder.loadTexts: mlxIBPortStateChange.setStatus('current')
mlxIBPortPhysicalStateChange = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 9)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"), ("MELLANOX-MIB", "mlxIBPortPhysicalState"), ("MELLANOX-MIB", "mlxIBPortGUID"), ("MELLANOX-MIB", "mlxIBPortNodeType"), ("MELLANOX-MIB", "mlxIBPortNodeIndex"))
if mibBuilder.loadTexts: mlxIBPortPhysicalStateChange.setStatus('current')
mlxIBPortInsertion = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 10)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"))
if mibBuilder.loadTexts: mlxIBPortInsertion.setStatus('current')
mlxIBPortRemoval = NotificationType((1, 3, 6, 1, 4, 1, 33049, 2, 5, 5, 11)).setObjects(("MELLANOX-MIB", "mlxIBPortIndex"))
if mibBuilder.loadTexts: mlxIBPortRemoval.setStatus('current')
mibBuilder.exportSymbols("MELLANOX-MIB", mlxIBCAPartNumber=mlxIBCAPartNumber, bxEthCntRcvPkts=bxEthCntRcvPkts, bxIbCntTable=bxIbCntTable, cntRate=cntRate, bxIbCntRcvErr=bxIbCntRcvErr, bxEthPorts=bxEthPorts, cntXmitDiscard=cntXmitDiscard, mlxIBRouterRemoval=mlxIBRouterRemoval, bxEthCntIndex=bxEthCntIndex, bxEthCntXmitJumboPkts=bxEthCntXmitJumboPkts, cntSymErr=cntSymErr, fsSpaceTotal=fsSpaceTotal, cpuUtilHigh=cpuUtilHigh, bxFcCntXmitNonOperational=bxFcCntXmitNonOperational, gmSystem=gmSystem, bxEthCntFlowcontrolPriorities=bxEthCntFlowcontrolPriorities, mlxIBPortInfoEntry=mlxIBPortInfoEntry, bxIbCntXmitPkts=bxIbCntXmitPkts, cntMaxSupportedMTUs=cntMaxSupportedMTUs, invIndex=invIndex, bxInvIndex=bxInvIndex, cntXmitWait=cntXmitWait, bxEthCntTable=bxEthCntTable, bxFcCntRcvData=bxFcCntRcvData, bxIbCntSupportedSpeeds=bxIbCntSupportedSpeeds, swVersion=swVersion, bxInvPartNum=bxInvPartNum, mlxIBCADeviceName=mlxIBCADeviceName, mlxIBRouterInsertion=mlxIBRouterInsertion, mlxIBCAPCIFunction=mlxIBCAPCIFunction, mlxIBPortStateChange=mlxIBPortStateChange, ibVariables=ibVariables, bxIbCntEntry=bxIbCntEntry, bxInvTable=bxInvTable, bxEthCntRcvRunt=bxEthCntRcvRunt, storage=storage, cntXmitData=cntXmitData, bxFcCntRcvNonOperational=bxFcCntRcvNonOperational, mlxIBSwitchInfoTableNumSwitches=mlxIBSwitchInfoTableNumSwitches, mlxIBSwitchInfoTable=mlxIBSwitchInfoTable, mlxIBPortInsertion=mlxIBPortInsertion, bxEthCntXmitBcastPkts=bxEthCntXmitBcastPkts, cntVL15Drop=cntVL15Drop, bxFcCntRcvCRC=bxFcCntRcvCRC, serialNumber=serialNumber, bxFcCntRcvDiscards=bxFcCntRcvDiscards, procUnexpectedExit=procUnexpectedExit, mlxIBCAPCIPhysicalSlot=mlxIBCAPCIPhysicalSlot, mlxIBCAPCIDomain=mlxIBCAPCIDomain, bxIbCntName=bxIbCntName, cpuIndex=cpuIndex, mlxIBSwitchIndex=mlxIBSwitchIndex, smNotifications=smNotifications, bxFcCntXmitErr=bxFcCntXmitErr, mlxIBPortState=mlxIBPortState, procNumFailures=procNumFailures, bxEthCntName=bxEthCntName, bxFcCntRcvPkts=bxFcCntRcvPkts, bxIbCntRate=bxIbCntRate, bxFcCntStatus=bxFcCntStatus, bxIbCntGUID=bxIbCntGUID, bxEthCntStatus=bxEthCntStatus, bxEthCntXmitMcastPkts=bxEthCntXmitMcastPkts, cntEntry=cntEntry, insufficientFans=insufficientFans, cntWidth=cntWidth, mlxIBCAIndex=mlxIBCAIndex, mlxIBCANodeGUID=mlxIBCANodeGUID, ibNotifications=ibNotifications, bxIbCntSpeed=bxIbCntSpeed, bxInvFirmware=bxInvFirmware, bxEthCntRcvErr=bxEthCntRcvErr, mlxIBCAHardwareVersion=mlxIBCAHardwareVersion, bxIbCntLogState=bxIbCntLogState, lowPowerRecover=lowPowerRecover, bxIbCntPhyState=bxIbCntPhyState, PYSNMP_MODULE_ID=mellanox, bxIbCntXmitDiscards=bxIbCntXmitDiscards, bxFcCntRcvRemainCredits=bxFcCntRcvRemainCredits, bxFcCntXmitLinkReset=bxFcCntXmitLinkReset, bxFcCntEntry=bxFcCntEntry, bxFcPorts=bxFcPorts, fsEntry=fsEntry, bxEthCntRcvJumboPkts=bxEthCntRcvJumboPkts, bxEthCntAdminMode=bxEthCntAdminMode, diskSpaceLow=diskSpaceLow, mlxIBCAType=mlxIBCAType, bxIbCntRcvPkts=bxIbCntRcvPkts, cntRcvErr=cntRcvErr, asicOverTempReset=asicOverTempReset, cntRcvData=cntRcvData, mlxIBCAInfoGroup=mlxIBCAInfoGroup, mlxIBPortRemoval=mlxIBPortRemoval, mlxIBCAHealthStatus=mlxIBCAHealthStatus, bxInventory=bxInventory, userTime=userTime, bxFcCntXmitData=bxFcCntXmitData, bxIbPorts=bxIbPorts, mlxIBCANumPorts=mlxIBCANumPorts, mlxIBPortNodeType=mlxIBPortNodeType, mlxIBCAHealthStatusChange=mlxIBCAHealthStatusChange, fsSpaceUsed=fsSpaceUsed, type=type, mlxIBCAInfoTable=mlxIBCAInfoTable, systemTime=systemTime, mlxIBCAPCISlot=mlxIBCAPCISlot, buildInfo=buildInfo, cntName=cntName, mlxIBCAInfoTableNumCAs=mlxIBCAInfoTableNumCAs, mlxIBCAInsertion=mlxIBCAInsertion, invTable=invTable, bxIbCntMaxSupportedMTUs=bxIbCntMaxSupportedMTUs, bxFcCntWWPN=bxFcCntWWPN, mlxIBCAPCIBus=mlxIBCAPCIBus, bxEthCntEntry=bxEthCntEntry, cntRcvPkts=cntRcvPkts, bxAsicOverTemp=bxAsicOverTemp, lowPower=lowPower, unexpectedShutdown=unexpectedShutdown, mlxIBObjects=mlxIBObjects, bxIbCntIndex=bxIbCntIndex, bxAsicChipDown=bxAsicChipDown, bxFcCntRcvLong=bxFcCntRcvLong, mlxIBPortPhysicalState=mlxIBPortPhysicalState, bxFcCntXmitPkts=bxFcCntXmitPkts, mlxIBCAModelString=mlxIBCAModelString, mlxIBCARemoval=mlxIBCARemoval, bxEthCntRcvUcastPkts=bxEthCntRcvUcastPkts, mlxIBPortInfoTableNumPorts=mlxIBPortInfoTableNumPorts, invType=invType, cntPort=cntPort, mlxIBRouterInfoTableNumRouters=mlxIBRouterInfoTableNumRouters, bxIbCntVLCapabilities=bxIbCntVLCapabilities, mlxIBPortGUID=mlxIBPortGUID, cntTable=cntTable, bxIbCntLID=bxIbCntLID, bxEthCntFlowcontrolMode=bxEthCntFlowcontrolMode, cntVLCapabilities=cntVLCapabilities, bxFcCntName=bxFcCntName, bxIbCntOperationalVLs=bxIbCntOperationalVLs, mlxIBPortPhysicalStateChange=mlxIBPortPhysicalStateChange, bxInvType=bxInvType, bxEthCntFlowcontrolStatus=bxEthCntFlowcontrolStatus, idleTime=idleTime, gmNotifications=gmNotifications, ibPorts=ibPorts, invFirmware=invFirmware, procEntry=procEntry, bxIbCntSymErr=bxIbCntSymErr, asicOverTemp=asicOverTemp, mlxIBPortIndex=mlxIBPortIndex, ibSMdown=ibSMdown, bxEthCntXmitPkts=bxEthCntXmitPkts, bxInvEntry=bxInvEntry, bxIbCntRcvData=bxIbCntRcvData, fsSpaceFree=fsSpaceFree, cntMTU=cntMTU, procmgr=procmgr, bxFcCntXmitOffline=bxFcCntXmitOffline, bxEthCntRcvNoBuffer=bxEthCntRcvNoBuffer, bxEthCntDuplex=bxEthCntDuplex, mlxIBCASerialNumber=mlxIBCASerialNumber, mlxIBSwitchRemoval=mlxIBSwitchRemoval, subnetMngr=subnetMngr, mlxIBRouterIndex=mlxIBRouterIndex, bxFcCntRcvShort=bxFcCntRcvShort, mlxIBSwitchInsertion=mlxIBSwitchInsertion, mlxIBPortInfoTable=mlxIBPortInfoTable, bxInvName=bxInvName, bxFcCntAdminMode=bxFcCntAdminMode, bxEthCntRcvData=bxEthCntRcvData, bxFcCntFCID=bxFcCntFCID, internalBusError=internalBusError, invPartNum=invPartNum, cntOperationalVLs=cntOperationalVLs, mlxIBRouterInfoGroup=mlxIBRouterInfoGroup, ibSMup=ibSMup, asicChipDown=asicChipDown, bxFcCntXmitDiscards=bxFcCntXmitDiscards, mlxIBSwitchInfoEntry=mlxIBSwitchInfoEntry, bxFcCntSupportedSpeeds=bxFcCntSupportedSpeeds, generalMgmt=generalMgmt, cpuEntry=cpuEntry, bxIbCntXmitData=bxIbCntXmitData, mlxIBNotifications=mlxIBNotifications, cntLogState=cntLogState, mlxIBRouterInfoEntry=mlxIBRouterInfoEntry, bxFcCntXmitCreditsAlloc=bxFcCntXmitCreditsAlloc, cpuTable=cpuTable, bxEthCntMTU=bxEthCntMTU, bxFcCntXmitRemainCredits=bxFcCntXmitRemainCredits, mlxIBPortNodeIndex=mlxIBPortNodeIndex, bxEthCntRcvCRC=bxEthCntRcvCRC, bxIbCntXmitWaits=bxIbCntXmitWaits, cntXmitPkts=cntXmitPkts, fsTable=fsTable, cntSupportedWidths=cntSupportedWidths, bxIbCntSupportedWidths=bxIbCntSupportedWidths, mlxIBPortLocalPortNumber=mlxIBPortLocalPortNumber, mlxIBRouterInfoTable=mlxIBRouterInfoTable, nodeName=nodeName, bxIbCntMTU=bxIbCntMTU, procStatus=procStatus, smVariables=smVariables, mlxIBPortInfoGroup=mlxIBPortInfoGroup, invEntry=invEntry, bxEthCntRcvMcatsPkts=bxEthCntRcvMcatsPkts, bxFcCntSpeed=bxFcCntSpeed, procIndex=procIndex, mellanox=mellanox, insufficientFansRecover=insufficientFansRecover, fsSpaceAvail=fsSpaceAvail, fsIndex=fsIndex, invName=invName, bxInvSerialNum=bxInvSerialNum, bxIbCntPort=bxIbCntPort, cntPhyState=cntPhyState, mlxIBCAIrq=mlxIBCAIrq, mlxIBCASystemImageGUID=mlxIBCASystemImageGUID, bxBridge=bxBridge, ibSwitch=ibSwitch, invSerialNum=invSerialNum, mellanoxMgmt=mellanoxMgmt, bxIbCntWidth=bxIbCntWidth, bxEthCntXmitErr=bxEthCntXmitErr, bxVariables=bxVariables, bxFcCntTable=bxFcCntTable, procName=procName, cntLID=cntLID, bxFcCntRcvErr=bxFcCntRcvErr, cntIndex=cntIndex, bxFcCntRcvUnknown=bxFcCntRcvUnknown, ibSMrestart=ibSMrestart, mlxIBCAInfoEntry=mlxIBCAInfoEntry, mlxIBCAFirmwareVersion=mlxIBCAFirmwareVersion, bxFcCntRcvLinkReset=bxFcCntRcvLinkReset, bxIbCntVL15Drop=bxIbCntVL15Drop, bxAsicOverTempReset=bxAsicOverTempReset, invHealthStatus=invHealthStatus, bxEthCntSupportedSpeeds=bxEthCntSupportedSpeeds, cpus=cpus, IbGuid=IbGuid, mellanoxProducts=mellanoxProducts, gmVariables=gmVariables, cntSpeed=cntSpeed, cntGUID=cntGUID, bxEthCntRcvBcastPkts=bxEthCntRcvBcastPkts, bxFcCntRcvCreditsAlloc=bxFcCntRcvCreditsAlloc, ibInventory=ibInventory, systemHealthStatus=systemHealthStatus, mlxIBSwitchInfoGroup=mlxIBSwitchInfoGroup, bxEthCntSpeed=bxEthCntSpeed, cntSupportedSpeeds=cntSupportedSpeeds, bxEthCntXmitData=bxEthCntXmitData)
mibBuilder.exportSymbols("MELLANOX-MIB", bxFcCntIndex=bxFcCntIndex, procCrash=procCrash, procTable=procTable, bxEthCntXmitUcastPkts=bxEthCntXmitUcastPkts, bxFcCntRcvOffline=bxFcCntRcvOffline, fsMountPoint=fsMountPoint, bxNotifications=bxNotifications)
