#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-SDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-SDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
tmnxCardSlotNum, tmnxChassisIndex, tmnxMDASlotNum = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum", "tmnxChassisIndex", "tmnxMDASlotNum")
TFilterID, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-FILTER-MIB", "TFilterID")
timetraSRMIBModules, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
TdmOptionsSigPkts, tmnxSvcObjs, ConfigStatus, PWTemplateId, TdmOptionsCasTrunkFraming, svcDhcpLseStateOldChAddr, L2RouteOrigin, svcDhcpClientLease, svcTlsMacMoveMaxRate, svcId, tmnxServObjs, svcDhcpProxyError, custId, TlsLimitMacMoveLevel, tmnxCustomerRootBridgeId, ServObjName, tmnxServNotifications, tstpTraps, StpExceptionCondition, L2ptProtocols, tmnxCustomerBridgeId, tmnxOldSdpBindTlsStpPortState, tlsDhcpPacketProblem, svcDhcpLseStatePopulateError, tmnxServConformance, tmnxOtherBridgeId, SdpBindTlsBpduTranslation, SdpBindBandwidth, ServObjDesc, TlsLimitMacMove, MvplsPruneState, TStpPortState, svcVpnId, StpPortRole, svcTlsStpDesignatedRoot, VpnId, LspIdList, StpProtocol, SdpBFHundredthsOfPercent, svcDhcpCoAError, svcDhcpLseStateOldCiAddr, BridgeId, svcDhcpPacketProblem, svcDhcpSubAuthError, SdpId, svcDhcpLseStateNewCiAddr, svcDhcpLseStateNewChAddr, SdpBindVcType = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", "TdmOptionsSigPkts", "tmnxSvcObjs", "ConfigStatus", "PWTemplateId", "TdmOptionsCasTrunkFraming", "svcDhcpLseStateOldChAddr", "L2RouteOrigin", "svcDhcpClientLease", "svcTlsMacMoveMaxRate", "svcId", "tmnxServObjs", "svcDhcpProxyError", "custId", "TlsLimitMacMoveLevel", "tmnxCustomerRootBridgeId", "ServObjName", "tmnxServNotifications", "tstpTraps", "StpExceptionCondition", "L2ptProtocols", "tmnxCustomerBridgeId", "tmnxOldSdpBindTlsStpPortState", "tlsDhcpPacketProblem", "svcDhcpLseStatePopulateError", "tmnxServConformance", "tmnxOtherBridgeId", "SdpBindTlsBpduTranslation", "SdpBindBandwidth", "ServObjDesc", "TlsLimitMacMove", "MvplsPruneState", "TStpPortState", "svcVpnId", "StpPortRole", "svcTlsStpDesignatedRoot", "VpnId", "LspIdList", "StpProtocol", "SdpBFHundredthsOfPercent", "svcDhcpCoAError", "svcDhcpLseStateOldCiAddr", "BridgeId", "svcDhcpPacketProblem", "svcDhcpSubAuthError", "SdpId", "svcDhcpLseStateNewCiAddr", "svcDhcpLseStateNewChAddr", "SdpBindVcType")
TPolicyStatementNameOrEmpty, TmnxServId, TmnxIgmpVersion, SdpBindId, TmnxCustId, TNamedItemOrEmpty, TmnxEnabledDisabled, TmnxVRtrMplsLspID, TItemDescription, TNamedItem, TmnxVPNRouteDistinguisher, TmnxOperState, ServiceAdminStatus = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TPolicyStatementNameOrEmpty", "TmnxServId", "TmnxIgmpVersion", "SdpBindId", "TmnxCustId", "TNamedItemOrEmpty", "TmnxEnabledDisabled", "TmnxVRtrMplsLspID", "TItemDescription", "TNamedItem", "TmnxVPNRouteDistinguisher", "TmnxOperState", "ServiceAdminStatus")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Bits, Counter32, MibIdentifier, ObjectIdentity, Counter64, IpAddress, iso, TimeTicks, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress", "iso", "TimeTicks", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32")
TimeStamp, RowStatus, TruthValue, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "TruthValue", "TextualConvention", "MacAddress", "DisplayString")
timetraServicesSdpMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 56))
timetraServicesSdpMIBModule.setRevisions(('1907-10-01 00:00',))
if mibBuilder.loadTexts: timetraServicesSdpMIBModule.setLastUpdated('0710010000Z')
if mibBuilder.loadTexts: timetraServicesSdpMIBModule.setOrganization('Alcatel')
tmnxSdpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4))
tmnxSdpNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100))
tmnxSdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4))
sdpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4))
sdpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0))
sdpNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNumEntries.setStatus('current')
sdpNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 2), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNextFreeId.setStatus('current')
sdpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3), )
if mibBuilder.loadTexts: sdpInfoTable.setStatus('current')
sdpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpInfoEntry.setStatus('current')
sdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 1), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpId.setStatus('current')
sdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpRowStatus.setStatus('current')
sdpDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gre", 1), ("mpls", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpDelivery.setStatus('current')
sdpFarEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpFarEndIpAddress.setStatus('current')
sdpLspList = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 5), LspIdList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLspList.setStatus('current')
sdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 6), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpDescription.setStatus('current')
sdpLabelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tldp", 2))).clone('tldp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLabelSignaling.setStatus('current')
sdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 8), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminStatus.setStatus('current')
sdpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("notAlive", 2), ("notReady", 3), ("invalidEgressInterface", 4), ("transportTunnelDown", 5), ("down", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperStatus.setStatus('current')
sdpAdminPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 9194), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminPathMtu.setStatus('current')
sdpOperPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperPathMtu.setStatus('current')
sdpKeepAliveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveAdminStatus.setStatus('current')
sdpKeepAliveOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alive", 1), ("noResponse", 2), ("senderIdInvalid", 3), ("responderIdError", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveOperStatus.setStatus('current')
sdpKeepAliveHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHelloTime.setStatus('current')
sdpKeepAliveMaxDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveMaxDropCount.setStatus('current')
sdpKeepAliveHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHoldDownTime.setStatus('current')
sdpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastMgmtChange.setStatus('current')
sdpKeepAliveHelloMessageLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(40, 9198), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHelloMessageLength.setStatus('current')
sdpKeepAliveNumHelloRequestMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveNumHelloRequestMessages.setStatus('current')
sdpKeepAliveNumHelloResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveNumHelloResponseMessages.setStatus('current')
sdpKeepAliveNumLateHelloResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpKeepAliveNumLateHelloResponseMessages.setStatus('current')
sdpKeepAliveHelloRequestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpKeepAliveHelloRequestTimeout.setStatus('current')
sdpLdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLdpEnabled.setStatus('current')
sdpVlanVcEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpVlanVcEtype.setStatus('current')
sdpAdvertisedVllMtuOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdvertisedVllMtuOverride.setStatus('current')
sdpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 26), Bits().clone(namedValues=NamedValues(("sdpAdminDown", 0), ("signalingSessionDown", 1), ("transportTunnelDown", 2), ("keepaliveFailure", 3), ("invalidEgressInterface", 4), ("noSystemIpAddress", 5), ("transportTunnelUnstable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperFlags.setStatus('current')
sdpLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastStatusChange.setStatus('current')
sdpMvplsMgmtService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 28), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpMvplsMgmtService.setStatus('current')
sdpMvplsMgmtSdpBndId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 29), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpMvplsMgmtSdpBndId.setStatus('current')
sdpCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpCollectAcctStats.setStatus('current')
sdpAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAccountingPolicyId.setStatus('current')
sdpClassFwdingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpClassFwdingEnabled.setStatus('current')
sdpClassFwdingDefaultLsp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 33), TmnxVRtrMplsLspID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpClassFwdingDefaultLsp.setStatus('current')
sdpClassFwdingMcLsp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 34), TmnxVRtrMplsLspID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpClassFwdingMcLsp.setStatus('current')
sdpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpMetric.setStatus('current')
sdpAutoSdp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoSdp.setStatus('current')
sdpSnmpAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpSnmpAllowed.setStatus('current')
sdpPBBEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(35047)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpPBBEtype.setStatus('current')
sdpBandwidthBookingFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBandwidthBookingFactor.setStatus('current')
sdpOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 40), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperBandwidth.setStatus('current')
sdpAvailableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 41), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAvailableBandwidth.setStatus('current')
sdpMaxBookableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 42), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sdpMaxBookableBandwidth.setStatus('current')
sdpBookedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 43), Unsigned32()).setUnits('kilo-bits per second').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sdpBookedBandwidth.setStatus('current')
sdpCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 3, 1, 44), L2RouteOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpCreationOrigin.setStatus('current')
sdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4), )
if mibBuilder.loadTexts: sdpBindTable.setStatus('current')
sdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindEntry.setStatus('current')
sdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 1), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindId.setStatus('current')
sdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindRowStatus.setStatus('current')
sdpBindAdminIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2048, 18431), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminIngressLabel.setStatus('current')
sdpBindAdminEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminEgressLabel.setStatus('current')
sdpBindOperIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1048575), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperIngressLabel.setStatus('current')
sdpBindOperEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1048575), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperEgressLabel.setStatus('current')
sdpBindAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 7), ServiceAdminStatus().clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminStatus.setStatus('current')
sdpBindOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("up", 1), ("noEgressLabel", 2), ("noIngressLabel", 3), ("noLabels", 4), ("down", 5), ("svcMtuMismatch", 6), ("sdpPathMtuTooSmall", 7), ("sdpNotReady", 8), ("sdpDown", 9), ("sapDown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperStatus.setStatus('current')
sdpBindLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindLastMgmtChange.setStatus('current')
sdpBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spoke", 1), ("mesh", 2))).clone('mesh')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindType.setStatus('current')
sdpBindIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 11), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIngressMacFilterId.setStatus('current')
sdpBindIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 12), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIngressIpFilterId.setStatus('current')
sdpBindEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 13), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEgressMacFilterId.setStatus('current')
sdpBindEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 14), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEgressIpFilterId.setStatus('current')
sdpBindVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 15), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindVpnId.setStatus('current')
sdpBindCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 16), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCustId.setStatus('current')
sdpBindVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 17), SdpBindVcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindVcType.setStatus('current')
sdpBindVlanVcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindVlanVcTag.setStatus('current')
sdpBindSplitHorizonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 19), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindSplitHorizonGrp.setStatus('current')
sdpBindOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 20), Bits().clone(namedValues=NamedValues(("sdpBindAdminDown", 0), ("svcAdminDown", 1), ("sapOperDown", 2), ("sdpOperDown", 3), ("sdpPathMtuTooSmall", 4), ("noIngressVcLabel", 5), ("noEgressVcLabel", 6), ("svcMtuMismatch", 7), ("vcTypeMismatch", 8), ("relearnLimitExceeded", 9), ("iesIfAdminDown", 10), ("releasedIngressVcLabel", 11), ("labelsExhausted", 12), ("svcParamMismatch", 13), ("insufficientBandwidth", 14), ("pwPeerFaultStatusBits", 15), ("meshSdpDown", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperFlags.setStatus('current')
sdpBindLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindLastStatusChange.setStatus('current')
sdpBindIesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 22), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIesIfIndex.setStatus('current')
sdpBindMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 23), TmnxEnabledDisabled()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindMacPinning.setStatus('current')
sdpBindIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 24), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIngressIpv6FilterId.setStatus('current')
sdpBindEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 25), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEgressIpv6FilterId.setStatus('current')
sdpBindCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindCollectAcctStats.setStatus('current')
sdpBindAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 27), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAccountingPolicyId.setStatus('current')
sdpBindPwPeerStatusBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 28), Bits().clone(namedValues=NamedValues(("pwNotForwarding", 0), ("lacIngressFault", 1), ("lacEgresssFault", 2), ("psnIngressFault", 3), ("psnEgressFault", 4), ("pwFwdingStandby", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPwPeerStatusBits.setStatus('current')
sdpBindPeerVccvCvBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 29), Bits().clone(namedValues=NamedValues(("icmpPing", 0), ("lspPing", 1), ("bfdFaultDetection", 2), ("bfdFaultDetectionAndSignalling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPeerVccvCvBits.setStatus('current')
sdpBindPeerVccvCcBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 30), Bits().clone(namedValues=NamedValues(("pwe3ControlWord", 0), ("mplsRouterAlertLabel", 1), ("mplsPwDemultiplexorLabel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPeerVccvCcBits.setStatus('current')
sdpBindControlWordBit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 31), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindControlWordBit.setStatus('current')
sdpBindOperControlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperControlWord.setStatus('current')
sdpBindEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 33), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEndPoint.setStatus('current')
sdpBindEndPointPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindEndPointPrecedence.setStatus('current')
sdpBindIsICB = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 35), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindIsICB.setStatus('current')
sdpBindPwFaultInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 36), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPwFaultInetAddressType.setStatus('current')
sdpBindPwFaultInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 37), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindPwFaultInetAddress.setStatus('current')
sdpBindClassFwdingOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 38), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindClassFwdingOperState.setStatus('current')
sdpBindForceVlanVcForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 39), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindForceVlanVcForwarding.setStatus('current')
sdpBindAdminBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 40), SdpBindBandwidth()).setUnits('kilo-bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindAdminBandwidth.setStatus('current')
sdpBindOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 4, 1, 41), SdpBindBandwidth()).setUnits('kilo-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindOperBandwidth.setStatus('current')
sdpBindBaseStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5), )
if mibBuilder.loadTexts: sdpBindBaseStatsTable.setStatus('current')
sdpBindBaseStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindBaseStatsEntry.setStatus('current')
sdpBindBaseStatsIngressForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngressForwardedPackets.setStatus('current')
sdpBindBaseStatsIngressDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngressDroppedPackets.setStatus('current')
sdpBindBaseStatsEgressForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsEgressForwardedPackets.setStatus('current')
sdpBindBaseStatsEgressForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsEgressForwardedOctets.setStatus('current')
sdpBindBaseStatsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 5), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsCustId.setStatus('current')
sdpBindBaseStatsIngFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngFwdOctets.setStatus('current')
sdpBindBaseStatsIngDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindBaseStatsIngDropOctets.setStatus('current')
sdpBindTlsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6), )
if mibBuilder.loadTexts: sdpBindTlsTable.setStatus('current')
sdpBindTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindTlsEntry.setStatus('current')
sdpBindTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 1), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpAdminStatus.setStatus('current')
sdpBindTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpPriority.setStatus('current')
sdpBindTlsStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpPortNum.setStatus('current')
sdpBindTlsStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpPathCost.setStatus('current')
sdpBindTlsStpRapidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 5), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpRapidStart.setStatus('current')
sdpBindTlsStpBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("dot1d", 2), ("pvst", 3))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpBpduEncap.setStatus('current')
sdpBindTlsStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 7), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpPortState.setStatus('current')
sdpBindTlsStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpDesignatedBridge.setStatus('current')
sdpBindTlsStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpDesignatedPort.setStatus('current')
sdpBindTlsStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpForwardTransitions.setStatus('current')
sdpBindTlsStpInConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInConfigBpdus.setStatus('current')
sdpBindTlsStpInTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInTcnBpdus.setStatus('current')
sdpBindTlsStpInBadBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInBadBpdus.setStatus('current')
sdpBindTlsStpOutConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutConfigBpdus.setStatus('current')
sdpBindTlsStpOutTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutTcnBpdus.setStatus('current')
sdpBindTlsStpOperBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot1d", 2), ("pvst", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOperBpduEncap.setStatus('current')
sdpBindTlsStpVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 17), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpVpnId.setStatus('current')
sdpBindTlsStpCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 18), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpCustId.setStatus('current')
sdpBindTlsMacAddressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMacAddressLimit.setStatus('current')
sdpBindTlsNumMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsNumMacAddresses.setStatus('current')
sdpBindTlsNumStaticMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsNumStaticMacAddresses.setStatus('current')
sdpBindTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 22), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMacLearning.setStatus('current')
sdpBindTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 23), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMacAgeing.setStatus('current')
sdpBindTlsStpOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOperEdge.setStatus('current')
sdpBindTlsStpAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1))).clone('forceTrue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpAdminPointToPoint.setStatus('current')
sdpBindTlsStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 26), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpPortRole.setStatus('current')
sdpBindTlsStpAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 27), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpAutoEdge.setStatus('current')
sdpBindTlsStpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 28), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOperProtocol.setStatus('current')
sdpBindTlsStpInRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInRstBpdus.setStatus('current')
sdpBindTlsStpOutRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutRstBpdus.setStatus('current')
sdpBindTlsLimitMacMove = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 31), TlsLimitMacMove().clone('blockable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsLimitMacMove.setStatus('current')
sdpBindTlsDiscardUnknownSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 32), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsDiscardUnknownSource.setStatus('current')
sdpBindTlsMvplsPruneState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 33), MvplsPruneState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMvplsPruneState.setStatus('current')
sdpBindTlsMvplsMgmtService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 34), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMvplsMgmtService.setStatus('current')
sdpBindTlsMvplsMgmtSdpBndId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 35), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMvplsMgmtSdpBndId.setStatus('current')
sdpBindTlsStpException = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 36), StpExceptionCondition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpException.setStatus('current')
sdpBindTlsL2ptTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 37), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsL2ptTermination.setStatus('current')
sdpBindTlsBpduTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 38), SdpBindTlsBpduTranslation().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsBpduTranslation.setStatus('current')
sdpBindTlsStpRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsStpRootGuard.setStatus('current')
sdpBindTlsStpInMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpInMstBpdus.setStatus('current')
sdpBindTlsStpOutMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpOutMstBpdus.setStatus('current')
sdpBindTlsStpRxdDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 42), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsStpRxdDesigBridge.setStatus('current')
sdpBindTlsMacMoveNextUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 43), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMacMoveNextUpTime.setStatus('current')
sdpBindTlsMacMoveRateExcdLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMacMoveRateExcdLeft.setStatus('current')
sdpBindTlsLimitMacMoveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 45), TlsLimitMacMoveLevel().clone('tertiary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsLimitMacMoveLevel.setStatus('current')
sdpBindTlsBpduTransOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("disabled", 2), ("pvst", 3), ("stp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsBpduTransOper.setStatus('current')
sdpBindTlsL2ptProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 47), L2ptProtocols().clone(namedValues=NamedValues(("stp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsL2ptProtocols.setStatus('current')
sdpBindTlsIgnoreStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 48), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsIgnoreStandbySig.setStatus('current')
sdpBindTlsBlockOnMeshFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 6, 1, 49), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsBlockOnMeshFail.setStatus('current')
sdpBindMeshTlsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7), )
if mibBuilder.loadTexts: sdpBindMeshTlsTable.setStatus('current')
sdpBindMeshTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindMeshTlsEntry.setStatus('current')
sdpBindMeshTlsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 1), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsPortState.setStatus('current')
sdpBindMeshTlsHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-active", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsHoldDownTimer.setStatus('current')
sdpBindMeshTlsTransitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("waiting-for-agreement", 2), ("agreement-received", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsTransitionState.setStatus('current')
sdpBindMeshTlsNotInMstRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindMeshTlsNotInMstRegion.setStatus('current')
sdpBindApipeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8), )
if mibBuilder.loadTexts: sdpBindApipeTable.setStatus('current')
sdpBindApipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindApipeEntry.setStatus('current')
sdpBindApipeAdminConcatCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeAdminConcatCellCount.setStatus('current')
sdpBindApipeSigConcatCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindApipeSigConcatCellCount.setStatus('current')
sdpBindApipeOperConcatCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindApipeOperConcatCellCount.setStatus('current')
sdpBindApipeConcatMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400)).clone(400)).setUnits('hundreds of microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeConcatMaxDelay.setStatus('current')
sdpBindApipeConcatCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeConcatCellClp.setStatus('current')
sdpBindApipeConcatCellAal5Fr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 8, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindApipeConcatCellAal5Fr.setStatus('current')
sdpBindDhcpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9), )
if mibBuilder.loadTexts: sdpBindDhcpInfoTable.setStatus('current')
sdpBindDhcpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindDhcpInfoEntry.setStatus('current')
sdpBindDhcpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9, 1, 1), ServObjDesc().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindDhcpDescription.setStatus('current')
sdpBindDhcpSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 9, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindDhcpSnoop.setStatus('current')
sdpBindDhcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10), )
if mibBuilder.loadTexts: sdpBindDhcpStatsTable.setStatus('current')
sdpBindDhcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindDhcpStatsEntry.setStatus('current')
sdpBindDhcpStatsClntSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntSnoopdPckts.setStatus('current')
sdpBindDhcpStatsSrvrSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrSnoopdPckts.setStatus('current')
sdpBindDhcpStatsClntForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntForwdPckts.setStatus('current')
sdpBindDhcpStatsSrvrForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrForwdPckts.setStatus('current')
sdpBindDhcpStatsClntDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntDropdPckts.setStatus('current')
sdpBindDhcpStatsSrvrDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsSrvrDropdPckts.setStatus('current')
sdpBindDhcpStatsClntProxRadPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntProxRadPckts.setStatus('current')
sdpBindDhcpStatsClntProxLSPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsClntProxLSPckts.setStatus('current')
sdpBindDhcpStatsGenReleasePckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsGenReleasePckts.setStatus('current')
sdpBindDhcpStatsGenForceRenPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindDhcpStatsGenForceRenPckts.setStatus('current')
sdpBindIpipeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11), )
if mibBuilder.loadTexts: sdpBindIpipeTable.setStatus('current')
sdpBindIpipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindIpipeEntry.setStatus('current')
sdpBindIpipeCeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindIpipeCeInetAddressType.setStatus('current')
sdpBindIpipeCeInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindIpipeCeInetAddress.setStatus('current')
sdpFCMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12), )
if mibBuilder.loadTexts: sdpFCMappingTable.setStatus('current')
sdpFCMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFCMappingFCName"))
if mibBuilder.loadTexts: sdpFCMappingEntry.setStatus('current')
sdpFCMappingFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sdpFCMappingFCName.setStatus('current')
sdpFCMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpFCMappingRowStatus.setStatus('current')
sdpFCMappingLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 12, 1, 3), TmnxVRtrMplsLspID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpFCMappingLspId.setStatus('current')
sdpBindCpipeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15), )
if mibBuilder.loadTexts: sdpBindCpipeTable.setStatus('current')
sdpBindCpipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindCpipeEntry.setStatus('current')
sdpBindCpipeLocalPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 1), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalPayloadSize.setStatus('current')
sdpBindCpipePeerPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerPayloadSize.setStatus('current')
sdpBindCpipeLocalBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 3), Unsigned32()).setUnits('64 Kbits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalBitrate.setStatus('current')
sdpBindCpipePeerBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 4), Unsigned32()).setUnits('64 Kbits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerBitrate.setStatus('current')
sdpBindCpipeLocalSigPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 5), TdmOptionsSigPkts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalSigPkts.setStatus('current')
sdpBindCpipePeerSigPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 6), TdmOptionsSigPkts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerSigPkts.setStatus('current')
sdpBindCpipeLocalCasTrunkFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 7), TdmOptionsCasTrunkFraming()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalCasTrunkFraming.setStatus('current')
sdpBindCpipePeerCasTrunkFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 8), TdmOptionsCasTrunkFraming()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerCasTrunkFraming.setStatus('current')
sdpBindCpipeLocalUseRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalUseRtpHeader.setStatus('current')
sdpBindCpipePeerUseRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerUseRtpHeader.setStatus('current')
sdpBindCpipeLocalDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalDifferential.setStatus('current')
sdpBindCpipePeerDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerDifferential.setStatus('current')
sdpBindCpipeLocalTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 13), Unsigned32()).setUnits('8 KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipeLocalTimestampFreq.setStatus('current')
sdpBindCpipePeerTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 15, 1, 14), Unsigned32()).setUnits('8 KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindCpipePeerTimestampFreq.setStatus('current')
sdpBindTlsMfibAllowedMdaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 13), )
if mibBuilder.loadTexts: sdpBindTlsMfibAllowedMdaTable.setStatus('current')
sdpBindTlsMfibAllowedMdaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: sdpBindTlsMfibAllowedMdaEntry.setStatus('current')
sdpBindTlsMfibMdaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindTlsMfibMdaRowStatus.setStatus('current')
sdpBindTlsL2ptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16), )
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsTable.setStatus('current')
sdpBindTlsL2ptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsEntry.setStatus('current')
sdpBindTlsL2ptStatsLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsLastClearedTime.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpConfigBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpConfigBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpRstBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpRstBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpTcnBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsStpTcnBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstConfigBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstConfigBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstRstBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstRstBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstTcnBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPvstTcnBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsOtherBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsOtherBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsOtherL2ptBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherL2ptBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsOtherL2ptBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherL2ptBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsOtherInvalidBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherInvalidBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsOtherInvalidBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsOtherInvalidBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsCdpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsCdpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsVtpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsVtpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsDtpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsDtpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPagpBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsPagpBpdusTx.setStatus('current')
sdpBindTlsL2ptStatsUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsUdldBpdusRx.setStatus('current')
sdpBindTlsL2ptStatsUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 16, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsL2ptStatsUdldBpdusTx.setStatus('current')
pwTemplateTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateTableLastChanged.setStatus('current')
pwTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18), )
if mibBuilder.loadTexts: pwTemplateTable.setStatus('current')
pwTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"))
if mibBuilder.loadTexts: pwTemplateEntry.setStatus('current')
pwTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 1), PWTemplateId())
if mibBuilder.loadTexts: pwTemplateId.setStatus('current')
pwTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateRowStatus.setStatus('current')
pwTemplateLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateLastChanged.setStatus('current')
pwTemplateUseProvisionedSdp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateUseProvisionedSdp.setStatus('current')
pwTemplateVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 5), SdpBindVcType().clone('ether')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateVcType.setStatus('current')
pwTemplateAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateAccountingPolicyId.setStatus('current')
pwTemplateCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateCollectAcctStats.setStatus('current')
pwTemplateMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 8), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacLearning.setStatus('current')
pwTemplateMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 9), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacAgeing.setStatus('current')
pwTemplateDiscardUnknownSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 10), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateDiscardUnknownSource.setStatus('current')
pwTemplateLimitMacMove = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 11), TlsLimitMacMove().clone('blockable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateLimitMacMove.setStatus('current')
pwTemplateMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 12), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacPinning.setStatus('current')
pwTemplateVlanVcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateVlanVcTag.setStatus('current')
pwTemplateMacAddressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMacAddressLimit.setStatus('current')
pwTemplateShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 15), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgName.setStatus('current')
pwTemplateShgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 16), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgDescription.setStatus('current')
pwTemplateShgRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgRestProtSrcMac.setStatus('current')
pwTemplateShgRestUnprotDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateShgRestUnprotDstMac.setStatus('current')
pwTemplateEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 19), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateEgressMacFilterId.setStatus('current')
pwTemplateEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 20), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateEgressIpFilterId.setStatus('current')
pwTemplateEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 21), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateEgressIpv6FilterId.setStatus('current')
pwTemplateIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 22), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIngressMacFilterId.setStatus('current')
pwTemplateIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 23), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIngressIpFilterId.setStatus('current')
pwTemplateIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 24), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIngressIpv6FilterId.setStatus('current')
pwTemplateIgmpFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 25), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpFastLeave.setStatus('current')
pwTemplateIgmpImportPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 26), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpImportPlcy.setStatus('current')
pwTemplateIgmpLastMembIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setUnits('deci-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpLastMembIntvl.setStatus('current')
pwTemplateIgmpMaxNbrGrps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMaxNbrGrps.setStatus('current')
pwTemplateIgmpGenQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024)).clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpGenQueryIntvl.setStatus('current')
pwTemplateIgmpQueryRespIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpQueryRespIntvl.setStatus('current')
pwTemplateIgmpRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpRobustCount.setStatus('current')
pwTemplateIgmpSendQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 32), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpSendQueries.setStatus('current')
pwTemplateIgmpMcacPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 33), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMcacPolicyName.setStatus('current')
pwTemplateIgmpMcacUnconstBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMcacUnconstBW.setStatus('current')
pwTemplateIgmpMcacPrRsvMndBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpMcacPrRsvMndBW.setStatus('current')
pwTemplateIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 18, 1, 36), TmnxIgmpVersion().clone('version3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpVersion.setStatus('current')
pwTemplateIgmpSnpgGrpSrcTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcTblLC.setStatus('current')
pwTemplateIgmpSnpgGrpSrcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20), )
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcTable.setStatus('current')
pwTemplateIgmpSnpgGrpSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgGrpAddrType"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgGrpAddr"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgSrcAddrType"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgSrcAddr"))
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpSrcEntry.setStatus('current')
pwTemplateIgmpSnpgGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 1), InetAddressType())
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpAddrType.setStatus('current')
pwTemplateIgmpSnpgGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )))
if mibBuilder.loadTexts: pwTemplateIgmpSnpgGrpAddr.setStatus('current')
pwTemplateIgmpSnpgSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 3), InetAddressType())
if mibBuilder.loadTexts: pwTemplateIgmpSnpgSrcAddrType.setStatus('current')
pwTemplateIgmpSnpgSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )))
if mibBuilder.loadTexts: pwTemplateIgmpSnpgSrcAddr.setStatus('current')
pwTemplateIgmpSnpgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateIgmpSnpgRowStatus.setStatus('current')
pwTemplateIgmpSnpgLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 20, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateIgmpSnpgLastChngd.setStatus('current')
pwTemplateMfibAllowedMdaTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaTblLC.setStatus('current')
pwTemplateMfibAllowedMdaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 22), )
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaTable.setStatus('current')
pwTemplateMfibAllowedMdaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: pwTemplateMfibAllowedMdaEntry.setStatus('current')
pwTemplateMfibMdaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 22, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTemplateMfibMdaRowStatus.setStatus('current')
sdpBindTlsMrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTableLastChanged.setStatus('current')
sdpBindTlsMrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24), )
if mibBuilder.loadTexts: sdpBindTlsMrpTable.setStatus('current')
sdpBindTlsMrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindTlsMrpEntry.setStatus('current')
sdpBindTlsMrpLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpLastChngd.setStatus('current')
sdpBindTlsMrpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpJoinTime.setStatus('current')
sdpBindTlsMrpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 60)).clone(30)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpLeaveTime.setStatus('current')
sdpBindTlsMrpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(100)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpLeaveAllTime.setStatus('current')
sdpBindTlsMrpPeriodicTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpPeriodicTime.setStatus('current')
sdpBindTlsMrpPeriodicEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindTlsMrpPeriodicEnabled.setStatus('current')
sdpBindTlsMrpRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxPdus.setStatus('current')
sdpBindTlsMrpDroppedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpDroppedPdus.setStatus('current')
sdpBindTlsMrpTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxPdus.setStatus('current')
sdpBindTlsMrpRxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxNewEvent.setStatus('current')
sdpBindTlsMrpRxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxJoinInEvent.setStatus('current')
sdpBindTlsMrpRxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxInEvent.setStatus('current')
sdpBindTlsMrpRxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxJoinEmptyEvent.setStatus('current')
sdpBindTlsMrpRxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxEmptyEvent.setStatus('current')
sdpBindTlsMrpRxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpRxLeaveEvent.setStatus('current')
sdpBindTlsMrpTxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxNewEvent.setStatus('current')
sdpBindTlsMrpTxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxJoinInEvent.setStatus('current')
sdpBindTlsMrpTxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxInEvent.setStatus('current')
sdpBindTlsMrpTxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxJoinEmptyEvent.setStatus('current')
sdpBindTlsMrpTxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxEmptyEvent.setStatus('current')
sdpBindTlsMrpTxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 24, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMrpTxLeaveEvent.setStatus('current')
sdpBindTlsMmrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25), )
if mibBuilder.loadTexts: sdpBindTlsMmrpTable.setStatus('current')
sdpBindTlsMmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMmrpMacAddr"))
if mibBuilder.loadTexts: sdpBindTlsMmrpEntry.setStatus('current')
sdpBindTlsMmrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1, 1), MacAddress())
if mibBuilder.loadTexts: sdpBindTlsMmrpMacAddr.setStatus('current')
sdpBindTlsMmrpDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMmrpDeclared.setStatus('current')
sdpBindTlsMmrpRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 25, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpBindTlsMmrpRegistered.setStatus('current')
sdpAutoBindBgpInfoTableLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTableLC.setStatus('current')
sdpAutoBindBgpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27), )
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTable.setStatus('current')
sdpAutoBindBgpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpAutoBindBgpInfoEntry.setStatus('current')
sdpAutoBindBgpInfoTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 1), PWTemplateId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTemplateId.setStatus('current')
sdpAutoBindBgpInfoAGI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 2), TmnxVPNRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoAGI.setStatus('current')
sdpAutoBindBgpInfoSAII = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoSAII.setStatus('current')
sdpAutoBindBgpInfoTAII = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 27, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpAutoBindBgpInfoTAII.setStatus('current')
svcTlsBgpADPWTempBindTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindTblLC.setStatus('current')
svcTlsBgpADPWTempBindTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33), )
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindTable.setStatus('current')
svcTlsBgpADPWTempBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"))
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindEntry.setStatus('current')
svcTlsBgpADPWTempBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRowStatus.setStatus('current')
svcTlsBgpADPWTempBindLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindLastChngd.setStatus('current')
svcTlsBgpADPWTempBindSHG = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 33, 1, 3), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindSHG.setStatus('current')
svcTlsBgpADPWTempBindRTTblLC = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 34), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTTblLC.setStatus('current')
svcTlsBgpADPWTempBindRTTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35), )
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTTable.setStatus('current')
svcTlsBgpADPWTempBindRTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateId"), (1, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRT"))
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTEntry.setStatus('current')
svcTlsBgpADPWTempBindRT = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRT.setStatus('current')
svcTlsBgpADPWTempBindRTRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 35, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADPWTempBindRTRowStat.setStatus('current')
svcL2RteTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 38), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2RteTableLastChanged.setStatus('current')
svcL2RteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39), )
if mibBuilder.loadTexts: svcL2RteTable.setStatus('current')
svcL2RteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteVsiPrefix"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteRouteDistinguisher"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteNextHopType"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteNextHop"))
if mibBuilder.loadTexts: svcL2RteEntry.setStatus('current')
svcL2RteVsiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 1), Unsigned32())
if mibBuilder.loadTexts: svcL2RteVsiPrefix.setStatus('current')
svcL2RteRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 2), TmnxVPNRouteDistinguisher())
if mibBuilder.loadTexts: svcL2RteRouteDistinguisher.setStatus('current')
svcL2RteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 3), InetAddressType())
if mibBuilder.loadTexts: svcL2RteNextHopType.setStatus('current')
svcL2RteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 4), InetAddress())
if mibBuilder.loadTexts: svcL2RteNextHop.setStatus('current')
svcL2RteSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 5), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2RteSdpBindId.setStatus('current')
svcL2RtePwTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 39, 1, 6), PWTemplateId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcL2RtePwTemplateId.setStatus('current')
sdpNotifySdpId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 1), SdpId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sdpNotifySdpId.setStatus('current')
dynamicSdpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 2), ConfigStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpStatus.setStatus('current')
dynamicSdpOrigin = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 3), L2RouteOrigin()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpOrigin.setStatus('current')
dynamicSdpCreationError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpCreationError.setStatus('current')
dynamicSdpBindCreationError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 4, 100, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dynamicSdpBindCreationError.setStatus('current')
sdpCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpCreated.setStatus('obsolete')
sdpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpDeleted.setStatus('obsolete')
sdpStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperStatus"))
if mibBuilder.loadTexts: sdpStatusChanged.setStatus('current')
sdpBindCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindCreated.setStatus('obsolete')
sdpBindDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: sdpBindDeleted.setStatus('obsolete')
sdpBindStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperFlags"))
if mibBuilder.loadTexts: sdpBindStatusChanged.setStatus('current')
sdpTlsMacAddrLimitAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpTlsMacAddrLimitAlarmRaised.setStatus('current')
sdpTlsMacAddrLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpTlsMacAddrLimitAlarmCleared.setStatus('current')
sdpTlsDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpPacketProblem"))
if mibBuilder.loadTexts: sdpTlsDHCPSuspiciousPcktRcvd.setStatus('obsolete')
sdpBindDHCPLeaseEntriesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"))
if mibBuilder.loadTexts: sdpBindDHCPLeaseEntriesExceeded.setStatus('current')
sdpBindDHCPLseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"))
if mibBuilder.loadTexts: sdpBindDHCPLseStateOverride.setStatus('current')
sdpBindDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpPacketProblem"))
if mibBuilder.loadTexts: sdpBindDHCPSuspiciousPcktRcvd.setStatus('current')
sdpBindDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: sdpBindDHCPLseStatePopulateErr.setStatus('current')
sdpBindPwPeerStatusBitsChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerStatusBits"))
if mibBuilder.loadTexts: sdpBindPwPeerStatusBitsChanged.setStatus('current')
sdpBindTlsMacMoveExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveMaxRate"))
if mibBuilder.loadTexts: sdpBindTlsMacMoveExceeded.setStatus('current')
sdpBindPwPeerFaultAddrChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddressType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddress"))
if mibBuilder.loadTexts: sdpBindPwPeerFaultAddrChanged.setStatus('current')
sdpBindDHCPProxyServerError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpProxyError"))
if mibBuilder.loadTexts: sdpBindDHCPProxyServerError.setStatus('current')
sdpBindDHCPCoAError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpCoAError"))
if mibBuilder.loadTexts: sdpBindDHCPCoAError.setStatus('obsolete')
sdpBindDHCPSubAuthError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpSubAuthError"))
if mibBuilder.loadTexts: sdpBindDHCPSubAuthError.setStatus('obsolete')
sdpBindSdpStateChangeProcessed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNotifySdpId"))
if mibBuilder.loadTexts: sdpBindSdpStateChangeProcessed.setStatus('current')
sdpBindDHCPLseStateMobilityErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: sdpBindDHCPLseStateMobilityErr.setStatus('current')
sdpBandwidthOverbooked = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMaxBookableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBookedBandwidth"))
if mibBuilder.loadTexts: sdpBandwidthOverbooked.setStatus('current')
sdpBindInsufficientBandwidth = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAvailableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminBandwidth"))
if mibBuilder.loadTexts: sdpBindInsufficientBandwidth.setStatus('current')
dynamicSdpConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpStatus"))
if mibBuilder.loadTexts: dynamicSdpConfigChanged.setStatus('current')
dynamicSdpBindConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpStatus"))
if mibBuilder.loadTexts: dynamicSdpBindConfigChanged.setStatus('current')
dynamicSdpCreationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpCreationError"))
if mibBuilder.loadTexts: dynamicSdpCreationFailed.setStatus('current')
dynamicSdpBindCreationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 4, 0, 27)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindCreationError"))
if mibBuilder.loadTexts: dynamicSdpBindCreationFailed.setStatus('current')
unacknowledgedTCN = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"))
if mibBuilder.loadTexts: unacknowledgedTCN.setStatus('current')
tmnxSvcTopoChgSdpBindMajorState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"))
if mibBuilder.loadTexts: tmnxSvcTopoChgSdpBindMajorState.setStatus('current')
tmnxSvcNewRootSdpBind = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpDesignatedRoot"))
if mibBuilder.loadTexts: tmnxSvcNewRootSdpBind.setStatus('current')
tmnxSvcTopoChgSdpBindState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"))
if mibBuilder.loadTexts: tmnxSvcTopoChgSdpBindState.setStatus('current')
tmnxSvcSdpBindRcvdTCN = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindRcvdTCN.setStatus('current')
tmnxSvcSdpBindRcvdHigherBriPrio = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindRcvdHigherBriPrio.setStatus('current')
tmnxSvcSdpBindEncapPVST = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindEncapPVST.setStatus('current')
tmnxSvcSdpBindEncapDot1d = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: tmnxSvcSdpBindEncapDot1d.setStatus('current')
tmnxSvcSdpActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 31)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperProtocol"))
if mibBuilder.loadTexts: tmnxSvcSdpActiveProtocolChange.setStatus('current')
tmnxStpMeshNotInMstRegion = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 36)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: tmnxStpMeshNotInMstRegion.setStatus('current')
tmnxSdpBndStpExcepCondStateChng = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 38)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpException"))
if mibBuilder.loadTexts: tmnxSdpBndStpExcepCondStateChng.setStatus('current')
tmnxSdpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 1))
tmnxSdpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2))
tmnxSdp77x0V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 1, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindMeshV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpApipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindIpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpAutoBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsMrpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpL2V6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpFCV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindCpipeV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdp77x0V6v0Compliance = tmnxSdp77x0V6v0Compliance.setStatus('current')
tmnxSdp7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 1, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindMeshV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindIpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpAutoBindV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBindTlsMrpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpL2V6v0Group"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpFCV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdp7450V6v0Compliance = tmnxSdp7450V6v0Compliance.setStatus('current')
tmnxSdpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNumEntries"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNextFreeId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpDelivery"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFarEndIpAddress"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLspList"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpDescription"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLabelSignaling"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperPathMtu"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHelloTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveMaxDropCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHoldDownTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveNumHelloRequestMessages"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveNumHelloResponseMessages"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveNumLateHelloResponseMessages"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHelloRequestTimeout"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLdpEnabled"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpVlanVcEtype"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdvertisedVllMtuOverride"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperFlags"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMvplsMgmtService"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMvplsMgmtSdpBndId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpClassFwdingEnabled"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpClassFwdingDefaultLsp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpClassFwdingMcLsp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMetric"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoSdp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpSnmpAllowed"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpPBBEtype"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBandwidthBookingFactor"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpOperBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAvailableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAdminPathMtu"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpKeepAliveHelloMessageLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpV6v0Group = tmnxSdpV6v0Group.setStatus('current')
tmnxSdpBindV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCustId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindVcType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindVlanVcTag"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindSplitHorizonGrp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperFlags"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIesIfIndex"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMacPinning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerStatusBits"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPeerVccvCvBits"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPeerVccvCcBits"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindControlWordBit"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperControlWord"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEndPoint"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindEndPointPrecedence"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIsICB"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddressType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindClassFwdingOperState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindForceVlanVcForwarding"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngressForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngressDroppedPackets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsEgressForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsEgressForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsCustId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngFwdOctets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindBaseStatsIngDropOctets"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminIngressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindAdminEgressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperIngressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindOperEgressLabel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwFaultInetAddress"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIpipeCeInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindV6v0Group = tmnxSdpBindV6v0Group.setStatus('current')
tmnxSdpBindTlsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPriority"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortNum"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPathCost"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpRapidStart"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpBpduEncap"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpDesignatedPort"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpForwardTransitions"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInBadBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperBpduEncap"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpVpnId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpCustId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacAddressLimit"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsNumMacAddresses"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsNumStaticMacAddresses"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacLearning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacAgeing"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperEdge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpAdminPointToPoint"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpPortRole"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpAutoEdge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInRstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutRstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsLimitMacMove"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsDiscardUnknownSource"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMvplsPruneState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMvplsMgmtService"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMvplsMgmtSdpBndId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpException"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptTermination"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsBpduTranslation"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpRootGuard"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpInMstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpOutMstBpdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsStpRxdDesigBridge"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsLimitMacMoveLevel"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsBpduTransOper"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptProtocols"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsIgnoreStandbySig"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsBlockOnMeshFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindTlsV6v0Group = tmnxSdpBindTlsV6v0Group.setStatus('current')
tmnxSdpBindMeshV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 103)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsPortState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsNotInMstRegion"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsHoldDownTimer"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindMeshTlsTransitionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindMeshV6v0Group = tmnxSdpBindMeshV6v0Group.setStatus('current')
tmnxSdpApipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 104)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeAdminConcatCellCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeSigConcatCellCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeOperConcatCellCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeConcatMaxDelay"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeConcatCellClp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindApipeConcatCellAal5Fr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpApipeV6v0Group = tmnxSdpApipeV6v0Group.setStatus('current')
tmnxSdpBindDhcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 105)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpDescription"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpSnoop"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsSrvrSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntForwdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsSrvrForwdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntDropdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsSrvrDropdPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntProxRadPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsClntProxLSPckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsGenReleasePckts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDhcpStatsGenForceRenPckts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindDhcpV6v0Group = tmnxSdpBindDhcpV6v0Group.setStatus('current')
tmnxSdpBindIpipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 106)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindIpipeCeInetAddressType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindIpipeV6v0Group = tmnxSdpBindIpipeV6v0Group.setStatus('current')
tmnxSdpFCV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 107)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFCMappingRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpFCMappingLspId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpFCV6v0Group = tmnxSdpFCV6v0Group.setStatus('current')
tmnxSdpBindCpipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 108)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalPayloadSize"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerPayloadSize"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalBitrate"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerBitrate"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalSigPkts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerSigPkts"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalCasTrunkFraming"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerCasTrunkFraming"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalUseRtpHeader"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerUseRtpHeader"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalDifferential"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerDifferential"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipeLocalTimestampFreq"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCpipePeerTimestampFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindCpipeV6v0Group = tmnxSdpBindCpipeV6v0Group.setStatus('current')
tmnxSdpBindTlsL2ptV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 109)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMfibMdaRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsLastClearedTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherL2ptBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherL2ptBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherInvalidBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsOtherInvalidBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsL2ptStatsUdldBpdusTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindTlsL2ptV6v0Group = tmnxSdpBindTlsL2ptV6v0Group.setStatus('current')
tmnxSdpAutoBindV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 112)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateVcType"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacLearning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacAgeing"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateDiscardUnknownSource"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateLimitMacMove"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacPinning"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMacAddressLimit"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgName"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgDescription"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgRestProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateShgRestUnprotDstMac"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpFastLeave"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpImportPlcy"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpLastMembIntvl"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMaxNbrGrps"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpGenQueryIntvl"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpQueryRespIntvl"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpRobustCount"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSendQueries"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMcacPolicyName"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMcacPrRsvMndBW"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpMcacUnconstBW"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpVersion"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgGrpSrcTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateIgmpSnpgLastChngd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMfibAllowedMdaTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateMfibMdaRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateUseProvisionedSdp"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "pwTemplateVlanVcTag"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoTableLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoTemplateId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoAGI"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoSAII"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpAutoBindBgpInfoTAII"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpAutoBindV6v0Group = tmnxSdpAutoBindV6v0Group.setStatus('current')
tmnxSdpBindTlsMrpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 113)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpLastChngd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpJoinTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpLeaveTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpLeaveAllTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpPeriodicTime"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpPeriodicEnabled"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxPdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpDroppedPdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxPdus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxNewEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpRxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxNewEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxInEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMrpTxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMmrpDeclared"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMmrpRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpBindTlsMrpV6v0Group = tmnxSdpBindTlsMrpV6v0Group.setStatus('current')
tmnxSdpTlsBgpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 114)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRowStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindLastChngd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindSHG"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRTTblLC"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcTlsBgpADPWTempBindRTRowStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpTlsBgpV6v0Group = tmnxSdpTlsBgpV6v0Group.setStatus('current')
tmnxSdpL2V6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 115)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpCreationOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RteSdpBindId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "svcL2RtePwTemplateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpL2V6v0Group = tmnxSdpL2V6v0Group.setStatus('current')
tmnxSdpNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 200)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpNotifySdpId"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpMaxBookableBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBookedBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpStatus"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpOrigin"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpCreationError"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindCreationError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpNotifyObjsV6v0Group = tmnxSdpNotifyObjsV6v0Group.setStatus('current')
tmnxSdpNotifyV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 400)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "unacknowledgedTCN"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcTopoChgSdpBindMajorState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcNewRootSdpBind"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcTopoChgSdpBindState"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindRcvdTCN"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindRcvdHigherBriPrio"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindEncapPVST"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpBindEncapDot1d"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSvcSdpActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxStpMeshNotInMstRegion"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "tmnxSdpBndStpExcepCondStateChng"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpStatusChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindStatusChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpTlsMacAddrLimitAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpTlsMacAddrLimitAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLeaseEntriesExceeded"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLseStateOverride"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLseStatePopulateErr"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerStatusBitsChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindTlsMacMoveExceeded"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindPwPeerFaultAddrChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPProxyServerError"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindSdpStateChangeProcessed"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPLseStateMobilityErr"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBandwidthOverbooked"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindInsufficientBandwidth"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpConfigChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindConfigChanged"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpCreationFailed"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "dynamicSdpBindCreationFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpNotifyV6v0Group = tmnxSdpNotifyV6v0Group.setStatus('current')
tmnxSdpObsoletedNotifyV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 4, 2, 401)).setObjects(("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpCreated"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpDeleted"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindCreated"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDeleted"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpTlsDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPCoAError"), ("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindDHCPSubAuthError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSdpObsoletedNotifyV6v0Group = tmnxSdpObsoletedNotifyV6v0Group.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SDP-MIB", sdpBindCpipePeerBitrate=sdpBindCpipePeerBitrate, sdpBindTlsMrpTxPdus=sdpBindTlsMrpTxPdus, sdpBindTlsStpPathCost=sdpBindTlsStpPathCost, sdpBindClassFwdingOperState=sdpBindClassFwdingOperState, sdpBindTlsL2ptStatsUdldBpdusTx=sdpBindTlsL2ptStatsUdldBpdusTx, sdpClassFwdingMcLsp=sdpClassFwdingMcLsp, sdpBindTlsMmrpMacAddr=sdpBindTlsMmrpMacAddr, sdpBindDhcpDescription=sdpBindDhcpDescription, sdpAutoBindBgpInfoTableLC=sdpAutoBindBgpInfoTableLC, sdpTlsMacAddrLimitAlarmRaised=sdpTlsMacAddrLimitAlarmRaised, pwTemplateCollectAcctStats=pwTemplateCollectAcctStats, tmnxSdpBindTlsV6v0Group=tmnxSdpBindTlsV6v0Group, sdpBindApipeConcatCellAal5Fr=sdpBindApipeConcatCellAal5Fr, sdpLabelSignaling=sdpLabelSignaling, pwTemplateTableLastChanged=pwTemplateTableLastChanged, pwTemplateIgmpMcacPrRsvMndBW=pwTemplateIgmpMcacPrRsvMndBW, sdpBindPwFaultInetAddress=sdpBindPwFaultInetAddress, pwTemplateIngressIpv6FilterId=pwTemplateIngressIpv6FilterId, sdpBindDhcpStatsSrvrDropdPckts=sdpBindDhcpStatsSrvrDropdPckts, sdpSnmpAllowed=sdpSnmpAllowed, sdpBindTlsNumStaticMacAddresses=sdpBindTlsNumStaticMacAddresses, sdpBindDhcpStatsEntry=sdpBindDhcpStatsEntry, tmnxSdpTlsBgpV6v0Group=tmnxSdpTlsBgpV6v0Group, sdpTrapsPrefix=sdpTrapsPrefix, svcTlsBgpADPWTempBindTblLC=svcTlsBgpADPWTempBindTblLC, sdpBindTlsStpBpduEncap=sdpBindTlsStpBpduEncap, sdpBindDhcpSnoop=sdpBindDhcpSnoop, tmnxSdpBindTlsL2ptV6v0Group=tmnxSdpBindTlsL2ptV6v0Group, sdpBindTlsL2ptStatsVtpBpdusTx=sdpBindTlsL2ptStatsVtpBpdusTx, tmnxSvcSdpBindRcvdTCN=tmnxSvcSdpBindRcvdTCN, sdpCollectAcctStats=sdpCollectAcctStats, sdpBindTlsStpOperBpduEncap=sdpBindTlsStpOperBpduEncap, sdpBindDhcpStatsClntForwdPckts=sdpBindDhcpStatsClntForwdPckts, pwTemplateIgmpSnpgLastChngd=pwTemplateIgmpSnpgLastChngd, sdpBindTlsTable=sdpBindTlsTable, sdpBindTlsMrpLeaveAllTime=sdpBindTlsMrpLeaveAllTime, sdpBindTlsMrpEntry=sdpBindTlsMrpEntry, sdpBindDhcpStatsGenReleasePckts=sdpBindDhcpStatsGenReleasePckts, sdpKeepAliveNumHelloRequestMessages=sdpKeepAliveNumHelloRequestMessages, sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx=sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusTx, sdpBindTlsStpOutTcnBpdus=sdpBindTlsStpOutTcnBpdus, sdpBindTlsStpVpnId=sdpBindTlsStpVpnId, sdpBindTlsStpException=sdpBindTlsStpException, sdpBindPwFaultInetAddressType=sdpBindPwFaultInetAddressType, sdpBindDhcpStatsClntDropdPckts=sdpBindDhcpStatsClntDropdPckts, sdpFCMappingLspId=sdpFCMappingLspId, sdpBindTlsMrpPeriodicEnabled=sdpBindTlsMrpPeriodicEnabled, sdpBindCpipePeerDifferential=sdpBindCpipePeerDifferential, pwTemplateRowStatus=pwTemplateRowStatus, pwTemplateIgmpVersion=pwTemplateIgmpVersion, sdpBindTlsStpRootGuard=sdpBindTlsStpRootGuard, sdpId=sdpId, sdpBindTlsMacMoveRateExcdLeft=sdpBindTlsMacMoveRateExcdLeft, sdpBindTlsMrpRxInEvent=sdpBindTlsMrpRxInEvent, pwTemplateMacPinning=pwTemplateMacPinning, pwTemplateIgmpMcacUnconstBW=pwTemplateIgmpMcacUnconstBW, sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPagpBpdusTx, sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapDtpBpdusRx, sdpBindTlsStpPortNum=sdpBindTlsStpPortNum, sdpBindApipeConcatMaxDelay=sdpBindApipeConcatMaxDelay, sdpBindBaseStatsIngFwdOctets=sdpBindBaseStatsIngFwdOctets, svcTlsBgpADPWTempBindRTEntry=svcTlsBgpADPWTempBindRTEntry, sdpBindEndPoint=sdpBindEndPoint, sdpBindTlsL2ptProtocols=sdpBindTlsL2ptProtocols, sdpBindTlsEntry=sdpBindTlsEntry, sdpKeepAliveNumLateHelloResponseMessages=sdpKeepAliveNumLateHelloResponseMessages, sdpMetric=sdpMetric, sdpBindTlsIgnoreStandbySig=sdpBindTlsIgnoreStandbySig, pwTemplateIgmpSnpgGrpSrcEntry=pwTemplateIgmpSnpgGrpSrcEntry, pwTemplateMfibMdaRowStatus=pwTemplateMfibMdaRowStatus, sdpOperStatus=sdpOperStatus, pwTemplateUseProvisionedSdp=pwTemplateUseProvisionedSdp, sdpTlsDHCPSuspiciousPcktRcvd=sdpTlsDHCPSuspiciousPcktRcvd, sdpBindDHCPLeaseEntriesExceeded=sdpBindDHCPLeaseEntriesExceeded, sdpFCMappingTable=sdpFCMappingTable, pwTemplateMfibAllowedMdaTblLC=pwTemplateMfibAllowedMdaTblLC, sdpAccountingPolicyId=sdpAccountingPolicyId, sdpBindAdminEgressLabel=sdpBindAdminEgressLabel, sdpBindDHCPCoAError=sdpBindDHCPCoAError, sdpBindTlsStpRapidStart=sdpBindTlsStpRapidStart, sdpBindApipeTable=sdpBindApipeTable, sdpAutoSdp=sdpAutoSdp, pwTemplateIngressMacFilterId=pwTemplateIngressMacFilterId, sdpBindTlsStpInConfigBpdus=sdpBindTlsStpInConfigBpdus, dynamicSdpOrigin=dynamicSdpOrigin, sdpBindTlsMrpLastChngd=sdpBindTlsMrpLastChngd, sdpBindTlsMrpJoinTime=sdpBindTlsMrpJoinTime, tmnxSdpGroups=tmnxSdpGroups, sdpBindEndPointPrecedence=sdpBindEndPointPrecedence, pwTemplateShgDescription=pwTemplateShgDescription, sdpBindDhcpInfoEntry=sdpBindDhcpInfoEntry, sdpBindPwPeerStatusBits=sdpBindPwPeerStatusBits, sdpBindIpipeTable=sdpBindIpipeTable, pwTemplateIgmpSnpgGrpAddrType=pwTemplateIgmpSnpgGrpAddrType, sdpDescription=sdpDescription, sdpBindVpnId=sdpBindVpnId, sdpBindInsufficientBandwidth=sdpBindInsufficientBandwidth, tmnxStpMeshNotInMstRegion=tmnxStpMeshNotInMstRegion, tmnxSdp7450V6v0Compliance=tmnxSdp7450V6v0Compliance, sdpBindSplitHorizonGrp=sdpBindSplitHorizonGrp, sdpBindTlsMrpRxJoinEmptyEvent=sdpBindTlsMrpRxJoinEmptyEvent, sdpNotifySdpId=sdpNotifySdpId, sdpBindBaseStatsIngressDroppedPackets=sdpBindBaseStatsIngressDroppedPackets, sdpBindIpipeCeInetAddressType=sdpBindIpipeCeInetAddressType, pwTemplateLimitMacMove=pwTemplateLimitMacMove, sdpBindDhcpInfoTable=sdpBindDhcpInfoTable, pwTemplateAccountingPolicyId=pwTemplateAccountingPolicyId, sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusTx, sdpBindTlsL2ptStatsCdpBpdusRx=sdpBindTlsL2ptStatsCdpBpdusRx, svcL2RtePwTemplateId=svcL2RtePwTemplateId, sdpBindTlsStpOperProtocol=sdpBindTlsStpOperProtocol, sdpBindCpipeTable=sdpBindCpipeTable, tmnxSdp77x0V6v0Compliance=tmnxSdp77x0V6v0Compliance, sdpTraps=sdpTraps, sdpBindEgressIpv6FilterId=sdpBindEgressIpv6FilterId, sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapCdpBpdusTx, sdpBindTlsL2ptStatsPvstConfigBpdusRx=sdpBindTlsL2ptStatsPvstConfigBpdusRx, sdpLastMgmtChange=sdpLastMgmtChange, svcTlsBgpADPWTempBindRTTblLC=svcTlsBgpADPWTempBindRTTblLC, sdpBindApipeSigConcatCellCount=sdpBindApipeSigConcatCellCount, sdpBindCreated=sdpBindCreated, sdpBindTlsDiscardUnknownSource=sdpBindTlsDiscardUnknownSource, sdpBindTlsMmrpRegistered=sdpBindTlsMmrpRegistered, sdpBindForceVlanVcForwarding=sdpBindForceVlanVcForwarding, sdpOperPathMtu=sdpOperPathMtu, sdpBindTlsMacMoveExceeded=sdpBindTlsMacMoveExceeded, sdpInfoEntry=sdpInfoEntry, pwTemplateId=pwTemplateId, sdpBindCpipeLocalTimestampFreq=sdpBindCpipeLocalTimestampFreq, pwTemplateLastChanged=pwTemplateLastChanged, sdpBindTlsL2ptStatsStpConfigBpdusTx=sdpBindTlsL2ptStatsStpConfigBpdusTx, pwTemplateShgRestProtSrcMac=pwTemplateShgRestProtSrcMac, sdpBindLastMgmtChange=sdpBindLastMgmtChange, pwTemplateIgmpImportPlcy=pwTemplateIgmpImportPlcy, sdpOperFlags=sdpOperFlags, sdpBindTlsMrpTxLeaveEvent=sdpBindTlsMrpTxLeaveEvent, sdpBindCpipeEntry=sdpBindCpipeEntry, svcL2RteNextHop=svcL2RteNextHop, sdpBindIsICB=sdpBindIsICB, tmnxSdpApipeV6v0Group=tmnxSdpApipeV6v0Group, sdpBindMeshTlsPortState=sdpBindMeshTlsPortState, sdpBindCustId=sdpBindCustId, sdpBindTlsLimitMacMove=sdpBindTlsLimitMacMove, sdpBindTlsStpAdminStatus=sdpBindTlsStpAdminStatus, sdpBindLastStatusChange=sdpBindLastStatusChange, sdpBindTlsBpduTranslation=sdpBindTlsBpduTranslation, sdpBindTlsL2ptStatsOtherBpdusTx=sdpBindTlsL2ptStatsOtherBpdusTx, sdpBindTable=sdpBindTable, pwTemplateIgmpSnpgGrpAddr=pwTemplateIgmpSnpgGrpAddr, sdpAutoBindBgpInfoEntry=sdpAutoBindBgpInfoEntry, sdpBindCpipePeerTimestampFreq=sdpBindCpipePeerTimestampFreq, sdpLastStatusChange=sdpLastStatusChange, pwTemplateIgmpSnpgGrpSrcTblLC=pwTemplateIgmpSnpgGrpSrcTblLC, sdpBindMeshTlsEntry=sdpBindMeshTlsEntry, sdpBindTlsStpAdminPointToPoint=sdpBindTlsStpAdminPointToPoint, pwTemplateEgressIpv6FilterId=pwTemplateEgressIpv6FilterId, sdpBindTlsMvplsPruneState=sdpBindTlsMvplsPruneState, sdpKeepAliveOperStatus=sdpKeepAliveOperStatus, sdpBindTlsMvplsMgmtSdpBndId=sdpBindTlsMvplsMgmtSdpBndId, sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapVtpBpdusTx, sdpBindTlsL2ptStatsCdpBpdusTx=sdpBindTlsL2ptStatsCdpBpdusTx, sdpBindDeleted=sdpBindDeleted, sdpBindTlsStpPriority=sdpBindTlsStpPriority, pwTemplateMacAddressLimit=pwTemplateMacAddressLimit, sdpBindCpipePeerUseRtpHeader=sdpBindCpipePeerUseRtpHeader, sdpLdpEnabled=sdpLdpEnabled, pwTemplateEgressIpFilterId=pwTemplateEgressIpFilterId, sdpBindPeerVccvCcBits=sdpBindPeerVccvCcBits, pwTemplateIgmpFastLeave=pwTemplateIgmpFastLeave, sdpAdvertisedVllMtuOverride=sdpAdvertisedVllMtuOverride, sdpBindTlsStpRxdDesigBridge=sdpBindTlsStpRxdDesigBridge, pwTemplateMfibAllowedMdaTable=pwTemplateMfibAllowedMdaTable, tmnxSdpBindMeshV6v0Group=tmnxSdpBindMeshV6v0Group, pwTemplateVcType=pwTemplateVcType, sdpBindTlsMvplsMgmtService=sdpBindTlsMvplsMgmtService, sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx=sdpBindTlsL2ptStatsL2ptEncapDtpBpdusTx, sdpBindType=sdpBindType, sdpBandwidthBookingFactor=sdpBandwidthBookingFactor, sdpBindIngressIpv6FilterId=sdpBindIngressIpv6FilterId, sdpBindTlsL2ptStatsOtherL2ptBpdusRx=sdpBindTlsL2ptStatsOtherL2ptBpdusRx, sdpBindTlsStpOutMstBpdus=sdpBindTlsStpOutMstBpdus, tmnxSvcSdpBindEncapDot1d=tmnxSvcSdpBindEncapDot1d, sdpBindTlsMacMoveNextUpTime=sdpBindTlsMacMoveNextUpTime, sdpBindTlsL2ptStatsDtpBpdusRx=sdpBindTlsL2ptStatsDtpBpdusRx, pwTemplateIgmpLastMembIntvl=pwTemplateIgmpLastMembIntvl, sdpAvailableBandwidth=sdpAvailableBandwidth, sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx=sdpBindTlsL2ptStatsL2ptEncapStpTcnBpdusRx, sdpBindEgressMacFilterId=sdpBindEgressMacFilterId, sdpBindTlsStpPortRole=sdpBindTlsStpPortRole, sdpFCMappingEntry=sdpFCMappingEntry, sdpBindTlsL2ptStatsStpTcnBpdusRx=sdpBindTlsL2ptStatsStpTcnBpdusRx, sdpBindTlsBpduTransOper=sdpBindTlsBpduTransOper, sdpBindTlsMrpRxLeaveEvent=sdpBindTlsMrpRxLeaveEvent, sdpBindOperControlWord=sdpBindOperControlWord, tmnxSdpV6v0Group=tmnxSdpV6v0Group, sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusTx, sdpBindIesIfIndex=sdpBindIesIfIndex, sdpBindBaseStatsIngDropOctets=sdpBindBaseStatsIngDropOctets, tmnxSdpBindV6v0Group=tmnxSdpBindV6v0Group, sdpBindTlsMrpTxNewEvent=sdpBindTlsMrpTxNewEvent, svcTlsBgpADPWTempBindRT=svcTlsBgpADPWTempBindRT, sdpBindCpipeLocalBitrate=sdpBindCpipeLocalBitrate, sdpKeepAliveNumHelloResponseMessages=sdpKeepAliveNumHelloResponseMessages, sdpInfoTable=sdpInfoTable, tmnxSvcSdpActiveProtocolChange=tmnxSvcSdpActiveProtocolChange, tmnxSvcTopoChgSdpBindMajorState=tmnxSvcTopoChgSdpBindMajorState, sdpBindTlsStpOutConfigBpdus=sdpBindTlsStpOutConfigBpdus, sdpBandwidthOverbooked=sdpBandwidthOverbooked, svcL2RteEntry=svcL2RteEntry, sdpBindAdminBandwidth=sdpBindAdminBandwidth, pwTemplateIgmpSendQueries=pwTemplateIgmpSendQueries, sdpBindBaseStatsIngressForwardedPackets=sdpBindBaseStatsIngressForwardedPackets, sdpBindTlsMrpTable=sdpBindTlsMrpTable, sdpBindVcType=sdpBindVcType, pwTemplateIgmpSnpgGrpSrcTable=pwTemplateIgmpSnpgGrpSrcTable, sdpBindTlsNumMacAddresses=sdpBindTlsNumMacAddresses, tmnxSdpConformance=tmnxSdpConformance, sdpBindApipeAdminConcatCellCount=sdpBindApipeAdminConcatCellCount, sdpBindIpipeCeInetAddress=sdpBindIpipeCeInetAddress, sdpBindDhcpStatsTable=sdpBindDhcpStatsTable, sdpCreated=sdpCreated, sdpBindBaseStatsCustId=sdpBindBaseStatsCustId, sdpLspList=sdpLspList, sdpBindDhcpStatsClntProxLSPckts=sdpBindDhcpStatsClntProxLSPckts, pwTemplateEgressMacFilterId=pwTemplateEgressMacFilterId, tmnxSdpBindIpipeV6v0Group=tmnxSdpBindIpipeV6v0Group, tmnxSdpNotifyObjsV6v0Group=tmnxSdpNotifyObjsV6v0Group, sdpDelivery=sdpDelivery, sdpBindTlsL2ptStatsOtherBpdusRx=sdpBindTlsL2ptStatsOtherBpdusRx, sdpRowStatus=sdpRowStatus, sdpCreationOrigin=sdpCreationOrigin, sdpBindBaseStatsEgressForwardedOctets=sdpBindBaseStatsEgressForwardedOctets, dynamicSdpConfigChanged=dynamicSdpConfigChanged, sdpBindTlsMacAgeing=sdpBindTlsMacAgeing, tmnxSdpBindTlsMrpV6v0Group=tmnxSdpBindTlsMrpV6v0Group, sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx=sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusTx, sdpBindTlsMfibAllowedMdaTable=sdpBindTlsMfibAllowedMdaTable, sdpBindOperFlags=sdpBindOperFlags, unacknowledgedTCN=unacknowledgedTCN, sdpBindTlsMfibAllowedMdaEntry=sdpBindTlsMfibAllowedMdaEntry, sdpBindTlsL2ptStatsPvstTcnBpdusTx=sdpBindTlsL2ptStatsPvstTcnBpdusTx, sdpBindTlsStpInTcnBpdus=sdpBindTlsStpInTcnBpdus, sdpMaxBookableBandwidth=sdpMaxBookableBandwidth, sdpBindTlsMrpPeriodicTime=sdpBindTlsMrpPeriodicTime, sdpBindTlsL2ptStatsLastClearedTime=sdpBindTlsL2ptStatsLastClearedTime, sdpBindPeerVccvCvBits=sdpBindPeerVccvCvBits, sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx=sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusTx, sdpVlanVcEtype=sdpVlanVcEtype, sdpBindCpipeLocalSigPkts=sdpBindCpipeLocalSigPkts, sdpBindCollectAcctStats=sdpBindCollectAcctStats, sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPvstConfigBpdusRx, sdpBindTlsL2ptStatsOtherL2ptBpdusTx=sdpBindTlsL2ptStatsOtherL2ptBpdusTx, timetraServicesSdpMIBModule=timetraServicesSdpMIBModule, sdpAutoBindBgpInfoTemplateId=sdpAutoBindBgpInfoTemplateId)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SDP-MIB", sdpBindAccountingPolicyId=sdpBindAccountingPolicyId, sdpBindTlsStpInRstBpdus=sdpBindTlsStpInRstBpdus, tmnxSdpNotifyObjs=tmnxSdpNotifyObjs, sdpBindTlsMacAddressLimit=sdpBindTlsMacAddressLimit, sdpBindTlsL2ptStatsEntry=sdpBindTlsL2ptStatsEntry, tmnxSvcSdpBindEncapPVST=tmnxSvcSdpBindEncapPVST, sdpBindOperEgressLabel=sdpBindOperEgressLabel, sdpFCMappingRowStatus=sdpFCMappingRowStatus, sdpNextFreeId=sdpNextFreeId, sdpBindBaseStatsTable=sdpBindBaseStatsTable, sdpBindTlsMrpRxNewEvent=sdpBindTlsMrpRxNewEvent, sdpAutoBindBgpInfoTAII=sdpAutoBindBgpInfoTAII, sdpBindMeshTlsTransitionState=sdpBindMeshTlsTransitionState, sdpBindIpipeEntry=sdpBindIpipeEntry, sdpFCMappingFCName=sdpFCMappingFCName, sdpBindCpipeLocalUseRtpHeader=sdpBindCpipeLocalUseRtpHeader, sdpBindTlsL2ptStatsPagpBpdusRx=sdpBindTlsL2ptStatsPagpBpdusRx, tmnxSdpBndStpExcepCondStateChng=tmnxSdpBndStpExcepCondStateChng, sdpBindAdminStatus=sdpBindAdminStatus, pwTemplateEntry=pwTemplateEntry, svcTlsBgpADPWTempBindSHG=svcTlsBgpADPWTempBindSHG, sdpBindTlsStpInMstBpdus=sdpBindTlsStpInMstBpdus, sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapVtpBpdusRx, sdpBindIngressIpFilterId=sdpBindIngressIpFilterId, sdpBindTlsMfibMdaRowStatus=sdpBindTlsMfibMdaRowStatus, sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx=sdpBindTlsL2ptStatsL2ptEncapStpRstBpdusRx, sdpKeepAliveHelloMessageLength=sdpKeepAliveHelloMessageLength, sdpKeepAliveAdminStatus=sdpKeepAliveAdminStatus, tmnxSdpCompliances=tmnxSdpCompliances, sdpBindStatusChanged=sdpBindStatusChanged, sdpMvplsMgmtService=sdpMvplsMgmtService, sdpClassFwdingDefaultLsp=sdpClassFwdingDefaultLsp, sdpBindTlsL2ptStatsPagpBpdusTx=sdpBindTlsL2ptStatsPagpBpdusTx, sdpBindPwPeerStatusBitsChanged=sdpBindPwPeerStatusBitsChanged, sdpBindTlsL2ptStatsStpRstBpdusRx=sdpBindTlsL2ptStatsStpRstBpdusRx, sdpBindDHCPLseStateOverride=sdpBindDHCPLseStateOverride, dynamicSdpBindConfigChanged=dynamicSdpBindConfigChanged, sdpBindDhcpStatsSrvrSnoopdPckts=sdpBindDhcpStatsSrvrSnoopdPckts, sdpBindTlsStpCustId=sdpBindTlsStpCustId, sdpBindCpipeLocalDifferential=sdpBindCpipeLocalDifferential, sdpBindDhcpStatsSrvrForwdPckts=sdpBindDhcpStatsSrvrForwdPckts, sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx=sdpBindTlsL2ptStatsL2ptEncapUdldBpdusRx, sdpBindMeshTlsNotInMstRegion=sdpBindMeshTlsNotInMstRegion, tmnxSvcNewRootSdpBind=tmnxSvcNewRootSdpBind, sdpMvplsMgmtSdpBndId=sdpMvplsMgmtSdpBndId, sdpBindCpipePeerPayloadSize=sdpBindCpipePeerPayloadSize, tmnxSdpObsoletedNotifyV6v0Group=tmnxSdpObsoletedNotifyV6v0Group, sdpBindTlsL2ptStatsDtpBpdusTx=sdpBindTlsL2ptStatsDtpBpdusTx, sdpBindTlsL2ptStatsOtherInvalidBpdusTx=sdpBindTlsL2ptStatsOtherInvalidBpdusTx, sdpBindOperBandwidth=sdpBindOperBandwidth, tmnxSvcTopoChgSdpBindState=tmnxSvcTopoChgSdpBindState, tmnxSvcSdpBindRcvdHigherBriPrio=tmnxSvcSdpBindRcvdHigherBriPrio, sdpBindTlsStpOutRstBpdus=sdpBindTlsStpOutRstBpdus, sdpBindApipeConcatCellClp=sdpBindApipeConcatCellClp, sdpBindMacPinning=sdpBindMacPinning, pwTemplateIgmpSnpgRowStatus=pwTemplateIgmpSnpgRowStatus, sdpDeleted=sdpDeleted, sdpBindPwPeerFaultAddrChanged=sdpBindPwPeerFaultAddrChanged, sdpBindEntry=sdpBindEntry, tmnxSdpBindCpipeV6v0Group=tmnxSdpBindCpipeV6v0Group, pwTemplateIgmpSnpgSrcAddrType=pwTemplateIgmpSnpgSrcAddrType, sdpBindTlsMmrpTable=sdpBindTlsMmrpTable, sdpStatusChanged=sdpStatusChanged, pwTemplateMacAgeing=pwTemplateMacAgeing, dynamicSdpCreationError=dynamicSdpCreationError, PYSNMP_MODULE_ID=timetraServicesSdpMIBModule, svcTlsBgpADPWTempBindEntry=svcTlsBgpADPWTempBindEntry, sdpClassFwdingEnabled=sdpClassFwdingEnabled, sdpBindMeshTlsTable=sdpBindMeshTlsTable, tmnxSdpAutoBindV6v0Group=tmnxSdpAutoBindV6v0Group, sdpBindDhcpStatsGenForceRenPckts=sdpBindDhcpStatsGenForceRenPckts, sdpBindTlsMrpDroppedPdus=sdpBindTlsMrpDroppedPdus, sdpFarEndIpAddress=sdpFarEndIpAddress, sdpBindRowStatus=sdpBindRowStatus, tmnxSdpFCV6v0Group=tmnxSdpFCV6v0Group, sdpBindSdpStateChangeProcessed=sdpBindSdpStateChangeProcessed, sdpBindOperIngressLabel=sdpBindOperIngressLabel, sdpBindTlsStpOperEdge=sdpBindTlsStpOperEdge, sdpBindTlsL2ptStatsOtherInvalidBpdusRx=sdpBindTlsL2ptStatsOtherInvalidBpdusRx, dynamicSdpBindCreationFailed=dynamicSdpBindCreationFailed, sdpOperBandwidth=sdpOperBandwidth, svcTlsBgpADPWTempBindLastChngd=svcTlsBgpADPWTempBindLastChngd, sdpBindTlsL2ptTermination=sdpBindTlsL2ptTermination, sdpBindCpipePeerCasTrunkFraming=sdpBindCpipePeerCasTrunkFraming, sdpBindTlsLimitMacMoveLevel=sdpBindTlsLimitMacMoveLevel, sdpBindDHCPSuspiciousPcktRcvd=sdpBindDHCPSuspiciousPcktRcvd, svcTlsBgpADPWTempBindRowStatus=svcTlsBgpADPWTempBindRowStatus, sdpBindTlsL2ptStatsPvstTcnBpdusRx=sdpBindTlsL2ptStatsPvstTcnBpdusRx, sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx=sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusTx, sdpBindTlsMrpLeaveTime=sdpBindTlsMrpLeaveTime, pwTemplateDiscardUnknownSource=pwTemplateDiscardUnknownSource, sdpBindIngressMacFilterId=sdpBindIngressMacFilterId, tmnxSdpNotifyV6v0Group=tmnxSdpNotifyV6v0Group, sdpNumEntries=sdpNumEntries, sdpBindDHCPLseStatePopulateErr=sdpBindDHCPLseStatePopulateErr, pwTemplateIngressIpFilterId=pwTemplateIngressIpFilterId, sdpBindTlsMrpTxEmptyEvent=sdpBindTlsMrpTxEmptyEvent, dynamicSdpStatus=dynamicSdpStatus, sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPagpBpdusRx, sdpBindTlsStpPortState=sdpBindTlsStpPortState, sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx=sdpBindTlsL2ptStatsL2ptEncapCdpBpdusRx, sdpBindTlsMrpTableLastChanged=sdpBindTlsMrpTableLastChanged, sdpBindApipeOperConcatCellCount=sdpBindApipeOperConcatCellCount, pwTemplateIgmpQueryRespIntvl=pwTemplateIgmpQueryRespIntvl, sdpBindTlsStpDesignatedPort=sdpBindTlsStpDesignatedPort, sdpBindTlsMrpRxEmptyEvent=sdpBindTlsMrpRxEmptyEvent, svcL2RteVsiPrefix=svcL2RteVsiPrefix, sdpKeepAliveHoldDownTime=sdpKeepAliveHoldDownTime, pwTemplateShgRestUnprotDstMac=pwTemplateShgRestUnprotDstMac, sdpAutoBindBgpInfoAGI=sdpAutoBindBgpInfoAGI, sdpBindDhcpStatsClntSnoopdPckts=sdpBindDhcpStatsClntSnoopdPckts, sdpBindTlsL2ptStatsPvstRstBpdusTx=sdpBindTlsL2ptStatsPvstRstBpdusTx, pwTemplateTable=pwTemplateTable, sdpBindTlsL2ptStatsStpTcnBpdusTx=sdpBindTlsL2ptStatsStpTcnBpdusTx, svcL2RteRouteDistinguisher=svcL2RteRouteDistinguisher, sdpBindCpipeLocalCasTrunkFraming=sdpBindCpipeLocalCasTrunkFraming, svcTlsBgpADPWTempBindTable=svcTlsBgpADPWTempBindTable, sdpBindTlsL2ptStatsUdldBpdusRx=sdpBindTlsL2ptStatsUdldBpdusRx, dynamicSdpBindCreationError=dynamicSdpBindCreationError, svcTlsBgpADPWTempBindRTTable=svcTlsBgpADPWTempBindRTTable, sdpKeepAliveMaxDropCount=sdpKeepAliveMaxDropCount, sdpAdminStatus=sdpAdminStatus, sdpBindBaseStatsEgressForwardedPackets=sdpBindBaseStatsEgressForwardedPackets, sdpBindTlsL2ptStatsPvstRstBpdusRx=sdpBindTlsL2ptStatsPvstRstBpdusRx, pwTemplateIgmpGenQueryIntvl=pwTemplateIgmpGenQueryIntvl, sdpBindTlsBlockOnMeshFail=sdpBindTlsBlockOnMeshFail, sdpTlsMacAddrLimitAlarmCleared=sdpTlsMacAddrLimitAlarmCleared, pwTemplateIgmpRobustCount=pwTemplateIgmpRobustCount, sdpBindDhcpStatsClntProxRadPckts=sdpBindDhcpStatsClntProxRadPckts, sdpBindTlsMrpRxPdus=sdpBindTlsMrpRxPdus, sdpBindApipeEntry=sdpBindApipeEntry, sdpBindTlsStpForwardTransitions=sdpBindTlsStpForwardTransitions, sdpBindEgressIpFilterId=sdpBindEgressIpFilterId, sdpBindTlsL2ptStatsTable=sdpBindTlsL2ptStatsTable, sdpBindTlsMrpTxJoinEmptyEvent=sdpBindTlsMrpTxJoinEmptyEvent, sdpBindCpipeLocalPayloadSize=sdpBindCpipeLocalPayloadSize, sdpBindAdminIngressLabel=sdpBindAdminIngressLabel, sdpBindCpipePeerSigPkts=sdpBindCpipePeerSigPkts, sdpBindTlsL2ptStatsVtpBpdusRx=sdpBindTlsL2ptStatsVtpBpdusRx, sdpBindBaseStatsEntry=sdpBindBaseStatsEntry, pwTemplateIgmpSnpgSrcAddr=pwTemplateIgmpSnpgSrcAddr, sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPvstTcnBpdusRx, sdpBindTlsStpAutoEdge=sdpBindTlsStpAutoEdge, svcL2RteTableLastChanged=svcL2RteTableLastChanged, sdpBindTlsStpDesignatedBridge=sdpBindTlsStpDesignatedBridge, sdpPBBEtype=sdpPBBEtype, sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx=sdpBindTlsL2ptStatsL2ptEncapUdldBpdusTx, svcL2RteSdpBindId=svcL2RteSdpBindId, sdpBindTlsMrpTxInEvent=sdpBindTlsMrpTxInEvent, sdpAutoBindBgpInfoTable=sdpAutoBindBgpInfoTable, sdpBindOperStatus=sdpBindOperStatus, sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx=sdpBindTlsL2ptStatsL2ptEncapStpConfigBpdusRx, sdpBindTlsL2ptStatsStpConfigBpdusRx=sdpBindTlsL2ptStatsStpConfigBpdusRx, sdpBindTlsMrpTxJoinInEvent=sdpBindTlsMrpTxJoinInEvent, svcL2RteNextHopType=svcL2RteNextHopType, sdpKeepAliveHelloRequestTimeout=sdpKeepAliveHelloRequestTimeout, sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx=sdpBindTlsL2ptStatsL2ptEncapPvstRstBpdusRx, sdpBindTlsL2ptStatsPvstConfigBpdusTx=sdpBindTlsL2ptStatsPvstConfigBpdusTx, sdpBindTlsMmrpDeclared=sdpBindTlsMmrpDeclared, sdpBindDHCPLseStateMobilityErr=sdpBindDHCPLseStateMobilityErr, sdpBindVlanVcTag=sdpBindVlanVcTag, tmnxSdpObjs=tmnxSdpObjs, sdpAdminPathMtu=sdpAdminPathMtu, sdpBindDHCPProxyServerError=sdpBindDHCPProxyServerError, sdpKeepAliveHelloTime=sdpKeepAliveHelloTime, pwTemplateIgmpMaxNbrGrps=pwTemplateIgmpMaxNbrGrps, sdpBindTlsMmrpEntry=sdpBindTlsMmrpEntry, svcL2RteTable=svcL2RteTable, dynamicSdpCreationFailed=dynamicSdpCreationFailed, sdpBindId=sdpBindId, sdpBindTlsStpInBadBpdus=sdpBindTlsStpInBadBpdus, pwTemplateMfibAllowedMdaEntry=pwTemplateMfibAllowedMdaEntry, pwTemplateMacLearning=pwTemplateMacLearning, sdpBindTlsMrpRxJoinInEvent=sdpBindTlsMrpRxJoinInEvent, sdpBindTlsL2ptStatsStpRstBpdusTx=sdpBindTlsL2ptStatsStpRstBpdusTx, svcTlsBgpADPWTempBindRTRowStat=svcTlsBgpADPWTempBindRTRowStat, pwTemplateIgmpMcacPolicyName=pwTemplateIgmpMcacPolicyName, sdpBindTlsMacLearning=sdpBindTlsMacLearning, sdpBindControlWordBit=sdpBindControlWordBit, sdpAutoBindBgpInfoSAII=sdpAutoBindBgpInfoSAII, tmnxSdpBindDhcpV6v0Group=tmnxSdpBindDhcpV6v0Group, sdpBindDHCPSubAuthError=sdpBindDHCPSubAuthError, pwTemplateShgName=pwTemplateShgName, pwTemplateVlanVcTag=pwTemplateVlanVcTag, tmnxSdpL2V6v0Group=tmnxSdpL2V6v0Group, sdpBindMeshTlsHoldDownTimer=sdpBindMeshTlsHoldDownTimer, sdpBookedBandwidth=sdpBookedBandwidth)
