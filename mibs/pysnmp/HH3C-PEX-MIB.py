#
# PySNMP MIB module HH3C-PEX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-PEX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
entPhysicalIndex, entPhysicalDescr = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalDescr")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, IpAddress, Unsigned32, Integer32, Counter32, Gauge32, Bits, MibIdentifier, iso, NotificationType, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "IpAddress", "Unsigned32", "Integer32", "Counter32", "Gauge32", "Bits", "MibIdentifier", "iso", "NotificationType", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hh3cPex = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 129))
hh3cPex.setRevisions(('2012-11-12 11:29',))
if mibBuilder.loadTexts: hh3cPex.setLastUpdated('201211121129Z')
if mibBuilder.loadTexts: hh3cPex.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cPexSpecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 129, 1))
hh3cPexPortMinId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 129, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexPortMinId.setStatus('current')
hh3cPexPortMaxId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 129, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexPortMaxId.setStatus('current')
hh3cPexMinAssociateId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 129, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexMinAssociateId.setStatus('current')
hh3cPexMaxAssociateId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 129, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexMaxAssociateId.setStatus('current')
hh3cPexMaxPortPerPexPort = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 129, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexMaxPortPerPexPort.setStatus('current')
hh3cPexTable = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2))
hh3cPexPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1), )
if mibBuilder.loadTexts: hh3cPexPortTable.setStatus('current')
hh3cPexPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1, 1), ).setIndexNames((0, "HH3C-PEX-MIB", "hh3cPexPortId"))
if mibBuilder.loadTexts: hh3cPexPortEntry.setStatus('current')
hh3cPexPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cPexPortId.setStatus('current')
hh3cPexPortAssociateId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1, 1, 2), Integer32().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPexPortAssociateId.setStatus('current')
hh3cPexPortEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexPortEntPhysicalIndex.setStatus('current')
hh3cPexPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPexPortDescr.setStatus('current')
hh3cPexPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("loading", 2), ("online", 3))).clone('offline')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexPortStatus.setStatus('current')
hh3cPexPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPexPortRowStatus.setStatus('current')
hh3cPexPhyPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 2), )
if mibBuilder.loadTexts: hh3cPexPhyPortTable.setStatus('current')
hh3cPexPhyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hh3cPexPhyPortEntry.setStatus('current')
hh3cPexPhyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("blocked", 3), ("forwarding", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexPhyPortStatus.setStatus('current')
hh3cPexPhyPortBelongToPexPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPexPhyPortBelongToPexPort.setStatus('current')
hh3cPexPhyPortNeighborEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 129, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPexPhyPortNeighborEntIndex.setStatus('current')
hh3cPexTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 129, 3))
hh3cPexTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 129, 3, 0))
hh3cPexPortOnline = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 129, 3, 0, 1)).setObjects(("HH3C-PEX-MIB", "hh3cPexPortId"), ("HH3C-PEX-MIB", "hh3cPexPortDescr"))
if mibBuilder.loadTexts: hh3cPexPortOnline.setStatus('current')
hh3cPexPortOffline = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 129, 3, 0, 2)).setObjects(("HH3C-PEX-MIB", "hh3cPexPortId"), ("HH3C-PEX-MIB", "hh3cPexPortDescr"))
if mibBuilder.loadTexts: hh3cPexPortOffline.setStatus('current')
hh3cPexPhyPortForwarding = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 129, 3, 0, 3)).setObjects(("HH3C-PEX-MIB", "hh3cPexEntPhysicalIndexBind"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: hh3cPexPhyPortForwarding.setStatus('current')
hh3cPexPhyPortBlocked = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 129, 3, 0, 4)).setObjects(("HH3C-PEX-MIB", "hh3cPexEntPhysicalIndexBind"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: hh3cPexPhyPortBlocked.setStatus('current')
hh3cPexTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 129, 4))
hh3cPexEntPhysicalIndexBind = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 129, 4, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cPexEntPhysicalIndexBind.setStatus('current')
mibBuilder.exportSymbols("HH3C-PEX-MIB", hh3cPexPortEntry=hh3cPexPortEntry, hh3cPexSpecInfo=hh3cPexSpecInfo, hh3cPexTrapPrefix=hh3cPexTrapPrefix, hh3cPexMaxPortPerPexPort=hh3cPexMaxPortPerPexPort, hh3cPexMaxAssociateId=hh3cPexMaxAssociateId, hh3cPexPhyPortEntry=hh3cPexPhyPortEntry, hh3cPexPortEntPhysicalIndex=hh3cPexPortEntPhysicalIndex, hh3cPexPortDescr=hh3cPexPortDescr, hh3cPexMinAssociateId=hh3cPexMinAssociateId, hh3cPex=hh3cPex, hh3cPexEntPhysicalIndexBind=hh3cPexEntPhysicalIndexBind, hh3cPexPhyPortBlocked=hh3cPexPhyPortBlocked, hh3cPexPortMinId=hh3cPexPortMinId, hh3cPexPortAssociateId=hh3cPexPortAssociateId, hh3cPexPortId=hh3cPexPortId, hh3cPexPhyPortForwarding=hh3cPexPhyPortForwarding, hh3cPexPortMaxId=hh3cPexPortMaxId, hh3cPexPortOnline=hh3cPexPortOnline, hh3cPexPhyPortTable=hh3cPexPhyPortTable, PYSNMP_MODULE_ID=hh3cPex, hh3cPexPhyPortNeighborEntIndex=hh3cPexPhyPortNeighborEntIndex, hh3cPexTraps=hh3cPexTraps, hh3cPexPortRowStatus=hh3cPexPortRowStatus, hh3cPexPhyPortStatus=hh3cPexPhyPortStatus, hh3cPexTable=hh3cPexTable, hh3cPexTrapObjects=hh3cPexTrapObjects, hh3cPexPortTable=hh3cPexPortTable, hh3cPexPortOffline=hh3cPexPortOffline, hh3cPexPhyPortBelongToPexPort=hh3cPexPhyPortBelongToPexPort, hh3cPexPortStatus=hh3cPexPortStatus)
