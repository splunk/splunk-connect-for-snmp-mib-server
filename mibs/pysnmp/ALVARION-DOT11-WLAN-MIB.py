#
# PySNMP MIB module ALVARION-DOT11-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALVARION-DOT11-WLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:06:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, iso, Gauge32, NotificationType, MibIdentifier, Unsigned32, ObjectIdentity, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "iso", "Gauge32", "NotificationType", "MibIdentifier", "Unsigned32", "ObjectIdentity", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "Counter32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alvarion = MibIdentifier((1, 3, 6, 1, 4, 1, 12394))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1))
breezeAccessVLMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 1))
breezeAccessVLMib.setRevisions(('1910-09-23 11:30',))
if mibBuilder.loadTexts: breezeAccessVLMib.setLastUpdated('1009231130Z')
if mibBuilder.loadTexts: breezeAccessVLMib.setOrganization('Alvarion Ltd.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

alvarionOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4))
brzAccessVLOID = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1))
brzAccessVLAU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 1))
brzAccessVLSU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 2))
brzAccessVLAU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 4)).setLabel("brzAccessVLAU-BS")
brzAccessVLAU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 5)).setLabel("brzAccessVLAU-SA")
brzAccessVLAUS_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 6)).setLabel("brzAccessVLAUS-BS")
brzAccessVLAUS_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 7)).setLabel("brzAccessVLAUS-SA")
brzAccessAU_EZ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 8)).setLabel("brzAccessAU-EZ")
brzAccessVLSU_6_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 11)).setLabel("brzAccessVLSU-6-1D")
brzAccessVLSU_6_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 12)).setLabel("brzAccessVLSU-6-BD")
brzAccessVLSU_24_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 13)).setLabel("brzAccessVLSU-24-BD")
brzAccessVLSU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 14)).setLabel("brzAccessVLSU-BD")
brzAccessVLSU_54_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 15)).setLabel("brzAccessVLSU-54-BD")
brzAccessVLSU_3_1D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 16)).setLabel("brzAccessVLSU-3-1D")
brzAccessVLSU_3_4D = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 17)).setLabel("brzAccessVLSU-3-4D")
brzAccessVLSU_I = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 18)).setLabel("brzAccessVLSU-I")
brzAccessVLSU_EZ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 19)).setLabel("brzAccessVLSU-EZ")
brzAccessVLSU_V = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 20)).setLabel("brzAccessVLSU-V")
brzNetB_BU_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 21)).setLabel("brzNetB-BU-B14")
brzNetB_BU_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 22)).setLabel("brzNetB-BU-B28")
brzNetB_BU_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 23)).setLabel("brzNetB-BU-B100")
brzNetB_BU_B10 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 24)).setLabel("brzNetB-BU-B10")
brzNetB_RB_B14 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 31)).setLabel("brzNetB-RB-B14")
brzNetB_RB_B28 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 32)).setLabel("brzNetB-RB-B28")
brzNetB_RB_B100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 33)).setLabel("brzNetB-RB-B100")
brzNetB_RB_B10 = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 34)).setLabel("brzNetB-RB-B10")
brzAccess4900_AU_BS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 41)).setLabel("brzAccess4900-AU-BS")
brzAccess4900_AU_SA = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 42)).setLabel("brzAccess4900-AU-SA")
brzAccess4900_SU_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 51)).setLabel("brzAccess4900-SU-BD")
brzAccessVLSU_8_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 61)).setLabel("brzAccessVLSU-8-BD")
brzAccessVLSU_1_BD = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 62)).setLabel("brzAccessVLSU-1-BD")
brzAccessVLSU_3_L = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 63)).setLabel("brzAccessVLSU-3-L")
brzAccessVLSU_6_L = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 64)).setLabel("brzAccessVLSU-6-L")
brzAccessVLSU_12_L = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 65)).setLabel("brzAccessVLSU-12-L")
brzAccessVL_AU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 70)).setLabel("brzAccessVL-AU")
brzAccessVL_SU = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 75)).setLabel("brzAccessVL-SU")
brzAccessVLProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3))
brzaccVLSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1))
brzaccVLUnitHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitHwVersion.setStatus('current')
brzaccVLRunningSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunningSoftwareVersion.setStatus('current')
brzaccVLRunningFrom = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mainVersion", 1), ("shadowVersion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunningFrom.setStatus('current')
brzaccVLMainVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMainVersionNumber.setStatus('current')
brzaccVLMainVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMainVersionFileName.setStatus('current')
brzaccVLShadowVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLShadowVersionNumber.setStatus('current')
brzaccVLShadowVersionFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLShadowVersionFileName.setStatus('current')
brzaccVLUnitMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitMacAddress.setStatus('current')
brzaccVLUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("auBS", 1), ("auSA", 2), ("su-6-1D", 3), ("su-6-BD", 4), ("su-24-BD", 5), ("bu-B14", 6), ("bu-B28", 7), ("rb-B14", 8), ("rb-B28", 9), ("su-BD", 10), ("su-54-BD", 11), ("su-3-1D", 12), ("su-3-4D", 13), ("ausBS", 14), ("ausSA", 15), ("auBS4900", 16), ("auSA4900", 17), ("su4900", 18), ("bu-B100", 19), ("rb-B100", 20), ("su-I", 21), ("au-EZ", 22), ("su-EZ", 23), ("su-V", 24), ("bu-B10", 25), ("rb-B10", 26), ("su-8-BD", 27), ("su-1-BD", 28), ("su-3-L", 29), ("su-6-L", 30), ("su-12-L", 31), ("au", 32), ("su", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitType.setStatus('current')
brzaccVLAssociatedAU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAssociatedAU.setStatus('current')
brzaccVLNumOfAssociationsSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNumOfAssociationsSinceLastReset.setStatus('current')
brzaccVLCurrentNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentNumOfAssociations.setStatus('current')
brzaccVLUnitBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitBootVersion.setStatus('current')
brzaccVLRadioBand = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("band-5-8GHz", 1), ("band-5-4GHz", 2), ("band-4-9GHz", 3), ("band-5-2GHz", 4), ("band-2-4GHz", 5), ("band-5-3GHz", 6), ("band-4-9GHzJapan", 7), ("band-900MHz", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRadioBand.setStatus('current')
brzaccVLCurrentEthernetPortState = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("halfDuplexAnd10Mbps", 1), ("fullDuplexAnd10Mbps", 2), ("halfDuplexAnd100Mbps", 3), ("fullDuplexAnd100Mbps", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentEthernetPortState.setStatus('current')
brzaccVLTimeSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTimeSinceLastReset.setStatus('current')
brzaccVLCountryDependentParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18))
brzaccVLCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryCode.setStatus('current')
brzaccVLCountryDependentParamsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2), )
if mibBuilder.loadTexts: brzaccVLCountryDependentParamsTable.setStatus('current')
brzaccVLCountryDependentParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCountryDependentParameterTableIdx"))
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterEntry.setStatus('current')
brzaccVLCountryDependentParameterTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterTableIdx.setStatus('current')
brzaccVLCountryDependentParameterFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCountryDependentParameterFrequencies.setStatus('current')
brzaccVLAllowedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAllowedBandwidth.setStatus('current')
brzaccVLRegulationMaxTxPowerAtAntennaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRegulationMaxTxPowerAtAntennaPort.setStatus('current')
brzaccVLRegulationMaxEIRP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRegulationMaxEIRP.setStatus('current')
brzaccVLMinModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMinModulationLevel.setStatus('current')
brzaccVLMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxModulationLevel.setStatus('current')
brzaccVLBurstModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLBurstModeSupport.setStatus('current')
brzaccVLMaximumBurstDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumBurstDuration.setStatus('current')
brzaccVLDfsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDfsSupport.setStatus('current')
brzaccVLMinimumHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("hwRevisionF", 6), ("hwRevisionG", 7), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMinimumHwRevision.setStatus('current')
brzaccVLAuthenticationEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAuthenticationEncryptionSupport.setStatus('current')
brzaccVLDataEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDataEncryptionSupport.setStatus('current')
brzaccVLAESEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAESEncryptionSupport.setStatus('current')
brzaccVLAntennaGainChange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAntennaGainChange.setStatus('current')
brzaccVLAteTestResults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("pass", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAteTestResults.setStatus('current')
brzaccVLSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSerialNumber.setStatus('current')
brzaccVLAUSSupportSU54 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAUSSupportSU54.setStatus('current')
brzaccVLNumOfRejectionsSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNumOfRejectionsSinceLastReset.setStatus('current')
brzaccVLAUSSupportSU8 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAUSSupportSU8.setStatus('current')
brzaccVLUnitControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2))
brzaccVLResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancel", 1), ("resetSystemNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetUnit.setStatus('current')
brzaccVLSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noDefaultSettingRequested", 0), ("completeFactory", 1), ("partialFactory", 2), ("completeOperator", 3), ("partialOperator", 4), ("cancelCurrentPendingRequest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSetDefaults.setStatus('current')
brzaccVLUnitName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnitName.setStatus('current')
brzaccVLFlashMemoryControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resetAndBootFromShadowVersion", 1), ("useRunningVersionAfterReset", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFlashMemoryControl.setStatus('current')
brzaccVLTelnetLogoutTimer = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTelnetLogoutTimer.setStatus('current')
brzaccVLSaveCurrentConfigurationAsOperatorDefaults = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveAsDefaults", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSaveCurrentConfigurationAsOperatorDefaults.setStatus('current')
brzaccVLExitTelnet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("exit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLExitTelnet.setStatus('current')
brzaccVLUnitPasswords = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8))
brzaccVLReadOnlyPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLReadOnlyPassword.setStatus('current')
brzaccVLInstallerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInstallerPassword.setStatus('current')
brzaccVLAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdminPassword.setStatus('current')
brzaccVLEthernetNegotiationMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("force10MbpsAndHalfDuplex", 1), ("force10MbpsAndFullDuplex", 2), ("force100MbpsAndHalfDuplex", 3), ("force100MbpsAndFullDuplex", 4), ("autoNegotiationMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetNegotiationMode.setStatus('current')
brzaccVLFTPParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10))
brzaccVLFTPServerParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1))
brzaccVLFTPServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerUserName.setStatus('current')
brzaccVLFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerPassword.setStatus('current')
brzaccVLFTPClientIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPClientIPAddress.setStatus('current')
brzaccVLFTPServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPServerIpAddress.setStatus('current')
brzaccVLFTPClientMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPClientMask.setStatus('current')
brzaccVLFTPGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPGatewayIpAddress.setStatus('current')
brzaccVLFTPSwDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2))
brzaccVLFTPSwFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPSwFileName.setStatus('current')
brzaccVLFTPSwSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPSwSourceDir.setStatus('current')
brzaccVLFTPDownloadSwFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downloadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPDownloadSwFile.setStatus('current')
brzaccVLConfigurationFileLoading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3))
brzaccVLConfigurationFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConfigurationFileName.setStatus('current')
brzaccVLOperatorDefaultsFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorDefaultsFileName.setStatus('current')
brzaccVLFTPConfigurationFileSourceDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFTPConfigurationFileSourceDir.setStatus('current')
brzaccVLExecuteFTPConfigurationFileLoading = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("executeFTPGetConfigurationFile", 1), ("executeFTPPutConfigurationFile", 2), ("executeFTPGetOperatorDefaults", 3), ("executeFTPPutOperatorDefaults", 4), ("cancel", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLExecuteFTPConfigurationFileLoading.setStatus('current')
brzaccVLEventLogFileUploading = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4))
brzaccVLEventLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogFileName.setStatus('current')
brzaccVLEventLogDestinationDir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogDestinationDir.setStatus('current')
brzaccVLUploadEventLogFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uploadFile", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUploadEventLogFile.setStatus('current')
brzaccVLLoadingStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProcess", 1), ("successful", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLLoadingStatus.setStatus('current')
brzaccVLEventLogFileParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12))
brzaccVLEventLogPolicy = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("message", 1), ("warning", 2), ("error", 3), ("fatal", 4), ("logNone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEventLogPolicy.setStatus('current')
brzaccVLEraseEventLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eraseEventLog", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEraseEventLog.setStatus('current')
brzaccVLSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSystemLocation.setStatus('current')
brzaccVLFeatureUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14))
brzaccVLFeatureUpgradeManually = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFeatureUpgradeManually.setStatus('current')
brzaccVLChangeUnitType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLChangeUnitType.setStatus('current')
brzaccVLApWorkingMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("ezMode", 1), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLApWorkingMode.setStatus('current')
brzaccVLLEDsettings = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17))
brzaccVLLEDmode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("threshold", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLLEDmode.setStatus('current')
brzaccVLThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17, 2), )
if mibBuilder.loadTexts: brzaccVLThresholdTable.setStatus('current')
brzaccVLThresholdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLThresholdLEDnum"))
if mibBuilder.loadTexts: brzaccVLThresholdTableEntry.setStatus('current')
brzaccVLThresholdLEDnum = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLThresholdLEDnum.setStatus('current')
brzaccVLThresholdLEDtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("typeDisabled", 1), ("typeRSSI", 2), ("typeCRC", 3), ("typeSNR", 4), ("typeAverageModulation", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLThresholdLEDtype.setStatus('current')
brzaccVLThresholdLEDmode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("equalOrLower", 1), ("equalOrHigher", 2), ("equal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLThresholdLEDmode.setStatus('current')
brzaccVLThresholdLEDtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 2, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-108, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLThresholdLEDtarget.setStatus('current')
brzaccVLNwMngParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3))
brzaccVLAccessToNwMng = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToNwMng.setStatus('current')
brzaccVLNwMngFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("activateOnEthernetPort", 2), ("activateOnWirelessPort", 3), ("activateOnBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngFilter.setStatus('current')
mngIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3), )
if mibBuilder.loadTexts: mngIpFilterTable.setStatus('current')
mngIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNwMngIpTableIdx"))
if mibBuilder.loadTexts: mngIpFilterEntry.setStatus('current')
brzaccVLNwMngIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngIpAddress.setStatus('current')
brzaccVLNwMngIpTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNwMngIpTableIdx.setStatus('current')
brzaccVLDeleteOneNwIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpAddr.setStatus('current')
brzaccVLDeleteAllNwIpAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpAddrs.setStatus('current')
brzaccVLAccessToNwTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToNwTrap.setStatus('current')
mngTrapTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7), )
if mibBuilder.loadTexts: mngTrapTable.setStatus('current')
mngTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNwTrapTableIdx"))
if mibBuilder.loadTexts: mngTrapEntry.setStatus('current')
brzaccVLNwMngTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngTrapCommunity.setStatus('current')
brzaccVLNwMngTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNwMngTrapAddress.setStatus('current')
brzaccVLNwTrapTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNwTrapTableIdx.setStatus('current')
brzaccVLDeleteOneTrapAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneTrapAddr.setStatus('current')
brzaccVLDeleteAllTrapAddrs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllTrapAddrs.setStatus('current')
brzaccVLMngIpRangesTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10), )
if mibBuilder.loadTexts: brzaccVLMngIpRangesTable.setStatus('current')
brzaccVLMngIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMngIpRangeIdx"))
if mibBuilder.loadTexts: brzaccVLMngIpRangeEntry.setStatus('current')
brzaccVLMngIpRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMngIpRangeIdx.setStatus('current')
brzaccVLMngIpRangeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rangeDefinedByStartEndAddr", 1), ("rangeDefinedByStartAddrMask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeFlag.setStatus('current')
brzaccVLMngIpRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeStart.setStatus('current')
brzaccVLMngIpRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeEnd.setStatus('current')
brzaccVLMngIpRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMngIpRangeMask.setStatus('current')
brzaccVLDeleteOneNwIpRange = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneNwIpRange.setStatus('current')
brzaccVLDeleteAllNwIpRanges = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllNwIpRanges.setStatus('current')
brzaccVLWi2IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLWi2IpAddress.setStatus('current')
brzaccVLNewNMngSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14))
brzaccVLErrorHandling = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1))
brzaccVLErrHandlingSetNMSId = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLErrHandlingSetNMSId.setStatus('current')
brzaccVLErrHandlingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2), )
if mibBuilder.loadTexts: brzaccVLErrHandlingTable.setStatus('current')
brzaccVLErrHandlingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLErrHandlingNMSId"), (0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLErrHandlingRequestId"))
if mibBuilder.loadTexts: brzaccVLErrHandlingEntry.setStatus('current')
brzaccVLErrHandlingNMSId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingNMSId.setStatus('current')
brzaccVLErrHandlingRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingRequestId.setStatus('current')
brzaccVLErrHandlingErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingErrorCode.setStatus('current')
brzaccVLErrHandlingParameter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingParameter1.setStatus('current')
brzaccVLErrHandlingParameter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingParameter2.setStatus('current')
brzaccVLErrHandlingParameter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingParameter3.setStatus('current')
brzaccVLErrHandlingParameter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingParameter4.setStatus('current')
brzaccVLErrHandlingParameter5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLErrHandlingParameter5.setStatus('current')
newMngIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 15), )
if mibBuilder.loadTexts: newMngIpFilterTable.setStatus('current')
newMngIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 15, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewNwMngIpAddress"))
if mibBuilder.loadTexts: newMngIpFilterEntry.setStatus('current')
brzaccVLNewNwMngIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewNwMngIpAddress.setStatus('current')
brzaccVLNewNwMngIpAddressCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewNwMngIpAddressCommand.setStatus('current')
newMngTrapTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 16), )
if mibBuilder.loadTexts: newMngTrapTable.setStatus('current')
newMngTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 16, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewNwMngTrapAddress"))
if mibBuilder.loadTexts: newMngTrapEntry.setStatus('current')
brzaccVLNewNwMngTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewNwMngTrapCommunity.setStatus('current')
brzaccVLNewNwMngTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewNwMngTrapAddress.setStatus('current')
brzaccVLNewNwTrapCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewNwTrapCommand.setStatus('current')
brzaccVLNewMngIpRangesTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 17), )
if mibBuilder.loadTexts: brzaccVLNewMngIpRangesTable.setStatus('current')
brzaccVLNewMngIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 17, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewMngIpRangeStart"))
if mibBuilder.loadTexts: brzaccVLNewMngIpRangeEntry.setStatus('current')
brzaccVLNewMngIpRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewMngIpRangeStart.setStatus('current')
brzaccVLNewMngIpRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 17, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewMngIpRangeEnd.setStatus('current')
brzaccVLNewMngIpRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 17, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewMngIpRangeMask.setStatus('current')
brzaccVLNewMngIpRangeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rangeDefinedByStartEndAddr", 1), ("rangeDefinedByStartAddrMask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewMngIpRangeFlag.setStatus('current')
brzaccVLNewMngIpRangeCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewMngIpRangeCommand.setStatus('current')
brzaccVLTrapHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2))
brzaccVLLastTrapSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLLastTrapSequenceNumber.setStatus('current')
brzaccVLTrapHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2), )
if mibBuilder.loadTexts: brzaccVLTrapHistoryTable.setStatus('current')
brzaccVLTrapHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapHistorySequenceNumber"))
if mibBuilder.loadTexts: brzaccVLTrapHistoryEntry.setStatus('current')
brzaccVLTrapHistorySequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapHistorySequenceNumber.setStatus('current')
brzaccVLTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapType.setStatus('current')
brzaccVLTrapMacAddrParam = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapMacAddrParam.setStatus('current')
brzaccVLTrapIntParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapIntParam1.setStatus('current')
brzaccVLTrapIntParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapIntParam2.setStatus('current')
brzaccVLTrapIntParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapIntParam3.setStatus('current')
brzaccVLTrapStrParam = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 3, 14, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapStrParam.setStatus('current')
brzaccVLIpParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4))
brzaccVLUnitIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnitIpAddress.setStatus('current')
brzaccVLSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubNetMask.setStatus('current')
brzaccVLDefaultGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDefaultGWAddress.setStatus('current')
brzaccVLUseDhcp = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("dhcpOnly", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUseDhcp.setStatus('current')
brzaccVLAccessToDHCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fromWirelessOnly", 1), ("fromEthernetOnly", 2), ("fromBothWirelessAndEthernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAccessToDHCP.setStatus('current')
brzaccVLRunTimeIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeIPaddr.setStatus('current')
brzaccVLRunTimeSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeSubNetMask.setStatus('current')
brzaccVLRunTimeDefaultIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeDefaultIPGateway.setStatus('current')
brzaccVLBridgeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5))
brzaccVLVLANSupport = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1))
brzaccVLVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanID.setStatus('current')
brzaccVLEthernetLinkType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accessLink", 1), ("trunkLink", 2), ("hybridLink", 3), ("serviceProviderLink", 4), ("extAccessLink", 5), ("extTrunkLink", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetLinkType.setStatus('current')
brzaccVLManagementVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLManagementVlanID.setStatus('current')
brzaccVLVLANForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4))
brzaccVLVlanForwardingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanForwardingSupport.setStatus('current')
brzaccVLVlanForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2), )
if mibBuilder.loadTexts: brzaccVLVlanForwardingTable.setStatus('current')
brzaccVLVlanForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLVlanForwardingTableIdx"))
if mibBuilder.loadTexts: brzaccVLVlanForwardingEntry.setStatus('current')
brzaccVLVlanForwardingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLVlanForwardingTableIdx.setStatus('current')
brzaccVLVlanIdForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanIdForwarding.setStatus('current')
brzaccVLNewVlanForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 3), )
if mibBuilder.loadTexts: brzaccVLNewVlanForwardingTable.setStatus('current')
brzaccVLNewVlanForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewVlanIdForwarding"))
if mibBuilder.loadTexts: brzaccVLNewVlanForwardingEntry.setStatus('current')
brzaccVLNewVlanIdForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewVlanIdForwarding.setStatus('current')
brzaccVLNewVlanForwardingCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewVlanForwardingCommand.setStatus('current')
brzaccVLVlanRelaying = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5))
brzaccVLVlanRelayingSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanRelayingSupport.setStatus('current')
brzaccVLVlanRelayingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2), )
if mibBuilder.loadTexts: brzaccVLVlanRelayingTable.setStatus('current')
brzaccVLVlanRelayingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLVlanRelayingTableIdx"))
if mibBuilder.loadTexts: brzaccVLVlanRelayingEntry.setStatus('current')
brzaccVLVlanRelayingTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLVlanRelayingTableIdx.setStatus('current')
brzaccVLVlanIdRelaying = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanIdRelaying.setStatus('current')
brzaccVLNewVlanRelayingTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 3), )
if mibBuilder.loadTexts: brzaccVLNewVlanRelayingTable.setStatus('current')
brzaccVLNewVlanRelayingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewVlanIdRelaying"))
if mibBuilder.loadTexts: brzaccVLNewVlanRelayingEntry.setStatus('current')
brzaccVLNewVlanIdRelaying = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewVlanIdRelaying.setStatus('current')
brzaccVLNewVlanRelayingTableCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewVlanRelayingTableCommand.setStatus('current')
brzaccVLVLANTrafficPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6))
brzaccVLVlanDataPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanDataPriority.setStatus('current')
brzaccVLVlanManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanManagementPriority.setStatus('current')
brzaccVLVlanPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanPriorityThreshold.setStatus('current')
brzaccVLVLANQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7))
brzaccVLQinQEthertype = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33024, 36864), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLQinQEthertype.setStatus('current')
brzaccVLQinQProviderVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLQinQProviderVlanID.setStatus('current')
brzaccVLVlanExtendedAccessRulesTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8), )
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRulesTable.setStatus('current')
brzaccVLVlanExtendedAccessRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLVlanExtendedAccessRulesTableIdx"))
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRulesEntry.setStatus('current')
brzaccVLVlanExtendedAccessRulesTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRulesTableIdx.setStatus('current')
brzaccVLVlanExtendedAccessRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noRule", 1), ("sourceMacAddress", 2), ("destinationMacAddress", 3), ("sourceIpAddress", 4), ("destinationIpAddress", 5), ("sourceUdpPort", 6), ("destinationUdpPort", 7), ("sourceTcpPort", 8), ("destinationTcpPort", 9), ("ipProtocol", 10), ("default", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRuleId.setStatus('current')
brzaccVLVlanExtendedAccessRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRuleVlanId.setStatus('current')
brzaccVLVlanExtendedAccessRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRulePriority.setStatus('current')
brzaccVLVlanExtendedAccessRuleMulticastAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("allowed", 1), ("notAllowed", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRuleMulticastAllowed.setStatus('current')
brzaccVLVlanExtendedAccessRuleOpType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("value", 1), ("range", 2), ("mask", 3), ("enumeration", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRuleOpType.setStatus('current')
brzaccVLVlanExtendedAccessRuleOperands = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanExtendedAccessRuleOperands.setStatus('current')
brzaccVLVlanExtendedTrunkVlanID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVlanExtendedTrunkVlanID.setStatus('current')
brzaccVLBridgeAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBridgeAgingTime.setStatus('current')
brzaccVLBroadcastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("broadcastMulticastEnable", 2), ("broadcastEnable", 3), ("multicastEnable", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBroadcastRelaying.setStatus('current')
brzaccVLUnicastRelaying = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUnicastRelaying.setStatus('current')
brzaccVLEthBroadcastFiltering = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("onEthernetOnly", 2), ("onWirelessOnly", 3), ("onBothWirelessAndEthernet", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastFiltering.setStatus('current')
brzaccVLEthBroadcastingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7))
brzaccVLDHCPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDHCPBroadcastOverrideFilter.setStatus('current')
brzaccVLPPPoEBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPPPoEBroadcastOverrideFilter.setStatus('current')
brzaccVLARPBroadcastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLARPBroadcastOverrideFilter.setStatus('current')
brzaccVLEthBroadcastMulticastLimiterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("limitOnlyBroadcasts", 2), ("limitMulticastsExceptBroadcasts", 3), ("limitAllMulticasts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterOption.setStatus('current')
brzaccVLEthBroadcastMulticastLimiterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterThreshold.setStatus('current')
brzaccVLEthBroadcastMulticastLimiterSendTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterSendTrapInterval.setStatus('current')
brzaccVLToSPriorityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8))
brzaccVLToSPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLToSPrecedenceThreshold.setStatus('current')
brzaccVLRoamingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLRoamingOption.setStatus('current')
brzaccVLMacAddressDenyList = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10))
brzaccVLMacAddressDenyListTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1), )
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTable.setStatus('current')
brzaccVLMacAddressDenyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMacAddressDenyListTableIdx"))
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListEntry.setStatus('current')
brzaccVLMacAddressDenyListTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListTableIdx.setStatus('current')
brzaccVLMacAddressDenyListId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListId.setStatus('current')
brzaccVLMacAddressDenyListAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAdd.setStatus('current')
brzaccVLMacAddressDenyListRemove = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListRemove.setStatus('current')
brzaccVLNumberOfMacAddressesInDenyList = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNumberOfMacAddressesInDenyList.setStatus('current')
brzaccVLMacAddressDenyListAction = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("denyList", 1), ("allowedList", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMacAddressDenyListAction.setStatus('current')
brzaccVLNewMacAddressDenyListTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 6), )
if mibBuilder.loadTexts: brzaccVLNewMacAddressDenyListTable.setStatus('current')
brzaccVLNewMacAddressDenyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewMacAddressDenyListId"))
if mibBuilder.loadTexts: brzaccVLNewMacAddressDenyListEntry.setStatus('current')
brzaccVLNewMacAddressDenyListId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewMacAddressDenyListId.setStatus('current')
brzaccVLNewMacAddressDenyListCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewMacAddressDenyListCommand.setStatus('current')
brzAccVLPortsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11))
brzaccVLEthernetPortControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetPortControl.setStatus('current')
brzaccVLSendBroadcastsMulticastsAsUnicasts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSendBroadcastsMulticastsAsUnicasts.setStatus('current')
brzaccVLAirInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6))
brzaccVLESSIDParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1))
brzaccVLESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLESSID.setStatus('current')
brzaccVLOperatorESSIDOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorESSIDOption.setStatus('current')
brzaccVLOperatorESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOperatorESSID.setStatus('current')
brzaccVLRunTimeESSID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunTimeESSID.setStatus('current')
brzaccVLHiddenESSIDParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 5))
brzaccVLAUHiddenESSIDOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUHiddenESSIDOption.setStatus('current')
brzaccVLSUHiddenESSIDSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUHiddenESSIDSupport.setStatus('current')
brzaccVLSUHiddenESSIDTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUHiddenESSIDTimeout.setStatus('current')
brzaccVLMaximumCellRadius = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumCellRadius.setStatus('current')
brzaccVLAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAIFS.setStatus('current')
brzaccVLWirelessTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLWirelessTrapThreshold.setStatus('current')
brzaccVLTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5), )
if mibBuilder.loadTexts: brzaccVLTransmitPowerTable.setStatus('current')
brzaccVLTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLTransmitPowerIdx"))
if mibBuilder.loadTexts: brzaccVLTransmitPowerEntry.setStatus('current')
brzaccVLTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTransmitPowerIdx.setStatus('current')
brzaccVLApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLApplicableModulationLevel.setStatus('current')
brzaccVLMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumTxPowerRange.setStatus('current')
brzaccVLTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTxPower.setStatus('current')
brzaccVLCurrentTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentTxPower.setStatus('current')
brzaccVLNewTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 27), )
if mibBuilder.loadTexts: brzaccVLNewTransmitPowerTable.setStatus('current')
brzaccVLNewTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 27, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewModulationLevelIdx"))
if mibBuilder.loadTexts: brzaccVLNewTransmitPowerEntry.setStatus('current')
brzaccVLNewModulationLevelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewModulationLevelIdx.setStatus('current')
brzaccVLNewMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewMaximumTxPowerRange.setStatus('current')
brzaccVLNewTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 27, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewTxPower.setStatus('current')
brzaccVLNewCurrentTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 27, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewCurrentTxPower.setStatus('current')
brzaccVLMaximumTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6), )
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerTable.setStatus('current')
brzaccVLMaximumTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLMaximumTransmitPowerIdx"))
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerEntry.setStatus('current')
brzaccVLMaximumTransmitPowerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaximumTransmitPowerIdx.setStatus('current')
brzaccVLMaxTxApplicableModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("level1to5", 1), ("level6", 2), ("level7", 3), ("level8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxTxApplicableModulationLevel.setStatus('current')
brzaccVLDefinedMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDefinedMaximumTxPowerRange.setStatus('current')
brzaccVLMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxTxPower.setStatus('current')
brzaccVLNewMaximumTransmitPowerTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 28), )
if mibBuilder.loadTexts: brzaccVLNewMaximumTransmitPowerTable.setStatus('current')
brzaccVLNewMaximumTransmitPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 28, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewMaxModulationLevelIdx"))
if mibBuilder.loadTexts: brzaccVLNewMaximumTransmitPowerEntry.setStatus('current')
brzaccVLNewMaxModulationLevelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewMaxModulationLevelIdx.setStatus('current')
brzaccVLNewDefinedMaximumTxPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 28, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewDefinedMaximumTxPowerRange.setStatus('current')
brzaccVLNewMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 28, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewMaxTxPower.setStatus('current')
brzaccVLMaxNumOfAssociations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociations.setStatus('current')
brzaccVLBestAu = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11))
brzaccVLBestAuSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBestAuSupport.setStatus('current')
brzaccVLBestAuNoOfScanningAttempts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBestAuNoOfScanningAttempts.setStatus('current')
brzaccVLPreferredAuMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPreferredAuMacAddress.setStatus('current')
brzaccVLNeighborAuTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4), )
if mibBuilder.loadTexts: brzaccVLNeighborAuTable.setStatus('current')
brzaccVLNeighborAuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNeighborAuIdx"))
if mibBuilder.loadTexts: brzaccVLNeighborAuEntry.setStatus('current')
brzaccVLNeighborAuIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuIdx.setStatus('current')
brzaccVLNeighborAuMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuMacAdd.setStatus('current')
brzaccVLNeighborAuESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuESSID.setStatus('current')
brzaccVLNeighborAuSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSNR.setStatus('current')
brzaccVLNeighborAuAssocLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("full", 1), ("notFull", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAssocLoadStatus.setStatus('current')
brzaccVLNeighborAuMark = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuMark.setStatus('current')
brzaccVLNeighborAuHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("hwRevisionF", 6), ("hwRevisionG", 7), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuHwRevision.setStatus('current')
brzaccVLNeighborAuCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuCountryCode.setStatus('current')
brzaccVLNeighborAuSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSwVer.setStatus('current')
brzaccVLNeighborAuAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAtpcOption.setStatus('current')
brzaccVLNeighborAuAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAdapModOption.setStatus('current')
brzaccVLNeighborAuBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuBurstModeOption.setStatus('current')
brzaccVLNeighborAuDfsOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuDfsOption.setStatus('current')
brzaccVLNeighborAuConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuConcatenationOption.setStatus('current')
brzaccVLNeighborAuLearnCountryCodeBySU = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuLearnCountryCodeBySU.setStatus('current')
brzaccVLNeighborAuSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuSecurityMode.setStatus('current')
brzaccVLNeighborAuAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuAuthOption.setStatus('current')
brzaccVLNeighborAuDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuDataEncyptOption.setStatus('current')
brzaccVLNeighborAuPerSuDistanceLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuPerSuDistanceLearning.setStatus('current')
brzaccVLNeighborAuRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 11, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNeighborAuRSSI.setStatus('current')
brzaccVLFrequencyDefinition = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12))
brzaccVLSubBandLowerFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubBandLowerFrequency.setStatus('obsolete')
brzaccVLSubBandUpperFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSubBandUpperFrequency.setStatus('obsolete')
brzaccVLScanningStep = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("mhz-5", 1), ("mhz-10", 2), ("mhz-20", 3), ("khz-500", 4), ("mhz-1", 5), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLScanningStep.setStatus('current')
brzaccVLFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4), )
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTable.setStatus('current')
brzaccVLFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: brzaccVLFrequencySubsetEntry.setStatus('current')
brzaccVLFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetTableIdx.setStatus('current')
brzaccVLFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequency.setStatus('current')
brzaccVLFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetActive.setStatus('current')
brzaccVLFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFrequencySubsetFrequencyNew.setStatus('current')
brzaccVLSetSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSetSelectedFreqSubset.setStatus('current')
brzaccVLCurrentFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6), )
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTable.setStatus('current')
brzaccVLCurrentFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCurrentFrequencySubsetTableIdx"))
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetEntry.setStatus('current')
brzaccVLCurrentFrequencySubsetTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetTableIdx.setStatus('current')
brzaccVLCurrentFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequency.setStatus('current')
brzaccVLCurrentFrequencySubsetFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentFrequencySubsetFrequencyNew.setStatus('current')
brzaccVLCurrentAUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequency.setStatus('current')
brzaccVLAUDefinedFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequency.setStatus('current')
brzaccVLCurrentSUOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentSUOperatingFrequency.setStatus('current')
brzaccVLSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10))
brzaccVLSelectSubBandIndex = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSelectSubBandIndex.setStatus('current')
brzaccVLDFSParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11))
brzaccVLDFSOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSOption.setStatus('current')
brzaccVLDFSChannelCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelCheckTime.setStatus('current')
brzaccVLDFSChannelAvoidancePeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelAvoidancePeriod.setStatus('current')
brzaccVLDFSSuWaitingOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSSuWaitingOption.setStatus('current')
brzaccVLDFSClearRadarDetectedChannelsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("cancel", 1), ("clearRadarChannels", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSClearRadarDetectedChannelsAfterReset.setStatus('current')
brzaccVLDFSRadarDetectionChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7), )
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsTable.setStatus('current')
brzaccVLDFSRadarDetectionChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSChannelIdx"))
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectionChannelsEntry.setStatus('current')
brzaccVLDFSChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelIdx.setStatus('current')
brzaccVLDFSChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequency.setStatus('current')
brzaccVLDFSChannelRadarStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radarFree", 1), ("adjacentToRadar", 2), ("radarDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelRadarStatus.setStatus('current')
brzaccVLDFSChannelFrequencyNew = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSChannelFrequencyNew.setStatus('current')
brzaccVLDFSMinimumPulsesToDetect = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSMinimumPulsesToDetect.setStatus('current')
brzaccVLDFSChannelReuseParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9))
brzaccVLDFSChannelReuseOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSChannelReuseOption.setStatus('current')
brzaccVLDFSRadarActivityAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSRadarActivityAssessmentPeriod.setStatus('current')
brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod.setStatus('current')
brzaccVLDFSDetectionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("etsi", 1), ("fcc", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSDetectionAlgorithm.setStatus('current')
brzaccVLDFSRemoteRadarEventReports = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSRemoteRadarEventReports.setStatus('current')
brzaccVLDFSRemoteRadarEventMonitoringPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDFSRemoteRadarEventMonitoringPeriod.setStatus('current')
brzaccVLEnhancedETSIRadarDetection = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 11, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEnhancedETSIRadarDetection.setStatus('current')
brzaccVLCountryCodeLearningBySU = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCountryCodeLearningBySU.setStatus('current')
brzaccVLCurrentAUOperatingFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentAUOperatingFrequencyNew.setStatus('current')
brzaccVLAUDefinedFrequencyNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefinedFrequencyNew.setStatus('current')
brzaccVLAutoSubBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15))
brzaccVLAutoSubBandSelectedFreqSubset = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setAllSelectedFreqsSubset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutoSubBandSelectedFreqSubset.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2), )
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetTable.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAutoSubBandFrequencySubsetBandIdx"), (0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAutoSubBandFrequencySubsetFrequencyIdx"))
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetEntry.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetBandIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetBandIdx.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetFrequencyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequencyIdx.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetActive.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetFrequency.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetBandwidth.setStatus('current')
brzaccVLAutoSubBandFrequencySubsetDFSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 12, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radarFree", 1), ("adjacentToRadar", 2), ("radarDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAutoSubBandFrequencySubsetDFSStatus.setStatus('current')
brzaccVLATPC = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13))
brzaccVLAtpcOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAtpcOption.setStatus('current')
brzaccVLDeltaFromMinSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeltaFromMinSNRLevel.setStatus('current')
brzaccVLMinimumSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinimumSNRLevel.setStatus('current')
brzaccVLMinimumIntervalBetweenATPCMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinimumIntervalBetweenATPCMessages.setStatus('current')
brzaccVLPowerLevelSteps = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPowerLevelSteps.setStatus('current')
brzaccVLAtpcOptionEZ = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAtpcOptionEZ.setStatus('current')
brzaccVLCellDistanceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15))
brzaccVLCellDistanceMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCellDistanceMode.setStatus('current')
brzaccVLFairnessFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLFairnessFactor.setStatus('current')
brzaccVLMeasuredCellDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMeasuredCellDistance.setStatus('current')
brzaccVLUnitWithMaxDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnitWithMaxDistance.setStatus('current')
brzaccVLPerSuDistanceLearning = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPerSuDistanceLearning.setStatus('current')
brzaccVLScanningMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLScanningMode.setStatus('current')
brzaccVLAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAntennaGain.setStatus('current')
brzaccVLSpectrumAnalysisParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18))
brzaccVLSpectrumAnalysisChannelScanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisChannelScanPeriod.setStatus('current')
brzaccVLSpectrumAnalysisScanCycles = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisScanCycles.setStatus('current')
brzaccVLAutomaticChannelSelection = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAutomaticChannelSelection.setStatus('current')
brzaccVLSpectrumAnalysisActivation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("activateNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisActivation.setStatus('current')
brzaccVLSpectrumAnalysisStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("currentlyActive", 2), ("currentlyBlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisStatus.setStatus('current')
brzaccVLResetSpectrumCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetSpectrumCounters.setStatus('current')
brzaccVLSpectrumAnalysisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7), )
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTable.setStatus('current')
brzaccVLSpectrumAnalysisInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLSpectrumAnalysisInformationTableIdx"))
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationEntry.setStatus('current')
brzaccVLSpectrumAnalysisInformationTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationTableIdx.setStatus('current')
brzaccVLSpectrumAnalysisInformationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationChannel.setStatus('current')
brzaccVLSpectrumAnalysisInformationSignalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalCount.setStatus('current')
brzaccVLSpectrumAnalysisInformationSignalSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalSNR.setStatus('current')
brzaccVLSpectrumAnalysisInformationSignalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalWidth.setStatus('current')
brzaccVLSpectrumAnalysisInformationOFDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationOFDMFrames.setStatus('current')
brzaccVLSpectrumAnalysisInformationOFDMAvgSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationOFDMAvgSnr.setStatus('current')
brzaccVLSpectrumAnalysisInformationAvgNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationAvgNoiseFloor.setStatus('current')
brzaccVLSpectrumAnalysisInformationMaxNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationMaxNoiseFloor.setStatus('current')
brzaccVLSpectrumAnalysisInformationSignalMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationSignalMaxSNR.setStatus('current')
brzaccVLSpectrumAnalysisInformationOFDMMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 18, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSpectrumAnalysisInformationOFDMMaxSNR.setStatus('current')
brzaccVLMaxNumOfAssociationsLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLMaxNumOfAssociationsLimit.setStatus('current')
brzaccVLDisassociate = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20))
brzaccVLDisassociateAllSUs = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("disassociateAllSUs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDisassociateAllSUs.setStatus('current')
brzaccVLDisassociateSuByMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 20, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDisassociateSuByMacAddress.setStatus('current')
brzaccVLTxControl = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("ethernetStatusControl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTxControl.setStatus('current')
brzaccVLLostBeaconsWatchdogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 1000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLLostBeaconsWatchdogThreshold.setStatus('current')
brzaccVLTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTransmitPower.setStatus('current')
brzaccVLMaximumTxPower = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumTxPower.setStatus('current')
brzaccVLCountryCodeParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25))
brzaccVLCountryCodeReApply = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("reapply", 1), ("cancel", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCountryCodeReApply.setStatus('current')
brzaccVLCountryCodeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 2), )
if mibBuilder.loadTexts: brzaccVLCountryCodeTable.setStatus('current')
brzaccVLCountryCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCCNumber"))
if mibBuilder.loadTexts: brzaccVLCountryCodeEntry.setStatus('current')
brzaccVLCCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCNumber.setStatus('current')
brzaccVLCCName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCName.setStatus('current')
brzaccVLCCAuthenticationEncryptionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCAuthenticationEncryptionSupport.setStatus('current')
brzaccVLCCDataEncryptionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCDataEncryptionSupport.setStatus('current')
brzaccVLCCAESEncryptionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCAESEncryptionSupport.setStatus('current')
brzaccVLCCParamsTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3), )
if mibBuilder.loadTexts: brzaccVLCCParamsTable.setStatus('current')
brzaccVLCCParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCCNumberIdx"), (0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLCCParamsIndex"))
if mibBuilder.loadTexts: brzaccVLCCParamsEntry.setStatus('current')
brzaccVLCCNumberIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCNumberIdx.setStatus('current')
brzaccVLCCParamsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCParamsIndex.setStatus('current')
brzaccVLCCParamsFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCParamsFrequencies.setStatus('current')
brzaccVLCCAllowedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCAllowedBandwidth.setStatus('current')
brzaccVLCCRegulationMaxTxPowerAtAntennaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCRegulationMaxTxPowerAtAntennaPort.setStatus('current')
brzaccVLCCRegulationMaxEIRP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCRegulationMaxEIRP.setStatus('current')
brzaccVLCCMinModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCMinModulationLevel.setStatus('current')
brzaccVLCCMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCMaxModulationLevel.setStatus('current')
brzaccVLCCBurstModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCBurstModeSupport.setStatus('current')
brzaccVLCCMaximumBurstDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCMaximumBurstDuration.setStatus('current')
brzaccVLCCDfsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCDfsSupport.setStatus('current')
brzaccVLCCMinimumHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("hwRevisionF", 6), ("hwRevisionG", 7), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCCMinimumHwRevision.setStatus('current')
brzaccVLCountryCodeSelect = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 25, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCountryCodeSelect.setStatus('current')
brzaccVLNoiseImmunityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 26))
brzaccVLNoiseImmunityAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNoiseImmunityAlgorithm.setStatus('current')
brzaccVLNoiseImmunityLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNoiseImmunityLevel.setStatus('current')
brzaccVLSpuriousImmunityLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSpuriousImmunityLevel.setStatus('current')
brzaccVLOFDMWeakSignal = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLOFDMWeakSignal.setStatus('current')
brzaccVLPulseDetectionSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLPulseDetectionSensitivity.setStatus('current')
brzaccVLNoiseFloorCalculationParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 29))
brzaccVLNoiseFloorCalculationMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("forced", 2), ("minimumlevel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNoiseFloorCalculationMode.setStatus('current')
brzaccVLNoiseFloorForcedValue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 29, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNoiseFloorForcedValue.setStatus('current')
brzaccVLNoiseFloorCalibrationParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 30))
brzaccVLNoiseFloorRunCalibration = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("run", 1), ("cancel", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNoiseFloorRunCalibration.setStatus('current')
brzaccVLNoiseFloorFieldCalibrationStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("currentlyActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoiseFloorFieldCalibrationStatus.setStatus('current')
brzaccVLNoiseFloorLastFieldCalibrationResult = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoiseFloorLastFieldCalibrationResult.setStatus('current')
brzaccVLNoiseFloorBandwidthUsedForLastFieldCalibration = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 10, 20, 40))).clone(namedValues=NamedValues(("none", 0), ("bandwidth-5MHz", 5), ("bandwidth-10MHz", 10), ("bandwidth-20MHz", 20), ("bandwidth-40MHz", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoiseFloorBandwidthUsedForLastFieldCalibration.setStatus('current')
brzaccVLNoiseFloorAvailableCalibrationOptions = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notCalibrated", 1), ("factoryOnly", 2), ("fieldOnly", 3), ("factoryAndField", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoiseFloorAvailableCalibrationOptions.setStatus('current')
brzaccVLNoiseFloorUseCalibration = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("fieldCalibration", 2), ("factoryCalibration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNoiseFloorUseCalibration.setStatus('current')
brzaccVLInterferenceMitigationParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31))
brzaccVLInterferenceMitigationChannelScanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationChannelScanPeriod.setStatus('current')
brzaccVLBeaconPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBeaconPeriod.setStatus('current')
brzaccVLMaxBeaconsLost = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxBeaconsLost.setStatus('current')
brzaccVLInterferenceMitigationAutomaticScanPeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationAutomaticScanPeriod.setStatus('current')
brzaccVLInterferenceMitigationScanType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clearChannelAndAutomaticNoiseFloorSelection", 1), ("automaticNoiseFloorSelectionOnly", 2), ("clearChannelSelectionOnly", 3), ("statisticsOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationScanType.setStatus('current')
brzaccVLInterferenceMitigationScanMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("optimizePerformanceForMinimumDesiredDistance", 1), ("optimizeDistanceForMinimumDesiredPerformance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationScanMode.setStatus('current')
brzaccVLInterferenceMitigationDistance = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationDistance.setStatus('current')
brzaccVLInterferenceMitigationThroughput = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationThroughput.setStatus('current')
brzaccVLInterferenceMitigationActivation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cancelOperation", 1), ("activateNow", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationActivation.setStatus('current')
brzaccVLInterferenceMitigationStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("currentlyActive", 2), ("currentlyBlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationStatus.setStatus('current')
brzaccVLInterferenceMitigationDeleteStatisticsFile = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cancelOperation", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationDeleteStatisticsFile.setStatus('current')
brzaccVLInterferenceMitigationModel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("typeLOS", 1), ("typenLOS", 2), ("typeNoLOS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationModel.setStatus('current')
brzaccVLInterferenceMitigationScanTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationScanTime.setStatus('current')
brzaccVLInterferenceMitigationAUheight = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationAUheight.setStatus('current')
brzaccVLInterferenceMitigationAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationAntennaGain.setStatus('current')
brzaccVLInterferenceMitigationMaxModulation = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationMaxModulation.setStatus('current')
brzaccVLInterferenceMitigationKeepLink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationKeepLink.setStatus('current')
brzaccVLInterferenceMitigationOutputTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17), )
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputTable.setStatus('current')
brzaccVLInterferenceMitigationOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLInterferenceMitigationOutputFrequency"))
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputEntry.setStatus('current')
brzaccVLInterferenceMitigationOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(905, 925))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputFrequency.setStatus('current')
brzaccVLInterferenceMitigationOutputScanningType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("typeCCSandANFS", 1), ("typeANFS", 2), ("typeCCS", 3), ("typeStatistics", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputScanningType.setStatus('current')
brzaccVLInterferenceMitigationOutputInstallationModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("typeLOS", 1), ("typeNearLOS", 2), ("typeNoLOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputInstallationModel.setStatus('current')
brzaccVLInterferenceMitigationOutputNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -55))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputNoiseFloor.setStatus('current')
brzaccVLInterferenceMitigationOutputDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputDistance.setStatus('current')
brzaccVLInterferenceMitigationOutputPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 6, 31, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLInterferenceMitigationOutputPerformance.setStatus('current')
brzaccVLServiceParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7))
brzaccVLMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirDownlink.setStatus('current')
brzaccVLMirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirUplink.setStatus('current')
brzaccVLCirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCirDownlink.setStatus('current')
brzaccVLCirUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLCirUplink.setStatus('current')
brzaccVLMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxDelay.setStatus('current')
brzaccVLMaxBurstDuration = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxBurstDuration.setStatus('current')
brzaccVLGracefulDegradationLimit = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLGracefulDegradationLimit.setStatus('current')
brzaccVLMirOnlyOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMirOnlyOption.setStatus('current')
brzaccVLTrafficPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10))
brzaccVLTrafficPriVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1))
brzaccVLVLANPriorityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLVLANPriorityThreshold.setStatus('current')
brzaccVLTrafficPriIPToS = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2))
brzaccVLToSPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ipPrecedence", 2), ("dSCP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLToSPrioritizationOption.setStatus('current')
brzaccVLIPPrecedenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIPPrecedenceThreshold.setStatus('current')
brzaccVLIPDSCPThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIPDSCPThreshold.setStatus('current')
brzaccVLTrafficPriUdpTcpPortRange = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3))
brzaccVLUdpTcpPortRangePrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("udpOnly", 2), ("tcpOnly", 3), ("udpANDtcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpTcpPortRangePrioritizationOption.setStatus('current')
brzaccVLUdpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2))
brzaccVLUdpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortPriRTPRTCP.setStatus('current')
brzaccVLUdpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeNum.setStatus('current')
brzaccVLUdpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3), )
if mibBuilder.loadTexts: brzaccVLUdpPortRangeTable.setStatus('current')
brzaccVLUdpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLUdpPortRangeIdx"))
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEntry.setStatus('current')
brzaccVLUdpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeStart.setStatus('current')
brzaccVLUdpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeEnd.setStatus('current')
brzaccVLUdpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeIdx.setStatus('current')
brzaccVLUdpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeAdd.setStatus('current')
brzaccVLUdpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDelete.setStatus('current')
brzaccVLUdpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUdpPortRangeDeleteAll.setStatus('current')
brzaccVLTcpPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3))
brzaccVLTcpPortPriRTPRTCP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtpANDrtcp", 1), ("rtpOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortPriRTPRTCP.setStatus('current')
brzaccVLTcpPortRangeNum = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeNum.setStatus('current')
brzaccVLTcpPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3), )
if mibBuilder.loadTexts: brzaccVLTcpPortRangeTable.setStatus('current')
brzaccVLTcpPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLTcpPortRangeIdx"))
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEntry.setStatus('current')
brzaccVLTcpPortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeStart.setStatus('current')
brzaccVLTcpPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeEnd.setStatus('current')
brzaccVLTcpPortRangeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeIdx.setStatus('current')
brzaccVLTcpPortRangeAdd = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeAdd.setStatus('current')
brzaccVLTcpPortRangeDelete = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDelete.setStatus('current')
brzaccVLTcpPortRangeDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTcpPortRangeDeleteAll.setStatus('current')
brzaccVLWirelessLinkPrioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4))
brzaccVLWirelessLinkPrioritizationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLWirelessLinkPrioritizationOption.setStatus('current')
brzaccVLlowPriorityAIFS = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLlowPriorityAIFS.setStatus('current')
brzaccVLHWRetriesHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHWRetriesHighPriority.setStatus('current')
brzaccVLHWRetriesLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHWRetriesLowPriority.setStatus('current')
brzaccVLAUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUBurstDurationHighPriority.setStatus('current')
brzaccVLAUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUBurstDurationLowPriority.setStatus('current')
brzaccVLSUBurstDurationHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUBurstDurationHighPriority.setStatus('current')
brzaccVLSUBurstDurationLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUBurstDurationLowPriority.setStatus('current')
brzaccVLTrafficPriIpRange = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 5))
brzaccVLTrafficPriIpRangeOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("ipSource", 2), ("ipDestination", 3), ("ipSourceOrDestination", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTrafficPriIpRangeOption.setStatus('current')
brzaccVLTrafficPriIpRangeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTrafficPriIpRangeIpAddress.setStatus('current')
brzaccVLTrafficPriIpRangeIpMask = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 10, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLTrafficPriIpRangeIpMask.setStatus('current')
brzaccVLDrap = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11))
brzaccVLDrapSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapSupport.setStatus('current')
brzaccVLDrapUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 8200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapUdpPort.setStatus('current')
brzaccVLDrapMaxNumberOfVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapMaxNumberOfVoiceCalls.setStatus('current')
brzaccVLDrapTTL = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDrapTTL.setStatus('current')
brzaccVLDrapNoOfActiveVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapNoOfActiveVoiceCalls.setStatus('current')
brzaccVLLowPriorityTrafficMinimumPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLLowPriorityTrafficMinimumPercent.setStatus('current')
brzaccVLSUEZMirDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUEZMirDownlink.setStatus('current')
brzaccVLMIRThresholdPercent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMIRThresholdPercent.setStatus('current')
brzaccVLProportionalIRParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 15))
brzaccVLProportionalIRFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLProportionalIRFactor.setStatus('current')
brzaccVLProportionalIRUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLProportionalIRUpdatePeriod.setStatus('current')
brzaccVLProportionalIRThresholdPercentage = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLProportionalIRThresholdPercentage.setStatus('current')
brzaccVLProportionalIRThresholdRate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 7, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLProportionalIRThresholdRate.setStatus('current')
brzaccVLUserFilterParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8))
brzaccVLUserFilterOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("disable", 1), ("ipOnly", 2), ("userDefinedAddrOnly", 3), ("pPPoEOnly", 4), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLUserFilterOption.setStatus('current')
brzaccVLIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2), )
if mibBuilder.loadTexts: brzaccVLIpFilterTable.setStatus('current')
brzaccVLIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLIpFilterIdx"))
if mibBuilder.loadTexts: brzaccVLIpFilterEntry.setStatus('current')
brzaccVLIpID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIpID.setStatus('current')
brzaccVLMaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaskID.setStatus('current')
brzaccVLIpFilterRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLIpFilterRange.setStatus('current')
brzaccVLIpFilterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLIpFilterIdx.setStatus('current')
brzaccVLDeleteOneUserFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("deletefirstEntry", 1), ("deletesecondEntry", 2), ("deletethirdEntry", 3), ("deletefourthEntry", 4), ("deletefifthEntry", 5), ("deletesixthEntry", 6), ("deleteseventhEntry", 7), ("deleteeighthEntry", 8), ("cancelOperation", 9), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteOneUserFilter.setStatus('current')
brzaccVLDeleteAllUserFilters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("deleteAll", 1), ("cancelOperation", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDeleteAllUserFilters.setStatus('current')
brzaccVLDHCPUnicastOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDHCPUnicastOverrideFilter.setStatus('current')
brzaccVLNewIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 6), )
if mibBuilder.loadTexts: brzaccVLNewIpFilterTable.setStatus('current')
brzaccVLNewIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 6, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewIpID"))
if mibBuilder.loadTexts: brzaccVLNewIpFilterEntry.setStatus('current')
brzaccVLNewIpID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewIpID.setStatus('current')
brzaccVLNewMaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewMaskID.setStatus('current')
brzaccVLNewIpFilterRange = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewIpFilterRange.setStatus('current')
brzaccVLNewIpFilterCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNewIpFilterCommand.setStatus('current')
brzaccVLDHCPPPPoEOverrideFilter = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDHCPPPPoEOverrideFilter.setStatus('current')
brzaccVLSecurityParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9))
brzaccVLAuthenticationAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAuthenticationAlgorithm.setStatus('current')
brzaccVLSUDefaultKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSUDefaultKeyID.setStatus('current')
brzaccVLDataEncryptionOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLDataEncryptionOption.setStatus('current')
brzaccVLAUDefaultMulticastKeyID = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUDefaultMulticastKeyID.setStatus('current')
brzaccVLSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wep", 1), ("aesOCB", 2), ("fips197", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSecurityMode.setStatus('current')
brzaccVLAuthenticationPromiscuousMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAuthenticationPromiscuousMode.setStatus('current')
brzaccVLKey1 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey1.setStatus('current')
brzaccVLKey2 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey2.setStatus('current')
brzaccVLKey3 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey3.setStatus('current')
brzaccVLKey4 = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLKey4.setStatus('current')
brzaccVLSecurityModeSupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 9, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSecurityModeSupport.setStatus('current')
brzaccVLPerformanceParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10))
brzaccVLRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLRTSThreshold.setStatus('current')
brzaccVLMinContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinContentionWindow.setStatus('current')
brzaccVLMaxContentionWindow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaxContentionWindow.setStatus('current')
brzaccVLMaximumModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMaximumModulationLevel.setStatus('current')
brzaccVLMulticastModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7), ("level8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMulticastModulationLevel.setStatus('current')
brzaccVLAvgSNRMemoryFactor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAvgSNRMemoryFactor.setStatus('current')
brzaccVLHardwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLHardwareRetries.setStatus('current')
brzaccVLAdaptiveModulationParams = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9))
brzaccVLAdaptiveModulationAlgorithmOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationAlgorithmOption.setStatus('current')
brzaccVLSoftwareRetrySupport = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLSoftwareRetrySupport.setStatus('current')
brzaccVLNumOfSoftwareRetries = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLNumOfSoftwareRetries.setStatus('current')
brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages.setStatus('current')
brzaccVLAdaptiveModulationDecisionThresholds = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationDecisionThresholds.setStatus('current')
brzaccVLAdaptiveModulationHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationHistorySize.setStatus('current')
brzaccVLAdaptiveModulationPacketThresholdToTestUpRate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationPacketThresholdToTestUpRate.setStatus('current')
brzaccVLAdaptiveModulationPacketNoOnUpperRate = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationPacketNoOnUpperRate.setStatus('current')
brzaccVLAdaptiveModulationAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("adaptiveModulation", 1), ("statisticsBasedRateControl", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationAlgorithm.setStatus('current')
brzaccVLAdaptiveModulationRetriesOnLowerModulations = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationRetriesOnLowerModulations.setStatus('current')
brzaccVLAdaptiveModulationRTSDurationMode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shortRTSDuration", 1), ("longRTSDuration", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAdaptiveModulationRTSDurationMode.setStatus('current')
brzaccVLBurstMode = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10))
brzaccVLBurstModeOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("blocked", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBurstModeOption.setStatus('current')
brzaccVLBurstInterval = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLBurstInterval.setStatus('current')
brzaccVLConcatenationParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11))
brzaccVLConcatenationOption = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationOption.setStatus('current')
brzaccVLConcatenationMaximumNumberOfFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationMaximumNumberOfFrames.setStatus('current')
brzaccVLConcatenationMaxFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLConcatenationMaxFrameSize.setStatus('current')
brzaccVLControlModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basicRate", 1), ("modulationLevel1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLControlModulationLevel.setStatus('current')
brzaccVLEthernetFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("size1600", 1), ("size2000", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLEthernetFrameSize.setStatus('current')
brzaccVLRunningEthernetFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRunningEthernetFrameSize.setStatus('current')
brzaccVLSiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11))
brzaccVLAverageReceiveSNR = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageReceiveSNR.setStatus('current')
brzaccVLTrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2))
brzaccVLResetTrafficCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetTrafficCounters.setStatus('current')
brzaccVLEthCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2))
brzaccVLWirelessLinkCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3))
brzaccVLWirelessLinkEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4))
brzaccVLPerModulationLevelCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5))
brzaccVLResetPerModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCounters", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLResetPerModulationLevelCounters.setStatus('current')
brzaccVLSUPerModulationLevelCountersTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2), )
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTable.setStatus('current')
brzaccVLSUPerModulationLevelCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLSUPerModulationLevelCountersTableIdx"))
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersEntry.setStatus('current')
brzaccVLSUPerModulationLevelCountersTableIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTableIdx.setStatus('current')
brzaccVLSUPerModulationLevelCountersApplicableModLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersApplicableModLevel.setStatus('current')
brzaccVLSUPerModulationLevelCountersTxSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxSuccess.setStatus('current')
brzaccVLSUPerModulationLevelCountersTxFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLSUPerModulationLevelCountersTxFailed.setStatus('current')
brzaccVLAverageModulationLevel = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageModulationLevel.setStatus('current')
brzaccVLTotalRxFramesViaEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxFramesViaEthernet.setStatus('current')
brzaccVLTxWirelessToEthernet = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTxWirelessToEthernet.setStatus('current')
brzaccVLTxFramesToWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1))
brzaccVLAUBeaconsToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAUBeaconsToWireless.setStatus('current')
brzaccVLDataAndOtherMngFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDataAndOtherMngFramesToWireless.setStatus('current')
brzaccVLTotalTxFramesToWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTxFramesToWireless.setStatus('current')
brzaccVLTotalTransmittedUnicasts = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedUnicasts.setStatus('current')
brzaccVLTotalTransmittedConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesDouble.setStatus('current')
brzaccVLTotalTransmittedConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesSingle.setStatus('current')
brzaccVLTotalTransmittedConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTransmittedConcatenatedFramesMore.setStatus('current')
brzaccVLTotalRxFramesFromWireless = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxFramesFromWireless.setStatus('current')
brzaccVLTotalRetransmittedFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRetransmittedFrames.setStatus('current')
brzaccVLFramesDropped = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesDropped.setStatus('current')
brzaccVLDataFramesSubmittedToBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5))
brzaccVLFramesSubmittedViaHighQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaHighQueue.setStatus('current')
brzaccVLFramesSubmittedViaMidQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaMidQueue.setStatus('current')
brzaccVLFramesSubmittedViaLowQueue = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesSubmittedViaLowQueue.setStatus('current')
brzaccVLTotalNoOfDataFramesSubmitted = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalNoOfDataFramesSubmitted.setStatus('current')
brzaccVLTotalRecievedDataFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRecievedDataFrames.setStatus('current')
brzaccVLRecievedBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRecievedBadFrames.setStatus('current')
brzaccVLNoOfDuplicateFramesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoOfDuplicateFramesDiscarded.setStatus('current')
brzaccVLNoOfInternallyDiscardedMirCir = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNoOfInternallyDiscardedMirCir.setStatus('current')
brzaccVLTotalRxConcatenatedFramesDouble = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesDouble.setStatus('current')
brzaccVLTotalRxConcatenatedFramesSingle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesSingle.setStatus('current')
brzaccVLTotalRxConcatenatedFramesMore = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxConcatenatedFramesMore.setStatus('current')
brzaccVLTXRetransmissionPercentage = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTXRetransmissionPercentage.setStatus('current')
brzaccVLRXCRCPercentage = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRXCRCPercentage.setStatus('current')
brzaccVLTxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1))
brzaccVLDroppedFrameEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDroppedFrameEvents.setStatus('current')
brzaccVLFramesDelayedDueToSwRetry = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLFramesDelayedDueToSwRetry.setStatus('current')
brzaccVLUnderrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUnderrunEvents.setStatus('current')
brzaccVLOthersTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLOthersTxEvents.setStatus('current')
brzaccVLTotalTxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalTxEvents.setStatus('current')
brzaccVLRxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2))
brzaccVLPhyErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLPhyErrors.setStatus('current')
brzaccVLCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCRCErrors.setStatus('current')
brzaccVLOverrunEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLOverrunEvents.setStatus('current')
brzaccVLRxDecryptEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLRxDecryptEvents.setStatus('current')
brzaccVLTotalRxEvents = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 2, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTotalRxEvents.setStatus('current')
brzaccVLMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5))
brzaccVLAUMacAddressDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1))
brzaccVLAUAdbResetAllModulationLevelCounters = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLAUAdbResetAllModulationLevelCounters.setStatus('current')
brzaccVLAUAdbTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2), )
if mibBuilder.loadTexts: brzaccVLAUAdbTable.setStatus('current')
brzaccVLAUAdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLAdbIndex"))
if mibBuilder.loadTexts: brzaccVLAUAdbEntry.setStatus('current')
brzaccVLAdbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbIndex.setStatus('current')
brzaccVLAdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMacAddress.setStatus('current')
brzaccVLAdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("authenticated", 2), ("notAuthenticated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbStatus.setStatus('current')
brzaccVLAdbSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSwVersion.setStatus('current')
brzaccVLAdbSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSNR.setStatus('current')
brzaccVLAdbMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMaxModulationLevel.setStatus('current')
brzaccVLAdbTxFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFramesTotal.setStatus('current')
brzaccVLAdbDroppedFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDroppedFramesTotal.setStatus('current')
brzaccVLAdbTxSuccessModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel1.setStatus('current')
brzaccVLAdbTxSuccessModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel2.setStatus('current')
brzaccVLAdbTxSuccessModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel3.setStatus('current')
brzaccVLAdbTxSuccessModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel4.setStatus('current')
brzaccVLAdbTxSuccessModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel5.setStatus('current')
brzaccVLAdbTxSuccessModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel6.setStatus('current')
brzaccVLAdbTxSuccessModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel7.setStatus('current')
brzaccVLAdbTxSuccessModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxSuccessModLevel8.setStatus('current')
brzaccVLAdbTxFailedModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel1.setStatus('current')
brzaccVLAdbTxFailedModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel2.setStatus('current')
brzaccVLAdbTxFailedModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel3.setStatus('current')
brzaccVLAdbTxFailedModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel4.setStatus('current')
brzaccVLAdbTxFailedModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel5.setStatus('current')
brzaccVLAdbTxFailedModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel6.setStatus('current')
brzaccVLAdbTxFailedModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel7.setStatus('current')
brzaccVLAdbTxFailedModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbTxFailedModLevel8.setStatus('current')
brzaccVLAdbCirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirTx.setStatus('current')
brzaccVLAdbMirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMirTx.setStatus('current')
brzaccVLAdbCirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirRx.setStatus('current')
brzaccVLAdbMirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbMirRx.setStatus('current')
brzaccVLAdbCirMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCirMaxDelay.setStatus('current')
brzaccVLAdbDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDistance.setStatus('current')
brzaccVLAdbHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("hwRevisionF", 6), ("hwRevisionG", 7), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbHwRevision.setStatus('current')
brzaccVLAdbCpldVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCpldVer.setStatus('current')
brzaccVLAdbCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbCountryCode.setStatus('current')
brzaccVLAdbBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbBootVer.setStatus('current')
brzaccVLAdbAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAtpcOption.setStatus('current')
brzaccVLAdbAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAdapModOption.setStatus('current')
brzaccVLAdbBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbBurstModeOption.setStatus('current')
brzaccVLAdbConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbConcatenationOption.setStatus('current')
brzaccVLAdbSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aes", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbSecurityMode.setStatus('current')
brzaccVLAdbAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAuthOption.setStatus('current')
brzaccVLAdbDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbDataEncyptOption.setStatus('current')
brzaccVLAdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbAge.setStatus('current')
brzaccVLAdbUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbUnitName.setStatus('current')
brzaccVLAdbRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbRSSI.setStatus('current')
brzaccVLAdbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 2, 1, 47), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbIpAddress.setStatus('current')
brzaccVLAUNewAdbTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3), )
if mibBuilder.loadTexts: brzaccVLAUNewAdbTable.setStatus('current')
brzaccVLAUNewAdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLNewAdbMacAddress"))
if mibBuilder.loadTexts: brzaccVLAUNewAdbEntry.setStatus('current')
brzaccVLNewAdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbMacAddress.setStatus('current')
brzaccVLNewAdbIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbIPaddress.setStatus('current')
brzaccVLNewAdbUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbUnitName.setStatus('current')
brzaccVLNewAdbUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 8, 9, 10, 11, 12, 13, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 255))).clone(namedValues=NamedValues(("su-6-1D", 3), ("su-6-BD", 4), ("su-24-BD", 5), ("rb-B14", 8), ("rb-B28", 9), ("su-BD", 10), ("su-54-BD", 11), ("su-3-1D", 12), ("su-3-4D", 13), ("su4900", 18), ("rb-B100", 20), ("su-I", 21), ("su-EZ", 23), ("su-V", 24), ("rb-B10", 26), ("su-8-BD", 27), ("su-1-BD", 28), ("su-3-L", 29), ("su-6-L", 30), ("su-12-L", 31), ("su", 33), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbUnitType.setStatus('current')
brzaccVLNewAdbSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbSwVersion.setStatus('current')
brzaccVLNewAdbHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("hwRevisionA", 1), ("hwRevisionB", 2), ("hwRevisionC", 3), ("hwRevisionD", 4), ("hwRevisionE", 5), ("hwRevisionF", 6), ("hwRevisionG", 7), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbHwRevision.setStatus('current')
brzaccVLNewAdbCpldVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbCpldVer.setStatus('current')
brzaccVLNewAdbBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbBootVer.setStatus('current')
brzaccVLNewAdbCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbCountryCode.setStatus('current')
brzaccVLNewAdbCirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbCirTx.setStatus('current')
brzaccVLNewAdbMirTx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbMirTx.setStatus('current')
brzaccVLNewAdbCirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbCirRx.setStatus('current')
brzaccVLNewAdbMirRx = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbMirRx.setStatus('current')
brzaccVLNewAdbCirMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbCirMaxDelay.setStatus('current')
brzaccVLNewAdbAtpcOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbAtpcOption.setStatus('current')
brzaccVLNewAdbAdapModOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbAdapModOption.setStatus('current')
brzaccVLNewAdbBurstModeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbBurstModeOption.setStatus('current')
brzaccVLNewAdbConcatenationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbConcatenationOption.setStatus('current')
brzaccVLNewAdbSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("wep", 1), ("aes", 2), ("fips197", 3), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbSecurityMode.setStatus('current')
brzaccVLNewAdbAuthOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbAuthOption.setStatus('current')
brzaccVLNewAdbDataEncyptOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbDataEncyptOption.setStatus('current')
brzaccVLAdbWi2IPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAdbWi2IPaddress.setStatus('current')
brzaccVLNewAdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("authenticated", 2), ("notAuthenticated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbStatus.setStatus('current')
brzaccVLNewAdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbAge.setStatus('current')
brzaccVLNewAdbDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("below-2-Km", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbDistance.setStatus('current')
brzaccVLNewAdbSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbSNR.setStatus('current')
brzaccVLNewAdbMaxModulationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("modLevel-1", 1), ("modLevel-2", 2), ("modLevel-3", 3), ("modLevel-4", 4), ("modLevel-5", 5), ("modLevel-6", 6), ("modLevel-7", 7), ("modLevel-8", 8), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbMaxModulationLevel.setStatus('current')
brzaccVLNewAdbTxFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFramesTotal.setStatus('current')
brzaccVLNewAdbDroppedFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbDroppedFramesTotal.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel1.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel2.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel3.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel4.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel5.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel6.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel7.setStatus('current')
brzaccVLNewAdbTxSuccessModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxSuccessModLevel8.setStatus('current')
brzaccVLNewAdbTxFailedModLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel1.setStatus('current')
brzaccVLNewAdbTxFailedModLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel2.setStatus('current')
brzaccVLNewAdbTxFailedModLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel3.setStatus('current')
brzaccVLNewAdbTxFailedModLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel4.setStatus('current')
brzaccVLNewAdbTxFailedModLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel5.setStatus('current')
brzaccVLNewAdbTxFailedModLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel6.setStatus('current')
brzaccVLNewAdbTxFailedModLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel7.setStatus('current')
brzaccVLNewAdbTxFailedModLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbTxFailedModLevel8.setStatus('current')
brzaccVLNewAdbMainSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbMainSwVersion.setStatus('current')
brzaccVLNewAdbShadowSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbShadowSwVersion.setStatus('current')
brzaccVLNewAdbReadOnlyCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbReadOnlyCommunity.setStatus('current')
brzaccVLNewAdbWriteCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbWriteCommunity.setStatus('current')
brzaccVLNewAdbAIFS = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbAIFS.setStatus('current')
brzaccVLNewAdbMinimumCW = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbMinimumCW.setStatus('current')
brzaccVLNewAdbMaximumCW = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbMaximumCW.setStatus('current')
brzaccVLNewAdbESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbESSID.setStatus('current')
brzaccVLNewAdbRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbRSSI.setStatus('current')
brzaccVLNewAdbDfsOption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 3, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewAdbDfsOption.setStatus('current')
brzaccVLAggregateMIRCIR = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 4))
brzaccVLAggregateMIRUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAggregateMIRUplink.setStatus('current')
brzaccVLAggregateMIRDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAggregateMIRDownlink.setStatus('current')
brzaccVLAggregateCIRUplink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAggregateCIRUplink.setStatus('current')
brzaccVLAggregateCIRDownlink = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 5, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAggregateCIRDownlink.setStatus('current')
brzaccVLUpLinkQualityIndicator = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6))
brzaccVLMeasureUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzaccVLMeasureUpLinkQualityIndicator.setStatus('current')
brzaccVLReadUpLinkQualityIndicator = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLReadUpLinkQualityIndicator.setStatus('current')
brzaccVLUpLinkQualityIndicatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullTest", 1), ("limitedTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLUpLinkQualityIndicatorStatus.setStatus('current')
brzaccVLMacPinpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7))
brzaccVLMacPinpointTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1), )
if mibBuilder.loadTexts: brzaccVLMacPinpointTable.setStatus('current')
brzaccVLMacPinpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "mptEthernetStationMACAddress"))
if mibBuilder.loadTexts: brzaccVLMacPinpointEntry.setStatus('current')
mptEthernetStationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptEthernetStationMACAddress.setStatus('current')
mptUnitMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mptUnitMACAddress.setStatus('current')
brzaccVLDrapGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8), )
if mibBuilder.loadTexts: brzaccVLDrapGatewaysTable.setStatus('current')
brzaccVLHiddenESSIDTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 9), )
if mibBuilder.loadTexts: brzaccVLHiddenESSIDTable.setStatus('current')
brzaccVLHiddenESSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 9, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLHiddenESSIDMacAddress"))
if mibBuilder.loadTexts: brzaccVLHiddenESSIDEntry.setStatus('current')
brzaccVLHiddenESSIDMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLHiddenESSIDMacAddress.setStatus('current')
brzaccVLHiddenESSIDAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLHiddenESSIDAge.setStatus('current')
brzaccVLDrapGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1), ).setIndexNames((0, "ALVARION-DOT11-WLAN-MIB", "brzaccVLDrapGatewayIndex"))
if mibBuilder.loadTexts: brzaccVLDrapGatewayEntry.setStatus('current')
brzaccVLDrapGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayIndex.setStatus('current')
brzaccVLDrapGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayIP.setStatus('current')
brzaccVLDrapGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 11, 255))).clone(namedValues=NamedValues(("vgDataVoice", 4), ("vgData1Voice1", 5), ("vgData4Voice2", 6), ("vgDataVoice2", 7), ("ngData4Wireless", 11), ("vgUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayType.setStatus('current')
brzaccVLDrapGatewayNoOfActiveVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDrapGatewayNoOfActiveVoiceCalls.setStatus('current')
brzaccVLAverageReceiveRSSI = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageReceiveRSSI.setStatus('current')
brzaccVLCurrentNoiseFloor = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLCurrentNoiseFloor.setStatus('current')
brzaccVLAverageSignalInterferenceRatio = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLAverageSignalInterferenceRatio.setStatus('current')
brzaccVLTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14))
brzaccVLTrapSUMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSUMacAddr.setStatus('current')
brzaccVLTrapText = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapText.setStatus('current')
brzaccVLTrapToggle = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapToggle.setStatus('current')
brzaccVLTrapParameterChanged = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("cirOrMir", 1), ("ipFilter", 2), ("vlan", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapParameterChanged.setStatus('current')
brzaccVLTrapAccessRights = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notLoggedIn", 1), ("readOnly", 2), ("installer", 3), ("administrator", 4), ("factory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapAccessRights.setStatus('current')
brzaccVLTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("telnetLogin", 3), ("telnetLogout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapLog.setStatus('current')
brzaccVLTrapTelnetUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapTelnetUserIpAddress.setStatus('current')
brzaccVLTrapRTx = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapRTx.setStatus('current')
brzaccVLTrapFtpOrTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapFtpOrTftpStatus.setStatus('current')
brzaccVLDFSMoveFreq = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSMoveFreq.setStatus('current')
brzaccVLDFSMoveFreqNew = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLDFSMoveFreqNew.setStatus('current')
brzaccVLEthBroadcastThresholdExceeded = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLEthBroadcastThresholdExceeded.setStatus('current')
brzaccVLTrapSubscriberType = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 14, 24, 28, 54, 8, 100))).clone(namedValues=NamedValues(("unknownSubscriberType", 0), ("su-3", 3), ("su-6", 6), ("rb-14", 14), ("su-24", 24), ("rb-28", 28), ("su-54", 54), ("su-8", 8), ("rb-100", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSubscriberType.setStatus('current')
brzaccVLTrapMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapMACAddress.setStatus('current')
brzaccVLNewUnitTypeTrap = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bu", 1), ("rb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLNewUnitTypeTrap.setStatus('current')
brzaccVLTrapSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSWVersion.setStatus('current')
brzaccVLTrapSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapSequenceNumber.setStatus('current')
brzaccVLTrapUnitMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapUnitMacAddr.setStatus('current')
brzaccVLTrapParameterGroupCode = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapParameterGroupCode.setStatus('current')
brzaccVLTrapNewIP = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 1, 14, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzaccVLTrapNewIP.setStatus('current')
brzaccVLSUassociatedAUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 2)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLSUassociatedAUTRAP.setStatus('current')
brzaccVLAUdisassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 3)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLAUdisassociatedTRAP.setStatus('current')
brzaccVLAUagingTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 4)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLAUagingTRAP.setStatus('current')
brzaccVLSUassociatedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 6)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLAssociatedAU"))
if mibBuilder.loadTexts: brzaccVLSUassociatedTRAP.setStatus('current')
brzaccVLAUwirelessQualityTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 20)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapToggle"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapUnitMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapRTx"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLAUwirelessQualityTRAP.setStatus('current')
brzaccVLPowerUpFromReset = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 101)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLPowerUpFromReset.setStatus('current')
brzaccVLTelnetStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 102)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapLog"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapTelnetUserIpAddress"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapAccessRights"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapUnitMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLTelnetStatusTRAP.setStatus('current')
brzaccVLParameterChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 103)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapParameterChanged"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLParameterChangedTRAP.setStatus('current')
brzaccVLLoadingStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 104)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapFtpOrTftpStatus"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLLoadingStatusTRAP.setStatus('current')
brzaccVLPromiscuousModeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 105)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapToggle"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLUnitMacAddress"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLPromiscuousModeTRAP.setStatus('current')
brzaccVLDFSRadarDetectedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 106)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLDFSRadarDetectedTRAP.setStatus('current')
brzaccVLDFSFrequencyTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 107)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSMoveFreq"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLDFSMoveFreqNew"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLDFSFrequencyTRAP.setStatus('current')
brzaccVLDFSNoFreeChannelsExistsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 108)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLDFSNoFreeChannelsExistsTRAP.setStatus('current')
brzaccVLEthBroadcastMulticastLimiterTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 109)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLEthBroadcastThresholdExceeded"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapUnitMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLEthBroadcastMulticastLimiterTRAP.setStatus('current')
brzaccVLAUSUnsupportedSubscriberTypeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 110)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSubscriberType"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLAUSUnsupportedSubscriberTypeTRAP.setStatus('current')
brzaccVLUnitTypeChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 111)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapMACAddress"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLNewUnitTypeTrap"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLUnitTypeChangedTRAP.setStatus('current')
brzaccVLWLPrioritizationNotSupportedBySUTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 112)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSUMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSWVersion"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLWLPrioritizationNotSupportedBySUTRAP.setStatus('current')
brzaccVLParameterChangeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 113)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapUnitMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapParameterGroupCode"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLParameterChangeTRAP.setStatus('current')
brzaccVLRunTimeIPChangeTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 114)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapUnitMacAddr"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapNewIP"), ("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLRunTimeIPChangeTRAP.setStatus('current')
brzaccVLDisassociateAllStationsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 12394, 4, 1, 3, 115)).setObjects(("ALVARION-DOT11-WLAN-MIB", "brzaccVLTrapSequenceNumber"))
if mibBuilder.loadTexts: brzaccVLDisassociateAllStationsTRAP.setStatus('current')
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLNewAdbDistance=brzaccVLNewAdbDistance, brzaccVLAutoSubBandFrequencySubsetFrequencyIdx=brzaccVLAutoSubBandFrequencySubsetFrequencyIdx, brzaccVLNewNwMngTrapCommunity=brzaccVLNewNwMngTrapCommunity, brzaccVLDroppedFrameEvents=brzaccVLDroppedFrameEvents, brzaccVLDFSRadarActivityAssessmentPeriod=brzaccVLDFSRadarActivityAssessmentPeriod, brzaccVLFTPSwFileName=brzaccVLFTPSwFileName, brzaccVLAdaptiveModulationHistorySize=brzaccVLAdaptiveModulationHistorySize, brzaccVLNewVlanForwardingCommand=brzaccVLNewVlanForwardingCommand, brzaccVLCurrentNoiseFloor=brzaccVLCurrentNoiseFloor, brzaccVLTrapParameterGroupCode=brzaccVLTrapParameterGroupCode, brzaccVLTxFramesToWireless=brzaccVLTxFramesToWireless, brzaccVLCountryCodeTable=brzaccVLCountryCodeTable, brzaccVLLostBeaconsWatchdogThreshold=brzaccVLLostBeaconsWatchdogThreshold, brzaccVLNewMacAddressDenyListId=brzaccVLNewMacAddressDenyListId, brzaccVLMaxModulationLevel=brzaccVLMaxModulationLevel, brzaccVLMacAddressDenyListTableIdx=brzaccVLMacAddressDenyListTableIdx, brzaccVLCCMinModulationLevel=brzaccVLCCMinModulationLevel, brzaccVLUpLinkQualityIndicatorStatus=brzaccVLUpLinkQualityIndicatorStatus, brzaccVLDisassociateAllStationsTRAP=brzaccVLDisassociateAllStationsTRAP, brzaccVLTcpPortRangeDeleteAll=brzaccVLTcpPortRangeDeleteAll, brzaccVLDFSRadarDetectionChannelsEntry=brzaccVLDFSRadarDetectionChannelsEntry, brzaccVLNewAdbCpldVer=brzaccVLNewAdbCpldVer, brzaccVLHiddenESSIDAge=brzaccVLHiddenESSIDAge, brzaccVLVLANQinQ=brzaccVLVLANQinQ, brzaccVLNumOfSoftwareRetries=brzaccVLNumOfSoftwareRetries, brzaccVLConcatenationOption=brzaccVLConcatenationOption, brzaccVLMaxNumOfAssociations=brzaccVLMaxNumOfAssociations, brzaccVLAUwirelessQualityTRAP=brzaccVLAUwirelessQualityTRAP, brzaccVLNewAdbWriteCommunity=brzaccVLNewAdbWriteCommunity, brzaccVLTotalRxConcatenatedFramesSingle=brzaccVLTotalRxConcatenatedFramesSingle, brzaccVLNewAdbTxFramesTotal=brzaccVLNewAdbTxFramesTotal, brzaccVLNewAdbShadowSwVersion=brzaccVLNewAdbShadowSwVersion, brzaccVLHiddenESSIDEntry=brzaccVLHiddenESSIDEntry, brzaccVLMirOnlyOption=brzaccVLMirOnlyOption, brzaccVLTcpPortRangeEntry=brzaccVLTcpPortRangeEntry, brzaccVLAccessToDHCP=brzaccVLAccessToDHCP, brzaccVLAggregateMIRDownlink=brzaccVLAggregateMIRDownlink, brzaccVLChangeUnitType=brzaccVLChangeUnitType, brzaccVLAdbTxFailedModLevel4=brzaccVLAdbTxFailedModLevel4, brzaccVLNeighborAuMark=brzaccVLNeighborAuMark, brzaccVLMaxTxPower=brzaccVLMaxTxPower, brzaccVLWirelessLinkPrioritizationOption=brzaccVLWirelessLinkPrioritizationOption, brzaccVLAdbTxFailedModLevel3=brzaccVLAdbTxFailedModLevel3, brzAccessVLSU_1_BD=brzAccessVLSU_1_BD, brzaccVLWirelessTrapThreshold=brzaccVLWirelessTrapThreshold, brzaccVLNeighborAuLearnCountryCodeBySU=brzaccVLNeighborAuLearnCountryCodeBySU, brzaccVLNewTransmitPowerTable=brzaccVLNewTransmitPowerTable, brzaccVLTxControl=brzaccVLTxControl, brzaccVLAUDefaultMulticastKeyID=brzaccVLAUDefaultMulticastKeyID, brzaccVLAutoSubBandFrequencySubsetDFSStatus=brzaccVLAutoSubBandFrequencySubsetDFSStatus, brzAccessVLOID=brzAccessVLOID, brzaccVLMIRThresholdPercent=brzaccVLMIRThresholdPercent, alvarionOID=alvarionOID, brzaccVLAdbBurstModeOption=brzaccVLAdbBurstModeOption, brzaccVLTimeSinceLastReset=brzaccVLTimeSinceLastReset, brzaccVLTrafficPrioritization=brzaccVLTrafficPrioritization, brzaccVLVLANPriorityThreshold=brzaccVLVLANPriorityThreshold, brzAccessVLSU_V=brzAccessVLSU_V, brzaccVLInterferenceMitigationOutputFrequency=brzaccVLInterferenceMitigationOutputFrequency, brzaccVLNeighborAuMacAdd=brzaccVLNeighborAuMacAdd, brzaccVLAdbBootVer=brzaccVLAdbBootVer, brzaccVLVlanExtendedAccessRuleMulticastAllowed=brzaccVLVlanExtendedAccessRuleMulticastAllowed, brzaccVLAIFS=brzaccVLAIFS, brzaccVLTotalRxEvents=brzaccVLTotalRxEvents, brzaccVLInterferenceMitigationParameters=brzaccVLInterferenceMitigationParameters, brzaccVLNewCurrentTxPower=brzaccVLNewCurrentTxPower, brzaccVLInterferenceMitigationStatus=brzaccVLInterferenceMitigationStatus, brzaccVLAdbHwRevision=brzaccVLAdbHwRevision, brzaccVLCurrentFrequencySubsetFrequencyNew=brzaccVLCurrentFrequencySubsetFrequencyNew, brzaccVLCCRegulationMaxEIRP=brzaccVLCCRegulationMaxEIRP, brzaccVLAdbAge=brzaccVLAdbAge, brzaccVLTotalRetransmittedFrames=brzaccVLTotalRetransmittedFrames, brzaccVLKey3=brzaccVLKey3, brzaccVLGracefulDegradationLimit=brzaccVLGracefulDegradationLimit, brzaccVLDFSParameters=brzaccVLDFSParameters, brzaccVLCCParamsTable=brzaccVLCCParamsTable, brzaccVLUdpPortRangeTable=brzaccVLUdpPortRangeTable, brzaccVLNewAdbMinimumCW=brzaccVLNewAdbMinimumCW, brzAccVLPortsControl=brzAccVLPortsControl, brzaccVLAdbDataEncyptOption=brzaccVLAdbDataEncyptOption, brzaccVLVlanForwardingEntry=brzaccVLVlanForwardingEntry, brzaccVLNwMngFilter=brzaccVLNwMngFilter, brzaccVLInterferenceMitigationDistance=brzaccVLInterferenceMitigationDistance, brzaccVLNewAdbUnitName=brzaccVLNewAdbUnitName, brzaccVLBurstModeSupport=brzaccVLBurstModeSupport, brzaccVLCurrentNumOfAssociations=brzaccVLCurrentNumOfAssociations, brzAccessVLSU_BD=brzAccessVLSU_BD, brzaccVLNwMngParameters=brzaccVLNwMngParameters, brzaccVLNoiseFloorAvailableCalibrationOptions=brzaccVLNoiseFloorAvailableCalibrationOptions, brzaccVLThresholdLEDtarget=brzaccVLThresholdLEDtarget, brzaccVLTxWirelessToEthernet=brzaccVLTxWirelessToEthernet, brzaccVLCirUplink=brzaccVLCirUplink, brzaccVLMngIpRangeIdx=brzaccVLMngIpRangeIdx, brzaccVLRunTimeSubNetMask=brzaccVLRunTimeSubNetMask, brzaccVLEthBroadcastMulticastLimiterThreshold=brzaccVLEthBroadcastMulticastLimiterThreshold, brzaccVLVlanIdForwarding=brzaccVLVlanIdForwarding, brzAccessVLSU_3_4D=brzAccessVLSU_3_4D, brzaccVLSpectrumAnalysisParameters=brzaccVLSpectrumAnalysisParameters, brzaccVLNewMacAddressDenyListCommand=brzaccVLNewMacAddressDenyListCommand, brzaccVLFramesDropped=brzaccVLFramesDropped, brzaccVLTrapUnitMacAddr=brzaccVLTrapUnitMacAddr, brzaccVLTotalTransmittedUnicasts=brzaccVLTotalTransmittedUnicasts, brzAccessVLSU=brzAccessVLSU, brzaccVLAtpcOptionEZ=brzaccVLAtpcOptionEZ, brzaccVLOthersTxEvents=brzaccVLOthersTxEvents, brzaccVLConcatenationMaximumNumberOfFrames=brzaccVLConcatenationMaximumNumberOfFrames, brzaccVLErrHandlingErrorCode=brzaccVLErrHandlingErrorCode, brzaccVLCountryDependentParameters=brzaccVLCountryDependentParameters, brzaccVLTrapIntParam1=brzaccVLTrapIntParam1, brzaccVLAdbAdapModOption=brzaccVLAdbAdapModOption, brzAccess4900_SU_BD=brzAccess4900_SU_BD, brzaccVLSpectrumAnalysisInformationTable=brzaccVLSpectrumAnalysisInformationTable, brzaccVLTrapSUMacAddr=brzaccVLTrapSUMacAddr, brzaccVLAteTestResults=brzaccVLAteTestResults, brzaccVLMngIpRangeEntry=brzaccVLMngIpRangeEntry, brzaccVLHardwareRetries=brzaccVLHardwareRetries, brzaccVLDFSRadarDetectionChannelsTable=brzaccVLDFSRadarDetectionChannelsTable, brzaccVLSUPerModulationLevelCountersTxSuccess=brzaccVLSUPerModulationLevelCountersTxSuccess, brzaccVLUnitType=brzaccVLUnitType, brzaccVLNeighborAuTable=brzaccVLNeighborAuTable, brzaccVLSpectrumAnalysisInformationEntry=brzaccVLSpectrumAnalysisInformationEntry, brzaccVLNewMaximumTransmitPowerTable=brzaccVLNewMaximumTransmitPowerTable, brzaccVLOFDMWeakSignal=brzaccVLOFDMWeakSignal, brzaccVLSUPerModulationLevelCountersApplicableModLevel=brzaccVLSUPerModulationLevelCountersApplicableModLevel, brzaccVLIPDSCPThreshold=brzaccVLIPDSCPThreshold, brzaccVLNewAdbDfsOption=brzaccVLNewAdbDfsOption, brzaccVLNewAdbTxSuccessModLevel1=brzaccVLNewAdbTxSuccessModLevel1, brzaccVLUnicastRelaying=brzaccVLUnicastRelaying, alvarion=alvarion, brzaccVLNewDefinedMaximumTxPowerRange=brzaccVLNewDefinedMaximumTxPowerRange, brzaccVLShadowVersionNumber=brzaccVLShadowVersionNumber, brzaccVLFTPSwSourceDir=brzaccVLFTPSwSourceDir, brzaccVLProportionalIRParameters=brzaccVLProportionalIRParameters, brzaccVLFeatureUpgrade=brzaccVLFeatureUpgrade, brzaccVLTrapSubscriberType=brzaccVLTrapSubscriberType, brzaccVLMngIpRangeStart=brzaccVLMngIpRangeStart, brzaccVLCountryDependentParameterTableIdx=brzaccVLCountryDependentParameterTableIdx, brzaccVLNewMaxTxPower=brzaccVLNewMaxTxPower, brzaccVLRxDecryptEvents=brzaccVLRxDecryptEvents, brzaccVLApplicableModulationLevel=brzaccVLApplicableModulationLevel, brzaccVLTrapText=brzaccVLTrapText, brzaccVLNoiseFloorLastFieldCalibrationResult=brzaccVLNoiseFloorLastFieldCalibrationResult, brzaccVLNumOfAssociationsSinceLastReset=brzaccVLNumOfAssociationsSinceLastReset, brzaccVLCountryDependentParameterEntry=brzaccVLCountryDependentParameterEntry, brzaccVLMacAddressDenyListRemove=brzaccVLMacAddressDenyListRemove, brzaccVLBurstModeOption=brzaccVLBurstModeOption, brzaccVLUdpPortPriRTPRTCP=brzaccVLUdpPortPriRTPRTCP, brzaccVLAdbTxSuccessModLevel3=brzaccVLAdbTxSuccessModLevel3, brzaccVLCirDownlink=brzaccVLCirDownlink, brzaccVLSpectrumAnalysisInformationSignalCount=brzaccVLSpectrumAnalysisInformationSignalCount, brzaccVLNewAdbTxSuccessModLevel7=brzaccVLNewAdbTxSuccessModLevel7, brzaccVLNewAdbMainSwVersion=brzaccVLNewAdbMainSwVersion, brzaccVLExecuteFTPConfigurationFileLoading=brzaccVLExecuteFTPConfigurationFileLoading, brzaccVLBridgeAgingTime=brzaccVLBridgeAgingTime, brzaccVLTcpPortRangeConfig=brzaccVLTcpPortRangeConfig, brzAccessVLSU_24_BD=brzAccessVLSU_24_BD, brzaccVLMacPinpointEntry=brzaccVLMacPinpointEntry, brzaccVLSubBandLowerFrequency=brzaccVLSubBandLowerFrequency, brzaccVLCCNumber=brzaccVLCCNumber, brzaccVLUnitIpAddress=brzaccVLUnitIpAddress, brzaccVLVlanID=brzaccVLVlanID, brzaccVLNeighborAuHwRevision=brzaccVLNeighborAuHwRevision, brzaccVLErrHandlingNMSId=brzaccVLErrHandlingNMSId, brzaccVLSpectrumAnalysisInformationOFDMMaxSNR=brzaccVLSpectrumAnalysisInformationOFDMMaxSNR, brzaccVLAUNewAdbEntry=brzaccVLAUNewAdbEntry, brzaccVLAUSUnsupportedSubscriberTypeTRAP=brzaccVLAUSUnsupportedSubscriberTypeTRAP, brzAccessVLSU_6_BD=brzAccessVLSU_6_BD, brzaccVLHWRetriesLowPriority=brzaccVLHWRetriesLowPriority, brzaccVLAUdisassociatedTRAP=brzaccVLAUdisassociatedTRAP, brzaccVLSpectrumAnalysisScanCycles=brzaccVLSpectrumAnalysisScanCycles, brzaccVLCCAESEncryptionSupport=brzaccVLCCAESEncryptionSupport, brzaccVLVlanExtendedAccessRuleOperands=brzaccVLVlanExtendedAccessRuleOperands, brzaccVLNewAdbTxSuccessModLevel2=brzaccVLNewAdbTxSuccessModLevel2, brzaccVLDeleteOneTrapAddr=brzaccVLDeleteOneTrapAddr, brzaccVLNewMacAddressDenyListEntry=brzaccVLNewMacAddressDenyListEntry, brzaccVLMeasureUpLinkQualityIndicator=brzaccVLMeasureUpLinkQualityIndicator, brzaccVLNewMngIpRangeMask=brzaccVLNewMngIpRangeMask, brzaccVLVlanExtendedAccessRulesTable=brzaccVLVlanExtendedAccessRulesTable, brzaccVLESSIDParameters=brzaccVLESSIDParameters, brzaccVLTrafficPriIpRangeIpAddress=brzaccVLTrafficPriIpRangeIpAddress, brzaccVLTransmitPower=brzaccVLTransmitPower, brzaccVLInterferenceMitigationActivation=brzaccVLInterferenceMitigationActivation, brzaccVLUnitHwVersion=brzaccVLUnitHwVersion, brzaccVLMacAddressDenyListAction=brzaccVLMacAddressDenyListAction, brzaccVLUploadEventLogFile=brzaccVLUploadEventLogFile, brzaccVLCurrentTxPower=brzaccVLCurrentTxPower, brzaccVLDrapMaxNumberOfVoiceCalls=brzaccVLDrapMaxNumberOfVoiceCalls, brzaccVLNewAdbTxFailedModLevel8=brzaccVLNewAdbTxFailedModLevel8, brzaccVLDrapNoOfActiveVoiceCalls=brzaccVLDrapNoOfActiveVoiceCalls, brzaccVLCCParamsFrequencies=brzaccVLCCParamsFrequencies, brzaccVLAdaptiveModulationRetriesOnLowerModulations=brzaccVLAdaptiveModulationRetriesOnLowerModulations, brzaccVLAutoSubBandFrequencySubsetEntry=brzaccVLAutoSubBandFrequencySubsetEntry, brzaccVLAverageReceiveSNR=brzaccVLAverageReceiveSNR, brzaccVLAdaptiveModulationAlgorithm=brzaccVLAdaptiveModulationAlgorithm, brzaccVLDrapGatewayNoOfActiveVoiceCalls=brzaccVLDrapGatewayNoOfActiveVoiceCalls, brzaccVLSpectrumAnalysisChannelScanPeriod=brzaccVLSpectrumAnalysisChannelScanPeriod, brzAccessVL_AU=brzAccessVL_AU, brzaccVLRTSThreshold=brzaccVLRTSThreshold, brzaccVLAuthenticationAlgorithm=brzaccVLAuthenticationAlgorithm, brzaccVLTrapSWVersion=brzaccVLTrapSWVersion, brzaccVLNeighborAuEntry=brzaccVLNeighborAuEntry, brzaccVLMaxBurstDuration=brzaccVLMaxBurstDuration, brzaccVLUdpPortRangeDelete=brzaccVLUdpPortRangeDelete, brzaccVLTotalTransmittedConcatenatedFramesSingle=brzaccVLTotalTransmittedConcatenatedFramesSingle, brzaccVLTrapToggle=brzaccVLTrapToggle, brzaccVLSpectrumAnalysisStatus=brzaccVLSpectrumAnalysisStatus, brzaccVLNewAdbESSID=brzaccVLNewAdbESSID, brzaccVLMaxNumOfAssociationsLimit=brzaccVLMaxNumOfAssociationsLimit, brzNetB_RB_B10=brzNetB_RB_B10, brzaccVLNeighborAuCountryCode=brzaccVLNeighborAuCountryCode, brzaccVLErrHandlingRequestId=brzaccVLErrHandlingRequestId, MacAddress=MacAddress, brzaccVLEthCounters=brzaccVLEthCounters, brzaccVLDHCPBroadcastOverrideFilter=brzaccVLDHCPBroadcastOverrideFilter, brzaccVLAdbTxSuccessModLevel2=brzaccVLAdbTxSuccessModLevel2, brzaccVLAdbStatus=brzaccVLAdbStatus, brzaccVLSUPerModulationLevelCountersEntry=brzaccVLSUPerModulationLevelCountersEntry, brzaccVLDisassociate=brzaccVLDisassociate, brzaccVLDFSOption=brzaccVLDFSOption, brzaccVLNewAdbTxSuccessModLevel6=brzaccVLNewAdbTxSuccessModLevel6, brzaccVLNeighborAuSwVer=brzaccVLNeighborAuSwVer, brzaccVLFrequencyDefinition=brzaccVLFrequencyDefinition, brzaccVLEthBroadcastFiltering=brzaccVLEthBroadcastFiltering, brzaccVLSUPerModulationLevelCountersTable=brzaccVLSUPerModulationLevelCountersTable, brzAccessVL_SU=brzAccessVL_SU, brzaccVLCurrentFrequencySubsetTableIdx=brzaccVLCurrentFrequencySubsetTableIdx, brzaccVLNoiseFloorRunCalibration=brzaccVLNoiseFloorRunCalibration, brzaccVLDFSChannelAvoidancePeriod=brzaccVLDFSChannelAvoidancePeriod, brzaccVLMinContentionWindow=brzaccVLMinContentionWindow, brzaccVLMinimumHwRevision=brzaccVLMinimumHwRevision, brzaccVLVlanDataPriority=brzaccVLVlanDataPriority, brzaccVLVLANSupport=brzaccVLVLANSupport, brzaccVLCountryCodeReApply=brzaccVLCountryCodeReApply, brzaccVLNewAdbTxFailedModLevel3=brzaccVLNewAdbTxFailedModLevel3, brzaccVLRunTimeIPChangeTRAP=brzaccVLRunTimeIPChangeTRAP, brzaccVLNumOfRejectionsSinceLastReset=brzaccVLNumOfRejectionsSinceLastReset, brzaccVLTotalTxFramesToWireless=brzaccVLTotalTxFramesToWireless, brzaccVLNewAdbAIFS=brzaccVLNewAdbAIFS, brzaccVLMaximumTransmitPowerEntry=brzaccVLMaximumTransmitPowerEntry, brzaccVLUdpPortRangeStart=brzaccVLUdpPortRangeStart, brzaccVLFTPClientMask=brzaccVLFTPClientMask, brzaccVLInterferenceMitigationOutputPerformance=brzaccVLInterferenceMitigationOutputPerformance, brzaccVLUnitPasswords=brzaccVLUnitPasswords, brzaccVLPerModulationLevelCounters=brzaccVLPerModulationLevelCounters, brzaccVLSpectrumAnalysisInformationSignalSNR=brzaccVLSpectrumAnalysisInformationSignalSNR, brzaccVLAdbTxSuccessModLevel5=brzaccVLAdbTxSuccessModLevel5, brzaccVLParameterChangedTRAP=brzaccVLParameterChangedTRAP, brzaccVLEventLogDestinationDir=brzaccVLEventLogDestinationDir, brzaccVLNewNMngSystem=brzaccVLNewNMngSystem, brzaccVLFTPServerPassword=brzaccVLFTPServerPassword, brzaccVLNeighborAuRSSI=brzaccVLNeighborAuRSSI, brzaccVLVlanExtendedAccessRuleOpType=brzaccVLVlanExtendedAccessRuleOpType, brzaccVLDHCPPPPoEOverrideFilter=brzaccVLDHCPPPPoEOverrideFilter, brzaccVLNewAdbMacAddress=brzaccVLNewAdbMacAddress)
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLTraps=brzaccVLTraps, brzaccVLToSPrecedenceThreshold=brzaccVLToSPrecedenceThreshold, brzaccVLSpectrumAnalysisInformationAvgNoiseFloor=brzaccVLSpectrumAnalysisInformationAvgNoiseFloor, brzaccVLUdpPortRangeNum=brzaccVLUdpPortRangeNum, brzAccessVLAU=brzAccessVLAU, brzaccVLFramesSubmittedViaLowQueue=brzaccVLFramesSubmittedViaLowQueue, brzaccVLConcatenationMaxFrameSize=brzaccVLConcatenationMaxFrameSize, brzaccVLDrapGatewayIP=brzaccVLDrapGatewayIP, brzaccVLNewAdbSNR=brzaccVLNewAdbSNR, brzaccVLAUDefinedFrequency=brzaccVLAUDefinedFrequency, brzaccVLDrap=brzaccVLDrap, brzaccVLNewMngIpRangesTable=brzaccVLNewMngIpRangesTable, brzaccVLDFSChannelReuseOption=brzaccVLDFSChannelReuseOption, brzaccVLTrapMACAddress=brzaccVLTrapMACAddress, brzaccVLFTPServerUserName=brzaccVLFTPServerUserName, brzaccVLNewMngIpRangeStart=brzaccVLNewMngIpRangeStart, brzaccVLBestAuNoOfScanningAttempts=brzaccVLBestAuNoOfScanningAttempts, brzaccVLAdbMacAddress=brzaccVLAdbMacAddress, brzaccVLESSID=brzaccVLESSID, brzaccVLCCDfsSupport=brzaccVLCCDfsSupport, brzaccVLNewVlanIdRelaying=brzaccVLNewVlanIdRelaying, brzaccVLTrapIntParam2=brzaccVLTrapIntParam2, brzaccVLAutoSubBandFrequencySubsetActive=brzaccVLAutoSubBandFrequencySubsetActive, brzaccVLInterferenceMitigationModel=brzaccVLInterferenceMitigationModel, brzaccVLControlModulationLevel=brzaccVLControlModulationLevel, brzaccVLTotalRecievedDataFrames=brzaccVLTotalRecievedDataFrames, brzaccVLTrafficStatistics=brzaccVLTrafficStatistics, brzaccVLRunTimeIPaddr=brzaccVLRunTimeIPaddr, brzaccVLNewAdbAdapModOption=brzaccVLNewAdbAdapModOption, brzaccVLNewTxPower=brzaccVLNewTxPower, brzaccVLCCMinimumHwRevision=brzaccVLCCMinimumHwRevision, brzaccVLCCMaxModulationLevel=brzaccVLCCMaxModulationLevel, brzaccVLAdbAuthOption=brzaccVLAdbAuthOption, brzaccVLReadUpLinkQualityIndicator=brzaccVLReadUpLinkQualityIndicator, brzaccVLCountryCodeEntry=brzaccVLCountryCodeEntry, brzaccVLNewAdbTxSuccessModLevel4=brzaccVLNewAdbTxSuccessModLevel4, brzaccVLNewAdbSwVersion=brzaccVLNewAdbSwVersion, brzaccVLAdbSwVersion=brzaccVLAdbSwVersion, brzaccVLMngIpRangeFlag=brzaccVLMngIpRangeFlag, brzaccVLNeighborAuAssocLoadStatus=brzaccVLNeighborAuAssocLoadStatus, brzaccVLVlanIdRelaying=brzaccVLVlanIdRelaying, brzaccVLTotalTxEvents=brzaccVLTotalTxEvents, brzaccVLLEDsettings=brzaccVLLEDsettings, brzaccVLDeleteAllUserFilters=brzaccVLDeleteAllUserFilters, brzaccVLBroadcastRelaying=brzaccVLBroadcastRelaying, brzaccVLMacAddressDenyListAdd=brzaccVLMacAddressDenyListAdd, brzAccessVLSU_EZ=brzAccessVLSU_EZ, brzaccVLExitTelnet=brzaccVLExitTelnet, brzaccVLInterferenceMitigationOutputInstallationModel=brzaccVLInterferenceMitigationOutputInstallationModel, brzaccVLNewVlanForwardingEntry=brzaccVLNewVlanForwardingEntry, brzaccVLNoiseFloorUseCalibration=brzaccVLNoiseFloorUseCalibration, brzaccVLTcpPortRangeStart=brzaccVLTcpPortRangeStart, brzaccVLTrapSequenceNumber=brzaccVLTrapSequenceNumber, brzaccVLTotalNoOfDataFramesSubmitted=brzaccVLTotalNoOfDataFramesSubmitted, brzaccVLAdbTxFailedModLevel1=brzaccVLAdbTxFailedModLevel1, brzaccVLAUAdbEntry=brzaccVLAUAdbEntry, brzaccVLMaximumModulationLevel=brzaccVLMaximumModulationLevel, brzaccVLMulticastModulationLevel=brzaccVLMulticastModulationLevel, brzaccVLMacPinpointTable=brzaccVLMacPinpointTable, brzaccVLNewIpFilterEntry=brzaccVLNewIpFilterEntry, mngIpFilterTable=mngIpFilterTable, brzaccVLTrafficPriIpRangeOption=brzaccVLTrafficPriIpRangeOption, brzaccVLDFSMoveFreq=brzaccVLDFSMoveFreq, brzaccVLDFSNoFreeChannelsExistsTRAP=brzaccVLDFSNoFreeChannelsExistsTRAP, brzaccVLNoiseImmunityParameters=brzaccVLNoiseImmunityParameters, brzaccVLAdbTxFailedModLevel7=brzaccVLAdbTxFailedModLevel7, brzaccVLSpectrumAnalysisActivation=brzaccVLSpectrumAnalysisActivation, brzaccVLSpectrumAnalysisInformationSignalMaxSNR=brzaccVLSpectrumAnalysisInformationSignalMaxSNR, brzaccVLPerSuDistanceLearning=brzaccVLPerSuDistanceLearning, brzaccVLProportionalIRThresholdPercentage=brzaccVLProportionalIRThresholdPercentage, brzaccVLDeleteOneUserFilter=brzaccVLDeleteOneUserFilter, brzaccVLDisassociateAllSUs=brzaccVLDisassociateAllSUs, brzaccVLMacPinpoint=brzaccVLMacPinpoint, mngTrapEntry=mngTrapEntry, brzaccVLUdpPortRangeAdd=brzaccVLUdpPortRangeAdd, brzaccVLAdbDroppedFramesTotal=brzaccVLAdbDroppedFramesTotal, brzaccVLResetUnit=brzaccVLResetUnit, brzaccVLNewIpFilterCommand=brzaccVLNewIpFilterCommand, brzaccVLCurrentEthernetPortState=brzaccVLCurrentEthernetPortState, brzaccVLWirelessLinkEvents=brzaccVLWirelessLinkEvents, brzaccVLRxEvents=brzaccVLRxEvents, brzaccVLUnitName=brzaccVLUnitName, brzaccVLErrHandlingEntry=brzaccVLErrHandlingEntry, brzaccVLDFSDetectionAlgorithm=brzaccVLDFSDetectionAlgorithm, brzaccVLAdaptiveModulationPacketNoOnUpperRate=brzaccVLAdaptiveModulationPacketNoOnUpperRate, brzaccVLAggregateCIRUplink=brzaccVLAggregateCIRUplink, brzaccVLEthBroadcastMulticastLimiterOption=brzaccVLEthBroadcastMulticastLimiterOption, brzaccVLDFSClearRadarDetectedChannelsAfterReset=brzaccVLDFSClearRadarDetectedChannelsAfterReset, brzaccVLOverrunEvents=brzaccVLOverrunEvents, brzaccVLAdbSNR=brzaccVLAdbSNR, brzaccVLCountryCodeParameters=brzaccVLCountryCodeParameters, brzaccVLTrapRTx=brzaccVLTrapRTx, brzaccVLLoadingStatus=brzaccVLLoadingStatus, brzaccVLFairnessFactor=brzaccVLFairnessFactor, brzaccVLResetTrafficCounters=brzaccVLResetTrafficCounters, brzaccVLMngIpRangeMask=brzaccVLMngIpRangeMask, brzaccVLTrafficPriVLAN=brzaccVLTrafficPriVLAN, brzaccVLAdbMaxModulationLevel=brzaccVLAdbMaxModulationLevel, brzaccVLPPPoEBroadcastOverrideFilter=brzaccVLPPPoEBroadcastOverrideFilter, brzaccVLAccessToNwTrap=brzaccVLAccessToNwTrap, brzaccVLConfigurationFileName=brzaccVLConfigurationFileName, brzaccVLCellDistanceMode=brzaccVLCellDistanceMode, brzaccVLVlanPriorityThreshold=brzaccVLVlanPriorityThreshold, brzaccVLAUMacAddressDatabase=brzaccVLAUMacAddressDatabase, brzaccVLNewAdbCountryCode=brzaccVLNewAdbCountryCode, brzaccVLNewAdbStatus=brzaccVLNewAdbStatus, brzaccVLTrapStrParam=brzaccVLTrapStrParam, brzaccVLNeighborAuSNR=brzaccVLNeighborAuSNR, brzaccVLIpFilterEntry=brzaccVLIpFilterEntry, brzNetB_BU_B10=brzNetB_BU_B10, brzaccVLEthernetPortControl=brzaccVLEthernetPortControl, brzaccVLAdbTxFailedModLevel8=brzaccVLAdbTxFailedModLevel8, brzaccVLCRCErrors=brzaccVLCRCErrors, brzaccVLSpuriousImmunityLevel=brzaccVLSpuriousImmunityLevel, brzaccVLManagementVlanID=brzaccVLManagementVlanID, brzaccVLMacAddressDenyList=brzaccVLMacAddressDenyList, brzaccVLTrafficPriUdpTcpPortRange=brzaccVLTrafficPriUdpTcpPortRange, brzaccVLKey2=brzaccVLKey2, brzaccVLKey4=brzaccVLKey4, brzaccVLErrHandlingParameter2=brzaccVLErrHandlingParameter2, DisplayString=DisplayString, brzaccVLFTPServerIpAddress=brzaccVLFTPServerIpAddress, brzaccVLApWorkingMode=brzaccVLApWorkingMode, brzaccVLMaxTxApplicableModulationLevel=brzaccVLMaxTxApplicableModulationLevel, brzaccVLWirelessLinkCounters=brzaccVLWirelessLinkCounters, brzaccVLTrapTelnetUserIpAddress=brzaccVLTrapTelnetUserIpAddress, brzaccVLConfigurationFileLoading=brzaccVLConfigurationFileLoading, brzaccVLUdpPortRangeIdx=brzaccVLUdpPortRangeIdx, brzaccVLAdbCpldVer=brzaccVLAdbCpldVer, brzaccVLNewAdbCirTx=brzaccVLNewAdbCirTx, brzaccVLThresholdTableEntry=brzaccVLThresholdTableEntry, brzaccVLAdbRSSI=brzaccVLAdbRSSI, brzaccVLCountryDependentParamsTable=brzaccVLCountryDependentParamsTable, brzaccVLAvgSNRMemoryFactor=brzaccVLAvgSNRMemoryFactor, brzaccVLErrHandlingParameter5=brzaccVLErrHandlingParameter5, brzaccVLResetSpectrumCounters=brzaccVLResetSpectrumCounters, brzaccVLSpectrumAnalysisInformationMaxNoiseFloor=brzaccVLSpectrumAnalysisInformationMaxNoiseFloor, brzaccVLDrapUdpPort=brzaccVLDrapUdpPort, brzaccVLResetPerModulationLevelCounters=brzaccVLResetPerModulationLevelCounters, brzaccVLCCRegulationMaxTxPowerAtAntennaPort=brzaccVLCCRegulationMaxTxPowerAtAntennaPort, brzaccVLParameterChangeTRAP=brzaccVLParameterChangeTRAP, brzaccVLNewAdbAge=brzaccVLNewAdbAge, brzaccVLSerialNumber=brzaccVLSerialNumber, brzaccVLSpectrumAnalysisInformationChannel=brzaccVLSpectrumAnalysisInformationChannel, brzaccVLMaximumTxPowerRange=brzaccVLMaximumTxPowerRange, brzaccVLTotalRxConcatenatedFramesMore=brzaccVLTotalRxConcatenatedFramesMore, brzaccVLAUSSupportSU8=brzaccVLAUSSupportSU8, brzaccVLVlanExtendedAccessRulesTableIdx=brzaccVLVlanExtendedAccessRulesTableIdx, brzaccVLEventLogFileName=brzaccVLEventLogFileName, brzaccVLAdbCountryCode=brzaccVLAdbCountryCode, brzAccessVLSU_I=brzAccessVLSU_I, brzaccVLSecurityMode=brzaccVLSecurityMode, brzaccVLTrapFtpOrTftpStatus=brzaccVLTrapFtpOrTftpStatus, brzaccVLMinimumIntervalBetweenATPCMessages=brzaccVLMinimumIntervalBetweenATPCMessages, brzaccVLMaxBeaconsLost=brzaccVLMaxBeaconsLost, brzaccVLInterferenceMitigationScanMode=brzaccVLInterferenceMitigationScanMode, brzaccVLDataEncryptionOption=brzaccVLDataEncryptionOption, brzaccVLNewMngIpRangeEnd=brzaccVLNewMngIpRangeEnd, brzaccVLHiddenESSIDMacAddress=brzaccVLHiddenESSIDMacAddress, brzaccVLAdbCirTx=brzaccVLAdbCirTx, brzaccVLQinQEthertype=brzaccVLQinQEthertype, brzaccVLMeasuredCellDistance=brzaccVLMeasuredCellDistance, brzaccVLNewIpID=brzaccVLNewIpID, brzaccVLErrHandlingParameter4=brzaccVLErrHandlingParameter4, brzaccVLUdpTcpPortRangePrioritizationOption=brzaccVLUdpTcpPortRangePrioritizationOption, brzaccVLATPC=brzaccVLATPC, brzaccVLUseDhcp=brzaccVLUseDhcp, brzaccVLVlanRelayingSupport=brzaccVLVlanRelayingSupport, brzaccVLWirelessLinkPrioritization=brzaccVLWirelessLinkPrioritization, brzaccVLSecurityParameters=brzaccVLSecurityParameters, brzaccVLMinimumSNRLevel=brzaccVLMinimumSNRLevel, brzaccVLNewVlanRelayingTable=brzaccVLNewVlanRelayingTable, brzaccVLSpectrumAnalysisInformationOFDMAvgSnr=brzaccVLSpectrumAnalysisInformationOFDMAvgSnr, products=products, brzaccVLKey1=brzaccVLKey1, brzaccVLErrHandlingParameter1=brzaccVLErrHandlingParameter1, brzaccVLNewIpFilterTable=brzaccVLNewIpFilterTable, brzaccVLErrorHandling=brzaccVLErrorHandling, brzaccVLVlanExtendedAccessRuleVlanId=brzaccVLVlanExtendedAccessRuleVlanId, brzaccVLServiceParameters=brzaccVLServiceParameters, brzaccVLTrafficPriIpRange=brzaccVLTrafficPriIpRange, brzNetB_BU_B100=brzNetB_BU_B100, brzaccVLNumberOfMacAddressesInDenyList=brzaccVLNumberOfMacAddressesInDenyList, brzaccVLTxPower=brzaccVLTxPower, brzaccVLInterferenceMitigationScanTime=brzaccVLInterferenceMitigationScanTime, brzaccVLTcpPortRangeTable=brzaccVLTcpPortRangeTable, brzaccVLTrafficPriIPToS=brzaccVLTrafficPriIPToS, brzaccVLAntennaGainChange=brzaccVLAntennaGainChange, brzaccVLTrapAccessRights=brzaccVLTrapAccessRights, brzaccVLDeleteAllTrapAddrs=brzaccVLDeleteAllTrapAddrs, brzaccVLDFSChannelFrequency=brzaccVLDFSChannelFrequency, brzaccVLAdbTxSuccessModLevel4=brzaccVLAdbTxSuccessModLevel4, brzaccVLAdbTxFramesTotal=brzaccVLAdbTxFramesTotal, brzaccVLRunningSoftwareVersion=brzaccVLRunningSoftwareVersion, mngIpFilterEntry=mngIpFilterEntry, newMngTrapEntry=newMngTrapEntry, brzaccVLNwMngIpTableIdx=brzaccVLNwMngIpTableIdx, brzaccVLCurrentAUOperatingFrequencyNew=brzaccVLCurrentAUOperatingFrequencyNew, brzaccVLCCBurstModeSupport=brzaccVLCCBurstModeSupport, brzaccVLNewNwMngIpAddressCommand=brzaccVLNewNwMngIpAddressCommand, brzaccVLAutoSubBandSelect=brzaccVLAutoSubBandSelect, brzaccVLEthBroadcastMulticastLimiterSendTrapInterval=brzaccVLEthBroadcastMulticastLimiterSendTrapInterval, brzaccVLVlanExtendedAccessRulesEntry=brzaccVLVlanExtendedAccessRulesEntry, brzaccVLNeighborAuAuthOption=brzaccVLNeighborAuAuthOption, brzaccVLAUBurstDurationLowPriority=brzaccVLAUBurstDurationLowPriority, brzaccVLAggregateMIRUplink=brzaccVLAggregateMIRUplink, brzaccVLAdbUnitName=brzaccVLAdbUnitName, brzaccVLAccessToNwMng=brzaccVLAccessToNwMng, brzaccVLLowPriorityTrafficMinimumPercent=brzaccVLLowPriorityTrafficMinimumPercent, brzaccVLAdbMirRx=brzaccVLAdbMirRx, brzaccVLDFSChannelIdx=brzaccVLDFSChannelIdx, brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod=brzaccVLDFSMaximumNumberOfDetectionsInAssessmentPeriod, brzaccVLAggregateMIRCIR=brzaccVLAggregateMIRCIR, brzaccVLMacAddressDenyListTable=brzaccVLMacAddressDenyListTable, brzaccVLFTPConfigurationFileSourceDir=brzaccVLFTPConfigurationFileSourceDir, brzaccVLSaveCurrentConfigurationAsOperatorDefaults=brzaccVLSaveCurrentConfigurationAsOperatorDefaults, brzaccVLNewAdbBootVer=brzaccVLNewAdbBootVer, brzaccVLTotalRxFramesFromWireless=brzaccVLTotalRxFramesFromWireless, brzaccVLNoiseFloorCalibrationParameters=brzaccVLNoiseFloorCalibrationParameters, brzaccVLHWRetriesHighPriority=brzaccVLHWRetriesHighPriority, brzaccVLMaskID=brzaccVLMaskID, brzaccVLPromiscuousModeTRAP=brzaccVLPromiscuousModeTRAP, brzaccVLFTPGatewayIpAddress=brzaccVLFTPGatewayIpAddress, brzaccVLAggregateCIRDownlink=brzaccVLAggregateCIRDownlink, brzaccVLFramesSubmittedViaHighQueue=brzaccVLFramesSubmittedViaHighQueue, brzaccVLAUHiddenESSIDOption=brzaccVLAUHiddenESSIDOption, brzaccVLInterferenceMitigationAntennaGain=brzaccVLInterferenceMitigationAntennaGain, brzNetB_BU_B28=brzNetB_BU_B28, brzaccVLAdaptiveModulationAlgorithmOption=brzaccVLAdaptiveModulationAlgorithmOption, brzaccVLFrequencySubsetTableIdx=brzaccVLFrequencySubsetTableIdx, brzaccVLTransmitPowerIdx=brzaccVLTransmitPowerIdx, brzaccVLPulseDetectionSensitivity=brzaccVLPulseDetectionSensitivity, brzaccVLUdpPortRangeEnd=brzaccVLUdpPortRangeEnd, brzaccVLMngIpRangeEnd=brzaccVLMngIpRangeEnd, brzaccVLNewAdbIPaddress=brzaccVLNewAdbIPaddress, brzaccVLDrapGatewayType=brzaccVLDrapGatewayType, brzaccVLTcpPortRangeDelete=brzaccVLTcpPortRangeDelete, brzaccVLCurrentFrequencySubsetFrequency=brzaccVLCurrentFrequencySubsetFrequency, brzaccVLCountryCodeSelect=brzaccVLCountryCodeSelect, brzaccVLSecurityModeSupport=brzaccVLSecurityModeSupport, brzaccVLAESEncryptionSupport=brzaccVLAESEncryptionSupport, brzaccVLInterferenceMitigationMaxModulation=brzaccVLInterferenceMitigationMaxModulation, brzAccessVLAUS_SA=brzAccessVLAUS_SA, brzaccVLNewAdbCirRx=brzaccVLNewAdbCirRx, brzaccVLAverageModulationLevel=brzaccVLAverageModulationLevel, brzaccVLTrapIntParam3=brzaccVLTrapIntParam3, brzaccVLTrapHistoryEntry=brzaccVLTrapHistoryEntry, brzaccVLAutomaticChannelSelection=brzaccVLAutomaticChannelSelection, brzaccVLTotalTransmittedConcatenatedFramesDouble=brzaccVLTotalTransmittedConcatenatedFramesDouble, brzaccVLSUPerModulationLevelCountersTxFailed=brzaccVLSUPerModulationLevelCountersTxFailed, brzAccessVLAU_BS=brzAccessVLAU_BS, brzaccVLTcpPortRangeEnd=brzaccVLTcpPortRangeEnd, brzaccVLNewAdbReadOnlyCommunity=brzaccVLNewAdbReadOnlyCommunity, brzaccVLTxEvents=brzaccVLTxEvents)
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLNewVlanIdForwarding=brzaccVLNewVlanIdForwarding, brzNetB_RB_B28=brzNetB_RB_B28, brzaccVLCCAuthenticationEncryptionSupport=brzaccVLCCAuthenticationEncryptionSupport, brzaccVLAUBurstDurationHighPriority=brzaccVLAUBurstDurationHighPriority, brzaccVLAdbTxSuccessModLevel1=brzaccVLAdbTxSuccessModLevel1, brzaccVLNewAdbMirRx=brzaccVLNewAdbMirRx, brzaccVLAUDefinedFrequencyNew=brzaccVLAUDefinedFrequencyNew, brzaccVLInterferenceMitigationOutputNoiseFloor=brzaccVLInterferenceMitigationOutputNoiseFloor, brzaccVLFTPSwDownload=brzaccVLFTPSwDownload, brzAccessVLProducts=brzAccessVLProducts, brzaccVLAUSSupportSU54=brzaccVLAUSSupportSU54, brzaccVLInterferenceMitigationKeepLink=brzaccVLInterferenceMitigationKeepLink, brzaccVLNeighborAuConcatenationOption=brzaccVLNeighborAuConcatenationOption, brzaccVLIpFilterIdx=brzaccVLIpFilterIdx, brzaccVLPerformanceParams=brzaccVLPerformanceParams, brzaccVLNewVlanForwardingTable=brzaccVLNewVlanForwardingTable, brzaccVLDeleteAllNwIpRanges=brzaccVLDeleteAllNwIpRanges, brzaccVLMacAddressDenyListEntry=brzaccVLMacAddressDenyListEntry, brzaccVLAdbTxSuccessModLevel6=brzaccVLAdbTxSuccessModLevel6, brzaccVLAdbTxFailedModLevel2=brzaccVLAdbTxFailedModLevel2, brzaccVLDFSChannelReuseParameters=brzaccVLDFSChannelReuseParameters, brzaccVLDrapGatewayEntry=brzaccVLDrapGatewayEntry, brzaccVLEventLogFileUploading=brzaccVLEventLogFileUploading, brzaccVLNeighborAuAtpcOption=brzaccVLNeighborAuAtpcOption, brzaccVLNeighborAuSecurityMode=brzaccVLNeighborAuSecurityMode, brzNetB_RB_B100=brzNetB_RB_B100, brzaccVLMacAddressDenyListId=brzaccVLMacAddressDenyListId, brzaccVLNewMaximumTxPowerRange=brzaccVLNewMaximumTxPowerRange, brzaccVLPowerUpFromReset=brzaccVLPowerUpFromReset, brzaccVLInterferenceMitigationOutputEntry=brzaccVLInterferenceMitigationOutputEntry, brzaccVLInterferenceMitigationDeleteStatisticsFile=brzaccVLInterferenceMitigationDeleteStatisticsFile, brzaccVLTrapType=brzaccVLTrapType, brzaccVLOperatorESSID=brzaccVLOperatorESSID, brzaccVLNoiseImmunityLevel=brzaccVLNoiseImmunityLevel, brzaccVLNewAdbMaxModulationLevel=brzaccVLNewAdbMaxModulationLevel, brzaccVLUdpPortRangeConfig=brzaccVLUdpPortRangeConfig, brzaccVLQinQProviderVlanID=brzaccVLQinQProviderVlanID, brzaccVLNwMngTrapCommunity=brzaccVLNwMngTrapCommunity, brzaccVLTransmitPowerTable=brzaccVLTransmitPowerTable, brzaccVLInterferenceMitigationOutputScanningType=brzaccVLInterferenceMitigationOutputScanningType, brzaccVLTcpPortRangeIdx=brzaccVLTcpPortRangeIdx, brzaccVLDrapGatewaysTable=brzaccVLDrapGatewaysTable, brzaccVLAdbWi2IPaddress=brzaccVLAdbWi2IPaddress, brzaccVLAdbIpAddress=brzaccVLAdbIpAddress, brzaccVLWLPrioritizationNotSupportedBySUTRAP=brzaccVLWLPrioritizationNotSupportedBySUTRAP, brzaccVLSelectSubBandIndex=brzaccVLSelectSubBandIndex, brzaccVLRunTimeDefaultIPGateway=brzaccVLRunTimeDefaultIPGateway, brzaccVLVlanRelayingTableIdx=brzaccVLVlanRelayingTableIdx, brzaccVLNeighborAuESSID=brzaccVLNeighborAuESSID, brzaccVLAUAdbResetAllModulationLevelCounters=brzaccVLAUAdbResetAllModulationLevelCounters, brzaccVLNewNwTrapCommand=brzaccVLNewNwTrapCommand, brzaccVLDrapTTL=brzaccVLDrapTTL, brzaccVLNoiseFloorForcedValue=brzaccVLNoiseFloorForcedValue, brzNetB_RB_B14=brzNetB_RB_B14, brzaccVLTotalRxFramesViaEthernet=brzaccVLTotalRxFramesViaEthernet, mptUnitMACAddress=mptUnitMACAddress, brzaccVLTrapHistory=brzaccVLTrapHistory, brzaccVLEthBroadcastThresholdExceeded=brzaccVLEthBroadcastThresholdExceeded, brzaccVLUnitWithMaxDistance=brzaccVLUnitWithMaxDistance, brzaccVLCCMaximumBurstDuration=brzaccVLCCMaximumBurstDuration, brzaccVLTotalRxConcatenatedFramesDouble=brzaccVLTotalRxConcatenatedFramesDouble, brzaccVLThresholdLEDmode=brzaccVLThresholdLEDmode, brzaccVLCountryCodeLearningBySU=brzaccVLCountryCodeLearningBySU, brzaccVLRegulationMaxEIRP=brzaccVLRegulationMaxEIRP, brzaccVLFrequencySubsetEntry=brzaccVLFrequencySubsetEntry, brzaccVLNewAdbAuthOption=brzaccVLNewAdbAuthOption, brzaccVLNewNwMngTrapAddress=brzaccVLNewNwMngTrapAddress, brzaccVLMainVersionFileName=brzaccVLMainVersionFileName, brzaccVLTelnetLogoutTimer=brzaccVLTelnetLogoutTimer, brzaccVLBestAu=brzaccVLBestAu, brzaccVLAdbCirRx=brzaccVLAdbCirRx, brzaccVLTotalTransmittedConcatenatedFramesMore=brzaccVLTotalTransmittedConcatenatedFramesMore, brzaccVLOperatorESSIDOption=brzaccVLOperatorESSIDOption, brzaccVLCountryCode=brzaccVLCountryCode, brzaccVLMngIpRangesTable=brzaccVLMngIpRangesTable, brzaccVLSubBandSelect=brzaccVLSubBandSelect, newMngTrapTable=newMngTrapTable, brzaccVLNewAdbCirMaxDelay=brzaccVLNewAdbCirMaxDelay, brzaccVLRegulationMaxTxPowerAtAntennaPort=brzaccVLRegulationMaxTxPowerAtAntennaPort, breezeAccessVLMib=breezeAccessVLMib, brzaccVLAuthenticationPromiscuousMode=brzaccVLAuthenticationPromiscuousMode, brzaccVLThresholdLEDtype=brzaccVLThresholdLEDtype, brzaccVLAdbAtpcOption=brzaccVLAdbAtpcOption, brzaccVLIpParams=brzaccVLIpParams, brzaccVLUdpPortRangeEntry=brzaccVLUdpPortRangeEntry, brzaccVLLEDmode=brzaccVLLEDmode, brzaccVLInterferenceMitigationScanType=brzaccVLInterferenceMitigationScanType, brzaccVLPreferredAuMacAddress=brzaccVLPreferredAuMacAddress, mptEthernetStationMACAddress=mptEthernetStationMACAddress, brzaccVLSubNetMask=brzaccVLSubNetMask, brzaccVLCellDistanceParameters=brzaccVLCellDistanceParameters, brzaccVLMainVersionNumber=brzaccVLMainVersionNumber, brzaccVLEventLogFileParams=brzaccVLEventLogFileParams, brzaccVLFTPDownloadSwFile=brzaccVLFTPDownloadSwFile, brzaccVLFrequencySubsetTable=brzaccVLFrequencySubsetTable, brzaccVLInterferenceMitigationAUheight=brzaccVLInterferenceMitigationAUheight, brzaccVLHiddenESSIDTable=brzaccVLHiddenESSIDTable, brzaccVLAutoSubBandFrequencySubsetTable=brzaccVLAutoSubBandFrequencySubsetTable, brzaccVLSUPerModulationLevelCountersTableIdx=brzaccVLSUPerModulationLevelCountersTableIdx, brzaccVLVlanRelayingTable=brzaccVLVlanRelayingTable, brzaccVLSUassociatedTRAP=brzaccVLSUassociatedTRAP, brzAccessVLSU_6_L=brzAccessVLSU_6_L, brzaccVLEthernetLinkType=brzaccVLEthernetLinkType, brzaccVLNewVlanRelayingEntry=brzaccVLNewVlanRelayingEntry, brzaccVLARPBroadcastOverrideFilter=brzaccVLARPBroadcastOverrideFilter, brzaccVLSubBandUpperFrequency=brzaccVLSubBandUpperFrequency, brzaccVLVlanExtendedTrunkVlanID=brzaccVLVlanExtendedTrunkVlanID, brzaccVLAssociatedAU=brzaccVLAssociatedAU, brzAccess4900_AU_SA=brzAccess4900_AU_SA, brzaccVLNewTransmitPowerEntry=brzaccVLNewTransmitPowerEntry, brzaccVLPhyErrors=brzaccVLPhyErrors, brzaccVLTrapMacAddrParam=brzaccVLTrapMacAddrParam, brzaccVLAuthenticationEncryptionSupport=brzaccVLAuthenticationEncryptionSupport, brzaccVLNewMaskID=brzaccVLNewMaskID, brzaccVLFrequencySubsetFrequency=brzaccVLFrequencySubsetFrequency, brzaccVLAdbCirMaxDelay=brzaccVLAdbCirMaxDelay, brzaccVLVlanExtendedAccessRulePriority=brzaccVLVlanExtendedAccessRulePriority, brzaccVLVlanForwardingSupport=brzaccVLVlanForwardingSupport, brzaccVLCurrentFrequencySubsetTable=brzaccVLCurrentFrequencySubsetTable, brzaccVLAdbTxSuccessModLevel8=brzaccVLAdbTxSuccessModLevel8, brzaccVLNoOfDuplicateFramesDiscarded=brzaccVLNoOfDuplicateFramesDiscarded, brzaccVLNewAdbRSSI=brzaccVLNewAdbRSSI, brzaccVLMinModulationLevel=brzaccVLMinModulationLevel, brzaccVLShadowVersionFileName=brzaccVLShadowVersionFileName, brzaccVLNewMacAddressDenyListTable=brzaccVLNewMacAddressDenyListTable, brzaccVLToSPrioritizationOption=brzaccVLToSPrioritizationOption, brzaccVLAdbTxFailedModLevel6=brzaccVLAdbTxFailedModLevel6, brzaccVLAdbDistance=brzaccVLAdbDistance, brzaccVLDFSSuWaitingOption=brzaccVLDFSSuWaitingOption, brzaccVLBridgeParameters=brzaccVLBridgeParameters, brzaccVLNewModulationLevelIdx=brzaccVLNewModulationLevelIdx, brzaccVLUserFilterOption=brzaccVLUserFilterOption, brzaccVLUnitControl=brzaccVLUnitControl, brzaccVLInterferenceMitigationChannelScanPeriod=brzaccVLInterferenceMitigationChannelScanPeriod, brzaccVLDataEncryptionSupport=brzaccVLDataEncryptionSupport, brzaccVLNewAdbTxFailedModLevel2=brzaccVLNewAdbTxFailedModLevel2, brzaccVLNewMngIpRangeFlag=brzaccVLNewMngIpRangeFlag, brzaccVLDFSChannelRadarStatus=brzaccVLDFSChannelRadarStatus, brzaccVLDeleteOneNwIpRange=brzaccVLDeleteOneNwIpRange, brzaccVLRXCRCPercentage=brzaccVLRXCRCPercentage, brzaccVLIpFilterRange=brzaccVLIpFilterRange, brzaccVLSoftwareRetrySupport=brzaccVLSoftwareRetrySupport, brzaccVLMaximumTxPower=brzaccVLMaximumTxPower, brzaccVLInterferenceMitigationOutputTable=brzaccVLInterferenceMitigationOutputTable, brzaccVLDataAndOtherMngFramesToWireless=brzaccVLDataAndOtherMngFramesToWireless, brzaccVLVlanForwardingTableIdx=brzaccVLVlanForwardingTableIdx, brzaccVLCCParamsIndex=brzaccVLCCParamsIndex, brzaccVLNewMaxModulationLevelIdx=brzaccVLNewMaxModulationLevelIdx, brzaccVLNoiseFloorFieldCalibrationStatus=brzaccVLNoiseFloorFieldCalibrationStatus, brzaccVLAUBeaconsToWireless=brzaccVLAUBeaconsToWireless, brzaccVLCCAllowedBandwidth=brzaccVLCCAllowedBandwidth, brzaccVLSUassociatedAUTRAP=brzaccVLSUassociatedAUTRAP, brzAccess4900_AU_BS=brzAccess4900_AU_BS, brzaccVLUnitMacAddress=brzaccVLUnitMacAddress, brzaccVLDefinedMaximumTxPowerRange=brzaccVLDefinedMaximumTxPowerRange, brzaccVLWi2IpAddress=brzaccVLWi2IpAddress, brzaccVLTrapHistorySequenceNumber=brzaccVLTrapHistorySequenceNumber, brzaccVLRunningFrom=brzaccVLRunningFrom, brzaccVLAdminPassword=brzaccVLAdminPassword, brzaccVLNewMngIpRangeEntry=brzaccVLNewMngIpRangeEntry, brzaccVLUpLinkQualityIndicator=brzaccVLUpLinkQualityIndicator, brzaccVLNoiseFloorBandwidthUsedForLastFieldCalibration=brzaccVLNoiseFloorBandwidthUsedForLastFieldCalibration, brzaccVLVlanRelayingEntry=brzaccVLVlanRelayingEntry, brzaccVLAdbMirTx=brzaccVLAdbMirTx, brzaccVLThresholdLEDnum=brzaccVLThresholdLEDnum, brzaccVLFrequencySubsetFrequencyNew=brzaccVLFrequencySubsetFrequencyNew, brzaccVLNewAdbSecurityMode=brzaccVLNewAdbSecurityMode, brzaccVLNoiseFloorCalculationMode=brzaccVLNoiseFloorCalculationMode, brzaccVLSUEZMirDownlink=brzaccVLSUEZMirDownlink, brzaccVLVlanExtendedAccessRuleId=brzaccVLVlanExtendedAccessRuleId, brzaccVLNeighborAuDfsOption=brzaccVLNeighborAuDfsOption, brzaccVLBestAuSupport=brzaccVLBestAuSupport, brzaccVLMaximumBurstDuration=brzaccVLMaximumBurstDuration, brzaccVLMaxContentionWindow=brzaccVLMaxContentionWindow, brzaccVLEraseEventLog=brzaccVLEraseEventLog, brzaccVLLoadingStatusTRAP=brzaccVLLoadingStatusTRAP, brzaccVLLastTrapSequenceNumber=brzaccVLLastTrapSequenceNumber, brzaccVLDeleteAllNwIpAddrs=brzaccVLDeleteAllNwIpAddrs, brzaccVLOperatorDefaultsFileName=brzaccVLOperatorDefaultsFileName, brzaccVLTXRetransmissionPercentage=brzaccVLTXRetransmissionPercentage, brzaccVLCCParamsEntry=brzaccVLCCParamsEntry, brzaccVLVLANForwarding=brzaccVLVLANForwarding, brzaccVLAdaptiveModulationDecisionThresholds=brzaccVLAdaptiveModulationDecisionThresholds, brzaccVLFTPServerParams=brzaccVLFTPServerParams, brzaccVLSetDefaults=brzaccVLSetDefaults, brzaccVLUnderrunEvents=brzaccVLUnderrunEvents, brzaccVLInterferenceMitigationThroughput=brzaccVLInterferenceMitigationThroughput, brzaccVLCurrentFrequencySubsetEntry=brzaccVLCurrentFrequencySubsetEntry, brzaccVLNewAdbAtpcOption=brzaccVLNewAdbAtpcOption, brzAccessVLAUS_BS=brzAccessVLAUS_BS, brzaccVLNewAdbMaximumCW=brzaccVLNewAdbMaximumCW, brzaccVLVlanForwardingTable=brzaccVLVlanForwardingTable, brzaccVLNwTrapTableIdx=brzaccVLNwTrapTableIdx, brzaccVLAdbIndex=brzaccVLAdbIndex, brzaccVLMaximumTransmitPowerTable=brzaccVLMaximumTransmitPowerTable, brzaccVLScanningStep=brzaccVLScanningStep, brzaccVLFrequencySubsetActive=brzaccVLFrequencySubsetActive, brzaccVLTransmitPowerEntry=brzaccVLTransmitPowerEntry, brzaccVLNewAdbTxSuccessModLevel3=brzaccVLNewAdbTxSuccessModLevel3, brzaccVLAdaptiveModulationParams=brzaccVLAdaptiveModulationParams, brzaccVLTrapLog=brzaccVLTrapLog, brzaccVLInterferenceMitigationAutomaticScanPeriod=brzaccVLInterferenceMitigationAutomaticScanPeriod, brzaccVLVLANTrafficPriority=brzaccVLVLANTrafficPriority, brzaccVLDFSMoveFreqNew=brzaccVLDFSMoveFreqNew, brzaccVLConcatenationParameters=brzaccVLConcatenationParameters, brzaccVLAdbTxSuccessModLevel7=brzaccVLAdbTxSuccessModLevel7, brzaccVLEnhancedETSIRadarDetection=brzaccVLEnhancedETSIRadarDetection, brzaccVLFeatureUpgradeManually=brzaccVLFeatureUpgradeManually, brzaccVLSUBurstDurationLowPriority=brzaccVLSUBurstDurationLowPriority, brzaccVLAUAdbTable=brzaccVLAUAdbTable, brzaccVLFTPClientIPAddress=brzaccVLFTPClientIPAddress, brzaccVLNeighborAuIdx=brzaccVLNeighborAuIdx, brzaccVLEthernetNegotiationMode=brzaccVLEthernetNegotiationMode, brzaccVLNeighborAuDataEncyptOption=brzaccVLNeighborAuDataEncyptOption, brzaccVLNewAdbTxFailedModLevel4=brzaccVLNewAdbTxFailedModLevel4, brzaccVLMaximumTransmitPowerIdx=brzaccVLMaximumTransmitPowerIdx, brzaccVLNwMngIpAddress=brzaccVLNwMngIpAddress, brzNetB_BU_B14=brzNetB_BU_B14, brzaccVLRadioBand=brzaccVLRadioBand, brzaccVLAutoSubBandSelectedFreqSubset=brzaccVLAutoSubBandSelectedFreqSubset, brzaccVLPowerLevelSteps=brzaccVLPowerLevelSteps, brzaccVLEthernetFrameSize=brzaccVLEthernetFrameSize, brzaccVLNewAdbTxFailedModLevel7=brzaccVLNewAdbTxFailedModLevel7, brzaccVLRunningEthernetFrameSize=brzaccVLRunningEthernetFrameSize, brzAccessVLSU_3_1D=brzAccessVLSU_3_1D, brzaccVLNoOfInternallyDiscardedMirCir=brzaccVLNoOfInternallyDiscardedMirCir, brzaccVLMacAddressDatabase=brzaccVLMacAddressDatabase, brzaccVLAverageReceiveRSSI=brzaccVLAverageReceiveRSSI, brzaccVLCCNumberIdx=brzaccVLCCNumberIdx, brzaccVLDisassociateSuByMacAddress=brzaccVLDisassociateSuByMacAddress, brzaccVLNeighborAuAdapModOption=brzaccVLNeighborAuAdapModOption, brzaccVLNewIpFilterRange=brzaccVLNewIpFilterRange, brzaccVLSpectrumAnalysisInformationTableIdx=brzaccVLSpectrumAnalysisInformationTableIdx, brzaccVLDFSChannelCheckTime=brzaccVLDFSChannelCheckTime, brzaccVLTelnetStatusTRAP=brzaccVLTelnetStatusTRAP, brzaccVLAdaptiveModulationPacketThresholdToTestUpRate=brzaccVLAdaptiveModulationPacketThresholdToTestUpRate, brzaccVLDeltaFromMinSNRLevel=brzaccVLDeltaFromMinSNRLevel, brzaccVLEthBroadcastingParameters=brzaccVLEthBroadcastingParameters, mngTrapTable=mngTrapTable, brzaccVLUserFilterParams=brzaccVLUserFilterParams, brzaccVLDefaultGWAddress=brzaccVLDefaultGWAddress, brzaccVLIPPrecedenceThreshold=brzaccVLIPPrecedenceThreshold, brzaccVLTcpPortRangeAdd=brzaccVLTcpPortRangeAdd, brzaccVLErrHandlingSetNMSId=brzaccVLErrHandlingSetNMSId, brzaccVLNewAdbTxSuccessModLevel5=brzaccVLNewAdbTxSuccessModLevel5, brzaccVLUnitBootVersion=brzaccVLUnitBootVersion, brzaccVLFTPParameters=brzaccVLFTPParameters, brzaccVLSystemLocation=brzaccVLSystemLocation, brzaccVLAdaptiveModulationRTSDurationMode=brzaccVLAdaptiveModulationRTSDurationMode, brzaccVLSUBurstDurationHighPriority=brzaccVLSUBurstDurationHighPriority, brzaccVLInterferenceMitigationOutputDistance=brzaccVLInterferenceMitigationOutputDistance, brzaccVLSUDefaultKeyID=brzaccVLSUDefaultKeyID, brzaccVLNoiseFloorCalculationParameters=brzaccVLNoiseFloorCalculationParameters, brzaccVLAverageSignalInterferenceRatio=brzaccVLAverageSignalInterferenceRatio)
mibBuilder.exportSymbols("ALVARION-DOT11-WLAN-MIB", brzaccVLTcpPortRangeNum=brzaccVLTcpPortRangeNum, brzaccVLThresholdTable=brzaccVLThresholdTable, brzaccVLNewAdbHwRevision=brzaccVLNewAdbHwRevision, brzAccessVLSU_12_L=brzAccessVLSU_12_L, brzaccVLSUHiddenESSIDSupport=brzaccVLSUHiddenESSIDSupport, brzaccVLErrHandlingTable=brzaccVLErrHandlingTable, brzaccVLSetSelectedFreqSubset=brzaccVLSetSelectedFreqSubset, brzaccVLNewMngIpRangeCommand=brzaccVLNewMngIpRangeCommand, brzaccVLDrapGatewayIndex=brzaccVLDrapGatewayIndex, brzaccVLDFSFrequencyTRAP=brzaccVLDFSFrequencyTRAP, brzaccVLDrapSupport=brzaccVLDrapSupport, brzaccVLToSPriorityParameters=brzaccVLToSPriorityParameters, brzaccVLAUagingTRAP=brzaccVLAUagingTRAP, brzaccVLIpID=brzaccVLIpID, brzaccVLEventLogPolicy=brzaccVLEventLogPolicy, brzaccVLTrapNewIP=brzaccVLTrapNewIP, PYSNMP_MODULE_ID=breezeAccessVLMib, brzaccVLRunTimeESSID=brzaccVLRunTimeESSID, brzaccVLTrafficPriIpRangeIpMask=brzaccVLTrafficPriIpRangeIpMask, brzaccVLAutoSubBandFrequencySubsetFrequency=brzaccVLAutoSubBandFrequencySubsetFrequency, brzaccVLNewAdbTxSuccessModLevel8=brzaccVLNewAdbTxSuccessModLevel8, brzaccVLAtpcOption=brzaccVLAtpcOption, brzaccVLAirInterface=brzaccVLAirInterface, brzaccVLErrHandlingParameter3=brzaccVLErrHandlingParameter3, brzaccVLBeaconPeriod=brzaccVLBeaconPeriod, brzaccVLNwMngTrapAddress=brzaccVLNwMngTrapAddress, brzaccVLProportionalIRFactor=brzaccVLProportionalIRFactor, brzaccVLAdbTxFailedModLevel5=brzaccVLAdbTxFailedModLevel5, newMngIpFilterEntry=newMngIpFilterEntry, brzaccVLDHCPUnicastOverrideFilter=brzaccVLDHCPUnicastOverrideFilter, brzaccVLAUNewAdbTable=brzaccVLAUNewAdbTable, brzaccVLDeleteOneNwIpAddr=brzaccVLDeleteOneNwIpAddr, brzaccVLDFSMinimumPulsesToDetect=brzaccVLDFSMinimumPulsesToDetect, brzaccVLIpFilterTable=brzaccVLIpFilterTable, brzaccVLScanningMode=brzaccVLScanningMode, brzaccVLSUHiddenESSIDTimeout=brzaccVLSUHiddenESSIDTimeout, brzaccVLNewAdbMirTx=brzaccVLNewAdbMirTx, brzAccessVLSU_8_BD=brzAccessVLSU_8_BD, brzaccVLEthBroadcastMulticastLimiterTRAP=brzaccVLEthBroadcastMulticastLimiterTRAP, brzaccVLHiddenESSIDParameters=brzaccVLHiddenESSIDParameters, brzaccVLNewAdbTxFailedModLevel6=brzaccVLNewAdbTxFailedModLevel6, brzaccVLProportionalIRUpdatePeriod=brzaccVLProportionalIRUpdatePeriod, brzaccVLNewAdbTxFailedModLevel1=brzaccVLNewAdbTxFailedModLevel1, brzAccessVLAU_SA=brzAccessVLAU_SA, brzaccVLNeighborAuPerSuDistanceLearning=brzaccVLNeighborAuPerSuDistanceLearning, brzaccVLCCDataEncryptionSupport=brzaccVLCCDataEncryptionSupport, brzaccVLNewAdbConcatenationOption=brzaccVLNewAdbConcatenationOption, brzaccVLAllowedBandwidth=brzaccVLAllowedBandwidth, brzaccVLDfsSupport=brzaccVLDfsSupport, brzaccVLDFSRemoteRadarEventMonitoringPeriod=brzaccVLDFSRemoteRadarEventMonitoringPeriod, brzAccessVLSU_6_1D=brzAccessVLSU_6_1D, brzaccVLDataFramesSubmittedToBridge=brzaccVLDataFramesSubmittedToBridge, brzaccVLNewAdbTxFailedModLevel5=brzaccVLNewAdbTxFailedModLevel5, brzaccVLlowPriorityAIFS=brzaccVLlowPriorityAIFS, brzaccVLSysInfo=brzaccVLSysInfo, brzaccVLAdbConcatenationOption=brzaccVLAdbConcatenationOption, brzAccessAU_EZ=brzAccessAU_EZ, brzaccVLSiteSurvey=brzaccVLSiteSurvey, brzaccVLUnitTypeChangedTRAP=brzaccVLUnitTypeChangedTRAP, brzaccVLMirUplink=brzaccVLMirUplink, brzaccVLNewAdbBurstModeOption=brzaccVLNewAdbBurstModeOption, brzaccVLDFSChannelFrequencyNew=brzaccVLDFSChannelFrequencyNew, brzaccVLDFSRemoteRadarEventReports=brzaccVLDFSRemoteRadarEventReports, brzaccVLAutoSubBandFrequencySubsetBandIdx=brzaccVLAutoSubBandFrequencySubsetBandIdx, brzaccVLVlanRelaying=brzaccVLVlanRelaying, brzaccVLReadOnlyPassword=brzaccVLReadOnlyPassword, brzAccessVLSU_3_L=brzAccessVLSU_3_L, brzaccVLMaxDelay=brzaccVLMaxDelay, brzaccVLNewMaximumTransmitPowerEntry=brzaccVLNewMaximumTransmitPowerEntry, brzaccVLNoiseImmunityAlgorithm=brzaccVLNoiseImmunityAlgorithm, brzaccVLSendBroadcastsMulticastsAsUnicasts=brzaccVLSendBroadcastsMulticastsAsUnicasts, brzaccVLNewAdbDataEncyptOption=brzaccVLNewAdbDataEncyptOption, brzaccVLFramesSubmittedViaMidQueue=brzaccVLFramesSubmittedViaMidQueue, brzaccVLVlanManagementPriority=brzaccVLVlanManagementPriority, brzaccVLMirDownlink=brzaccVLMirDownlink, brzaccVLAntennaGain=brzaccVLAntennaGain, brzaccVLTrapParameterChanged=brzaccVLTrapParameterChanged, brzaccVLNewUnitTypeTrap=brzaccVLNewUnitTypeTrap, brzAccessVLSU_54_BD=brzAccessVLSU_54_BD, brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages=brzaccVLMinIntervalBetweenAdaptiveModulationAlgorithmMessages, brzaccVLCurrentAUOperatingFrequency=brzaccVLCurrentAUOperatingFrequency, brzaccVLCountryDependentParameterFrequencies=brzaccVLCountryDependentParameterFrequencies, brzaccVLSpectrumAnalysisInformationSignalWidth=brzaccVLSpectrumAnalysisInformationSignalWidth, brzaccVLBurstInterval=brzaccVLBurstInterval, brzaccVLInstallerPassword=brzaccVLInstallerPassword, brzaccVLFlashMemoryControl=brzaccVLFlashMemoryControl, brzaccVLCCName=brzaccVLCCName, brzaccVLSpectrumAnalysisInformationOFDMFrames=brzaccVLSpectrumAnalysisInformationOFDMFrames, brzaccVLNewAdbUnitType=brzaccVLNewAdbUnitType, brzaccVLFramesDelayedDueToSwRetry=brzaccVLFramesDelayedDueToSwRetry, brzaccVLNewAdbDroppedFramesTotal=brzaccVLNewAdbDroppedFramesTotal, brzaccVLMaximumCellRadius=brzaccVLMaximumCellRadius, brzaccVLUdpPortRangeDeleteAll=brzaccVLUdpPortRangeDeleteAll, brzaccVLTrapHistoryTable=brzaccVLTrapHistoryTable, brzaccVLNewVlanRelayingTableCommand=brzaccVLNewVlanRelayingTableCommand, brzaccVLRecievedBadFrames=brzaccVLRecievedBadFrames, brzaccVLCurrentSUOperatingFrequency=brzaccVLCurrentSUOperatingFrequency, brzaccVLAutoSubBandFrequencySubsetBandwidth=brzaccVLAutoSubBandFrequencySubsetBandwidth, brzaccVLNewNwMngIpAddress=brzaccVLNewNwMngIpAddress, brzaccVLTcpPortPriRTPRTCP=brzaccVLTcpPortPriRTPRTCP, brzaccVLDFSRadarDetectedTRAP=brzaccVLDFSRadarDetectedTRAP, newMngIpFilterTable=newMngIpFilterTable, brzaccVLBurstMode=brzaccVLBurstMode, brzaccVLProportionalIRThresholdRate=brzaccVLProportionalIRThresholdRate, brzaccVLAdbSecurityMode=brzaccVLAdbSecurityMode, brzaccVLRoamingOption=brzaccVLRoamingOption, brzaccVLNeighborAuBurstModeOption=brzaccVLNeighborAuBurstModeOption)
