#
# PySNMP MIB module ATM-TRACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-TRACE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ResourcePartitionNetworkServiceCategory, PolicyConstraintIndex, NetworkEntityNetworkServiceCategory = mibBuilder.importSymbols("ATM-POLICY-CONSTRAINT-MIB", "ResourcePartitionNetworkServiceCategory", "PolicyConstraintIndex", "NetworkEntityNetworkServiceCategory")
AtmServiceCategory, AtmConnKind, AtmAddr, AtmConnCastType, AtmVpIdentifier, AtmTrafficDescrParamIndex, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmServiceCategory", "AtmConnKind", "AtmAddr", "AtmConnCastType", "AtmVpIdentifier", "AtmTrafficDescrParamIndex", "AtmVcIdentifier")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
MplsLabel, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLabel")
pnniIfEntry, PnniNodeId, PnniPortId = mibBuilder.importSymbols("PNNI-MIB", "pnniIfEntry", "PnniNodeId", "PnniPortId")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Integer32, enterprises, NotificationType, Unsigned32, ObjectIdentity, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Counter32, ModuleIdentity, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "enterprises", "NotificationType", "Unsigned32", "ObjectIdentity", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Counter32", "ModuleIdentity", "iso", "Counter64")
RowStatus, DisplayString, TextualConvention, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue", "TimeStamp")
atmTraceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1))
atmTraceMIB.setRevisions(('2004-02-06 12:00', '1900-02-22 00:00',))
if mibBuilder.loadTexts: atmTraceMIB.setLastUpdated('200402061200Z')
if mibBuilder.loadTexts: atmTraceMIB.setOrganization('The ATM Forum.')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfSignalling = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9))
atmfTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2))
atmTraceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1))
class CallReference(TextualConvention, Integer32):
    reference = 'ITU-T Recommendation Q.2931 Section 4.3'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class AtmEndPointReference(TextualConvention, Integer32):
    reference = 'ITU-T Recommendation Q.2971 Section 8.2.1, ATM Forum PNNI v1.0 Addendum (Soft PVC MIB), af-pnni-0066.000'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class AtmTraceRecordIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class AtmTraceOwnerString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

atmTraceBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 1))
atmTraceFilterControl = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTraceFilterControl.setStatus('current')
atmTraceMaxConcurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTraceMaxConcurrentRequests.setStatus('current')
atmTraceAvailableRequests = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceAvailableRequests.setStatus('current')
atmTraceTransitListMaximumSize = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1466, 65535)).clone(1466)).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTraceTransitListMaximumSize.setStatus('current')
atmTraceConnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2))
atmTraceConnTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: atmTraceConnTable.setStatus('current')
atmTraceConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTraceConnIndex"))
if mibBuilder.loadTexts: atmTraceConnEntry.setStatus('current')
atmTraceConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: atmTraceConnIndex.setStatus('current')
atmTraceConnOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 2), AtmTraceOwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnOwner.setStatus('current')
atmTraceConnTraceSourceIf = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTraceSourceIf.setStatus('current')
atmTraceConnOrigConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("atmVcc", 2), ("atmVpc", 3), ("atmCOBISigConn", 4), ("frameRelayVc", 5))).clone('atmVcc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnOrigConnType.setStatus('current')
atmTraceConnOrigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 5), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnOrigVpi.setStatus('current')
atmTraceConnOrigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 6), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnOrigVci.setStatus('current')
atmTraceConnEndPtRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 7), AtmEndPointReference()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnEndPtRef.setStatus('current')
atmTraceConnCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 8), CallReference()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnCallRef.setStatus('current')
atmTraceConnOrigDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnOrigDlci.setStatus('current')
atmTraceConnOrigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2))).clone('incoming')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnOrigDirection.setStatus('current')
atmTraceConnTraceConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTraceConnId.setStatus('current')
atmTraceConnTraceCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTraceCallRef.setStatus('current')
atmTraceConnPassAlongRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnPassAlongRequest.setStatus('current')
atmTraceConnFailTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnFailTimeout.setStatus('current')
atmTraceConnAgeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnAgeTimeout.setStatus('current')
atmTraceConnRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2))).clone('noop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnRestart.setStatus('current')
atmTraceConnTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTrapOnCompletion.setStatus('current')
atmTraceConnRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 18), AtmTraceRecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceConnRecordIndex.setStatus('current')
atmTraceConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnRowStatus.setStatus('current')
atmTraceConnTraceNeNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTraceNeNsc.setStatus('current')
atmTraceConnTraceRpNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTraceRpNsc.setStatus('current')
atmTraceConnTraceIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTraceIncoming.setStatus('current')
atmTraceConnTraceLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 2, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceConnTraceLabels.setStatus('current')
atmTracePathTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3))
atmTracePathTestTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: atmTracePathTestTable.setStatus('current')
atmTracePathTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTracePathTestIndex"))
if mibBuilder.loadTexts: atmTracePathTestEntry.setStatus('current')
atmTracePathTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: atmTracePathTestIndex.setStatus('current')
atmTracePathTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 2), AtmTraceOwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestOwner.setStatus('current')
atmTracePathTestConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("atmVcc", 2), ("atmVpc", 3), ("atmCOBISigConn", 4))).clone('atmVcc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestConnType.setStatus('current')
atmTracePathTestConnCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 4), AtmConnCastType().clone('p2p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestConnCastType.setStatus('current')
atmTracePathTestTraceSourceIf = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceSourceIf.setStatus('current')
atmTracePathTestP2MpNewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestP2MpNewConn.setStatus('current')
atmTracePathTestOrigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 7), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestOrigVpi.setStatus('current')
atmTracePathTestOrigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 8), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestOrigVci.setStatus('current')
atmTracePathTestCalledParty = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 9), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestCalledParty.setStatus('current')
atmTracePathTestCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 10), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestCallingParty.setStatus('current')
atmTracePathTestRxTrafDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 11), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestRxTrafDescrIndex.setStatus('current')
atmTracePathTestTxTrafDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 12), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTxTrafDescrIndex.setStatus('current')
atmTracePathTestClearCallAtTDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestClearCallAtTDest.setStatus('current')
atmTracePathTestTraceCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceCrankback.setStatus('current')
atmTracePathTestTraceConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceConnId.setStatus('current')
atmTracePathTestTraceCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceCallRef.setStatus('current')
atmTracePathTestPassAlongRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 17), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestPassAlongRequest.setStatus('current')
atmTracePathTestAgeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestAgeTimeout.setStatus('current')
atmTracePathTestRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2))).clone('noop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestRestart.setStatus('current')
atmTracePathTestTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTrapOnCompletion.setStatus('current')
atmTracePathTestRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 21), AtmTraceRecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTracePathTestRecordIndex.setStatus('current')
atmTracePathTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestRowStatus.setStatus('current')
atmTracePathTestTraceNeNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceNeNsc.setStatus('current')
atmTracePathTestTraceRpNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceRpNsc.setStatus('current')
atmTracePathTestTraceIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceIncoming.setStatus('current')
atmTracePathTestPolicyConstraint = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 26), PolicyConstraintIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestPolicyConstraint.setStatus('current')
atmTracePathTestTraceLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 3, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTracePathTestTraceLabels.setStatus('current')
atmTraceFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4))
atmTraceFilterTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: atmTraceFilterTable.setStatus('current')
atmTraceFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTraceFilterIndex"))
if mibBuilder.loadTexts: atmTraceFilterEntry.setStatus('current')
atmTraceFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: atmTraceFilterIndex.setStatus('current')
atmTraceFilterOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 2), AtmTraceOwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterOwner.setStatus('current')
atmTraceFilterConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("svcAndSpvcNotInitiator", 1), ("spvcInitiator", 2), ("svpAndSpvpNotInitiator", 3), ("spvpInitiator", 4), ("atmCOBISigConn", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterConnKind.setStatus('current')
atmTraceFilterConnCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 4), Bits().clone(namedValues=NamedValues(("p2p", 0), ("p2mp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterConnCastType.setStatus('current')
atmTraceFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 5), Bits().clone(namedValues=NamedValues(("cbr", 0), ("rtVbr", 1), ("nrtVbr", 2), ("abr", 3), ("ubr", 4), ("gfr", 5), ("other", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterServiceCategory.setStatus('current')
atmTraceFilterInIf = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterInIf.setStatus('current')
atmTraceFilterOutIf = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterOutIf.setStatus('current')
atmTraceFilterCallingPartyPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 8), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterCallingPartyPrefix.setStatus('current')
atmTraceFilterCallingPartyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160)).clone(152)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterCallingPartyLength.setStatus('current')
atmTraceFilterCalledPartyPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 10), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterCalledPartyPrefix.setStatus('current')
atmTraceFilterCalledPartyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160)).clone(152)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterCalledPartyLength.setStatus('current')
atmTraceFilterClearCallAtTDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterClearCallAtTDest.setStatus('current')
atmTraceFilterTraceCrankback = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTraceCrankback.setStatus('current')
atmTraceFilterTraceConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTraceConnId.setStatus('current')
atmTraceFilterTraceCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTraceCallRef.setStatus('current')
atmTraceFilterPassAlongRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 16), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterPassAlongRequest.setStatus('current')
atmTraceFilterMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 214783647)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterMaxRecords.setStatus('current')
atmTraceFilterRecordCountDown = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterRecordCountDown.setStatus('current')
atmTraceFilterStopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterStopTimeout.setStatus('current')
atmTraceFilterAgeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterAgeTimeout.setStatus('current')
atmTraceFilterPurge = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("purge", 1), ("noop", 2))).clone('noop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterPurge.setStatus('current')
atmTraceFilterTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTrapEnable.setStatus('current')
atmTraceFilterNumMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterNumMatches.setStatus('current')
atmTraceFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterRowStatus.setStatus('current')
atmTraceFilterPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterPolicy.setStatus('current')
atmTraceFilterTraceNeNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTraceNeNsc.setStatus('current')
atmTraceFilterTraceRpNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTraceRpNsc.setStatus('current')
atmTraceFilterTraceIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTraceIncoming.setStatus('current')
atmTraceFilterTraceLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmTraceFilterTraceLabels.setStatus('current')
atmTraceFilterRecordTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: atmTraceFilterRecordTable.setStatus('current')
atmTraceFilterRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTraceFilterIndex"), (0, "ATM-TRACE-MIB", "atmTraceFilterRecordIndex"))
if mibBuilder.loadTexts: atmTraceFilterRecordEntry.setStatus('current')
atmTraceFilterRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 1), AtmTraceRecordIndex())
if mibBuilder.loadTexts: atmTraceFilterRecordIndex.setStatus('current')
atmTraceFilterRecordConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 2), AtmConnKind()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterRecordConnKind.setStatus('current')
atmTraceFilterRecordConnCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 3), AtmConnCastType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterRecordConnCastType.setStatus('current')
atmTraceFilterRecordServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 4), AtmServiceCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterRecordServiceCategory.setStatus('current')
atmTraceFilterRecordInIf = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterRecordInIf.setStatus('current')
atmTraceFilterRecordOutIf = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterRecordOutIf.setStatus('current')
atmTraceFilterRecordCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 7), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterRecordCallingParty.setStatus('current')
atmTraceFilterRecordCalledParty = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 4, 2, 1, 8), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceFilterRecordCalledParty.setStatus('current')
atmTraceRecordGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5))
atmTraceRecordTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: atmTraceRecordTable.setStatus('current')
atmTraceRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTraceRecordIndex"))
if mibBuilder.loadTexts: atmTraceRecordEntry.setStatus('current')
atmTraceRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 1), AtmTraceRecordIndex())
if mibBuilder.loadTexts: atmTraceRecordIndex.setStatus('current')
atmTraceRecordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("traceInProgress", 1), ("traceCompletedNormally", 2), ("traceIncomplete", 3), ("traceExceededIELengthLimitations", 4), ("traceExceededMessageLengthLimitations", 5), ("traceLackResource", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordStatus.setStatus('current')
atmTraceRecordCause = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordCause.setStatus('current')
atmTraceRecordDiags = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordDiags.setStatus('current')
atmTraceRecordTraceSourcePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 5), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceSourcePortId.setStatus('current')
atmTraceRecordTraceSourceDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceSourceDlci.setStatus('current')
atmTraceRecordTraceDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 7), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceDestVpi.setStatus('current')
atmTraceRecordTraceDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 8), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceDestVci.setStatus('current')
atmTraceRecordTraceDestCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 9), CallReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceDestCallRef.setStatus('current')
atmTraceRecordTraceDestEndPtRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 10), AtmEndPointReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceDestEndPtRef.setStatus('current')
atmTraceRecordTraceDestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceDestDlci.setStatus('current')
atmTraceRecordTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTimeStamp.setStatus('current')
atmTraceRecordTraceDestReceiveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 13), MplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceDestReceiveLabel.setStatus('current')
atmTraceRecordTraceDestTransmitLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 1, 1, 14), MplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceRecordTraceDestTransmitLabel.setStatus('current')
atmTraceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2), )
if mibBuilder.loadTexts: atmTraceInfoTable.setStatus('current')
atmTraceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTraceRecordIndex"), (0, "ATM-TRACE-MIB", "atmTraceInfoSequenceIndex"))
if mibBuilder.loadTexts: atmTraceInfoEntry.setStatus('current')
atmTraceInfoSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)))
if mibBuilder.loadTexts: atmTraceInfoSequenceIndex.setStatus('current')
atmTraceInfoNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoNodeId.setStatus('current')
atmTraceInfoOutgoingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoOutgoingPortId.setStatus('current')
atmTraceInfoIncomingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 4), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoIncomingVpi.setStatus('current')
atmTraceInfoIncomingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 5), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoIncomingVci.setStatus('current')
atmTraceInfoIncomingCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 6), CallReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoIncomingCallRef.setStatus('current')
atmTraceInfoIncomingEndPtRef = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 7), AtmEndPointReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoIncomingEndPtRef.setStatus('current')
atmTraceInfoRefusalIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoRefusalIndicator.setStatus('current')
atmTraceInfoCrankBackRcvdAtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoCrankBackRcvdAtDest.setStatus('current')
atmTraceInfoCrankBackGap = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoCrankBackGap.setStatus('current')
atmTraceInfoCrankBackIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoCrankBackIndicator.setStatus('current')
atmTraceInfoCrankBackBlockedTransitType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blockedIncomingLink", 1), ("blockedNode", 2), ("blockedOutgoingLink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoCrankBackBlockedTransitType.setStatus('current')
atmTraceInfoCrankBackBlockedTransitInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoCrankBackBlockedTransitInfo.setStatus('current')
atmTraceInfoCrankBackCause = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoCrankBackCause.setStatus('current')
atmTraceInfoReceiveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 15), MplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoReceiveLabel.setStatus('current')
atmTraceInfoTransmitLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 2, 1, 16), MplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoTransmitLabel.setStatus('current')
atmTraceInfoNeNscTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 3), )
if mibBuilder.loadTexts: atmTraceInfoNeNscTable.setStatus('current')
atmTraceInfoNeNscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 3, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTraceRecordIndex"), (0, "ATM-TRACE-MIB", "atmTraceInfoSequenceIndex"), (0, "ATM-TRACE-MIB", "atmTraceInfoNeNscInterface"), (0, "ATM-TRACE-MIB", "atmTraceInfoNeNscIndex"))
if mibBuilder.loadTexts: atmTraceInfoNeNscEntry.setStatus('current')
atmTraceInfoNeNscInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2))))
if mibBuilder.loadTexts: atmTraceInfoNeNscInterface.setStatus('current')
atmTraceInfoNeNscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)))
if mibBuilder.loadTexts: atmTraceInfoNeNscIndex.setStatus('current')
atmTraceInfoNeNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 3, 1, 3), NetworkEntityNetworkServiceCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoNeNsc.setStatus('current')
atmTraceInfoRpNscTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 4), )
if mibBuilder.loadTexts: atmTraceInfoRpNscTable.setStatus('current')
atmTraceInfoRpNscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 4, 1), ).setIndexNames((0, "ATM-TRACE-MIB", "atmTraceRecordIndex"), (0, "ATM-TRACE-MIB", "atmTraceInfoSequenceIndex"), (0, "ATM-TRACE-MIB", "atmTraceInfoRpNscInterface"), (0, "ATM-TRACE-MIB", "atmTraceInfoRpNscSequenceIndex"))
if mibBuilder.loadTexts: atmTraceInfoRpNscEntry.setStatus('current')
atmTraceInfoRpNscInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2))))
if mibBuilder.loadTexts: atmTraceInfoRpNscInterface.setStatus('current')
atmTraceInfoRpNscSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)))
if mibBuilder.loadTexts: atmTraceInfoRpNscSequenceIndex.setStatus('current')
atmTraceInfoRpNsc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 5, 4, 1, 3), ResourcePartitionNetworkServiceCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTraceInfoRpNsc.setStatus('current')
atmTraceIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 6))
atmTraceIfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 6, 1), )
if mibBuilder.loadTexts: atmTraceIfTable.setStatus('current')
atmTraceIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 6, 1, 1), )
pnniIfEntry.registerAugmentions(("ATM-TRACE-MIB", "atmTraceIfEntry"))
atmTraceIfEntry.setIndexNames(*pnniIfEntry.getIndexNames())
if mibBuilder.loadTexts: atmTraceIfEntry.setStatus('current')
atmTraceIfTraceBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 1, 6, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTraceIfTraceBoundary.setStatus('current')
atmTraceMIBTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 2))
atmTraceMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 2, 0))
atmTraceConnCompletion = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 2, 0, 1)).setObjects(("ATM-TRACE-MIB", "atmTraceConnRecordIndex"))
if mibBuilder.loadTexts: atmTraceConnCompletion.setStatus('current')
atmTracePathTestCompletion = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 2, 0, 2)).setObjects(("ATM-TRACE-MIB", "atmTracePathTestRecordIndex"))
if mibBuilder.loadTexts: atmTracePathTestCompletion.setStatus('current')
atmTracePathFilterTrap = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 2, 0, 3)).setObjects(("ATM-TRACE-MIB", "atmTraceFilterRecordConnKind"))
if mibBuilder.loadTexts: atmTracePathFilterTrap.setStatus('current')
atmTraceMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3))
atmTraceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 1))
atmTraceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2))
atmTraceMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 1, 2)).setObjects(("ATM-TRACE-MIB", "atmTraceMIBMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnAndPathFilterMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathTestMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathFilterMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnAndPathFilterPolicyMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnPolicyMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathTestPolicyMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathFilterPolicyMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnAndPathFilterMplsMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnMplsMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathTestMplsMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathFilterMplsMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceMIBCompliance2 = atmTraceMIBCompliance2.setStatus('current')
atmTraceMIBMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 1)).setObjects(("ATM-TRACE-MIB", "atmTraceMaxConcurrentRequests"), ("ATM-TRACE-MIB", "atmTraceAvailableRequests"), ("ATM-TRACE-MIB", "atmTraceTransitListMaximumSize"), ("ATM-TRACE-MIB", "atmTraceRecordStatus"), ("ATM-TRACE-MIB", "atmTraceRecordTraceSourcePortId"), ("ATM-TRACE-MIB", "atmTraceRecordTimeStamp"), ("ATM-TRACE-MIB", "atmTraceInfoNodeId"), ("ATM-TRACE-MIB", "atmTraceInfoOutgoingPortId"), ("ATM-TRACE-MIB", "atmTraceInfoRefusalIndicator"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceMIBMandatoryGroup = atmTraceMIBMandatoryGroup.setStatus('current')
atmTraceMIBOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 2)).setObjects(("ATM-TRACE-MIB", "atmTraceRecordTraceSourceDlci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceMIBOptionalGroup = atmTraceMIBOptionalGroup.setStatus('current')
atmTraceConnAndPathFilterMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 3)).setObjects(("ATM-TRACE-MIB", "atmTraceRecordTraceDestVpi"), ("ATM-TRACE-MIB", "atmTraceRecordTraceDestVci"), ("ATM-TRACE-MIB", "atmTraceRecordTraceDestCallRef"), ("ATM-TRACE-MIB", "atmTraceRecordTraceDestEndPtRef"), ("ATM-TRACE-MIB", "atmTraceRecordTraceDestDlci"), ("ATM-TRACE-MIB", "atmTraceInfoIncomingVpi"), ("ATM-TRACE-MIB", "atmTraceInfoIncomingVci"), ("ATM-TRACE-MIB", "atmTraceInfoIncomingCallRef"), ("ATM-TRACE-MIB", "atmTraceInfoIncomingEndPtRef"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceConnAndPathFilterMandatoryGroup = atmTraceConnAndPathFilterMandatoryGroup.setStatus('current')
atmTracePathMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 4)).setObjects(("ATM-TRACE-MIB", "atmTraceRecordCause"), ("ATM-TRACE-MIB", "atmTraceRecordDiags"), ("ATM-TRACE-MIB", "atmTraceInfoCrankBackRcvdAtDest"), ("ATM-TRACE-MIB", "atmTraceInfoCrankBackGap"), ("ATM-TRACE-MIB", "atmTraceInfoCrankBackIndicator"), ("ATM-TRACE-MIB", "atmTraceInfoCrankBackBlockedTransitType"), ("ATM-TRACE-MIB", "atmTraceInfoCrankBackBlockedTransitInfo"), ("ATM-TRACE-MIB", "atmTraceInfoCrankBackCause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathMandatoryGroup = atmTracePathMandatoryGroup.setStatus('current')
atmTraceConnMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 5)).setObjects(("ATM-TRACE-MIB", "atmTraceConnOwner"), ("ATM-TRACE-MIB", "atmTraceConnTraceSourceIf"), ("ATM-TRACE-MIB", "atmTraceConnOrigConnType"), ("ATM-TRACE-MIB", "atmTraceConnOrigVpi"), ("ATM-TRACE-MIB", "atmTraceConnOrigVci"), ("ATM-TRACE-MIB", "atmTraceConnEndPtRef"), ("ATM-TRACE-MIB", "atmTraceConnOrigDirection"), ("ATM-TRACE-MIB", "atmTraceConnTraceConnId"), ("ATM-TRACE-MIB", "atmTraceConnTraceCallRef"), ("ATM-TRACE-MIB", "atmTraceConnPassAlongRequest"), ("ATM-TRACE-MIB", "atmTraceConnFailTimeout"), ("ATM-TRACE-MIB", "atmTraceConnAgeTimeout"), ("ATM-TRACE-MIB", "atmTraceConnRestart"), ("ATM-TRACE-MIB", "atmTraceConnRecordIndex"), ("ATM-TRACE-MIB", "atmTraceConnRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceConnMandatoryGroup = atmTraceConnMandatoryGroup.setStatus('current')
atmTraceConnOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 6)).setObjects(("ATM-TRACE-MIB", "atmTraceConnCallRef"), ("ATM-TRACE-MIB", "atmTraceConnOrigDlci"), ("ATM-TRACE-MIB", "atmTraceConnTrapOnCompletion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceConnOptionalGroup = atmTraceConnOptionalGroup.setStatus('current')
atmTracePathTestMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 7)).setObjects(("ATM-TRACE-MIB", "atmTracePathTestOwner"), ("ATM-TRACE-MIB", "atmTracePathTestConnType"), ("ATM-TRACE-MIB", "atmTracePathTestConnCastType"), ("ATM-TRACE-MIB", "atmTracePathTestTraceSourceIf"), ("ATM-TRACE-MIB", "atmTracePathTestP2MpNewConn"), ("ATM-TRACE-MIB", "atmTracePathTestOrigVpi"), ("ATM-TRACE-MIB", "atmTracePathTestOrigVci"), ("ATM-TRACE-MIB", "atmTracePathTestCalledParty"), ("ATM-TRACE-MIB", "atmTracePathTestTxTrafDescrIndex"), ("ATM-TRACE-MIB", "atmTracePathTestRxTrafDescrIndex"), ("ATM-TRACE-MIB", "atmTracePathTestClearCallAtTDest"), ("ATM-TRACE-MIB", "atmTracePathTestTraceCrankback"), ("ATM-TRACE-MIB", "atmTracePathTestPassAlongRequest"), ("ATM-TRACE-MIB", "atmTracePathTestAgeTimeout"), ("ATM-TRACE-MIB", "atmTracePathTestRestart"), ("ATM-TRACE-MIB", "atmTracePathTestRecordIndex"), ("ATM-TRACE-MIB", "atmTracePathTestRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathTestMandatoryGroup = atmTracePathTestMandatoryGroup.setStatus('current')
atmTracePathTestOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 8)).setObjects(("ATM-TRACE-MIB", "atmTracePathTestCallingParty"), ("ATM-TRACE-MIB", "atmTracePathTestTraceConnId"), ("ATM-TRACE-MIB", "atmTracePathTestTraceCallRef"), ("ATM-TRACE-MIB", "atmTracePathTestTrapOnCompletion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathTestOptionalGroup = atmTracePathTestOptionalGroup.setStatus('current')
atmTracePathFilterMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 9)).setObjects(("ATM-TRACE-MIB", "atmTraceFilterControl"), ("ATM-TRACE-MIB", "atmTraceFilterOwner"), ("ATM-TRACE-MIB", "atmTraceFilterConnKind"), ("ATM-TRACE-MIB", "atmTraceFilterInIf"), ("ATM-TRACE-MIB", "atmTraceFilterCalledPartyPrefix"), ("ATM-TRACE-MIB", "atmTraceFilterCalledPartyLength"), ("ATM-TRACE-MIB", "atmTraceFilterClearCallAtTDest"), ("ATM-TRACE-MIB", "atmTraceFilterTraceCrankback"), ("ATM-TRACE-MIB", "atmTraceFilterTraceConnId"), ("ATM-TRACE-MIB", "atmTraceFilterTraceCallRef"), ("ATM-TRACE-MIB", "atmTraceFilterPassAlongRequest"), ("ATM-TRACE-MIB", "atmTraceFilterMaxRecords"), ("ATM-TRACE-MIB", "atmTraceFilterStopTimeout"), ("ATM-TRACE-MIB", "atmTraceFilterAgeTimeout"), ("ATM-TRACE-MIB", "atmTraceFilterPurge"), ("ATM-TRACE-MIB", "atmTraceFilterNumMatches"), ("ATM-TRACE-MIB", "atmTraceFilterRowStatus"), ("ATM-TRACE-MIB", "atmTraceFilterRecordConnKind"), ("ATM-TRACE-MIB", "atmTraceFilterRecordConnCastType"), ("ATM-TRACE-MIB", "atmTraceFilterRecordServiceCategory"), ("ATM-TRACE-MIB", "atmTraceFilterRecordInIf"), ("ATM-TRACE-MIB", "atmTraceFilterRecordOutIf"), ("ATM-TRACE-MIB", "atmTraceFilterRecordCallingParty"), ("ATM-TRACE-MIB", "atmTraceFilterRecordCalledParty"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathFilterMandatoryGroup = atmTracePathFilterMandatoryGroup.setStatus('current')
atmTracePathFilterOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 10)).setObjects(("ATM-TRACE-MIB", "atmTraceFilterConnCastType"), ("ATM-TRACE-MIB", "atmTraceFilterServiceCategory"), ("ATM-TRACE-MIB", "atmTraceFilterOutIf"), ("ATM-TRACE-MIB", "atmTraceFilterCallingPartyPrefix"), ("ATM-TRACE-MIB", "atmTraceFilterCallingPartyLength"), ("ATM-TRACE-MIB", "atmTraceFilterRecordCountDown"), ("ATM-TRACE-MIB", "atmTraceFilterTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathFilterOptionalGroup = atmTracePathFilterOptionalGroup.setStatus('current')
atmTraceIfOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 11)).setObjects(("ATM-TRACE-MIB", "atmTraceIfTraceBoundary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceIfOptionalGroup = atmTraceIfOptionalGroup.setStatus('current')
atmTraceNotificationOptionalGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 12)).setObjects(("ATM-TRACE-MIB", "atmTraceConnCompletion"), ("ATM-TRACE-MIB", "atmTracePathTestCompletion"), ("ATM-TRACE-MIB", "atmTracePathFilterTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceNotificationOptionalGroup = atmTraceNotificationOptionalGroup.setStatus('current')
atmTraceConnAndPathFilterPolicyMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 13)).setObjects(("ATM-TRACE-MIB", "atmTraceInfoNeNsc"), ("ATM-TRACE-MIB", "atmTraceInfoRpNsc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceConnAndPathFilterPolicyMandatoryGroup = atmTraceConnAndPathFilterPolicyMandatoryGroup.setStatus('current')
atmTraceConnPolicyMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 14)).setObjects(("ATM-TRACE-MIB", "atmTraceConnTraceNeNsc"), ("ATM-TRACE-MIB", "atmTraceConnTraceRpNsc"), ("ATM-TRACE-MIB", "atmTraceConnTraceIncoming"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceConnPolicyMandatoryGroup = atmTraceConnPolicyMandatoryGroup.setStatus('current')
atmTracePathTestPolicyMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 15)).setObjects(("ATM-TRACE-MIB", "atmTracePathTestTraceNeNsc"), ("ATM-TRACE-MIB", "atmTracePathTestTraceRpNsc"), ("ATM-TRACE-MIB", "atmTracePathTestTraceIncoming"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathTestPolicyMandatoryGroup = atmTracePathTestPolicyMandatoryGroup.setStatus('current')
atmTracePathFilterPolicyMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 16)).setObjects(("ATM-TRACE-MIB", "atmTraceFilterPolicy"), ("ATM-TRACE-MIB", "atmTraceFilterTraceNeNsc"), ("ATM-TRACE-MIB", "atmTraceFilterTraceRpNsc"), ("ATM-TRACE-MIB", "atmTraceFilterTraceIncoming"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathFilterPolicyMandatoryGroup = atmTracePathFilterPolicyMandatoryGroup.setStatus('current')
atmTraceConnAndPathFilterMplsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 17)).setObjects(("ATM-TRACE-MIB", "atmTraceRecordTraceDestReceiveLabel"), ("ATM-TRACE-MIB", "atmTraceRecordTraceDestTransmitLabel"), ("ATM-TRACE-MIB", "atmTraceInfoReceiveLabel"), ("ATM-TRACE-MIB", "atmTraceInfoTransmitLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceConnAndPathFilterMplsMandatoryGroup = atmTraceConnAndPathFilterMplsMandatoryGroup.setStatus('current')
atmTraceConnMplsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 18)).setObjects(("ATM-TRACE-MIB", "atmTraceConnTraceLabels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceConnMplsMandatoryGroup = atmTraceConnMplsMandatoryGroup.setStatus('current')
atmTracePathTestMplsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 19)).setObjects(("ATM-TRACE-MIB", "atmTracePathTestTraceLabels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathTestMplsMandatoryGroup = atmTracePathTestMplsMandatoryGroup.setStatus('current')
atmTracePathFilterMplsMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 2, 20)).setObjects(("ATM-TRACE-MIB", "atmTraceFilterTraceLabels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTracePathFilterMplsMandatoryGroup = atmTracePathFilterMplsMandatoryGroup.setStatus('current')
atmTraceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 9, 2, 1, 3, 1, 1)).setObjects(("ATM-TRACE-MIB", "atmTraceMIBMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnAndPathFilterMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathMandatoryGroup"), ("ATM-TRACE-MIB", "atmTraceConnMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathTestMandatoryGroup"), ("ATM-TRACE-MIB", "atmTracePathFilterMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmTraceMIBCompliance = atmTraceMIBCompliance.setStatus('deprecated')
mibBuilder.exportSymbols("ATM-TRACE-MIB", atmTraceMaxConcurrentRequests=atmTraceMaxConcurrentRequests, atmTraceInfoRefusalIndicator=atmTraceInfoRefusalIndicator, atmTraceFilterRecordIndex=atmTraceFilterRecordIndex, atmTracePathTestTrapOnCompletion=atmTracePathTestTrapOnCompletion, atmTraceTransitListMaximumSize=atmTraceTransitListMaximumSize, atmTracePathTestRestart=atmTracePathTestRestart, atmTraceInfoOutgoingPortId=atmTraceInfoOutgoingPortId, atmTraceInfoNeNscTable=atmTraceInfoNeNscTable, atmTraceInfoCrankBackBlockedTransitInfo=atmTraceInfoCrankBackBlockedTransitInfo, atmTraceMIBCompliances=atmTraceMIBCompliances, atmTracePathTestPolicyMandatoryGroup=atmTracePathTestPolicyMandatoryGroup, atmTracePathTestOwner=atmTracePathTestOwner, atmTraceInfoCrankBackIndicator=atmTraceInfoCrankBackIndicator, atmTraceRecordTraceDestDlci=atmTraceRecordTraceDestDlci, atmTracePathTestMplsMandatoryGroup=atmTracePathTestMplsMandatoryGroup, atmTracePathTestEntry=atmTracePathTestEntry, atmTraceRecordTraceDestEndPtRef=atmTraceRecordTraceDestEndPtRef, atmTracePathTestCalledParty=atmTracePathTestCalledParty, atmTraceInfoCrankBackBlockedTransitType=atmTraceInfoCrankBackBlockedTransitType, atmTraceMIBMandatoryGroup=atmTraceMIBMandatoryGroup, atmTracePathTestCompletion=atmTracePathTestCompletion, atmTraceFilterAgeTimeout=atmTraceFilterAgeTimeout, atmTraceFilterRecordOutIf=atmTraceFilterRecordOutIf, atmTraceInfoIncomingEndPtRef=atmTraceInfoIncomingEndPtRef, atmTraceInfoNeNscIndex=atmTraceInfoNeNscIndex, atmTracePathTestPassAlongRequest=atmTracePathTestPassAlongRequest, atmTracePathTestTraceIncoming=atmTracePathTestTraceIncoming, atmTracePathTestTraceRpNsc=atmTracePathTestTraceRpNsc, atmTraceFilterCalledPartyLength=atmTraceFilterCalledPartyLength, atmTraceConnCompletion=atmTraceConnCompletion, atmTraceFilterOutIf=atmTraceFilterOutIf, atmTraceRecordTable=atmTraceRecordTable, atmTraceConnPolicyMandatoryGroup=atmTraceConnPolicyMandatoryGroup, atmTraceFilterCallingPartyLength=atmTraceFilterCallingPartyLength, atmTraceConnOrigConnType=atmTraceConnOrigConnType, atmTraceIfGroup=atmTraceIfGroup, atmTraceInfoIncomingVpi=atmTraceInfoIncomingVpi, atmTraceMIBGroups=atmTraceMIBGroups, atmTraceFilterTraceLabels=atmTraceFilterTraceLabels, atmTraceInfoSequenceIndex=atmTraceInfoSequenceIndex, atmTraceFilterTraceIncoming=atmTraceFilterTraceIncoming, atmTracePathTestMandatoryGroup=atmTracePathTestMandatoryGroup, atmTracePathTestTable=atmTracePathTestTable, atmTraceFilterRecordConnCastType=atmTraceFilterRecordConnCastType, atmTraceFilterCalledPartyPrefix=atmTraceFilterCalledPartyPrefix, atmTracePathTestGroup=atmTracePathTestGroup, atmTraceFilterClearCallAtTDest=atmTraceFilterClearCallAtTDest, atmTraceConnTraceRpNsc=atmTraceConnTraceRpNsc, atmTracePathFilterMandatoryGroup=atmTracePathFilterMandatoryGroup, atmTraceFilterControl=atmTraceFilterControl, atmfTrace=atmfTrace, atmTraceConnTrapOnCompletion=atmTraceConnTrapOnCompletion, atmTraceRecordTraceDestVpi=atmTraceRecordTraceDestVpi, atmTraceFilterInIf=atmTraceFilterInIf, atmTraceRecordStatus=atmTraceRecordStatus, atmTraceInfoRpNscInterface=atmTraceInfoRpNscInterface, atmTraceRecordTraceSourceDlci=atmTraceRecordTraceSourceDlci, atmTracePathTestCallingParty=atmTracePathTestCallingParty, atmTracePathMandatoryGroup=atmTracePathMandatoryGroup, atmTraceMIBObjects=atmTraceMIBObjects, atmTraceRecordTraceSourcePortId=atmTraceRecordTraceSourcePortId, atmTraceFilterRowStatus=atmTraceFilterRowStatus, atmTracePathTestAgeTimeout=atmTracePathTestAgeTimeout, atmTracePathTestClearCallAtTDest=atmTracePathTestClearCallAtTDest, atmTraceInfoRpNscSequenceIndex=atmTraceInfoRpNscSequenceIndex, atmTraceIfTraceBoundary=atmTraceIfTraceBoundary, atmTracePathTestP2MpNewConn=atmTracePathTestP2MpNewConn, atmTraceInfoCrankBackRcvdAtDest=atmTraceInfoCrankBackRcvdAtDest, AtmTraceRecordIndex=AtmTraceRecordIndex, atmTraceConnRecordIndex=atmTraceConnRecordIndex, atmTraceFilterGroup=atmTraceFilterGroup, atmTraceConnAndPathFilterMandatoryGroup=atmTraceConnAndPathFilterMandatoryGroup, atmTraceInfoCrankBackGap=atmTraceInfoCrankBackGap, atmTraceFilterRecordTable=atmTraceFilterRecordTable, atmTraceConnRowStatus=atmTraceConnRowStatus, atmTracePathFilterMplsMandatoryGroup=atmTracePathFilterMplsMandatoryGroup, atmTraceConnOrigVpi=atmTraceConnOrigVpi, atmTraceConnOrigVci=atmTraceConnOrigVci, atmTraceFilterRecordCountDown=atmTraceFilterRecordCountDown, atmTraceMIBOptionalGroup=atmTraceMIBOptionalGroup, PYSNMP_MODULE_ID=atmTraceMIB, atmTraceBaseGroup=atmTraceBaseGroup, atmTraceRecordGroup=atmTraceRecordGroup, AtmEndPointReference=AtmEndPointReference, atmTraceConnGroup=atmTraceConnGroup, atmTraceConnCallRef=atmTraceConnCallRef, atmTraceRecordTraceDestReceiveLabel=atmTraceRecordTraceDestReceiveLabel, atmTraceFilterRecordInIf=atmTraceFilterRecordInIf, atmTraceInfoNeNscInterface=atmTraceInfoNeNscInterface, atmTraceInfoRpNscEntry=atmTraceInfoRpNscEntry, atmTraceFilterTraceConnId=atmTraceFilterTraceConnId, atmTraceConnRestart=atmTraceConnRestart, atmTracePathFilterPolicyMandatoryGroup=atmTracePathFilterPolicyMandatoryGroup, atmTracePathTestTraceCrankback=atmTracePathTestTraceCrankback, atmTraceFilterRecordCallingParty=atmTraceFilterRecordCallingParty, atmTraceFilterOwner=atmTraceFilterOwner, atmTraceFilterTraceNeNsc=atmTraceFilterTraceNeNsc, atmTraceIfTable=atmTraceIfTable, atmTraceRecordIndex=atmTraceRecordIndex, atmTraceConnTraceCallRef=atmTraceConnTraceCallRef, atmTraceAvailableRequests=atmTraceAvailableRequests, atmTraceConnOrigDirection=atmTraceConnOrigDirection, atmTraceFilterIndex=atmTraceFilterIndex, atmTraceInfoRpNsc=atmTraceInfoRpNsc, atmTracePathTestConnCastType=atmTracePathTestConnCastType, atmTracePathFilterTrap=atmTracePathFilterTrap, atmTraceFilterRecordConnKind=atmTraceFilterRecordConnKind, atmTraceInfoRpNscTable=atmTraceInfoRpNscTable, atmTraceMIBTraps=atmTraceMIBTraps, atmTraceFilterConnKind=atmTraceFilterConnKind, atmTraceRecordTimeStamp=atmTraceRecordTimeStamp, atmTraceInfoIncomingVci=atmTraceInfoIncomingVci, atmTraceInfoNodeId=atmTraceInfoNodeId, atmTracePathTestOptionalGroup=atmTracePathTestOptionalGroup, atmTraceConnOptionalGroup=atmTraceConnOptionalGroup, atmTraceFilterStopTimeout=atmTraceFilterStopTimeout, atmTraceConnEndPtRef=atmTraceConnEndPtRef, atmTracePathTestOrigVci=atmTracePathTestOrigVci, atmTracePathTestTraceCallRef=atmTracePathTestTraceCallRef, atmTraceInfoNeNscEntry=atmTraceInfoNeNscEntry, atmTraceConnOrigDlci=atmTraceConnOrigDlci, CallReference=CallReference, atmTracePathTestRecordIndex=atmTracePathTestRecordIndex, atmTraceInfoIncomingCallRef=atmTraceInfoIncomingCallRef, atmTraceInfoNeNsc=atmTraceInfoNeNsc, atmTraceIfEntry=atmTraceIfEntry, atmTraceInfoTable=atmTraceInfoTable, atmTraceConnAgeTimeout=atmTraceConnAgeTimeout, atmTracePathTestRowStatus=atmTracePathTestRowStatus, atmfSignalling=atmfSignalling, atmForumNetworkManagement=atmForumNetworkManagement, atmTraceInfoCrankBackCause=atmTraceInfoCrankBackCause, atmTraceFilterTable=atmTraceFilterTable, atmTraceConnTraceConnId=atmTraceConnTraceConnId, atmTraceRecordTraceDestTransmitLabel=atmTraceRecordTraceDestTransmitLabel, atmTracePathTestTxTrafDescrIndex=atmTracePathTestTxTrafDescrIndex, atmTracePathTestTraceSourceIf=atmTracePathTestTraceSourceIf, atmTraceConnEntry=atmTraceConnEntry, atmTraceMIBConformance=atmTraceMIBConformance, atmTraceFilterPassAlongRequest=atmTraceFilterPassAlongRequest, atmTraceFilterMaxRecords=atmTraceFilterMaxRecords, atmTracePathTestTraceNeNsc=atmTracePathTestTraceNeNsc, atmTraceFilterServiceCategory=atmTraceFilterServiceCategory, atmTraceMIBCompliance=atmTraceMIBCompliance, atmTracePathTestRxTrafDescrIndex=atmTracePathTestRxTrafDescrIndex, atmTraceMIB=atmTraceMIB, atmTracePathTestPolicyConstraint=atmTracePathTestPolicyConstraint, atmForum=atmForum, atmTraceIfOptionalGroup=atmTraceIfOptionalGroup, atmTraceRecordDiags=atmTraceRecordDiags, atmTracePathTestIndex=atmTracePathTestIndex, AtmTraceOwnerString=AtmTraceOwnerString, atmTracePathTestTraceConnId=atmTracePathTestTraceConnId, atmTraceFilterEntry=atmTraceFilterEntry, atmTraceFilterTrapEnable=atmTraceFilterTrapEnable, atmTraceRecordCause=atmTraceRecordCause, atmTraceNotificationOptionalGroup=atmTraceNotificationOptionalGroup, atmTraceInfoTransmitLabel=atmTraceInfoTransmitLabel, atmTraceConnTraceIncoming=atmTraceConnTraceIncoming, atmTracePathTestOrigVpi=atmTracePathTestOrigVpi, atmTraceFilterTraceCallRef=atmTraceFilterTraceCallRef, atmTraceConnAndPathFilterPolicyMandatoryGroup=atmTraceConnAndPathFilterPolicyMandatoryGroup, atmTraceConnTraceLabels=atmTraceConnTraceLabels, atmTraceFilterRecordEntry=atmTraceFilterRecordEntry, atmTraceRecordTraceDestVci=atmTraceRecordTraceDestVci, atmTraceFilterCallingPartyPrefix=atmTraceFilterCallingPartyPrefix, atmTraceFilterNumMatches=atmTraceFilterNumMatches, atmTraceFilterRecordCalledParty=atmTraceFilterRecordCalledParty, atmTraceConnMandatoryGroup=atmTraceConnMandatoryGroup, atmTracePathTestTraceLabels=atmTracePathTestTraceLabels, atmTraceConnIndex=atmTraceConnIndex, atmTracePathTestConnType=atmTracePathTestConnType, atmTraceMIBCompliance2=atmTraceMIBCompliance2, atmTraceConnFailTimeout=atmTraceConnFailTimeout, atmTraceConnTraceSourceIf=atmTraceConnTraceSourceIf, atmTraceRecordTraceDestCallRef=atmTraceRecordTraceDestCallRef, atmTraceInfoReceiveLabel=atmTraceInfoReceiveLabel, atmTraceFilterPurge=atmTraceFilterPurge, atmTraceFilterRecordServiceCategory=atmTraceFilterRecordServiceCategory, atmTraceConnMplsMandatoryGroup=atmTraceConnMplsMandatoryGroup, atmTraceFilterTraceCrankback=atmTraceFilterTraceCrankback, atmTracePathFilterOptionalGroup=atmTracePathFilterOptionalGroup, atmTraceFilterPolicy=atmTraceFilterPolicy, atmTraceInfoEntry=atmTraceInfoEntry, atmTraceConnPassAlongRequest=atmTraceConnPassAlongRequest, atmTraceConnOwner=atmTraceConnOwner, atmTraceConnAndPathFilterMplsMandatoryGroup=atmTraceConnAndPathFilterMplsMandatoryGroup, atmTraceConnTraceNeNsc=atmTraceConnTraceNeNsc, atmTraceFilterConnCastType=atmTraceFilterConnCastType, atmTraceMIBTrapsPrefix=atmTraceMIBTrapsPrefix, atmTraceRecordEntry=atmTraceRecordEntry, atmTraceFilterTraceRpNsc=atmTraceFilterTraceRpNsc, atmTraceConnTable=atmTraceConnTable)
