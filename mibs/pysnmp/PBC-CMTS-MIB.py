#
# PySNMP MIB module PBC-CMTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PBC-CMTS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
docsDevEvId, docsDevEvLevel, docsDevEvText = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvId", "docsDevEvLevel", "docsDevEvText")
docsIfCmtsCmStatusIndex, docsIfCmtsCmStatusEntry = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusIndex", "docsIfCmtsCmStatusEntry")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
pbcCaps, pbcManagement, pacificBroadband, pbcModuleRegs = mibBuilder.importSymbols("PBC-ENT-MIB", "pbcCaps", "pbcManagement", "pacificBroadband", "pbcModuleRegs")
pbcCardIfPortIndex, = mibBuilder.importSymbols("PBC-GENERIC-MIB", "pbcCardIfPortIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, TimeTicks, Gauge32, Bits, Unsigned32, Integer32, ModuleIdentity, Counter32, ObjectIdentity, Counter64, IpAddress, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Gauge32", "Bits", "Unsigned32", "Integer32", "ModuleIdentity", "Counter32", "ObjectIdentity", "Counter64", "IpAddress", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeInterval, DisplayString, MacAddress, TruthValue, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "DisplayString", "MacAddress", "TruthValue", "TextualConvention", "DateAndTime")
pbcCmtsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5987, 1, 1, 2))
if mibBuilder.loadTexts: pbcCmtsMib.setLastUpdated('200106211721Z')
if mibBuilder.loadTexts: pbcCmtsMib.setOrganization('Pacific Broadband Communications')
class TenthdBmV(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class TenthdB(TextualConvention, Integer32):
    status = 'current'

class OneHundredthdBmVPerHz(TextualConvention, Integer32):
    status = 'current'

pbcCmts = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2))
pbcCmtsIfMibExtendedObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1))
pbcGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 1))
pbcDownStreamMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2))
pbcCmtsIfDownstreamNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfDownstreamNumEntries.setStatus('current')
pbcCmtsIfDownstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: pbcCmtsIfDownstreamChannelTable.setStatus('current')
pbcCmtsIfDownstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcCmtsIfDownstreamChannelEntry.setStatus('current')
pbcCmtsIfDownstreamIfTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dBmV32", 1), ("dBmV38", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfDownstreamIfTxPower.setStatus('current')
pbcUpStreamMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3))
pbcCmtsIfUpstreamNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamNumEntries.setStatus('current')
pbcCmtsIfUpstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: pbcCmtsIfUpstreamChannelTable.setStatus('current')
pbcCmtsIfUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcCmtsIfUpstreamChannelEntry.setStatus('current')
pbcCmtsIfUpstreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamPort.setStatus('current')
pbcCmtsIfUpstreamOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("available", 1), ("standby", 2), ("inUse", 3), ("scanning", 4), ("unlicensed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamOperMode.setStatus('current')
pbcCmtsIfUpstreamCmdRcvdPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 3), TenthdBmV()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmdRcvdPwr.setStatus('current')
pbcCmtsIfUpstreamPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 4), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamPowerLevel.setStatus('current')
pbcCmtsIfUpstreamMER = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 5), TenthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamMER.setStatus('current')
pbcCmtsIfUpstreamHcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamHcsErrors.setStatus('current')
pbcCmtsIfUpstreamCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCrcErrors.setStatus('current')
pbcCmtsIfUpstreamCER = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCER.setStatus('current')
pbcCmtsIfUpstreamCmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmTotal.setStatus('current')
pbcCmtsIfUpstreamCmRangeAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRangeAborted.setStatus('current')
pbcCmtsIfUpstreamCmRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRanging.setStatus('current')
pbcCmtsIfUpstreamCmRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRangingComplete.setStatus('current')
pbcCmtsIfUpstreamCmIpComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmIpComplete.setStatus('current')
pbcCmtsIfUpstreamCmRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRegistered.setStatus('current')
pbcCmtsIfUpstreamCmRogue = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfUpstreamCmRogue.setStatus('current')
pbcMacMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4))
pbcCmtsIfMacTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: pbcCmtsIfMacTable.setStatus('current')
pbcCmtsIfMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcCmtsIfMacEntry.setStatus('current')
pbcCmtsIfMacCmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmTotal.setStatus('current')
pbcCmtsIfMacCmRangeAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRangeAborted.setStatus('current')
pbcCmtsIfMacCmRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRanging.setStatus('current')
pbcCmtsIfMacCmRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRangingComplete.setStatus('current')
pbcCmtsIfMacCmIpComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmIpComplete.setStatus('current')
pbcCmtsIfMacCmRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRegistered.setStatus('current')
pbcCmtsIfMacCmRogue = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsIfMacCmRogue.setStatus('current')
pbcCmtsCmMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5))
pbcCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: pbcCmtsCmStatusTable.setStatus('current')
pbcCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1), )
docsIfCmtsCmStatusEntry.registerAugmentions(("PBC-CMTS-MIB", "pbcCmtsCmStatusEntry"))
pbcCmtsCmStatusEntry.setIndexNames(*docsIfCmtsCmStatusEntry.getIndexNames())
if mibBuilder.loadTexts: pbcCmtsCmStatusEntry.setStatus('current')
pbcCmtsCmStatusFirstOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusFirstOnline.setStatus('current')
pbcCmtsCmStatusLastOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusLastOnline.setStatus('current')
pbcCmtsCmStatusTimesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusTimesOnline.setStatus('current')
pbcCmtsCmStatusPercentOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusPercentOnline.setStatus('current')
pbcCmtsCmStatusMinOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMinOnline.setStatus('current')
pbcCmtsCmStatusMaxOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMaxOnline.setStatus('current')
pbcCmtsCmStatusAvgOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusAvgOnline.setStatus('current')
pbcCmtsCmStatusMinOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMinOffline.setStatus('current')
pbcCmtsCmStatusMaxOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusMaxOffline.setStatus('current')
pbcCmtsCmStatusAvgOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 1, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsCmStatusAvgOffline.setStatus('current')
pbcCmtsRogueCmTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2), )
if mibBuilder.loadTexts: pbcCmtsRogueCmTable.setStatus('current')
pbcCmtsRogueCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1), ).setIndexNames((0, "PBC-CMTS-MIB", "pbcCmtsRogueCmMacAddress"))
if mibBuilder.loadTexts: pbcCmtsRogueCmEntry.setStatus('current')
pbcCmtsRogueCmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmMacAddress.setStatus('current')
pbcCmtsRogueCmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmIpAddress.setStatus('current')
pbcCmtsRogueCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmPtr.setStatus('current')
pbcCmtsRogueCmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unProvisioned", 1), ("rigged", 2), ("configured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmType.setStatus('current')
pbcCmtsRogueCmFirstActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmFirstActive.setStatus('current')
pbcCmtsRogueCmLastActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 1, 5, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsRogueCmLastActive.setStatus('current')
pbcCmtsCableSpectrumManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2))
pbcCmtsSpectrumAnalysisMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2))
pbcCmtsSpectrumAnalysisObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1))
pbcSpectrumAnalysisRFInputTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: pbcSpectrumAnalysisRFInputTable.setStatus('current')
pbcSpectrumAnalysisRFInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"))
if mibBuilder.loadTexts: pbcSpectrumAnalysisRFInputEntry.setStatus('current')
pbcSpectrumAnalysisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisEnable.setStatus('current')
pbcSpectrumAnalysisCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("available", 1), ("scanInProgress", 2), ("complete", 3), ("generalFailure", 4), ("noResources", 5))).clone('available')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisCmdStatus.setStatus('current')
pbcSpectrumAnalysisIntegrationLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 3), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisIntegrationLen.setStatus('current')
pbcSpectrumAnalysisFreqStep = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kHz20", 1), ("kHz40", 2), ("kHz80", 3), ("kHz160", 4))).clone('kHz160')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqStep.setStatus('current')
pbcSpectrumAnalysisFreqMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 5), Unsigned32().clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqMin.setStatus('current')
pbcSpectrumAnalysisFreqMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 6), Unsigned32().clone(42000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFreqMax.setStatus('current')
pbcSpectrumAnalysisArraySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArraySize.setStatus('current')
pbcSpectrumAnalysisActiveArray = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisActiveArray.setStatus('current')
pbcSpectrumAnalysisArrayIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexTable.setStatus('current')
pbcSpectrumAnalysisArrayIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"), (0, "PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndex"))
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexEntry.setStatus('current')
pbcSpectrumAnalysisArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndex.setStatus('current')
pbcSpectrumAnalysisArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("available", 1), ("scanning", 2), ("scanComplete", 3), ("abort", 4))).clone('available')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayStatus.setStatus('current')
pbcSpectrumAnalysisArrayScanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayScanStart.setStatus('current')
pbcSpectrumAnalysisArrayScanStop = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayScanStop.setStatus('current')
pbcSpectrumAnalysisDataTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3), )
if mibBuilder.loadTexts: pbcSpectrumAnalysisDataTable.setStatus('current')
pbcSpectrumAnalysisDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"), (0, "PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndex"), (0, "PBC-CMTS-MIB", "pbcSpectrumAnalysisFrequency"))
if mibBuilder.loadTexts: pbcSpectrumAnalysisDataEntry.setStatus('current')
pbcSpectrumAnalysisFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisFrequency.setStatus('current')
pbcSpectrumAnalysisPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 1, 3, 1, 2), OneHundredthdBmVPerHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcSpectrumAnalysisPower.setStatus('current')
pbcCmtsSpectrumAnalysisNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2))
pbcCmtsSpectrumAnalysisNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationTable.setStatus('current')
pbcCmtsSpectrumAnalysisNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfPortIndex"))
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationEntry.setStatus('current')
pbcCmtsSpectrumAnalysisEnableSweepNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisEnableSweepNotification.setStatus('current')
pbcSweepNotificationRecipient = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSweepNotificationRecipient.setStatus('current')
pbcSweepNotificationRecipientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcSweepNotificationRecipientPort.setStatus('current')
pbcCmtsSpectrumAnalysisNotificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv2c", 1), ("snmpv3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisNotificationType.setStatus('current')
pbcCmtsSpectrumAnalysisNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3))
pbcCmtsSpectrumAnalysisNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1))
pbcCardIfPortIndexID = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcCardIfPortIndexID.setStatus('current')
pbcSpectrumAnalysisArrayIndexID = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayIndexID.setStatus('current')
pbcSpectrumAnalysisArrayStatusID = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcSpectrumAnalysisArrayStatusID.setStatus('current')
pbcCmtsSpectrumAnalysisSweepComplete = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 2, 2, 3, 1, 1)).setObjects(("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndexID"), ("PBC-CMTS-MIB", "pbcCardIfPortIndexID"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayStatusID"))
if mibBuilder.loadTexts: pbcCmtsSpectrumAnalysisSweepComplete.setStatus('current')
pbcCmtsNotificationManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3))
pbcCmtsEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsEventsEnable.setStatus('current')
pbcCmtsNotificationsControl = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 2), Bits().clone(namedValues=NamedValues(("envMon", 0), ("chassis", 1), ("software", 2), ("access", 3), ("config", 4), ("dataPath", 5), ("rfInterface", 6), ("flapList", 7), ("debug", 8), ("cmStateChange", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsNotificationsControl.setStatus('current')
pbcCmtsSystemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3))
pbcCmtsEnvMonNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsEnvMonNotification.setStatus('current')
pbcCmtsChassisNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsChassisNotification.setStatus('current')
pbcCmtsSoftwareNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 3)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsSoftwareNotification.setStatus('current')
pbcCmtsAccessNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 4)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsAccessNotification.setStatus('current')
pbcCmtsConfigNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 5)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsConfigNotification.setStatus('current')
pbcCmtsDataPathNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 6)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsDataPathNotification.setStatus('current')
pbcCmtsRfInterfaceNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 7)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsRfInterfaceNotification.setStatus('current')
pbcCmtsFlapListNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 8)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsFlapListNotification.setStatus('current')
pbcCmtsDebugNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 9)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsDebugNotification.setStatus('current')
pbcCmtsCmStateChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 3, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"))
if mibBuilder.loadTexts: pbcCmtsCmStateChangeNotification.setStatus('current')
pbcCmtsModemEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 3, 4), Bits().clone(namedValues=NamedValues(("deRanging", 0), ("registration", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsModemEventsEnable.setStatus('current')
pbcCmtsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4))
pbcCmtsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1))
pbcCmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 1)).setObjects(("PBC-CMTS-MIB", "pbcCmtsIfDownstreamNumEntries"), ("PBC-CMTS-MIB", "pbcCmtsIfDownstreamIfTxPower"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamNumEntries"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamPort"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamOperMode"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmdRcvdPwr"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamPowerLevel"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamHcsErrors"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCrcErrors"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmTotal"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRangeAborted"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRanging"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRangingComplete"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmIpComplete"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRegistered"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmTotal"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRangeAborted"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRanging"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRangingComplete"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmIpComplete"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmMacAddress"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmIpAddress"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmPtr"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmType"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmFirstActive"), ("PBC-CMTS-MIB", "pbcCmtsRogueCmLastActive"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusFirstOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusLastOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusTimesOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusPercentOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMinOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMaxOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusAvgOnline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMinOffline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusMaxOffline"), ("PBC-CMTS-MIB", "pbcCmtsCmStatusAvgOffline"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRogue"), ("PBC-CMTS-MIB", "pbcCmtsIfMacCmRogue"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCER"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamMER"), ("PBC-CMTS-MIB", "pbcCmtsIfUpstreamCmRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsGroup = pbcCmtsGroup.setStatus('current')
pbcCableSpectrumManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 2)).setObjects(("PBC-CMTS-MIB", "pbcSpectrumAnalysisEnable"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisCmdStatus"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisIntegrationLen"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFreqStep"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFreqMin"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFreqMax"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArraySize"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisActiveArray"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndex"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayStatus"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisFrequency"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisPower"), ("PBC-CMTS-MIB", "pbcCmtsSpectrumAnalysisEnableSweepNotification"), ("PBC-CMTS-MIB", "pbcSweepNotificationRecipient"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayScanStart"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayScanStop"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayIndexID"), ("PBC-CMTS-MIB", "pbcCardIfPortIndexID"), ("PBC-CMTS-MIB", "pbcSpectrumAnalysisArrayStatusID"), ("PBC-CMTS-MIB", "pbcCmtsSpectrumAnalysisNotificationType"), ("PBC-CMTS-MIB", "pbcSweepNotificationRecipientPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCableSpectrumManagementGroup = pbcCableSpectrumManagementGroup.setStatus('current')
pbcCmtsNotificationManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 3)).setObjects(("PBC-CMTS-MIB", "pbcCmtsModemEventsEnable"), ("PBC-CMTS-MIB", "pbcCmtsNotificationsControl"), ("PBC-CMTS-MIB", "pbcCmtsEventsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsNotificationManagementGroup = pbcCmtsNotificationManagementGroup.setStatus('current')
pbcCmtsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 4)).setObjects(("PBC-CMTS-MIB", "pbcCmtsEnvMonNotification"), ("PBC-CMTS-MIB", "pbcCmtsSpectrumAnalysisSweepComplete"), ("PBC-CMTS-MIB", "pbcCmtsChassisNotification"), ("PBC-CMTS-MIB", "pbcCmtsSoftwareNotification"), ("PBC-CMTS-MIB", "pbcCmtsAccessNotification"), ("PBC-CMTS-MIB", "pbcCmtsCmStateChangeNotification"), ("PBC-CMTS-MIB", "pbcCmtsRfInterfaceNotification"), ("PBC-CMTS-MIB", "pbcCmtsFlapListNotification"), ("PBC-CMTS-MIB", "pbcCmtsDataPathNotification"), ("PBC-CMTS-MIB", "pbcCmtsConfigNotification"), ("PBC-CMTS-MIB", "pbcCmtsDebugNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsNotificationGroup = pbcCmtsNotificationGroup.setStatus('current')
pbcFlapListManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 1, 5)).setObjects(("PBC-CMTS-MIB", "pbcCmtsFlapListAgeMinutes"), ("PBC-CMTS-MIB", "pbcCmtsFlapListIMRetryInterval"), ("PBC-CMTS-MIB", "pbcCmtsFlapListCERThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListMERThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListQPSKSNRThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListQAM16SNRThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListPowerAdjustThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListSMMissThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFreqThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListSize"), ("PBC-CMTS-MIB", "pbcUsFlapListControlIMRetryInterval"), ("PBC-CMTS-MIB", "pbcUsFlapListControlCERThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlMERThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlQPSKSNRThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlQAM16SNRThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlPowerAdjustThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlSMMissThreshold"), ("PBC-CMTS-MIB", "pbcUsFlapListControlFreqThreshold"), ("PBC-CMTS-MIB", "pbcCmtsFlapListMacAddr"), ("PBC-CMTS-MIB", "pbcCmtsFlapListUpstreamIfIndex"), ("PBC-CMTS-MIB", "pbcCmtsFlapListDownstreamIfIndex"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFlapCount"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFlapCause"), ("PBC-CMTS-MIB", "pbcCmtsFlapListFreqDrift"), ("PBC-CMTS-MIB", "pbcCmtsFlapListEventsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcFlapListManagementGroup = pbcFlapListManagementGroup.setStatus('current')
pbcCmtsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 2))
pbcCmtsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5987, 2, 2, 4, 2, 1)).setObjects(("PBC-CMTS-MIB", "pbcCmtsGroup"), ("PBC-CMTS-MIB", "pbcCableSpectrumManagementGroup"), ("PBC-CMTS-MIB", "pbcCmtsNotificationGroup"), ("PBC-CMTS-MIB", "pbcFlapListManagementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcCmtsBasicCompliance = pbcCmtsBasicCompliance.setStatus('current')
pbcFlapListManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5))
pbcFlapListObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1))
pbcCmtsFlapListAgeMinutes = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListAgeMinutes.setStatus('current')
pbcCmtsFlapListIMRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListIMRetryInterval.setStatus('current')
pbcCmtsFlapListCERThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListCERThreshold.setStatus('current')
pbcCmtsFlapListMERThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 4), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListMERThreshold.setStatus('current')
pbcCmtsFlapListQPSKSNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 5), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListQPSKSNRThreshold.setStatus('current')
pbcCmtsFlapListQAM16SNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 6), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListQAM16SNRThreshold.setStatus('current')
pbcCmtsFlapListPowerAdjustThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 7), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListPowerAdjustThreshold.setStatus('current')
pbcCmtsFlapListSMMissThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListSMMissThreshold.setStatus('current')
pbcCmtsFlapListFreqThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListFreqThreshold.setStatus('current')
pbcCmtsFlapListSize = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListSize.setStatus('current')
pbcUsFlapListControlTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11), )
if mibBuilder.loadTexts: pbcUsFlapListControlTable.setStatus('current')
pbcUsFlapListControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pbcUsFlapListControlEntry.setStatus('current')
pbcUsFlapListControlIMRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlIMRetryInterval.setStatus('current')
pbcUsFlapListControlCERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlCERThreshold.setStatus('current')
pbcUsFlapListControlMERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 3), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlMERThreshold.setStatus('current')
pbcUsFlapListControlQPSKSNRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 4), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlQPSKSNRThreshold.setStatus('current')
pbcUsFlapListControlQAM16SNRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 5), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlQAM16SNRThreshold.setStatus('current')
pbcUsFlapListControlPowerAdjustThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 6), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlPowerAdjustThreshold.setStatus('current')
pbcUsFlapListControlSMMissThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlSMMissThreshold.setStatus('current')
pbcUsFlapListControlFreqThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcUsFlapListControlFreqThreshold.setStatus('current')
pbcCmtsFlapListTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12), )
if mibBuilder.loadTexts: pbcCmtsFlapListTable.setStatus('current')
pbcCmtsFlapListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1), ).setIndexNames((0, "PBC-CMTS-MIB", "pbcCmtsFlapListMacAddr"))
if mibBuilder.loadTexts: pbcCmtsFlapListEntry.setStatus('current')
pbcCmtsFlapListMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListMacAddr.setStatus('current')
pbcCmtsFlapListUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListUpstreamIfIndex.setStatus('current')
pbcCmtsFlapListDownstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListDownstreamIfIndex.setStatus('current')
pbcCmtsFlapListFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListFlapCount.setStatus('current')
pbcCmtsFlapListFlapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("imRetry", 1), ("cer", 2), ("mer", 3), ("snrQpsk", 4), ("snrQam16", 5), ("powerAdjust", 6), ("smMiss", 7), ("freqDrift", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListFlapCause.setStatus('current')
pbcCmtsFlapListFreqDrift = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcCmtsFlapListFreqDrift.setStatus('current')
pbcCmtsFlapListEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5987, 2, 2, 5, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcCmtsFlapListEventsEnable.setStatus('current')
pbcG10CMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 1001))
pbcG1CMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 1002))
mibBuilder.exportSymbols("PBC-CMTS-MIB", pbcSpectrumAnalysisArraySize=pbcSpectrumAnalysisArraySize, pbcCmtsFlapListIMRetryInterval=pbcCmtsFlapListIMRetryInterval, pbcCmtsIfMacCmIpComplete=pbcCmtsIfMacCmIpComplete, pbcDownStreamMgmt=pbcDownStreamMgmt, pbcG10CMTS=pbcG10CMTS, TenthdB=TenthdB, pbcUsFlapListControlQPSKSNRThreshold=pbcUsFlapListControlQPSKSNRThreshold, pbcSpectrumAnalysisDataEntry=pbcSpectrumAnalysisDataEntry, pbcCmtsFlapListQPSKSNRThreshold=pbcCmtsFlapListQPSKSNRThreshold, pbcCmtsFlapListFlapCause=pbcCmtsFlapListFlapCause, pbcCmtsIfMacCmRangingComplete=pbcCmtsIfMacCmRangingComplete, pbcCmtsNotificationGroup=pbcCmtsNotificationGroup, pbcSpectrumAnalysisIntegrationLen=pbcSpectrumAnalysisIntegrationLen, pbcUsFlapListControlSMMissThreshold=pbcUsFlapListControlSMMissThreshold, pbcCmtsEnvMonNotification=pbcCmtsEnvMonNotification, pbcCmtsFlapListAgeMinutes=pbcCmtsFlapListAgeMinutes, pbcCmtsIfUpstreamCER=pbcCmtsIfUpstreamCER, pbcCmtsCmStatusEntry=pbcCmtsCmStatusEntry, pbcCmtsIfMacEntry=pbcCmtsIfMacEntry, pbcCmtsFlapListTable=pbcCmtsFlapListTable, pbcCmtsSpectrumAnalysisNotificationEnables=pbcCmtsSpectrumAnalysisNotificationEnables, pbcCmtsSoftwareNotification=pbcCmtsSoftwareNotification, pbcCmtsIfMacCmRogue=pbcCmtsIfMacCmRogue, pbcCmtsCmStatusAvgOffline=pbcCmtsCmStatusAvgOffline, pbcUsFlapListControlMERThreshold=pbcUsFlapListControlMERThreshold, pbcCmtsCmStateChangeNotification=pbcCmtsCmStateChangeNotification, pbcUsFlapListControlFreqThreshold=pbcUsFlapListControlFreqThreshold, pbcCmtsFlapListSMMissThreshold=pbcCmtsFlapListSMMissThreshold, pbcSpectrumAnalysisRFInputEntry=pbcSpectrumAnalysisRFInputEntry, pbcCmtsFlapListNotification=pbcCmtsFlapListNotification, pbcCmtsIfUpstreamCmRanging=pbcCmtsIfUpstreamCmRanging, pbcSpectrumAnalysisDataTable=pbcSpectrumAnalysisDataTable, pbcCmtsIfUpstreamCmTotal=pbcCmtsIfUpstreamCmTotal, pbcSpectrumAnalysisEnable=pbcSpectrumAnalysisEnable, pbcCmtsConfigNotification=pbcCmtsConfigNotification, pbcSpectrumAnalysisArrayStatusID=pbcSpectrumAnalysisArrayStatusID, pbcCmtsIfUpstreamOperMode=pbcCmtsIfUpstreamOperMode, pbcCmtsFlapListEntry=pbcCmtsFlapListEntry, pbcCmtsDebugNotification=pbcCmtsDebugNotification, pbcSpectrumAnalysisPower=pbcSpectrumAnalysisPower, pbcCmtsModemEventsEnable=pbcCmtsModemEventsEnable, pbcCmtsNotificationManagement=pbcCmtsNotificationManagement, pbcCmtsGroup=pbcCmtsGroup, pbcSpectrumAnalysisArrayScanStart=pbcSpectrumAnalysisArrayScanStart, pbcSpectrumAnalysisFreqMin=pbcSpectrumAnalysisFreqMin, pbcCmtsAccessNotification=pbcCmtsAccessNotification, pbcCmtsCmStatusTimesOnline=pbcCmtsCmStatusTimesOnline, pbcCmtsFlapListUpstreamIfIndex=pbcCmtsFlapListUpstreamIfIndex, pbcUsFlapListControlQAM16SNRThreshold=pbcUsFlapListControlQAM16SNRThreshold, pbcCmtsDataPathNotification=pbcCmtsDataPathNotification, pbcCmtsCmMgmt=pbcCmtsCmMgmt, pbcCmtsIfDownstreamChannelEntry=pbcCmtsIfDownstreamChannelEntry, pbcCmtsSpectrumAnalysisNotificationType=pbcCmtsSpectrumAnalysisNotificationType, pbcCmtsSpectrumAnalysisNotificationEntry=pbcCmtsSpectrumAnalysisNotificationEntry, pbcCmtsCmStatusAvgOnline=pbcCmtsCmStatusAvgOnline, pbcCmtsChassisNotification=pbcCmtsChassisNotification, pbcCmtsCmStatusMinOffline=pbcCmtsCmStatusMinOffline, OneHundredthdBmVPerHz=OneHundredthdBmVPerHz, pbcCmtsIfUpstreamHcsErrors=pbcCmtsIfUpstreamHcsErrors, pbcUsFlapListControlIMRetryInterval=pbcUsFlapListControlIMRetryInterval, pbcCmtsIfUpstreamCmRogue=pbcCmtsIfUpstreamCmRogue, pbcCmtsIfMacTable=pbcCmtsIfMacTable, pbcCmtsCmStatusMaxOffline=pbcCmtsCmStatusMaxOffline, pbcCableSpectrumManagementGroup=pbcCableSpectrumManagementGroup, pbcCardIfPortIndexID=pbcCardIfPortIndexID, pbcCmtsIfDownstreamChannelTable=pbcCmtsIfDownstreamChannelTable, pbcCmtsCmStatusPercentOnline=pbcCmtsCmStatusPercentOnline, pbcCmtsGroups=pbcCmtsGroups, pbcSpectrumAnalysisArrayIndexEntry=pbcSpectrumAnalysisArrayIndexEntry, pbcSpectrumAnalysisFrequency=pbcSpectrumAnalysisFrequency, pbcSpectrumAnalysisCmdStatus=pbcSpectrumAnalysisCmdStatus, pbcCmtsIfDownstreamNumEntries=pbcCmtsIfDownstreamNumEntries, pbcSpectrumAnalysisArrayScanStop=pbcSpectrumAnalysisArrayScanStop, pbcCmtsFlapListFlapCount=pbcCmtsFlapListFlapCount, pbcCmtsBasicCompliance=pbcCmtsBasicCompliance, pbcG1CMTS=pbcG1CMTS, pbcCmtsFlapListPowerAdjustThreshold=pbcCmtsFlapListPowerAdjustThreshold, pbcSpectrumAnalysisActiveArray=pbcSpectrumAnalysisActiveArray, pbcCmtsCmStatusMaxOnline=pbcCmtsCmStatusMaxOnline, pbcCmtsSpectrumAnalysisMgmt=pbcCmtsSpectrumAnalysisMgmt, pbcUsFlapListControlTable=pbcUsFlapListControlTable, pbcCmtsIfUpstreamChannelTable=pbcCmtsIfUpstreamChannelTable, pbcCmtsIfUpstreamCmIpComplete=pbcCmtsIfUpstreamCmIpComplete, PYSNMP_MODULE_ID=pbcCmtsMib, pbcCmtsFlapListFreqDrift=pbcCmtsFlapListFreqDrift, pbcUsFlapListControlEntry=pbcUsFlapListControlEntry, pbcCmtsSpectrumAnalysisEnableSweepNotification=pbcCmtsSpectrumAnalysisEnableSweepNotification, pbcCmtsSystemNotifications=pbcCmtsSystemNotifications, pbcCmtsCmStatusTable=pbcCmtsCmStatusTable, pbcCmtsIfUpstreamChannelEntry=pbcCmtsIfUpstreamChannelEntry, pbcGeneral=pbcGeneral, pbcCmtsRogueCmEntry=pbcCmtsRogueCmEntry, pbcCmtsIfUpstreamCmRangeAborted=pbcCmtsIfUpstreamCmRangeAborted, pbcCmtsNotificationsControl=pbcCmtsNotificationsControl, pbcFlapListManagementGroup=pbcFlapListManagementGroup, pbcCmtsFlapListDownstreamIfIndex=pbcCmtsFlapListDownstreamIfIndex, pbcCmtsCmStatusLastOnline=pbcCmtsCmStatusLastOnline, pbcCmtsCompliances=pbcCmtsCompliances, pbcCmtsFlapListMacAddr=pbcCmtsFlapListMacAddr, pbcSpectrumAnalysisRFInputTable=pbcSpectrumAnalysisRFInputTable, pbcCmtsRogueCmLastActive=pbcCmtsRogueCmLastActive, pbcCmtsFlapListCERThreshold=pbcCmtsFlapListCERThreshold, pbcCmtsIfUpstreamNumEntries=pbcCmtsIfUpstreamNumEntries, pbcMacMgmt=pbcMacMgmt, pbcSpectrumAnalysisFreqMax=pbcSpectrumAnalysisFreqMax, pbcCmtsIfUpstreamCrcErrors=pbcCmtsIfUpstreamCrcErrors, pbcCmtsMib=pbcCmtsMib, pbcCmtsIfUpstreamPort=pbcCmtsIfUpstreamPort, pbcSweepNotificationRecipientPort=pbcSweepNotificationRecipientPort, pbcUsFlapListControlCERThreshold=pbcUsFlapListControlCERThreshold, pbcCmtsRogueCmIpAddress=pbcCmtsRogueCmIpAddress, pbcCmtsSpectrumAnalysisNotifications=pbcCmtsSpectrumAnalysisNotifications, pbcCmtsNotificationManagementGroup=pbcCmtsNotificationManagementGroup, pbcCmtsConformance=pbcCmtsConformance, pbcCmtsRfInterfaceNotification=pbcCmtsRfInterfaceNotification, pbcCmtsIfMacCmRangeAborted=pbcCmtsIfMacCmRangeAborted, pbcCmtsIfUpstreamCmRangingComplete=pbcCmtsIfUpstreamCmRangingComplete, pbcCmtsFlapListMERThreshold=pbcCmtsFlapListMERThreshold, pbcCmtsIfMibExtendedObjects=pbcCmtsIfMibExtendedObjects, pbcCmtsIfUpstreamCmRegistered=pbcCmtsIfUpstreamCmRegistered, pbcCmtsIfMacCmRanging=pbcCmtsIfMacCmRanging, pbcSweepNotificationRecipient=pbcSweepNotificationRecipient, pbcSpectrumAnalysisArrayIndexTable=pbcSpectrumAnalysisArrayIndexTable, pbcCmtsSpectrumAnalysisNotificationPrefix=pbcCmtsSpectrumAnalysisNotificationPrefix, pbcCmtsSpectrumAnalysisSweepComplete=pbcCmtsSpectrumAnalysisSweepComplete, pbcCmtsRogueCmFirstActive=pbcCmtsRogueCmFirstActive, pbcFlapListManagement=pbcFlapListManagement, pbcCmtsEventsEnable=pbcCmtsEventsEnable, pbcCmtsRogueCmType=pbcCmtsRogueCmType, pbcFlapListObjects=pbcFlapListObjects, pbcCmtsFlapListSize=pbcCmtsFlapListSize, pbcCmtsSpectrumAnalysisObjects=pbcCmtsSpectrumAnalysisObjects, pbcCmtsIfUpstreamCmdRcvdPwr=pbcCmtsIfUpstreamCmdRcvdPwr, pbcCmtsRogueCmPtr=pbcCmtsRogueCmPtr, pbcUsFlapListControlPowerAdjustThreshold=pbcUsFlapListControlPowerAdjustThreshold, pbcCmtsFlapListQAM16SNRThreshold=pbcCmtsFlapListQAM16SNRThreshold, pbcCmtsIfMacCmRegistered=pbcCmtsIfMacCmRegistered, pbcCmtsIfDownstreamIfTxPower=pbcCmtsIfDownstreamIfTxPower, pbcCmtsIfMacCmTotal=pbcCmtsIfMacCmTotal, pbcUpStreamMgmt=pbcUpStreamMgmt, pbcSpectrumAnalysisArrayIndexID=pbcSpectrumAnalysisArrayIndexID, pbcCmtsRogueCmTable=pbcCmtsRogueCmTable, pbcCmtsIfUpstreamPowerLevel=pbcCmtsIfUpstreamPowerLevel, pbcSpectrumAnalysisFreqStep=pbcSpectrumAnalysisFreqStep, pbcCmtsIfUpstreamMER=pbcCmtsIfUpstreamMER, pbcCmtsCmStatusMinOnline=pbcCmtsCmStatusMinOnline, TenthdBmV=TenthdBmV, pbcSpectrumAnalysisArrayIndex=pbcSpectrumAnalysisArrayIndex, pbcCmts=pbcCmts, pbcCmtsSpectrumAnalysisNotificationTable=pbcCmtsSpectrumAnalysisNotificationTable, pbcCmtsCmStatusFirstOnline=pbcCmtsCmStatusFirstOnline, pbcCmtsFlapListEventsEnable=pbcCmtsFlapListEventsEnable, pbcCmtsFlapListFreqThreshold=pbcCmtsFlapListFreqThreshold, pbcCmtsRogueCmMacAddress=pbcCmtsRogueCmMacAddress, pbcSpectrumAnalysisArrayStatus=pbcSpectrumAnalysisArrayStatus, pbcCmtsCableSpectrumManagement=pbcCmtsCableSpectrumManagement)
