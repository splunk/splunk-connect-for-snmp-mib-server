#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMIMUX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMIMUX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, TimeTicks, Integer32, Unsigned32, ModuleIdentity, Gauge32, ObjectIdentity, MibIdentifier, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "TimeTicks", "Integer32", "Unsigned32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibIdentifier", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ncm_imux, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-imux")
ncmimuxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000), )
if mibBuilder.loadTexts: ncmimuxConfigTable.setStatus('mandatory')
ncmimuxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxNIDConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxLineIndex"))
if mibBuilder.loadTexts: ncmimuxConfigEntry.setStatus('mandatory')
ncmimuxNIDConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxNIDConfigIndex.setStatus('mandatory')
ncmimuxLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxLineIndex.setStatus('mandatory')
ncmimuxEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxEndId.setStatus('mandatory')
ncmimuxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxIfIndex.setStatus('mandatory')
ncmimuxBkplaneBusSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("bus-AAAAAAAA", 1), ("bus-AABBAABB", 2), ("bus-AACCAACC", 3), ("bus-AADDAADD", 4), ("bus-BBAABBAA", 5), ("bus-BBBBBBBB", 6), ("bus-BBCCBBCC", 7), ("bus-BBDDBBDD", 8), ("bus-CCAACCAA", 9), ("bus-CCBBCCBB", 10), ("bus-CCCCCCCC", 11), ("bus-CCDDCCDD", 12), ("bus-DDAADDAA", 13), ("bus-DDBBDDBB", 14), ("bus-DDCCDDCC", 15), ("bus-DDDDDDDD", 16), ("bus-XXEEXXEE", 17), ("bus-EEXXEEXX", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxBkplaneBusSelect.setStatus('mandatory')
ncmimuxCarrierLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1-rate", 1), ("e1-rate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxCarrierLineRate.setStatus('mandatory')
ncmimuxCarrierLinesEqp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxCarrierLinesEqp.setStatus('mandatory')
ncmimuxChanneling = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode-64k", 1), ("mode-56k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxChanneling.setStatus('mandatory')
ncmimuxDTEClkTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxDTEClkTransmit.setStatus('mandatory')
ncmimuxDTEClkRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxDTEClkRecv.setStatus('mandatory')
ncmimuxDTEClkRefern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxDTEClkRefern.setStatus('mandatory')
ncmimuxDTEMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxDTEMode.setStatus('mandatory')
ncmimuxDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxDSR.setStatus('mandatory')
ncmimuxTM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxTM.setStatus('mandatory')
ncmimuxCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxCTS.setStatus('mandatory')
ncmimuxDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxDCD.setStatus('mandatory')
ncmimuxRI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxRI.setStatus('mandatory')
ncmimuxSnapType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("hssi", 2), ("v35", 3), ("eia530a", 4), ("eia530", 5), ("rs449", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxSnapType.setStatus('mandatory')
ncmimuxQuadSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7000, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxQuadSlot.setStatus('mandatory')
ncmimuxStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001), )
if mibBuilder.loadTexts: ncmimuxStatusTable.setStatus('mandatory')
ncmimuxStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxNIDStatusIndex"), (0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxStatusIndex"))
if mibBuilder.loadTexts: ncmimuxStatusEntry.setStatus('mandatory')
ncmimuxNIDStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxNIDStatusIndex.setStatus('mandatory')
ncmimuxStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxStatusIndex.setStatus('mandatory')
ncmimuxStatEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxStatEndId.setStatus('mandatory')
ncmimuxLinesEqp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxLinesEqp.setStatus('mandatory')
ncmimuxLinesStat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxLinesStat.setStatus('mandatory')
ncmimuxFrameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxFrameStatus.setStatus('mandatory')
ncmimuxCTSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxCTSStatus.setStatus('mandatory')
ncmimuxCRCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxCRCStatus.setStatus('mandatory')
ncmimuxFarEndCRCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxFarEndCRCStatus.setStatus('mandatory')
ncmimuxDataValidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxDataValidStatus.setStatus('mandatory')
ncmimuxNetworkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("off", 1), ("red", 2), ("green", 3), ("yellow", 4), ("flashing-Red", 5), ("flashing-Green", 6), ("flashing-Yellow", 7), ("flashing-Red-Green", 8), ("flashing-Green-Yellow", 9), ("flashing-Yellow-Red", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxNetworkAlarm.setStatus('mandatory')
ncmimuxAlarmLED = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("off", 1), ("red", 2), ("green", 3), ("yellow", 4), ("flashing-Red", 5), ("flashing-Green", 6), ("flashing-Yellow", 7), ("flashing-Red-Green", 8), ("flashing-Green-Yellow", 9), ("flashing-Yellow-Red", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxAlarmLED.setStatus('mandatory')
ncmimuxEventMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7001, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxEventMessages.setStatus('mandatory')
ncmimuxControlTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002), )
if mibBuilder.loadTexts: ncmimuxControlTable.setStatus('mandatory')
ncmimuxControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxNIDControlIndex"), (0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxControlIndex"))
if mibBuilder.loadTexts: ncmimuxControlEntry.setStatus('mandatory')
ncmimuxNIDControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxNIDControlIndex.setStatus('mandatory')
ncmimuxControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxControlIndex.setStatus('mandatory')
ncmimuxCntEndId = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxCntEndId.setStatus('mandatory')
ncmimuxLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-ELB-AND-PLB", 1), ("actv-ELB", 2), ("actv-PLB", 3), ("actv-ELB-AND-PLB", 4), ("deactv-ELB", 5), ("deactv-PLB", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxLoopback.setStatus('mandatory')
ncmimuxAISPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("all-Ones", 2), ("all-Zeros", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmimuxAISPattern.setStatus('mandatory')
ncmimuxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("pat-127", 2), ("inv-Pat-127", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxTestPattern.setStatus('mandatory')
ncmimuxDTEStatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7003), )
if mibBuilder.loadTexts: ncmimuxDTEStatTable.setStatus('mandatory')
ncmimuxDTEStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxNIDDTEStatIndex"), (0, "VERILINK-ENTERPRISE-NCMIMUX-MIB", "ncmimuxDTEStatIndex"))
if mibBuilder.loadTexts: ncmimuxDTEStatEntry.setStatus('mandatory')
ncmimuxNIDDTEStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxNIDDTEStatIndex.setStatus('mandatory')
ncmimuxDTEStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxDTEStatIndex.setStatus('mandatory')
ncmimuxDTEStatReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("hSSI-DTR", 1), ("hSSI-Loopback-A", 2), ("hSSI-Loopback-B", 3), ("v35-RTS", 4), ("v54-RL", 5), ("v54-LL", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxDTEStatReg.setStatus('mandatory')
ncmimuxDTEStatLPBK = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v54-LoopUp", 1), ("v54-Ptrn-Loop-Errors", 2), ("v54-LoopDown", 3), ("v35-LoopDown-Errors", 4), ("pRBS", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxDTEStatLPBK.setStatus('mandatory')
ncmimuxDTEStatAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3030, 7003, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("off", 1), ("red", 2), ("green", 3), ("yellow", 4), ("flashing-Red", 5), ("flashing-Green", 6), ("flashing-Yellow", 7), ("flashing-Red-Green", 8), ("flashing-Green-Yellow", 9), ("flashing-Yellow-Red", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmimuxDTEStatAlarm.setStatus('mandatory')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMIMUX-MIB", ncmimuxStatusIndex=ncmimuxStatusIndex, ncmimuxCarrierLinesEqp=ncmimuxCarrierLinesEqp, ncmimuxDTEClkRecv=ncmimuxDTEClkRecv, ncmimuxDSR=ncmimuxDSR, ncmimuxLinesEqp=ncmimuxLinesEqp, ncmimuxFarEndCRCStatus=ncmimuxFarEndCRCStatus, ncmimuxDTEStatAlarm=ncmimuxDTEStatAlarm, ncmimuxIfIndex=ncmimuxIfIndex, ncmimuxDataValidStatus=ncmimuxDataValidStatus, ncmimuxAlarmLED=ncmimuxAlarmLED, ncmimuxControlTable=ncmimuxControlTable, ncmimuxLoopback=ncmimuxLoopback, ncmimuxAISPattern=ncmimuxAISPattern, ncmimuxTM=ncmimuxTM, ncmimuxCntEndId=ncmimuxCntEndId, ncmimuxCTS=ncmimuxCTS, ncmimuxStatusTable=ncmimuxStatusTable, ncmimuxDTEStatReg=ncmimuxDTEStatReg, ncmimuxEventMessages=ncmimuxEventMessages, ncmimuxDTEMode=ncmimuxDTEMode, ncmimuxChanneling=ncmimuxChanneling, ncmimuxConfigEntry=ncmimuxConfigEntry, ncmimuxNIDDTEStatIndex=ncmimuxNIDDTEStatIndex, ncmimuxNIDStatusIndex=ncmimuxNIDStatusIndex, ncmimuxCTSStatus=ncmimuxCTSStatus, ncmimuxControlEntry=ncmimuxControlEntry, ncmimuxBkplaneBusSelect=ncmimuxBkplaneBusSelect, ncmimuxNetworkAlarm=ncmimuxNetworkAlarm, ncmimuxCRCStatus=ncmimuxCRCStatus, ncmimuxDTEStatIndex=ncmimuxDTEStatIndex, ncmimuxDCD=ncmimuxDCD, ncmimuxNIDConfigIndex=ncmimuxNIDConfigIndex, ncmimuxLineIndex=ncmimuxLineIndex, ncmimuxDTEStatEntry=ncmimuxDTEStatEntry, ncmimuxDTEStatTable=ncmimuxDTEStatTable, ncmimuxDTEClkTransmit=ncmimuxDTEClkTransmit, ncmimuxEndId=ncmimuxEndId, ncmimuxConfigTable=ncmimuxConfigTable, ncmimuxSnapType=ncmimuxSnapType, ncmimuxFrameStatus=ncmimuxFrameStatus, ncmimuxCarrierLineRate=ncmimuxCarrierLineRate, ncmimuxDTEStatLPBK=ncmimuxDTEStatLPBK, ncmimuxNIDControlIndex=ncmimuxNIDControlIndex, ncmimuxStatEndId=ncmimuxStatEndId, ncmimuxQuadSlot=ncmimuxQuadSlot, ncmimuxStatusEntry=ncmimuxStatusEntry, ncmimuxRI=ncmimuxRI, ncmimuxControlIndex=ncmimuxControlIndex, ncmimuxTestPattern=ncmimuxTestPattern, ncmimuxDTEClkRefern=ncmimuxDTEClkRefern, ncmimuxLinesStat=ncmimuxLinesStat)
