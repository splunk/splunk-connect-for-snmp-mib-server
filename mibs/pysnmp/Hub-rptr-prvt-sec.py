#
# PySNMP MIB module Hub-rptr-prvt-sec (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Hub-rptr-prvt-sec
# Produced by pysmi-0.3.4 at Mon Apr 29 19:38:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, TimeTicks, Counter64, IpAddress, iso, Counter32, ModuleIdentity, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, internet, Integer32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter64", "IpAddress", "iso", "Counter32", "ModuleIdentity", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "internet", "Integer32", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101))
mibseth_rptrs = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 8)).setLabel("mibseth-rptrs")
rptrSecurityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 8, 5))
rptrSecurityPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 8, 6))
rptrSecurityMACInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 8, 7))
prptrSecurityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1), )
if mibBuilder.loadTexts: prptrSecurityGroupTable.setStatus('mandatory')
prptrSecurityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1), ).setIndexNames((0, "Hub-rptr-prvt-sec", "prptrSecurityGroupIndex"))
if mibBuilder.loadTexts: prptrSecurityGroupEntry.setStatus('mandatory')
prptrSecurityGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prptrSecurityGroupIndex.setStatus('mandatory')
prptrSecurityGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupAdminState.setStatus('mandatory')
prptrSecurityGroupAutoLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupAutoLearnMode.setStatus('mandatory')
prptrSecurityGroupBroadcastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("accept", 2), ("reject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupBroadcastMode.setStatus('mandatory')
prptrSecurityGroupMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("accept", 2), ("reject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupMulticastMode.setStatus('mandatory')
prptrSecurityGroupDisPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupDisPortMode.setStatus('mandatory')
prptrSecurityGroupRandomMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupRandomMode.setStatus('mandatory')
prptrSecurityGroupDAMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupDAMismatch.setStatus('mandatory')
prptrSecurityGroupSAMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityGroupSAMismatch.setStatus('mandatory')
prptrSecurityAutoRplaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityAutoRplaceMode.setStatus('mandatory')
prptrSecurityAllPortsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityAllPortsAdmin.setStatus('mandatory')
rptrSecurityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 2), )
if mibBuilder.loadTexts: rptrSecurityGroupTable.setStatus('mandatory')
rptrSecurityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 2, 1), ).setIndexNames((0, "Hub-rptr-prvt-sec", "rptrSecurityGroupIndex"))
if mibBuilder.loadTexts: rptrSecurityGroupEntry.setStatus('mandatory')
rptrSecurityGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityGroupIndex.setStatus('mandatory')
rptrSecurityGroupOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityGroupOperState.setStatus('mandatory')
rptrSecurityGroupAutoLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityGroupAutoLearnMode.setStatus('mandatory')
rptrSecurityGroupDisPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityGroupDisPortMode.setStatus('mandatory')
rptrSecurityGroupRandomMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityGroupRandomMode.setStatus('mandatory')
prptrSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1), )
if mibBuilder.loadTexts: prptrSecurityPortTable.setStatus('mandatory')
prptrSecurityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1), ).setIndexNames((0, "Hub-rptr-prvt-sec", "prptrSecurityPortGroupIndex"), (0, "Hub-rptr-prvt-sec", "prptrSecurityPortIndex"))
if mibBuilder.loadTexts: prptrSecurityPortEntry.setStatus('mandatory')
prptrSecurityPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prptrSecurityPortGroupIndex.setStatus('mandatory')
prptrSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prptrSecurityPortIndex.setStatus('mandatory')
prptrSecurityPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortAdminState.setStatus('mandatory')
prptrSecurityPortAutoLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortAutoLearnMode.setStatus('mandatory')
prptrSecurityPortBroadcastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("accept", 2), ("reject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortBroadcastMode.setStatus('mandatory')
prptrSecurityPortMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("accept", 2), ("reject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortMulticastMode.setStatus('mandatory')
prptrSecurityPortSAMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortSAMismatch.setStatus('mandatory')
prptrSecurityPortDAMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortDAMismatch.setStatus('mandatory')
prptrSecurityPortMAC1state = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("not-valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortMAC1state.setStatus('mandatory')
prptrSecurityPortMAC1Address = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 10), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortMAC1Address.setStatus('mandatory')
prptrSecurityPortMAC2state = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("not-valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortMAC2state.setStatus('mandatory')
prptrSecurityPortMAC2Address = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 12), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortMAC2Address.setStatus('mandatory')
prptrSecurityPortAutoRplaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityPortAutoRplaceMode.setStatus('mandatory')
rptrSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2), )
if mibBuilder.loadTexts: rptrSecurityPortTable.setStatus('mandatory')
rptrSecurityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1), ).setIndexNames((0, "Hub-rptr-prvt-sec", "rptrSecurityPortGroupIndex"), (0, "Hub-rptr-prvt-sec", "rptrSecurityPortIndex"))
if mibBuilder.loadTexts: rptrSecurityPortEntry.setStatus('mandatory')
rptrSecurityPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortGroupIndex.setStatus('mandatory')
rptrSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortIndex.setStatus('mandatory')
rptrSecurityPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortOperState.setStatus('mandatory')
rptrSecurityPortAutoLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortAutoLearnMode.setStatus('mandatory')
rptrSecurityPortBroadcastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("accept", 2), ("reject", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortBroadcastMode.setStatus('mandatory')
rptrSecurityPortMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("accept", 2), ("reject", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortMulticastMode.setStatus('mandatory')
rptrSecurityPortSAMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortSAMismatch.setStatus('mandatory')
rptrSecurityPortDAMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortDAMismatch.setStatus('mandatory')
rptrSecurityPortSAMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortSAMismatches.setStatus('mandatory')
rptrSecurityPortLastSAMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortLastSAMismatch.setStatus('mandatory')
rptrSecurityPortMAC1state = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("not-valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortMAC1state.setStatus('mandatory')
rptrSecurityPortMAC1Address = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 12), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortMAC1Address.setStatus('mandatory')
rptrSecurityPortMAC2state = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("not-valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortMAC2state.setStatus('mandatory')
rptrSecurityPortMAC2Address = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 6, 2, 1, 14), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityPortMAC2Address.setStatus('mandatory')
prptrSecurityMACTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 1), )
if mibBuilder.loadTexts: prptrSecurityMACTable.setStatus('mandatory')
prptrSecurityMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 1, 1), ).setIndexNames((0, "Hub-rptr-prvt-sec", "prptrSecurityMACGroupIndex"), (0, "Hub-rptr-prvt-sec", "prptrSecurityMACEntryIndex"))
if mibBuilder.loadTexts: prptrSecurityMACEntry.setStatus('mandatory')
prptrSecurityMACGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prptrSecurityMACGroupIndex.setStatus('mandatory')
prptrSecurityMACEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prptrSecurityMACEntryIndex.setStatus('mandatory')
prptrSecurityMACPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 1, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityMACPhysicalAddress.setStatus('mandatory')
prptrSecurityMACState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("not-valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityMACState.setStatus('mandatory')
prptrSecurityMACPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prptrSecurityMACPortMap.setStatus('mandatory')
rptrSecurityMACTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 2), )
if mibBuilder.loadTexts: rptrSecurityMACTable.setStatus('mandatory')
rptrSecurityMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 2, 1), ).setIndexNames((0, "Hub-rptr-prvt-sec", "rptrSecurityMACGroupIndex"), (0, "Hub-rptr-prvt-sec", "rptrSecurityMACEntryIndex"))
if mibBuilder.loadTexts: rptrSecurityMACEntry.setStatus('mandatory')
rptrSecurityMACGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityMACGroupIndex.setStatus('mandatory')
rptrSecurityMACEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityMACEntryIndex.setStatus('mandatory')
rptrSecurityMACPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityMACPhysicalAddress.setStatus('mandatory')
rptrSecurityMACState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("not-valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityMACState.setStatus('mandatory')
rptrSecurityMACPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 8, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecurityMACPortMap.setStatus('mandatory')
rptrSecuritySAMismatch = NotificationType((1, 3, 6, 1, 4, 1, 22, 101, 8) + (0,15)).setObjects(("Hub-rptr-prvt-sec", "rptrSecurityPortGroupIndex"), ("Hub-rptr-prvt-sec", "rptrSecurityPortIndex"), ("Hub-rptr-prvt-sec", "rptrSecurityPortSAMismatches"), ("Hub-rptr-prvt-sec", "rptrSecurityPortLastSAMismatch"))
mibBuilder.exportSymbols("Hub-rptr-prvt-sec", prptrSecurityMACState=prptrSecurityMACState, prptrSecurityPortGroupIndex=prptrSecurityPortGroupIndex, rptrSecuritySAMismatch=rptrSecuritySAMismatch, prptrSecurityGroupDAMismatch=prptrSecurityGroupDAMismatch, prptrSecurityGroupRandomMode=prptrSecurityGroupRandomMode, rptrSecurityGroupTable=rptrSecurityGroupTable, rptrSecurityPortInfo=rptrSecurityPortInfo, rptrSecurityPortIndex=rptrSecurityPortIndex, rptrSecurityMACPhysicalAddress=rptrSecurityMACPhysicalAddress, rptrSecurityGroupOperState=rptrSecurityGroupOperState, prptrSecurityPortMAC2Address=prptrSecurityPortMAC2Address, rptrSecurityPortMAC1Address=rptrSecurityPortMAC1Address, rptrSecurityMACState=rptrSecurityMACState, mibseth_rptrs=mibseth_rptrs, prptrSecurityPortMulticastMode=prptrSecurityPortMulticastMode, rptrSecurityInfo=rptrSecurityInfo, rptrSecurityPortMulticastMode=rptrSecurityPortMulticastMode, prptrSecurityGroupTable=prptrSecurityGroupTable, prptrSecurityGroupEntry=prptrSecurityGroupEntry, prptrSecurityPortTable=prptrSecurityPortTable, rptrSecurityPortGroupIndex=rptrSecurityPortGroupIndex, prptrSecurityPortMAC2state=prptrSecurityPortMAC2state, prptrSecurityGroupAdminState=prptrSecurityGroupAdminState, rptrSecurityMACPortMap=rptrSecurityMACPortMap, prptrSecurityMACEntry=prptrSecurityMACEntry, prptrSecurityAllPortsAdmin=prptrSecurityAllPortsAdmin, rptrSecurityPortSAMismatches=rptrSecurityPortSAMismatches, prptrSecurityPortSAMismatch=prptrSecurityPortSAMismatch, rptrSecurityPortTable=rptrSecurityPortTable, rptrSecurityPortMAC1state=rptrSecurityPortMAC1state, rptrSecurityPortMAC2Address=rptrSecurityPortMAC2Address, prptrSecurityPortIndex=prptrSecurityPortIndex, prptrSecurityMACTable=prptrSecurityMACTable, prptrSecurityGroupIndex=prptrSecurityGroupIndex, rptrSecurityMACEntry=rptrSecurityMACEntry, rptrSecurityPortDAMismatch=rptrSecurityPortDAMismatch, prptrSecurityMACEntryIndex=prptrSecurityMACEntryIndex, prptrSecurityPortEntry=prptrSecurityPortEntry, prptrSecurityMACPhysicalAddress=prptrSecurityMACPhysicalAddress, prptrSecurityPortBroadcastMode=prptrSecurityPortBroadcastMode, prptrSecurityPortMAC1Address=prptrSecurityPortMAC1Address, prptrSecurityPortAutoRplaceMode=prptrSecurityPortAutoRplaceMode, prptrSecurityGroupSAMismatch=prptrSecurityGroupSAMismatch, rptrSecurityPortSAMismatch=rptrSecurityPortSAMismatch, rptrSecurityPortEntry=rptrSecurityPortEntry, enterprises=enterprises, rptrSecurityGroupEntry=rptrSecurityGroupEntry, prptrSecurityPortDAMismatch=prptrSecurityPortDAMismatch, rptrSecurityGroupRandomMode=rptrSecurityGroupRandomMode, rptrSecurityPortBroadcastMode=rptrSecurityPortBroadcastMode, rptrSecurityPortMAC2state=rptrSecurityPortMAC2state, prptrSecurityGroupMulticastMode=prptrSecurityGroupMulticastMode, prptrSecurityMACGroupIndex=prptrSecurityMACGroupIndex, rptrSecurityGroupDisPortMode=rptrSecurityGroupDisPortMode, prptrSecurityGroupBroadcastMode=prptrSecurityGroupBroadcastMode, rptrSecurityPortOperState=rptrSecurityPortOperState, rptrSecurityPortLastSAMismatch=rptrSecurityPortLastSAMismatch, private=private, rptrSecurityGroupIndex=rptrSecurityGroupIndex, rptrSecurityPortAutoLearnMode=rptrSecurityPortAutoLearnMode, prptrSecurityMACPortMap=prptrSecurityMACPortMap, rptrSecurityGroupAutoLearnMode=rptrSecurityGroupAutoLearnMode, mibs=mibs, rptrSecurityMACEntryIndex=rptrSecurityMACEntryIndex, prptrSecurityPortAdminState=prptrSecurityPortAdminState, prptrSecurityPortAutoLearnMode=prptrSecurityPortAutoLearnMode, prptrSecurityPortMAC1state=prptrSecurityPortMAC1state, rptrSecurityMACInfo=rptrSecurityMACInfo, prptrSecurityGroupDisPortMode=prptrSecurityGroupDisPortMode, rptrSecurityMACTable=rptrSecurityMACTable, prptrSecurityAutoRplaceMode=prptrSecurityAutoRplaceMode, rptrSecurityMACGroupIndex=rptrSecurityMACGroupIndex, prptrSecurityGroupAutoLearnMode=prptrSecurityGroupAutoLearnMode, fibronics=fibronics)
