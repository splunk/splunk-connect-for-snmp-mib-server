#
# PySNMP MIB module OMNI-gx2Rx200BX4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2Rx200BX4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
gx2Rx200BX4, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rx200BX4")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemAlarmStatus, trapNetworkElemSerialNum, trapNetworkElemAvailStatus, trapIdentifier, trapPerceivedSeverity, trapNetworkElemModelNumber, trapChangedValueDisplayString, trapChangedObjectId, trapNETrapLastTrapTimeStamp, trapNetworkElemAdminState, trapText, trapChangedValueInteger, trapNetworkElemOperState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus", "trapNetworkElemSerialNum", "trapNetworkElemAvailStatus", "trapIdentifier", "trapPerceivedSeverity", "trapNetworkElemModelNumber", "trapChangedValueDisplayString", "trapChangedObjectId", "trapNETrapLastTrapTimeStamp", "trapNetworkElemAdminState", "trapText", "trapChangedValueInteger", "trapNetworkElemOperState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Counter32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, NotificationType, ModuleIdentity, ObjectIdentity, Unsigned32, Integer32, TimeTicks, MibIdentifier, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Integer32", "TimeTicks", "MibIdentifier", "iso", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

class U32Data(Counter32):
    pass

gx2Rx200BX4Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 1))
gx2Rx200BX4AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2), )
if mibBuilder.loadTexts: gx2Rx200BX4AnalogTable.setStatus('mandatory')
gx2Rx200BX4AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4AnalogEntry.setStatus('mandatory')
gx2Rx200BX4DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3), )
if mibBuilder.loadTexts: gx2Rx200BX4DigitalTable.setStatus('mandatory')
gx2Rx200BX4DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4DigitalEntry.setStatus('mandatory')
gx2Rx200BX4StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4), )
if mibBuilder.loadTexts: gx2Rx200BX4StatusTable.setStatus('mandatory')
gx2Rx200BX4StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4StatusTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4StatusEntry.setStatus('mandatory')
gx2Rx200BX4FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5), )
if mibBuilder.loadTexts: gx2Rx200BX4FactoryTable.setStatus('mandatory')
gx2Rx200BX4FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4), ).setIndexNames((0, "OMNI-gx2Rx200BX4-MIB", "gx2Rx200BX4FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rx200BX4FactoryEntry.setStatus('mandatory')
gx2Rx200BX4AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4AnalogTableIndex.setStatus('mandatory')
rx4labelOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerOne.setStatus('optional')
rx4uomOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerOne.setStatus('optional')
rx4majorHighOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerOne.setStatus('mandatory')
rx4majorLowOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerOne.setStatus('mandatory')
rx4minorHighOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerOne.setStatus('mandatory')
rx4minorLowOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerOne.setStatus('mandatory')
rx4currentValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerOne.setStatus('mandatory')
rx4stateFlagOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerOne.setStatus('mandatory')
rx4minValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerOne.setStatus('mandatory')
rx4maxValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerOne.setStatus('mandatory')
rx4alarmStateOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerOne.setStatus('mandatory')
rx4labelOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerTwo.setStatus('optional')
rx4uomOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerTwo.setStatus('optional')
rx4majorHighOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerTwo.setStatus('mandatory')
rx4majorLowOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerTwo.setStatus('mandatory')
rx4minorHighOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerTwo.setStatus('mandatory')
rx4minorLowOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerTwo.setStatus('mandatory')
rx4currentValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerTwo.setStatus('mandatory')
rx4stateFlagOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerTwo.setStatus('mandatory')
rx4minValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerTwo.setStatus('mandatory')
rx4maxValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerTwo.setStatus('mandatory')
rx4alarmStateOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerTwo.setStatus('mandatory')
rx4labelOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerThree.setStatus('optional')
rx4uomOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerThree.setStatus('optional')
rx4majorHighOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerThree.setStatus('mandatory')
rx4majorLowOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerThree.setStatus('mandatory')
rx4minorHighOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerThree.setStatus('mandatory')
rx4minorLowOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerThree.setStatus('mandatory')
rx4currentValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerThree.setStatus('mandatory')
rx4stateFlagOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerThree.setStatus('mandatory')
rx4minValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerThree.setStatus('mandatory')
rx4maxValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerThree.setStatus('mandatory')
rx4alarmStateOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerThree.setStatus('mandatory')
rx4labelOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptPowerFour.setStatus('optional')
rx4uomOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomOptPowerFour.setStatus('optional')
rx4majorHighOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighOptPowerFour.setStatus('mandatory')
rx4majorLowOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowOptPowerFour.setStatus('mandatory')
rx4minorHighOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighOptPowerFour.setStatus('mandatory')
rx4minorLowOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowOptPowerFour.setStatus('mandatory')
rx4currentValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueOptPowerFour.setStatus('mandatory')
rx4stateFlagOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagOptPowerFour.setStatus('mandatory')
rx4minValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueOptPowerFour.setStatus('mandatory')
rx4maxValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueOptPowerFour.setStatus('mandatory')
rx4alarmStateOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateOptPowerFour.setStatus('mandatory')
rx4labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModTemp.setStatus('optional')
rx4uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomModTemp.setStatus('optional')
rx4majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighModTemp.setStatus('mandatory')
rx4majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowModTemp.setStatus('mandatory')
rx4minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighModTemp.setStatus('mandatory')
rx4minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowModTemp.setStatus('mandatory')
rx4currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueModTemp.setStatus('mandatory')
rx4stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModTemp.setStatus('mandatory')
rx4minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueModTemp.setStatus('mandatory')
rx4maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueModTemp.setStatus('mandatory')
rx4alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateModTemp.setStatus('mandatory')
rx4labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFanCurrent.setStatus('optional')
rx4uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uomFanCurrent.setStatus('optional')
rx4majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHighFanCurrent.setStatus('mandatory')
rx4majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLowFanCurrent.setStatus('mandatory')
rx4minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHighFanCurrent.setStatus('mandatory')
rx4minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLowFanCurrent.setStatus('mandatory')
rx4currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValueFanCurrent.setStatus('mandatory')
rx4stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagFanCurrent.setStatus('mandatory')
rx4minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValueFanCurrent.setStatus('mandatory')
rx4maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValueFanCurrent.setStatus('mandatory')
rx4alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmStateFanCurrent.setStatus('mandatory')
rx4label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4label12Volt.setStatus('optional')
rx4uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4uom12Volt.setStatus('optional')
rx4majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorHigh12Volt.setStatus('mandatory')
rx4majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4majorLow12Volt.setStatus('mandatory')
rx4minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorHigh12Volt.setStatus('mandatory')
rx4minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minorLow12Volt.setStatus('mandatory')
rx4currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4currentValue12Volt.setStatus('mandatory')
rx4stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlag12Volt.setStatus('mandatory')
rx4minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4minValue12Volt.setStatus('mandatory')
rx4maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4maxValue12Volt.setStatus('mandatory')
rx4alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4alarmState12Volt.setStatus('mandatory')
gx2Rx200BX4DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4DigitalTableIndex.setStatus('mandatory')
rx4labelModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeOne.setStatus('optional')
rx4enumModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeOne.setStatus('optional')
rx4valueModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeOne.setStatus('mandatory')
rx4stateFlagModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeOne.setStatus('mandatory')
rx4labelWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthOne.setStatus('optional')
rx4enumWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthOne.setStatus('optional')
rx4valueWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthOne.setStatus('mandatory')
rx4stateFlagWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthOne.setStatus('mandatory')
rx4labelAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingOne.setStatus('optional')
rx4enumAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingOne.setStatus('optional')
rx4valueAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingOne.setStatus('mandatory')
rx4stateFlagAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingOne.setStatus('mandatory')
rx4labelSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingOne.setStatus('optional')
rx4enumSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingOne.setStatus('optional')
rx4valueSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingOne.setStatus('mandatory')
rx4stateFlagSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingOne.setStatus('mandatory')
rx4labelSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdOne.setStatus('optional')
rx4enumSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdOne.setStatus('optional')
rx4valueSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdOne.setStatus('mandatory')
rx4stateFlagSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdOne.setStatus('mandatory')
rx4labelModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeTwo.setStatus('optional')
rx4enumModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeTwo.setStatus('optional')
rx4valueModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeTwo.setStatus('mandatory')
rx4stateFlagModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeTwo.setStatus('mandatory')
rx4labelWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthTwo.setStatus('optional')
rx4enumWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthTwo.setStatus('optional')
rx4valueWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthTwo.setStatus('mandatory')
rx4stateFlagWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthTwo.setStatus('mandatory')
rx4labelAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingTwo.setStatus('optional')
rx4enumAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingTwo.setStatus('optional')
rx4valueAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingTwo.setStatus('mandatory')
rx4stateFlagAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingTwo.setStatus('mandatory')
rx4labelSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingTwo.setStatus('optional')
rx4enumSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingTwo.setStatus('optional')
rx4valueSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingTwo.setStatus('mandatory')
rx4stateFlagSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingTwo.setStatus('mandatory')
rx4labelSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdTwo.setStatus('optional')
rx4enumSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdTwo.setStatus('optional')
rx4valueSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdTwo.setStatus('mandatory')
rx4stateFlagSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdTwo.setStatus('mandatory')
rx4labelModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeThree.setStatus('optional')
rx4enumModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeThree.setStatus('optional')
rx4valueModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeThree.setStatus('mandatory')
rx4stateFlagModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeThree.setStatus('mandatory')
rx4labelWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthThree.setStatus('optional')
rx4enumWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthThree.setStatus('optional')
rx4valueWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthThree.setStatus('mandatory')
rx4stateFlagWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthThree.setStatus('mandatory')
rx4labelAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingThree.setStatus('optional')
rx4enumAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingThree.setStatus('optional')
rx4valueAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingThree.setStatus('mandatory')
rx4stateFlagAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingThree.setStatus('mandatory')
rx4labelSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingThree.setStatus('optional')
rx4enumSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingThree.setStatus('optional')
rx4valueSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingThree.setStatus('mandatory')
rx4stateFlagSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingThree.setStatus('mandatory')
rx4labelSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdThree.setStatus('optional')
rx4enumSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdThree.setStatus('optional')
rx4valueSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdThree.setStatus('mandatory')
rx4stateFlagSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdThree.setStatus('mandatory')
rx4labelModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModeFour.setStatus('optional')
rx4enumModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModeFour.setStatus('optional')
rx4valueModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModeFour.setStatus('mandatory')
rx4stateFlagModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModeFour.setStatus('mandatory')
rx4labelWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelWavelengthFour.setStatus('optional')
rx4enumWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumWavelengthFour.setStatus('optional')
rx4valueWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueWavelengthFour.setStatus('mandatory')
rx4stateFlagWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagWavelengthFour.setStatus('mandatory')
rx4labelAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAttnSettingFour.setStatus('optional')
rx4enumAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumAttnSettingFour.setStatus('optional')
rx4valueAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueAttnSettingFour.setStatus('mandatory')
rx4stateFlagAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagAttnSettingFour.setStatus('mandatory')
rx4labelSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeSettingFour.setStatus('optional')
rx4enumSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeSettingFour.setStatus('optional')
rx4valueSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeSettingFour.setStatus('mandatory')
rx4stateFlagSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeSettingFour.setStatus('mandatory')
rx4labelSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelSwModeThresholdFour.setStatus('optional')
rx4enumSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumSwModeThresholdFour.setStatus('optional')
rx4valueSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 80), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueSwModeThresholdFour.setStatus('mandatory')
rx4stateFlagSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagSwModeThresholdFour.setStatus('mandatory')
rx4labelModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelModuleConfig.setStatus('optional')
rx4enumModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumModuleConfig.setStatus('optional')
rx4valueModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("burst", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueModuleConfig.setStatus('mandatory')
rx4stateFlagModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagModuleConfig.setStatus('mandatory')
rx4labelRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelRevertTime.setStatus('optional')
rx4enumRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumRevertTime.setStatus('optional')
rx4valueRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one-sec", 1), ("ten-sec", 2), ("sixty-sec", 3), ("six-hundred-sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueRevertTime.setStatus('mandatory')
rx4stateFlagRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagRevertTime.setStatus('mandatory')
rx4labelTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelTestPointSelect.setStatus('optional')
rx4enumTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumTestPointSelect.setStatus('optional')
rx4valueTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueTestPointSelect.setStatus('mandatory')
rx4stateFlagTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagTestPointSelect.setStatus('mandatory')
rx4labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFactoryDefault.setStatus('optional')
rx4enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4enumFactoryDefault.setStatus('optional')
rx4valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx4valueFactoryDefault.setStatus('mandatory')
rx4stateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 3, 2, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateFlagFactoryDefault.setStatus('mandatory')
gx2Rx200BX4StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4StatusTableIndex.setStatus('mandatory')
rx4labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelBoot.setStatus('optional')
rx4valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueBoot.setStatus('mandatory')
rx4stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagBoot.setStatus('mandatory')
rx4labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFlash.setStatus('optional')
rx4valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueFlash.setStatus('mandatory')
rx4stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagFlash.setStatus('mandatory')
rx4labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelFactoryDataCRC.setStatus('optional')
rx4valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueFactoryDataCRC.setStatus('mandatory')
rx4stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagFactoryDataCRC.setStatus('mandatory')
rx4labelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelAlarmDataCRC.setStatus('optional')
rx4valueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueAlarmDataCRC.setStatus('mandatory')
rx4stateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagAlarmDataCRC.setStatus('mandatory')
rx4labelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelCalibrationDataCRC.setStatus('optional')
rx4valueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueCalibrationDataCRC.setStatus('mandatory')
rx4stateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagCalibrationDataCRC.setStatus('mandatory')
rx4labelHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelHW.setStatus('optional')
rx4valueHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueHW.setStatus('mandatory')
rx4stateflagHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagHW.setStatus('mandatory')
rx4labelOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigOne.setStatus('optional')
rx4valueOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigOne.setStatus('mandatory')
rx4stateflagOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigOne.setStatus('mandatory')
rx4labelOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigTwo.setStatus('optional')
rx4valueOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigTwo.setStatus('mandatory')
rx4stateflagOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigTwo.setStatus('mandatory')
rx4labelOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigThree.setStatus('optional')
rx4valueOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigThree.setStatus('mandatory')
rx4stateflagOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigThree.setStatus('mandatory')
rx4labelOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelOptSigFour.setStatus('optional')
rx4valueOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueOptSigFour.setStatus('mandatory')
rx4stateflagOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagOptSigFour.setStatus('mandatory')
rx4labelBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4labelBackupCable.setStatus('optional')
rx4valueBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4valueBackupCable.setStatus('mandatory')
rx4stateflagBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4stateflagBackupCable.setStatus('mandatory')
gx2Rx200BX4FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx200BX4FactoryTableIndex.setStatus('mandatory')
rx4bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bootControlByte.setStatus('mandatory')
rx4bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bootStatusByte.setStatus('mandatory')
rx4bank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bank0CRC.setStatus('mandatory')
rx4bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4bank1CRC.setStatus('mandatory')
rx4prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4prgEEPROMByte.setStatus('mandatory')
rx4factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4factoryCRC.setStatus('mandatory')
rx4calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarm", 3), ("tempComp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4calculateCRC.setStatus('mandatory')
rx4hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4hourMeter.setStatus('mandatory')
rx4flashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4flashPrgCntA.setStatus('mandatory')
rx4flashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4flashPrgCntB.setStatus('mandatory')
rx4fwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4fwRev0.setStatus('mandatory')
rx4fwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx4fwRev1.setStatus('mandatory')
trapRx200BX4ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OpticalPower1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OpticalPower2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OpticalPower3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OpticalPower4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4ModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Plus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Boot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Boot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4CalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4DefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Mode1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Mode2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Mode3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Mode4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Output1SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Output2SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Output3SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4Output4SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4RX1StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4RX2StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4RX3StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4RX4StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,28)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4BackupCableAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,29)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OptPwr1BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,30)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OptPwr2BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,31)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OptPwr3BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,32)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx200BX4OptPwr4BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 29) + (0,33)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2Rx200BX4-MIB", rx4labelSwModeSettingThree=rx4labelSwModeSettingThree, trapRx200BX4Mode2Alarm=trapRx200BX4Mode2Alarm, rx4majorHighOptPowerOne=rx4majorHighOptPowerOne, rx4stateFlagFactoryDefault=rx4stateFlagFactoryDefault, rx4stateFlagSwModeSettingTwo=rx4stateFlagSwModeSettingTwo, rx4enumModuleConfig=rx4enumModuleConfig, trapRx200BX4RX4StatusAlarm=trapRx200BX4RX4StatusAlarm, rx4currentValueModTemp=rx4currentValueModTemp, rx4stateFlagAttnSettingThree=rx4stateFlagAttnSettingThree, rx4flashPrgCntB=rx4flashPrgCntB, rx4valueWavelengthThree=rx4valueWavelengthThree, trapRx200BX4ConfigChangeInteger=trapRx200BX4ConfigChangeInteger, rx4majorLowFanCurrent=rx4majorLowFanCurrent, rx4stateflagAlarmDataCRC=rx4stateflagAlarmDataCRC, rx4valueOptSigFour=rx4valueOptSigFour, rx4labelFactoryDataCRC=rx4labelFactoryDataCRC, rx4valueSwModeThresholdThree=rx4valueSwModeThresholdThree, rx4valueModeThree=rx4valueModeThree, rx4stateFlagTestPointSelect=rx4stateFlagTestPointSelect, rx4minValueOptPowerTwo=rx4minValueOptPowerTwo, rx4alarmStateOptPowerFour=rx4alarmStateOptPowerFour, rx4minorLowOptPowerOne=rx4minorLowOptPowerOne, rx4bootStatusByte=rx4bootStatusByte, trapRx200BX4Plus12CurrentAlarm=trapRx200BX4Plus12CurrentAlarm, rx4minorLowOptPowerFour=rx4minorLowOptPowerFour, rx4enumSwModeSettingTwo=rx4enumSwModeSettingTwo, rx4stateFlagSwModeThresholdTwo=rx4stateFlagSwModeThresholdTwo, rx4stateFlagAttnSettingTwo=rx4stateFlagAttnSettingTwo, rx4valueSwModeThresholdTwo=rx4valueSwModeThresholdTwo, rx4majorLowOptPowerFour=rx4majorLowOptPowerFour, rx4stateFlagModeThree=rx4stateFlagModeThree, rx4valueModuleConfig=rx4valueModuleConfig, rx4valueModeTwo=rx4valueModeTwo, trapRx200BX4Output3SwitchedAlarm=trapRx200BX4Output3SwitchedAlarm, rx4stateFlagSwModeSettingThree=rx4stateFlagSwModeSettingThree, rx4alarmStateOptPowerThree=rx4alarmStateOptPowerThree, trapRx200BX4Output4SwitchedAlarm=trapRx200BX4Output4SwitchedAlarm, gx2Rx200BX4FactoryEntry=gx2Rx200BX4FactoryEntry, rx4stateflagBackupCable=rx4stateflagBackupCable, rx4minorHighModTemp=rx4minorHighModTemp, rx4stateFlagSwModeThresholdFour=rx4stateFlagSwModeThresholdFour, rx4alarmStateOptPowerTwo=rx4alarmStateOptPowerTwo, rx4labelOptPowerThree=rx4labelOptPowerThree, rx4stateFlagModTemp=rx4stateFlagModTemp, rx4labelWavelengthThree=rx4labelWavelengthThree, rx4valueSwModeThresholdFour=rx4valueSwModeThresholdFour, rx4enumFactoryDefault=rx4enumFactoryDefault, rx4currentValueOptPowerOne=rx4currentValueOptPowerOne, rx4labelSwModeSettingOne=rx4labelSwModeSettingOne, rx4valueCalibrationDataCRC=rx4valueCalibrationDataCRC, trapRx200BX4ModuleTemperatureAlarm=trapRx200BX4ModuleTemperatureAlarm, trapRx200BX4FlashAlarm=trapRx200BX4FlashAlarm, rx4valueSwModeThresholdOne=rx4valueSwModeThresholdOne, rx4labelOptPowerFour=rx4labelOptPowerFour, rx4stateFlagOptPowerTwo=rx4stateFlagOptPowerTwo, rx4minValue12Volt=rx4minValue12Volt, rx4alarmState12Volt=rx4alarmState12Volt, rx4labelAttnSettingOne=rx4labelAttnSettingOne, rx4valueBackupCable=rx4valueBackupCable, trapRx200BX4OptPwr3BadAlarm=trapRx200BX4OptPwr3BadAlarm, rx4minValueOptPowerFour=rx4minValueOptPowerFour, rx4labelOptSigThree=rx4labelOptSigThree, trapRx200BX4OpticalPower4Alarm=trapRx200BX4OpticalPower4Alarm, rx4majorLowModTemp=rx4majorLowModTemp, rx4labelSwModeThresholdFour=rx4labelSwModeThresholdFour, rx4valueFactoryDefault=rx4valueFactoryDefault, gx2Rx200BX4DigitalEntry=gx2Rx200BX4DigitalEntry, rx4valueWavelengthOne=rx4valueWavelengthOne, rx4enumWavelengthThree=rx4enumWavelengthThree, rx4majorHigh12Volt=rx4majorHigh12Volt, rx4valueTestPointSelect=rx4valueTestPointSelect, trapRx200BX4CalDataCRCAlarm=trapRx200BX4CalDataCRCAlarm, rx4majorHighOptPowerTwo=rx4majorHighOptPowerTwo, rx4minorLowFanCurrent=rx4minorLowFanCurrent, rx4labelSwModeThresholdOne=rx4labelSwModeThresholdOne, rx4enumWavelengthOne=rx4enumWavelengthOne, rx4stateflagOptSigThree=rx4stateflagOptSigThree, rx4valueWavelengthFour=rx4valueWavelengthFour, rx4valueWavelengthTwo=rx4valueWavelengthTwo, rx4enumModeTwo=rx4enumModeTwo, rx4enumSwModeSettingThree=rx4enumSwModeSettingThree, rx4stateFlagOptPowerOne=rx4stateFlagOptPowerOne, rx4valueSwModeSettingOne=rx4valueSwModeSettingOne, rx4enumTestPointSelect=rx4enumTestPointSelect, rx4alarmStateModTemp=rx4alarmStateModTemp, rx4valueAttnSettingOne=rx4valueAttnSettingOne, rx4enumSwModeSettingFour=rx4enumSwModeSettingFour, rx4valueOptSigThree=rx4valueOptSigThree, rx4minValueModTemp=rx4minValueModTemp, rx4uomOptPowerThree=rx4uomOptPowerThree, rx4uomOptPowerFour=rx4uomOptPowerFour, rx4labelWavelengthTwo=rx4labelWavelengthTwo, rx4labelAttnSettingFour=rx4labelAttnSettingFour, rx4stateFlagOptPowerFour=rx4stateFlagOptPowerFour, rx4minorHighOptPowerFour=rx4minorHighOptPowerFour, rx4stateFlagSwModeThresholdOne=rx4stateFlagSwModeThresholdOne, rx4minorHighOptPowerTwo=rx4minorHighOptPowerTwo, rx4enumWavelengthTwo=rx4enumWavelengthTwo, rx4minorHighOptPowerOne=rx4minorHighOptPowerOne, rx4valueOptSigOne=rx4valueOptSigOne, rx4stateflagOptSigTwo=rx4stateflagOptSigTwo, rx4factoryCRC=rx4factoryCRC, rx4fwRev0=rx4fwRev0, trapRx200BX4OptPwr1BadAlarm=trapRx200BX4OptPwr1BadAlarm, rx4maxValueModTemp=rx4maxValueModTemp, rx4maxValueFanCurrent=rx4maxValueFanCurrent, rx4stateflagFactoryDataCRC=rx4stateflagFactoryDataCRC, rx4labelFactoryDefault=rx4labelFactoryDefault, rx4valueAttnSettingThree=rx4valueAttnSettingThree, trapRx200BX4AlarmDataCRCAlarm=trapRx200BX4AlarmDataCRCAlarm, trapRx200BX4DefaultAlarm=trapRx200BX4DefaultAlarm, rx4majorHighOptPowerThree=rx4majorHighOptPowerThree, gx2Rx200BX4AnalogTable=gx2Rx200BX4AnalogTable, rx4flashPrgCntA=rx4flashPrgCntA, rx4labelModeFour=rx4labelModeFour, rx4enumSwModeThresholdFour=rx4enumSwModeThresholdFour, rx4labelModTemp=rx4labelModTemp, gx2Rx200BX4AnalogTableIndex=gx2Rx200BX4AnalogTableIndex, rx4valueFactoryDataCRC=rx4valueFactoryDataCRC, trapRx200BX4BackupCableAlarm=trapRx200BX4BackupCableAlarm, rx4currentValue12Volt=rx4currentValue12Volt, rx4maxValue12Volt=rx4maxValue12Volt, rx4uomOptPowerOne=rx4uomOptPowerOne, rx4minValueOptPowerThree=rx4minValueOptPowerThree, rx4labelModeTwo=rx4labelModeTwo, rx4stateflagOptSigOne=rx4stateflagOptSigOne, rx4enumModeThree=rx4enumModeThree, rx4labelBoot=rx4labelBoot, rx4enumSwModeThresholdTwo=rx4enumSwModeThresholdTwo, U32Data=U32Data, rx4currentValueFanCurrent=rx4currentValueFanCurrent, rx4labelModeThree=rx4labelModeThree, rx4stateFlagSwModeSettingFour=rx4stateFlagSwModeSettingFour, trapRx200BX4OpticalPower1Alarm=trapRx200BX4OpticalPower1Alarm, rx4labelAttnSettingThree=rx4labelAttnSettingThree, trapRx200BX4RX2StatusAlarm=trapRx200BX4RX2StatusAlarm, rx4minValueFanCurrent=rx4minValueFanCurrent, rx4stateFlagWavelengthTwo=rx4stateFlagWavelengthTwo, rx4enumModeFour=rx4enumModeFour, rx4valueFlash=rx4valueFlash, rx4labelHW=rx4labelHW, rx4stateflagOptSigFour=rx4stateflagOptSigFour, rx4bootControlByte=rx4bootControlByte, trapRx200BX4Mode1Alarm=trapRx200BX4Mode1Alarm, rx4enumSwModeSettingOne=rx4enumSwModeSettingOne, rx4stateFlagRevertTime=rx4stateFlagRevertTime, rx4maxValueOptPowerTwo=rx4maxValueOptPowerTwo, rx4stateFlagAttnSettingFour=rx4stateFlagAttnSettingFour, rx4maxValueOptPowerFour=rx4maxValueOptPowerFour, rx4labelBackupCable=rx4labelBackupCable, rx4fwRev1=rx4fwRev1, rx4majorHighOptPowerFour=rx4majorHighOptPowerFour, rx4maxValueOptPowerOne=rx4maxValueOptPowerOne, rx4labelModeOne=rx4labelModeOne, rx4maxValueOptPowerThree=rx4maxValueOptPowerThree, rx4labelSwModeSettingTwo=rx4labelSwModeSettingTwo, rx4alarmStateFanCurrent=rx4alarmStateFanCurrent, rx4stateFlagSwModeThresholdThree=rx4stateFlagSwModeThresholdThree, rx4enumAttnSettingFour=rx4enumAttnSettingFour, gx2Rx200BX4StatusTableIndex=gx2Rx200BX4StatusTableIndex, rx4enumAttnSettingOne=rx4enumAttnSettingOne, rx4majorLow12Volt=rx4majorLow12Volt, rx4majorHighModTemp=rx4majorHighModTemp, rx4enumAttnSettingThree=rx4enumAttnSettingThree, gx2Rx200BX4FactoryTableIndex=gx2Rx200BX4FactoryTableIndex, trapRx200BX4Output1SwitchedAlarm=trapRx200BX4Output1SwitchedAlarm, rx4stateFlagFanCurrent=rx4stateFlagFanCurrent, rx4labelWavelengthOne=rx4labelWavelengthOne, rx4valueSwModeSettingThree=rx4valueSwModeSettingThree, rx4minorHigh12Volt=rx4minorHigh12Volt, rx4valueModeOne=rx4valueModeOne, trapRx200BX4OpticalPower3Alarm=trapRx200BX4OpticalPower3Alarm, rx4labelOptSigOne=rx4labelOptSigOne, rx4valueBoot=rx4valueBoot, rx4labelFlash=rx4labelFlash, trapRx200BX4Boot0Alarm=trapRx200BX4Boot0Alarm, rx4minorLowOptPowerTwo=rx4minorLowOptPowerTwo, rx4currentValueOptPowerTwo=rx4currentValueOptPowerTwo, rx4valueHW=rx4valueHW, rx4valueModeFour=rx4valueModeFour, rx4stateflagFlash=rx4stateflagFlash, rx4valueAlarmDataCRC=rx4valueAlarmDataCRC, trapRx200BX4Output2SwitchedAlarm=trapRx200BX4Output2SwitchedAlarm, rx4calculateCRC=rx4calculateCRC, rx4minorLowOptPowerThree=rx4minorLowOptPowerThree, rx4stateFlagModeFour=rx4stateFlagModeFour, rx4majorLowOptPowerTwo=rx4majorLowOptPowerTwo, rx4enumSwModeThresholdOne=rx4enumSwModeThresholdOne, rx4labelAttnSettingTwo=rx4labelAttnSettingTwo, rx4bank1CRC=rx4bank1CRC, rx4labelModuleConfig=rx4labelModuleConfig, rx4labelWavelengthFour=rx4labelWavelengthFour, rx4valueSwModeSettingFour=rx4valueSwModeSettingFour, rx4enumAttnSettingTwo=rx4enumAttnSettingTwo, rx4majorLowOptPowerOne=rx4majorLowOptPowerOne, rx4minValueOptPowerOne=rx4minValueOptPowerOne, rx4label12Volt=rx4label12Volt, trapRx200BX4Boot1Alarm=trapRx200BX4Boot1Alarm, rx4valueSwModeSettingTwo=rx4valueSwModeSettingTwo, rx4stateFlagModeOne=rx4stateFlagModeOne, rx4stateFlag12Volt=rx4stateFlag12Volt, rx4minorHighOptPowerThree=rx4minorHighOptPowerThree, rx4minorLowModTemp=rx4minorLowModTemp, rx4currentValueOptPowerFour=rx4currentValueOptPowerFour, rx4labelSwModeThresholdThree=rx4labelSwModeThresholdThree, trapRx200BX4ConfigChangeDisplayString=trapRx200BX4ConfigChangeDisplayString, trapRx200BX4RX1StatusAlarm=trapRx200BX4RX1StatusAlarm, rx4majorLowOptPowerThree=rx4majorLowOptPowerThree, trapRx200BX4Mode3Alarm=trapRx200BX4Mode3Alarm, rx4labelTestPointSelect=rx4labelTestPointSelect, rx4minorLow12Volt=rx4minorLow12Volt, rx4labelOptSigTwo=rx4labelOptSigTwo, rx4stateFlagWavelengthFour=rx4stateFlagWavelengthFour, rx4stateFlagModeTwo=rx4stateFlagModeTwo, trapRx200BX4OptPwr4BadAlarm=trapRx200BX4OptPwr4BadAlarm, rx4enumSwModeThresholdThree=rx4enumSwModeThresholdThree, trapRx200BX4FactoryDataCRCAlarm=trapRx200BX4FactoryDataCRCAlarm, trapRx200BX4Mode4Alarm=trapRx200BX4Mode4Alarm, rx4currentValueOptPowerThree=rx4currentValueOptPowerThree, trapRx200BX4OpticalPower2Alarm=trapRx200BX4OpticalPower2Alarm, rx4valueAttnSettingTwo=rx4valueAttnSettingTwo, rx4stateFlagWavelengthOne=rx4stateFlagWavelengthOne, gx2Rx200BX4StatusEntry=gx2Rx200BX4StatusEntry, rx4labelSwModeThresholdTwo=rx4labelSwModeThresholdTwo, rx4valueOptSigTwo=rx4valueOptSigTwo, rx4stateflagBoot=rx4stateflagBoot, rx4labelSwModeSettingFour=rx4labelSwModeSettingFour, rx4enumWavelengthFour=rx4enumWavelengthFour, rx4labelOptPowerTwo=rx4labelOptPowerTwo, rx4bank0CRC=rx4bank0CRC, gx2Rx200BX4StatusTable=gx2Rx200BX4StatusTable, rx4hourMeter=rx4hourMeter, gx2Rx200BX4Descriptor=gx2Rx200BX4Descriptor, gx2Rx200BX4FactoryTable=gx2Rx200BX4FactoryTable, rx4valueRevertTime=rx4valueRevertTime, rx4stateFlagOptPowerThree=rx4stateFlagOptPowerThree, rx4labelCalibrationDataCRC=rx4labelCalibrationDataCRC, rx4stateFlagWavelengthThree=rx4stateFlagWavelengthThree, rx4stateflagHW=rx4stateflagHW, rx4uomFanCurrent=rx4uomFanCurrent, rx4labelAlarmDataCRC=rx4labelAlarmDataCRC, rx4labelOptPowerOne=rx4labelOptPowerOne, rx4labelFanCurrent=rx4labelFanCurrent, trapRx200BX4FanCurrentAlarm=trapRx200BX4FanCurrentAlarm, rx4labelOptSigFour=rx4labelOptSigFour, rx4stateFlagModuleConfig=rx4stateFlagModuleConfig, rx4uomModTemp=rx4uomModTemp, rx4labelRevertTime=rx4labelRevertTime, rx4valueAttnSettingFour=rx4valueAttnSettingFour, rx4stateflagCalibrationDataCRC=rx4stateflagCalibrationDataCRC, rx4stateFlagSwModeSettingOne=rx4stateFlagSwModeSettingOne, trapRx200BX4RX3StatusAlarm=trapRx200BX4RX3StatusAlarm, rx4prgEEPROMByte=rx4prgEEPROMByte, trapRx200BX4OptPwr2BadAlarm=trapRx200BX4OptPwr2BadAlarm)
mibBuilder.exportSymbols("OMNI-gx2Rx200BX4-MIB", rx4uom12Volt=rx4uom12Volt, gx2Rx200BX4AnalogEntry=gx2Rx200BX4AnalogEntry, rx4uomOptPowerTwo=rx4uomOptPowerTwo, gx2Rx200BX4DigitalTableIndex=gx2Rx200BX4DigitalTableIndex, gx2Rx200BX4DigitalTable=gx2Rx200BX4DigitalTable, rx4stateFlagAttnSettingOne=rx4stateFlagAttnSettingOne, rx4majorHighFanCurrent=rx4majorHighFanCurrent, rx4enumModeOne=rx4enumModeOne, rx4enumRevertTime=rx4enumRevertTime, Float=Float, rx4minorHighFanCurrent=rx4minorHighFanCurrent, rx4alarmStateOptPowerOne=rx4alarmStateOptPowerOne)
