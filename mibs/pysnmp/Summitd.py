#
# PySNMP MIB module Summitd (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Summitd
# Produced by pysmi-0.3.4 at Mon Apr 29 21:07:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, ModuleIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, enterprises, Counter64, Integer32, Counter32, Gauge32, Bits, iso, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "enterprises", "Counter64", "Integer32", "Counter32", "Gauge32", "Bits", "iso", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
summit_development = MibIdentifier((1, 3, 6, 1, 4, 1, 23688)).setLabel("summit-development")
summit_Products = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 1)).setLabel("summit-Products")
uni_a = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 1, 1)).setLabel("uni-a")
name = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('mandatory')
condition = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("warning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: condition.setStatus('mandatory')
mannum = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mannum.setStatus('mandatory')
status = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('mandatory')
rssi = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rssi.setStatus('mandatory')
ebno = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebno.setStatus('mandatory')
berr = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berr.setStatus('mandatory')
temperature = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('mandatory')
maxENspeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxENspeed.setStatus('mandatory')
currentRadioSpeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentRadioSpeed.setStatus('mandatory')
type = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: type.setStatus('mandatory')
txFreq = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFreq.setStatus('mandatory')
rxFreq = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFreq.setStatus('mandatory')
txDataSpeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDataSpeed.setStatus('mandatory')
rxDataSpeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDataSpeed.setStatus('mandatory')
remoteName = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteName.setStatus('mandatory')
remoteIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPaddress.setStatus('mandatory')
atpc = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpc.setStatus('mandatory')
txPower = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPower.setStatus('mandatory')
acm = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acm.setStatus('mandatory')
txModulation = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("qam-2", 1), ("qam-4", 2), ("qam-8", 3), ("qam-16", 4), ("qam-32", 5), ("qam-64", 6), ("qam-128", 7), ("qam-256", 8), ("qam-512", 9), ("qam-1024", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txModulation.setStatus('mandatory')
rxModulation = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("qam-2", 1), ("qam-4", 2), ("qam-8", 3), ("qam-16", 4), ("qam-32", 5), ("qam-64", 6), ("qam-128", 7), ("qam-256", 8), ("qam-512", 9), ("qam-1024", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxModulation.setStatus('mandatory')
txBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBandwidth.setStatus('mandatory')
rxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBandwidth.setStatus('mandatory')
licenseExpire = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpire.setStatus('mandatory')
summitd_Common = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 2)).setLabel("summitd-Common")
summitd_Experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 3)).setLabel("summitd-Experimental")
mibBuilder.exportSymbols("Summitd", summit_development=summit_development, licenseExpire=licenseExpire, acm=acm, rxFreq=rxFreq, rssi=rssi, txModulation=txModulation, remoteIPaddress=remoteIPaddress, remoteName=remoteName, maxENspeed=maxENspeed, summitd_Experimental=summitd_Experimental, rxBandwidth=rxBandwidth, atpc=atpc, ebno=ebno, txPower=txPower, condition=condition, uni_a=uni_a, txDataSpeed=txDataSpeed, mannum=mannum, type=type, summitd_Common=summitd_Common, temperature=temperature, status=status, rxDataSpeed=rxDataSpeed, currentRadioSpeed=currentRadioSpeed, summit_Products=summit_Products, berr=berr, name=name, txFreq=txFreq, rxModulation=rxModulation, txBandwidth=txBandwidth)
