#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-SAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-SAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
TFilterID, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-FILTER-MIB", "TFilterID")
timetraSRMIBModules, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
TBurstPercentOrDefault, tVirtualSchedulerName, tSchedulerPolicyName, TBurstSize, TAdaptationRule = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", "TBurstPercentOrDefault", "tVirtualSchedulerName", "tSchedulerPolicyName", "TBurstSize", "TAdaptationRule")
hostConnectivityChAddr, tlsDhcpLseStateNewChAddr, tmnxServNotifications, protectedMacForNotify, svcDhcpClientLease, svcVpnId, svcDhcpPacketProblem, MvplsPruneState, TVirtSchedAttribute, tmnxCustomerBridgeId, tlsDHCPClientLease, MstiInstanceIdOrZero, TlsLimitMacMove, ServType, svcDhcpLseStateOldChAddr, CemSapEcid, CemSapReportAlarm, tlsDhcpLseStateOldCiAddr, svcDhcpLseStateNewChAddr, svcDhcpCoAError, tmnxServConformance, L2ptProtocols, svcTlsMacMoveMaxRate, TSapEgrQueueId, svcDhcpLseStateNewCiAddr, TdmOptionsCasTrunkFraming, StpExceptionCondition, tstpTraps, custId, svcDhcpProxyError, tmnxCustomerRootBridgeId, tmnxOtherBridgeId, tlsDhcpLseStateOldChAddr, ConfigStatus, StpProtocol, tmnxServObjs, svcDhcpLseStateOldCiAddr, staticHostDynamicMacIpAddress, BridgeId, hostConnectivityCiAddr, tlsDhcpPacketProblem, TStpPortState, tlsMstiInstanceId, ServObjDesc, staticHostDynamicMacConflict, VpnId, StpPortRole, hostConnectivityCiAddrType, ServObjName, TlsLimitMacMoveLevel, tlsDhcpLseStateNewCiAddr, svcDhcpLseStatePopulateError, svcDhcpSubAuthError, TSapIngQueueId, TQosQueueAttribute, svcId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityChAddr", "tlsDhcpLseStateNewChAddr", "tmnxServNotifications", "protectedMacForNotify", "svcDhcpClientLease", "svcVpnId", "svcDhcpPacketProblem", "MvplsPruneState", "TVirtSchedAttribute", "tmnxCustomerBridgeId", "tlsDHCPClientLease", "MstiInstanceIdOrZero", "TlsLimitMacMove", "ServType", "svcDhcpLseStateOldChAddr", "CemSapEcid", "CemSapReportAlarm", "tlsDhcpLseStateOldCiAddr", "svcDhcpLseStateNewChAddr", "svcDhcpCoAError", "tmnxServConformance", "L2ptProtocols", "svcTlsMacMoveMaxRate", "TSapEgrQueueId", "svcDhcpLseStateNewCiAddr", "TdmOptionsCasTrunkFraming", "StpExceptionCondition", "tstpTraps", "custId", "svcDhcpProxyError", "tmnxCustomerRootBridgeId", "tmnxOtherBridgeId", "tlsDhcpLseStateOldChAddr", "ConfigStatus", "StpProtocol", "tmnxServObjs", "svcDhcpLseStateOldCiAddr", "staticHostDynamicMacIpAddress", "BridgeId", "hostConnectivityCiAddr", "tlsDhcpPacketProblem", "TStpPortState", "tlsMstiInstanceId", "ServObjDesc", "staticHostDynamicMacConflict", "VpnId", "StpPortRole", "hostConnectivityCiAddrType", "ServObjName", "TlsLimitMacMoveLevel", "tlsDhcpLseStateNewCiAddr", "svcDhcpLseStatePopulateError", "svcDhcpSubAuthError", "TSapIngQueueId", "TQosQueueAttribute", "svcId")
TmnxServId, TmnxCustId, ServiceAdminStatus, TCIRRate, TPIRRate, TmnxEnabledDisabled, TIngressQueueId, TmnxEncapVal, TNamedItemOrEmpty, TSapIngressPolicyID, TmnxActionType, TPolicyStatementNameOrEmpty, TEgressQueueId, TNamedItem, TSapEgressPolicyID, TPortSchedulerPIR, TmnxPortID, TmnxOperState, TCpmProtPolicyID, TmnxIgmpVersion, TItemDescription = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxServId", "TmnxCustId", "ServiceAdminStatus", "TCIRRate", "TPIRRate", "TmnxEnabledDisabled", "TIngressQueueId", "TmnxEncapVal", "TNamedItemOrEmpty", "TSapIngressPolicyID", "TmnxActionType", "TPolicyStatementNameOrEmpty", "TEgressQueueId", "TNamedItem", "TSapEgressPolicyID", "TPortSchedulerPIR", "TmnxPortID", "TmnxOperState", "TCpmProtPolicyID", "TmnxIgmpVersion", "TItemDescription")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmTrafficDescrParamIndex")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, IpAddress, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32")
TextualConvention, RowStatus, TimeStamp, MacAddress, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "MacAddress", "DisplayString", "TruthValue")
timetraSvcSapMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 55))
timetraSvcSapMIBModule.setRevisions(('1907-10-01 00:00',))
if mibBuilder.loadTexts: timetraSvcSapMIBModule.setLastUpdated('0710010000Z')
if mibBuilder.loadTexts: timetraSvcSapMIBModule.setOrganization('Alcatel')
tmnxSapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3))
tmnxSapNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100))
tmnxSapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3))
sapTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3))
sapTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0))
sapNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapNumEntries.setStatus('current')
sapBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2), )
if mibBuilder.loadTexts: sapBaseInfoTable.setStatus('current')
sapBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapBaseInfoEntry.setStatus('current')
sapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 1), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortId.setStatus('current')
sapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 2), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEncapValue.setStatus('current')
sapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapRowStatus.setStatus('current')
sapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 4), ServType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapType.setStatus('current')
sapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapDescription.setStatus('current')
sapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 6), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapAdminStatus.setStatus('current')
sapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("ingressQosMismatch", 3), ("egressQosMismatch", 4), ("portMtuTooSmall", 5), ("svcAdminDown", 6), ("iesIfAdminDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperStatus.setStatus('current')
sapIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 8), TSapIngressPolicyID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressQosPolicyId.setStatus('current')
sapIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 9), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressMacFilterId.setStatus('current')
sapIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 10), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressIpFilterId.setStatus('current')
sapEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 11), TSapEgressPolicyID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQosPolicyId.setStatus('current')
sapEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 12), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressMacFilterId.setStatus('current')
sapEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 13), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressIpFilterId.setStatus('current')
sapMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("ingressAndEgress", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapMirrorStatus.setStatus('current')
sapIesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 15), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIesIfIndex.setStatus('current')
sapLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapLastMgmtChange.setStatus('current')
sapCollectAcctStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCollectAcctStats.setStatus('current')
sapAccountingPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapAccountingPolicyId.setStatus('current')
sapVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 19), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapVpnId.setStatus('current')
sapCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 20), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCustId.setStatus('current')
sapCustMultSvcSite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 21), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCustMultSvcSite.setStatus('current')
sapIngressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 22), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setStatus('current')
sapEgressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 23), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setStatus('current')
sapSplitHorizonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 24), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSplitHorizonGrp.setStatus('current')
sapIngressSharedQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 25), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressSharedQueuePolicy.setStatus('current')
sapIngressMatchQinQDot1PBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("top", 2), ("bottom", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressMatchQinQDot1PBits.setStatus('current')
sapOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 27), Bits().clone(namedValues=NamedValues(("sapAdminDown", 0), ("svcAdminDown", 1), ("iesIfAdminDown", 2), ("portOperDown", 3), ("portMtuTooSmall", 4), ("l2OperDown", 5), ("ingressQosMismatch", 6), ("egressQosMismatch", 7), ("relearnLimitExceeded", 8), ("recProtSrcMac", 9), ("subIfAdminDown", 10), ("sapIpipeNoCeIpAddr", 11), ("sapTodResourceUnavail", 12), ("sapTodMssResourceUnavail", 13), ("sapParamMismatch", 14), ("sapCemNoEcidOrMacAddr", 15), ("sapStandbyForMcRing", 16), ("sapSvcMtuTooSmall", 17), ("ingressNamedPoolMismatch", 18), ("egressNamedPoolMismatch", 19), ("ipMirrorNoMacAddr", 20), ("sapEpipeNoRingNode", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperFlags.setStatus('current')
sapLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 28), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapLastStatusChange.setStatus('current')
sapAntiSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("sourceIpAddr", 1), ("sourceMacAddr", 2), ("sourceIpAndMacAddr", 3), ("nextHopIpAndMacAddr", 4))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapAntiSpoofing.setStatus('current')
sapIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 30), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressIpv6FilterId.setStatus('current')
sapEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 31), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressIpv6FilterId.setStatus('current')
sapTodSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 32), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapTodSuite.setStatus('current')
sapIngUseMultipointShared = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngUseMultipointShared.setStatus('current')
sapEgressQinQMarkTopOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQinQMarkTopOnly.setStatus('current')
sapEgressAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 35), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressAggRateLimit.setStatus('current')
sapEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 36), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEndPoint.setStatus('current')
sapIngressVlanTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vlanId", 2), ("copyOuter", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressVlanTranslation.setStatus('current')
sapIngressVlanTranslationId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 4094), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressVlanTranslationId.setStatus('current')
sapSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("regular", 0), ("capture", 1), ("managed", 2))).clone('regular')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubType.setStatus('current')
sapCpmProtPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 40), TCpmProtPolicyID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCpmProtPolicyId.setStatus('current')
sapCpmProtMonitorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 41), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCpmProtMonitorMac.setStatus('current')
sapEgressFrameBasedAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 2, 1, 42), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressFrameBasedAccounting.setStatus('current')
sapTlsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3), )
if mibBuilder.loadTexts: sapTlsInfoTable.setStatus('current')
sapTlsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsInfoEntry.setStatus('current')
sapTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 1), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpAdminStatus.setStatus('current')
sapTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpPriority.setStatus('current')
sapTlsStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpPortNum.setStatus('current')
sapTlsStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpPathCost.setStatus('current')
sapTlsStpRapidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 5), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpRapidStart.setStatus('current')
sapTlsStpBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("dot1d", 2), ("pvst", 3))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpBpduEncap.setStatus('current')
sapTlsStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 7), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpPortState.setStatus('current')
sapTlsStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpDesignatedBridge.setStatus('current')
sapTlsStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpDesignatedPort.setStatus('current')
sapTlsStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpForwardTransitions.setStatus('current')
sapTlsStpInConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInConfigBpdus.setStatus('current')
sapTlsStpInTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInTcnBpdus.setStatus('current')
sapTlsStpInBadBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInBadBpdus.setStatus('current')
sapTlsStpOutConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutConfigBpdus.setStatus('current')
sapTlsStpOutTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutTcnBpdus.setStatus('current')
sapTlsStpOperBpduEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("dot1d", 2), ("pvst", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOperBpduEncap.setStatus('current')
sapTlsVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 17), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsVpnId.setStatus('current')
sapTlsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 18), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsCustId.setStatus('current')
sapTlsMacAddressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacAddressLimit.setStatus('current')
sapTlsNumMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsNumMacAddresses.setStatus('current')
sapTlsNumStaticMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsNumStaticMacAddresses.setStatus('current')
sapTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 22), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacLearning.setStatus('current')
sapTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 23), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacAgeing.setStatus('current')
sapTlsStpOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOperEdge.setStatus('current')
sapTlsStpAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1))).clone('forceTrue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpAdminPointToPoint.setStatus('current')
sapTlsStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 26), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpPortRole.setStatus('current')
sapTlsStpAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 27), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpAutoEdge.setStatus('current')
sapTlsStpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 28), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOperProtocol.setStatus('current')
sapTlsStpInRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInRstBpdus.setStatus('current')
sapTlsStpOutRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutRstBpdus.setStatus('current')
sapTlsLimitMacMove = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 31), TlsLimitMacMove().clone('blockable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsLimitMacMove.setStatus('current')
sapTlsDhcpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 32), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpSnooping.setStatus('obsolete')
sapTlsMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 33), TmnxEnabledDisabled()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMacPinning.setStatus('current')
sapTlsDiscardUnknownSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 34), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDiscardUnknownSource.setStatus('current')
sapTlsMvplsPruneState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 35), MvplsPruneState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsPruneState.setStatus('current')
sapTlsMvplsMgmtService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 36), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtService.setStatus('current')
sapTlsMvplsMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 37), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtPortId.setStatus('current')
sapTlsMvplsMgmtEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 38), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtEncapValue.setStatus('current')
sapTlsArpReplyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabledWithSubscrIdent", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsArpReplyAgent.setStatus('current')
sapTlsStpException = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 40), StpExceptionCondition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpException.setStatus('current')
sapTlsAuthenticationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 41), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsAuthenticationPolicy.setStatus('current')
sapTlsL2ptTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 42), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptTermination.setStatus('current')
sapTlsBpduTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("disabled", 2), ("pvst", 3), ("stp", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsBpduTranslation.setStatus('current')
sapTlsStpRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 44), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsStpRootGuard.setStatus('current')
sapTlsStpInsideRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInsideRegion.setStatus('current')
sapTlsEgressMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 46), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsEgressMcastGroup.setStatus('current')
sapTlsStpInMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpInMstBpdus.setStatus('current')
sapTlsStpOutMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpOutMstBpdus.setStatus('current')
sapTlsRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 49), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsRestProtSrcMac.setStatus('current')
sapTlsRestUnprotDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 50), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsRestUnprotDstMac.setStatus('current')
sapTlsStpRxdDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 51), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpRxdDesigBridge.setStatus('current')
sapTlsStpRootGuardViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsStpRootGuardViolation.setStatus('current')
sapTlsShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvAction.setStatus('current')
sapTlsShcvSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 54), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvSrcIp.setStatus('current')
sapTlsShcvSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 55), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvSrcMac.setStatus('current')
sapTlsShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsShcvInterval.setStatus('current')
sapTlsMvplsMgmtMsti = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 57), MstiInstanceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMvplsMgmtMsti.setStatus('current')
sapTlsMacMoveNextUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 58), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMacMoveNextUpTime.setStatus('current')
sapTlsMacMoveRateExcdLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMacMoveRateExcdLeft.setStatus('current')
sapTlsRestProtSrcMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("alarm-only", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsRestProtSrcMacAction.setStatus('current')
sapTlsL2ptForceBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 61), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptForceBoundary.setStatus('current')
sapTlsLimitMacMoveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 62), TlsLimitMacMoveLevel().clone('tertiary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsLimitMacMoveLevel.setStatus('current')
sapTlsBpduTransOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("disabled", 2), ("pvst", 3), ("stp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsBpduTransOper.setStatus('current')
sapTlsDefMsapPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 64), TPolicyStatementNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDefMsapPolicy.setStatus('current')
sapTlsL2ptProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 65), L2ptProtocols().clone(namedValues=NamedValues(("stp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptProtocols.setStatus('current')
sapTlsL2ptForceProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 66), L2ptProtocols().clone(namedValues=NamedValues(("stp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsL2ptForceProtocols.setStatus('current')
sapTlsPppoeMsapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 67), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsPppoeMsapTrigger.setStatus('current')
sapTlsDhcpMsapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 68), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpMsapTrigger.setStatus('current')
sapTlsMrpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 69), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpJoinTime.setStatus('current')
sapTlsMrpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 60)).clone(30)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpLeaveTime.setStatus('current')
sapTlsMrpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(100)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpLeaveAllTime.setStatus('current')
sapTlsMrpPeriodicTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 72), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setUnits('deci-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpPeriodicTime.setStatus('current')
sapTlsMrpPeriodicEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 3, 1, 73), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMrpPeriodicEnabled.setStatus('current')
sapAtmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4), )
if mibBuilder.loadTexts: sapAtmInfoTable.setStatus('current')
sapAtmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapAtmInfoEntry.setStatus('current')
sapAtmEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 10, 11))).clone(namedValues=NamedValues(("vcMultiplexRoutedProtocol", 1), ("vcMultiplexBridgedProtocol8023", 2), ("llcSnapRoutedProtocol", 7), ("multiprotocolFrameRelaySscs", 8), ("unknown", 10), ("llcSnapBridgedProtocol8023", 11))).clone('llcSnapRoutedProtocol')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmEncapsulation.setStatus('current')
sapAtmIngressTrafficDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 2), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmIngressTrafficDescIndex.setStatus('current')
sapAtmEgressTrafficDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 3), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmEgressTrafficDescIndex.setStatus('current')
sapAtmOamAlarmCellHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 4), ServiceAdminStatus().clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmOamAlarmCellHandling.setStatus('current')
sapAtmOamTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 5), ServiceAdminStatus().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmOamTerminate.setStatus('current')
sapAtmOamPeriodicLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 4, 1, 6), ServiceAdminStatus().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAtmOamPeriodicLoopback.setStatus('current')
sapBaseStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6), )
if mibBuilder.loadTexts: sapBaseStatsTable.setStatus('current')
sapBaseStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapBaseStatsEntry.setStatus('current')
sapBaseStatsIngressPchipDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipDroppedPackets.setStatus('current')
sapBaseStatsIngressPchipDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipDroppedOctets.setStatus('current')
sapBaseStatsIngressPchipOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedHiPrioPackets.setStatus('current')
sapBaseStatsIngressPchipOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedHiPrioOctets.setStatus('current')
sapBaseStatsIngressPchipOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedLoPrioPackets.setStatus('current')
sapBaseStatsIngressPchipOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedLoPrioOctets.setStatus('current')
sapBaseStatsIngressQchipDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedHiPrioPackets.setStatus('current')
sapBaseStatsIngressQchipDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedHiPrioOctets.setStatus('current')
sapBaseStatsIngressQchipDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedLoPrioPackets.setStatus('current')
sapBaseStatsIngressQchipDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipDroppedLoPrioOctets.setStatus('current')
sapBaseStatsIngressQchipForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedInProfPackets.setStatus('current')
sapBaseStatsIngressQchipForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedInProfOctets.setStatus('current')
sapBaseStatsIngressQchipForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedOutProfPackets.setStatus('current')
sapBaseStatsIngressQchipForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressQchipForwardedOutProfOctets.setStatus('current')
sapBaseStatsEgressQchipDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedInProfPackets.setStatus('current')
sapBaseStatsEgressQchipDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedInProfOctets.setStatus('current')
sapBaseStatsEgressQchipDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedOutProfPackets.setStatus('current')
sapBaseStatsEgressQchipDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipDroppedOutProfOctets.setStatus('current')
sapBaseStatsEgressQchipForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedInProfPackets.setStatus('current')
sapBaseStatsEgressQchipForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedInProfOctets.setStatus('current')
sapBaseStatsEgressQchipForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedOutProfPackets.setStatus('current')
sapBaseStatsEgressQchipForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsEgressQchipForwardedOutProfOctets.setStatus('current')
sapBaseStatsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 23), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsCustId.setStatus('current')
sapBaseStatsIngressPchipOfferedUncoloredPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedUncoloredPackets.setStatus('current')
sapBaseStatsIngressPchipOfferedUncoloredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsIngressPchipOfferedUncoloredOctets.setStatus('current')
sapBaseStatsAuthenticationPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsAuthenticationPktsDiscarded.setStatus('current')
sapBaseStatsAuthenticationPktsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsAuthenticationPktsSuccess.setStatus('current')
sapBaseStatsLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 6, 1, 28), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapBaseStatsLastClearedTime.setStatus('current')
sapIngQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7), )
if mibBuilder.loadTexts: sapIngQosQueueStatsTable.setStatus('current')
sapIngQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueId"))
if mibBuilder.loadTexts: sapIngQosQueueStatsEntry.setStatus('current')
sapIngQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 1), TSapIngQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueId.setStatus('current')
sapIngQosQueueStatsOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioPackets.setStatus('current')
sapIngQosQueueStatsDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedHiPrioPackets.setStatus('current')
sapIngQosQueueStatsOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioPackets.setStatus('current')
sapIngQosQueueStatsDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedLoPrioPackets.setStatus('current')
sapIngQosQueueStatsOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioOctets.setStatus('current')
sapIngQosQueueStatsDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedHiPrioOctets.setStatus('current')
sapIngQosQueueStatsOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioOctets.setStatus('current')
sapIngQosQueueStatsDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedLoPrioOctets.setStatus('current')
sapIngQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfPackets.setStatus('current')
sapIngQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfPackets.setStatus('current')
sapIngQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfOctets.setStatus('current')
sapIngQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfOctets.setStatus('current')
sapIngQosCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 14), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosCustId.setStatus('current')
sapIngQosQueueStatsUncoloredPacketsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsUncoloredPacketsOffered.setStatus('current')
sapIngQosQueueStatsUncoloredOctetsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsUncoloredOctetsOffered.setStatus('current')
sapEgrQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8), )
if mibBuilder.loadTexts: sapEgrQosQueueStatsTable.setStatus('current')
sapEgrQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueId"))
if mibBuilder.loadTexts: sapEgrQosQueueStatsEntry.setStatus('current')
sapEgrQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 1), TSapEgrQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueId.setStatus('current')
sapEgrQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfPackets.setStatus('current')
sapEgrQosQueueStatsDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedInProfPackets.setStatus('current')
sapEgrQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfPackets.setStatus('current')
sapEgrQosQueueStatsDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOutProfPackets.setStatus('current')
sapEgrQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfOctets.setStatus('current')
sapEgrQosQueueStatsDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedInProfOctets.setStatus('current')
sapEgrQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfOctets.setStatus('current')
sapEgrQosQueueStatsDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOutProfOctets.setStatus('current')
sapEgrQosCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 8, 1, 10), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosCustId.setStatus('current')
sapIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9), )
if mibBuilder.loadTexts: sapIngQosSchedStatsTable.setStatus('current')
sapIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedName"))
if mibBuilder.loadTexts: sapIngQosSchedStatsEntry.setStatus('current')
sapIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapIngQosSchedName.setStatus('current')
sapIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedPackets.setStatus('current')
sapIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedOctets.setStatus('current')
sapIngQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 9, 1, 4), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedCustId.setStatus('current')
sapEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10), )
if mibBuilder.loadTexts: sapEgrQosSchedStatsTable.setStatus('current')
sapEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedName"))
if mibBuilder.loadTexts: sapEgrQosSchedStatsEntry.setStatus('current')
sapEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapEgrQosSchedName.setStatus('current')
sapEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedPackets.setStatus('current')
sapEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedOctets.setStatus('current')
sapEgrQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 10, 1, 4), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedCustId.setStatus('current')
sapTlsManagedVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11), )
if mibBuilder.loadTexts: sapTlsManagedVlanListTable.setStatus('current')
sapTlsManagedVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMinVlanTag"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMaxVlanTag"))
if mibBuilder.loadTexts: sapTlsManagedVlanListEntry.setStatus('current')
sapTlsMvplsMinVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: sapTlsMvplsMinVlanTag.setStatus('current')
sapTlsMvplsMaxVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: sapTlsMvplsMaxVlanTag.setStatus('current')
sapTlsMvplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapTlsMvplsRowStatus.setStatus('current')
sapAntiSpoofTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12), )
if mibBuilder.loadTexts: sapAntiSpoofTable.setStatus('current')
sapAntiSpoofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofIpAddress"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofMacAddress"))
if mibBuilder.loadTexts: sapAntiSpoofEntry.setStatus('current')
sapAntiSpoofIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapAntiSpoofIpAddress.setStatus('current')
sapAntiSpoofMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 12, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapAntiSpoofMacAddress.setStatus('current')
sapStaticHostTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13), )
if mibBuilder.loadTexts: sapStaticHostTable.setStatus('current')
sapStaticHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostIpAddress"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostMacAddress"))
if mibBuilder.loadTexts: sapStaticHostEntry.setStatus('current')
sapStaticHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostRowStatus.setStatus('current')
sapStaticHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 2), IpAddress())
if mibBuilder.loadTexts: sapStaticHostIpAddress.setStatus('current')
sapStaticHostMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 3), MacAddress())
if mibBuilder.loadTexts: sapStaticHostMacAddress.setStatus('current')
sapStaticHostSubscrIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSubscrIdent.setStatus('current')
sapStaticHostSubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 5), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSubProfile.setStatus('current')
sapStaticHostSlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 6), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSlaProfile.setStatus('current')
sapStaticHostShcvOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("undefined", 2), ("down", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvOperState.setStatus('current')
sapStaticHostShcvChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvChecks.setStatus('current')
sapStaticHostShcvReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvReplies.setStatus('current')
sapStaticHostShcvReplyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostShcvReplyTime.setStatus('current')
sapStaticHostDynMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostDynMacAddress.setStatus('current')
sapStaticHostRetailerSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 12), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostRetailerSvcId.setStatus('current')
sapStaticHostRetailerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostRetailerIf.setStatus('current')
sapStaticHostFwdingState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 14), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapStaticHostFwdingState.setStatus('current')
sapStaticHostAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostAncpString.setStatus('current')
sapStaticHostSubIdIsSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostSubIdIsSapId.setStatus('current')
sapStaticHostAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 17), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostAppProfile.setStatus('current')
sapStaticHostIntermediateDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 13, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapStaticHostIntermediateDestId.setStatus('current')
sapTlsDhcpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14), )
if mibBuilder.loadTexts: sapTlsDhcpInfoTable.setStatus('current')
sapTlsDhcpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsDhcpInfoEntry.setStatus('current')
sapTlsDhcpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpAdminState.setStatus('current')
sapTlsDhcpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 2), ServObjDesc().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpDescription.setStatus('current')
sapTlsDhcpSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 3), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpSnoop.setStatus('current')
sapTlsDhcpLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpLeasePopulate.setStatus('current')
sapTlsDhcpOperLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpOperLeasePopulate.setStatus('current')
sapTlsDhcpInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3))).clone('keep')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpInfoAction.setStatus('current')
sapTlsDhcpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("asciiTuple", 1), ("vlanAsciiTuple", 2))).clone('asciiTuple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpCircuitId.setStatus('current')
sapTlsDhcpRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mac", 2), ("remote-id", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpRemoteId.setStatus('current')
sapTlsDhcpRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpRemoteIdString.setStatus('current')
sapTlsDhcpProxyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 10), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyAdminState.setStatus('current')
sapTlsDhcpProxyServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyServerAddr.setStatus('current')
sapTlsDhcpProxyLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 315446399), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyLeaseTime.setStatus('current')
sapTlsDhcpProxyLTRadiusOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpProxyLTRadiusOverride.setStatus('current')
sapTlsDhcpVendorIncludeOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 14), Bits().clone(namedValues=NamedValues(("systemId", 0), ("clientMac", 1), ("serviceId", 2), ("sapId", 3))).clone(namedValues=NamedValues(("systemId", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpVendorIncludeOptions.setStatus('current')
sapTlsDhcpVendorOptionString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 14, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsDhcpVendorOptionString.setStatus('current')
sapTlsDhcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15), )
if mibBuilder.loadTexts: sapTlsDhcpStatsTable.setStatus('current')
sapTlsDhcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsDhcpStatsEntry.setStatus('current')
sapTlsDhcpStatsClntSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntSnoopdPckts.setStatus('current')
sapTlsDhcpStatsSrvrSnoopdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrSnoopdPckts.setStatus('current')
sapTlsDhcpStatsClntForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntForwdPckts.setStatus('current')
sapTlsDhcpStatsSrvrForwdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrForwdPckts.setStatus('current')
sapTlsDhcpStatsClntDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntDropdPckts.setStatus('current')
sapTlsDhcpStatsSrvrDropdPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsSrvrDropdPckts.setStatus('current')
sapTlsDhcpStatsClntProxRadPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntProxRadPckts.setStatus('current')
sapTlsDhcpStatsClntProxLSPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsClntProxLSPckts.setStatus('current')
sapTlsDhcpStatsGenReleasePckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsGenReleasePckts.setStatus('current')
sapTlsDhcpStatsGenForceRenPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpStatsGenForceRenPckts.setStatus('current')
sapTlsDhcpLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16), )
if mibBuilder.loadTexts: sapTlsDhcpLeaseStateTable.setStatus('obsolete')
sapTlsDhcpLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateCiAddr"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateChAddr"))
if mibBuilder.loadTexts: sapTlsDhcpLeaseStateEntry.setStatus('obsolete')
sapTlsDhcpLseStateCiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 1), IpAddress())
if mibBuilder.loadTexts: sapTlsDhcpLseStateCiAddr.setStatus('obsolete')
sapTlsDhcpLseStateChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 2), MacAddress())
if mibBuilder.loadTexts: sapTlsDhcpLseStateChAddr.setStatus('obsolete')
sapTlsDhcpLseStateRemainLseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpLseStateRemainLseTime.setStatus('obsolete')
sapTlsDhcpLseStateOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpLseStateOption82.setStatus('obsolete')
sapTlsDhcpLseStatePersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsDhcpLseStatePersistKey.setStatus('obsolete')
sapPortIdIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17), )
if mibBuilder.loadTexts: sapPortIdIngQosSchedStatsTable.setStatus('current')
sapPortIdIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngPortId"))
if mibBuilder.loadTexts: sapPortIdIngQosSchedStatsEntry.setStatus('current')
sapPortIdIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapPortIdIngQosSchedName.setStatus('current')
sapPortIdIngPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: sapPortIdIngPortId.setStatus('current')
sapPortIdIngQosSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdIngQosSchedFwdPkts.setStatus('current')
sapPortIdIngQosSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdIngQosSchedFwdOctets.setStatus('current')
sapPortIdIngQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 17, 1, 5), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdIngQosSchedCustId.setStatus('current')
sapPortIdEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18), )
if mibBuilder.loadTexts: sapPortIdEgrQosSchedStatsTable.setStatus('current')
sapPortIdEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrPortId"))
if mibBuilder.loadTexts: sapPortIdEgrQosSchedStatsEntry.setStatus('current')
sapPortIdEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapPortIdEgrQosSchedName.setStatus('current')
sapPortIdEgrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: sapPortIdEgrPortId.setStatus('current')
sapPortIdEgrQosSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdEgrQosSchedFwdPkts.setStatus('current')
sapPortIdEgrQosSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdEgrQosSchedFwdOctets.setStatus('current')
sapPortIdEgrQosSchedCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 18, 1, 5), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortIdEgrQosSchedCustId.setStatus('current')
sapIngQosQueueInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19), )
if mibBuilder.loadTexts: sapIngQosQueueInfoTable.setStatus('current')
sapIngQosQueueInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQId"))
if mibBuilder.loadTexts: sapIngQosQueueInfoEntry.setStatus('current')
sapIngQosQId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 1), TIngressQueueId())
if mibBuilder.loadTexts: sapIngQosQId.setStatus('current')
sapIngQosQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQRowStatus.setStatus('current')
sapIngQosQLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQLastMgmtChange.setStatus('current')
sapIngQosQOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 4), TQosQueueAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQOverrideFlags.setStatus('current')
sapIngQosQCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 5), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQCBS.setStatus('current')
sapIngQosQMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 6), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQMBS.setStatus('current')
sapIngQosQHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 7), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQHiPrioOnly.setStatus('current')
sapIngQosQCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 8), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQCIRAdaptation.setStatus('current')
sapIngQosQPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 9), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQPIRAdaptation.setStatus('current')
sapIngQosQAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 10), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQAdminPIR.setStatus('current')
sapIngQosQAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 19, 1, 11), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosQAdminCIR.setStatus('current')
sapEgrQosQueueInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20), )
if mibBuilder.loadTexts: sapEgrQosQueueInfoTable.setStatus('current')
sapEgrQosQueueInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQId"))
if mibBuilder.loadTexts: sapEgrQosQueueInfoEntry.setStatus('current')
sapEgrQosQId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 1), TEgressQueueId())
if mibBuilder.loadTexts: sapEgrQosQId.setStatus('current')
sapEgrQosQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQRowStatus.setStatus('current')
sapEgrQosQLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQLastMgmtChange.setStatus('current')
sapEgrQosQOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 4), TQosQueueAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQOverrideFlags.setStatus('current')
sapEgrQosQCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 5), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQCBS.setStatus('current')
sapEgrQosQMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 6), TBurstSize().clone(-1)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQMBS.setStatus('current')
sapEgrQosQHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 7), TBurstPercentOrDefault().clone(-1)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQHiPrioOnly.setStatus('current')
sapEgrQosQCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 8), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQCIRAdaptation.setStatus('current')
sapEgrQosQPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 9), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQPIRAdaptation.setStatus('current')
sapEgrQosQAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 10), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQAdminPIR.setStatus('current')
sapEgrQosQAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 11), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQAdminCIR.setStatus('current')
sapEgrQosQAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 20, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosQAvgOverhead.setStatus('current')
sapIngQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21), )
if mibBuilder.loadTexts: sapIngQosSchedInfoTable.setStatus('current')
sapIngQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSName"))
if mibBuilder.loadTexts: sapIngQosSchedInfoEntry.setStatus('current')
sapIngQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapIngQosSName.setStatus('current')
sapIngQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSRowStatus.setStatus('current')
sapIngQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSLastMgmtChange.setStatus('current')
sapIngQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSOverrideFlags.setStatus('current')
sapIngQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSPIR.setStatus('current')
sapIngQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSCIR.setStatus('current')
sapIngQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 21, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngQosSSummedCIR.setStatus('current')
sapEgrQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22), )
if mibBuilder.loadTexts: sapEgrQosSchedInfoTable.setStatus('current')
sapEgrQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSName"))
if mibBuilder.loadTexts: sapEgrQosSchedInfoEntry.setStatus('current')
sapEgrQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapEgrQosSName.setStatus('current')
sapEgrQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSRowStatus.setStatus('current')
sapEgrQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSLastMgmtChange.setStatus('current')
sapEgrQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSOverrideFlags.setStatus('current')
sapEgrQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSPIR.setStatus('current')
sapEgrQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSCIR.setStatus('current')
sapEgrQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 22, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgrQosSSummedCIR.setStatus('current')
sapSubMgmtInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23), )
if mibBuilder.loadTexts: sapSubMgmtInfoTable.setStatus('current')
sapSubMgmtInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapSubMgmtInfoEntry.setStatus('current')
sapSubMgmtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtAdminStatus.setStatus('current')
sapSubMgmtDefSubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 2), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSubProfile.setStatus('current')
sapSubMgmtDefSlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 3), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSlaProfile.setStatus('current')
sapSubMgmtSubIdentPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 4), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtSubIdentPolicy.setStatus('current')
sapSubMgmtSubscriberLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtSubscriberLimit.setStatus('current')
sapSubMgmtProfiledTrafficOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtProfiledTrafficOnly.setStatus('current')
sapSubMgmtNonSubTrafficSubIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSubIdent.setStatus('current')
sapSubMgmtNonSubTrafficSubProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 8), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSubProf.setStatus('current')
sapSubMgmtNonSubTrafficSlaProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 9), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficSlaProf.setStatus('current')
sapSubMgmtMacDaHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtMacDaHashing.setStatus('current')
sapSubMgmtDefSubIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useSapId", 1), ("useString", 2))).clone('useString')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSubIdent.setStatus('current')
sapSubMgmtDefSubIdentString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefSubIdentString.setStatus('current')
sapSubMgmtDefAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 13), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtDefAppProfile.setStatus('current')
sapSubMgmtNonSubTrafficAppProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 23, 1, 14), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapSubMgmtNonSubTrafficAppProf.setStatus('current')
sapTlsMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24), )
if mibBuilder.loadTexts: sapTlsMstiTable.setStatus('current')
sapTlsMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: sapTlsMstiEntry.setStatus('current')
sapTlsMstiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMstiPriority.setStatus('current')
sapTlsMstiPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapTlsMstiPathCost.setStatus('current')
sapTlsMstiLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiLastMgmtChange.setStatus('current')
sapTlsMstiPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 4), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiPortRole.setStatus('current')
sapTlsMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 5), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiPortState.setStatus('current')
sapTlsMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiDesignatedBridge.setStatus('current')
sapTlsMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 24, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMstiDesignatedPort.setStatus('current')
sapIpipeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25), )
if mibBuilder.loadTexts: sapIpipeInfoTable.setStatus('current')
sapIpipeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapIpipeInfoEntry.setStatus('current')
sapIpipeCeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeCeInetAddressType.setStatus('current')
sapIpipeCeInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeCeInetAddress.setStatus('current')
sapIpipeMacRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(14400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeMacRefreshInterval.setStatus('current')
sapIpipeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIpipeMacAddress.setStatus('current')
sapIpipeArpedMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIpipeArpedMacAddress.setStatus('current')
sapIpipeArpedMacAddressTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 25, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIpipeArpedMacAddressTimeout.setStatus('current')
sapTodMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26), )
if mibBuilder.loadTexts: sapTodMonitorTable.setStatus('current')
sapTodMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTodMonitorEntry.setStatus('current')
sapCurrentIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 1), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressIpFilterId.setStatus('current')
sapCurrentIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 2), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressIpv6FilterId.setStatus('current')
sapCurrentIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 3), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressMacFilterId.setStatus('current')
sapCurrentIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 4), TSapIngressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressQosPolicyId.setStatus('current')
sapCurrentIngressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 5), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentIngressQosSchedPlcy.setStatus('current')
sapCurrentEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 6), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressIpFilterId.setStatus('current')
sapCurrentEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 7), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressIpv6FilterId.setStatus('current')
sapCurrentEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 8), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressMacFilterId.setStatus('current')
sapCurrentEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 9), TSapEgressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressQosPolicyId.setStatus('current')
sapCurrentEgressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 10), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentEgressQosSchedPlcy.setStatus('current')
sapIntendedIngressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 11), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressIpFilterId.setStatus('current')
sapIntendedIngressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 12), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressIpv6FilterId.setStatus('current')
sapIntendedIngressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 13), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressMacFilterId.setStatus('current')
sapIntendedIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 14), TSapIngressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressQosPolicyId.setStatus('current')
sapIntendedIngressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 15), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedIngressQosSchedPlcy.setStatus('current')
sapIntendedEgressIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 16), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressIpFilterId.setStatus('current')
sapIntendedEgressIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 17), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressIpv6FilterId.setStatus('current')
sapIntendedEgressMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 18), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressMacFilterId.setStatus('current')
sapIntendedEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 19), TSapEgressPolicyID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressQosPolicyId.setStatus('current')
sapIntendedEgressQosSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 26, 1, 20), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIntendedEgressQosSchedPlcy.setStatus('current')
sapIngrQosPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27), )
if mibBuilder.loadTexts: sapIngrQosPlcyStatsTable.setStatus('current')
sapIngrQosPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyId"))
if mibBuilder.loadTexts: sapIngrQosPlcyStatsEntry.setStatus('current')
sapIgQosPlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 1), TSapIngressPolicyID())
if mibBuilder.loadTexts: sapIgQosPlcyId.setStatus('current')
sapIgQosPlcyDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedHiPrioPackets.setStatus('current')
sapIgQosPlcyDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedHiPrioOctets.setStatus('current')
sapIgQosPlcyDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedLoPrioPackets.setStatus('current')
sapIgQosPlcyDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyDroppedLoPrioOctets.setStatus('current')
sapIgQosPlcyForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedInProfPackets.setStatus('current')
sapIgQosPlcyForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedInProfOctets.setStatus('current')
sapIgQosPlcyForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedOutProfPackets.setStatus('current')
sapIgQosPlcyForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 27, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyForwardedOutProfOctets.setStatus('current')
sapEgrQosPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28), )
if mibBuilder.loadTexts: sapEgrQosPlcyStatsTable.setStatus('current')
sapEgrQosPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyId"))
if mibBuilder.loadTexts: sapEgrQosPlcyStatsEntry.setStatus('current')
sapEgQosPlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 1), TSapEgressPolicyID())
if mibBuilder.loadTexts: sapEgQosPlcyId.setStatus('current')
sapEgQosPlcyDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedInProfPackets.setStatus('current')
sapEgQosPlcyDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedInProfOctets.setStatus('current')
sapEgQosPlcyDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedOutProfPackets.setStatus('current')
sapEgQosPlcyDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyDroppedOutProfOctets.setStatus('current')
sapEgQosPlcyForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedInProfPackets.setStatus('current')
sapEgQosPlcyForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedInProfOctets.setStatus('current')
sapEgQosPlcyForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedOutProfPackets.setStatus('current')
sapEgQosPlcyForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 28, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyForwardedOutProfOctets.setStatus('current')
sapIngQosPlcyQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29), )
if mibBuilder.loadTexts: sapIngQosPlcyQueueStatsTable.setStatus('current')
sapIngQosPlcyQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueuePlcyId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueId"))
if mibBuilder.loadTexts: sapIngQosPlcyQueueStatsEntry.setStatus('current')
sapIgQosPlcyQueuePlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 1), TSapIngressPolicyID())
if mibBuilder.loadTexts: sapIgQosPlcyQueuePlcyId.setStatus('current')
sapIgQosPlcyQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 2), TSapIngQueueId())
if mibBuilder.loadTexts: sapIgQosPlcyQueueId.setStatus('current')
sapIgQosPlcyQueueStatsOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedHiPrioPackets.setStatus('current')
sapIgQosPlcyQueueStatsDroppedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedHiPrioPackets.setStatus('current')
sapIgQosPlcyQueueStatsOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedLoPrioPackets.setStatus('current')
sapIgQosPlcyQueueStatsDroppedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedLoPrioPackets.setStatus('current')
sapIgQosPlcyQueueStatsOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedHiPrioOctets.setStatus('current')
sapIgQosPlcyQueueStatsDroppedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedHiPrioOctets.setStatus('current')
sapIgQosPlcyQueueStatsOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsOfferedLoPrioOctets.setStatus('current')
sapIgQosPlcyQueueStatsDroppedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsDroppedLoPrioOctets.setStatus('current')
sapIgQosPlcyQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedInProfPackets.setStatus('current')
sapIgQosPlcyQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedOutProfPackets.setStatus('current')
sapIgQosPlcyQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedInProfOctets.setStatus('current')
sapIgQosPlcyQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsForwardedOutProfOctets.setStatus('current')
sapIgQosPlcyQueueCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 15), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueCustId.setStatus('current')
sapIgQosPlcyQueueStatsUncoloredPacketsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsUncoloredPacketsOffered.setStatus('current')
sapIgQosPlcyQueueStatsUncoloredOctetsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 29, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIgQosPlcyQueueStatsUncoloredOctetsOffered.setStatus('current')
sapEgrQosPlcyQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30), )
if mibBuilder.loadTexts: sapEgrQosPlcyQueueStatsTable.setStatus('current')
sapEgrQosPlcyQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueuePlcyId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueId"))
if mibBuilder.loadTexts: sapEgrQosPlcyQueueStatsEntry.setStatus('current')
sapEgQosPlcyQueuePlcyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 1), TSapEgressPolicyID())
if mibBuilder.loadTexts: sapEgQosPlcyQueuePlcyId.setStatus('current')
sapEgQosPlcyQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 2), TSapEgrQueueId())
if mibBuilder.loadTexts: sapEgQosPlcyQueueId.setStatus('current')
sapEgQosPlcyQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedInProfPackets.setStatus('current')
sapEgQosPlcyQueueStatsDroppedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedInProfPackets.setStatus('current')
sapEgQosPlcyQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedOutProfPackets.setStatus('current')
sapEgQosPlcyQueueStatsDroppedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedOutProfPackets.setStatus('current')
sapEgQosPlcyQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedInProfOctets.setStatus('current')
sapEgQosPlcyQueueStatsDroppedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedInProfOctets.setStatus('current')
sapEgQosPlcyQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsForwardedOutProfOctets.setStatus('current')
sapEgQosPlcyQueueStatsDroppedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueStatsDroppedOutProfOctets.setStatus('current')
sapEgQosPlcyQueueCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 30, 1, 11), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgQosPlcyQueueCustId.setStatus('current')
sapDhcpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 31), )
if mibBuilder.loadTexts: sapDhcpInfoTable.setStatus('current')
sapDhcpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapDhcpInfoEntry.setStatus('current')
sapDhcpOperLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 31, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapDhcpOperLeasePopulate.setStatus('current')
sapIngSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32), )
if mibBuilder.loadTexts: sapIngSchedPlcyStatsTable.setStatus('current')
sapIngSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedName"))
if mibBuilder.loadTexts: sapIngSchedPlcyStatsEntry.setStatus('current')
sapIngSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyStatsFwdPkt.setStatus('current')
sapIngSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 32, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyStatsFwdOct.setStatus('current')
sapEgrSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33), )
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsTable.setStatus('current')
sapEgrSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedName"))
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsEntry.setStatus('current')
sapEgrSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsFwdPkt.setStatus('current')
sapEgrSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 33, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyStatsFwdOct.setStatus('current')
sapIngSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34), )
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsTable.setStatus('current')
sapIngSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngPortId"))
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsEntry.setStatus('current')
sapIngSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1, 1), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsPort.setStatus('current')
sapIngSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsFwdPkt.setStatus('current')
sapIngSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 34, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngSchedPlcyPortStatsFwdOct.setStatus('current')
sapEgrSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35), )
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsTable.setStatus('current')
sapEgrSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrPortId"))
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsEntry.setStatus('current')
sapEgrSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1, 1), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsPort.setStatus('current')
sapEgrSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsFwdPkt.setStatus('current')
sapEgrSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 35, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrSchedPlcyPortStatsFwdOct.setStatus('current')
sapCemInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40), )
if mibBuilder.loadTexts: sapCemInfoTable.setStatus('current')
sapCemInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapCemInfoEntry.setStatus('current')
sapCemLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemLastMgmtChange.setStatus('current')
sapCemEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unstructuredE1", 1), ("unstructuredT1", 2), ("unstructuredE3", 3), ("unstructuredT3", 4), ("nxDS0", 5), ("nxDS0WithCas", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemEndpointType.setStatus('current')
sapCemBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 699))).setUnits('64 Kbits/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemBitrate.setStatus('current')
sapCemCasTrunkFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 4), TdmOptionsCasTrunkFraming()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemCasTrunkFraming.setStatus('current')
sapCemPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 2048), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemPayloadSize.setStatus('current')
sapCemJitterBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 250), ))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemJitterBuffer.setStatus('current')
sapCemUseRtpHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemUseRtpHeader.setStatus('current')
sapCemDifferential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemDifferential.setStatus('current')
sapCemTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 9), Unsigned32()).setUnits('8 KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemTimestampFreq.setStatus('current')
sapCemReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 10), CemSapReportAlarm().clone(namedValues=NamedValues(("strayPkts", 1), ("malformedPkts", 2), ("pktLoss", 3), ("bfrOverrun", 4), ("bfrUnderrun", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemReportAlarm.setStatus('current')
sapCemReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 11), CemSapReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemReportAlarmStatus.setStatus('current')
sapCemLocalEcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 12), CemSapEcid()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemLocalEcid.setStatus('current')
sapCemRemoteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 13), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemRemoteMacAddr.setStatus('current')
sapCemRemoteEcid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 40, 1, 14), CemSapEcid()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCemRemoteEcid.setStatus('current')
sapCemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41), )
if mibBuilder.loadTexts: sapCemStatsTable.setStatus('current')
sapCemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapCemStatsEntry.setStatus('current')
sapCemStatsIngressForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsIngressForwardedPkts.setStatus('current')
sapCemStatsIngressDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsIngressDroppedPkts.setStatus('current')
sapCemStatsEgressForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressForwardedPkts.setStatus('current')
sapCemStatsEgressDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressDroppedPkts.setStatus('current')
sapCemStatsEgressMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMissingPkts.setStatus('current')
sapCemStatsEgressPktsReOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressPktsReOrder.setStatus('current')
sapCemStatsEgressJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressJtrBfrUnderruns.setStatus('current')
sapCemStatsEgressJtrBfrOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressJtrBfrOverruns.setStatus('current')
sapCemStatsEgressMisOrderDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMisOrderDropped.setStatus('current')
sapCemStatsEgressMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMalformedPkts.setStatus('current')
sapCemStatsEgressLBitDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressLBitDropped.setStatus('current')
sapCemStatsEgressMultipleDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressMultipleDropped.setStatus('current')
sapCemStatsEgressESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressESs.setStatus('current')
sapCemStatsEgressSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressSESs.setStatus('current')
sapCemStatsEgressUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressUASs.setStatus('current')
sapCemStatsEgressFailureCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressFailureCounts.setStatus('current')
sapCemStatsEgressUnderrunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressUnderrunCounts.setStatus('current')
sapCemStatsEgressOverrunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 41, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCemStatsEgressOverrunCounts.setStatus('current')
sapTlsL2ptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42), )
if mibBuilder.loadTexts: sapTlsL2ptStatsTable.setStatus('current')
sapTlsL2ptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsL2ptStatsEntry.setStatus('current')
sapTlsL2ptStatsLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsLastClearedTime.setStatus('current')
sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpRstBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpRstBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx.setStatus('current')
sapTlsL2ptStatsStpConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpConfigBpdusRx.setStatus('current')
sapTlsL2ptStatsStpConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpConfigBpdusTx.setStatus('current')
sapTlsL2ptStatsStpRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpRstBpdusRx.setStatus('current')
sapTlsL2ptStatsStpRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpRstBpdusTx.setStatus('current')
sapTlsL2ptStatsStpTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpTcnBpdusRx.setStatus('current')
sapTlsL2ptStatsStpTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsStpTcnBpdusTx.setStatus('current')
sapTlsL2ptStatsPvstConfigBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstConfigBpdusRx.setStatus('current')
sapTlsL2ptStatsPvstConfigBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstConfigBpdusTx.setStatus('current')
sapTlsL2ptStatsPvstRstBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstRstBpdusRx.setStatus('current')
sapTlsL2ptStatsPvstRstBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstRstBpdusTx.setStatus('current')
sapTlsL2ptStatsPvstTcnBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstTcnBpdusRx.setStatus('current')
sapTlsL2ptStatsPvstTcnBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPvstTcnBpdusTx.setStatus('current')
sapTlsL2ptStatsOtherBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherBpdusRx.setStatus('current')
sapTlsL2ptStatsOtherBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherBpdusTx.setStatus('current')
sapTlsL2ptStatsOtherL2ptBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherL2ptBpdusRx.setStatus('current')
sapTlsL2ptStatsOtherL2ptBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherL2ptBpdusTx.setStatus('current')
sapTlsL2ptStatsOtherInvalidBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherInvalidBpdusRx.setStatus('current')
sapTlsL2ptStatsOtherInvalidBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsOtherInvalidBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapCdpBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapCdpBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapVtpBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapVtpBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapDtpBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapDtpBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPagpBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapPagpBpdusTx.setStatus('current')
sapTlsL2ptStatsL2ptEncapUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapUdldBpdusRx.setStatus('current')
sapTlsL2ptStatsL2ptEncapUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsL2ptEncapUdldBpdusTx.setStatus('current')
sapTlsL2ptStatsCdpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsCdpBpdusRx.setStatus('current')
sapTlsL2ptStatsCdpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsCdpBpdusTx.setStatus('current')
sapTlsL2ptStatsVtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsVtpBpdusRx.setStatus('current')
sapTlsL2ptStatsVtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsVtpBpdusTx.setStatus('current')
sapTlsL2ptStatsDtpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsDtpBpdusRx.setStatus('current')
sapTlsL2ptStatsDtpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsDtpBpdusTx.setStatus('current')
sapTlsL2ptStatsPagpBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPagpBpdusRx.setStatus('current')
sapTlsL2ptStatsPagpBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsPagpBpdusTx.setStatus('current')
sapTlsL2ptStatsUdldBpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsUdldBpdusRx.setStatus('current')
sapTlsL2ptStatsUdldBpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 42, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsL2ptStatsUdldBpdusTx.setStatus('current')
sapEthernetInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43), )
if mibBuilder.loadTexts: sapEthernetInfoTable.setStatus('current')
sapEthernetInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapEthernetInfoEntry.setStatus('current')
sapEthernetLLFAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43, 1, 1), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEthernetLLFAdminStatus.setStatus('current')
sapEthernetLLFOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEthernetLLFOperStatus.setStatus('current')
msapPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44), )
if mibBuilder.loadTexts: msapPlcyTable.setStatus('current')
msapPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyName"))
if mibBuilder.loadTexts: msapPlcyEntry.setStatus('current')
msapPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 1), TNamedItem())
if mibBuilder.loadTexts: msapPlcyName.setStatus('current')
msapPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyRowStatus.setStatus('current')
msapPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapPlcyLastChanged.setStatus('current')
msapPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyDescription.setStatus('current')
msapPlcyCpmProtPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 5), TCpmProtPolicyID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyCpmProtPolicyId.setStatus('current')
msapPlcyCpmProtMonitorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcyCpmProtMonitorMac.setStatus('current')
msapPlcySubMgmtDefSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useSapId", 1), ("useString", 2))).clone('useString')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubId.setStatus('current')
msapPlcySubMgmtDefSubIdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubIdStr.setStatus('current')
msapPlcySubMgmtDefSubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 9), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSubProfile.setStatus('current')
msapPlcySubMgmtDefSlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 10), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefSlaProfile.setStatus('current')
msapPlcySubMgmtDefAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 11), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtDefAppProfile.setStatus('current')
msapPlcySubMgmtSubIdPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 12), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtSubIdPlcy.setStatus('current')
msapPlcySubMgmtSubscriberLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtSubscriberLimit.setStatus('current')
msapPlcySubMgmtProfiledTrafOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtProfiledTrafOnly.setStatus('current')
msapPlcySubMgmtNonSubTrafSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 15), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSubId.setStatus('current')
msapPlcySubMgmtNonSubTrafSubProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 16), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSubProf.setStatus('current')
msapPlcySubMgmtNonSubTrafSlaProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 17), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafSlaProf.setStatus('current')
msapPlcySubMgmtNonSubTrafAppProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 18), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapPlcySubMgmtNonSubTrafAppProf.setStatus('current')
msapPlcyAssociatedMsaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 44, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapPlcyAssociatedMsaps.setStatus('current')
msapTlsPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45), )
if mibBuilder.loadTexts: msapTlsPlcyTable.setStatus('current')
msapTlsPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1), )
msapPlcyEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyEntry"))
msapTlsPlcyEntry.setIndexNames(*msapPlcyEntry.getIndexNames())
if mibBuilder.loadTexts: msapTlsPlcyEntry.setStatus('current')
msapTlsPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapTlsPlcyLastChanged.setStatus('current')
msapTlsPlcySplitHorizonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcySplitHorizonGrp.setStatus('current')
msapTlsPlcyArpReplyAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabledWithSubscrIdent", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyArpReplyAgent.setStatus('current')
msapTlsPlcySubMgmtMacDaHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcySubMgmtMacDaHashing.setStatus('current')
msapTlsPlcyDhcpLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpLeasePopulate.setStatus('current')
msapTlsPlcyDhcpPrxyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 6), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyAdminState.setStatus('current')
msapTlsPlcyDhcpPrxyServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 7), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyServAddrType.setStatus('current')
msapTlsPlcyDhcpPrxyServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyServAddr.setStatus('current')
msapTlsPlcyDhcpPrxyLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 315446399), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyLeaseTime.setStatus('current')
msapTlsPlcyDhcpPrxyLTRadOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpPrxyLTRadOverride.setStatus('current')
msapTlsPlcyDhcpInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3))).clone('keep')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpInfoAction.setStatus('current')
msapTlsPlcyDhcpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("asciiTuple", 1), ("vlanAsciiTuple", 2))).clone('asciiTuple')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpCircuitId.setStatus('current')
msapTlsPlcyDhcpRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mac", 2), ("remote-id", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpRemoteId.setStatus('current')
msapTlsPlcyDhcpRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 14), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpRemoteIdString.setStatus('current')
msapTlsPlcyDhcpVendorInclOpts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 15), Bits().clone(namedValues=NamedValues(("systemId", 0), ("clientMac", 1), ("serviceId", 2), ("sapId", 3))).clone(namedValues=NamedValues(("systemId", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpVendorInclOpts.setStatus('current')
msapTlsPlcyDhcpVendorOptStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 16), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyDhcpVendorOptStr.setStatus('current')
msapTlsPlcyEgressMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 17), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyEgressMcastGroup.setStatus('current')
msapTlsPlcyIgmpSnpgImportPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 18), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgImportPlcy.setStatus('current')
msapTlsPlcyIgmpSnpgFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 19), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgFastLeave.setStatus('current')
msapTlsPlcyIgmpSnpgSendQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 20), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgSendQueries.setStatus('current')
msapTlsPlcyIgmpSnpgGenQueryIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024)).clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgGenQueryIntv.setStatus('current')
msapTlsPlcyIgmpSnpgQueryRespIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgQueryRespIntv.setStatus('current')
msapTlsPlcyIgmpSnpgRobustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgRobustCount.setStatus('current')
msapTlsPlcyIgmpSnpgLastMembIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setUnits('deci-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgLastMembIntvl.setStatus('current')
msapTlsPlcyIgmpSnpgMaxNbrGrps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMaxNbrGrps.setStatus('current')
msapTlsPlcyIgmpSnpgMvrFromVplsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 26), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMvrFromVplsId.setStatus('current')
msapTlsPlcyIgmpSnpgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 27), TmnxIgmpVersion().clone('version3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgVersion.setStatus('current')
msapTlsPlcyIgmpSnpgMcacPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 28), TPolicyStatementNameOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacPlcyName.setStatus('current')
msapTlsPlcyIgmpSnpgMcacUncnstBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacUncnstBW.setStatus('current')
msapTlsPlcyIgmpSnpgMcacPrRsvMnBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 45, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapTlsPlcyIgmpSnpgMcacPrRsvMnBW.setStatus('current')
msapIgmpSnpgMcacLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46), )
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelTable.setStatus('current')
msapIgmpSnpgMcacLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelId"))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelEntry.setStatus('current')
msapIgmpSnpgMcacLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelId.setStatus('current')
msapIgmpSnpgMcacLevelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelRowStatus.setStatus('current')
msapIgmpSnpgMcacLevelLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelLastChanged.setStatus('current')
msapIgmpSnpgMcacLevelBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 46, 1, 4), Unsigned32().clone(1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLevelBW.setStatus('current')
msapIgmpSnpgMcacLagTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47), )
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagTable.setStatus('current')
msapIgmpSnpgMcacLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyName"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagPortsDown"))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagEntry.setStatus('current')
msapIgmpSnpgMcacLagPortsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagPortsDown.setStatus('current')
msapIgmpSnpgMcacLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagRowStatus.setStatus('current')
msapIgmpSnpgMcacLagLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagLastChanged.setStatus('current')
msapIgmpSnpgMcacLagLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 47, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagLevel.setStatus('current')
msapInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48), )
if mibBuilder.loadTexts: msapInfoTable.setStatus('current')
msapInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: msapInfoEntry.setStatus('current')
msapInfoCreationSapPortEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 1), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoCreationSapPortEncapVal.setStatus('current')
msapInfoCreationPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 2), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoCreationPlcyName.setStatus('current')
msapInfoReEvalPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 3), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msapInfoReEvalPolicy.setStatus('current')
msapInfoLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 48, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoLastChanged.setStatus('current')
msapCaptureSapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49), )
if mibBuilder.loadTexts: msapCaptureSapStatsTable.setStatus('current')
msapCaptureSapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsTriggerType"))
if mibBuilder.loadTexts: msapCaptureSapStatsEntry.setStatus('current')
msapCaptureSapStatsTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("pppoe", 2))))
if mibBuilder.loadTexts: msapCaptureSapStatsTriggerType.setStatus('current')
msapCaptureSapStatsPktsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapCaptureSapStatsPktsRecvd.setStatus('current')
msapCaptureSapStatsPktsRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapCaptureSapStatsPktsRedirect.setStatus('current')
msapCaptureSapStatsPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 49, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapCaptureSapStatsPktsDropped.setStatus('current')
sapTlsMrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50), )
if mibBuilder.loadTexts: sapTlsMrpTable.setStatus('current')
sapTlsMrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1), )
sapTlsInfoEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpEntry"))
sapTlsMrpEntry.setIndexNames(*sapTlsInfoEntry.getIndexNames())
if mibBuilder.loadTexts: sapTlsMrpEntry.setStatus('current')
sapTlsMrpRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxPdus.setStatus('current')
sapTlsMrpDroppedPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpDroppedPdus.setStatus('current')
sapTlsMrpTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxPdus.setStatus('current')
sapTlsMrpRxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxNewEvent.setStatus('current')
sapTlsMrpRxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxJoinInEvent.setStatus('current')
sapTlsMrpRxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxInEvent.setStatus('current')
sapTlsMrpRxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxJoinEmptyEvent.setStatus('current')
sapTlsMrpRxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxEmptyEvent.setStatus('current')
sapTlsMrpRxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpRxLeaveEvent.setStatus('current')
sapTlsMrpTxNewEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxNewEvent.setStatus('current')
sapTlsMrpTxJoinInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxJoinInEvent.setStatus('current')
sapTlsMrpTxInEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxInEvent.setStatus('current')
sapTlsMrpTxJoinEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxJoinEmptyEvent.setStatus('current')
sapTlsMrpTxEmptyEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxEmptyEvent.setStatus('current')
sapTlsMrpTxLeaveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 50, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMrpTxLeaveEvent.setStatus('current')
sapTlsMmrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51), )
if mibBuilder.loadTexts: sapTlsMmrpTable.setStatus('current')
sapTlsMmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMmrpMacAddr"))
if mibBuilder.loadTexts: sapTlsMmrpEntry.setStatus('current')
sapTlsMmrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1, 1), MacAddress())
if mibBuilder.loadTexts: sapTlsMmrpMacAddr.setStatus('current')
sapTlsMmrpDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMmrpDeclared.setStatus('current')
sapTlsMmrpRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 51, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapTlsMmrpRegistered.setStatus('current')
msapPlcyTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 59), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapPlcyTblLastChgd.setStatus('current')
msapTlsPlcyTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapTlsPlcyTblLastChgd.setStatus('current')
msapIgmpSnpgMcacLvlTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 61), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLvlTblLastChgd.setStatus('current')
msapIgmpSnpgMcacLagTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 62), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapIgmpSnpgMcacLagTblLastChgd.setStatus('current')
msapInfoTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 63), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msapInfoTblLastChgd.setStatus('current')
sapNotifyPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100, 1), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sapNotifyPortId.setStatus('current')
msapStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100, 2), ConfigStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: msapStatus.setStatus('current')
svcManagedSapCreationError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 3, 100, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcManagedSapCreationError.setStatus('current')
sapCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapCreated.setStatus('obsolete')
sapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapDeleted.setStatus('obsolete')
sapStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperFlags"))
if mibBuilder.loadTexts: sapStatusChanged.setStatus('current')
sapTlsMacAddrLimitAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsMacAddrLimitAlarmRaised.setStatus('current')
sapTlsMacAddrLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapTlsMacAddrLimitAlarmCleared.setStatus('current')
sapTlsDHCPLseStEntriesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDHCPClientLease"))
if mibBuilder.loadTexts: sapTlsDHCPLseStEntriesExceeded.setStatus('obsolete')
sapTlsDHCPLeaseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldChAddr"))
if mibBuilder.loadTexts: sapTlsDHCPLeaseStateOverride.setStatus('obsolete')
sapTlsDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpPacketProblem"))
if mibBuilder.loadTexts: sapTlsDHCPSuspiciousPcktRcvd.setStatus('obsolete')
sapDHCPLeaseEntriesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"))
if mibBuilder.loadTexts: sapDHCPLeaseEntriesExceeded.setStatus('current')
sapDHCPLseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"))
if mibBuilder.loadTexts: sapDHCPLseStateOverride.setStatus('current')
sapDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpPacketProblem"))
if mibBuilder.loadTexts: sapDHCPSuspiciousPcktRcvd.setStatus('current')
sapDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: sapDHCPLseStatePopulateErr.setStatus('current')
hostConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityChAddr"))
if mibBuilder.loadTexts: hostConnectivityLost.setStatus('current')
hostConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityChAddr"))
if mibBuilder.loadTexts: hostConnectivityRestored.setStatus('current')
sapReceivedProtSrcMac = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "protectedMacForNotify"))
if mibBuilder.loadTexts: sapReceivedProtSrcMac.setStatus('current')
sapStaticHostDynMacConflict = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacIpAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacConflict"))
if mibBuilder.loadTexts: sapStaticHostDynMacConflict.setStatus('current')
sapTlsMacMoveExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveMaxRate"))
if mibBuilder.loadTexts: sapTlsMacMoveExceeded.setStatus('current')
sapDHCPProxyServerError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpProxyError"))
if mibBuilder.loadTexts: sapDHCPProxyServerError.setStatus('current')
sapDHCPCoAError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpCoAError"))
if mibBuilder.loadTexts: sapDHCPCoAError.setStatus('obsolete')
sapDHCPSubAuthError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpSubAuthError"))
if mibBuilder.loadTexts: sapDHCPSubAuthError.setStatus('obsolete')
sapPortStateChangeProcessed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapNotifyPortId"))
if mibBuilder.loadTexts: sapPortStateChangeProcessed.setStatus('current')
sapDHCPLseStateMobilityError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapDHCPLseStateMobilityError.setStatus('current')
sapCemPacketDefectAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarmStatus"))
if mibBuilder.loadTexts: sapCemPacketDefectAlarm.setStatus('current')
sapCemPacketDefectAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarmStatus"))
if mibBuilder.loadTexts: sapCemPacketDefectAlarmClear.setStatus('current')
msapStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapStatus"))
if mibBuilder.loadTexts: msapStateChanged.setStatus('current')
msapCreationFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 3, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "svcManagedSapCreationError"))
if mibBuilder.loadTexts: msapCreationFailure.setStatus('current')
topologyChangeSapMajorState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: topologyChangeSapMajorState.setStatus('current')
newRootSap = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: newRootSap.setStatus('current')
topologyChangeSapState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: topologyChangeSapState.setStatus('current')
receivedTCN = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: receivedTCN.setStatus('current')
higherPriorityBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"))
if mibBuilder.loadTexts: higherPriorityBridge.setStatus('current')
bridgedTLS = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: bridgedTLS.setStatus('obsolete')
sapEncapPVST = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: sapEncapPVST.setStatus('current')
sapEncapDot1d = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: sapEncapDot1d.setStatus('current')
sapReceiveOwnBpdu = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"))
if mibBuilder.loadTexts: sapReceiveOwnBpdu.setStatus('obsolete')
sapActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 30)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperProtocol"))
if mibBuilder.loadTexts: sapActiveProtocolChange.setStatus('current')
tmnxStpRootGuardViolation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 35)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRootGuardViolation"))
if mibBuilder.loadTexts: tmnxStpRootGuardViolation.setStatus('current')
tmnxSapStpExcepCondStateChng = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 37)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpException"))
if mibBuilder.loadTexts: tmnxSapStpExcepCondStateChng.setStatus('current')
tmnxSapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1))
tmnxSapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2))
tmnxSap7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapBaseV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapQosV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStaticHostV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPortIdV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapSubMgmtV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIppipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPolicyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMsapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapNotifyGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMrpV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSap7450V6v0Compliance = tmnxSap7450V6v0Compliance.setStatus('current')
tmnxSap7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapBaseV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapAtmV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapQosV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStaticHostV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPortIdV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapSubMgmtV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIppipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPolicyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMsapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapNotifyGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxTlsMsapPppoeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapCemV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIpV6FilterV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMrpV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSap7750V6v0Compliance = tmnxSap7750V6v0Compliance.setStatus('current')
tmnxSap7710V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 1, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapBaseV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapAtmV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapQosV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStaticHostV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPortIdV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapSubMgmtV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIppipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapPolicyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapL2ptV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMsapV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapNotifyGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapCemNotificationV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxTlsMsapPppoeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapCemV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapIpV6FilterV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapMrpV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSap7710V6v0Compliance = tmnxSap7710V6v0Compliance.setStatus('current')
tmnxSapV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapNumEntries"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDescription"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressVlanTranslationId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapMirrorStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIesIfIndex"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCollectAcctStats"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAccountingPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCustMultSvcSite"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressQosSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressQosSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSplitHorizonGrp"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressSharedQueuePolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressMatchQinQDot1PBits"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapOperFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTodSuite"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngUseMultipointShared"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressQinQMarkTopOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressAggRateLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEndPoint"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressVlanTranslation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCpmProtPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCpmProtMonitorMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressFrameBasedAccounting"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEthernetLLFAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEthernetLLFOperStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofIpAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAntiSpoofMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapV6v0Group = tmnxSapV6v0Group.setStatus('current')
tmnxSapTlsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPriority"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPortNum"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPathCost"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRapidStart"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpBpduEncap"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpDesignatedPort"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpForwardTransitions"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInBadBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperBpduEncap"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsVpnId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAddressLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsNumMacAddresses"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsNumStaticMacAddresses"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacLearning"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAgeing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperEdge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpAdminPointToPoint"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpPortRole"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpAutoEdge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInRstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutRstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsLimitMacMove"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacPinning"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDiscardUnknownSource"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsPruneState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtService"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtEncapValue"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsArpReplyAgent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpException"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsAuthenticationPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptTermination"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsBpduTranslation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRootGuard"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInsideRegion"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsEgressMcastGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpInMstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpOutMstBpdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsRestProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsRestProtSrcMacAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsRestUnprotDstMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRxdDesigBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsStpRootGuardViolation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvSrcIp"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvSrcMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsShcvInterval"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMvplsMgmtMsti"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveNextUpTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveRateExcdLeft"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptForceBoundary"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsLimitMacMoveLevel"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsBpduTransOper"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDefMsapPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptProtocols"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptForceProtocols"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpMsapTrigger"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyLeaseTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpRemoteId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpJoinTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpLeaveTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpLeaveAllTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpPeriodicTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpPeriodicEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapTlsV6v0Group = tmnxSapTlsV6v0Group.setStatus('current')
tmnxSapAtmV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmEncapsulation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmIngressTrafficDescIndex"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmEgressTrafficDescIndex"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmOamAlarmCellHandling"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmOamTerminate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapAtmOamPeriodicLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapAtmV6v0Group = tmnxSapAtmV6v0Group.setStatus('current')
tmnxSapBaseV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 103)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipDroppedPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipDroppedOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressQchipForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsEgressQchipForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedUncoloredPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsIngressPchipOfferedUncoloredOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsAuthenticationPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsAuthenticationPktsSuccess"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapBaseStatsLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapBaseV6v0Group = tmnxSapBaseV6v0Group.setStatus('current')
tmnxSapQosV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 104)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsOfferedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsUncoloredPacketsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQueueStatsUncoloredOctetsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQueueStatsDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSchedCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSchedCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQCBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQMBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQPIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQAdminPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosQAdminCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQCBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQMBS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQPIRAdaptation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQAdminPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQAdminCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosQAvgOverhead"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngQosSSummedCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSPIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSCIR"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrQosSSummedCIR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapQosV6v0Group = tmnxSapQosV6v0Group.setStatus('current')
tmnxSapStaticHostV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 105)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSubscrIdent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSubProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSlaProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvOperState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvChecks"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvReplies"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostShcvReplyTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostDynMacAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostRetailerSvcId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostRetailerIf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostFwdingState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostAncpString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostSubIdIsSapId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostIntermediateDestId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapStaticHostV6v0Group = tmnxSapStaticHostV6v0Group.setStatus('current')
tmnxSapDhcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 106)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpAdminState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpDescription"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpSnoop"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLeasePopulate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpOperLeasePopulate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpInfoAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpCircuitId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpRemoteIdString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyAdminState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyServerAddr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpProxyLTRadiusOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpVendorIncludeOptions"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpVendorOptionString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsSrvrSnoopdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntForwdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsSrvrForwdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntDropdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsSrvrDropdPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntProxRadPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsClntProxLSPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsGenReleasePckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpStatsGenForceRenPckts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDhcpOperLeasePopulate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapDhcpV6v0Group = tmnxSapDhcpV6v0Group.setStatus('current')
tmnxSapPortIdV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 107)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdIngQosSchedCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortIdEgrQosSchedCustId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapPortIdV6v0Group = tmnxSapPortIdV6v0Group.setStatus('current')
tmnxSapSubMgmtV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 108)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtAdminStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSubProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSlaProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtSubIdentPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtSubscriberLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtProfiledTrafficOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficSubIdent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficSubProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficSlaProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtMacDaHashing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSubIdent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefSubIdentString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapSubMgmtV6v0Group = tmnxSapSubMgmtV6v0Group.setStatus('current')
tmnxSapMstiV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 109)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPriority"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPathCost"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPortRole"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiPortState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMstiDesignatedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapMstiV6v0Group = tmnxSapMstiV6v0Group.setStatus('current')
tmnxSapIppipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 110)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeCeInetAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeCeInetAddressType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeMacRefreshInterval"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeMacAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeArpedMacAddress"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIpipeArpedMacAddressTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapIppipeV6v0Group = tmnxSapIppipeV6v0Group.setStatus('current')
tmnxSapPolicyV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 111)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressIpFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressMacFilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressQosPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressQosSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedHiPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedLoPrioPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedHiPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsOfferedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsDroppedLoPrioOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsUncoloredPacketsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIgQosPlcyQueueStatsUncoloredOctetsOffered"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedInProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedOutProfPackets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedInProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsForwardedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueStatsDroppedOutProfOctets"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgQosPlcyQueueCustId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyPortStatsPort"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyPortStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngSchedPlcyPortStatsPort"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgrSchedPlcyPortStatsFwdOct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapPolicyV6v0Group = tmnxSapPolicyV6v0Group.setStatus('current')
tmnxSapCemV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 112)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemEndpointType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemBitrate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemCasTrunkFraming"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemPayloadSize"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemJitterBuffer"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemUseRtpHeader"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemDifferential"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemTimestampFreq"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarm"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemReportAlarmStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemLocalEcid"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemRemoteMacAddr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemRemoteEcid"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsIngressForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsIngressDroppedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressDroppedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMissingPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressPktsReOrder"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressJtrBfrUnderruns"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressJtrBfrOverruns"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMisOrderDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMalformedPkts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressLBitDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressMultipleDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressESs"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressSESs"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressUASs"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressFailureCounts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressUnderrunCounts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemStatsEgressOverrunCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapCemV6v0Group = tmnxSapCemV6v0Group.setStatus('current')
tmnxSapL2ptV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 113)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsLastClearedTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsStpTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstConfigBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstConfigBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstRstBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstRstBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstTcnBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPvstTcnBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherL2ptBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherL2ptBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherInvalidBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsOtherInvalidBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsL2ptEncapUdldBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsCdpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsCdpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsVtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsVtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsDtpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsDtpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPagpBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsPagpBpdusTx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsUdldBpdusRx"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsL2ptStatsUdldBpdusTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapL2ptV6v0Group = tmnxSapL2ptV6v0Group.setStatus('current')
tmnxSapMsapV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 114)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyDescription"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyCpmProtPolicyId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyCpmProtMonitorMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSubId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSubIdStr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSubProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefSlaProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtSubIdPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtSubscriberLimit"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtProfiledTrafOnly"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafSubId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafSubProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafSlaProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyAssociatedMsaps"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcySplitHorizonGrp"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyArpReplyAgent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcySubMgmtMacDaHashing"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpLeasePopulate"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyAdminState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyServAddr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyServAddrType"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyLTRadOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpInfoAction"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpCircuitId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpRemoteId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpRemoteIdString"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpVendorInclOpts"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpVendorOptStr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyDhcpPrxyLeaseTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyEgressMcastGroup"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgImportPlcy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgFastLeave"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgSendQueries"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgGenQueryIntv"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgQueryRespIntv"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgRobustCount"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgLastMembIntvl"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMaxNbrGrps"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMvrFromVplsId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgVersion"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMcacPlcyName"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMcacPrRsvMnBW"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyIgmpSnpgMcacUncnstBW"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLevelBW"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagRowStatus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagLevel"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoCreationSapPortEncapVal"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoCreationPlcyName"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoReEvalPolicy"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoLastChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsPktsRecvd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsPktsRedirect"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCaptureSapStatsPktsDropped"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcyTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapTlsPlcyTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLvlTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapIgmpSnpgMcacLagTblLastChgd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapInfoTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapMsapV6v0Group = tmnxSapMsapV6v0Group.setStatus('current')
tmnxSapMrpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 115)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxPdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpDroppedPdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxPdus"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxNewEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpRxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxNewEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxJoinInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxInEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxJoinEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxEmptyEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMrpTxLeaveEvent"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMmrpDeclared"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMmrpRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapMrpV6v0Group = tmnxSapMrpV6v0Group.setStatus('current')
tmnxTlsMsapPppoeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 117)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsPppoeMsapTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxTlsMsapPppoeV6v0Group = tmnxTlsMsapPppoeV6v0Group.setStatus('current')
tmnxSapIpV6FilterV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 118)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCurrentEgressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedIngressIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapIntendedEgressIpv6FilterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapIpV6FilterV6v0Group = tmnxSapIpV6FilterV6v0Group.setStatus('current')
tmnxSapBsxV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 119)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostAppProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtDefAppProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapSubMgmtNonSubTrafficAppProf"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtDefAppProfile"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapPlcySubMgmtNonSubTrafAppProf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapBsxV6v0Group = tmnxSapBsxV6v0Group.setStatus('current')
tmnxSapNotificationObjV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 200)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapNotifyPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "svcManagedSapCreationError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapNotificationObjV6v0Group = tmnxSapNotificationObjV6v0Group.setStatus('current')
tmnxSapObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 300)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpSnooping"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateRemainLseTime"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStateOption82"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDhcpLseStatePersistKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapObsoletedV6v0Group = tmnxSapObsoletedV6v0Group.setStatus('current')
tmnxSapNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 400)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStatusChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAddrLimitAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacAddrLimitAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLeaseEntriesExceeded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLseStateOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLseStatePopulateErr"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "hostConnectivityLost"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "hostConnectivityRestored"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapReceivedProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapStaticHostDynMacConflict"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsMacMoveExceeded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPProxyServerError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortStateChangeProcessed"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPLseStateMobilityError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapStateChanged"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "msapCreationFailure"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "topologyChangeSapMajorState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "newRootSap"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "topologyChangeSapState"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "receivedTCN"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "higherPriorityBridge"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapPVST"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapDot1d"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxStpRootGuardViolation"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "tmnxSapStpExcepCondStateChng"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapNotifyGroup = tmnxSapNotifyGroup.setStatus('current')
tmnxSapCemNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 401)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemPacketDefectAlarm"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCemPacketDefectAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapCemNotificationV6v0Group = tmnxSapCemNotificationV6v0Group.setStatus('current')
tmnxSapObsoletedNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 3, 2, 402)).setObjects(("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapCreated"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDeleted"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDHCPLseStEntriesExceeded"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDHCPLeaseStateOverride"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapTlsDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPCoAError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapDHCPSubAuthError"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "bridgedTLS"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapReceiveOwnBpdu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSapObsoletedNotifyGroup = tmnxSapObsoletedNotifyGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", sapCemCasTrunkFraming=sapCemCasTrunkFraming, sapIpipeMacAddress=sapIpipeMacAddress, msapCaptureSapStatsPktsRedirect=msapCaptureSapStatsPktsRedirect, sapVpnId=sapVpnId, sapCemStatsEntry=sapCemStatsEntry, sapIngQosQueueId=sapIngQosQueueId, sapSubMgmtDefSlaProfile=sapSubMgmtDefSlaProfile, sapCemStatsEgressForwardedPkts=sapCemStatsEgressForwardedPkts, tmnxSapCemV6v0Group=tmnxSapCemV6v0Group, sapDhcpInfoTable=sapDhcpInfoTable, sapTlsL2ptStatsL2ptEncapStpRstBpdusTx=sapTlsL2ptStatsL2ptEncapStpRstBpdusTx, msapTlsPlcyIgmpSnpgMcacPlcyName=msapTlsPlcyIgmpSnpgMcacPlcyName, sapEgQosPlcyForwardedInProfPackets=sapEgQosPlcyForwardedInProfPackets, sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx=sapTlsL2ptStatsL2ptEncapPvstRstBpdusRx, sapTlsDhcpRemoteId=sapTlsDhcpRemoteId, sapSubMgmtInfoEntry=sapSubMgmtInfoEntry, sapStaticHostSlaProfile=sapStaticHostSlaProfile, sapIgQosPlcyQueueStatsDroppedLoPrioOctets=sapIgQosPlcyQueueStatsDroppedLoPrioOctets, sapDHCPLeaseEntriesExceeded=sapDHCPLeaseEntriesExceeded, sapBaseStatsIngressQchipDroppedHiPrioPackets=sapBaseStatsIngressQchipDroppedHiPrioPackets, sapEgQosPlcyQueueStatsDroppedOutProfPackets=sapEgQosPlcyQueueStatsDroppedOutProfPackets, sapTlsL2ptStatsStpTcnBpdusTx=sapTlsL2ptStatsStpTcnBpdusTx, sapEgrQosQueueInfoEntry=sapEgrQosQueueInfoEntry, msapIgmpSnpgMcacLagLastChanged=msapIgmpSnpgMcacLagLastChanged, sapAtmInfoTable=sapAtmInfoTable, sapAntiSpoofEntry=sapAntiSpoofEntry, sapTlsMstiDesignatedPort=sapTlsMstiDesignatedPort, sapTlsL2ptStatsUdldBpdusTx=sapTlsL2ptStatsUdldBpdusTx, msapPlcyTable=msapPlcyTable, sapTlsStpForwardTransitions=sapTlsStpForwardTransitions, sapCemStatsEgressUnderrunCounts=sapCemStatsEgressUnderrunCounts, sapEgrQosSSummedCIR=sapEgrQosSSummedCIR, msapTlsPlcySplitHorizonGrp=msapTlsPlcySplitHorizonGrp, sapEgrQosPlcyStatsEntry=sapEgrQosPlcyStatsEntry, sapIgQosPlcyQueueStatsOfferedHiPrioOctets=sapIgQosPlcyQueueStatsOfferedHiPrioOctets, sapIgQosPlcyQueueStatsForwardedInProfOctets=sapIgQosPlcyQueueStatsForwardedInProfOctets, sapTlsMvplsMinVlanTag=sapTlsMvplsMinVlanTag, sapPortIdIngQosSchedStatsTable=sapPortIdIngQosSchedStatsTable, sapIgQosPlcyQueueStatsOfferedLoPrioOctets=sapIgQosPlcyQueueStatsOfferedLoPrioOctets, sapTlsMvplsMgmtPortId=sapTlsMvplsMgmtPortId, msapTlsPlcyIgmpSnpgFastLeave=msapTlsPlcyIgmpSnpgFastLeave, sapType=sapType, sapTlsL2ptStatsVtpBpdusRx=sapTlsL2ptStatsVtpBpdusRx, sapLastStatusChange=sapLastStatusChange, sapIgQosPlcyDroppedLoPrioOctets=sapIgQosPlcyDroppedLoPrioOctets, sapTlsStpRootGuard=sapTlsStpRootGuard, msapTlsPlcyDhcpPrxyLTRadOverride=msapTlsPlcyDhcpPrxyLTRadOverride, sapTlsStpPortState=sapTlsStpPortState, sapTlsMrpTxJoinEmptyEvent=sapTlsMrpTxJoinEmptyEvent, sapIngQosSchedInfoTable=sapIngQosSchedInfoTable, sapEncapDot1d=sapEncapDot1d, sapEgrQosQueueStatsForwardedOutProfOctets=sapEgrQosQueueStatsForwardedOutProfOctets, sapCurrentEgressIpFilterId=sapCurrentEgressIpFilterId, sapIgQosPlcyQueueStatsUncoloredOctetsOffered=sapIgQosPlcyQueueStatsUncoloredOctetsOffered, sapEgQosPlcyQueueStatsForwardedInProfPackets=sapEgQosPlcyQueueStatsForwardedInProfPackets, tmnxSapConformance=tmnxSapConformance, sapIntendedIngressQosPolicyId=sapIntendedIngressQosPolicyId, sapTodSuite=sapTodSuite, msapPlcySubMgmtDefSubProfile=msapPlcySubMgmtDefSubProfile, sapTlsStpRapidStart=sapTlsStpRapidStart, sapIngQosQueueStatsForwardedInProfOctets=sapIngQosQueueStatsForwardedInProfOctets, sapIngQosQCBS=sapIngQosQCBS, sapIpipeArpedMacAddressTimeout=sapIpipeArpedMacAddressTimeout, sapEgrQosSchedStatsEntry=sapEgrQosSchedStatsEntry, sapIgQosPlcyDroppedHiPrioOctets=sapIgQosPlcyDroppedHiPrioOctets, sapReceivedProtSrcMac=sapReceivedProtSrcMac, sapEgrQosQHiPrioOnly=sapEgrQosQHiPrioOnly, sapIngQosSCIR=sapIngQosSCIR, msapTlsPlcyArpReplyAgent=msapTlsPlcyArpReplyAgent, sapEgrQosCustId=sapEgrQosCustId, sapCemStatsEgressFailureCounts=sapCemStatsEgressFailureCounts, sapEgressMacFilterId=sapEgressMacFilterId, sapDHCPLseStateMobilityError=sapDHCPLseStateMobilityError, sapBaseStatsIngressPchipOfferedHiPrioPackets=sapBaseStatsIngressPchipOfferedHiPrioPackets, sapEgrQosSLastMgmtChange=sapEgrQosSLastMgmtChange, sapCemTimestampFreq=sapCemTimestampFreq, msapTlsPlcyDhcpPrxyServAddrType=msapTlsPlcyDhcpPrxyServAddrType, msapTlsPlcyDhcpPrxyLeaseTime=msapTlsPlcyDhcpPrxyLeaseTime, msapTlsPlcyIgmpSnpgMcacUncnstBW=msapTlsPlcyIgmpSnpgMcacUncnstBW, hostConnectivityRestored=hostConnectivityRestored, sapTlsMstiTable=sapTlsMstiTable, sapCemBitrate=sapCemBitrate, sapTlsL2ptStatsPagpBpdusRx=sapTlsL2ptStatsPagpBpdusRx, sapStaticHostShcvChecks=sapStaticHostShcvChecks, sapEgQosPlcyQueueStatsForwardedOutProfOctets=sapEgQosPlcyQueueStatsForwardedOutProfOctets, PYSNMP_MODULE_ID=timetraSvcSapMIBModule, sapTlsStpOperBpduEncap=sapTlsStpOperBpduEncap, sapCemLocalEcid=sapCemLocalEcid, sapTlsMrpRxJoinInEvent=sapTlsMrpRxJoinInEvent, sapStaticHostSubIdIsSapId=sapStaticHostSubIdIsSapId, sapEgrQosSName=sapEgrQosSName, sapIngQosSchedStatsForwardedOctets=sapIngQosSchedStatsForwardedOctets, sapTlsL2ptTermination=sapTlsL2ptTermination, sapTlsMvplsMgmtEncapValue=sapTlsMvplsMgmtEncapValue, sapEgrQosSchedInfoTable=sapEgrQosSchedInfoTable, sapSubMgmtInfoTable=sapSubMgmtInfoTable, msapTlsPlcyIgmpSnpgImportPlcy=msapTlsPlcyIgmpSnpgImportPlcy, sapTlsDhcpStatsClntProxLSPckts=sapTlsDhcpStatsClntProxLSPckts, sapTlsStpInMstBpdus=sapTlsStpInMstBpdus, sapEgrSchedPlcyStatsFwdPkt=sapEgrSchedPlcyStatsFwdPkt, sapEgQosPlcyQueueStatsDroppedOutProfOctets=sapEgQosPlcyQueueStatsDroppedOutProfOctets, sapEthernetInfoTable=sapEthernetInfoTable, sapTlsMstiPortState=sapTlsMstiPortState, sapStaticHostAppProfile=sapStaticHostAppProfile, msapTlsPlcyIgmpSnpgMaxNbrGrps=msapTlsPlcyIgmpSnpgMaxNbrGrps, sapEgrQosQueueStatsForwardedInProfOctets=sapEgrQosQueueStatsForwardedInProfOctets, sapTlsDhcpSnoop=sapTlsDhcpSnoop, sapTlsDhcpStatsSrvrDropdPckts=sapTlsDhcpStatsSrvrDropdPckts, sapIntendedIngressMacFilterId=sapIntendedIngressMacFilterId, msapPlcySubMgmtDefSubId=msapPlcySubMgmtDefSubId, sapBaseStatsAuthenticationPktsSuccess=sapBaseStatsAuthenticationPktsSuccess, sapIngQosQAdminCIR=sapIngQosQAdminCIR, sapTlsL2ptStatsPvstRstBpdusRx=sapTlsL2ptStatsPvstRstBpdusRx, sapTlsMvplsMgmtMsti=sapTlsMvplsMgmtMsti, sapBaseStatsIngressQchipDroppedHiPrioOctets=sapBaseStatsIngressQchipDroppedHiPrioOctets, sapEgrQosSCIR=sapEgrQosSCIR, sapIngQosQueueStatsOfferedHiPrioOctets=sapIngQosQueueStatsOfferedHiPrioOctets, sapTlsL2ptStatsOtherInvalidBpdusRx=sapTlsL2ptStatsOtherInvalidBpdusRx, sapCurrentIngressMacFilterId=sapCurrentIngressMacFilterId, sapTlsMacAddressLimit=sapTlsMacAddressLimit, sapTlsStpException=sapTlsStpException, sapMirrorStatus=sapMirrorStatus, sapEgrQosQLastMgmtChange=sapEgrQosQLastMgmtChange, sapIgQosPlcyQueueStatsForwardedOutProfPackets=sapIgQosPlcyQueueStatsForwardedOutProfPackets, sapAtmEncapsulation=sapAtmEncapsulation, sapDhcpInfoEntry=sapDhcpInfoEntry, sapTlsL2ptStatsLastClearedTime=sapTlsL2ptStatsLastClearedTime, sapEgressIpv6FilterId=sapEgressIpv6FilterId, sapSplitHorizonGrp=sapSplitHorizonGrp, msapIgmpSnpgMcacLagRowStatus=msapIgmpSnpgMcacLagRowStatus, sapTlsDhcpStatsSrvrSnoopdPckts=sapTlsDhcpStatsSrvrSnoopdPckts, sapCemInfoTable=sapCemInfoTable, sapIngQosQRowStatus=sapIngQosQRowStatus, tmnxSapGroups=tmnxSapGroups, sapBaseStatsEgressQchipForwardedOutProfPackets=sapBaseStatsEgressQchipForwardedOutProfPackets, sapTlsMacMoveExceeded=sapTlsMacMoveExceeded, sapIgQosPlcyQueueStatsOfferedLoPrioPackets=sapIgQosPlcyQueueStatsOfferedLoPrioPackets, sapIngQosQAdminPIR=sapIngQosQAdminPIR, sapTlsStpDesignatedBridge=sapTlsStpDesignatedBridge, sapIngQosQLastMgmtChange=sapIngQosQLastMgmtChange, sapIntendedEgressQosPolicyId=sapIntendedEgressQosPolicyId, topologyChangeSapMajorState=topologyChangeSapMajorState, sapTlsRestProtSrcMac=sapTlsRestProtSrcMac, sapEgQosPlcyDroppedInProfPackets=sapEgQosPlcyDroppedInProfPackets, sapTlsMstiPathCost=sapTlsMstiPathCost, msapIgmpSnpgMcacLevelLastChanged=msapIgmpSnpgMcacLevelLastChanged, sapCemPayloadSize=sapCemPayloadSize, sapEgrQosQAdminCIR=sapEgrQosQAdminCIR, sapIngSchedPlcyPortStatsFwdPkt=sapIngSchedPlcyPortStatsFwdPkt, tmnxSapBsxV6v0Group=tmnxSapBsxV6v0Group, sapTlsRestUnprotDstMac=sapTlsRestUnprotDstMac, sapEgrSchedPlcyPortStatsFwdOct=sapEgrSchedPlcyPortStatsFwdOct, msapInfoCreationPlcyName=msapInfoCreationPlcyName, tmnxSapAtmV6v0Group=tmnxSapAtmV6v0Group, msapIgmpSnpgMcacLagEntry=msapIgmpSnpgMcacLagEntry, sapTlsDhcpProxyServerAddr=sapTlsDhcpProxyServerAddr, sapIgQosPlcyQueueStatsForwardedOutProfOctets=sapIgQosPlcyQueueStatsForwardedOutProfOctets, sapTlsMacMoveNextUpTime=sapTlsMacMoveNextUpTime, sapPortIdIngQosSchedFwdOctets=sapPortIdIngQosSchedFwdOctets, sapTlsL2ptStatsOtherInvalidBpdusTx=sapTlsL2ptStatsOtherInvalidBpdusTx, tmnxSapIpV6FilterV6v0Group=tmnxSapIpV6FilterV6v0Group, sapAdminStatus=sapAdminStatus, sapStaticHostShcvReplies=sapStaticHostShcvReplies, sapIpipeCeInetAddress=sapIpipeCeInetAddress, sapSubMgmtDefAppProfile=sapSubMgmtDefAppProfile, sapIngQosSchedCustId=sapIngQosSchedCustId, sapActiveProtocolChange=sapActiveProtocolChange, sapIngUseMultipointShared=sapIngUseMultipointShared, tmnxSapMsapV6v0Group=tmnxSapMsapV6v0Group, msapPlcyName=msapPlcyName, sapTlsMmrpMacAddr=sapTlsMmrpMacAddr, sapTlsMrpRxNewEvent=sapTlsMrpRxNewEvent, sapEgressIpFilterId=sapEgressIpFilterId, sapIgQosPlcyQueueStatsDroppedHiPrioPackets=sapIgQosPlcyQueueStatsDroppedHiPrioPackets, sapBaseStatsIngressPchipOfferedHiPrioOctets=sapBaseStatsIngressPchipOfferedHiPrioOctets, sapTlsBpduTranslation=sapTlsBpduTranslation, sapEgrQosSRowStatus=sapEgrQosSRowStatus, sapAntiSpoofing=sapAntiSpoofing, sapCurrentEgressIpv6FilterId=sapCurrentEgressIpv6FilterId, sapBaseInfoEntry=sapBaseInfoEntry, sapIngressVlanTranslation=sapIngressVlanTranslation, msapIgmpSnpgMcacLagTable=msapIgmpSnpgMcacLagTable, tmnxSapCemNotificationV6v0Group=tmnxSapCemNotificationV6v0Group, sapEgrQosQMBS=sapEgrQosQMBS, sapCemUseRtpHeader=sapCemUseRtpHeader, msapTlsPlcyIgmpSnpgRobustCount=msapTlsPlcyIgmpSnpgRobustCount, sapTlsMrpTxPdus=sapTlsMrpTxPdus, sapTlsL2ptForceProtocols=sapTlsL2ptForceProtocols, msapPlcySubMgmtSubIdPlcy=msapPlcySubMgmtSubIdPlcy, sapDHCPCoAError=sapDHCPCoAError, sapCpmProtPolicyId=sapCpmProtPolicyId, sapEgrQosSchedStatsForwardedOctets=sapEgrQosSchedStatsForwardedOctets, msapCaptureSapStatsEntry=msapCaptureSapStatsEntry, sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx=sapTlsL2ptStatsL2ptEncapPvstConfigBpdusTx, sapTlsMmrpDeclared=sapTlsMmrpDeclared, sapCemStatsIngressForwardedPkts=sapCemStatsIngressForwardedPkts, sapStaticHostSubscrIdent=sapStaticHostSubscrIdent, sapIgQosPlcyForwardedInProfOctets=sapIgQosPlcyForwardedInProfOctets, sapTlsMmrpTable=sapTlsMmrpTable, sapTlsStpAdminPointToPoint=sapTlsStpAdminPointToPoint, sapStaticHostDynMacConflict=sapStaticHostDynMacConflict, sapTlsDhcpStatsEntry=sapTlsDhcpStatsEntry, sapEgrQosSchedStatsForwardedPackets=sapEgrQosSchedStatsForwardedPackets, sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx=sapTlsL2ptStatsL2ptEncapStpTcnBpdusTx, sapStaticHostRowStatus=sapStaticHostRowStatus, sapTlsDhcpStatsClntForwdPckts=sapTlsDhcpStatsClntForwdPckts, sapBaseStatsEgressQchipForwardedInProfOctets=sapBaseStatsEgressQchipForwardedInProfOctets, sapBaseStatsIngressQchipDroppedLoPrioPackets=sapBaseStatsIngressQchipDroppedLoPrioPackets, sapEgQosPlcyDroppedInProfOctets=sapEgQosPlcyDroppedInProfOctets, tmnxSapTlsV6v0Group=tmnxSapTlsV6v0Group, sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx=sapTlsL2ptStatsL2ptEncapPvstRstBpdusTx, sapTlsL2ptStatsL2ptEncapDtpBpdusTx=sapTlsL2ptStatsL2ptEncapDtpBpdusTx, sapSubMgmtMacDaHashing=sapSubMgmtMacDaHashing, msapPlcySubMgmtNonSubTrafSubId=msapPlcySubMgmtNonSubTrafSubId, msapCaptureSapStatsPktsRecvd=msapCaptureSapStatsPktsRecvd, hostConnectivityLost=hostConnectivityLost, sapTlsStpInRstBpdus=sapTlsStpInRstBpdus, sapEgressQosSchedulerPolicy=sapEgressQosSchedulerPolicy, sapPortIdIngQosSchedStatsEntry=sapPortIdIngQosSchedStatsEntry, tmnxSapObsoletedV6v0Group=tmnxSapObsoletedV6v0Group, sapIngQosQueueStatsTable=sapIngQosQueueStatsTable, sapTlsStpPathCost=sapTlsStpPathCost, sapStaticHostShcvOperState=sapStaticHostShcvOperState, sapTlsL2ptStatsL2ptEncapPagpBpdusTx=sapTlsL2ptStatsL2ptEncapPagpBpdusTx, msapTlsPlcyDhcpCircuitId=msapTlsPlcyDhcpCircuitId, sapTlsMrpEntry=sapTlsMrpEntry, sapSubMgmtAdminStatus=sapSubMgmtAdminStatus, msapCreationFailure=msapCreationFailure, sapIngressIpFilterId=sapIngressIpFilterId, sapEncapValue=sapEncapValue, tmnxSap7710V6v0Compliance=tmnxSap7710V6v0Compliance, msapCaptureSapStatsTable=msapCaptureSapStatsTable, sapTlsL2ptStatsPvstConfigBpdusRx=sapTlsL2ptStatsPvstConfigBpdusRx, sapIpipeInfoTable=sapIpipeInfoTable, sapSubMgmtNonSubTrafficSlaProf=sapSubMgmtNonSubTrafficSlaProf, sapTlsDhcpSnooping=sapTlsDhcpSnooping, msapPlcySubMgmtDefSubIdStr=msapPlcySubMgmtDefSubIdStr, sapTlsStpOutConfigBpdus=sapTlsStpOutConfigBpdus, sapTlsLimitMacMoveLevel=sapTlsLimitMacMoveLevel, sapBaseInfoTable=sapBaseInfoTable, msapPlcySubMgmtDefAppProfile=msapPlcySubMgmtDefAppProfile, msapTlsPlcyLastChanged=msapTlsPlcyLastChanged, sapEgrQosQCBS=sapEgrQosQCBS, sapIngQosQPIRAdaptation=sapIngQosQPIRAdaptation, sapIngQosQueueStatsDroppedLoPrioPackets=sapIngQosQueueStatsDroppedLoPrioPackets, sapAtmOamPeriodicLoopback=sapAtmOamPeriodicLoopback, sapIngQosSLastMgmtChange=sapIngQosSLastMgmtChange, msapPlcyRowStatus=msapPlcyRowStatus, sapIngQosSchedStatsTable=sapIngQosSchedStatsTable, sapTlsStpPriority=sapTlsStpPriority, sapIpipeCeInetAddressType=sapIpipeCeInetAddressType, sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx=sapTlsL2ptStatsL2ptEncapStpConfigBpdusRx, sapTlsInfoEntry=sapTlsInfoEntry, tmnxSapSubMgmtV6v0Group=tmnxSapSubMgmtV6v0Group)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", sapCreated=sapCreated, sapPortIdEgrQosSchedFwdOctets=sapPortIdEgrQosSchedFwdOctets, sapIngQosSchedStatsEntry=sapIngQosSchedStatsEntry, sapIgQosPlcyDroppedLoPrioPackets=sapIgQosPlcyDroppedLoPrioPackets, sapCemStatsEgressMissingPkts=sapCemStatsEgressMissingPkts, sapBaseStatsEgressQchipForwardedOutProfOctets=sapBaseStatsEgressQchipForwardedOutProfOctets, sapTlsL2ptStatsL2ptEncapStpRstBpdusRx=sapTlsL2ptStatsL2ptEncapStpRstBpdusRx, sapTlsDhcpProxyAdminState=sapTlsDhcpProxyAdminState, sapTlsMstiLastMgmtChange=sapTlsMstiLastMgmtChange, sapCustId=sapCustId, sapEgQosPlcyQueueStatsDroppedInProfOctets=sapEgQosPlcyQueueStatsDroppedInProfOctets, sapTlsStpOperEdge=sapTlsStpOperEdge, sapBaseStatsEntry=sapBaseStatsEntry, sapTlsStpInTcnBpdus=sapTlsStpInTcnBpdus, sapIgQosPlcyForwardedInProfPackets=sapIgQosPlcyForwardedInProfPackets, sapIngQosSchedStatsForwardedPackets=sapIngQosSchedStatsForwardedPackets, sapIngSchedPlcyPortStatsPort=sapIngSchedPlcyPortStatsPort, sapTlsL2ptStatsEntry=sapTlsL2ptStatsEntry, sapCemStatsEgressJtrBfrUnderruns=sapCemStatsEgressJtrBfrUnderruns, sapPortIdIngPortId=sapPortIdIngPortId, msapPlcyDescription=msapPlcyDescription, sapTlsMrpPeriodicEnabled=sapTlsMrpPeriodicEnabled, sapEgQosPlcyDroppedOutProfOctets=sapEgQosPlcyDroppedOutProfOctets, tmnxSapBaseV6v0Group=tmnxSapBaseV6v0Group, sapCemRemoteMacAddr=sapCemRemoteMacAddr, sapTlsStpInBadBpdus=sapTlsStpInBadBpdus, sapIntendedEgressIpFilterId=sapIntendedEgressIpFilterId, sapIntendedIngressQosSchedPlcy=sapIntendedIngressQosSchedPlcy, msapCaptureSapStatsTriggerType=msapCaptureSapStatsTriggerType, sapEgQosPlcyForwardedInProfOctets=sapEgQosPlcyForwardedInProfOctets, sapIgQosPlcyQueuePlcyId=sapIgQosPlcyQueuePlcyId, sapTlsDhcpVendorOptionString=sapTlsDhcpVendorOptionString, sapIngSchedPlcyPortStatsFwdOct=sapIngSchedPlcyPortStatsFwdOct, sapDHCPLseStatePopulateErr=sapDHCPLseStatePopulateErr, tmnxTlsMsapPppoeV6v0Group=tmnxTlsMsapPppoeV6v0Group, tmnxSap7750V6v0Compliance=tmnxSap7750V6v0Compliance, sapEndPoint=sapEndPoint, sapCemDifferential=sapCemDifferential, sapEgrQosQRowStatus=sapEgrQosQRowStatus, sapTlsStpAutoEdge=sapTlsStpAutoEdge, sapIngSchedPlcyPortStatsEntry=sapIngSchedPlcyPortStatsEntry, sapTlsDHCPLseStEntriesExceeded=sapTlsDHCPLseStEntriesExceeded, sapTlsL2ptStatsL2ptEncapCdpBpdusRx=sapTlsL2ptStatsL2ptEncapCdpBpdusRx, sapTlsStpPortRole=sapTlsStpPortRole, sapTlsL2ptStatsL2ptEncapDtpBpdusRx=sapTlsL2ptStatsL2ptEncapDtpBpdusRx, sapTlsMacMoveRateExcdLeft=sapTlsMacMoveRateExcdLeft, sapBaseStatsIngressPchipDroppedOctets=sapBaseStatsIngressPchipDroppedOctets, tmnxSapIppipeV6v0Group=tmnxSapIppipeV6v0Group, sapIngQosQueueStatsUncoloredPacketsOffered=sapIngQosQueueStatsUncoloredPacketsOffered, sapBaseStatsIngressPchipOfferedLoPrioOctets=sapBaseStatsIngressPchipOfferedLoPrioOctets, sapSubMgmtSubscriberLimit=sapSubMgmtSubscriberLimit, sapBaseStatsCustId=sapBaseStatsCustId, sapCurrentIngressQosPolicyId=sapCurrentIngressQosPolicyId, sapTlsDhcpDescription=sapTlsDhcpDescription, sapTlsDhcpStatsGenForceRenPckts=sapTlsDhcpStatsGenForceRenPckts, msapInfoEntry=msapInfoEntry, sapIngQosSRowStatus=sapIngQosSRowStatus, sapTlsL2ptStatsPvstConfigBpdusTx=sapTlsL2ptStatsPvstConfigBpdusTx, sapEgQosPlcyQueueId=sapEgQosPlcyQueueId, sapTlsMrpTxLeaveEvent=sapTlsMrpTxLeaveEvent, sapTlsL2ptStatsPvstTcnBpdusRx=sapTlsL2ptStatsPvstTcnBpdusRx, sapTlsDhcpLeasePopulate=sapTlsDhcpLeasePopulate, tmnxSapCompliances=tmnxSapCompliances, sapBaseStatsEgressQchipDroppedOutProfPackets=sapBaseStatsEgressQchipDroppedOutProfPackets, sapTlsDhcpInfoAction=sapTlsDhcpInfoAction, newRootSap=newRootSap, sapIngressQosSchedulerPolicy=sapIngressQosSchedulerPolicy, sapTlsEgressMcastGroup=sapTlsEgressMcastGroup, sapPortId=sapPortId, msapTlsPlcyDhcpVendorOptStr=msapTlsPlcyDhcpVendorOptStr, sapTlsMrpRxInEvent=sapTlsMrpRxInEvent, sapTlsL2ptStatsUdldBpdusRx=sapTlsL2ptStatsUdldBpdusRx, sapCollectAcctStats=sapCollectAcctStats, sapIgQosPlcyQueueStatsOfferedHiPrioPackets=sapIgQosPlcyQueueStatsOfferedHiPrioPackets, sapEgrQosPlcyQueueStatsTable=sapEgrQosPlcyQueueStatsTable, sapEgQosPlcyQueueStatsForwardedOutProfPackets=sapEgQosPlcyQueueStatsForwardedOutProfPackets, sapStaticHostIpAddress=sapStaticHostIpAddress, sapIgQosPlcyQueueStatsUncoloredPacketsOffered=sapIgQosPlcyQueueStatsUncoloredPacketsOffered, sapEgrQosSchedStatsTable=sapEgrQosSchedStatsTable, sapTlsStpBpduEncap=sapTlsStpBpduEncap, sapIngQosQueueStatsDroppedHiPrioPackets=sapIngQosQueueStatsDroppedHiPrioPackets, sapIngQosSchedName=sapIngQosSchedName, sapCemReportAlarmStatus=sapCemReportAlarmStatus, sapAntiSpoofIpAddress=sapAntiSpoofIpAddress, sapIgQosPlcyForwardedOutProfPackets=sapIgQosPlcyForwardedOutProfPackets, sapTlsInfoTable=sapTlsInfoTable, sapCurrentIngressIpv6FilterId=sapCurrentIngressIpv6FilterId, tmnxSapNotifyObjs=tmnxSapNotifyObjs, sapTlsMstiPriority=sapTlsMstiPriority, sapIngQosQueueStatsForwardedInProfPackets=sapIngQosQueueStatsForwardedInProfPackets, sapOperFlags=sapOperFlags, sapIngQosSSummedCIR=sapIngQosSSummedCIR, sapTlsMstiEntry=sapTlsMstiEntry, sapLastMgmtChange=sapLastMgmtChange, sapTlsL2ptForceBoundary=sapTlsL2ptForceBoundary, sapEgrQosQueueId=sapEgrQosQueueId, sapIngQosQId=sapIngQosQId, sapIntendedEgressMacFilterId=sapIntendedEgressMacFilterId, msapIgmpSnpgMcacLagPortsDown=msapIgmpSnpgMcacLagPortsDown, sapIpipeMacRefreshInterval=sapIpipeMacRefreshInterval, sapBaseStatsLastClearedTime=sapBaseStatsLastClearedTime, sapEgressFrameBasedAccounting=sapEgressFrameBasedAccounting, sapPortIdEgrQosSchedFwdPkts=sapPortIdEgrQosSchedFwdPkts, sapCemPacketDefectAlarm=sapCemPacketDefectAlarm, sapCurrentIngressIpFilterId=sapCurrentIngressIpFilterId, sapStaticHostMacAddress=sapStaticHostMacAddress, msapTlsPlcySubMgmtMacDaHashing=msapTlsPlcySubMgmtMacDaHashing, msapTlsPlcyIgmpSnpgSendQueries=msapTlsPlcyIgmpSnpgSendQueries, sapTlsDhcpRemoteIdString=sapTlsDhcpRemoteIdString, tmnxSapMrpV6v0Group=tmnxSapMrpV6v0Group, sapCemStatsEgressESs=sapCemStatsEgressESs, sapIngQosQueueStatsUncoloredOctetsOffered=sapIngQosQueueStatsUncoloredOctetsOffered, tmnxStpRootGuardViolation=tmnxStpRootGuardViolation, sapIngressIpv6FilterId=sapIngressIpv6FilterId, sapIngQosCustId=sapIngQosCustId, sapTlsLimitMacMove=sapTlsLimitMacMove, tmnxSapNotificationObjV6v0Group=tmnxSapNotificationObjV6v0Group, sapTlsMacAddrLimitAlarmRaised=sapTlsMacAddrLimitAlarmRaised, sapBaseStatsIngressPchipOfferedUncoloredOctets=sapBaseStatsIngressPchipOfferedUncoloredOctets, sapIngSchedPlcyStatsTable=sapIngSchedPlcyStatsTable, sapTlsVpnId=sapTlsVpnId, sapTlsDhcpInfoEntry=sapTlsDhcpInfoEntry, sapTlsL2ptStatsDtpBpdusRx=sapTlsL2ptStatsDtpBpdusRx, sapAtmInfoEntry=sapAtmInfoEntry, sapPortIdEgrQosSchedName=sapPortIdEgrQosSchedName, msapTlsPlcyDhcpRemoteIdString=msapTlsPlcyDhcpRemoteIdString, sapEgrQosQAvgOverhead=sapEgrQosQAvgOverhead, sapEgrQosQCIRAdaptation=sapEgrQosQCIRAdaptation, sapTlsDhcpInfoTable=sapTlsDhcpInfoTable, sapEgQosPlcyQueueCustId=sapEgQosPlcyQueueCustId, sapTlsMrpTxJoinInEvent=sapTlsMrpTxJoinInEvent, sapBaseStatsAuthenticationPktsDiscarded=sapBaseStatsAuthenticationPktsDiscarded, sapTlsDhcpLseStateChAddr=sapTlsDhcpLseStateChAddr, sapDHCPSuspiciousPcktRcvd=sapDHCPSuspiciousPcktRcvd, sapTlsShcvAction=sapTlsShcvAction, sapTlsMrpPeriodicTime=sapTlsMrpPeriodicTime, msapTlsPlcyDhcpInfoAction=msapTlsPlcyDhcpInfoAction, sapTlsMmrpEntry=sapTlsMmrpEntry, sapEgrSchedPlcyPortStatsTable=sapEgrSchedPlcyPortStatsTable, sapTlsDHCPLeaseStateOverride=sapTlsDHCPLeaseStateOverride, msapTlsPlcyEgressMcastGroup=msapTlsPlcyEgressMcastGroup, sapTlsMrpDroppedPdus=sapTlsMrpDroppedPdus, tmnxSapStaticHostV6v0Group=tmnxSapStaticHostV6v0Group, sapCemStatsEgressPktsReOrder=sapCemStatsEgressPktsReOrder, sapEgrQosSchedCustId=sapEgrQosSchedCustId, sapPortIdIngQosSchedFwdPkts=sapPortIdIngQosSchedFwdPkts, sapTlsL2ptStatsL2ptEncapUdldBpdusRx=sapTlsL2ptStatsL2ptEncapUdldBpdusRx, sapTlsStpAdminStatus=sapTlsStpAdminStatus, sapTlsDhcpLseStateOption82=sapTlsDhcpLseStateOption82, sapIngQosQMBS=sapIngQosQMBS, sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx=sapTlsL2ptStatsL2ptEncapPvstTcnBpdusTx, sapAntiSpoofMacAddress=sapAntiSpoofMacAddress, sapTlsMacAddrLimitAlarmCleared=sapTlsMacAddrLimitAlarmCleared, sapEgrQosQueueStatsDroppedInProfOctets=sapEgrQosQueueStatsDroppedInProfOctets, sapCurrentEgressMacFilterId=sapCurrentEgressMacFilterId, sapTlsL2ptStatsStpRstBpdusTx=sapTlsL2ptStatsStpRstBpdusTx, msapIgmpSnpgMcacLagTblLastChgd=msapIgmpSnpgMcacLagTblLastChgd, sapTlsMrpRxPdus=sapTlsMrpRxPdus, sapTlsDhcpLeaseStateEntry=sapTlsDhcpLeaseStateEntry, sapTlsL2ptStatsPvstRstBpdusTx=sapTlsL2ptStatsPvstRstBpdusTx, msapTlsPlcyDhcpPrxyServAddr=msapTlsPlcyDhcpPrxyServAddr, sapTlsCustId=sapTlsCustId, sapTlsL2ptStatsL2ptEncapVtpBpdusRx=sapTlsL2ptStatsL2ptEncapVtpBpdusRx, sapIngQosQueueStatsDroppedLoPrioOctets=sapIngQosQueueStatsDroppedLoPrioOctets, sapStaticHostAncpString=sapStaticHostAncpString, sapEgrQosSchedName=sapEgrQosSchedName, sapTlsL2ptStatsStpTcnBpdusRx=sapTlsL2ptStatsStpTcnBpdusRx, msapIgmpSnpgMcacLevelId=msapIgmpSnpgMcacLevelId, sapTlsDhcpLeaseStateTable=sapTlsDhcpLeaseStateTable, sapSubMgmtNonSubTrafficSubProf=sapSubMgmtNonSubTrafficSubProf, sapIngSchedPlcyPortStatsTable=sapIngSchedPlcyPortStatsTable, sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx=sapTlsL2ptStatsL2ptEncapPvstConfigBpdusRx, sapTlsMrpTable=sapTlsMrpTable, sapIngSchedPlcyStatsEntry=sapIngSchedPlcyStatsEntry, sapTlsMrpLeaveAllTime=sapTlsMrpLeaveAllTime, sapEgrQosSOverrideFlags=sapEgrQosSOverrideFlags, sapStaticHostIntermediateDestId=sapStaticHostIntermediateDestId, sapTlsMrpRxEmptyEvent=sapTlsMrpRxEmptyEvent, sapEgrQosQueueStatsTable=sapEgrQosQueueStatsTable, msapTlsPlcyEntry=msapTlsPlcyEntry, sapEgrQosPlcyStatsTable=sapEgrQosPlcyStatsTable, sapAtmOamTerminate=sapAtmOamTerminate, sapIgQosPlcyQueueId=sapIgQosPlcyQueueId, sapNumEntries=sapNumEntries, sapBaseStatsIngressQchipForwardedInProfOctets=sapBaseStatsIngressQchipForwardedInProfOctets, sapTlsStpOutRstBpdus=sapTlsStpOutRstBpdus, sapEgrQosPlcyQueueStatsEntry=sapEgrQosPlcyQueueStatsEntry, sapIngressVlanTranslationId=sapIngressVlanTranslationId, sapTlsMrpLeaveTime=sapTlsMrpLeaveTime, sapIgQosPlcyQueueStatsForwardedInProfPackets=sapIgQosPlcyQueueStatsForwardedInProfPackets, sapTlsMvplsMgmtService=sapTlsMvplsMgmtService, sapEgQosPlcyId=sapEgQosPlcyId, msapTlsPlcyIgmpSnpgGenQueryIntv=msapTlsPlcyIgmpSnpgGenQueryIntv, sapPortIdEgrQosSchedStatsTable=sapPortIdEgrQosSchedStatsTable, tmnxSapStpExcepCondStateChng=tmnxSapStpExcepCondStateChng, tmnxSapMstiV6v0Group=tmnxSapMstiV6v0Group, sapPortIdEgrQosSchedStatsEntry=sapPortIdEgrQosSchedStatsEntry, sapTlsDhcpProxyLeaseTime=sapTlsDhcpProxyLeaseTime, sapSubMgmtDefSubIdentString=sapSubMgmtDefSubIdentString, sapEthernetLLFOperStatus=sapEthernetLLFOperStatus, msapPlcySubMgmtSubscriberLimit=msapPlcySubMgmtSubscriberLimit, sapIntendedEgressQosSchedPlcy=sapIntendedEgressQosSchedPlcy, sapTlsNumMacAddresses=sapTlsNumMacAddresses, msapTlsPlcyIgmpSnpgMvrFromVplsId=msapTlsPlcyIgmpSnpgMvrFromVplsId, msapTlsPlcyTblLastChgd=msapTlsPlcyTblLastChgd, sapTlsMstiDesignatedBridge=sapTlsMstiDesignatedBridge, sapTlsL2ptStatsOtherL2ptBpdusTx=sapTlsL2ptStatsOtherL2ptBpdusTx, sapCemStatsEgressSESs=sapCemStatsEgressSESs, sapTlsStpInConfigBpdus=sapTlsStpInConfigBpdus, sapBaseStatsIngressQchipForwardedOutProfPackets=sapBaseStatsIngressQchipForwardedOutProfPackets, sapIngressSharedQueuePolicy=sapIngressSharedQueuePolicy, sapEgrQosQOverrideFlags=sapEgrQosQOverrideFlags, sapCurrentEgressQosPolicyId=sapCurrentEgressQosPolicyId, sapBaseStatsEgressQchipDroppedOutProfOctets=sapBaseStatsEgressQchipDroppedOutProfOctets, sapTlsDhcpVendorIncludeOptions=sapTlsDhcpVendorIncludeOptions, sapTlsL2ptStatsTable=sapTlsL2ptStatsTable, sapStaticHostDynMacAddress=sapStaticHostDynMacAddress, msapIgmpSnpgMcacLevelBW=msapIgmpSnpgMcacLevelBW, sapCurrentEgressQosSchedPlcy=sapCurrentEgressQosSchedPlcy, msapInfoReEvalPolicy=msapInfoReEvalPolicy, sapTlsL2ptProtocols=sapTlsL2ptProtocols, sapTlsL2ptStatsOtherL2ptBpdusRx=sapTlsL2ptStatsOtherL2ptBpdusRx, sapSubType=sapSubType, sapDescription=sapDescription, sapCemInfoEntry=sapCemInfoEntry, sapNotifyPortId=sapNotifyPortId, sapCemStatsEgressJtrBfrOverruns=sapCemStatsEgressJtrBfrOverruns, sapEgressQosPolicyId=sapEgressQosPolicyId, sapTlsL2ptStatsStpConfigBpdusTx=sapTlsL2ptStatsStpConfigBpdusTx, sapTlsShcvInterval=sapTlsShcvInterval, topologyChangeSapState=topologyChangeSapState, msapTlsPlcyIgmpSnpgMcacPrRsvMnBW=msapTlsPlcyIgmpSnpgMcacPrRsvMnBW, msapPlcyEntry=msapPlcyEntry, sapEthernetInfoEntry=sapEthernetInfoEntry, sapPortIdIngQosSchedName=sapPortIdIngQosSchedName, sapIngQosPlcyQueueStatsTable=sapIngQosPlcyQueueStatsTable, sapPortIdEgrQosSchedCustId=sapPortIdEgrQosSchedCustId, sapTlsDhcpStatsClntDropdPckts=sapTlsDhcpStatsClntDropdPckts, msapPlcyAssociatedMsaps=msapPlcyAssociatedMsaps, sapEgrQosSPIR=sapEgrQosSPIR, sapTlsDhcpProxyLTRadiusOverride=sapTlsDhcpProxyLTRadiusOverride, msapPlcySubMgmtNonSubTrafSubProf=msapPlcySubMgmtNonSubTrafSubProf, tmnxSapV6v0Group=tmnxSapV6v0Group, sapTlsShcvSrcMac=sapTlsShcvSrcMac, sapIngQosQueueStatsEntry=sapIngQosQueueStatsEntry, sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx=sapTlsL2ptStatsL2ptEncapStpTcnBpdusRx, sapIngQosQOverrideFlags=sapIngQosQOverrideFlags, sapBaseStatsEgressQchipForwardedInProfPackets=sapBaseStatsEgressQchipForwardedInProfPackets, sapTlsL2ptStatsDtpBpdusTx=sapTlsL2ptStatsDtpBpdusTx, sapEgrQosQueueStatsDroppedInProfPackets=sapEgrQosQueueStatsDroppedInProfPackets, msapInfoCreationSapPortEncapVal=msapInfoCreationSapPortEncapVal, sapCustMultSvcSite=sapCustMultSvcSite, sapIngQosSPIR=sapIngQosSPIR, msapIgmpSnpgMcacLvlTblLastChgd=msapIgmpSnpgMcacLvlTblLastChgd)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", sapTlsDhcpCircuitId=sapTlsDhcpCircuitId, msapPlcyLastChanged=msapPlcyLastChanged, sapEgressQinQMarkTopOnly=sapEgressQinQMarkTopOnly, sapTraps=sapTraps, sapCpmProtMonitorMac=sapCpmProtMonitorMac, sapIngressQosPolicyId=sapIngressQosPolicyId, sapCemStatsEgressUASs=sapCemStatsEgressUASs, sapEgQosPlcyQueueStatsDroppedInProfPackets=sapEgQosPlcyQueueStatsDroppedInProfPackets, sapTlsL2ptStatsCdpBpdusTx=sapTlsL2ptStatsCdpBpdusTx, higherPriorityBridge=higherPriorityBridge, sapTlsStpDesignatedPort=sapTlsStpDesignatedPort, sapTlsManagedVlanListEntry=sapTlsManagedVlanListEntry, sapEgrQosSchedInfoEntry=sapEgrQosSchedInfoEntry, msapPlcySubMgmtNonSubTrafAppProf=msapPlcySubMgmtNonSubTrafAppProf, sapCemStatsEgressMalformedPkts=sapCemStatsEgressMalformedPkts, msapStatus=msapStatus, msapInfoLastChanged=msapInfoLastChanged, sapEgrSchedPlcyStatsTable=sapEgrSchedPlcyStatsTable, sapAntiSpoofTable=sapAntiSpoofTable, sapIgQosPlcyQueueStatsDroppedHiPrioOctets=sapIgQosPlcyQueueStatsDroppedHiPrioOctets, sapBaseStatsIngressQchipForwardedOutProfOctets=sapBaseStatsIngressQchipForwardedOutProfOctets, msapTlsPlcyIgmpSnpgVersion=msapTlsPlcyIgmpSnpgVersion, sapIngressMatchQinQDot1PBits=sapIngressMatchQinQDot1PBits, sapEgrQosQueueStatsDroppedOutProfPackets=sapEgrQosQueueStatsDroppedOutProfPackets, receivedTCN=receivedTCN, sapDeleted=sapDeleted, sapIngSchedPlcyStatsFwdPkt=sapIngSchedPlcyStatsFwdPkt, sapTlsStpPortNum=sapTlsStpPortNum, sapEgrQosQueueStatsEntry=sapEgrQosQueueStatsEntry, sapAccountingPolicyId=sapAccountingPolicyId, svcManagedSapCreationError=svcManagedSapCreationError, msapTlsPlcyTable=msapTlsPlcyTable, sapIngQosSName=sapIngQosSName, msapPlcyCpmProtPolicyId=msapPlcyCpmProtPolicyId, msapPlcyTblLastChgd=msapPlcyTblLastChgd, msapPlcyCpmProtMonitorMac=msapPlcyCpmProtMonitorMac, msapInfoTblLastChgd=msapInfoTblLastChgd, sapTlsStpInsideRegion=sapTlsStpInsideRegion, sapIngQosQueueStatsDroppedHiPrioOctets=sapIngQosQueueStatsDroppedHiPrioOctets, sapEgrQosQueueStatsForwardedInProfPackets=sapEgrQosQueueStatsForwardedInProfPackets, sapTlsDhcpOperLeasePopulate=sapTlsDhcpOperLeasePopulate, sapTlsMvplsPruneState=sapTlsMvplsPruneState, msapTlsPlcyDhcpVendorInclOpts=msapTlsPlcyDhcpVendorInclOpts, sapIpipeArpedMacAddress=sapIpipeArpedMacAddress, sapCemStatsEgressMisOrderDropped=sapCemStatsEgressMisOrderDropped, msapIgmpSnpgMcacLagLevel=msapIgmpSnpgMcacLagLevel, sapEgrQosQueueStatsForwardedOutProfPackets=sapEgrQosQueueStatsForwardedOutProfPackets, sapTlsDhcpAdminState=sapTlsDhcpAdminState, sapPortIdEgrPortId=sapPortIdEgrPortId, sapIngQosQueueInfoTable=sapIngQosQueueInfoTable, sapTlsStpOutMstBpdus=sapTlsStpOutMstBpdus, msapIgmpSnpgMcacLevelRowStatus=msapIgmpSnpgMcacLevelRowStatus, sapTlsDhcpMsapTrigger=sapTlsDhcpMsapTrigger, tmnxSapL2ptV6v0Group=tmnxSapL2ptV6v0Group, sapIngSchedPlcyStatsFwdOct=sapIngSchedPlcyStatsFwdOct, bridgedTLS=bridgedTLS, sapEgrSchedPlcyStatsEntry=sapEgrSchedPlcyStatsEntry, sapTlsManagedVlanListTable=sapTlsManagedVlanListTable, sapTlsL2ptStatsCdpBpdusRx=sapTlsL2ptStatsCdpBpdusRx, msapPlcySubMgmtProfiledTrafOnly=msapPlcySubMgmtProfiledTrafOnly, sapSubMgmtProfiledTrafficOnly=sapSubMgmtProfiledTrafficOnly, sapCemPacketDefectAlarmClear=sapCemPacketDefectAlarmClear, sapIngQosQueueInfoEntry=sapIngQosQueueInfoEntry, sapIntendedIngressIpFilterId=sapIntendedIngressIpFilterId, tmnxSap7450V6v0Compliance=tmnxSap7450V6v0Compliance, msapPlcySubMgmtNonSubTrafSlaProf=msapPlcySubMgmtNonSubTrafSlaProf, sapIngQosQueueStatsOfferedLoPrioOctets=sapIngQosQueueStatsOfferedLoPrioOctets, sapSubMgmtNonSubTrafficAppProf=sapSubMgmtNonSubTrafficAppProf, sapTlsMacPinning=sapTlsMacPinning, sapAtmEgressTrafficDescIndex=sapAtmEgressTrafficDescIndex, msapTlsPlcyDhcpRemoteId=msapTlsPlcyDhcpRemoteId, sapEgrSchedPlcyStatsFwdOct=sapEgrSchedPlcyStatsFwdOct, sapSubMgmtDefSubProfile=sapSubMgmtDefSubProfile, sapEgQosPlcyQueueStatsForwardedInProfOctets=sapEgQosPlcyQueueStatsForwardedInProfOctets, sapIngQosSOverrideFlags=sapIngQosSOverrideFlags, sapIngQosQHiPrioOnly=sapIngQosQHiPrioOnly, sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx=sapTlsL2ptStatsL2ptEncapPvstTcnBpdusRx, sapBaseStatsIngressQchipDroppedLoPrioOctets=sapBaseStatsIngressQchipDroppedLoPrioOctets, sapCemStatsTable=sapCemStatsTable, sapBaseStatsIngressPchipOfferedUncoloredPackets=sapBaseStatsIngressPchipOfferedUncoloredPackets, msapInfoTable=msapInfoTable, sapTlsDHCPSuspiciousPcktRcvd=sapTlsDHCPSuspiciousPcktRcvd, sapReceiveOwnBpdu=sapReceiveOwnBpdu, sapPortIdIngQosSchedCustId=sapPortIdIngQosSchedCustId, sapSubMgmtSubIdentPolicy=sapSubMgmtSubIdentPolicy, sapIntendedIngressIpv6FilterId=sapIntendedIngressIpv6FilterId, sapEgrSchedPlcyPortStatsPort=sapEgrSchedPlcyPortStatsPort, sapIngrQosPlcyStatsEntry=sapIngrQosPlcyStatsEntry, sapCemLastMgmtChange=sapCemLastMgmtChange, sapStaticHostTable=sapStaticHostTable, sapTlsL2ptStatsPagpBpdusTx=sapTlsL2ptStatsPagpBpdusTx, sapCemJitterBuffer=sapCemJitterBuffer, sapEgQosPlcyForwardedOutProfPackets=sapEgQosPlcyForwardedOutProfPackets, sapIngQosQueueStatsOfferedLoPrioPackets=sapIngQosQueueStatsOfferedLoPrioPackets, sapCemStatsEgressLBitDropped=sapCemStatsEgressLBitDropped, sapStaticHostShcvReplyTime=sapStaticHostShcvReplyTime, sapEgrQosQPIRAdaptation=sapEgrQosQPIRAdaptation, sapTlsDefMsapPolicy=sapTlsDefMsapPolicy, sapStaticHostRetailerIf=sapStaticHostRetailerIf, sapTlsMrpRxLeaveEvent=sapTlsMrpRxLeaveEvent, sapCurrentIngressQosSchedPlcy=sapCurrentIngressQosSchedPlcy, sapIgQosPlcyForwardedOutProfOctets=sapIgQosPlcyForwardedOutProfOctets, timetraSvcSapMIBModule=timetraSvcSapMIBModule, sapTlsPppoeMsapTrigger=sapTlsPppoeMsapTrigger, sapTlsDhcpLseStateRemainLseTime=sapTlsDhcpLseStateRemainLseTime, sapTlsMrpRxJoinEmptyEvent=sapTlsMrpRxJoinEmptyEvent, tmnxSapObjs=tmnxSapObjs, sapTlsStpRxdDesigBridge=sapTlsStpRxdDesigBridge, sapTlsL2ptStatsL2ptEncapPagpBpdusRx=sapTlsL2ptStatsL2ptEncapPagpBpdusRx, sapTlsStpOperProtocol=sapTlsStpOperProtocol, sapBaseStatsEgressQchipDroppedInProfPackets=sapBaseStatsEgressQchipDroppedInProfPackets, sapIngQosPlcyQueueStatsEntry=sapIngQosPlcyQueueStatsEntry, sapEgrSchedPlcyPortStatsFwdPkt=sapEgrSchedPlcyPortStatsFwdPkt, sapDhcpOperLeasePopulate=sapDhcpOperLeasePopulate, tmnxSapNotifyGroup=tmnxSapNotifyGroup, sapDHCPLseStateOverride=sapDHCPLseStateOverride, sapBaseStatsEgressQchipDroppedInProfOctets=sapBaseStatsEgressQchipDroppedInProfOctets, sapCemStatsEgressDroppedPkts=sapCemStatsEgressDroppedPkts, sapTlsL2ptStatsOtherBpdusRx=sapTlsL2ptStatsOtherBpdusRx, sapEncapPVST=sapEncapPVST, sapTlsDiscardUnknownSource=sapTlsDiscardUnknownSource, sapTlsMvplsRowStatus=sapTlsMvplsRowStatus, sapBaseStatsIngressQchipForwardedInProfPackets=sapBaseStatsIngressQchipForwardedInProfPackets, sapEgQosPlcyForwardedOutProfOctets=sapEgQosPlcyForwardedOutProfOctets, sapBaseStatsTable=sapBaseStatsTable, sapCemStatsIngressDroppedPkts=sapCemStatsIngressDroppedPkts, sapTlsNumStaticMacAddresses=sapTlsNumStaticMacAddresses, sapBaseStatsIngressPchipDroppedPackets=sapBaseStatsIngressPchipDroppedPackets, sapIngQosQueueStatsForwardedOutProfPackets=sapIngQosQueueStatsForwardedOutProfPackets, sapDHCPProxyServerError=sapDHCPProxyServerError, sapEgrQosQAdminPIR=sapEgrQosQAdminPIR, tmnxSapPortIdV6v0Group=tmnxSapPortIdV6v0Group, sapStaticHostFwdingState=sapStaticHostFwdingState, sapEgrQosQueueInfoTable=sapEgrQosQueueInfoTable, tmnxSapObsoletedNotifyGroup=tmnxSapObsoletedNotifyGroup, sapIngQosSchedInfoEntry=sapIngQosSchedInfoEntry, sapIntendedEgressIpv6FilterId=sapIntendedEgressIpv6FilterId, sapIngQosQueueStatsOfferedHiPrioPackets=sapIngQosQueueStatsOfferedHiPrioPackets, sapTlsDhcpLseStatePersistKey=sapTlsDhcpLseStatePersistKey, sapDHCPSubAuthError=sapDHCPSubAuthError, sapTlsStpOutTcnBpdus=sapTlsStpOutTcnBpdus, sapTlsL2ptStatsStpRstBpdusRx=sapTlsL2ptStatsStpRstBpdusRx, sapTlsL2ptStatsVtpBpdusTx=sapTlsL2ptStatsVtpBpdusTx, sapSubMgmtDefSubIdent=sapSubMgmtDefSubIdent, sapIesIfIndex=sapIesIfIndex, sapTlsMrpTxInEvent=sapTlsMrpTxInEvent, sapIgQosPlcyQueueCustId=sapIgQosPlcyQueueCustId, tmnxSapDhcpV6v0Group=tmnxSapDhcpV6v0Group, msapTlsPlcyDhcpPrxyAdminState=msapTlsPlcyDhcpPrxyAdminState, sapAtmIngressTrafficDescIndex=sapAtmIngressTrafficDescIndex, sapCemRemoteEcid=sapCemRemoteEcid, sapTlsMstiPortRole=sapTlsMstiPortRole, sapTlsMrpJoinTime=sapTlsMrpJoinTime, msapCaptureSapStatsPktsDropped=msapCaptureSapStatsPktsDropped, tmnxSapPolicyV6v0Group=tmnxSapPolicyV6v0Group, sapEgressAggRateLimit=sapEgressAggRateLimit, sapTlsL2ptStatsL2ptEncapCdpBpdusTx=sapTlsL2ptStatsL2ptEncapCdpBpdusTx, sapTlsMacAgeing=sapTlsMacAgeing, sapTlsL2ptStatsL2ptEncapUdldBpdusTx=sapTlsL2ptStatsL2ptEncapUdldBpdusTx, msapIgmpSnpgMcacLevelEntry=msapIgmpSnpgMcacLevelEntry, sapTrapsPrefix=sapTrapsPrefix, sapTlsShcvSrcIp=sapTlsShcvSrcIp, sapStatusChanged=sapStatusChanged, sapIgQosPlcyDroppedHiPrioPackets=sapIgQosPlcyDroppedHiPrioPackets, sapTlsArpReplyAgent=sapTlsArpReplyAgent, sapIngQosQueueStatsForwardedOutProfOctets=sapIngQosQueueStatsForwardedOutProfOctets, sapTlsDhcpLseStateCiAddr=sapTlsDhcpLseStateCiAddr, sapTodMonitorTable=sapTodMonitorTable, sapCemStatsEgressOverrunCounts=sapCemStatsEgressOverrunCounts, sapEgQosPlcyQueuePlcyId=sapEgQosPlcyQueuePlcyId, sapPortStateChangeProcessed=sapPortStateChangeProcessed, sapTlsDhcpStatsClntSnoopdPckts=sapTlsDhcpStatsClntSnoopdPckts, sapTlsBpduTransOper=sapTlsBpduTransOper, sapEgrSchedPlcyPortStatsEntry=sapEgrSchedPlcyPortStatsEntry, sapTlsMacLearning=sapTlsMacLearning, sapStaticHostSubProfile=sapStaticHostSubProfile, msapPlcySubMgmtDefSlaProfile=msapPlcySubMgmtDefSlaProfile, sapTlsMmrpRegistered=sapTlsMmrpRegistered, sapTlsMrpTxEmptyEvent=sapTlsMrpTxEmptyEvent, sapAtmOamAlarmCellHandling=sapAtmOamAlarmCellHandling, sapStaticHostRetailerSvcId=sapStaticHostRetailerSvcId, sapBaseStatsIngressPchipOfferedLoPrioPackets=sapBaseStatsIngressPchipOfferedLoPrioPackets, sapTlsDhcpStatsClntProxRadPckts=sapTlsDhcpStatsClntProxRadPckts, sapEgrQosQueueStatsDroppedOutProfOctets=sapEgrQosQueueStatsDroppedOutProfOctets, sapTlsRestProtSrcMacAction=sapTlsRestProtSrcMacAction, tmnxSapQosV6v0Group=tmnxSapQosV6v0Group, msapStateChanged=msapStateChanged, sapIgQosPlcyId=sapIgQosPlcyId, sapSubMgmtNonSubTrafficSubIdent=sapSubMgmtNonSubTrafficSubIdent, sapEgQosPlcyDroppedOutProfPackets=sapEgQosPlcyDroppedOutProfPackets, sapCemReportAlarm=sapCemReportAlarm, sapIngressMacFilterId=sapIngressMacFilterId, sapTlsAuthenticationPolicy=sapTlsAuthenticationPolicy, sapTlsDhcpStatsTable=sapTlsDhcpStatsTable, sapTlsL2ptStatsOtherBpdusTx=sapTlsL2ptStatsOtherBpdusTx, sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx=sapTlsL2ptStatsL2ptEncapStpConfigBpdusTx, sapTlsL2ptStatsPvstTcnBpdusTx=sapTlsL2ptStatsPvstTcnBpdusTx, sapTlsMvplsMaxVlanTag=sapTlsMvplsMaxVlanTag, sapTlsL2ptStatsStpConfigBpdusRx=sapTlsL2ptStatsStpConfigBpdusRx, sapCemEndpointType=sapCemEndpointType, sapOperStatus=sapOperStatus, sapStaticHostEntry=sapStaticHostEntry, sapIngrQosPlcyStatsTable=sapIngrQosPlcyStatsTable, sapIgQosPlcyQueueStatsDroppedLoPrioPackets=sapIgQosPlcyQueueStatsDroppedLoPrioPackets, sapTlsDhcpStatsGenReleasePckts=sapTlsDhcpStatsGenReleasePckts, msapIgmpSnpgMcacLevelTable=msapIgmpSnpgMcacLevelTable, sapCemStatsEgressMultipleDropped=sapCemStatsEgressMultipleDropped, sapTlsL2ptStatsL2ptEncapVtpBpdusTx=sapTlsL2ptStatsL2ptEncapVtpBpdusTx, sapEgrQosQId=sapEgrQosQId, msapTlsPlcyIgmpSnpgQueryRespIntv=msapTlsPlcyIgmpSnpgQueryRespIntv, sapTlsStpRootGuardViolation=sapTlsStpRootGuardViolation, sapIngQosQCIRAdaptation=sapIngQosQCIRAdaptation, sapTodMonitorEntry=sapTodMonitorEntry, sapEthernetLLFAdminStatus=sapEthernetLLFAdminStatus, sapRowStatus=sapRowStatus, msapTlsPlcyIgmpSnpgLastMembIntvl=msapTlsPlcyIgmpSnpgLastMembIntvl, sapTlsMrpTxNewEvent=sapTlsMrpTxNewEvent, sapIpipeInfoEntry=sapIpipeInfoEntry, msapTlsPlcyDhcpLeasePopulate=msapTlsPlcyDhcpLeasePopulate, sapTlsDhcpStatsSrvrForwdPckts=sapTlsDhcpStatsSrvrForwdPckts)
