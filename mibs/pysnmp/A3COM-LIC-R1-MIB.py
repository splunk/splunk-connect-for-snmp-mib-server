#
# PySNMP MIB module A3COM-LIC-R1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-LIC-R1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, IpAddress, Counter64, NotificationType, Counter32, enterprises, TimeTicks, Bits, ModuleIdentity, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "IpAddress", "Counter64", "NotificationType", "Counter32", "enterprises", "TimeTicks", "Bits", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

a3com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
llc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26))
llcPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 1))
llcSapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 2))
llcCcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 3))
llcTunnelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 4))
llcPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1), )
if mibBuilder.loadTexts: llcPortAdminTable.setStatus('mandatory')
llcPortAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: llcPortAdminEntry.setStatus('mandatory')
llcPortAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortAdminName.setStatus('mandatory')
llcPortAdminMaxSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxSaps.setStatus('mandatory')
llcPortAdminMaxCcs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxCcs.setStatus('mandatory')
llcPortAdminMaxPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxPDUOctets.setStatus('mandatory')
llcPortAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setStatus('mandatory')
llcPortAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setStatus('mandatory')
llcPortAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 7), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setStatus('mandatory')
llcPortAdminAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 8), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminAckTimer.setStatus('mandatory')
llcPortAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 9), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setStatus('mandatory')
llcPortAdminRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 10), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminRejTimer.setStatus('mandatory')
llcPortAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 11), TimeTicks().clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setStatus('mandatory')
llcPortAdminInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 12), TimeTicks().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminInactTimer.setStatus('mandatory')
llcPortAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 13), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setStatus('mandatory')
llcPortAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setStatus('mandatory')
llcPortAdminNw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 15), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminNw.setStatus('mandatory')
llcPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2), )
if mibBuilder.loadTexts: llcPortOperTable.setStatus('mandatory')
llcPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: llcPortOperEntry.setStatus('mandatory')
llcPortOperNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperNumSaps.setStatus('mandatory')
llcPortOperSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperSimRim.setStatus('mandatory')
llcPortOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperLastModifyTime.setStatus('mandatory')
llcSapAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 1), )
if mibBuilder.loadTexts: llcSapAdminTable.setStatus('mandatory')
llcSapAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapAdminEntry.setStatus('mandatory')
llcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapNumber.setStatus('mandatory')
llcSapOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2), )
if mibBuilder.loadTexts: llcSapOperTable.setStatus('mandatory')
llcSapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapOperEntry.setStatus('mandatory')
llcSapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperStatus.setStatus('mandatory')
llcSapOperNumCcs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperNumCcs.setStatus('mandatory')
llcSapOperLlc2Support = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperLlc2Support.setStatus('mandatory')
llcSapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3), )
if mibBuilder.loadTexts: llcSapStatsTable.setStatus('mandatory')
llcSapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapStatsEntry.setStatus('mandatory')
llcSapStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsLocalBusies.setStatus('mandatory')
llcSapStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsRemoteBusies.setStatus('mandatory')
llcSapStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIFramesIn.setStatus('mandatory')
llcSapStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIFramesOut.setStatus('mandatory')
llcSapStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIOctetsIn.setStatus('mandatory')
llcSapStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIOctetsOut.setStatus('mandatory')
llcSapStatsSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsSFramesIn.setStatus('mandatory')
llcSapStatsSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsSFramesOut.setStatus('mandatory')
llcSapStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsRetransmitsOut.setStatus('mandatory')
llcSapStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsREJsIn.setStatus('mandatory')
llcSapStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsREJsOut.setStatus('mandatory')
llcSapStatsWwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsWwCount.setStatus('mandatory')
llcSapStatsTESTCommandsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTCommandsIn.setStatus('mandatory')
llcSapStatsTESTCommandsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTCommandsOut.setStatus('mandatory')
llcSapStatsTESTResponsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTResponsesIn.setStatus('mandatory')
llcSapStatsTESTResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTResponsesOut.setStatus('mandatory')
llcSapStatsXIDCommandsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDCommandsIn.setStatus('mandatory')
llcSapStatsXIDCommandsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDCommandsOut.setStatus('mandatory')
llcSapStatsXIDResponsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDResponsesIn.setStatus('mandatory')
llcSapStatsXIDResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDResponsesOut.setStatus('mandatory')
llcSapStatsUIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesIn.setStatus('mandatory')
llcSapStatsUIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesOut.setStatus('mandatory')
llcSapStatsUIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIOctetsIn.setStatus('mandatory')
llcSapStatsUIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIOctetsOut.setStatus('mandatory')
llcSapStatsConnectOk = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsConnectOk.setStatus('mandatory')
llcSapStatsConnectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsConnectFail.setStatus('mandatory')
llcSapStatsDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnect.setStatus('mandatory')
llcSapStatsDisconnectFRMRSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRSend.setStatus('mandatory')
llcSapStatsDisconnectFRMRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRRcv.setStatus('mandatory')
llcSapStatsDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectTimer.setStatus('mandatory')
llcSapStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsReset.setStatus('mandatory')
llcCcAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1), )
if mibBuilder.loadTexts: llcCcAdminTable.setStatus('mandatory')
llcCcAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcCcLSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRMac"), (0, "A3COM-LIC-R1-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcAdminEntry.setStatus('mandatory')
llcCcLSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcLSap.setStatus('mandatory')
llcCcRSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcRSap.setStatus('mandatory')
llcCcLMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcLMac.setStatus('mandatory')
llcCcRMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcRMac.setStatus('mandatory')
llcCcOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2), )
if mibBuilder.loadTexts: llcCcOperTable.setStatus('mandatory')
llcCcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcCcLSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRMac"), (0, "A3COM-LIC-R1-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcOperEntry.setStatus('mandatory')
llcCcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("aDM", 1), ("setup", 2), ("normal", 3), ("busy", 4), ("reject", 5), ("await", 6), ("awaitBusy", 7), ("awaitReject", 8), ("dConn", 9), ("reset", 10), ("error", 11), ("conn", 12), ("resetCheck", 13), ("resetWait", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperState.setStatus('mandatory')
llcCcOperMaxIPDUOctetsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsSend.setStatus('mandatory')
llcCcOperMaxIPDUOctetsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsRcv.setStatus('mandatory')
llcCcOperMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsSend.setStatus('mandatory')
llcCcOperMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsRcv.setStatus('mandatory')
llcCcOperMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxRetransmits.setStatus('mandatory')
llcCcOperAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperAckTimer.setStatus('mandatory')
llcCcOperPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperPbitTimer.setStatus('mandatory')
llcCcOperRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperRejTimer.setStatus('mandatory')
llcCcOperBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperBusyTimer.setStatus('mandatory')
llcCcOperInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperInactTimer.setStatus('mandatory')
llcCcOperDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperDelayAckCount.setStatus('mandatory')
llcCcOperDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperDelayAckTimer.setStatus('mandatory')
llcCcOperNw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperNw.setStatus('mandatory')
llcCcOperWw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperWw.setStatus('mandatory')
llcCcOperCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperCreateTime.setStatus('mandatory')
llcCcOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastModifyTime.setStatus('mandatory')
llcCcOperLastFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailTime.setStatus('mandatory')
llcCcOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("rxFRMR", 2), ("txFRMR", 3), ("discReceived", 4), ("discSent", 5), ("retriesExpired", 6), ("forcedShutdown", 7))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailCause.setStatus('mandatory')
llcCcOperLastFailFRMRInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailFRMRInfo.setStatus('mandatory')
llcCcOperLastWwCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("neverInvoked", 1), ("lostData", 2), ("macLayerCongestion", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastWwCause.setStatus('mandatory')
llcCcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3), )
if mibBuilder.loadTexts: llcCcStatsTable.setStatus('mandatory')
llcCcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcCcLSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRMac"), (0, "A3COM-LIC-R1-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcStatsEntry.setStatus('mandatory')
llcCcStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsLocalBusies.setStatus('mandatory')
llcCcStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRemoteBusies.setStatus('mandatory')
llcCcStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesIn.setStatus('mandatory')
llcCcStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesOut.setStatus('mandatory')
llcCcStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsIn.setStatus('mandatory')
llcCcStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsOut.setStatus('mandatory')
llcCcStatsSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSFramesIn.setStatus('mandatory')
llcCcStatsSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSFramesOut.setStatus('mandatory')
llcCcStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRetransmitsOut.setStatus('mandatory')
llcCcStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsIn.setStatus('mandatory')
llcCcStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsOut.setStatus('mandatory')
llcCcStatsWwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsWwCount.setStatus('mandatory')
ccsLlcTunnelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1))
ccsLlcTunnelVirtualRing = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcTunnelVirtualRing.setStatus('mandatory')
ccsLlcTunnelMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 20, 24, 32, 36, 40))).clone(namedValues=NamedValues(("qTunnelEnable", 4), ("qTunnelDisable", 8), ("qTunnelSecure", 16), ("qTunnelEnableSecure", 20), ("qTunnelDisableSecure", 24), ("qTunnelNonSecure", 32), ("qTunnelEnableNonSecure", 36), ("qTunnelDisableNonSecure", 40)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcTunnelMode.setStatus('mandatory')
ccsLlcTunnelSNAPriority = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qPrioDefault", 1), ("qPrioHigh", 2), ("qPrioMedium", 3), ("qPrioLow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcTunnelSNAPriority.setStatus('mandatory')
ccsLlcTunnelRouterTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2), )
if mibBuilder.loadTexts: ccsLlcTunnelRouterTable.setStatus('mandatory')
ccsLlcTunnelRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1), ).setIndexNames((0, "A3COM-LIC-R1-MIB", "ccsLlcTunnelId"))
if mibBuilder.loadTexts: ccsLlcTunnelRouterEntry.setStatus('mandatory')
ccsLlcPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcPeerAddress.setStatus('mandatory')
ccsLlcLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcLocalAddress.setStatus('mandatory')
ccsLlcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLlcTunnelId.setStatus('mandatory')
ccsLlcRouterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qTunEnable", 1), ("qtunDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterEnable.setStatus('mandatory')
ccsLlcRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qTransparent", 1), ("qSpecificTerm", 2), ("qLocalTerm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterMode.setStatus('mandatory')
ccsLlcRouterTunnelTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("qTcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterTunnelTransport.setStatus('mandatory')
ccsLlcRouterTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterTunnelPort.setStatus('mandatory')
ccsLlcRouterPeerString = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterPeerString.setStatus('mandatory')
ccsLlcTunnelDefaultDestTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3), )
if mibBuilder.loadTexts: ccsLlcTunnelDefaultDestTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1) + (1000, ), Integer32())
ccsLlcTunnelDefaultDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1), ).setIndexNames((0, "A3COM-LIC-R1-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: ccsLlcTunnelDefaultDestEntry.setStatus('mandatory')
ccsLlcDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLlcDestTunnelId.setStatus('mandatory')
ccsLlcRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteMacAddress.setStatus('mandatory')
ccsLlcRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteSap.setStatus('mandatory')
ccsLlcRemoteSapLowRange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteSapLowRange.setStatus('mandatory')
ccsLlcRemoteSapHighRange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteSapHighRange.setStatus('mandatory')
mibBuilder.exportSymbols("A3COM-LIC-R1-MIB", llcCcStatsTable=llcCcStatsTable, llcCcOperCreateTime=llcCcOperCreateTime, ccsLlcRouterTunnelPort=ccsLlcRouterTunnelPort, llcSapOperNumCcs=llcSapOperNumCcs, ccsLlcDestTunnelId=ccsLlcDestTunnelId, llcCcOperLastModifyTime=llcCcOperLastModifyTime, llcSapStatsReset=llcSapStatsReset, llcSapStatsDisconnectFRMRSend=llcSapStatsDisconnectFRMRSend, llcCcOperLastWwCause=llcCcOperLastWwCause, ccsLlcTunnelDefaultDestEntry=ccsLlcTunnelDefaultDestEntry, ccsLlcTunnelId=ccsLlcTunnelId, llcSapStatsEntry=llcSapStatsEntry, llcSapAdminTable=llcSapAdminTable, llcCcOperLastFailFRMRInfo=llcCcOperLastFailFRMRInfo, llcSapStatsREJsIn=llcSapStatsREJsIn, llcSapStatsUIFramesIn=llcSapStatsUIFramesIn, llcCcOperDelayAckTimer=llcCcOperDelayAckTimer, llcSapStatsREJsOut=llcSapStatsREJsOut, llcSapStatsXIDCommandsIn=llcSapStatsXIDCommandsIn, llcCcOperLastFailTime=llcCcOperLastFailTime, ccsLlcRemoteMacAddress=ccsLlcRemoteMacAddress, llcSapStatsDisconnectTimer=llcSapStatsDisconnectTimer, llcSapStatsTable=llcSapStatsTable, llcCcRSap=llcCcRSap, llcSapStatsIFramesIn=llcSapStatsIFramesIn, ccsLlcTunnelRouterTable=ccsLlcTunnelRouterTable, llcPortAdminTable=llcPortAdminTable, llcCcStatsREJsOut=llcCcStatsREJsOut, ccsLlcTunnelInfo=ccsLlcTunnelInfo, llcPortAdminMaxSaps=llcPortAdminMaxSaps, llcSapStatsIFramesOut=llcSapStatsIFramesOut, llcPortAdminMaxRetransmits=llcPortAdminMaxRetransmits, llcSapAdminEntry=llcSapAdminEntry, ccsLlcRouterEnable=ccsLlcRouterEnable, llcCcOperMaxUnackedIPDUsRcv=llcCcOperMaxUnackedIPDUsRcv, llcSapStatsDisconnectFRMRRcv=llcSapStatsDisconnectFRMRRcv, llcCcStatsSFramesOut=llcCcStatsSFramesOut, llcPortOperLastModifyTime=llcPortOperLastModifyTime, llcCcOperAckTimer=llcCcOperAckTimer, brouterMIB=brouterMIB, llcCcOperPbitTimer=llcCcOperPbitTimer, llcCcOperLastFailCause=llcCcOperLastFailCause, llcCcStatsRemoteBusies=llcCcStatsRemoteBusies, llcSapNumber=llcSapNumber, llcSapStatsIOctetsIn=llcSapStatsIOctetsIn, llcSapStatsLocalBusies=llcSapStatsLocalBusies, llcSapStatsConnectOk=llcSapStatsConnectOk, ccsLlcRemoteSapHighRange=ccsLlcRemoteSapHighRange, llcSapOperLlc2Support=llcSapOperLlc2Support, ccsLlcTunnelVirtualRing=ccsLlcTunnelVirtualRing, ccsLlcTunnelMode=ccsLlcTunnelMode, llcSapStatsUIOctetsIn=llcSapStatsUIOctetsIn, llcSapStatsRemoteBusies=llcSapStatsRemoteBusies, llcPortAdminPbitTimer=llcPortAdminPbitTimer, llcSapStatsSFramesIn=llcSapStatsSFramesIn, ccsLlcRouterPeerString=ccsLlcRouterPeerString, llcPortAdminDelayAckCount=llcPortAdminDelayAckCount, llcSapOperTable=llcSapOperTable, llcCcAdminEntry=llcCcAdminEntry, llcCcOperState=llcCcOperState, llcCcStatsREJsIn=llcCcStatsREJsIn, llcTunnelGroup=llcTunnelGroup, llcPortOperNumSaps=llcPortOperNumSaps, llcSapStatsConnectFail=llcSapStatsConnectFail, ccsLlcLocalAddress=ccsLlcLocalAddress, llcCcStatsEntry=llcCcStatsEntry, llcPortAdminName=llcPortAdminName, llcPortAdminBusyTimer=llcPortAdminBusyTimer, llcSapStatsTESTCommandsOut=llcSapStatsTESTCommandsOut, llcCcStatsWwCount=llcCcStatsWwCount, llcSapStatsWwCount=llcSapStatsWwCount, llcCcOperRejTimer=llcCcOperRejTimer, llcPortOperTable=llcPortOperTable, llcSapStatsXIDResponsesIn=llcSapStatsXIDResponsesIn, llcPortOperSimRim=llcPortOperSimRim, llcCcOperMaxUnackedIPDUsSend=llcCcOperMaxUnackedIPDUsSend, llcPortAdminRejTimer=llcPortAdminRejTimer, llcCcStatsIOctetsOut=llcCcStatsIOctetsOut, llcCcOperNw=llcCcOperNw, llcCcStatsIFramesOut=llcCcStatsIFramesOut, ccsLlcRemoteSapLowRange=ccsLlcRemoteSapLowRange, ccsLlcRemoteSap=ccsLlcRemoteSap, a3com=a3com, llcCcOperEntry=llcCcOperEntry, llcPortAdminMaxUnackedIPDUsRcv=llcPortAdminMaxUnackedIPDUsRcv, llcSapStatsTESTCommandsIn=llcSapStatsTESTCommandsIn, llcCcLMac=llcCcLMac, ccsLlcTunnelRouterEntry=ccsLlcTunnelRouterEntry, llcCcStatsRetransmitsOut=llcCcStatsRetransmitsOut, MacAddress=MacAddress, llcPortAdminAckTimer=llcPortAdminAckTimer, llcCcOperMaxRetransmits=llcCcOperMaxRetransmits, ccsLlcPeerAddress=ccsLlcPeerAddress, llcCcStatsIFramesIn=llcCcStatsIFramesIn, llcPortAdminMaxCcs=llcPortAdminMaxCcs, llcSapOperStatus=llcSapOperStatus, llcPortAdminMaxUnackedIPDUsSend=llcPortAdminMaxUnackedIPDUsSend, llcCcOperWw=llcCcOperWw, llcCcAdminTable=llcCcAdminTable, llcCcOperTable=llcCcOperTable, llcCcStatsIOctetsIn=llcCcStatsIOctetsIn, llcCcOperInactTimer=llcCcOperInactTimer, llcPortGroup=llcPortGroup, llcPortAdminDelayAckTimer=llcPortAdminDelayAckTimer, llcSapStatsSFramesOut=llcSapStatsSFramesOut, llcSapGroup=llcSapGroup, llcCcStatsLocalBusies=llcCcStatsLocalBusies, llcSapOperEntry=llcSapOperEntry, llcSapStatsXIDResponsesOut=llcSapStatsXIDResponsesOut, ccsLlcRouterTunnelTransport=ccsLlcRouterTunnelTransport, pysmiFakeCol1000=pysmiFakeCol1000, ccsLlcTunnelDefaultDestTable=ccsLlcTunnelDefaultDestTable, llcPortAdminEntry=llcPortAdminEntry, llcSapStatsRetransmitsOut=llcSapStatsRetransmitsOut, llcSapStatsIOctetsOut=llcSapStatsIOctetsOut, llcSapStatsTESTResponsesOut=llcSapStatsTESTResponsesOut, llcSapStatsUIFramesOut=llcSapStatsUIFramesOut, llcCcOperMaxIPDUOctetsRcv=llcCcOperMaxIPDUOctetsRcv, llcCcGroup=llcCcGroup, ccsLlcRouterMode=ccsLlcRouterMode, llcCcOperDelayAckCount=llcCcOperDelayAckCount, llcCcOperBusyTimer=llcCcOperBusyTimer, llcCcRMac=llcCcRMac, llcSapStatsXIDCommandsOut=llcSapStatsXIDCommandsOut, llcCcLSap=llcCcLSap, llcPortAdminNw=llcPortAdminNw, llcPortAdminInactTimer=llcPortAdminInactTimer, llcCcStatsSFramesIn=llcCcStatsSFramesIn, llcPortAdminMaxPDUOctets=llcPortAdminMaxPDUOctets, llc=llc, ccsLlcTunnelSNAPriority=ccsLlcTunnelSNAPriority, llcPortOperEntry=llcPortOperEntry, llcSapStatsUIOctetsOut=llcSapStatsUIOctetsOut, llcSapStatsTESTResponsesIn=llcSapStatsTESTResponsesIn, llcSapStatsDisconnect=llcSapStatsDisconnect, llcCcOperMaxIPDUOctetsSend=llcCcOperMaxIPDUOctetsSend)
