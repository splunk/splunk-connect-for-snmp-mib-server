#
# PySNMP MIB module PDU2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDU2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:31:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysLocation, sysName, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName", "sysContact")
Counter64, NotificationType, Gauge32, ModuleIdentity, IpAddress, Integer32, Unsigned32, Counter32, MibIdentifier, Bits, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Gauge32", "ModuleIdentity", "IpAddress", "Integer32", "Unsigned32", "Counter32", "MibIdentifier", "Bits", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "iso")
MacAddress, TextualConvention, TruthValue, RowPointer, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "RowPointer", "DisplayString")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2016-02-09 00:00', '2015-10-26 00:00', '2015-09-30 00:00', '2015-02-18 00:00', '2014-06-04 00:00', '2014-01-09 00:00', '2014-01-07 00:00', '2013-11-21 00:00', '2013-09-18 00:00', '2013-08-01 00:00', '2013-07-10 00:00', '2013-07-02 00:00', '2013-05-21 00:00', '2013-04-26 00:00', '2013-03-27 00:00', '2013-03-25 10:00', '2013-03-25 00:00', '2013-03-18 00:00', '2013-02-25 00:00', '2013-02-04 00:00', '2013-01-24 00:00', '2012-11-20 00:00', '2012-11-15 00:00', '2012-10-05 00:00', '2012-10-04 00:00', '2012-09-28 00:00', '2012-09-21 00:00', '2012-09-20 00:00', '2012-09-17 00:00', '2012-09-04 00:00', '2012-06-22 00:00', '2012-06-18 00:00', '2012-06-06 00:00', '2012-05-25 00:00', '2012-05-15 00:00', '2012-03-26 00:00', '2011-12-13 00:00', '2011-11-29 00:00', '2011-10-25 00:00', '2011-06-16 00:00', '2011-03-22 00:00', '2011-02-21 00:00', '2011-02-14 00:00', '2011-02-08 00:00', '2011-02-03 00:00', '2011-01-31 00:00', '2010-12-15 00:00', '2010-12-13 11:31', '2010-12-13 00:00', '2010-12-07 00:00', '2010-10-07 00:00', '2010-10-04 00:00', '2010-09-01 00:00', '2010-08-05 00:00', '2010-07-23 00:00', '2010-07-22 00:00', '2010-07-21 00:00', '2010-07-14 00:00', '2010-07-06 00:00', '2010-07-01 00:00', '2010-06-30 00:00', '2010-06-21 00:00', '2010-06-03 00:00', '2010-05-27 00:00', '2010-05-24 00:00', '2010-04-19 00:00', '2010-04-15 00:00', '2010-04-08 00:00', '2010-03-29 00:00', '2010-03-25 00:00', '2010-03-16 00:00', '2010-03-01 00:00', '2010-01-29 00:00',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201602090000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
pdu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 2))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9))
reliability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2))
inlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3))
overCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6))
serverReachability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7))
wires = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8))
transferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9))
powerMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10))
circuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11))
outletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1))
externalSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 2))
transferSwitchControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3))
actuatorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4))
rcmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5))
inletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6))
outletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7))
unitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8))
circuitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9))
measurementsUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1))
measurementsInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2))
measurementsOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3))
measurementsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4))
measurementsExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5))
measurementsWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6))
measurementsTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7))
measurementsCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8))
logUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1))
logInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2))
logOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3))
logOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4))
logExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5))
logWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6))
logTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7))
logCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8))
reliabilityData = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1))
reliabilityErrorLog = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2))
complianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 2)).setObjects(("PDU2-MIB", "configGroup"), ("PDU2-MIB", "logGroup"), ("PDU2-MIB", "measurementsGroup"), ("PDU2-MIB", "controlGroup"), ("PDU2-MIB", "trapInformationGroup"), ("PDU2-MIB", "trapsGroup"), ("PDU2-MIB", "reliabilityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev2 = complianceRev2.setStatus('current')
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 1)).setObjects(("PDU2-MIB", "ipAddressGroup"), ("PDU2-MIB", "oldConfigGroup"), ("PDU2-MIB", "oldLogGroup"), ("PDU2-MIB", "oldMeasurementsGroup"), ("PDU2-MIB", "oldTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('deprecated')
configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 1))
for _configGroup_obj in [[("PDU2-MIB", "pduCount"), ("PDU2-MIB", "pduManufacturer"), ("PDU2-MIB", "pduModel"), ("PDU2-MIB", "pduSerialNumber"), ("PDU2-MIB", "pduRatedVoltage"), ("PDU2-MIB", "pduRatedCurrent"), ("PDU2-MIB", "pduRatedFrequency"), ("PDU2-MIB", "pduRatedVA"), ("PDU2-MIB", "pduImage"), ("PDU2-MIB", "inletCount"), ("PDU2-MIB", "transferSwitchCount"), ("PDU2-MIB", "productType"), ("PDU2-MIB", "overCurrentProtectorCount"), ("PDU2-MIB", "outletCount"), ("PDU2-MIB", "inletControllerCount"), ("PDU2-MIB", "outletControllerCount"), ("PDU2-MIB", "meteringControllerCount"), ("PDU2-MIB", "externalSensorCount"), ("PDU2-MIB", "circuitCount"), ("PDU2-MIB", "pxMACAddress"), ("PDU2-MIB", "utcOffset"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "boardVersion"), ("PDU2-MIB", "boardFirmwareVersion"), ("PDU2-MIB", "boardFirmwareTimeStamp"), ("PDU2-MIB", "unitSensorLogAvailable"), ("PDU2-MIB", "unitSensorUnits"), ("PDU2-MIB", "unitSensorDecimalDigits"), ("PDU2-MIB", "unitSensorResolution"), ("PDU2-MIB", "unitSensorMaximum"), ("PDU2-MIB", "unitSensorMinimum"), ("PDU2-MIB", "unitSensorHysteresis"), ("PDU2-MIB", "unitSensorStateChangeDelay"), ("PDU2-MIB", "unitSensorLowerCriticalThreshold"), ("PDU2-MIB", "unitSensorLowerWarningThreshold"), ("PDU2-MIB", "unitSensorUpperCriticalThreshold"), ("PDU2-MIB", "unitSensorUpperWarningThreshold"), ("PDU2-MIB", "unitSensorEnabledThresholds"), ("PDU2-MIB", "unitSensorSignedMaximum"), ("PDU2-MIB", "unitSensorSignedMinimum"), ("PDU2-MIB", "unitSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "unitSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "unitSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "unitSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "inletName"), ("PDU2-MIB", "inletPlug"), ("PDU2-MIB", "inletPoleCount"), ("PDU2-MIB", "inletRatedVoltage"), ("PDU2-MIB", "inletRatedCurrent"), ("PDU2-MIB", "inletDeviceCapabilities"), ("PDU2-MIB", "inletPoleCapabilities"), ("PDU2-MIB", "inletPlugDescriptor"), ("PDU2-MIB", "inletEnableState"), ("PDU2-MIB", "inletPoleLine"), ("PDU2-MIB", "inletPoleNode"), ("PDU2-MIB", "inletSensorLogAvailable"), ("PDU2-MIB", "inletSensorUnits"), ("PDU2-MIB", "inletSensorDecimalDigits"), ("PDU2-MIB", "inletSensorResolution"), ("PDU2-MIB", "inletSensorMaximum"), ("PDU2-MIB", "inletSensorMinimum"), ("PDU2-MIB", "inletSensorHysteresis"), ("PDU2-MIB", "inletSensorStateChangeDelay"), ("PDU2-MIB", "inletSensorLowerCriticalThreshold"), ("PDU2-MIB", "inletSensorLowerWarningThreshold"), ("PDU2-MIB", "inletSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletSensorUpperWarningThreshold"), ("PDU2-MIB", "inletSensorEnabledThresholds"), ("PDU2-MIB", "inletSensorSignedMaximum"), ("PDU2-MIB", "inletSensorSignedMinimum"), ("PDU2-MIB", "inletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorLogAvailable"), ("PDU2-MIB", "inletPoleSensorUnits"), ("PDU2-MIB", "inletPoleSensorDecimalDigits"), ("PDU2-MIB", "inletPoleSensorResolution"), ("PDU2-MIB", "inletPoleSensorMaximum"), ("PDU2-MIB", "inletPoleSensorMinimum"), ("PDU2-MIB", "inletPoleSensorHysteresis"), ("PDU2-MIB", "inletPoleSensorStateChangeDelay"), ("PDU2-MIB", "inletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "inletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorEnabledThresholds"), ("PDU2-MIB", "inletPoleSensorSignedMaximum"), ("PDU2-MIB", "inletPoleSensorSignedMinimum"), ("PDU2-MIB", "inletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletRCMResidualOperatingCurrent"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "overCurrentProtectorName"), ("PDU2-MIB", "overCurrentProtectorType"), ("PDU2-MIB", "overCurrentProtectorRatedCurrent"), ("PDU2-MIB", "overCurrentProtectorCapabilities"), ("PDU2-MIB", "overCurrentProtectorPoleCount"), ("PDU2-MIB", "overCurrentProtectorPoleLine"), ("PDU2-MIB", "overCurrentProtectorPoleInNode"), ("PDU2-MIB", "overCurrentProtectorPoleOutNode"), ("PDU2-MIB", "overCurrentProtectorSensorLogAvailable"), ("PDU2-MIB", "overCurrentProtectorSensorUnits"), ("PDU2-MIB", "overCurrentProtectorSensorDecimalDigits"), ("PDU2-MIB", "overCurrentProtectorSensorResolution"), ("PDU2-MIB", "overCurrentProtectorSensorMaximum"), ("PDU2-MIB", "overCurrentProtectorSensorMinimum"), ("PDU2-MIB", "overCurrentProtectorSensorHysteresis"), ("PDU2-MIB", "overCurrentProtectorSensorStateChangeDelay"), ("PDU2-MIB", "overCurrentProtectorSensorLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorLowerWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorEnabledThresholds"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMaximum"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMinimum"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorPowerSource"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "outletName"), ("PDU2-MIB", "outletReceptacle"), ("PDU2-MIB", "outletPoleCount"), ("PDU2-MIB", "outletRatedVoltage"), ("PDU2-MIB", "outletRatedCurrent"), ("PDU2-MIB", "outletRatedVA"), ("PDU2-MIB", "outletDeviceCapabilities"), ("PDU2-MIB", "outletPoleCapabilities"), ("PDU2-MIB", "outletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "outletStateOnStartup"), ("PDU2-MIB", "outletUseGlobalPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "outletSwitchable"), ("PDU2-MIB", "outletReceptacleDescriptor"), ("PDU2-MIB", "outletNonCritical"), ("PDU2-MIB", "outletSequenceDelay"), ("PDU2-MIB", "outletPoleLine"), ("PDU2-MIB", "outletPoleNode"), ("PDU2-MIB", "outletSensorLogAvailable"), ("PDU2-MIB", "outletSensorUnits"), ("PDU2-MIB", "outletSensorDecimalDigits"), ("PDU2-MIB", "outletSensorResolution"), ("PDU2-MIB", "outletSensorMaximum"), ("PDU2-MIB", "outletSensorMinimum"), ("PDU2-MIB", "outletSensorHysteresis"), ("PDU2-MIB", "outletSensorStateChangeDelay"), ("PDU2-MIB", "outletSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletSensorLowerWarningThreshold"), ("PDU2-MIB", "outletSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletSensorUpperWarningThreshold"), ("PDU2-MIB", "outletSensorEnabledThresholds"), ("PDU2-MIB", "outletSensorSignedMaximum"), ("PDU2-MIB", "outletSensorSignedMinimum"), ("PDU2-MIB", "outletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "outletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "outletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "outletPoleSensorLogAvailable"), ("PDU2-MIB", "outletPoleSensorUnits"), ("PDU2-MIB", "outletPoleSensorDecimalDigits"), ("PDU2-MIB", "outletPoleSensorResolution"), ("PDU2-MIB", "outletPoleSensorMaximum"), ("PDU2-MIB", "outletPoleSensorMinimum"), ("PDU2-MIB", "outletPoleSensorHysteresis"), ("PDU2-MIB", "outletPoleSensorStateChangeDelay"), ("PDU2-MIB", "outletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "outletPoleSensorEnabledThresholds"), ("PDU2-MIB", "outletPoleSensorSignedMaximum"), ("PDU2-MIB", "outletPoleSensorSignedMinimum"), ("PDU2-MIB", "outletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "outletPowerSource"), ("PDU2-MIB", "externalSensorType"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "externalSensorName"), ("PDU2-MIB", "externalSensorDescription"), ("PDU2-MIB", "externalSensorXCoordinate"), ("PDU2-MIB", "externalSensorYCoordinate"), ("PDU2-MIB", "externalSensorZCoordinate"), ("PDU2-MIB", "externalSensorChannelNumber"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "externalSensorLogAvailable"), ("PDU2-MIB", "externalSensorUnits"), ("PDU2-MIB", "externalSensorDecimalDigits"), ("PDU2-MIB", "externalSensorResolution"), ("PDU2-MIB", "externalSensorMaximum"), ("PDU2-MIB", "externalSensorMinimum"), ("PDU2-MIB", "externalSensorHysteresis"), ("PDU2-MIB", "externalSensorStateChangeDelay"), ("PDU2-MIB", "externalSensorLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorLowerWarningThreshold"), ("PDU2-MIB", "externalSensorUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorUpperWarningThreshold"), ("PDU2-MIB", "externalSensorEnabledThresholds"), ("PDU2-MIB", "externalSensorsZCoordinateUnits"), ("PDU2-MIB", "externalSensorIsActuator"), ("PDU2-MIB", "externalSensorPosition"), ("PDU2-MIB", "externalSensorUseDefaultThresholds"), ("PDU2-MIB", "externalSensorTypeDefaultHysteresis"), ("PDU2-MIB", "externalSensorTypeDefaultStateChangeDelay"), ("PDU2-MIB", "externalSensorTypeDefaultLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultLowerWarningThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultUpperWarningThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultEnabledThresholds"), ("PDU2-MIB", "measurementPeriod"), ("PDU2-MIB", "measurementsPerLogEntry"), ("PDU2-MIB", "logSize"), ("PDU2-MIB", "unitDeviceCapabilities"), ("PDU2-MIB", "globalOutletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "globalOutletStateOnStartup"), ("PDU2-MIB", "relayBehaviorOnPowerLoss"), ("PDU2-MIB", "pduPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "pduDaisychainMemberType"), ("PDU2-MIB", "managedExternalSensorCount"), ("PDU2-MIB", "outletPowerupSequence"), ("PDU2-MIB", "loadShedding"), ("PDU2-MIB", "serverCount"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "serverPingEnabled"), ("PDU2-MIB", "inrushGuardDelay"), ("PDU2-MIB", "cascadedDeviceConnected"), ("PDU2-MIB", "synchronizeWithNTPServer"), ("PDU2-MIB", "useDHCPProvidedNTPServer"), ("PDU2-MIB", "firstNTPServerAddressType"), ("PDU2-MIB", "firstNTPServerAddress"), ("PDU2-MIB", "secondNTPServerAddressType"), ("PDU2-MIB", "secondNTPServerAddress"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "transferSwitchName"), ("PDU2-MIB", "transferSwitchPreferredInlet"), ("PDU2-MIB", "transferSwitchPoleCount"), ("PDU2-MIB", "transferSwitchAutoReTransferEnabled"), ("PDU2-MIB", "transferSwitchAutoReTransferWaitTime"), ("PDU2-MIB", "transferSwitchAutoReTransferRequiresPhaseSync"), ("PDU2-MIB", "transferSwitchFrontPanelManualTransferButtonEnabled"), ("PDU2-MIB", "transferSwitchCapabilities"), ("PDU2-MIB", "transferSwitchPoleLine"), ("PDU2-MIB", "transferSwitchPoleIn1Node"), ("PDU2-MIB", "transferSwitchPoleIn2Node"), ("PDU2-MIB", "transferSwitchPoleOutNode"), ("PDU2-MIB", "transferSwitchSensorLogAvailable"), ("PDU2-MIB", "transferSwitchSensorUnits"), ("PDU2-MIB", "transferSwitchSensorDecimalDigits"), ("PDU2-MIB", "transferSwitchSensorResolution"), ("PDU2-MIB", "transferSwitchSensorMaximum")], [("PDU2-MIB", "transferSwitchSensorMinimum"), ("PDU2-MIB", "transferSwitchSensorHysteresis"), ("PDU2-MIB", "transferSwitchSensorStateChangeDelay"), ("PDU2-MIB", "transferSwitchSensorLowerCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorEnabledThresholds"), ("PDU2-MIB", "transferSwitchSensorSignedMaximum"), ("PDU2-MIB", "transferSwitchSensorSignedMinimum"), ("PDU2-MIB", "transferSwitchSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchPowerSource1"), ("PDU2-MIB", "transferSwitchPowerSource2"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "peripheralDevicePackageModel"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("PDU2-MIB", "peripheralDevicePackageMinFirmwareVersion"), ("PDU2-MIB", "peripheralDevicePackageFirmwareTimeStamp"), ("PDU2-MIB", "peripheralDevicePackagePosition"), ("PDU2-MIB", "peripheralDevicePackageState"), ("PDU2-MIB", "deviceCascadeType"), ("PDU2-MIB", "deviceCascadePosition"), ("PDU2-MIB", "peripheralDevicesAutoManagement"), ("PDU2-MIB", "externalSensorAlarmedToNormalDelay"), ("PDU2-MIB", "frontPanelOutletSwitching"), ("PDU2-MIB", "frontPanelRCMSelfTest"), ("PDU2-MIB", "frontPanelActuatorControl"), ("PDU2-MIB", "powerMeterPanelPositions"), ("PDU2-MIB", "powerMeterPanelLayout"), ("PDU2-MIB", "powerMeterPanelNumbering"), ("PDU2-MIB", "powerMeterPhaseCTRating"), ("PDU2-MIB", "powerMeterNeutralCTRating"), ("PDU2-MIB", "powerMeterEarthCTRating"), ("PDU2-MIB", "powerMeterBranchCount"), ("PDU2-MIB", "powerMeterType"), ("PDU2-MIB", "circuitPoleCount"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("PDU2-MIB", "circuitRatedCurrent"), ("PDU2-MIB", "circuitCTRating"), ("PDU2-MIB", "circuitCapabilities"), ("PDU2-MIB", "circuitPoleCapabilities"), ("PDU2-MIB", "circuitPowerSource"), ("PDU2-MIB", "circuitPolePanelPosition"), ("PDU2-MIB", "circuitPoleCTNumber"), ("PDU2-MIB", "circuitPolePhase"), ("PDU2-MIB", "circuitSensorLogAvailable"), ("PDU2-MIB", "circuitSensorUnits"), ("PDU2-MIB", "circuitSensorDecimalDigits"), ("PDU2-MIB", "circuitSensorResolution"), ("PDU2-MIB", "circuitSensorMaximum"), ("PDU2-MIB", "circuitSensorMinimum"), ("PDU2-MIB", "circuitSensorHysteresis"), ("PDU2-MIB", "circuitSensorStateChangeDelay"), ("PDU2-MIB", "circuitSensorLowerCriticalThreshold"), ("PDU2-MIB", "circuitSensorLowerWarningThreshold"), ("PDU2-MIB", "circuitSensorUpperCriticalThreshold"), ("PDU2-MIB", "circuitSensorUpperWarningThreshold"), ("PDU2-MIB", "circuitSensorEnabledThresholds"), ("PDU2-MIB", "circuitSensorSignedMaximum"), ("PDU2-MIB", "circuitSensorSignedMinimum"), ("PDU2-MIB", "circuitSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "circuitSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "circuitSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "circuitSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorLogAvailable"), ("PDU2-MIB", "circuitPoleSensorUnits"), ("PDU2-MIB", "circuitPoleSensorDecimalDigits"), ("PDU2-MIB", "circuitPoleSensorResolution"), ("PDU2-MIB", "circuitPoleSensorMaximum"), ("PDU2-MIB", "circuitPoleSensorMinimum"), ("PDU2-MIB", "circuitPoleSensorHysteresis"), ("PDU2-MIB", "circuitPoleSensorStateChangeDelay"), ("PDU2-MIB", "circuitPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorEnabledThresholds"), ("PDU2-MIB", "circuitPoleSensorSignedMaximum"), ("PDU2-MIB", "circuitPoleSensorSignedMinimum"), ("PDU2-MIB", "circuitPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "circuitPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "circuitPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "networkInterfaceType"), ("PDU2-MIB", "activeDNSServerAddressType"), ("PDU2-MIB", "activeDNSServerAddress"), ("PDU2-MIB", "activeDNSServerAddressSource"), ("PDU2-MIB", "activeDNSServerCount")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        configGroup = configGroup.setObjects(*_configGroup_obj)
    else:
        configGroup = configGroup.setObjects(*_configGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configGroup = configGroup.setStatus('current')
ipAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 12)).setObjects(("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "netmask"), ("PDU2-MIB", "gateway"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetNetmask"), ("PDU2-MIB", "pxInetGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipAddressGroup = ipAddressGroup.setStatus('deprecated')
oldConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 13)).setObjects(("PDU2-MIB", "outletSequencingDelay"), ("PDU2-MIB", "unitSensorAccuracy"), ("PDU2-MIB", "unitSensorTolerance"), ("PDU2-MIB", "inletSensorAccuracy"), ("PDU2-MIB", "inletSensorTolerance"), ("PDU2-MIB", "inletPoleSensorAccuracy"), ("PDU2-MIB", "inletPoleSensorTolerance"), ("PDU2-MIB", "outletSensorAccuracy"), ("PDU2-MIB", "outletSensorTolerance"), ("PDU2-MIB", "outletPoleSensorAccuracy"), ("PDU2-MIB", "outletPoleSensorTolerance"), ("PDU2-MIB", "overCurrentProtectorSensorAccuracy"), ("PDU2-MIB", "overCurrentProtectorSensorTolerance"), ("PDU2-MIB", "externalSensorAccuracy"), ("PDU2-MIB", "externalSensorTolerance"), ("PDU2-MIB", "wireSensorAccuracy"), ("PDU2-MIB", "wireSensorTolerance"), ("PDU2-MIB", "transferSwitchSensorAccuracy"), ("PDU2-MIB", "transferSwitchSensorTolerance"), ("PDU2-MIB", "wireCount"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "wireCapabilities"), ("PDU2-MIB", "wireSensorLogAvailable"), ("PDU2-MIB", "wireSensorUnits"), ("PDU2-MIB", "wireSensorDecimalDigits"), ("PDU2-MIB", "wireSensorResolution"), ("PDU2-MIB", "wireSensorMaximum"), ("PDU2-MIB", "wireSensorMinimum"), ("PDU2-MIB", "wireSensorHysteresis"), ("PDU2-MIB", "wireSensorStateChangeDelay"), ("PDU2-MIB", "wireSensorLowerCriticalThreshold"), ("PDU2-MIB", "wireSensorLowerWarningThreshold"), ("PDU2-MIB", "wireSensorUpperCriticalThreshold"), ("PDU2-MIB", "wireSensorUpperWarningThreshold"), ("PDU2-MIB", "wireSensorEnabledThresholds"), ("PDU2-MIB", "wirePowerSource"), ("PDU2-MIB", "inletRatedFrequency"), ("PDU2-MIB", "inletRatedVA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldConfigGroup = oldConfigGroup.setStatus('deprecated')
logGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 2)).setObjects(("PDU2-MIB", "dataLogging"), ("PDU2-MIB", "oldestLogID"), ("PDU2-MIB", "newestLogID"), ("PDU2-MIB", "logTimeStamp"), ("PDU2-MIB", "dataLoggingEnableForAllSensors"), ("PDU2-MIB", "logUnitSensorDataAvailable"), ("PDU2-MIB", "logUnitSensorState"), ("PDU2-MIB", "logUnitSensorAvgValue"), ("PDU2-MIB", "logUnitSensorMaxValue"), ("PDU2-MIB", "logUnitSensorMinValue"), ("PDU2-MIB", "logUnitSensorSignedAvgValue"), ("PDU2-MIB", "logUnitSensorSignedMaxValue"), ("PDU2-MIB", "logUnitSensorSignedMinValue"), ("PDU2-MIB", "logInletSensorDataAvailable"), ("PDU2-MIB", "logInletSensorState"), ("PDU2-MIB", "logInletSensorAvgValue"), ("PDU2-MIB", "logInletSensorMaxValue"), ("PDU2-MIB", "logInletSensorMinValue"), ("PDU2-MIB", "logInletSensorSignedAvgValue"), ("PDU2-MIB", "logInletSensorSignedMaxValue"), ("PDU2-MIB", "logInletSensorSignedMinValue"), ("PDU2-MIB", "logInletPoleSensorDataAvailable"), ("PDU2-MIB", "logInletPoleSensorState"), ("PDU2-MIB", "logInletPoleSensorAvgValue"), ("PDU2-MIB", "logInletPoleSensorMaxValue"), ("PDU2-MIB", "logInletPoleSensorMinValue"), ("PDU2-MIB", "logInletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logInletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logInletPoleSensorSignedMinValue"), ("PDU2-MIB", "logOutletSensorDataAvailable"), ("PDU2-MIB", "logOutletSensorState"), ("PDU2-MIB", "logOutletSensorAvgValue"), ("PDU2-MIB", "logOutletSensorMaxValue"), ("PDU2-MIB", "logOutletSensorMinValue"), ("PDU2-MIB", "logOutletSensorSignedAvgValue"), ("PDU2-MIB", "logOutletSensorSignedMaxValue"), ("PDU2-MIB", "logOutletSensorSignedMinValue"), ("PDU2-MIB", "logOutletPoleSensorDataAvailable"), ("PDU2-MIB", "logOutletPoleSensorState"), ("PDU2-MIB", "logOutletPoleSensorAvgValue"), ("PDU2-MIB", "logOutletPoleSensorMaxValue"), ("PDU2-MIB", "logOutletPoleSensorMinValue"), ("PDU2-MIB", "logOutletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMinValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorDataAvailable"), ("PDU2-MIB", "logOverCurrentProtectorSensorState"), ("PDU2-MIB", "logOverCurrentProtectorSensorAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMinValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMinValue"), ("PDU2-MIB", "logExternalSensorDataAvailable"), ("PDU2-MIB", "logExternalSensorState"), ("PDU2-MIB", "logExternalSensorAvgValue"), ("PDU2-MIB", "logExternalSensorMaxValue"), ("PDU2-MIB", "logExternalSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorDataAvailable"), ("PDU2-MIB", "logTransferSwitchSensorState"), ("PDU2-MIB", "logTransferSwitchSensorAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorMaxValue"), ("PDU2-MIB", "logTransferSwitchSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedMaxValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedMinValue"), ("PDU2-MIB", "logCircuitSensorDataAvailable"), ("PDU2-MIB", "logCircuitSensorState"), ("PDU2-MIB", "logCircuitSensorAvgValue"), ("PDU2-MIB", "logCircuitSensorMaxValue"), ("PDU2-MIB", "logCircuitSensorMinValue"), ("PDU2-MIB", "logCircuitSensorSignedAvgValue"), ("PDU2-MIB", "logCircuitSensorSignedMaxValue"), ("PDU2-MIB", "logCircuitSensorSignedMinValue"), ("PDU2-MIB", "logCircuitPoleSensorDataAvailable"), ("PDU2-MIB", "logCircuitPoleSensorState"), ("PDU2-MIB", "logCircuitPoleSensorAvgValue"), ("PDU2-MIB", "logCircuitPoleSensorMaxValue"), ("PDU2-MIB", "logCircuitPoleSensorMinValue"), ("PDU2-MIB", "logCircuitPoleSensorSignedAvgValue"), ("PDU2-MIB", "logCircuitPoleSensorSignedMaxValue"), ("PDU2-MIB", "logCircuitPoleSensorSignedMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    logGroup = logGroup.setStatus('current')
oldLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 14)).setObjects(("PDU2-MIB", "logWireSensorDataAvailable"), ("PDU2-MIB", "logWireSensorState"), ("PDU2-MIB", "logWireSensorAvgValue"), ("PDU2-MIB", "logWireSensorMaxValue"), ("PDU2-MIB", "logWireSensorMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldLogGroup = oldLogGroup.setStatus('deprecated')
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 3)).setObjects(("PDU2-MIB", "measurementsUnitSensorIsAvailable"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "measurementsInletSensorIsAvailable"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "measurementsInletSensorValue"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("PDU2-MIB", "measurementsInletSensorSignedValue"), ("PDU2-MIB", "measurementsInletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsOutletSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "measurementsOutletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorIsAvailable"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "measurementsExternalSensorIsAvailable"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorIsAvailable"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("PDU2-MIB", "measurementsCircuitSensorIsAvailable"), ("PDU2-MIB", "measurementsCircuitSensorState"), ("PDU2-MIB", "measurementsCircuitSensorValue"), ("PDU2-MIB", "measurementsCircuitSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitSensorSignedValue"), ("PDU2-MIB", "measurementsCircuitPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsCircuitPoleSensorState"), ("PDU2-MIB", "measurementsCircuitPoleSensorValue"), ("PDU2-MIB", "measurementsCircuitPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitPoleSensorSignedValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementsGroup = measurementsGroup.setStatus('current')
oldMeasurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 15)).setObjects(("PDU2-MIB", "measurementsWireSensorIsAvailable"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldMeasurementsGroup = oldMeasurementsGroup.setStatus('deprecated')
controlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 4)).setObjects(("PDU2-MIB", "switchingOperation"), ("PDU2-MIB", "outletSwitchingState"), ("PDU2-MIB", "outletSwitchingTimeStamp"), ("PDU2-MIB", "transferSwitchActiveInlet"), ("PDU2-MIB", "transferSwitchTransferToInlet"), ("PDU2-MIB", "transferSwitchAlarmOverride"), ("PDU2-MIB", "transferSwitchLastTransferReason"), ("PDU2-MIB", "actuatorState"), ("PDU2-MIB", "rcmState"), ("PDU2-MIB", "inletSensorResetValue"), ("PDU2-MIB", "outletSensorResetValue"), ("PDU2-MIB", "unitSensorResetValue"), ("PDU2-MIB", "circuitSensorResetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controlGroup = controlGroup.setStatus('current')
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 5)).setObjects(("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "smtpServer"), ("PDU2-MIB", "errorDescription"), ("PDU2-MIB", "deviceChangedParameter"), ("PDU2-MIB", "changedParameterNewValue"), ("PDU2-MIB", "lhxSupportEnabled"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitPoleNumber"), ("PDU2-MIB", "phoneNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapInformationGroup = trapInformationGroup.setStatus('current')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 9)).setObjects(("PDU2-MIB", "systemStarted"), ("PDU2-MIB", "systemReset"), ("PDU2-MIB", "userLogin"), ("PDU2-MIB", "userLogout"), ("PDU2-MIB", "userAuthenticationFailure"), ("PDU2-MIB", "userSessionTimeout"), ("PDU2-MIB", "userAdded"), ("PDU2-MIB", "userModified"), ("PDU2-MIB", "userDeleted"), ("PDU2-MIB", "roleAdded"), ("PDU2-MIB", "roleModified"), ("PDU2-MIB", "roleDeleted"), ("PDU2-MIB", "deviceUpdateStarted"), ("PDU2-MIB", "deviceUpdateCompleted"), ("PDU2-MIB", "userBlocked"), ("PDU2-MIB", "powerControl"), ("PDU2-MIB", "userPasswordChanged"), ("PDU2-MIB", "passwordSettingsChanged"), ("PDU2-MIB", "firmwareValidationFailed"), ("PDU2-MIB", "logFileCleared"), ("PDU2-MIB", "bulkConfigurationSaved"), ("PDU2-MIB", "bulkConfigurationCopied"), ("PDU2-MIB", "inletSensorStateChange"), ("PDU2-MIB", "inletPoleSensorStateChange"), ("PDU2-MIB", "outletSensorStateChange"), ("PDU2-MIB", "outletPoleSensorStateChange"), ("PDU2-MIB", "overCurrentProtectorSensorStateChange"), ("PDU2-MIB", "externalSensorStateChange"), ("PDU2-MIB", "smtpMessageTransmissionFailure"), ("PDU2-MIB", "ldapError"), ("PDU2-MIB", "deviceUpdateFailed"), ("PDU2-MIB", "loadSheddingModeEntered"), ("PDU2-MIB", "loadSheddingModeExited"), ("PDU2-MIB", "pingServerEnabled"), ("PDU2-MIB", "pingServerDisabled"), ("PDU2-MIB", "serverNotReachable"), ("PDU2-MIB", "serverReachable"), ("PDU2-MIB", "rfCodeTagConnected"), ("PDU2-MIB", "rfCodeTagDisconnected"), ("PDU2-MIB", "deviceIdentificationChanged"), ("PDU2-MIB", "usbSlaveConnected"), ("PDU2-MIB", "usbSlaveDisconnected"), ("PDU2-MIB", "lhxSupportChanged"), ("PDU2-MIB", "userAcceptedRestrictedServiceAgreement"), ("PDU2-MIB", "userDeclinedRestrictedServiceAgreement"), ("PDU2-MIB", "transferSwitchSensorStateChange"), ("PDU2-MIB", "deviceSettingsSaved"), ("PDU2-MIB", "deviceSettingsRestored"), ("PDU2-MIB", "webcamInserted"), ("PDU2-MIB", "webcamRemoved"), ("PDU2-MIB", "inletEnabled"), ("PDU2-MIB", "inletDisabled"), ("PDU2-MIB", "serverConnectivityUnrecoverable"), ("PDU2-MIB", "radiusError"), ("PDU2-MIB", "serverReachabilityError"), ("PDU2-MIB", "inletSensorReset"), ("PDU2-MIB", "outletSensorReset"), ("PDU2-MIB", "unitSensorReset"), ("PDU2-MIB", "circuitSensorReset"), ("PDU2-MIB", "unknownPeripheralDeviceAttached"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdate"), ("PDU2-MIB", "unitSensorStateChange"), ("PDU2-MIB", "circuitSensorStateChange"), ("PDU2-MIB", "circuitPoleSensorStateChange"), ("PDU2-MIB", "circuitAdded"), ("PDU2-MIB", "circuitDeleted"), ("PDU2-MIB", "circuitModified"), ("PDU2-MIB", "powerMeterAdded"), ("PDU2-MIB", "powerMeterDeleted"), ("PDU2-MIB", "powerMeterModified"), ("PDU2-MIB", "smsMessageTransmissionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
oldTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 16)).setObjects(("PDU2-MIB", "wireSensorStateChange"), ("PDU2-MIB", "pduSensorStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldTrapsGroup = oldTrapsGroup.setStatus('deprecated')
reliabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 10)).setObjects(("PDU2-MIB", "reliabilityId"), ("PDU2-MIB", "reliabilityDataValue"), ("PDU2-MIB", "reliabilityDataMaxPossible"), ("PDU2-MIB", "reliabilityDataWorstValue"), ("PDU2-MIB", "reliabilityDataThreshold"), ("PDU2-MIB", "reliabilityDataRawUpperBytes"), ("PDU2-MIB", "reliabilityDataRawLowerBytes"), ("PDU2-MIB", "reliabilityDataFlags"), ("PDU2-MIB", "reliabilityErrorLogId"), ("PDU2-MIB", "reliabilityErrorLogValue"), ("PDU2-MIB", "reliabilityErrorLogThreshold"), ("PDU2-MIB", "reliabilityErrorLogRawUpperBytes"), ("PDU2-MIB", "reliabilityErrorLogRawLowerBytes"), ("PDU2-MIB", "reliabilityErrorLogPOH"), ("PDU2-MIB", "reliabilityErrorLogTime"), ("PDU2-MIB", "reliabilityDataTableSequenceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    reliabilityGroup = reliabilityGroup.setStatus('current')
class SensorTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("fanSpeed", 21), ("surgeProtectorStatus", 22), ("frequency", 23), ("phaseAngle", 24), ("rmsVoltageLN", 25), ("residualCurrent", 26), ("rcmState", 27), ("absoluteHumidity", 28), ("reactivePower", 29), ("other", 30), ("none", 31), ("powerQuality", 32), ("overloadStatus", 33), ("overheatStatus", 34), ("displacementPowerFactor", 35), ("fanStatus", 37), ("inletPhaseSyncAngle", 38), ("inletPhaseSync", 39), ("operatingState", 40), ("activeInlet", 41), ("illuminance", 42), ("doorContact", 43), ("tamperDetection", 44), ("motionDetection", 45), ("i1smpsStatus", 46), ("i2smpsStatus", 47), ("switchStatus", 48))

class SensorStateEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11), ("ok", 12), ("fail", 14), ("yes", 15), ("no", 16), ("standby", 17), ("one", 18), ("two", 19), ("inSync", 20), ("outOfSync", 21), ("i1OpenFault", 22), ("i1ShortFault", 23), ("i2OpenFault", 24), ("i2ShortFault", 25), ("fault", 26), ("warning", 27), ("critical", 28), ("selfTest", 29), ("nonRedundant", 30))

class PlugTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))
    namedValues = NamedValues(("plugOTHER", -1), ("plugNONE", 0), ("plug56P320", 1), ("plug56P520", 2), ("plug56P532", 3), ("plugCS8365C", 4), ("plugIEC320C14", 5), ("plugIEC320C20", 6), ("plugIEC603093WIRE250V16A", 7), ("plugIEC603093WIRE250V20A", 8), ("plugIEC603093WIRE250V30A", 9), ("plugIEC603093WIRE250V32A", 10), ("plugIEC603093WIRE250V60A", 11), ("plugIEC603093WIRE250V63A", 12), ("plugIEC603093WIRE250V100A", 13), ("plugIEC603093WIRE250V125A", 14), ("plugIEC603094WIRE250V20A", 15), ("plugIEC603094WIRE250V30A", 16), ("plugIEC603094WIRE250V60A", 17), ("plugIEC603094WIRE250V100A", 18), ("plugIEC603095WIRE208V20A", 23), ("plugIEC603095WIRE208V30A", 24), ("plugIEC603095WIRE208V60A", 25), ("plugIEC603095WIRE208V100A", 26), ("plugIEC603095WIRE415V16A", 27), ("plugIEC603095WIRE415V32A", 28), ("plugIEC603095WIRE415V63A", 29), ("plugIEC603095WIRE415V125A", 30), ("plugIEC603095WIRE480V20A", 31), ("plugIEC603095WIRE480V30A", 32), ("plugIEC603095WIRE480V60A", 33), ("plugIEC603095WIRE480V100A", 34), ("plugNEMA515P", 35), ("plugNEMAL515P", 36), ("plugNEMA520P", 37), ("plugNEMAL520P", 38), ("plugNEMAL530P", 39), ("plugNEMAL615P", 40), ("plugNEMAL620P", 41), ("plugNEMAL630P", 42), ("plugNEMAL1520P", 43), ("plugNEMAL1530P", 44), ("plugNEMAL2120P", 45), ("plugNEMAL2130P", 46), ("plugNEMAL2230P", 47), ("plug56P320F", 48), ("plug56PA320", 49))

class ReceptacleTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))
    namedValues = NamedValues(("receptacleOTHER", -1), ("receptacleNONE", 0), ("receptacleBS1363", 1), ("receptacle56P532", 3), ("receptacleCS8364C", 4), ("receptacleIEC320C13", 5), ("receptacleIEC320C19", 6), ("receptacleIEC603093WIRE250V16A", 7), ("receptacleIEC603093WIRE250V20A", 8), ("receptacleIEC603093WIRE250V30A", 9), ("receptacleIEC603093WIRE250V32A", 10), ("receptacleIEC603093WIRE250V60A", 11), ("receptacleIEC603093WIRE250V63A", 12), ("receptacleIEC603093WIRE250V100A", 13), ("receptacleIEC603093WIRE250V125A", 14), ("receptacleIEC603094WIRE250V20A", 15), ("receptacleIEC603094WIRE250V30A", 16), ("receptacleIEC603094WIRE250V60A", 17), ("receptacleIEC603094WIRE250V100A", 18), ("receptacleIEC603095WIRE208V20A", 23), ("receptacleIEC603095WIRE208V30A", 24), ("receptacleIEC603095WIRE208V60A", 25), ("receptacleIEC603095WIRE208V100A", 26), ("receptacleIEC603095WIRE415V16A", 27), ("receptacleIEC603095WIRE415V32A", 28), ("receptacleIEC603095WIRE415V63A", 29), ("receptacleIEC603095WIRE415V125A", 30), ("receptacleIEC603095WIRE480V20A", 31), ("receptacleIEC603095WIRE480V30A", 32), ("receptacleIEC603095WIRE480V60A", 33), ("receptacleIEC603095WIRE480V100A", 34), ("receptacleNEMA515R", 35), ("receptacleNEMAL515R", 36), ("receptacleNEMA520R", 37), ("receptacleNEMAL520R", 38), ("receptacleNEMAL530R", 39), ("receptacleNEMAL615R", 40), ("receptacleNEMAL620R", 41), ("receptacleNEMAL630R", 42), ("receptacleNEMAL1520R", 43), ("receptacleNEMAL1530R", 44), ("receptacleNEMAL2120RP", 45), ("receptacleNEMAL2130R", 46), ("receptacleSCHUKOTYPEE", 47), ("receptacleSCHUKOTYPEF", 48))

class OverCurrentProtectorTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ocpBREAKER1POLE", 1), ("ocpBREAKER2POLE", 2), ("ocpBREAKER3POLE", 3), ("ocpFUSE", 4), ("ocpFUSEPAIR", 5), ("ocpRCBO2POLE", 6), ("ocpRCBO3POLE", 7), ("ocpRCBO4POLE", 8))

class BoardTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("mainController", 1), ("inletController", 2), ("outletController", 3), ("meteringController", 4))

class OutletSwitchingOperationsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("cycle", 2))

class SensorUnitsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19), ("degrees", 20), ("lux", 21), ("grampercubicmeter", 22), ("var", 23))

class DaisychainMemberTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("standalone", 0), ("master", 1), ("slave", 2))

class URL(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class GlobalOutletStateOnStartupEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2))

class OutletStateOnStartupEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2), ("globalOutletStateOnStartup", 3))

class ExternalSensorsZCoordinateUnitsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("rackUnits", 0), ("text", 1))

class HundredthsOfAPercentage(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class DeviceIdentificationParameterEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("pduName", 0), ("sysContact", 1), ("sysName", 2), ("sysLocation", 3))

class TransferSwitchTransferReasonEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("startup", 1), ("manualTransfer", 2), ("automaticReTransfer", 3), ("powerFailure", 4), ("powerQuality", 5), ("overloadAlarm", 6), ("overheatAlarm", 7), ("internalFailure", 8))

class ProductTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("rackPdu", 0), ("bcm", 1), ("transferSwitch", 2), ("powerMeter", 3))

class RelayPowerLossBehaviorEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("nonLatching", 0), ("latching", 1))

class DeviceCascadeTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("bridging", 0), ("portForwarding", 1))

class PeripheralDeviceFirmwareUpdateStateEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("started", 1), ("successful", 2), ("failed", 3))

class PanelLayoutEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("invalid", -1), ("oneColumn", 1), ("twoColumns", 2))

class PanelNumberingEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("invalid", -1), ("oddEven", 1), ("sequential", 2))

class CircuitTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("onePhaseLL", 1), ("onePhaseLN", 2), ("onePhaseLLN", 3), ("threePhase", 4))

class PhaseEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("phaseA", 1), ("phaseB", 2), ("phaseC", 3), ("neutral", 4), ("earth", 5))

class LineEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("lineL1", 1), ("lineL2", 2), ("lineL3", 3), ("lineNeutral", 4))

class PowerMeterTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("singlePhase", 1), ("splitPhase", 2), ("threePhase", 3))

class NetworkInterfaceTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("wired", 0), ("wireless", 1))

class AddressSourceEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))

pduCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCount.setStatus('current')
nameplateTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1), )
if mibBuilder.loadTexts: nameplateTable.setStatus('current')
nameplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: nameplateEntry.setStatus('current')
pduId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: pduId.setStatus('current')
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduManufacturer.setStatus('current')
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setStatus('current')
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setStatus('current')
pduRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVoltage.setStatus('current')
pduRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedCurrent.setStatus('current')
pduRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedFrequency.setStatus('current')
pduRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVA.setStatus('current')
pduImage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 9), URL()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduImage.setStatus('current')
unitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2), )
if mibBuilder.loadTexts: unitConfigurationTable.setStatus('current')
unitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: unitConfigurationEntry.setStatus('current')
inletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCount.setStatus('current')
overCurrentProtectorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCount.setStatus('current')
outletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
inletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletControllerCount.setStatus('current')
outletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControllerCount.setStatus('current')
externalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setStatus('current')
pxIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxIPAddress.setStatus('deprecated')
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('deprecated')
gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('deprecated')
pxMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxMACAddress.setStatus('current')
utcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setStatus('current')
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('current')
networkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 14), NetworkInterfaceTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceType.setStatus('current')
externalSensorsZCoordinateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 34), ExternalSensorsZCoordinateUnitsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setStatus('current')
unitDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 35), Bits().clone(namedValues=NamedValues(("i1smpsStatus", 45), ("i2smpsStatus", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitDeviceCapabilities.setStatus('current')
outletSequencingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequencingDelay.setStatus('deprecated')
globalOutletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletPowerCyclingPowerOffPeriod.setStatus('current')
globalOutletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 38), GlobalOutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletStateOnStartup.setStatus('current')
outletPowerupSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerupSequence.setStatus('current')
pduPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPowerCyclingPowerOffPeriod.setStatus('current')
pduDaisychainMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 41), DaisychainMemberTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduDaisychainMemberType.setStatus('current')
managedExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedExternalSensorCount.setStatus('current')
pxInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 50), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetAddressType.setStatus('deprecated')
pxInetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 51), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetIPAddress.setStatus('deprecated')
pxInetNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetNetmask.setStatus('deprecated')
pxInetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 53), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetGateway.setStatus('deprecated')
loadShedding = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadShedding.setStatus('current')
serverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setStatus('current')
inrushGuardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inrushGuardDelay.setStatus('current')
cascadedDeviceConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 58), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cascadedDeviceConnected.setStatus('current')
synchronizeWithNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setStatus('current')
useDHCPProvidedNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setStatus('current')
firstNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 61), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddressType.setStatus('current')
firstNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 62), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddress.setStatus('current')
secondNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 63), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddressType.setStatus('current')
secondNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 64), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddress.setStatus('current')
wireCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCount.setStatus('deprecated')
transferSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCount.setStatus('current')
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 67), ProductTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
meteringControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringControllerCount.setStatus('current')
relayBehaviorOnPowerLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 69), RelayPowerLossBehaviorEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayBehaviorOnPowerLoss.setStatus('current')
deviceCascadeType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 70), DeviceCascadeTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceCascadeType.setStatus('current')
deviceCascadePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCascadePosition.setStatus('current')
peripheralDevicesAutoManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 72), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setStatus('current')
frontPanelOutletSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 73), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelOutletSwitching.setStatus('current')
frontPanelRCMSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelRCMSelfTest.setStatus('current')
frontPanelActuatorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelActuatorControl.setStatus('current')
circuitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitCount.setStatus('current')
activeDNSServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerCount.setStatus('current')
activeDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6), )
if mibBuilder.loadTexts: activeDNSServerTable.setStatus('current')
activeDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "activeDNSServerIndex"))
if mibBuilder.loadTexts: activeDNSServerEntry.setStatus('current')
activeDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: activeDNSServerIndex.setStatus('current')
activeDNSServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddressType.setStatus('current')
activeDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddress.setStatus('current')
activeDNSServerAddressSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 5), AddressSourceEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddressSource.setStatus('current')
controllerConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3), )
if mibBuilder.loadTexts: controllerConfigurationTable.setStatus('current')
controllerConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "boardType"), (0, "PDU2-MIB", "boardIndex"))
if mibBuilder.loadTexts: controllerConfigurationEntry.setStatus('current')
boardType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 1), BoardTypeEnumeration())
if mibBuilder.loadTexts: boardType.setStatus('current')
boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: boardIndex.setStatus('current')
boardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardVersion.setStatus('current')
boardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareVersion.setStatus('current')
boardFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareTimeStamp.setStatus('current')
logConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4), )
if mibBuilder.loadTexts: logConfigurationTable.setStatus('current')
logConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logConfigurationEntry.setStatus('current')
dataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setStatus('current')
measurementPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementPeriod.setStatus('current')
measurementsPerLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setStatus('current')
logSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSize.setStatus('current')
dataLoggingEnableForAllSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setStatus('current')
trapInformationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1), )
if mibBuilder.loadTexts: trapInformationTable.setStatus('current')
trapInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: trapInformationEntry.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
targetUser = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetUser.setStatus('current')
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
roleName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleName.setStatus('current')
smtpMessageRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpMessageRecipients.setStatus('current')
smtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServer.setStatus('current')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 2), SensorStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
pduNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pduNumber.setStatus('current')
inletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inletPoleNumber.setStatus('current')
outletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: outletPoleNumber.setStatus('current')
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorNumber.setStatus('current')
typeOfSensor = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 10), SensorTypeEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: typeOfSensor.setStatus('current')
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorDescription.setStatus('current')
deviceChangedParameter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 12), DeviceIdentificationParameterEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceChangedParameter.setStatus('current')
changedParameterNewValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: changedParameterNewValue.setStatus('current')
lhxSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 14), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lhxSupportEnabled.setStatus('current')
webcamModel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamModel.setStatus('current')
webcamConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamConnectionPort.setStatus('current')
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 18), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentInetPortNumber.setStatus('current')
peripheralDeviceRomcode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceRomcode.setStatus('current')
peripheralDeviceFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 20), PeripheralDeviceFirmwareUpdateStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setStatus('current')
circuitNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: circuitNumber.setStatus('current')
circuitPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: circuitPoleNumber.setStatus('current')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: phoneNumber.setStatus('current')
unitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5), )
if mibBuilder.loadTexts: unitSensorConfigurationTable.setStatus('current')
unitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorConfigurationEntry.setStatus('current')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 1), SensorTypeEnumeration())
if mibBuilder.loadTexts: sensorType.setStatus('current')
unitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLogAvailable.setStatus('current')
unitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorUnits.setStatus('current')
unitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorDecimalDigits.setStatus('current')
unitSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorAccuracy.setStatus('deprecated')
unitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorResolution.setStatus('current')
unitSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorTolerance.setStatus('deprecated')
unitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMaximum.setStatus('current')
unitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMinimum.setStatus('current')
unitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorHysteresis.setStatus('current')
unitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorStateChangeDelay.setStatus('current')
unitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerCriticalThreshold.setStatus('current')
unitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerWarningThreshold.setStatus('current')
unitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperCriticalThreshold.setStatus('current')
unitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperWarningThreshold.setStatus('current')
unitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorEnabledThresholds.setStatus('current')
unitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMaximum.setStatus('current')
unitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMinimum.setStatus('current')
unitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerCriticalThreshold.setStatus('current')
unitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerWarningThreshold.setStatus('current')
unitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperCriticalThreshold.setStatus('current')
unitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperWarningThreshold.setStatus('current')
inletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3), )
if mibBuilder.loadTexts: inletConfigurationTable.setStatus('current')
inletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: inletConfigurationEntry.setStatus('current')
inletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletId.setStatus('current')
inletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletLabel.setStatus('current')
inletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletName.setStatus('current')
inletPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 4), PlugTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlug.setStatus('current')
inletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCount.setStatus('current')
inletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVoltage.setStatus('current')
inletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedCurrent.setStatus('current')
inletRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedFrequency.setStatus('deprecated')
inletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVA.setStatus('deprecated')
inletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 25), ("rcmState", 26), ("reactivePower", 28), ("powerQuality", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletDeviceCapabilities.setStatus('current')
inletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("phaseAngle", 23), ("rmsVoltageLN", 24), ("reactivePower", 28), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCapabilities.setStatus('current')
inletPlugDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlugDescriptor.setStatus('current')
inletEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletEnableState.setStatus('current')
inletRCMResidualOperatingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletRCMResidualOperatingCurrent.setStatus('current')
inletPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5), )
if mibBuilder.loadTexts: inletPoleConfigurationTable.setStatus('current')
inletPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"))
if mibBuilder.loadTexts: inletPoleConfigurationEntry.setStatus('current')
inletPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1, 1), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleLine.setStatus('current')
inletPoleNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleNode.setStatus('current')
inletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4), )
if mibBuilder.loadTexts: inletSensorConfigurationTable.setStatus('current')
inletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorConfigurationEntry.setStatus('current')
inletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLogAvailable.setStatus('current')
inletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorUnits.setStatus('current')
inletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorDecimalDigits.setStatus('current')
inletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorAccuracy.setStatus('deprecated')
inletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorResolution.setStatus('current')
inletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorTolerance.setStatus('deprecated')
inletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMaximum.setStatus('current')
inletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMinimum.setStatus('current')
inletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorHysteresis.setStatus('current')
inletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorStateChangeDelay.setStatus('current')
inletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerCriticalThreshold.setStatus('current')
inletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerWarningThreshold.setStatus('current')
inletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperCriticalThreshold.setStatus('current')
inletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperWarningThreshold.setStatus('current')
inletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorEnabledThresholds.setStatus('current')
inletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMaximum.setStatus('current')
inletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMinimum.setStatus('current')
inletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerCriticalThreshold.setStatus('current')
inletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerWarningThreshold.setStatus('current')
inletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperCriticalThreshold.setStatus('current')
inletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperWarningThreshold.setStatus('current')
inletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6), )
if mibBuilder.loadTexts: inletPoleSensorConfigurationTable.setStatus('current')
inletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorConfigurationEntry.setStatus('current')
inletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletPoleIndex.setStatus('current')
inletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLogAvailable.setStatus('current')
inletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorUnits.setStatus('current')
inletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorDecimalDigits.setStatus('current')
inletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorAccuracy.setStatus('deprecated')
inletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorResolution.setStatus('current')
inletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorTolerance.setStatus('deprecated')
inletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMaximum.setStatus('current')
inletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMinimum.setStatus('current')
inletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorHysteresis.setStatus('current')
inletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorStateChangeDelay.setStatus('current')
inletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerCriticalThreshold.setStatus('current')
inletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerWarningThreshold.setStatus('current')
inletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperCriticalThreshold.setStatus('current')
inletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperWarningThreshold.setStatus('current')
inletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorEnabledThresholds.setStatus('current')
inletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMaximum.setStatus('current')
inletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMinimum.setStatus('current')
inletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerCriticalThreshold.setStatus('current')
inletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerWarningThreshold.setStatus('current')
inletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperCriticalThreshold.setStatus('current')
inletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperWarningThreshold.setStatus('current')
overCurrentProtectorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3), )
if mibBuilder.loadTexts: overCurrentProtectorConfigurationTable.setStatus('current')
overCurrentProtectorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"))
if mibBuilder.loadTexts: overCurrentProtectorConfigurationEntry.setStatus('current')
overCurrentProtectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: overCurrentProtectorIndex.setStatus('current')
overCurrentProtectorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorLabel.setStatus('current')
overCurrentProtectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorName.setStatus('current')
overCurrentProtectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 4), OverCurrentProtectorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorType.setStatus('current')
overCurrentProtectorRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorRatedCurrent.setStatus('current')
overCurrentProtectorPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleCount.setStatus('current')
overCurrentProtectorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 9), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("trip", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCapabilities.setStatus('current')
overCurrentProtectorPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPowerSource.setStatus('current')
overCurrentProtectorPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5), )
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationTable.setStatus('current')
overCurrentProtectorPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "overCurrentProtectorPoleIndex"))
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationEntry.setStatus('current')
overCurrentProtectorPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: overCurrentProtectorPoleIndex.setStatus('current')
overCurrentProtectorPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 2), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleLine.setStatus('current')
overCurrentProtectorPoleInNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleInNode.setStatus('current')
overCurrentProtectorPoleOutNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleOutNode.setStatus('current')
overCurrentProtectorSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4), )
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationTable.setStatus('current')
overCurrentProtectorSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationEntry.setStatus('current')
overCurrentProtectorSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLogAvailable.setStatus('current')
overCurrentProtectorSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorUnits.setStatus('current')
overCurrentProtectorSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorDecimalDigits.setStatus('current')
overCurrentProtectorSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorAccuracy.setStatus('deprecated')
overCurrentProtectorSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorResolution.setStatus('current')
overCurrentProtectorSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorTolerance.setStatus('deprecated')
overCurrentProtectorSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMaximum.setStatus('current')
overCurrentProtectorSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMinimum.setStatus('current')
overCurrentProtectorSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorHysteresis.setStatus('current')
overCurrentProtectorSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChangeDelay.setStatus('current')
overCurrentProtectorSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerCriticalThreshold.setStatus('current')
overCurrentProtectorSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerWarningThreshold.setStatus('current')
overCurrentProtectorSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperCriticalThreshold.setStatus('current')
overCurrentProtectorSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperWarningThreshold.setStatus('current')
overCurrentProtectorSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorEnabledThresholds.setStatus('current')
overCurrentProtectorSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMaximum.setStatus('current')
overCurrentProtectorSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMinimum.setStatus('current')
overCurrentProtectorSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerCriticalThreshold.setStatus('current')
overCurrentProtectorSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerWarningThreshold.setStatus('current')
overCurrentProtectorSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperCriticalThreshold.setStatus('current')
overCurrentProtectorSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperWarningThreshold.setStatus('current')
outletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3), )
if mibBuilder.loadTexts: outletConfigurationTable.setStatus('current')
outletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletConfigurationEntry.setStatus('current')
outletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletId.setStatus('current')
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLabel.setStatus('current')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
outletReceptacle = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 4), ReceptacleTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacle.setStatus('current')
outletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCount.setStatus('current')
outletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVoltage.setStatus('current')
outletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedCurrent.setStatus('current')
outletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVA.setStatus('current')
outletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("onOff", 13), ("frequency", 22), ("phaseAngle", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletDeviceCapabilities.setStatus('current')
outletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("rmsVoltageLN", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCapabilities.setStatus('current')
outletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerCyclingPowerOffPeriod.setStatus('current')
outletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 13), OutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletStateOnStartup.setStatus('current')
outletUseGlobalPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletUseGlobalPowerCyclingPowerOffPeriod.setStatus('current')
outletSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchable.setStatus('current')
outletReceptacleDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacleDescriptor.setStatus('current')
outletNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletNonCritical.setStatus('current')
outletSequenceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequenceDelay.setStatus('current')
outletPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 33), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerSource.setStatus('current')
outletPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5), )
if mibBuilder.loadTexts: outletPoleConfigurationTable.setStatus('current')
outletPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"))
if mibBuilder.loadTexts: outletPoleConfigurationEntry.setStatus('current')
outletPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1, 1), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleLine.setStatus('current')
outletPoleNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleNode.setStatus('current')
outletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4), )
if mibBuilder.loadTexts: outletSensorConfigurationTable.setStatus('current')
outletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorConfigurationEntry.setStatus('current')
outletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLogAvailable.setStatus('current')
outletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorUnits.setStatus('current')
outletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorDecimalDigits.setStatus('current')
outletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorAccuracy.setStatus('deprecated')
outletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorResolution.setStatus('current')
outletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorTolerance.setStatus('deprecated')
outletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMaximum.setStatus('current')
outletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMinimum.setStatus('current')
outletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorHysteresis.setStatus('current')
outletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorStateChangeDelay.setStatus('current')
outletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerCriticalThreshold.setStatus('current')
outletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerWarningThreshold.setStatus('current')
outletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperCriticalThreshold.setStatus('current')
outletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperWarningThreshold.setStatus('current')
outletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorEnabledThresholds.setStatus('current')
outletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMaximum.setStatus('current')
outletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMinimum.setStatus('current')
outletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerCriticalThreshold.setStatus('current')
outletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerWarningThreshold.setStatus('current')
outletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperCriticalThreshold.setStatus('current')
outletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperWarningThreshold.setStatus('current')
outletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6), )
if mibBuilder.loadTexts: outletPoleSensorConfigurationTable.setStatus('current')
outletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorConfigurationEntry.setStatus('current')
outletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletPoleIndex.setStatus('current')
outletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLogAvailable.setStatus('current')
outletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorUnits.setStatus('current')
outletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorDecimalDigits.setStatus('current')
outletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorAccuracy.setStatus('deprecated')
outletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorResolution.setStatus('current')
outletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorTolerance.setStatus('deprecated')
outletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMaximum.setStatus('current')
outletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMinimum.setStatus('current')
outletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorHysteresis.setStatus('current')
outletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorStateChangeDelay.setStatus('current')
outletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerCriticalThreshold.setStatus('current')
outletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerWarningThreshold.setStatus('current')
outletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperCriticalThreshold.setStatus('current')
outletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperWarningThreshold.setStatus('current')
outletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorEnabledThresholds.setStatus('current')
outletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMaximum.setStatus('current')
outletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMinimum.setStatus('current')
outletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerCriticalThreshold.setStatus('current')
outletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerWarningThreshold.setStatus('current')
outletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperCriticalThreshold.setStatus('current')
outletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperWarningThreshold.setStatus('current')
externalSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3), )
if mibBuilder.loadTexts: externalSensorConfigurationTable.setStatus('current')
externalSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setStatus('current')
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorID.setStatus('current')
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 2), SensorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setStatus('current')
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setStatus('current')
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setStatus('current')
externalSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorDescription.setStatus('current')
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setStatus('current')
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setStatus('current')
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setStatus('current')
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setStatus('current')
externalOnOffSensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 10), SensorTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setStatus('current')
externalSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLogAvailable.setStatus('current')
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 16), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setStatus('current')
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setStatus('current')
externalSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 18), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorAccuracy.setStatus('deprecated')
externalSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorResolution.setStatus('current')
externalSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorTolerance.setStatus('deprecated')
externalSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMaximum.setStatus('current')
externalSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMinimum.setStatus('current')
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setStatus('current')
externalSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setStatus('current')
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setStatus('current')
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setStatus('current')
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setStatus('current')
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setStatus('current')
externalSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 35), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setStatus('current')
externalSensorIsActuator = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorIsActuator.setStatus('current')
externalSensorPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorPosition.setStatus('current')
externalSensorUseDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setStatus('current')
externalSensorAlarmedToNormalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setStatus('current')
externalSensorTypeDefaultThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4), )
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setStatus('current')
externalSensorTypeDefaultThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setStatus('current')
externalSensorTypeDefaultHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setStatus('current')
externalSensorTypeDefaultStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setStatus('current')
externalSensorTypeDefaultLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setStatus('current')
externalSensorTypeDefaultLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setStatus('current')
externalSensorTypeDefaultUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setStatus('current')
externalSensorTypeDefaultUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setStatus('current')
externalSensorTypeDefaultEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 9), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setStatus('current')
serverReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3), )
if mibBuilder.loadTexts: serverReachabilityTable.setStatus('current')
serverReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "serverID"))
if mibBuilder.loadTexts: serverReachabilityEntry.setStatus('current')
serverID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: serverID.setStatus('current')
serverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIPAddress.setStatus('current')
serverPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPingEnabled.setStatus('current')
wireConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3), )
if mibBuilder.loadTexts: wireConfigurationTable.setStatus('deprecated')
wireConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"))
if mibBuilder.loadTexts: wireConfigurationEntry.setStatus('deprecated')
wireId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: wireId.setStatus('deprecated')
wireLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireLabel.setStatus('deprecated')
wireCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 3), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCapabilities.setStatus('deprecated')
wirePowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirePowerSource.setStatus('deprecated')
wireSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4), )
if mibBuilder.loadTexts: wireSensorConfigurationTable.setStatus('deprecated')
wireSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorConfigurationEntry.setStatus('deprecated')
wireSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLogAvailable.setStatus('deprecated')
wireSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorUnits.setStatus('deprecated')
wireSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorDecimalDigits.setStatus('deprecated')
wireSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorAccuracy.setStatus('deprecated')
wireSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorResolution.setStatus('deprecated')
wireSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorTolerance.setStatus('deprecated')
wireSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMaximum.setStatus('deprecated')
wireSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMinimum.setStatus('deprecated')
wireSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorHysteresis.setStatus('deprecated')
wireSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorStateChangeDelay.setStatus('deprecated')
wireSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerCriticalThreshold.setStatus('deprecated')
wireSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerWarningThreshold.setStatus('deprecated')
wireSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperCriticalThreshold.setStatus('deprecated')
wireSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperWarningThreshold.setStatus('deprecated')
wireSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorEnabledThresholds.setStatus('deprecated')
transferSwitchConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3), )
if mibBuilder.loadTexts: transferSwitchConfigurationTable.setStatus('current')
transferSwitchConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchConfigurationEntry.setStatus('current')
transferSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: transferSwitchId.setStatus('current')
transferSwitchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLabel.setStatus('current')
transferSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchName.setStatus('current')
transferSwitchPreferredInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPreferredInlet.setStatus('current')
transferSwitchPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleCount.setStatus('current')
transferSwitchAutoReTransferEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferEnabled.setStatus('current')
transferSwitchAutoReTransferWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferWaitTime.setStatus('current')
transferSwitchAutoReTransferRequiresPhaseSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferRequiresPhaseSync.setStatus('current')
transferSwitchFrontPanelManualTransferButtonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchFrontPanelManualTransferButtonEnabled.setStatus('current')
transferSwitchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 24), Bits().clone(namedValues=NamedValues(("overloadStatus", 32), ("inletPhaseSyncAngle", 37), ("inletPhaseSync", 38), ("operatingState", 39), ("activeInlet", 40), ("switchStatus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCapabilities.setStatus('current')
transferSwitchPowerSource1 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 31), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource1.setStatus('current')
transferSwitchPowerSource2 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 32), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource2.setStatus('current')
transferSwitchPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5), )
if mibBuilder.loadTexts: transferSwitchPoleConfigurationTable.setStatus('current')
transferSwitchPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "transferSwitchPoleIndex"))
if mibBuilder.loadTexts: transferSwitchPoleConfigurationEntry.setStatus('current')
transferSwitchPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: transferSwitchPoleIndex.setStatus('current')
transferSwitchPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 2), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleLine.setStatus('current')
transferSwitchPoleIn1Node = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleIn1Node.setStatus('current')
transferSwitchPoleIn2Node = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleIn2Node.setStatus('current')
transferSwitchPoleOutNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleOutNode.setStatus('current')
transferSwitchSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4), )
if mibBuilder.loadTexts: transferSwitchSensorConfigurationTable.setStatus('current')
transferSwitchSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorConfigurationEntry.setStatus('current')
transferSwitchSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLogAvailable.setStatus('current')
transferSwitchSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorUnits.setStatus('current')
transferSwitchSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorDecimalDigits.setStatus('current')
transferSwitchSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorAccuracy.setStatus('deprecated')
transferSwitchSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorResolution.setStatus('current')
transferSwitchSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorTolerance.setStatus('deprecated')
transferSwitchSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMaximum.setStatus('current')
transferSwitchSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMinimum.setStatus('current')
transferSwitchSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorHysteresis.setStatus('current')
transferSwitchSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorStateChangeDelay.setStatus('current')
transferSwitchSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerCriticalThreshold.setStatus('current')
transferSwitchSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerWarningThreshold.setStatus('current')
transferSwitchSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperCriticalThreshold.setStatus('current')
transferSwitchSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperWarningThreshold.setStatus('current')
transferSwitchSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorEnabledThresholds.setStatus('current')
transferSwitchSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMaximum.setStatus('current')
transferSwitchSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMinimum.setStatus('current')
transferSwitchSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerCriticalThreshold.setStatus('current')
transferSwitchSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerWarningThreshold.setStatus('current')
transferSwitchSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperCriticalThreshold.setStatus('current')
transferSwitchSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperWarningThreshold.setStatus('current')
powerMeterConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2), )
if mibBuilder.loadTexts: powerMeterConfigurationTable.setStatus('current')
powerMeterConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: powerMeterConfigurationEntry.setStatus('current')
powerMeterPhaseCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterPhaseCTRating.setStatus('current')
powerMeterNeutralCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterNeutralCTRating.setStatus('current')
powerMeterEarthCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterEarthCTRating.setStatus('current')
powerMeterBranchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterBranchCount.setStatus('current')
powerMeterPanelPositions = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelPositions.setStatus('current')
powerMeterPanelLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 7), PanelLayoutEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelLayout.setStatus('current')
powerMeterPanelNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 8), PanelNumberingEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelNumbering.setStatus('current')
powerMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 9), PowerMeterTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterType.setStatus('current')
circuitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2), )
if mibBuilder.loadTexts: circuitConfigurationTable.setStatus('current')
circuitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"))
if mibBuilder.loadTexts: circuitConfigurationEntry.setStatus('current')
circuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: circuitId.setStatus('current')
circuitPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleCount.setStatus('current')
circuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitName.setStatus('current')
circuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 4), CircuitTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitType.setStatus('current')
circuitRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitRatedCurrent.setStatus('current')
circuitCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitCTRating.setStatus('current')
circuitCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 7), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 25), ("rcmState", 26), ("reactivePower", 28), ("powerQuality", 31), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitCapabilities.setStatus('current')
circuitPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 8), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("phaseAngle", 23), ("rmsVoltageLN", 24), ("reactivePower", 28), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleCapabilities.setStatus('current')
circuitPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPowerSource.setStatus('current')
circuitPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3), )
if mibBuilder.loadTexts: circuitPoleConfigurationTable.setStatus('current')
circuitPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"))
if mibBuilder.loadTexts: circuitPoleConfigurationEntry.setStatus('current')
circuitPoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: circuitPoleId.setStatus('current')
circuitPolePanelPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPolePanelPosition.setStatus('current')
circuitPoleCTNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleCTNumber.setStatus('current')
circuitPolePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 4), PhaseEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPolePhase.setStatus('current')
circuitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4), )
if mibBuilder.loadTexts: circuitSensorConfigurationTable.setStatus('current')
circuitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorConfigurationEntry.setStatus('current')
circuitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLogAvailable.setStatus('current')
circuitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorUnits.setStatus('current')
circuitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorDecimalDigits.setStatus('current')
circuitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorResolution.setStatus('current')
circuitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorMaximum.setStatus('current')
circuitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorMinimum.setStatus('current')
circuitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorHysteresis.setStatus('current')
circuitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorStateChangeDelay.setStatus('current')
circuitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLowerCriticalThreshold.setStatus('current')
circuitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLowerWarningThreshold.setStatus('current')
circuitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorUpperCriticalThreshold.setStatus('current')
circuitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorUpperWarningThreshold.setStatus('current')
circuitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorEnabledThresholds.setStatus('current')
circuitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorSignedMaximum.setStatus('current')
circuitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorSignedMinimum.setStatus('current')
circuitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedLowerCriticalThreshold.setStatus('current')
circuitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedLowerWarningThreshold.setStatus('current')
circuitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedUpperCriticalThreshold.setStatus('current')
circuitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedUpperWarningThreshold.setStatus('current')
circuitPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6), )
if mibBuilder.loadTexts: circuitPoleSensorConfigurationTable.setStatus('current')
circuitPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitPoleSensorConfigurationEntry.setStatus('current')
circuitPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLogAvailable.setStatus('current')
circuitPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorUnits.setStatus('current')
circuitPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorDecimalDigits.setStatus('current')
circuitPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorResolution.setStatus('current')
circuitPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorMaximum.setStatus('current')
circuitPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorMinimum.setStatus('current')
circuitPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorHysteresis.setStatus('current')
circuitPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorStateChangeDelay.setStatus('current')
circuitPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLowerCriticalThreshold.setStatus('current')
circuitPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLowerWarningThreshold.setStatus('current')
circuitPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorUpperCriticalThreshold.setStatus('current')
circuitPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorUpperWarningThreshold.setStatus('current')
circuitPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorEnabledThresholds.setStatus('current')
circuitPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorSignedMaximum.setStatus('current')
circuitPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorSignedMinimum.setStatus('current')
circuitPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerCriticalThreshold.setStatus('current')
circuitPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerWarningThreshold.setStatus('current')
circuitPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperCriticalThreshold.setStatus('current')
circuitPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperWarningThreshold.setStatus('current')
peripheralDevicePackageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5), )
if mibBuilder.loadTexts: peripheralDevicePackageTable.setStatus('current')
peripheralDevicePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "peripheralDevicePackageId"))
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setStatus('current')
peripheralDevicePackageId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: peripheralDevicePackageId.setStatus('current')
peripheralDevicePackageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setStatus('current')
peripheralDevicePackageModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageModel.setStatus('current')
peripheralDevicePackageFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setStatus('current')
peripheralDevicePackageMinFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setStatus('current')
peripheralDevicePackageFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setStatus('current')
peripheralDevicePackagePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setStatus('current')
peripheralDevicePackageState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageState.setStatus('current')
logIndexTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1), )
if mibBuilder.loadTexts: logIndexTable.setStatus('current')
logIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logIndexEntry.setStatus('current')
oldestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldestLogID.setStatus('current')
newestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newestLogID.setStatus('current')
logTimeStampTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2), )
if mibBuilder.loadTexts: logTimeStampTable.setStatus('current')
logTimeStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: logTimeStampEntry.setStatus('current')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: logIndex.setStatus('current')
logTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTimeStamp.setStatus('current')
unitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3), )
if mibBuilder.loadTexts: unitSensorLogTable.setStatus('current')
unitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: unitSensorLogEntry.setStatus('current')
logUnitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorDataAvailable.setStatus('current')
logUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorState.setStatus('current')
logUnitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorAvgValue.setStatus('current')
logUnitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMaxValue.setStatus('current')
logUnitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMinValue.setStatus('current')
logUnitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedAvgValue.setStatus('current')
logUnitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMaxValue.setStatus('current')
logUnitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMinValue.setStatus('current')
inletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3), )
if mibBuilder.loadTexts: inletSensorLogTable.setStatus('current')
inletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletSensorLogEntry.setStatus('current')
logInletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorDataAvailable.setStatus('current')
logInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorState.setStatus('current')
logInletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorAvgValue.setStatus('current')
logInletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMaxValue.setStatus('current')
logInletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMinValue.setStatus('current')
logInletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedAvgValue.setStatus('current')
logInletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMaxValue.setStatus('current')
logInletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMinValue.setStatus('current')
inletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4), )
if mibBuilder.loadTexts: inletPoleSensorLogTable.setStatus('current')
inletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletPoleSensorLogEntry.setStatus('current')
logInletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorDataAvailable.setStatus('current')
logInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorState.setStatus('current')
logInletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorAvgValue.setStatus('current')
logInletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMaxValue.setStatus('current')
logInletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMinValue.setStatus('current')
logInletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedAvgValue.setStatus('current')
logInletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMaxValue.setStatus('current')
logInletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMinValue.setStatus('current')
outletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3), )
if mibBuilder.loadTexts: outletSensorLogTable.setStatus('current')
outletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletSensorLogEntry.setStatus('current')
logOutletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorDataAvailable.setStatus('current')
logOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorState.setStatus('current')
logOutletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorAvgValue.setStatus('current')
logOutletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMaxValue.setStatus('current')
logOutletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMinValue.setStatus('current')
logOutletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedAvgValue.setStatus('current')
logOutletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMaxValue.setStatus('current')
logOutletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMinValue.setStatus('current')
outletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4), )
if mibBuilder.loadTexts: outletPoleSensorLogTable.setStatus('current')
outletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletPoleSensorLogEntry.setStatus('current')
logOutletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorDataAvailable.setStatus('current')
logOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorState.setStatus('current')
logOutletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorAvgValue.setStatus('current')
logOutletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMaxValue.setStatus('current')
logOutletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMinValue.setStatus('current')
logOutletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedAvgValue.setStatus('current')
logOutletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMaxValue.setStatus('current')
logOutletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMinValue.setStatus('current')
overCurrentProtectorSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3), )
if mibBuilder.loadTexts: overCurrentProtectorSensorLogTable.setStatus('current')
overCurrentProtectorSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: overCurrentProtectorSensorLogEntry.setStatus('current')
logOverCurrentProtectorSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorDataAvailable.setStatus('current')
logOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorState.setStatus('current')
logOverCurrentProtectorSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorAvgValue.setStatus('current')
logOverCurrentProtectorSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMaxValue.setStatus('current')
logOverCurrentProtectorSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMinValue.setStatus('current')
logOverCurrentProtectorSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedAvgValue.setStatus('current')
logOverCurrentProtectorSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMaxValue.setStatus('current')
logOverCurrentProtectorSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMinValue.setStatus('current')
externalSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3), )
if mibBuilder.loadTexts: externalSensorLogTable.setStatus('current')
externalSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: externalSensorLogEntry.setStatus('current')
logExternalSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setStatus('current')
logExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorState.setStatus('current')
logExternalSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorAvgValue.setStatus('current')
logExternalSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMaxValue.setStatus('current')
logExternalSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMinValue.setStatus('current')
wireSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3), )
if mibBuilder.loadTexts: wireSensorLogTable.setStatus('deprecated')
wireSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: wireSensorLogEntry.setStatus('deprecated')
logWireSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorDataAvailable.setStatus('deprecated')
logWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorState.setStatus('deprecated')
logWireSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorAvgValue.setStatus('deprecated')
logWireSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMaxValue.setStatus('deprecated')
logWireSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMinValue.setStatus('deprecated')
transferSwitchSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3), )
if mibBuilder.loadTexts: transferSwitchSensorLogTable.setStatus('current')
transferSwitchSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: transferSwitchSensorLogEntry.setStatus('current')
logTransferSwitchSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorDataAvailable.setStatus('current')
logTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorState.setStatus('current')
logTransferSwitchSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorAvgValue.setStatus('current')
logTransferSwitchSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMaxValue.setStatus('current')
logTransferSwitchSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMinValue.setStatus('current')
logTransferSwitchSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedAvgValue.setStatus('current')
logTransferSwitchSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMaxValue.setStatus('current')
logTransferSwitchSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMinValue.setStatus('current')
circuitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3), )
if mibBuilder.loadTexts: circuitSensorLogTable.setStatus('current')
circuitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: circuitSensorLogEntry.setStatus('current')
logCircuitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorDataAvailable.setStatus('current')
logCircuitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorState.setStatus('current')
logCircuitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorAvgValue.setStatus('current')
logCircuitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorMaxValue.setStatus('current')
logCircuitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorMinValue.setStatus('current')
logCircuitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedAvgValue.setStatus('current')
logCircuitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedMaxValue.setStatus('current')
logCircuitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedMinValue.setStatus('current')
circuitPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5), )
if mibBuilder.loadTexts: circuitPoleSensorLogTable.setStatus('current')
circuitPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: circuitPoleSensorLogEntry.setStatus('current')
logCircuitPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorDataAvailable.setStatus('current')
logCircuitPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorState.setStatus('current')
logCircuitPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorAvgValue.setStatus('current')
logCircuitPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorMaxValue.setStatus('current')
logCircuitPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorMinValue.setStatus('current')
logCircuitPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedAvgValue.setStatus('current')
logCircuitPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMaxValue.setStatus('current')
logCircuitPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMinValue.setStatus('current')
unitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3), )
if mibBuilder.loadTexts: unitSensorMeasurementsTable.setStatus('current')
unitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorMeasurementsEntry.setStatus('current')
measurementsUnitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorIsAvailable.setStatus('current')
measurementsUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorState.setStatus('current')
measurementsUnitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorValue.setStatus('current')
measurementsUnitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorTimeStamp.setStatus('current')
measurementsUnitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorSignedValue.setStatus('current')
inletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3), )
if mibBuilder.loadTexts: inletSensorMeasurementsTable.setStatus('current')
inletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorMeasurementsEntry.setStatus('current')
measurementsInletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorIsAvailable.setStatus('current')
measurementsInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorState.setStatus('current')
measurementsInletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorValue.setStatus('current')
measurementsInletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorTimeStamp.setStatus('current')
measurementsInletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorSignedValue.setStatus('current')
inletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4), )
if mibBuilder.loadTexts: inletPoleSensorMeasurementsTable.setStatus('current')
inletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorMeasurementsEntry.setStatus('current')
measurementsInletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorIsAvailable.setStatus('current')
measurementsInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorState.setStatus('current')
measurementsInletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorValue.setStatus('current')
measurementsInletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorTimeStamp.setStatus('current')
measurementsInletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorSignedValue.setStatus('current')
outletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3), )
if mibBuilder.loadTexts: outletSensorMeasurementsTable.setStatus('current')
outletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorMeasurementsEntry.setStatus('current')
measurementsOutletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorIsAvailable.setStatus('current')
measurementsOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorState.setStatus('current')
measurementsOutletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorValue.setStatus('current')
measurementsOutletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorTimeStamp.setStatus('current')
measurementsOutletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorSignedValue.setStatus('current')
outletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4), )
if mibBuilder.loadTexts: outletPoleSensorMeasurementsTable.setStatus('current')
outletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorMeasurementsEntry.setStatus('current')
measurementsOutletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorIsAvailable.setStatus('current')
measurementsOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorState.setStatus('current')
measurementsOutletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorValue.setStatus('current')
measurementsOutletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorTimeStamp.setStatus('current')
measurementsOutletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorSignedValue.setStatus('current')
overCurrentProtectorSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3), )
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsTable.setStatus('current')
overCurrentProtectorSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsEntry.setStatus('current')
measurementsOverCurrentProtectorSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorIsAvailable.setStatus('current')
measurementsOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorState.setStatus('current')
measurementsOverCurrentProtectorSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorValue.setStatus('current')
measurementsOverCurrentProtectorSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorTimeStamp.setStatus('current')
measurementsOverCurrentProtectorSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorSignedValue.setStatus('current')
externalSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3), )
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setStatus('current')
externalSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setStatus('current')
measurementsExternalSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setStatus('current')
measurementsExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorState.setStatus('current')
measurementsExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorValue.setStatus('current')
measurementsExternalSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setStatus('current')
wireSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3), )
if mibBuilder.loadTexts: wireSensorMeasurementsTable.setStatus('deprecated')
wireSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorMeasurementsEntry.setStatus('deprecated')
measurementsWireSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorIsAvailable.setStatus('deprecated')
measurementsWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorState.setStatus('deprecated')
measurementsWireSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorValue.setStatus('deprecated')
measurementsWireSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorTimeStamp.setStatus('deprecated')
transferSwitchSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3), )
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsTable.setStatus('current')
transferSwitchSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsEntry.setStatus('current')
measurementsTransferSwitchSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorIsAvailable.setStatus('current')
measurementsTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorState.setStatus('current')
measurementsTransferSwitchSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorValue.setStatus('current')
measurementsTransferSwitchSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorTimeStamp.setStatus('current')
measurementsTransferSwitchSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorSignedValue.setStatus('current')
circuitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3), )
if mibBuilder.loadTexts: circuitSensorMeasurementsTable.setStatus('current')
circuitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorMeasurementsEntry.setStatus('current')
measurementsCircuitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorIsAvailable.setStatus('current')
measurementsCircuitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorState.setStatus('current')
measurementsCircuitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorValue.setStatus('current')
measurementsCircuitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorTimeStamp.setStatus('current')
measurementsCircuitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorSignedValue.setStatus('current')
circuitPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4), )
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsTable.setStatus('current')
circuitPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "circuitPoleId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsEntry.setStatus('current')
measurementsCircuitPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorIsAvailable.setStatus('current')
measurementsCircuitPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorState.setStatus('current')
measurementsCircuitPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorValue.setStatus('current')
measurementsCircuitPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorTimeStamp.setStatus('current')
measurementsCircuitPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorSignedValue.setStatus('current')
outletSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2), )
if mibBuilder.loadTexts: outletSwitchControlTable.setStatus('current')
outletSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletSwitchControlEntry.setStatus('current')
switchingOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 2), OutletSwitchingOperationsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchingOperation.setStatus('current')
outletSwitchingState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingState.setStatus('current')
outletSwitchingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingTimeStamp.setStatus('current')
transferSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1), )
if mibBuilder.loadTexts: transferSwitchControlTable.setStatus('current')
transferSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchControlEntry.setStatus('current')
transferSwitchActiveInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchActiveInlet.setStatus('current')
transferSwitchTransferToInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchTransferToInlet.setStatus('current')
transferSwitchAlarmOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAlarmOverride.setStatus('current')
transferSwitchLastTransferReason = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 4), TransferSwitchTransferReasonEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLastTransferReason.setStatus('current')
actuatorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2), )
if mibBuilder.loadTexts: actuatorControlTable.setStatus('current')
actuatorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: actuatorControlEntry.setStatus('current')
actuatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actuatorState.setStatus('current')
rcmSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2), )
if mibBuilder.loadTexts: rcmSelfTestTable.setStatus('current')
rcmSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: rcmSelfTestEntry.setStatus('current')
rcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcmState.setStatus('current')
inletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1), )
if mibBuilder.loadTexts: inletSensorControlTable.setStatus('current')
inletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorControlEntry.setStatus('current')
inletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorResetValue.setStatus('current')
outletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1), )
if mibBuilder.loadTexts: outletSensorControlTable.setStatus('current')
outletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorControlEntry.setStatus('current')
outletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorResetValue.setStatus('current')
unitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1), )
if mibBuilder.loadTexts: unitSensorControlTable.setStatus('current')
unitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorControlEntry.setStatus('current')
unitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorResetValue.setStatus('current')
circuitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1), )
if mibBuilder.loadTexts: circuitSensorControlTable.setStatus('current')
circuitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1, 1), ).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "circuitId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorControlEntry.setStatus('current')
circuitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorResetValue.setStatus('current')
reliabilityDataTableSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataTableSequenceNumber.setStatus('current')
reliabilityDataTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2), )
if mibBuilder.loadTexts: reliabilityDataTable.setStatus('current')
reliabilityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1), ).setIndexNames((0, "PDU2-MIB", "reliabilityIndex"))
if mibBuilder.loadTexts: reliabilityDataEntry.setStatus('current')
reliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: reliabilityIndex.setStatus('current')
reliabilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityId.setStatus('current')
reliabilityDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataValue.setStatus('current')
reliabilityDataMaxPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataMaxPossible.setStatus('current')
reliabilityDataWorstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataWorstValue.setStatus('current')
reliabilityDataThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataThreshold.setStatus('current')
reliabilityDataRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawUpperBytes.setStatus('current')
reliabilityDataRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawLowerBytes.setStatus('current')
reliabilityDataFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 9), Bits().clone(namedValues=NamedValues(("invalidFlag", 0), ("oldValue", 1), ("criticalEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataFlags.setStatus('current')
reliabilityErrorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2), )
if mibBuilder.loadTexts: reliabilityErrorLogTable.setStatus('current')
reliabilityErrorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1), ).setIndexNames((0, "PDU2-MIB", "reliabilityErrorLogIndex"))
if mibBuilder.loadTexts: reliabilityErrorLogEntry.setStatus('current')
reliabilityErrorLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: reliabilityErrorLogIndex.setStatus('current')
reliabilityErrorLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogId.setStatus('current')
reliabilityErrorLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogValue.setStatus('current')
reliabilityErrorLogThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogThreshold.setStatus('current')
reliabilityErrorLogRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawUpperBytes.setStatus('current')
reliabilityErrorLogRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawLowerBytes.setStatus('current')
reliabilityErrorLogPOH = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogPOH.setStatus('current')
reliabilityErrorLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogTime.setStatus('current')
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 1)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemStarted.setStatus('current')
systemReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 2)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemReset.setStatus('current')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 3)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 4)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 5)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 8)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 11)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 12)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userModified.setStatus('current')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 13)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 14)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleAdded.setStatus('current')
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 15)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleModified.setStatus('current')
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 16)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleDeleted.setStatus('current')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 20)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 21)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateCompleted.setStatus('current')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 22)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 23)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "switchingOperation"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: powerControl.setStatus('current')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 24)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 28)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 38)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 41)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 53)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: bulkConfigurationSaved.setStatus('current')
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 54)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: bulkConfigurationCopied.setStatus('current')
pduSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 60)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pduSensorStateChange.setStatus('deprecated')
inletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 61)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("PDU2-MIB", "measurementsInletSensorValue"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "measurementsInletSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: inletSensorStateChange.setStatus('current')
inletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 62)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: inletPoleSensorStateChange.setStatus('current')
outletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 63)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: outletSensorStateChange.setStatus('current')
outletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 64)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: outletPoleSensorStateChange.setStatus('current')
overCurrentProtectorSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 65)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChange.setStatus('current')
externalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 66)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "externalSensorChannelNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: externalSensorStateChange.setStatus('current')
smtpMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 67)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "smtpServer"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setStatus('current')
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 68)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: ldapError.setStatus('current')
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 70)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateFailed.setStatus('current')
loadSheddingModeEntered = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 71)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: loadSheddingModeEntered.setStatus('current')
loadSheddingModeExited = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 72)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: loadSheddingModeExited.setStatus('current')
pingServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 73)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pingServerEnabled.setStatus('current')
pingServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 74)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pingServerDisabled.setStatus('current')
serverNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 75)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverNotReachable.setStatus('current')
serverReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 76)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverReachable.setStatus('current')
rfCodeTagConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 77)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: rfCodeTagConnected.setStatus('current')
rfCodeTagDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 78)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: rfCodeTagDisconnected.setStatus('current')
deviceIdentificationChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 79)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "deviceChangedParameter"), ("PDU2-MIB", "changedParameterNewValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceIdentificationChanged.setStatus('current')
usbSlaveConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 80)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: usbSlaveConnected.setStatus('current')
usbSlaveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 81)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: usbSlaveDisconnected.setStatus('current')
lhxSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 82)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "lhxSupportEnabled"))
if mibBuilder.loadTexts: lhxSupportChanged.setStatus('current')
userAcceptedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 83)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setStatus('current')
userDeclinedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 84)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setStatus('current')
wireSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 85)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: wireSensorStateChange.setStatus('deprecated')
transferSwitchSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 86)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("PDU2-MIB", "transferSwitchLastTransferReason"))
if mibBuilder.loadTexts: transferSwitchSensorStateChange.setStatus('current')
deviceSettingsSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 88)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceSettingsSaved.setStatus('current')
deviceSettingsRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 89)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceSettingsRestored.setStatus('current')
webcamInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 90)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: webcamInserted.setStatus('current')
webcamRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 91)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: webcamRemoved.setStatus('current')
inletEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 92)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: inletEnabled.setStatus('current')
inletDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 93)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: inletDisabled.setStatus('current')
serverConnectivityUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 94)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setStatus('current')
radiusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 95)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: radiusError.setStatus('current')
serverReachabilityError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 96)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverReachabilityError.setStatus('current')
inletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 97)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: inletSensorReset.setStatus('current')
outletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 98)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: outletSensorReset.setStatus('current')
unknownPeripheralDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 99)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("PDU2-MIB", "peripheralDevicePackagePosition"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setStatus('current')
peripheralDeviceFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 100)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setStatus('current')
unitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 101)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: unitSensorReset.setStatus('current')
unitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 102)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: unitSensorStateChange.setStatus('current')
circuitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 103)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsCircuitSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitSensorValue"), ("PDU2-MIB", "measurementsCircuitSensorState"), ("PDU2-MIB", "measurementsCircuitSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: circuitSensorStateChange.setStatus('current')
circuitPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 104)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitPoleNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsCircuitPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsCircuitPoleSensorValue"), ("PDU2-MIB", "measurementsCircuitPoleSensorState"), ("PDU2-MIB", "measurementsCircuitPoleSensorSignedValue"), ("PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: circuitPoleSensorStateChange.setStatus('current')
circuitAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 105)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("PDU2-MIB", "circuitRatedCurrent"), ("PDU2-MIB", "circuitCTRating"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: circuitAdded.setStatus('current')
circuitDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 106)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: circuitDeleted.setStatus('current')
circuitModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 107)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "circuitName"), ("PDU2-MIB", "circuitType"), ("PDU2-MIB", "circuitRatedCurrent"), ("PDU2-MIB", "circuitCTRating"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: circuitModified.setStatus('current')
circuitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 108)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "circuitNumber"), ("PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: circuitSensorReset.setStatus('current')
powerMeterAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 109)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "powerMeterPhaseCTRating"), ("PDU2-MIB", "powerMeterNeutralCTRating"), ("PDU2-MIB", "powerMeterEarthCTRating"), ("PDU2-MIB", "powerMeterPanelPositions"), ("PDU2-MIB", "powerMeterPanelLayout"), ("PDU2-MIB", "powerMeterPanelNumbering"), ("PDU2-MIB", "powerMeterType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: powerMeterAdded.setStatus('current')
powerMeterDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 110)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "powerMeterType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: powerMeterDeleted.setStatus('current')
powerMeterModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 111)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "powerMeterPhaseCTRating"), ("PDU2-MIB", "powerMeterNeutralCTRating"), ("PDU2-MIB", "powerMeterEarthCTRating"), ("PDU2-MIB", "powerMeterType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: powerMeterModified.setStatus('current')
smsMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 112)).setObjects(("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "phoneNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: smsMessageTransmissionFailure.setStatus('current')
mibBuilder.exportSymbols("PDU2-MIB", userDeclinedRestrictedServiceAgreement=userDeclinedRestrictedServiceAgreement, circuitPoleSensorConfigurationEntry=circuitPoleSensorConfigurationEntry, overCurrentProtectorName=overCurrentProtectorName, externalSensorStateChange=externalSensorStateChange, transferSwitchSensorLowerWarningThreshold=transferSwitchSensorLowerWarningThreshold, powerMeterConfigurationTable=powerMeterConfigurationTable, overCurrentProtectorSensorConfigurationEntry=overCurrentProtectorSensorConfigurationEntry, inletSensorControlEntry=inletSensorControlEntry, ReceptacleTypeEnumeration=ReceptacleTypeEnumeration, pduManufacturer=pduManufacturer, measurementPeriod=measurementPeriod, logExternalSensorState=logExternalSensorState, logCircuitSensorState=logCircuitSensorState, OutletStateOnStartupEnumeration=OutletStateOnStartupEnumeration, circuitType=circuitType, outletSwitchControlTable=outletSwitchControlTable, unitSensorStateChangeDelay=unitSensorStateChangeDelay, inletSensorSignedLowerCriticalThreshold=inletSensorSignedLowerCriticalThreshold, inletSensorSignedUpperCriticalThreshold=inletSensorSignedUpperCriticalThreshold, overCurrentProtectorSensorMaximum=overCurrentProtectorSensorMaximum, transferSwitchSensorLowerCriticalThreshold=transferSwitchSensorLowerCriticalThreshold, outletSensorResetValue=outletSensorResetValue, transferSwitchSensorLogEntry=transferSwitchSensorLogEntry, configGroup=configGroup, logGroup=logGroup, inletRatedCurrent=inletRatedCurrent, GlobalOutletStateOnStartupEnumeration=GlobalOutletStateOnStartupEnumeration, wireSensorConfigurationTable=wireSensorConfigurationTable, unitConfigurationTable=unitConfigurationTable, serverNotReachable=serverNotReachable, outletSensorResolution=outletSensorResolution, unitSensorUpperCriticalThreshold=unitSensorUpperCriticalThreshold, reliabilityErrorLogId=reliabilityErrorLogId, pxInetGateway=pxInetGateway, pduSerialNumber=pduSerialNumber, outletSensorTolerance=outletSensorTolerance, inletSensorLogTable=inletSensorLogTable, logTimeStampEntry=logTimeStampEntry, circuitSensorLogTable=circuitSensorLogTable, externalSensorResolution=externalSensorResolution, inletRatedVoltage=inletRatedVoltage, unitSensorResetValue=unitSensorResetValue, pduRatedVoltage=pduRatedVoltage, reliabilityDataTable=reliabilityDataTable, overCurrentProtectorSensorLogEntry=overCurrentProtectorSensorLogEntry, measurementsCircuitSensorValue=measurementsCircuitSensorValue, outletPoleSensorUpperWarningThreshold=outletPoleSensorUpperWarningThreshold, externalSensorConfigurationEntry=externalSensorConfigurationEntry, overCurrentProtectorConfigurationEntry=overCurrentProtectorConfigurationEntry, boardIndex=boardIndex, wireSensorLowerWarningThreshold=wireSensorLowerWarningThreshold, outletPoleSensorMeasurementsTable=outletPoleSensorMeasurementsTable, outletSensorStateChange=outletSensorStateChange, inletSensorConfigurationTable=inletSensorConfigurationTable, log=log, unitSensorSignedUpperCriticalThreshold=unitSensorSignedUpperCriticalThreshold, rfCodeTagConnected=rfCodeTagConnected, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, measurementsOutletSensorTimeStamp=measurementsOutletSensorTimeStamp, overCurrentProtectorSensorLowerCriticalThreshold=overCurrentProtectorSensorLowerCriticalThreshold, logSize=logSize, logCircuitPoleSensorDataAvailable=logCircuitPoleSensorDataAvailable, changedParameterNewValue=changedParameterNewValue, reliabilityDataValue=reliabilityDataValue, circuitPoleSensorMeasurementsTable=circuitPoleSensorMeasurementsTable, inletPoleSensorLogEntry=inletPoleSensorLogEntry, measurements=measurements, overCurrentProtectorSensorSignedUpperWarningThreshold=overCurrentProtectorSensorSignedUpperWarningThreshold, measurementsOverCurrentProtectorSensorIsAvailable=measurementsOverCurrentProtectorSensorIsAvailable, oldLogGroup=oldLogGroup, powerMeterPanelPositions=powerMeterPanelPositions, deviceChangedParameter=deviceChangedParameter, unitSensorAccuracy=unitSensorAccuracy, transferSwitchName=transferSwitchName, logOutletSensorSignedAvgValue=logOutletSensorSignedAvgValue, overCurrentProtectorSensorUnits=overCurrentProtectorSensorUnits, wireSensorMeasurementsEntry=wireSensorMeasurementsEntry, outletPoleSensorMinimum=outletPoleSensorMinimum, activeDNSServerEntry=activeDNSServerEntry, inletSensorResetValue=inletSensorResetValue, peripheralDeviceFirmwareUpdateState=peripheralDeviceFirmwareUpdateState, powerMeterPhaseCTRating=powerMeterPhaseCTRating, outletConfigurationEntry=outletConfigurationEntry, reliabilityDataFlags=reliabilityDataFlags, externalSensorEnabledThresholds=externalSensorEnabledThresholds, outletSensorUpperCriticalThreshold=outletSensorUpperCriticalThreshold, measurementsUnitSensorSignedValue=measurementsUnitSensorSignedValue, outletSensorLogEntry=outletSensorLogEntry, inletEnabled=inletEnabled, transferSwitchSensorStateChangeDelay=transferSwitchSensorStateChangeDelay, circuitPoleSensorSignedUpperWarningThreshold=circuitPoleSensorSignedUpperWarningThreshold, measurementsOutletPoleSensorTimeStamp=measurementsOutletPoleSensorTimeStamp, logTransferSwitch=logTransferSwitch, outletCount=outletCount, logOverCurrentProtectorSensorDataAvailable=logOverCurrentProtectorSensorDataAvailable, circuitSensorMeasurementsEntry=circuitSensorMeasurementsEntry, outletRatedVA=outletRatedVA, logOutletPoleSensorSignedMaxValue=logOutletPoleSensorSignedMaxValue, rcmSelfTestEntry=rcmSelfTestEntry, logInletPoleSensorMaxValue=logInletPoleSensorMaxValue, inletSensorLogEntry=inletSensorLogEntry, inletPoleSensorSignedMinimum=inletPoleSensorSignedMinimum, transferSwitchPoleConfigurationEntry=transferSwitchPoleConfigurationEntry, transferSwitchSensorSignedLowerWarningThreshold=transferSwitchSensorSignedLowerWarningThreshold, AddressSourceEnumeration=AddressSourceEnumeration, boardFirmwareTimeStamp=boardFirmwareTimeStamp, logOutlet=logOutlet, roleName=roleName, reliabilityId=reliabilityId, circuitSensorSignedLowerWarningThreshold=circuitSensorSignedLowerWarningThreshold, overCurrentProtectorSensorDecimalDigits=overCurrentProtectorSensorDecimalDigits, overCurrentProtectorSensorTolerance=overCurrentProtectorSensorTolerance, dataLogging=dataLogging, circuitSensorHysteresis=circuitSensorHysteresis, overCurrentProtectorSensorSignedMinimum=overCurrentProtectorSensorSignedMinimum, conformance=conformance, circuitPoleSensorSignedLowerCriticalThreshold=circuitPoleSensorSignedLowerCriticalThreshold, bulkConfigurationCopied=bulkConfigurationCopied, logCircuitSensorSignedMaxValue=logCircuitSensorSignedMaxValue, gateway=gateway, circuitSensorSignedMinimum=circuitSensorSignedMinimum, reliabilityDataWorstValue=reliabilityDataWorstValue, imageVersion=imageVersion, serverConnectivityUnrecoverable=serverConnectivityUnrecoverable, trapInformation=trapInformation, logExternalSensorMinValue=logExternalSensorMinValue, powerMeterModified=powerMeterModified, inletPoleNode=inletPoleNode, smsMessageTransmissionFailure=smsMessageTransmissionFailure, outletPoleSensorStateChange=outletPoleSensorStateChange, phoneNumber=phoneNumber, transferSwitchSensorHysteresis=transferSwitchSensorHysteresis, inletSensorUpperWarningThreshold=inletSensorUpperWarningThreshold, circuitPoleConfigurationTable=circuitPoleConfigurationTable, externalSensorMinimum=externalSensorMinimum, logCircuitPoleSensorMinValue=logCircuitPoleSensorMinValue, circuitPoleSensorUpperCriticalThreshold=circuitPoleSensorUpperCriticalThreshold, inletPoleSensorUpperCriticalThreshold=inletPoleSensorUpperCriticalThreshold, outletSensorSignedUpperWarningThreshold=outletSensorSignedUpperWarningThreshold, overCurrentProtectorSensorLogAvailable=overCurrentProtectorSensorLogAvailable, inletSensorTolerance=inletSensorTolerance, inletRCMResidualOperatingCurrent=inletRCMResidualOperatingCurrent, measurementsExternalSensorValue=measurementsExternalSensorValue, reliabilityGroup=reliabilityGroup, externalSensorSerialNumber=externalSensorSerialNumber, outletSensorControl=outletSensorControl, reliabilityErrorLogPOH=reliabilityErrorLogPOH, transferSwitchSensorLogTable=transferSwitchSensorLogTable, logInletSensorSignedMinValue=logInletSensorSignedMinValue, boardFirmwareVersion=boardFirmwareVersion, outletPoleSensorUpperCriticalThreshold=outletPoleSensorUpperCriticalThreshold, circuitSensorControlTable=circuitSensorControlTable, inletPoleSensorMaximum=inletPoleSensorMaximum, circuitSensorSignedLowerCriticalThreshold=circuitSensorSignedLowerCriticalThreshold, unitSensorSignedUpperWarningThreshold=unitSensorSignedUpperWarningThreshold, inletSensorUnits=inletSensorUnits, pduSensorStateChange=pduSensorStateChange, logWireSensorMaxValue=logWireSensorMaxValue, transferSwitchSensorSignedUpperWarningThreshold=transferSwitchSensorSignedUpperWarningThreshold, outletPoleSensorLowerWarningThreshold=outletPoleSensorLowerWarningThreshold, netmask=netmask, powerMeterDeleted=powerMeterDeleted, logOutletPoleSensorMaxValue=logOutletPoleSensorMaxValue, errorDescription=errorDescription, userLogin=userLogin, inletSensorMinimum=inletSensorMinimum, logTransferSwitchSensorMaxValue=logTransferSwitchSensorMaxValue, logTransferSwitchSensorSignedMinValue=logTransferSwitchSensorSignedMinValue, deviceUpdateCompleted=deviceUpdateCompleted, externalSensorNumber=externalSensorNumber, userAdded=userAdded, circuitPoleCapabilities=circuitPoleCapabilities, logOutletSensorDataAvailable=logOutletSensorDataAvailable, sensorType=sensorType, inletPoleSensorLogAvailable=inletPoleSensorLogAvailable, unitSensorMeasurementsEntry=unitSensorMeasurementsEntry, logTransferSwitchSensorMinValue=logTransferSwitchSensorMinValue, overCurrentProtectorPoleConfigurationEntry=overCurrentProtectorPoleConfigurationEntry, rcmControl=rcmControl, measurementsCircuitPoleSensorValue=measurementsCircuitPoleSensorValue, externalSensorHysteresis=externalSensorHysteresis, trapInformationTable=trapInformationTable, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, logInletSensorDataAvailable=logInletSensorDataAvailable, meteringControllerCount=meteringControllerCount, externalSensorUnits=externalSensorUnits, transferSwitchSensorSignedLowerCriticalThreshold=transferSwitchSensorSignedLowerCriticalThreshold, powerMeterConfigurationEntry=powerMeterConfigurationEntry, measurementsInletSensorValue=measurementsInletSensorValue, targetUser=targetUser, outletReceptacle=outletReceptacle, outletPoleSensorConfigurationTable=outletPoleSensorConfigurationTable, unitSensorHysteresis=unitSensorHysteresis, wireSensorStateChangeDelay=wireSensorStateChangeDelay, powerMeterType=powerMeterType, overCurrentProtectorSensorAccuracy=overCurrentProtectorSensorAccuracy, inletSensorUpperCriticalThreshold=inletSensorUpperCriticalThreshold, externalSensorTypeDefaultHysteresis=externalSensorTypeDefaultHysteresis, peripheralDeviceRomcode=peripheralDeviceRomcode, transferSwitchSensorConfigurationTable=transferSwitchSensorConfigurationTable, logCircuit=logCircuit, circuitPoleSensorConfigurationTable=circuitPoleSensorConfigurationTable, overCurrentProtectorSensorMeasurementsEntry=overCurrentProtectorSensorMeasurementsEntry, measurementsCircuitSensorState=measurementsCircuitSensorState, externalSensorTypeDefaultStateChangeDelay=externalSensorTypeDefaultStateChangeDelay, powerMeterNeutralCTRating=powerMeterNeutralCTRating, wireSensorLowerCriticalThreshold=wireSensorLowerCriticalThreshold, SensorTypeEnumeration=SensorTypeEnumeration, wireCapabilities=wireCapabilities, relayBehaviorOnPowerLoss=relayBehaviorOnPowerLoss, circuitPoleSensorUnits=circuitPoleSensorUnits, logOutletSensorMaxValue=logOutletSensorMaxValue, logTimeStamp=logTimeStamp, outletPoleIndex=outletPoleIndex, measurementsOutletSensorIsAvailable=measurementsOutletSensorIsAvailable, transferSwitchLabel=transferSwitchLabel, roleAdded=roleAdded, circuitPoleSensorResolution=circuitPoleSensorResolution, overCurrentProtectorIndex=overCurrentProtectorIndex, unitSensorControlTable=unitSensorControlTable, wireConfigurationTable=wireConfigurationTable, measurementsTransferSwitch=measurementsTransferSwitch, measurementsOutlet=measurementsOutlet, measurementsInletPoleSensorIsAvailable=measurementsInletPoleSensorIsAvailable, LineEnumeration=LineEnumeration, transferSwitchPoleIndex=transferSwitchPoleIndex, circuitId=circuitId, circuitSensorLogAvailable=circuitSensorLogAvailable, logExternalSensorDataAvailable=logExternalSensorDataAvailable, overCurrentProtectorCount=overCurrentProtectorCount, externalSensorMaximum=externalSensorMaximum, transferSwitchSensorMaximum=transferSwitchSensorMaximum, outletPoleSensorLogTable=outletPoleSensorLogTable, PhaseEnumeration=PhaseEnumeration, firstNTPServerAddress=firstNTPServerAddress, inletSensorMeasurementsTable=inletSensorMeasurementsTable, circuitSensorSignedUpperCriticalThreshold=circuitSensorSignedUpperCriticalThreshold, logExternalSensorMaxValue=logExternalSensorMaxValue, userAuthenticationFailure=userAuthenticationFailure, overCurrentProtectorSensorMinimum=overCurrentProtectorSensorMinimum, circuitPolePanelPosition=circuitPolePanelPosition, smtpMessageTransmissionFailure=smtpMessageTransmissionFailure, serverPingEnabled=serverPingEnabled, environmental=environmental, peripheralDevicePackagePosition=peripheralDevicePackagePosition, webcamConnectionPort=webcamConnectionPort, transferSwitchSensorConfigurationEntry=transferSwitchSensorConfigurationEntry, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, outletSensorEnabledThresholds=outletSensorEnabledThresholds, pingServerDisabled=pingServerDisabled, reliabilityDataThreshold=reliabilityDataThreshold, reliabilityErrorLogThreshold=reliabilityErrorLogThreshold, outletPoleSensorSignedLowerCriticalThreshold=outletPoleSensorSignedLowerCriticalThreshold, transferSwitchAutoReTransferWaitTime=transferSwitchAutoReTransferWaitTime)
mibBuilder.exportSymbols("PDU2-MIB", transferSwitchSensorLogAvailable=transferSwitchSensorLogAvailable, pxInetAddressType=pxInetAddressType, externalSensorPosition=externalSensorPosition, measurementsOutletPoleSensorState=measurementsOutletPoleSensorState, pduPowerCyclingPowerOffPeriod=pduPowerCyclingPowerOffPeriod, circuitSensorConfigurationEntry=circuitSensorConfigurationEntry, circuitPoleSensorLogTable=circuitPoleSensorLogTable, externalSensorDescription=externalSensorDescription, externalSensorZCoordinate=externalSensorZCoordinate, circuitSensorMaximum=circuitSensorMaximum, inletPoleSensorStateChangeDelay=inletPoleSensorStateChangeDelay, overCurrentProtectorLabel=overCurrentProtectorLabel, inletSensorSignedMaximum=inletSensorSignedMaximum, activeDNSServerTable=activeDNSServerTable, peripheralDevicePackageFirmwareTimeStamp=peripheralDevicePackageFirmwareTimeStamp, externalSensorXCoordinate=externalSensorXCoordinate, measurementsOutletSensorState=measurementsOutletSensorState, SensorUnitsEnumeration=SensorUnitsEnumeration, circuitRatedCurrent=circuitRatedCurrent, outletPoleSensorStateChangeDelay=outletPoleSensorStateChangeDelay, usbSlaveDisconnected=usbSlaveDisconnected, logTransferSwitchSensorSignedAvgValue=logTransferSwitchSensorSignedAvgValue, transferSwitchSensorAccuracy=transferSwitchSensorAccuracy, logCircuitPoleSensorSignedMaxValue=logCircuitPoleSensorSignedMaxValue, circuitModified=circuitModified, measurementsInletPoleSensorValue=measurementsInletPoleSensorValue, transferSwitchPreferredInlet=transferSwitchPreferredInlet, transferSwitchTransferToInlet=transferSwitchTransferToInlet, logUnitSensorSignedMinValue=logUnitSensorSignedMinValue, circuitPoleCount=circuitPoleCount, outletSensorConfigurationTable=outletSensorConfigurationTable, measurementsTransferSwitchSensorState=measurementsTransferSwitchSensorState, DeviceCascadeTypeEnumeration=DeviceCascadeTypeEnumeration, circuitSensorResetValue=circuitSensorResetValue, logInletPoleSensorMinValue=logInletPoleSensorMinValue, wires=wires, rcmState=rcmState, circuitPoleSensorSignedLowerWarningThreshold=circuitPoleSensorSignedLowerWarningThreshold, PlugTypeEnumeration=PlugTypeEnumeration, circuitSensorControlEntry=circuitSensorControlEntry, logOverCurrentProtectorSensorState=logOverCurrentProtectorSensorState, synchronizeWithNTPServer=synchronizeWithNTPServer, inletConfigurationTable=inletConfigurationTable, externalSensorAlarmedToNormalDelay=externalSensorAlarmedToNormalDelay, reliabilityDataTableSequenceNumber=reliabilityDataTableSequenceNumber, externalSensorMeasurementsEntry=externalSensorMeasurementsEntry, PanelLayoutEnumeration=PanelLayoutEnumeration, transferSwitchId=transferSwitchId, inletRatedFrequency=inletRatedFrequency, transferSwitchSensorSignedUpperCriticalThreshold=transferSwitchSensorSignedUpperCriticalThreshold, outletPoleConfigurationEntry=outletPoleConfigurationEntry, OutletSwitchingOperationsEnumeration=OutletSwitchingOperationsEnumeration, activeDNSServerCount=activeDNSServerCount, overCurrentProtectorPoleIndex=overCurrentProtectorPoleIndex, pxInetIPAddress=pxInetIPAddress, inletSensorReset=inletSensorReset, inletPoleSensorMinimum=inletPoleSensorMinimum, actuatorState=actuatorState, inletSensorLogAvailable=inletSensorLogAvailable, oldestLogID=oldestLogID, powerMeter=powerMeter, inletControllerCount=inletControllerCount, unitSensorSignedMaximum=unitSensorSignedMaximum, inletPoleCount=inletPoleCount, inletPlugDescriptor=inletPlugDescriptor, circuitSensorLowerCriticalThreshold=circuitSensorLowerCriticalThreshold, logOverCurrentProtectorSensorMaxValue=logOverCurrentProtectorSensorMaxValue, externalSensorLogEntry=externalSensorLogEntry, circuitPoleSensorMaximum=circuitPoleSensorMaximum, unknownPeripheralDeviceAttached=unknownPeripheralDeviceAttached, transferSwitch=transferSwitch, externalSensorCount=externalSensorCount, utcOffset=utcOffset, inletEnableState=inletEnableState, overCurrentProtectorPoleLine=overCurrentProtectorPoleLine, wireSensorTolerance=wireSensorTolerance, unitSensorResolution=unitSensorResolution, inletPoleSensorLogTable=inletPoleSensorLogTable, logOutletPoleSensorAvgValue=logOutletPoleSensorAvgValue, control=control, measurementsExternalSensorTimeStamp=measurementsExternalSensorTimeStamp, measurementsWireSensorIsAvailable=measurementsWireSensorIsAvailable, unitSensorReset=unitSensorReset, powerMeterEarthCTRating=powerMeterEarthCTRating, overCurrentProtectorSensorStateChangeDelay=overCurrentProtectorSensorStateChangeDelay, wireSensorDecimalDigits=wireSensorDecimalDigits, cascadedDeviceConnected=cascadedDeviceConnected, measurementsOverCurrentProtectorSensorState=measurementsOverCurrentProtectorSensorState, unit=unit, inletPoleIndex=inletPoleIndex, rfCodeTagDisconnected=rfCodeTagDisconnected, overCurrentProtectorSensorUpperCriticalThreshold=overCurrentProtectorSensorUpperCriticalThreshold, inletPoleSensorEnabledThresholds=inletPoleSensorEnabledThresholds, transferSwitchPoleOutNode=transferSwitchPoleOutNode, outletSensorReset=outletSensorReset, userAcceptedRestrictedServiceAgreement=userAcceptedRestrictedServiceAgreement, circuitPoleId=circuitPoleId, powerControl=powerControl, overCurrentProtectorPowerSource=overCurrentProtectorPowerSource, inletSensorSignedUpperWarningThreshold=inletSensorSignedUpperWarningThreshold, compliances=compliances, circuitCount=circuitCount, circuitPoleSensorDecimalDigits=circuitPoleSensorDecimalDigits, oldTrapsGroup=oldTrapsGroup, inletPoleSensorResolution=inletPoleSensorResolution, circuitSensorResolution=circuitSensorResolution, logCircuitSensorMinValue=logCircuitSensorMinValue, overCurrentProtectorSensorMeasurementsTable=overCurrentProtectorSensorMeasurementsTable, measurementsUnitSensorTimeStamp=measurementsUnitSensorTimeStamp, logOutletSensorSignedMaxValue=logOutletSensorSignedMaxValue, externalSensorIsActuator=externalSensorIsActuator, trapInformationEntry=trapInformationEntry, logTransferSwitchSensorDataAvailable=logTransferSwitchSensorDataAvailable, overCurrentProtectorSensorSignedLowerWarningThreshold=overCurrentProtectorSensorSignedLowerWarningThreshold, outletPoleConfigurationTable=outletPoleConfigurationTable, logInletSensorMinValue=logInletSensorMinValue, reliabilityDataRawLowerBytes=reliabilityDataRawLowerBytes, outletPoleLine=outletPoleLine, measurementsCircuitPoleSensorTimeStamp=measurementsCircuitPoleSensorTimeStamp, wirePowerSource=wirePowerSource, logUnitSensorMinValue=logUnitSensorMinValue, raritan=raritan, externalOnOffSensorSubtype=externalOnOffSensorSubtype, wireSensorConfigurationEntry=wireSensorConfigurationEntry, serverReachable=serverReachable, actuatorControlEntry=actuatorControlEntry, circuitPoleSensorMinimum=circuitPoleSensorMinimum, unitSensorLowerWarningThreshold=unitSensorLowerWarningThreshold, externalSensorTypeDefaultUpperCriticalThreshold=externalSensorTypeDefaultUpperCriticalThreshold, measurementsOutletPoleSensorIsAvailable=measurementsOutletPoleSensorIsAvailable, switchingOperation=switchingOperation, wireSensorMeasurementsTable=wireSensorMeasurementsTable, SensorStateEnumeration=SensorStateEnumeration, boardVersion=boardVersion, measurementsOverCurrentProtectorSensorSignedValue=measurementsOverCurrentProtectorSensorSignedValue, PYSNMP_MODULE_ID=raritan, transferSwitchLastTransferReason=transferSwitchLastTransferReason, circuitCapabilities=circuitCapabilities, unitSensorStateChange=unitSensorStateChange, peripheralDevicePackageTable=peripheralDevicePackageTable, reliabilityErrorLog=reliabilityErrorLog, transferSwitchPowerSource1=transferSwitchPowerSource1, transferSwitchSensorResolution=transferSwitchSensorResolution, externalSensorTypeDefaultEnabledThresholds=externalSensorTypeDefaultEnabledThresholds, outletPoleSensorDecimalDigits=outletPoleSensorDecimalDigits, lhxSupportEnabled=lhxSupportEnabled, inletSensorResolution=inletSensorResolution, outletPowerupSequence=outletPowerupSequence, unitSensorTolerance=unitSensorTolerance, inlets=inlets, transferSwitchSensorMinimum=transferSwitchSensorMinimum, pduRatedVA=pduRatedVA, measurementsTransferSwitchSensorValue=measurementsTransferSwitchSensorValue, wireSensorLogAvailable=wireSensorLogAvailable, logOutletSensorMinValue=logOutletSensorMinValue, wireLabel=wireLabel, peripheralDeviceFirmwareUpdate=peripheralDeviceFirmwareUpdate, externalSensorMeasurementsTable=externalSensorMeasurementsTable, measurementsOverCurrentProtector=measurementsOverCurrentProtector, pduId=pduId, transferSwitchSensorUpperWarningThreshold=transferSwitchSensorUpperWarningThreshold, transferSwitchAlarmOverride=transferSwitchAlarmOverride, outletPoleSensorLogEntry=outletPoleSensorLogEntry, transferSwitchSensorDecimalDigits=transferSwitchSensorDecimalDigits, wireSensorLogTable=wireSensorLogTable, outletSensorMaximum=outletSensorMaximum, usbSlaveConnected=usbSlaveConnected, firmwareValidationFailed=firmwareValidationFailed, outletSensorConfigurationEntry=outletSensorConfigurationEntry, outletSensorSignedUpperCriticalThreshold=outletSensorSignedUpperCriticalThreshold, circuitSensorEnabledThresholds=circuitSensorEnabledThresholds, circuitSensorStateChangeDelay=circuitSensorStateChangeDelay, circuitSensorLogEntry=circuitSensorLogEntry, inletSensorMaximum=inletSensorMaximum, outletPoleSensorLowerCriticalThreshold=outletPoleSensorLowerCriticalThreshold, overCurrentProtectorConfigurationTable=overCurrentProtectorConfigurationTable, oldConfigGroup=oldConfigGroup, controllerConfigurationTable=controllerConfigurationTable, measurementsOverCurrentProtectorSensorTimeStamp=measurementsOverCurrentProtectorSensorTimeStamp, deviceUpdateFailed=deviceUpdateFailed, logInletPoleSensorSignedAvgValue=logInletPoleSensorSignedAvgValue, transferSwitchPoleCount=transferSwitchPoleCount, outletPoleSensorLogAvailable=outletPoleSensorLogAvailable, circuitPoleSensorStateChangeDelay=circuitPoleSensorStateChangeDelay, outletSequencingDelay=outletSequencingDelay, measurementsTransferSwitchSensorIsAvailable=measurementsTransferSwitchSensorIsAvailable, inletPoleSensorConfigurationEntry=inletPoleSensorConfigurationEntry, outletSwitchingTimeStamp=outletSwitchingTimeStamp, outletSwitchingState=outletSwitchingState, overCurrentProtectorSensorUpperWarningThreshold=overCurrentProtectorSensorUpperWarningThreshold, logTransferSwitchSensorState=logTransferSwitchSensorState, powerMeterAdded=powerMeterAdded, unitSensorUnits=unitSensorUnits, inletSensorStateChangeDelay=inletSensorStateChangeDelay, transferSwitchSensorSignedMinimum=transferSwitchSensorSignedMinimum, inletConfigurationEntry=inletConfigurationEntry, circuitPoleSensorSignedMinimum=circuitPoleSensorSignedMinimum, transferSwitchControlTable=transferSwitchControlTable, inletPoleSensorUnits=inletPoleSensorUnits, outletSensorSignedLowerWarningThreshold=outletSensorSignedLowerWarningThreshold, inletPoleSensorConfigurationTable=inletPoleSensorConfigurationTable, measurementsOverCurrentProtectorSensorValue=measurementsOverCurrentProtectorSensorValue, userName=userName, oldSensorState=oldSensorState, pxIPAddress=pxIPAddress, overCurrentProtectorPoleCount=overCurrentProtectorPoleCount, userSessionTimeout=userSessionTimeout, circuitPoleSensorLogAvailable=circuitPoleSensorLogAvailable, logUnitSensorSignedMaxValue=logUnitSensorSignedMaxValue, activeDNSServerAddress=activeDNSServerAddress, reliabilityErrorLogRawUpperBytes=reliabilityErrorLogRawUpperBytes, inletSensorHysteresis=inletSensorHysteresis, inletSensorConfigurationEntry=inletSensorConfigurationEntry, logOutletSensorSignedMinValue=logOutletSensorSignedMinValue, inletPoleNumber=inletPoleNumber, transferSwitchSensorMeasurementsEntry=transferSwitchSensorMeasurementsEntry, CircuitTypeEnumeration=CircuitTypeEnumeration, outletSensorSignedLowerCriticalThreshold=outletSensorSignedLowerCriticalThreshold, activeDNSServerAddressType=activeDNSServerAddressType, logUnitSensorDataAvailable=logUnitSensorDataAvailable, wireSensorLogEntry=wireSensorLogEntry, inletPoleConfigurationTable=inletPoleConfigurationTable, complianceRev2=complianceRev2, peripheralDevicePackageModel=peripheralDevicePackageModel, transferSwitchSensorSignedMaximum=transferSwitchSensorSignedMaximum, pxMACAddress=pxMACAddress, webcamRemoved=webcamRemoved, transferSwitchActiveInlet=transferSwitchActiveInlet, circuitSensorMinimum=circuitSensorMinimum, loadSheddingModeEntered=loadSheddingModeEntered, logInletSensorMaxValue=logInletSensorMaxValue, logInlet=logInlet, measurementsOutletSensorSignedValue=measurementsOutletSensorSignedValue, unitSensorLogAvailable=unitSensorLogAvailable, outletPoleSensorSignedUpperCriticalThreshold=outletPoleSensorSignedUpperCriticalThreshold, externalSensorConfigurationTable=externalSensorConfigurationTable, externalSensorTypeDefaultThresholdsEntry=externalSensorTypeDefaultThresholdsEntry, measurementsCircuit=measurementsCircuit, reliabilityDataRawUpperBytes=reliabilityDataRawUpperBytes, logInletSensorState=logInletSensorState, serverReachabilityTable=serverReachabilityTable, DaisychainMemberTypeEnumeration=DaisychainMemberTypeEnumeration, inletPoleSensorSignedLowerWarningThreshold=inletPoleSensorSignedLowerWarningThreshold, inletName=inletName, wireSensorMinimum=wireSensorMinimum, logCircuitSensorAvgValue=logCircuitSensorAvgValue, logCircuitPoleSensorState=logCircuitPoleSensorState, logUnitSensorSignedAvgValue=logUnitSensorSignedAvgValue, inletPlug=inletPlug, logUnitSensorAvgValue=logUnitSensorAvgValue, deviceUpdateStarted=deviceUpdateStarted, serverReachability=serverReachability, pduDaisychainMemberType=pduDaisychainMemberType, logOutletPoleSensorState=logOutletPoleSensorState)
mibBuilder.exportSymbols("PDU2-MIB", circuitPoleCTNumber=circuitPoleCTNumber, transferSwitchPoleConfigurationTable=transferSwitchPoleConfigurationTable, circuitPoleNumber=circuitPoleNumber, inletPoleSensorSignedMaximum=inletPoleSensorSignedMaximum, inletPoleSensorSignedUpperCriticalThreshold=inletPoleSensorSignedUpperCriticalThreshold, logOutletSensorState=logOutletSensorState, circuitSensorReset=circuitSensorReset, circuitDeleted=circuitDeleted, reliabilityData=reliabilityData, oldMeasurementsGroup=oldMeasurementsGroup, productType=productType, roleDeleted=roleDeleted, overCurrentProtectorCapabilities=overCurrentProtectorCapabilities, unitDeviceCapabilities=unitDeviceCapabilities, outletSensorLogTable=outletSensorLogTable, measurementsCircuitSensorIsAvailable=measurementsCircuitSensorIsAvailable, wireSensorAccuracy=wireSensorAccuracy, logFileCleared=logFileCleared, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, logOverCurrentProtectorSensorSignedAvgValue=logOverCurrentProtectorSensorSignedAvgValue, outletSensorLowerCriticalThreshold=outletSensorLowerCriticalThreshold, unitSensorLowerCriticalThreshold=unitSensorLowerCriticalThreshold, deviceSettingsSaved=deviceSettingsSaved, overCurrentProtectorPoleOutNode=overCurrentProtectorPoleOutNode, outletSequenceDelay=outletSequenceDelay, logInletPoleSensorState=logInletPoleSensorState, inletPoleSensorStateChange=inletPoleSensorStateChange, outletPoleSensorSignedUpperWarningThreshold=outletPoleSensorSignedUpperWarningThreshold, frontPanelRCMSelfTest=frontPanelRCMSelfTest, circuitPoleSensorMeasurementsEntry=circuitPoleSensorMeasurementsEntry, peripheralDevicePackageFirmwareVersion=peripheralDevicePackageFirmwareVersion, inletRatedVA=inletRatedVA, logCircuitSensorSignedMinValue=logCircuitSensorSignedMinValue, circuitPoleSensorLowerCriticalThreshold=circuitPoleSensorLowerCriticalThreshold, outletReceptacleDescriptor=outletReceptacleDescriptor, outletSensorLogAvailable=outletSensorLogAvailable, unitSensorMaximum=unitSensorMaximum, inletPoleSensorMeasurementsEntry=inletPoleSensorMeasurementsEntry, deviceIdentificationChanged=deviceIdentificationChanged, circuitSensorStateChange=circuitSensorStateChange, outletSensorDecimalDigits=outletSensorDecimalDigits, transferSwitchSensorStateChange=transferSwitchSensorStateChange, rcmSelfTestTable=rcmSelfTestTable, overCurrentProtectorPoleInNode=overCurrentProtectorPoleInNode, outletSensorLowerWarningThreshold=outletSensorLowerWarningThreshold, lhxSupportChanged=lhxSupportChanged, serverReachabilityError=serverReachabilityError, logCircuitPoleSensorAvgValue=logCircuitPoleSensorAvgValue, peripheralDevicePackageMinFirmwareVersion=peripheralDevicePackageMinFirmwareVersion, measurementsUnitSensorState=measurementsUnitSensorState, powerMeterPanelLayout=powerMeterPanelLayout, inletPoleSensorDecimalDigits=inletPoleSensorDecimalDigits, outletSensorStateChangeDelay=outletSensorStateChangeDelay, wireSensorHysteresis=wireSensorHysteresis, outletRatedVoltage=outletRatedVoltage, logInletPoleSensorSignedMinValue=logInletPoleSensorSignedMinValue, loadShedding=loadShedding, actuatorControlTable=actuatorControlTable, overCurrentProtectorSensorHysteresis=overCurrentProtectorSensorHysteresis, logInletSensorAvgValue=logInletSensorAvgValue, ldapError=ldapError, unitSensorControl=unitSensorControl, bulkConfigurationSaved=bulkConfigurationSaved, measurementsTransferSwitchSensorSignedValue=measurementsTransferSwitchSensorSignedValue, measurementsCircuitPoleSensorState=measurementsCircuitPoleSensorState, logTimeStampTable=logTimeStampTable, inletSensorControlTable=inletSensorControlTable, inletPoleSensorLowerCriticalThreshold=inletPoleSensorLowerCriticalThreshold, wireConfigurationEntry=wireConfigurationEntry, reliability=reliability, overCurrentProtectorSensorSignedLowerCriticalThreshold=overCurrentProtectorSensorSignedLowerCriticalThreshold, outlets=outlets, transferSwitchSensorUnits=transferSwitchSensorUnits, outletPoleSensorTolerance=outletPoleSensorTolerance, logExternalSensorAvgValue=logExternalSensorAvgValue, circuitName=circuitName, logUnitSensorMaxValue=logUnitSensorMaxValue, BoardTypeEnumeration=BoardTypeEnumeration, outletPoleNumber=outletPoleNumber, inletPoleSensorSignedUpperWarningThreshold=inletPoleSensorSignedUpperWarningThreshold, outletPoleSensorResolution=outletPoleSensorResolution, measurementsExternalSensor=measurementsExternalSensor, outletRatedCurrent=outletRatedCurrent, unitSensorLogTable=unitSensorLogTable, transferSwitchPoleLine=transferSwitchPoleLine, transferSwitchSensorEnabledThresholds=transferSwitchSensorEnabledThresholds, overCurrentProtectorSensorResolution=overCurrentProtectorSensorResolution, serverIPAddress=serverIPAddress, unitSensorMeasurementsTable=unitSensorMeasurementsTable, measurementsWire=measurementsWire, measurementsWireSensorTimeStamp=measurementsWireSensorTimeStamp, logWireSensorMinValue=logWireSensorMinValue, frontPanelOutletSwitching=frontPanelOutletSwitching, activeDNSServerAddressSource=activeDNSServerAddressSource, serverReachabilityEntry=serverReachabilityEntry, reliabilityDataEntry=reliabilityDataEntry, externalSensorControl=externalSensorControl, inletPoleSensorLowerWarningThreshold=inletPoleSensorLowerWarningThreshold, measurementsGroup=measurementsGroup, circuitPoleSensorUpperWarningThreshold=circuitPoleSensorUpperWarningThreshold, secondNTPServerAddress=secondNTPServerAddress, circuitPoleSensorSignedMaximum=circuitPoleSensorSignedMaximum, PowerMeterTypeEnumeration=PowerMeterTypeEnumeration, pduNumber=pduNumber, outletConfigurationTable=outletConfigurationTable, logOutletPoleSensorMinValue=logOutletPoleSensorMinValue, externalSensorChannelNumber=externalSensorChannelNumber, circuitSensorControl=circuitSensorControl, transferSwitchConfigurationEntry=transferSwitchConfigurationEntry, transferSwitchPowerSource2=transferSwitchPowerSource2, peripheralDevicePackageId=peripheralDevicePackageId, circuitPolePhase=circuitPolePhase, wireCount=wireCount, sensorID=sensorID, circuit=circuit, logCircuitSensorMaxValue=logCircuitSensorMaxValue, outletSensorControlTable=outletSensorControlTable, overCurrentProtectorSensorLogTable=overCurrentProtectorSensorLogTable, circuitNumber=circuitNumber, outletNonCritical=outletNonCritical, externalSensorLogAvailable=externalSensorLogAvailable, passwordSettingsChanged=passwordSettingsChanged, outletUseGlobalPowerCyclingPowerOffPeriod=outletUseGlobalPowerCyclingPowerOffPeriod, wireSensorResolution=wireSensorResolution, inletPoleConfigurationEntry=inletPoleConfigurationEntry, globalOutletPowerCyclingPowerOffPeriod=globalOutletPowerCyclingPowerOffPeriod, logIndexEntry=logIndexEntry, controlGroup=controlGroup, trapsGroup=trapsGroup, outletStateOnStartup=outletStateOnStartup, wireId=wireId, inletPoleCapabilities=inletPoleCapabilities, outletPoleSensorSignedMinimum=outletPoleSensorSignedMinimum, measurementsOutletSensorValue=measurementsOutletSensorValue, logIndexTable=logIndexTable, externalSensorType=externalSensorType, inletSensorSignedLowerWarningThreshold=inletSensorSignedLowerWarningThreshold, wireSensorUpperCriticalThreshold=wireSensorUpperCriticalThreshold, wireSensorUnits=wireSensorUnits, URL=URL, logInletSensorSignedAvgValue=logInletSensorSignedAvgValue, pdu2=pdu2, measurementsInletSensorTimeStamp=measurementsInletSensorTimeStamp, outletPoleSensorMaximum=outletPoleSensorMaximum, logInletSensorSignedMaxValue=logInletSensorSignedMaxValue, reliabilityErrorLogEntry=reliabilityErrorLogEntry, trapInformationGroup=trapInformationGroup, logOverCurrentProtectorSensorSignedMaxValue=logOverCurrentProtectorSensorSignedMaxValue, logOverCurrentProtectorSensorSignedMinValue=logOverCurrentProtectorSensorSignedMinValue, inletSensorSignedMinimum=inletSensorSignedMinimum, outletId=outletId, powerMeterPanelNumbering=powerMeterPanelNumbering, inletPoleSensorMeasurementsTable=inletPoleSensorMeasurementsTable, transferSwitchAutoReTransferRequiresPhaseSync=transferSwitchAutoReTransferRequiresPhaseSync, logOverCurrentProtectorSensorMinValue=logOverCurrentProtectorSensorMinValue, pduName=pduName, outletSensorMeasurementsEntry=outletSensorMeasurementsEntry, circuitSensorMeasurementsTable=circuitSensorMeasurementsTable, circuitPoleSensorStateChange=circuitPoleSensorStateChange, transferSwitchControlEntry=transferSwitchControlEntry, overCurrentProtectorType=overCurrentProtectorType, logCircuitSensorDataAvailable=logCircuitSensorDataAvailable, smtpServer=smtpServer, overCurrentProtectorSensorConfigurationTable=overCurrentProtectorSensorConfigurationTable, webcamModel=webcamModel, inletSensorAccuracy=inletSensorAccuracy, pxInetNetmask=pxInetNetmask, inletSensorLowerCriticalThreshold=inletSensorLowerCriticalThreshold, deviceCascadePosition=deviceCascadePosition, transferSwitchPoleIn1Node=transferSwitchPoleIn1Node, pduRatedFrequency=pduRatedFrequency, logTransferSwitchSensorSignedMaxValue=logTransferSwitchSensorSignedMaxValue, outletName=outletName, inletDisabled=inletDisabled, measurementsWireSensorValue=measurementsWireSensorValue, reliabilityErrorLogRawLowerBytes=reliabilityErrorLogRawLowerBytes, dataLoggingEnableForAllSensors=dataLoggingEnableForAllSensors, externalSensorAccuracy=externalSensorAccuracy, OverCurrentProtectorTypeEnumeration=OverCurrentProtectorTypeEnumeration, reliabilityDataMaxPossible=reliabilityDataMaxPossible, inletSensorEnabledThresholds=inletSensorEnabledThresholds, circuitConfigurationTable=circuitConfigurationTable, peripheralDevicePackageSerialNumber=peripheralDevicePackageSerialNumber, logOverCurrentProtectorSensorAvgValue=logOverCurrentProtectorSensorAvgValue, reliabilityErrorLogIndex=reliabilityErrorLogIndex, measurementsWireSensorState=measurementsWireSensorState, inletLabel=inletLabel, ExternalSensorsZCoordinateUnitsEnumeration=ExternalSensorsZCoordinateUnitsEnumeration, NetworkInterfaceTypeEnumeration=NetworkInterfaceTypeEnumeration, logOutletPoleSensorDataAvailable=logOutletPoleSensorDataAvailable, overCurrentProtectorSensorStateChange=overCurrentProtectorSensorStateChange, unitSensorControlEntry=unitSensorControlEntry, circuitPoleSensorSignedUpperCriticalThreshold=circuitPoleSensorSignedUpperCriticalThreshold, outletPoleSensorSignedMaximum=outletPoleSensorSignedMaximum, inrushGuardDelay=inrushGuardDelay, pduImage=pduImage, peripheralDevicePackageEntry=peripheralDevicePackageEntry, userPasswordChanged=userPasswordChanged, globalOutletStateOnStartup=globalOutletStateOnStartup, externalSensorTypeDefaultThresholdsTable=externalSensorTypeDefaultThresholdsTable, outletSensorSignedMaximum=outletSensorSignedMaximum, unitSensorLogEntry=unitSensorLogEntry, measurementsInletPoleSensorSignedValue=measurementsInletPoleSensorSignedValue, transferSwitchCount=transferSwitchCount, outletPowerCyclingPowerOffPeriod=outletPowerCyclingPowerOffPeriod, inletDeviceCapabilities=inletDeviceCapabilities, circuitSensorUpperCriticalThreshold=circuitSensorUpperCriticalThreshold, circuitConfigurationEntry=circuitConfigurationEntry, transferSwitchAutoReTransferEnabled=transferSwitchAutoReTransferEnabled, circuitPoleSensorLowerWarningThreshold=circuitPoleSensorLowerWarningThreshold, logUnitSensorState=logUnitSensorState, logWireSensorDataAvailable=logWireSensorDataAvailable, typeOfSensor=typeOfSensor, measurementsInletSensorState=measurementsInletSensorState, measurementsInletPoleSensorState=measurementsInletPoleSensorState, logTransferSwitchSensorAvgValue=logTransferSwitchSensorAvgValue, inletSensorMeasurementsEntry=inletSensorMeasurementsEntry, TransferSwitchTransferReasonEnumeration=TransferSwitchTransferReasonEnumeration, logWire=logWire, outletSwitchable=outletSwitchable, externalSensors=externalSensors, frontPanelActuatorControl=frontPanelActuatorControl, transferSwitchPoleIn2Node=transferSwitchPoleIn2Node, outletPowerSource=outletPowerSource, wireSensorUpperWarningThreshold=wireSensorUpperWarningThreshold, nameplateTable=nameplateTable, logInletPoleSensorSignedMaxValue=logInletPoleSensorSignedMaxValue, firstNTPServerAddressType=firstNTPServerAddressType, measurementsTransferSwitchSensorTimeStamp=measurementsTransferSwitchSensorTimeStamp, userModified=userModified, HundredthsOfAPercentage=HundredthsOfAPercentage, measurementsOutletPoleSensorValue=measurementsOutletPoleSensorValue, outletPoleNode=outletPoleNode, inletSensorLowerWarningThreshold=inletSensorLowerWarningThreshold, pduModel=pduModel, logInletPoleSensorAvgValue=logInletPoleSensorAvgValue, outletPoleSensorConfigurationEntry=outletPoleSensorConfigurationEntry, outletSensorUpperWarningThreshold=outletSensorUpperWarningThreshold, measurementsInletSensorSignedValue=measurementsInletSensorSignedValue, serverID=serverID, unitSensorSignedLowerCriticalThreshold=unitSensorSignedLowerCriticalThreshold, reliabilityErrorLogValue=reliabilityErrorLogValue, overCurrentProtector=overCurrentProtector, nameplateEntry=nameplateEntry, overCurrentProtectorSensorSignedUpperCriticalThreshold=overCurrentProtectorSensorSignedUpperCriticalThreshold, transferSwitchFrontPanelManualTransferButtonEnabled=transferSwitchFrontPanelManualTransferButtonEnabled, transferSwitchSensorTolerance=transferSwitchSensorTolerance, inletPoleSensorAccuracy=inletPoleSensorAccuracy, pduCount=pduCount, outletPoleSensorAccuracy=outletPoleSensorAccuracy, logUnit=logUnit, logOverCurrentProtector=logOverCurrentProtector, boardType=boardType, logWireSensorAvgValue=logWireSensorAvgValue)
mibBuilder.exportSymbols("PDU2-MIB", transferSwitchSensorMeasurementsTable=transferSwitchSensorMeasurementsTable, transferSwitchCapabilities=transferSwitchCapabilities, circuitAdded=circuitAdded, inletCount=inletCount, externalSensorDecimalDigits=externalSensorDecimalDigits, managedExternalSensorCount=managedExternalSensorCount, outletSensorMeasurementsTable=outletSensorMeasurementsTable, inletPoleLine=inletPoleLine, inletSensorDecimalDigits=inletSensorDecimalDigits, smtpMessageRecipients=smtpMessageRecipients, circuitSensorSignedUpperWarningThreshold=circuitSensorSignedUpperWarningThreshold, logCircuitPoleSensorMaxValue=logCircuitPoleSensorMaxValue, measurementsInletSensorIsAvailable=measurementsInletSensorIsAvailable, userLogout=userLogout, reliabilityErrorLogTime=reliabilityErrorLogTime, logCircuitSensorSignedAvgValue=logCircuitSensorSignedAvgValue, inletId=inletId, logIndex=logIndex, deviceSettingsRestored=deviceSettingsRestored, complianceRev1=complianceRev1, outletSensorAccuracy=outletSensorAccuracy, logConfigurationEntry=logConfigurationEntry, inletPoleSensorTolerance=inletPoleSensorTolerance, outletSensorHysteresis=outletSensorHysteresis, externalSensorTolerance=externalSensorTolerance, circuitSensorDecimalDigits=circuitSensorDecimalDigits, measurementsPerLogEntry=measurementsPerLogEntry, measurementsInletPoleSensorTimeStamp=measurementsInletPoleSensorTimeStamp, unitSensorConfigurationTable=unitSensorConfigurationTable, userBlocked=userBlocked, outletPoleCount=outletPoleCount, outletPoleSensorMeasurementsEntry=outletPoleSensorMeasurementsEntry, unitConfigurationEntry=unitConfigurationEntry, networkInterfaceType=networkInterfaceType, circuitPoleSensorLogEntry=circuitPoleSensorLogEntry, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, inletPoleSensorUpperWarningThreshold=inletPoleSensorUpperWarningThreshold, transferSwitchControl=transferSwitchControl, logOutletPoleSensorSignedMinValue=logOutletPoleSensorSignedMinValue, peripheralDevicePackageState=peripheralDevicePackageState, newestLogID=newestLogID, deviceCascadeType=deviceCascadeType, inletSensorControl=inletSensorControl, measurementsExternalSensorIsAvailable=measurementsExternalSensorIsAvailable, radiusError=radiusError, pduRatedCurrent=pduRatedCurrent, overCurrentProtectorSensorSignedMaximum=overCurrentProtectorSensorSignedMaximum, DeviceIdentificationParameterEnumeration=DeviceIdentificationParameterEnumeration, outletSwitchControlEntry=outletSwitchControlEntry, unitSensorMinimum=unitSensorMinimum, board=board, unitSensorSignedLowerWarningThreshold=unitSensorSignedLowerWarningThreshold, agentInetPortNumber=agentInetPortNumber, controllerConfigurationEntry=controllerConfigurationEntry, outletControl=outletControl, powerMeterBranchCount=powerMeterBranchCount, inletSensorStateChange=inletSensorStateChange, inletPoleSensorSignedLowerCriticalThreshold=inletPoleSensorSignedLowerCriticalThreshold, outletPoleSensorUnits=outletPoleSensorUnits, serverCount=serverCount, systemReset=systemReset, externalSensorLogTable=externalSensorLogTable, circuitSensorConfigurationTable=circuitSensorConfigurationTable, outletSensorSignedMinimum=outletSensorSignedMinimum, unitSensorUpperWarningThreshold=unitSensorUpperWarningThreshold, activeDNSServerIndex=activeDNSServerIndex, logConfigurationTable=logConfigurationTable, ipAddressGroup=ipAddressGroup, externalSensorUseDefaultThresholds=externalSensorUseDefaultThresholds, outletSensorControlEntry=outletSensorControlEntry, pingServerEnabled=pingServerEnabled, wireSensorEnabledThresholds=wireSensorEnabledThresholds, roleModified=roleModified, loadSheddingModeExited=loadSheddingModeExited, outletPoleSensorHysteresis=outletPoleSensorHysteresis, webcamInserted=webcamInserted, overCurrentProtectorPoleConfigurationTable=overCurrentProtectorPoleConfigurationTable, measurementsUnit=measurementsUnit, measurementsCircuitSensorSignedValue=measurementsCircuitSensorSignedValue, secondNTPServerAddressType=secondNTPServerAddressType, unitSensorConfigurationEntry=unitSensorConfigurationEntry, PeripheralDeviceFirmwareUpdateStateEnumeration=PeripheralDeviceFirmwareUpdateStateEnumeration, measurementsCircuitPoleSensorSignedValue=measurementsCircuitPoleSensorSignedValue, outletSensorMinimum=outletSensorMinimum, measurementsCircuitPoleSensorIsAvailable=measurementsCircuitPoleSensorIsAvailable, circuitSensorUpperWarningThreshold=circuitSensorUpperWarningThreshold, externalSensorTypeDefaultLowerWarningThreshold=externalSensorTypeDefaultLowerWarningThreshold, outletPoleSensorEnabledThresholds=outletPoleSensorEnabledThresholds, actuatorControl=actuatorControl, circuitSensorUnits=circuitSensorUnits, reliabilityIndex=reliabilityIndex, outletSensorUnits=outletSensorUnits, circuitSensorLowerWarningThreshold=circuitSensorLowerWarningThreshold, overCurrentProtectorSensorLowerWarningThreshold=overCurrentProtectorSensorLowerWarningThreshold, ProductTypeEnumeration=ProductTypeEnumeration, overCurrentProtectorRatedCurrent=overCurrentProtectorRatedCurrent, logExternalSensor=logExternalSensor, inletPoleSensorHysteresis=inletPoleSensorHysteresis, wireSensorMaximum=wireSensorMaximum, circuitPoleConfigurationEntry=circuitPoleConfigurationEntry, externalSensorTypeDefaultLowerCriticalThreshold=externalSensorTypeDefaultLowerCriticalThreshold, measurementsUnitSensorIsAvailable=measurementsUnitSensorIsAvailable, measurementsExternalSensorState=measurementsExternalSensorState, measurementsInlet=measurementsInlet, outletPoleCapabilities=outletPoleCapabilities, RelayPowerLossBehaviorEnumeration=RelayPowerLossBehaviorEnumeration, systemStarted=systemStarted, externalSensorYCoordinate=externalSensorYCoordinate, transferSwitchConfigurationTable=transferSwitchConfigurationTable, circuitPoleSensorHysteresis=circuitPoleSensorHysteresis, circuitPowerSource=circuitPowerSource, externalSensorName=externalSensorName, logInletPoleSensorDataAvailable=logInletPoleSensorDataAvailable, measurementsCircuitSensorTimeStamp=measurementsCircuitSensorTimeStamp, logOutletSensorAvgValue=logOutletSensorAvgValue, outletDeviceCapabilities=outletDeviceCapabilities, externalSensorTypeDefaultUpperWarningThreshold=externalSensorTypeDefaultUpperWarningThreshold, circuitCTRating=circuitCTRating, groups=groups, unitSensorSignedMinimum=unitSensorSignedMinimum, transferSwitchSensorUpperCriticalThreshold=transferSwitchSensorUpperCriticalThreshold, userDeleted=userDeleted, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, circuitSensorSignedMaximum=circuitSensorSignedMaximum, measurementsOutletPoleSensorSignedValue=measurementsOutletPoleSensorSignedValue, unitSensorDecimalDigits=unitSensorDecimalDigits, overCurrentProtectorSensorEnabledThresholds=overCurrentProtectorSensorEnabledThresholds, logOutletPoleSensorSignedAvgValue=logOutletPoleSensorSignedAvgValue, peripheralDevicesAutoManagement=peripheralDevicesAutoManagement, wireSensorStateChange=wireSensorStateChange, unitSensorEnabledThresholds=unitSensorEnabledThresholds, outletPoleSensorSignedLowerWarningThreshold=outletPoleSensorSignedLowerWarningThreshold, PanelNumberingEnumeration=PanelNumberingEnumeration, configuration=configuration, reliabilityErrorLogTable=reliabilityErrorLogTable, traps=traps, outletControllerCount=outletControllerCount, externalSensorStateChangeDelay=externalSensorStateChangeDelay, circuitPoleSensorEnabledThresholds=circuitPoleSensorEnabledThresholds, logCircuitPoleSensorSignedMinValue=logCircuitPoleSensorSignedMinValue, outletLabel=outletLabel, logCircuitPoleSensorSignedAvgValue=logCircuitPoleSensorSignedAvgValue, logWireSensorState=logWireSensorState, measurementsUnitSensorValue=measurementsUnitSensorValue)
