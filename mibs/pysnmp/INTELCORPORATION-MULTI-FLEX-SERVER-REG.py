#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-REG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-REG
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, IpAddress, Gauge32, ObjectIdentity, Bits, MibIdentifier, ModuleIdentity, Counter32, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, enterprises, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Gauge32", "ObjectIdentity", "Bits", "MibIdentifier", "ModuleIdentity", "Counter32", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "enterprises", "iso", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
multiFlexServerRegModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 1))
multiFlexServerRegModule.setRevisions(('2007-10-01 18:20', '2007-08-21 17:00', '2007-08-16 13:30', '2007-05-30 10:30', '2007-03-06 10:30', '2007-02-22 17:00', '2006-11-29 15:30', '2006-11-01 10:00', '2006-10-02 12:00', '2006-09-28 17:32',))
if mibBuilder.loadTexts: multiFlexServerRegModule.setLastUpdated('200710011820Z')
if mibBuilder.loadTexts: multiFlexServerRegModule.setOrganization('Intel Corporation')
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
modularsystems = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19))
multiFlexServer = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1))
notifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 0))
if mibBuilder.loadTexts: notifications.setStatus('current')
registry = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1))
components = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2))
notificationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3))
regModule = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1))
regComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2))
regChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 1))
regSwitches = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 2))
regScms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 3))
regBlades = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 4))
regPowerSupplies = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 5))
regFans = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 6))
multiFlexServer1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 1, 1))
if mibBuilder.loadTexts: multiFlexServer1.setStatus('current')
esm1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 2, 1))
if mibBuilder.loadTexts: esm1.setStatus('current')
scm1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 2, 3, 1))
if mibBuilder.loadTexts: scm1.setStatus('current')
mib = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2))
component = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: component.setStatus('current')
severity = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("neutral", 1), ("good", 2), ("info", 3), ("warning", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severity.setStatus('current')
eventType = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventType.setStatus('current')
user = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: user.setStatus('current')
instanceId = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instanceId.setStatus('current')
detail = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: detail.setStatus('current')
eventId = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventId.setStatus('current')
chassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 1)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "component"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "severity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "eventType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "user"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "instanceId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "detail"), ("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "eventId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisGroup = chassisGroup.setStatus('current')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", regComponents=regComponents, chassisGroup=chassisGroup, regFans=regFans, regBlades=regBlades, regSwitches=regSwitches, products=products, components=components, multiFlexServer1=multiFlexServer1, multiFlexServerRegModule=multiFlexServerRegModule, modularsystems=modularsystems, regPowerSupplies=regPowerSupplies, esm1=esm1, multiFlexServer=multiFlexServer, regScms=regScms, notifications=notifications, mib=mib, registry=registry, component=component, regModule=regModule, instanceId=instanceId, intel=intel, notificationInfo=notificationInfo, eventType=eventType, groups=groups, PYSNMP_MODULE_ID=multiFlexServerRegModule, severity=severity, scm1=scm1, user=user, detail=detail, eventId=eventId, regChassis=regChassis)
