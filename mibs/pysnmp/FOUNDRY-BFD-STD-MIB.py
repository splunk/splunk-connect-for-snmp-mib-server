#
# PySNMP MIB module FOUNDRY-BFD-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-BFD-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:01:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
bfd, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "bfd")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, ModuleIdentity, NotificationType, IpAddress, TimeTicks, Gauge32, iso, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "NotificationType", "IpAddress", "TimeTicks", "Gauge32", "iso", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "ObjectIdentity", "MibIdentifier")
RowStatus, TimeStamp, StorageType, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "StorageType", "DisplayString", "TextualConvention", "TruthValue")
bfdMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1))
bfdMIB.setRevisions(('2005-08-22 12:00',))
if mibBuilder.loadTexts: bfdMIB.setLastUpdated('200507221200Z')
if mibBuilder.loadTexts: bfdMIB.setOrganization('IETF')
bfdNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 0))
bfdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1))
bfdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3))
bfdScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 1))
class BfdSessIndexTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdInterval(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdDiag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noDiagnostic", 1), ("controlDetectionTimeExpired", 2), ("echoFunctionFailed", 3), ("neighborSignaledSessionDown", 4), ("forwardingPlaneReset", 5), ("pathDown", 6), ("concatenatedPathDown", 7), ("administrativelyDown", 8), ("reverseConcatenatedPathDown", 9))

bfdAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdAdminStatus.setStatus('current')
bfdVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdVersionNumber.setStatus('current')
bfdSessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2), )
if mibBuilder.loadTexts: bfdSessTable.setStatus('current')
bfdSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1), ).setIndexNames((0, "FOUNDRY-BFD-STD-MIB", "bfdSessIndex"))
if mibBuilder.loadTexts: bfdSessEntry.setStatus('current')
bfdSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 1), BfdSessIndexTC())
if mibBuilder.loadTexts: bfdSessIndex.setStatus('current')
bfdSessApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessApplicationId.setStatus('current')
bfdSessDiscriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessDiscriminator.setStatus('current')
bfdSessRemoteDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessRemoteDiscr.setStatus('current')
bfdSessUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessUdpPort.setStatus('current')
bfdSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("adminDown", 1), ("down", 2), ("init", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessState.setStatus('current')
bfdSessRemoteHeardFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessRemoteHeardFlag.setStatus('current')
bfdSessDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bfdSessDiag.setStatus('current')
bfdSessOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asyncModeWEchoFun", 1), ("asynchModeWOEchoFun", 2), ("demandModeWEchoFunction", 3), ("demandModeWOEchoFunction", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessOperMode.setStatus('current')
bfdSessDemandModeDesiredFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDemandModeDesiredFlag.setStatus('current')
bfdSessEchoFuncModeDesiredFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessEchoFuncModeDesiredFlag.setStatus('current')
bfdSessControlPlanIndepFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessControlPlanIndepFlag.setStatus('current')
bfdSessAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 13), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessAddrType.setStatus('current')
bfdSessAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 14), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessAddr.setStatus('current')
bfdSessDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 15), BfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDesiredMinTxInterval.setStatus('current')
bfdSessReqMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 16), BfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessReqMinRxInterval.setStatus('current')
bfdSessReqMinEchoRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 17), BfdInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessReqMinEchoRxInterval.setStatus('current')
bfdSessDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessDetectMult.setStatus('current')
bfdSessStorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 19), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessStorType.setStatus('current')
bfdSessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessRowStatus.setStatus('current')
bfdSessAuthPresFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessAuthPresFlag.setStatus('current')
bfdSessAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("simplePassword", 1), ("keyedMD5", 2), ("meticulousKeyedMD5", 3), ("keyedSHA1", 4), ("meticulousKeyedSHA1", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bfdSessAuthenticationType.setStatus('current')
bfdSessPerfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3), )
if mibBuilder.loadTexts: bfdSessPerfTable.setStatus('current')
bfdSessPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1), )
bfdSessEntry.registerAugmentions(("FOUNDRY-BFD-STD-MIB", "bfdSessPerfEntry"))
bfdSessPerfEntry.setIndexNames(*bfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: bfdSessPerfEntry.setStatus('current')
bfdSessPerfPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktIn.setStatus('current')
bfdSessPerfPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktOut.setStatus('current')
bfdSessPerfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfUpTime.setStatus('current')
bfdSessPerfLastSessDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfLastSessDownTime.setStatus('current')
bfdSessPerfLastCommLostDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 5), BfdDiag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfLastCommLostDiag.setStatus('current')
bfdSessPerfSessUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfSessUpCount.setStatus('current')
bfdSessPerfDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfDiscTime.setStatus('current')
bfdSessPerfPktInHC = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktInHC.setStatus('current')
bfdSessPerfPktOutHC = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessPerfPktOutHC.setStatus('current')
bfdSessMapTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 4), )
if mibBuilder.loadTexts: bfdSessMapTable.setStatus('current')
bfdSessMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 4, 1), ).setIndexNames((0, "FOUNDRY-BFD-STD-MIB", "bfdSessApplicationId"), (0, "FOUNDRY-BFD-STD-MIB", "bfdSessDiscriminator"), (0, "FOUNDRY-BFD-STD-MIB", "bfdSessAddrType"), (0, "FOUNDRY-BFD-STD-MIB", "bfdSessAddr"))
if mibBuilder.loadTexts: bfdSessMapEntry.setStatus('current')
bfdSessMapBfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 4, 1, 1), BfdSessIndexTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bfdSessMapBfdIndex.setStatus('current')
bfdSessNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bfdSessNotificationsEnable.setStatus('current')
bfdSessUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 0, 1)).setObjects(("FOUNDRY-BFD-STD-MIB", "bfdSessDiag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDiag"))
if mibBuilder.loadTexts: bfdSessUp.setStatus('current')
bfdSessDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 0, 2)).setObjects(("FOUNDRY-BFD-STD-MIB", "bfdSessDiag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDiag"))
if mibBuilder.loadTexts: bfdSessDown.setStatus('current')
bfdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3, 1))
bfdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3, 2))
bfdModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3, 2, 1)).setObjects(("FOUNDRY-BFD-STD-MIB", "bfdSessionGroup"), ("FOUNDRY-BFD-STD-MIB", "bfdSessionPerfGroup"), ("FOUNDRY-BFD-STD-MIB", "bfdSessionPerfHCGroup"), ("FOUNDRY-BFD-STD-MIB", "bfdNotificationGroup"), ("FOUNDRY-BFD-STD-MIB", "bfdSessionPerfHCGroup"), ("FOUNDRY-BFD-STD-MIB", "bfdNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdModuleFullCompliance = bfdModuleFullCompliance.setStatus('current')
bfdSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3, 1, 1)).setObjects(("FOUNDRY-BFD-STD-MIB", "bfdSessNotificationsEnable"), ("FOUNDRY-BFD-STD-MIB", "bfdAdminStatus"), ("FOUNDRY-BFD-STD-MIB", "bfdVersionNumber"), ("FOUNDRY-BFD-STD-MIB", "bfdSessApplicationId"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDiscriminator"), ("FOUNDRY-BFD-STD-MIB", "bfdSessAddrType"), ("FOUNDRY-BFD-STD-MIB", "bfdSessAddr"), ("FOUNDRY-BFD-STD-MIB", "bfdSessRemoteDiscr"), ("FOUNDRY-BFD-STD-MIB", "bfdSessUdpPort"), ("FOUNDRY-BFD-STD-MIB", "bfdSessState"), ("FOUNDRY-BFD-STD-MIB", "bfdSessRemoteHeardFlag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDiag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessOperMode"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDemandModeDesiredFlag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessEchoFuncModeDesiredFlag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessControlPlanIndepFlag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDesiredMinTxInterval"), ("FOUNDRY-BFD-STD-MIB", "bfdSessReqMinRxInterval"), ("FOUNDRY-BFD-STD-MIB", "bfdSessReqMinEchoRxInterval"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDetectMult"), ("FOUNDRY-BFD-STD-MIB", "bfdSessStorType"), ("FOUNDRY-BFD-STD-MIB", "bfdSessRowStatus"), ("FOUNDRY-BFD-STD-MIB", "bfdSessMapBfdIndex"), ("FOUNDRY-BFD-STD-MIB", "bfdSessAuthPresFlag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessAuthenticationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdSessionGroup = bfdSessionGroup.setStatus('current')
bfdSessionPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3, 1, 2)).setObjects(("FOUNDRY-BFD-STD-MIB", "bfdSessPerfPktIn"), ("FOUNDRY-BFD-STD-MIB", "bfdSessPerfPktOut"), ("FOUNDRY-BFD-STD-MIB", "bfdSessPerfUpTime"), ("FOUNDRY-BFD-STD-MIB", "bfdSessPerfLastSessDownTime"), ("FOUNDRY-BFD-STD-MIB", "bfdSessPerfLastCommLostDiag"), ("FOUNDRY-BFD-STD-MIB", "bfdSessPerfSessUpCount"), ("FOUNDRY-BFD-STD-MIB", "bfdSessPerfDiscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdSessionPerfGroup = bfdSessionPerfGroup.setStatus('current')
bfdSessionPerfHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3, 1, 3)).setObjects(("FOUNDRY-BFD-STD-MIB", "bfdSessPerfPktInHC"), ("FOUNDRY-BFD-STD-MIB", "bfdSessPerfPktOutHC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdSessionPerfHCGroup = bfdSessionPerfHCGroup.setStatus('current')
bfdNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1991, 3, 3, 1, 3, 1, 4)).setObjects(("FOUNDRY-BFD-STD-MIB", "bfdSessUp"), ("FOUNDRY-BFD-STD-MIB", "bfdSessDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bfdNotificationGroup = bfdNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("FOUNDRY-BFD-STD-MIB", bfdSessReqMinRxInterval=bfdSessReqMinRxInterval, bfdSessState=bfdSessState, bfdSessionPerfGroup=bfdSessionPerfGroup, bfdSessDiscriminator=bfdSessDiscriminator, bfdScalarObjects=bfdScalarObjects, bfdSessReqMinEchoRxInterval=bfdSessReqMinEchoRxInterval, BfdDiag=BfdDiag, bfdGroups=bfdGroups, bfdSessOperMode=bfdSessOperMode, bfdSessPerfLastCommLostDiag=bfdSessPerfLastCommLostDiag, bfdSessPerfSessUpCount=bfdSessPerfSessUpCount, bfdSessNotificationsEnable=bfdSessNotificationsEnable, bfdNotificationGroup=bfdNotificationGroup, bfdSessPerfEntry=bfdSessPerfEntry, bfdSessRowStatus=bfdSessRowStatus, bfdSessMapEntry=bfdSessMapEntry, bfdSessDiag=bfdSessDiag, bfdSessPerfPktIn=bfdSessPerfPktIn, bfdSessPerfPktInHC=bfdSessPerfPktInHC, bfdSessEntry=bfdSessEntry, bfdModuleFullCompliance=bfdModuleFullCompliance, bfdSessUdpPort=bfdSessUdpPort, bfdSessEchoFuncModeDesiredFlag=bfdSessEchoFuncModeDesiredFlag, bfdSessIndex=bfdSessIndex, BfdInterval=BfdInterval, bfdSessionPerfHCGroup=bfdSessionPerfHCGroup, bfdAdminStatus=bfdAdminStatus, BfdSessIndexTC=BfdSessIndexTC, bfdObjects=bfdObjects, bfdSessPerfDiscTime=bfdSessPerfDiscTime, PYSNMP_MODULE_ID=bfdMIB, bfdSessMapBfdIndex=bfdSessMapBfdIndex, bfdSessAuthenticationType=bfdSessAuthenticationType, bfdSessPerfPktOut=bfdSessPerfPktOut, bfdMIB=bfdMIB, bfdSessAuthPresFlag=bfdSessAuthPresFlag, bfdSessControlPlanIndepFlag=bfdSessControlPlanIndepFlag, bfdSessionGroup=bfdSessionGroup, bfdSessAddr=bfdSessAddr, bfdSessUp=bfdSessUp, bfdSessPerfTable=bfdSessPerfTable, bfdSessPerfLastSessDownTime=bfdSessPerfLastSessDownTime, bfdSessPerfPktOutHC=bfdSessPerfPktOutHC, bfdSessApplicationId=bfdSessApplicationId, bfdSessStorType=bfdSessStorType, bfdSessTable=bfdSessTable, bfdSessDemandModeDesiredFlag=bfdSessDemandModeDesiredFlag, bfdSessRemoteDiscr=bfdSessRemoteDiscr, bfdSessPerfUpTime=bfdSessPerfUpTime, bfdSessDetectMult=bfdSessDetectMult, bfdSessDown=bfdSessDown, bfdSessMapTable=bfdSessMapTable, bfdSessAddrType=bfdSessAddrType, bfdSessDesiredMinTxInterval=bfdSessDesiredMinTxInterval, bfdConformance=bfdConformance, bfdNotifications=bfdNotifications, bfdVersionNumber=bfdVersionNumber, bfdCompliances=bfdCompliances, bfdSessRemoteHeardFlag=bfdSessRemoteHeardFlag)
