#
# PySNMP MIB module APERTUS-UA-BASE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APERTUS-UA-BASE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, mib_2, Unsigned32, Gauge32, iso, Bits, Integer32, MibIdentifier, Counter64, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "mib-2", "Unsigned32", "Gauge32", "iso", "Bits", "Integer32", "MibIdentifier", "Counter64", "ObjectIdentity", "IpAddress")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
apertus = MibIdentifier((1, 3, 6, 1, 4, 1, 543))
isg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3))
aperua = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3))
aperbaseua = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1))
aperUaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1))
aperUaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1))
aperUaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1))
aperUaDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2))
aperUaConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("loading", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaConfigStatus.setStatus('mandatory')
aperUaConfigUpTime = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaConfigUpTime.setStatus('mandatory')
aperUaConfigResetTime = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaConfigResetTime.setStatus('mandatory')
aperUaDomainTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: aperUaDomainTable.setStatus('mandatory')
aperUaDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "APERTUS-UA-BASE-MIB", "aperUaDomainName"))
if mibBuilder.loadTexts: aperUaDomainEntry.setStatus('mandatory')
aperUaDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainName.setStatus('mandatory')
aperUaDomainQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainQueries.setStatus('mandatory')
aperUaDomainLastAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainLastAnswer.setStatus('mandatory')
aperUaDomainLastQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainLastQueryTime.setStatus('mandatory')
aperUaDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainType.setStatus('mandatory')
aperUaDomainTypeOID = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 1, 1, 1, 2, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperUaDomainTypeOID.setStatus('mandatory')
mibBuilder.exportSymbols("APERTUS-UA-BASE-MIB", mgmt=mgmt, aperUaDomainLastQueryTime=aperUaDomainLastQueryTime, directory=directory, experimental=experimental, aperUaDomainName=aperUaDomainName, aperUaConfigStatus=aperUaConfigStatus, aperUaDomainTypeOID=aperUaDomainTypeOID, enterprises=enterprises, apertus=apertus, aperUaDomainTable=aperUaDomainTable, aperUaDomainType=aperUaDomainType, aperua=aperua, aperUaDomainQueries=aperUaDomainQueries, internet=internet, aperUaDomainLastAnswer=aperUaDomainLastAnswer, isg=isg, aperUaConfigUpTime=aperUaConfigUpTime, aperUaMIBObjects=aperUaMIBObjects, aperUaMIB=aperUaMIB, aperUaDomain=aperUaDomain, aperUaDomainEntry=aperUaDomainEntry, aperbaseua=aperbaseua, private=private, aperUaConfigResetTime=aperUaConfigResetTime, aperUaConfig=aperUaConfig)
