#
# PySNMP MIB module RackMonitor-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RackMonitor-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, enterprises, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, TimeTicks, ObjectIdentity, Bits, IpAddress, Gauge32, Integer32, Counter64, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "TimeTicks", "ObjectIdentity", "Bits", "IpAddress", "Gauge32", "Integer32", "Counter64", "NotificationType", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
powerware = MibIdentifier((1, 3, 6, 1, 4, 1, 534))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6))
dataCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7))
environmentalMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1))
insObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1))
rmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2))
rmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1))
rmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2))
sensorMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3))
sensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4))
insIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: insIdentManufacturer.setStatus('mandatory')
insIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: insIdentModel.setStatus('mandatory')
insIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: insIdentAgentSoftwareVersion.setStatus('mandatory')
insIdentName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: insIdentName.setStatus('mandatory')
rmConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmConfigMibVersion.setStatus('mandatory')
rmConfigNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2))
rmConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigIpAddress.setStatus('mandatory')
rmConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigGateway.setStatus('mandatory')
rmConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigSubnetMask.setStatus('mandatory')
rmConfigDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3))
rmConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDate.setStatus('mandatory')
rmConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTime.setStatus('mandatory')
rmConfigTimeFromNtp = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTimeFromNtp.setStatus('mandatory')
rmConfigNtpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigNtpIpAddress.setStatus('mandatory')
rmConfigNtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("gMT-1200", 1), ("gMT-1100", 2), ("gMT-1000", 3), ("gMT-0900", 4), ("gMT-0800", 5), ("gMT-0700", 6), ("gMT-0600", 7), ("gMT-0500", 8), ("gMT-0400", 9), ("gMT-0330", 10), ("gMT-0300", 11), ("gMT-0200", 12), ("gMT-0100", 13), ("gMT-0000", 14), ("gMT0100", 15), ("gMT0200", 16), ("gMT0300", 17), ("gMT0330", 18), ("gMT0400", 19), ("gMT0500", 20), ("gMT0530", 21), ("gMT0600", 22), ("gMT0700", 23), ("gMT0800", 24), ("gMT0900", 25), ("gMT1000", 26), ("gMT1100", 27), ("gMT1200", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigNtpTimeZone.setStatus('mandatory')
rmConfigDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDayLightSaving.setStatus('mandatory')
rmConfigLog = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4))
rmConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHistoryLogFrequency.setStatus('mandatory')
rmConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigExtHistoryLogFrequency.setStatus('mandatory')
rmConfigConfigurationLog = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigConfigurationLog.setStatus('mandatory')
rmConfigDhcpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDhcpStatue.setStatus('mandatory')
rmConfigPingStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigPingStatue.setStatus('mandatory')
rmConfigTftpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTftpStatue.setStatus('mandatory')
rmConfigTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 8))
rmConfigTelnetStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTelnetStatue.setStatus('mandatory')
rmConfigTelnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTelnetPortNumber.setStatus('mandatory')
rmConfigHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9))
rmConfigHttpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHttpStatue.setStatus('mandatory')
rmConfigHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHttpPortNumber.setStatus('mandatory')
rmConfigHttpSecurity = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHttpSecurity.setStatus('mandatory')
rmConfigSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 10))
rmConfigSnmpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigSnmpStatue.setStatus('mandatory')
rmConfigSnmpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigSnmpPortNumber.setStatus('mandatory')
rmConfigControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 11))
rmConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigResetToDefault.setStatus('mandatory')
rmConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigRestart.setStatus('mandatory')
rmConfigTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12))
rmConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTrapRetryCount.setStatus('mandatory')
rmConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTrapRetryTime.setStatus('mandatory')
rmConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTrapAckSignature.setStatus('mandatory')
rmConfigPollRate = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigPollRate.setStatus('mandatory')
rmConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14), )
if mibBuilder.loadTexts: rmConfigTrapsReceiversTable.setStatus('mandatory')
rmConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1), ).setIndexNames((0, "RackMonitor-MIB", "trapsIndex"))
if mibBuilder.loadTexts: rmConfigTrapsReceiversEntry.setStatus('mandatory')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
rmConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15), )
if mibBuilder.loadTexts: rmConfigAccessControlTable.setStatus('mandatory')
rmConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1), ).setIndexNames((0, "RackMonitor-MIB", "accessIndex"))
if mibBuilder.loadTexts: rmConfigAccessControlEntry.setStatus('mandatory')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
accessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessCommunityString.setStatus('mandatory')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("read-write", 2), ("notAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
rmConfigTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTemperatureUnit.setStatus('mandatory')
rmConfigDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mm-dd-yyyy", 1), ("dd-mm-yyyy", 2), ("yyyy-mm-dd", 3), ("dd-mmm-yyyy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDateFormat.setStatus('mandatory')
smSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSensorNumber.setStatus('mandatory')
smSensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2), )
if mibBuilder.loadTexts: smSensorTable.setStatus('mandatory')
smSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1), ).setIndexNames((0, "RackMonitor-MIB", "smDeviceIndex"))
if mibBuilder.loadTexts: smSensorEntry.setStatus('mandatory')
smDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceIndex.setStatus('mandatory')
smDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("eMD-HT", 3), ("eMD-T", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceStatus.setStatus('mandatory')
smDeviceTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceTemperature.setStatus('mandatory')
smDeviceTemperatureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("normal", 3), ("lowWarning", 4), ("lowCritical", 5), ("highWarning", 6), ("highCritical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceTemperatureAlarm.setStatus('mandatory')
smDeviceHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceHumidity.setStatus('mandatory')
smDeviceHumidityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("normal", 3), ("lowWarning", 4), ("lowCritical", 5), ("highWarning", 6), ("highCritical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceHumidityAlarm.setStatus('mandatory')
smAlarm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smAlarm1.setStatus('mandatory')
smAlarm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smAlarm2.setStatus('mandatory')
scSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSensorNumber.setStatus('mandatory')
scSensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2), )
if mibBuilder.loadTexts: scSensorTable.setStatus('mandatory')
scSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1), ).setIndexNames((0, "RackMonitor-MIB", "scDeviceIndex"))
if mibBuilder.loadTexts: scSensorEntry.setStatus('mandatory')
scDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDeviceIndex.setStatus('mandatory')
scDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDeviceName.setStatus('mandatory')
scDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDeviceState.setStatus('mandatory')
scSensor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3))
scSensor1DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1DeviceName.setStatus('mandatory')
scSensor1DeviceState = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1DeviceState.setStatus('mandatory')
scSensor1Temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3))
scSensor1TemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureName.setStatus('mandatory')
scSensor1TemperatureLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowWarning.setStatus('mandatory')
scSensor1TemperatureLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowCritical.setStatus('mandatory')
scSensor1TemperatureHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighWarning.setStatus('mandatory')
scSensor1TemperatureHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighCritical.setStatus('mandatory')
scSensor1TemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHysteresis.setStatus('mandatory')
scSensor1TemperatureCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureMinus0Point5", 8), ("temperatureMinus1Point0", 9), ("temperatureMinus1Point5", 10), ("temperatureMinus2Point0", 11), ("temperatureMinus2Point5", 12), ("temperatureMinusPoint0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureCalibration.setStatus('mandatory')
scSensor1TemperatureLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowWarningStatus.setStatus('mandatory')
scSensor1TemperatureLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowCriticalStatus.setStatus('mandatory')
scSensor1TemperatureHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighWarningStatus.setStatus('mandatory')
scSensor1TemperatureHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighCriticalStatus.setStatus('mandatory')
scSensor1Humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4))
scSensor1HumdityName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumdityName.setStatus('mandatory')
scSensor1HumidityLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowWarning.setStatus('mandatory')
scSensor1HumidityLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowCritical.setStatus('mandatory')
scSensor1HumidityHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighWarning.setStatus('mandatory')
scSensor1HumidityHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighCritical.setStatus('mandatory')
scSensor1HumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHysteresis.setStatus('mandatory')
scSensor1HumidityCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease1Point0", 2), ("humidityIncrease2Point0", 3), ("humidityIncrease3Point0", 4), ("humidityIncrease4Point0", 5), ("humidityIncrease5Point0", 6), ("humidityIncrease6Point0", 7), ("humidityMinus1Point0", 8), ("humidityMinus2Point0", 9), ("humidityMinus3Point0", 10), ("humidityMinus4Point0", 11), ("humidityMinus5Point0", 12), ("humidityMinus6Point0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityCalibration.setStatus('mandatory')
scSensor1HumidityLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowWarningStatus.setStatus('mandatory')
scSensor1HumidityLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowCriticalStatus.setStatus('mandatory')
scSensor1HumidityHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighWarningStatus.setStatus('mandatory')
scSensor1HumidityHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighCriticalStatus.setStatus('mandatory')
scSensor1Alarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5))
scSensor1Alarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm1Name.setStatus('mandatory')
scSensor1Alarm1State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm1State.setStatus('mandatory')
scSensor1Alarm1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm1Hysteresis.setStatus('mandatory')
scSensor1Alarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6))
scSensor1Alarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm2Name.setStatus('mandatory')
scSensor1Alarm2State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm2State.setStatus('mandatory')
scSensor1Alarm2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm2Hysteresis.setStatus('mandatory')
scSensor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4))
scSensor2DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2DeviceName.setStatus('mandatory')
scSensor2DeviceState = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2DeviceState.setStatus('mandatory')
scSensor2Temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3))
scSensor2TemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureName.setStatus('mandatory')
scSensor2TemperatureLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowWarning.setStatus('mandatory')
scSensor2TemperatureLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowCritical.setStatus('mandatory')
scSensor2TemperatureHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighWarning.setStatus('mandatory')
scSensor2TemperatureHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighCritical.setStatus('mandatory')
scSensor2TemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHysteresis.setStatus('mandatory')
scSensor2TemperatureCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureMinus0Point5", 8), ("temperatureMinus1Point0", 9), ("temperatureMinus1Point5", 10), ("temperatureMinus2Point0", 11), ("temperatureMinus2Point5", 12), ("temperatureMinusPoint0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureCalibration.setStatus('mandatory')
scSensor2TemperatureLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowWarningStatus.setStatus('mandatory')
scSensor2TemperatureLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowCriticalStatus.setStatus('mandatory')
scSensor2TemperatureHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighWarningStatus.setStatus('mandatory')
scSensor2TemperatureHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighCriticalStatus.setStatus('mandatory')
scSensor2Humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4))
scSensor2HumdityName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumdityName.setStatus('mandatory')
scSensor2HumidityLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowWarning.setStatus('mandatory')
scSensor2HumidityLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowCritical.setStatus('mandatory')
scSensor2HumidityHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighWarning.setStatus('mandatory')
scSensor2HumidityHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighCritical.setStatus('mandatory')
scSensor2HumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHysteresis.setStatus('mandatory')
scSensor2HumidityCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease1Point0", 2), ("humidityIncrease2Point0", 3), ("humidityIncrease3Point0", 4), ("humidityIncrease4Point0", 5), ("humidityIncrease5Point0", 6), ("humidityIncrease6Point0", 7), ("humidityMinus1Point0", 8), ("humidityMinus2Point0", 9), ("humidityMinus3Point0", 10), ("humidityMinus4Point0", 11), ("humidityMinus5Point0", 12), ("humidityMinus6Point0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityCalibration.setStatus('mandatory')
scSensor2HumidityLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowWarningStatus.setStatus('mandatory')
scSensor2HumidityLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowCriticalStatus.setStatus('mandatory')
scSensor2HumidityHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighWarningStatus.setStatus('mandatory')
scSensor2HumidityHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighCriticalStatus.setStatus('mandatory')
scSensor2Alarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5))
scSensor2Alarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm1Name.setStatus('mandatory')
scSensor2Alarm1State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm1State.setStatus('mandatory')
scSensor2Alarm1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm1Hysteresis.setStatus('mandatory')
scSensor2Alarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6))
scSensor2Alarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm2Name.setStatus('mandatory')
scSensor2Alarm2State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm2State.setStatus('mandatory')
scSensor2Alarm2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm2Hysteresis.setStatus('mandatory')
rmCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,1))
rmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,2))
rmAlarm1Inactive = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,3))
rmAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,4))
rmAlarm2Inactive = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,5))
rmAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,6))
rmTemperatureNotHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,7))
rmTemperatureHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,8))
rmTemperatureNotLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,9))
rmTemperatureLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,10))
rmTemperatureNotHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,11))
rmTemperatureHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,12))
rmTemperatureNotLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,13))
rmTemperatureLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,14))
rmHumidityNotHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,15))
rmHumidityHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,16))
rmHumidityNotLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,17))
rmHumidityLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,18))
rmHumidityNotHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,19))
rmHumidityHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,20))
rmHumidityNotLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,21))
rmHumidityLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,22))
mibBuilder.exportSymbols("RackMonitor-MIB", scDeviceState=scDeviceState, scSensor2TemperatureHighCriticalStatus=scSensor2TemperatureHighCriticalStatus, rmConfigAccessControlTable=rmConfigAccessControlTable, rmAlarm1Inactive=rmAlarm1Inactive, rmHumidityLowWarning=rmHumidityLowWarning, scSensorEntry=scSensorEntry, smSensorEntry=smSensorEntry, scSensor1HumidityCalibration=scSensor1HumidityCalibration, scSensor2Humidity=scSensor2Humidity, rmConfigGateway=rmConfigGateway, receiverDescription=receiverDescription, scSensor1TemperatureLowWarning=scSensor1TemperatureLowWarning, rmTemperatureLowWarning=rmTemperatureLowWarning, rmHumidityHighWarning=rmHumidityHighWarning, rmConfigDateFormat=rmConfigDateFormat, rmTemperatureHighWarning=rmTemperatureHighWarning, scSensor2HumidityHysteresis=scSensor2HumidityHysteresis, rmTemperatureNotHighWarning=rmTemperatureNotHighWarning, scSensor1Humidity=scSensor1Humidity, rmConfigHistoryLogFrequency=rmConfigHistoryLogFrequency, scSensor1HumidityHighWarning=scSensor1HumidityHighWarning, scSensor2HumidityCalibration=scSensor2HumidityCalibration, scSensor2HumidityLowCriticalStatus=scSensor2HumidityLowCriticalStatus, receiverSeverityLevel=receiverSeverityLevel, rmHumidityNotLowCritical=rmHumidityNotLowCritical, scSensor2TemperatureHighWarningStatus=scSensor2TemperatureHighWarningStatus, rmConfigNetwork=rmConfigNetwork, scSensor2Alarm1=scSensor2Alarm1, scSensor1Alarm2=scSensor1Alarm2, scSensor1Alarm1State=scSensor1Alarm1State, receiverCommunityString=receiverCommunityString, scSensor2TemperatureName=scSensor2TemperatureName, scSensor1TemperatureHighCriticalStatus=scSensor1TemperatureHighCriticalStatus, rmAlarm2Active=rmAlarm2Active, rmConfigTelnet=rmConfigTelnet, trapsIndex=trapsIndex, scSensor1Alarm1Hysteresis=scSensor1Alarm1Hysteresis, rmConfigSnmpStatue=rmConfigSnmpStatue, rmTemperatureNotLowCritical=rmTemperatureNotLowCritical, accessIndex=accessIndex, scSensor1TemperatureLowCriticalStatus=scSensor1TemperatureLowCriticalStatus, scSensor2TemperatureCalibration=scSensor2TemperatureCalibration, rmConfigHttpStatue=rmConfigHttpStatue, scSensor2TemperatureLowCriticalStatus=scSensor2TemperatureLowCriticalStatus, insIdentName=insIdentName, smAlarm2=smAlarm2, smDeviceIndex=smDeviceIndex, scSensor1Alarm2Name=scSensor1Alarm2Name, dataCenter=dataCenter, scSensor1Alarm2Hysteresis=scSensor1Alarm2Hysteresis, scDeviceIndex=scDeviceIndex, scSensor1HumidityHighCritical=scSensor1HumidityHighCritical, rmConfigTime=rmConfigTime, scSensor1TemperatureHighWarning=scSensor1TemperatureHighWarning, rmTemperatureHighCritical=rmTemperatureHighCritical, scSensorNumber=scSensorNumber, rmConfigSnmp=rmConfigSnmp, scSensor1HumidityLowWarning=scSensor1HumidityLowWarning, scSensor2HumidityLowCritical=scSensor2HumidityLowCritical, rmConfigIpAddress=rmConfigIpAddress, rmConfigTrapsReceiversTable=rmConfigTrapsReceiversTable, scSensor2TemperatureHighWarning=scSensor2TemperatureHighWarning, insObjects=insObjects, scSensor2HumidityHighWarning=scSensor2HumidityHighWarning, smAlarm1=smAlarm1, scSensor1TemperatureName=scSensor1TemperatureName, rmConfigTrapRetryTime=rmConfigTrapRetryTime, smDeviceTemperature=smDeviceTemperature, rmAlarm2Inactive=rmAlarm2Inactive, rmCommunicationLost=rmCommunicationLost, rmConfigHttpPortNumber=rmConfigHttpPortNumber, scSensor1Alarm1=scSensor1Alarm1, smSensorTable=smSensorTable, scSensorTable=scSensorTable, rmConfigNtpIpAddress=rmConfigNtpIpAddress, rmConfigTrapsReceiversEntry=rmConfigTrapsReceiversEntry, scSensor1TemperatureLowWarningStatus=scSensor1TemperatureLowWarningStatus, scSensor2DeviceState=scSensor2DeviceState, scSensor2Temperature=scSensor2Temperature, insIdentManufacturer=insIdentManufacturer, scSensor2Alarm1Name=scSensor2Alarm1Name, rmConfigTimeFromNtp=rmConfigTimeFromNtp, rmConfigSnmpPortNumber=rmConfigSnmpPortNumber, scSensor2Alarm1Hysteresis=scSensor2Alarm1Hysteresis, scSensor2TemperatureLowWarningStatus=scSensor2TemperatureLowWarningStatus, scSensor2TemperatureLowCritical=scSensor2TemperatureLowCritical, rmConfigTrapAckSignature=rmConfigTrapAckSignature, rmConfigPollRate=rmConfigPollRate, rmConfigTrapRetryCount=rmConfigTrapRetryCount, scSensor1=scSensor1, sensorMonitor=sensorMonitor, scSensor1TemperatureHysteresis=scSensor1TemperatureHysteresis, accessControlAddr=accessControlAddr, scSensor1HumidityHighCriticalStatus=scSensor1HumidityHighCriticalStatus, scSensor1HumidityLowCritical=scSensor1HumidityLowCritical, rmConfigConfigurationLog=rmConfigConfigurationLog, rmConfigDateTime=rmConfigDateTime, smDeviceTemperatureAlarm=smDeviceTemperatureAlarm, rmTraps=rmTraps, scSensor2HumidityLowWarningStatus=scSensor2HumidityLowWarningStatus, trapsReceiverAddr=trapsReceiverAddr, rmHumidityHighCritical=rmHumidityHighCritical, rmConfigLog=rmConfigLog, rmConfigExtHistoryLogFrequency=rmConfigExtHistoryLogFrequency, rmConfigRestart=rmConfigRestart, scSensor2Alarm2=scSensor2Alarm2, sensorConfig=sensorConfig, smDeviceHumidity=smDeviceHumidity, rmConfigTelnetPortNumber=rmConfigTelnetPortNumber, scSensor1HumidityLowCriticalStatus=scSensor1HumidityLowCriticalStatus, rmConfigDayLightSaving=rmConfigDayLightSaving, rmIdent=rmIdent, scSensor1DeviceState=scSensor1DeviceState, rmConfigControl=rmConfigControl, scSensor2HumidityHighWarningStatus=scSensor2HumidityHighWarningStatus, accessCommunityString=accessCommunityString, rmConfigDhcpStatue=rmConfigDhcpStatue, scSensor1TemperatureCalibration=scSensor1TemperatureCalibration, powerware=powerware, rmConfigTftpStatue=rmConfigTftpStatue, rmConfigHttpSecurity=rmConfigHttpSecurity, smDeviceHumidityAlarm=smDeviceHumidityAlarm, scSensor2HumidityHighCriticalStatus=scSensor2HumidityHighCriticalStatus, scSensor1TemperatureHighCritical=scSensor1TemperatureHighCritical, scSensor1Alarm2State=scSensor1Alarm2State, environmentalMonitor=environmentalMonitor, scSensor2=scSensor2, scSensor2Alarm2State=scSensor2Alarm2State, rmConfigMibVersion=rmConfigMibVersion, product=product, scSensor2Alarm2Name=scSensor2Alarm2Name, smDeviceStatus=smDeviceStatus, scSensor1DeviceName=scSensor1DeviceName, scSensor2HumdityName=scSensor2HumdityName, scSensor1HumidityHighWarningStatus=scSensor1HumidityHighWarningStatus, rmHumidityNotLowWarning=rmHumidityNotLowWarning, rmConfigDate=rmConfigDate, rmTemperatureNotLowWarning=rmTemperatureNotLowWarning, rmConfigHttp=rmConfigHttp, insIdentModel=insIdentModel, scSensor1TemperatureLowCritical=scSensor1TemperatureLowCritical, rmTemperatureLowCritical=rmTemperatureLowCritical, rmHumidityNotHighWarning=rmHumidityNotHighWarning, insIdentAgentSoftwareVersion=insIdentAgentSoftwareVersion, rmConfigTelnetStatue=rmConfigTelnetStatue, smSensorNumber=smSensorNumber, scSensor2Alarm1State=scSensor2Alarm1State, scSensor2Alarm2Hysteresis=scSensor2Alarm2Hysteresis, rmConfig=rmConfig, scSensor1Temperature=scSensor1Temperature, scSensor1HumidityHysteresis=scSensor1HumidityHysteresis, scSensor2TemperatureHysteresis=scSensor2TemperatureHysteresis, scSensor1HumidityLowWarningStatus=scSensor1HumidityLowWarningStatus, rmConfigTrap=rmConfigTrap, scSensor2TemperatureHighCritical=scSensor2TemperatureHighCritical, rmConfigResetToDefault=rmConfigResetToDefault, rmHumidityLowCritical=rmHumidityLowCritical, scSensor2DeviceName=scSensor2DeviceName, scSensor2HumidityHighCritical=scSensor2HumidityHighCritical, accessControlMode=accessControlMode, rmAlarm1Active=rmAlarm1Active, scSensor1TemperatureHighWarningStatus=scSensor1TemperatureHighWarningStatus, rmConfigSubnetMask=rmConfigSubnetMask, scDeviceName=scDeviceName, rmConfigAccessControlEntry=rmConfigAccessControlEntry, rmCommunicationRestored=rmCommunicationRestored, rmConfigNtpTimeZone=rmConfigNtpTimeZone, rmHumidityNotHighCritical=rmHumidityNotHighCritical, scSensor1HumdityName=scSensor1HumdityName, scSensor1Alarm1Name=scSensor1Alarm1Name, scSensor2HumidityLowWarning=scSensor2HumidityLowWarning, rmConfigTemperatureUnit=rmConfigTemperatureUnit, rmTemperatureNotHighCritical=rmTemperatureNotHighCritical, scSensor2TemperatureLowWarning=scSensor2TemperatureLowWarning, rmConfigPingStatue=rmConfigPingStatue)
