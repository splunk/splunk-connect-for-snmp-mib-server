#
# PySNMP MIB module Wellfleet-EGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-EGP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, ModuleIdentity, Bits, iso, Integer32, Gauge32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "ModuleIdentity", "Bits", "iso", "Integer32", "Gauge32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Counter32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfEgpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfEgpGroup")
wfEgp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1))
wfEgpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpDelete.setStatus('mandatory')
wfEgpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpDisable.setStatus('mandatory')
wfEgpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpInMsgs.setStatus('mandatory')
wfEgpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpInErrors.setStatus('mandatory')
wfEgpOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpOutMsgs.setStatus('mandatory')
wfEgpOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpOutErrors.setStatus('mandatory')
wfEgpLocalAs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpLocalAs.setStatus('mandatory')
wfEgpNeighTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2), )
if mibBuilder.loadTexts: wfEgpNeighTable.setStatus('mandatory')
wfEgpNeighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1), ).setIndexNames((0, "Wellfleet-EGP-MIB", "wfEgpNeighAddr"))
if mibBuilder.loadTexts: wfEgpNeighEntry.setStatus('mandatory')
wfEgpNeighState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("acquisition", 2), ("down", 3), ("up", 4), ("cease", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighState.setStatus('mandatory')
wfEgpNeighAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighAddr.setStatus('mandatory')
wfEgpNeighAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighAs.setStatus('mandatory')
wfEgpNeighInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighInMsgs.setStatus('mandatory')
wfEgpNeighInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighInErrs.setStatus('mandatory')
wfEgpNeighOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighOutMsgs.setStatus('mandatory')
wfEgpNeighOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighOutErrs.setStatus('mandatory')
wfEgpNeighInErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighInErrMsgs.setStatus('mandatory')
wfEgpNeighOutErrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighOutErrMsgs.setStatus('mandatory')
wfEgpNeighStateUps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighStateUps.setStatus('mandatory')
wfEgpNeighStateDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighStateDowns.setStatus('mandatory')
wfEgpNeighIntervalHello = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighIntervalHello.setStatus('mandatory')
wfEgpNeighIntervalPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighIntervalPoll.setStatus('mandatory')
wfEgpNeighMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighMode.setStatus('mandatory')
wfEgpNeighEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighEvent.setStatus('mandatory')
wfEgpNeighBadAsns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadAsns.setStatus('mandatory')
wfEgpNeighBadCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadCodes.setStatus('mandatory')
wfEgpNeighBadHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadHellos.setStatus('mandatory')
wfEgpNeighBadIHUs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadIHUs.setStatus('mandatory')
wfEgpNeighBadStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadStatuses.setStatus('mandatory')
wfEgpNeighBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadChecksums.setStatus('mandatory')
wfEgpNeighBadTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadTypes.setStatus('mandatory')
wfEgpNeighBadVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighBadVersions.setStatus('mandatory')
wfEgpNeighCmdOutOfSeqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighCmdOutOfSeqs.setStatus('mandatory')
wfEgpNeighCmdRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpNeighCmdRejects.setStatus('mandatory')
wfEgpCfgNeighTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3), )
if mibBuilder.loadTexts: wfEgpCfgNeighTable.setStatus('mandatory')
wfEgpCfgNeighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1), ).setIndexNames((0, "Wellfleet-EGP-MIB", "wfEgpCfgNeighRemoteAddr"))
if mibBuilder.loadTexts: wfEgpCfgNeighEntry.setStatus('mandatory')
wfEgpCfgNeighDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpCfgNeighDelete.setStatus('mandatory')
wfEgpCfgNeighDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpCfgNeighDisable.setStatus('mandatory')
wfEgpCfgNeighState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpCfgNeighState.setStatus('mandatory')
wfEgpCfgNeighLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpCfgNeighLocalAddr.setStatus('mandatory')
wfEgpCfgNeighRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfEgpCfgNeighRemoteAddr.setStatus('mandatory')
wfEgpCfgNeighGatewayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noncore", 1), ("core", 2))).clone('core')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpCfgNeighGatewayMode.setStatus('mandatory')
wfEgpCfgNeighAcqMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpCfgNeighAcqMode.setStatus('mandatory')
wfEgpCfgNeighPollMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpCfgNeighPollMode.setStatus('mandatory')
wfEgpCfgNeighHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 120)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpCfgNeighHelloTimer.setStatus('mandatory')
wfEgpCfgNeighPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 480)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEgpCfgNeighPollTimer.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-EGP-MIB", wfEgpCfgNeighPollMode=wfEgpCfgNeighPollMode, wfEgpCfgNeighTable=wfEgpCfgNeighTable, wfEgpNeighBadIHUs=wfEgpNeighBadIHUs, wfEgpNeighBadVersions=wfEgpNeighBadVersions, wfEgpCfgNeighLocalAddr=wfEgpCfgNeighLocalAddr, wfEgpNeighCmdRejects=wfEgpNeighCmdRejects, wfEgp=wfEgp, wfEgpNeighEntry=wfEgpNeighEntry, wfEgpDisable=wfEgpDisable, wfEgpNeighOutMsgs=wfEgpNeighOutMsgs, wfEgpNeighAs=wfEgpNeighAs, wfEgpNeighMode=wfEgpNeighMode, wfEgpCfgNeighHelloTimer=wfEgpCfgNeighHelloTimer, wfEgpNeighBadHellos=wfEgpNeighBadHellos, wfEgpNeighEvent=wfEgpNeighEvent, wfEgpNeighInErrs=wfEgpNeighInErrs, wfEgpCfgNeighDisable=wfEgpCfgNeighDisable, wfEgpNeighBadTypes=wfEgpNeighBadTypes, wfEgpNeighIntervalHello=wfEgpNeighIntervalHello, wfEgpNeighBadAsns=wfEgpNeighBadAsns, wfEgpLocalAs=wfEgpLocalAs, wfEgpNeighAddr=wfEgpNeighAddr, wfEgpOutErrors=wfEgpOutErrors, wfEgpInMsgs=wfEgpInMsgs, wfEgpNeighOutErrMsgs=wfEgpNeighOutErrMsgs, wfEgpNeighInErrMsgs=wfEgpNeighInErrMsgs, wfEgpInErrors=wfEgpInErrors, wfEgpNeighStateDowns=wfEgpNeighStateDowns, wfEgpNeighInMsgs=wfEgpNeighInMsgs, wfEgpNeighState=wfEgpNeighState, wfEgpNeighBadChecksums=wfEgpNeighBadChecksums, wfEgpNeighCmdOutOfSeqs=wfEgpNeighCmdOutOfSeqs, wfEgpCfgNeighState=wfEgpCfgNeighState, wfEgpNeighStateUps=wfEgpNeighStateUps, wfEgpDelete=wfEgpDelete, wfEgpNeighTable=wfEgpNeighTable, wfEgpOutMsgs=wfEgpOutMsgs, wfEgpNeighBadStatuses=wfEgpNeighBadStatuses, wfEgpCfgNeighPollTimer=wfEgpCfgNeighPollTimer, wfEgpCfgNeighRemoteAddr=wfEgpCfgNeighRemoteAddr, wfEgpCfgNeighEntry=wfEgpCfgNeighEntry, wfEgpNeighBadCodes=wfEgpNeighBadCodes, wfEgpCfgNeighDelete=wfEgpCfgNeighDelete, wfEgpCfgNeighGatewayMode=wfEgpCfgNeighGatewayMode, wfEgpCfgNeighAcqMode=wfEgpCfgNeighAcqMode, wfEgpNeighOutErrs=wfEgpNeighOutErrs, wfEgpNeighIntervalPoll=wfEgpNeighIntervalPoll)
