#
# PySNMP MIB module SMF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SMF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:59:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
IANAsmfOpModeIdTC, IANAsmfRssaIdTC = mibBuilder.importSymbols("IANA-SMF-MIB", "IANAsmfOpModeIdTC", "IANAsmfRssaIdTC")
InterfaceIndexOrZero, ifName = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifName")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, experimental, Unsigned32, ObjectIdentity, NotificationType, Counter32, Bits, MibIdentifier, Gauge32, Counter64, IpAddress, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "experimental", "Unsigned32", "ObjectIdentity", "NotificationType", "Counter32", "Bits", "MibIdentifier", "Gauge32", "Counter64", "IpAddress", "Integer32", "TimeTicks")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
smfMIB = ModuleIdentity((1, 3, 6, 1, 3, 126))
smfMIB.setRevisions(('2014-10-10 00:00',))
if mibBuilder.loadTexts: smfMIB.setLastUpdated('201410100000Z')
if mibBuilder.loadTexts: smfMIB.setOrganization('IETF MANET Working Group')
class SmfStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

smfMIBNotifications = MibIdentifier((1, 3, 6, 1, 3, 126, 0))
smfMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 126, 1))
smfMIBConformance = MibIdentifier((1, 3, 6, 1, 3, 126, 2))
smfCapabilitiesGroup = MibIdentifier((1, 3, 6, 1, 3, 126, 1, 1))
smfCapabilitiesTable = MibTable((1, 3, 6, 1, 3, 126, 1, 1, 1), )
if mibBuilder.loadTexts: smfCapabilitiesTable.setStatus('current')
smfCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 3, 126, 1, 1, 1, 1), ).setIndexNames((0, "SMF-MIB", "smfCapabilitiesIndex"))
if mibBuilder.loadTexts: smfCapabilitiesEntry.setStatus('current')
smfCapabilitiesIndex = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: smfCapabilitiesIndex.setStatus('current')
smfCapabilitiesOpModeID = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 1, 1, 1, 2), IANAsmfOpModeIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smfCapabilitiesOpModeID.setStatus('current')
smfCapabilitiesRssaID = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 1, 1, 1, 3), IANAsmfRssaIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smfCapabilitiesRssaID.setStatus('current')
smfConfigurationGroup = MibIdentifier((1, 3, 6, 1, 3, 126, 1, 2))
smfCfgAdminStatus = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 1), SmfStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgAdminStatus.setStatus('current')
smfCfgSmfSysUpTime = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smfCfgSmfSysUpTime.setStatus('current')
smfCfgRouterIDAddrType = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 3), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgRouterIDAddrType.setStatus('current')
smfCfgRouterID = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgRouterID.setStatus('current')
smfCfgOperationalMode = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgOperationalMode.setStatus('current')
smfCfgRssaMember = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("potential", 1), ("always", 2), ("never", 3))).clone('potential')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgRssaMember.setStatus('current')
smfCfgIpv4Dpd = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hashBased", 1), ("identificationBased", 2))).clone('hashBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgIpv4Dpd.setStatus('current')
smfCfgIpv6Dpd = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hashBased", 1), ("identificationBased", 2))).clone('hashBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgIpv6Dpd.setStatus('current')
smfCfgMaxPktLifetime = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgMaxPktLifetime.setStatus('current')
smfCfgDpdEntryMaxLifetime = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65525)).clone(600)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgDpdEntryMaxLifetime.setStatus('current')
smfCfgNhdpRssaMesgTLVIncluded = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgNhdpRssaMesgTLVIncluded.setStatus('current')
smfCfgNhdpRssaAddrBlockTLVIncluded = MibScalar((1, 3, 6, 1, 3, 126, 1, 2, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfCfgNhdpRssaAddrBlockTLVIncluded.setStatus('current')
smfCfgAddrForwardingTable = MibTable((1, 3, 6, 1, 3, 126, 1, 2, 13), )
if mibBuilder.loadTexts: smfCfgAddrForwardingTable.setStatus('current')
smfCfgAddrForwardingEntry = MibTableRow((1, 3, 6, 1, 3, 126, 1, 2, 13, 1), ).setIndexNames((0, "SMF-MIB", "smfCfgAddrForwardingIndex"))
if mibBuilder.loadTexts: smfCfgAddrForwardingEntry.setStatus('current')
smfCfgAddrForwardingIndex = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: smfCfgAddrForwardingIndex.setStatus('current')
smfCfgAddrForwardingGroupName = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 13, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smfCfgAddrForwardingGroupName.setStatus('current')
smfCfgAddrForwardingAddrType = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 13, 1, 3), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smfCfgAddrForwardingAddrType.setStatus('current')
smfCfgAddrForwardingAddress = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 13, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smfCfgAddrForwardingAddress.setStatus('current')
smfCfgAddrForwardingAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 13, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smfCfgAddrForwardingAddrPrefixLength.setStatus('current')
smfCfgAddrForwardingStatus = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smfCfgAddrForwardingStatus.setStatus('current')
smfCfgInterfaceTable = MibTable((1, 3, 6, 1, 3, 126, 1, 2, 14), )
if mibBuilder.loadTexts: smfCfgInterfaceTable.setStatus('current')
smfCfgInterfaceEntry = MibTableRow((1, 3, 6, 1, 3, 126, 1, 2, 14, 1), ).setIndexNames((0, "SMF-MIB", "smfCfgIfIndex"))
if mibBuilder.loadTexts: smfCfgInterfaceEntry.setStatus('current')
smfCfgIfIndex = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 14, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: smfCfgIfIndex.setStatus('current')
smfCfgIfAdminStatus = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 14, 1, 2), SmfStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smfCfgIfAdminStatus.setStatus('current')
smfCfgIfSmfUpTime = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 14, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smfCfgIfSmfUpTime.setStatus('current')
smfCfgIfRowStatus = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 2, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smfCfgIfRowStatus.setStatus('current')
smfStateGroup = MibIdentifier((1, 3, 6, 1, 3, 126, 1, 3))
smfStateNodeRsStatusIncluded = MibScalar((1, 3, 6, 1, 3, 126, 1, 3, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smfStateNodeRsStatusIncluded.setStatus('current')
smfStateDpdMemoryOverflow = MibScalar((1, 3, 6, 1, 3, 126, 1, 3, 2), Counter32()).setUnits('DPD Records').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfStateDpdMemoryOverflow.setStatus('current')
smfStateNeighborTable = MibTable((1, 3, 6, 1, 3, 126, 1, 3, 3), )
if mibBuilder.loadTexts: smfStateNeighborTable.setStatus('current')
smfStateNeighborEntry = MibTableRow((1, 3, 6, 1, 3, 126, 1, 3, 3, 1), ).setIndexNames((0, "SMF-MIB", "smfStateNeighborIpAddrType"), (0, "SMF-MIB", "smfStateNeighborIpAddr"), (0, "SMF-MIB", "smfStateNeighborPrefixLen"))
if mibBuilder.loadTexts: smfStateNeighborEntry.setStatus('current')
smfStateNeighborIpAddrType = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 3, 3, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: smfStateNeighborIpAddrType.setStatus('current')
smfStateNeighborIpAddr = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 3, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: smfStateNeighborIpAddr.setStatus('current')
smfStateNeighborPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 3, 3, 1, 3), InetAddressPrefixLength()).setUnits('bits')
if mibBuilder.loadTexts: smfStateNeighborPrefixLen.setStatus('current')
smfStateNeighborRSSA = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 3, 3, 1, 4), IANAsmfRssaIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smfStateNeighborRSSA.setStatus('current')
smfStateNeighborNextHopInterface = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 3, 3, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smfStateNeighborNextHopInterface.setStatus('current')
smfPerformanceGroup = MibIdentifier((1, 3, 6, 1, 3, 126, 1, 4))
smfPerfGobalGroup = MibIdentifier((1, 3, 6, 1, 3, 126, 1, 4, 1))
smfPerfIpv4MultiPktsRecvTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4MultiPktsRecvTotal.setStatus('current')
smfPerfIpv4MultiPktsForwardedTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4MultiPktsForwardedTotal.setStatus('current')
smfPerfIpv4DuplMultiPktsDetectedTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4DuplMultiPktsDetectedTotal.setStatus('current')
smfPerfIpv4DroppedMultiPktsTTLExceededTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4DroppedMultiPktsTTLExceededTotal.setStatus('current')
smfPerfIpv4TTLLargerThanPreviousTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4TTLLargerThanPreviousTotal.setStatus('current')
smfPerfIpv6MultiPktsRecvTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6MultiPktsRecvTotal.setStatus('current')
smfPerfIpv6MultiPktsForwardedTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6MultiPktsForwardedTotal.setStatus('current')
smfPerfIpv6DuplMultiPktsDetectedTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6DuplMultiPktsDetectedTotal.setStatus('current')
smfPerfIpv6DroppedMultiPktsTTLExceededTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6DroppedMultiPktsTTLExceededTotal.setStatus('current')
smfPerfIpv6TTLLargerThanPreviousTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6TTLLargerThanPreviousTotal.setStatus('current')
smfPerfIpv6HAVAssistsReqdTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6HAVAssistsReqdTotal.setStatus('current')
smfPerfIpv6DpdHeaderInsertionsTotal = MibScalar((1, 3, 6, 1, 3, 126, 1, 4, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6DpdHeaderInsertionsTotal.setStatus('current')
smfPerfInterfaceGroup = MibIdentifier((1, 3, 6, 1, 3, 126, 1, 4, 2))
smfPerfIpv4InterfacePerfTable = MibTable((1, 3, 6, 1, 3, 126, 1, 4, 2, 1), )
if mibBuilder.loadTexts: smfPerfIpv4InterfacePerfTable.setStatus('current')
smfPerfIpv4InterfacePerfEntry = MibTableRow((1, 3, 6, 1, 3, 126, 1, 4, 2, 1, 1), ).setIndexNames((0, "SMF-MIB", "smfCfgIfIndex"))
if mibBuilder.loadTexts: smfPerfIpv4InterfacePerfEntry.setStatus('current')
smfPerfIpv4MultiPktsRecvPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 1, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4MultiPktsRecvPerIf.setStatus('current')
smfPerfIpv4MultiPktsForwardedPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4MultiPktsForwardedPerIf.setStatus('current')
smfPerfIpv4DuplMultiPktsDetectedPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 1, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4DuplMultiPktsDetectedPerIf.setStatus('current')
smfPerfIpv4DroppedMultiPktsTTLExceededPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4DroppedMultiPktsTTLExceededPerIf.setStatus('current')
smfPerfIpv4TTLLargerThanPreviousPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv4TTLLargerThanPreviousPerIf.setStatus('current')
smfPerfIpv6InterfacePerfTable = MibTable((1, 3, 6, 1, 3, 126, 1, 4, 2, 2), )
if mibBuilder.loadTexts: smfPerfIpv6InterfacePerfTable.setStatus('current')
smfPerfIpv6InterfacePerfEntry = MibTableRow((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1), ).setIndexNames((0, "SMF-MIB", "smfCfgIfIndex"))
if mibBuilder.loadTexts: smfPerfIpv6InterfacePerfEntry.setStatus('current')
smfPerfIpv6MultiPktsRecvPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6MultiPktsRecvPerIf.setStatus('current')
smfPerfIpv6MultiPktsForwardedPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6MultiPktsForwardedPerIf.setStatus('current')
smfPerfIpv6DuplMultiPktsDetectedPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6DuplMultiPktsDetectedPerIf.setStatus('current')
smfPerfIpv6DroppedMultiPktsTTLExceededPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6DroppedMultiPktsTTLExceededPerIf.setStatus('current')
smfPerfIpv6TTLLargerThanPreviousPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6TTLLargerThanPreviousPerIf.setStatus('current')
smfPerfIpv6HAVAssistsReqdPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6HAVAssistsReqdPerIf.setStatus('current')
smfPerfIpv6DpdHeaderInsertionsPerIf = MibTableColumn((1, 3, 6, 1, 3, 126, 1, 4, 2, 2, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: smfPerfIpv6DpdHeaderInsertionsPerIf.setStatus('current')
smfMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 3, 126, 0, 0))
smfMIBNotifControl = MibIdentifier((1, 3, 6, 1, 3, 126, 0, 1))
smfNotifAdminStatusChange = NotificationType((1, 3, 6, 1, 3, 126, 0, 0, 1)).setObjects(("SMF-MIB", "smfCfgRouterIDAddrType"), ("SMF-MIB", "smfCfgRouterID"), ("SMF-MIB", "smfCfgAdminStatus"))
if mibBuilder.loadTexts: smfNotifAdminStatusChange.setStatus('current')
smfNotifConfiguredOpModeChange = NotificationType((1, 3, 6, 1, 3, 126, 0, 0, 2)).setObjects(("SMF-MIB", "smfCfgRouterIDAddrType"), ("SMF-MIB", "smfCfgRouterID"), ("SMF-MIB", "smfCfgOperationalMode"))
if mibBuilder.loadTexts: smfNotifConfiguredOpModeChange.setStatus('current')
smfNotifIfAdminStatusChange = NotificationType((1, 3, 6, 1, 3, 126, 0, 0, 3)).setObjects(("SMF-MIB", "smfCfgRouterIDAddrType"), ("SMF-MIB", "smfCfgRouterID"), ("IF-MIB", "ifName"), ("SMF-MIB", "smfCfgIfAdminStatus"))
if mibBuilder.loadTexts: smfNotifIfAdminStatusChange.setStatus('current')
smfNotifDpdMemoryOverflowEvent = NotificationType((1, 3, 6, 1, 3, 126, 0, 0, 4)).setObjects(("SMF-MIB", "smfCfgRouterIDAddrType"), ("SMF-MIB", "smfCfgRouterID"), ("SMF-MIB", "smfStateDpdMemoryOverflow"))
if mibBuilder.loadTexts: smfNotifDpdMemoryOverflowEvent.setStatus('current')
smfNotifDpdMemoryOverflowThreshold = MibScalar((1, 3, 6, 1, 3, 126, 0, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setUnits('Events').setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfNotifDpdMemoryOverflowThreshold.setStatus('current')
smfNotifDpdMemoryOverflowWindow = MibScalar((1, 3, 6, 1, 3, 126, 0, 1, 2), TimeTicks().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smfNotifDpdMemoryOverflowWindow.setStatus('current')
smfCompliances = MibIdentifier((1, 3, 6, 1, 3, 126, 2, 1))
smfMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 126, 2, 2))
smfBasicCompliance = ModuleCompliance((1, 3, 6, 1, 3, 126, 2, 1, 1)).setObjects(("SMF-MIB", "smfCapabObjectsGroup"), ("SMF-MIB", "smfConfigObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfBasicCompliance = smfBasicCompliance.setStatus('current')
smfFullCompliance = ModuleCompliance((1, 3, 6, 1, 3, 126, 2, 1, 2)).setObjects(("SMF-MIB", "smfCapabObjectsGroup"), ("SMF-MIB", "smfConfigObjectsGroup"), ("SMF-MIB", "smfStateObjectsGroup"), ("SMF-MIB", "smfPerfObjectsGroup"), ("SMF-MIB", "smfNotifObjectsGroup"), ("SMF-MIB", "smfNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfFullCompliance = smfFullCompliance.setStatus('current')
smfCapabObjectsGroup = ObjectGroup((1, 3, 6, 1, 3, 126, 2, 2, 1)).setObjects(("SMF-MIB", "smfCapabilitiesOpModeID"), ("SMF-MIB", "smfCapabilitiesRssaID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfCapabObjectsGroup = smfCapabObjectsGroup.setStatus('current')
smfConfigObjectsGroup = ObjectGroup((1, 3, 6, 1, 3, 126, 2, 2, 2)).setObjects(("SMF-MIB", "smfCfgAdminStatus"), ("SMF-MIB", "smfCfgSmfSysUpTime"), ("SMF-MIB", "smfCfgRouterIDAddrType"), ("SMF-MIB", "smfCfgRouterID"), ("SMF-MIB", "smfCfgOperationalMode"), ("SMF-MIB", "smfCfgRssaMember"), ("SMF-MIB", "smfCfgIpv4Dpd"), ("SMF-MIB", "smfCfgIpv6Dpd"), ("SMF-MIB", "smfCfgMaxPktLifetime"), ("SMF-MIB", "smfCfgDpdEntryMaxLifetime"), ("SMF-MIB", "smfCfgNhdpRssaMesgTLVIncluded"), ("SMF-MIB", "smfCfgNhdpRssaAddrBlockTLVIncluded"), ("SMF-MIB", "smfCfgAddrForwardingGroupName"), ("SMF-MIB", "smfCfgAddrForwardingAddrType"), ("SMF-MIB", "smfCfgAddrForwardingAddress"), ("SMF-MIB", "smfCfgAddrForwardingAddrPrefixLength"), ("SMF-MIB", "smfCfgAddrForwardingStatus"), ("SMF-MIB", "smfCfgIfAdminStatus"), ("SMF-MIB", "smfCfgIfSmfUpTime"), ("SMF-MIB", "smfCfgIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfConfigObjectsGroup = smfConfigObjectsGroup.setStatus('current')
smfStateObjectsGroup = ObjectGroup((1, 3, 6, 1, 3, 126, 2, 2, 3)).setObjects(("SMF-MIB", "smfStateNodeRsStatusIncluded"), ("SMF-MIB", "smfStateDpdMemoryOverflow"), ("SMF-MIB", "smfStateNeighborRSSA"), ("SMF-MIB", "smfStateNeighborNextHopInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfStateObjectsGroup = smfStateObjectsGroup.setStatus('current')
smfPerfObjectsGroup = ObjectGroup((1, 3, 6, 1, 3, 126, 2, 2, 4)).setObjects(("SMF-MIB", "smfPerfIpv4MultiPktsRecvTotal"), ("SMF-MIB", "smfPerfIpv4MultiPktsForwardedTotal"), ("SMF-MIB", "smfPerfIpv4DuplMultiPktsDetectedTotal"), ("SMF-MIB", "smfPerfIpv4DroppedMultiPktsTTLExceededTotal"), ("SMF-MIB", "smfPerfIpv4TTLLargerThanPreviousTotal"), ("SMF-MIB", "smfPerfIpv6MultiPktsRecvTotal"), ("SMF-MIB", "smfPerfIpv6MultiPktsForwardedTotal"), ("SMF-MIB", "smfPerfIpv6DuplMultiPktsDetectedTotal"), ("SMF-MIB", "smfPerfIpv6DroppedMultiPktsTTLExceededTotal"), ("SMF-MIB", "smfPerfIpv6TTLLargerThanPreviousTotal"), ("SMF-MIB", "smfPerfIpv6HAVAssistsReqdTotal"), ("SMF-MIB", "smfPerfIpv6DpdHeaderInsertionsTotal"), ("SMF-MIB", "smfPerfIpv4MultiPktsRecvPerIf"), ("SMF-MIB", "smfPerfIpv4MultiPktsForwardedPerIf"), ("SMF-MIB", "smfPerfIpv4DuplMultiPktsDetectedPerIf"), ("SMF-MIB", "smfPerfIpv4DroppedMultiPktsTTLExceededPerIf"), ("SMF-MIB", "smfPerfIpv4TTLLargerThanPreviousPerIf"), ("SMF-MIB", "smfPerfIpv6MultiPktsRecvPerIf"), ("SMF-MIB", "smfPerfIpv6MultiPktsForwardedPerIf"), ("SMF-MIB", "smfPerfIpv6DuplMultiPktsDetectedPerIf"), ("SMF-MIB", "smfPerfIpv6DroppedMultiPktsTTLExceededPerIf"), ("SMF-MIB", "smfPerfIpv6TTLLargerThanPreviousPerIf"), ("SMF-MIB", "smfPerfIpv6HAVAssistsReqdPerIf"), ("SMF-MIB", "smfPerfIpv6DpdHeaderInsertionsPerIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfPerfObjectsGroup = smfPerfObjectsGroup.setStatus('current')
smfNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 3, 126, 2, 2, 5)).setObjects(("SMF-MIB", "smfNotifDpdMemoryOverflowThreshold"), ("SMF-MIB", "smfNotifDpdMemoryOverflowWindow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfNotifObjectsGroup = smfNotifObjectsGroup.setStatus('current')
smfNotificationsGroup = NotificationGroup((1, 3, 6, 1, 3, 126, 2, 2, 6)).setObjects(("SMF-MIB", "smfNotifAdminStatusChange"), ("SMF-MIB", "smfNotifConfiguredOpModeChange"), ("SMF-MIB", "smfNotifIfAdminStatusChange"), ("SMF-MIB", "smfNotifDpdMemoryOverflowEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smfNotificationsGroup = smfNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("SMF-MIB", smfPerfIpv6TTLLargerThanPreviousPerIf=smfPerfIpv6TTLLargerThanPreviousPerIf, smfPerfIpv6InterfacePerfEntry=smfPerfIpv6InterfacePerfEntry, smfNotifConfiguredOpModeChange=smfNotifConfiguredOpModeChange, smfPerfGobalGroup=smfPerfGobalGroup, smfCfgNhdpRssaAddrBlockTLVIncluded=smfCfgNhdpRssaAddrBlockTLVIncluded, smfMIBNotifObjects=smfMIBNotifObjects, smfNotificationsGroup=smfNotificationsGroup, smfCfgAddrForwardingAddrPrefixLength=smfCfgAddrForwardingAddrPrefixLength, smfPerfIpv6DuplMultiPktsDetectedTotal=smfPerfIpv6DuplMultiPktsDetectedTotal, smfConfigurationGroup=smfConfigurationGroup, smfStateNeighborRSSA=smfStateNeighborRSSA, smfMIBConformance=smfMIBConformance, smfMIBNotifControl=smfMIBNotifControl, smfNotifObjectsGroup=smfNotifObjectsGroup, smfStateDpdMemoryOverflow=smfStateDpdMemoryOverflow, smfCfgIpv6Dpd=smfCfgIpv6Dpd, smfNotifAdminStatusChange=smfNotifAdminStatusChange, smfPerfIpv4DuplMultiPktsDetectedTotal=smfPerfIpv4DuplMultiPktsDetectedTotal, smfCfgIfAdminStatus=smfCfgIfAdminStatus, smfCfgNhdpRssaMesgTLVIncluded=smfCfgNhdpRssaMesgTLVIncluded, smfCfgSmfSysUpTime=smfCfgSmfSysUpTime, smfCfgAddrForwardingStatus=smfCfgAddrForwardingStatus, smfBasicCompliance=smfBasicCompliance, smfPerfIpv6MultiPktsForwardedTotal=smfPerfIpv6MultiPktsForwardedTotal, smfCapabObjectsGroup=smfCapabObjectsGroup, smfStateNeighborNextHopInterface=smfStateNeighborNextHopInterface, smfStateNeighborTable=smfStateNeighborTable, smfNotifDpdMemoryOverflowEvent=smfNotifDpdMemoryOverflowEvent, smfPerfIpv6HAVAssistsReqdPerIf=smfPerfIpv6HAVAssistsReqdPerIf, smfCfgInterfaceEntry=smfCfgInterfaceEntry, smfCfgAddrForwardingGroupName=smfCfgAddrForwardingGroupName, smfCapabilitiesRssaID=smfCapabilitiesRssaID, smfNotifIfAdminStatusChange=smfNotifIfAdminStatusChange, smfCapabilitiesTable=smfCapabilitiesTable, SmfStatus=SmfStatus, smfCfgMaxPktLifetime=smfCfgMaxPktLifetime, smfCfgRouterIDAddrType=smfCfgRouterIDAddrType, smfPerfIpv4MultiPktsRecvPerIf=smfPerfIpv4MultiPktsRecvPerIf, smfCfgRouterID=smfCfgRouterID, smfCfgAddrForwardingIndex=smfCfgAddrForwardingIndex, smfPerfIpv4TTLLargerThanPreviousPerIf=smfPerfIpv4TTLLargerThanPreviousPerIf, smfNotifDpdMemoryOverflowWindow=smfNotifDpdMemoryOverflowWindow, smfCfgRssaMember=smfCfgRssaMember, smfStateObjectsGroup=smfStateObjectsGroup, smfCapabilitiesEntry=smfCapabilitiesEntry, smfCfgDpdEntryMaxLifetime=smfCfgDpdEntryMaxLifetime, smfPerformanceGroup=smfPerformanceGroup, smfMIBNotifications=smfMIBNotifications, smfPerfIpv6DpdHeaderInsertionsPerIf=smfPerfIpv6DpdHeaderInsertionsPerIf, smfPerfIpv6DpdHeaderInsertionsTotal=smfPerfIpv6DpdHeaderInsertionsTotal, smfStateNeighborEntry=smfStateNeighborEntry, smfPerfIpv4TTLLargerThanPreviousTotal=smfPerfIpv4TTLLargerThanPreviousTotal, smfCapabilitiesIndex=smfCapabilitiesIndex, smfPerfIpv6InterfacePerfTable=smfPerfIpv6InterfacePerfTable, smfCompliances=smfCompliances, smfNotifDpdMemoryOverflowThreshold=smfNotifDpdMemoryOverflowThreshold, smfPerfIpv4MultiPktsRecvTotal=smfPerfIpv4MultiPktsRecvTotal, smfStateNeighborIpAddr=smfStateNeighborIpAddr, smfCfgInterfaceTable=smfCfgInterfaceTable, smfCfgIfRowStatus=smfCfgIfRowStatus, smfStateGroup=smfStateGroup, smfCapabilitiesOpModeID=smfCapabilitiesOpModeID, smfPerfIpv6DuplMultiPktsDetectedPerIf=smfPerfIpv6DuplMultiPktsDetectedPerIf, smfPerfIpv6DroppedMultiPktsTTLExceededTotal=smfPerfIpv6DroppedMultiPktsTTLExceededTotal, smfCfgOperationalMode=smfCfgOperationalMode, smfMIB=smfMIB, smfPerfIpv4DroppedMultiPktsTTLExceededTotal=smfPerfIpv4DroppedMultiPktsTTLExceededTotal, smfCfgIfSmfUpTime=smfCfgIfSmfUpTime, smfPerfObjectsGroup=smfPerfObjectsGroup, PYSNMP_MODULE_ID=smfMIB, smfCfgIfIndex=smfCfgIfIndex, smfPerfIpv6MultiPktsRecvPerIf=smfPerfIpv6MultiPktsRecvPerIf, smfCfgAddrForwardingAddress=smfCfgAddrForwardingAddress, smfPerfInterfaceGroup=smfPerfInterfaceGroup, smfCfgIpv4Dpd=smfCfgIpv4Dpd, smfMIBGroups=smfMIBGroups, smfPerfIpv6MultiPktsRecvTotal=smfPerfIpv6MultiPktsRecvTotal, smfCfgAdminStatus=smfCfgAdminStatus, smfPerfIpv4MultiPktsForwardedTotal=smfPerfIpv4MultiPktsForwardedTotal, smfCfgAddrForwardingEntry=smfCfgAddrForwardingEntry, smfPerfIpv4DuplMultiPktsDetectedPerIf=smfPerfIpv4DuplMultiPktsDetectedPerIf, smfPerfIpv4MultiPktsForwardedPerIf=smfPerfIpv4MultiPktsForwardedPerIf, smfFullCompliance=smfFullCompliance, smfPerfIpv6TTLLargerThanPreviousTotal=smfPerfIpv6TTLLargerThanPreviousTotal, smfPerfIpv4InterfacePerfTable=smfPerfIpv4InterfacePerfTable, smfStateNeighborPrefixLen=smfStateNeighborPrefixLen, smfPerfIpv4DroppedMultiPktsTTLExceededPerIf=smfPerfIpv4DroppedMultiPktsTTLExceededPerIf, smfMIBObjects=smfMIBObjects, smfCfgAddrForwardingAddrType=smfCfgAddrForwardingAddrType, smfPerfIpv6MultiPktsForwardedPerIf=smfPerfIpv6MultiPktsForwardedPerIf, smfStateNeighborIpAddrType=smfStateNeighborIpAddrType, smfCfgAddrForwardingTable=smfCfgAddrForwardingTable, smfPerfIpv6HAVAssistsReqdTotal=smfPerfIpv6HAVAssistsReqdTotal, smfCapabilitiesGroup=smfCapabilitiesGroup, smfStateNodeRsStatusIncluded=smfStateNodeRsStatusIncluded, smfPerfIpv6DroppedMultiPktsTTLExceededPerIf=smfPerfIpv6DroppedMultiPktsTTLExceededPerIf, smfConfigObjectsGroup=smfConfigObjectsGroup, smfPerfIpv4InterfacePerfEntry=smfPerfIpv4InterfacePerfEntry)
