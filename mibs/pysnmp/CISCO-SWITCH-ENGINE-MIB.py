#
# PySNMP MIB module CISCO-SWITCH-ENGINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-ENGINE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, CiscoNetworkProtocol = mibBuilder.importSymbols("CISCO-TC", "CiscoPort", "CiscoNetworkProtocol")
VlanIndex, = mibBuilder.importSymbols("CISCO-VTP-MIB", "VlanIndex")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
OwnerString, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "OwnerString", "ifIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
MplsVpnId, = mibBuilder.importSymbols("MPLS-VPN-MIB", "MplsVpnId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, ModuleIdentity, Bits, Gauge32, Integer32, MibIdentifier, TimeTicks, ObjectIdentity, Counter32, Counter64, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Bits", "Gauge32", "Integer32", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Counter32", "Counter64", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TruthValue, TimeStamp, MacAddress, RowStatus, TextualConvention, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeStamp", "MacAddress", "RowStatus", "TextualConvention", "TimeInterval")
ciscoSwitchEngineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 97))
ciscoSwitchEngineMIB.setRevisions(('2013-02-13 00:00', '2012-03-12 00:00', '2010-12-17 00:00', '2008-11-11 00:00', '2008-01-29 00:00', '2005-09-16 00:00', '2005-04-12 00:00', '2004-11-15 00:00', '2004-06-09 00:00', '2003-11-07 00:00', '2003-08-20 00:00', '2003-06-10 00:00', '2003-05-06 00:00', '2003-02-21 00:00', '2002-08-05 00:00', '2002-02-07 00:00', '2001-10-26 00:00', '2001-09-13 00:00', '2001-05-16 00:00', '2001-03-09 00:00', '2000-06-23 00:00', '2000-01-31 11:30', '1999-12-09 11:30', '1998-06-24 11:30', '1998-05-28 11:30',))
if mibBuilder.loadTexts: ciscoSwitchEngineMIB.setLastUpdated('201302130000Z')
if mibBuilder.loadTexts: ciscoSwitchEngineMIB.setOrganization('Cisco Systems Inc.')
cseMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1))
cseL2Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1))
cseFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2))
cseNetflowLS = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3))
cseL3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4))
cseProtocolFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 5))
cseUcastCache = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6))
cseMcastCache = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7))
cseCef = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8))
cseTcamUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 9))
cseMet = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 10))
class CiscoGauge64(TextualConvention, Counter64):
    status = 'current'

class ControlStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class McastGroupIp(TextualConvention, IpAddress):
    status = 'current'
    displayHint = '1d.1d.1d.1d'

class FlowAddressComponent(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(10, 10), )
cseL2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1), )
if mibBuilder.loadTexts: cseL2StatsTable.setStatus('current')
cseL2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cseL2StatsEntry.setStatus('current')
cseL2ForwardedLocalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2ForwardedLocalPkts.setStatus('current')
cseL2ForwardedLocalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2ForwardedLocalOctets.setStatus('current')
cseL2ForwardedTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2ForwardedTotalPkts.setStatus('current')
cseL2NewAddressLearns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2NewAddressLearns.setStatus('current')
cseL2AddrLearnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2AddrLearnFailures.setStatus('current')
cseL2DstAddrLookupMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2DstAddrLookupMisses.setStatus('current')
cseL2IpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2IpPkts.setStatus('current')
cseL2IpxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2IpxPkts.setStatus('current')
cseL2AssignedProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2AssignedProtoPkts.setStatus('current')
cseL2OtherProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2OtherProtoPkts.setStatus('current')
cseL2StatsHCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2), )
if mibBuilder.loadTexts: cseL2StatsHCTable.setStatus('current')
cseL2StatsHCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cseL2StatsHCEntry.setStatus('current')
cseL2HCOverflowForwardedLocalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCOverflowForwardedLocalPkts.setStatus('current')
cseL2HCForwardedLocalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCForwardedLocalPkts.setStatus('current')
cseL2HCOverflowForwardedTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCOverflowForwardedTotalPkts.setStatus('current')
cseL2HCForwardedTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCForwardedTotalPkts.setStatus('current')
cseL2HCOverflowIpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCOverflowIpPkts.setStatus('current')
cseL2HCIpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCIpPkts.setStatus('current')
cseL2HCOverflowIpxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCOverflowIpxPkts.setStatus('current')
cseL2HCIpxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCIpxPkts.setStatus('current')
cseL2HCOverflowAssignedProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCOverflowAssignedProtoPkts.setStatus('current')
cseL2HCAssignedProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCAssignedProtoPkts.setStatus('current')
cseL2HCOverflowOtherProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCOverflowOtherProtoPkts.setStatus('current')
cseL2HCOtherProtoPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL2HCOtherProtoPkts.setStatus('current')
cseFlowEstablishedAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowEstablishedAgingTime.setStatus('current')
cseFlowFastAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowFastAgingTime.setStatus('current')
cseFlowFastAgePktThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 3), Unsigned32()).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowFastAgePktThreshold.setStatus('current')
cseRouterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 4), )
if mibBuilder.loadTexts: cseRouterTable.setStatus('current')
cseRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseRouterIndex"))
if mibBuilder.loadTexts: cseRouterEntry.setStatus('current')
cseRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: cseRouterIndex.setStatus('current')
cseRouterFlowMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dstOnly", 1), ("srcDst", 2), ("fullFlow", 3), ("notApplicable", 4), ("srcDstVlan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseRouterFlowMask.setStatus('current')
cseRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseRouterName.setStatus('current')
cseRouterStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseRouterStatic.setStatus('current')
cseRouterIpxFlowMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dstOnly", 1), ("srcDst", 2), ("fullFlow", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseRouterIpxFlowMask.setStatus('current')
cseStaticExtRouterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 5), )
if mibBuilder.loadTexts: cseStaticExtRouterTable.setStatus('current')
cseStaticExtRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseRouterIndex"))
if mibBuilder.loadTexts: cseStaticExtRouterEntry.setStatus('current')
cseStaticRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseStaticRouterName.setStatus('current')
cseStaticRouterOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 5, 1, 2), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseStaticRouterOwner.setStatus('current')
cseStaticRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseStaticRouterStatus.setStatus('current')
cseStaticRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 5, 1, 4), Bits().clone(namedValues=NamedValues(("unicast", 0), ("multicast", 1))).clone(namedValues=NamedValues(("unicast", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseStaticRouterType.setStatus('current')
cseRouterVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 6), )
if mibBuilder.loadTexts: cseRouterVlanTable.setStatus('current')
cseRouterVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseRouterIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseRouterMac"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseRouterVlan"))
if mibBuilder.loadTexts: cseRouterVlanEntry.setStatus('current')
cseRouterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseRouterMac.setStatus('current')
cseRouterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 6, 1, 2), VlanIndex())
if mibBuilder.loadTexts: cseRouterVlan.setStatus('current')
cseRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 6, 1, 3), Bits().clone(namedValues=NamedValues(("ip", 0), ("ipx", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseRouterProtocol.setStatus('current')
cseFlowMaxQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMaxQueries.setStatus('current')
cseFlowQueryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8), )
if mibBuilder.loadTexts: cseFlowQueryTable.setStatus('current')
cseFlowQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryIndex"))
if mibBuilder.loadTexts: cseFlowQueryEntry.setStatus('current')
cseFlowQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseFlowQueryIndex.setStatus('current')
cseFlowQueryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dstOnly", 1), ("srcOrDst", 2), ("srcAndDst", 3), ("fullFlow", 4), ("ipxDstOnly", 5), ("ipxSrcAndDst", 6), ("any", 7))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQueryMask.setStatus('current')
cseFlowQueryTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 3), Bits().clone(namedValues=NamedValues(("udp", 0), ("tcp", 1))).clone(namedValues=NamedValues(("udp", 0), ("tcp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQueryTransport.setStatus('current')
cseFlowQuerySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 4), FlowAddressComponent().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQuerySource.setStatus('current')
cseFlowQuerySourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 5), FlowAddressComponent().clone(hexValue="FFFFFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQuerySourceMask.setStatus('current')
cseFlowQueryDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 6), FlowAddressComponent().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQueryDestination.setStatus('current')
cseFlowQueryDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 7), FlowAddressComponent().clone(hexValue="FFFFFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQueryDestinationMask.setStatus('current')
cseFlowQueryRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQueryRouterIndex.setStatus('current')
cseFlowQueryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 9), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQueryOwner.setStatus('current')
cseFlowQueryResultingRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowQueryResultingRows.setStatus('current')
cseFlowQueryResultTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 11), CiscoGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowQueryResultTotalPkts.setStatus('current')
cseFlowQueryResultTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 12), CiscoGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowQueryResultTotalOctets.setStatus('current')
cseFlowQueryResultAvgDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowQueryResultAvgDuration.setStatus('current')
cseFlowQueryResultAvgIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 14), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowQueryResultAvgIdle.setStatus('current')
cseFlowQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQueryStatus.setStatus('current')
cseFlowQueryCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowQueryCreateTime.setStatus('current')
cseFlowQueryTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowQueryTotalFlows.setStatus('current')
cseFlowQuerySkipNFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowQuerySkipNFlows.setStatus('current')
cseFlowDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9), )
if mibBuilder.loadTexts: cseFlowDataTable.setStatus('current')
cseFlowDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowDataIndex"))
if mibBuilder.loadTexts: cseFlowDataEntry.setStatus('current')
cseFlowDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseFlowDataIndex.setStatus('current')
cseFlowDataSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataSrcMac.setStatus('current')
cseFlowDataDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataDstMac.setStatus('current')
cseFlowDataStaticFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataStaticFlow.setStatus('current')
cseFlowDataEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ipArpa", 1), ("ipxEthernet", 2), ("ipx802raw", 3), ("ipx802sap", 4), ("ipx802snap", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataEncapType.setStatus('current')
cseFlowDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 6), FlowAddressComponent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataSource.setStatus('current')
cseFlowDataDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 7), FlowAddressComponent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataDestination.setStatus('current')
cseFlowDataDestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 8), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataDestVlan.setStatus('current')
cseFlowDataIpQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataIpQOS.setStatus('current')
cseFlowDataIpQOSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataIpQOSPolicy.setStatus('current')
cseFlowDataWhenCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataWhenCreated.setStatus('current')
cseFlowDataLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataLastUsed.setStatus('current')
cseFlowDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataPkts.setStatus('current')
cseFlowDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 9, 1, 14), CiscoGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowDataOctets.setStatus('current')
cseFlowSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 10), )
if mibBuilder.loadTexts: cseFlowSwitchControlTable.setStatus('current')
cseFlowSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 10, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowSwitchProtocol"))
if mibBuilder.loadTexts: cseFlowSwitchControlEntry.setStatus('current')
cseFlowSwitchProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 10, 1, 1), CiscoNetworkProtocol())
if mibBuilder.loadTexts: cseFlowSwitchProtocol.setStatus('current')
cseFlowSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 10, 1, 2), ControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowSwitchStatus.setStatus('current')
cseFlowMcastMaxQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastMaxQueries.setStatus('current')
cseFlowMcastQueryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12), )
if mibBuilder.loadTexts: cseFlowMcastQueryTable.setStatus('current')
cseFlowMcastQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryIndex"))
if mibBuilder.loadTexts: cseFlowMcastQueryEntry.setStatus('current')
cseFlowMcastQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseFlowMcastQueryIndex.setStatus('current')
cseFlowMcastQueryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 2), Bits().clone(namedValues=NamedValues(("source", 0), ("group", 1), ("vlan", 2), ("router", 3), ("mvrf", 4), ("sourceip", 5), ("groupip", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryMask.setStatus('current')
cseFlowMcastQuerySrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQuerySrc.setStatus('deprecated')
cseFlowMcastQueryGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 4), McastGroupIp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryGrp.setStatus('deprecated')
cseFlowMcastQuerySrcVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 5), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQuerySrcVlan.setStatus('current')
cseFlowMcastQueryRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryRtrIndex.setStatus('current')
cseFlowMcastQuerySkipNFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQuerySkipNFlows.setStatus('current')
cseFlowMcastQueryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 8), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryOwner.setStatus('current')
cseFlowMcastQueryTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastQueryTotalFlows.setStatus('current')
cseFlowMcastQueryRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastQueryRows.setStatus('current')
cseFlowMcastQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryStatus.setStatus('current')
cseFlowMcastQueryCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastQueryCreateTime.setStatus('current')
cseFlowMcastQueryMvrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 13), MplsVpnId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryMvrf.setStatus('current')
cseFlowMcastQueryAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 14), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryAddrType.setStatus('current')
cseFlowMcastQuerySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 15), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQuerySource.setStatus('current')
cseFlowMcastQueryGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 12, 1, 16), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowMcastQueryGroup.setStatus('current')
cseFlowMcastResultTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13), )
if mibBuilder.loadTexts: cseFlowMcastResultTable.setStatus('current')
cseFlowMcastResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryIndex"), (0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultIndex"))
if mibBuilder.loadTexts: cseFlowMcastResultEntry.setStatus('current')
cseFlowMcastResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cseFlowMcastResultIndex.setStatus('current')
cseFlowMcastResultGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 2), McastGroupIp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultGrp.setStatus('deprecated')
cseFlowMcastResultSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultSrc.setStatus('deprecated')
cseFlowMcastResultSrcVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 4), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultSrcVlan.setStatus('current')
cseFlowMcastResultRtrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultRtrIp.setStatus('current')
cseFlowMcastResultRtrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultRtrMac.setStatus('current')
cseFlowMcastResultCreatedTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultCreatedTS.setStatus('current')
cseFlowMcastResultLastUsedTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultLastUsedTS.setStatus('current')
cseFlowMcastResultPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultPkts.setStatus('current')
cseFlowMcastResultOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultOctets.setStatus('current')
cseFlowMcastResultDstVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultDstVlans.setStatus('current')
cseFlowMcastResultDstVlans2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultDstVlans2k.setStatus('current')
cseFlowMcastResultDstVlans3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultDstVlans3k.setStatus('current')
cseFlowMcastResultDstVlans4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultDstVlans4k.setStatus('current')
cseFlowMcastResultMvrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 15), MplsVpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultMvrf.setStatus('current')
cseFlowMcastResultAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 16), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultAddrType.setStatus('current')
cseFlowMcastResultGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 17), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultGroup.setStatus('current')
cseFlowMcastResultSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultSource.setStatus('current')
cseFlowMcastResultFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rpfMfd", 2), ("partialSC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultFlowType.setStatus('current')
cseFlowMcastResultHFlag1k2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultHFlag1k2k.setStatus('current')
cseFlowMcastResultHFlag3k4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 13, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowMcastResultHFlag3k4k.setStatus('current')
cseFlowMcastSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 14), ControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowMcastSwitchStatus.setStatus('current')
cseFlowIPXEstablishedAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowIPXEstablishedAgingTime.setStatus('current')
cseStaticIpxExtRouterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 16), )
if mibBuilder.loadTexts: cseStaticIpxExtRouterTable.setStatus('current')
cseStaticIpxExtRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 16, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseRouterIndex"))
if mibBuilder.loadTexts: cseStaticIpxExtRouterEntry.setStatus('current')
cseStaticIpxRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseStaticIpxRouterName.setStatus('current')
cseStaticIpxRouterOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 16, 1, 2), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseStaticIpxRouterOwner.setStatus('current')
cseStaticIpxRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 16, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseStaticIpxRouterStatus.setStatus('current')
cseFlowOperEstablishedAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowOperEstablishedAgingTime.setStatus('current')
cseFlowOperFastAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 18), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowOperFastAgingTime.setStatus('current')
cseFlowOperFastAgePktThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 19), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowOperFastAgePktThreshold.setStatus('current')
cseFlowOperIPXAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowOperIPXAgingTime.setStatus('current')
cseBridgedFlowStatsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 21), )
if mibBuilder.loadTexts: cseBridgedFlowStatsCtrlTable.setStatus('current')
cseBridgedFlowStatsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 21, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseBridgedFlowVlan"))
if mibBuilder.loadTexts: cseBridgedFlowStatsCtrlEntry.setStatus('current')
cseBridgedFlowVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 21, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cseBridgedFlowVlan.setStatus('current')
cseFlowBridgedFlowStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 21, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowBridgedFlowStatsEnable.setStatus('current')
cseFlowIPFlowMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dstOnly", 1), ("srcDst", 2), ("fullFlow", 3), ("srcOnly", 4), ("intDstSrc", 5), ("intFull", 6), ("null", 7), ("intDstOnly", 8), ("intSrcOnly", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowIPFlowMask.setStatus('current')
cseFlowIPXFlowMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dstOnly", 1), ("srcDst", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowIPXFlowMask.setStatus('current')
cseFlowLongAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 24), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseFlowLongAgingTime.setStatus('current')
cseFlowExcludeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 25), )
if mibBuilder.loadTexts: cseFlowExcludeTable.setStatus('current')
cseFlowExcludeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 25, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseFlowExcludePort"))
if mibBuilder.loadTexts: cseFlowExcludeEntry.setStatus('current')
cseFlowExcludePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 25, 1, 1), CiscoPort())
if mibBuilder.loadTexts: cseFlowExcludePort.setStatus('current')
cseFlowExcludeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowExcludeProtocol.setStatus('current')
cseFlowExcludeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 25, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseFlowExcludeStatus.setStatus('current')
cseFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 26), )
if mibBuilder.loadTexts: cseFlowStatsTable.setStatus('current')
cseFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 26, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cseFlowStatsEntry.setStatus('current')
cseFlowTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 26, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowTotalFlows.setStatus('current')
cseFlowTotalIpv4Flows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 2, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseFlowTotalIpv4Flows.setStatus('current')
cseNetflowLSExportStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 1), ControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportStatus.setStatus('current')
cseNetflowLSExportHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportHost.setStatus('deprecated')
cseNetflowLSExportTransportNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportTransportNumber.setStatus('deprecated')
cseNetflowLSExportDataSource = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 4), FlowAddressComponent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportDataSource.setStatus('current')
cseNetflowLSExportDataSourceMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 5), FlowAddressComponent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportDataSourceMask.setStatus('current')
cseNetflowLSExportDataDest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 6), FlowAddressComponent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportDataDest.setStatus('current')
cseNetflowLSExportDataDestMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 7), FlowAddressComponent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportDataDestMask.setStatus('current')
cseNetflowLSExportDataProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportDataProtocol.setStatus('current')
cseNetflowLSExportDataFilterSelection = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportDataFilterSelection.setStatus('current')
cseNetflowLSExportNDEVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowLSExportNDEVersionNumber.setStatus('current')
cseNetflowLSFilterSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseNetflowLSFilterSupport.setStatus('current')
cseNetflowLSFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12), )
if mibBuilder.loadTexts: cseNetflowLSFilterTable.setStatus('current')
cseNetflowLSFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterIndex"))
if mibBuilder.loadTexts: cseNetflowLSFilterEntry.setStatus('current')
cseNetflowLSFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseNetflowLSFilterIndex.setStatus('current')
cseNetflowLSFilterDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 2), FlowAddressComponent().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseNetflowLSFilterDataSource.setStatus('current')
cseNetflowLSFilterDataSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 3), FlowAddressComponent().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseNetflowLSFilterDataSourceMask.setStatus('current')
cseNetflowLSFilterDataDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 4), FlowAddressComponent().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseNetflowLSFilterDataDest.setStatus('current')
cseNetflowLSFilterDataDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 5), FlowAddressComponent().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseNetflowLSFilterDataDestMask.setStatus('current')
cseNetflowLSFilterDataProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseNetflowLSFilterDataProtocol.setStatus('current')
cseNetflowLSFilterSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseNetflowLSFilterSelection.setStatus('current')
cseNetflowLSFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 12, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseNetflowLSFilterStatus.setStatus('current')
cseNetFlowIfIndexEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 13), Bits().clone(namedValues=NamedValues(("destIfIndex", 0), ("srcIfIndex", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetFlowIfIndexEnable.setStatus('current')
cseNetflowASInfoExportCtrl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("originate", 2), ("peer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowASInfoExportCtrl.setStatus('current')
cseNetflowPerVlanIfGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowPerVlanIfGlobalEnable.setStatus('current')
cseNetflowPerVlanIfCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 16), )
if mibBuilder.loadTexts: cseNetflowPerVlanIfCtrlTable.setStatus('current')
cseNetflowPerVlanIfCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 16, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseNetflowPerVlanIfCtrlVlan"))
if mibBuilder.loadTexts: cseNetflowPerVlanIfCtrlEntry.setStatus('current')
cseNetflowPerVlanIfCtrlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 16, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cseNetflowPerVlanIfCtrlVlan.setStatus('current')
cseNetflowPerVlanIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 3, 16, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseNetflowPerVlanIfEnable.setStatus('current')
cseL3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1), )
if mibBuilder.loadTexts: cseL3StatsTable.setStatus('current')
cseL3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cseL3StatsEntry.setStatus('current')
cseL3SwitchedTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3SwitchedTotalPkts.setStatus('current')
cseL3SwitchedTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3SwitchedTotalOctets.setStatus('current')
cseL3CandidateFlowHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3CandidateFlowHits.setStatus('current')
cseL3EstablishedFlowHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3EstablishedFlowHits.setStatus('current')
cseL3ActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3ActiveFlows.setStatus('current')
cseL3FlowLearnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3FlowLearnFailures.setStatus('current')
cseL3IntFlowInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3IntFlowInvalids.setStatus('current')
cseL3ExtFlowInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3ExtFlowInvalids.setStatus('current')
cseL3SwitchedPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3SwitchedPktsPerSec.setStatus('current')
cseL3VlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2), )
if mibBuilder.loadTexts: cseL3VlanStatsTable.setStatus('current')
cseL3VlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseL3VlanIndex"))
if mibBuilder.loadTexts: cseL3VlanStatsEntry.setStatus('current')
cseL3VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cseL3VlanIndex.setStatus('current')
cseL3VlanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanInPkts.setStatus('current')
cseL3VlanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanInOctets.setStatus('current')
cseL3VlanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanOutPkts.setStatus('current')
cseL3VlanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanOutOctets.setStatus('current')
cseL3VlanInUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanInUnicastPkts.setStatus('current')
cseL3VlanInUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanInUnicastOctets.setStatus('current')
cseL3VlanOutUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanOutUnicastPkts.setStatus('current')
cseL3VlanOutUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3VlanOutUnicastOctets.setStatus('current')
cseStatsFlowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 3), )
if mibBuilder.loadTexts: cseStatsFlowTable.setStatus('current')
cseStatsFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 3, 1), )
cseL3StatsEntry.registerAugmentions(("CISCO-SWITCH-ENGINE-MIB", "cseStatsFlowEntry"))
cseStatsFlowEntry.setIndexNames(*cseL3StatsEntry.getIndexNames())
if mibBuilder.loadTexts: cseStatsFlowEntry.setStatus('current')
cseStatsFlowAged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseStatsFlowAged.setStatus('current')
cseStatsFlowPurged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseStatsFlowPurged.setStatus('current')
cseStatsFlowParityFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseStatsFlowParityFail.setStatus('current')
cseCacheUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 4), )
if mibBuilder.loadTexts: cseCacheUtilTable.setStatus('current')
cseCacheUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cseCacheUtilEntry.setStatus('current')
cseCacheUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 4, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCacheUtilization.setStatus('current')
cseCacheEntriesCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCacheEntriesCreated.setStatus('current')
cseCacheEntriesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCacheEntriesFailed.setStatus('current')
cseErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 5), )
if mibBuilder.loadTexts: cseErrorStatsTable.setStatus('current')
cseErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cseErrorStatsEntry.setStatus('current')
cseIpPlenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseIpPlenErrors.setStatus('current')
cseIpTooShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseIpTooShortErrors.setStatus('current')
cseIpCheckSumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseIpCheckSumErrors.setStatus('current')
cseIpxPlenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseIpxPlenErrors.setStatus('current')
cseIpxTooShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseIpxTooShortErrors.setStatus('current')
cseErrorStatsLCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 6), )
if mibBuilder.loadTexts: cseErrorStatsLCTable.setStatus('current')
cseErrorStatsLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cseErrorStatsLCEntry.setStatus('current')
cseLCIpPlenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseLCIpPlenErrors.setStatus('current')
cseLCIpTooShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseLCIpTooShortErrors.setStatus('current')
cseLCIpCheckSumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseLCIpCheckSumErrors.setStatus('current')
cseLCIpxPlenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseLCIpxPlenErrors.setStatus('current')
cseLCIpxTooShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseLCIpxTooShortErrors.setStatus('current')
cseL3SwitchedAggrPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseL3SwitchedAggrPktsPerSec.setStatus('current')
cseProtocolFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseProtocolFilterEnable.setStatus('current')
cseProtocolFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 5, 2), )
if mibBuilder.loadTexts: cseProtocolFilterPortTable.setStatus('current')
cseProtocolFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterPortProtocol"))
if mibBuilder.loadTexts: cseProtocolFilterPortEntry.setStatus('current')
cseProtocolFilterPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("grpProtocols", 3))))
if mibBuilder.loadTexts: cseProtocolFilterPortProtocol.setStatus('current')
cseProtocolFilterPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseProtocolFilterPortAdminStatus.setStatus('current')
cseProtocolFilterPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseProtocolFilterPortOperStatus.setStatus('current')
cseUcastCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1), )
if mibBuilder.loadTexts: cseUcastCacheTable.setStatus('current')
cseUcastCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheIndex"))
if mibBuilder.loadTexts: cseUcastCacheEntry.setStatus('current')
cseUcastCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseUcastCacheIndex.setStatus('current')
cseUcastCacheFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("dstOnly", 2), ("srcOrDst", 3), ("srcAndDst", 4), ("fullFlow", 5), ("ipxDstOnly", 6), ("ipxSrcAndDst", 7))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheFlowType.setStatus('current')
cseUcastCacheTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheTransport.setStatus('current')
cseUcastCacheDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 4), FlowAddressComponent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheDest.setStatus('current')
cseUcastCacheDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 5), FlowAddressComponent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheDestMask.setStatus('current')
cseUcastCacheSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 6), FlowAddressComponent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheSource.setStatus('current')
cseUcastCacheSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 7), FlowAddressComponent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheSrcMask.setStatus('current')
cseUcastCacheRtrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheRtrIp.setStatus('current')
cseUcastCacheOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 9), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheOwner.setStatus('current')
cseUcastCacheResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("purging", 1), ("notPurging", 2))).clone('notPurging')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseUcastCacheResult.setStatus('current')
cseUcastCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 6, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseUcastCacheStatus.setStatus('current')
cseMcastCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1), )
if mibBuilder.loadTexts: cseMcastCacheTable.setStatus('current')
cseMcastCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheIndex"))
if mibBuilder.loadTexts: cseMcastCacheEntry.setStatus('current')
cseMcastCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseMcastCacheIndex.setStatus('current')
cseMcastCacheFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("group", 2), ("grpAndSrc", 3))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseMcastCacheFlowType.setStatus('current')
cseMcastCacheGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 3), McastGroupIp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseMcastCacheGrp.setStatus('current')
cseMcastCacheSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseMcastCacheSrc.setStatus('current')
cseMcastCacheRtrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseMcastCacheRtrIp.setStatus('current')
cseMcastCacheOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 6), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseMcastCacheOwner.setStatus('current')
cseMcastCacheResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("purging", 1), ("notPurging", 2))).clone('notPurging')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseMcastCacheResult.setStatus('current')
cseMcastCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 7, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cseMcastCacheStatus.setStatus('current')
cseCefFibTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 1), )
if mibBuilder.loadTexts: cseCefFibTable.setStatus('current')
cseCefFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseCefFibIndex"))
if mibBuilder.loadTexts: cseCefFibEntry.setStatus('current')
cseCefFibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseCefFibIndex.setStatus('current')
cseCefFibAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefFibAddrType.setStatus('current')
cseCefFibDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefFibDestIp.setStatus('current')
cseCefFibDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefFibDestIpMask.setStatus('current')
cseCefFibType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("resolved", 2), ("bridge", 3), ("drop", 4), ("connected", 5), ("receive", 6), ("wildcard", 7), ("tunnel", 8), ("default", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefFibType.setStatus('current')
cseCefAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3), )
if mibBuilder.loadTexts: cseCefAdjacencyTable.setStatus('current')
cseCefAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1), ).setIndexNames((0, "CISCO-SWITCH-ENGINE-MIB", "cseCefFibIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyIndex"))
if mibBuilder.loadTexts: cseCefAdjacencyEntry.setStatus('current')
cseCefAdjacencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseCefAdjacencyIndex.setStatus('current')
cseCefAdjacencyAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyAddrType.setStatus('current')
cseCefAdjacencyNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyNextHopIp.setStatus('current')
cseCefAdjacencyNextHopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyNextHopMac.setStatus('current')
cseCefAdjacencyNextHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyNextHopIfIndex.setStatus('current')
cseCefAdjacencyType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("punt", 2), ("glean", 3), ("drop", 4), ("null", 5), ("noRewrite", 6), ("forceDrop", 7), ("connect", 8), ("unresolved", 9), ("loopback", 10), ("tunnel", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyType.setStatus('current')
cseCefAdjacencyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyPkts.setStatus('current')
cseCefAdjacencyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyOctets.setStatus('current')
cseCefAdjacencyEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("arpa", 1), ("raw", 2), ("sap", 3), ("snap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyEncap.setStatus('current')
cseCefAdjacencyMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 8, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseCefAdjacencyMTU.setStatus('current')
cseTcamUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 9, 1), )
if mibBuilder.loadTexts: cseTcamUsageTable.setStatus('current')
cseTcamUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 9, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseTcamResourceType"))
if mibBuilder.loadTexts: cseTcamUsageEntry.setStatus('current')
cseTcamResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85))).clone(namedValues=NamedValues(("aclStorageMask", 1), ("aclStorageValue", 2), ("aclDynamicStorageMask", 3), ("aclDynamicStorageValue", 4), ("qosStorageMask", 5), ("qosStorageValue", 6), ("qosDynamicStorageMask", 7), ("qosDynamicStorageValue", 8), ("l4PortOperator", 9), ("interfaceMapping", 10), ("ingressInterfaceMapping", 11), ("egressInterfaceMapping", 12), ("louSource", 13), ("louDestination", 14), ("andOr", 15), ("orAnd", 16), ("aclAdjacency", 17), ("aclHighStorageMask", 18), ("aclHighStorageValue", 19), ("aclLowStorageMask", 20), ("aclLowStorageValue", 21), ("qosHighStorageMask", 22), ("qosHighStorageValue", 23), ("qosLowStorageMask", 24), ("qosLowStorageValue", 25), ("sgacl", 26), ("accounting", 27), ("ipv6Ext", 28), ("ethertype", 29), ("destInfo", 30), ("dgtSgtRegion", 31), ("anyAnyRegion", 32), ("tcamALabel", 33), ("tcamBLabel", 34), ("destInfoIn", 35), ("destInfoOut", 36), ("tcam0Bank0", 37), ("tcam0Bank1", 38), ("tcam1Bank0", 39), ("tcam1Bank1", 40), ("tcam0Aggregate", 41), ("tcam1Aggregate", 42), ("bank0Aggregate", 43), ("bank1Aggregate", 44), ("lou", 45), ("bothLouOperands", 46), ("singleLouOperands", 47), ("louL4SourcePort", 48), ("louL4DstPort", 49), ("louL3PacketLength", 50), ("louIpTos", 51), ("louIpDscp", 52), ("louIpPrecedence", 53), ("louIpTtl", 54), ("tcpFlags", 55), ("l4DynamicProtocolCam", 56), ("macEtypeOrProtoCam", 57), ("nonL4OpLabelsTcam0", 58), ("nonL4OpLabelsTcam1", 59), ("l4OpLabelTcam0", 60), ("l4OpLabelTcam1", 61), ("ingressDestInfoTable", 62), ("egressDestInfoTable", 63), ("ingressTcam", 64), ("ingressIpv6Tcam", 65), ("ingressLou", 66), ("ingressBothLouOperands", 67), ("ingressSingleLouOperands", 68), ("ingressLouL4SourcePort", 69), ("ingressLouL4DstPort", 70), ("ingressLouL3PacketLength", 71), ("ingressLouL3Ttl", 72), ("ingressLouL2Ttl", 73), ("ingressTcpFlags", 74), ("egressTcam", 75), ("egressIpv6Tcam", 76), ("egressLou", 77), ("egressBothLouOperands", 78), ("egressSingleLouOperands", 79), ("egressLouL4SourcePort", 80), ("egressLouL4DstPort", 81), ("egressLouL3PacketLength", 82), ("egressLouL3Ttl", 83), ("egressLouL2Ttl", 84), ("egressTcpFlags", 85))))
if mibBuilder.loadTexts: cseTcamResourceType.setStatus('current')
cseTcamResourceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 9, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseTcamResourceDescr.setStatus('current')
cseTcamResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseTcamResourceUsed.setStatus('current')
cseTcamResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 9, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseTcamResourceTotal.setStatus('current')
cseMetUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 10, 1), )
if mibBuilder.loadTexts: cseMetUsageTable.setStatus('current')
cseMetUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 10, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-ENGINE-MIB", "cseMetIndex"))
if mibBuilder.loadTexts: cseMetUsageEntry.setStatus('current')
cseMetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cseMetIndex.setStatus('current')
cseMetTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseMetTotalEntries.setStatus('current')
cseMetUnallocatedSpcFreeEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 10, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseMetUnallocatedSpcFreeEntries.setStatus('current')
cseMetAllocatedSpcFreeEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 97, 1, 10, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseMetAllocatedSpcFreeEntries.setStatus('current')
cseMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 2))
cseMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 3))
cseMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1))
cseMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2))
cseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 1)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCachePurgeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance = cseMIBCompliance.setStatus('deprecated')
cseMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 2)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtOperStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance2 = cseMIBCompliance2.setStatus('deprecated')
cseMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 3)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtOperStatusGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cse4kVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance3 = cseMIBCompliance3.setStatus('deprecated')
cseMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 4)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtOperStatusGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cse4kVlanGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMandatoryGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDESingleFilterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMultipleFiltersGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance4 = cseMIBCompliance4.setStatus('deprecated')
cseMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 5)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroupRev1"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtOperStatusGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cse4kVlanGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMandatoryGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDESingleFilterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMultipleFiltersGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance5 = cseMIBCompliance5.setStatus('deprecated')
cseMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 6)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroupRev1"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtOperStatusGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cse4kVlanGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMandatoryGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDESingleFilterGroupRev1"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMultipleFiltersGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup2"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtExtGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance6 = cseMIBCompliance6.setStatus('deprecated')
cseMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 7)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroupRev1"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup1"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtOperStatusGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cse4kVlanGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMandatoryGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDESingleFilterGroupRev1"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMultipleFiltersGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup2"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtExtGroup2"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastRtrMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance7 = cseMIBCompliance7.setStatus('deprecated')
cseMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 1, 8)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseVlanStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtGroupRev1"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup1"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCachePurgeGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtOperStatusGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cse4kVlanGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMandatoryGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDESingleFilterGroupRev1"), ("CISCO-SWITCH-ENGINE-MIB", "cseNDEMultipleFiltersGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsGroup2"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMgmtExtGroup2"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastRtrMgmtGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMgmtGroup2"), ("CISCO-SWITCH-ENGINE-MIB", "cseCacheStatisticsGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3SwitchedPktsPerSecGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatisticsFlowGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMIBCompliance8 = cseMIBCompliance8.setStatus('current')
cseStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 1)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseL2ForwardedLocalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2ForwardedLocalOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2ForwardedTotalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2NewAddressLearns"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2AddrLearnFailures"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2DstAddrLookupMisses"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3SwitchedTotalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3SwitchedTotalOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3CandidateFlowHits"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3EstablishedFlowHits"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3ActiveFlows"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3FlowLearnFailures"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3IntFlowInvalids"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3ExtFlowInvalids"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCOverflowForwardedLocalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCForwardedLocalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCOverflowForwardedTotalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCForwardedTotalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCOverflowIpPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCIpPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCOverflowIpxPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCIpxPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCOverflowAssignedProtoPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCAssignedProtoPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCOverflowOtherProtoPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2HCOtherProtoPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseStatisticsGroup = cseStatisticsGroup.setStatus('current')
cseStatisticsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 2)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseStatsFlowAged"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatsFlowPurged"), ("CISCO-SWITCH-ENGINE-MIB", "cseStatsFlowParityFail"), ("CISCO-SWITCH-ENGINE-MIB", "cseCacheUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseStatisticsGroup2 = cseStatisticsGroup2.setStatus('current')
cseVlanStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 3)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanInPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanInOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanOutPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseVlanStatisticsGroup = cseVlanStatisticsGroup.setStatus('current')
cseRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 4)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseRouterFlowMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterName"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterStatic"), ("CISCO-SWITCH-ENGINE-MIB", "cseStaticRouterOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseStaticRouterName"), ("CISCO-SWITCH-ENGINE-MIB", "cseStaticRouterType"), ("CISCO-SWITCH-ENGINE-MIB", "cseStaticRouterStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterIpxFlowMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseStaticIpxRouterOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseStaticIpxRouterName"), ("CISCO-SWITCH-ENGINE-MIB", "cseStaticIpxRouterStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterMac"), ("CISCO-SWITCH-ENGINE-MIB", "cseRouterProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseRouterGroup = cseRouterGroup.setStatus('current')
cseFlowMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 5)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowEstablishedAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowFastAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowFastAgePktThreshold"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowIPXEstablishedAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMaxQueries"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryTransport"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQuerySource"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQuerySourceMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryDestination"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryDestinationMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryRouterIndex"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultingRows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultTotalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultTotalOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultAvgDuration"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultAvgIdle"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryCreateTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataSrcMac"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataDstMac"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataEncapType"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataStaticFlow"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataDestination"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataDestVlan"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataIpQOS"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataIpQOSPolicy"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataWhenCreated"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataLastUsed"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowSwitchStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMgmtGroup = cseFlowMgmtGroup.setStatus('deprecated')
cseNetflowLSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 6)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportHost"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportTransportNumber"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataSourceMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataDest"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataDestMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataProtocol"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataFilterSelection"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportNDEVersionNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNetflowLSGroup = cseNetflowLSGroup.setStatus('deprecated')
cseProtocolFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 7)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterPortAdminStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterPortOperStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2IpPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2IpxPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2AssignedProtoPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL2OtherProtoPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseProtocolFilterGroup = cseProtocolFilterGroup.setStatus('current')
cseFlowMcastMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 8)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMaxQueries"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQuerySrc"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryGrp"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQuerySrcVlan"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryRtrIndex"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQuerySkipNFlows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryTotalFlows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryRows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryCreateTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultSrc"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultGrp"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultSrcVlan"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultRtrIp"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultRtrMac"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultCreatedTS"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultLastUsedTS"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultDstVlans"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastSwitchStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMcastMgmtGroup = cseFlowMcastMgmtGroup.setStatus('deprecated')
cseUcastCachePurgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 9)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheFlowType"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheTransport"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheDest"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheDestMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheSrcMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheRtrIp"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseUcastCacheResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseUcastCachePurgeGroup = cseUcastCachePurgeGroup.setStatus('current')
cseMcastCachePurgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 10)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheFlowType"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheGrp"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheSrc"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheRtrIp"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseMcastCacheResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMcastCachePurgeGroup = cseMcastCachePurgeGroup.setStatus('current')
cseFlowMgmtOperStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 11)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowOperEstablishedAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowOperFastAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowOperFastAgePktThreshold"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowOperIPXAgingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMgmtOperStatusGroup = cseFlowMgmtOperStatusGroup.setStatus('current')
cse4kVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 12)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultDstVlans2k"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultDstVlans3k"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultDstVlans4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cse4kVlanGroup = cse4kVlanGroup.setStatus('current')
cseNDEMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 13)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterSupport"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportNDEVersionNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNDEMandatoryGroup = cseNDEMandatoryGroup.setStatus('current')
cseNDESingleFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 14)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportHost"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportTransportNumber"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataSourceMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataDest"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataDestMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataProtocol"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataFilterSelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNDESingleFilterGroup = cseNDESingleFilterGroup.setStatus('deprecated')
cseNDEMultipleFiltersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 15)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterDataSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterDataSourceMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterDataDest"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterDataDestMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterDataProtocol"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterSelection"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSFilterStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNDEMultipleFiltersGroup = cseNDEMultipleFiltersGroup.setStatus('current')
cseFlowMgmtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 16)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowEstablishedAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowFastAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowFastAgePktThreshold"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowIPXEstablishedAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMaxQueries"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryTransport"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQuerySource"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQuerySourceMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryDestination"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryDestinationMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryRouterIndex"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultingRows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultTotalPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultTotalOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultAvgDuration"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryResultAvgIdle"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryCreateTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowQueryTotalFlows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataSrcMac"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataDstMac"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataEncapType"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataStaticFlow"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataDestination"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataDestVlan"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataIpQOS"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataIpQOSPolicy"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataWhenCreated"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataLastUsed"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowDataOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowSwitchStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMgmtGroupRev1 = cseFlowMgmtGroupRev1.setStatus('current')
cseL3ErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 17)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseIpPlenErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseIpTooShortErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseIpCheckSumErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseIpxPlenErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseIpxTooShortErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseL3ErrorsGroup = cseL3ErrorsGroup.setStatus('current')
cseBridgedFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 18)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowBridgedFlowStatsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseBridgedFlowGroup = cseBridgedFlowGroup.setStatus('current')
cseVlanStatisticsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 19)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanInUnicastPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanInUnicastOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanOutUnicastPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3VlanOutUnicastOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseVlanStatisticsExtGroup = cseVlanStatisticsExtGroup.setStatus('current')
cseProtocolFilterExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 20)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseProtocolFilterEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseProtocolFilterExtGroup = cseProtocolFilterExtGroup.setStatus('current')
cseFlowMgmtExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 21)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowIPFlowMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowIPXFlowMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMgmtExtGroup = cseFlowMgmtExtGroup.setStatus('current')
cseFlowMgmtExtGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 22)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowLongAgingTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowExcludeProtocol"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowExcludeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMgmtExtGroup1 = cseFlowMgmtExtGroup1.setStatus('current')
cseNDEReportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 23)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetFlowIfIndexEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNDEReportGroup = cseNDEReportGroup.setStatus('current')
cseStatisticsFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 24)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowTotalFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseStatisticsFlowGroup = cseStatisticsFlowGroup.setStatus('current')
cseFlowMgmtExtGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 25)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowQuerySkipNFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMgmtExtGroup2 = cseFlowMgmtExtGroup2.setStatus('current')
cseNDESingleFilterGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 26)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataSourceMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataDest"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataDestMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataProtocol"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowLSExportDataFilterSelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNDESingleFilterGroupRev1 = cseNDESingleFilterGroupRev1.setStatus('current')
cseCefFibAdjacencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 27)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseCefFibAddrType"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefFibDestIp"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefFibDestIpMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefFibType"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyAddrType"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyNextHopIp"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyNextHopMac"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyNextHopIfIndex"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyType"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseCefFibAdjacencyGroup = cseCefFibAdjacencyGroup.setStatus('current')
cseCefAdjacencyEncapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 28)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyEncap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseCefAdjacencyEncapGroup = cseCefAdjacencyEncapGroup.setStatus('current')
cseCefAdjacencyMTUGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 29)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseCefAdjacencyMTU"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseCefAdjacencyMTUGroup = cseCefAdjacencyMTUGroup.setStatus('current')
cseTcamUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 30)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseTcamResourceDescr"), ("CISCO-SWITCH-ENGINE-MIB", "cseTcamResourceUsed"), ("CISCO-SWITCH-ENGINE-MIB", "cseTcamResourceTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseTcamUsageGroup = cseTcamUsageGroup.setStatus('current')
cseL3ErrorsLCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 31)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseLCIpPlenErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseLCIpTooShortErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseLCIpCheckSumErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseLCIpxPlenErrors"), ("CISCO-SWITCH-ENGINE-MIB", "cseLCIpxTooShortErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseL3ErrorsLCGroup = cseL3ErrorsLCGroup.setStatus('current')
cseNetflowASInfoExportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 32)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetflowASInfoExportCtrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNetflowASInfoExportGroup = cseNetflowASInfoExportGroup.setStatus('current')
cseNetflowPerVlanIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 33)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseNetflowPerVlanIfGlobalEnable"), ("CISCO-SWITCH-ENGINE-MIB", "cseNetflowPerVlanIfEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseNetflowPerVlanIfGroup = cseNetflowPerVlanIfGroup.setStatus('current')
cseMetUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 34)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseMetTotalEntries"), ("CISCO-SWITCH-ENGINE-MIB", "cseMetUnallocatedSpcFreeEntries"), ("CISCO-SWITCH-ENGINE-MIB", "cseMetAllocatedSpcFreeEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseMetUsageGroup = cseMetUsageGroup.setStatus('current')
cseFlowMcastMgmtGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 35)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastMaxQueries"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryMask"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQuerySrcVlan"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQuerySkipNFlows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryOwner"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryTotalFlows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryRows"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryStatus"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryCreateTime"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultSrcVlan"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultCreatedTS"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultLastUsedTS"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultPkts"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultOctets"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultDstVlans"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastSwitchStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMcastMgmtGroup1 = cseFlowMcastMgmtGroup1.setStatus('current')
cseFlowMcastRtrMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 36)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryRtrIndex"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultRtrIp"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultRtrMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMcastRtrMgmtGroup = cseFlowMcastRtrMgmtGroup.setStatus('current')
cseFlowMcastMgmtGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 37)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryMvrf"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryAddrType"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQuerySource"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastQueryGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultMvrf"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultAddrType"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultGroup"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultSource"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultFlowType"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultHFlag1k2k"), ("CISCO-SWITCH-ENGINE-MIB", "cseFlowMcastResultHFlag3k4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseFlowMcastMgmtGroup2 = cseFlowMcastMgmtGroup2.setStatus('current')
cseCacheStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 38)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseCacheEntriesCreated"), ("CISCO-SWITCH-ENGINE-MIB", "cseCacheEntriesFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseCacheStatisticsGroup = cseCacheStatisticsGroup.setStatus('current')
cseL3SwitchedPktsPerSecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 39)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseL3SwitchedPktsPerSec"), ("CISCO-SWITCH-ENGINE-MIB", "cseL3SwitchedAggrPktsPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseL3SwitchedPktsPerSecGroup = cseL3SwitchedPktsPerSecGroup.setStatus('current')
cseStatisticsFlowGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 97, 3, 2, 40)).setObjects(("CISCO-SWITCH-ENGINE-MIB", "cseFlowTotalIpv4Flows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cseStatisticsFlowGroup1 = cseStatisticsFlowGroup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-SWITCH-ENGINE-MIB", cseL3VlanOutUnicastPkts=cseL3VlanOutUnicastPkts, cseCefAdjacencyType=cseCefAdjacencyType, cseFlowFastAgingTime=cseFlowFastAgingTime, cseStaticRouterType=cseStaticRouterType, cseStatsFlowPurged=cseStatsFlowPurged, cseFlowDataTable=cseFlowDataTable, cseNetflowLSFilterDataSourceMask=cseNetflowLSFilterDataSourceMask, cseMIBCompliance5=cseMIBCompliance5, cseStaticIpxExtRouterTable=cseStaticIpxExtRouterTable, cseNetFlowIfIndexEnable=cseNetFlowIfIndexEnable, cseUcastCacheSrcMask=cseUcastCacheSrcMask, cseNetflowLSFilterSelection=cseNetflowLSFilterSelection, cseTcamUsage=cseTcamUsage, cseNetflowLSFilterDataProtocol=cseNetflowLSFilterDataProtocol, cseFlowMcastQuerySrcVlan=cseFlowMcastQuerySrcVlan, cseL2HCForwardedLocalPkts=cseL2HCForwardedLocalPkts, cseL3ExtFlowInvalids=cseL3ExtFlowInvalids, cseFlowMcastResultSrc=cseFlowMcastResultSrc, cseFlowQueryResultAvgDuration=cseFlowQueryResultAvgDuration, cseFlowMcastQueryEntry=cseFlowMcastQueryEntry, cseStaticIpxExtRouterEntry=cseStaticIpxExtRouterEntry, cseTcamUsageGroup=cseTcamUsageGroup, cseNetflowLSExportDataFilterSelection=cseNetflowLSExportDataFilterSelection, cseFlowDataWhenCreated=cseFlowDataWhenCreated, cseUcastCacheRtrIp=cseUcastCacheRtrIp, cseRouterIndex=cseRouterIndex, cseFlowDataSrcMac=cseFlowDataSrcMac, cseFlowMcastQuerySource=cseFlowMcastQuerySource, cseL2HCIpPkts=cseL2HCIpPkts, cseL2Objects=cseL2Objects, cseMIBCompliance7=cseMIBCompliance7, cseFlowExcludeTable=cseFlowExcludeTable, cseFlowSwitchStatus=cseFlowSwitchStatus, cseMIBConformance=cseMIBConformance, cseMIBCompliance3=cseMIBCompliance3, cseUcastCacheTransport=cseUcastCacheTransport, cse4kVlanGroup=cse4kVlanGroup, cseErrorStatsEntry=cseErrorStatsEntry, cseL3EstablishedFlowHits=cseL3EstablishedFlowHits, cseMIBCompliance2=cseMIBCompliance2, cseFlowMcastResultDstVlans=cseFlowMcastResultDstVlans, cseFlowQueryDestinationMask=cseFlowQueryDestinationMask, cseFlowIPFlowMask=cseFlowIPFlowMask, cseFlowSwitchControlEntry=cseFlowSwitchControlEntry, cseTcamResourceDescr=cseTcamResourceDescr, cseProtocolFilter=cseProtocolFilter, cseNDESingleFilterGroupRev1=cseNDESingleFilterGroupRev1, cseL3StatsTable=cseL3StatsTable, cseFlowMgmtExtGroup=cseFlowMgmtExtGroup, cseFlowQueryTable=cseFlowQueryTable, cseStaticIpxRouterName=cseStaticIpxRouterName, cseL2HCAssignedProtoPkts=cseL2HCAssignedProtoPkts, cseL2HCOverflowOtherProtoPkts=cseL2HCOverflowOtherProtoPkts, cseStaticRouterOwner=cseStaticRouterOwner, cseIpTooShortErrors=cseIpTooShortErrors, cseNDESingleFilterGroup=cseNDESingleFilterGroup, cseMetIndex=cseMetIndex, cseL3VlanOutOctets=cseL3VlanOutOctets, cseL2AddrLearnFailures=cseL2AddrLearnFailures, cseFlowMcastResultSrcVlan=cseFlowMcastResultSrcVlan, cseFlowQueryOwner=cseFlowQueryOwner, cseL2StatsHCEntry=cseL2StatsHCEntry, cseFlowLongAgingTime=cseFlowLongAgingTime, cseFlowDataEncapType=cseFlowDataEncapType, cseFlowSwitchProtocol=cseFlowSwitchProtocol, cseCefAdjacencyEncapGroup=cseCefAdjacencyEncapGroup, cseL3ErrorsGroup=cseL3ErrorsGroup, cseRouterEntry=cseRouterEntry, cseNetflowPerVlanIfGroup=cseNetflowPerVlanIfGroup, cseNetflowLSExportDataDest=cseNetflowLSExportDataDest, cseMcastCacheGrp=cseMcastCacheGrp, cseRouterVlan=cseRouterVlan, cseFlowFastAgePktThreshold=cseFlowFastAgePktThreshold, cseFlowExcludePort=cseFlowExcludePort, cseTcamUsageEntry=cseTcamUsageEntry, cseMcastCacheFlowType=cseMcastCacheFlowType, cseRouterFlowMask=cseRouterFlowMask, cseNetflowLSExportStatus=cseNetflowLSExportStatus, cseL3VlanStatsEntry=cseL3VlanStatsEntry, cseCefAdjacencyAddrType=cseCefAdjacencyAddrType, cseFlowMcastQueryGrp=cseFlowMcastQueryGrp, cseCacheStatisticsGroup=cseCacheStatisticsGroup, cseFlowMcastQueryAddrType=cseFlowMcastQueryAddrType, cseL2AssignedProtoPkts=cseL2AssignedProtoPkts, cseFlowMcastQueryCreateTime=cseFlowMcastQueryCreateTime, cseFlowExcludeStatus=cseFlowExcludeStatus, cseFlowMgmtGroup=cseFlowMgmtGroup, cseFlowMcastResultDstVlans2k=cseFlowMcastResultDstVlans2k, cseL3VlanInUnicastPkts=cseL3VlanInUnicastPkts, cseFlowMcastMgmtGroup=cseFlowMcastMgmtGroup, cseMIBCompliance8=cseMIBCompliance8, cseFlowMcastMgmtGroup1=cseFlowMcastMgmtGroup1, cseNetflowLSFilterDataDest=cseNetflowLSFilterDataDest, cseFlowMcastQueryOwner=cseFlowMcastQueryOwner, cseStaticRouterName=cseStaticRouterName, cseL3ErrorsLCGroup=cseL3ErrorsLCGroup, cseFlowMgmtGroupRev1=cseFlowMgmtGroupRev1, cseFlowDataIndex=cseFlowDataIndex, cseMetAllocatedSpcFreeEntries=cseMetAllocatedSpcFreeEntries, cseErrorStatsLCTable=cseErrorStatsLCTable, cseMetTotalEntries=cseMetTotalEntries, cseTcamResourceType=cseTcamResourceType, cseFlowQueryEntry=cseFlowQueryEntry, cseMcastCacheSrc=cseMcastCacheSrc, cseProtocolFilterGroup=cseProtocolFilterGroup, cseL3ActiveFlows=cseL3ActiveFlows, cseL2StatsTable=cseL2StatsTable, cseCefAdjacencyPkts=cseCefAdjacencyPkts, cseNetflowLSFilterStatus=cseNetflowLSFilterStatus, cseL2ForwardedLocalOctets=cseL2ForwardedLocalOctets, cseUcastCacheEntry=cseUcastCacheEntry, cseFlowStatsTable=cseFlowStatsTable, cseFlowDataDestination=cseFlowDataDestination, cseFlowQueryCreateTime=cseFlowQueryCreateTime, cseFlowMgmtOperStatusGroup=cseFlowMgmtOperStatusGroup, cseFlowMcastResultHFlag1k2k=cseFlowMcastResultHFlag1k2k, cseMIBGroups=cseMIBGroups, cseCefAdjacencyMTUGroup=cseCefAdjacencyMTUGroup, cseLCIpTooShortErrors=cseLCIpTooShortErrors, cseCefAdjacencyMTU=cseCefAdjacencyMTU, cseFlowMcastQueryMask=cseFlowMcastQueryMask, cseProtocolFilterPortOperStatus=cseProtocolFilterPortOperStatus, cseFlowMcastResultLastUsedTS=cseFlowMcastResultLastUsedTS, cseL2NewAddressLearns=cseL2NewAddressLearns, cseCefAdjacencyEntry=cseCefAdjacencyEntry, cseCefFibIndex=cseCefFibIndex, cseFlowMcastResultSource=cseFlowMcastResultSource, cseL3CandidateFlowHits=cseL3CandidateFlowHits, cseFlowQueryResultingRows=cseFlowQueryResultingRows, cseNDEMultipleFiltersGroup=cseNDEMultipleFiltersGroup, cseIpxTooShortErrors=cseIpxTooShortErrors, cseFlowMcastResultRtrIp=cseFlowMcastResultRtrIp, cseFlowQueryStatus=cseFlowQueryStatus, cseL3SwitchedTotalOctets=cseL3SwitchedTotalOctets, cseStatsFlowEntry=cseStatsFlowEntry, cseNetflowLSFilterIndex=cseNetflowLSFilterIndex, cseMcastCachePurgeGroup=cseMcastCachePurgeGroup, cseFlowDataStaticFlow=cseFlowDataStaticFlow, cseL2HCForwardedTotalPkts=cseL2HCForwardedTotalPkts, cseRouterVlanTable=cseRouterVlanTable, cseRouterVlanEntry=cseRouterVlanEntry, cseFlowQuerySkipNFlows=cseFlowQuerySkipNFlows, cseFlowQuerySourceMask=cseFlowQuerySourceMask, cseCacheEntriesCreated=cseCacheEntriesCreated, cseUcastCacheTable=cseUcastCacheTable, cseFlowQueryTransport=cseFlowQueryTransport, cseFlowDataDestVlan=cseFlowDataDestVlan, cseL3VlanIndex=cseL3VlanIndex, cseMetUsageEntry=cseMetUsageEntry, cseNetflowPerVlanIfCtrlVlan=cseNetflowPerVlanIfCtrlVlan, cseCefAdjacencyNextHopIp=cseCefAdjacencyNextHopIp, cseCefAdjacencyOctets=cseCefAdjacencyOctets, cseIpPlenErrors=cseIpPlenErrors, cseFlowTotalIpv4Flows=cseFlowTotalIpv4Flows, cseMet=cseMet, cseFlowQuerySource=cseFlowQuerySource, cseBridgedFlowGroup=cseBridgedFlowGroup, cseFlow=cseFlow, cseNetflowLSExportDataSource=cseNetflowLSExportDataSource, cseProtocolFilterPortTable=cseProtocolFilterPortTable, cseVlanStatisticsGroup=cseVlanStatisticsGroup, cseFlowMcastQueryGroup=cseFlowMcastQueryGroup, cseProtocolFilterPortProtocol=cseProtocolFilterPortProtocol, cseFlowMcastQueryTable=cseFlowMcastQueryTable, cseL2StatsHCTable=cseL2StatsHCTable, cseL2HCOtherProtoPkts=cseL2HCOtherProtoPkts, cseStatisticsGroup2=cseStatisticsGroup2, cseBridgedFlowStatsCtrlTable=cseBridgedFlowStatsCtrlTable, cseFlowQueryDestination=cseFlowQueryDestination, cseFlowMcastQueryMvrf=cseFlowMcastQueryMvrf, cseFlowQueryIndex=cseFlowQueryIndex, cseFlowMcastResultMvrf=cseFlowMcastResultMvrf, cseCefFibAdjacencyGroup=cseCefFibAdjacencyGroup, cseRouterTable=cseRouterTable, cseL3SwitchedAggrPktsPerSec=cseL3SwitchedAggrPktsPerSec, cseNetflowPerVlanIfCtrlEntry=cseNetflowPerVlanIfCtrlEntry, cseFlowMcastResultFlowType=cseFlowMcastResultFlowType, cseRouterProtocol=cseRouterProtocol, cseUcastCacheResult=cseUcastCacheResult, cseMcastCacheIndex=cseMcastCacheIndex, cseMIBObjects=cseMIBObjects, cseProtocolFilterPortAdminStatus=cseProtocolFilterPortAdminStatus, cseFlowMcastMgmtGroup2=cseFlowMcastMgmtGroup2, cseNDEMandatoryGroup=cseNDEMandatoryGroup, cseCefFibAddrType=cseCefFibAddrType, FlowAddressComponent=FlowAddressComponent, cseRouterName=cseRouterName, cseL3VlanOutPkts=cseL3VlanOutPkts, cseStaticIpxRouterStatus=cseStaticIpxRouterStatus, cseUcastCacheOwner=cseUcastCacheOwner, cseCefAdjacencyNextHopIfIndex=cseCefAdjacencyNextHopIfIndex, cseNetflowASInfoExportGroup=cseNetflowASInfoExportGroup, cseMetUsageTable=cseMetUsageTable, CiscoGauge64=CiscoGauge64, cseIpCheckSumErrors=cseIpCheckSumErrors, cseNetflowLSFilterTable=cseNetflowLSFilterTable, cseFlowMcastResultHFlag3k4k=cseFlowMcastResultHFlag3k4k, cseIpxPlenErrors=cseIpxPlenErrors, cseStatisticsFlowGroup=cseStatisticsFlowGroup, cseStatisticsFlowGroup1=cseStatisticsFlowGroup1, cseFlowQueryResultTotalPkts=cseFlowQueryResultTotalPkts, cseMcastCacheOwner=cseMcastCacheOwner, cseL2HCOverflowForwardedTotalPkts=cseL2HCOverflowForwardedTotalPkts, cseFlowMcastQueryRows=cseFlowMcastQueryRows, cseProtocolFilterEnable=cseProtocolFilterEnable, cseUcastCacheStatus=cseUcastCacheStatus, cseL3VlanInUnicastOctets=cseL3VlanInUnicastOctets, cseL3Objects=cseL3Objects, cseMIBCompliance=cseMIBCompliance, cseCefFibType=cseCefFibType, cseFlowMcastResultPkts=cseFlowMcastResultPkts, cseRouterIpxFlowMask=cseRouterIpxFlowMask, cseVlanStatisticsExtGroup=cseVlanStatisticsExtGroup, cseMcastCache=cseMcastCache, cseFlowStatsEntry=cseFlowStatsEntry, cseFlowIPXFlowMask=cseFlowIPXFlowMask, cseFlowMcastQueryRtrIndex=cseFlowMcastQueryRtrIndex, cseFlowMcastResultRtrMac=cseFlowMcastResultRtrMac, cseFlowDataIpQOSPolicy=cseFlowDataIpQOSPolicy, cseErrorStatsTable=cseErrorStatsTable, cseUcastCacheDestMask=cseUcastCacheDestMask, cseFlowMcastResultDstVlans4k=cseFlowMcastResultDstVlans4k, cseL2ForwardedTotalPkts=cseL2ForwardedTotalPkts, cseFlowQueryRouterIndex=cseFlowQueryRouterIndex, cseRouterStatic=cseRouterStatic, cseL3StatsEntry=cseL3StatsEntry, cseFlowEstablishedAgingTime=cseFlowEstablishedAgingTime, cseTcamResourceUsed=cseTcamResourceUsed, cseCacheUtilization=cseCacheUtilization, cseCefFibTable=cseCefFibTable, cseNetflowLSExportDataDestMask=cseNetflowLSExportDataDestMask, cseStatsFlowAged=cseStatsFlowAged, cseCefAdjacencyNextHopMac=cseCefAdjacencyNextHopMac, cseL2IpPkts=cseL2IpPkts, cseL2HCOverflowIpxPkts=cseL2HCOverflowIpxPkts, cseCacheUtilEntry=cseCacheUtilEntry, cseNetflowPerVlanIfCtrlTable=cseNetflowPerVlanIfCtrlTable, cseMcastCacheResult=cseMcastCacheResult, cseStaticIpxRouterOwner=cseStaticIpxRouterOwner, cseFlowMcastResultAddrType=cseFlowMcastResultAddrType, cseFlowTotalFlows=cseFlowTotalFlows, cseUcastCachePurgeGroup=cseUcastCachePurgeGroup, cseErrorStatsLCEntry=cseErrorStatsLCEntry, cseLCIpCheckSumErrors=cseLCIpCheckSumErrors, cseL2HCOverflowForwardedLocalPkts=cseL2HCOverflowForwardedLocalPkts, cseFlowSwitchControlTable=cseFlowSwitchControlTable, cseNetflowPerVlanIfEnable=cseNetflowPerVlanIfEnable, cseMIBNotifications=cseMIBNotifications, cseFlowMcastQueryStatus=cseFlowMcastQueryStatus, cseUcastCache=cseUcastCache, cseNetflowLSGroup=cseNetflowLSGroup, cseFlowMcastSwitchStatus=cseFlowMcastSwitchStatus, cseFlowDataDstMac=cseFlowDataDstMac, cseFlowDataPkts=cseFlowDataPkts)
mibBuilder.exportSymbols("CISCO-SWITCH-ENGINE-MIB", cseMcastCacheStatus=cseMcastCacheStatus, cseFlowMcastQuerySkipNFlows=cseFlowMcastQuerySkipNFlows, cseL3FlowLearnFailures=cseL3FlowLearnFailures, cseL2DstAddrLookupMisses=cseL2DstAddrLookupMisses, cseUcastCacheDest=cseUcastCacheDest, cseStaticExtRouterTable=cseStaticExtRouterTable, cseProtocolFilterExtGroup=cseProtocolFilterExtGroup, cseFlowMgmtExtGroup1=cseFlowMgmtExtGroup1, cseStatsFlowTable=cseStatsFlowTable, cseFlowMcastResultIndex=cseFlowMcastResultIndex, cseFlowMcastMaxQueries=cseFlowMcastMaxQueries, cseFlowMcastResultDstVlans3k=cseFlowMcastResultDstVlans3k, cseMetUsageGroup=cseMetUsageGroup, cseNetflowLSExportTransportNumber=cseNetflowLSExportTransportNumber, cseFlowMcastQuerySrc=cseFlowMcastQuerySrc, cseCef=cseCef, cseMcastCacheEntry=cseMcastCacheEntry, cseFlowMcastResultTable=cseFlowMcastResultTable, cseStaticRouterStatus=cseStaticRouterStatus, cseFlowMgmtExtGroup2=cseFlowMgmtExtGroup2, cseNetflowLSFilterDataSource=cseNetflowLSFilterDataSource, cseFlowMcastResultOctets=cseFlowMcastResultOctets, cseUcastCacheIndex=cseUcastCacheIndex, cseL3IntFlowInvalids=cseL3IntFlowInvalids, cseFlowMcastRtrMgmtGroup=cseFlowMcastRtrMgmtGroup, cseL3SwitchedPktsPerSecGroup=cseL3SwitchedPktsPerSecGroup, cseNetflowLSExportDataProtocol=cseNetflowLSExportDataProtocol, cseFlowOperFastAgingTime=cseFlowOperFastAgingTime, cseNetflowLSExportHost=cseNetflowLSExportHost, cseNetflowLS=cseNetflowLS, cseL3VlanInOctets=cseL3VlanInOctets, cseFlowDataEntry=cseFlowDataEntry, cseMIBCompliance4=cseMIBCompliance4, cseNetflowASInfoExportCtrl=cseNetflowASInfoExportCtrl, cseFlowMcastResultEntry=cseFlowMcastResultEntry, cseFlowExcludeProtocol=cseFlowExcludeProtocol, cseFlowQueryResultAvgIdle=cseFlowQueryResultAvgIdle, cseFlowOperEstablishedAgingTime=cseFlowOperEstablishedAgingTime, ciscoSwitchEngineMIB=ciscoSwitchEngineMIB, cseFlowQueryMask=cseFlowQueryMask, cseL3SwitchedPktsPerSec=cseL3SwitchedPktsPerSec, cseFlowOperIPXAgingTime=cseFlowOperIPXAgingTime, cseL2ForwardedLocalPkts=cseL2ForwardedLocalPkts, cseLCIpPlenErrors=cseLCIpPlenErrors, cseLCIpxPlenErrors=cseLCIpxPlenErrors, cseMcastCacheRtrIp=cseMcastCacheRtrIp, cseL3SwitchedTotalPkts=cseL3SwitchedTotalPkts, cseFlowMcastResultGroup=cseFlowMcastResultGroup, cseL2IpxPkts=cseL2IpxPkts, cseRouterGroup=cseRouterGroup, McastGroupIp=McastGroupIp, cseProtocolFilterPortEntry=cseProtocolFilterPortEntry, cseTcamResourceTotal=cseTcamResourceTotal, cseNetflowLSFilterDataDestMask=cseNetflowLSFilterDataDestMask, cseStatsFlowParityFail=cseStatsFlowParityFail, cseCefFibEntry=cseCefFibEntry, cseFlowBridgedFlowStatsEnable=cseFlowBridgedFlowStatsEnable, cseCefAdjacencyEncap=cseCefAdjacencyEncap, cseL2HCOverflowIpPkts=cseL2HCOverflowIpPkts, cseCefAdjacencyTable=cseCefAdjacencyTable, cseL2StatsEntry=cseL2StatsEntry, cseL2HCIpxPkts=cseL2HCIpxPkts, cseCacheUtilTable=cseCacheUtilTable, cseFlowExcludeEntry=cseFlowExcludeEntry, cseUcastCacheSource=cseUcastCacheSource, cseNDEReportGroup=cseNDEReportGroup, cseL2HCOverflowAssignedProtoPkts=cseL2HCOverflowAssignedProtoPkts, cseFlowIPXEstablishedAgingTime=cseFlowIPXEstablishedAgingTime, cseCefFibDestIpMask=cseCefFibDestIpMask, cseBridgedFlowVlan=cseBridgedFlowVlan, cseFlowMcastResultGrp=cseFlowMcastResultGrp, cseTcamUsageTable=cseTcamUsageTable, cseMcastCacheTable=cseMcastCacheTable, cseFlowMcastQueryIndex=cseFlowMcastQueryIndex, cseNetflowLSFilterEntry=cseNetflowLSFilterEntry, cseFlowDataSource=cseFlowDataSource, cseNetflowLSFilterSupport=cseNetflowLSFilterSupport, cseNetflowPerVlanIfGlobalEnable=cseNetflowPerVlanIfGlobalEnable, cseStaticExtRouterEntry=cseStaticExtRouterEntry, cseLCIpxTooShortErrors=cseLCIpxTooShortErrors, cseCacheEntriesFailed=cseCacheEntriesFailed, cseRouterMac=cseRouterMac, cseFlowMaxQueries=cseFlowMaxQueries, cseFlowMcastQueryTotalFlows=cseFlowMcastQueryTotalFlows, cseL3VlanOutUnicastOctets=cseL3VlanOutUnicastOctets, cseUcastCacheFlowType=cseUcastCacheFlowType, cseCefFibDestIp=cseCefFibDestIp, cseMetUnallocatedSpcFreeEntries=cseMetUnallocatedSpcFreeEntries, PYSNMP_MODULE_ID=ciscoSwitchEngineMIB, ControlStatus=ControlStatus, cseL2OtherProtoPkts=cseL2OtherProtoPkts, cseFlowQueryTotalFlows=cseFlowQueryTotalFlows, cseMIBCompliance6=cseMIBCompliance6, cseCefAdjacencyIndex=cseCefAdjacencyIndex, cseL3VlanStatsTable=cseL3VlanStatsTable, cseFlowOperFastAgePktThreshold=cseFlowOperFastAgePktThreshold, cseFlowDataOctets=cseFlowDataOctets, cseNetflowLSExportDataSourceMask=cseNetflowLSExportDataSourceMask, cseNetflowLSExportNDEVersionNumber=cseNetflowLSExportNDEVersionNumber, cseBridgedFlowStatsCtrlEntry=cseBridgedFlowStatsCtrlEntry, cseL3VlanInPkts=cseL3VlanInPkts, cseFlowDataIpQOS=cseFlowDataIpQOS, cseMIBCompliances=cseMIBCompliances, cseFlowDataLastUsed=cseFlowDataLastUsed, cseFlowQueryResultTotalOctets=cseFlowQueryResultTotalOctets, cseFlowMcastResultCreatedTS=cseFlowMcastResultCreatedTS, cseStatisticsGroup=cseStatisticsGroup)
