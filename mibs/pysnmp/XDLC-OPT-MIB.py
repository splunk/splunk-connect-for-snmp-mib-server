#
# PySNMP MIB module XDLC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XDLC-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:36:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, mgmt, Bits, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, NotificationType, enterprises, Unsigned32, MibIdentifier, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "mgmt", "Bits", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "NotificationType", "enterprises", "Unsigned32", "MibIdentifier", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContXDLC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PPCTXDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13), )
if mibBuilder.loadTexts: cdx6500PPCTXDLCPortTable.setStatus('mandatory')
cdx6500PPCTXDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcpCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTXDLCPortEntry.setStatus('mandatory')
cdx6500xdlcpCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCfgPortNumber.setStatus('mandatory')
cdx6500xdlcpPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortControl.setStatus('mandatory')
cdx6500xdlcpTxCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTxCoding.setStatus('mandatory')
cdx6500xdlcpLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("fdx", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpLineType.setStatus('mandatory')
cdx6500xdlcpTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tws", 0), ("twa", 1), ("newvalTws", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTxType.setStatus('mandatory')
cdx6500xdlcpClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpClockSource.setStatus('mandatory')
cdx6500xdlcpClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpClockSpeed.setStatus('mandatory')
cdx6500xdlcpStationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpStationCnt.setStatus('mandatory')
cdx6500xdlcpPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPollTimer.setStatus('mandatory')
cdx6500xdlcpPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPollPeriod.setStatus('mandatory')
cdx6500xdlcpTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTries.setStatus('mandatory')
cdx6500xdlcpPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortOptions.setStatus('mandatory')
cdx6500xdlcpPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortAddress.setStatus('mandatory')
cdx6500xdlcpRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRestartTimer.setStatus('mandatory')
cdx6500xdlcpResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpResetTimer.setStatus('mandatory')
cdx6500xdlcpCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCallTimer.setStatus('mandatory')
cdx6500xdlcpClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpClearTimer.setStatus('mandatory')
cdx6500xdlcpMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMaxFrameSize.setStatus('mandatory')
cdx6500xdlcpElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpElectricalInterfaceType.setStatus('mandatory')
cdx6500xdlcpV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500xdlcpHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTXDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13), )
if mibBuilder.loadTexts: cdx6500PPSTXDLCPortTable.setStatus('mandatory')
cdx6500PPSTXDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcpStatsPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTXDLCPortEntry.setStatus('mandatory')
cdx6500xdlcpStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpStatsPortNumber.setStatus('mandatory')
cdx6500xdlcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortStatus.setStatus('mandatory')
cdx6500xdlcpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortSpeed.setStatus('mandatory')
cdx6500xdlcpUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUtilizationIn.setStatus('mandatory')
cdx6500xdlcpUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUtilizationOut.setStatus('mandatory')
cdx6500xdlcpCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharInTotal.setStatus('mandatory')
cdx6500xdlcpCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharOutTotal.setStatus('mandatory')
cdx6500xdlcpCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharsInPerSec.setStatus('mandatory')
cdx6500xdlcpCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharsOutPerSec.setStatus('mandatory')
cdx6500xdlcpFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFrameInTotal.setStatus('mandatory')
cdx6500xdlcpFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFrameOutTotal.setStatus('mandatory')
cdx6500xdlcpFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFramesInPerSec.setStatus('mandatory')
cdx6500xdlcpFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFramesOutPerSec.setStatus('mandatory')
cdx6500xdlcpCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCRCErrors.setStatus('mandatory')
cdx6500xdlcpOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 15), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpOverrunErrors.setStatus('mandatory')
cdx6500xdlcpUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUnderrunErrors.setStatus('mandatory')
cdx6500xdlcpRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRNRFramesIn.setStatus('mandatory')
cdx6500xdlcpRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRNRFramesOut.setStatus('mandatory')
cdx6500xdlcpRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRRFramesIn.setStatus('mandatory')
cdx6500xdlcpRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRRFramesOut.setStatus('mandatory')
cdx6500xdlcpREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpREJFramesIn.setStatus('mandatory')
cdx6500xdlcpREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpREJFramesOut.setStatus('mandatory')
cdx6500xdlcpMX25StationsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsUp.setStatus('mandatory')
cdx6500xdlcpMX25StationsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsDown.setStatus('mandatory')
cdx6500xdlcpMX25StationsDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsDisabled.setStatus('mandatory')
cdx6500xdlcpSDLCStationsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsUp.setStatus('mandatory')
cdx6500xdlcpSDLCStationsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsDown.setStatus('mandatory')
cdx6500xdlcpSDLCStationsDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsDisabled.setStatus('mandatory')
cdx6500xdlcpStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpStateChange.setStatus('mandatory')
cdx6500xdlcpLinkDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 30), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpLinkDowns.setStatus('mandatory')
cdx6500xdlcpPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPacketsQueued.setStatus('mandatory')
cdx6500xdlcpSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSNRMInFrames.setStatus('mandatory')
cdx6500xdlcpSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSNRMOutFrames.setStatus('mandatory')
cdx6500xdlcpUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUAInFrames.setStatus('mandatory')
cdx6500xdlcpUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUAOutFrames.setStatus('mandatory')
cdx6500xdlcpDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDMInFrames.setStatus('mandatory')
cdx6500xdlcpDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDMOutFrames.setStatus('mandatory')
cdx6500xdlcpXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDInFrames.setStatus('mandatory')
cdx6500xdlcpXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDOutFrames.setStatus('mandatory')
cdx6500xdlcpDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDISCInFrames.setStatus('mandatory')
cdx6500xdlcpDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDISCOutFrames.setStatus('mandatory')
cdx6500xdlcpRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRDInFrames.setStatus('mandatory')
cdx6500xdlcpRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRDOutFrames.setStatus('mandatory')
cdx6500xdlcpFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFRMRInFrames.setStatus('mandatory')
cdx6500xdlcpFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFRMROutFrames.setStatus('mandatory')
cdx6500xdlcpUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUPInFrames.setStatus('mandatory')
cdx6500xdlcpUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUPOutFrames.setStatus('mandatory')
cdx6500xdlcpTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTESTInFrames.setStatus('mandatory')
cdx6500xdlcpTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTESTOutFrames.setStatus('mandatory')
cdx6500xdlcpXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDNullInFrames.setStatus('mandatory')
cdx6500xdlcpXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDNullOutFrames.setStatus('mandatory')
cdx6500xdlcpXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID0InFrames.setStatus('mandatory')
cdx6500xdlcpXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID0OutFrames.setStatus('mandatory')
cdx6500xdlcpXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID1InFrames.setStatus('mandatory')
cdx6500xdlcpXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID1OutFrames.setStatus('mandatory')
cdx6500xdlcpXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID3InFrames.setStatus('mandatory')
cdx6500xdlcpXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID3OutFrames.setStatus('mandatory')
cdx6500SPCTXDLCStationTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5))
cdx6500SPCTXDLCStnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1), )
if mibBuilder.loadTexts: cdx6500SPCTXDLCStnTable.setStatus('mandatory')
cdx6500SPCTXDLCStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsCfgPortNumber"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsCfgStationNumber"))
if mibBuilder.loadTexts: cdx6500SPCTXDLCStnEntry.setStatus('mandatory')
cdx6500xdlcsCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsCfgPortNumber.setStatus('mandatory')
cdx6500xdlcsCfgStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsCfgStationNumber.setStatus('mandatory')
cdx6500xdlcsStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("sdlc", 0), ("mx25", 1), ("newvalSdlc", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsStationType.setStatus('mandatory')
cdx6500SPCTXDLCSDLCStnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2), )
if mibBuilder.loadTexts: cdx6500SPCTXDLCSDLCStnTable.setStatus('mandatory')
cdx6500SPCTXDLCSDLCStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcCfgPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTXDLCSDLCStnEntry.setStatus('mandatory')
cdx6500xdlcsdlcCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCfgPortNum.setStatus('mandatory')
cdx6500xdlcsdlcCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCfgStationNum.setStatus('mandatory')
cdx6500xdlcsdlcStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStationAddress.setStatus('mandatory')
cdx6500xdlcsdlcFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameWinSize.setStatus('mandatory')
cdx6500xdlcsdlcAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcAutocallMnem.setStatus('mandatory')
cdx6500xdlcsdlcProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcProtocolID.setStatus('mandatory')
cdx6500xdlcsdlcCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCUG.setStatus('mandatory')
cdx6500xdlcsdlcOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcOptions.setStatus('mandatory')
cdx6500xdlcsdlcXID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID.setStatus('mandatory')
cdx6500xdlcsdlcStnSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStnSubaddress.setStatus('mandatory')
cdx6500xdlcsdlcBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcBillingRecords.setStatus('mandatory')
cdx6500xdlcsdlcProtectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("none", 0), ("cpOnly", 1), ("fullDcp", 2), ("newvalNone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcProtectionLevel.setStatus('mandatory')
cdx6500xdlcsdlcReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcReconnectTimeout.setStatus('mandatory')
cdx6500xdlcsdlcReconnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcReconnectLimit.setStatus('mandatory')
cdx6500xdlcsdlcCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCallTimer.setStatus('mandatory')
cdx6500xdlcsdlcIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcIdleTimer.setStatus('mandatory')
cdx6500xdlcsdlcVerConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcVerConnTimer.setStatus('mandatory')
cdx6500xdlcsdlcUnsusWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUnsusWaitTimer.setStatus('mandatory')
cdx6500SPCTXDLCMX25StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3), )
if mibBuilder.loadTexts: cdx6500SPCTXDLCMX25StnTable.setStatus('mandatory')
cdx6500SPCTXDLCMX25StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcmx25CfgPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcmx25CfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTXDLCMX25StnEntry.setStatus('mandatory')
cdx6500xdlcmx25CfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CfgPortNum.setStatus('mandatory')
cdx6500xdlcmx25CfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CfgStationNum.setStatus('mandatory')
cdx6500xdlcmx25StationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StationAddress.setStatus('mandatory')
cdx6500xdlcmx25PVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PVCChannels.setStatus('mandatory')
cdx6500xdlcmx25StartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StartingPVC.setStatus('mandatory')
cdx6500xdlcmx25SVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25SVCChannels.setStatus('mandatory')
cdx6500xdlcmx25StartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StartingSVC.setStatus('mandatory')
cdx6500xdlcmx25FrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameWinSize.setStatus('mandatory')
cdx6500xdlcmx25PacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PacketWinSize.setStatus('mandatory')
cdx6500xdlcmx25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25Options.setStatus('mandatory')
cdx6500xdlcmx25RCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RCDestination.setStatus('mandatory')
cdx6500xdlcmx25CUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CUG.setStatus('mandatory')
cdx6500xdlcmx25BillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25BillingRecords.setStatus('mandatory')
cdx6500xdlcmx25UpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UpperQueue.setStatus('mandatory')
cdx6500xdlcmx25LowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LowerQueue.setStatus('mandatory')
cdx6500SPSTXDLCStationTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5))
cdx6500SPSTXDLCSDLCStnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1), )
if mibBuilder.loadTexts: cdx6500SPSTXDLCSDLCStnTable.setStatus('mandatory')
cdx6500SPSTXDLCSDLCStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcStatsPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcStatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTXDLCSDLCStnEntry.setStatus('mandatory')
cdx6500xdlcsdlcStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStatsPortNum.setStatus('mandatory')
cdx6500xdlcsdlcStatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStatsStationNum.setStatus('mandatory')
cdx6500xdlcsdlcUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUtilizationIn.setStatus('mandatory')
cdx6500xdlcsdlcUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUtilizationOut.setStatus('mandatory')
cdx6500xdlcsdlcCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharInTotal.setStatus('mandatory')
cdx6500xdlcsdlcCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharOutTotal.setStatus('mandatory')
cdx6500xdlcsdlcCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharsInPerSec.setStatus('mandatory')
cdx6500xdlcsdlcCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharsOutPerSec.setStatus('mandatory')
cdx6500xdlcsdlcPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcPacketsQueued.setStatus('mandatory')
cdx6500xdlcsdlcFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameInTotal.setStatus('mandatory')
cdx6500xdlcsdlcFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameOutTotal.setStatus('mandatory')
cdx6500xdlcsdlcFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFramesInPerSec.setStatus('mandatory')
cdx6500xdlcsdlcFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFramesOutPerSec.setStatus('mandatory')
cdx6500xdlcsdlcRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRNRFramesIn.setStatus('mandatory')
cdx6500xdlcsdlcRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRNRFramesOut.setStatus('mandatory')
cdx6500xdlcsdlcRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRRFramesIn.setStatus('mandatory')
cdx6500xdlcsdlcRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRRFramesOut.setStatus('mandatory')
cdx6500xdlcsdlcREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcREJFramesIn.setStatus('mandatory')
cdx6500xdlcsdlcREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcREJFramesOut.setStatus('mandatory')
cdx6500xdlcsdlcQLLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQLLCState.setStatus('mandatory')
cdx6500xdlcsdlcQRRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 21), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRRIn.setStatus('mandatory')
cdx6500xdlcsdlcQRROut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 22), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRROut.setStatus('mandatory')
cdx6500xdlcsdlcSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcSNRMInFrames.setStatus('mandatory')
cdx6500xdlcsdlcSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcSNRMOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUAInFrames.setStatus('mandatory')
cdx6500xdlcsdlcUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUAOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDMInFrames.setStatus('mandatory')
cdx6500xdlcsdlcDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDMOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDInFrames.setStatus('mandatory')
cdx6500xdlcsdlcXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDISCInFrames.setStatus('mandatory')
cdx6500xdlcsdlcDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDISCOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRDInFrames.setStatus('mandatory')
cdx6500xdlcsdlcRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRDOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFRMRInFrames.setStatus('mandatory')
cdx6500xdlcsdlcFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFRMROutFrames.setStatus('mandatory')
cdx6500xdlcsdlcUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUPInFrames.setStatus('mandatory')
cdx6500xdlcsdlcUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUPOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcTESTInFrames.setStatus('mandatory')
cdx6500xdlcsdlcTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcTESTOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQSMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 41), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSMInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQSMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 42), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSMOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 43), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQUAInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 44), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQUAOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 45), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRDInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 46), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRDOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 47), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQFRMRInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 48), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQFRMROutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 49), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQXIDInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 50), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQXIDOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQDCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 51), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDCInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQDCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 52), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDCOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 53), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDMInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 54), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDMOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 55), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQTESTInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 56), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQTESTOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQSSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 57), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSSInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQSSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 58), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSSOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcQRSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 59), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRSInFrames.setStatus('mandatory')
cdx6500xdlcsdlcQRSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 60), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRSOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDNullInFrames.setStatus('mandatory')
cdx6500xdlcsdlcXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDNullOutFrames.setStatus('mandatory')
cdx6500xdlcsdlcXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID0InFrames.setStatus('mandatory')
cdx6500xdlcsdlcXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID0OutFrames.setStatus('mandatory')
cdx6500xdlcsdlcXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID1InFrames.setStatus('mandatory')
cdx6500xdlcsdlcXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID1OutFrames.setStatus('mandatory')
cdx6500xdlcsdlcXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID3InFrames.setStatus('mandatory')
cdx6500xdlcsdlcXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID3OutFrames.setStatus('mandatory')
cdx6500xdlcsdlcVSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcVSNumber.setStatus('mandatory')
cdx6500xdlcsdlcVRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcVRNumber.setStatus('mandatory')
cdx6500xdlcsdlcNRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcNRNumber.setStatus('mandatory')
cdx6500xdlcsdlcNSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcNSNumber.setStatus('mandatory')
cdx6500SPSTXDLCMX25StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2), )
if mibBuilder.loadTexts: cdx6500SPSTXDLCMX25StnTable.setStatus('mandatory')
cdx6500SPSTXDLCMX25StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcmx25StatsPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcmx25StatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTXDLCMX25StnEntry.setStatus('mandatory')
cdx6500xdlcmx25StatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StatsPortNum.setStatus('mandatory')
cdx6500xdlcmx25StatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StatsStationNum.setStatus('mandatory')
cdx6500xdlcmx25UtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UtilizationIn.setStatus('mandatory')
cdx6500xdlcmx25UtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UtilizationOut.setStatus('mandatory')
cdx6500xdlcmx25CharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharInTotal.setStatus('mandatory')
cdx6500xdlcmx25CharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharOutTotal.setStatus('mandatory')
cdx6500xdlcmx25CharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharsInPerSec.setStatus('mandatory')
cdx6500xdlcmx25CharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharsOutPerSec.setStatus('mandatory')
cdx6500xdlcmx25PktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktInTotal.setStatus('mandatory')
cdx6500xdlcmx25PktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktOutTotal.setStatus('mandatory')
cdx6500xdlcmx25PktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktsInPerSec.setStatus('mandatory')
cdx6500xdlcmx25PktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktsOutPerSec.setStatus('mandatory')
cdx6500xdlcmx25PacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PacketsQueued.setStatus('mandatory')
cdx6500xdlcmx25FrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameInTotal.setStatus('mandatory')
cdx6500xdlcmx25FrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameOutTotal.setStatus('mandatory')
cdx6500xdlcmx25FramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FramesInPerSec.setStatus('mandatory')
cdx6500xdlcmx25FramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FramesOutPerSec.setStatus('mandatory')
cdx6500xdlcmx25RNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRFramesIn.setStatus('mandatory')
cdx6500xdlcmx25RNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRFramesOut.setStatus('mandatory')
cdx6500xdlcmx25RRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RRFramesIn.setStatus('mandatory')
cdx6500xdlcmx25RRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RRFramesOut.setStatus('mandatory')
cdx6500xdlcmx25REJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJFramesIn.setStatus('mandatory')
cdx6500xdlcmx25REJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJFramesOut.setStatus('mandatory')
cdx6500xdlcmx25DataPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25DataPktsIn.setStatus('mandatory')
cdx6500xdlcmx25DataPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25DataPktsOut.setStatus('mandatory')
cdx6500xdlcmx25MaxSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25MaxSVC.setStatus('mandatory')
cdx6500xdlcmx25CurrentSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CurrentSVC.setStatus('mandatory')
cdx6500xdlcmx25MaxPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25MaxPVC.setStatus('mandatory')
cdx6500xdlcmx25CurrentPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CurrentPVC.setStatus('mandatory')
cdx6500xdlcmx25InfoInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InfoInFrames.setStatus('mandatory')
cdx6500xdlcmx25InfoOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InfoOutFrames.setStatus('mandatory')
cdx6500xdlcmx25SNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25SNRMInFrames.setStatus('mandatory')
cdx6500xdlcmx25SNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25SNRMOutFrames.setStatus('mandatory')
cdx6500xdlcmx25UAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UAInFrames.setStatus('mandatory')
cdx6500xdlcmx25UAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UAOutFrames.setStatus('mandatory')
cdx6500xdlcmx25FRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FRMRInFrames.setStatus('mandatory')
cdx6500xdlcmx25FRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FRMROutFrames.setStatus('mandatory')
cdx6500xdlcmx25RRInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RRInPkts.setStatus('mandatory')
cdx6500xdlcmx25RROutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RROutPkts.setStatus('mandatory')
cdx6500xdlcmx25RNRInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRInPkts.setStatus('mandatory')
cdx6500xdlcmx25RNROutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNROutPkts.setStatus('mandatory')
cdx6500xdlcmx25REJInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJInPkts.setStatus('mandatory')
cdx6500xdlcmx25REJOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJOutPkts.setStatus('mandatory')
cdx6500xdlcmx25InCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InCallReqs.setStatus('mandatory')
cdx6500xdlcmx25OutCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutCallReqs.setStatus('mandatory')
cdx6500xdlcmx25InCallAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InCallAccepts.setStatus('mandatory')
cdx6500xdlcmx25OutCallAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutCallAccepts.setStatus('mandatory')
cdx6500xdlcmx25InClearReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InClearReqs.setStatus('mandatory')
cdx6500xdlcmx25OutClearReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutClearReqs.setStatus('mandatory')
cdx6500xdlcmx25InClearConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InClearConfs.setStatus('mandatory')
cdx6500xdlcmx25OutClearConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutClearConfs.setStatus('mandatory')
cdx6500xdlcmx25InInterruptReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InInterruptReqs.setStatus('mandatory')
cdx6500xdlcmx25OutInterruptReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutInterruptReqs.setStatus('mandatory')
cdx6500xdlcmx25InInterruptConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InInterruptConfs.setStatus('mandatory')
cdx6500xdlcmx25OutInterruptConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutInterruptConfs.setStatus('mandatory')
cdx6500xdlcmx25InResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InResetReqs.setStatus('mandatory')
cdx6500xdlcmx25OutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutResetReqs.setStatus('mandatory')
cdx6500xdlcmx25InResetConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InResetConfs.setStatus('mandatory')
cdx6500xdlcmx25OutResetConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutResetConfs.setStatus('mandatory')
cdx6500xdlcmx25InRestartReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InRestartReqs.setStatus('mandatory')
cdx6500xdlcmx25OutRestartReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutRestartReqs.setStatus('mandatory')
cdx6500xdlcmx25InRestartConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InRestartConfs.setStatus('mandatory')
cdx6500xdlcmx25OutRestartConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutRestartConfs.setStatus('mandatory')
cdx6500xdlcmx25LastInLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LastInLCN.setStatus('mandatory')
cdx6500xdlcmx25InStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InStatus.setStatus('mandatory')
cdx6500xdlcmx25LICBPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCalledAddr.setStatus('mandatory')
cdx6500xdlcmx25LICBPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCallingAddr.setStatus('mandatory')
cdx6500xdlcmx25LICBPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 68), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPFacilities.setStatus('mandatory')
cdx6500xdlcmx25LICBPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 69), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCUD.setStatus('mandatory')
cdx6500xdlcmx25LICAPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCalledAddr.setStatus('mandatory')
cdx6500xdlcmx25LICAPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 71), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCallingAddr.setStatus('mandatory')
cdx6500xdlcmx25LICAPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPFacilities.setStatus('mandatory')
cdx6500xdlcmx25LICAPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCUD.setStatus('mandatory')
cdx6500xdlcmx25LastOutLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LastOutLCN.setStatus('mandatory')
cdx6500xdlcmx25OutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutStatus.setStatus('mandatory')
cdx6500xdlcmx25LOCBPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCalledAddr.setStatus('mandatory')
cdx6500xdlcmx25LOCBPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCallingAddr.setStatus('mandatory')
cdx6500xdlcmx25LOCBPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPFacilities.setStatus('mandatory')
cdx6500xdlcmx25LOCBPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 79), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCUD.setStatus('mandatory')
cdx6500xdlcmx25LOCAPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCalledAddr.setStatus('mandatory')
cdx6500xdlcmx25LOCAPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 81), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCallingAddr.setStatus('mandatory')
cdx6500xdlcmx25LOCAPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPFacilities.setStatus('mandatory')
cdx6500xdlcmx25LOCAPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCUD.setStatus('mandatory')
cdx6500ContXDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1), )
if mibBuilder.loadTexts: cdx6500ContXDLCStationTable.setStatus('mandatory')
cdx6500ContXDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsContPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsContStationNum"))
if mibBuilder.loadTexts: cdx6500ContXDLCStationEntry.setStatus('mandatory')
cdx6500xdlcsContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500xdlcsContPortNum.setStatus('mandatory')
cdx6500xdlcsContStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: cdx6500xdlcsContStationNum.setStatus('mandatory')
cdx6500xdlcsContBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContBootStation.setStatus('mandatory')
cdx6500xdlcsContDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContDisableStation.setStatus('mandatory')
cdx6500xdlcsContEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContEnableStation.setStatus('mandatory')
cdx6500xdlcsContResetStnStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContResetStnStats.setStatus('mandatory')
mibBuilder.exportSymbols("XDLC-OPT-MIB", cdx6500xdlcmx25CharInTotal=cdx6500xdlcmx25CharInTotal, cdx6500xdlcmx25LICBPFacilities=cdx6500xdlcmx25LICBPFacilities, cdx6500xdlcmx25UtilizationIn=cdx6500xdlcmx25UtilizationIn, cdx6500xdlcmx25InResetConfs=cdx6500xdlcmx25InResetConfs, cdx6500xdlcmx25CharsOutPerSec=cdx6500xdlcmx25CharsOutPerSec, cdx6500SPSTXDLCSDLCStnTable=cdx6500SPSTXDLCSDLCStnTable, cdx6500xdlcpCharsInPerSec=cdx6500xdlcpCharsInPerSec, cdx6500xdlcsContBootStation=cdx6500xdlcsContBootStation, cdx6500SPCTXDLCStnEntry=cdx6500SPCTXDLCStnEntry, cdx6500xdlcsdlcXID3OutFrames=cdx6500xdlcsdlcXID3OutFrames, cdx6500xdlcpUAOutFrames=cdx6500xdlcpUAOutFrames, cdx6500xdlcpPacketsQueued=cdx6500xdlcpPacketsQueued, cdx6500xdlcmx25LICAPCalledAddr=cdx6500xdlcmx25LICAPCalledAddr, cdx6500xdlcmx25PVCChannels=cdx6500xdlcmx25PVCChannels, cdx6500xdlcsdlcQSMOutFrames=cdx6500xdlcsdlcQSMOutFrames, cdx6500xdlcpHighSpeedElectricalInterfaceOption=cdx6500xdlcpHighSpeedElectricalInterfaceOption, cdx6500xdlcpCharsOutPerSec=cdx6500xdlcpCharsOutPerSec, cdx6500xdlcsdlcQRDInFrames=cdx6500xdlcsdlcQRDInFrames, cdx6500xdlcmx25InInterruptConfs=cdx6500xdlcmx25InInterruptConfs, cdx6500xdlcsdlcQFRMRInFrames=cdx6500xdlcsdlcQFRMRInFrames, cdx6500SPSTXDLCSDLCStnEntry=cdx6500SPSTXDLCSDLCStnEntry, cdx6500xdlcmx25OutRestartConfs=cdx6500xdlcmx25OutRestartConfs, cdx6500xdlcmx25LICAPCallingAddr=cdx6500xdlcmx25LICAPCallingAddr, cdx6500xdlcsdlcRNRFramesIn=cdx6500xdlcsdlcRNRFramesIn, cdx6500xdlcmx25InInterruptReqs=cdx6500xdlcmx25InInterruptReqs, cdx6500xdlcsdlcUPInFrames=cdx6500xdlcsdlcUPInFrames, cdx6500xdlcmx25Options=cdx6500xdlcmx25Options, cdx6500xdlcpFramesOutPerSec=cdx6500xdlcpFramesOutPerSec, cdx6500xdlcsdlcStationAddress=cdx6500xdlcsdlcStationAddress, cdx6500SPSTXDLCStationTable=cdx6500SPSTXDLCStationTable, cdx6500xdlcpPortOptions=cdx6500xdlcpPortOptions, cdx6500xdlcpLineType=cdx6500xdlcpLineType, cdx6500xdlcsdlcProtectionLevel=cdx6500xdlcsdlcProtectionLevel, cdx6500xdlcpClockSpeed=cdx6500xdlcpClockSpeed, cdx6500Statistics=cdx6500Statistics, cdx6500xdlcsdlcQUAOutFrames=cdx6500xdlcsdlcQUAOutFrames, cdx6500xdlcpRNRFramesIn=cdx6500xdlcpRNRFramesIn, cdx6500xdlcmx25UAOutFrames=cdx6500xdlcmx25UAOutFrames, cdx6500xdlcpUPInFrames=cdx6500xdlcpUPInFrames, cdx6500xdlcsdlcDISCOutFrames=cdx6500xdlcsdlcDISCOutFrames, cdx6500xdlcmx25LOCAPCalledAddr=cdx6500xdlcmx25LOCAPCalledAddr, cdx6500xdlcpRDInFrames=cdx6500xdlcpRDInFrames, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500xdlcsdlcQRSInFrames=cdx6500xdlcsdlcQRSInFrames, cdx6500xdlcpPortControl=cdx6500xdlcpPortControl, cdx6500xdlcmx25FrameWinSize=cdx6500xdlcmx25FrameWinSize, cdx6500xdlcsdlcBillingRecords=cdx6500xdlcsdlcBillingRecords, cdx6500xdlcmx25RNRFramesOut=cdx6500xdlcmx25RNRFramesOut, cdx6500xdlcsdlcFrameWinSize=cdx6500xdlcsdlcFrameWinSize, cdx6500xdlcpDMOutFrames=cdx6500xdlcpDMOutFrames, cdx6500SPSTXDLCMX25StnEntry=cdx6500SPSTXDLCMX25StnEntry, cdx6500xdlcsdlcVerConnTimer=cdx6500xdlcsdlcVerConnTimer, cdx6500xdlcsdlcProtocolID=cdx6500xdlcsdlcProtocolID, cdx6500xdlcsdlcCallTimer=cdx6500xdlcsdlcCallTimer, cdx6500xdlcpXID0OutFrames=cdx6500xdlcpXID0OutFrames, cdx6500xdlcsdlcQTESTInFrames=cdx6500xdlcsdlcQTESTInFrames, cdx6500xdlcpRDOutFrames=cdx6500xdlcpRDOutFrames, cdx6500xdlcmx25CfgPortNum=cdx6500xdlcmx25CfgPortNum, cdx6500xdlcsdlcUtilizationOut=cdx6500xdlcsdlcUtilizationOut, cdx6500xdlcsdlcFRMROutFrames=cdx6500xdlcsdlcFRMROutFrames, cdx6500xdlcsdlcXIDOutFrames=cdx6500xdlcsdlcXIDOutFrames, cdx6500xdlcmx25LOCBPCUD=cdx6500xdlcmx25LOCBPCUD, cdx6500xdlcmx25LOCAPFacilities=cdx6500xdlcmx25LOCAPFacilities, cdx6500xdlcsContResetStnStats=cdx6500xdlcsContResetStnStats, cdx6500xdlcsdlcDISCInFrames=cdx6500xdlcsdlcDISCInFrames, cdx6500xdlcsdlcStnSubaddress=cdx6500xdlcsdlcStnSubaddress, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500xdlcpElectricalInterfaceType=cdx6500xdlcpElectricalInterfaceType, cdx6500xdlcsContPortNum=cdx6500xdlcsContPortNum, cdx6500xdlcmx25CharsInPerSec=cdx6500xdlcmx25CharsInPerSec, cdx6500xdlcmx25CharOutTotal=cdx6500xdlcmx25CharOutTotal, cdx6500xdlcpMX25StationsDown=cdx6500xdlcpMX25StationsDown, cdx6500xdlcsdlcRDOutFrames=cdx6500xdlcsdlcRDOutFrames, cdx6500xdlcpUAInFrames=cdx6500xdlcpUAInFrames, cdx6500xdlcmx25SVCChannels=cdx6500xdlcmx25SVCChannels, cdx6500xdlcmx25LOCBPFacilities=cdx6500xdlcmx25LOCBPFacilities, cdx6500xdlcmx25LastInLCN=cdx6500xdlcmx25LastInLCN, cdx6500xdlcsdlcQRDOutFrames=cdx6500xdlcsdlcQRDOutFrames, Counter16=Counter16, cdx6500xdlcpMaxFrameSize=cdx6500xdlcpMaxFrameSize, cdx6500xdlcpTESTInFrames=cdx6500xdlcpTESTInFrames, cdx6500xdlcmx25InfoOutFrames=cdx6500xdlcmx25InfoOutFrames, cdx6500xdlcmx25REJInPkts=cdx6500xdlcmx25REJInPkts, cdx6500=cdx6500, cdx6500xdlcpStationCnt=cdx6500xdlcpStationCnt, cdx6500xdlcsdlcXID=cdx6500xdlcsdlcXID, cdx6500xdlcsdlcUAOutFrames=cdx6500xdlcsdlcUAOutFrames, codex=codex, cdx6500xdlcmx25OutResetReqs=cdx6500xdlcmx25OutResetReqs, cdx6500xdlcpRRFramesIn=cdx6500xdlcpRRFramesIn, cdx6500xdlcsdlcUPOutFrames=cdx6500xdlcsdlcUPOutFrames, cdx6500xdlcmx25InCallReqs=cdx6500xdlcmx25InCallReqs, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500xdlcpRNRFramesOut=cdx6500xdlcpRNRFramesOut, cdx6500xdlcpXID3InFrames=cdx6500xdlcpXID3InFrames, cdx6500xdlcmx25InStatus=cdx6500xdlcmx25InStatus, cdx6500xdlcpPortSpeed=cdx6500xdlcpPortSpeed, cdx6500xdlcmx25PktOutTotal=cdx6500xdlcmx25PktOutTotal, cdx6500xdlcpDISCInFrames=cdx6500xdlcpDISCInFrames, cdx6500xdlcsdlcUtilizationIn=cdx6500xdlcsdlcUtilizationIn, cdx6500xdlcpMX25StationsUp=cdx6500xdlcpMX25StationsUp, cdx6500xdlcsdlcQUAInFrames=cdx6500xdlcsdlcQUAInFrames, cdx6500xdlcpPortStatus=cdx6500xdlcpPortStatus, cdx6500xdlcpXIDOutFrames=cdx6500xdlcpXIDOutFrames, cdx6500xdlcpXID0InFrames=cdx6500xdlcpXID0InFrames, cdx6500xdlcmx25OutInterruptReqs=cdx6500xdlcmx25OutInterruptReqs, cdx6500xdlcpCharInTotal=cdx6500xdlcpCharInTotal, cdx6500xdlcsdlcQSSInFrames=cdx6500xdlcsdlcQSSInFrames, cdx6500xdlcpSDLCStationsDisabled=cdx6500xdlcpSDLCStationsDisabled, cdx6500xdlcpStatsPortNumber=cdx6500xdlcpStatsPortNumber, cdx6500xdlcsdlcQSMInFrames=cdx6500xdlcsdlcQSMInFrames, cdx6500xdlcsdlcQDCInFrames=cdx6500xdlcsdlcQDCInFrames, cdx6500xdlcmx25CurrentSVC=cdx6500xdlcmx25CurrentSVC, cdx6500xdlcsdlcRRFramesOut=cdx6500xdlcsdlcRRFramesOut, cdx6500xdlcpCharOutTotal=cdx6500xdlcpCharOutTotal, cdx6500PPCTXDLCPortTable=cdx6500PPCTXDLCPortTable, cdx6500xdlcsdlcReconnectTimeout=cdx6500xdlcsdlcReconnectTimeout, cdx6500xdlcmx25MaxPVC=cdx6500xdlcmx25MaxPVC, cdx6500xdlcpMX25StationsDisabled=cdx6500xdlcpMX25StationsDisabled, cdx6500xdlcsdlcFrameOutTotal=cdx6500xdlcsdlcFrameOutTotal, cdx6500xdlcsdlcOptions=cdx6500xdlcsdlcOptions, cdx6500xdlcmx25CurrentPVC=cdx6500xdlcmx25CurrentPVC, cdx6500xdlcpUtilizationIn=cdx6500xdlcpUtilizationIn, cdx6500xdlcsdlcFRMRInFrames=cdx6500xdlcsdlcFRMRInFrames, cdx6500ContXDLCStationEntry=cdx6500ContXDLCStationEntry, cdx6500xdlcmx25LastOutLCN=cdx6500xdlcmx25LastOutLCN, cdx6500xdlcmx25LICBPCallingAddr=cdx6500xdlcmx25LICBPCallingAddr, cdx6500xdlcsdlcCharOutTotal=cdx6500xdlcsdlcCharOutTotal, cdx6500xdlcsdlcCUG=cdx6500xdlcsdlcCUG, cdx6500xdlcmx25UtilizationOut=cdx6500xdlcmx25UtilizationOut, cdx6500xdlcsdlcXID1InFrames=cdx6500xdlcsdlcXID1InFrames, cdx6500xdlcmx25OutStatus=cdx6500xdlcmx25OutStatus, cdx6500xdlcmx25LOCBPCalledAddr=cdx6500xdlcmx25LOCBPCalledAddr, cdx6500xdlcpTESTOutFrames=cdx6500xdlcpTESTOutFrames, cdx6500xdlcsStationType=cdx6500xdlcsStationType, cdx6500xdlcsdlcTESTOutFrames=cdx6500xdlcsdlcTESTOutFrames, cdx6500xdlcsdlcREJFramesIn=cdx6500xdlcsdlcREJFramesIn, cdx6500xdlcpFramesInPerSec=cdx6500xdlcpFramesInPerSec, cdx6500xdlcsdlcSNRMOutFrames=cdx6500xdlcsdlcSNRMOutFrames, cdx6500xdlcsdlcXID3InFrames=cdx6500xdlcsdlcXID3InFrames, cdx6500xdlcpSDLCStationsUp=cdx6500xdlcpSDLCStationsUp, cdx6500xdlcmx25StatsPortNum=cdx6500xdlcmx25StatsPortNum, cdx6500SPCTXDLCStationTable=cdx6500SPCTXDLCStationTable, cdx6500xdlcpV24ElectricalInterfaceOption=cdx6500xdlcpV24ElectricalInterfaceOption, cdx6500xdlcmx25StartingPVC=cdx6500xdlcmx25StartingPVC, cdx6500xdlcpSNRMOutFrames=cdx6500xdlcpSNRMOutFrames, cdx6500xdlcmx25OutRestartReqs=cdx6500xdlcmx25OutRestartReqs, cdx6500Configuration=cdx6500Configuration, cdx6500xdlcmx25SNRMInFrames=cdx6500xdlcmx25SNRMInFrames, cdx6500xdlcmx25MaxSVC=cdx6500xdlcmx25MaxSVC, cdx6500xdlcsdlcRRFramesIn=cdx6500xdlcsdlcRRFramesIn, cdx6500xdlcsdlcReconnectLimit=cdx6500xdlcsdlcReconnectLimit, cdx6500xdlcsdlcFramesOutPerSec=cdx6500xdlcsdlcFramesOutPerSec, cdxProductSpecific=cdxProductSpecific, cdx6500xdlcpDISCOutFrames=cdx6500xdlcpDISCOutFrames, cdx6500xdlcsdlcXIDInFrames=cdx6500xdlcsdlcXIDInFrames, cdx6500xdlcsdlcFramesInPerSec=cdx6500xdlcsdlcFramesInPerSec, cdx6500xdlcpPollTimer=cdx6500xdlcpPollTimer, cdx6500xdlcpSDLCStationsDown=cdx6500xdlcpSDLCStationsDown, cdx6500ContXDLCStationTable=cdx6500ContXDLCStationTable, cdx6500xdlcsdlcDMOutFrames=cdx6500xdlcsdlcDMOutFrames, cdx6500xdlcsdlcAutocallMnem=cdx6500xdlcsdlcAutocallMnem, cdx6500PPSTXDLCPortTable=cdx6500PPSTXDLCPortTable, cdx6500xdlcsdlcQXIDInFrames=cdx6500xdlcsdlcQXIDInFrames, cdx6500xdlcsdlcXID1OutFrames=cdx6500xdlcsdlcXID1OutFrames, cdx6500xdlcsdlcXIDNullInFrames=cdx6500xdlcsdlcXIDNullInFrames, cdx6500xdlcmx25UAInFrames=cdx6500xdlcmx25UAInFrames, cdx6500xdlcsdlcStatsPortNum=cdx6500xdlcsdlcStatsPortNum, cdx6500xdlcsdlcFrameInTotal=cdx6500xdlcsdlcFrameInTotal, cdx6500xdlcpXIDInFrames=cdx6500xdlcpXIDInFrames, cdx6500xdlcpREJFramesIn=cdx6500xdlcpREJFramesIn, cdx6500xdlcmx25PktInTotal=cdx6500xdlcmx25PktInTotal, cdx6500xdlcmx25PktsOutPerSec=cdx6500xdlcmx25PktsOutPerSec, cdx6500xdlcsdlcQXIDOutFrames=cdx6500xdlcsdlcQXIDOutFrames, cdx6500Controls=cdx6500Controls, cdx6500xdlcpTxType=cdx6500xdlcpTxType, cdx6500xdlcmx25BillingRecords=cdx6500xdlcmx25BillingRecords, cdx6500xdlcmx25InfoInFrames=cdx6500xdlcmx25InfoInFrames, cdx6500xdlcpDMInFrames=cdx6500xdlcpDMInFrames, cdx6500xdlcsdlcQFRMROutFrames=cdx6500xdlcsdlcQFRMROutFrames, cdx6500xdlcmx25FrameInTotal=cdx6500xdlcmx25FrameInTotal, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500xdlcsdlcUnsusWaitTimer=cdx6500xdlcsdlcUnsusWaitTimer, cdx6500xdlcpRRFramesOut=cdx6500xdlcpRRFramesOut, cdx6500xdlcmx25LOCAPCallingAddr=cdx6500xdlcmx25LOCAPCallingAddr, cdx6500xdlcpPollPeriod=cdx6500xdlcpPollPeriod, cdx6500xdlcpPortAddress=cdx6500xdlcpPortAddress, cdx6500xdlcsdlcQTESTOutFrames=cdx6500xdlcsdlcQTESTOutFrames, cdx6500xdlcpRestartTimer=cdx6500xdlcpRestartTimer, cdx6500xdlcsdlcQRSOutFrames=cdx6500xdlcsdlcQRSOutFrames, cdx6500xdlcpFRMRInFrames=cdx6500xdlcpFRMRInFrames, cdx6500xdlcpOverrunErrors=cdx6500xdlcpOverrunErrors, cdx6500PPCTXDLCPortEntry=cdx6500PPCTXDLCPortEntry, cdx6500SPCTXDLCSDLCStnEntry=cdx6500SPCTXDLCSDLCStnEntry, cdx6500xdlcpTxCoding=cdx6500xdlcpTxCoding, cdx6500xdlcpTries=cdx6500xdlcpTries, cdx6500xdlcmx25LICAPFacilities=cdx6500xdlcmx25LICAPFacilities, cdx6500SPSTXDLCMX25StnTable=cdx6500SPSTXDLCMX25StnTable, cdx6500xdlcmx25InClearConfs=cdx6500xdlcmx25InClearConfs, cdx6500xdlcmx25FrameOutTotal=cdx6500xdlcmx25FrameOutTotal, cdx6500xdlcsdlcQDMOutFrames=cdx6500xdlcsdlcQDMOutFrames, cdx6500xdlcmx25LICAPCUD=cdx6500xdlcmx25LICAPCUD, cdx6500xdlcsdlcCharsOutPerSec=cdx6500xdlcsdlcCharsOutPerSec, DisplayString=DisplayString, cdx6500xdlcsdlcQRRIn=cdx6500xdlcsdlcQRRIn, cdx6500xdlcsdlcQDCOutFrames=cdx6500xdlcsdlcQDCOutFrames, cdx6500xdlcpStateChange=cdx6500xdlcpStateChange, cdx6500xdlcmx25DataPktsIn=cdx6500xdlcmx25DataPktsIn, cdx6500xdlcmx25OutCallReqs=cdx6500xdlcmx25OutCallReqs, cdx6500xdlcpCRCErrors=cdx6500xdlcpCRCErrors, cdx6500xdlcsdlcQSSOutFrames=cdx6500xdlcsdlcQSSOutFrames, cdx6500xdlcmx25LICBPCalledAddr=cdx6500xdlcmx25LICBPCalledAddr, cdx6500xdlcmx25StationAddress=cdx6500xdlcmx25StationAddress, cdx6500xdlcmx25StatsStationNum=cdx6500xdlcmx25StatsStationNum, cdx6500xdlcsdlcRNRFramesOut=cdx6500xdlcsdlcRNRFramesOut, cdx6500xdlcpFrameOutTotal=cdx6500xdlcpFrameOutTotal, cdx6500xdlcsCfgPortNumber=cdx6500xdlcsCfgPortNumber, cdx6500xdlcmx25PacketWinSize=cdx6500xdlcmx25PacketWinSize, cdx6500xdlcsdlcQDMInFrames=cdx6500xdlcsdlcQDMInFrames, cdx6500xdlcpClearTimer=cdx6500xdlcpClearTimer, cdx6500xdlcpClockSource=cdx6500xdlcpClockSource, cdx6500xdlcmx25OutCallAccepts=cdx6500xdlcmx25OutCallAccepts, cdx6500xdlcmx25RNRInPkts=cdx6500xdlcmx25RNRInPkts, cdx6500xdlcsdlcDMInFrames=cdx6500xdlcsdlcDMInFrames, cdx6500SPCTXDLCStnTable=cdx6500SPCTXDLCStnTable, cdx6500xdlcmx25DataPktsOut=cdx6500xdlcmx25DataPktsOut, cdx6500ContXDLC=cdx6500ContXDLC, cdx6500xdlcsdlcCfgPortNum=cdx6500xdlcsdlcCfgPortNum, cdx6500xdlcpResetTimer=cdx6500xdlcpResetTimer, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500xdlcmx25LowerQueue=cdx6500xdlcmx25LowerQueue, cdx6500xdlcpUtilizationOut=cdx6500xdlcpUtilizationOut, cdx6500SPCTXDLCMX25StnEntry=cdx6500SPCTXDLCMX25StnEntry, cdx6500xdlcsContEnableStation=cdx6500xdlcsContEnableStation, cdx6500xdlcsCfgStationNumber=cdx6500xdlcsCfgStationNumber, cdx6500xdlcpFRMROutFrames=cdx6500xdlcpFRMROutFrames, cdx6500xdlcsdlcXID0InFrames=cdx6500xdlcsdlcXID0InFrames, cdx6500xdlcsdlcUAInFrames=cdx6500xdlcsdlcUAInFrames, cdx6500xdlcpXIDNullOutFrames=cdx6500xdlcpXIDNullOutFrames, cdx6500xdlcmx25FramesOutPerSec=cdx6500xdlcmx25FramesOutPerSec, cdx6500xdlcsdlcXIDNullOutFrames=cdx6500xdlcsdlcXIDNullOutFrames, cdx6500xdlcmx25InResetReqs=cdx6500xdlcmx25InResetReqs, cdx6500xdlcsdlcTESTInFrames=cdx6500xdlcsdlcTESTInFrames, cdx6500xdlcsdlcQRROut=cdx6500xdlcsdlcQRROut, cdx6500xdlcmx25RRFramesOut=cdx6500xdlcmx25RRFramesOut, cdx6500xdlcsdlcStatsStationNum=cdx6500xdlcsdlcStatsStationNum, cdx6500xdlcsdlcPacketsQueued=cdx6500xdlcsdlcPacketsQueued, cdx6500xdlcpREJFramesOut=cdx6500xdlcpREJFramesOut, cdx6500xdlcpUPOutFrames=cdx6500xdlcpUPOutFrames, cdx6500xdlcsdlcCharInTotal=cdx6500xdlcsdlcCharInTotal, cdx6500xdlcmx25RNRFramesIn=cdx6500xdlcmx25RNRFramesIn, cdx6500xdlcsdlcVRNumber=cdx6500xdlcsdlcVRNumber, cdx6500xdlcsContDisableStation=cdx6500xdlcsContDisableStation, cdx6500xdlcpSNRMInFrames=cdx6500xdlcpSNRMInFrames)
mibBuilder.exportSymbols("XDLC-OPT-MIB", cdx6500xdlcmx25OutClearConfs=cdx6500xdlcmx25OutClearConfs, cdx6500xdlcmx25RRInPkts=cdx6500xdlcmx25RRInPkts, cdx6500xdlcmx25StartingSVC=cdx6500xdlcmx25StartingSVC, cdx6500xdlcmx25LOCAPCUD=cdx6500xdlcmx25LOCAPCUD, cdx6500xdlcmx25RCDestination=cdx6500xdlcmx25RCDestination, cdx6500xdlcsdlcXID0OutFrames=cdx6500xdlcsdlcXID0OutFrames, cdx6500xdlcsdlcQLLCState=cdx6500xdlcsdlcQLLCState, cdx6500xdlcsdlcCharsInPerSec=cdx6500xdlcsdlcCharsInPerSec, cdx6500xdlcpCfgPortNumber=cdx6500xdlcpCfgPortNumber, cdx6500xdlcpLinkDowns=cdx6500xdlcpLinkDowns, cdx6500xdlcmx25InCallAccepts=cdx6500xdlcmx25InCallAccepts, cdx6500xdlcsdlcRDInFrames=cdx6500xdlcsdlcRDInFrames, cdx6500xdlcmx25LICBPCUD=cdx6500xdlcmx25LICBPCUD, cdx6500xdlcmx25InRestartReqs=cdx6500xdlcmx25InRestartReqs, cdx6500SPCTXDLCSDLCStnTable=cdx6500SPCTXDLCSDLCStnTable, cdx6500xdlcpUnderrunErrors=cdx6500xdlcpUnderrunErrors, cdx6500xdlcmx25PacketsQueued=cdx6500xdlcmx25PacketsQueued, cdx6500xdlcmx25OutInterruptConfs=cdx6500xdlcmx25OutInterruptConfs, cdx6500PPSTXDLCPortEntry=cdx6500PPSTXDLCPortEntry, cdx6500xdlcpXID3OutFrames=cdx6500xdlcpXID3OutFrames, cdx6500xdlcmx25RRFramesIn=cdx6500xdlcmx25RRFramesIn, cdx6500xdlcpFrameInTotal=cdx6500xdlcpFrameInTotal, cdx6500xdlcmx25RNROutPkts=cdx6500xdlcmx25RNROutPkts, cdx6500xdlcmx25REJOutPkts=cdx6500xdlcmx25REJOutPkts, cdx6500xdlcpXID1OutFrames=cdx6500xdlcpXID1OutFrames, cdx6500xdlcsdlcNRNumber=cdx6500xdlcsdlcNRNumber, cdx6500xdlcsdlcVSNumber=cdx6500xdlcsdlcVSNumber, cdx6500xdlcmx25OutClearReqs=cdx6500xdlcmx25OutClearReqs, cdx6500xdlcmx25InRestartConfs=cdx6500xdlcmx25InRestartConfs, cdx6500xdlcmx25FRMRInFrames=cdx6500xdlcmx25FRMRInFrames, cdx6500xdlcmx25CfgStationNum=cdx6500xdlcmx25CfgStationNum, cdx6500xdlcmx25FRMROutFrames=cdx6500xdlcmx25FRMROutFrames, cdx6500xdlcsdlcIdleTimer=cdx6500xdlcsdlcIdleTimer, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500xdlcsdlcCfgStationNum=cdx6500xdlcsdlcCfgStationNum, cdx6500xdlcmx25REJFramesIn=cdx6500xdlcmx25REJFramesIn, cdx6500xdlcsdlcSNRMInFrames=cdx6500xdlcsdlcSNRMInFrames, cdx6500SPCTXDLCMX25StnTable=cdx6500SPCTXDLCMX25StnTable, cdx6500xdlcmx25REJFramesOut=cdx6500xdlcmx25REJFramesOut, cdx6500xdlcsContStationNum=cdx6500xdlcsContStationNum, cdx6500xdlcsdlcNSNumber=cdx6500xdlcsdlcNSNumber, cdx6500xdlcmx25LOCBPCallingAddr=cdx6500xdlcmx25LOCBPCallingAddr, cdx6500xdlcmx25FramesInPerSec=cdx6500xdlcmx25FramesInPerSec, cdx6500xdlcpXIDNullInFrames=cdx6500xdlcpXIDNullInFrames, cdx6500xdlcmx25InClearReqs=cdx6500xdlcmx25InClearReqs, cdx6500xdlcmx25OutResetConfs=cdx6500xdlcmx25OutResetConfs, cdx6500xdlcpXID1InFrames=cdx6500xdlcpXID1InFrames, cdx6500xdlcmx25CUG=cdx6500xdlcmx25CUG, cdx6500xdlcmx25UpperQueue=cdx6500xdlcmx25UpperQueue, cdx6500xdlcmx25PktsInPerSec=cdx6500xdlcmx25PktsInPerSec, cdx6500xdlcmx25SNRMOutFrames=cdx6500xdlcmx25SNRMOutFrames, cdx6500xdlcpCallTimer=cdx6500xdlcpCallTimer, cdx6500xdlcsdlcREJFramesOut=cdx6500xdlcsdlcREJFramesOut, cdx6500xdlcmx25RROutPkts=cdx6500xdlcmx25RROutPkts)
