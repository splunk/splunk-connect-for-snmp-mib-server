#
# PySNMP MIB module NSCDX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSCDX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
nscDx, = mibBuilder.importSymbols("NSC-MIB", "nscDx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, ModuleIdentity, IpAddress, MibIdentifier, NotificationType, Gauge32, Counter64, ObjectIdentity, Bits, iso, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "ModuleIdentity", "IpAddress", "MibIdentifier", "NotificationType", "Gauge32", "Counter64", "ObjectIdentity", "Bits", "iso", "Counter32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nscDxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1))
nscDxConfigSecondsToReset = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxConfigSecondsToReset.setStatus('mandatory')
nscDxConfigFirmwareRevTab = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigFirmwareRevTab.setStatus('mandatory')
nscDxConfigBufferMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigBufferMemorySize.setStatus('mandatory')
nscDxConfigSecondsSinceMc = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigSecondsSinceMc.setStatus('mandatory')
nscDxConfigProcessorMask = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigProcessorMask.setStatus('mandatory')
nscDxConfigControlAddr = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigControlAddr.setStatus('mandatory')
nscDxConfigLargePageSize = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigLargePageSize.setStatus('mandatory')
nscDxConfigBoardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 8), )
if mibBuilder.loadTexts: nscDxConfigBoardInfoTable.setStatus('mandatory')
nscDxConfigBoardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 8, 1), ).setIndexNames((0, "NSCDX-MIB", "nscDxConfigBoardInfoEntSlotNum"))
if mibBuilder.loadTexts: nscDxConfigBoardInfoEntry.setStatus('mandatory')
nscDxConfigBoardInfoEntSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigBoardInfoEntSlotNum.setStatus('mandatory')
nscDxConfigBoardInfoEntBoardPart = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigBoardInfoEntBoardPart.setStatus('mandatory')
nscDxConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigTime.setStatus('mandatory')
nscDxConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigDate.setStatus('mandatory')
nscDxConfigStartType = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("powerup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigStartType.setStatus('mandatory')
nscDxConfigMemoryDivision = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxConfigMemoryDivision.setStatus('mandatory')
nscDxProcTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2), )
if mibBuilder.loadTexts: nscDxProcTable.setStatus('mandatory')
nscDxProcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2, 1), ).setIndexNames((0, "NSCDX-MIB", "nscDxProcTableEntKeyId"))
if mibBuilder.loadTexts: nscDxProcTableEntry.setStatus('mandatory')
nscDxProcTableEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxProcTableEntKeyId.setStatus('mandatory')
nscDxProcTableEntType = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxProcTableEntType.setStatus('mandatory')
nscDxProcTableEntFirmwareNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxProcTableEntFirmwareNum.setStatus('mandatory')
nscDxProcTableEntHardwareNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxProcTableEntHardwareNum.setStatus('mandatory')
nscDxProcTableEntBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxProcTableEntBaseAddr.setStatus('mandatory')
nscDxProcTableEntPost = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxProcTableEntPost.setStatus('mandatory')
mibBuilder.exportSymbols("NSCDX-MIB", nscDxConfigTime=nscDxConfigTime, nscDxConfigSecondsSinceMc=nscDxConfigSecondsSinceMc, nscDxConfigMemoryDivision=nscDxConfigMemoryDivision, nscDxProcTableEntFirmwareNum=nscDxProcTableEntFirmwareNum, nscDxProcTableEntBaseAddr=nscDxProcTableEntBaseAddr, nscDxConfigDate=nscDxConfigDate, nscDxConfigLargePageSize=nscDxConfigLargePageSize, nscDxConfigBufferMemorySize=nscDxConfigBufferMemorySize, nscDxConfigFirmwareRevTab=nscDxConfigFirmwareRevTab, nscDxConfig=nscDxConfig, nscDxConfigControlAddr=nscDxConfigControlAddr, nscDxProcTableEntType=nscDxProcTableEntType, nscDxProcTableEntPost=nscDxProcTableEntPost, nscDxProcTableEntKeyId=nscDxProcTableEntKeyId, nscDxConfigBoardInfoEntSlotNum=nscDxConfigBoardInfoEntSlotNum, nscDxProcTableEntry=nscDxProcTableEntry, nscDxProcTableEntHardwareNum=nscDxProcTableEntHardwareNum, nscDxProcTable=nscDxProcTable, nscDxConfigStartType=nscDxConfigStartType, nscDxConfigBoardInfoEntBoardPart=nscDxConfigBoardInfoEntBoardPart, nscDxConfigBoardInfoTable=nscDxConfigBoardInfoTable, nscDxConfigBoardInfoEntry=nscDxConfigBoardInfoEntry, nscDxConfigProcessorMask=nscDxConfigProcessorMask, nscDxConfigSecondsToReset=nscDxConfigSecondsToReset)
