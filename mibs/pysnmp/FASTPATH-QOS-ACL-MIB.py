#
# PySNMP MIB module FASTPATH-QOS-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-QOS-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:58:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
fastPathQOS, = mibBuilder.importSymbols("FASTPATH-QOS-MIB", "fastPathQOS")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibIdentifier, Counter64, IpAddress, Bits, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, TimeTicks, iso, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "Counter64", "IpAddress", "Bits", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "TimeTicks", "iso", "Counter32", "Unsigned32")
RowStatus, MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
fastPathQOSACL = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2))
fastPathQOSACL.setRevisions(('2007-05-23 00:00', '2005-07-08 00:00', '2004-09-20 00:00', '2003-11-21 00:00', '2003-02-06 23:34',))
if mibBuilder.loadTexts: fastPathQOSACL.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: fastPathQOSACL.setOrganization('Netgear')
class EtypeValue(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1536, 65535)

class Ipv6AddressPrefix(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

aclNamedIpv4IndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNamedIpv4IndexNextFree.setStatus('current')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIndex.setStatus('current')
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
aclName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclName.setStatus('current')
aclIfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: aclIfTable.setStatus('current')
aclIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclIfIndex"), (0, "FASTPATH-QOS-ACL-MIB", "aclIfDirection"), (0, "FASTPATH-QOS-ACL-MIB", "aclIfSequence"), (0, "FASTPATH-QOS-ACL-MIB", "aclIfAclType"), (0, "FASTPATH-QOS-ACL-MIB", "aclIfAclId"))
if mibBuilder.loadTexts: aclIfEntry.setStatus('current')
aclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIfIndex.setStatus('current')
aclIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclIfDirection.setStatus('current')
aclIfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: aclIfSequence.setStatus('current')
aclIfAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: aclIfAclType.setStatus('current')
aclIfAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIfAclId.setStatus('current')
aclIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIfStatus.setStatus('current')
aclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4), )
if mibBuilder.loadTexts: aclRuleTable.setStatus('current')
aclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclIndex"), (0, "FASTPATH-QOS-ACL-MIB", "aclRuleIndex"))
if mibBuilder.loadTexts: aclRuleEntry.setStatus('current')
aclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclRuleIndex.setStatus('current')
aclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAction.setStatus('current')
aclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleProtocol.setStatus('current')
aclRuleSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setStatus('current')
aclRuleSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpMask.setStatus('current')
aclRuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4Port.setStatus('current')
aclRuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setStatus('current')
aclRuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setStatus('current')
aclRuleDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpAddress.setStatus('current')
aclRuleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpMask.setStatus('current')
aclRuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4Port.setStatus('current')
aclRuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setStatus('current')
aclRuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setStatus('current')
aclRuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIPDSCP.setStatus('current')
aclRuleIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpPrecedence.setStatus('current')
aclRuleIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosBits.setStatus('current')
aclRuleIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosMask.setStatus('current')
aclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleStatus.setStatus('current')
aclRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAssignQueueId.setStatus('current')
aclRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleRedirectIntf.setStatus('current')
aclRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleMatchEvery.setStatus('current')
aclRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 22), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleMirrorIntf.setStatus('current')
aclRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 4, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleLogging.setStatus('current')
aclMacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5))
aclMacIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacIndexNextFree.setStatus('current')
aclMacTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 2), )
if mibBuilder.loadTexts: aclMacTable.setStatus('current')
aclMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 2, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclMacIndex"))
if mibBuilder.loadTexts: aclMacEntry.setStatus('current')
aclMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclMacIndex.setStatus('current')
aclMacName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacName.setStatus('current')
aclMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacStatus.setStatus('current')
aclMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3), )
if mibBuilder.loadTexts: aclMacRuleTable.setStatus('current')
aclMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclMacIndex"), (0, "FASTPATH-QOS-ACL-MIB", "aclMacRuleIndex"))
if mibBuilder.loadTexts: aclMacRuleEntry.setStatus('current')
aclMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclMacRuleIndex.setStatus('current')
aclMacRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAction.setStatus('current')
aclMacRuleCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos.setStatus('current')
aclMacRuleCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleCos2.setStatus('current')
aclMacRuleDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacAddr.setStatus('current')
aclMacRuleDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleDestMacMask.setStatus('current')
aclMacRuleEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipx", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoe", 12), ("rarp", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeKey.setStatus('current')
aclMacRuleEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 8), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleEtypeValue.setStatus('current')
aclMacRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacAddr.setStatus('current')
aclMacRuleSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleSrcMacMask.setStatus('current')
aclMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId.setStatus('current')
aclMacRuleVlanIdRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeStart.setStatus('current')
aclMacRuleVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanIdRangeEnd.setStatus('current')
aclMacRuleVlanId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2.setStatus('current')
aclMacRuleVlanId2RangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeStart.setStatus('current')
aclMacRuleVlanId2RangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleVlanId2RangeEnd.setStatus('current')
aclMacRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleStatus.setStatus('current')
aclMacRuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleAssignQueueId.setStatus('current')
aclMacRuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 19), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleRedirectIntf.setStatus('current')
aclMacRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleMatchEvery.setStatus('current')
aclMacRuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 21), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleMirrorIntf.setStatus('current')
aclMacRuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 5, 3, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacRuleLogging.setStatus('current')
aclLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9))
aclTrapRuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleIndex.setStatus('current')
aclTrapRuleAction = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleAction.setStatus('current')
aclTrapRuleHitCount = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 4), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: aclTrapRuleHitCount.setStatus('current')
aclTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclTrapFlag.setStatus('current')
aclNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 0))
aclTrapRuleLogEvent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 0, 1)).setObjects(("FASTPATH-QOS-ACL-MIB", "aclIfAclType"), ("FASTPATH-QOS-ACL-MIB", "aclIfAclId"), ("FASTPATH-QOS-ACL-MIB", "aclTrapRuleIndex"), ("FASTPATH-QOS-ACL-MIB", "aclTrapRuleAction"), ("FASTPATH-QOS-ACL-MIB", "aclTrapRuleHitCount"))
if mibBuilder.loadTexts: aclTrapRuleLogEvent.setStatus('current')
aclIpv6IndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpv6IndexNextFree.setStatus('current')
aclIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 11), )
if mibBuilder.loadTexts: aclIpv6Table.setStatus('current')
aclIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 11, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclIpv6Index"))
if mibBuilder.loadTexts: aclIpv6Entry.setStatus('current')
aclIpv6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIpv6Index.setStatus('current')
aclIpv6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6Name.setStatus('current')
aclIpv6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6Status.setStatus('current')
aclIpv6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12), )
if mibBuilder.loadTexts: aclIpv6RuleTable.setStatus('current')
aclIpv6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclIpv6Index"), (0, "FASTPATH-QOS-ACL-MIB", "aclIpv6RuleIndex"))
if mibBuilder.loadTexts: aclIpv6RuleEntry.setStatus('current')
aclIpv6RuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclIpv6RuleIndex.setStatus('current')
aclIpv6RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleAction.setStatus('current')
aclIpv6RuleLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleLogging.setStatus('current')
aclIpv6RuleAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleAssignQueueId.setStatus('current')
aclIpv6RuleRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleRedirectIntf.setStatus('current')
aclIpv6RuleMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleMirrorIntf.setStatus('current')
aclIpv6RuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleMatchEvery.setStatus('current')
aclIpv6RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleProtocol.setStatus('current')
aclIpv6RuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4Port.setStatus('current')
aclIpv6RuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeStart.setStatus('current')
aclIpv6RuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleSrcL4PortRangeEnd.setStatus('current')
aclIpv6RuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4Port.setStatus('current')
aclIpv6RuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeStart.setStatus('current')
aclIpv6RuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleDestL4PortRangeEnd.setStatus('current')
aclIpv6RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleStatus.setStatus('current')
aclIpv6RuleFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleFlowLabel.setStatus('current')
aclIpv6RuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpv6RuleIPDSCP.setStatus('current')
aclRuleSrcIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 18), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclRuleSrcIpv6Prefix.setStatus('current')
aclRuleSrcIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpv6PrefixLength.setStatus('current')
aclRuleDstIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 20), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclRuleDstIpv6Prefix.setStatus('current')
aclRuleDstIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 12, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDstIpv6PrefixLength.setStatus('current')
aclVlanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13), )
if mibBuilder.loadTexts: aclVlanTable.setStatus('current')
aclVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13, 1), ).setIndexNames((0, "FASTPATH-QOS-ACL-MIB", "aclVlanIndex"), (0, "FASTPATH-QOS-ACL-MIB", "aclVlanDirection"), (0, "FASTPATH-QOS-ACL-MIB", "aclVlanSequence"), (0, "FASTPATH-QOS-ACL-MIB", "aclVlanAclType"), (0, "FASTPATH-QOS-ACL-MIB", "aclVlanAclId"))
if mibBuilder.loadTexts: aclVlanEntry.setStatus('current')
aclVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclVlanIndex.setStatus('current')
aclVlanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclVlanDirection.setStatus('current')
aclVlanSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: aclVlanSequence.setStatus('current')
aclVlanAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: aclVlanAclType.setStatus('current')
aclVlanAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: aclVlanAclId.setStatus('current')
aclVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 2, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclVlanStatus.setStatus('current')
mibBuilder.exportSymbols("FASTPATH-QOS-ACL-MIB", aclIpv6RuleAction=aclIpv6RuleAction, aclVlanStatus=aclVlanStatus, aclVlanEntry=aclVlanEntry, aclMacEntry=aclMacEntry, aclRuleDestL4PortRangeStart=aclRuleDestL4PortRangeStart, PYSNMP_MODULE_ID=fastPathQOSACL, aclTrapRuleAction=aclTrapRuleAction, aclRuleTable=aclRuleTable, aclEntry=aclEntry, aclIpv6Entry=aclIpv6Entry, aclIpv6Status=aclIpv6Status, aclTrapRuleIndex=aclTrapRuleIndex, EtypeValue=EtypeValue, aclIpv6RuleRedirectIntf=aclIpv6RuleRedirectIntf, aclRuleSrcL4PortRangeStart=aclRuleSrcL4PortRangeStart, aclRuleSrcIpAddress=aclRuleSrcIpAddress, aclVlanDirection=aclVlanDirection, aclNotifications=aclNotifications, aclIpv6RuleSrcL4PortRangeEnd=aclIpv6RuleSrcL4PortRangeEnd, aclRuleProtocol=aclRuleProtocol, aclVlanTable=aclVlanTable, aclIpv6IndexNextFree=aclIpv6IndexNextFree, aclRuleDestIpMask=aclRuleDestIpMask, aclRuleStatus=aclRuleStatus, aclIfEntry=aclIfEntry, aclIpv6RuleDestL4PortRangeStart=aclIpv6RuleDestL4PortRangeStart, aclMacRuleAssignQueueId=aclMacRuleAssignQueueId, aclIpv6RuleIPDSCP=aclIpv6RuleIPDSCP, aclIpv6RuleMatchEvery=aclIpv6RuleMatchEvery, aclVlanSequence=aclVlanSequence, aclRuleLogging=aclRuleLogging, aclIpv6RuleSrcL4PortRangeStart=aclIpv6RuleSrcL4PortRangeStart, aclTable=aclTable, aclRuleIpPrecedence=aclRuleIpPrecedence, aclIpv6RuleFlowLabel=aclIpv6RuleFlowLabel, aclMacRuleCos2=aclMacRuleCos2, aclMacName=aclMacName, aclMacRuleVlanId2RangeStart=aclMacRuleVlanId2RangeStart, aclMacRuleStatus=aclMacRuleStatus, aclNamedIpv4IndexNextFree=aclNamedIpv4IndexNextFree, aclIpv6RuleLogging=aclIpv6RuleLogging, aclTrapRuleHitCount=aclTrapRuleHitCount, aclRuleDestL4Port=aclRuleDestL4Port, aclMacRuleVlanId=aclMacRuleVlanId, aclIpv6RuleDestL4PortRangeEnd=aclIpv6RuleDestL4PortRangeEnd, aclStatus=aclStatus, aclRuleAction=aclRuleAction, aclRuleDestIpAddress=aclRuleDestIpAddress, aclTrapRuleLogEvent=aclTrapRuleLogEvent, aclRuleAssignQueueId=aclRuleAssignQueueId, aclMacRuleVlanId2=aclMacRuleVlanId2, aclMacStatus=aclMacStatus, aclMacRuleDestMacMask=aclMacRuleDestMacMask, aclMacRuleSrcMacMask=aclMacRuleSrcMacMask, aclMacRuleCos=aclMacRuleCos, aclRuleIpTosBits=aclRuleIpTosBits, aclName=aclName, aclMacRuleLogging=aclMacRuleLogging, aclMacRuleSrcMacAddr=aclMacRuleSrcMacAddr, aclMacRuleMirrorIntf=aclMacRuleMirrorIntf, aclMacRuleEtypeValue=aclMacRuleEtypeValue, aclIpv6RuleEntry=aclIpv6RuleEntry, aclMacRuleDestMacAddr=aclMacRuleDestMacAddr, aclRuleSrcIpv6PrefixLength=aclRuleSrcIpv6PrefixLength, aclMacRuleVlanIdRangeEnd=aclMacRuleVlanIdRangeEnd, aclIfAclId=aclIfAclId, aclIfStatus=aclIfStatus, aclMacRuleMatchEvery=aclMacRuleMatchEvery, aclIfAclType=aclIfAclType, aclIpv6Index=aclIpv6Index, aclMacRuleVlanIdRangeStart=aclMacRuleVlanIdRangeStart, aclVlanAclId=aclVlanAclId, aclMacTable=aclMacTable, aclMacRuleAction=aclMacRuleAction, fastPathQOSACL=fastPathQOSACL, aclIfIndex=aclIfIndex, aclMacRuleIndex=aclMacRuleIndex, aclIpv6Name=aclIpv6Name, aclIpv6RuleAssignQueueId=aclIpv6RuleAssignQueueId, aclIpv6RuleSrcL4Port=aclIpv6RuleSrcL4Port, aclRuleRedirectIntf=aclRuleRedirectIntf, aclRuleIPDSCP=aclRuleIPDSCP, aclRuleEntry=aclRuleEntry, aclRuleSrcIpMask=aclRuleSrcIpMask, aclIfDirection=aclIfDirection, aclRuleSrcL4Port=aclRuleSrcL4Port, aclTrapFlag=aclTrapFlag, aclRuleIpTosMask=aclRuleIpTosMask, aclMacIndex=aclMacIndex, aclMacRuleEtypeKey=aclMacRuleEtypeKey, aclIpv6RuleTable=aclIpv6RuleTable, aclRuleIndex=aclRuleIndex, aclIpv6RuleMirrorIntf=aclIpv6RuleMirrorIntf, aclRuleMirrorIntf=aclRuleMirrorIntf, aclIfTable=aclIfTable, aclMacRuleVlanId2RangeEnd=aclMacRuleVlanId2RangeEnd, aclIpv6RuleDestL4Port=aclIpv6RuleDestL4Port, aclIndex=aclIndex, aclRuleDstIpv6PrefixLength=aclRuleDstIpv6PrefixLength, aclIfSequence=aclIfSequence, aclRuleMatchEvery=aclRuleMatchEvery, aclRuleSrcL4PortRangeEnd=aclRuleSrcL4PortRangeEnd, aclMacRuleRedirectIntf=aclMacRuleRedirectIntf, aclIpv6RuleStatus=aclIpv6RuleStatus, aclMacGroup=aclMacGroup, aclIpv6RuleProtocol=aclIpv6RuleProtocol, aclVlanAclType=aclVlanAclType, aclMacRuleTable=aclMacRuleTable, aclRuleSrcIpv6Prefix=aclRuleSrcIpv6Prefix, aclRuleDstIpv6Prefix=aclRuleDstIpv6Prefix, aclMacIndexNextFree=aclMacIndexNextFree, aclLoggingGroup=aclLoggingGroup, Ipv6AddressPrefix=Ipv6AddressPrefix, aclRuleDestL4PortRangeEnd=aclRuleDestL4PortRangeEnd, aclVlanIndex=aclVlanIndex, aclIpv6RuleIndex=aclIpv6RuleIndex, aclIpv6Table=aclIpv6Table, aclMacRuleEntry=aclMacRuleEntry)
