#
# PySNMP MIB module BAS-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
basSonet, = mibBuilder.importSymbols("BAS-MIB", "basSonet")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, ModuleIdentity, TimeTicks, Bits, Counter64, ObjectIdentity, MibIdentifier, Gauge32, Counter32, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "ModuleIdentity", "TimeTicks", "Bits", "Counter64", "ObjectIdentity", "MibIdentifier", "Gauge32", "Counter32", "NotificationType", "Unsigned32")
TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString")
basSonetMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1))
if mibBuilder.loadTexts: basSonetMib.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basSonetMib.setOrganization('Broadband Access Systems')
basSonetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1))
basSonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1), )
if mibBuilder.loadTexts: basSonetPathTable.setStatus('current')
basSonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: basSonetPathEntry.setStatus('current')
basSonetPathB3Err = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathB3Err.setStatus('current')
basSonetPathG1Err = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathG1Err.setStatus('current')
basSonetPathPais = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathPais.setStatus('current')
basSonetPathPrdi = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathPrdi.setStatus('current')
basSonetPathPlop = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathPlop.setStatus('current')
basSonetPathB3Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSonetPathB3Threshold.setStatus('current')
basSonetPathRxJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathRxJ1.setStatus('current')
basSonetPathRxC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathRxC2.setStatus('current')
basSonetPathRxG1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetPathRxG1.setStatus('current')
basSonetLineTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2), )
if mibBuilder.loadTexts: basSonetLineTable.setStatus('current')
basSonetLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: basSonetLineEntry.setStatus('current')
basSonetLineTxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineTxErr.setStatus('current')
basSonetLineB1Err = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineB1Err.setStatus('current')
basSonetLineB2Err = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineB2Err.setStatus('current')
basSonetLineM1Err = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineM1Err.setStatus('current')
basSonetLineRxFifoOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineRxFifoOverflow.setStatus('current')
basSonetLineRxAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineRxAbort.setStatus('current')
basSonetLineRxRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineRxRunts.setStatus('current')
basSonetLineLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineLoc.setStatus('current')
basSonetLineLof = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineLof.setStatus('current')
basSonetLineLos = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineLos.setStatus('current')
basSonetLineLais = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineLais.setStatus('current')
basSonetLineLrdi = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineLrdi.setStatus('current')
basSonetLineB1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSonetLineB1Threshold.setStatus('current')
basSonetLineB2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSonetLineB2Threshold.setStatus('current')
basSonetLineSFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSonetLineSFThreshold.setStatus('current')
basSonetLineSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSonetLineSDThreshold.setStatus('current')
basSonetLineLastCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineLastCleared.setStatus('current')
basSonetLineRxK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineRxK1.setStatus('current')
basSonetLineRxK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineRxK2.setStatus('current')
basSonetLineRxGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 20, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSonetLineRxGiants.setStatus('current')
mibBuilder.exportSymbols("BAS-SONET-MIB", basSonetPathRxG1=basSonetPathRxG1, basSonetLineB2Threshold=basSonetLineB2Threshold, basSonetPathPais=basSonetPathPais, basSonetLineRxFifoOverflow=basSonetLineRxFifoOverflow, basSonetLineTable=basSonetLineTable, basSonetLineRxK1=basSonetLineRxK1, basSonetLineLos=basSonetLineLos, basSonetLineB1Threshold=basSonetLineB1Threshold, basSonetPathRxJ1=basSonetPathRxJ1, basSonetPathG1Err=basSonetPathG1Err, basSonetLineB2Err=basSonetLineB2Err, basSonetObjects=basSonetObjects, basSonetPathB3Err=basSonetPathB3Err, basSonetLineLoc=basSonetLineLoc, basSonetLineRxRunts=basSonetLineRxRunts, basSonetLineSDThreshold=basSonetLineSDThreshold, basSonetLineLais=basSonetLineLais, basSonetLineRxK2=basSonetLineRxK2, basSonetPathEntry=basSonetPathEntry, PYSNMP_MODULE_ID=basSonetMib, basSonetLineSFThreshold=basSonetLineSFThreshold, basSonetLineM1Err=basSonetLineM1Err, basSonetLineRxAbort=basSonetLineRxAbort, basSonetLineLof=basSonetLineLof, basSonetLineLrdi=basSonetLineLrdi, basSonetLineLastCleared=basSonetLineLastCleared, basSonetPathPrdi=basSonetPathPrdi, basSonetPathPlop=basSonetPathPlop, basSonetLineRxGiants=basSonetLineRxGiants, basSonetLineEntry=basSonetLineEntry, basSonetPathB3Threshold=basSonetPathB3Threshold, basSonetLineB1Err=basSonetLineB1Err, basSonetLineTxErr=basSonetLineTxErr, basSonetMib=basSonetMib, basSonetPathRxC2=basSonetPathRxC2, basSonetPathTable=basSonetPathTable)
