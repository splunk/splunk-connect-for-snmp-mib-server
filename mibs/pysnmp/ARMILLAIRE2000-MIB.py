#
# PySNMP MIB module ARMILLAIRE2000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARMILLAIRE2000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, TimeTicks, iso, Bits, Integer32, NotificationType, ObjectIdentity, enterprises, NotificationType, ModuleIdentity, MibIdentifier, IpAddress, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "TimeTicks", "iso", "Bits", "Integer32", "NotificationType", "ObjectIdentity", "enterprises", "NotificationType", "ModuleIdentity", "MibIdentifier", "IpAddress", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
armillaire = MibIdentifier((1, 3, 6, 1, 4, 1, 4618))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 1, 2, 3, 17, 22, 23, 18))
    namedValues = NamedValues(("createandwait", 5), ("destroy", 6), ("active", 1), ("notinservice", 2), ("notready", 3), ("modified", 17), ("up", 22), ("down", 23), ("outofservice", 18))

class LrnRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 1, 2, 3, 18))
    namedValues = NamedValues(("createandwait", 5), ("destroy", 6), ("active", 1), ("notinservice", 2), ("notready", 3), ("outofservice", 18))

class CktRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 1, 2, 3, 17, 22, 23, 99, 18, 20))
    namedValues = NamedValues(("createandwait", 5), ("destroy", 6), ("active", 1), ("notinservice", 2), ("notready", 3), ("modified", 17), ("up", 22), ("down", 23), ("modifytimer", 99), ("outofservice", 18), ("block", 20))

class TmrRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(99, 1, 2, 3, 17, 22, 23, 18))
    namedValues = NamedValues(("modifytimer", 99), ("active", 1), ("notinservice", 2), ("notready", 3), ("modified", 17), ("up", 22), ("down", 23), ("outofservice", 18))

class UserLoginStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("login", 1), ("logininvalid", 2), ("adduser", 3), ("deleteuser", 4))

class UserLoginPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 8738))
    namedValues = NamedValues(("admin", 1), ("cts", 2), ("user", 8738))

class ProcessStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 34, 51, 170, 3, 172))
    namedValues = NamedValues(("down", 1), ("active", 34), ("standby", 51), ("outofservice", 170), ("switchingover", 3), ("unknown", 172))

class IsdnPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("primary", 0), ("secondary", 1), ("bearing", 2))

class IsdnType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("nfas", 1), ("fas", 0))

class OpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23))
    namedValues = NamedValues(("active", 1), ("down", 23))

class LinkOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23, 19))
    namedValues = NamedValues(("active", 1), ("down", 23), ("inhibit", 19))

class LinkSetOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23))
    namedValues = NamedValues(("active", 1), ("deactive", 23))

class CktOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23, 20))
    namedValues = NamedValues(("active", 1), ("down", 23), ("block", 20))

class IsdnTrnkOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23, 21))
    namedValues = NamedValues(("active", 1), ("down", 23), ("disable", 21))

class ModifyTmrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(99, 0))
    namedValues = NamedValues(("modifytimer", 99), ("noaction", 0))

class IfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("interface-t1", 0), ("interface-t3", 1), ("interface-ut3", 2), ("interface-oc3", 3), ("interface-ut3cp", 4), ("interface-oc3cp", 5), ("interface-e1", 8), ("interface-hde1", 9), ("interface-une3", 10), ("interface-stm", 11), ("interface-oc3aps", 12), ("interface-stm1aps", 13))

class AtmIfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 8))
    namedValues = NamedValues(("interface-t1", 0), ("interface-e1", 8))

class ConnectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("t3", 1), ("ut3", 2), ("e3", 10))

class EnableStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("yes", 1), ("no", 2))

class Ss7RouteType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0))
    namedValues = NamedValues(("load", 0))

class AddrIdentifier(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("unknown", 2), ("nationalnumber", 3))

class AddrType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("callpartynum", 1), ("transitnetwork", 2))

class NumPlan(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("nonumber", 0), ("isdnnumplan", 1))

class Direction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("in", 0), ("out", 1), ("both", 2))

class EnableOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 17))
    namedValues = NamedValues(("enable", 16), ("disable", 17))

class IsdnChnlMgtOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(11, 12))
    namedValues = NamedValues(("enable", 11), ("disable", 12))

class IsdnTrnkMgtOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(9, 10))
    namedValues = NamedValues(("enable", 9), ("disable", 10))

class BlockOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 0))
    namedValues = NamedValues(("block", 5), ("unblock", 6), ("noaction", 0))

class Level(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("level1", 1), ("level2", 2))

class ModemResetStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("yes", 1), ("no", 0))

class ModemEnableStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class MeasEnableStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class EthernetConnStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class Standard(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(65, 73, 84))
    namedValues = NamedValues(("ansi", 65), ("itu", 73), ("telmex", 84))

class TrunkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(34, 17))
    namedValues = NamedValues(("ss7", 34), ("isdn", 17))

class RouteType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ss7RouteType", 1), ("isdnRouteType", 2))

class AuditType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(65, 73))
    namedValues = NamedValues(("ansi", 65), ("itu", 73))

class AuditOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("audit", 1), ("noaction", 0))

class Controlstatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 11, 12, 0))
    namedValues = NamedValues(("blockckt", 5), ("unblock", 6), ("enablechnl", 11), ("disablechnl", 12), ("noaction", 0))

class LinkControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 0))
    namedValues = NamedValues(("inhibitlink", 1), ("uninhibitlink", 2), ("noaction", 0))

class LinkSetControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 0))
    namedValues = NamedValues(("activatelnkset", 3), ("deactivatelnkset", 4), ("noaction", 0))

class CircuitControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(7, 8, 13, 14, 15, 0))
    namedValues = NamedValues(("blockcic", 7), ("unblockcic", 8), ("queryckt", 13), ("validateckt", 14), ("resetckt", 15), ("noaction", 0))

class IsdnControlstatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(9, 10, 0))
    namedValues = NamedValues(("enabletrnk", 9), ("disabletrnk", 10), ("noaction", 0))

class MtpRteState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("rteavail", 1), ("rteunaval", 0))

class Bool(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("yes", 1), ("no", 0))

class LoadBalance(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disable", 0), ("enable", 1))

class TrnkGrpType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 33))
    namedValues = NamedValues(("ss7", 32), ("isdn", 33))

class ActiveAlarmAckStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("clear", 0), ("noaction", 1))

class EventType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("alarm", 1), ("emergency", 2), ("audit", 3), ("diagnostics", 4), ("security", 5), ("maintenance", 6))

class AlarmEvent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))
    namedValues = NamedValues(("general", 1), ("device", 2), ("protocol", 3), ("mfd", 4), ("cdr", 5), ("measurement", 6), ("log", 7), ("ig", 8), ("faultTolerance", 9), ("nomainevent", 0))

class AlarmSubEvent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("administration", 1), ("nosubevent", 0), ("operation", 2), ("mssc", 3), ("xconnect", 4), ("hub", 5), ("ss7lnk", 6), ("ss7Br", 7), ("isdn", 8), ("atm", 9))

class AlarmSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("informational", 4))

class RoffType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("le", 1), ("tandem", 2), ("intlgateway", 3))

class NameString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 24)

class AddrString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 24)

class CdrFlag(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noCdr", 0), ("ic", 1), ("og", 2), ("bi", 3))

class DSPCardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dsp2B", 1), ("dsp2C", 2))

class VoicePcm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(101, 102))
    namedValues = NamedValues(("alaw", 101), ("ulaw", 102))

class TGFeature(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class FTswitchOver(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("ftsig", 0), ("fticc", 1), ("ftisdn", 2), ("ftsphr", 3), ("ftlm", 4))

class LogFileAttr(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 2, 7, 1, 4, 5, 8, 6))
    namedValues = NamedValues(("alarmlog", 3), ("auditlog", 2), ("measlog", 7), ("diaglog", 1), ("scrtylog", 4), ("eventlog", 5), ("billlog", 8), ("emplog", 6))

class LogFileEnDis(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 2, 7, 1, 4, 5, 8, 6, 11, 0))
    namedValues = NamedValues(("alarmlog", 3), ("auditlog", 2), ("measlog", 7), ("diaglog", 1), ("scrtylog", 4), ("eventlog", 5), ("billlog", 8), ("emplog", 6), ("logall", 11), ("noaction", 0))

class SwitchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("national", 0), ("international", 1))

class LinkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(53, 54))
    namedValues = NamedValues(("speed-56K", 53), ("speed-64K", 54))

class LogType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(49, 48))
    namedValues = NamedValues(("on", 49), ("off", 48))

class EnableTrace(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class TrunkState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 255, 1, 2))
    namedValues = NamedValues(("idle", 0), ("unEquipped", 255), ("cP-Busy", 1), ("maintainance-Busy", 2))

class MeasPurgeFlag(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("autoOff", 0), ("autoOn", 1))

class E1MultiFrame(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cas", 1), ("ccs", 2))

class E1CRC4(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class TransClkSrc(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("loopTiming", 1), ("localTiming", 2))

class DS1LineType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("esF", 1), ("d4", 2))

class DS1LineCoding(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("b8zs", 1), ("ami", 2))

class DS1LBO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("upTo133Feet", 1), ("upTo266Feet", 2), ("upTo399Feet", 3), ("upTo533Feet", 4), ("upTo655Feet", 5), ("negative7-5Db", 6), ("negative15Db", 7), ("negative22-5Db", 8))

class DS3LineType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cbitParity", 1), ("clearChannel", 2))

class DS3LBO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

class DS3ATMCellMap(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("plcp", 1), ("directMapping", 2))

class TimerType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ansi", 1), ("itu", 2))

products = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1))
services = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 2))
armillaire2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2))
switchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1))
switchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2))
switchMeas = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3))
switchCdr = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4))
switchFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5))
switchMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6))
switchTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7))
switchGenInfoGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1))
switchPcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2))
switchUsrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3))
switchVersionGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4))
ss7 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1))
isdn = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2))
trnkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3))
rt = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4))
xconnect = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5))
enableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6))
measFile = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1))
measSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2))
measTrnkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3))
measLnk = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4))
modemFaultDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1))
lnp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2))
switchDSP = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3))
switchTGFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4))
ft = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 1))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2))
trace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3))
processStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4))
ethernetConnStatusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 5))
audit = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6))
trapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1))
alarmGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2))
ftSwitchOverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 1, 1))
logFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 1))
logFileGenEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 2))
logFileAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3))
auditInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1))
ss7LnkTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1))
ss7RouteTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2))
isdnTrnkTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3))
processStatusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1))
ss7Sig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1))
ss7Br = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2))
mtp2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3))
mtp3 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4))
isup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5))
ss7Route = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6))
mtp3GenTmrCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1))
switchName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 1), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchName.setStatus('mandatory')
switchDescr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDescr.setStatus('mandatory')
switchLocation = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchLocation.setStatus('mandatory')
switchContact = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchContact.setStatus('mandatory')
switchIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIPAddr.setStatus('mandatory')
switchUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchUpTime.setStatus('mandatory')
switchVersion = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVersion.setStatus('mandatory')
switchVerDescr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerDescr.setStatus('mandatory')
systemDescr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDescr.setStatus('mandatory')
switchType = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 10), SwitchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('mandatory')
switchNameStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchNameStatus.setStatus('mandatory')
switchPcInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: switchPcInfoTable.setStatus('mandatory')
switchPcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchPc"))
if mibBuilder.loadTexts: switchPcEntry.setStatus('mandatory')
switchPc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPc.setStatus('mandatory')
switchPcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1, 2), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPcMode.setStatus('mandatory')
switchPcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPcStatus.setStatus('mandatory')
switchUserCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: switchUserCfgTable.setStatus('mandatory')
switchUserCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchUserId"))
if mibBuilder.loadTexts: switchUserCfgEntry.setStatus('mandatory')
switchUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserId.setStatus('mandatory')
switchUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserName.setStatus('mandatory')
switchUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserPassword.setStatus('mandatory')
switchUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 4), UserLoginPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserPriority.setStatus('mandatory')
switchUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 5), UserLoginStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserStatus.setStatus('mandatory')
switchVerLM = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerLM.setStatus('mandatory')
switchVerMTP2 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerMTP2.setStatus('mandatory')
switchVerICC = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerICC.setStatus('mandatory')
switchVerSIG = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerSIG.setStatus('mandatory')
switchVerISDN = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerISDN.setStatus('mandatory')
switchVerSPHR = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerSPHR.setStatus('mandatory')
ss7LinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: ss7LinkCfgTable.setStatus('mandatory')
ss7LinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7LinkName"))
if mibBuilder.loadTexts: ss7LinkCfgEntry.setStatus('mandatory')
ss7LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 1), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkName.setStatus('mandatory')
ss7LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkId.setStatus('mandatory')
ss7LinkTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkTrunkId.setStatus('mandatory')
ss7LinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkChannel.setStatus('mandatory')
ss7LinkSlc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkSlc.setStatus('mandatory')
ss7LinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 6), LinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LinkSpeed.setStatus('mandatory')
ss7LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 7), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkMode.setStatus('mandatory')
ss7LinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkRowStatus.setStatus('mandatory')
ss7LinkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 9), LinkOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LinkOpStatus.setStatus('mandatory')
ss7AtmLinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: ss7AtmLinkCfgTable.setStatus('mandatory')
ss7AtmLinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7AtmVpi"), (0, "ARMILLAIRE2000-MIB", "ss7AtmVci"))
if mibBuilder.loadTexts: ss7AtmLinkCfgEntry.setStatus('mandatory')
ss7AtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmVpi.setStatus('mandatory')
ss7AtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmVci.setStatus('mandatory')
ss7AtmLnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmLnkId.setStatus('mandatory')
ss7AtmXconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmXconnectId.setStatus('mandatory')
ss7AtmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmSlotId.setStatus('mandatory')
ss7AtmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmPortId.setStatus('mandatory')
ss7AtmChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmChnlId.setStatus('mandatory')
ss7AtmTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmTrnkId.setStatus('mandatory')
ss7AtmPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 9), AtmIfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmPhyType.setStatus('mandatory')
ss7AtmLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmLinkRowStatus.setStatus('mandatory')
ss7AtmLinkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 11), LinkOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7AtmLinkOpStatus.setStatus('mandatory')
ss7LinksetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: ss7LinksetCfgTable.setStatus('mandatory')
ss7LinksetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7LinksetLinkId"))
if mibBuilder.loadTexts: ss7LinksetCfgEntry.setStatus('mandatory')
ss7LinksetLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetLinkId.setStatus('mandatory')
ss7LinksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetId.setStatus('mandatory')
ss7LinksetName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetName.setStatus('mandatory')
ss7LinksetAdjDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetAdjDpc.setStatus('mandatory')
ss7LinksetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 5), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetMode.setStatus('mandatory')
ss7LinksetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetRowStatus.setStatus('mandatory')
ss7LinksetOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 7), LinkSetOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LinksetOpStatus.setStatus('mandatory')
ss7LinksetMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4), )
if mibBuilder.loadTexts: ss7LinksetMgmtTable.setStatus('mandatory')
ss7LinksetMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "linksetId"))
if mibBuilder.loadTexts: ss7LinksetMgmtEntry.setStatus('mandatory')
linksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linksetId.setStatus('mandatory')
linksetLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1, 2), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linksetLevel.setStatus('mandatory')
linksetMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1, 3), LinkSetControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linksetMgmntCmd.setStatus('mandatory')
ss7LinkMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5), )
if mibBuilder.loadTexts: ss7LinkMgmntTable.setStatus('mandatory')
ss7LinkMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "linkName"))
if mibBuilder.loadTexts: ss7LinkMgmntEntry.setStatus('mandatory')
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5, 1, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('mandatory')
linkMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5, 1, 2), LinkControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkMgmntCmd.setStatus('mandatory')
trunkGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1), )
if mibBuilder.loadTexts: trunkGrpCfgTable.setStatus('mandatory')
trunkGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "trunkGrpId"))
if mibBuilder.loadTexts: trunkGrpCfgEntry.setStatus('mandatory')
trunkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpId.setStatus('mandatory')
trunkGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpName.setStatus('mandatory')
trunkGrpCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpCarrierId.setStatus('mandatory')
trunkGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 4), TrnkGrpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpType.setStatus('mandatory')
trunkGrpRoffName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 5), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpRoffName.setStatus('mandatory')
trunkGrpRoffType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 6), RoffType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpRoffType.setStatus('mandatory')
trunkGrpCdrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 7), CdrFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpCdrFlag.setStatus('mandatory')
trunkGrpNoOfTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGrpNoOfTrunks.setStatus('mandatory')
trunkGrpVoicePcm = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 9), VoicePcm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpVoicePcm.setStatus('mandatory')
trunkGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpRowStatus.setStatus('mandatory')
trunkGrpOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 11), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGrpOpStatus.setStatus('mandatory')
ss7TrunkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: ss7TrunkCfgTable.setStatus('mandatory')
ss7TrunkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7TrunkId"))
if mibBuilder.loadTexts: ss7TrunkCfgEntry.setStatus('mandatory')
ss7TrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkId.setStatus('mandatory')
ss7TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkName.setStatus('mandatory')
ss7TrunkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkGrpId.setStatus('mandatory')
ss7TrunkXconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkXconnectId.setStatus('mandatory')
ss7TrunkSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkSlotId.setStatus('mandatory')
ss7TrunkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkPortId.setStatus('mandatory')
ss7TrunkOpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkOpc.setStatus('mandatory')
ss7TrunkDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDpc.setStatus('mandatory')
ss7TrunkPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 9), IfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkPhyType.setStatus('mandatory')
ss7TrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 10), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkMode.setStatus('mandatory')
ss7TrunkE1MultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 11), E1MultiFrame()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkE1MultiFrame.setStatus('mandatory')
ss7TrunkE1CRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 12), E1CRC4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkE1CRC4.setStatus('mandatory')
ss7TrunkE1TransClk = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 13), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkE1TransClk.setStatus('mandatory')
ss7TrunkDS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 14), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1LineType.setStatus('mandatory')
ss7TrunkDS1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 15), DS1LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1LineCoding.setStatus('mandatory')
ss7TrunkDS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 16), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1TransClkSrc.setStatus('mandatory')
ss7TrunkDS1LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 17), DS1LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1LBO.setStatus('mandatory')
ss7TrunkDS3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 18), DS3LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3LineType.setStatus('mandatory')
ss7TrunkDS3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 19), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3TransClkSrc.setStatus('mandatory')
ss7TrunkDS3LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 20), DS3LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3LBO.setStatus('mandatory')
ss7TrunkDS3DS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 21), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3DS1LineType.setStatus('mandatory')
ss7TrunkDS3DS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 22), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3DS1TransClkSrc.setStatus('mandatory')
ss7TrunkOC3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 23), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkOC3TransClkSrc.setStatus('mandatory')
ss7TrunkUNCHE3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 24), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkUNCHE3TransClkSrc.setStatus('mandatory')
ss7TrunkDS3ATMLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 25), DS3LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMLineType.setStatus('mandatory')
ss7TrunkDS3ATMCellMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 26), DS3ATMCellMap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMCellMap.setStatus('mandatory')
ss7TrunkDS3ATMTransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 27), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMTransClkSrc.setStatus('mandatory')
ss7TrunkDS3ATMLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 28), DS3LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMLBO.setStatus('mandatory')
ss7TrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 29), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkRowStatus.setStatus('mandatory')
ss7TrunkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 30), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7TrunkOpStatus.setStatus('mandatory')
ss7CktCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ss7CktCfgTable.setStatus('mandatory')
ss7CktCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktTrunkId"), (0, "ARMILLAIRE2000-MIB", "ss7CktChnlId"))
if mibBuilder.loadTexts: ss7CktCfgEntry.setStatus('mandatory')
ss7CktTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTrunkId.setStatus('mandatory')
ss7CktChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktChnlId.setStatus('mandatory')
ss7CktId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktId.setStatus('mandatory')
ss7CktDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktDpc.setStatus('mandatory')
ss7CktCic = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktCic.setStatus('mandatory')
ss7CktDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 6), Direction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktDir.setStatus('mandatory')
ss7CktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktPriority.setStatus('mandatory')
ss7CktT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT3.setStatus('mandatory')
ss7CktT12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT12.setStatus('mandatory')
ss7CktT13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(60)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT13.setStatus('mandatory')
ss7CktT14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT14.setStatus('mandatory')
ss7CktT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(60)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT15.setStatus('mandatory')
ss7CktT16 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT16.setStatus('mandatory')
ss7CktT17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(60)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT17.setStatus('mandatory')
ss7CktTVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTVal.setStatus('mandatory')
ss7CktRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 16), CktRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktRowStatus.setStatus('mandatory')
ss7CktOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 17), CktOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktOpStatus.setStatus('mandatory')
ss7CICTimerTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ss7CICTimerTable.setStatus('mandatory')
ss7CicTmrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktTmrDpc"), (0, "ARMILLAIRE2000-MIB", "ss7CktTmrCic"))
if mibBuilder.loadTexts: ss7CicTmrEntry.setStatus('mandatory')
ss7CktTmrDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrDpc.setStatus('mandatory')
ss7CktTmrCic = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrCic.setStatus('mandatory')
ss7CktTmrT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT3.setStatus('mandatory')
ss7CktTmrT12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT12.setStatus('mandatory')
ss7CktTmrT13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT13.setStatus('mandatory')
ss7CktTmrT14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT14.setStatus('mandatory')
ss7CktTmrT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT15.setStatus('mandatory')
ss7CktTmrT16 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT16.setStatus('mandatory')
ss7CktTmrT17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT17.setStatus('mandatory')
ss7CktTmrTVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrTVal.setStatus('mandatory')
ss7CktTmrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 11), ModifyTmrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrRowStatus.setStatus('mandatory')
ss7BCktCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4), )
if mibBuilder.loadTexts: ss7BCktCfgTable.setStatus('mandatory')
ss7BCktCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7BCktVpi"), (0, "ARMILLAIRE2000-MIB", "ss7BCktVci"))
if mibBuilder.loadTexts: ss7BCktCfgEntry.setStatus('mandatory')
ss7BCktVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktVpi.setStatus('mandatory')
ss7BCktVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktVci.setStatus('mandatory')
ss7BCktTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktTrunkId.setStatus('mandatory')
ss7BCktDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktDpc.setStatus('mandatory')
ss7BCktCic = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktCic.setStatus('mandatory')
ss7BCktDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 6), Direction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktDir.setStatus('mandatory')
ss7BCktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktPriority.setStatus('mandatory')
ss7BCktT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT3.setStatus('mandatory')
ss7BCktT12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT12.setStatus('mandatory')
ss7BCktT13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT13.setStatus('mandatory')
ss7BCktT14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT14.setStatus('mandatory')
ss7BCktT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT15.setStatus('mandatory')
ss7BCktT16 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT16.setStatus('mandatory')
ss7BCktT17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT17.setStatus('mandatory')
ss7BCktTVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktTVal.setStatus('mandatory')
ss7BCktRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 16), CktRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktRowStatus.setStatus('mandatory')
ss7BCktOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 17), CktOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7BCktOpStatus.setStatus('mandatory')
ss7CktMgmntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5))
ss7CktMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: ss7CktMgmntTable.setStatus('mandatory')
ss7CktMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktMgmntTrnkId"), (0, "ARMILLAIRE2000-MIB", "ss7CktMgmntChnlId"))
if mibBuilder.loadTexts: ss7CktMgmntEntry.setStatus('mandatory')
ss7CktMgmntTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmntTrnkId.setStatus('mandatory')
ss7CktMgmntChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmntChnlId.setStatus('mandatory')
ss7CktMgmntRepNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktMgmntRepNum.setStatus('mandatory')
ss7CktMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 4), BlockOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktMgmntCmd.setStatus('mandatory')
ss7CICMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: ss7CICMgmntTable.setStatus('mandatory')
ss7CICMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktMgmtDPC"), (0, "ARMILLAIRE2000-MIB", "ss7CktMgmtCIC"))
if mibBuilder.loadTexts: ss7CICMgmntEntry.setStatus('mandatory')
ss7CktMgmtDPC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmtDPC.setStatus('mandatory')
ss7CktMgmtCIC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmtCIC.setStatus('mandatory')
ss7CktRepNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktRepNum.setStatus('mandatory')
ss7CicRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CicRange.setStatus('mandatory')
ss7CICMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 5), CircuitControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CICMgmntCmd.setStatus('mandatory')
mtp2LinkTmrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: mtp2LinkTmrCfgTable.setStatus('mandatory')
mtp2LinkTmrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "mtp2LinkId"))
if mibBuilder.loadTexts: mtp2LinkTmrCfgEntry.setStatus('mandatory')
mtp2LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2LinkId.setStatus('mandatory')
mtp2T1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(13000, 50000)).clone(13000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T1.setStatus('mandatory')
mtp2T2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 50000)).clone(11500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T2.setStatus('mandatory')
mtp2T3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 15000)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T3.setStatus('mandatory')
mtp2T4n = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2070, 9500)).clone(2070)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T4n.setStatus('mandatory')
mtp2T4e = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 600)).clone(400)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T4e.setStatus('mandatory')
mtp2T5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 120)).clone(80)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T5.setStatus('mandatory')
mtp2T6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 6000)).clone(3000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T6.setStatus('mandatory')
mtp2T7 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 2000)).clone(500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T7.setStatus('mandatory')
mtp2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 10), TmrRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2RowStatus.setStatus('mandatory')
mtp2OpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 11), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2OpStatus.setStatus('mandatory')
mtp3T15 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 3000)).clone(2000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T15.setStatus('mandatory')
mtp3T16 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1400, 2000)).clone(2000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T16.setStatus('mandatory')
mtp3T18 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T18.setStatus('mandatory')
mtp3T19 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(67000, 69000)).clone(67000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T19.setStatus('mandatory')
mtp3T20 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(59000, 61000)).clone(590000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T20.setStatus('mandatory')
mtp3T21 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(63000, 65000)).clone(63000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T21.setStatus('mandatory')
mtp3T26 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12000, 15000)).clone(12000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T26.setStatus('mandatory')
mtp3T30 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000, 35000)).clone(30000)).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3T30.setStatus('mandatory')
mtp3GenTmrRowStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 9), ModifyTmrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3GenTmrRowStatus.setStatus('mandatory')
mtp3LinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: mtp3LinkCfgTable.setStatus('mandatory')
mtp3LinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "mtp3LinkId"))
if mibBuilder.loadTexts: mtp3LinkCfgEntry.setStatus('mandatory')
mtp3LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3LinkId.setStatus('mandatory')
mtp3T1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T1.setStatus('mandatory')
mtp3T2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(700, 2000)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T2.setStatus('mandatory')
mtp3T3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T3.setStatus('mandatory')
mtp3T4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T4.setStatus('mandatory')
mtp3T5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T5.setStatus('mandatory')
mtp3T6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T6.setStatus('mandatory')
mtp3T7 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3T7.setStatus('mandatory')
mtp3T12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(800, 1500)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T12.setStatus('mandatory')
mtp3T13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(800, 1500)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T13.setStatus('mandatory')
mtp3T14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 3000)).clone(3000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T14.setStatus('mandatory')
mtp3T17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(800, 1500)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T17.setStatus('mandatory')
mtp3T22 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 360)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T22.setStatus('mandatory')
mtp3T23 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 360)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T23.setStatus('mandatory')
mtp3T24 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5000)).clone(5000)).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3T24.setStatus('mandatory')
mtp3T31 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T31.setStatus('mandatory')
mtp3T32 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 12)).clone(4)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T32.setStatus('mandatory')
mtp3T33 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T33.setStatus('mandatory')
mtp3T34 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 90)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T34.setStatus('mandatory')
mtp3T35 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T35.setStatus('mandatory')
mtp3T36 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T36.setStatus('mandatory')
mtp3T37 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T37.setStatus('mandatory')
mtp3TFLC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3TFLC.setStatus('mandatory')
mtp3TBND = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3TBND.setStatus('mandatory')
mtp3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 25), TmrRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3RowStatus.setStatus('mandatory')
mtp3OpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 26), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3OpStatus.setStatus('mandatory')
isupTimerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: isupTimerCfgTable.setStatus('mandatory')
isupTimerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isupTimerType"))
if mibBuilder.loadTexts: isupTimerCfgEntry.setStatus('mandatory')
isupTimerType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 1), TimerType().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTimerType.setStatus('mandatory')
isupTmrT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT1.setStatus('mandatory')
isupTmrT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT2.setStatus('mandatory')
isupTmrT5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(300)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT5.setStatus('mandatory')
isupTmrT6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 32000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT6.setStatus('mandatory')
isupTmrT7 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 30000)).clone(20000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT7.setStatus('mandatory')
isupTmrT8 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 15000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT8.setStatus('mandatory')
isupTmrT9 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 240)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT9.setStatus('mandatory')
isupTmrT18 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(15000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT18.setStatus('mandatory')
isupTmrT19 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(300)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT19.setStatus('mandatory')
isupTmrT20 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(15000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT20.setStatus('mandatory')
isupTmrT21 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT21.setStatus('mandatory')
isupTmrT22 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(15000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT22.setStatus('mandatory')
isupTmrT23 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(300)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT23.setStatus('mandatory')
isupTmrT27 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 24)).clone(18)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT27.setStatus('mandatory')
isupTmrT28 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT28.setStatus('mandatory')
isupTmrT31 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(360, 360)).clone(360)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT31.setStatus('mandatory')
isupTmrT33 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12000, 15000)).clone(12000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT33.setStatus('mandatory')
isupTmrT34 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 15000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT34.setStatus('mandatory')
isupTmrT36 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 4000)).clone(2000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT36.setStatus('mandatory')
isupTmrTCCR = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 24000)).clone(20000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCCR.setStatus('mandatory')
isupTmrTEX = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTEX.setStatus('mandatory')
isupTmrTCRM = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 4000)).clone(3000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCRM.setStatus('mandatory')
isupTmrTCRA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCRA.setStatus('mandatory')
isupTmrTCCRt = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCCRt.setStatus('mandatory')
isupTmrTECt = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTECt.setStatus('mandatory')
isupTmrTGTCHG = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTGTCHG.setStatus('mandatory')
isupTmrTGRES = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5000)).clone(5000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTGRES.setStatus('mandatory')
isupTmrTFGR = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 120000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTFGR.setStatus('mandatory')
isupTmrTRELRSP = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTRELRSP.setStatus('mandatory')
isupTmrTFNLRELRS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTFNLRELRS.setStatus('mandatory')
isupTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 32), ModifyTmrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTimerRowStatus.setStatus('mandatory')
ss7RtDpcTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1), )
if mibBuilder.loadTexts: ss7RtDpcTable.setStatus('mandatory')
ss7RtDpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7RtDPC"))
if mibBuilder.loadTexts: ss7RtDpcEntry.setStatus('mandatory')
ss7RtDPC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtDPC.setStatus('mandatory')
ss7RtCmbLinksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtCmbLinksetId.setStatus('mandatory')
ss7RtLoadShareType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 3), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtLoadShareType.setStatus('mandatory')
ss7RtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtRowStatus.setStatus('mandatory')
ss7RtOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 5), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7RtOpStatus.setStatus('mandatory')
isdnTmrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: isdnTmrCfgTable.setStatus('mandatory')
isdnTmrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTnkId"))
if mibBuilder.loadTexts: isdnTmrCfgEntry.setStatus('mandatory')
isdnTnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTnkId.setStatus('mandatory')
isdnTmrT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 420)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT301.setStatus('mandatory')
isdnTmrT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT302.setStatus('mandatory')
isdnTmrT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 4000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT303.setStatus('mandatory')
isdnTmrT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT304.setStatus('mandatory')
isdnTmrT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 60000)).clone(30000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT305.setStatus('mandatory')
isdnTmrT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 150)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT306.setStatus('mandatory')
isdnTmrT307 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT307.setStatus('mandatory')
isdnTmrT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 10000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT308.setStatus('mandatory')
isdnTmrT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 10000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT310.setStatus('mandatory')
isdnTmrT311 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrT311.setStatus('mandatory')
isdnTmrT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT312.setStatus('mandatory')
isdnTmrT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT313.setStatus('mandatory')
isdnTmrT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT316.setStatus('mandatory')
isdnTmrT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT318.setStatus('mandatory')
isdnTmrT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT319.setStatus('mandatory')
isdnTmrT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 10000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT322.setStatus('mandatory')
isdnTmrT316C = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 120)).clone(30)).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrT316C.setStatus('mandatory')
isdnTmrT330 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT330.setStatus('mandatory')
isdnTmrT331 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT331.setStatus('mandatory')
isdnTmrT332 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT332.setStatus('mandatory')
isdnTmrTRST = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(120)).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrTRST.setStatus('mandatory')
isdnTmrTREST = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrTREST.setStatus('mandatory')
isdnTmrTANS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65553))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrTANS.setStatus('mandatory')
isdnTmrT396 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT396.setStatus('mandatory')
isdnTmrT397 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT397.setStatus('mandatory')
isdnTrnkTmrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 27), TmrRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrnkTmrRowStatus.setStatus('mandatory')
isdnTrnkTmrOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 28), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrnkTmrOpStatus.setStatus('mandatory')
isdnTrunkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2), )
if mibBuilder.loadTexts: isdnTrunkCfgTable.setStatus('mandatory')
isdnTrunkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrunkId"))
if mibBuilder.loadTexts: isdnTrunkCfgEntry.setStatus('mandatory')
isdnTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkId.setStatus('mandatory')
isdnTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkName.setStatus('mandatory')
isdnTrunkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkGrpId.setStatus('mandatory')
isdnDchnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchnlId.setStatus('mandatory')
isdnTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 5), IsdnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkType.setStatus('mandatory')
isdnXconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnXconnectId.setStatus('mandatory')
isdnSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnSlotId.setStatus('mandatory')
isdnPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnPortId.setStatus('mandatory')
isdnDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 9), Direction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDirection.setStatus('mandatory')
isdnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 10), IsdnPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnPriority.setStatus('mandatory')
isdnDurthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDurthreshold.setStatus('mandatory')
isdnCntthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCntthreshold.setStatus('mandatory')
isdnPhyIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 13), IfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnPhyIntfType.setStatus('mandatory')
isdnDchnlTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchnlTimeSlot.setStatus('mandatory')
isdnE1MultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 15), E1MultiFrame()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnE1MultiFrame.setStatus('mandatory')
isdnE1CRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 16), E1CRC4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnE1CRC4.setStatus('mandatory')
isdnE1TransClk = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 17), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnE1TransClk.setStatus('mandatory')
isdnDS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 18), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1LineType.setStatus('mandatory')
isdnDS1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 19), DS1LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1LineCoding.setStatus('mandatory')
isdnDS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 20), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1TransClkSrc.setStatus('mandatory')
isdnDS1LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 21), DS1LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1LBO.setStatus('mandatory')
isdnDS3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 22), DS3LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3LineType.setStatus('mandatory')
isdnDS3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 23), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3TransClkSrc.setStatus('mandatory')
isdnDS3LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 24), DS3LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3LBO.setStatus('mandatory')
isdnDS3DS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 25), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3DS1LineType.setStatus('mandatory')
isdnDS3DS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 26), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3DS1TransClkSrc.setStatus('mandatory')
isdnTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 27), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkRowStatus.setStatus('mandatory')
isdnTrunkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 28), IsdnTrnkOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrunkOpStatus.setStatus('mandatory')
isdnChnlStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3), )
if mibBuilder.loadTexts: isdnChnlStatusTable.setStatus('mandatory')
isdnChnlStatusCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnStatusTrunkId"), (0, "ARMILLAIRE2000-MIB", "isdnStatusChnlId"))
if mibBuilder.loadTexts: isdnChnlStatusCfgEntry.setStatus('mandatory')
isdnStatusTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusTrunkId.setStatus('mandatory')
isdnStatusChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlId.setStatus('mandatory')
isdnStatusChnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 3), TrunkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlState.setStatus('mandatory')
isdnStatusChnlAllocMeth = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlAllocMeth.setStatus('mandatory')
isdnStatusChnlSuConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlSuConnId.setStatus('mandatory')
isdnMgmntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4))
isdnTrnkMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1), )
if mibBuilder.loadTexts: isdnTrnkMgmntTable.setStatus('mandatory')
isdnTrnkMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrnkMgmntId"))
if mibBuilder.loadTexts: isdnTrnkMgmntEntry.setStatus('mandatory')
isdnTrnkMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrnkMgmntId.setStatus('mandatory')
isdnTrnkMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1, 1, 2), IsdnTrnkMgtOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrnkMgmntCmd.setStatus('mandatory')
isdnChnlMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2), )
if mibBuilder.loadTexts: isdnChnlMgmntTable.setStatus('mandatory')
isdnChnlMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrunkMgmntId"), (0, "ARMILLAIRE2000-MIB", "isdnChnlMgmntId"))
if mibBuilder.loadTexts: isdnChnlMgmntEntry.setStatus('mandatory')
isdnTrunkMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrunkMgmntId.setStatus('mandatory')
isdnChnlMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnChnlMgmntId.setStatus('mandatory')
isdnChnlMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1, 3), IsdnChnlMgtOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnChnlMgmntCmd.setStatus('mandatory')
mfdMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3), )
if mibBuilder.loadTexts: mfdMgmntTable.setStatus('mandatory')
mfdMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTnkMgmntId"))
if mibBuilder.loadTexts: mfdMgmntEntry.setStatus('mandatory')
isdnTnkMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTnkMgmntId.setStatus('mandatory')
isdnDurThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDurThreshold.setStatus('mandatory')
isdnCntThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCntThreshold.setStatus('mandatory')
mfdMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 4), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfdMgmntCmd.setStatus('mandatory')
routeTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1), )
if mibBuilder.loadTexts: routeTable.setStatus('mandatory')
routeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "routeId"))
if mibBuilder.loadTexts: routeEntry.setStatus('mandatory')
routeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeId.setStatus('mandatory')
routeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 2), AddrType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAddrType.setStatus('mandatory')
routeAdrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 3), AddrIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAdrId.setStatus('mandatory')
routeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 4), AddrString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAddr.setStatus('mandatory')
routeNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 5), NumPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNumPlan.setStatus('mandatory')
routeNumOfDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNumOfDigit.setStatus('mandatory')
routeRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 7), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeRouteName.setStatus('mandatory')
routeRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 8), RouteType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeRouteType.setStatus('mandatory')
routeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeRowStatus.setStatus('mandatory')
routeOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 10), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeOpStatus.setStatus('mandatory')
rtEntryIsdnCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2), )
if mibBuilder.loadTexts: rtEntryIsdnCfgTable.setStatus('mandatory')
rtEntryIsdnCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rtEntryIsdnGrpId"), (0, "ARMILLAIRE2000-MIB", "rtEntryIsdntrunkId"))
if mibBuilder.loadTexts: rtEntryIsdnCfgEntry.setStatus('mandatory')
rtEntryIsdnGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdnGrpId.setStatus('mandatory')
rtEntryIsdntrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdntrunkId.setStatus('mandatory')
rtEntryIsdnRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdnRouteName.setStatus('mandatory')
rtEntryIsdnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdnRowStatus.setStatus('mandatory')
rtEntryIsdnOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 5), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEntryIsdnOpStatus.setStatus('mandatory')
rtEntrySs7CfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3), )
if mibBuilder.loadTexts: rtEntrySs7CfgTable.setStatus('mandatory')
rtEntrySs7CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rtEntrySs7GrpId"), (0, "ARMILLAIRE2000-MIB", "rtEntrySs7CmbLinksetId"))
if mibBuilder.loadTexts: rtEntrySs7CfgEntry.setStatus('mandatory')
rtEntrySs7GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7GrpId.setStatus('mandatory')
rtEntrySs7CmbLinksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7CmbLinksetId.setStatus('mandatory')
rtEntrySs7RouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7RouteName.setStatus('mandatory')
rtEntrySs7Dpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7Dpc.setStatus('mandatory')
rtEntrySs7Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 5), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7Mode.setStatus('mandatory')
rtEntrySs7RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7RowStatus.setStatus('mandatory')
rtEntrySs7OpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 7), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEntrySs7OpStatus.setStatus('mandatory')
routeMgmntCmdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4))
digitStripMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1), )
if mibBuilder.loadTexts: digitStripMgmntTable.setStatus('mandatory')
digitStripMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rtName"))
if mibBuilder.loadTexts: digitStripMgmntEntry.setStatus('mandatory')
rtName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtName.setStatus('mandatory')
rtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 2), AddrIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtAddrType.setStatus('mandatory')
rtNumOfDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtNumOfDigit.setStatus('mandatory')
rtMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 4), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtMgmntCmd.setStatus('mandatory')
isdnLoadBalanceMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2), )
if mibBuilder.loadTexts: isdnLoadBalanceMgmntTable.setStatus('mandatory')
isdnLoadBalanceMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rteName"))
if mibBuilder.loadTexts: isdnLoadBalanceMgmntEntry.setStatus('mandatory')
rteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2, 1, 1), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rteName.setStatus('mandatory')
ilbMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2, 1, 2), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilbMgmntCmd.setStatus('mandatory')
enableSwitch = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 1), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSwitch.setStatus('mandatory')
enableSS7Route = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 2), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSS7Route.setStatus('mandatory')
enableSS7Ckt = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 3), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSS7Ckt.setStatus('mandatory')
enableIsdntrunk = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 4), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableIsdntrunk.setStatus('mandatory')
enableXconnect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 5), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableXconnect.setStatus('mandatory')
enableRoute = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 6), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableRoute.setStatus('mandatory')
measFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 1))
measFileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2))
measFileEnableGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3))
measFileAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileAcknowledge.setStatus('mandatory')
measFileCfgMeasInterval = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgMeasInterval.setStatus('mandatory')
measFileCfgUsagescanInterval = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgUsagescanInterval.setStatus('mandatory')
measFileCfgPurgeDay = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgPurgeDay.setStatus('mandatory')
measFileCfgPurgeFlag = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 4), MeasPurgeFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgPurgeFlag.setStatus('mandatory')
measFileCfgPrimaryDir = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measFileCfgPrimaryDir.setStatus('mandatory')
measFileCfgSecondaryDir = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measFileCfgSecondaryDir.setStatus('mandatory')
measFileEnablePRITraffic = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 1), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnablePRITraffic.setStatus('mandatory')
measFileEnableISUPTraffic = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 2), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableISUPTraffic.setStatus('mandatory')
measFileEnablePRIIneffectiveCall = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 3), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnablePRIIneffectiveCall.setStatus('mandatory')
measFileEnableISUPIneffectiveCall = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 4), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableISUPIneffectiveCall.setStatus('mandatory')
measFileEnableTrunkGrp = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 5), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableTrunkGrp.setStatus('mandatory')
measFileEnableSS7LinkTraffic = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 6), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableSS7LinkTraffic.setStatus('mandatory')
measSwitchIsupGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1))
measSwitchIsupFailCallGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2))
measSwitchPriGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3))
measSwitchPriFailCallGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4))
measTrnkGrpTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1), )
if mibBuilder.loadTexts: measTrnkGrpTrafficTable.setStatus('mandatory')
measTrnkGrpTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "measTrnkGrpName"))
if mibBuilder.loadTexts: measTrnkGrpTrafficEntry.setStatus('mandatory')
measTrnkGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpName.setStatus('mandatory')
measTrnkGrpDataSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpDataSuspect.setStatus('mandatory')
measTrnkGrpincomingUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpincomingUsage.setStatus('mandatory')
measTrnkGrpoutgoingUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpoutgoingUsage.setStatus('mandatory')
measTrnkGrpISCicsChnls = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpISCicsChnls.setStatus('mandatory')
measTrnkGrpOOSCicsChnls = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpOOSCicsChnls.setStatus('mandatory')
measTrnkGrptotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrptotalUsage.setStatus('mandatory')
measTrnkGrpmaintainanceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpmaintainanceUsage.setStatus('mandatory')
measLinkTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1), )
if mibBuilder.loadTexts: measLinkTrafficTable.setStatus('mandatory')
measLinkTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "measLinkName"))
if mibBuilder.loadTexts: measLinkTrafficEntry.setStatus('mandatory')
measLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkName.setStatus('mandatory')
measLinkDataSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkDataSuspect.setStatus('mandatory')
measLinkUnavailableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkUnavailableDuration.setStatus('mandatory')
measLinkInServiceDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkInServiceDuration.setStatus('mandatory')
measLinkMSUsRetransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkMSUsRetransmitted.setStatus('mandatory')
measLinkOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkOctetsReceived.setStatus('mandatory')
measLinkOctectsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkOctectsTransmitted.setStatus('mandatory')
measLinkLostMSUsBufferOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkLostMSUsBufferOverflow.setStatus('mandatory')
measLinkMSUsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkMSUsDiscarded.setStatus('mandatory')
measSwitchIsupDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupDataSuspect.setStatus('mandatory')
measSwitchIsupIncomingAnsiTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingAnsiTrunkCallAttempts.setStatus('mandatory')
measSwitchIsupIncomingAnsiTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingAnsiTrunkCallAnswered.setStatus('mandatory')
measSwitchIsupOutgoingAnsiTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingAnsiTrunkCallAttempts.setStatus('mandatory')
measSwitchIsupOutgoingAnsiTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingAnsiTrunkCallAnswered.setStatus('mandatory')
measSwitchIsupIncomingItutTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingItutTrunkCallAttempts.setStatus('mandatory')
measSwitchIsupIncomingItutTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingItutTrunkCallAnswered.setStatus('mandatory')
measSwitchIsupOutgoingItutTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingItutTrunkCallAttempts.setStatus('mandatory')
measSwitchIsupOutgoingItutTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingItutTrunkCallAnswered.setStatus('mandatory')
measSwitchIsupFailCallDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallDataSuspect.setStatus('mandatory')
measSwitchIsupFailCallAnsiMatchingLoss = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiMatchingLoss.setStatus('mandatory')
measSwitchIsupFailCallAnsiNoCircuit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiNoCircuit.setStatus('mandatory')
measSwitchIsupFailCallAnsiCalledPartyLineBusy = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiCalledPartyLineBusy.setStatus('mandatory')
measSwitchIsupFailCallAnsiIneffectiveMachineAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiIneffectiveMachineAttempts.setStatus('mandatory')
measSwitchIsupFailCallItutMatchingLoss = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutMatchingLoss.setStatus('mandatory')
measSwitchIsupFailCallItutNoCircuit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutNoCircuit.setStatus('mandatory')
measSwitchIsupFailCallItutCalledPartyLineBusy = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutCalledPartyLineBusy.setStatus('mandatory')
measSwitchIsupFailCallItutIneffectiveMachineAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutIneffectiveMachineAttempts.setStatus('mandatory')
measSwitchPriDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriDataSuspect.setStatus('mandatory')
measSwitchPriIncomingIsdnPRICallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriIncomingIsdnPRICallAttempts.setStatus('mandatory')
measSwitchPriIncomingIsdnPRICallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriIncomingIsdnPRICallAnswered.setStatus('mandatory')
measSwitchPriFailCallDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallDataSuspect.setStatus('mandatory')
measSwitchPriFailCallMatchingLoss = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallMatchingLoss.setStatus('mandatory')
measSwitchPriFailCallNoCircuit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallNoCircuit.setStatus('mandatory')
measSwitchPriFailCallCalledPartyLineBusy = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallCalledPartyLineBusy.setStatus('mandatory')
measSwitchPriFailCallIneffectiveMachineAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallIneffectiveMachineAttempts.setStatus('mandatory')
xconnectCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1), )
if mibBuilder.loadTexts: xconnectCfgTable.setStatus('mandatory')
xconnectCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "xconnectId"))
if mibBuilder.loadTexts: xconnectCfgEntry.setStatus('mandatory')
xconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectId.setStatus('mandatory')
xconnectName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectName.setStatus('mandatory')
xconnectIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectIPAddr.setStatus('mandatory')
xconnectTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectTCPPort.setStatus('mandatory')
xconnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectRowStatus.setStatus('mandatory')
xconnectOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 6), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnectOpStatus.setStatus('mandatory')
xlinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2), )
if mibBuilder.loadTexts: xlinkCfgTable.setStatus('mandatory')
xlinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "xconnectIdEndA"), (0, "ARMILLAIRE2000-MIB", "slotIdEndA"), (0, "ARMILLAIRE2000-MIB", "portIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnectIdEndB"), (0, "ARMILLAIRE2000-MIB", "slotIdEndB"), (0, "ARMILLAIRE2000-MIB", "portIdEndB"))
if mibBuilder.loadTexts: xlinkCfgEntry.setStatus('mandatory')
xconnectIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectIdEndA.setStatus('mandatory')
slotIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotIdEndA.setStatus('mandatory')
portIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIdEndA.setStatus('mandatory')
xconnectIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectIdEndB.setStatus('mandatory')
slotIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotIdEndB.setStatus('mandatory')
portIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIdEndB.setStatus('mandatory')
xlinkConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 7), ConnectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlinkConnectionType.setStatus('mandatory')
xlinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlinkRowStatus.setStatus('mandatory')
xlinkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 9), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xlinkOpStatus.setStatus('mandatory')
xlinkMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3), )
if mibBuilder.loadTexts: xlinkMgmntTable.setStatus('mandatory')
xlinkMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "xconnIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnSlotIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnPortIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnIdEndB"), (0, "ARMILLAIRE2000-MIB", "xconnSlotIdEndB"), (0, "ARMILLAIRE2000-MIB", "xconnPortIdEndB"))
if mibBuilder.loadTexts: xlinkMgmntEntry.setStatus('mandatory')
xconnIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnIdEndA.setStatus('mandatory')
xconnSlotIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnSlotIdEndA.setStatus('mandatory')
xconnPortIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnPortIdEndA.setStatus('mandatory')
xconnIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnIdEndB.setStatus('mandatory')
xconnSlotIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnSlotIdEndB.setStatus('mandatory')
xconnPortIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnPortIdEndB.setStatus('mandatory')
xlinkMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 7), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlinkMgmntCmd.setStatus('mandatory')
cdrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 1))
cdrBafConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2))
cdrFileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3))
cdrFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4))
cdrMgmntCmdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5))
cdrLongDurCallGenTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2359))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrLongDurCallGenTime.setStatus('mandatory')
cdrAppendModule801 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2, 1), Bool()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrAppendModule801.setStatus('mandatory')
cdrSensorId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999998))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrSensorId.setStatus('mandatory')
cdrRecordingOfficeId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999998))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrRecordingOfficeId.setStatus('mandatory')
cdrFileInterval = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileInterval.setStatus('mandatory')
cdrFileRecLimit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileRecLimit.setStatus('mandatory')
cdrFileSourceId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileSourceId.setStatus('mandatory')
cdrFileDestinationType = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileDestinationType.setStatus('mandatory')
cdrFileDestinationId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileDestinationId.setStatus('mandatory')
cdrFileQuery = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileQuery.setStatus('mandatory')
cdrFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileName.setStatus('mandatory')
cdrFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileStatus.setStatus('mandatory')
cdrFileCreateDate = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileCreateDate.setStatus('mandatory')
cdrFileCreateTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileCreateTime.setStatus('mandatory')
cdrFileRecordNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileRecordNum.setStatus('mandatory')
cdrFileAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileAcknowledge.setStatus('mandatory')
cdrGenMgmntCmd = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 1), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrGenMgmntCmd.setStatus('mandatory')
cdrMngmtTrnkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2), )
if mibBuilder.loadTexts: cdrMngmtTrnkGrpTable.setStatus('mandatory')
cdrMngmtTrnkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "cdrTrnkGrpId"))
if mibBuilder.loadTexts: cdrMngmtTrnkGrpEntry.setStatus('mandatory')
cdrTrnkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrTrnkGrpId.setStatus('mandatory')
cdrTrnkGrpdirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1, 2), CdrFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrTrnkGrpdirection.setStatus('mandatory')
cdrTrnkGrpMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1, 3), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrTrnkGrpMgmntCmd.setStatus('mandatory')
modemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1), )
if mibBuilder.loadTexts: modemStatusTable.setStatus('mandatory')
modemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "faultModemTrnkId"), (0, "ARMILLAIRE2000-MIB", "faultModemChnlId"))
if mibBuilder.loadTexts: modemStatusEntry.setStatus('mandatory')
faultModemTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultModemTrnkId.setStatus('mandatory')
faultModemChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultModemChnlId.setStatus('mandatory')
faultModemRepnum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultModemRepnum.setStatus('mandatory')
faultModemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 4), ModemResetStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultModemReset.setStatus('mandatory')
lrnTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1), )
if mibBuilder.loadTexts: lrnTable.setStatus('mandatory')
lrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "lrnNum"))
if mibBuilder.loadTexts: lrnEntry.setStatus('mandatory')
lrnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lrnNum.setStatus('mandatory')
lrnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1, 1, 2), LrnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lrnRowStatus.setStatus('mandatory')
switchDSPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1), )
if mibBuilder.loadTexts: switchDSPCfgTable.setStatus('mandatory')
switchDSPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchDSPXconnId"), (0, "ARMILLAIRE2000-MIB", "switchDSPSlotId"))
if mibBuilder.loadTexts: switchDSPCfgEntry.setStatus('mandatory')
switchDSPXconnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPXconnId.setStatus('mandatory')
switchDSPSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPSlotId.setStatus('mandatory')
switchDSPCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 3), DSPCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPCardType.setStatus('mandatory')
switchDSPCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPCfgRowStatus.setStatus('mandatory')
switchDSPCfgOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 5), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDSPCfgOpStatus.setStatus('mandatory')
switchFeatureTGCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1), )
if mibBuilder.loadTexts: switchFeatureTGCfgTable.setStatus('mandatory')
switchTGGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchFeatureTGId"))
if mibBuilder.loadTexts: switchTGGrpCfgEntry.setStatus('mandatory')
switchFeatureTGId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFeatureTGId.setStatus('mandatory')
switchFeatureTGName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 2), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFeatureTGName.setStatus('mandatory')
switchFeatureTGType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 3), TrnkGrpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFeatureTGType.setStatus('mandatory')
switchFeatureTGFeatureEC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 4), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureEC.setStatus('mandatory')
switchFeatureTGFeatureCOMPRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 5), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureCOMPRESS.setStatus('mandatory')
switchFeatureTGFeatureSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 6), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureSS.setStatus('mandatory')
switchFeatureTGFeatureCNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 7), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureCNIS.setStatus('mandatory')
switchOver = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 1, 1, 1), FTswitchOver()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchOver.setStatus('mandatory')
logGenTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logGenTime.setStatus('mandatory')
logPurgeTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logPurgeTime.setStatus('mandatory')
enablelogGen = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 2, 1), LogFileEnDis()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablelogGen.setStatus('mandatory')
disableLogGen = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 2, 2), LogFileEnDis()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disableLogGen.setStatus('mandatory')
logAttribute = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 1), LogFileAttr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logAttribute.setStatus('mandatory')
logFileSize = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileSize.setStatus('mandatory')
logFileDuration = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileDuration.setStatus('mandatory')
logFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileStatus.setStatus('mandatory')
ss7LnkTraceTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1), )
if mibBuilder.loadTexts: ss7LnkTraceTable.setStatus('mandatory')
ss7LnkTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7LnkId"))
if mibBuilder.loadTexts: ss7LnkTraceEntry.setStatus('mandatory')
ss7LnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LnkId.setStatus('mandatory')
ss7LnkLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1, 2), LogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LnkLog.setStatus('mandatory')
ss7LnkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1, 3), EnableTrace()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LnkEnable.setStatus('mandatory')
ss7RouteTraceTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1), )
if mibBuilder.loadTexts: ss7RouteTraceTable.setStatus('mandatory')
ss7RouteTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7RouteDpc"))
if mibBuilder.loadTexts: ss7RouteTraceEntry.setStatus('mandatory')
ss7RouteDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7RouteDpc.setStatus('mandatory')
ss7RouteLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1, 2), LogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7RouteLog.setStatus('mandatory')
ss7RouteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1, 3), EnableTrace()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RouteEnable.setStatus('mandatory')
isdnTrunkTraceTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1), )
if mibBuilder.loadTexts: isdnTrunkTraceTable.setStatus('mandatory')
isdnTrunkTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrnkId"))
if mibBuilder.loadTexts: isdnTrunkTraceEntry.setStatus('mandatory')
isdnTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrnkId.setStatus('mandatory')
isdnTrunkLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1, 2), LogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrunkLog.setStatus('mandatory')
isdnTrunkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1, 3), EnableTrace()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkEnable.setStatus('mandatory')
auditISDNTrnkTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1), )
if mibBuilder.loadTexts: auditISDNTrnkTable.setStatus('mandatory')
auditISDNTrnkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "auditTrnkId"))
if mibBuilder.loadTexts: auditISDNTrnkCfgEntry.setStatus('mandatory')
auditTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTrnkId.setStatus('mandatory')
auditISDNTrnk = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1, 1, 2), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditISDNTrnk.setStatus('mandatory')
auditXLink = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 2), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditXLink.setStatus('mandatory')
auditDPCTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3), )
if mibBuilder.loadTexts: auditDPCTable.setStatus('mandatory')
auditDPCCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "auditPointCode"))
if mibBuilder.loadTexts: auditDPCCfgEntry.setStatus('mandatory')
auditPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPointCode.setStatus('mandatory')
auditPointCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1, 2), AuditType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPointCodeType.setStatus('mandatory')
auditDPC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1, 3), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditDPC.setStatus('mandatory')
auditPeriodGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 4))
auditTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditTimePeriod.setStatus('mandatory')
auditPeriod = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 4, 2), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditPeriod.setStatus('mandatory')
statusLM1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 1), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusLM1ProcId.setStatus('mandatory')
statusLM2ProcID = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 2), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusLM2ProcID.setStatus('mandatory')
statusICC1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 3), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusICC1ProcId.setStatus('mandatory')
statusICC2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 4), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusICC2ProcId.setStatus('mandatory')
statusISDN1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 5), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusISDN1ProcId.setStatus('mandatory')
statusISDN2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 6), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusISDN2ProcId.setStatus('mandatory')
statusSPHR1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 7), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSPHR1ProcId.setStatus('mandatory')
statusSPHR2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 8), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSPHR2ProcId.setStatus('mandatory')
statusSIG1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 9), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSIG1ProcId.setStatus('mandatory')
statusSIG2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 10), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSIG2ProcId.setStatus('mandatory')
statusMTP21ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 11), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP21ProcId.setStatus('mandatory')
statusMTP22ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 12), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP22ProcId.setStatus('mandatory')
statusMTP23ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 13), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP23ProcId.setStatus('mandatory')
statusMTP24ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 14), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP24ProcId.setStatus('mandatory')
ethernetConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 5, 1), EthernetConnStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetConnStatus.setStatus('mandatory')
trapOpc = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapOpc.setStatus('mandatory')
trapXconnectId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapXconnectId.setStatus('mandatory')
trapLinkId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLinkId.setStatus('mandatory')
trapSlotId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSlotId.setStatus('mandatory')
trapPortId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPortId.setStatus('mandatory')
trapTrunkId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTrunkId.setStatus('mandatory')
trapInterfaceId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapInterfaceId.setStatus('mandatory')
trapChnlId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapChnlId.setStatus('mandatory')
trapDbId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDbId.setStatus('mandatory')
trapLinkName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 10), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLinkName.setStatus('mandatory')
trapSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSwitchName.setStatus('mandatory')
trapCicvalue = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCicvalue.setStatus('mandatory')
trapCicrange = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCicrange.setStatus('mandatory')
trapCause = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCause.setStatus('mandatory')
trapDpc = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDpc.setStatus('mandatory')
trapCdrFileSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCdrFileSeqNum.setStatus('mandatory')
trapCdrFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCdrFileName.setStatus('mandatory')
trapMeasErrCause = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMeasErrCause.setStatus('mandatory')
trapMeasErrNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMeasErrNum.setStatus('mandatory')
trapRepeatNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapRepeatNum.setStatus('mandatory')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('mandatory')
trapProcessId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcessId.setStatus('mandatory')
trapBucketSize = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapBucketSize.setStatus('mandatory')
trapNode1Id = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNode1Id.setStatus('mandatory')
trapNode2Id = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNode2Id.setStatus('mandatory')
trapRoutename = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapRoutename.setStatus('mandatory')
trapMeasFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMeasFileName.setStatus('mandatory')
trapDirectory = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDirectory.setStatus('mandatory')
trapProcessorId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcessorId.setStatus('mandatory')
trapLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogFileName.setStatus('mandatory')
trapLogErrcause = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogErrcause.setStatus('mandatory')
trapLogErrNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogErrNo.setStatus('mandatory')
trapPsuNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPsuNo.setStatus('mandatory')
trapIntId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIntId.setStatus('mandatory')
trapIntfcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIntfcId.setStatus('mandatory')
trapLanId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLanId.setStatus('mandatory')
trapnumXlinks = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapnumXlinks.setStatus('mandatory')
trapSwitchId1 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSwitchId1.setStatus('mandatory')
trapSwitchId2 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSwitchId2.setStatus('mandatory')
trapProcInstNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcInstNo.setStatus('mandatory')
trapProcName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcName.setStatus('mandatory')
trapFanNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFanNo.setStatus('mandatory')
trapUserName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 43), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapUserName.setStatus('mandatory')
trapBitMapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapBitMapStatus.setStatus('mandatory')
alarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1))
genswitchSnmpAgentReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,1)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
genConsoleLoginNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,2)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapUserName"))
genConsoleLogoutNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,3)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapUserName"))
genProcessBufOverflowNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,4)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"), ("ARMILLAIRE2000-MIB", "trapBucketSize"))
genProcessBufOverflowRecoverNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,5)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"), ("ARMILLAIRE2000-MIB", "trapBucketSize"))
genProcessHeapOverFlowNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,6)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
genProcessHeapOverFlowRecoverNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,7)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
xconnectUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,8)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,9)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectClkClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,10)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectClkFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,11)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectBkplaneRefClkClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,12)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectBkplaneRefClkFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,13)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectInterfaceInServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,14)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectInterfaceOutOfServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,15)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectCardInsertionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,16)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectCardRemovalNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,17)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectIllegalCardTypeNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,18)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectIntfFarEndLOFNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,19)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectIntfFarEndAISNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,20)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectIntfNearEndLOFNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,21)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectIntfNearEndLOSNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,22)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectIntfCreateNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,23)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectIntfDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,24)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectXlinkAdjConClrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,25)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapNode1Id"), ("ARMILLAIRE2000-MIB", "trapNode2Id"), ("ARMILLAIRE2000-MIB", "trapnumXlinks"))
xconnectXlinkAdjConNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,26)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapNode1Id"), ("ARMILLAIRE2000-MIB", "trapNode2Id"), ("ARMILLAIRE2000-MIB", "trapnumXlinks"))
xconnectXlinkRouteFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,27)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapNode1Id"), ("ARMILLAIRE2000-MIB", "trapNode2Id"))
xconnectPortUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,28)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
xconnectCPUSwitchOverNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,29)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
atmRAINotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,30)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
atmAISNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,31)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
atmLOFNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,32)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
atmLOSNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,33)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
mfdClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,34)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapTrunkId"), ("ARMILLAIRE2000-MIB", "trapChnlId"))
mfdDetectionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,35)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapRepeatNum"), ("ARMILLAIRE2000-MIB", "trapTrunkId"), ("ARMILLAIRE2000-MIB", "trapChnlId"))
measFileReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,36)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
measDiskOverCrtclThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,37)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasErrCause"), ("ARMILLAIRE2000-MIB", "trapMeasErrNum"))
measFileMoveNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,38)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
measFileMoveErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,39)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
measFileOpenErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,40)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
measFileDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,41)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
measFileDeleteErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,42)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
cdrFileReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,43)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrDiskFullNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,44)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDirectory"))
cdrFileOpenErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,45)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrFileMoveErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,46)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrDeleteErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,47)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrWriteHeaderErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,48)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrWriteRecErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,49)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrErrFileLocErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,50)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrErrTempFileLocErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,51)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrFileSysErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,52)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrFileCloseErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,53)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrFileDelete5DaysNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,54)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
ss7LinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,55)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,56)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7Mtp2LinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,57)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7Mtp2LinkDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,58)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkEnterCongestionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,59)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkExitCongestionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,60)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7InvalidSLCNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,61)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
ss7ConcernedDpcPauseNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,62)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
ss7ConcernedDpcResumeNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,63)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
ss7ConcernedDpcRemUnAvailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,64)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
ss7LinkRemInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,65)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkRemUnInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,66)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkLocInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,67)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkLocUnInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,68)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkLOPBlkNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,69)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkLPRNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,70)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkRPONotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,71)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7LinkRPRNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,72)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
ss7IsupCicLocNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,73)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"), ("ARMILLAIRE2000-MIB", "trapCicvalue"), ("ARMILLAIRE2000-MIB", "trapCicrange"), ("ARMILLAIRE2000-MIB", "trapCause"))
ss7IsupCicRemNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,74)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"), ("ARMILLAIRE2000-MIB", "trapCicvalue"), ("ARMILLAIRE2000-MIB", "trapCicrange"), ("ARMILLAIRE2000-MIB", "trapCause"))
ss7IsupCongLvl1Notify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,75)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
ss7IsupCongLvl2Notify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,76)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
isdnDChnlUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,77)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"))
isdnDChnlDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,78)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"))
logFileReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,79)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
logDiskFull60PercentNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,80)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogErrcause"), ("ARMILLAIRE2000-MIB", "trapLogErrNo"))
logDiskFull70PercentNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,81)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogErrcause"), ("ARMILLAIRE2000-MIB", "trapLogErrNo"))
logDiskFull80PercentNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,82)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogErrcause"), ("ARMILLAIRE2000-MIB", "trapLogErrNo"))
logErrFileOpenNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,83)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
logErrFileCloseNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,84)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
logErrFileDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,85)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
logErrFileWriteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,86)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
msscPriDedicatedLinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,87)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
msscPriDedicatedLinkDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,88)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
msscSecDedicatedLinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,89)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
msscSecDedicatedLinkDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,90)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
msscPriPsuUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,91)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
msscPriPsuDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,92)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
msscBakPsuUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,93)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
msscBakPsuDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,94)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
msscPriLanPhyIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,95)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
msscPriLanPhyIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,96)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
msscSecLanPhyIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,97)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
msscSecLanPhyIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,98)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
msscPriHostFanUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,99)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
msscPriHostFanDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,100)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
msscBckHostFanUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,101)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
msscBckHostFanDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,102)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
hubPriIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,103)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
hubPriIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,104)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
hubSecIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,105)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
hubSecIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,106)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
ftProcessAbnormalTerminationNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,107)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
ftProcessRestartConfigSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,108)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
ftProcessRestartConfigFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,109)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
ftMsscFtmupNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,110)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
ftControlSwitchOverSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,111)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
ftControlSwitchOverFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,112)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
ftForcedSwitchOverSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,113)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
ftForcedSwitchOverFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,114)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
ftProcessRestartDisableNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,115)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
updateDBAuditOpStatNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,116)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
isupIccAuditNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,117)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
cdrDiskFullMinorNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,118)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDirectory"))
cdrDiskFullMajorNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,119)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDirectory"))
cdrErrMoveCdrNackNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,120)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
cdrFileMoveCdrNackNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,121)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
ss7CktValidationNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,122)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"), ("ARMILLAIRE2000-MIB", "trapCicvalue"), ("ARMILLAIRE2000-MIB", "trapCause"))
switchActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2), )
if mibBuilder.loadTexts: switchActiveAlarmTable.setStatus('mandatory')
switchActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchAlarmMsgId"), (0, "ARMILLAIRE2000-MIB", "switchAlarmInstNo"))
if mibBuilder.loadTexts: switchActiveAlarmEntry.setStatus('mandatory')
switchAlarmMsgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmMsgId.setStatus('mandatory')
switchAlarmInstNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmInstNo.setStatus('mandatory')
switchAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmTime.setStatus('mandatory')
switchAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 4), EventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmType.setStatus('mandatory')
switchAlarmMainEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 5), AlarmEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmMainEvent.setStatus('mandatory')
switchAlarmSubEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 6), AlarmSubEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmSubEvent.setStatus('mandatory')
switchAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmId.setStatus('mandatory')
switchAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 8), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmSeverity.setStatus('mandatory')
switchAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmDesc.setStatus('mandatory')
switchAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 10), ActiveAlarmAckStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchAlarmAck.setStatus('mandatory')
switchAlarmRepeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchAlarmRepeatTime.setStatus('mandatory')
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", mtp2OpStatus=mtp2OpStatus, xconnectInterfaceInServiceNotify=xconnectInterfaceInServiceNotify, TrunkState=TrunkState, xconnectXlinkRouteFailNotify=xconnectXlinkRouteFailNotify, cdrAppendModule801=cdrAppendModule801, trapPsuNo=trapPsuNo, isupTmrT9=isupTmrT9, ss7CktTmrCic=ss7CktTmrCic, lrnNum=lrnNum, ss7BCktT13=ss7BCktT13, auditPointCode=auditPointCode, measSwitchIsupFailCallItutCalledPartyLineBusy=measSwitchIsupFailCallItutCalledPartyLineBusy, measSwitchIsupIncomingAnsiTrunkCallAnswered=measSwitchIsupIncomingAnsiTrunkCallAnswered, mtp2T3=mtp2T3, switchAlarmInstNo=switchAlarmInstNo, enableSS7Ckt=enableSS7Ckt, cdrFileInfo=cdrFileInfo, updateDBAuditOpStatNotify=updateDBAuditOpStatNotify, ss7BCktDir=ss7BCktDir, ss7CktT13=ss7CktT13, measLinkMSUsRetransmitted=measLinkMSUsRetransmitted, switchAlarmMsgId=switchAlarmMsgId, linksetMgmntCmd=linksetMgmntCmd, isupTmrTGRES=isupTmrTGRES, CktRowStatus=CktRowStatus, IsdnTrnkMgtOperation=IsdnTrnkMgtOperation, enableXconnect=enableXconnect, cdrFileReadyNotify=cdrFileReadyNotify, cdrDiskFullNotify=cdrDiskFullNotify, trapCicrange=trapCicrange, switchAlarmAck=switchAlarmAck, switchName=switchName, ftControlSwitchOverFailedNotify=ftControlSwitchOverFailedNotify, xconnectCardRemovalNotify=xconnectCardRemovalNotify, trunkGrpType=trunkGrpType, ss7RtCmbLinksetId=ss7RtCmbLinksetId, mtp3OpStatus=mtp3OpStatus, measFileEnableGrp=measFileEnableGrp, measTrnkGrpTrafficTable=measTrnkGrpTrafficTable, E1MultiFrame=E1MultiFrame, ss7CktTmrT16=ss7CktTmrT16, ss7CktCic=ss7CktCic, log=log, trapBitMapStatus=trapBitMapStatus, ss7IsupCongLvl1Notify=ss7IsupCongLvl1Notify, rtEntryIsdnCfgTable=rtEntryIsdnCfgTable, IsdnPriority=IsdnPriority, ss7BCktVci=ss7BCktVci, rtEntryIsdnRowStatus=rtEntryIsdnRowStatus, ss7LinkRPRNotify=ss7LinkRPRNotify, measFileDeleteErrNotify=measFileDeleteErrNotify, ftSwitchOverInfo=ftSwitchOverInfo, isdnTmrT303=isdnTmrT303, msscBckHostFanDownNotify=msscBckHostFanDownNotify, measLinkTrafficTable=measLinkTrafficTable, ss7LinkId=ss7LinkId, EventType=EventType, ss7LinksetId=ss7LinksetId, measLnk=measLnk, switchCdr=switchCdr, switchPcStatus=switchPcStatus, trapCdrFileName=trapCdrFileName, auditTrnkId=auditTrnkId, msscPriPsuDownNotify=msscPriPsuDownNotify, isdnDS1LineType=isdnDS1LineType, isupTmrT36=isupTmrT36, cdrErrMoveCdrNackNotify=cdrErrMoveCdrNackNotify, lrnEntry=lrnEntry, rtEntrySs7CmbLinksetId=rtEntrySs7CmbLinksetId, mtp3T20=mtp3T20, switchTGFeature=switchTGFeature, switchVerLM=switchVerLM, ss7LinksetOpStatus=ss7LinksetOpStatus, xlinkMgmntCmd=xlinkMgmntCmd, cdrTrnkGrpdirection=cdrTrnkGrpdirection, isdnDChnlDnNotify=isdnDChnlDnNotify, ss7BCktTrunkId=ss7BCktTrunkId, ftControlSwitchOverSucceededNotify=ftControlSwitchOverSucceededNotify, ss7RtDpcTable=ss7RtDpcTable, mtp3T22=mtp3T22, ss7LinksetMode=ss7LinksetMode, ss7CICMgmntTable=ss7CICMgmntTable, ss7IsupCicRemNotify=ss7IsupCicRemNotify, measSwitchIsupIncomingItutTrunkCallAttempts=measSwitchIsupIncomingItutTrunkCallAttempts, measSwitchIsupFailCallItutIneffectiveMachineAttempts=measSwitchIsupFailCallItutIneffectiveMachineAttempts, isdnTmrCfgEntry=isdnTmrCfgEntry, mtp3GenTmrCfgGroup=mtp3GenTmrCfgGroup, xconnectIllegalCardTypeNotify=xconnectIllegalCardTypeNotify, cdrFileName=cdrFileName, rtEntrySs7CfgTable=rtEntrySs7CfgTable, cdrFileSysErrNotify=cdrFileSysErrNotify, AlarmSeverity=AlarmSeverity, cdrFileCloseErrNotify=cdrFileCloseErrNotify, trunkGrpId=trunkGrpId, ss7CktDpc=ss7CktDpc, measLinkInServiceDuration=measLinkInServiceDuration, UserLoginPriority=UserLoginPriority, trapLogErrNo=trapLogErrNo, IsdnType=IsdnType, statusICC1ProcId=statusICC1ProcId, xconnectClkClearNotify=xconnectClkClearNotify, isdnDurthreshold=isdnDurthreshold, measLinkMSUsDiscarded=measLinkMSUsDiscarded, ss7RouteLog=ss7RouteLog, ss7TrunkPortId=ss7TrunkPortId, ss7LnkId=ss7LnkId, ss7AtmLinkCfgTable=ss7AtmLinkCfgTable, measTrnkGrptotalUsage=measTrnkGrptotalUsage, switchIPAddr=switchIPAddr, rtEntryIsdntrunkId=rtEntryIsdntrunkId, logDiskFull60PercentNotify=logDiskFull60PercentNotify, auditISDNTrnkTable=auditISDNTrnkTable, trapProcName=trapProcName, rtEntrySs7GrpId=rtEntrySs7GrpId, mtp3T16=mtp3T16, trapXconnectId=trapXconnectId, ss7TrunkSlotId=ss7TrunkSlotId, routeMgmntCmdGroup=routeMgmntCmdGroup, ss7TrunkCfgEntry=ss7TrunkCfgEntry, genProcessHeapOverFlowRecoverNotify=genProcessHeapOverFlowRecoverNotify, routeNumPlan=routeNumPlan, measFile=measFile, xconnSlotIdEndB=xconnSlotIdEndB, ss7LinkSlc=ss7LinkSlc, statusSIG1ProcId=statusSIG1ProcId, linksetLevel=linksetLevel, measLinkDataSuspect=measLinkDataSuspect, switchFeatureTGFeatureCOMPRESS=switchFeatureTGFeatureCOMPRESS, ethernetConnStatus=ethernetConnStatus, mfdClearNotify=mfdClearNotify, isdnTmrT397=isdnTmrT397, measSwitchIsupOutgoingAnsiTrunkCallAnswered=measSwitchIsupOutgoingAnsiTrunkCallAnswered, MtpRteState=MtpRteState, mfdMgmntCmd=mfdMgmntCmd, isupTmrTRELRSP=isupTmrTRELRSP, ActiveAlarmAckStatus=ActiveAlarmAckStatus, ss7CktOpStatus=ss7CktOpStatus, isdnTrunkRowStatus=isdnTrunkRowStatus, cdrFileDelete5DaysNotify=cdrFileDelete5DaysNotify, NumPlan=NumPlan, mtp3T5=mtp3T5, xconnectClkFailNotify=xconnectClkFailNotify, isdnTmrT302=isdnTmrT302, cdrFileQuery=cdrFileQuery, measSwitchPriFailCallCalledPartyLineBusy=measSwitchPriFailCallCalledPartyLineBusy, isdnTrunkMgmntId=isdnTrunkMgmntId, cdrDiskFullMajorNotify=cdrDiskFullMajorNotify, rtEntrySs7RowStatus=rtEntrySs7RowStatus, measSwitchPriFailCallGrp=measSwitchPriFailCallGrp, ss7LnkTraceTable=ss7LnkTraceTable, atmLOSNotify=atmLOSNotify, ss7CktMgmntEntry=ss7CktMgmntEntry, lrnTable=lrnTable, switchFeatureTGFeatureEC=switchFeatureTGFeatureEC, isupTmrT7=isupTmrT7, switchDSPXconnId=switchDSPXconnId, trapSwitchId2=trapSwitchId2, switchDSPCardType=switchDSPCardType, rtName=rtName, ss7LinksetRowStatus=ss7LinksetRowStatus, isdnStatusChnlState=isdnStatusChnlState, msscSecDedicatedLinkUpNotify=msscSecDedicatedLinkUpNotify, msscBakPsuDownNotify=msscBakPsuDownNotify, msscSecDedicatedLinkDownNotify=msscSecDedicatedLinkDownNotify, measSwitchIsupIncomingAnsiTrunkCallAttempts=measSwitchIsupIncomingAnsiTrunkCallAttempts, trapMeasFileName=trapMeasFileName, isdnDChnlUpNotify=isdnDChnlUpNotify, xconnect=xconnect, measSwitchIsupFailCallItutMatchingLoss=measSwitchIsupFailCallItutMatchingLoss, isdnTrunkLog=isdnTrunkLog, switchPcInfoTable=switchPcInfoTable, xconnectXlinkAdjConNotify=xconnectXlinkAdjConNotify, xconnectIntfFarEndLOFNotify=xconnectIntfFarEndLOFNotify, isdnTmrT322=isdnTmrT322, switchAlarmRepeatTime=switchAlarmRepeatTime, isdnTmrT330=isdnTmrT330, ss7CktPriority=ss7CktPriority, ss7BCktCfgEntry=ss7BCktCfgEntry, isdnChnlStatusTable=isdnChnlStatusTable, mfdMgmntTable=mfdMgmntTable, xconnectId=xconnectId, isdnTnkMgmntId=isdnTnkMgmntId, ss7RouteEnable=ss7RouteEnable, measSwitchIsupFailCallItutNoCircuit=measSwitchIsupFailCallItutNoCircuit, statusICC2ProcId=statusICC2ProcId, logFileAttribute=logFileAttribute, AtmIfType=AtmIfType, Standard=Standard, EnableTrace=EnableTrace, ss7ConcernedDpcRemUnAvailNotify=ss7ConcernedDpcRemUnAvailNotify, LogFileAttr=LogFileAttr, measTrnkGrpmaintainanceUsage=measTrnkGrpmaintainanceUsage, isdnTrnkMgmntId=isdnTrnkMgmntId, trapNode2Id=trapNode2Id, measSwitchIsupIncomingItutTrunkCallAnswered=measSwitchIsupIncomingItutTrunkCallAnswered, mtp2T6=mtp2T6, mtp3T4=mtp3T4, ss7TrunkE1TransClk=ss7TrunkE1TransClk, trunkGrpCfgTable=trunkGrpCfgTable, AddrType=AddrType, rtMgmntCmd=rtMgmntCmd, DS1LineCoding=DS1LineCoding, mtp3T31=mtp3T31, ss7AtmVpi=ss7AtmVpi, mtp3T14=mtp3T14, measFileEnableSS7LinkTraffic=measFileEnableSS7LinkTraffic, xconnectCfgTable=xconnectCfgTable, ss7LinkMode=ss7LinkMode, xlinkCfgTable=xlinkCfgTable, xconnectIntfCreateNotify=xconnectIntfCreateNotify, routeAddrType=routeAddrType, xconnectPortUpNotify=xconnectPortUpNotify, ss7ConcernedDpcResumeNotify=ss7ConcernedDpcResumeNotify, mtp3T7=mtp3T7, isdnTrunkEnable=isdnTrunkEnable, switchVerDescr=switchVerDescr, isdnTrnkMgmntEntry=isdnTrnkMgmntEntry, measSwitchIsupFailCallGrp=measSwitchIsupFailCallGrp, trunkGrpCfgEntry=trunkGrpCfgEntry, statusMTP24ProcId=statusMTP24ProcId, logDiskFull70PercentNotify=logDiskFull70PercentNotify, measFileConfig=measFileConfig, isdnTrunkCfgEntry=isdnTrunkCfgEntry, ss7LinksetAdjDpc=ss7LinksetAdjDpc, measFileEnableISUPIneffectiveCall=measFileEnableISUPIneffectiveCall, ss7CktMgmntTrnkId=ss7CktMgmntTrnkId, isdnE1CRC4=isdnE1CRC4, ModemResetStatus=ModemResetStatus, mtp2T4n=mtp2T4n, rtEntryIsdnOpStatus=rtEntryIsdnOpStatus, auditDPC=auditDPC, switchDSPCfgTable=switchDSPCfgTable, trapSwitchName=trapSwitchName, armillaire=armillaire, switchFeatureTGId=switchFeatureTGId, isupTmrT22=isupTmrT22, switchDSPSlotId=switchDSPSlotId, measLinkName=measLinkName, measTrnkGrpoutgoingUsage=measTrnkGrpoutgoingUsage, ss7Mtp2LinkUpNotify=ss7Mtp2LinkUpNotify, xconnectCfgEntry=xconnectCfgEntry, modemStatusEntry=modemStatusEntry, cdrFileMoveErrNotify=cdrFileMoveErrNotify, cdrSensorId=cdrSensorId, ss7CktT3=ss7CktT3, measSwitchPriIncomingIsdnPRICallAnswered=measSwitchPriIncomingIsdnPRICallAnswered, switchVerMTP2=switchVerMTP2, measTrnkGrp=measTrnkGrp, xlinkRowStatus=xlinkRowStatus, rtEntryIsdnRouteName=rtEntryIsdnRouteName, switchUserId=switchUserId, ss7TrunkDS3ATMLineType=ss7TrunkDS3ATMLineType, xconnectUpNotify=xconnectUpNotify, cdrFileDestinationType=cdrFileDestinationType)
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", ss7CktMgmtCIC=ss7CktMgmtCIC, xconnectName=xconnectName, ss7LinkLPRNotify=ss7LinkLPRNotify, measSwitchIsupGrp=measSwitchIsupGrp, switchAlarmType=switchAlarmType, ss7LnkTraceEntry=ss7LnkTraceEntry, cdrDeleteErrNotify=cdrDeleteErrNotify, switchType=switchType, ss7CktMgmntTable=ss7CktMgmntTable, mtp3T13=mtp3T13, measFileEnableTrunkGrp=measFileEnableTrunkGrp, isdnTmrTRST=isdnTmrTRST, disableLogGen=disableLogGen, isupTmrTCRM=isupTmrTCRM, logFileReadyNotify=logFileReadyNotify, ss7LinkEnterCongestionNotify=ss7LinkEnterCongestionNotify, isupTmrTCRA=isupTmrTCRA, isupTmrT5=isupTmrT5, trunkGrpName=trunkGrpName, isdnDS1LBO=isdnDS1LBO, ss7RouteDpc=ss7RouteDpc, isdnLoadBalanceMgmntTable=isdnLoadBalanceMgmntTable, ss7TrunkDS1LineCoding=ss7TrunkDS1LineCoding, xconnSlotIdEndA=xconnSlotIdEndA, xconnectInterfaceOutOfServiceNotify=xconnectInterfaceOutOfServiceNotify, switchAlarmMainEvent=switchAlarmMainEvent, CircuitControlStatus=CircuitControlStatus, statusSPHR1ProcId=statusSPHR1ProcId, ss7CktTmrTVal=ss7CktTmrTVal, mtp2LinkId=mtp2LinkId, cdrLongDurCallGenTime=cdrLongDurCallGenTime, auditISDNTrnk=auditISDNTrnk, ss7LinkExitCongestionNotify=ss7LinkExitCongestionNotify, OpStatus=OpStatus, ss7LinksetCfgTable=ss7LinksetCfgTable, statusMTP21ProcId=statusMTP21ProcId, DS1LBO=DS1LBO, ss7AtmVci=ss7AtmVci, ss7AtmLinkRowStatus=ss7AtmLinkRowStatus, digitStripMgmntTable=digitStripMgmntTable, xconnectIdEndB=xconnectIdEndB, switchLocation=switchLocation, ss7CktCfgTable=ss7CktCfgTable, xconnectXlinkAdjConClrNotify=xconnectXlinkAdjConClrNotify, xconnectIntfDeleteNotify=xconnectIntfDeleteNotify, mtp2T7=mtp2T7, measSwitchPriFailCallDataSuspect=measSwitchPriFailCallDataSuspect, cdrFileCreateTime=cdrFileCreateTime, switchActiveAlarmEntry=switchActiveAlarmEntry, cdrFileMoveCdrNackNotify=cdrFileMoveCdrNackNotify, ss7BCktT12=ss7BCktT12, mtp3GenTmrRowStatus=mtp3GenTmrRowStatus, measSwitchIsupFailCallAnsiCalledPartyLineBusy=measSwitchIsupFailCallAnsiCalledPartyLineBusy, ss7TrunkRowStatus=ss7TrunkRowStatus, CktOpStatus=CktOpStatus, isdnTrunkName=isdnTrunkName, isdnTmrT313=isdnTmrT313, routeId=routeId, ss7Mtp2LinkDnNotify=ss7Mtp2LinkDnNotify, switchFeatureTGFeatureCNIS=switchFeatureTGFeatureCNIS, LinkOpStatus=LinkOpStatus, FTswitchOver=FTswitchOver, trapChnlId=trapChnlId, trapSeverity=trapSeverity, xconnectCPUSwitchOverNotify=xconnectCPUSwitchOverNotify, logErrFileOpenNotify=logErrFileOpenNotify, xconnectRowStatus=xconnectRowStatus, isdnSlotId=isdnSlotId, SwitchType=SwitchType, switchGenInfoGrp=switchGenInfoGrp, mtp3T32=mtp3T32, switchVerICC=switchVerICC, switchPcInfo=switchPcInfo, isdnDS1LineCoding=isdnDS1LineCoding, isupTmrTFGR=isupTmrTFGR, switchUserCfgTable=switchUserCfgTable, measSwitchIsupDataSuspect=measSwitchIsupDataSuspect, ss7CktTmrRowStatus=ss7CktTmrRowStatus, routeEntry=routeEntry, ss7CktT14=ss7CktT14, trapLogErrcause=trapLogErrcause, isdnDchnlId=isdnDchnlId, isdnTmrT306=isdnTmrT306, isdnTmrCfgTable=isdnTmrCfgTable, trapMeasErrNum=trapMeasErrNum, isupTmrT19=isupTmrT19, trapNode1Id=trapNode1Id, ss7TrunkDS3ATMTransClkSrc=ss7TrunkDS3ATMTransClkSrc, mtp3LinkId=mtp3LinkId, xlinkMgmntEntry=xlinkMgmntEntry, statusMTP23ProcId=statusMTP23ProcId, isdnTmrT319=isdnTmrT319, switchUserPriority=switchUserPriority, ftProcessRestartConfigFailedNotify=ftProcessRestartConfigFailedNotify, mtp3LinkCfgEntry=mtp3LinkCfgEntry, switchContact=switchContact, ss7LinkRemUnInhNotify=ss7LinkRemUnInhNotify, ss7TrunkDS1LBO=ss7TrunkDS1LBO, ss7TrunkDpc=ss7TrunkDpc, ss7TrunkDS3TransClkSrc=ss7TrunkDS3TransClkSrc, routeOpStatus=routeOpStatus, digitStripMgmntEntry=digitStripMgmntEntry, measSwitchPriFailCallNoCircuit=measSwitchPriFailCallNoCircuit, auditDPCCfgEntry=auditDPCCfgEntry, ss7CICMgmntCmd=ss7CICMgmntCmd, isdnLoadBalanceMgmntEntry=isdnLoadBalanceMgmntEntry, measSwitchIsupOutgoingItutTrunkCallAnswered=measSwitchIsupOutgoingItutTrunkCallAnswered, genProcessBufOverflowRecoverNotify=genProcessBufOverflowRecoverNotify, cdrFileStatus=cdrFileStatus, ss7Route=ss7Route, faultModemReset=faultModemReset, mtp3T2=mtp3T2, measSwitchIsupFailCallAnsiIneffectiveMachineAttempts=measSwitchIsupFailCallAnsiIneffectiveMachineAttempts, ss7TrunkUNCHE3TransClkSrc=ss7TrunkUNCHE3TransClkSrc, mtp3T34=mtp3T34, isdnDS3TransClkSrc=isdnDS3TransClkSrc, switchFeature=switchFeature, ss7TrunkDS3ATMLBO=ss7TrunkDS3ATMLBO, ss7LinkTrunkId=ss7LinkTrunkId, isupTmrT33=isupTmrT33, atmRAINotify=atmRAINotify, EnableStatus=EnableStatus, switchTrap=switchTrap, statusISDN2ProcId=statusISDN2ProcId, msscPriLanPhyIntfUpNotify=msscPriLanPhyIntfUpNotify, switchVersion=switchVersion, measTrnkGrpISCicsChnls=measTrnkGrpISCicsChnls, cdrFileInterval=cdrFileInterval, cdrFileSourceId=cdrFileSourceId, msscPriHostFanUpNotify=msscPriHostFanUpNotify, msscBckHostFanUpNotify=msscBckHostFanUpNotify, measFileCfgSecondaryDir=measFileCfgSecondaryDir, audit=audit, ss7LinkName=ss7LinkName, cdrWriteRecErrNotify=cdrWriteRecErrNotify, trapLinkName=trapLinkName, LogFileEnDis=LogFileEnDis, ss7InvalidSLCNotify=ss7InvalidSLCNotify, cdrErrFileLocErrNotify=cdrErrFileLocErrNotify, hubSecIntfUpNotify=hubSecIntfUpNotify, ss7CktId=ss7CktId, mtp2T1=mtp2T1, measLinkOctectsTransmitted=measLinkOctectsTransmitted, auditDPCTable=auditDPCTable, isdnTrnkMgmntTable=isdnTrnkMgmntTable, ss7LnkLog=ss7LnkLog, isdnTrunkGrpId=isdnTrunkGrpId, isdnTrnkMgmntCmd=isdnTrnkMgmntCmd, AlarmSubEvent=AlarmSubEvent, trapDpc=trapDpc, routeRouteName=routeRouteName, ss7CktTrunkId=ss7CktTrunkId, ss7LinkCfgEntry=ss7LinkCfgEntry, ss7CktMgmtDPC=ss7CktMgmtDPC, logDiskFull80PercentNotify=logDiskFull80PercentNotify, ss7CktMgmntGroup=ss7CktMgmntGroup, msscSecLanPhyIntfUpNotify=msscSecLanPhyIntfUpNotify, auditISDNTrnkCfgEntry=auditISDNTrnkCfgEntry, ss7AtmSlotId=ss7AtmSlotId, ss7CktT12=ss7CktT12, ss7LinkUpNotify=ss7LinkUpNotify, measFileCfgUsagescanInterval=measFileCfgUsagescanInterval, logErrFileWriteNotify=logErrFileWriteNotify, slotIdEndA=slotIdEndA, isupTmrTFNLRELRS=isupTmrTFNLRELRS, ss7TrunkXconnectId=ss7TrunkXconnectId, DS3LBO=DS3LBO, ss7AtmChnlId=ss7AtmChnlId, isdnTrnkTrace=isdnTrnkTrace, switchConfig=switchConfig, ss7LinksetMgmtTable=ss7LinksetMgmtTable, mtp3T15=mtp3T15, measFileEnableISUPTraffic=measFileEnableISUPTraffic, ss7RouteTraceEntry=ss7RouteTraceEntry, auditTimePeriod=auditTimePeriod, switchAlarmSeverity=switchAlarmSeverity, mtp3T6=mtp3T6, isdnTrnkId=isdnTrnkId, cdrMgmntCmdGroup=cdrMgmntCmdGroup, statusLM2ProcID=statusLM2ProcID, ss7LinkLOPBlkNotify=ss7LinkLOPBlkNotify, isupTmrT31=isupTmrT31, isdnChnlMgmntEntry=isdnChnlMgmntEntry, ss7LinkRowStatus=ss7LinkRowStatus, switchVerISDN=switchVerISDN, xlinkConnectionType=xlinkConnectionType, RowStatus=RowStatus, isdnCntThreshold=isdnCntThreshold, mtp3T30=mtp3T30, trapOpc=trapOpc, mtp3T23=mtp3T23, isdnTmrT332=isdnTmrT332, xconnectIPAddr=xconnectIPAddr, measSwitchPriIncomingIsdnPRICallAttempts=measSwitchPriIncomingIsdnPRICallAttempts, modemStatusTable=modemStatusTable, mtp3T21=mtp3T21, trapnumXlinks=trapnumXlinks, ss7RtDPC=ss7RtDPC, isdnTmrT308=isdnTmrT308, lnp=lnp, msscSecLanPhyIntfDownNotify=msscSecLanPhyIntfDownNotify, measLinkTrafficEntry=measLinkTrafficEntry, AlarmEvent=AlarmEvent, isupTimerRowStatus=isupTimerRowStatus, trunkGrpRoffType=trunkGrpRoffType, measFileEnablePRIIneffectiveCall=measFileEnablePRIIneffectiveCall, trapObjects=trapObjects, switchDSPCfgRowStatus=switchDSPCfgRowStatus, cdrMngmtTrnkGrpTable=cdrMngmtTrnkGrpTable, ss7LinksetLinkId=ss7LinksetLinkId, ss7CktT17=ss7CktT17, trunkGrpVoicePcm=trunkGrpVoicePcm, isdnChnlStatusCfgEntry=isdnChnlStatusCfgEntry, enableSwitch=enableSwitch, xconnectTCPPort=xconnectTCPPort, ss7Sig=ss7Sig, AddrIdentifier=AddrIdentifier, EnableOperation=EnableOperation, mtp3RowStatus=mtp3RowStatus, cdrConfig=cdrConfig, isdnTrunkTraceTable=isdnTrunkTraceTable, mtp2T2=mtp2T2, LogType=LogType, isdnStatusChnlAllocMeth=isdnStatusChnlAllocMeth, switchPcMode=switchPcMode, faultModemChnlId=faultModemChnlId, measSwitchIsupOutgoingAnsiTrunkCallAttempts=measSwitchIsupOutgoingAnsiTrunkCallAttempts, trapDbId=trapDbId, isupTmrT2=isupTmrT2, msscPriHostFanDownNotify=msscPriHostFanDownNotify, DS3LineType=DS3LineType, modemFaultDetection=modemFaultDetection, switchUserCfgEntry=switchUserCfgEntry, measSwitchIsupFailCallAnsiMatchingLoss=measSwitchIsupFailCallAnsiMatchingLoss, AuditType=AuditType, logFileDuration=logFileDuration, trnkGrp=trnkGrp, xlinkMgmntTable=xlinkMgmntTable, cdrFileDestinationId=cdrFileDestinationId, isdnTmrT307=isdnTmrT307, isupTimerCfgEntry=isupTimerCfgEntry, xconnectIntfFarEndAISNotify=xconnectIntfFarEndAISNotify, isdnTmrT301=isdnTmrT301, ss7LinkLocUnInhNotify=ss7LinkLocUnInhNotify, ss7AtmPortId=ss7AtmPortId, enableRoute=enableRoute, ss7CktTmrT13=ss7CktTmrT13, ss7BCktT14=ss7BCktT14, ss7CktTmrT17=ss7CktTmrT17, isdnDS3DS1TransClkSrc=isdnDS3DS1TransClkSrc, isdnChnlMgmntCmd=isdnChnlMgmntCmd, ss7CktMgmntCmd=ss7CktMgmntCmd, isupIccAuditNotify=isupIccAuditNotify, ss7Br=ss7Br)
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", routeRowStatus=routeRowStatus, trapLanId=trapLanId, enableSS7Route=enableSS7Route, switchUpTime=switchUpTime, measFileEnablePRITraffic=measFileEnablePRITraffic, ss7TrunkDS3DS1TransClkSrc=ss7TrunkDS3DS1TransClkSrc, ethernetConnStatusInfo=ethernetConnStatusInfo, mtp3TFLC=mtp3TFLC, ss7TrunkDS1LineType=ss7TrunkDS1LineType, mtp3T1=mtp3T1, measTrnkGrpincomingUsage=measTrnkGrpincomingUsage, logFileSize=logFileSize, mtp3T36=mtp3T36, trunkGrpRoffName=trunkGrpRoffName, isupTmrTCCRt=isupTmrTCCRt, switchFeatureTGName=switchFeatureTGName, LinkSetOpStatus=LinkSetOpStatus, trapFanNo=trapFanNo, measSwitchIsupFailCallDataSuspect=measSwitchIsupFailCallDataSuspect, ftProcessRestartConfigSucceededNotify=ftProcessRestartConfigSucceededNotify, TransClkSrc=TransClkSrc, ss7LinkRPONotify=ss7LinkRPONotify, isdnPriority=isdnPriority, isdnChnlMgmntId=isdnChnlMgmntId, isdnTrunkId=isdnTrunkId, genProcessHeapOverFlowNotify=genProcessHeapOverFlowNotify, LrnRowStatus=LrnRowStatus, isdnMgmntGroup=isdnMgmntGroup, ss7CktT16=ss7CktT16, ss7CktTmrDpc=ss7CktTmrDpc, switchTGGrpCfgEntry=switchTGGrpCfgEntry, measTrnkGrpTrafficEntry=measTrnkGrpTrafficEntry, isdnChnlMgmntTable=isdnChnlMgmntTable, ss7BCktDpc=ss7BCktDpc, mtp3T19=mtp3T19, trapCause=trapCause, ss7IsupCicLocNotify=ss7IsupCicLocNotify, linksetId=linksetId, xconnectCardInsertionNotify=xconnectCardInsertionNotify, cdrDiskFullMinorNotify=cdrDiskFullMinorNotify, isdnXconnectId=isdnXconnectId, trapDirectory=trapDirectory, isdnDurThreshold=isdnDurThreshold, isdnDchnlTimeSlot=isdnDchnlTimeSlot, measFileCfgPurgeFlag=measFileCfgPurgeFlag, mtp2T4e=mtp2T4e, isupTmrT23=isupTmrT23, isdnTrunkCfgTable=isdnTrunkCfgTable, mtp3T18=mtp3T18, genProcessBufOverflowNotify=genProcessBufOverflowNotify, xconnectIdEndA=xconnectIdEndA, measFileMoveNotify=measFileMoveNotify, UserLoginStatus=UserLoginStatus, ss7TrunkCfgTable=ss7TrunkCfgTable, ss7BCktTVal=ss7BCktTVal, ss7LinkMgmntEntry=ss7LinkMgmntEntry, Level=Level, ss7CktChnlId=ss7CktChnlId, measFileCfgMeasInterval=measFileCfgMeasInterval, xconnPortIdEndB=xconnPortIdEndB, ss7TrunkDS3LBO=ss7TrunkDS3LBO, cdrRecordingOfficeId=cdrRecordingOfficeId, isdnTnkId=isdnTnkId, isdnTmrT312=isdnTmrT312, xconnIdEndA=xconnIdEndA, isdnDS3LineType=isdnDS3LineType, mtp3T17=mtp3T17, ss7CktTmrT12=ss7CktTmrT12, systemDescr=systemDescr, isdnTrunkTraceEntry=isdnTrunkTraceEntry, TmrRowStatus=TmrRowStatus, ss7LinksetCfgEntry=ss7LinksetCfgEntry, ss7TrunkOpc=ss7TrunkOpc, measSwitchPriGrp=measSwitchPriGrp, ss7IsupCongLvl2Notify=ss7IsupCongLvl2Notify, ss7BCktT3=ss7BCktT3, faultModemRepnum=faultModemRepnum, routeRouteType=routeRouteType, VoicePcm=VoicePcm, ss7CktRepNum=ss7CktRepNum, mtp3T26=mtp3T26, switchAlarmDesc=switchAlarmDesc, trunkGrpRowStatus=trunkGrpRowStatus, ss7BCktRowStatus=ss7BCktRowStatus, ss7LnkEnable=ss7LnkEnable, ss7LinkLocInhNotify=ss7LinkLocInhNotify, msscPriPsuUpNotify=msscPriPsuUpNotify, switchAlarmId=switchAlarmId, isdnTmrT316C=isdnTmrT316C, isupTmrT20=isupTmrT20, trapProcInstNo=trapProcInstNo, IsdnTrnkOpStatus=IsdnTrnkOpStatus, mtp3T24=mtp3T24, cdrFileConfig=cdrFileConfig, trapProcessorId=trapProcessorId, hubPriIntfUpNotify=hubPriIntfUpNotify, processStatusInfo=processStatusInfo, logFileInfo=logFileInfo, atmLOFNotify=atmLOFNotify, TrnkGrpType=TrnkGrpType, cdrFileAcknowledge=cdrFileAcknowledge, DSPCardType=DSPCardType, ss7TrunkOpStatus=ss7TrunkOpStatus, ss7CktDir=ss7CktDir, trace=trace, switchUserPassword=switchUserPassword, TrunkType=TrunkType, hubSecIntfDownNotify=hubSecIntfDownNotify, ss7CktTmrT3=ss7CktTmrT3, ss7CICTimerTable=ss7CICTimerTable, mtp2LinkTmrCfgEntry=mtp2LinkTmrCfgEntry, portIdEndB=portIdEndB, isupTimerType=isupTimerType, ss7TrunkDS3DS1LineType=ss7TrunkDS3DS1LineType, rtEntrySs7RouteName=rtEntrySs7RouteName, isdnDirection=isdnDirection, rtEntrySs7Dpc=rtEntrySs7Dpc, genswitchSnmpAgentReadyNotify=genswitchSnmpAgentReadyNotify, mfdMgmntEntry=mfdMgmntEntry, measFileMoveErrNotify=measFileMoveErrNotify, processStatus=processStatus, IsdnControlstatus=IsdnControlstatus, trapTrunkId=trapTrunkId, ss7LinkChannel=ss7LinkChannel, isdnStatusChnlSuConnId=isdnStatusChnlSuConnId, rtAddrType=rtAddrType, ss7LinksetMgmtEntry=ss7LinksetMgmtEntry, ss7TrunkE1CRC4=ss7TrunkE1CRC4, ss7CktCfgEntry=ss7CktCfgEntry, ss7BCktOpStatus=ss7BCktOpStatus, routeTable=routeTable, switchFeatureTGType=switchFeatureTGType, ftMsscFtmupNotify=ftMsscFtmupNotify, cdrWriteHeaderErrNotify=cdrWriteHeaderErrNotify, mtp3TBND=mtp3TBND, ss7LinkRemInhNotify=ss7LinkRemInhNotify, NameString=NameString, rtEntrySs7Mode=rtEntrySs7Mode, TimerType=TimerType, trapCdrFileSeqNum=trapCdrFileSeqNum, trunkGrpOpStatus=trunkGrpOpStatus, isdnTmrT310=isdnTmrT310, isdnDS3LBO=isdnDS3LBO, ProcessStatus=ProcessStatus, rt=rt, rtNumOfDigit=rtNumOfDigit, switchActiveAlarmTable=switchActiveAlarmTable, switchUsrInfo=switchUsrInfo, switchOver=switchOver, cdrBafConfig=cdrBafConfig, ss7TrunkE1MultiFrame=ss7TrunkE1MultiFrame, products=products, isdnTrnkTmrOpStatus=isdnTrnkTmrOpStatus, msscPriLanPhyIntfDownNotify=msscPriLanPhyIntfDownNotify, ss7AtmTrnkId=ss7AtmTrnkId, DS3ATMCellMap=DS3ATMCellMap, isdnDS3DS1LineType=isdnDS3DS1LineType, measFileInfo=measFileInfo, trapInterfaceId=trapInterfaceId, isdnCntthreshold=isdnCntthreshold, ss7AtmLnkId=ss7AtmLnkId, linkName=linkName, measSwitch=measSwitch, ss7LinkOpStatus=ss7LinkOpStatus, RouteType=RouteType, trunkGrpNoOfTrunks=trunkGrpNoOfTrunks, Direction=Direction, trapCicvalue=trapCicvalue, trapPortId=trapPortId, ftForcedSwitchOverSucceededNotify=ftForcedSwitchOverSucceededNotify, genConsoleLoginNotify=genConsoleLoginNotify, ss7RouteTraceTable=ss7RouteTraceTable, measLinkOctetsReceived=measLinkOctetsReceived, ss7TrunkGrpId=ss7TrunkGrpId, isupTmrT8=isupTmrT8, xconnPortIdEndA=xconnPortIdEndA, xconnIdEndB=xconnIdEndB, switchDSPCfgOpStatus=switchDSPCfgOpStatus, cdrFileCreateDate=cdrFileCreateDate, measSwitchIsupOutgoingItutTrunkCallAttempts=measSwitchIsupOutgoingItutTrunkCallAttempts, isupTmrTEX=isupTmrTEX, cdrFileOpenErrNotify=cdrFileOpenErrNotify, routeAdrId=routeAdrId, logErrFileDeleteNotify=logErrFileDeleteNotify, LinkType=LinkType, measFileCfgPurgeDay=measFileCfgPurgeDay, auditPeriodGrp=auditPeriodGrp, measFileDeleteNotify=measFileDeleteNotify, mtp3T35=mtp3T35, trapMeasErrCause=trapMeasErrCause, isup=isup, services=services, ss7BCktT15=ss7BCktT15, isdnTmrT331=isdnTmrT331, mtp3T33=mtp3T33, MeasEnableStatus=MeasEnableStatus, ss7AtmXconnectId=ss7AtmXconnectId, Ss7RouteType=Ss7RouteType, logPurgeTime=logPurgeTime, IsdnChnlMgtOperation=IsdnChnlMgtOperation, ss7BCktCic=ss7BCktCic, xlinkOpStatus=xlinkOpStatus, LoadBalance=LoadBalance, trapIntId=trapIntId, ftProcessAbnormalTerminationNotify=ftProcessAbnormalTerminationNotify, isdnPortId=isdnPortId, trapUserName=trapUserName, isupTmrT28=isupTmrT28, isupTmrT27=isupTmrT27, mtp3=mtp3, xconnectBkplaneRefClkClearNotify=xconnectBkplaneRefClkClearNotify, trapSwitchId1=trapSwitchId1, ss7TrunkId=ss7TrunkId, ss7=ss7, Controlstatus=Controlstatus, ModifyTmrStatus=ModifyTmrStatus, ss7BCktT16=ss7BCktT16, ss7LinksetName=ss7LinksetName, IfType=IfType, ss7BCktCfgTable=ss7BCktCfgTable, cdrTrnkGrpId=cdrTrnkGrpId, trapRepeatNum=trapRepeatNum, isupTmrT6=isupTmrT6, measTrnkGrpName=measTrnkGrpName, xconnectBkplaneRefClkFailNotify=xconnectBkplaneRefClkFailNotify, xlinkCfgEntry=xlinkCfgEntry, cdrTrnkGrpMgmntCmd=cdrTrnkGrpMgmntCmd, enableIsdntrunk=enableIsdntrunk, DS1LineType=DS1LineType, xconnectDnNotify=xconnectDnNotify, ss7CktValidationNotify=ss7CktValidationNotify, isdnTmrT316=isdnTmrT316, ss7RouteTrace=ss7RouteTrace, cdrFileRecordNum=cdrFileRecordNum, logFileGenEnable=logFileGenEnable, auditPointCodeType=auditPointCodeType, trapRoutename=trapRoutename, trapLinkId=trapLinkId, AddrString=AddrString, measTrnkGrpOOSCicsChnls=measTrnkGrpOOSCicsChnls, logAttribute=logAttribute, alarmGrp=alarmGrp, ss7TrunkMode=ss7TrunkMode, trunkGrpCdrFlag=trunkGrpCdrFlag, isdnE1TransClk=isdnE1TransClk, switchVerSPHR=switchVerSPHR, isupTmrT1=isupTmrT1, isupTmrTCCR=isupTmrTCCR, statusMTP22ProcId=statusMTP22ProcId, switchVerSIG=switchVerSIG, ss7CktMgmntChnlId=ss7CktMgmntChnlId, isdnTmrTREST=isdnTmrTREST, Bool=Bool, statusLM1ProcId=statusLM1ProcId)
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", switchUserStatus=switchUserStatus, CdrFlag=CdrFlag, trapLogFileName=trapLogFileName, ftForcedSwitchOverFailedNotify=ftForcedSwitchOverFailedNotify, atmAISNotify=atmAISNotify, ss7CktT15=ss7CktT15, isdnTrunkType=isdnTrunkType, mtp2=mtp2, switchPcEntry=switchPcEntry, switchVersionGrp=switchVersionGrp, isdnTmrT304=isdnTmrT304, ss7AtmPhyType=ss7AtmPhyType, switchFeatureTGCfgTable=switchFeatureTGCfgTable, ss7CktTVal=ss7CktTVal, rtEntrySs7CfgEntry=rtEntrySs7CfgEntry, cdrFileRecLimit=cdrFileRecLimit, isupTmrTECt=isupTmrTECt, enablelogGen=enablelogGen, auditInfo=auditInfo, BlockOperation=BlockOperation, measFileReadyNotify=measFileReadyNotify, switchAlarmTime=switchAlarmTime, xconnectIntfNearEndLOFNotify=xconnectIntfNearEndLOFNotify, ss7AtmLinkCfgEntry=ss7AtmLinkCfgEntry, rtEntryIsdnCfgEntry=rtEntryIsdnCfgEntry, switchDSP=switchDSP, hubPriIntfDownNotify=hubPriIntfDownNotify, isupTmrT21=isupTmrT21, ss7TrunkName=ss7TrunkName, RoffType=RoffType, ss7CktMgmntRepNum=ss7CktMgmntRepNum, measFileCfgPrimaryDir=measFileCfgPrimaryDir, isupTmrT18=isupTmrT18, statusSIG2ProcId=statusSIG2ProcId, measSwitchPriFailCallIneffectiveMachineAttempts=measSwitchPriFailCallIneffectiveMachineAttempts, ss7CicTmrEntry=ss7CicTmrEntry, ss7CICMgmntEntry=ss7CICMgmntEntry, ss7CktTmrT14=ss7CktTmrT14, ss7TrunkDS1TransClkSrc=ss7TrunkDS1TransClkSrc, cdrErrTempFileLocErrNotify=cdrErrTempFileLocErrNotify, switchMeas=switchMeas, ss7LinkDnNotify=ss7LinkDnNotify, mfdDetectionNotify=mfdDetectionNotify, logErrFileCloseNotify=logErrFileCloseNotify, ss7RtLoadShareType=ss7RtLoadShareType, EthernetConnStatus=EthernetConnStatus, mtp3T12=mtp3T12, auditPeriod=auditPeriod, mtp2LinkTmrCfgTable=mtp2LinkTmrCfgTable, rteName=rteName, rtEntryIsdnGrpId=rtEntryIsdnGrpId, isupTmrT34=isupTmrT34, genConsoleLogoutNotify=genConsoleLogoutNotify, xconnectOpStatus=xconnectOpStatus, LinkControlStatus=LinkControlStatus, ss7RtDpcEntry=ss7RtDpcEntry, slotIdEndB=slotIdEndB, mtp2RowStatus=mtp2RowStatus, measTrnkGrpDataSuspect=measTrnkGrpDataSuspect, ss7TrunkDS3ATMCellMap=ss7TrunkDS3ATMCellMap, ss7ConcernedDpcPauseNotify=ss7ConcernedDpcPauseNotify, mtp3T3=mtp3T3, switchFeatureTGFeatureSS=switchFeatureTGFeatureSS, E1CRC4=E1CRC4, isdnTmrTANS=isdnTmrTANS, ss7LnkTrace=ss7LnkTrace, faultModemTrnkId=faultModemTrnkId, isdn=isdn, enableGroup=enableGroup, lrnRowStatus=lrnRowStatus, alarmTraps=alarmTraps, ss7BCktVpi=ss7BCktVpi, isdnE1MultiFrame=isdnE1MultiFrame, mtp3T37=mtp3T37, isdnTrunkOpStatus=isdnTrunkOpStatus, trapIntfcId=trapIntfcId, ConnectionType=ConnectionType, measSwitchPriFailCallMatchingLoss=measSwitchPriFailCallMatchingLoss, trunkGrpCarrierId=trunkGrpCarrierId, ss7CktTmrT15=ss7CktTmrT15, linkMgmntCmd=linkMgmntCmd, TGFeature=TGFeature, ss7BCktPriority=ss7BCktPriority, xconnectIntfNearEndLOSNotify=xconnectIntfNearEndLOSNotify, ftProcessRestartDisableNotify=ftProcessRestartDisableNotify, logGenTime=logGenTime, measSwitchIsupFailCallAnsiNoCircuit=measSwitchIsupFailCallAnsiNoCircuit, armillaire2000=armillaire2000, ss7TrunkDS3LineType=ss7TrunkDS3LineType, MeasPurgeFlag=MeasPurgeFlag, measSwitchPriDataSuspect=measSwitchPriDataSuspect, cdrGenMgmntCmd=cdrGenMgmntCmd, AuditOperation=AuditOperation, ss7LinkSpeed=ss7LinkSpeed, isdnTmrT311=isdnTmrT311, ss7RtOpStatus=ss7RtOpStatus, measLinkLostMSUsBufferOverflow=measLinkLostMSUsBufferOverflow, isdnPhyIntfType=isdnPhyIntfType, isupTimerCfgTable=isupTimerCfgTable, switchDescr=switchDescr, statusISDN1ProcId=statusISDN1ProcId, isdnTmrT396=isdnTmrT396, mtp3LinkCfgTable=mtp3LinkCfgTable, switchUserName=switchUserName, trapBucketSize=trapBucketSize, ss7RtRowStatus=ss7RtRowStatus, ilbMgmntCmd=ilbMgmntCmd, cdrMngmtTrnkGrpEntry=cdrMngmtTrnkGrpEntry, ft=ft, isupTmrTGTCHG=isupTmrTGTCHG, isdnTrnkTmrRowStatus=isdnTrnkTmrRowStatus, ModemEnableStatus=ModemEnableStatus, mtp2T5=mtp2T5, ss7LinkCfgTable=ss7LinkCfgTable, trapProcessId=trapProcessId, isdnTmrT318=isdnTmrT318, routeNumOfDigit=routeNumOfDigit, isdnStatusChnlId=isdnStatusChnlId, routeAddr=routeAddr, isdnDS1TransClkSrc=isdnDS1TransClkSrc, ss7BCktT17=ss7BCktT17, ss7CicRange=ss7CicRange, switchNameStatus=switchNameStatus, switchDSPCfgEntry=switchDSPCfgEntry, isdnTmrT305=isdnTmrT305, switchPc=switchPc, auditXLink=auditXLink, trapSlotId=trapSlotId, msscPriDedicatedLinkUpNotify=msscPriDedicatedLinkUpNotify, ss7AtmLinkOpStatus=ss7AtmLinkOpStatus, portIdEndA=portIdEndA, logFileStatus=logFileStatus, measFileAcknowledge=measFileAcknowledge, LinkSetControlStatus=LinkSetControlStatus, switchInfo=switchInfo, statusSPHR2ProcId=statusSPHR2ProcId, msscPriDedicatedLinkDownNotify=msscPriDedicatedLinkDownNotify, ss7TrunkPhyType=ss7TrunkPhyType, measDiskOverCrtclThresholdNotify=measDiskOverCrtclThresholdNotify, msscBakPsuUpNotify=msscBakPsuUpNotify, measFileOpenErrNotify=measFileOpenErrNotify, switchMaintenance=switchMaintenance, rtEntrySs7OpStatus=rtEntrySs7OpStatus, ss7LinkMgmntTable=ss7LinkMgmntTable, ss7CktRowStatus=ss7CktRowStatus, measLinkUnavailableDuration=measLinkUnavailableDuration, isdnStatusTrunkId=isdnStatusTrunkId, switchAlarmSubEvent=switchAlarmSubEvent, ss7TrunkOC3TransClkSrc=ss7TrunkOC3TransClkSrc)
