#
# PySNMP MIB module HC-RMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HC-RMON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
CounterBasedGauge64, ZeroBasedCounter64 = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64", "ZeroBasedCounter64")
hostAddress, rmon, captureBufferControlIndex, matrix, etherHistoryIndex, hostTimeCreationOrder, hostTopN, hostIndex, hostTimeIndex, hostTopNReport, matrixSDIndex, matrixDSSourceAddress, statistics, hostTopNIndex, capture, matrixSDDestAddress, matrixSDSourceAddress, history, OwnerString, matrixDSDestAddress, captureBufferIndex, hosts, etherHistorySampleIndex, etherStatsIndex, matrixDSIndex = mibBuilder.importSymbols("RMON-MIB", "hostAddress", "rmon", "captureBufferControlIndex", "matrix", "etherHistoryIndex", "hostTimeCreationOrder", "hostTopN", "hostIndex", "hostTimeIndex", "hostTopNReport", "matrixSDIndex", "matrixDSSourceAddress", "statistics", "hostTopNIndex", "capture", "matrixSDDestAddress", "matrixSDSourceAddress", "history", "OwnerString", "matrixDSDestAddress", "captureBufferIndex", "hosts", "etherHistorySampleIndex", "etherStatsIndex", "matrixDSIndex")
rmonConformance, = mibBuilder.importSymbols("RMON2-MIB", "rmonConformance")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, NotificationType, iso, Bits, TimeTicks, Unsigned32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, ObjectIdentity, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "iso", "Bits", "TimeTicks", "Unsigned32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Gauge32")
TextualConvention, RowStatus, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TimeStamp")
hcRMON = ModuleIdentity((1, 3, 6, 1, 2, 1, 16, 20, 5))
hcRMON.setRevisions(('2002-05-08 00:00',))
if mibBuilder.loadTexts: hcRMON.setLastUpdated('200205080000Z')
if mibBuilder.loadTexts: hcRMON.setOrganization('IETF RMON MIB Working Group')
mediaIndependentStats = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 21))
mediaIndependentTable = MibTable((1, 3, 6, 1, 2, 1, 16, 21, 1), )
if mibBuilder.loadTexts: mediaIndependentTable.setStatus('current')
mediaIndependentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 21, 1, 1), ).setIndexNames((0, "HC-RMON-MIB", "mediaIndependentIndex"))
if mibBuilder.loadTexts: mediaIndependentEntry.setStatus('current')
mediaIndependentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mediaIndependentIndex.setStatus('current')
mediaIndependentDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentDataSource.setStatus('current')
mediaIndependentDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 3), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDropEvents.setStatus('current')
mediaIndependentDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDroppedFrames.setStatus('current')
mediaIndependentInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInPkts.setStatus('current')
mediaIndependentInOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOverflowPkts.setStatus('current')
mediaIndependentInHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInHighCapacityPkts.setStatus('current')
mediaIndependentOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutPkts.setStatus('current')
mediaIndependentOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOverflowPkts.setStatus('current')
mediaIndependentOutHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityPkts.setStatus('current')
mediaIndependentInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOctets.setStatus('current')
mediaIndependentInOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 12), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOverflowOctets.setStatus('current')
mediaIndependentInHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInHighCapacityOctets.setStatus('current')
mediaIndependentOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 14), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOctets.setStatus('current')
mediaIndependentOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 15), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOverflowOctets.setStatus('current')
mediaIndependentOutHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 16), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityOctets.setStatus('current')
mediaIndependentInNUCastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastPkts.setStatus('current')
mediaIndependentInNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastOverflowPkts.setStatus('current')
mediaIndependentInNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastHighCapacityPkts.setStatus('current')
mediaIndependentOutNUCastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastPkts.setStatus('current')
mediaIndependentOutNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 21), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastOverflowPkts.setStatus('current')
mediaIndependentOutNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 22), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastHighCapacityPkts.setStatus('current')
mediaIndependentInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 23), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInErrors.setStatus('current')
mediaIndependentOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 24), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutErrors.setStatus('current')
mediaIndependentInputSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 25), Gauge32()).setUnits('Kilobits per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInputSpeed.setStatus('current')
mediaIndependentOutputSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 26), Gauge32()).setUnits('Kilobits per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutputSpeed.setStatus('current')
mediaIndependentDuplexMode = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfduplex", 1), ("fullduplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexMode.setStatus('current')
mediaIndependentDuplexChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 28), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexChanges.setStatus('current')
mediaIndependentDuplexLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexLastChange.setStatus('current')
mediaIndependentOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 30), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentOwner.setStatus('current')
mediaIndependentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentStatus.setStatus('current')
etherStatsHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 7), )
if mibBuilder.loadTexts: etherStatsHighCapacityTable.setStatus('current')
etherStatsHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 7, 1), ).setIndexNames((0, "RMON-MIB", "etherStatsIndex"))
if mibBuilder.loadTexts: etherStatsHighCapacityEntry.setStatus('current')
etherStatsHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts.setStatus('current')
etherStatsHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts.setStatus('current')
etherStatsHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowOctets.setStatus('current')
etherStatsHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOctets.setStatus('current')
etherStatsHighCapacityOverflowPkts64Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts64Octets.setStatus('current')
etherStatsHighCapacityPkts64Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts64Octets.setStatus('current')
etherStatsHighCapacityOverflowPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts65to127Octets.setStatus('current')
etherStatsHighCapacityPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts65to127Octets.setStatus('current')
etherStatsHighCapacityOverflowPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts128to255Octets.setStatus('current')
etherStatsHighCapacityPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts128to255Octets.setStatus('current')
etherStatsHighCapacityOverflowPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts256to511Octets.setStatus('current')
etherStatsHighCapacityPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts256to511Octets.setStatus('current')
etherStatsHighCapacityOverflowPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts512to1023Octets.setStatus('current')
etherStatsHighCapacityPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 14), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts512to1023Octets.setStatus('current')
etherStatsHighCapacityOverflowPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts1024to1518Octets.setStatus('current')
etherStatsHighCapacityPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts1024to1518Octets.setStatus('current')
etherHistoryHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 6), )
if mibBuilder.loadTexts: etherHistoryHighCapacityTable.setStatus('current')
etherHistoryHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 6, 1), ).setIndexNames((0, "RMON-MIB", "etherHistoryIndex"), (0, "RMON-MIB", "etherHistorySampleIndex"))
if mibBuilder.loadTexts: etherHistoryHighCapacityEntry.setStatus('current')
etherHistoryHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 1), Gauge32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowPkts.setStatus('current')
etherHistoryHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 2), CounterBasedGauge64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityPkts.setStatus('current')
etherHistoryHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 3), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowOctets.setStatus('current')
etherHistoryHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 4), CounterBasedGauge64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOctets.setStatus('current')
hostHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 4, 5), )
if mibBuilder.loadTexts: hostHighCapacityTable.setStatus('current')
hostHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 4, 5, 1), ).setIndexNames((0, "RMON-MIB", "hostIndex"), (0, "RMON-MIB", "hostAddress"))
if mibBuilder.loadTexts: hostHighCapacityEntry.setStatus('current')
hostHighCapacityInOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInOverflowPkts.setStatus('current')
hostHighCapacityInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInPkts.setStatus('current')
hostHighCapacityOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutOverflowPkts.setStatus('current')
hostHighCapacityOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutPkts.setStatus('current')
hostHighCapacityInOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInOverflowOctets.setStatus('current')
hostHighCapacityInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInOctets.setStatus('current')
hostHighCapacityOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 7), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutOverflowOctets.setStatus('current')
hostHighCapacityOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutOctets.setStatus('current')
hostTimeHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 4, 6), )
if mibBuilder.loadTexts: hostTimeHighCapacityTable.setStatus('current')
hostTimeHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 4, 6, 1), ).setIndexNames((0, "RMON-MIB", "hostTimeIndex"), (0, "RMON-MIB", "hostTimeCreationOrder"))
if mibBuilder.loadTexts: hostTimeHighCapacityEntry.setStatus('current')
hostTimeHighCapacityInOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInOverflowPkts.setStatus('current')
hostTimeHighCapacityInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInPkts.setStatus('current')
hostTimeHighCapacityOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutOverflowPkts.setStatus('current')
hostTimeHighCapacityOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutPkts.setStatus('current')
hostTimeHighCapacityInOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInOverflowOctets.setStatus('current')
hostTimeHighCapacityInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInOctets.setStatus('current')
hostTimeHighCapacityOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 7), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutOverflowOctets.setStatus('current')
hostTimeHighCapacityOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutOctets.setStatus('current')
hostTopNHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 5, 3), )
if mibBuilder.loadTexts: hostTopNHighCapacityTable.setStatus('current')
hostTopNHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 5, 3, 1), ).setIndexNames((0, "RMON-MIB", "hostTopNReport"), (0, "RMON-MIB", "hostTopNIndex"))
if mibBuilder.loadTexts: hostTopNHighCapacityEntry.setStatus('current')
hostTopNHighCapacityAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityAddress.setStatus('current')
hostTopNHighCapacityBaseRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityBaseRate.setStatus('current')
hostTopNHighCapacityOverflowRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityOverflowRate.setStatus('current')
hostTopNHighCapacityRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityRate.setStatus('current')
matrixSDHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 6, 5), )
if mibBuilder.loadTexts: matrixSDHighCapacityTable.setStatus('current')
matrixSDHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 6, 5, 1), ).setIndexNames((0, "RMON-MIB", "matrixSDIndex"), (0, "RMON-MIB", "matrixSDSourceAddress"), (0, "RMON-MIB", "matrixSDDestAddress"))
if mibBuilder.loadTexts: matrixSDHighCapacityEntry.setStatus('current')
matrixSDHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityOverflowPkts.setStatus('current')
matrixSDHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityPkts.setStatus('current')
matrixSDHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityOverflowOctets.setStatus('current')
matrixSDHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityOctets.setStatus('current')
matrixDSHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 6, 6), )
if mibBuilder.loadTexts: matrixDSHighCapacityTable.setStatus('current')
matrixDSHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 6, 6, 1), ).setIndexNames((0, "RMON-MIB", "matrixDSIndex"), (0, "RMON-MIB", "matrixDSDestAddress"), (0, "RMON-MIB", "matrixDSSourceAddress"))
if mibBuilder.loadTexts: matrixDSHighCapacityEntry.setStatus('current')
matrixDSHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityOverflowPkts.setStatus('current')
matrixDSHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityPkts.setStatus('current')
matrixDSHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityOverflowOctets.setStatus('current')
matrixDSHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityOctets.setStatus('current')
captureBufferHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 8, 3), )
if mibBuilder.loadTexts: captureBufferHighCapacityTable.setStatus('current')
captureBufferHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 8, 3, 1), ).setIndexNames((0, "RMON-MIB", "captureBufferControlIndex"), (0, "RMON-MIB", "captureBufferIndex"))
if mibBuilder.loadTexts: captureBufferHighCapacityEntry.setStatus('current')
captureBufferPacketHighCapacityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: captureBufferPacketHighCapacityTime.setStatus('current')
hcRmonMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 20, 6))
hcRmonMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 20, 7))
hcMediaIndependentCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 20, 6, 1)).setObjects(("HC-RMON-MIB", "mediaIndependentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hcMediaIndependentCompliance = hcMediaIndependentCompliance.setStatus('current')
hcRmon1MIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 20, 6, 2)).setObjects(("HC-RMON-MIB", "etherStatsHighCapacityGroup"), ("HC-RMON-MIB", "etherHistoryHighCapacityGroup"), ("HC-RMON-MIB", "hostHighCapacityGroup"), ("HC-RMON-MIB", "hostTopNHighCapacityGroup"), ("HC-RMON-MIB", "matrixHighCapacityGroup"), ("HC-RMON-MIB", "captureBufferHighCapacityGroup"), ("RMON-MIB", "rmonEtherStatsGroup"), ("RMON-MIB", "rmonHistoryControlGroup"), ("RMON-MIB", "rmonEthernetHistoryGroup"), ("RMON-MIB", "rmonHostGroup"), ("RMON-MIB", "rmonHostTopNGroup"), ("RMON-MIB", "rmonMatrixGroup"), ("RMON-MIB", "rmonFilterGroup"), ("RMON-MIB", "rmonPacketCaptureGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hcRmon1MIBCompliance = hcRmon1MIBCompliance.setStatus('current')
mediaIndependentGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 1)).setObjects(("HC-RMON-MIB", "mediaIndependentDataSource"), ("HC-RMON-MIB", "mediaIndependentDropEvents"), ("HC-RMON-MIB", "mediaIndependentDroppedFrames"), ("HC-RMON-MIB", "mediaIndependentInPkts"), ("HC-RMON-MIB", "mediaIndependentInOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentInHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentOutPkts"), ("HC-RMON-MIB", "mediaIndependentOutOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentOutHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentInOctets"), ("HC-RMON-MIB", "mediaIndependentInOverflowOctets"), ("HC-RMON-MIB", "mediaIndependentInHighCapacityOctets"), ("HC-RMON-MIB", "mediaIndependentOutOctets"), ("HC-RMON-MIB", "mediaIndependentOutOverflowOctets"), ("HC-RMON-MIB", "mediaIndependentOutHighCapacityOctets"), ("HC-RMON-MIB", "mediaIndependentInNUCastPkts"), ("HC-RMON-MIB", "mediaIndependentInNUCastOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentInNUCastHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentOutNUCastPkts"), ("HC-RMON-MIB", "mediaIndependentOutNUCastOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentOutNUCastHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentInErrors"), ("HC-RMON-MIB", "mediaIndependentOutErrors"), ("HC-RMON-MIB", "mediaIndependentInputSpeed"), ("HC-RMON-MIB", "mediaIndependentOutputSpeed"), ("HC-RMON-MIB", "mediaIndependentDuplexMode"), ("HC-RMON-MIB", "mediaIndependentDuplexChanges"), ("HC-RMON-MIB", "mediaIndependentDuplexLastChange"), ("HC-RMON-MIB", "mediaIndependentOwner"), ("HC-RMON-MIB", "mediaIndependentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mediaIndependentGroup = mediaIndependentGroup.setStatus('current')
etherStatsHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 2)).setObjects(("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowOctets"), ("HC-RMON-MIB", "etherStatsHighCapacityOctets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts64Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts64Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts65to127Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts65to127Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts128to255Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts128to255Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts256to511Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts256to511Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts512to1023Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts512to1023Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts1024to1518Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts1024to1518Octets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherStatsHighCapacityGroup = etherStatsHighCapacityGroup.setStatus('current')
etherHistoryHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 3)).setObjects(("HC-RMON-MIB", "etherHistoryHighCapacityOverflowPkts"), ("HC-RMON-MIB", "etherHistoryHighCapacityPkts"), ("HC-RMON-MIB", "etherHistoryHighCapacityOverflowOctets"), ("HC-RMON-MIB", "etherHistoryHighCapacityOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherHistoryHighCapacityGroup = etherHistoryHighCapacityGroup.setStatus('current')
hostHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 4)).setObjects(("HC-RMON-MIB", "hostHighCapacityInOverflowPkts"), ("HC-RMON-MIB", "hostHighCapacityInPkts"), ("HC-RMON-MIB", "hostHighCapacityOutOverflowPkts"), ("HC-RMON-MIB", "hostHighCapacityOutPkts"), ("HC-RMON-MIB", "hostHighCapacityInOverflowOctets"), ("HC-RMON-MIB", "hostHighCapacityInOctets"), ("HC-RMON-MIB", "hostHighCapacityOutOverflowOctets"), ("HC-RMON-MIB", "hostHighCapacityOutOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityInOverflowPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityInPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityOutOverflowPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityOutPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityInOverflowOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityInOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityOutOverflowOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hostHighCapacityGroup = hostHighCapacityGroup.setStatus('current')
hostTopNHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 5)).setObjects(("HC-RMON-MIB", "hostTopNHighCapacityAddress"), ("HC-RMON-MIB", "hostTopNHighCapacityBaseRate"), ("HC-RMON-MIB", "hostTopNHighCapacityOverflowRate"), ("HC-RMON-MIB", "hostTopNHighCapacityRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hostTopNHighCapacityGroup = hostTopNHighCapacityGroup.setStatus('current')
matrixHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 6)).setObjects(("HC-RMON-MIB", "matrixSDHighCapacityOverflowPkts"), ("HC-RMON-MIB", "matrixSDHighCapacityPkts"), ("HC-RMON-MIB", "matrixSDHighCapacityOverflowOctets"), ("HC-RMON-MIB", "matrixSDHighCapacityOctets"), ("HC-RMON-MIB", "matrixDSHighCapacityOverflowPkts"), ("HC-RMON-MIB", "matrixDSHighCapacityPkts"), ("HC-RMON-MIB", "matrixDSHighCapacityOverflowOctets"), ("HC-RMON-MIB", "matrixDSHighCapacityOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    matrixHighCapacityGroup = matrixHighCapacityGroup.setStatus('current')
captureBufferHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 7)).setObjects(("HC-RMON-MIB", "captureBufferPacketHighCapacityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    captureBufferHighCapacityGroup = captureBufferHighCapacityGroup.setStatus('current')
mibBuilder.exportSymbols("HC-RMON-MIB", mediaIndependentOutNUCastPkts=mediaIndependentOutNUCastPkts, etherStatsHighCapacityEntry=etherStatsHighCapacityEntry, etherHistoryHighCapacityOverflowOctets=etherHistoryHighCapacityOverflowOctets, mediaIndependentDataSource=mediaIndependentDataSource, mediaIndependentOutOctets=mediaIndependentOutOctets, matrixDSHighCapacityOverflowPkts=matrixDSHighCapacityOverflowPkts, etherStatsHighCapacityPkts65to127Octets=etherStatsHighCapacityPkts65to127Octets, etherHistoryHighCapacityPkts=etherHistoryHighCapacityPkts, mediaIndependentInHighCapacityOctets=mediaIndependentInHighCapacityOctets, hostTimeHighCapacityInOverflowPkts=hostTimeHighCapacityInOverflowPkts, matrixSDHighCapacityPkts=matrixSDHighCapacityPkts, mediaIndependentOutErrors=mediaIndependentOutErrors, etherStatsHighCapacityOverflowPkts64Octets=etherStatsHighCapacityOverflowPkts64Octets, etherStatsHighCapacityOverflowPkts65to127Octets=etherStatsHighCapacityOverflowPkts65to127Octets, matrixHighCapacityGroup=matrixHighCapacityGroup, mediaIndependentInputSpeed=mediaIndependentInputSpeed, mediaIndependentDuplexMode=mediaIndependentDuplexMode, mediaIndependentInOverflowOctets=mediaIndependentInOverflowOctets, hostTimeHighCapacityOutOverflowPkts=hostTimeHighCapacityOutOverflowPkts, hcRmonMIBGroups=hcRmonMIBGroups, mediaIndependentOutHighCapacityPkts=mediaIndependentOutHighCapacityPkts, mediaIndependentOwner=mediaIndependentOwner, mediaIndependentOutHighCapacityOctets=mediaIndependentOutHighCapacityOctets, hostTimeHighCapacityInOverflowOctets=hostTimeHighCapacityInOverflowOctets, hostHighCapacityOutOverflowOctets=hostHighCapacityOutOverflowOctets, mediaIndependentInPkts=mediaIndependentInPkts, etherHistoryHighCapacityTable=etherHistoryHighCapacityTable, PYSNMP_MODULE_ID=hcRMON, mediaIndependentInOctets=mediaIndependentInOctets, mediaIndependentOutOverflowOctets=mediaIndependentOutOverflowOctets, hostTimeHighCapacityEntry=hostTimeHighCapacityEntry, hcRmon1MIBCompliance=hcRmon1MIBCompliance, etherStatsHighCapacityPkts512to1023Octets=etherStatsHighCapacityPkts512to1023Octets, hostHighCapacityInOverflowOctets=hostHighCapacityInOverflowOctets, mediaIndependentInNUCastPkts=mediaIndependentInNUCastPkts, matrixSDHighCapacityOverflowPkts=matrixSDHighCapacityOverflowPkts, captureBufferHighCapacityEntry=captureBufferHighCapacityEntry, hostTopNHighCapacityRate=hostTopNHighCapacityRate, mediaIndependentEntry=mediaIndependentEntry, hcMediaIndependentCompliance=hcMediaIndependentCompliance, hostTopNHighCapacityAddress=hostTopNHighCapacityAddress, matrixSDHighCapacityEntry=matrixSDHighCapacityEntry, hostHighCapacityInOctets=hostHighCapacityInOctets, hostTopNHighCapacityTable=hostTopNHighCapacityTable, hostHighCapacityGroup=hostHighCapacityGroup, etherStatsHighCapacityTable=etherStatsHighCapacityTable, mediaIndependentTable=mediaIndependentTable, mediaIndependentInNUCastHighCapacityPkts=mediaIndependentInNUCastHighCapacityPkts, etherStatsHighCapacityPkts128to255Octets=etherStatsHighCapacityPkts128to255Octets, mediaIndependentOutputSpeed=mediaIndependentOutputSpeed, etherStatsHighCapacityPkts1024to1518Octets=etherStatsHighCapacityPkts1024to1518Octets, etherStatsHighCapacityPkts64Octets=etherStatsHighCapacityPkts64Octets, etherStatsHighCapacityOverflowPkts128to255Octets=etherStatsHighCapacityOverflowPkts128to255Octets, hostHighCapacityTable=hostHighCapacityTable, hcRMON=hcRMON, mediaIndependentInErrors=mediaIndependentInErrors, mediaIndependentInHighCapacityPkts=mediaIndependentInHighCapacityPkts, etherHistoryHighCapacityGroup=etherHistoryHighCapacityGroup, hostTopNHighCapacityOverflowRate=hostTopNHighCapacityOverflowRate, matrixDSHighCapacityOverflowOctets=matrixDSHighCapacityOverflowOctets, hostTimeHighCapacityInOctets=hostTimeHighCapacityInOctets, captureBufferPacketHighCapacityTime=captureBufferPacketHighCapacityTime, mediaIndependentOutNUCastHighCapacityPkts=mediaIndependentOutNUCastHighCapacityPkts, hostHighCapacityOutPkts=hostHighCapacityOutPkts, etherStatsHighCapacityOverflowPkts512to1023Octets=etherStatsHighCapacityOverflowPkts512to1023Octets, hostHighCapacityEntry=hostHighCapacityEntry, mediaIndependentDuplexChanges=mediaIndependentDuplexChanges, mediaIndependentDroppedFrames=mediaIndependentDroppedFrames, etherStatsHighCapacityOctets=etherStatsHighCapacityOctets, hostTimeHighCapacityOutOctets=hostTimeHighCapacityOutOctets, etherHistoryHighCapacityOverflowPkts=etherHistoryHighCapacityOverflowPkts, hostTimeHighCapacityOutPkts=hostTimeHighCapacityOutPkts, mediaIndependentInNUCastOverflowPkts=mediaIndependentInNUCastOverflowPkts, etherStatsHighCapacityOverflowOctets=etherStatsHighCapacityOverflowOctets, mediaIndependentDropEvents=mediaIndependentDropEvents, mediaIndependentStatus=mediaIndependentStatus, etherHistoryHighCapacityEntry=etherHistoryHighCapacityEntry, mediaIndependentOutNUCastOverflowPkts=mediaIndependentOutNUCastOverflowPkts, matrixDSHighCapacityEntry=matrixDSHighCapacityEntry, hostTimeHighCapacityOutOverflowOctets=hostTimeHighCapacityOutOverflowOctets, etherStatsHighCapacityOverflowPkts256to511Octets=etherStatsHighCapacityOverflowPkts256to511Octets, mediaIndependentInOverflowPkts=mediaIndependentInOverflowPkts, matrixDSHighCapacityOctets=matrixDSHighCapacityOctets, matrixDSHighCapacityPkts=matrixDSHighCapacityPkts, etherStatsHighCapacityPkts256to511Octets=etherStatsHighCapacityPkts256to511Octets, etherStatsHighCapacityOverflowPkts1024to1518Octets=etherStatsHighCapacityOverflowPkts1024to1518Octets, mediaIndependentDuplexLastChange=mediaIndependentDuplexLastChange, hostHighCapacityOutOverflowPkts=hostHighCapacityOutOverflowPkts, etherStatsHighCapacityGroup=etherStatsHighCapacityGroup, hostHighCapacityOutOctets=hostHighCapacityOutOctets, etherStatsHighCapacityOverflowPkts=etherStatsHighCapacityOverflowPkts, hostTimeHighCapacityTable=hostTimeHighCapacityTable, hostHighCapacityInOverflowPkts=hostHighCapacityInOverflowPkts, mediaIndependentOutOverflowPkts=mediaIndependentOutOverflowPkts, etherStatsHighCapacityPkts=etherStatsHighCapacityPkts, mediaIndependentGroup=mediaIndependentGroup, hostTopNHighCapacityBaseRate=hostTopNHighCapacityBaseRate, hcRmonMIBCompliances=hcRmonMIBCompliances, captureBufferHighCapacityGroup=captureBufferHighCapacityGroup, mediaIndependentStats=mediaIndependentStats, mediaIndependentIndex=mediaIndependentIndex, matrixDSHighCapacityTable=matrixDSHighCapacityTable, hostTimeHighCapacityInPkts=hostTimeHighCapacityInPkts, mediaIndependentOutPkts=mediaIndependentOutPkts, matrixSDHighCapacityTable=matrixSDHighCapacityTable, hostTopNHighCapacityGroup=hostTopNHighCapacityGroup, matrixSDHighCapacityOctets=matrixSDHighCapacityOctets, hostTopNHighCapacityEntry=hostTopNHighCapacityEntry, matrixSDHighCapacityOverflowOctets=matrixSDHighCapacityOverflowOctets, captureBufferHighCapacityTable=captureBufferHighCapacityTable, hostHighCapacityInPkts=hostHighCapacityInPkts, etherHistoryHighCapacityOctets=etherHistoryHighCapacityOctets)
