#
# PySNMP MIB module NETGEAR-ME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETGEAR-ME-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:09:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, ModuleIdentity, NotificationType, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, Counter32, IpAddress, MibIdentifier, Integer32, Gauge32, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "ModuleIdentity", "NotificationType", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises", "Counter32", "IpAddress", "MibIdentifier", "Integer32", "Gauge32", "Unsigned32", "ObjectIdentity")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wirelessProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
wirelessAccessPointDev = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1))
wirelessAPSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1))
wirelessAPConnectedStationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2))
wirelessAPIfTrafficGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3))
wirelessAPIfSettingsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4))
wirelessAPWirelessSettingsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5))
wirelessAPSecuritySettingsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6))
wirelessAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPMacAddr.setStatus('mandatory')
wirelessAPFWVer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPFWVer.setStatus('mandatory')
wirelessAPDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPDateTime.setStatus('mandatory')
wirelessAPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPUpTime.setStatus('mandatory')
wirelessAPResetNow = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-reset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPResetNow.setStatus('mandatory')
wirelessAPResetToFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-erase", 0), ("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPResetToFactoryDefault.setStatus('mandatory')
wirelessAPPassword = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPPassword.setStatus('mandatory')
wirelessAPClearLog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-clear", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPClearLog.setStatus('mandatory')
wirelessAPSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-save", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPSaveConfiguration.setStatus('mandatory')
snmpTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("V1", 0), ("V2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapVersion.setStatus('mandatory')
snmpTrapRcvIpType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("Uni-cast", 0), ("Broadcast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapRcvIpType.setStatus('mandatory')
snmpAPTrapRcvIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAPTrapRcvIpAddress.setStatus('mandatory')
snmpAPSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("Disable", 0), ("Enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAPSNMPEnable.setStatus('mandatory')
snmpAPCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAPCommunity.setStatus('mandatory')
snmpAPAccessRight = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("Read-Only", 0), ("Read-and-Write", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAPAccessRight.setStatus('mandatory')
snmpAPManagersType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("A-Specific-Station", 0), ("Any-Station", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAPManagersType.setStatus('mandatory')
snmpAPSpecificStationIp = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAPSpecificStationIp.setStatus('mandatory')
snmpAPTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("Disable", 0), ("Enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAPTrapEnable.setStatus('mandatory')
wirelessAPConnectedStationTableRefresh = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-refresh", 0), ("refresh", 1))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPConnectedStationTableRefresh.setStatus('mandatory')
wirelessAPConnectedStation = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 2))
wirelessAPConnectedStationTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 2, 1), )
if mibBuilder.loadTexts: wirelessAPConnectedStationTable.setStatus('mandatory')
wirelessAPConnectedStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 2, 1, 1), ).setIndexNames((0, "NETGEAR-ME-MIB", "wirelessAPConnectedStationMacAddr"))
if mibBuilder.loadTexts: wirelessAPConnectedStationEntry.setStatus('mandatory')
wirelessAPConnectedStationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 2, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPConnectedStationMacAddr.setStatus('mandatory')
wirelessAPConnectedStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("associated", 0), ("athenticating", 1), ("authenticated", 2), ("not-associated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPConnectedStationStatus.setStatus('mandatory')
wirelessAPControl = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPControl.setStatus('mandatory')
wirelessAPControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 4))
wirelessAPControlListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 4, 1), )
if mibBuilder.loadTexts: wirelessAPControlListTable.setStatus('mandatory')
wirelessAPControlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 4, 1, 1), ).setIndexNames((0, "NETGEAR-ME-MIB", "wirelessAPControlListMacAddr"))
if mibBuilder.loadTexts: wirelessAPControlListEntry.setStatus('mandatory')
wirelessAPControlListMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 4, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPControlListMacAddr.setStatus('mandatory')
wirelessAPCtlOperate = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 5))
wirelessAPAddCtlMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 5, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPAddCtlMacAddr.setStatus('mandatory')
wirelessAPDelCtlMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 2, 5, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPDelCtlMacAddr.setStatus('mandatory')
wirelessAPIfWiredTrafficGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1))
wirelessAPIfWlanTrafficGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2))
wirelessAPIfWiredTotalOctetsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredTotalOctetsIn.setStatus('mandatory')
wirelessAPIfWiredTotalOctetsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredTotalOctetsOut.setStatus('mandatory')
wirelessAPIfWiredPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredPacketsIn.setStatus('mandatory')
wirelessAPIfWiredPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredPacketsOut.setStatus('mandatory')
wirelessAPIfWiredThroughputIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredThroughputIn.setStatus('mandatory')
wirelessAPIfWiredThroughputOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredThroughputOut.setStatus('mandatory')
wirelessAPIfWiredErrorsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredErrorsIn.setStatus('mandatory')
wirelessAPIfWiredErrorsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWiredErrorsOut.setStatus('mandatory')
wirelessAPIfWiredTrafficResetCounter = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPIfWiredTrafficResetCounter.setStatus('mandatory')
wirelessAPIfWLANTotalOctetsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANTotalOctetsIn.setStatus('mandatory')
wirelessAPIfWLANTotalOctetsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANTotalOctetsOut.setStatus('mandatory')
wirelessAPIfWLANUnicastPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANUnicastPacketsIn.setStatus('mandatory')
wirelessAPIfWLANUnicastPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANUnicastPacketsOut.setStatus('mandatory')
wirelessAPIfWLANBroadcastPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANBroadcastPacketsIn.setStatus('mandatory')
wirelessAPIfWLANBroadcastPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANBroadcastPacketsOut.setStatus('mandatory')
wirelessAPIfWLANMulticastPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANMulticastPacketsIn.setStatus('mandatory')
wirelessAPIfWLANMulticastPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANMulticastPacketsOut.setStatus('mandatory')
wirelessAPIfWLANThroughputIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANThroughputIn.setStatus('mandatory')
wirelessAPIfWLANThroughputOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANThroughputOut.setStatus('mandatory')
wirelessAPIfWLANPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANPacketsIn.setStatus('mandatory')
wirelessAPIfWLANPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPIfWLANPacketsOut.setStatus('mandatory')
wirelessAPIfWLANTrafficResetCounter = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPIfWLANTrafficResetCounter.setStatus('mandatory')
wirelessAPDHCPClientObtainIPchoice = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("automatic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPDHCPClientObtainIPchoice.setStatus('mandatory')
wirelessAPDHCPClientIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPDHCPClientIPaddr.setStatus('mandatory')
wirelessAPDHCPClientIPsubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPDHCPClientIPsubnetMask.setStatus('mandatory')
wirelessAPDHCPClientGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPDHCPClientGateway.setStatus('mandatory')
wirelessAPDHCPClientPriDNS = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPDHCPClientPriDNS.setStatus('mandatory')
wirelessAPDHCPClientSecDNS = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessAPDHCPClientSecDNS.setStatus('mandatory')
wirelessAPDHCPClientStaticIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPDHCPClientStaticIPaddr.setStatus('mandatory')
wirelessAPDHCPClientStaticIPsubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPDHCPClientStaticIPsubnetMask.setStatus('mandatory')
wirelessAPDHCPClientStaticGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPDHCPClientStaticGateway.setStatus('mandatory')
wirelessAPDHCPClientStaticPriDNS = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPDHCPClientStaticPriDNS.setStatus('mandatory')
wirelessAPDHCPClientStaticSecDNS = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPDHCPClientStaticSecDNS.setStatus('mandatory')
wirelessAPName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPName.setStatus('mandatory')
wirelessAPWINSchoice = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPWINSchoice.setStatus('mandatory')
wirelessAPWINSServerName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPWINSServerName.setStatus('mandatory')
wirelessAPCountryDomain = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("africa", 1), ("asia", 2), ("australia", 3), ("canada", 4), ("europe", 5), ("france", 6), ("israel", 7), ("japan", 8), ("mexico", 9), ("southAmerica", 10), ("usa", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPCountryDomain.setStatus('mandatory')
wirelessAPChannelNo = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)).clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPChannelNo.setStatus('mandatory')
wirelessAPSSID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPSSID.setStatus('mandatory')
wirelessAPPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPPassphrase.setStatus('mandatory')
wirelessAPGenerateKeysEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPGenerateKeysEnabled.setStatus('mandatory')
wirelessAPKeysSet = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 9))
wirelessAPKeysSetTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 9, 1), )
if mibBuilder.loadTexts: wirelessAPKeysSetTable.setStatus('mandatory')
wirelessAPKeysSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 9, 1, 1), ).setIndexNames((0, "NETGEAR-ME-MIB", "wirelessAPKeysSetEnabled"))
if mibBuilder.loadTexts: wirelessAPKeysSetEntry.setStatus('mandatory')
wirelessAPKeysSetEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPKeysSetEnabled.setStatus('mandatory')
wirelessAPKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPKeys.setStatus('mandatory')
wirelessAPBasicRateChoice = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("fixed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPBasicRateChoice.setStatus('mandatory')
wirelessAPFixedRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 11))
wirelessAPFixedRate1 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneM-disabled", 0), ("oneM-enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPFixedRate1.setStatus('mandatory')
wirelessAPFixedRate2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("twoM-disabled", 0), ("twoM-enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPFixedRate2.setStatus('mandatory')
wirelessAPFixedRate5_5 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fiveDotFiveM-disabled", 0), ("fiveDotFiveM-enabled", 1)))).setLabel("wirelessAPFixedRate5-5").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPFixedRate5_5.setStatus('mandatory')
wirelessAPFixedRate11 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("elevenM-disabled", 0), ("elevenM-enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPFixedRate11.setStatus('mandatory')
wirelessAPRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRTSThreshold.setStatus('mandatory')
wirelessAPFragmentationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPFragmentationThreshold.setStatus('mandatory')
wirelessAPBeaconPeriod = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPBeaconPeriod.setStatus('mandatory')
wirelessAPShortPreambleOptionImplemented = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("short", 0), ("long", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPShortPreambleOptionImplemented.setStatus('mandatory')
wirelessAPAntennaSelection = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("diversity", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPAntennaSelection.setStatus('mandatory')
wirelessAPMaximumTransmitPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("eighteendbm", 1), ("seventeendbm", 2), ("fifteendbm", 3), ("thirteendbm", 4), ("sevendbm", 5), ("zerodbm", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPMaximumTransmitPowerLevel.setStatus('mandatory')
wirelessAPOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eight0twoDot1xAP", 0), ("noneight0twoDot1xAP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPOperatingMode.setStatus('mandatory')
wirelessAPSSIDEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPSSIDEnabled.setStatus('mandatory')
wirelessAP802dot1xSecurityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enAbled", 0), ("disAbled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAP802dot1xSecurityEnabled.setStatus('mandatory')
wirelessAPEAPauthType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NotAllowEAP-MD5", 0), ("AllowEAP-MD5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPEAPauthType.setStatus('mandatory')
wirelessAPKeyExchange = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPKeyExchange.setStatus('mandatory')
wirelessAPKeyExchangeKeylife = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPKeyExchangeKeylife.setStatus('mandatory')
wirelessAPRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadiusServer.setStatus('mandatory')
wirelessAPRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadiusPort.setStatus('mandatory')
wirelessAPSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPSharedKey.setStatus('mandatory')
wirelessAPRadiusServer2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadiusServer2.setStatus('mandatory')
wirelessAPRadAccountPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadAccountPort.setStatus('mandatory')
wirelessAPRadAccountEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadAccountEnable.setStatus('mandatory')
wirelessAPMacAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPMacAuthEnable.setStatus('mandatory')
wirelessAPRadAccountUpdateEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disAbled", 0), ("enAbled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadAccountUpdateEnable.setStatus('mandatory')
wirelessAPRadAccountUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadAccountUpdatePeriod.setStatus('mandatory')
wirelessAPRadAccountIdlePeriod = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPRadAccountIdlePeriod.setStatus('mandatory')
wirelessTIOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 3, 2))).clone(namedValues=NamedValues(("WirelessAccessPoint", 0), ("Point-to-PointBridge", 4), ("Point-to-Multi-PointBridge", 5), ("ClientAccessPoint", 3), ("RepeaterAccessPoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessTIOperateMode.setStatus('mandatory')
wirelessTIDstMac = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 26), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessTIDstMac.setStatus('mandatory')
wirelessTIIsolation = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessTIIsolation.setStatus('mandatory')
wirelessTIEnable80211d = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessTIEnable80211d.setStatus('mandatory')
wirelessAPSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 1, 6, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("OPEN-DISABLE-MODE", 0), ("OPEN-64WEP-MODE", 1), ("OPEN-128WEP-MODE", 2), ("SHARED-64WEP-MODE", 3), ("SHARED-128WEP-MODE", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPSecurityMode.setStatus('mandatory')
mibBuilder.exportSymbols("NETGEAR-ME-MIB", wirelessAPFixedRate=wirelessAPFixedRate, wirelessAPIfWiredTrafficGroup=wirelessAPIfWiredTrafficGroup, wirelessAPFixedRate2=wirelessAPFixedRate2, wirelessAPRadiusServer2=wirelessAPRadiusServer2, wirelessAPControlListMacAddr=wirelessAPControlListMacAddr, wirelessAPIfWiredTrafficResetCounter=wirelessAPIfWiredTrafficResetCounter, wirelessAPSaveConfiguration=wirelessAPSaveConfiguration, wirelessAPChannelNo=wirelessAPChannelNo, wirelessAPEAPauthType=wirelessAPEAPauthType, wirelessAPDHCPClientSecDNS=wirelessAPDHCPClientSecDNS, wirelessAPIfWiredPacketsOut=wirelessAPIfWiredPacketsOut, wirelessAPIfWLANMulticastPacketsIn=wirelessAPIfWLANMulticastPacketsIn, wirelessAPIfWiredErrorsIn=wirelessAPIfWiredErrorsIn, wirelessAPSystemGroup=wirelessAPSystemGroup, snmpAPManagersType=snmpAPManagersType, wirelessAPIfWLANMulticastPacketsOut=wirelessAPIfWLANMulticastPacketsOut, wirelessTIEnable80211d=wirelessTIEnable80211d, wirelessAPDHCPClientObtainIPchoice=wirelessAPDHCPClientObtainIPchoice, wirelessAPKeysSet=wirelessAPKeysSet, wirelessAPIfWLANThroughputOut=wirelessAPIfWLANThroughputOut, wirelessAPCtlOperate=wirelessAPCtlOperate, wirelessAPIfWlanTrafficGroup=wirelessAPIfWlanTrafficGroup, wirelessAPIfWLANThroughputIn=wirelessAPIfWLANThroughputIn, wirelessAPConnectedStationTable=wirelessAPConnectedStationTable, snmpTrapVersion=snmpTrapVersion, snmpAPSNMPEnable=snmpAPSNMPEnable, wirelessAPIfWiredThroughputOut=wirelessAPIfWiredThroughputOut, wirelessAPConnectedStationStatus=wirelessAPConnectedStationStatus, wirelessAPAddCtlMacAddr=wirelessAPAddCtlMacAddr, wirelessAPFixedRate5_5=wirelessAPFixedRate5_5, wirelessAPConnectedStationMacAddr=wirelessAPConnectedStationMacAddr, wirelessAPPassword=wirelessAPPassword, wirelessAPConnectedStation=wirelessAPConnectedStation, wirelessAPIfWLANUnicastPacketsIn=wirelessAPIfWLANUnicastPacketsIn, snmpAPCommunity=snmpAPCommunity, wirelessAPIfTrafficGroup=wirelessAPIfTrafficGroup, wirelessAPMacAuthEnable=wirelessAPMacAuthEnable, wirelessAPIfSettingsGroup=wirelessAPIfSettingsGroup, snmpAPTrapEnable=snmpAPTrapEnable, wirelessAPAntennaSelection=wirelessAPAntennaSelection, wirelessAPMacAddr=wirelessAPMacAddr, wirelessAPIfWLANBroadcastPacketsIn=wirelessAPIfWLANBroadcastPacketsIn, wirelessAPIfWiredTotalOctetsIn=wirelessAPIfWiredTotalOctetsIn, wirelessAPBasicRateChoice=wirelessAPBasicRateChoice, wirelessAPConnectedStationGroup=wirelessAPConnectedStationGroup, wirelessAPKeys=wirelessAPKeys, wirelessAPResetNow=wirelessAPResetNow, wirelessAPDHCPClientPriDNS=wirelessAPDHCPClientPriDNS, wirelessAPRTSThreshold=wirelessAPRTSThreshold, wirelessAPPassphrase=wirelessAPPassphrase, wirelessAPIfWLANTotalOctetsOut=wirelessAPIfWLANTotalOctetsOut, wirelessAPRadAccountUpdatePeriod=wirelessAPRadAccountUpdatePeriod, netgear=netgear, wirelessAPKeyExchangeKeylife=wirelessAPKeyExchangeKeylife, wirelessAPWINSServerName=wirelessAPWINSServerName, wirelessAPRadAccountPort=wirelessAPRadAccountPort, wirelessAPSecuritySettingsGroup=wirelessAPSecuritySettingsGroup, wirelessAPControlListEntry=wirelessAPControlListEntry, wirelessTIOperateMode=wirelessTIOperateMode, wirelessAPFWVer=wirelessAPFWVer, wirelessAPSSIDEnabled=wirelessAPSSIDEnabled, wirelessAPMaximumTransmitPowerLevel=wirelessAPMaximumTransmitPowerLevel, snmpTrapRcvIpType=snmpTrapRcvIpType, wirelessAPWirelessSettingsGroup=wirelessAPWirelessSettingsGroup, wirelessAPUpTime=wirelessAPUpTime, snmpAPAccessRight=snmpAPAccessRight, wirelessAPIfWLANTotalOctetsIn=wirelessAPIfWLANTotalOctetsIn, wirelessAPSSID=wirelessAPSSID, wirelessAPKeysSetEntry=wirelessAPKeysSetEntry, wirelessAPName=wirelessAPName, wirelessAPSharedKey=wirelessAPSharedKey, wirelessAPIfWLANBroadcastPacketsOut=wirelessAPIfWLANBroadcastPacketsOut, wirelessAPOperatingMode=wirelessAPOperatingMode, wirelessAPWINSchoice=wirelessAPWINSchoice, wirelessAPKeysSetTable=wirelessAPKeysSetTable, wirelessAPDHCPClientStaticSecDNS=wirelessAPDHCPClientStaticSecDNS, wirelessAPResetToFactoryDefault=wirelessAPResetToFactoryDefault, wirelessAPRadiusPort=wirelessAPRadiusPort, wirelessAPFragmentationThreshold=wirelessAPFragmentationThreshold, wirelessAPRadAccountIdlePeriod=wirelessAPRadAccountIdlePeriod, wirelessAPShortPreambleOptionImplemented=wirelessAPShortPreambleOptionImplemented, wirelessAPKeyExchange=wirelessAPKeyExchange, wirelessAPIfWLANUnicastPacketsOut=wirelessAPIfWLANUnicastPacketsOut, wirelessAPDHCPClientStaticIPaddr=wirelessAPDHCPClientStaticIPaddr, wirelessAPControlListTable=wirelessAPControlListTable, wirelessAPDHCPClientStaticGateway=wirelessAPDHCPClientStaticGateway, wirelessTIIsolation=wirelessTIIsolation, wirelessAPFixedRate11=wirelessAPFixedRate11, wirelessAPClearLog=wirelessAPClearLog, wirelessAPIfWLANTrafficResetCounter=wirelessAPIfWLANTrafficResetCounter, wirelessAPRadAccountUpdateEnable=wirelessAPRadAccountUpdateEnable, wirelessAPConnectedStationTableRefresh=wirelessAPConnectedStationTableRefresh, wirelessAPIfWiredPacketsIn=wirelessAPIfWiredPacketsIn, wirelessAPFixedRate1=wirelessAPFixedRate1, wirelessAPKeysSetEnabled=wirelessAPKeysSetEnabled, wirelessAPBeaconPeriod=wirelessAPBeaconPeriod, wirelessAPDateTime=wirelessAPDateTime, wirelessAPDHCPClientGateway=wirelessAPDHCPClientGateway, wirelessAPIfWiredErrorsOut=wirelessAPIfWiredErrorsOut, wirelessAPDHCPClientIPaddr=wirelessAPDHCPClientIPaddr, wirelessAPConnectedStationEntry=wirelessAPConnectedStationEntry, wirelessTIDstMac=wirelessTIDstMac, wirelessAPDHCPClientStaticPriDNS=wirelessAPDHCPClientStaticPriDNS, wirelessAPIfWiredThroughputIn=wirelessAPIfWiredThroughputIn, snmpAPTrapRcvIpAddress=snmpAPTrapRcvIpAddress, wirelessAPGenerateKeysEnabled=wirelessAPGenerateKeysEnabled, wirelessAPSecurityMode=wirelessAPSecurityMode, wirelessAPDelCtlMacAddr=wirelessAPDelCtlMacAddr, wirelessProducts=wirelessProducts, wirelessAPDHCPClientIPsubnetMask=wirelessAPDHCPClientIPsubnetMask, wirelessAP802dot1xSecurityEnabled=wirelessAP802dot1xSecurityEnabled, wirelessAccessPointDev=wirelessAccessPointDev, wirelessAPControl=wirelessAPControl, wirelessAPIfWiredTotalOctetsOut=wirelessAPIfWiredTotalOctetsOut, wirelessAPIfWLANPacketsOut=wirelessAPIfWLANPacketsOut, wirelessAPRadAccountEnable=wirelessAPRadAccountEnable, wirelessAPIfWLANPacketsIn=wirelessAPIfWLANPacketsIn, snmpAPSpecificStationIp=snmpAPSpecificStationIp, wirelessAPCountryDomain=wirelessAPCountryDomain, wirelessAPControlList=wirelessAPControlList, wirelessAPDHCPClientStaticIPsubnetMask=wirelessAPDHCPClientStaticIPsubnetMask, wirelessAPRadiusServer=wirelessAPRadiusServer)
