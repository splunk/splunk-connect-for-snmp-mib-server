#
# PySNMP MIB module HUAWEI-BRAS-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BRAS-RADIUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:31:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hwBRASMib, = mibBuilder.importSymbols("HUAWEI-MIB", "hwBRASMib")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, ModuleCompliance, iso, NotificationGroup, TimeTicks, ModuleIdentity, ObjectIdentity, Unsigned32, IpAddress, Counter64, Integer32, Counter32, MibIdentifier, ObjectGroup = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "ModuleCompliance", "iso", "NotificationGroup", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "IpAddress", "Counter64", "Integer32", "Counter32", "MibIdentifier", "ObjectGroup")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
hwBRASRadius = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15))
if mibBuilder.loadTexts: hwBRASRadius.setLastUpdated('200504181334Z')
if mibBuilder.loadTexts: hwBRASRadius.setOrganization(' NanJing Institute,Huawei Technologies Co.,Ltd. HuiHong Mansion,No.91 BaiXia Rd. NanJing, P.R. of China Zipcode:210001 Http://www.huawei.com E-mail:support@huawei.com ')
hwRadiusGroupObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1))
hwRadiusGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1), )
if mibBuilder.loadTexts: hwRadiusGroupTable.setStatus('current')
hwRadiusGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupName"))
if mibBuilder.loadTexts: hwRadiusGroupEntry.setStatus('current')
hwRadiusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusGroupName.setStatus('current')
hwRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerKey.setStatus('current')
hwRadiusServerProtType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radius", 1), ("radiusPlus10", 2), ("radiusPlus11", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerProtType.setStatus('current')
hwRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerRetransmit.setStatus('current')
hwRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerTimeout.setStatus('current')
hwRadiusServerAttrTran = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerAttrTran.setStatus('current')
hwRadiusPacketUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("byte", 1), ("kbyte", 2), ("mbyte", 3), ("gbyte", 4))).clone('byte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusPacketUnit.setStatus('current')
hwRadiusDomainInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("includingDomain", 1), ("notIncludingDomain", 2), ("original", 3))).clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusDomainInclude.setStatus('current')
hwRadiusClassASCar = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClassASCar.setStatus('current')
hwRadiusAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("masterbackup", 1), ("shareloading", 2))).clone('masterbackup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAlgorithm.setStatus('current')
hwRadiusServerNasPortFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerNasPortFmt.setStatus('current')
hwRadiusGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadiusGroupRowStatus.setStatus('current')
hwRadiusServerSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSourceInterface.setStatus('current')
hwRadiusServerNasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerNasIpAddress.setStatus('current')
hwRadiusServerCallingStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerCallingStationId.setStatus('current')
hwRadiusServerCallingStationIdDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerCallingStationIdDelimiter.setStatus('current')
hwRadiusAttributeNoExistPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAttributeNoExistPolicy.setStatus('current')
hwRadiusServerKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerKeyType.setStatus('current')
hwRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2), )
if mibBuilder.loadTexts: hwRadiusServerTable.setStatus('current')
hwRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupName"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerIndex"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerType"))
if mibBuilder.loadTexts: hwRadiusServerEntry.setStatus('current')
hwRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerIndex.setStatus('current')
hwRadiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auth", 1), ("acct", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerType.setStatus('current')
hwRadiusServerVRF = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerVRF.setStatus('current')
hwRadiusServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerIP.setStatus('current')
hwRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerPort.setStatus('current')
hwRadiusServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerWeight.setStatus('current')
hwRadiusServerSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSecretKey.setStatus('current')
hwRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadiusServerRowStatus.setStatus('current')
hwRadiusServerPktSendNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerPktSendNumber.setStatus('current')
hwRadiusServerPktSendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerPktSendInterval.setStatus('current')
hwRadiusServerSourceInterfaceEachServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSourceInterfaceEachServer.setStatus('current')
hwRadiusServerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerResponses.setStatus('current')
hwRadiusServerSecretKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusServerSecretKeyType.setStatus('current')
hwRadiusServerDeadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerDeadCount.setStatus('current')
hwRadiusServerDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerDeadTime.setStatus('current')
hwRadiusServerDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusServerDeadInterval.setStatus('current')
hwRadiusClientTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3), )
if mibBuilder.loadTexts: hwRadiusClientTable.setStatus('current')
hwRadiusClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientVrf"))
if mibBuilder.loadTexts: hwRadiusClientEntry.setStatus('current')
hwRadiusClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusClientIP.setStatus('current')
hwRadiusClientVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusClientVrf.setStatus('current')
hwRadiusClientKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClientKey.setStatus('current')
hwRadiusClientGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClientGroupName.setStatus('current')
hwRadiusClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadiusClientRowStatus.setStatus('current')
hwRadiusClientKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusClientKeyType.setStatus('current')
hwRadiusAuthorServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4), )
if mibBuilder.loadTexts: hwRadiusAuthorServerTable.setStatus('current')
hwRadiusAuthorServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerVrf"))
if mibBuilder.loadTexts: hwRadiusAuthorServerEntry.setStatus('current')
hwRadiusAuthorServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusAuthorServerIP.setStatus('current')
hwRadiusAuthorServerVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusAuthorServerVrf.setStatus('current')
hwRadiusAuthorServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerKey.setStatus('current')
hwRadiusAuthorServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerGroupName.setStatus('current')
hwRadiusAuthorServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerRowStatus.setStatus('current')
hwRadiusAuthorServerKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("simple", 0), ("cipher", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusAuthorServerKeyType.setStatus('current')
hwRadiusSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5))
hwRadiusSettingEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1))
hwEnableSourcePortsExtended = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEnableSourcePortsExtended.setStatus('current')
hwSourcePortsExtendedStartPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 55535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSourcePortsExtendedStartPort.setStatus('current')
hwSourcePortsExtendedPortNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSourcePortsExtendedPortNum.setStatus('current')
hwRadiusResetStatAll = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusResetStatAll.setStatus('current')
hwResetRadiusAttrCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwResetRadiusAttrCount.setStatus('current')
hwRadiusTotalDeadCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusTotalDeadCount.setStatus('current')
hwRadiusTotalDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusTotalDeadTime.setStatus('current')
hwRadiusTotalDeadInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadiusTotalDeadInterval.setStatus('current')
hwRadiusStatAuthenIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6), )
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Table.setStatus('current')
hwRadiusStatAuthenIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthenIpv4ServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthenIpv4Vrf"))
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Entry.setStatus('current')
hwRadiusStatAuthenIpv4ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4ServerIP.setStatus('current')
hwRadiusStatAuthenIpv4Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Vrf.setStatus('current')
hwRadiusStatAuthenIpv4Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Requests.setStatus('current')
hwRadiusStatAuthenIpv4Accepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Accepts.setStatus('current')
hwRadiusStatAuthenIpv4Rejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Rejects.setStatus('current')
hwRadiusStatAuthenIpv4Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Retransmissions.setStatus('current')
hwRadiusStatAuthenIpv4Challenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Challenges.setStatus('current')
hwRadiusStatAuthenIpv4MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4MalformedResponses.setStatus('current')
hwRadiusStatAuthenIpv4BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4BadAuthenticators.setStatus('current')
hwRadiusStatAuthenIpv4PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4PendingRequests.setStatus('current')
hwRadiusStatAuthenIpv4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4Timeouts.setStatus('current')
hwRadiusStatAuthenIpv4UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4UnknownTypes.setStatus('current')
hwRadiusStatAuthenIpv4DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv4DroppedPackets.setStatus('current')
hwRadiusStatAcctIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7), )
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Table.setStatus('current')
hwRadiusStatAcctIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAcctIpv4ServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAcctIpv4Vrf"))
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Entry.setStatus('current')
hwRadiusStatAcctIpv4ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4ServerIP.setStatus('current')
hwRadiusStatAcctIpv4Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Vrf.setStatus('current')
hwRadiusStatAcctIpv4Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Requests.setStatus('current')
hwRadiusStatAcctIpv4Responses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Responses.setStatus('current')
hwRadiusStatAcctIpv4Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Retransmissions.setStatus('current')
hwRadiusStatAcctIpv4MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4MalformedResponses.setStatus('current')
hwRadiusStatAcctIpv4BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4BadAuthenticators.setStatus('current')
hwRadiusStatAcctIpv4PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4PendingRequests.setStatus('current')
hwRadiusStatAcctIpv4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4Timeouts.setStatus('current')
hwRadiusStatAcctIpv4UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4UnknownTypes.setStatus('current')
hwRadiusStatAcctIpv4DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 7, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv4DroppedPackets.setStatus('current')
hwRadiusStatAuthorIpv4Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8), )
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Table.setStatus('current')
hwRadiusStatAuthorIpv4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthorIpv4ServerType"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthorIpv4ServerIP"), (0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthorIpv4Vrf"))
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Entry.setStatus('current')
hwRadiusStatAuthorIpv4ServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4ServerType.setStatus('current')
hwRadiusStatAuthorIpv4ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4ServerIP.setStatus('current')
hwRadiusStatAuthorIpv4Vrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Vrf.setStatus('current')
hwRadiusStatAuthorIpv4Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Requests.setStatus('current')
hwRadiusStatAuthorIpv4Accepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Accepts.setStatus('current')
hwRadiusStatAuthorIpv4Rejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Rejects.setStatus('current')
hwRadiusStatAuthorIpv4BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4BadAuthenticators.setStatus('current')
hwRadiusStatAuthorIpv4Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Retransmissions.setStatus('current')
hwRadiusStatAuthorIpv4MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4MalformedResponses.setStatus('current')
hwRadiusStatAuthorIpv4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4Timeouts.setStatus('current')
hwRadiusStatAuthorIpv4UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4UnknownTypes.setStatus('current')
hwRadiusStatAuthorIpv4DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthorIpv4DroppedPackets.setStatus('current')
hwRadiusStatAuthenIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9), )
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Table.setStatus('current')
hwRadiusStatAuthenIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAuthenIpv6ServerIP"))
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Entry.setStatus('current')
hwRadiusStatAuthenIpv6ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6ServerIP.setStatus('current')
hwRadiusStatAuthenIpv6Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Requests.setStatus('current')
hwRadiusStatAuthenIpv6Accepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Accepts.setStatus('current')
hwRadiusStatAuthenIpv6Rejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Rejects.setStatus('current')
hwRadiusStatAuthenIpv6Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Retransmissions.setStatus('current')
hwRadiusStatAuthenIpv6Challenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Challenges.setStatus('current')
hwRadiusStatAuthenIpv6MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6MalformedResponses.setStatus('current')
hwRadiusStatAuthenIpv6BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6BadAuthenticators.setStatus('current')
hwRadiusStatAuthenIpv6PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6PendingRequests.setStatus('current')
hwRadiusStatAuthenIpv6Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6Timeouts.setStatus('current')
hwRadiusStatAuthenIpv6UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6UnknownTypes.setStatus('current')
hwRadiusStatAuthenIpv6DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAuthenIpv6DroppedPackets.setStatus('current')
hwRadiusStatAcctIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10), )
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Table.setStatus('current')
hwRadiusStatAcctIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwRadiusStatAcctIpv6ServerIP"))
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Entry.setStatus('current')
hwRadiusStatAcctIpv6ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6ServerIP.setStatus('current')
hwRadiusStatAcctIpv6Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Requests.setStatus('current')
hwRadiusStatAcctIpv6Responses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Responses.setStatus('current')
hwRadiusStatAcctIpv6Retransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Retransmissions.setStatus('current')
hwRadiusStatAcctIpv6MalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6MalformedResponses.setStatus('current')
hwRadiusStatAcctIpv6BadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6BadAuthenticators.setStatus('current')
hwRadiusStatAcctIpv6PendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6PendingRequests.setStatus('current')
hwRadiusStatAcctIpv6Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6Timeouts.setStatus('current')
hwRadiusStatAcctIpv6UnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6UnknownTypes.setStatus('current')
hwRadiusStatAcctIpv6DroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadiusStatAcctIpv6DroppedPackets.setStatus('current')
hwRadiusAttrCountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11), )
if mibBuilder.loadTexts: hwRadiusAttrCountTable.setStatus('current')
hwRadiusAttrCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1), ).setIndexNames((0, "HUAWEI-BRAS-RADIUS-MIB", "hwAttributeName"))
if mibBuilder.loadTexts: hwRadiusAttrCountEntry.setStatus('current')
hwAttributeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAttributeName.setStatus('current')
hwAuthRequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthRequestPacketNum.setStatus('current')
hwAuthAcceptPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthAcceptPacketNum.setStatus('current')
hwAuthRejectPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthRejectPacketNum.setStatus('current')
hwAcctRequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcctRequestPacketNum.setStatus('current')
hwAcctResponsePacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAcctResponsePacketNum.setStatus('current')
hwCOARequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCOARequestPacketNum.setStatus('current')
hwCOAAcknowledgePacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCOAAcknowledgePacketNum.setStatus('current')
hwDMRequestPacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDMRequestPacketNum.setStatus('current')
hwDMAcknowledgePacketNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDMAcknowledgePacketNum.setStatus('current')
hwRadiusMIBTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2))
hwRadiusTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 1))
hwStateChangeServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStateChangeServerIp.setStatus('current')
hwStateChangeServerVrf = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStateChangeServerVrf.setStatus('current')
hwRadiusTrapsDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2))
hwRadiusServerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1))
hwRadiusAuthServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 1)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAuthServerUp.setStatus('current')
hwRadiusAuthServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 2)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAuthServerDown.setStatus('current')
hwRadiusAcctServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 3)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAcctServerUp.setStatus('current')
hwRadiusAcctServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 2, 2, 1, 4)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if mibBuilder.loadTexts: hwRadiusAcctServerDown.setStatus('current')
hwRadiusConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3))
hwRadiusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 1))
hwRadiusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 1, 1)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusSettingGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusTrapObjectGroup"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusTrapsDefineGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusCompliance = hwRadiusCompliance.setStatus('current')
hwRadiusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2))
hwRadiusGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 1)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupName"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerProtType"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerRetransmit"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerTimeout"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerAttrTran"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusPacketUnit"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusDomainInclude"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClassASCar"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAlgorithm"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerNasPortFmt"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusGroupRowStatus"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSourceInterface"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerNasIpAddress"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerCallingStationId"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerCallingStationIdDelimiter"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAttributeNoExistPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusGroupGroup = hwRadiusGroupGroup.setStatus('current')
hwRadiusServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 2)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerIndex"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerType"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerVRF"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerIP"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerPort"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerWeight"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSecretKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerRowStatus"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerPktSendNumber"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerPktSendInterval"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSourceInterfaceEachServer"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerResponses"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerSecretKeyType"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerDeadCount"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerDeadTime"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusServerDeadInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusServerGroup = hwRadiusServerGroup.setStatus('current')
hwRadiusClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 3)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientIP"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientVrf"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientGroupName"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusClientRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusClientGroup = hwRadiusClientGroup.setStatus('current')
hwRadiusAuthorServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 4)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerIP"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerVrf"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerKey"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerGroupName"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthorServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusAuthorServerGroup = hwRadiusAuthorServerGroup.setStatus('current')
hwRadiusSettingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 5)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwEnableSourcePortsExtended"), ("HUAWEI-BRAS-RADIUS-MIB", "hwSourcePortsExtendedStartPort"), ("HUAWEI-BRAS-RADIUS-MIB", "hwSourcePortsExtendedPortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusSettingGroup = hwRadiusSettingGroup.setStatus('current')
hwRadiusTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 6)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerIp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwStateChangeServerVrf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusTrapObjectGroup = hwRadiusTrapObjectGroup.setStatus('current')
hwRadiusTrapsDefineGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 15, 3, 2, 7)).setObjects(("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthServerUp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAuthServerDown"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAcctServerUp"), ("HUAWEI-BRAS-RADIUS-MIB", "hwRadiusAcctServerDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadiusTrapsDefineGroup = hwRadiusTrapsDefineGroup.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-BRAS-RADIUS-MIB", hwRadiusResetStatAll=hwRadiusResetStatAll, hwRadiusStatAuthenIpv4BadAuthenticators=hwRadiusStatAuthenIpv4BadAuthenticators, hwRadiusAttrCountTable=hwRadiusAttrCountTable, hwAcctRequestPacketNum=hwAcctRequestPacketNum, hwAttributeName=hwAttributeName, hwRadiusStatAcctIpv4Responses=hwRadiusStatAcctIpv4Responses, hwRadiusGroupName=hwRadiusGroupName, hwRadiusGroupRowStatus=hwRadiusGroupRowStatus, hwRadiusAuthorServerVrf=hwRadiusAuthorServerVrf, hwBRASRadius=hwBRASRadius, hwRadiusStatAuthenIpv4Retransmissions=hwRadiusStatAuthenIpv4Retransmissions, hwRadiusStatAuthorIpv4Table=hwRadiusStatAuthorIpv4Table, hwRadiusServerSourceInterfaceEachServer=hwRadiusServerSourceInterfaceEachServer, hwRadiusStatAuthenIpv4Challenges=hwRadiusStatAuthenIpv4Challenges, hwRadiusStatAcctIpv4Vrf=hwRadiusStatAcctIpv4Vrf, hwRadiusServerSecretKeyType=hwRadiusServerSecretKeyType, hwRadiusStatAuthorIpv4Vrf=hwRadiusStatAuthorIpv4Vrf, hwRadiusServerWeight=hwRadiusServerWeight, hwRadiusTotalDeadTime=hwRadiusTotalDeadTime, hwRadiusStatAcctIpv6Entry=hwRadiusStatAcctIpv6Entry, hwRadiusServerRetransmit=hwRadiusServerRetransmit, hwRadiusStatAcctIpv4BadAuthenticators=hwRadiusStatAcctIpv4BadAuthenticators, hwSourcePortsExtendedStartPort=hwSourcePortsExtendedStartPort, hwRadiusAlgorithm=hwRadiusAlgorithm, hwRadiusServerSecretKey=hwRadiusServerSecretKey, hwRadiusServerResponses=hwRadiusServerResponses, hwRadiusStatAcctIpv6ServerIP=hwRadiusStatAcctIpv6ServerIP, hwRadiusClientVrf=hwRadiusClientVrf, hwRadiusServerIP=hwRadiusServerIP, hwRadiusStatAuthenIpv6Accepts=hwRadiusStatAuthenIpv6Accepts, hwRadiusStatAuthenIpv6ServerIP=hwRadiusStatAuthenIpv6ServerIP, hwDMRequestPacketNum=hwDMRequestPacketNum, hwRadiusServerPort=hwRadiusServerPort, hwRadiusStatAuthenIpv6Challenges=hwRadiusStatAuthenIpv6Challenges, hwRadiusClientGroup=hwRadiusClientGroup, hwRadiusServerCallingStationId=hwRadiusServerCallingStationId, hwRadiusStatAuthorIpv4ServerIP=hwRadiusStatAuthorIpv4ServerIP, hwResetRadiusAttrCount=hwResetRadiusAttrCount, hwRadiusAuthorServerGroupName=hwRadiusAuthorServerGroupName, hwRadiusStatAuthorIpv4Requests=hwRadiusStatAuthorIpv4Requests, hwRadiusStatAuthorIpv4Rejects=hwRadiusStatAuthorIpv4Rejects, hwRadiusServerPktSendNumber=hwRadiusServerPktSendNumber, hwSourcePortsExtendedPortNum=hwSourcePortsExtendedPortNum, hwRadiusClientIP=hwRadiusClientIP, hwRadiusStatAcctIpv4Timeouts=hwRadiusStatAcctIpv4Timeouts, hwAuthRequestPacketNum=hwAuthRequestPacketNum, hwRadiusStatAuthenIpv6MalformedResponses=hwRadiusStatAuthenIpv6MalformedResponses, hwRadiusStatAuthenIpv6UnknownTypes=hwRadiusStatAuthenIpv6UnknownTypes, hwAcctResponsePacketNum=hwAcctResponsePacketNum, hwRadiusStatAcctIpv6MalformedResponses=hwRadiusStatAcctIpv6MalformedResponses, hwRadiusStatAuthenIpv4Table=hwRadiusStatAuthenIpv4Table, hwRadiusStatAcctIpv6Requests=hwRadiusStatAcctIpv6Requests, hwRadiusPacketUnit=hwRadiusPacketUnit, hwRadiusStatAuthenIpv4Accepts=hwRadiusStatAuthenIpv4Accepts, hwRadiusConformance=hwRadiusConformance, hwRadiusStatAuthenIpv4Requests=hwRadiusStatAuthenIpv4Requests, hwRadiusStatAuthenIpv4Timeouts=hwRadiusStatAuthenIpv4Timeouts, hwRadiusClientGroupName=hwRadiusClientGroupName, hwRadiusStatAuthenIpv4ServerIP=hwRadiusStatAuthenIpv4ServerIP, hwRadiusStatAcctIpv6Timeouts=hwRadiusStatAcctIpv6Timeouts, hwRadiusServerDeadCount=hwRadiusServerDeadCount, hwRadiusAuthorServerKeyType=hwRadiusAuthorServerKeyType, hwRadiusTrapsDefine=hwRadiusTrapsDefine, hwRadiusTrapsDefineGroup=hwRadiusTrapsDefineGroup, hwRadiusAuthorServerKey=hwRadiusAuthorServerKey, hwRadiusStatAuthenIpv6BadAuthenticators=hwRadiusStatAuthenIpv6BadAuthenticators, hwRadiusClientTable=hwRadiusClientTable, hwRadiusAttributeNoExistPolicy=hwRadiusAttributeNoExistPolicy, hwRadiusStatAuthenIpv4Rejects=hwRadiusStatAuthenIpv4Rejects, hwRadiusStatAcctIpv4Entry=hwRadiusStatAcctIpv4Entry, hwRadiusStatAcctIpv4ServerIP=hwRadiusStatAcctIpv4ServerIP, hwRadiusServerKey=hwRadiusServerKey, hwRadiusStatAuthenIpv6Timeouts=hwRadiusStatAuthenIpv6Timeouts, hwRadiusStatAcctIpv6PendingRequests=hwRadiusStatAcctIpv6PendingRequests, hwRadiusStatAuthorIpv4UnknownTypes=hwRadiusStatAuthorIpv4UnknownTypes, hwCOAAcknowledgePacketNum=hwCOAAcknowledgePacketNum, hwRadiusServerRowStatus=hwRadiusServerRowStatus, hwRadiusStatAcctIpv4MalformedResponses=hwRadiusStatAcctIpv4MalformedResponses, hwRadiusStatAuthorIpv4Retransmissions=hwRadiusStatAuthorIpv4Retransmissions, hwRadiusMIBTrap=hwRadiusMIBTrap, hwStateChangeServerIp=hwStateChangeServerIp, hwRadiusServerVRF=hwRadiusServerVRF, hwRadiusStatAuthenIpv4MalformedResponses=hwRadiusStatAuthenIpv4MalformedResponses, hwRadiusAuthorServerIP=hwRadiusAuthorServerIP, hwRadiusStatAuthorIpv4Entry=hwRadiusStatAuthorIpv4Entry, hwRadiusServerGroup=hwRadiusServerGroup, hwRadiusSettingGroup=hwRadiusSettingGroup, hwRadiusServerNasIpAddress=hwRadiusServerNasIpAddress, hwRadiusServerTimeout=hwRadiusServerTimeout, hwRadiusStatAuthorIpv4BadAuthenticators=hwRadiusStatAuthorIpv4BadAuthenticators, hwRadiusStatAuthenIpv4Vrf=hwRadiusStatAuthenIpv4Vrf, hwRadiusCompliance=hwRadiusCompliance, hwEnableSourcePortsExtended=hwEnableSourcePortsExtended, hwRadiusStatAcctIpv6Responses=hwRadiusStatAcctIpv6Responses, hwRadiusStatAcctIpv4PendingRequests=hwRadiusStatAcctIpv4PendingRequests, hwRadiusSetting=hwRadiusSetting, hwRadiusAuthorServerGroup=hwRadiusAuthorServerGroup, hwRadiusStatAuthenIpv6Retransmissions=hwRadiusStatAuthenIpv6Retransmissions, hwRadiusSettingEntry=hwRadiusSettingEntry, hwRadiusStatAuthenIpv6DroppedPackets=hwRadiusStatAuthenIpv6DroppedPackets, hwRadiusStatAcctIpv6Table=hwRadiusStatAcctIpv6Table, hwDMAcknowledgePacketNum=hwDMAcknowledgePacketNum, hwRadiusGroupEntry=hwRadiusGroupEntry, hwRadiusServerDeadTime=hwRadiusServerDeadTime, hwRadiusClientKey=hwRadiusClientKey, hwRadiusStatAcctIpv6Retransmissions=hwRadiusStatAcctIpv6Retransmissions, hwRadiusStatAuthenIpv6PendingRequests=hwRadiusStatAuthenIpv6PendingRequests, hwRadiusStatAuthorIpv4Accepts=hwRadiusStatAuthorIpv4Accepts, hwRadiusStatAuthenIpv6Requests=hwRadiusStatAuthenIpv6Requests, hwRadiusServerType=hwRadiusServerType, hwRadiusClientRowStatus=hwRadiusClientRowStatus, hwRadiusServerTable=hwRadiusServerTable, hwRadiusServerEntry=hwRadiusServerEntry, hwRadiusServerCallingStationIdDelimiter=hwRadiusServerCallingStationIdDelimiter, hwRadiusServerIndex=hwRadiusServerIndex, hwRadiusClassASCar=hwRadiusClassASCar, hwRadiusTotalDeadCount=hwRadiusTotalDeadCount, hwRadiusStatAcctIpv4Retransmissions=hwRadiusStatAcctIpv4Retransmissions, hwRadiusTrapObjectGroup=hwRadiusTrapObjectGroup, hwRadiusAcctServerUp=hwRadiusAcctServerUp, hwRadiusServerTraps=hwRadiusServerTraps, hwRadiusStatAcctIpv6DroppedPackets=hwRadiusStatAcctIpv6DroppedPackets, hwRadiusStatAuthenIpv4PendingRequests=hwRadiusStatAuthenIpv4PendingRequests, hwRadiusTrapObject=hwRadiusTrapObject, hwRadiusStatAcctIpv4Table=hwRadiusStatAcctIpv4Table, hwStateChangeServerVrf=hwStateChangeServerVrf, hwAuthRejectPacketNum=hwAuthRejectPacketNum, hwRadiusAuthServerDown=hwRadiusAuthServerDown, hwRadiusStatAcctIpv6UnknownTypes=hwRadiusStatAcctIpv6UnknownTypes, hwRadiusStatAuthenIpv4DroppedPackets=hwRadiusStatAuthenIpv4DroppedPackets, hwRadiusServerAttrTran=hwRadiusServerAttrTran, hwRadiusAuthorServerEntry=hwRadiusAuthorServerEntry, hwAuthAcceptPacketNum=hwAuthAcceptPacketNum, hwRadiusStatAcctIpv4UnknownTypes=hwRadiusStatAcctIpv4UnknownTypes, hwRadiusStatAuthenIpv6Table=hwRadiusStatAuthenIpv6Table, hwCOARequestPacketNum=hwCOARequestPacketNum, hwRadiusStatAuthorIpv4DroppedPackets=hwRadiusStatAuthorIpv4DroppedPackets, hwRadiusGroupGroup=hwRadiusGroupGroup, hwRadiusClientKeyType=hwRadiusClientKeyType, hwRadiusDomainInclude=hwRadiusDomainInclude, hwRadiusStatAuthorIpv4ServerType=hwRadiusStatAuthorIpv4ServerType, hwRadiusServerNasPortFmt=hwRadiusServerNasPortFmt, hwRadiusAcctServerDown=hwRadiusAcctServerDown, hwRadiusServerPktSendInterval=hwRadiusServerPktSendInterval, hwRadiusGroupTable=hwRadiusGroupTable, hwRadiusStatAuthenIpv4Entry=hwRadiusStatAuthenIpv4Entry, hwRadiusAuthServerUp=hwRadiusAuthServerUp, hwRadiusAuthorServerTable=hwRadiusAuthorServerTable, hwRadiusStatAcctIpv6BadAuthenticators=hwRadiusStatAcctIpv6BadAuthenticators, hwRadiusStatAuthorIpv4MalformedResponses=hwRadiusStatAuthorIpv4MalformedResponses, hwRadiusCompliances=hwRadiusCompliances, hwRadiusStatAuthorIpv4Timeouts=hwRadiusStatAuthorIpv4Timeouts, hwRadiusServerDeadInterval=hwRadiusServerDeadInterval, hwRadiusStatAuthenIpv6Entry=hwRadiusStatAuthenIpv6Entry, hwRadiusClientEntry=hwRadiusClientEntry, hwRadiusStatAcctIpv4Requests=hwRadiusStatAcctIpv4Requests, hwRadiusTotalDeadInterval=hwRadiusTotalDeadInterval, hwRadiusAuthorServerRowStatus=hwRadiusAuthorServerRowStatus, hwRadiusServerProtType=hwRadiusServerProtType, hwRadiusServerSourceInterface=hwRadiusServerSourceInterface, hwRadiusStatAuthenIpv6Rejects=hwRadiusStatAuthenIpv6Rejects, hwRadiusServerKeyType=hwRadiusServerKeyType, PYSNMP_MODULE_ID=hwBRASRadius, hwRadiusGroupObject=hwRadiusGroupObject, hwRadiusAttrCountEntry=hwRadiusAttrCountEntry, hwRadiusGroups=hwRadiusGroups, hwRadiusStatAuthenIpv4UnknownTypes=hwRadiusStatAuthenIpv4UnknownTypes, hwRadiusStatAcctIpv4DroppedPackets=hwRadiusStatAcctIpv4DroppedPackets)
