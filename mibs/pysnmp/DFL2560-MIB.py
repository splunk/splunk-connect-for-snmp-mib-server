#
# PySNMP MIB module DFL2560-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DFL2560-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, ModuleIdentity, TimeTicks, iso, Counter64, IpAddress, Integer32, Bits, MibIdentifier, enterprises, Unsigned32, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "ModuleIdentity", "TimeTicks", "iso", "Counter64", "IpAddress", "Integer32", "Bits", "MibIdentifier", "enterprises", "Unsigned32", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dfl2560_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 1, 2)).setLabel("dfl2560-MIB")
dfl2560_MIB.setRevisions(('2010-09-02 11:39', '2010-03-30 09:00', '2009-11-10 09:16', '2008-11-18 16:05', '2008-10-14 12:27', '2007-10-31 00:00',))
if mibBuilder.loadTexts: dfl2560_MIB.setLastUpdated('201009021139Z')
if mibBuilder.loadTexts: dfl2560_MIB.setOrganization('D-Link Corporation')
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
netdefendMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20))
utmFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2))
dfl2560 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4))
dfl2560OS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1))
dfl2560OSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2))
dfl2560reg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2))
dfl2560MibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 1))
dfl2560MibConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 2))
dfl2560MibObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3))
dfl2560System = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1))
dfl2560SysCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysCpuLoad.setStatus('current')
dfl2560SysForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysForwardedBits.setStatus('current')
dfl2560SysForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysForwardedPackets.setStatus('current')
dfl2560SysBuffUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysBuffUse.setStatus('current')
dfl2560SysConns = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysConns.setStatus('current')
dfl2560SysPerStateCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 6))
dfl2560SysPscTcpSyn = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysPscTcpSyn.setStatus('current')
dfl2560SysPscTcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysPscTcpOpen.setStatus('current')
dfl2560SysPscTcpFin = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysPscTcpFin.setStatus('current')
dfl2560SysPscUdp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysPscUdp.setStatus('current')
dfl2560SysPscIcmp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysPscIcmp.setStatus('current')
dfl2560SysPscOther = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysPscOther.setStatus('current')
dfl2560IfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7), )
if mibBuilder.loadTexts: dfl2560IfStatsTable.setStatus('current')
dfl2560IfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560IfStatsIndex"))
if mibBuilder.loadTexts: dfl2560IfStatsEntry.setStatus('current')
dfl2560IfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560IfStatsIndex.setStatus('current')
dfl2560IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfName.setStatus('current')
dfl2560IfFragsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfFragsIn.setStatus('current')
dfl2560IfFragReassOk = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfFragReassOk.setStatus('current')
dfl2560IfFragReassFail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfFragReassFail.setStatus('current')
dfl2560IfPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfPktsInCnt.setStatus('current')
dfl2560IfPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfPktsOutCnt.setStatus('current')
dfl2560IfBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfBitsInCnt.setStatus('current')
dfl2560IfBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfBitsOutCnt.setStatus('current')
dfl2560IfPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfPktsTotCnt.setStatus('current')
dfl2560IfBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfBitsTotCnt.setStatus('current')
dfl2560IfHCPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfHCPktsInCnt.setStatus('current')
dfl2560IfHCPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfHCPktsOutCnt.setStatus('current')
dfl2560IfHCBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfHCBitsInCnt.setStatus('current')
dfl2560IfHCBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfHCBitsOutCnt.setStatus('current')
dfl2560IfHCPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfHCPktsTotCnt.setStatus('current')
dfl2560IfHCBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfHCBitsTotCnt.setStatus('current')
dfl2560IfRxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8), )
if mibBuilder.loadTexts: dfl2560IfRxRingTable.setStatus('current')
dfl2560IfRxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560IfRxRingIndex"))
if mibBuilder.loadTexts: dfl2560IfRxRingEntry.setStatus('current')
dfl2560IfRxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560IfRxRingIndex.setStatus('current')
dfl2560IfRxRingFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfRxRingFifoErrors.setStatus('current')
dfl2560IfRxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfRxDespools.setStatus('current')
dfl2560IfRxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfRxAvgUse.setStatus('current')
dfl2560IfRxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfRxRingSaturation.setStatus('current')
dfl2560RxRingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560RxRingFlooded.setStatus('current')
dfl2560IfTxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 9), )
if mibBuilder.loadTexts: dfl2560IfTxRingTable.setStatus('current')
dfl2560IfTxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 9, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560IfTxRingIndex"))
if mibBuilder.loadTexts: dfl2560IfTxRingEntry.setStatus('current')
dfl2560IfTxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560IfTxRingIndex.setStatus('current')
dfl2560IfTxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfTxDespools.setStatus('current')
dfl2560IfTxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfTxAvgUse.setStatus('current')
dfl2560IfTxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfTxRingSaturation.setStatus('current')
dfl2560RxTingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560RxTingFlooded.setStatus('current')
dfl2560IfVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10), )
if mibBuilder.loadTexts: dfl2560IfVlanStatsTable.setStatus('current')
dfl2560IfVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560IfVlanIndex"))
if mibBuilder.loadTexts: dfl2560IfVlanStatsEntry.setStatus('current')
dfl2560IfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560IfVlanIndex.setStatus('current')
dfl2560IfVlanUntaggedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfVlanUntaggedInPkts.setStatus('current')
dfl2560IfVlanUntaggedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfVlanUntaggedOutPkts.setStatus('current')
dfl2560IfVlanUntaggedTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfVlanUntaggedTotPkts.setStatus('current')
dfl2560IfVlanUntaggedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfVlanUntaggedInOctets.setStatus('current')
dfl2560IfVlanUntaggedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfVlanUntaggedOutOctets.setStatus('current')
dfl2560IfVlanUntaggedTotOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IfVlanUntaggedTotOctets.setStatus('current')
dfl2560HWSensorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 11), )
if mibBuilder.loadTexts: dfl2560HWSensorTable.setStatus('current')
dfl2560HWSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 11, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560HWSensorIndex"))
if mibBuilder.loadTexts: dfl2560HWSensorEntry.setStatus('current')
dfl2560HWSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560HWSensorIndex.setStatus('current')
dfl2560HWSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HWSensorName.setStatus('current')
dfl2560HWSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HWSensorValue.setStatus('current')
dfl2560HWSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HWSensorUnit.setStatus('current')
dfl2560SysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysMemUsage.setStatus('current')
dfl2560SysTCPUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 13))
dfl2560SysTCPRecvSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysTCPRecvSmall.setStatus('current')
dfl2560SysTCPRecvLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysTCPRecvLarge.setStatus('current')
dfl2560SysTCPSendSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysTCPSendSmall.setStatus('current')
dfl2560SysTCPSendLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysTCPSendLarge.setStatus('current')
dfl2560SysTimerUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysTimerUsage.setStatus('current')
dfl2560SysConnOPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysConnOPS.setStatus('current')
dfl2560SysConnCPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysConnCPS.setStatus('current')
dfl2560SysHCForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SysHCForwardedBits.setStatus('current')
dfl2560VPN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2))
dfl2560IPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1))
dfl2560IPsecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1))
dfl2560IPsecPhaseOneActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecPhaseOneActive.setStatus('current')
dfl2560IPsecPhaseOneAggrModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecPhaseOneAggrModeDone.setStatus('current')
dfl2560IPsecQuickModeActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecQuickModeActive.setStatus('current')
dfl2560IPsecPhaseOneDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecPhaseOneDone.setStatus('current')
dfl2560IPsecPhaseOneFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecPhaseOneFailed.setStatus('current')
dfl2560IPsecPhaseOneRekeyed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecPhaseOneRekeyed.setStatus('current')
dfl2560IPsecQuickModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecQuickModeDone.setStatus('current')
dfl2560IPsecQuickModeFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecQuickModeFailed.setStatus('current')
dfl2560IPsecInfoDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecInfoDone.setStatus('current')
dfl2560IPsecInfoFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecInfoFailed.setStatus('current')
dfl2560IPsecInOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecInOctetsComp.setStatus('current')
dfl2560IPsecInOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecInOctetsUncomp.setStatus('current')
dfl2560IPsecOutOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecOutOctetsComp.setStatus('current')
dfl2560IPsecOutOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecOutOctetsUncomp.setStatus('current')
dfl2560IPsecForwardedOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecForwardedOctetsComp.setStatus('current')
dfl2560IPsecForwardedOctetsUcomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecForwardedOctetsUcomp.setStatus('current')
dfl2560IPsecInPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecInPackets.setStatus('current')
dfl2560IPsecOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecOutPackets.setStatus('current')
dfl2560IPsecForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecForwardedPackets.setStatus('current')
dfl2560IPsecActiveTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecActiveTransforms.setStatus('current')
dfl2560IPsecTotalTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecTotalTransforms.setStatus('current')
dfl2560IPsecOutOfTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecOutOfTransforms.setStatus('current')
dfl2560IPsecTotalRekeys = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPsecTotalRekeys.setStatus('current')
dfl2560Rules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 3))
dfl2560RuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dfl2560RuleUseTable.setStatus('current')
dfl2560RuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 3, 2, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560RuleIndex"))
if mibBuilder.loadTexts: dfl2560RuleUseEntry.setStatus('current')
dfl2560RuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560RuleIndex.setStatus('current')
dfl2560RuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560RuleName.setStatus('current')
dfl2560RuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560RuleUse.setStatus('current')
dfl2560IPPools = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4))
dfl2560IPPoolsNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPPoolsNumber.setStatus('current')
dfl2560IPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2), )
if mibBuilder.loadTexts: dfl2560IPPoolTable.setStatus('current')
dfl2560IPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560IPPoolIndex"))
if mibBuilder.loadTexts: dfl2560IPPoolEntry.setStatus('current')
dfl2560IPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560IPPoolIndex.setStatus('current')
dfl2560IPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPPoolName.setStatus('current')
dfl2560IPPoolPrepare = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPPoolPrepare.setStatus('current')
dfl2560IPPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPPoolFree.setStatus('current')
dfl2560IPPoolMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPPoolMisses.setStatus('current')
dfl2560IPPoolClientFails = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPPoolClientFails.setStatus('current')
dfl2560IPPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560IPPoolUsed.setStatus('current')
dfl2560DHCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5))
dfl2560DHCPTotalRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPTotalRejected.setStatus('current')
dfl2560DHCPRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2), )
if mibBuilder.loadTexts: dfl2560DHCPRuleTable.setStatus('current')
dfl2560DHCPRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560DHCPRuleIndex"))
if mibBuilder.loadTexts: dfl2560DHCPRuleEntry.setStatus('current')
dfl2560DHCPRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560DHCPRuleIndex.setStatus('current')
dfl2560DHCPRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRuleName.setStatus('current')
dfl2560DHCPRuleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRuleUsage.setStatus('current')
dfl2560DHCPRuleUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRuleUsagePercent.setStatus('current')
dfl2560DHCPActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPActiveClients.setStatus('current')
dfl2560DHCPActiveClientsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPActiveClientsPercent.setStatus('current')
dfl2560DHCPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRejectedRequests.setStatus('current')
dfl2560DHCPTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 5, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPTotalLeases.setStatus('current')
dfl2560UserAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6))
dfl2560UserAuthHTTPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560UserAuthHTTPUsers.setStatus('current')
dfl2560UserAuthXAUTHUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560UserAuthXAUTHUsers.setStatus('current')
dfl2560UserAuthHTTPSUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560UserAuthHTTPSUsers.setStatus('current')
dfl2560UserAuthPPPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560UserAuthPPPUsers.setStatus('current')
dfl2560UserAuthEAPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560UserAuthEAPUsers.setStatus('current')
dfl2560UserAuthRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 6), )
if mibBuilder.loadTexts: dfl2560UserAuthRuleUseTable.setStatus('current')
dfl2560UserAuthRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 6, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560UserAuthRuleIndex"))
if mibBuilder.loadTexts: dfl2560UserAuthRuleUseEntry.setStatus('current')
dfl2560UserAuthRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560UserAuthRuleIndex.setStatus('current')
dfl2560UserAuthRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560UserAuthRuleName.setStatus('current')
dfl2560UserAuthRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 6, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560UserAuthRuleUse.setStatus('current')
dfl2560LinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7))
dfl2560LinkMonGrp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560LinkMonGrp.setStatus('current')
dfl2560LinkMonGrpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 2), )
if mibBuilder.loadTexts: dfl2560LinkMonGrpTable.setStatus('current')
dfl2560LinkMonGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 2, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560LinkMonGrpIndex"))
if mibBuilder.loadTexts: dfl2560LinkMonGrpEntry.setStatus('current')
dfl2560LinkMonGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560LinkMonGrpIndex.setStatus('current')
dfl2560LinkMonGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560LinkMonGrpName.setStatus('current')
dfl2560LinkMonGrpHostsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560LinkMonGrpHostsUp.setStatus('current')
dfl2560LinkMonHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 3), )
if mibBuilder.loadTexts: dfl2560LinkMonHostTable.setStatus('current')
dfl2560LinkMonHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 3, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560LinkMonGrpIndex"), (0, "DFL2560-MIB", "dfl2560LinkMonHostIndex"))
if mibBuilder.loadTexts: dfl2560LinkMonHostEntry.setStatus('current')
dfl2560LinkMonHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560LinkMonHostIndex.setStatus('current')
dfl2560LinkMonHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560LinkMonHostId.setStatus('current')
dfl2560LinkMonHostShortTermLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560LinkMonHostShortTermLoss.setStatus('current')
dfl2560LinkMonHostPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560LinkMonHostPacketsLost.setStatus('current')
dfl2560Pipes = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8))
dfl2560PipeUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeUsers.setStatus('current')
dfl2560PipeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dfl2560PipeTable.setStatus('current')
dfl2560PipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560PipeIndex"))
if mibBuilder.loadTexts: dfl2560PipeEntry.setStatus('current')
dfl2560PipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560PipeIndex.setStatus('current')
dfl2560PipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeName.setStatus('current')
dfl2560PipeMinPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeMinPrec.setStatus('current')
dfl2560PipeMaxPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeMaxPrec.setStatus('current')
dfl2560PipeDefPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeDefPrec.setStatus('current')
dfl2560PipeNumPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeNumPrec.setStatus('current')
dfl2560PipeNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeNumUsers.setStatus('current')
dfl2560PipeCurrentBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeCurrentBps.setStatus('current')
dfl2560PipeCurrentPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeCurrentPps.setStatus('current')
dfl2560PipeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeDelayedPackets.setStatus('current')
dfl2560PipeDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipeDropedPackets.setStatus('current')
dfl2560PipePrecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3), )
if mibBuilder.loadTexts: dfl2560PipePrecTable.setStatus('current')
dfl2560PipePrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560PipeIndex"), (0, "DFL2560-MIB", "dfl2560PipePrecIndex"))
if mibBuilder.loadTexts: dfl2560PipePrecEntry.setStatus('current')
dfl2560PipePrecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560PipePrecIndex.setStatus('current')
dfl2560PipePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrec.setStatus('current')
dfl2560PipePrecBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrecBps.setStatus('current')
dfl2560PipePrecTotalPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrecTotalPps.setStatus('current')
dfl2560PipePrecReservedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrecReservedBps.setStatus('current')
dfl2560PipePrecDynLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrecDynLimBps.setStatus('current')
dfl2560PipePrecDynUsrLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrecDynUsrLimBps.setStatus('current')
dfl2560PipePrecDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrecDelayedPackets.setStatus('current')
dfl2560PipePrecDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560PipePrecDropedPackets.setStatus('current')
dfl2560ALG = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9))
dfl2560AlgSessions = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560AlgSessions.setStatus('current')
dfl2560AlgConnections = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560AlgConnections.setStatus('current')
dfl2560AlgTCPStreams = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560AlgTCPStreams.setStatus('current')
dfl2560HttpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4))
dfl2560HttpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 1), )
if mibBuilder.loadTexts: dfl2560HttpAlgTable.setStatus('current')
dfl2560HttpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 1, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560HttpAlgIndex"))
if mibBuilder.loadTexts: dfl2560HttpAlgEntry.setStatus('current')
dfl2560HttpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560HttpAlgIndex.setStatus('current')
dfl2560HttpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgName.setStatus('current')
dfl2560HttpAlgTotalRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgTotalRequested.setStatus('current')
dfl2560HttpAlgTotalAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgTotalAllowed.setStatus('current')
dfl2560HttpAlgTotalBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgTotalBlocked.setStatus('current')
dfl2560HttpAlgCntFltTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 2), )
if mibBuilder.loadTexts: dfl2560HttpAlgCntFltTable.setStatus('current')
dfl2560HttpAlgCntFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 2, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560HttpAlgIndex"), (0, "DFL2560-MIB", "dfl2560HttpAlgCntFltIndex"))
if mibBuilder.loadTexts: dfl2560HttpAlgCntFltEntry.setStatus('current')
dfl2560HttpAlgCntFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560HttpAlgCntFltIndex.setStatus('current')
dfl2560HttpAlgCntFltName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgCntFltName.setStatus('current')
dfl2560HttpAlgCntFltRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgCntFltRequests.setStatus('current')
dfl2560HttpAlgCntFltAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgCntFltAllowed.setStatus('current')
dfl2560HttpAlgCntFltBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HttpAlgCntFltBlocked.setStatus('current')
dfl2560SmtpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5))
dfl2560SmtpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 1), )
if mibBuilder.loadTexts: dfl2560SmtpAlgTable.setStatus('current')
dfl2560SmtpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 1, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560SmtpAlgIndex"))
if mibBuilder.loadTexts: dfl2560SmtpAlgEntry.setStatus('current')
dfl2560SmtpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560SmtpAlgIndex.setStatus('current')
dfl2560SmtpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgName.setStatus('current')
dfl2560SmtpAlgTotCheckedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgTotCheckedSes.setStatus('current')
dfl2560SmtpAlgTotSpamSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgTotSpamSes.setStatus('current')
dfl2560SmtpAlgTotDroppedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgTotDroppedSes.setStatus('current')
dfl2560SmtpAlgDnsBlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 2), )
if mibBuilder.loadTexts: dfl2560SmtpAlgDnsBlTable.setStatus('current')
dfl2560SmtpAlgDnsBlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 2, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560SmtpAlgIndex"), (0, "DFL2560-MIB", "dfl2560SmtpAlgDnsBlIndex"))
if mibBuilder.loadTexts: dfl2560SmtpAlgDnsBlEntry.setStatus('current')
dfl2560SmtpAlgDnsBlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560SmtpAlgDnsBlIndex.setStatus('current')
dfl2560SmtpAlgDnsBlName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgDnsBlName.setStatus('current')
dfl2560SmtpAlgDnsBlChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgDnsBlChecked.setStatus('current')
dfl2560SmtpAlgDnsBlMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgDnsBlMatched.setStatus('current')
dfl2560SmtpAlgDnsBlFailChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 9, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560SmtpAlgDnsBlFailChecks.setStatus('current')
dfl2560DHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11))
dfl2560DHCPRelayCurClients = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayCurClients.setStatus('current')
dfl2560DHCPRelayCurTrans = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayCurTrans.setStatus('current')
dfl2560DHCPRelayRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayRejected.setStatus('current')
dfl2560DHCPRelayRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4), )
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleTable.setStatus('current')
dfl2560DHCPRelayRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4, 1), ).setIndexNames((0, "DFL2560-MIB", "dfl2560DHCPRelayRuleIndex"))
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleEntry.setStatus('current')
dfl2560DHCPRelayRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleIndex.setStatus('current')
dfl2560DHCPRelayRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleName.setStatus('current')
dfl2560DHCPRelayRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleHits.setStatus('current')
dfl2560DHCPRelayRuleCurClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleCurClients.setStatus('current')
dfl2560DHCPRelayRuleRejCliPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleRejCliPkts.setStatus('current')
dfl2560DHCPRelayRuleRejSrvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 11, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560DHCPRelayRuleRejSrvPkts.setStatus('current')
dfl2560HA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 12))
dfl2560HASyncSendQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HASyncSendQueueLength.setStatus('current')
dfl2560HASyncSendQueueUsagePkt = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HASyncSendQueueUsagePkt.setStatus('current')
dfl2560HASyncSendQueueUsageOct = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HASyncSendQueueUsageOct.setStatus('current')
dfl2560HASyncSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HASyncSentPackets.setStatus('current')
dfl2560HASyncSendResentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 1, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl2560HASyncSendResentPackets.setStatus('current')
dfl2560StatsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 2, 1))
dfl2560StatsRegGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1))
dfl2560SystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 1)).setObjects(("DFL2560-MIB", "dfl2560SysCpuLoad"), ("DFL2560-MIB", "dfl2560SysForwardedBits"), ("DFL2560-MIB", "dfl2560SysForwardedPackets"), ("DFL2560-MIB", "dfl2560SysBuffUse"), ("DFL2560-MIB", "dfl2560SysConns"), ("DFL2560-MIB", "dfl2560HWSensorName"), ("DFL2560-MIB", "dfl2560HWSensorValue"), ("DFL2560-MIB", "dfl2560HWSensorUnit"), ("DFL2560-MIB", "dfl2560SysMemUsage"), ("DFL2560-MIB", "dfl2560SysTimerUsage"), ("DFL2560-MIB", "dfl2560SysConnOPS"), ("DFL2560-MIB", "dfl2560SysConnCPS"), ("DFL2560-MIB", "dfl2560SysHCForwardedBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560SystemObjectGroup = dfl2560SystemObjectGroup.setStatus('current')
dfl2560IPsecObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 2)).setObjects(("DFL2560-MIB", "dfl2560IPsecPhaseOneActive"), ("DFL2560-MIB", "dfl2560IPsecPhaseOneAggrModeDone"), ("DFL2560-MIB", "dfl2560IPsecQuickModeActive"), ("DFL2560-MIB", "dfl2560IPsecPhaseOneDone"), ("DFL2560-MIB", "dfl2560IPsecPhaseOneFailed"), ("DFL2560-MIB", "dfl2560IPsecPhaseOneRekeyed"), ("DFL2560-MIB", "dfl2560IPsecQuickModeDone"), ("DFL2560-MIB", "dfl2560IPsecQuickModeFailed"), ("DFL2560-MIB", "dfl2560IPsecInfoDone"), ("DFL2560-MIB", "dfl2560IPsecInfoFailed"), ("DFL2560-MIB", "dfl2560IPsecInOctetsComp"), ("DFL2560-MIB", "dfl2560IPsecInOctetsUncomp"), ("DFL2560-MIB", "dfl2560IPsecOutOctetsComp"), ("DFL2560-MIB", "dfl2560IPsecOutOctetsUncomp"), ("DFL2560-MIB", "dfl2560IPsecForwardedOctetsComp"), ("DFL2560-MIB", "dfl2560IPsecForwardedOctetsUcomp"), ("DFL2560-MIB", "dfl2560IPsecInPackets"), ("DFL2560-MIB", "dfl2560IPsecOutPackets"), ("DFL2560-MIB", "dfl2560IPsecForwardedPackets"), ("DFL2560-MIB", "dfl2560IPsecActiveTransforms"), ("DFL2560-MIB", "dfl2560IPsecTotalTransforms"), ("DFL2560-MIB", "dfl2560IPsecOutOfTransforms"), ("DFL2560-MIB", "dfl2560IPsecTotalRekeys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560IPsecObjectGroup = dfl2560IPsecObjectGroup.setStatus('current')
dfl2560StateCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 3)).setObjects(("DFL2560-MIB", "dfl2560SysPscTcpSyn"), ("DFL2560-MIB", "dfl2560SysPscTcpOpen"), ("DFL2560-MIB", "dfl2560SysPscTcpFin"), ("DFL2560-MIB", "dfl2560SysPscUdp"), ("DFL2560-MIB", "dfl2560SysPscIcmp"), ("DFL2560-MIB", "dfl2560SysPscOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560StateCountersGroup = dfl2560StateCountersGroup.setStatus('current')
dfl2560IPPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 4)).setObjects(("DFL2560-MIB", "dfl2560IPPoolsNumber"), ("DFL2560-MIB", "dfl2560IPPoolName"), ("DFL2560-MIB", "dfl2560IPPoolPrepare"), ("DFL2560-MIB", "dfl2560IPPoolFree"), ("DFL2560-MIB", "dfl2560IPPoolMisses"), ("DFL2560-MIB", "dfl2560IPPoolClientFails"), ("DFL2560-MIB", "dfl2560IPPoolUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560IPPoolGroup = dfl2560IPPoolGroup.setStatus('current')
dfl2560DHCPServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 5)).setObjects(("DFL2560-MIB", "dfl2560DHCPTotalRejected"), ("DFL2560-MIB", "dfl2560DHCPRuleName"), ("DFL2560-MIB", "dfl2560DHCPRuleUsage"), ("DFL2560-MIB", "dfl2560DHCPRuleUsagePercent"), ("DFL2560-MIB", "dfl2560DHCPActiveClients"), ("DFL2560-MIB", "dfl2560DHCPActiveClientsPercent"), ("DFL2560-MIB", "dfl2560DHCPRejectedRequests"), ("DFL2560-MIB", "dfl2560DHCPTotalLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560DHCPServerGroup = dfl2560DHCPServerGroup.setStatus('current')
dfl2560RuleUseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 6)).setObjects(("DFL2560-MIB", "dfl2560RuleName"), ("DFL2560-MIB", "dfl2560RuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560RuleUseGroup = dfl2560RuleUseGroup.setStatus('current')
dfl2560UserAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 7)).setObjects(("DFL2560-MIB", "dfl2560UserAuthHTTPUsers"), ("DFL2560-MIB", "dfl2560UserAuthXAUTHUsers"), ("DFL2560-MIB", "dfl2560UserAuthHTTPSUsers"), ("DFL2560-MIB", "dfl2560UserAuthPPPUsers"), ("DFL2560-MIB", "dfl2560UserAuthEAPUsers"), ("DFL2560-MIB", "dfl2560UserAuthRuleName"), ("DFL2560-MIB", "dfl2560UserAuthRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560UserAuthGroup = dfl2560UserAuthGroup.setStatus('current')
dfl2560IfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 8)).setObjects(("DFL2560-MIB", "dfl2560IfName"), ("DFL2560-MIB", "dfl2560IfFragsIn"), ("DFL2560-MIB", "dfl2560IfFragReassOk"), ("DFL2560-MIB", "dfl2560IfFragReassFail"), ("DFL2560-MIB", "dfl2560IfPktsInCnt"), ("DFL2560-MIB", "dfl2560IfPktsOutCnt"), ("DFL2560-MIB", "dfl2560IfBitsInCnt"), ("DFL2560-MIB", "dfl2560IfBitsOutCnt"), ("DFL2560-MIB", "dfl2560IfPktsTotCnt"), ("DFL2560-MIB", "dfl2560IfBitsTotCnt"), ("DFL2560-MIB", "dfl2560IfHCPktsInCnt"), ("DFL2560-MIB", "dfl2560IfHCPktsOutCnt"), ("DFL2560-MIB", "dfl2560IfHCBitsInCnt"), ("DFL2560-MIB", "dfl2560IfHCBitsOutCnt"), ("DFL2560-MIB", "dfl2560IfHCPktsTotCnt"), ("DFL2560-MIB", "dfl2560IfHCBitsTotCnt"), ("DFL2560-MIB", "dfl2560IfRxRingFifoErrors"), ("DFL2560-MIB", "dfl2560IfRxDespools"), ("DFL2560-MIB", "dfl2560IfRxAvgUse"), ("DFL2560-MIB", "dfl2560IfRxRingSaturation"), ("DFL2560-MIB", "dfl2560RxRingFlooded"), ("DFL2560-MIB", "dfl2560IfTxDespools"), ("DFL2560-MIB", "dfl2560IfTxAvgUse"), ("DFL2560-MIB", "dfl2560IfTxRingSaturation"), ("DFL2560-MIB", "dfl2560RxTingFlooded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560IfStatsGroup = dfl2560IfStatsGroup.setStatus('current')
dfl2560LinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 9)).setObjects(("DFL2560-MIB", "dfl2560LinkMonGrp"), ("DFL2560-MIB", "dfl2560LinkMonGrpName"), ("DFL2560-MIB", "dfl2560LinkMonGrpHostsUp"), ("DFL2560-MIB", "dfl2560LinkMonHostId"), ("DFL2560-MIB", "dfl2560LinkMonHostShortTermLoss"), ("DFL2560-MIB", "dfl2560LinkMonHostPacketsLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560LinkMonitorGroup = dfl2560LinkMonitorGroup.setStatus('current')
dfl2560PipesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 10)).setObjects(("DFL2560-MIB", "dfl2560PipeUsers"), ("DFL2560-MIB", "dfl2560PipeName"), ("DFL2560-MIB", "dfl2560PipeMinPrec"), ("DFL2560-MIB", "dfl2560PipeMaxPrec"), ("DFL2560-MIB", "dfl2560PipeDefPrec"), ("DFL2560-MIB", "dfl2560PipeNumPrec"), ("DFL2560-MIB", "dfl2560PipeNumUsers"), ("DFL2560-MIB", "dfl2560PipeCurrentBps"), ("DFL2560-MIB", "dfl2560PipeCurrentPps"), ("DFL2560-MIB", "dfl2560PipeDelayedPackets"), ("DFL2560-MIB", "dfl2560PipeDropedPackets"), ("DFL2560-MIB", "dfl2560PipePrec"), ("DFL2560-MIB", "dfl2560PipePrecBps"), ("DFL2560-MIB", "dfl2560PipePrecTotalPps"), ("DFL2560-MIB", "dfl2560PipePrecReservedBps"), ("DFL2560-MIB", "dfl2560PipePrecDynLimBps"), ("DFL2560-MIB", "dfl2560PipePrecDynUsrLimBps"), ("DFL2560-MIB", "dfl2560PipePrecDelayedPackets"), ("DFL2560-MIB", "dfl2560PipePrecDropedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560PipesObjectGroup = dfl2560PipesObjectGroup.setStatus('current')
dfl2560DHCPRelayObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 12)).setObjects(("DFL2560-MIB", "dfl2560DHCPRelayCurClients"), ("DFL2560-MIB", "dfl2560DHCPRelayCurTrans"), ("DFL2560-MIB", "dfl2560DHCPRelayRejected"), ("DFL2560-MIB", "dfl2560DHCPRelayRuleName"), ("DFL2560-MIB", "dfl2560DHCPRelayRuleHits"), ("DFL2560-MIB", "dfl2560DHCPRelayRuleCurClients"), ("DFL2560-MIB", "dfl2560DHCPRelayRuleRejCliPkts"), ("DFL2560-MIB", "dfl2560DHCPRelayRuleRejSrvPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560DHCPRelayObjectGroup = dfl2560DHCPRelayObjectGroup.setStatus('current')
dfl2560AlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 13)).setObjects(("DFL2560-MIB", "dfl2560AlgSessions"), ("DFL2560-MIB", "dfl2560AlgConnections"), ("DFL2560-MIB", "dfl2560AlgTCPStreams"), ("DFL2560-MIB", "dfl2560HttpAlgName"), ("DFL2560-MIB", "dfl2560HttpAlgTotalRequested"), ("DFL2560-MIB", "dfl2560HttpAlgTotalAllowed"), ("DFL2560-MIB", "dfl2560HttpAlgTotalBlocked"), ("DFL2560-MIB", "dfl2560HttpAlgCntFltName"), ("DFL2560-MIB", "dfl2560HttpAlgCntFltRequests"), ("DFL2560-MIB", "dfl2560HttpAlgCntFltAllowed"), ("DFL2560-MIB", "dfl2560HttpAlgCntFltBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560AlgGroup = dfl2560AlgGroup.setStatus('current')
dfl2560HAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 14)).setObjects(("DFL2560-MIB", "dfl2560HASyncSendQueueLength"), ("DFL2560-MIB", "dfl2560HASyncSendQueueUsagePkt"), ("DFL2560-MIB", "dfl2560HASyncSendQueueUsageOct"), ("DFL2560-MIB", "dfl2560HASyncSentPackets"), ("DFL2560-MIB", "dfl2560HASyncSendResentPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560HAGroup = dfl2560HAGroup.setStatus('current')
dfl2560IfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 15)).setObjects(("DFL2560-MIB", "dfl2560IfVlanUntaggedInPkts"), ("DFL2560-MIB", "dfl2560IfVlanUntaggedOutPkts"), ("DFL2560-MIB", "dfl2560IfVlanUntaggedTotPkts"), ("DFL2560-MIB", "dfl2560IfVlanUntaggedInOctets"), ("DFL2560-MIB", "dfl2560IfVlanUntaggedOutOctets"), ("DFL2560-MIB", "dfl2560IfVlanUntaggedTotOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560IfVlanGroup = dfl2560IfVlanGroup.setStatus('current')
dfl2560SmtpAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 16)).setObjects(("DFL2560-MIB", "dfl2560SmtpAlgName"), ("DFL2560-MIB", "dfl2560SmtpAlgTotCheckedSes"), ("DFL2560-MIB", "dfl2560SmtpAlgTotSpamSes"), ("DFL2560-MIB", "dfl2560SmtpAlgTotDroppedSes"), ("DFL2560-MIB", "dfl2560SmtpAlgDnsBlName"), ("DFL2560-MIB", "dfl2560SmtpAlgDnsBlChecked"), ("DFL2560-MIB", "dfl2560SmtpAlgDnsBlMatched"), ("DFL2560-MIB", "dfl2560SmtpAlgDnsBlFailChecks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560SmtpAlgGroup = dfl2560SmtpAlgGroup.setStatus('current')
dfl2560SysTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 3, 1, 17)).setObjects(("DFL2560-MIB", "dfl2560SysTCPRecvSmall"), ("DFL2560-MIB", "dfl2560SysTCPRecvLarge"), ("DFL2560-MIB", "dfl2560SysTCPSendSmall"), ("DFL2560-MIB", "dfl2560SysTCPSendLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560SysTCPGroup = dfl2560SysTCPGroup.setStatus('current')
dfl2560StatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 20, 2, 4, 2, 2, 1, 1)).setObjects(("DFL2560-MIB", "dfl2560SystemObjectGroup"), ("DFL2560-MIB", "dfl2560IPsecObjectGroup"), ("DFL2560-MIB", "dfl2560StateCountersGroup"), ("DFL2560-MIB", "dfl2560IPPoolGroup"), ("DFL2560-MIB", "dfl2560DHCPServerGroup"), ("DFL2560-MIB", "dfl2560RuleUseGroup"), ("DFL2560-MIB", "dfl2560UserAuthGroup"), ("DFL2560-MIB", "dfl2560IfStatsGroup"), ("DFL2560-MIB", "dfl2560LinkMonitorGroup"), ("DFL2560-MIB", "dfl2560PipesObjectGroup"), ("DFL2560-MIB", "dfl2560DHCPRelayObjectGroup"), ("DFL2560-MIB", "dfl2560AlgGroup"), ("DFL2560-MIB", "dfl2560HAGroup"), ("DFL2560-MIB", "dfl2560IfVlanGroup"), ("DFL2560-MIB", "dfl2560SmtpAlgGroup"), ("DFL2560-MIB", "dfl2560SysTCPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl2560StatsCompliance = dfl2560StatsCompliance.setStatus('current')
mibBuilder.exportSymbols("DFL2560-MIB", dfl2560DHCPRelayRuleEntry=dfl2560DHCPRelayRuleEntry, dfl2560IfStatsIndex=dfl2560IfStatsIndex, dfl2560PipeNumUsers=dfl2560PipeNumUsers, dfl2560IfVlanIndex=dfl2560IfVlanIndex, dfl2560LinkMonHostId=dfl2560LinkMonHostId, dfl2560SysBuffUse=dfl2560SysBuffUse, PYSNMP_MODULE_ID=dfl2560_MIB, dfl2560IfVlanUntaggedOutPkts=dfl2560IfVlanUntaggedOutPkts, dfl2560MibConfs=dfl2560MibConfs, dfl2560StatsRegGroups=dfl2560StatsRegGroups, dfl2560IfStatsEntry=dfl2560IfStatsEntry, dfl2560LinkMonitor=dfl2560LinkMonitor, dfl2560SysPerStateCounters=dfl2560SysPerStateCounters, dfl2560IPPoolMisses=dfl2560IPPoolMisses, dfl2560OS=dfl2560OS, dfl2560IfPktsOutCnt=dfl2560IfPktsOutCnt, dfl2560IfBitsInCnt=dfl2560IfBitsInCnt, dfl2560PipeDropedPackets=dfl2560PipeDropedPackets, dfl2560PipePrecBps=dfl2560PipePrecBps, dfl2560UserAuthRuleUse=dfl2560UserAuthRuleUse, dfl2560HttpAlgCntFltRequests=dfl2560HttpAlgCntFltRequests, dfl2560IPsecInOctetsUncomp=dfl2560IPsecInOctetsUncomp, dfl2560LinkMonGrpTable=dfl2560LinkMonGrpTable, dfl2560PipeUsers=dfl2560PipeUsers, dfl2560DHCPRuleTable=dfl2560DHCPRuleTable, dfl2560DHCPActiveClientsPercent=dfl2560DHCPActiveClientsPercent, dfl2560PipePrecEntry=dfl2560PipePrecEntry, dfl2560SmtpAlg=dfl2560SmtpAlg, dfl2560UserAuthHTTPSUsers=dfl2560UserAuthHTTPSUsers, dfl2560SmtpAlgName=dfl2560SmtpAlgName, dfl2560MibModules=dfl2560MibModules, dfl2560SmtpAlgIndex=dfl2560SmtpAlgIndex, dfl2560SmtpAlgGroup=dfl2560SmtpAlgGroup, dfl2560SysConnOPS=dfl2560SysConnOPS, utmFirewall=utmFirewall, dfl2560HttpAlgEntry=dfl2560HttpAlgEntry, dfl2560SmtpAlgDnsBlChecked=dfl2560SmtpAlgDnsBlChecked, dfl2560SysPscTcpSyn=dfl2560SysPscTcpSyn, dfl2560LinkMonHostIndex=dfl2560LinkMonHostIndex, dfl2560SysTCPRecvLarge=dfl2560SysTCPRecvLarge, dfl2560IPsecInfoFailed=dfl2560IPsecInfoFailed, dfl2560UserAuthRuleUseEntry=dfl2560UserAuthRuleUseEntry, dfl2560IPsecObjectGroup=dfl2560IPsecObjectGroup, dfl2560UserAuthGroup=dfl2560UserAuthGroup, dfl2560IPPoolTable=dfl2560IPPoolTable, dfl2560UserAuthXAUTHUsers=dfl2560UserAuthXAUTHUsers, dfl2560HttpAlgName=dfl2560HttpAlgName, dfl2560SysTCPGroup=dfl2560SysTCPGroup, dfl2560DHCPRuleName=dfl2560DHCPRuleName, dfl2560PipePrecDelayedPackets=dfl2560PipePrecDelayedPackets, dfl2560SysPscUdp=dfl2560SysPscUdp, dfl2560DHCPRelayRejected=dfl2560DHCPRelayRejected, dfl2560UserAuthRuleUseTable=dfl2560UserAuthRuleUseTable, dfl2560PipeMaxPrec=dfl2560PipeMaxPrec, dlink=dlink, dfl2560HASyncSendQueueLength=dfl2560HASyncSendQueueLength, dfl2560UserAuthPPPUsers=dfl2560UserAuthPPPUsers, dfl2560HttpAlg=dfl2560HttpAlg, dfl2560IfRxRingIndex=dfl2560IfRxRingIndex, dfl2560DHCPRelayRuleCurClients=dfl2560DHCPRelayRuleCurClients, dfl2560HWSensorUnit=dfl2560HWSensorUnit, dfl2560DHCPRelayRuleIndex=dfl2560DHCPRelayRuleIndex, dfl2560SmtpAlgDnsBlTable=dfl2560SmtpAlgDnsBlTable, dfl2560HAGroup=dfl2560HAGroup, dfl2560HttpAlgCntFltName=dfl2560HttpAlgCntFltName, dfl2560SmtpAlgTotCheckedSes=dfl2560SmtpAlgTotCheckedSes, dfl2560IfHCBitsTotCnt=dfl2560IfHCBitsTotCnt, dfl2560IfTxRingTable=dfl2560IfTxRingTable, dfl2560LinkMonHostTable=dfl2560LinkMonHostTable, dfl2560DHCPRelayCurTrans=dfl2560DHCPRelayCurTrans, dfl2560HttpAlgTotalAllowed=dfl2560HttpAlgTotalAllowed, dfl2560reg=dfl2560reg, dfl2560HWSensorValue=dfl2560HWSensorValue, dfl2560HWSensorEntry=dfl2560HWSensorEntry, dfl2560SmtpAlgTable=dfl2560SmtpAlgTable, dfl2560IPsecOutOctetsComp=dfl2560IPsecOutOctetsComp, dfl2560IPPoolFree=dfl2560IPPoolFree, dfl2560LinkMonGrpHostsUp=dfl2560LinkMonGrpHostsUp, dfl2560DHCPRelayRuleTable=dfl2560DHCPRelayRuleTable, dfl2560SmtpAlgEntry=dfl2560SmtpAlgEntry, dfl2560DHCPRuleUsagePercent=dfl2560DHCPRuleUsagePercent, dfl2560DHCPRelayRuleHits=dfl2560DHCPRelayRuleHits, dfl2560PipeEntry=dfl2560PipeEntry, dfl2560IPsecQuickModeFailed=dfl2560IPsecQuickModeFailed, dfl2560DHCPRuleEntry=dfl2560DHCPRuleEntry, dfl2560SysPscIcmp=dfl2560SysPscIcmp, dfl2560PipePrecIndex=dfl2560PipePrecIndex, dfl2560DHCPServerGroup=dfl2560DHCPServerGroup, dfl2560IPsecOutOctetsUncomp=dfl2560IPsecOutOctetsUncomp, dfl2560SysTCPUsage=dfl2560SysTCPUsage, dfl2560IfRxRingFifoErrors=dfl2560IfRxRingFifoErrors, dfl2560PipeIndex=dfl2560PipeIndex, dfl2560PipeDefPrec=dfl2560PipeDefPrec, dfl2560LinkMonGrpIndex=dfl2560LinkMonGrpIndex, dfl2560AlgSessions=dfl2560AlgSessions, dfl2560IfPktsInCnt=dfl2560IfPktsInCnt, dfl2560PipeNumPrec=dfl2560PipeNumPrec, dfl2560IfHCBitsInCnt=dfl2560IfHCBitsInCnt, dfl2560HASyncSendQueueUsageOct=dfl2560HASyncSendQueueUsageOct, dfl2560RuleUseTable=dfl2560RuleUseTable, dfl2560SmtpAlgDnsBlIndex=dfl2560SmtpAlgDnsBlIndex, dfl2560IfTxRingEntry=dfl2560IfTxRingEntry, dfl2560DHCPRuleIndex=dfl2560DHCPRuleIndex, dfl2560SmtpAlgTotSpamSes=dfl2560SmtpAlgTotSpamSes, dfl2560UserAuthRuleIndex=dfl2560UserAuthRuleIndex, dfl2560LinkMonHostShortTermLoss=dfl2560LinkMonHostShortTermLoss, dfl2560IPsecTotalRekeys=dfl2560IPsecTotalRekeys, dfl2560IPPoolEntry=dfl2560IPPoolEntry, dfl2560SysPscTcpOpen=dfl2560SysPscTcpOpen, dfl2560DHCPRelayRuleName=dfl2560DHCPRelayRuleName, dfl2560RxTingFlooded=dfl2560RxTingFlooded, dfl2560IPsecGlobal=dfl2560IPsecGlobal, dfl2560DHCPRuleUsage=dfl2560DHCPRuleUsage, dfl2560DHCPRelayObjectGroup=dfl2560DHCPRelayObjectGroup, dfl2560IfRxRingEntry=dfl2560IfRxRingEntry, dfl2560RuleIndex=dfl2560RuleIndex, dfl2560SystemObjectGroup=dfl2560SystemObjectGroup, dfl2560IfBitsTotCnt=dfl2560IfBitsTotCnt, dfl2560StatsConformance=dfl2560StatsConformance, dfl2560HASyncSendQueueUsagePkt=dfl2560HASyncSendQueueUsagePkt, dfl2560DHCPRelayRuleRejCliPkts=dfl2560DHCPRelayRuleRejCliPkts, dfl2560UserAuthEAPUsers=dfl2560UserAuthEAPUsers, dfl2560StateCountersGroup=dfl2560StateCountersGroup, dfl2560SysPscTcpFin=dfl2560SysPscTcpFin, dfl2560IPsecPhaseOneAggrModeDone=dfl2560IPsecPhaseOneAggrModeDone, dfl2560HASyncSendResentPackets=dfl2560HASyncSendResentPackets, dfl2560HttpAlgCntFltAllowed=dfl2560HttpAlgCntFltAllowed, dfl2560IfFragReassFail=dfl2560IfFragReassFail, dfl2560IPsecForwardedOctetsComp=dfl2560IPsecForwardedOctetsComp, dfl2560IPsecForwardedOctetsUcomp=dfl2560IPsecForwardedOctetsUcomp, dfl2560IPsecForwardedPackets=dfl2560IPsecForwardedPackets, dfl2560IfTxAvgUse=dfl2560IfTxAvgUse, dfl2560HttpAlgCntFltTable=dfl2560HttpAlgCntFltTable, dfl2560SmtpAlgDnsBlMatched=dfl2560SmtpAlgDnsBlMatched, dfl2560UserAuthHTTPUsers=dfl2560UserAuthHTTPUsers, dfl2560IfFragsIn=dfl2560IfFragsIn, dfl2560PipeTable=dfl2560PipeTable, dfl2560UserAuth=dfl2560UserAuth, dfl2560SysConnCPS=dfl2560SysConnCPS, dfl2560SysTCPSendLarge=dfl2560SysTCPSendLarge, dfl2560PipePrecDynUsrLimBps=dfl2560PipePrecDynUsrLimBps, dfl2560SysConns=dfl2560SysConns, dfl2560IPsec=dfl2560IPsec, dfl2560IPsecActiveTransforms=dfl2560IPsecActiveTransforms, dfl2560IfTxDespools=dfl2560IfTxDespools, dfl2560IPPoolClientFails=dfl2560IPPoolClientFails, dfl2560IfVlanStatsEntry=dfl2560IfVlanStatsEntry, dfl2560LinkMonGrp=dfl2560LinkMonGrp, dfl2560RxRingFlooded=dfl2560RxRingFlooded, dfl2560HWSensorName=dfl2560HWSensorName, dfl2560PipePrecDropedPackets=dfl2560PipePrecDropedPackets, dfl2560DHCPActiveClients=dfl2560DHCPActiveClients, dfl2560IfRxAvgUse=dfl2560IfRxAvgUse, dfl2560System=dfl2560System, dfl2560IfHCPktsInCnt=dfl2560IfHCPktsInCnt, dfl2560IPsecPhaseOneFailed=dfl2560IPsecPhaseOneFailed, dfl2560PipeCurrentBps=dfl2560PipeCurrentBps, dfl2560IPsecOutOfTransforms=dfl2560IPsecOutOfTransforms, dfl2560DHCPTotalRejected=dfl2560DHCPTotalRejected, dfl2560IPPoolPrepare=dfl2560IPPoolPrepare, dfl2560SmtpAlgDnsBlEntry=dfl2560SmtpAlgDnsBlEntry, dfl2560SmtpAlgDnsBlFailChecks=dfl2560SmtpAlgDnsBlFailChecks, dfl2560IfVlanStatsTable=dfl2560IfVlanStatsTable, dfl2560LinkMonHostEntry=dfl2560LinkMonHostEntry, dfl2560RuleUseGroup=dfl2560RuleUseGroup, dfl2560ALG=dfl2560ALG, netdefendMgmt=netdefendMgmt, dfl2560IPPoolIndex=dfl2560IPPoolIndex, dfl2560IPPools=dfl2560IPPools, dfl2560AlgConnections=dfl2560AlgConnections, dfl2560HttpAlgCntFltBlocked=dfl2560HttpAlgCntFltBlocked, dfl2560IPsecOutPackets=dfl2560IPsecOutPackets, dfl2560SysForwardedBits=dfl2560SysForwardedBits, dfl2560IPsecPhaseOneRekeyed=dfl2560IPsecPhaseOneRekeyed, dfl2560HttpAlgTotalRequested=dfl2560HttpAlgTotalRequested, dfl2560SysForwardedPackets=dfl2560SysForwardedPackets, dfl2560SysPscOther=dfl2560SysPscOther, dfl2560IPsecQuickModeActive=dfl2560IPsecQuickModeActive, dfl2560IPsecTotalTransforms=dfl2560IPsecTotalTransforms, dfl2560IfVlanUntaggedTotOctets=dfl2560IfVlanUntaggedTotOctets, dfl2560LinkMonGrpEntry=dfl2560LinkMonGrpEntry, dfl2560AlgGroup=dfl2560AlgGroup, dfl2560SysTCPRecvSmall=dfl2560SysTCPRecvSmall, dfl2560OSStats=dfl2560OSStats, dfl2560IfVlanUntaggedInPkts=dfl2560IfVlanUntaggedInPkts, dfl2560SysMemUsage=dfl2560SysMemUsage, dfl2560UserAuthRuleName=dfl2560UserAuthRuleName, dfl2560PipeMinPrec=dfl2560PipeMinPrec, dfl2560HttpAlgCntFltEntry=dfl2560HttpAlgCntFltEntry, dfl2560SysTimerUsage=dfl2560SysTimerUsage, dfl2560VPN=dfl2560VPN, dfl2560IfVlanUntaggedOutOctets=dfl2560IfVlanUntaggedOutOctets, dfl2560IPsecInPackets=dfl2560IPsecInPackets, dfl2560IPsecPhaseOneActive=dfl2560IPsecPhaseOneActive, dfl2560Pipes=dfl2560Pipes, dfl2560HASyncSentPackets=dfl2560HASyncSentPackets, dfl2560PipePrecTable=dfl2560PipePrecTable, dfl2560RuleUseEntry=dfl2560RuleUseEntry, dfl2560IfBitsOutCnt=dfl2560IfBitsOutCnt, dfl2560IPPoolsNumber=dfl2560IPPoolsNumber, dfl2560PipePrec=dfl2560PipePrec, dfl2560IfTxRingSaturation=dfl2560IfTxRingSaturation, dfl2560PipesObjectGroup=dfl2560PipesObjectGroup, dfl2560SysHCForwardedBits=dfl2560SysHCForwardedBits, dfl2560DHCPRelayCurClients=dfl2560DHCPRelayCurClients, dfl2560IfRxRingTable=dfl2560IfRxRingTable, dfl2560IPsecPhaseOneDone=dfl2560IPsecPhaseOneDone, dfl2560IPsecInfoDone=dfl2560IPsecInfoDone, dfl2560SysTCPSendSmall=dfl2560SysTCPSendSmall, dfl2560PipePrecReservedBps=dfl2560PipePrecReservedBps, dfl2560PipePrecDynLimBps=dfl2560PipePrecDynLimBps, dfl2560IfStatsGroup=dfl2560IfStatsGroup, dfl2560RuleUse=dfl2560RuleUse, dfl2560IPPoolUsed=dfl2560IPPoolUsed, dfl2560DHCPRelayRuleRejSrvPkts=dfl2560DHCPRelayRuleRejSrvPkts, dfl2560PipeCurrentPps=dfl2560PipeCurrentPps, dfl2560PipeDelayedPackets=dfl2560PipeDelayedPackets, dfl2560IfHCPktsTotCnt=dfl2560IfHCPktsTotCnt, dfl2560HttpAlgCntFltIndex=dfl2560HttpAlgCntFltIndex, dfl2560IPsecQuickModeDone=dfl2560IPsecQuickModeDone, dfl2560HttpAlgTable=dfl2560HttpAlgTable, dfl2560=dfl2560, dfl2560MibObjectGroups=dfl2560MibObjectGroups, dfl2560IfRxDespools=dfl2560IfRxDespools, dfl2560LinkMonGrpName=dfl2560LinkMonGrpName, dfl2560AlgTCPStreams=dfl2560AlgTCPStreams, dfl2560IPsecInOctetsComp=dfl2560IPsecInOctetsComp, dfl2560IfTxRingIndex=dfl2560IfTxRingIndex, dfl2560IfFragReassOk=dfl2560IfFragReassOk, dfl2560DHCPServer=dfl2560DHCPServer, dfl2560StatsCompliance=dfl2560StatsCompliance, dfl2560DHCPTotalLeases=dfl2560DHCPTotalLeases, dfl2560IfHCPktsOutCnt=dfl2560IfHCPktsOutCnt, dfl2560HWSensorIndex=dfl2560HWSensorIndex, dfl2560RuleName=dfl2560RuleName, dfl2560IfVlanUntaggedInOctets=dfl2560IfVlanUntaggedInOctets, dfl2560SmtpAlgDnsBlName=dfl2560SmtpAlgDnsBlName, dfl2560PipePrecTotalPps=dfl2560PipePrecTotalPps, dfl2560PipeName=dfl2560PipeName, dfl2560SysCpuLoad=dfl2560SysCpuLoad, dfl2560IfStatsTable=dfl2560IfStatsTable, dfl2560IPPoolName=dfl2560IPPoolName, dfl2560LinkMonHostPacketsLost=dfl2560LinkMonHostPacketsLost, dfl2560HttpAlgTotalBlocked=dfl2560HttpAlgTotalBlocked, dfl2560SmtpAlgTotDroppedSes=dfl2560SmtpAlgTotDroppedSes, dfl2560Rules=dfl2560Rules, dfl2560HA=dfl2560HA, dfl2560IfHCBitsOutCnt=dfl2560IfHCBitsOutCnt, dfl2560IfPktsTotCnt=dfl2560IfPktsTotCnt, dfl2560IfName=dfl2560IfName, dfl2560DHCPRelay=dfl2560DHCPRelay, dfl2560_MIB=dfl2560_MIB, dfl2560IPPoolGroup=dfl2560IPPoolGroup, dfl2560LinkMonitorGroup=dfl2560LinkMonitorGroup)
mibBuilder.exportSymbols("DFL2560-MIB", dfl2560IfVlanGroup=dfl2560IfVlanGroup, dfl2560HttpAlgIndex=dfl2560HttpAlgIndex, dfl2560HWSensorTable=dfl2560HWSensorTable, dfl2560DHCPRejectedRequests=dfl2560DHCPRejectedRequests, dfl2560IfVlanUntaggedTotPkts=dfl2560IfVlanUntaggedTotPkts, dfl2560IfRxRingSaturation=dfl2560IfRxRingSaturation)
