#
# PySNMP MIB module WHISP-APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WHISP-APS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, iso, NotificationType, Gauge32, IpAddress, Unsigned32, Integer32, ObjectIdentity, Counter64, Counter32, MibIdentifier, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "NotificationType", "Gauge32", "IpAddress", "Unsigned32", "Integer32", "ObjectIdentity", "Counter64", "Counter32", "MibIdentifier", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
PhysAddress, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "MacAddress", "DisplayString")
whispBoxEsn, whispBoxRFPhysicalRadioEntry = mibBuilder.importSymbols("WHISP-BOX-MIBV2-MIB", "whispBoxEsn", "whispBoxRFPhysicalRadioEntry")
whispBox, whispModules, whispAps = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispBox", "whispModules", "whispAps")
EventString, WhispMACAddress, WhispLUID = mibBuilder.importSymbols("WHISP-TCV2-MIB", "EventString", "WhispMACAddress", "WhispLUID")
whispApsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 12))
if mibBuilder.loadTexts: whispApsMibModule.setLastUpdated('200304150000Z')
if mibBuilder.loadTexts: whispApsMibModule.setOrganization('Cambium Networks')
whispApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1))
whispApsLink = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2))
whispApsLinkTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1))
whispApsLinkTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2))
whispApsGPS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3))
whispApsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5))
whispApsRegEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1))
whispGPSEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2))
whispApsDfsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3))
whispApRegulatoryEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4))
whispApRFOverloadEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5))
whispApsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6))
whispApsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7))
whispApsDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9))
whispApsControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11))
whispApsRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10))
gpsInput = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("generateSyncSignal", 0), ("syncToReceivedSignalTimingPort", 1), ("syncToReceivedSignalPowerPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsInput.setStatus('obsolete')
rfFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("wired", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCarrier.setStatus('deprecated')
apLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLinkSpeed.setStatus('obsolete')
dwnLnkData = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkData.setStatus('deprecated')
highPriorityUpLnkPct = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPriorityUpLnkPct.setStatus('obsolete')
numUAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numUAckSlots.setStatus('obsolete')
uAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uAcksReservHigh.setStatus('obsolete')
numDAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numDAckSlots.setStatus('obsolete')
dAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dAcksReservHigh.setStatus('obsolete')
numCtlSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlots.setStatus('obsolete')
numCtlSlotsReserveHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlotsReserveHigh.setStatus('obsolete')
upLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 12), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkDataRate.setStatus('current')
upLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 13), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkLimit.setStatus('current')
dwnLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 14), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkDataRate.setStatus('current')
dwnLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 15), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkLimit.setStatus('current')
sectorID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sectorID.setStatus('current')
maxRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 17), Integer32()).setUnits('miles').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxRange.setStatus('deprecated')
airLinkSecurity = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("standard", 0), ("desEnhanced", 1), ("desEnhancedAndAuthentication", 2), ("authenticationIfAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airLinkSecurity.setStatus('obsolete')
berMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("berStream", 0), ("noBerStream", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berMode.setStatus('obsolete')
asIP1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP1.setStatus('obsolete')
asIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP2.setStatus('obsolete')
asIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP3.setStatus('obsolete')
lanIpAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpAp.setStatus('current')
lanMaskAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanMaskAp.setStatus('current')
defaultGwAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGwAp.setStatus('current')
privateIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateIp.setStatus('current')
gpsTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("gpsTrapDisabled", 0), ("gpsTrapEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsTrap.setStatus('current')
regTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("regTrapDisabled", 0), ("regTrapEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regTrap.setStatus('current')
txSpreading = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("txSpreadingDisabled", 0), ("txSpreadingEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSpreading.setStatus('current')
apBeaconInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enableApBeaconInfo", 0), ("disableApBeaconInfo", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBeaconInfo.setStatus('current')
authMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("authenticationDisabled", 0), ("authenticationRequiredBam", 1), ("authenticationRequiredAP", 3), ("authenticationRequiredAAA", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authMode.setStatus('current')
authKeyAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeyAp.setStatus('current')
encryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("encryptionDisabled", 0), ("encryptionEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionMode.setStatus('current')
ntpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerIp.setStatus('obsolete')
broadcastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastRetryCount.setStatus('current')
encryptDwBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptDwBroadcast.setStatus('current')
updateAppAddress = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 37), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateAppAddress.setStatus('current')
dfsConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsConfig.setStatus('obsolete')
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
configSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bam", 0), ("sm", 1), ("bamsm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSource.setStatus('current')
apRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onex", 0), ("onextwox", 1), ("onextwoxthreex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRateAdapt.setStatus('obsolete')
numCtlSlotsHW = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlotsHW.setStatus('deprecated')
displayAPEval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayAPEval.setStatus('current')
smIsolation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("smIsolationDisable", 0), ("smIsolationDrop", 1), ("smIsolationFwd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIsolation.setStatus('current')
ipAccessFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessFilterEnable.setStatus('current')
allowedIPAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess1.setStatus('current')
allowedIPAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 47), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess2.setStatus('current')
allowedIPAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 48), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess3.setStatus('current')
tslBridging = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tslBridging.setStatus('current')
untranslatedArp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: untranslatedArp.setStatus('current')
limitFreqBand900 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitFreqBand900.setStatus('current')
txPwrLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPwrLevel.setStatus('obsolete')
rfFreqCaralt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCaralt1.setStatus('current')
rfFreqCaralt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCaralt2.setStatus('current')
scheduleWhitening = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleWhitening.setStatus('current')
remoteSpectrumAnalysisDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalysisDuration.setStatus('current')
remoteSpectrumAnalyzerLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalyzerLUID.setStatus('current')
bhReReg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhReReg.setStatus('current')
dlnkBcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlnkBcastCIR.setStatus('current')
verifyGPSChecksum = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotVerifyGPSMessageChecksum", 0), ("verifyGPSMessageChecksum", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyGPSChecksum.setStatus('current')
apVlanOverride = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanOverride.setStatus('current')
dhcpRelayAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("fullRelay", 1), ("option82Only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayAgentEnable.setStatus('current')
dhcpRelayAgentSrvrIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayAgentSrvrIP.setStatus('obsolete')
colorCodeRescanTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodeRescanTimer.setStatus('current')
colorCodeRescanIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodeRescanIdleTimer.setStatus('current')
authKeyOptionAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useDefault", 0), ("useKeySet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeyOptionAP.setStatus('current')
asIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP4.setStatus('obsolete')
asIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 68), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP5.setStatus('obsolete')
onlyAllowVer95OrAbove = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("onlyAllowVer95OrAboveDisabled", 0), ("onlyAllowVer95OrAboveEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onlyAllowVer95OrAbove.setStatus('current')
apRxDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRxDelay.setStatus('current')
qinqEthType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("x88a8", 0), ("x8100", 1), ("x9100", 2), ("x9200", 3), ("x9300", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqEthType.setStatus('current')
fskSMTxPwrCntl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fskSMTxPwrCntl.setStatus('current')
fskSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fskSMRcvTargetLvl.setStatus('current')
authSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 74), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret1.setStatus('current')
authSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 75), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret2.setStatus('current')
authSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 76), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret3.setStatus('current')
whispUsrAuthSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret1.setStatus('obsolete')
whispUsrAuthSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 80), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret2.setStatus('obsolete')
whispUsrAuthSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret3.setStatus('obsolete')
whispUsrAcctSvr1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 82), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr1.setStatus('obsolete')
whispUsrAcctSvr2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 83), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr2.setStatus('obsolete')
whispUsrAcctSvr3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 84), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr3.setStatus('obsolete')
whispUsrAuthPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthPhase1.setStatus('current')
whispWebUseAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useRADIUSAccountingSvr", 0), ("useRADIUSAuthenticationSvr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispWebUseAuthServer.setStatus('obsolete')
dropSession = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 87), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dropSession.setStatus('current')
uGPSPower = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uGPSPower.setStatus('current')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
ofdmSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofdmSMRcvTargetLvl.setStatus('current')
radiusPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 91), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPort.setStatus('current')
radiusAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 92), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPort.setStatus('current')
lastSesStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSesStatsReset.setStatus('current')
resetSesStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noReset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetSesStats.setStatus('current')
rfOLTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLTrap.setStatus('current')
rfOLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLThreshold.setStatus('current')
rfOLEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLEnable.setStatus('current')
actionListFilename = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 98), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionListFilename.setStatus('current')
enableAutoupdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAutoupdate.setStatus('current')
accountingSmReAuthInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountingSmReAuthInterval.setStatus('current')
syslogDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDomainNameAppend.setStatus('deprecated')
syslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 102), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddr.setStatus('deprecated')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
syslogXmitAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogXmitAP.setStatus('current')
syslogXmitSMs = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogXmitSMs.setStatus('current')
accountingInterimUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountingInterimUpdateInterval.setStatus('current')
gpsOutputEn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsOutputEn.setStatus('current')
radioMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("combo", 0), ("comboDualChan", 1), ("mimoOnly", 2), ("fskOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioMode.setStatus('obsolete')
rfTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTelnetAccess.setStatus('current')
upLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 208), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkMaxBurstDataRate.setStatus('current')
dwnLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 209), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkMaxBurstDataRate.setStatus('current')
rfPPPoEPADIForwarding = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfPPPoEPADIForwarding.setStatus('current')
allowedIPAccessNMLength1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 211), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength1.setStatus('current')
allowedIPAccessNMLength2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 212), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength2.setStatus('current')
allowedIPAccessNMLength3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 213), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength3.setStatus('current')
bridgeFloodUnknownsEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeFloodUnknownsEnable.setStatus('current')
berModSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 0), ("qam-16", 1), ("qam-64", 2), ("qam-256", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berModSelect.setStatus('current')
remoteSpectrumAnalyzerScanBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bandwidth5MHz", 0), ("bandwidth10MHz", 1), ("bandwidth20MHz", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalyzerScanBandwidth.setStatus('current')
multicastVCDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("disable", 0), ("rate1X", 4), ("rate2X", 5), ("rate4X", 7), ("rate6X", 8), ("rate8X", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVCDataRate.setStatus('current')
dlnkMcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 218), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlnkMcastCIR.setStatus('current')
multicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 219), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastRetryCount.setStatus('current')
apConfigAdjacentChanSupport = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 220), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apConfigAdjacentChanSupport.setStatus('current')
whispRegStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispRegStatus.setStatus('obsolete')
linkTestLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestLUID.setStatus('current')
linkTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDuration.setStatus('current')
linkTestAction = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopped", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestAction.setStatus('current')
linkTestPktLength = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestPktLength.setStatus('current')
linkTestMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rflinktest", 0), ("linktestwithbridging", 1), ("linktestwithbridgingandmir", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestMode.setStatus('current')
linkTestSNRCalculation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestSNRCalculation.setStatus('current')
linkTestWithDualPath = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lowpriorityvconly", 0), ("highandlowpriorityvcs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestWithDualPath.setStatus('current')
linkTestNumPkt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestNumPkt.setStatus('current')
testLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testLUID.setStatus('current')
linkTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestStatus.setStatus('current')
linkTestError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestError.setStatus('current')
testDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testDuration.setStatus('current')
downLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRate.setStatus('current')
upLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 6), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRate.setStatus('current')
downLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkEff.setStatus('current')
maxDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDwnLinkIndex.setStatus('current')
actDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnLinkIndex.setStatus('current')
expDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDwnFragCount.setStatus('current')
actDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnFragCount.setStatus('current')
upLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 12), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkEff.setStatus('current')
expUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expUpFragCount.setStatus('current')
actUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpFragCount.setStatus('current')
maxUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxUpLinkIndex.setStatus('current')
actUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpLinkIndex.setStatus('current')
fragments1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkVertical.setStatus('current')
fragments2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkVertical.setStatus('current')
fragments3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkVertical.setStatus('current')
fragments4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkVertical.setStatus('current')
fragments1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkVertical.setStatus('current')
fragments2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkVertical.setStatus('current')
fragments3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkVertical.setStatus('current')
fragments4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkVertical.setStatus('current')
bitErrorsCorrected1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVertical.setStatus('current')
bitErrorsCorrected2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVertical.setStatus('current')
bitErrorsCorrected3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVertical.setStatus('current')
bitErrorsCorrected4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVertical.setStatus('current')
bitErrorsCorrected1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVertical.setStatus('current')
bitErrorsCorrected2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVertical.setStatus('current')
bitErrorsCorrected3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVertical.setStatus('current')
bitErrorsCorrected4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVertical.setStatus('current')
signalToNoiseRatioDownLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVertical.setStatus('current')
signalToNoiseRatioUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVertical.setStatus('current')
fragments1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontal.setStatus('current')
fragments2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontal.setStatus('current')
fragments3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontal.setStatus('current')
fragments4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontal.setStatus('current')
fragments1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkHorizontal.setStatus('current')
fragments2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkHorizontal.setStatus('current')
fragments3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkHorizontal.setStatus('current')
fragments4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkHorizontal.setStatus('current')
bitErrorsCorrected1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontal.setStatus('current')
bitErrorsCorrected2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontal.setStatus('current')
bitErrorsCorrected3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontal.setStatus('current')
bitErrorsCorrected4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontal.setStatus('current')
bitErrorsCorrected1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontal.setStatus('current')
bitErrorsCorrected2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontal.setStatus('current')
bitErrorsCorrected3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontal.setStatus('current')
bitErrorsCorrected4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontal.setStatus('current')
signalToNoiseRatioDownLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontal.setStatus('current')
signalToNoiseRatioUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontal.setStatus('current')
whispGPSStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gpsSynchronized", 1), ("gpsLostSync", 2), ("generatingSync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispGPSStats.setStatus('current')
gpsSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSyncSource.setStatus('current')
gpsSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSyncStatus.setStatus('current')
gpsTrackingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTrackingMode.setStatus('current')
gpsTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTime.setStatus('current')
gpsDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsDate.setStatus('current')
gpsSatellitesTracked = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesTracked.setStatus('current')
gpsSatellitesVisible = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesVisible.setStatus('current')
gpsHeight = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsHeight.setStatus('current')
gpsAntennaConnection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsAntennaConnection.setStatus('current')
gpsLatitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLatitude.setStatus('current')
gpsLongitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLongitude.setStatus('current')
gpsInvalidMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsInvalidMsg.setStatus('current')
gpsRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsRestartCount.setStatus('current')
gpsReInitCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReInitCount.setStatus('current')
gpsReceiverInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReceiverInfo.setStatus('current')
gpsFreeRun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsFreeRun.setStatus('current')
autoSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noSync", 0), ("onBoardGPSSync", 1), ("timingPortUGPSSync", 2), ("onBoardGPSAndTimingPortUGPSSync", 3), ("powrPortSync", 4), ("onBoardGPSAndPowrPortSync", 5), ("timingPortUGPSAndPowrPortSync", 6), ("onBoardGPSAndTimingPortUGPSAndPowrPortSync", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSyncStatus.setStatus('current')
whispRegComplete = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 1)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispRegComplete.setStatus('current')
whispRegLost = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 2)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispRegLost.setStatus('current')
whispRegFailure = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 3)).setObjects(("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regGrantReason"))
if mibBuilder.loadTexts: whispRegFailure.setStatus('current')
whispDefKeyUsed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 4)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispDefKeyUsed.setStatus('current')
whispGPSInSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 1)).setObjects(("WHISP-APS-MIB", "whispGPSStats"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispGPSInSync.setStatus('current')
whispGPSOutSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 2)).setObjects(("WHISP-APS-MIB", "gpsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispGPSOutSync.setStatus('current')
whispRadarDetected = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 1)).setObjects(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarDetected.setStatus('current')
whispRadarEnd = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 2)).setObjects(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarEnd.setStatus('current')
regulatoryApCheckInvalidChanFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 1)).setObjects(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryApCheckInvalidChanFailed.setStatus('current')
regulatoryCheckFailedNoRegionAp = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryCheckFailedNoRegionAp.setStatus('current')
regulatoryApCheckInvalidChBwFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 3)).setObjects(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryApCheckInvalidChBwFailed.setStatus('current')
rfLinkOverloadCondition = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5, 1)).setObjects(("WHISP-APS-MIB", "rfOutDiscardRate"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: rfLinkOverloadCondition.setStatus('current')
whispLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 1)).setObjects(("WHISP-APS-MIB", "linkTestLUID"), ("WHISP-APS-MIB", "linkTestDuration"), ("WHISP-APS-MIB", "linkTestAction"), ("WHISP-APS-MIB", "linkTestPktLength"), ("WHISP-APS-MIB", "testLUID"), ("WHISP-APS-MIB", "linkTestStatus"), ("WHISP-APS-MIB", "linkTestError"), ("WHISP-APS-MIB", "testDuration"), ("WHISP-APS-MIB", "downLinkRate"), ("WHISP-APS-MIB", "upLinkRate"), ("WHISP-APS-MIB", "downLinkEff"), ("WHISP-APS-MIB", "maxDwnLinkIndex"), ("WHISP-APS-MIB", "actDwnLinkIndex"), ("WHISP-APS-MIB", "expDwnFragCount"), ("WHISP-APS-MIB", "actDwnFragCount"), ("WHISP-APS-MIB", "upLinkEff"), ("WHISP-APS-MIB", "expUpFragCount"), ("WHISP-APS-MIB", "actUpFragCount"), ("WHISP-APS-MIB", "maxUpLinkIndex"), ("WHISP-APS-MIB", "actUpLinkIndex"), ("WHISP-APS-MIB", "fragments1xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments2xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments3xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments4xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments1xUpLinkVertical"), ("WHISP-APS-MIB", "fragments2xUpLinkVertical"), ("WHISP-APS-MIB", "fragments3xUpLinkVertical"), ("WHISP-APS-MIB", "fragments4xUpLinkVertical"), ("WHISP-APS-MIB", "fragments1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments1xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkHorizontal"), ("WHISP-APS-MIB", "linkTestSNRCalculation"), ("WHISP-APS-MIB", "linkTestWithDualPath"), ("WHISP-APS-MIB", "linkTestMode"), ("WHISP-APS-MIB", "linkTestNumPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispLinkTestGroup = whispLinkTestGroup.setStatus('current')
whispApsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 2)).setObjects(("WHISP-APS-MIB", "gpsInput"), ("WHISP-APS-MIB", "rfFreqCarrier"), ("WHISP-APS-MIB", "dwnLnkData"), ("WHISP-APS-MIB", "highPriorityUpLnkPct"), ("WHISP-APS-MIB", "numUAckSlots"), ("WHISP-APS-MIB", "uAcksReservHigh"), ("WHISP-APS-MIB", "numDAckSlots"), ("WHISP-APS-MIB", "dAcksReservHigh"), ("WHISP-APS-MIB", "numCtlSlots"), ("WHISP-APS-MIB", "numCtlSlotsReserveHigh"), ("WHISP-APS-MIB", "upLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "upLnkDataRate"), ("WHISP-APS-MIB", "upLnkLimit"), ("WHISP-APS-MIB", "dwnLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "dwnLnkDataRate"), ("WHISP-APS-MIB", "dwnLnkLimit"), ("WHISP-APS-MIB", "sectorID"), ("WHISP-APS-MIB", "maxRange"), ("WHISP-APS-MIB", "asIP1"), ("WHISP-APS-MIB", "asIP2"), ("WHISP-APS-MIB", "asIP3"), ("WHISP-APS-MIB", "asIP4"), ("WHISP-APS-MIB", "asIP5"), ("WHISP-APS-MIB", "lanIpAp"), ("WHISP-APS-MIB", "lanMaskAp"), ("WHISP-APS-MIB", "defaultGwAp"), ("WHISP-APS-MIB", "privateIp"), ("WHISP-APS-MIB", "gpsTrap"), ("WHISP-APS-MIB", "regTrap"), ("WHISP-APS-MIB", "txSpreading"), ("WHISP-APS-MIB", "apBeaconInfo"), ("WHISP-APS-MIB", "authMode"), ("WHISP-APS-MIB", "authKeyAp"), ("WHISP-APS-MIB", "authKeyOptionAP"), ("WHISP-APS-MIB", "encryptionMode"), ("WHISP-APS-MIB", "ntpServerIp"), ("WHISP-APS-MIB", "multicastRetryCount"), ("WHISP-APS-MIB", "encryptDwBroadcast"), ("WHISP-APS-MIB", "updateAppAddress"), ("WHISP-APS-MIB", "dfsConfig"), ("WHISP-APS-MIB", "vlanEnable"), ("WHISP-APS-MIB", "configSource"), ("WHISP-APS-MIB", "apRateAdapt"), ("WHISP-APS-MIB", "numCtlSlotsHW"), ("WHISP-APS-MIB", "displayAPEval"), ("WHISP-APS-MIB", "smIsolation"), ("WHISP-APS-MIB", "bridgeFloodUnknownsEnable"), ("WHISP-APS-MIB", "ipAccessFilterEnable"), ("WHISP-APS-MIB", "allowedIPAccess1"), ("WHISP-APS-MIB", "allowedIPAccess2"), ("WHISP-APS-MIB", "allowedIPAccess3"), ("WHISP-APS-MIB", "allowedIPAccessNMLength1"), ("WHISP-APS-MIB", "allowedIPAccessNMLength2"), ("WHISP-APS-MIB", "allowedIPAccessNMLength3"), ("WHISP-APS-MIB", "rfTelnetAccess"), ("WHISP-APS-MIB", "rfPPPoEPADIForwarding"), ("WHISP-APS-MIB", "tslBridging"), ("WHISP-APS-MIB", "untranslatedArp"), ("WHISP-APS-MIB", "limitFreqBand900"), ("WHISP-APS-MIB", "txPwrLevel"), ("WHISP-APS-MIB", "rfFreqCaralt1"), ("WHISP-APS-MIB", "rfFreqCaralt2"), ("WHISP-APS-MIB", "scheduleWhitening"), ("WHISP-APS-MIB", "remoteSpectrumAnalysisDuration"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerLUID"), ("WHISP-APS-MIB", "bhReReg"), ("WHISP-APS-MIB", "dlnkBcastCIR"), ("WHISP-APS-MIB", "dlnkMcastCIR"), ("WHISP-APS-MIB", "verifyGPSChecksum"), ("WHISP-APS-MIB", "qinqEthType"), ("WHISP-APS-MIB", "multicastVCDataRate"), ("WHISP-APS-MIB", "colorCodeRescanTimer"), ("WHISP-APS-MIB", "colorCodeRescanIdleTimer"), ("WHISP-APS-MIB", "fskSMTxPwrCntl"), ("WHISP-APS-MIB", "fskSMRcvTargetLvl"), ("WHISP-APS-MIB", "berModSelect"), ("WHISP-APS-MIB", "lastSesStatsReset"), ("WHISP-APS-MIB", "resetSesStats"), ("WHISP-APS-MIB", "syslogDomainNameAppend"), ("WHISP-APS-MIB", "syslogServerAddr"), ("WHISP-APS-MIB", "syslogServerPort"), ("WHISP-APS-MIB", "syslogXmitAP"), ("WHISP-APS-MIB", "syslogXmitSMs"), ("WHISP-APS-MIB", "uGPSPower"), ("WHISP-APS-MIB", "gpsOutputEn"), ("WHISP-APS-MIB", "radioMode"), ("WHISP-APS-MIB", "authSharedSecret1"), ("WHISP-APS-MIB", "authSharedSecret2"), ("WHISP-APS-MIB", "authSharedSecret3"), ("WHISP-APS-MIB", "radiusPort"), ("WHISP-APS-MIB", "radiusAcctPort"), ("WHISP-APS-MIB", "rfOLEnable"), ("WHISP-APS-MIB", "rfOLTrap"), ("WHISP-APS-MIB", "rfOLThreshold"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerScanBandwidth"), ("WHISP-APS-MIB", "apConfigAdjacentChanSupport"), ("WHISP-APS-MIB", "ofdmSMRcvTargetLvl"), ("WHISP-APS-MIB", "apRxDelay"), ("WHISP-APS-MIB", "apVlanOverride"), ("WHISP-APS-MIB", "dhcpRelayAgentEnable"), ("WHISP-APS-MIB", "dhcpRelayAgentSrvrIP"), ("WHISP-APS-MIB", "onlyAllowVer95OrAbove"), ("WHISP-APS-MIB", "whispWebUseAuthServer"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret1"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret2"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret3"), ("WHISP-APS-MIB", "whispUsrAcctSvr1"), ("WHISP-APS-MIB", "whispUsrAcctSvr2"), ("WHISP-APS-MIB", "whispUsrAcctSvr3"), ("WHISP-APS-MIB", "whispUsrAuthPhase1"), ("WHISP-APS-MIB", "accountingInterimUpdateInterval"), ("WHISP-APS-MIB", "accountingSmReAuthInterval"), ("WHISP-APS-MIB", "dropSession"), ("WHISP-APS-MIB", "timeZone"), ("WHISP-APS-MIB", "actionListFilename"), ("WHISP-APS-MIB", "enableAutoupdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsConfigGroup = whispApsConfigGroup.setStatus('current')
whispApsLinkTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 3)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkDescr"), ("WHISP-APS-MIB", "linkPhysAddress"), ("WHISP-APS-MIB", "linkManagementIP"), ("WHISP-APS-MIB", "linkFragmentsReceived1XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived2XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived3XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived4XVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived1XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived2XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived3XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived4XHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioHorizontal"), ("WHISP-APS-MIB", "linkSignalStrengthRatio"), ("WHISP-APS-MIB", "linkRadioDbmHorizontal"), ("WHISP-APS-MIB", "linkRadioDbmVertical"), ("WHISP-APS-MIB", "maxSMTxPwr"), ("WHISP-APS-MIB", "productType"), ("WHISP-APS-MIB", "linkAdaptRateLowPri"), ("WHISP-APS-MIB", "linkAdaptRateHighPri"), ("WHISP-APS-MIB", "autoUpdateStatus"), ("WHISP-APS-MIB", "linkMtu"), ("WHISP-APS-MIB", "linkSpeed"), ("WHISP-APS-MIB", "linkOperStatus"), ("WHISP-APS-MIB", "linkInOctets"), ("WHISP-APS-MIB", "linkInUcastPkts"), ("WHISP-APS-MIB", "linkInNUcastPkts"), ("WHISP-APS-MIB", "linkInDiscards"), ("WHISP-APS-MIB", "linkInError"), ("WHISP-APS-MIB", "linkInUnknownProtos"), ("WHISP-APS-MIB", "linkOutOctets"), ("WHISP-APS-MIB", "linkOutUcastPkts"), ("WHISP-APS-MIB", "linkOutNUcastPkts"), ("WHISP-APS-MIB", "linkOutDiscards"), ("WHISP-APS-MIB", "linkOutError"), ("WHISP-APS-MIB", "linkOutQLen"), ("WHISP-APS-MIB", "linkSessState"), ("WHISP-APS-MIB", "linkESN"), ("WHISP-APS-MIB", "linkRSSI"), ("WHISP-APS-MIB", "linkAveJitter"), ("WHISP-APS-MIB", "linkLastJitter"), ("WHISP-APS-MIB", "linkAirDelay"), ("WHISP-APS-MIB", "linkRegCount"), ("WHISP-APS-MIB", "linkReRegCount"), ("WHISP-APS-MIB", "linkTimeOut"), ("WHISP-APS-MIB", "linkLastRSSI"), ("WHISP-APS-MIB", "sessionCount"), ("WHISP-APS-MIB", "softwareVersion"), ("WHISP-APS-MIB", "softwareBootVersion"), ("WHISP-APS-MIB", "fpgaVersion"), ("WHISP-APS-MIB", "linkSiteName"), ("WHISP-APS-MIB", "avgPowerLevel"), ("WHISP-APS-MIB", "lastPowerLevel"), ("WHISP-APS-MIB", "sesDownLinkRate"), ("WHISP-APS-MIB", "sesDownLinkLimit"), ("WHISP-APS-MIB", "sesUpLinkRate"), ("WHISP-APS-MIB", "sesUpLinkLimit"), ("WHISP-APS-MIB", "adaptRate"), ("WHISP-APS-MIB", "sesLoUpCIR"), ("WHISP-APS-MIB", "sesLoDownCIR"), ("WHISP-APS-MIB", "sesHiUpCIR"), ("WHISP-APS-MIB", "sesHiDownCIR"), ("WHISP-APS-MIB", "platformVer"), ("WHISP-APS-MIB", "smSessionTmr"), ("WHISP-APS-MIB", "smSessionSeqNumMismatch"), ("WHISP-APS-MIB", "dataVCNum"), ("WHISP-APS-MIB", "hiPriQEn"), ("WHISP-APS-MIB", "dataVCNumHiQ"), ("WHISP-APS-MIB", "linkInOctetsHiQ"), ("WHISP-APS-MIB", "linkInUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInDiscardsHiQ"), ("WHISP-APS-MIB", "linkInErrorHiQ"), ("WHISP-APS-MIB", "linkInUnknownProtosHiQ"), ("WHISP-APS-MIB", "linkOutOctetsHiQ"), ("WHISP-APS-MIB", "linkOutUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutDiscardsHiQ"), ("WHISP-APS-MIB", "linkOutErrorHiQ"), ("WHISP-APS-MIB", "vcQOverflow"), ("WHISP-APS-MIB", "vcQOverflowHiQ"), ("WHISP-APS-MIB", "p7p8HiPriQEn"), ("WHISP-APS-MIB", "p7p8HiPriQ"), ("WHISP-APS-MIB", "linkAirDelayns"), ("WHISP-APS-MIB", "linkQualityAPData"), ("WHISP-APS-MIB", "radiusReplyMsg"), ("WHISP-APS-MIB", "radiusFramedIPAddress"), ("WHISP-APS-MIB", "radiusFramedIPNetmask"), ("WHISP-APS-MIB", "radiusDefaultGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsLinkTableGroup = whispApsLinkTableGroup.setStatus('current')
whispApsNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 4)).setObjects(("WHISP-APS-MIB", "whispRegComplete"), ("WHISP-APS-MIB", "whispRegLost"), ("WHISP-APS-MIB", "whispRegFailure"), ("WHISP-APS-MIB", "whispDefKeyUsed"), ("WHISP-APS-MIB", "whispGPSInSync"), ("WHISP-APS-MIB", "whispGPSOutSync"), ("WHISP-APS-MIB", "whispRadarDetected"), ("WHISP-APS-MIB", "whispRadarEnd"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChanFailed"), ("WHISP-APS-MIB", "regulatoryCheckFailedNoRegionAp"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChBwFailed"), ("WHISP-APS-MIB", "rfLinkOverloadCondition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsNotifGroup = whispApsNotifGroup.setStatus('current')
whispApsFailedRegTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 5)).setObjects(("WHISP-APS-MIB", "regGrantReason"), ("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regFailTime"), ("WHISP-APS-MIB", "regFailSeqNum"), ("WHISP-APS-MIB", "regFailReasonText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsFailedRegTableGroup = whispApsFailedRegTableGroup.setStatus('current')
regCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regCount.setStatus('current')
gpsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsStatus.setStatus('current')
radioSlicingAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioSlicingAp.setStatus('obsolete')
radioTxGainAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxGainAp.setStatus('current')
dataSlotDwn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotDwn.setStatus('current')
dataSlotUp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotUp.setStatus('current')
dataSlotUpHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotUpHi.setStatus('current')
upLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upLnkAckSlot.setStatus('current')
upLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upLnkAckSlotHi.setStatus('current')
dwnLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnLnkAckSlot.setStatus('current')
dwnLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnLnkAckSlotHi.setStatus('current')
numCtrSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCtrSlot.setStatus('current')
numCtrSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCtrSlotHi.setStatus('current')
dfsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatus.setStatus('current')
dfsStatusPrimary = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusPrimary.setStatus('current')
dfsStatusAlt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusAlt1.setStatus('current')
dfsStatusAlt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusAlt2.setStatus('current')
maxRegSMCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRegSMCount.setStatus('current')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('current')
lastNTPTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastNTPTime.setStatus('current')
regulatoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regulatoryStatus.setStatus('current')
dhcpRlyAgntStat_reqRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 22), Counter32()).setLabel("dhcpRlyAgntStat-reqRecvd").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRecvd.setStatus('current')
dhcpRlyAgntStat_reqRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 23), Counter32()).setLabel("dhcpRlyAgntStat-reqRelayed").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRelayed.setStatus('current')
dhcpRlyAgntStat_reqDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 24), Counter32()).setLabel("dhcpRlyAgntStat-reqDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqDiscards.setStatus('current')
dhcpRlyAgntStat_respRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 25), Counter32()).setLabel("dhcpRlyAgntStat-respRecvd").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRecvd.setStatus('current')
dhcpRlyAgntStat_respRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 26), Counter32()).setLabel("dhcpRlyAgntStat-respRelayed").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRelayed.setStatus('current')
dhcpRlyAgntStat_respDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 27), Counter32()).setLabel("dhcpRlyAgntStat-respDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respDiscards.setStatus('current')
dhcpRlyAgntStat_untrustedDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 28), Counter32()).setLabel("dhcpRlyAgntStat-untrustedDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_untrustedDiscards.setStatus('current')
dhcpRlyAgntStat_maxHopDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 29), Counter32()).setLabel("dhcpRlyAgntStat-maxHopDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_maxHopDiscards.setStatus('current')
dhcpRlyAgntStat_pktTooBig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 30), Counter32()).setLabel("dhcpRlyAgntStat-pktTooBig").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_pktTooBig.setStatus('current')
dhcpRlyAgntStat_invalidGiaddrDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 31), Counter32()).setLabel("dhcpRlyAgntStat-invalidGiaddrDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_invalidGiaddrDiscards.setStatus('current')
regFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailureCount.setStatus('current')
ntpLogSNMP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 33), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLogSNMP.setStatus('current')
uGPSPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uGPSPowerStatus.setStatus('current')
rfOutDiscardRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardRate.setStatus('current')
autoUpdateGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoUpdateGlobalStatus.setStatus('current')
currentRadioFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentRadioFreqCarrier.setStatus('current')
ntpDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpDomainNameAppend.setStatus('current')
ntpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer1.setStatus('current')
ntpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer2.setStatus('current')
ntpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer3.setStatus('current')
dhcprDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcprDomainNameAppend.setStatus('current')
dhcprServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcprServer.setStatus('current')
authDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDNSDomain", 0), ("enableDNSDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authDomainNameAppend.setStatus('current')
authServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer1.setStatus('current')
authServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer2.setStatus('current')
authServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer3.setStatus('current')
authServer4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer4.setStatus('current')
authServer5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer5.setStatus('current')
acctDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctDomainNameAppend.setStatus('obsolete')
clearLinkTableStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearLinkTableStats.setStatus('current')
whispApsRFConfigRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1), )
if mibBuilder.loadTexts: whispApsRFConfigRadios.setStatus('current')
whispApsRFConfigRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1), )
whispBoxRFPhysicalRadioEntry.registerAugmentions(("WHISP-APS-MIB", "whispApsRFConfigRadioEntry"))
whispApsRFConfigRadioEntry.setIndexNames(*whispBoxRFPhysicalRadioEntry.getIndexNames())
if mibBuilder.loadTexts: whispApsRFConfigRadioEntry.setStatus('current')
radioFreqCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("wired", 0)))).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioFreqCarrier.setStatus('current')
radioDownlinkPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioDownlinkPercent.setStatus('current')
radioMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 3), Integer32()).setUnits('miles').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioMaxRange.setStatus('current')
radioControlSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioControlSlots.setStatus('current')
radioTransmitOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTransmitOutputPower.setStatus('current')
radioColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioColorCode.setStatus('current')
whispLinkTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4), )
if mibBuilder.loadTexts: whispLinkTable.setStatus('current')
whispLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1), ).setIndexNames((0, "WHISP-APS-MIB", "linkLUID"))
if mibBuilder.loadTexts: whispLinkEntry.setStatus('current')
linkLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLUID.setStatus('current')
linkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDescr.setStatus('current')
linkPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPhysAddress.setStatus('current')
linkMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkMtu.setStatus('current')
linkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSpeed.setStatus('current')
linkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperStatus.setStatus('obsolete')
linkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInOctets.setStatus('current')
linkInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUcastPkts.setStatus('current')
linkInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInNUcastPkts.setStatus('current')
linkInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInDiscards.setStatus('current')
linkInError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInError.setStatus('current')
linkInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUnknownProtos.setStatus('current')
linkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutOctets.setStatus('current')
linkOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutUcastPkts.setStatus('current')
linkOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutNUcastPkts.setStatus('current')
linkOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutDiscards.setStatus('current')
linkOutError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutError.setStatus('current')
linkOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutQLen.setStatus('current')
linkSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("inSession", 1), ("clearing", 2), ("reRegDnRst", 3), ("authChal", 4), ("registering", 5), ("notInUse", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSessState.setStatus('current')
linkESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 20), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkESN.setStatus('current')
linkRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRSSI.setStatus('current')
linkAveJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAveJitter.setStatus('current')
linkLastJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 23), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLastJitter.setStatus('current')
linkAirDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAirDelay.setStatus('current')
linkRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRegCount.setStatus('current')
linkReRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReRegCount.setStatus('current')
linkTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTimeOut.setStatus('current')
linkLastRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLastRSSI.setStatus('current')
sessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCount.setStatus('current')
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
softwareBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareBootVersion.setStatus('current')
fpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaVersion.setStatus('current')
linkSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSiteName.setStatus('current')
avgPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPowerLevel.setStatus('current')
lastPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastPowerLevel.setStatus('current')
sesDownLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesDownLinkRate.setStatus('current')
sesDownLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesDownLinkLimit.setStatus('current')
sesUpLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesUpLinkRate.setStatus('current')
sesUpLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesUpLinkLimit.setStatus('current')
adaptRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptRate.setStatus('current')
sesLoUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesLoUpCIR.setStatus('current')
sesLoDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesLoDownCIR.setStatus('current')
sesHiUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesHiUpCIR.setStatus('current')
sesHiDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesHiDownCIR.setStatus('current')
platformVer = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVer.setStatus('current')
smSessionTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSessionTmr.setStatus('current')
smSessionSeqNumMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSessionSeqNumMismatch.setStatus('current')
dataVCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataVCNum.setStatus('current')
hiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiPriQEn.setStatus('current')
dataVCNumHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataVCNumHiQ.setStatus('current')
linkInOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInOctetsHiQ.setStatus('current')
linkInUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUcastPktsHiQ.setStatus('current')
linkInNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInNUcastPktsHiQ.setStatus('current')
linkInDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInDiscardsHiQ.setStatus('current')
linkInErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInErrorHiQ.setStatus('current')
linkInUnknownProtosHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUnknownProtosHiQ.setStatus('current')
linkOutOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutOctetsHiQ.setStatus('current')
linkOutUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutUcastPktsHiQ.setStatus('current')
linkOutNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutNUcastPktsHiQ.setStatus('current')
linkOutDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutDiscardsHiQ.setStatus('current')
linkOutErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutErrorHiQ.setStatus('current')
vcQOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcQOverflow.setStatus('current')
vcQOverflowHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcQOverflowHiQ.setStatus('current')
p7p8HiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled-or-NA", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p7p8HiPriQEn.setStatus('current')
p7p8HiPriQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p7p8HiPriQ.setStatus('current')
linkAirDelayns = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAirDelayns.setStatus('current')
linkQualityAPData = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityAPData.setStatus('current')
linkManagementIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 69), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkManagementIP.setStatus('current')
linkFragmentsReceived1XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived1XVertical.setStatus('current')
linkFragmentsReceived2XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived2XVertical.setStatus('current')
linkFragmentsReceived3XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived3XVertical.setStatus('current')
linkFragmentsReceived4XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived4XVertical.setStatus('current')
signalToNoiseRatioVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioVertical.setStatus('current')
radiusReplyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusReplyMsg.setStatus('current')
autoUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoUpdateStatus.setStatus('current')
radiusFramedIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 77), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusFramedIPAddress.setStatus('current')
radiusFramedIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 78), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusFramedIPNetmask.setStatus('current')
radiusDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 79), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDefaultGateway.setStatus('current')
linkFragmentsReceived1XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived1XHorizontal.setStatus('current')
linkFragmentsReceived2XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived2XHorizontal.setStatus('current')
linkFragmentsReceived3XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived3XHorizontal.setStatus('current')
linkFragmentsReceived4XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived4XHorizontal.setStatus('current')
signalToNoiseRatioHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioHorizontal.setStatus('current')
linkSignalStrengthRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSignalStrengthRatio.setStatus('current')
linkRadioDbmHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 87), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRadioDbmHorizontal.setStatus('current')
linkRadioDbmVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRadioDbmVertical.setStatus('current')
maxSMTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSMTxPwr.setStatus('current')
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("pmp450MIMOOFDM", 1), ("pmp430SISOOFDM", 2), ("pmp450SISOOFDM", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
linkAdaptRateLowPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdaptRateLowPri.setStatus('current')
linkAdaptRateHighPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noHighPriorityChannel", -1), ("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdaptRateHighPri.setStatus('current')
whispFailedRegTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8), )
if mibBuilder.loadTexts: whispFailedRegTable.setStatus('current')
whispFailedRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1), ).setIndexNames((0, "WHISP-APS-MIB", "regFailSeqNum"))
if mibBuilder.loadTexts: whispFailedRegEntry.setStatus('current')
regGrantReason = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("reggnt-valid", 0), ("reggnt-outofrange", 1), ("reggnt-nolUIDS", 2), ("reggnt-rerange", 3), ("reggnt-authfail", 4), ("reggnt-encryptfail", 5), ("reggnt-poweradjust", 6), ("reggnt-novcs", 7), ("reggnt-failvcreserve", 8), ("reggnt-failvcactive", 9), ("reggnt-failhivcdata", 10), ("reggnt-failsmlimit", 11), ("reggnt-fail95orabove", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regGrantReason.setStatus('current')
regFailESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailESN.setStatus('current')
regFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailTime.setStatus('current')
regFailSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailSeqNum.setStatus('current')
regFailReasonText = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailReasonText.setStatus('current')
mibBuilder.exportSymbols("WHISP-APS-MIB", whispApsMibModule=whispApsMibModule, upLnkAckSlot=upLnkAckSlot, linkOutDiscardsHiQ=linkOutDiscardsHiQ, verifyGPSChecksum=verifyGPSChecksum, gpsReceiverInfo=gpsReceiverInfo, linkInUcastPktsHiQ=linkInUcastPktsHiQ, gpsAntennaConnection=gpsAntennaConnection, regFailESN=regFailESN, syslogXmitAP=syslogXmitAP, fragments4xDwnLinkVertical=fragments4xDwnLinkVertical, linkInDiscards=linkInDiscards, testDuration=testDuration, sesHiDownCIR=sesHiDownCIR, bridgeFloodUnknownsEnable=bridgeFloodUnknownsEnable, asIP4=asIP4, linkLastJitter=linkLastJitter, fragments3xUpLinkVertical=fragments3xUpLinkVertical, maxDwnLinkIndex=maxDwnLinkIndex, dwnLnkAckSlotHi=dwnLnkAckSlotHi, linkTestAction=linkTestAction, ntpServer3=ntpServer3, sesDownLinkRate=sesDownLinkRate, p7p8HiPriQ=p7p8HiPriQ, apConfigAdjacentChanSupport=apConfigAdjacentChanSupport, lastNTPTime=lastNTPTime, maxUpLinkIndex=maxUpLinkIndex, whispApsConfig=whispApsConfig, apLinkSpeed=apLinkSpeed, fragments2xDwnLinkHorizontal=fragments2xDwnLinkHorizontal, whispApsLinkTableGroup=whispApsLinkTableGroup, actionListFilename=actionListFilename, broadcastRetryCount=broadcastRetryCount, encryptionMode=encryptionMode, timeZone=timeZone, whispRegLost=whispRegLost, numCtlSlotsReserveHigh=numCtlSlotsReserveHigh, bitErrorsCorrected2xDwnLinkVertical=bitErrorsCorrected2xDwnLinkVertical, whispRadarEnd=whispRadarEnd, radiusFramedIPAddress=radiusFramedIPAddress, ntpServerIp=ntpServerIp, dhcpRlyAgntStat_untrustedDiscards=dhcpRlyAgntStat_untrustedDiscards, asIP5=asIP5, radioSlicingAp=radioSlicingAp, ipAccessFilterEnable=ipAccessFilterEnable, vcQOverflowHiQ=vcQOverflowHiQ, accountingSmReAuthInterval=accountingSmReAuthInterval, linkInDiscardsHiQ=linkInDiscardsHiQ, ntpServer2=ntpServer2, syslogServerPort=syslogServerPort, fskSMTxPwrCntl=fskSMTxPwrCntl, uAcksReservHigh=uAcksReservHigh, authSharedSecret2=authSharedSecret2, actUpFragCount=actUpFragCount, dhcpRlyAgntStat_reqRelayed=dhcpRlyAgntStat_reqRelayed, regFailReasonText=regFailReasonText, linkTestWithDualPath=linkTestWithDualPath, authServer3=authServer3, linkOutOctets=linkOutOctets, lanMaskAp=lanMaskAp, smSessionSeqNumMismatch=smSessionSeqNumMismatch, syslogServerAddr=syslogServerAddr, sesDownLinkLimit=sesDownLinkLimit, dataSlotUp=dataSlotUp, regulatoryStatus=regulatoryStatus, numDAckSlots=numDAckSlots, linkInUnknownProtos=linkInUnknownProtos, bhReReg=bhReReg, berModSelect=berModSelect, gpsTime=gpsTime, authKeyOptionAP=authKeyOptionAP, gpsReInitCount=gpsReInitCount, dfsConfig=dfsConfig, whispRadarDetected=whispRadarDetected, autoUpdateStatus=autoUpdateStatus, fragments4xUpLinkHorizontal=fragments4xUpLinkHorizontal, syslogDomainNameAppend=syslogDomainNameAppend, linkSessState=linkSessState, whispFailedRegTable=whispFailedRegTable, linkFragmentsReceived2XVertical=linkFragmentsReceived2XVertical, actUpLinkIndex=actUpLinkIndex, whispApsDfsEvent=whispApsDfsEvent, upLinkEff=upLinkEff, sesUpLinkLimit=sesUpLinkLimit, asIP2=asIP2, linkManagementIP=linkManagementIP, bitErrorsCorrected3xUpLinkVertical=bitErrorsCorrected3xUpLinkVertical, regulatoryApCheckInvalidChanFailed=regulatoryApCheckInvalidChanFailed, rfPPPoEPADIForwarding=rfPPPoEPADIForwarding, bitErrorsCorrected2xUpLinkVertical=bitErrorsCorrected2xUpLinkVertical, bitErrorsCorrected4xUpLinkHorizontal=bitErrorsCorrected4xUpLinkHorizontal, whispUsrAuthSharedSecret3=whispUsrAuthSharedSecret3, systemTime=systemTime, signalToNoiseRatioUpLinkHorizontal=signalToNoiseRatioUpLinkHorizontal, displayAPEval=displayAPEval, dfsStatusPrimary=dfsStatusPrimary, rfFreqCaralt1=rfFreqCaralt1, PYSNMP_MODULE_ID=whispApsMibModule, fragments4xUpLinkVertical=fragments4xUpLinkVertical, privateIp=privateIp, authSharedSecret3=authSharedSecret3, rfOLThreshold=rfOLThreshold, adaptRate=adaptRate, radioTxGainAp=radioTxGainAp, linkOutQLen=linkOutQLen, whispApRegulatoryEvent=whispApRegulatoryEvent, dhcpRlyAgntStat_respRecvd=dhcpRlyAgntStat_respRecvd, radioDownlinkPercent=radioDownlinkPercent, rfFreqCaralt2=rfFreqCaralt2, fskSMRcvTargetLvl=fskSMRcvTargetLvl, clearLinkTableStats=clearLinkTableStats, whispApsDNS=whispApsDNS, fragments3xUpLinkHorizontal=fragments3xUpLinkHorizontal, rfFreqCarrier=rfFreqCarrier, linkMtu=linkMtu, whispUsrAuthSharedSecret1=whispUsrAuthSharedSecret1, whispApsNotifGroup=whispApsNotifGroup, linkOutErrorHiQ=linkOutErrorHiQ, softwareBootVersion=softwareBootVersion, linkTestPktLength=linkTestPktLength, dfsStatusAlt1=dfsStatusAlt1, gpsLongitude=gpsLongitude, whispApsLink=whispApsLink, downLinkRate=downLinkRate, linkTestNumPkt=linkTestNumPkt, linkFragmentsReceived2XHorizontal=linkFragmentsReceived2XHorizontal, multicastVCDataRate=multicastVCDataRate, gpsSyncSource=gpsSyncSource, whispRegComplete=whispRegComplete, linkInError=linkInError, radiusAcctPort=radiusAcctPort, whispUsrAuthSharedSecret2=whispUsrAuthSharedSecret2, dhcpRlyAgntStat_maxHopDiscards=dhcpRlyAgntStat_maxHopDiscards, uGPSPowerStatus=uGPSPowerStatus, maxSMTxPwr=maxSMTxPwr, txSpreading=txSpreading, sesLoUpCIR=sesLoUpCIR, whispUsrAuthPhase1=whispUsrAuthPhase1, regGrantReason=regGrantReason, rfLinkOverloadCondition=rfLinkOverloadCondition, dlnkBcastCIR=dlnkBcastCIR, uGPSPower=uGPSPower, whispRegFailure=whispRegFailure, gpsDate=gpsDate, whispGPSStats=whispGPSStats, autoUpdateGlobalStatus=autoUpdateGlobalStatus, defaultGwAp=defaultGwAp, gpsSyncStatus=gpsSyncStatus, linkESN=linkESN, authMode=authMode, dropSession=dropSession, bitErrorsCorrected1xDwnLinkVertical=bitErrorsCorrected1xDwnLinkVertical, linkInNUcastPktsHiQ=linkInNUcastPktsHiQ, bitErrorsCorrected4xDwnLinkHorizontal=bitErrorsCorrected4xDwnLinkHorizontal, fragments1xDwnLinkHorizontal=fragments1xDwnLinkHorizontal, authDomainNameAppend=authDomainNameAppend, whispApsRFConfig=whispApsRFConfig, whispApsRFConfigRadios=whispApsRFConfigRadios, signalToNoiseRatioVertical=signalToNoiseRatioVertical, linkLastRSSI=linkLastRSSI, linkPhysAddress=linkPhysAddress, asIP1=asIP1, allowedIPAccess2=allowedIPAccess2, colorCodeRescanTimer=colorCodeRescanTimer, bitErrorsCorrected1xUpLinkHorizontal=bitErrorsCorrected1xUpLinkHorizontal, enableAutoupdate=enableAutoupdate, gpsFreeRun=gpsFreeRun, bitErrorsCorrected1xUpLinkVertical=bitErrorsCorrected1xUpLinkVertical, whispGPSInSync=whispGPSInSync, upLnkLimit=upLnkLimit, lastPowerLevel=lastPowerLevel, bitErrorsCorrected3xUpLinkHorizontal=bitErrorsCorrected3xUpLinkHorizontal, lanIpAp=lanIpAp, linkRadioDbmVertical=linkRadioDbmVertical, dfsStatusAlt2=dfsStatusAlt2, dfsStatus=dfsStatus, acctDomainNameAppend=acctDomainNameAppend, regFailSeqNum=regFailSeqNum, radioTransmitOutputPower=radioTransmitOutputPower, dhcpRlyAgntStat_invalidGiaddrDiscards=dhcpRlyAgntStat_invalidGiaddrDiscards, bitErrorsCorrected3xDwnLinkVertical=bitErrorsCorrected3xDwnLinkVertical, allowedIPAccessNMLength2=allowedIPAccessNMLength2, whispApsGPS=whispApsGPS, bitErrorsCorrected4xDwnLinkVertical=bitErrorsCorrected4xDwnLinkVertical, linkFragmentsReceived4XVertical=linkFragmentsReceived4XVertical, whispWebUseAuthServer=whispWebUseAuthServer, linkOutNUcastPkts=linkOutNUcastPkts, whispApRFOverloadEvent=whispApRFOverloadEvent, linkInNUcastPkts=linkInNUcastPkts, linkAirDelay=linkAirDelay, expUpFragCount=expUpFragCount, gpsSatellitesVisible=gpsSatellitesVisible, bitErrorsCorrected4xUpLinkVertical=bitErrorsCorrected4xUpLinkVertical, numUAckSlots=numUAckSlots, linkTimeOut=linkTimeOut, whispGPSEvent=whispGPSEvent, airLinkSecurity=airLinkSecurity, testLUID=testLUID, untranslatedArp=untranslatedArp, sesUpLinkRate=sesUpLinkRate, dAcksReservHigh=dAcksReservHigh, whispUsrAcctSvr1=whispUsrAcctSvr1, whispApsFailedRegTableGroup=whispApsFailedRegTableGroup, numCtrSlotHi=numCtrSlotHi, linkRSSI=linkRSSI, sesHiUpCIR=sesHiUpCIR, dlnkMcastCIR=dlnkMcastCIR, linkReRegCount=linkReRegCount, radiusReplyMsg=radiusReplyMsg, whispFailedRegEntry=whispFailedRegEntry, maxRegSMCount=maxRegSMCount, downLinkEff=downLinkEff, linkTestStatus=linkTestStatus, linkRegCount=linkRegCount, linkTestSNRCalculation=linkTestSNRCalculation, upLnkDataRate=upLnkDataRate, gpsLatitude=gpsLatitude, gpsTrap=gpsTrap, whispUsrAcctSvr2=whispUsrAcctSvr2, whispApsGroups=whispApsGroups, radiusDefaultGateway=radiusDefaultGateway, maxRange=maxRange, ntpLogSNMP=ntpLogSNMP, radioColorCode=radioColorCode, fragments1xUpLinkHorizontal=fragments1xUpLinkHorizontal, signalToNoiseRatioDownLinkVertical=signalToNoiseRatioDownLinkVertical, dhcprServer=dhcprServer, linkOutDiscards=linkOutDiscards, dhcprDomainNameAppend=dhcprDomainNameAppend, avgPowerLevel=avgPowerLevel, softwareVersion=softwareVersion, regTrap=regTrap, bitErrorsCorrected2xDwnLinkHorizontal=bitErrorsCorrected2xDwnLinkHorizontal, linkFragmentsReceived3XHorizontal=linkFragmentsReceived3XHorizontal, linkOutError=linkOutError, linkLUID=linkLUID, linkRadioDbmHorizontal=linkRadioDbmHorizontal, radioFreqCarrier=radioFreqCarrier, dwnLnkMaxBurstDataRate=dwnLnkMaxBurstDataRate, sesLoDownCIR=sesLoDownCIR, signalToNoiseRatioDownLinkHorizontal=signalToNoiseRatioDownLinkHorizontal, linkInUcastPkts=linkInUcastPkts, vlanEnable=vlanEnable, authServer2=authServer2, linkOutUcastPktsHiQ=linkOutUcastPktsHiQ, authKeyAp=authKeyAp, whispApsStatus=whispApsStatus, linkInOctets=linkInOctets, gpsStatus=gpsStatus, fragments3xDwnLinkHorizontal=fragments3xDwnLinkHorizontal, radiusPort=radiusPort, smIsolation=smIsolation, linkOperStatus=linkOperStatus, linkOutNUcastPktsHiQ=linkOutNUcastPktsHiQ, allowedIPAccessNMLength1=allowedIPAccessNMLength1)
mibBuilder.exportSymbols("WHISP-APS-MIB", signalToNoiseRatioUpLinkVertical=signalToNoiseRatioUpLinkVertical, linkQualityAPData=linkQualityAPData, fragments1xDwnLinkVertical=fragments1xDwnLinkVertical, expDwnFragCount=expDwnFragCount, apRateAdapt=apRateAdapt, dhcpRlyAgntStat_respRelayed=dhcpRlyAgntStat_respRelayed, fragments2xUpLinkHorizontal=fragments2xUpLinkHorizontal, linkSpeed=linkSpeed, tslBridging=tslBridging, dataSlotDwn=dataSlotDwn, rfOutDiscardRate=rfOutDiscardRate, colorCodeRescanIdleTimer=colorCodeRescanIdleTimer, whispApsControls=whispApsControls, linkFragmentsReceived4XHorizontal=linkFragmentsReceived4XHorizontal, autoSyncStatus=autoSyncStatus, linkSignalStrengthRatio=linkSignalStrengthRatio, linkDescr=linkDescr, linkSiteName=linkSiteName, actDwnLinkIndex=actDwnLinkIndex, smSessionTmr=smSessionTmr, multicastRetryCount=multicastRetryCount, dhcpRlyAgntStat_reqDiscards=dhcpRlyAgntStat_reqDiscards, regCount=regCount, gpsSatellitesTracked=gpsSatellitesTracked, allowedIPAccess1=allowedIPAccess1, rfOLTrap=rfOLTrap, linkTestError=linkTestError, currentRadioFreqCarrier=currentRadioFreqCarrier, linkAirDelayns=linkAirDelayns, limitFreqBand900=limitFreqBand900, ofdmSMRcvTargetLvl=ofdmSMRcvTargetLvl, bitErrorsCorrected3xDwnLinkHorizontal=bitErrorsCorrected3xDwnLinkHorizontal, lastSesStatsReset=lastSesStatsReset, whispLinkTestGroup=whispLinkTestGroup, authSharedSecret1=authSharedSecret1, allowedIPAccessNMLength3=allowedIPAccessNMLength3, linkFragmentsReceived1XVertical=linkFragmentsReceived1XVertical, rfTelnetAccess=rfTelnetAccess, radiusFramedIPNetmask=radiusFramedIPNetmask, dhcpRelayAgentSrvrIP=dhcpRelayAgentSrvrIP, whispRegStatus=whispRegStatus, fragments2xUpLinkVertical=fragments2xUpLinkVertical, bitErrorsCorrected2xUpLinkHorizontal=bitErrorsCorrected2xUpLinkHorizontal, gpsInput=gpsInput, dwnLnkAckSlot=dwnLnkAckSlot, authServer5=authServer5, accountingInterimUpdateInterval=accountingInterimUpdateInterval, whispGPSOutSync=whispGPSOutSync, regulatoryCheckFailedNoRegionAp=regulatoryCheckFailedNoRegionAp, whispApsConfigGroup=whispApsConfigGroup, apVlanOverride=apVlanOverride, radioControlSlots=radioControlSlots, dhcpRlyAgntStat_pktTooBig=dhcpRlyAgntStat_pktTooBig, gpsOutputEn=gpsOutputEn, fragments3xDwnLinkVertical=fragments3xDwnLinkVertical, apRxDelay=apRxDelay, highPriorityUpLnkPct=highPriorityUpLnkPct, vcQOverflow=vcQOverflow, berMode=berMode, linkInErrorHiQ=linkInErrorHiQ, linkAdaptRateHighPri=linkAdaptRateHighPri, linkInUnknownProtosHiQ=linkInUnknownProtosHiQ, dataVCNum=dataVCNum, regFailureCount=regFailureCount, dwnLnkDataRate=dwnLnkDataRate, onlyAllowVer95OrAbove=onlyAllowVer95OrAbove, productType=productType, gpsRestartCount=gpsRestartCount, linkOutOctetsHiQ=linkOutOctetsHiQ, regulatoryApCheckInvalidChBwFailed=regulatoryApCheckInvalidChBwFailed, allowedIPAccess3=allowedIPAccess3, ntpServer1=ntpServer1, remoteSpectrumAnalyzerScanBandwidth=remoteSpectrumAnalyzerScanBandwidth, txPwrLevel=txPwrLevel, gpsTrackingMode=gpsTrackingMode, whispApsEvent=whispApsEvent, authServer4=authServer4, linkTestDuration=linkTestDuration, scheduleWhitening=scheduleWhitening, bitErrorsCorrected1xDwnLinkHorizontal=bitErrorsCorrected1xDwnLinkHorizontal, dhcpRelayAgentEnable=dhcpRelayAgentEnable, whispApsRegEvent=whispApsRegEvent, whispLinkEntry=whispLinkEntry, dataVCNumHiQ=dataVCNumHiQ, fragments2xDwnLinkVertical=fragments2xDwnLinkVertical, sessionCount=sessionCount, dhcpRlyAgntStat_respDiscards=dhcpRlyAgntStat_respDiscards, numCtlSlotsHW=numCtlSlotsHW, whispApsLinkTestResult=whispApsLinkTestResult, apBeaconInfo=apBeaconInfo, dataSlotUpHi=dataSlotUpHi, numCtlSlots=numCtlSlots, radioMaxRange=radioMaxRange, fpgaVersion=fpgaVersion, radioMode=radioMode, remoteSpectrumAnalysisDuration=remoteSpectrumAnalysisDuration, numCtrSlot=numCtrSlot, p7p8HiPriQEn=p7p8HiPriQEn, linkTestMode=linkTestMode, remoteSpectrumAnalyzerLUID=remoteSpectrumAnalyzerLUID, whispDefKeyUsed=whispDefKeyUsed, dhcpRlyAgntStat_reqRecvd=dhcpRlyAgntStat_reqRecvd, actDwnFragCount=actDwnFragCount, linkAveJitter=linkAveJitter, syslogXmitSMs=syslogXmitSMs, fragments1xUpLinkVertical=fragments1xUpLinkVertical, linkFragmentsReceived3XVertical=linkFragmentsReceived3XVertical, sectorID=sectorID, whispApsRFConfigRadioEntry=whispApsRFConfigRadioEntry, whispUsrAcctSvr3=whispUsrAcctSvr3, dwnLnkLimit=dwnLnkLimit, updateAppAddress=updateAppAddress, gpsHeight=gpsHeight, signalToNoiseRatioHorizontal=signalToNoiseRatioHorizontal, whispLinkTable=whispLinkTable, dwnLnkData=dwnLnkData, upLinkRate=upLinkRate, authServer1=authServer1, qinqEthType=qinqEthType, hiPriQEn=hiPriQEn, configSource=configSource, fragments4xDwnLinkHorizontal=fragments4xDwnLinkHorizontal, resetSesStats=resetSesStats, platformVer=platformVer, ntpDomainNameAppend=ntpDomainNameAppend, upLnkMaxBurstDataRate=upLnkMaxBurstDataRate, whispApsLinkTestConfig=whispApsLinkTestConfig, linkTestLUID=linkTestLUID, linkOutUcastPkts=linkOutUcastPkts, linkFragmentsReceived1XHorizontal=linkFragmentsReceived1XHorizontal, asIP3=asIP3, gpsInvalidMsg=gpsInvalidMsg, rfOLEnable=rfOLEnable, linkInOctetsHiQ=linkInOctetsHiQ, linkAdaptRateLowPri=linkAdaptRateLowPri, regFailTime=regFailTime, encryptDwBroadcast=encryptDwBroadcast, upLnkAckSlotHi=upLnkAckSlotHi)
