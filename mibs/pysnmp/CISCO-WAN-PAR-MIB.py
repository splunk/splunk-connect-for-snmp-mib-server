#
# PySNMP MIB module CISCO-WAN-PAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-PAR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:04:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
par, = mibBuilder.importSymbols("BASIS-MIB", "par")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Gauge32, Bits, Counter64, Unsigned32, MibIdentifier, TimeTicks, ObjectIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Gauge32", "Bits", "Counter64", "Unsigned32", "MibIdentifier", "TimeTicks", "ObjectIdentity", "IpAddress", "Counter32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoWanParMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 63))
ciscoWanParMIB.setRevisions(('2002-09-10 00:00',))
if mibBuilder.loadTexts: ciscoWanParMIB.setLastUpdated('200209100000Z')
if mibBuilder.loadTexts: ciscoWanParMIB.setOrganization('Cisco Systems, Inc.')
parSelfNode = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 1))
parInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 2))
parConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 3))
parNetworkClock = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 4))
parConfigParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5))
parVsiConfigParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 1))
parCmParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 2))
parMnUpdt = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 3))
parSwFunc = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 4))
parOnOff = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 5))
parSysParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 6))
parNetworkingParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 7))
parSnNodeId = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 223)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSnNodeId.setStatus('current')
parSnNodeIP = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSnNodeIP.setStatus('current')
parSnNodeName = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSnNodeName.setStatus('current')
parSnRevision = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSnRevision.setStatus('current')
parSnNodeAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3), ("unreach", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSnNodeAlarmStatus.setStatus('current')
parSnNumberOfTrunks = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSnNumberOfTrunks.setStatus('current')
parIfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 2, 1), )
if mibBuilder.loadTexts: parIfTable.setStatus('current')
parIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-PAR-MIB", "parIfLogicalInterface"))
if mibBuilder.loadTexts: parIfEntry.setStatus('current')
parIfLogicalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfLogicalInterface.setStatus('current')
parIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("userport", 1), ("routingtrunk", 2), ("feedertrunk", 3), ("clkport", 4), ("virtualtrunk", 5))).clone('userport')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parIfType.setStatus('current')
parIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("added", 2), ("failed", 3), ("added-failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfOperStatus.setStatus('current')
parIfTxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 4), Integer32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfTxBw.setStatus('current')
parIfRxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 5), Integer32()).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfRxBw.setStatus('current')
parIfMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfMaxConn.setStatus('current')
parIfHiAddrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfHiAddrMin.setStatus('current')
parIfHiAddrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfHiAddrMax.setStatus('current')
parIfLoAddrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfLoAddrMin.setStatus('current')
parIfLoAddrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfLoAddrMax.setStatus('current')
parTrkTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 2, 2), )
if mibBuilder.loadTexts: parTrkTable.setStatus('current')
parTrkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1), ).setIndexNames((0, "CISCO-WAN-PAR-MIB", "parIfLogicalInterface"))
if mibBuilder.loadTexts: parTrkEntry.setStatus('current')
parTrkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkId.setStatus('current')
parTrkStatReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 2), Integer32().clone(1000)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkStatReserve.setStatus('current')
parTrkCnfgCcRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgCcRestrict.setStatus('current')
parTrkCnfgLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terrestrial", 1), ("satellite", 2))).clone('terrestrial')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgLineType.setStatus('current')
parTrkCnfgPassSync = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgPassSync.setStatus('current')
parTrkCnfgDerouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgDerouteDelay.setStatus('current')
parTrkCnfgTrafficClassFst = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassFst.setStatus('current')
parTrkCnfgTrafficClassFr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassFr.setStatus('current')
parTrkCnfgTrafficClassNts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassNts.setStatus('current')
parTrkCnfgTrafficClassTs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassTs.setStatus('current')
parTrkCnfgTrafficClassVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassVoice.setStatus('current')
parTrkCnfgTrafficClassCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassCbr.setStatus('current')
parTrkCnfgTrafficClassVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassVbr.setStatus('current')
parTrkCnfgTrafficClassAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassAbr.setStatus('current')
parTrkCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2))).clone('delete')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgAdminStatus.setStatus('current')
parTrkCnfgRoutingCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgRoutingCost.setStatus('current')
parTrkCnfgVccConids = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgVccConids.setStatus('current')
parTrkCnfgVpcConids = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgVpcConids.setStatus('current')
parTrkLocalSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLocalSlotNumber.setStatus('current')
parTrkLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLocalPortNumber.setStatus('current')
parTrkLocalVTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLocalVTrunkId.setStatus('current')
parTrkRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeId.setStatus('current')
parTrkRemoteTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteTrunkId.setStatus('current')
parTrkRemoteSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteSlotNumber.setStatus('current')
parTrkRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemotePortNumber.setStatus('current')
parTrkRemoteVTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteVTrunkId.setStatus('current')
parTrkRemoteNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeIP.setStatus('current')
parTrkRemoteNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ipx", 1), ("igx", 2), ("bpx", 3), ("par", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeType.setStatus('current')
parTrkRemoteNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeName.setStatus('current')
parTrkAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkAlarmStatus.setStatus('current')
parTrkAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rsrcunavail", 1), ("commfail", 2), ("unknown", 3), ("failed", 4), ("looped", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkAlarmType.setStatus('current')
parTrkBwCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkBwCapacity.setStatus('current')
parTrkLineLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLineLoad.setStatus('current')
parTrkLoadTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 2, 3), )
if mibBuilder.loadTexts: parTrkLoadTable.setStatus('current')
parTrkLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1), ).setIndexNames((0, "CISCO-WAN-PAR-MIB", "parIfLogicalInterface"))
if mibBuilder.loadTexts: parTrkLoadEntry.setStatus('current')
parTrkLoadXmtUsedCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedCbr.setStatus('current')
parTrkLoadRcvUsedCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedCbr.setStatus('current')
parTrkLoadXmtUsedVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedVbr.setStatus('current')
parTrkLoadRcvUsedVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedVbr.setStatus('current')
parTrkLoadXmtUsedAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedAbr.setStatus('current')
parTrkLoadRcvUsedAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedAbr.setStatus('current')
parTrkLoadXmtUsedNts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedNts.setStatus('current')
parTrkLoadRcvUsedNts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedNts.setStatus('current')
parTrkLoadXmtUsedTs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedTs.setStatus('current')
parTrkLoadRcvUsedTs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedTs.setStatus('current')
parTrkLoadXmtUsedVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedVoice.setStatus('current')
parTrkLoadRcvUsedVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedVoice.setStatus('current')
parTrkLoadXmtUsedBdataA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedBdataA.setStatus('current')
parTrkLoadRcvUsedBdataA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedBdataA.setStatus('current')
parTrkLoadXmtUsedBdataB = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedBdataB.setStatus('current')
parTrkLoadRcvUsedBdataB = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedBdataB.setStatus('current')
parTrkLoadVccConidsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadVccConidsUsed.setStatus('current')
parTrkLoadVpcConidsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadVpcConidsUsed.setStatus('current')
parConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 3, 1), )
if mibBuilder.loadTexts: parConnectionTable.setStatus('current')
parConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-PAR-MIB", "parConnLocalSlot"), (0, "CISCO-WAN-PAR-MIB", "parConnLocalPort"), (0, "CISCO-WAN-PAR-MIB", "parConnLocalVpi"), (0, "CISCO-WAN-PAR-MIB", "parConnLocalVci"))
if mibBuilder.loadTexts: parConnectionEntry.setStatus('current')
parConnLocalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalSlot.setStatus('current')
parConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalPort.setStatus('current')
parConnLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalVpi.setStatus('current')
parConnLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalVci.setStatus('current')
parConnMasterShip = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnMasterShip.setStatus('current')
parConnLocalVcIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalVcIndx.setStatus('current')
parConnLocalEndpt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalEndpt.setStatus('current')
parConnRemoteNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteNodeName.setStatus('current')
parConnRemoteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteSlot.setStatus('current')
parConnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemotePort.setStatus('current')
parConnRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteVpi.setStatus('current')
parConnRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteVci.setStatus('current')
parConnRemoteVcIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteVcIndx.setStatus('current')
parConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("routed", 1), ("unrouted", 2), ("lmifail", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnOperStatus.setStatus('current')
parConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("reroute", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parConnAdminStatus.setStatus('current')
parConnRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRoute.setStatus('current')
parConnRemoteEndpt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteEndpt.setStatus('current')
parPrefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parPrefRoute.setStatus('current')
parConnFailRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("hwalm", 2), ("abitalm", 3), ("lmifail", 4), ("rrtfail", 5), ("incomplete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnFailRsn.setStatus('current')
parRrtFailRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parRrtFailRsn.setStatus('current')
parConnRstrTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("norestrict", 1), ("terrestrict", 2), ("satrestrict", 3), ("undefrestrict", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRstrTyp.setStatus('current')
parConnRstrZcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRstrZcs.setStatus('current')
parConnCos = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnCos.setStatus('current')
parClockTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 4, 1), )
if mibBuilder.loadTexts: parClockTable.setStatus('current')
parClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-PAR-MIB", "parClockIndex"))
if mibBuilder.loadTexts: parClockEntry.setStatus('current')
parClockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockIndex.setStatus('current')
parClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("null", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parClockType.setStatus('current')
parClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("interface", 2), ("external", 3))).clone('internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockSource.setStatus('current')
parClockCurSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockCurSource.setStatus('current')
parClockSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parClockSourceId.setStatus('current')
parClockPath = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockPath.setStatus('current')
parCmParmsMaxRoutingBundle = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 1), Integer32().clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMaxRoutingBundle.setStatus('current')
parCmParmsRerouteTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRerouteTimer.setStatus('current')
parCmParmsResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsResetTimer.setStatus('current')
parCmParmsDnUpPerPass = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 4), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsDnUpPerPass.setStatus('current')
parCmParmsDnUpTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 5), Integer32().clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsDnUpTimer.setStatus('current')
parCmParmsRrtErrsPerCycle = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 6), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrtErrsPerCycle.setStatus('current')
parCmParmsRrtCycleInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 7), Integer32().clone(5)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrtCycleInterval.setStatus('current')
parCmParmsMaxRrtCycles = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 8), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMaxRrtCycles.setStatus('current')
parCmParmsRrtPauseTime = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 9), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrtPauseTime.setStatus('current')
parCmParmsMaxUpdates = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 10), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMaxUpdates.setStatus('current')
parCmParmsRerouteGroups = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 11), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRerouteGroups.setStatus('current')
parCmParmsMinRrGroupSize = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMinRrGroupSize.setStatus('current')
parCmParmsRrGroupInc = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 13), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrGroupInc.setStatus('current')
parCmParmsCostBased = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsCostBased.setStatus('current')
parCmParmsUseCache = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsUseCache.setStatus('current')
parCmParmsUseDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsUseDelay.setStatus('current')
parCmParmMaxViaCons = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 80000)).clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmMaxViaCons.setStatus('current')
parMnUpdtInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 1), Integer32().clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parMnUpdtInterval.setStatus('current')
parMnUpdtNodesPerInt = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 2), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parMnUpdtNodesPerInt.setStatus('current')
parMnUpdtBatchSend = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parMnUpdtBatchSend.setStatus('current')
parSwFuncAbrVsvd = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 4, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSwFuncAbrVsvd.setStatus('current')
parSwFuncNodeType = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routing", 1), ("feeder", 2))).clone('routing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSwFuncNodeType.setStatus('current')
parOnOffBackgroundUpdt = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffBackgroundUpdt.setStatus('current')
parOnOffDynamicBwAlloc = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffDynamicBwAlloc.setStatus('current')
parOnOffCmUpdts = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffCmUpdts.setStatus('current')
parOnOffRouting = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffRouting.setStatus('current')
parOnOffCommFailTest = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffCommFailTest.setStatus('current')
parOnOffDrtDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffDrtDelay.setStatus('current')
parOnOffRenumRec = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffRenumRec.setStatus('current')
parOnOffCommBreak = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffCommBreak.setStatus('current')
parSysParmsTsPacketAge = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(64)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSysParmsTsPacketAge.setStatus('current')
parSysParmsConnFail = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSysParmsConnFail.setStatus('current')
parSysParmsVcPollRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsVcPollRate.setStatus('current')
parSysParmsMaxVDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 4), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxVDelay.setStatus('current')
parSysParmsMaxCDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 5), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCDelay.setStatus('current')
parSysParmsMaxDDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 6), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxDDelay.setStatus('current')
parSysParmsMaxADelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxADelay.setStatus('current')
parSysParmsMaxHsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 8), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxHsdDelay.setStatus('current')
parSysParmsDeEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsDeEnable.setStatus('current')
parSysParmsFrStandard = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsFrStandard.setStatus('current')
parSysParmsDrtDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSysParmsDrtDelay.setStatus('current')
parSysParmsInvLogAlarmThres = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsInvLogAlarmThres.setStatus('current')
parSysParmsMaxCdpVDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 13), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpVDelay.setStatus('current')
parSysParmsMaxCdpCDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 14), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpCDelay.setStatus('current')
parSysParmsMaxCdpDDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 15), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpDDelay.setStatus('current')
parSysParmsMaxCdpADelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 16), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpADelay.setStatus('current')
parSysParmsMaxCdpHsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 17), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpHsdDelay.setStatus('current')
parSysParmsMaxIpcdpVDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 18), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpVDelay.setStatus('current')
parSysParmsMaxIpcdpCDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 19), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpCDelay.setStatus('current')
parSysParmsMaxIpcdpDDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 20), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpDDelay.setStatus('current')
parSysParmsMaxIpcdpADelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpADelay.setStatus('current')
parSysParmsMaxIpcdpHsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpHsdDelay.setStatus('current')
parSysParmsMaxIphsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 23), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIphsdDelay.setStatus('current')
parSysParmsFpdDeJitter = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsFpdDeJitter.setStatus('current')
parNetParmCondInitialStgr = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 1), Integer32().clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCondInitialStgr.setStatus('current')
parNetParmCondPerNodeInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 2), Integer32().clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCondPerNodeInterval.setStatus('current')
parNetParmCbDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 3), Integer32().clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCbDelay.setStatus('current')
parNetParmCbOffset = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCbOffset.setStatus('current')
parNetParmMsgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 5), Integer32().clone(1700)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMsgTimeout.setStatus('current')
parNetParmMsgMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 6), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMsgMaxTimeout.setStatus('current')
parNetParmMsgMaxTimeoutSat = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 7), Integer32().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMsgMaxTimeoutSat.setStatus('current')
parNetParmBlindMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 8), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmBlindMaxTimeout.setStatus('current')
parNetParmCbMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 9), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCbMaxTimeout.setStatus('current')
parNetParmCfTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 10), Integer32().clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCfTestInterval.setStatus('current')
parNetParmCfTestMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 11), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCfTestMultiplier.setStatus('current')
parNetParmNetwWindowSz = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 12), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmNetwWindowSz.setStatus('current')
parNetParmNetwLetWait = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 13), Integer32().clone(50)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmNetwLetWait.setStatus('current')
parNetParmCfDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 14), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCfDelay.setStatus('current')
parNetParmHighTxRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 15), Integer32().clone(2500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmHighTxRate.setStatus('current')
parNetParmLowTxRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 16), Integer32().clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmLowTxRate.setStatus('current')
parNetParmMaxNodeBlks = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 17), Integer32().clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMaxNodeBlks.setStatus('current')
parNetParmTopoMsgSegSz = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 18), Integer32().clone(3570)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmTopoMsgSegSz.setStatus('current')
cwParMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 63, 2))
cwParMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1))
cwParMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 2))
cwParCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 2, 1)).setObjects(("CISCO-WAN-PAR-MIB", "cwParCmParamsGroup"), ("CISCO-WAN-PAR-MIB", "cwParCmParamsUpdateGroup"), ("CISCO-WAN-PAR-MIB", "cwParGeneralGroup"), ("CISCO-WAN-PAR-MIB", "cwParSysParamsGroup"), ("CISCO-WAN-PAR-MIB", "cwParNetParamsGroup"), ("CISCO-WAN-PAR-MIB", "cwParNodeGroup"), ("CISCO-WAN-PAR-MIB", "cwParInterfaceConfGroup"), ("CISCO-WAN-PAR-MIB", "cwParTrunkConfGroup"), ("CISCO-WAN-PAR-MIB", "cwParTrunkLoadConfGroup"), ("CISCO-WAN-PAR-MIB", "cwParConnConfGroup"), ("CISCO-WAN-PAR-MIB", "cwParClockConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParCompliance = cwParCompliance.setStatus('current')
cwParCmParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 1)).setObjects(("CISCO-WAN-PAR-MIB", "parCmParmsMaxRoutingBundle"), ("CISCO-WAN-PAR-MIB", "parCmParmsRerouteTimer"), ("CISCO-WAN-PAR-MIB", "parCmParmsResetTimer"), ("CISCO-WAN-PAR-MIB", "parCmParmsDnUpPerPass"), ("CISCO-WAN-PAR-MIB", "parCmParmsDnUpTimer"), ("CISCO-WAN-PAR-MIB", "parCmParmsRrtErrsPerCycle"), ("CISCO-WAN-PAR-MIB", "parCmParmsRrtCycleInterval"), ("CISCO-WAN-PAR-MIB", "parCmParmsMaxRrtCycles"), ("CISCO-WAN-PAR-MIB", "parCmParmsRrtPauseTime"), ("CISCO-WAN-PAR-MIB", "parCmParmsMaxUpdates"), ("CISCO-WAN-PAR-MIB", "parCmParmsRerouteGroups"), ("CISCO-WAN-PAR-MIB", "parCmParmsMinRrGroupSize"), ("CISCO-WAN-PAR-MIB", "parCmParmsRrGroupInc"), ("CISCO-WAN-PAR-MIB", "parCmParmsCostBased"), ("CISCO-WAN-PAR-MIB", "parCmParmsUseCache"), ("CISCO-WAN-PAR-MIB", "parCmParmsUseDelay"), ("CISCO-WAN-PAR-MIB", "parCmParmMaxViaCons"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParCmParamsGroup = cwParCmParamsGroup.setStatus('current')
cwParCmParamsUpdateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 2)).setObjects(("CISCO-WAN-PAR-MIB", "parMnUpdtInterval"), ("CISCO-WAN-PAR-MIB", "parMnUpdtNodesPerInt"), ("CISCO-WAN-PAR-MIB", "parMnUpdtBatchSend"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParCmParamsUpdateGroup = cwParCmParamsUpdateGroup.setStatus('current')
cwParGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 3)).setObjects(("CISCO-WAN-PAR-MIB", "parSwFuncAbrVsvd"), ("CISCO-WAN-PAR-MIB", "parSwFuncNodeType"), ("CISCO-WAN-PAR-MIB", "parOnOffBackgroundUpdt"), ("CISCO-WAN-PAR-MIB", "parOnOffDynamicBwAlloc"), ("CISCO-WAN-PAR-MIB", "parOnOffCmUpdts"), ("CISCO-WAN-PAR-MIB", "parOnOffRouting"), ("CISCO-WAN-PAR-MIB", "parOnOffCommFailTest"), ("CISCO-WAN-PAR-MIB", "parOnOffDrtDelay"), ("CISCO-WAN-PAR-MIB", "parOnOffRenumRec"), ("CISCO-WAN-PAR-MIB", "parOnOffCommBreak"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParGeneralGroup = cwParGeneralGroup.setStatus('current')
cwParSysParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 4)).setObjects(("CISCO-WAN-PAR-MIB", "parSysParmsTsPacketAge"), ("CISCO-WAN-PAR-MIB", "parSysParmsConnFail"), ("CISCO-WAN-PAR-MIB", "parSysParmsVcPollRate"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxVDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxCDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxDDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxADelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxHsdDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsDeEnable"), ("CISCO-WAN-PAR-MIB", "parSysParmsFrStandard"), ("CISCO-WAN-PAR-MIB", "parSysParmsDrtDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsInvLogAlarmThres"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxCdpVDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxCdpCDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxCdpDDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxCdpADelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxCdpHsdDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxIpcdpVDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxIpcdpCDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxIpcdpDDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxIpcdpADelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxIpcdpHsdDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsMaxIphsdDelay"), ("CISCO-WAN-PAR-MIB", "parSysParmsFpdDeJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParSysParamsGroup = cwParSysParamsGroup.setStatus('current')
cwParNetParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 5)).setObjects(("CISCO-WAN-PAR-MIB", "parNetParmCondInitialStgr"), ("CISCO-WAN-PAR-MIB", "parNetParmCondPerNodeInterval"), ("CISCO-WAN-PAR-MIB", "parNetParmCbDelay"), ("CISCO-WAN-PAR-MIB", "parNetParmCbOffset"), ("CISCO-WAN-PAR-MIB", "parNetParmMsgTimeout"), ("CISCO-WAN-PAR-MIB", "parNetParmMsgMaxTimeout"), ("CISCO-WAN-PAR-MIB", "parNetParmMsgMaxTimeoutSat"), ("CISCO-WAN-PAR-MIB", "parNetParmBlindMaxTimeout"), ("CISCO-WAN-PAR-MIB", "parNetParmCbMaxTimeout"), ("CISCO-WAN-PAR-MIB", "parNetParmCfTestInterval"), ("CISCO-WAN-PAR-MIB", "parNetParmCfTestMultiplier"), ("CISCO-WAN-PAR-MIB", "parNetParmNetwWindowSz"), ("CISCO-WAN-PAR-MIB", "parNetParmNetwLetWait"), ("CISCO-WAN-PAR-MIB", "parNetParmCfDelay"), ("CISCO-WAN-PAR-MIB", "parNetParmHighTxRate"), ("CISCO-WAN-PAR-MIB", "parNetParmLowTxRate"), ("CISCO-WAN-PAR-MIB", "parNetParmMaxNodeBlks"), ("CISCO-WAN-PAR-MIB", "parNetParmTopoMsgSegSz"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParNetParamsGroup = cwParNetParamsGroup.setStatus('current')
cwParNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 6)).setObjects(("CISCO-WAN-PAR-MIB", "parSnNodeId"), ("CISCO-WAN-PAR-MIB", "parSnNodeIP"), ("CISCO-WAN-PAR-MIB", "parSnNodeName"), ("CISCO-WAN-PAR-MIB", "parSnRevision"), ("CISCO-WAN-PAR-MIB", "parSnNodeAlarmStatus"), ("CISCO-WAN-PAR-MIB", "parSnNumberOfTrunks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParNodeGroup = cwParNodeGroup.setStatus('current')
cwParInterfaceConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 7)).setObjects(("CISCO-WAN-PAR-MIB", "parIfLogicalInterface"), ("CISCO-WAN-PAR-MIB", "parIfType"), ("CISCO-WAN-PAR-MIB", "parIfOperStatus"), ("CISCO-WAN-PAR-MIB", "parIfTxBw"), ("CISCO-WAN-PAR-MIB", "parIfRxBw"), ("CISCO-WAN-PAR-MIB", "parIfMaxConn"), ("CISCO-WAN-PAR-MIB", "parIfHiAddrMin"), ("CISCO-WAN-PAR-MIB", "parIfHiAddrMax"), ("CISCO-WAN-PAR-MIB", "parIfLoAddrMin"), ("CISCO-WAN-PAR-MIB", "parIfLoAddrMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParInterfaceConfGroup = cwParInterfaceConfGroup.setStatus('current')
cwParTrunkConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 8)).setObjects(("CISCO-WAN-PAR-MIB", "parTrkId"), ("CISCO-WAN-PAR-MIB", "parTrkStatReserve"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgCcRestrict"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgLineType"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgPassSync"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgDerouteDelay"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassFst"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassFr"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassNts"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassTs"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassVoice"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassCbr"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassVbr"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgTrafficClassAbr"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgAdminStatus"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgRoutingCost"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgVpcConids"), ("CISCO-WAN-PAR-MIB", "parTrkCnfgVccConids"), ("CISCO-WAN-PAR-MIB", "parTrkLocalSlotNumber"), ("CISCO-WAN-PAR-MIB", "parTrkLocalPortNumber"), ("CISCO-WAN-PAR-MIB", "parTrkLocalVTrunkId"), ("CISCO-WAN-PAR-MIB", "parTrkRemoteNodeId"), ("CISCO-WAN-PAR-MIB", "parTrkRemoteTrunkId"), ("CISCO-WAN-PAR-MIB", "parTrkRemoteSlotNumber"), ("CISCO-WAN-PAR-MIB", "parTrkRemotePortNumber"), ("CISCO-WAN-PAR-MIB", "parTrkRemoteVTrunkId"), ("CISCO-WAN-PAR-MIB", "parTrkRemoteNodeIP"), ("CISCO-WAN-PAR-MIB", "parTrkRemoteNodeType"), ("CISCO-WAN-PAR-MIB", "parTrkRemoteNodeName"), ("CISCO-WAN-PAR-MIB", "parTrkAlarmStatus"), ("CISCO-WAN-PAR-MIB", "parTrkAlarmType"), ("CISCO-WAN-PAR-MIB", "parTrkLineLoad"), ("CISCO-WAN-PAR-MIB", "parTrkBwCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParTrunkConfGroup = cwParTrunkConfGroup.setStatus('current')
cwParTrunkLoadConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 9)).setObjects(("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedCbr"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedCbr"), ("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedVbr"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedVbr"), ("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedAbr"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedAbr"), ("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedNts"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedNts"), ("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedTs"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedTs"), ("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedVoice"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedVoice"), ("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedBdataA"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedBdataA"), ("CISCO-WAN-PAR-MIB", "parTrkLoadXmtUsedBdataB"), ("CISCO-WAN-PAR-MIB", "parTrkLoadRcvUsedBdataB"), ("CISCO-WAN-PAR-MIB", "parTrkLoadVccConidsUsed"), ("CISCO-WAN-PAR-MIB", "parTrkLoadVpcConidsUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParTrunkLoadConfGroup = cwParTrunkLoadConfGroup.setStatus('current')
cwParConnConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 10)).setObjects(("CISCO-WAN-PAR-MIB", "parConnLocalSlot"), ("CISCO-WAN-PAR-MIB", "parConnLocalPort"), ("CISCO-WAN-PAR-MIB", "parConnLocalVpi"), ("CISCO-WAN-PAR-MIB", "parConnLocalVci"), ("CISCO-WAN-PAR-MIB", "parConnMasterShip"), ("CISCO-WAN-PAR-MIB", "parConnLocalVcIndx"), ("CISCO-WAN-PAR-MIB", "parConnLocalEndpt"), ("CISCO-WAN-PAR-MIB", "parConnRemoteNodeName"), ("CISCO-WAN-PAR-MIB", "parConnRemoteSlot"), ("CISCO-WAN-PAR-MIB", "parConnRemotePort"), ("CISCO-WAN-PAR-MIB", "parConnRemoteVpi"), ("CISCO-WAN-PAR-MIB", "parConnRemoteVci"), ("CISCO-WAN-PAR-MIB", "parConnRemoteVcIndx"), ("CISCO-WAN-PAR-MIB", "parConnRemoteEndpt"), ("CISCO-WAN-PAR-MIB", "parConnOperStatus"), ("CISCO-WAN-PAR-MIB", "parConnAdminStatus"), ("CISCO-WAN-PAR-MIB", "parConnRoute"), ("CISCO-WAN-PAR-MIB", "parPrefRoute"), ("CISCO-WAN-PAR-MIB", "parConnFailRsn"), ("CISCO-WAN-PAR-MIB", "parRrtFailRsn"), ("CISCO-WAN-PAR-MIB", "parConnRstrTyp"), ("CISCO-WAN-PAR-MIB", "parConnRstrZcs"), ("CISCO-WAN-PAR-MIB", "parConnCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParConnConfGroup = cwParConnConfGroup.setStatus('current')
cwParClockConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 63, 2, 1, 11)).setObjects(("CISCO-WAN-PAR-MIB", "parClockIndex"), ("CISCO-WAN-PAR-MIB", "parClockType"), ("CISCO-WAN-PAR-MIB", "parClockCurSource"), ("CISCO-WAN-PAR-MIB", "parClockSource"), ("CISCO-WAN-PAR-MIB", "parClockSourceId"), ("CISCO-WAN-PAR-MIB", "parClockPath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwParClockConfGroup = cwParClockConfGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WAN-PAR-MIB", parTrkLocalVTrunkId=parTrkLocalVTrunkId, parNetParmMsgMaxTimeoutSat=parNetParmMsgMaxTimeoutSat, parConnFailRsn=parConnFailRsn, parTrkEntry=parTrkEntry, parCmParmsRerouteGroups=parCmParmsRerouteGroups, parTrkLoadRcvUsedCbr=parTrkLoadRcvUsedCbr, parNetParmCfTestInterval=parNetParmCfTestInterval, parTrkCnfgTrafficClassVoice=parTrkCnfgTrafficClassVoice, parCmParmsUseDelay=parCmParmsUseDelay, parSwFuncAbrVsvd=parSwFuncAbrVsvd, parTrkLoadTable=parTrkLoadTable, cwParTrunkConfGroup=cwParTrunkConfGroup, parTrkLoadXmtUsedBdataB=parTrkLoadXmtUsedBdataB, parNetParmBlindMaxTimeout=parNetParmBlindMaxTimeout, parTrkLoadRcvUsedVoice=parTrkLoadRcvUsedVoice, parTrkLoadVccConidsUsed=parTrkLoadVccConidsUsed, parOnOffRouting=parOnOffRouting, ciscoWanParMIB=ciscoWanParMIB, parTrkLoadVpcConidsUsed=parTrkLoadVpcConidsUsed, cwParConnConfGroup=cwParConnConfGroup, parSysParmsMaxIphsdDelay=parSysParmsMaxIphsdDelay, cwParNodeGroup=cwParNodeGroup, parTrkLoadXmtUsedVoice=parTrkLoadXmtUsedVoice, parCmParmsMaxRrtCycles=parCmParmsMaxRrtCycles, parSysParmsMaxCdpDDelay=parSysParmsMaxCdpDDelay, parTrkRemoteNodeName=parTrkRemoteNodeName, parTrkCnfgVccConids=parTrkCnfgVccConids, parIfType=parIfType, parConnRemoteNodeName=parConnRemoteNodeName, parIfTxBw=parIfTxBw, parSysParmsMaxCdpHsdDelay=parSysParmsMaxCdpHsdDelay, parTrkLoadXmtUsedCbr=parTrkLoadXmtUsedCbr, parTrkCnfgAdminStatus=parTrkCnfgAdminStatus, parConnRemoteVci=parConnRemoteVci, parTrkStatReserve=parTrkStatReserve, parConnRemoteSlot=parConnRemoteSlot, PYSNMP_MODULE_ID=ciscoWanParMIB, parConnRemoteVpi=parConnRemoteVpi, parSysParmsMaxIpcdpVDelay=parSysParmsMaxIpcdpVDelay, parTrkBwCapacity=parTrkBwCapacity, parTrkCnfgDerouteDelay=parTrkCnfgDerouteDelay, cwParSysParamsGroup=cwParSysParamsGroup, parTrkLoadXmtUsedVbr=parTrkLoadXmtUsedVbr, parConnLocalEndpt=parConnLocalEndpt, parTrkCnfgLineType=parTrkCnfgLineType, parSysParmsMaxVDelay=parSysParmsMaxVDelay, parTrkLoadXmtUsedTs=parTrkLoadXmtUsedTs, parConfigParms=parConfigParms, parTrkRemoteTrunkId=parTrkRemoteTrunkId, parTrkLoadRcvUsedAbr=parTrkLoadRcvUsedAbr, parClockSourceId=parClockSourceId, parNetParmCondPerNodeInterval=parNetParmCondPerNodeInterval, parClockCurSource=parClockCurSource, parClockPath=parClockPath, parConnLocalVpi=parConnLocalVpi, parTrkLoadRcvUsedVbr=parTrkLoadRcvUsedVbr, parTrkCnfgTrafficClassCbr=parTrkCnfgTrafficClassCbr, parTrkLoadXmtUsedAbr=parTrkLoadXmtUsedAbr, cwParMIBCompliances=cwParMIBCompliances, parConnectionEntry=parConnectionEntry, parCmParms=parCmParms, parTrkRemoteNodeType=parTrkRemoteNodeType, parIfLoAddrMin=parIfLoAddrMin, parConnOperStatus=parConnOperStatus, parSysParmsDeEnable=parSysParmsDeEnable, parSysParmsMaxIpcdpADelay=parSysParmsMaxIpcdpADelay, parTrkRemoteNodeId=parTrkRemoteNodeId, parConnRemoteVcIndx=parConnRemoteVcIndx, parConnRstrTyp=parConnRstrTyp, parSysParmsDrtDelay=parSysParmsDrtDelay, cwParCmParamsGroup=cwParCmParamsGroup, parConnCos=parConnCos, parConnectionTable=parConnectionTable, parCmParmsMaxUpdates=parCmParmsMaxUpdates, parClockType=parClockType, parTrkCnfgTrafficClassNts=parTrkCnfgTrafficClassNts, parOnOffRenumRec=parOnOffRenumRec, parCmParmsRrtCycleInterval=parCmParmsRrtCycleInterval, parConnLocalVcIndx=parConnLocalVcIndx, parNetParmTopoMsgSegSz=parNetParmTopoMsgSegSz, parClockIndex=parClockIndex, parNetParmCbDelay=parNetParmCbDelay, parSysParms=parSysParms, parConnLocalSlot=parConnLocalSlot, parIfTable=parIfTable, parOnOffCmUpdts=parOnOffCmUpdts, parTrkAlarmStatus=parTrkAlarmStatus, parTrkRemotePortNumber=parTrkRemotePortNumber, parSnNodeIP=parSnNodeIP, parSysParmsMaxCdpVDelay=parSysParmsMaxCdpVDelay, parCmParmsDnUpPerPass=parCmParmsDnUpPerPass, parSysParmsTsPacketAge=parSysParmsTsPacketAge, parTrkLoadRcvUsedBdataB=parTrkLoadRcvUsedBdataB, parClockEntry=parClockEntry, parNetParmNetwWindowSz=parNetParmNetwWindowSz, cwParGeneralGroup=cwParGeneralGroup, parOnOffBackgroundUpdt=parOnOffBackgroundUpdt, parIfHiAddrMax=parIfHiAddrMax, parMnUpdtBatchSend=parMnUpdtBatchSend, parSnNodeAlarmStatus=parSnNodeAlarmStatus, parTrkRemoteVTrunkId=parTrkRemoteVTrunkId, parSwFunc=parSwFunc, parCmParmMaxViaCons=parCmParmMaxViaCons, parTrkCnfgTrafficClassFr=parTrkCnfgTrafficClassFr, parSysParmsInvLogAlarmThres=parSysParmsInvLogAlarmThres, parNetParmHighTxRate=parNetParmHighTxRate, parTrkId=parTrkId, parTrkCnfgTrafficClassVbr=parTrkCnfgTrafficClassVbr, parNetworkingParms=parNetworkingParms, parSysParmsFrStandard=parSysParmsFrStandard, parNetworkClock=parNetworkClock, parCmParmsUseCache=parCmParmsUseCache, parSysParmsMaxDDelay=parSysParmsMaxDDelay, parSysParmsVcPollRate=parSysParmsVcPollRate, parTrkCnfgVpcConids=parTrkCnfgVpcConids, parTrkLoadRcvUsedBdataA=parTrkLoadRcvUsedBdataA, cwParInterfaceConfGroup=cwParInterfaceConfGroup, parTrkCnfgPassSync=parTrkCnfgPassSync, parSysParmsFpdDeJitter=parSysParmsFpdDeJitter, cwParMIBConformance=cwParMIBConformance, parSnRevision=parSnRevision, parSnNumberOfTrunks=parSnNumberOfTrunks, parOnOffDynamicBwAlloc=parOnOffDynamicBwAlloc, parMnUpdtNodesPerInt=parMnUpdtNodesPerInt, parTrkLocalSlotNumber=parTrkLocalSlotNumber, parSysParmsMaxHsdDelay=parSysParmsMaxHsdDelay, parCmParmsRrtErrsPerCycle=parCmParmsRrtErrsPerCycle, parPrefRoute=parPrefRoute, parInterfaces=parInterfaces, parCmParmsRrGroupInc=parCmParmsRrGroupInc, parIfEntry=parIfEntry, parIfRxBw=parIfRxBw, parSysParmsMaxCdpADelay=parSysParmsMaxCdpADelay, parTrkLoadRcvUsedNts=parTrkLoadRcvUsedNts, parCmParmsResetTimer=parCmParmsResetTimer, parNetParmNetwLetWait=parNetParmNetwLetWait, parOnOff=parOnOff, parSnNodeName=parSnNodeName, parNetParmCondInitialStgr=parNetParmCondInitialStgr, parCmParmsRrtPauseTime=parCmParmsRrtPauseTime, parNetParmLowTxRate=parNetParmLowTxRate, parCmParmsDnUpTimer=parCmParmsDnUpTimer, parSysParmsConnFail=parSysParmsConnFail, parIfLoAddrMax=parIfLoAddrMax, parTrkTable=parTrkTable, parOnOffCommBreak=parOnOffCommBreak, parCmParmsMinRrGroupSize=parCmParmsMinRrGroupSize, parMnUpdtInterval=parMnUpdtInterval, parNetParmCfDelay=parNetParmCfDelay, parSysParmsMaxIpcdpDDelay=parSysParmsMaxIpcdpDDelay, parMnUpdt=parMnUpdt, parConnRemoteEndpt=parConnRemoteEndpt, parTrkCnfgTrafficClassTs=parTrkCnfgTrafficClassTs, parNetParmCfTestMultiplier=parNetParmCfTestMultiplier, parCmParmsRerouteTimer=parCmParmsRerouteTimer, parSysParmsMaxIpcdpCDelay=parSysParmsMaxIpcdpCDelay, parClockTable=parClockTable, parSysParmsMaxCDelay=parSysParmsMaxCDelay, parTrkAlarmType=parTrkAlarmType, cwParClockConfGroup=cwParClockConfGroup, parConnRemotePort=parConnRemotePort, parIfOperStatus=parIfOperStatus, parCmParmsCostBased=parCmParmsCostBased, parOnOffCommFailTest=parOnOffCommFailTest, cwParNetParamsGroup=cwParNetParamsGroup, parConnRoute=parConnRoute, parSysParmsMaxCdpCDelay=parSysParmsMaxCdpCDelay, cwParMIBGroups=cwParMIBGroups, parRrtFailRsn=parRrtFailRsn, parTrkCnfgTrafficClassAbr=parTrkCnfgTrafficClassAbr, parConnLocalVci=parConnLocalVci, parTrkLoadXmtUsedNts=parTrkLoadXmtUsedNts, parIfMaxConn=parIfMaxConn, parConnRstrZcs=parConnRstrZcs, parNetParmCbMaxTimeout=parNetParmCbMaxTimeout, parClockSource=parClockSource, cwParTrunkLoadConfGroup=cwParTrunkLoadConfGroup, parTrkLoadXmtUsedBdataA=parTrkLoadXmtUsedBdataA, parTrkCnfgCcRestrict=parTrkCnfgCcRestrict, parSysParmsMaxADelay=parSysParmsMaxADelay, parTrkRemoteSlotNumber=parTrkRemoteSlotNumber, parConnection=parConnection, parConnAdminStatus=parConnAdminStatus, parOnOffDrtDelay=parOnOffDrtDelay, parNetParmMsgMaxTimeout=parNetParmMsgMaxTimeout, parNetParmMaxNodeBlks=parNetParmMaxNodeBlks, parIfHiAddrMin=parIfHiAddrMin, parConnMasterShip=parConnMasterShip, parNetParmMsgTimeout=parNetParmMsgTimeout, parSelfNode=parSelfNode, parConnLocalPort=parConnLocalPort, parNetParmCbOffset=parNetParmCbOffset, parTrkCnfgRoutingCost=parTrkCnfgRoutingCost, parTrkLineLoad=parTrkLineLoad, parTrkLoadEntry=parTrkLoadEntry, cwParCompliance=cwParCompliance, parSnNodeId=parSnNodeId, parTrkLocalPortNumber=parTrkLocalPortNumber, parCmParmsMaxRoutingBundle=parCmParmsMaxRoutingBundle, parTrkCnfgTrafficClassFst=parTrkCnfgTrafficClassFst, parSysParmsMaxIpcdpHsdDelay=parSysParmsMaxIpcdpHsdDelay, parTrkRemoteNodeIP=parTrkRemoteNodeIP, cwParCmParamsUpdateGroup=cwParCmParamsUpdateGroup, parVsiConfigParms=parVsiConfigParms, parTrkLoadRcvUsedTs=parTrkLoadRcvUsedTs, parIfLogicalInterface=parIfLogicalInterface, parSwFuncNodeType=parSwFuncNodeType)
