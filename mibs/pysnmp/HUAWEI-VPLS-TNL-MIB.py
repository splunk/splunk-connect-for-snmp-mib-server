#
# PySNMP MIB module HUAWEI-VPLS-TNL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-VPLS-TNL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:38:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Unsigned32, ObjectIdentity, ModuleIdentity, Integer32, IpAddress, Bits, Gauge32, NotificationType, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Integer32", "IpAddress", "Bits", "Gauge32", "NotificationType", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
hwL2VpnVplsTnlExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6))
if mibBuilder.loadTexts: hwL2VpnVplsTnlExt.setLastUpdated('200812151925Z')
if mibBuilder.loadTexts: hwL2VpnVplsTnlExt.setOrganization('Huawei Technologies Co., Ltd.')
hwL2Vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119))
hwVplsTunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1))
hwVplsTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1), )
if mibBuilder.loadTexts: hwVplsTunnelTable.setStatus('current')
hwVplsTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1), ).setIndexNames((0, "HUAWEI-VPLS-TNL-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-TNL-MIB", "hwVplsNexthopPeer"), (0, "HUAWEI-VPLS-TNL-MIB", "hwVplsSiteOrPwId"), (0, "HUAWEI-VPLS-TNL-MIB", "hwVplsPeerTnlId"))
if mibBuilder.loadTexts: hwVplsTunnelEntry.setStatus('current')
hwVplsVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwVplsVsiName.setStatus('current')
hwVplsNexthopPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwVplsNexthopPeer.setStatus('current')
hwVplsSiteOrPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwVplsSiteOrPwId.setStatus('current')
hwVplsPeerTnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: hwVplsPeerTnlId.setStatus('current')
hwVplsTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlName.setStatus('current')
hwVplsTnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lsp", 1), ("crlsp", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlType.setStatus('current')
hwVplsTnlSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlSrcAddress.setStatus('current')
hwVplsTnlDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlDestAddress.setStatus('current')
hwVplsLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspIndex.setStatus('current')
hwVplsLspOutIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspOutIf.setStatus('current')
hwVplsLspOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspOutLabel.setStatus('current')
hwVplsLspNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspNextHop.setStatus('current')
hwVplsLspFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspFec.setStatus('current')
hwVplsLspFecPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspFecPfxLen.setStatus('current')
hwVplsLspIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspIsBackup.setStatus('current')
hwVplsIsBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsIsBalance.setStatus('current')
hwVplsLspTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspTunnelId.setStatus('current')
hwVplsLspSignType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20))).clone(namedValues=NamedValues(("ldp", 1), ("crLdp", 2), ("rsvp", 3), ("bgp", 4), ("l3vpn", 5), ("static", 6), ("crStatic", 7), ("bgpIpv6", 8), ("staticHa", 9), ("l2vpnIpv6", 10), ("maxSignal", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspSignType.setStatus('current')
hwVplsTnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsTnlRowStatus.setStatus('current')
hwVplsTunnelMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 2))
hwVplsTunnelMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3))
hwVplsTunnelMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 1))
hwVplsTunnelMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 1, 1)).setObjects(("HUAWEI-VPLS-TNL-MIB", "hwVplsTunnelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsTunnelMIBCompliance = hwVplsTunnelMIBCompliance.setStatus('current')
hwVplsTunnelMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 2))
hwVplsTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 2, 1)).setObjects(("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlName"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlType"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlSrcAddress"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlDestAddress"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspOutIf"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspOutLabel"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspNextHop"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspFec"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspFecPfxLen"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspIsBackup"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsIsBalance"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspTunnelId"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspSignType"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsTunnelGroup = hwVplsTunnelGroup.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-VPLS-TNL-MIB", hwVplsTunnelMIBGroups=hwVplsTunnelMIBGroups, hwVplsVsiName=hwVplsVsiName, hwVplsTunnelMIBObjects=hwVplsTunnelMIBObjects, hwVplsPeerTnlId=hwVplsPeerTnlId, hwVplsTunnelTable=hwVplsTunnelTable, hwVplsTunnelMIBTraps=hwVplsTunnelMIBTraps, hwVplsTunnelEntry=hwVplsTunnelEntry, hwVplsLspFec=hwVplsLspFec, hwL2Vpn=hwL2Vpn, hwVplsTnlRowStatus=hwVplsTnlRowStatus, hwVplsTnlType=hwVplsTnlType, hwVplsTunnelMIBCompliances=hwVplsTunnelMIBCompliances, hwVplsLspTunnelId=hwVplsLspTunnelId, hwVplsLspSignType=hwVplsLspSignType, hwVplsLspOutLabel=hwVplsLspOutLabel, PYSNMP_MODULE_ID=hwL2VpnVplsTnlExt, hwVplsIsBalance=hwVplsIsBalance, hwVplsTnlName=hwVplsTnlName, hwVplsNexthopPeer=hwVplsNexthopPeer, hwVplsLspIsBackup=hwVplsLspIsBackup, hwVplsLspIndex=hwVplsLspIndex, hwVplsLspFecPfxLen=hwVplsLspFecPfxLen, hwVplsTunnelMIBConformance=hwVplsTunnelMIBConformance, hwVplsTnlDestAddress=hwVplsTnlDestAddress, hwVplsTnlSrcAddress=hwVplsTnlSrcAddress, hwVplsSiteOrPwId=hwVplsSiteOrPwId, hwVplsTunnelGroup=hwVplsTunnelGroup, hwVplsTunnelMIBCompliance=hwVplsTunnelMIBCompliance, hwL2VpnVplsTnlExt=hwL2VpnVplsTnlExt, hwVplsLspNextHop=hwVplsLspNextHop, hwVplsLspOutIf=hwVplsLspOutIf)
