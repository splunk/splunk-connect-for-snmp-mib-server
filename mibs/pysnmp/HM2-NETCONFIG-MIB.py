#
# PySNMP MIB module HM2-NETCONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-NETCONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
HmEnabledStatus, hm2ConfigurationMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "hm2ConfigurationMibs")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
TimeFilter, = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, ModuleIdentity, Gauge32, TimeTicks, iso, Integer32, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "ModuleIdentity", "Gauge32", "TimeTicks", "iso", "Integer32", "ObjectIdentity", "NotificationType", "IpAddress")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
hm2NetConfigMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 20))
hm2NetConfigMib.setRevisions(('2011-03-16 00:00',))
if mibBuilder.loadTexts: hm2NetConfigMib.setLastUpdated('201103160000Z')
if mibBuilder.loadTexts: hm2NetConfigMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2NetConfigMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 0))
hm2NetConfigMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 1))
hm2NetStaticGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1))
hm2NetACDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2))
hm2NetMacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 3))
hm2NetHiDiscoveryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 4))
hm2NetMacACDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 5))
hm2NetOobMgmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6))
hm2NetConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3))).clone('dhcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetConfigProtocol.setStatus('current')
hm2NetLocalIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetLocalIPAddrType.setStatus('current')
hm2NetLocalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetLocalIPAddr.setStatus('current')
hm2NetPrefixLength = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 4), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetPrefixLength.setStatus('current')
hm2NetGatewayIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetGatewayIPAddrType.setStatus('current')
hm2NetGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetGatewayIPAddr.setStatus('current')
hm2NetVlanID = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetVlanID.setStatus('current')
hm2NetVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetVlanPriority.setStatus('current')
hm2NetIpDscpPriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetIpDscpPriority.setStatus('current')
hm2NetMgmtPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetMgmtPort.setStatus('current')
hm2NetDHCPClientId = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetDHCPClientId.setStatus('current')
hm2NetAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("activate", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetAction.setStatus('current')
hm2NetACDStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDStatus.setStatus('current')
hm2NetACDDetectionMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeAndPassive", 1), ("activeDetectionOnly", 2), ("passiveDetectionOnly", 3))).clone('activeAndPassive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDDetectionMode.setStatus('current')
hm2NetACDOngoingProbeStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDOngoingProbeStatus.setStatus('current')
hm2NetACDDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 500)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDDelay.setStatus('current')
hm2NetACDReleaseDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDReleaseDelay.setStatus('current')
hm2NetACDMaxProtection = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDMaxProtection.setStatus('current')
hm2NetACDProtectInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 10000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDProtectInterval.setStatus('current')
hm2NetACDFaultState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetACDFaultState.setStatus('current')
hm2NetACDTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 15), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetACDTrapEnable.setStatus('current')
hm2NetACDAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 20), )
if mibBuilder.loadTexts: hm2NetACDAddrTable.setStatus('current')
hm2NetACDAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 20, 1), ).setIndexNames((0, "HM2-NETCONFIG-MIB", "hm2NetACDTimeMark"))
if mibBuilder.loadTexts: hm2NetACDAddrEntry.setStatus('current')
hm2NetACDTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 20, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetACDTimeMark.setStatus('current')
hm2NetACDAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 20, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetACDAddrType.setStatus('current')
hm2NetACDIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 20, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetACDIPAddr.setStatus('current')
hm2NetACDMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 20, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetACDMAC.setStatus('current')
hm2NetACDifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 2, 20, 1, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetACDifIndex.setStatus('current')
hm2NetLocalBurnedInMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 3, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetLocalBurnedInMacAddr.setStatus('current')
hm2NetLocalAdminMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 3, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetLocalAdminMacAddress.setStatus('current')
hm2NetMacAddressType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("burned-in", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetMacAddressType.setStatus('current')
hm2NetHiDiscoveryOperation = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 4, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetHiDiscoveryOperation.setStatus('current')
hm2NetHiDiscoveryMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readWrite", 1), ("readOnly", 2))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetHiDiscoveryMode.setStatus('current')
hm2NetHiDiscoveryBlinking = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 4, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetHiDiscoveryBlinking.setStatus('current')
hm2NetHiDiscoveryProtocol = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 4, 4), Bits().clone(namedValues=NamedValues(("none", 0), ("v1", 1), ("v2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetHiDiscoveryProtocol.setStatus('current')
hm2NetHiDiscoveryRelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 4, 5), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetHiDiscoveryRelay.setStatus('current')
hm2NetMacACDStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 5, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetMacACDStatus.setStatus('current')
hm2NetMacACDConflictAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 5, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetMacACDConflictAddress.setStatus('current')
hm2NetACDNotification = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 20, 0, 1)).setObjects(("HM2-NETCONFIG-MIB", "hm2NetACDTimeMark"), ("HM2-NETCONFIG-MIB", "hm2NetACDAddrType"), ("HM2-NETCONFIG-MIB", "hm2NetACDIPAddr"), ("HM2-NETCONFIG-MIB", "hm2NetACDMAC"), ("HM2-NETCONFIG-MIB", "hm2NetACDifIndex"))
if mibBuilder.loadTexts: hm2NetACDNotification.setStatus('current')
hm2NetMacACDNotification = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 20, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("HM2-NETCONFIG-MIB", "hm2NetMacACDConflictAddress"))
if mibBuilder.loadTexts: hm2NetMacACDNotification.setStatus('current')
hm2NetOobMgmtAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtAdminState.setStatus('current')
hm2NetOobMgmtProtocol = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtProtocol.setStatus('current')
hm2NetOobMgmtIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtIPAddrType.setStatus('current')
hm2NetOobMgmtIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtIPAddr.setStatus('current')
hm2NetOobMgmtPrefixLength = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 5), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtPrefixLength.setStatus('current')
hm2NetOobMgmtGatewayIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 6), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtGatewayIPAddrType.setStatus('current')
hm2NetOobMgmtGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 7), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtGatewayIPAddr.setStatus('current')
hm2NetOobMgmtMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetOobMgmtMacAddress.setStatus('current')
hm2NetOobMgmtOperState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NetOobMgmtOperState.setStatus('current')
hm2NetOobMgmtAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 20, 1, 6, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("activate", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NetOobMgmtAction.setStatus('current')
mibBuilder.exportSymbols("HM2-NETCONFIG-MIB", hm2NetACDAddrType=hm2NetACDAddrType, hm2NetOobMgmtGatewayIPAddr=hm2NetOobMgmtGatewayIPAddr, hm2NetMacACDConflictAddress=hm2NetMacACDConflictAddress, hm2NetConfigMibNotifications=hm2NetConfigMibNotifications, hm2NetHiDiscoveryGroup=hm2NetHiDiscoveryGroup, hm2NetHiDiscoveryBlinking=hm2NetHiDiscoveryBlinking, hm2NetOobMgmtProtocol=hm2NetOobMgmtProtocol, hm2NetACDGroup=hm2NetACDGroup, hm2NetOobMgmtAction=hm2NetOobMgmtAction, hm2NetDHCPClientId=hm2NetDHCPClientId, hm2NetACDDetectionMode=hm2NetACDDetectionMode, hm2NetACDNotification=hm2NetACDNotification, hm2NetACDIPAddr=hm2NetACDIPAddr, hm2NetGatewayIPAddr=hm2NetGatewayIPAddr, hm2NetMacGroup=hm2NetMacGroup, hm2NetACDAddrEntry=hm2NetACDAddrEntry, hm2NetACDMaxProtection=hm2NetACDMaxProtection, hm2NetACDFaultState=hm2NetACDFaultState, hm2NetHiDiscoveryRelay=hm2NetHiDiscoveryRelay, hm2NetOobMgmtIPAddr=hm2NetOobMgmtIPAddr, hm2NetHiDiscoveryMode=hm2NetHiDiscoveryMode, hm2NetLocalIPAddrType=hm2NetLocalIPAddrType, hm2NetMgmtPort=hm2NetMgmtPort, hm2NetMacAddressType=hm2NetMacAddressType, hm2NetVlanPriority=hm2NetVlanPriority, hm2NetLocalBurnedInMacAddr=hm2NetLocalBurnedInMacAddr, hm2NetACDTimeMark=hm2NetACDTimeMark, hm2NetACDMAC=hm2NetACDMAC, hm2NetPrefixLength=hm2NetPrefixLength, hm2NetHiDiscoveryProtocol=hm2NetHiDiscoveryProtocol, hm2NetMacACDGroup=hm2NetMacACDGroup, hm2NetOobMgmtGroup=hm2NetOobMgmtGroup, hm2NetConfigMibObjects=hm2NetConfigMibObjects, hm2NetOobMgmtIPAddrType=hm2NetOobMgmtIPAddrType, hm2NetLocalIPAddr=hm2NetLocalIPAddr, hm2NetGatewayIPAddrType=hm2NetGatewayIPAddrType, hm2NetACDReleaseDelay=hm2NetACDReleaseDelay, hm2NetACDOngoingProbeStatus=hm2NetACDOngoingProbeStatus, hm2NetHiDiscoveryOperation=hm2NetHiDiscoveryOperation, hm2NetOobMgmtAdminState=hm2NetOobMgmtAdminState, hm2NetACDProtectInterval=hm2NetACDProtectInterval, hm2NetOobMgmtPrefixLength=hm2NetOobMgmtPrefixLength, hm2NetOobMgmtMacAddress=hm2NetOobMgmtMacAddress, hm2NetACDifIndex=hm2NetACDifIndex, hm2NetACDTrapEnable=hm2NetACDTrapEnable, hm2NetAction=hm2NetAction, hm2NetLocalAdminMacAddress=hm2NetLocalAdminMacAddress, hm2NetOobMgmtGatewayIPAddrType=hm2NetOobMgmtGatewayIPAddrType, hm2NetVlanID=hm2NetVlanID, PYSNMP_MODULE_ID=hm2NetConfigMib, hm2NetStaticGroup=hm2NetStaticGroup, hm2NetACDDelay=hm2NetACDDelay, hm2NetConfigMib=hm2NetConfigMib, hm2NetACDAddrTable=hm2NetACDAddrTable, hm2NetIpDscpPriority=hm2NetIpDscpPriority, hm2NetACDStatus=hm2NetACDStatus, hm2NetMacACDStatus=hm2NetMacACDStatus, hm2NetOobMgmtOperState=hm2NetOobMgmtOperState, hm2NetConfigProtocol=hm2NetConfigProtocol, hm2NetMacACDNotification=hm2NetMacACDNotification)
