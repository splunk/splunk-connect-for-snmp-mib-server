#
# PySNMP MIB module OPT-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPT-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Bits, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, iso, Unsigned32, ModuleIdentity, Counter32, ObjectIdentity, transmission, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "iso", "Unsigned32", "ModuleIdentity", "Counter32", "ObjectIdentity", "transmission", "IpAddress", "NotificationType")
DisplayString, TruthValue, TextualConvention, RowPointer, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowPointer", "RowStatus")
optIfMibModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 133))
optIfMibModule.setRevisions(('2003-08-13 00:00',))
if mibBuilder.loadTexts: optIfMibModule.setLastUpdated('200308130000Z')
if mibBuilder.loadTexts: optIfMibModule.setOrganization('IETF AToM MIB Working Group')
class OptIfAcTI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

class OptIfBitRateK(TextualConvention, Integer32):
    status = 'current'

class OptIfDEGM(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(2, 10)

class OptIfDEGThr(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class OptIfDirectionality(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("sink", 1), ("source", 2), ("bidirectional", 3))

class OptIfSinkOrSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sink", 1), ("source", 2))

class OptIfExDAPI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class OptIfExSAPI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class OptIfIntervalNumber(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 96)

class OptIfTIMDetMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("dapi", 2), ("sapi", 3), ("both", 4))

class OptIfTxTI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

optIfObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1))
optIfConfs = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2))
optIfOTMn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 1))
optIfPerfMon = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 2))
optIfOTSn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 3))
optIfOMSn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 4))
optIfOChGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 5))
optIfOCh = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 6))
optIfOTUk = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 7))
optIfODUk = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 8))
optIfODUkT = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 9))
optIfGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2, 1))
optIfCompl = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2, 2))
optIfOTMnTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1), )
if mibBuilder.loadTexts: optIfOTMnTable.setStatus('current')
optIfOTMnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTMnEntry.setStatus('current')
optIfOTMnOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnOrder.setStatus('current')
optIfOTMnReduced = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnReduced.setStatus('current')
optIfOTMnBitRates = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("bitRateK1", 0), ("bitRateK2", 1), ("bitRateK3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnBitRates.setStatus('current')
optIfOTMnInterfaceType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnInterfaceType.setStatus('current')
optIfOTMnTcmMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTMnTcmMax.setStatus('current')
optIfOTMnOpticalReach = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("intraOffice", 1), ("shortHaul", 2), ("longHaul", 3), ("veryLongHaul", 4), ("ultraLongHaul", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnOpticalReach.setStatus('current')
optIfPerfMonIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1), )
if mibBuilder.loadTexts: optIfPerfMonIntervalTable.setStatus('current')
optIfPerfMonIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfPerfMonIntervalEntry.setStatus('current')
optIfPerfMonCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonCurrentTimeElapsed.setStatus('current')
optIfPerfMonCurDayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonCurDayTimeElapsed.setStatus('current')
optIfPerfMonIntervalNumIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonIntervalNumIntervals.setStatus('current')
optIfPerfMonIntervalNumInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonIntervalNumInvalidIntervals.setStatus('current')
optIfOTSnConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1), )
if mibBuilder.loadTexts: optIfOTSnConfigTable.setStatus('current')
optIfOTSnConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnConfigEntry.setStatus('current')
optIfOTSnDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnDirectionality.setStatus('current')
optIfOTSnAprStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnAprStatus.setStatus('current')
optIfOTSnAprControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnAprControl.setStatus('current')
optIfOTSnTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 4), OptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnTraceIdentifierTransmitted.setStatus('current')
optIfOTSnDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 5), OptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnDAPIExpected.setStatus('current')
optIfOTSnSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 6), OptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSAPIExpected.setStatus('current')
optIfOTSnTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 7), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnTraceIdentifierAccepted.setStatus('current')
optIfOTSnTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 8), OptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnTIMDetMode.setStatus('current')
optIfOTSnTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnTIMActEnabled.setStatus('current')
optIfOTSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 10), Bits().clone(namedValues=NamedValues(("bdiP", 0), ("bdiO", 1), ("bdi", 2), ("tim", 3), ("losP", 4), ("losO", 5), ("los", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnCurrentStatus.setStatus('current')
optIfOTSnSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2), )
if mibBuilder.loadTexts: optIfOTSnSinkCurrentTable.setStatus('current')
optIfOTSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSinkCurrentEntry.setStatus('current')
optIfOTSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentSuspectedFlag.setStatus('current')
optIfOTSnSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentInputPower.setStatus('current')
optIfOTSnSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowInputPower.setStatus('current')
optIfOTSnSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentHighInputPower.setStatus('current')
optIfOTSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowerInputPowerThreshold.setStatus('current')
optIfOTSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentUpperInputPowerThreshold.setStatus('current')
optIfOTSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentOutputPower.setStatus('current')
optIfOTSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowOutputPower.setStatus('current')
optIfOTSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentHighOutputPower.setStatus('current')
optIfOTSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowerOutputPowerThreshold.setStatus('current')
optIfOTSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentUpperOutputPowerThreshold.setStatus('current')
optIfOTSnSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3), )
if mibBuilder.loadTexts: optIfOTSnSinkIntervalTable.setStatus('current')
optIfOTSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOTSnSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOTSnSinkIntervalEntry.setStatus('current')
optIfOTSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOTSnSinkIntervalNumber.setStatus('current')
optIfOTSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalSuspectedFlag.setStatus('current')
optIfOTSnSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLastInputPower.setStatus('current')
optIfOTSnSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLowInputPower.setStatus('current')
optIfOTSnSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalHighInputPower.setStatus('current')
optIfOTSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLastOutputPower.setStatus('current')
optIfOTSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLowOutputPower.setStatus('current')
optIfOTSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalHighOutputPower.setStatus('current')
optIfOTSnSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4), )
if mibBuilder.loadTexts: optIfOTSnSinkCurDayTable.setStatus('current')
optIfOTSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSinkCurDayEntry.setStatus('current')
optIfOTSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDaySuspectedFlag.setStatus('current')
optIfOTSnSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayLowInputPower.setStatus('current')
optIfOTSnSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayHighInputPower.setStatus('current')
optIfOTSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayLowOutputPower.setStatus('current')
optIfOTSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayHighOutputPower.setStatus('current')
optIfOTSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5), )
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayTable.setStatus('current')
optIfOTSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayEntry.setStatus('current')
optIfOTSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDaySuspectedFlag.setStatus('current')
optIfOTSnSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLastInputPower.setStatus('current')
optIfOTSnSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLowInputPower.setStatus('current')
optIfOTSnSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayHighInputPower.setStatus('current')
optIfOTSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLastOutputPower.setStatus('current')
optIfOTSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLowOutputPower.setStatus('current')
optIfOTSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayHighOutputPower.setStatus('current')
optIfOTSnSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6), )
if mibBuilder.loadTexts: optIfOTSnSrcCurrentTable.setStatus('current')
optIfOTSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSrcCurrentEntry.setStatus('current')
optIfOTSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentSuspectedFlag.setStatus('current')
optIfOTSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentOutputPower.setStatus('current')
optIfOTSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowOutputPower.setStatus('current')
optIfOTSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentHighOutputPower.setStatus('current')
optIfOTSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowerOutputPowerThreshold.setStatus('current')
optIfOTSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentUpperOutputPowerThreshold.setStatus('current')
optIfOTSnSrcCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentInputPower.setStatus('current')
optIfOTSnSrcCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowInputPower.setStatus('current')
optIfOTSnSrcCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentHighInputPower.setStatus('current')
optIfOTSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowerInputPowerThreshold.setStatus('current')
optIfOTSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentUpperInputPowerThreshold.setStatus('current')
optIfOTSnSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7), )
if mibBuilder.loadTexts: optIfOTSnSrcIntervalTable.setStatus('current')
optIfOTSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOTSnSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOTSnSrcIntervalEntry.setStatus('current')
optIfOTSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOTSnSrcIntervalNumber.setStatus('current')
optIfOTSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalSuspectedFlag.setStatus('current')
optIfOTSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLastOutputPower.setStatus('current')
optIfOTSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLowOutputPower.setStatus('current')
optIfOTSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalHighOutputPower.setStatus('current')
optIfOTSnSrcIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLastInputPower.setStatus('current')
optIfOTSnSrcIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLowInputPower.setStatus('current')
optIfOTSnSrcIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalHighInputPower.setStatus('current')
optIfOTSnSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8), )
if mibBuilder.loadTexts: optIfOTSnSrcCurDayTable.setStatus('current')
optIfOTSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSrcCurDayEntry.setStatus('current')
optIfOTSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDaySuspectedFlag.setStatus('current')
optIfOTSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayLowOutputPower.setStatus('current')
optIfOTSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayHighOutputPower.setStatus('current')
optIfOTSnSrcCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayLowInputPower.setStatus('current')
optIfOTSnSrcCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayHighInputPower.setStatus('current')
optIfOTSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9), )
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayTable.setStatus('current')
optIfOTSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayEntry.setStatus('current')
optIfOTSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDaySuspectedFlag.setStatus('current')
optIfOTSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLastOutputPower.setStatus('current')
optIfOTSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLowOutputPower.setStatus('current')
optIfOTSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayHighOutputPower.setStatus('current')
optIfOTSnSrcPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLastInputPower.setStatus('current')
optIfOTSnSrcPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLowInputPower.setStatus('current')
optIfOTSnSrcPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayHighInputPower.setStatus('current')
optIfOMSnConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1), )
if mibBuilder.loadTexts: optIfOMSnConfigTable.setStatus('current')
optIfOMSnConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnConfigEntry.setStatus('current')
optIfOMSnDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnDirectionality.setStatus('current')
optIfOMSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1, 2), Bits().clone(namedValues=NamedValues(("ssfP", 0), ("ssfO", 1), ("ssf", 2), ("bdiP", 3), ("bdiO", 4), ("bdi", 5), ("losP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnCurrentStatus.setStatus('current')
optIfOMSnSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2), )
if mibBuilder.loadTexts: optIfOMSnSinkCurrentTable.setStatus('current')
optIfOMSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSinkCurrentEntry.setStatus('current')
optIfOMSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentSuspectedFlag.setStatus('current')
optIfOMSnSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentAggregatedInputPower.setStatus('current')
optIfOMSnSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowAggregatedInputPower.setStatus('current')
optIfOMSnSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentHighAggregatedInputPower.setStatus('current')
optIfOMSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowerInputPowerThreshold.setStatus('current')
optIfOMSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentUpperInputPowerThreshold.setStatus('current')
optIfOMSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentOutputPower.setStatus('current')
optIfOMSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowOutputPower.setStatus('current')
optIfOMSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentHighOutputPower.setStatus('current')
optIfOMSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowerOutputPowerThreshold.setStatus('current')
optIfOMSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentUpperOutputPowerThreshold.setStatus('current')
optIfOMSnSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3), )
if mibBuilder.loadTexts: optIfOMSnSinkIntervalTable.setStatus('current')
optIfOMSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOMSnSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOMSnSinkIntervalEntry.setStatus('current')
optIfOMSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOMSnSinkIntervalNumber.setStatus('current')
optIfOMSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalSuspectedFlag.setStatus('current')
optIfOMSnSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLastAggregatedInputPower.setStatus('current')
optIfOMSnSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLowAggregatedInputPower.setStatus('current')
optIfOMSnSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalHighAggregatedInputPower.setStatus('current')
optIfOMSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLastOutputPower.setStatus('current')
optIfOMSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLowOutputPower.setStatus('current')
optIfOMSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalHighOutputPower.setStatus('current')
optIfOMSnSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4), )
if mibBuilder.loadTexts: optIfOMSnSinkCurDayTable.setStatus('current')
optIfOMSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSinkCurDayEntry.setStatus('current')
optIfOMSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDaySuspectedFlag.setStatus('current')
optIfOMSnSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayLowAggregatedInputPower.setStatus('current')
optIfOMSnSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayHighAggregatedInputPower.setStatus('current')
optIfOMSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayLowOutputPower.setStatus('current')
optIfOMSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayHighOutputPower.setStatus('current')
optIfOMSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5), )
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayTable.setStatus('current')
optIfOMSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayEntry.setStatus('current')
optIfOMSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDaySuspectedFlag.setStatus('current')
optIfOMSnSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLastAggregatedInputPower.setStatus('current')
optIfOMSnSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLowAggregatedInputPower.setStatus('current')
optIfOMSnSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayHighAggregatedInputPower.setStatus('current')
optIfOMSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLastOutputPower.setStatus('current')
optIfOMSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLowOutputPower.setStatus('current')
optIfOMSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayHighOutputPower.setStatus('current')
optIfOMSnSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6), )
if mibBuilder.loadTexts: optIfOMSnSrcCurrentTable.setStatus('current')
optIfOMSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSrcCurrentEntry.setStatus('current')
optIfOMSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentSuspectedFlag.setStatus('current')
optIfOMSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentOutputPower.setStatus('current')
optIfOMSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowOutputPower.setStatus('current')
optIfOMSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentHighOutputPower.setStatus('current')
optIfOMSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowerOutputPowerThreshold.setStatus('current')
optIfOMSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentUpperOutputPowerThreshold.setStatus('current')
optIfOMSnSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentAggregatedInputPower.setStatus('current')
optIfOMSnSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowAggregatedInputPower.setStatus('current')
optIfOMSnSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentHighAggregatedInputPower.setStatus('current')
optIfOMSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowerInputPowerThreshold.setStatus('current')
optIfOMSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentUpperInputPowerThreshold.setStatus('current')
optIfOMSnSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7), )
if mibBuilder.loadTexts: optIfOMSnSrcIntervalTable.setStatus('current')
optIfOMSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOMSnSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOMSnSrcIntervalEntry.setStatus('current')
optIfOMSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOMSnSrcIntervalNumber.setStatus('current')
optIfOMSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalSuspectedFlag.setStatus('current')
optIfOMSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLastOutputPower.setStatus('current')
optIfOMSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLowOutputPower.setStatus('current')
optIfOMSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalHighOutputPower.setStatus('current')
optIfOMSnSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLastAggregatedInputPower.setStatus('current')
optIfOMSnSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLowAggregatedInputPower.setStatus('current')
optIfOMSnSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalHighAggregatedInputPower.setStatus('current')
optIfOMSnSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8), )
if mibBuilder.loadTexts: optIfOMSnSrcCurDayTable.setStatus('current')
optIfOMSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSrcCurDayEntry.setStatus('current')
optIfOMSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDaySuspectedFlag.setStatus('current')
optIfOMSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayLowOutputPower.setStatus('current')
optIfOMSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayHighOutputPower.setStatus('current')
optIfOMSnSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayLowAggregatedInputPower.setStatus('current')
optIfOMSnSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayHighAggregatedInputPower.setStatus('current')
optIfOMSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9), )
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayTable.setStatus('current')
optIfOMSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayEntry.setStatus('current')
optIfOMSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDaySuspectedFlag.setStatus('current')
optIfOMSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLastOutputPower.setStatus('current')
optIfOMSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLowOutputPower.setStatus('current')
optIfOMSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayHighOutputPower.setStatus('current')
optIfOMSnSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLastAggregatedInputPower.setStatus('current')
optIfOMSnSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLowAggregatedInputPower.setStatus('current')
optIfOMSnSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayHighAggregatedInputPower.setStatus('current')
optIfOChGroupConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1), )
if mibBuilder.loadTexts: optIfOChGroupConfigTable.setStatus('current')
optIfOChGroupConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupConfigEntry.setStatus('current')
optIfOChGroupDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupDirectionality.setStatus('current')
optIfOChGroupSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2), )
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentTable.setStatus('current')
optIfOChGroupSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentEntry.setStatus('current')
optIfOChGroupSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentSuspectedFlag.setStatus('current')
optIfOChGroupSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentAggregatedInputPower.setStatus('current')
optIfOChGroupSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowAggregatedInputPower.setStatus('current')
optIfOChGroupSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentHighAggregatedInputPower.setStatus('current')
optIfOChGroupSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowerInputPowerThreshold.setStatus('current')
optIfOChGroupSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentUpperInputPowerThreshold.setStatus('current')
optIfOChGroupSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentOutputPower.setStatus('current')
optIfOChGroupSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowOutputPower.setStatus('current')
optIfOChGroupSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentHighOutputPower.setStatus('current')
optIfOChGroupSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowerOutputPowerThreshold.setStatus('current')
optIfOChGroupSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentUpperOutputPowerThreshold.setStatus('current')
optIfOChGroupSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3), )
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalTable.setStatus('current')
optIfOChGroupSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChGroupSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalEntry.setStatus('current')
optIfOChGroupSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalNumber.setStatus('current')
optIfOChGroupSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalSuspectedFlag.setStatus('current')
optIfOChGroupSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLastAggregatedInputPower.setStatus('current')
optIfOChGroupSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLowAggregatedInputPower.setStatus('current')
optIfOChGroupSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalHighAggregatedInputPower.setStatus('current')
optIfOChGroupSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLastOutputPower.setStatus('current')
optIfOChGroupSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLowOutputPower.setStatus('current')
optIfOChGroupSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalHighOutputPower.setStatus('current')
optIfOChGroupSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4), )
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayTable.setStatus('current')
optIfOChGroupSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayEntry.setStatus('current')
optIfOChGroupSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDaySuspectedFlag.setStatus('current')
optIfOChGroupSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayLowAggregatedInputPower.setStatus('current')
optIfOChGroupSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayHighAggregatedInputPower.setStatus('current')
optIfOChGroupSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayLowOutputPower.setStatus('current')
optIfOChGroupSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayHighOutputPower.setStatus('current')
optIfOChGroupSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5), )
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayTable.setStatus('current')
optIfOChGroupSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayEntry.setStatus('current')
optIfOChGroupSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDaySuspectedFlag.setStatus('current')
optIfOChGroupSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLastAggregatedInputPower.setStatus('current')
optIfOChGroupSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLowAggregatedInputPower.setStatus('current')
optIfOChGroupSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayHighAggregatedInputPower.setStatus('current')
optIfOChGroupSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLastOutputPower.setStatus('current')
optIfOChGroupSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLowOutputPower.setStatus('current')
optIfOChGroupSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayHighOutputPower.setStatus('current')
optIfOChGroupSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6), )
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentTable.setStatus('current')
optIfOChGroupSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentEntry.setStatus('current')
optIfOChGroupSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentSuspectedFlag.setStatus('current')
optIfOChGroupSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentOutputPower.setStatus('current')
optIfOChGroupSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowOutputPower.setStatus('current')
optIfOChGroupSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentHighOutputPower.setStatus('current')
optIfOChGroupSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowerOutputPowerThreshold.setStatus('current')
optIfOChGroupSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentUpperOutputPowerThreshold.setStatus('current')
optIfOChGroupSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentAggregatedInputPower.setStatus('current')
optIfOChGroupSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowAggregatedInputPower.setStatus('current')
optIfOChGroupSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentHighAggregatedInputPower.setStatus('current')
optIfOChGroupSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowerInputPowerThreshold.setStatus('current')
optIfOChGroupSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentUpperInputPowerThreshold.setStatus('current')
optIfOChGroupSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7), )
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalTable.setStatus('current')
optIfOChGroupSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChGroupSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalEntry.setStatus('current')
optIfOChGroupSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalNumber.setStatus('current')
optIfOChGroupSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalSuspectedFlag.setStatus('current')
optIfOChGroupSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLastOutputPower.setStatus('current')
optIfOChGroupSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLowOutputPower.setStatus('current')
optIfOChGroupSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalHighOutputPower.setStatus('current')
optIfOChGroupSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLastAggregatedInputPower.setStatus('current')
optIfOChGroupSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLowAggregatedInputPower.setStatus('current')
optIfOChGroupSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalHighAggregatedInputPower.setStatus('current')
optIfOChGroupSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8), )
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayTable.setStatus('current')
optIfOChGroupSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayEntry.setStatus('current')
optIfOChGroupSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDaySuspectedFlag.setStatus('current')
optIfOChGroupSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayLowOutputPower.setStatus('current')
optIfOChGroupSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayHighOutputPower.setStatus('current')
optIfOChGroupSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayLowAggregatedInputPower.setStatus('current')
optIfOChGroupSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayHighAggregatedInputPower.setStatus('current')
optIfOChGroupSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9), )
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayTable.setStatus('current')
optIfOChGroupSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayEntry.setStatus('current')
optIfOChGroupSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDaySuspectedFlag.setStatus('current')
optIfOChGroupSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLastOutputPower.setStatus('current')
optIfOChGroupSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLowOutputPower.setStatus('current')
optIfOChGroupSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayHighOutputPower.setStatus('current')
optIfOChGroupSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLastAggregatedInputPower.setStatus('current')
optIfOChGroupSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLowAggregatedInputPower.setStatus('current')
optIfOChGroupSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayHighAggregatedInputPower.setStatus('current')
optIfOChConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1), )
if mibBuilder.loadTexts: optIfOChConfigTable.setStatus('current')
optIfOChConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChConfigEntry.setStatus('current')
optIfOChDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChDirectionality.setStatus('current')
optIfOChCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1, 2), Bits().clone(namedValues=NamedValues(("losP", 0), ("los", 1), ("oci", 2), ("ssfP", 3), ("ssfO", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChCurrentStatus.setStatus('current')
optIfOChSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2), )
if mibBuilder.loadTexts: optIfOChSinkCurrentTable.setStatus('current')
optIfOChSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSinkCurrentEntry.setStatus('current')
optIfOChSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentSuspectedFlag.setStatus('current')
optIfOChSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentInputPower.setStatus('current')
optIfOChSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentLowInputPower.setStatus('current')
optIfOChSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentHighInputPower.setStatus('current')
optIfOChSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSinkCurrentLowerInputPowerThreshold.setStatus('current')
optIfOChSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSinkCurrentUpperInputPowerThreshold.setStatus('current')
optIfOChSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3), )
if mibBuilder.loadTexts: optIfOChSinkIntervalTable.setStatus('current')
optIfOChSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOChSinkIntervalEntry.setStatus('current')
optIfOChSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChSinkIntervalNumber.setStatus('current')
optIfOChSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalSuspectedFlag.setStatus('current')
optIfOChSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalLastInputPower.setStatus('current')
optIfOChSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalLowInputPower.setStatus('current')
optIfOChSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalHighInputPower.setStatus('current')
optIfOChSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4), )
if mibBuilder.loadTexts: optIfOChSinkCurDayTable.setStatus('current')
optIfOChSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSinkCurDayEntry.setStatus('current')
optIfOChSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurDaySuspectedFlag.setStatus('current')
optIfOChSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurDayLowInputPower.setStatus('current')
optIfOChSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurDayHighInputPower.setStatus('current')
optIfOChSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5), )
if mibBuilder.loadTexts: optIfOChSinkPrevDayTable.setStatus('current')
optIfOChSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSinkPrevDayEntry.setStatus('current')
optIfOChSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDaySuspectedFlag.setStatus('current')
optIfOChSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDayLastInputPower.setStatus('current')
optIfOChSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDayLowInputPower.setStatus('current')
optIfOChSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDayHighInputPower.setStatus('current')
optIfOChSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6), )
if mibBuilder.loadTexts: optIfOChSrcCurrentTable.setStatus('current')
optIfOChSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSrcCurrentEntry.setStatus('current')
optIfOChSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentSuspectedFlag.setStatus('current')
optIfOChSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentOutputPower.setStatus('current')
optIfOChSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentLowOutputPower.setStatus('current')
optIfOChSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentHighOutputPower.setStatus('current')
optIfOChSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSrcCurrentLowerOutputPowerThreshold.setStatus('current')
optIfOChSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSrcCurrentUpperOutputPowerThreshold.setStatus('current')
optIfOChSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7), )
if mibBuilder.loadTexts: optIfOChSrcIntervalTable.setStatus('current')
optIfOChSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOChSrcIntervalEntry.setStatus('current')
optIfOChSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChSrcIntervalNumber.setStatus('current')
optIfOChSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalSuspectedFlag.setStatus('current')
optIfOChSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalLastOutputPower.setStatus('current')
optIfOChSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalLowOutputPower.setStatus('current')
optIfOChSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalHighOutputPower.setStatus('current')
optIfOChSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8), )
if mibBuilder.loadTexts: optIfOChSrcCurDayTable.setStatus('current')
optIfOChSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSrcCurDayEntry.setStatus('current')
optIfOChSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurDaySuspectedFlag.setStatus('current')
optIfOChSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurDayLowOutputPower.setStatus('current')
optIfOChSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurDayHighOutputPower.setStatus('current')
optIfOChSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9), )
if mibBuilder.loadTexts: optIfOChSrcPrevDayTable.setStatus('current')
optIfOChSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSrcPrevDayEntry.setStatus('current')
optIfOChSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDaySuspectedFlag.setStatus('current')
optIfOChSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDayLastOutputPower.setStatus('current')
optIfOChSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDayLowOutputPower.setStatus('current')
optIfOChSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDayHighOutputPower.setStatus('current')
optIfOTUkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1), )
if mibBuilder.loadTexts: optIfOTUkConfigTable.setStatus('current')
optIfOTUkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTUkConfigEntry.setStatus('current')
optIfOTUkDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkDirectionality.setStatus('current')
optIfOTUkBitRateK = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 2), OptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkBitRateK.setStatus('current')
optIfOTUkTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 3), OptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkTraceIdentifierTransmitted.setStatus('current')
optIfOTUkDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 4), OptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkDAPIExpected.setStatus('current')
optIfOTUkSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 5), OptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSAPIExpected.setStatus('current')
optIfOTUkTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 6), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkTraceIdentifierAccepted.setStatus('current')
optIfOTUkTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 7), OptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkTIMDetMode.setStatus('current')
optIfOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkTIMActEnabled.setStatus('current')
optIfOTUkDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 9), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkDEGThr.setStatus('current')
optIfOTUkDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 10), OptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkDEGM.setStatus('current')
optIfOTUkSinkAdaptActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSinkAdaptActive.setStatus('current')
optIfOTUkSourceAdaptActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSourceAdaptActive.setStatus('current')
optIfOTUkSinkFECEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSinkFECEnabled.setStatus('current')
optIfOTUkCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 14), Bits().clone(namedValues=NamedValues(("tim", 0), ("deg", 1), ("bdi", 2), ("ssf", 3), ("lof", 4), ("ais", 5), ("lom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkCurrentStatus.setStatus('current')
optIfGCC0ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2), )
if mibBuilder.loadTexts: optIfGCC0ConfigTable.setStatus('current')
optIfGCC0ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfGCC0Directionality"))
if mibBuilder.loadTexts: optIfGCC0ConfigEntry.setStatus('current')
optIfGCC0Directionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 1), OptIfDirectionality())
if mibBuilder.loadTexts: optIfGCC0Directionality.setStatus('current')
optIfGCC0Application = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC0Application.setStatus('current')
optIfGCC0RowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC0RowStatus.setStatus('current')
optIfODUkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1), )
if mibBuilder.loadTexts: optIfODUkConfigTable.setStatus('current')
optIfODUkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfODUkConfigEntry.setStatus('current')
optIfODUkDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkDirectionality.setStatus('current')
optIfODUkBitRateK = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 2), OptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkBitRateK.setStatus('current')
optIfODUkTcmFieldsInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 3), Bits().clone(namedValues=NamedValues(("tcmField1", 0), ("tcmField2", 1), ("tcmField3", 2), ("tcmField4", 3), ("tcmField5", 4), ("tcmField6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTcmFieldsInUse.setStatus('current')
optIfODUkPositionSeqCurrentSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkPositionSeqCurrentSize.setStatus('current')
optIfODUkTtpPresent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTtpPresent.setStatus('current')
optIfODUkTtpConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2), )
if mibBuilder.loadTexts: optIfODUkTtpConfigTable.setStatus('current')
optIfODUkTtpConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfODUkTtpConfigEntry.setStatus('current')
optIfODUkTtpTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 1), OptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpTraceIdentifierTransmitted.setStatus('current')
optIfODUkTtpDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 2), OptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpDAPIExpected.setStatus('current')
optIfODUkTtpSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 3), OptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpSAPIExpected.setStatus('current')
optIfODUkTtpTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 4), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTtpTraceIdentifierAccepted.setStatus('current')
optIfODUkTtpTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 5), OptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpTIMDetMode.setStatus('current')
optIfODUkTtpTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpTIMActEnabled.setStatus('current')
optIfODUkTtpDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 7), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpDEGThr.setStatus('current')
optIfODUkTtpDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 8), OptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpDEGM.setStatus('current')
optIfODUkTtpCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 9), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTtpCurrentStatus.setStatus('current')
optIfODUkPositionSeqTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3), )
if mibBuilder.loadTexts: optIfODUkPositionSeqTable.setStatus('current')
optIfODUkPositionSeqEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkPositionSeqIndex"))
if mibBuilder.loadTexts: optIfODUkPositionSeqEntry.setStatus('current')
optIfODUkPositionSeqIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: optIfODUkPositionSeqIndex.setStatus('current')
optIfODUkPositionSeqPosition = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkPositionSeqPosition.setStatus('current')
optIfODUkPositionSeqPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkPositionSeqPointer.setStatus('current')
optIfODUkNimConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4), )
if mibBuilder.loadTexts: optIfODUkNimConfigTable.setStatus('current')
optIfODUkNimConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkNimDirectionality"))
if mibBuilder.loadTexts: optIfODUkNimConfigEntry.setStatus('current')
optIfODUkNimDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 1), OptIfSinkOrSource())
if mibBuilder.loadTexts: optIfODUkNimDirectionality.setStatus('current')
optIfODUkNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 2), OptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimDAPIExpected.setStatus('current')
optIfODUkNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 3), OptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimSAPIExpected.setStatus('current')
optIfODUkNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 4), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkNimTraceIdentifierAccepted.setStatus('current')
optIfODUkNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 5), OptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimTIMDetMode.setStatus('current')
optIfODUkNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimTIMActEnabled.setStatus('current')
optIfODUkNimDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 7), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimDEGThr.setStatus('current')
optIfODUkNimDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 8), OptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimDEGM.setStatus('current')
optIfODUkNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 9), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkNimCurrentStatus.setStatus('current')
optIfODUkNimRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimRowStatus.setStatus('current')
optIfGCC12ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5), )
if mibBuilder.loadTexts: optIfGCC12ConfigTable.setStatus('current')
optIfGCC12ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfGCC12Codirectional"), (0, "OPT-IF-MIB", "optIfGCC12GCCAccess"))
if mibBuilder.loadTexts: optIfGCC12ConfigEntry.setStatus('current')
optIfGCC12Codirectional = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 1), TruthValue())
if mibBuilder.loadTexts: optIfGCC12Codirectional.setStatus('current')
optIfGCC12GCCAccess = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gcc1", 1), ("gcc2", 2), ("gcc1and2", 3))))
if mibBuilder.loadTexts: optIfGCC12GCCAccess.setStatus('current')
optIfGCC12GCCPassThrough = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC12GCCPassThrough.setStatus('current')
optIfGCC12Application = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC12Application.setStatus('current')
optIfGCC12RowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC12RowStatus.setStatus('current')
optIfODUkTConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1), )
if mibBuilder.loadTexts: optIfODUkTConfigTable.setStatus('current')
optIfODUkTConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkTTcmField"), (0, "OPT-IF-MIB", "optIfODUkTCodirectional"))
if mibBuilder.loadTexts: optIfODUkTConfigEntry.setStatus('current')
optIfODUkTTcmField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: optIfODUkTTcmField.setStatus('current')
optIfODUkTCodirectional = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 2), TruthValue())
if mibBuilder.loadTexts: optIfODUkTCodirectional.setStatus('current')
optIfODUkTTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 3), OptIfTxTI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTTraceIdentifierTransmitted.setStatus('current')
optIfODUkTDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 4), OptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTDAPIExpected.setStatus('current')
optIfODUkTSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 5), OptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSAPIExpected.setStatus('current')
optIfODUkTTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 6), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTTraceIdentifierAccepted.setStatus('current')
optIfODUkTTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 7), OptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTTIMDetMode.setStatus('current')
optIfODUkTTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTTIMActEnabled.setStatus('current')
optIfODUkTDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 9), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTDEGThr.setStatus('current')
optIfODUkTDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 10), OptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTDEGM.setStatus('current')
optIfODUkTSinkMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("monitor", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSinkMode.setStatus('current')
optIfODUkTSinkLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSinkLockSignalAdminState.setStatus('current')
optIfODUkTSourceLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSourceLockSignalAdminState.setStatus('current')
optIfODUkTCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 14), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTCurrentStatus.setStatus('current')
optIfODUkTRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTRowStatus.setStatus('current')
optIfODUkTNimConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2), )
if mibBuilder.loadTexts: optIfODUkTNimConfigTable.setStatus('current')
optIfODUkTNimConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkTNimTcmField"), (0, "OPT-IF-MIB", "optIfODUkTNimDirectionality"))
if mibBuilder.loadTexts: optIfODUkTNimConfigEntry.setStatus('current')
optIfODUkTNimTcmField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: optIfODUkTNimTcmField.setStatus('current')
optIfODUkTNimDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 2), OptIfSinkOrSource())
if mibBuilder.loadTexts: optIfODUkTNimDirectionality.setStatus('current')
optIfODUkTNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 3), OptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimDAPIExpected.setStatus('current')
optIfODUkTNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 4), OptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimSAPIExpected.setStatus('current')
optIfODUkTNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 5), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTNimTraceIdentifierAccepted.setStatus('current')
optIfODUkTNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 6), OptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimTIMDetMode.setStatus('current')
optIfODUkTNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimTIMActEnabled.setStatus('current')
optIfODUkTNimDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 8), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimDEGThr.setStatus('current')
optIfODUkTNimDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 9), OptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimDEGM.setStatus('current')
optIfODUkTNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 10), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTNimCurrentStatus.setStatus('current')
optIfODUkTNimRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimRowStatus.setStatus('current')
optIfOTMnGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 1)).setObjects(("OPT-IF-MIB", "optIfOTMnOrder"), ("OPT-IF-MIB", "optIfOTMnReduced"), ("OPT-IF-MIB", "optIfOTMnBitRates"), ("OPT-IF-MIB", "optIfOTMnInterfaceType"), ("OPT-IF-MIB", "optIfOTMnTcmMax"), ("OPT-IF-MIB", "optIfOTMnOpticalReach"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTMnGroup = optIfOTMnGroup.setStatus('current')
optIfPerfMonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 2)).setObjects(("OPT-IF-MIB", "optIfPerfMonCurrentTimeElapsed"), ("OPT-IF-MIB", "optIfPerfMonCurDayTimeElapsed"), ("OPT-IF-MIB", "optIfPerfMonIntervalNumIntervals"), ("OPT-IF-MIB", "optIfPerfMonIntervalNumInvalidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfPerfMonGroup = optIfPerfMonGroup.setStatus('current')
optIfOTSnCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 3)).setObjects(("OPT-IF-MIB", "optIfOTSnDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnCommonGroup = optIfOTSnCommonGroup.setStatus('current')
optIfOTSnSourceGroupFull = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 4)).setObjects(("OPT-IF-MIB", "optIfOTSnTraceIdentifierTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSourceGroupFull = optIfOTSnSourceGroupFull.setStatus('current')
optIfOTSnAPRStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 5)).setObjects(("OPT-IF-MIB", "optIfOTSnAprStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnAPRStatusGroup = optIfOTSnAPRStatusGroup.setStatus('current')
optIfOTSnAPRControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 6)).setObjects(("OPT-IF-MIB", "optIfOTSnAprControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnAPRControlGroup = optIfOTSnAPRControlGroup.setStatus('current')
optIfOTSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 7)).setObjects(("OPT-IF-MIB", "optIfOTSnCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkGroupBasic = optIfOTSnSinkGroupBasic.setStatus('current')
optIfOTSnSinkGroupFull = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 8)).setObjects(("OPT-IF-MIB", "optIfOTSnDAPIExpected"), ("OPT-IF-MIB", "optIfOTSnSAPIExpected"), ("OPT-IF-MIB", "optIfOTSnTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfOTSnTIMDetMode"), ("OPT-IF-MIB", "optIfOTSnTIMActEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkGroupFull = optIfOTSnSinkGroupFull.setStatus('current')
optIfOTSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 9)).setObjects(("OPT-IF-MIB", "optIfOTSnSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkPreOtnPMGroup = optIfOTSnSinkPreOtnPMGroup.setStatus('current')
optIfOTSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 10)).setObjects(("OPT-IF-MIB", "optIfOTSnSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkPreOtnPMThresholdGroup = optIfOTSnSinkPreOtnPMThresholdGroup.setStatus('current')
optIfOTSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 11)).setObjects(("OPT-IF-MIB", "optIfOTSnSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayHighInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSourcePreOtnPMGroup = optIfOTSnSourcePreOtnPMGroup.setStatus('current')
optIfOTSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 12)).setObjects(("OPT-IF-MIB", "optIfOTSnSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSourcePreOtnPMThresholdGroup = optIfOTSnSourcePreOtnPMThresholdGroup.setStatus('current')
optIfOMSnCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 13)).setObjects(("OPT-IF-MIB", "optIfOMSnDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnCommonGroup = optIfOMSnCommonGroup.setStatus('current')
optIfOMSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 14)).setObjects(("OPT-IF-MIB", "optIfOMSnCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSinkGroupBasic = optIfOMSnSinkGroupBasic.setStatus('current')
optIfOMSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 15)).setObjects(("OPT-IF-MIB", "optIfOMSnSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSinkPreOtnPMGroup = optIfOMSnSinkPreOtnPMGroup.setStatus('current')
optIfOMSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 16)).setObjects(("OPT-IF-MIB", "optIfOMSnSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSinkPreOtnPMThresholdGroup = optIfOMSnSinkPreOtnPMThresholdGroup.setStatus('current')
optIfOMSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 17)).setObjects(("OPT-IF-MIB", "optIfOMSnSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayHighAggregatedInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSourcePreOtnPMGroup = optIfOMSnSourcePreOtnPMGroup.setStatus('current')
optIfOMSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 18)).setObjects(("OPT-IF-MIB", "optIfOMSnSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSourcePreOtnPMThresholdGroup = optIfOMSnSourcePreOtnPMThresholdGroup.setStatus('current')
optIfOChGroupCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 19)).setObjects(("OPT-IF-MIB", "optIfOChGroupDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupCommonGroup = optIfOChGroupCommonGroup.setStatus('current')
optIfOChGroupSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 20)).setObjects(("OPT-IF-MIB", "optIfOChGroupSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSinkPreOtnPMGroup = optIfOChGroupSinkPreOtnPMGroup.setStatus('current')
optIfOChGroupSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 21)).setObjects(("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSinkPreOtnPMThresholdGroup = optIfOChGroupSinkPreOtnPMThresholdGroup.setStatus('current')
optIfOChGroupSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 22)).setObjects(("OPT-IF-MIB", "optIfOChGroupSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayHighAggregatedInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSourcePreOtnPMGroup = optIfOChGroupSourcePreOtnPMGroup.setStatus('current')
optIfOChGroupSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 23)).setObjects(("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSourcePreOtnPMThresholdGroup = optIfOChGroupSourcePreOtnPMThresholdGroup.setStatus('current')
optIfOChCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 24)).setObjects(("OPT-IF-MIB", "optIfOChDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChCommonGroup = optIfOChCommonGroup.setStatus('current')
optIfOChSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 25)).setObjects(("OPT-IF-MIB", "optIfOChCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSinkGroupBasic = optIfOChSinkGroupBasic.setStatus('current')
optIfOChSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 26)).setObjects(("OPT-IF-MIB", "optIfOChSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkCurrentInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDayHighInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSinkPreOtnPMGroup = optIfOChSinkPreOtnPMGroup.setStatus('current')
optIfOChSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 27)).setObjects(("OPT-IF-MIB", "optIfOChSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChSinkCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSinkPreOtnPMThresholdGroup = optIfOChSinkPreOtnPMThresholdGroup.setStatus('current')
optIfOChSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 28)).setObjects(("OPT-IF-MIB", "optIfOChSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSourcePreOtnPMGroup = optIfOChSourcePreOtnPMGroup.setStatus('current')
optIfOChSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 29)).setObjects(("OPT-IF-MIB", "optIfOChSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChSrcCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSourcePreOtnPMThresholdGroup = optIfOChSourcePreOtnPMThresholdGroup.setStatus('current')
optIfOTUkCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 30)).setObjects(("OPT-IF-MIB", "optIfOTUkDirectionality"), ("OPT-IF-MIB", "optIfOTUkBitRateK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTUkCommonGroup = optIfOTUkCommonGroup.setStatus('current')
optIfOTUkSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 31)).setObjects(("OPT-IF-MIB", "optIfOTUkTraceIdentifierTransmitted"), ("OPT-IF-MIB", "optIfOTUkSourceAdaptActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTUkSourceGroup = optIfOTUkSourceGroup.setStatus('current')
optIfOTUkSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 32)).setObjects(("OPT-IF-MIB", "optIfOTUkDAPIExpected"), ("OPT-IF-MIB", "optIfOTUkSAPIExpected"), ("OPT-IF-MIB", "optIfOTUkTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfOTUkTIMDetMode"), ("OPT-IF-MIB", "optIfOTUkTIMActEnabled"), ("OPT-IF-MIB", "optIfOTUkDEGThr"), ("OPT-IF-MIB", "optIfOTUkDEGM"), ("OPT-IF-MIB", "optIfOTUkSinkAdaptActive"), ("OPT-IF-MIB", "optIfOTUkSinkFECEnabled"), ("OPT-IF-MIB", "optIfOTUkCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTUkSinkGroup = optIfOTUkSinkGroup.setStatus('current')
optIfGCC0Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 33)).setObjects(("OPT-IF-MIB", "optIfGCC0Application"), ("OPT-IF-MIB", "optIfGCC0RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfGCC0Group = optIfGCC0Group.setStatus('current')
optIfODUkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 34)).setObjects(("OPT-IF-MIB", "optIfODUkDirectionality"), ("OPT-IF-MIB", "optIfODUkBitRateK"), ("OPT-IF-MIB", "optIfODUkTcmFieldsInUse"), ("OPT-IF-MIB", "optIfODUkPositionSeqCurrentSize"), ("OPT-IF-MIB", "optIfODUkPositionSeqPosition"), ("OPT-IF-MIB", "optIfODUkPositionSeqPointer"), ("OPT-IF-MIB", "optIfODUkTtpPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkGroup = optIfODUkGroup.setStatus('current')
optIfODUkTtpSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 35)).setObjects(("OPT-IF-MIB", "optIfODUkTtpTraceIdentifierTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTtpSourceGroup = optIfODUkTtpSourceGroup.setStatus('current')
optIfODUkTtpSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 36)).setObjects(("OPT-IF-MIB", "optIfODUkTtpDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTtpSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTtpTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTtpTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTtpTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTtpDEGThr"), ("OPT-IF-MIB", "optIfODUkTtpDEGM"), ("OPT-IF-MIB", "optIfODUkTtpCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTtpSinkGroup = optIfODUkTtpSinkGroup.setStatus('current')
optIfODUkNimGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 37)).setObjects(("OPT-IF-MIB", "optIfODUkNimDAPIExpected"), ("OPT-IF-MIB", "optIfODUkNimSAPIExpected"), ("OPT-IF-MIB", "optIfODUkNimTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkNimTIMDetMode"), ("OPT-IF-MIB", "optIfODUkNimTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkNimDEGThr"), ("OPT-IF-MIB", "optIfODUkNimDEGM"), ("OPT-IF-MIB", "optIfODUkNimCurrentStatus"), ("OPT-IF-MIB", "optIfODUkNimRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkNimGroup = optIfODUkNimGroup.setStatus('current')
optIfGCC12Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 38)).setObjects(("OPT-IF-MIB", "optIfGCC12GCCPassThrough"), ("OPT-IF-MIB", "optIfGCC12Application"), ("OPT-IF-MIB", "optIfGCC12RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfGCC12Group = optIfGCC12Group.setStatus('current')
optIfODUkTCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 39)).setObjects(("OPT-IF-MIB", "optIfODUkTRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTCommonGroup = optIfODUkTCommonGroup.setStatus('current')
optIfODUkTSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 40)).setObjects(("OPT-IF-MIB", "optIfODUkTTraceIdentifierTransmitted"), ("OPT-IF-MIB", "optIfODUkTSourceLockSignalAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTSourceGroup = optIfODUkTSourceGroup.setStatus('current')
optIfODUkTSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 41)).setObjects(("OPT-IF-MIB", "optIfODUkTDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTDEGThr"), ("OPT-IF-MIB", "optIfODUkTDEGM"), ("OPT-IF-MIB", "optIfODUkTCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTSinkGroup = optIfODUkTSinkGroup.setStatus('current')
optIfODUkTSinkGroupCtp = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 42)).setObjects(("OPT-IF-MIB", "optIfODUkTSinkMode"), ("OPT-IF-MIB", "optIfODUkTSinkLockSignalAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTSinkGroupCtp = optIfODUkTSinkGroupCtp.setStatus('current')
optIfODUkTNimGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 43)).setObjects(("OPT-IF-MIB", "optIfODUkTNimDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTNimSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTNimTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTNimTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTNimTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTNimDEGThr"), ("OPT-IF-MIB", "optIfODUkTNimDEGM"), ("OPT-IF-MIB", "optIfODUkTNimCurrentStatus"), ("OPT-IF-MIB", "optIfODUkTNimRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTNimGroup = optIfODUkTNimGroup.setStatus('current')
optIfOtnConfigCompl = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 133, 2, 2, 1)).setObjects(("OPT-IF-MIB", "optIfOTMnGroup"), ("OPT-IF-MIB", "optIfOTSnCommonGroup"), ("OPT-IF-MIB", "optIfOTSnSourceGroupFull"), ("OPT-IF-MIB", "optIfOTSnAPRStatusGroup"), ("OPT-IF-MIB", "optIfOTSnAPRControlGroup"), ("OPT-IF-MIB", "optIfOTSnSinkGroupBasic"), ("OPT-IF-MIB", "optIfOTSnSinkGroupFull"), ("OPT-IF-MIB", "optIfOMSnCommonGroup"), ("OPT-IF-MIB", "optIfOMSnSinkGroupBasic"), ("OPT-IF-MIB", "optIfOChGroupCommonGroup"), ("OPT-IF-MIB", "optIfOChCommonGroup"), ("OPT-IF-MIB", "optIfOChSinkGroupBasic"), ("OPT-IF-MIB", "optIfOTUkCommonGroup"), ("OPT-IF-MIB", "optIfOTUkSourceGroup"), ("OPT-IF-MIB", "optIfOTUkSinkGroup"), ("OPT-IF-MIB", "optIfGCC0Group"), ("OPT-IF-MIB", "optIfODUkGroup"), ("OPT-IF-MIB", "optIfODUkTtpSourceGroup"), ("OPT-IF-MIB", "optIfODUkTtpSinkGroup"), ("OPT-IF-MIB", "optIfODUkNimGroup"), ("OPT-IF-MIB", "optIfGCC12Group"), ("OPT-IF-MIB", "optIfODUkTCommonGroup"), ("OPT-IF-MIB", "optIfODUkTSourceGroup"), ("OPT-IF-MIB", "optIfODUkTSinkGroup"), ("OPT-IF-MIB", "optIfODUkTSinkGroupCtp"), ("OPT-IF-MIB", "optIfODUkTNimGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOtnConfigCompl = optIfOtnConfigCompl.setStatus('current')
optIfPreOtnPMCompl = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 133, 2, 2, 2)).setObjects(("OPT-IF-MIB", "optIfPerfMonGroup"), ("OPT-IF-MIB", "optIfOTSnSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOTSnSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOTSnSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOTSnSourcePreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOMSnSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOMSnSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOMSnSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOMSnSourcePreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChGroupSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChGroupSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChGroupSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChGroupSourcePreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChSourcePreOtnPMThresholdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfPreOtnPMCompl = optIfPreOtnPMCompl.setStatus('current')
mibBuilder.exportSymbols("OPT-IF-MIB", optIfOChSinkIntervalHighInputPower=optIfOChSinkIntervalHighInputPower, optIfOChSrcCurrentHighOutputPower=optIfOChSrcCurrentHighOutputPower, optIfOTSnSrcIntervalLowOutputPower=optIfOTSnSrcIntervalLowOutputPower, optIfOTMnInterfaceType=optIfOTMnInterfaceType, optIfOTSnSinkCurrentLowOutputPower=optIfOTSnSinkCurrentLowOutputPower, optIfOMSnSrcCurrentEntry=optIfOMSnSrcCurrentEntry, optIfODUkNimTIMDetMode=optIfODUkNimTIMDetMode, optIfOTSnSinkCurDayEntry=optIfOTSnSinkCurDayEntry, optIfOChSrcCurDayTable=optIfOChSrcCurDayTable, optIfOMSnSinkCurrentHighOutputPower=optIfOMSnSinkCurrentHighOutputPower, optIfOMSnSrcCurDayLowAggregatedInputPower=optIfOMSnSrcCurDayLowAggregatedInputPower, optIfOChSinkCurrentLowInputPower=optIfOChSinkCurrentLowInputPower, optIfOChSinkCurrentLowerInputPowerThreshold=optIfOChSinkCurrentLowerInputPowerThreshold, optIfOTSnSinkIntervalHighInputPower=optIfOTSnSinkIntervalHighInputPower, optIfOTSnSinkPreOtnPMThresholdGroup=optIfOTSnSinkPreOtnPMThresholdGroup, optIfOChSinkCurDayTable=optIfOChSinkCurDayTable, optIfOChGroupSrcPrevDayLastOutputPower=optIfOChGroupSrcPrevDayLastOutputPower, optIfOTSnSinkCurDayHighOutputPower=optIfOTSnSinkCurDayHighOutputPower, optIfOMSnSinkIntervalLastOutputPower=optIfOMSnSinkIntervalLastOutputPower, optIfOChGroupSrcCurrentHighOutputPower=optIfOChGroupSrcCurrentHighOutputPower, optIfOTSnAprStatus=optIfOTSnAprStatus, optIfODUkTTraceIdentifierAccepted=optIfODUkTTraceIdentifierAccepted, optIfOTSnSourceGroupFull=optIfOTSnSourceGroupFull, optIfOChGroupSinkIntervalHighAggregatedInputPower=optIfOChGroupSinkIntervalHighAggregatedInputPower, optIfODUkTSourceLockSignalAdminState=optIfODUkTSourceLockSignalAdminState, optIfOMSnSrcCurrentSuspectedFlag=optIfOMSnSrcCurrentSuspectedFlag, optIfOChGroupSrcIntervalTable=optIfOChGroupSrcIntervalTable, optIfOMSnSinkPrevDayHighOutputPower=optIfOMSnSinkPrevDayHighOutputPower, optIfODUkTCommonGroup=optIfODUkTCommonGroup, optIfOChSinkIntervalEntry=optIfOChSinkIntervalEntry, optIfOTSnSrcPrevDaySuspectedFlag=optIfOTSnSrcPrevDaySuspectedFlag, optIfOMSnSrcCurrentAggregatedInputPower=optIfOMSnSrcCurrentAggregatedInputPower, optIfOTSnSinkCurrentUpperOutputPowerThreshold=optIfOTSnSinkCurrentUpperOutputPowerThreshold, optIfOTSnSinkPrevDaySuspectedFlag=optIfOTSnSinkPrevDaySuspectedFlag, optIfOChGroupSrcCurDayTable=optIfOChGroupSrcCurDayTable, optIfOTSnSinkIntervalSuspectedFlag=optIfOTSnSinkIntervalSuspectedFlag, optIfOChGroupSinkIntervalLastAggregatedInputPower=optIfOChGroupSinkIntervalLastAggregatedInputPower, OptIfTIMDetMode=OptIfTIMDetMode, optIfOChGroupSinkPrevDayTable=optIfOChGroupSinkPrevDayTable, optIfOTUkConfigEntry=optIfOTUkConfigEntry, optIfOTSnSinkCurDayLowOutputPower=optIfOTSnSinkCurDayLowOutputPower, optIfOChGroupSrcCurDaySuspectedFlag=optIfOChGroupSrcCurDaySuspectedFlag, optIfOChSrcPrevDayLowOutputPower=optIfOChSrcPrevDayLowOutputPower, optIfOMSnSinkCurrentHighAggregatedInputPower=optIfOMSnSinkCurrentHighAggregatedInputPower, optIfOtnConfigCompl=optIfOtnConfigCompl, optIfOMSnSrcCurDayHighOutputPower=optIfOMSnSrcCurDayHighOutputPower, optIfOTSnSrcCurrentEntry=optIfOTSnSrcCurrentEntry, optIfOTSnSrcPrevDayLastInputPower=optIfOTSnSrcPrevDayLastInputPower, optIfGCC12ConfigTable=optIfGCC12ConfigTable, optIfOMSnSinkCurrentLowerOutputPowerThreshold=optIfOMSnSinkCurrentLowerOutputPowerThreshold, optIfGCC12GCCAccess=optIfGCC12GCCAccess, optIfGCC0Application=optIfGCC0Application, optIfOMSnSrcCurrentLowAggregatedInputPower=optIfOMSnSrcCurrentLowAggregatedInputPower, optIfOTSnSrcCurDayHighInputPower=optIfOTSnSrcCurDayHighInputPower, optIfODUkTTraceIdentifierTransmitted=optIfODUkTTraceIdentifierTransmitted, optIfPerfMonGroup=optIfPerfMonGroup, optIfOChGroupSinkPrevDayHighAggregatedInputPower=optIfOChGroupSinkPrevDayHighAggregatedInputPower, optIfOTSnSrcPrevDayLastOutputPower=optIfOTSnSrcPrevDayLastOutputPower, optIfOTSnSinkCurrentLowerOutputPowerThreshold=optIfOTSnSinkCurrentLowerOutputPowerThreshold, optIfOMSnSrcCurrentLowerInputPowerThreshold=optIfOMSnSrcCurrentLowerInputPowerThreshold, optIfGroups=optIfGroups, optIfOMSnSrcIntervalHighOutputPower=optIfOMSnSrcIntervalHighOutputPower, optIfOChGroupSinkCurDayLowAggregatedInputPower=optIfOChGroupSinkCurDayLowAggregatedInputPower, optIfODUkPositionSeqPosition=optIfODUkPositionSeqPosition, optIfOMSnSrcCurDayTable=optIfOMSnSrcCurDayTable, OptIfExDAPI=OptIfExDAPI, optIfOTSnSrcPrevDayLowOutputPower=optIfOTSnSrcPrevDayLowOutputPower, optIfGCC12Codirectional=optIfGCC12Codirectional, optIfOChSourcePreOtnPMThresholdGroup=optIfOChSourcePreOtnPMThresholdGroup, optIfGCC12ConfigEntry=optIfGCC12ConfigEntry, optIfODUkTCurrentStatus=optIfODUkTCurrentStatus, optIfOChSrcPrevDayEntry=optIfOChSrcPrevDayEntry, optIfOMSnSrcIntervalLowAggregatedInputPower=optIfOMSnSrcIntervalLowAggregatedInputPower, optIfConfs=optIfConfs, optIfODUkTtpSinkGroup=optIfODUkTtpSinkGroup, optIfGCC0ConfigTable=optIfGCC0ConfigTable, optIfOTUkDEGM=optIfOTUkDEGM, optIfODUkTNimSAPIExpected=optIfODUkTNimSAPIExpected, optIfOMSnSrcPrevDayTable=optIfOMSnSrcPrevDayTable, optIfOChGroupSrcPrevDayHighAggregatedInputPower=optIfOChGroupSrcPrevDayHighAggregatedInputPower, optIfOChGroupCommonGroup=optIfOChGroupCommonGroup, optIfOChGroupSinkIntervalHighOutputPower=optIfOChGroupSinkIntervalHighOutputPower, optIfOTSnSinkPrevDayLastInputPower=optIfOTSnSinkPrevDayLastInputPower, optIfOChGroupSrcCurrentLowerInputPowerThreshold=optIfOChGroupSrcCurrentLowerInputPowerThreshold, optIfOMSnSinkIntervalSuspectedFlag=optIfOMSnSinkIntervalSuspectedFlag, optIfOMSnSrcCurrentTable=optIfOMSnSrcCurrentTable, optIfOTSnSinkPrevDayTable=optIfOTSnSinkPrevDayTable, OptIfSinkOrSource=OptIfSinkOrSource, optIfOChGroupSrcIntervalLastOutputPower=optIfOChGroupSrcIntervalLastOutputPower, optIfODUkTcmFieldsInUse=optIfODUkTcmFieldsInUse, optIfOTSnSrcCurDayTable=optIfOTSnSrcCurDayTable, optIfODUkTNimConfigEntry=optIfODUkTNimConfigEntry, optIfOChSinkCurDayHighInputPower=optIfOChSinkCurDayHighInputPower, optIfOMSnSinkIntervalEntry=optIfOMSnSinkIntervalEntry, optIfODUkTNimDEGThr=optIfODUkTNimDEGThr, optIfOMSnSinkPrevDayLowOutputPower=optIfOMSnSinkPrevDayLowOutputPower, optIfOTSnSinkCurrentOutputPower=optIfOTSnSinkCurrentOutputPower, optIfPerfMonIntervalTable=optIfPerfMonIntervalTable, optIfOMSnSinkIntervalHighOutputPower=optIfOMSnSinkIntervalHighOutputPower, optIfOMSnCurrentStatus=optIfOMSnCurrentStatus, optIfMibModule=optIfMibModule, optIfOChGroupDirectionality=optIfOChGroupDirectionality, optIfODUkTtpConfigEntry=optIfODUkTtpConfigEntry, optIfODUkTtpPresent=optIfODUkTtpPresent, optIfODUkTNimTcmField=optIfODUkTNimTcmField, optIfOChSrcCurDayHighOutputPower=optIfOChSrcCurDayHighOutputPower, optIfOTUkTIMActEnabled=optIfOTUkTIMActEnabled, optIfOChSrcCurrentEntry=optIfOChSrcCurrentEntry, optIfODUkTSourceGroup=optIfODUkTSourceGroup, optIfOMSnSrcCurrentLowOutputPower=optIfOMSnSrcCurrentLowOutputPower, optIfOChSrcCurrentOutputPower=optIfOChSrcCurrentOutputPower, optIfOChGroupSourcePreOtnPMThresholdGroup=optIfOChGroupSourcePreOtnPMThresholdGroup, optIfOMSnSinkPrevDayLowAggregatedInputPower=optIfOMSnSinkPrevDayLowAggregatedInputPower, optIfOMSnSinkCurrentOutputPower=optIfOMSnSinkCurrentOutputPower, optIfOChGroupSrcCurDayLowOutputPower=optIfOChGroupSrcCurDayLowOutputPower, optIfOMSnSrcCurrentHighAggregatedInputPower=optIfOMSnSrcCurrentHighAggregatedInputPower, optIfOTSnAPRControlGroup=optIfOTSnAPRControlGroup, optIfODUkNimDEGM=optIfODUkNimDEGM, optIfOMSnSrcIntervalHighAggregatedInputPower=optIfOMSnSrcIntervalHighAggregatedInputPower, optIfODUkPositionSeqEntry=optIfODUkPositionSeqEntry, optIfODUk=optIfODUk, optIfOChGroupSinkCurrentUpperInputPowerThreshold=optIfOChGroupSinkCurrentUpperInputPowerThreshold, optIfOChGroupSinkCurDayHighOutputPower=optIfOChGroupSinkCurDayHighOutputPower, optIfOChGroupSinkCurrentLowerOutputPowerThreshold=optIfOChGroupSinkCurrentLowerOutputPowerThreshold, optIfOTMnReduced=optIfOTMnReduced, optIfOMSnSinkCurDayHighOutputPower=optIfOMSnSinkCurDayHighOutputPower, optIfOTSnSinkIntervalNumber=optIfOTSnSinkIntervalNumber, optIfOChGroupSourcePreOtnPMGroup=optIfOChGroupSourcePreOtnPMGroup, optIfOTSnAprControl=optIfOTSnAprControl, optIfOChSinkIntervalNumber=optIfOChSinkIntervalNumber, optIfOMSnSinkPrevDayLastAggregatedInputPower=optIfOMSnSinkPrevDayLastAggregatedInputPower, optIfODUkTTIMDetMode=optIfODUkTTIMDetMode, optIfODUkTNimRowStatus=optIfODUkTNimRowStatus, optIfOChSrcIntervalHighOutputPower=optIfOChSrcIntervalHighOutputPower, optIfODUkTNimCurrentStatus=optIfODUkTNimCurrentStatus, optIfODUkTtpSourceGroup=optIfODUkTtpSourceGroup, optIfOTSnSrcIntervalEntry=optIfOTSnSrcIntervalEntry, optIfPerfMonIntervalNumIntervals=optIfPerfMonIntervalNumIntervals, optIfOChSrcCurDaySuspectedFlag=optIfOChSrcCurDaySuspectedFlag, optIfOTUkSinkFECEnabled=optIfOTUkSinkFECEnabled, optIfOTSnSinkCurrentLowerInputPowerThreshold=optIfOTSnSinkCurrentLowerInputPowerThreshold, optIfOChSrcCurrentLowOutputPower=optIfOChSrcCurrentLowOutputPower, optIfOChGroupSrcPrevDayHighOutputPower=optIfOChGroupSrcPrevDayHighOutputPower, OptIfDirectionality=OptIfDirectionality, optIfOMSnSrcCurrentHighOutputPower=optIfOMSnSrcCurrentHighOutputPower, optIfOTSnSourcePreOtnPMGroup=optIfOTSnSourcePreOtnPMGroup, optIfOMSnSinkGroupBasic=optIfOMSnSinkGroupBasic, optIfODUkGroup=optIfODUkGroup, optIfOTSnSrcCurrentUpperOutputPowerThreshold=optIfOTSnSrcCurrentUpperOutputPowerThreshold, optIfOChGroupSinkCurrentUpperOutputPowerThreshold=optIfOChGroupSinkCurrentUpperOutputPowerThreshold, optIfOChGroupSrcCurrentAggregatedInputPower=optIfOChGroupSrcCurrentAggregatedInputPower, optIfOMSnConfigEntry=optIfOMSnConfigEntry, optIfOChSinkIntervalLastInputPower=optIfOChSinkIntervalLastInputPower, optIfOMSnSinkCurrentUpperOutputPowerThreshold=optIfOMSnSinkCurrentUpperOutputPowerThreshold, optIfOTUkBitRateK=optIfOTUkBitRateK, optIfOChGroupSrcIntervalLowOutputPower=optIfOChGroupSrcIntervalLowOutputPower, OptIfIntervalNumber=OptIfIntervalNumber, optIfOChSinkCurrentSuspectedFlag=optIfOChSinkCurrentSuspectedFlag, optIfOChGroupSrcIntervalHighOutputPower=optIfOChGroupSrcIntervalHighOutputPower, optIfODUkPositionSeqPointer=optIfODUkPositionSeqPointer, optIfODUkTNimTIMDetMode=optIfODUkTNimTIMDetMode, optIfOChGroupSinkPrevDayLowAggregatedInputPower=optIfOChGroupSinkPrevDayLowAggregatedInputPower, optIfOTUkDEGThr=optIfOTUkDEGThr, optIfObjects=optIfObjects, optIfOTSnCurrentStatus=optIfOTSnCurrentStatus, optIfOChSrcIntervalTable=optIfOChSrcIntervalTable, optIfOChCurrentStatus=optIfOChCurrentStatus, optIfOChSinkCurDayEntry=optIfOChSinkCurDayEntry, optIfOChSinkPreOtnPMThresholdGroup=optIfOChSinkPreOtnPMThresholdGroup, optIfOTSnSrcCurDaySuspectedFlag=optIfOTSnSrcCurDaySuspectedFlag, optIfOMSnSinkCurrentEntry=optIfOMSnSinkCurrentEntry, optIfOChDirectionality=optIfOChDirectionality, optIfODUkTtpTIMActEnabled=optIfODUkTtpTIMActEnabled, optIfOChSrcCurDayLowOutputPower=optIfOChSrcCurDayLowOutputPower, optIfOChGroupSinkIntervalLastOutputPower=optIfOChGroupSinkIntervalLastOutputPower, optIfOChGroupSinkIntervalLowOutputPower=optIfOChGroupSinkIntervalLowOutputPower, optIfOTSnSinkGroupFull=optIfOTSnSinkGroupFull, optIfOTSnSrcCurrentHighInputPower=optIfOTSnSrcCurrentHighInputPower, optIfOChGroupSrcIntervalLastAggregatedInputPower=optIfOChGroupSrcIntervalLastAggregatedInputPower, optIfOMSnCommonGroup=optIfOMSnCommonGroup, optIfOMSnSinkPrevDayTable=optIfOMSnSinkPrevDayTable, optIfOChGroupSinkPrevDayLastOutputPower=optIfOChGroupSinkPrevDayLastOutputPower, optIfOChSinkPrevDaySuspectedFlag=optIfOChSinkPrevDaySuspectedFlag, optIfGCC0ConfigEntry=optIfGCC0ConfigEntry, optIfODUkTtpDEGThr=optIfODUkTtpDEGThr, optIfODUkTCodirectional=optIfODUkTCodirectional, optIfOChSinkIntervalTable=optIfOChSinkIntervalTable, optIfPreOtnPMCompl=optIfPreOtnPMCompl, optIfOTUkTIMDetMode=optIfOTUkTIMDetMode, optIfOTUkSourceGroup=optIfOTUkSourceGroup, optIfOChGroupSinkCurrentTable=optIfOChGroupSinkCurrentTable, optIfOChGroupSinkIntervalEntry=optIfOChGroupSinkIntervalEntry, optIfOChSinkCurrentEntry=optIfOChSinkCurrentEntry, optIfOTSnSrcIntervalNumber=optIfOTSnSrcIntervalNumber, optIfOTSnSrcCurDayLowInputPower=optIfOTSnSrcCurDayLowInputPower, optIfOMSnSinkCurDaySuspectedFlag=optIfOMSnSinkCurDaySuspectedFlag, optIfOTSnSrcPrevDayTable=optIfOTSnSrcPrevDayTable, optIfOMSn=optIfOMSn, optIfOTUk=optIfOTUk, optIfOChGroupSrcCurDayEntry=optIfOChGroupSrcCurDayEntry, optIfOTSnDirectionality=optIfOTSnDirectionality, optIfOTSnDAPIExpected=optIfOTSnDAPIExpected, optIfOMSnSrcCurDaySuspectedFlag=optIfOMSnSrcCurDaySuspectedFlag, optIfOTUkConfigTable=optIfOTUkConfigTable, optIfOChGroupSrcIntervalNumber=optIfOChGroupSrcIntervalNumber, optIfOTSnSrcCurrentInputPower=optIfOTSnSrcCurrentInputPower, optIfOMSnDirectionality=optIfOMSnDirectionality, optIfOChGroupSinkIntervalNumber=optIfOChGroupSinkIntervalNumber, optIfOChGroupSinkCurDaySuspectedFlag=optIfOChGroupSinkCurDaySuspectedFlag, optIfOChGroup=optIfOChGroup, optIfOTSnSinkCurrentHighOutputPower=optIfOTSnSinkCurrentHighOutputPower, optIfODUkPositionSeqTable=optIfODUkPositionSeqTable, optIfOMSnSinkIntervalTable=optIfOMSnSinkIntervalTable, optIfOChGroupSrcPrevDayLastAggregatedInputPower=optIfOChGroupSrcPrevDayLastAggregatedInputPower, optIfOChSrcIntervalLastOutputPower=optIfOChSrcIntervalLastOutputPower, optIfCompl=optIfCompl, optIfOMSnSrcPrevDayLastAggregatedInputPower=optIfOMSnSrcPrevDayLastAggregatedInputPower, optIfOChGroupSinkCurrentOutputPower=optIfOChGroupSinkCurrentOutputPower, optIfOMSnSinkIntervalLowOutputPower=optIfOMSnSinkIntervalLowOutputPower, optIfOMSnSinkCurrentUpperInputPowerThreshold=optIfOMSnSinkCurrentUpperInputPowerThreshold, optIfPerfMonIntervalNumInvalidIntervals=optIfPerfMonIntervalNumInvalidIntervals, optIfOChSrcCurrentSuspectedFlag=optIfOChSrcCurrentSuspectedFlag, optIfOMSnSinkPrevDayLastOutputPower=optIfOMSnSinkPrevDayLastOutputPower, optIfOChSinkPrevDayLastInputPower=optIfOChSinkPrevDayLastInputPower, optIfODUkNimCurrentStatus=optIfODUkNimCurrentStatus, optIfOTSnSrcIntervalTable=optIfOTSnSrcIntervalTable, optIfOMSnSinkCurrentSuspectedFlag=optIfOMSnSinkCurrentSuspectedFlag, optIfOChGroupSrcCurrentLowerOutputPowerThreshold=optIfOChGroupSrcCurrentLowerOutputPowerThreshold, optIfODUkNimRowStatus=optIfODUkNimRowStatus, optIfOChSrcPrevDayLastOutputPower=optIfOChSrcPrevDayLastOutputPower, optIfOChGroupSrcCurrentHighAggregatedInputPower=optIfOChGroupSrcCurrentHighAggregatedInputPower, optIfODUkTNimDirectionality=optIfODUkTNimDirectionality, optIfOTSnSinkCurrentInputPower=optIfOTSnSinkCurrentInputPower, optIfOTUkCommonGroup=optIfOTUkCommonGroup, optIfOTSnSrcIntervalLastInputPower=optIfOTSnSrcIntervalLastInputPower, optIfOChSrcCurrentLowerOutputPowerThreshold=optIfOChSrcCurrentLowerOutputPowerThreshold, optIfOChSinkIntervalSuspectedFlag=optIfOChSinkIntervalSuspectedFlag, optIfODUkTtpDAPIExpected=optIfODUkTtpDAPIExpected, optIfOTMnTcmMax=optIfOTMnTcmMax, optIfOChGroupSrcIntervalLowAggregatedInputPower=optIfOChGroupSrcIntervalLowAggregatedInputPower, optIfODUkNimConfigTable=optIfODUkNimConfigTable, optIfOTUkSinkGroup=optIfOTUkSinkGroup, optIfODUkTDEGThr=optIfODUkTDEGThr, optIfOTUkSourceAdaptActive=optIfOTUkSourceAdaptActive, optIfOTSnConfigEntry=optIfOTSnConfigEntry, optIfODUkNimSAPIExpected=optIfODUkNimSAPIExpected, optIfODUkTNimDEGM=optIfODUkTNimDEGM, optIfOTSnSourcePreOtnPMThresholdGroup=optIfOTSnSourcePreOtnPMThresholdGroup, optIfOChSrcPrevDayHighOutputPower=optIfOChSrcPrevDayHighOutputPower, optIfOTUkTraceIdentifierAccepted=optIfOTUkTraceIdentifierAccepted, optIfOMSnSrcPrevDayLowOutputPower=optIfOMSnSrcPrevDayLowOutputPower, optIfODUkTNimTraceIdentifierAccepted=optIfODUkTNimTraceIdentifierAccepted, optIfODUkTtpConfigTable=optIfODUkTtpConfigTable, optIfOChGroupSrcCurrentSuspectedFlag=optIfOChGroupSrcCurrentSuspectedFlag)
mibBuilder.exportSymbols("OPT-IF-MIB", optIfOTSnSinkCurrentLowInputPower=optIfOTSnSinkCurrentLowInputPower, optIfOTUkTraceIdentifierTransmitted=optIfOTUkTraceIdentifierTransmitted, optIfOChGroupSinkCurrentLowAggregatedInputPower=optIfOChGroupSinkCurrentLowAggregatedInputPower, optIfOChSrcPrevDayTable=optIfOChSrcPrevDayTable, optIfOTSnTraceIdentifierTransmitted=optIfOTSnTraceIdentifierTransmitted, optIfGCC0Group=optIfGCC0Group, OptIfTxTI=OptIfTxTI, optIfOChGroupSrcIntervalEntry=optIfOChGroupSrcIntervalEntry, optIfOTSnSinkPrevDayLowInputPower=optIfOTSnSinkPrevDayLowInputPower, optIfODUkBitRateK=optIfODUkBitRateK, optIfOChSinkIntervalLowInputPower=optIfOChSinkIntervalLowInputPower, optIfODUkTSinkGroup=optIfODUkTSinkGroup, optIfOTMnBitRates=optIfOTMnBitRates, optIfODUkNimDAPIExpected=optIfODUkNimDAPIExpected, optIfOChSourcePreOtnPMGroup=optIfOChSourcePreOtnPMGroup, optIfOTSnSrcPrevDayHighInputPower=optIfOTSnSrcPrevDayHighInputPower, optIfOMSnSinkIntervalNumber=optIfOMSnSinkIntervalNumber, optIfOChGroupSrcPrevDayTable=optIfOChGroupSrcPrevDayTable, optIfOChSinkPreOtnPMGroup=optIfOChSinkPreOtnPMGroup, optIfOMSnSinkIntervalHighAggregatedInputPower=optIfOMSnSinkIntervalHighAggregatedInputPower, optIfPerfMonCurDayTimeElapsed=optIfPerfMonCurDayTimeElapsed, optIfOTSnSinkCurDaySuspectedFlag=optIfOTSnSinkCurDaySuspectedFlag, optIfODUkTSinkLockSignalAdminState=optIfODUkTSinkLockSignalAdminState, optIfOChSrcCurrentTable=optIfOChSrcCurrentTable, optIfOChSrcIntervalSuspectedFlag=optIfOChSrcIntervalSuspectedFlag, optIfOTSnSinkIntervalLowOutputPower=optIfOTSnSinkIntervalLowOutputPower, optIfODUkTSinkGroupCtp=optIfODUkTSinkGroupCtp, optIfOTSn=optIfOTSn, optIfOMSnSrcCurDayHighAggregatedInputPower=optIfOMSnSrcCurDayHighAggregatedInputPower, optIfOChSinkGroupBasic=optIfOChSinkGroupBasic, optIfOTSnSinkCurrentUpperInputPowerThreshold=optIfOTSnSinkCurrentUpperInputPowerThreshold, optIfOMSnSrcPrevDayEntry=optIfOMSnSrcPrevDayEntry, optIfOChGroupSinkPrevDayEntry=optIfOChGroupSinkPrevDayEntry, optIfODUkTSAPIExpected=optIfODUkTSAPIExpected, optIfOChGroupSinkCurrentLowerInputPowerThreshold=optIfOChGroupSinkCurrentLowerInputPowerThreshold, optIfOChGroupSinkIntervalTable=optIfOChGroupSinkIntervalTable, optIfOMSnSrcIntervalLowOutputPower=optIfOMSnSrcIntervalLowOutputPower, optIfOTSnConfigTable=optIfOTSnConfigTable, optIfOChGroupSrcCurrentOutputPower=optIfOChGroupSrcCurrentOutputPower, optIfOTSnSrcIntervalLastOutputPower=optIfOTSnSrcIntervalLastOutputPower, optIfOTSnSinkCurrentTable=optIfOTSnSinkCurrentTable, optIfOMSnSinkCurDayTable=optIfOMSnSinkCurDayTable, optIfOChGroupSinkPreOtnPMThresholdGroup=optIfOChGroupSinkPreOtnPMThresholdGroup, optIfOTMnOrder=optIfOTMnOrder, optIfOChSrcCurDayEntry=optIfOChSrcCurDayEntry, optIfOChGroupSinkCurDayEntry=optIfOChGroupSinkCurDayEntry, optIfOChGroupSrcCurrentUpperInputPowerThreshold=optIfOChGroupSrcCurrentUpperInputPowerThreshold, optIfPerfMonCurrentTimeElapsed=optIfPerfMonCurrentTimeElapsed, optIfOTSnSrcCurDayHighOutputPower=optIfOTSnSrcCurDayHighOutputPower, optIfOChSrcIntervalNumber=optIfOChSrcIntervalNumber, optIfGCC12Application=optIfGCC12Application, optIfOTSnSinkCurrentSuspectedFlag=optIfOTSnSinkCurrentSuspectedFlag, optIfOTUkCurrentStatus=optIfOTUkCurrentStatus, optIfOTSnSinkIntervalEntry=optIfOTSnSinkIntervalEntry, optIfOChGroupSrcCurDayHighAggregatedInputPower=optIfOChGroupSrcCurDayHighAggregatedInputPower, optIfOTSnSrcCurDayEntry=optIfOTSnSrcCurDayEntry, optIfOMSnSrcIntervalEntry=optIfOMSnSrcIntervalEntry, optIfOMSnConfigTable=optIfOMSnConfigTable, optIfOTSnSrcPrevDayEntry=optIfOTSnSrcPrevDayEntry, optIfOTSnSinkPrevDayLowOutputPower=optIfOTSnSinkPrevDayLowOutputPower, optIfODUkTtpTIMDetMode=optIfODUkTtpTIMDetMode, optIfOTSnSinkPrevDayHighOutputPower=optIfOTSnSinkPrevDayHighOutputPower, optIfOTSnSinkCurrentHighInputPower=optIfOTSnSinkCurrentHighInputPower, optIfODUkTDEGM=optIfODUkTDEGM, optIfOTSnSinkPreOtnPMGroup=optIfOTSnSinkPreOtnPMGroup, optIfOChGroupSinkPrevDayHighOutputPower=optIfOChGroupSinkPrevDayHighOutputPower, optIfGCC12RowStatus=optIfGCC12RowStatus, optIfODUkT=optIfODUkT, optIfOTSnSAPIExpected=optIfOTSnSAPIExpected, optIfOChSrcPrevDaySuspectedFlag=optIfOChSrcPrevDaySuspectedFlag, optIfOChSinkPrevDayHighInputPower=optIfOChSinkPrevDayHighInputPower, optIfOTSnSrcIntervalHighOutputPower=optIfOTSnSrcIntervalHighOutputPower, optIfOMSnSinkCurDayHighAggregatedInputPower=optIfOMSnSinkCurDayHighAggregatedInputPower, optIfOChGroupSrcCurrentUpperOutputPowerThreshold=optIfOChGroupSrcCurrentUpperOutputPowerThreshold, optIfOMSnSrcCurDayEntry=optIfOMSnSrcCurDayEntry, optIfOChGroupSinkIntervalSuspectedFlag=optIfOChGroupSinkIntervalSuspectedFlag, optIfOTUkDirectionality=optIfOTUkDirectionality, optIfOTSnSrcPrevDayLowInputPower=optIfOTSnSrcPrevDayLowInputPower, optIfOChGroupSrcCurrentTable=optIfOChGroupSrcCurrentTable, optIfODUkNimConfigEntry=optIfODUkNimConfigEntry, optIfOChGroupSinkCurrentAggregatedInputPower=optIfOChGroupSinkCurrentAggregatedInputPower, optIfODUkTtpTraceIdentifierTransmitted=optIfODUkTtpTraceIdentifierTransmitted, optIfOTMnEntry=optIfOTMnEntry, optIfODUkPositionSeqIndex=optIfODUkPositionSeqIndex, optIfOChGroupSrcPrevDaySuspectedFlag=optIfOChGroupSrcPrevDaySuspectedFlag, optIfOChGroupSrcPrevDayLowAggregatedInputPower=optIfOChGroupSrcPrevDayLowAggregatedInputPower, optIfODUkNimTIMActEnabled=optIfODUkNimTIMActEnabled, optIfOChSrcIntervalEntry=optIfOChSrcIntervalEntry, optIfOMSnSourcePreOtnPMThresholdGroup=optIfOMSnSourcePreOtnPMThresholdGroup, optIfOTSnSrcCurrentLowInputPower=optIfOTSnSrcCurrentLowInputPower, optIfOTSnSinkCurDayTable=optIfOTSnSinkCurDayTable, optIfODUkNimDEGThr=optIfODUkNimDEGThr, optIfODUkTTIMActEnabled=optIfODUkTTIMActEnabled, optIfODUkTRowStatus=optIfODUkTRowStatus, optIfOTSnTraceIdentifierAccepted=optIfOTSnTraceIdentifierAccepted, optIfODUkTSinkMode=optIfODUkTSinkMode, optIfOChGroupSrcCurrentEntry=optIfOChGroupSrcCurrentEntry, optIfOTSnTIMDetMode=optIfOTSnTIMDetMode, optIfOMSnSrcCurDayLowOutputPower=optIfOMSnSrcCurDayLowOutputPower, optIfOMSnSrcPrevDayHighOutputPower=optIfOMSnSrcPrevDayHighOutputPower, optIfOTMnGroup=optIfOTMnGroup, optIfODUkTConfigTable=optIfODUkTConfigTable, optIfOTSnSinkIntervalLastOutputPower=optIfOTSnSinkIntervalLastOutputPower, optIfOChGroupSinkPreOtnPMGroup=optIfOChGroupSinkPreOtnPMGroup, optIfGCC0RowStatus=optIfGCC0RowStatus, OptIfExSAPI=OptIfExSAPI, optIfOTSnSinkCurDayHighInputPower=optIfOTSnSinkCurDayHighInputPower, optIfOTSnSrcCurrentLowerOutputPowerThreshold=optIfOTSnSrcCurrentLowerOutputPowerThreshold, optIfOChConfigEntry=optIfOChConfigEntry, optIfOMSnSrcCurrentLowerOutputPowerThreshold=optIfOMSnSrcCurrentLowerOutputPowerThreshold, optIfOTSnSinkCurrentEntry=optIfOTSnSinkCurrentEntry, optIfOTSnSrcCurrentHighOutputPower=optIfOTSnSrcCurrentHighOutputPower, optIfODUkTtpSAPIExpected=optIfODUkTtpSAPIExpected, optIfOTSnSinkIntervalHighOutputPower=optIfOTSnSinkIntervalHighOutputPower, optIfOTSnSrcCurrentLowOutputPower=optIfOTSnSrcCurrentLowOutputPower, optIfODUkTNimConfigTable=optIfODUkTNimConfigTable, optIfOMSnSinkCurrentTable=optIfOMSnSinkCurrentTable, optIfOChGroupSinkCurDayHighAggregatedInputPower=optIfOChGroupSinkCurDayHighAggregatedInputPower, optIfOTMnOpticalReach=optIfOTMnOpticalReach, optIfOChGroupSinkCurrentEntry=optIfOChGroupSinkCurrentEntry, optIfOMSnSinkPrevDaySuspectedFlag=optIfOMSnSinkPrevDaySuspectedFlag, optIfOMSnSinkPreOtnPMGroup=optIfOMSnSinkPreOtnPMGroup, optIfOChGroupSrcCurrentLowAggregatedInputPower=optIfOChGroupSrcCurrentLowAggregatedInputPower, optIfOTSnSinkPrevDayLastOutputPower=optIfOTSnSinkPrevDayLastOutputPower, optIfOChSinkPrevDayLowInputPower=optIfOChSinkPrevDayLowInputPower, optIfOMSnSinkIntervalLastAggregatedInputPower=optIfOMSnSinkIntervalLastAggregatedInputPower, OptIfDEGM=OptIfDEGM, optIfOMSnSinkCurDayLowAggregatedInputPower=optIfOMSnSinkCurDayLowAggregatedInputPower, optIfOMSnSrcPrevDayLowAggregatedInputPower=optIfOMSnSrcPrevDayLowAggregatedInputPower, optIfOTUkSinkAdaptActive=optIfOTUkSinkAdaptActive, optIfOTSnSinkGroupBasic=optIfOTSnSinkGroupBasic, optIfOChSinkCurrentInputPower=optIfOChSinkCurrentInputPower, optIfOChConfigTable=optIfOChConfigTable, optIfOTSnSrcCurrentSuspectedFlag=optIfOTSnSrcCurrentSuspectedFlag, optIfOTSnSinkIntervalLowInputPower=optIfOTSnSinkIntervalLowInputPower, optIfOMSnSrcCurrentUpperInputPowerThreshold=optIfOMSnSrcCurrentUpperInputPowerThreshold, optIfOChGroupConfigTable=optIfOChGroupConfigTable, optIfOChSinkPrevDayEntry=optIfOChSinkPrevDayEntry, optIfOChGroupSinkPrevDaySuspectedFlag=optIfOChGroupSinkPrevDaySuspectedFlag, optIfOChSinkPrevDayTable=optIfOChSinkPrevDayTable, optIfOMSnSinkPrevDayHighAggregatedInputPower=optIfOMSnSinkPrevDayHighAggregatedInputPower, optIfGCC12GCCPassThrough=optIfGCC12GCCPassThrough, optIfOChGroupSrcCurDayLowAggregatedInputPower=optIfOChGroupSrcCurDayLowAggregatedInputPower, optIfOTSnSrcPrevDayHighOutputPower=optIfOTSnSrcPrevDayHighOutputPower, optIfOMSnSrcIntervalTable=optIfOMSnSrcIntervalTable, optIfOTSnSinkPrevDayEntry=optIfOTSnSinkPrevDayEntry, optIfOChGroupConfigEntry=optIfOChGroupConfigEntry, optIfPerfMon=optIfPerfMon, optIfODUkConfigTable=optIfODUkConfigTable, optIfODUkTtpDEGM=optIfODUkTtpDEGM, optIfOTSnSrcCurrentLowerInputPowerThreshold=optIfOTSnSrcCurrentLowerInputPowerThreshold, optIfOTSnSinkPrevDayHighInputPower=optIfOTSnSinkPrevDayHighInputPower, optIfOMSnSinkCurDayLowOutputPower=optIfOMSnSinkCurDayLowOutputPower, OptIfAcTI=OptIfAcTI, optIfOChGroupSinkPrevDayLastAggregatedInputPower=optIfOChGroupSinkPrevDayLastAggregatedInputPower, optIfOTSnSinkIntervalLastInputPower=optIfOTSnSinkIntervalLastInputPower, optIfODUkTtpCurrentStatus=optIfODUkTtpCurrentStatus, optIfOTMn=optIfOTMn, optIfOTSnSrcIntervalHighInputPower=optIfOTSnSrcIntervalHighInputPower, optIfOChGroupSrcPrevDayEntry=optIfOChGroupSrcPrevDayEntry, optIfOTSnSrcCurrentTable=optIfOTSnSrcCurrentTable, optIfPerfMonIntervalEntry=optIfPerfMonIntervalEntry, optIfOChGroupSinkCurrentLowOutputPower=optIfOChGroupSinkCurrentLowOutputPower, optIfOChGroupSinkPrevDayLowOutputPower=optIfOChGroupSinkPrevDayLowOutputPower, optIfOMSnSinkIntervalLowAggregatedInputPower=optIfOMSnSinkIntervalLowAggregatedInputPower, optIfODUkConfigEntry=optIfODUkConfigEntry, optIfOMSnSinkPreOtnPMThresholdGroup=optIfOMSnSinkPreOtnPMThresholdGroup, PYSNMP_MODULE_ID=optIfMibModule, optIfOChGroupSrcCurrentLowOutputPower=optIfOChGroupSrcCurrentLowOutputPower, optIfOMSnSinkCurrentLowerInputPowerThreshold=optIfOMSnSinkCurrentLowerInputPowerThreshold, optIfOMSnSrcIntervalNumber=optIfOMSnSrcIntervalNumber, optIfOChGroupSinkCurrentSuspectedFlag=optIfOChGroupSinkCurrentSuspectedFlag, optIfOChSinkCurDayLowInputPower=optIfOChSinkCurDayLowInputPower, optIfODUkNimTraceIdentifierAccepted=optIfODUkNimTraceIdentifierAccepted, optIfOChGroupSinkCurDayTable=optIfOChGroupSinkCurDayTable, optIfODUkNimGroup=optIfODUkNimGroup, optIfOMSnSrcPrevDayLastOutputPower=optIfOMSnSrcPrevDayLastOutputPower, optIfOChGroupSrcIntervalHighAggregatedInputPower=optIfOChGroupSrcIntervalHighAggregatedInputPower, optIfOChGroupSinkCurrentHighAggregatedInputPower=optIfOChGroupSinkCurrentHighAggregatedInputPower, optIfOTSnSrcCurrentUpperInputPowerThreshold=optIfOTSnSrcCurrentUpperInputPowerThreshold, optIfOMSnSinkCurDayEntry=optIfOMSnSinkCurDayEntry, optIfOChSrcIntervalLowOutputPower=optIfOChSrcIntervalLowOutputPower, OptIfBitRateK=OptIfBitRateK, optIfOChGroupSrcIntervalSuspectedFlag=optIfOChGroupSrcIntervalSuspectedFlag, optIfODUkDirectionality=optIfODUkDirectionality, optIfOTSnSrcCurDayLowOutputPower=optIfOTSnSrcCurDayLowOutputPower, optIfODUkTNimGroup=optIfODUkTNimGroup, optIfOMSnSrcCurrentOutputPower=optIfOMSnSrcCurrentOutputPower, optIfOTSnTIMActEnabled=optIfOTSnTIMActEnabled, optIfOTSnSinkIntervalTable=optIfOTSnSinkIntervalTable, optIfOTSnCommonGroup=optIfOTSnCommonGroup, optIfOTSnSrcIntervalSuspectedFlag=optIfOTSnSrcIntervalSuspectedFlag, optIfOTSnSrcIntervalLowInputPower=optIfOTSnSrcIntervalLowInputPower, optIfOMSnSrcIntervalLastOutputPower=optIfOMSnSrcIntervalLastOutputPower, optIfOChSrcCurrentUpperOutputPowerThreshold=optIfOChSrcCurrentUpperOutputPowerThreshold, optIfOMSnSrcPrevDaySuspectedFlag=optIfOMSnSrcPrevDaySuspectedFlag, optIfOMSnSinkCurrentLowAggregatedInputPower=optIfOMSnSinkCurrentLowAggregatedInputPower, optIfOTUkDAPIExpected=optIfOTUkDAPIExpected, optIfODUkTConfigEntry=optIfODUkTConfigEntry, optIfOChCommonGroup=optIfOChCommonGroup, optIfOTUkSAPIExpected=optIfOTUkSAPIExpected, optIfODUkTDAPIExpected=optIfODUkTDAPIExpected, optIfOTSnSrcCurrentOutputPower=optIfOTSnSrcCurrentOutputPower, optIfOChSinkCurrentHighInputPower=optIfOChSinkCurrentHighInputPower, optIfOMSnSinkPrevDayEntry=optIfOMSnSinkPrevDayEntry, optIfOCh=optIfOCh, optIfOTMnTable=optIfOTMnTable, optIfOTSnSinkCurDayLowInputPower=optIfOTSnSinkCurDayLowInputPower, optIfOMSnSinkCurrentLowOutputPower=optIfOMSnSinkCurrentLowOutputPower, optIfOChSinkCurDaySuspectedFlag=optIfOChSinkCurDaySuspectedFlag, optIfODUkTNimDAPIExpected=optIfODUkTNimDAPIExpected, optIfOTSnAPRStatusGroup=optIfOTSnAPRStatusGroup, OptIfDEGThr=OptIfDEGThr, optIfOChGroupSrcCurDayHighOutputPower=optIfOChGroupSrcCurDayHighOutputPower, optIfOChGroupSrcPrevDayLowOutputPower=optIfOChGroupSrcPrevDayLowOutputPower, optIfGCC0Directionality=optIfGCC0Directionality, optIfODUkNimDirectionality=optIfODUkNimDirectionality, optIfOChGroupSinkCurDayLowOutputPower=optIfOChGroupSinkCurDayLowOutputPower, optIfOChGroupSinkCurrentHighOutputPower=optIfOChGroupSinkCurrentHighOutputPower, optIfODUkPositionSeqCurrentSize=optIfODUkPositionSeqCurrentSize, optIfOChGroupSinkIntervalLowAggregatedInputPower=optIfOChGroupSinkIntervalLowAggregatedInputPower, optIfODUkTNimTIMActEnabled=optIfODUkTNimTIMActEnabled, optIfGCC12Group=optIfGCC12Group, optIfOChSinkCurrentUpperInputPowerThreshold=optIfOChSinkCurrentUpperInputPowerThreshold, optIfODUkTTcmField=optIfODUkTTcmField, optIfOMSnSrcPrevDayHighAggregatedInputPower=optIfOMSnSrcPrevDayHighAggregatedInputPower, optIfOMSnSrcIntervalSuspectedFlag=optIfOMSnSrcIntervalSuspectedFlag, optIfOChSinkCurrentTable=optIfOChSinkCurrentTable, optIfOMSnSrcCurrentUpperOutputPowerThreshold=optIfOMSnSrcCurrentUpperOutputPowerThreshold, optIfOMSnSourcePreOtnPMGroup=optIfOMSnSourcePreOtnPMGroup, optIfOMSnSinkCurrentAggregatedInputPower=optIfOMSnSinkCurrentAggregatedInputPower, optIfODUkTtpTraceIdentifierAccepted=optIfODUkTtpTraceIdentifierAccepted, optIfOMSnSrcIntervalLastAggregatedInputPower=optIfOMSnSrcIntervalLastAggregatedInputPower)
