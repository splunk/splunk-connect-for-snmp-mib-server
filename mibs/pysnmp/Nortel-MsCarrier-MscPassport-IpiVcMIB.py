#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-IpiVcMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-IpiVcMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:21:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
StorageType, Unsigned32, DisplayString, Integer32, Counter32, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "Unsigned32", "DisplayString", "Integer32", "Counter32", "RowStatus")
EnterpriseDateAndTime, Hex, NonReplicated, DigitString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "EnterpriseDateAndTime", "Hex", "NonReplicated", "DigitString")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Bits, ModuleIdentity, Counter64, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Bits", "ModuleIdentity", "Counter64", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipiVcMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53))
mscIpivc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51))
mscIpivcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 1), )
if mibBuilder.loadTexts: mscIpivcRowStatusTable.setStatus('mandatory')
mscIpivcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"))
if mibBuilder.loadTexts: mscIpivcRowStatusEntry.setStatus('mandatory')
mscIpivcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcRowStatus.setStatus('mandatory')
mscIpivcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcComponentName.setStatus('mandatory')
mscIpivcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcStorageType.setStatus('mandatory')
mscIpivcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpivcIndex.setStatus('mandatory')
mscIpivcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 10), )
if mibBuilder.loadTexts: mscIpivcProvTable.setStatus('mandatory')
mscIpivcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"))
if mibBuilder.loadTexts: mscIpivcProvEntry.setStatus('mandatory')
mscIpivcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcIpAddress.setStatus('mandatory')
mscIpivcMaximumNumberOfLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(24, 24)).clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcMaximumNumberOfLcn.setStatus('mandatory')
mscIpivcDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2))
mscIpivcDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 1), )
if mibBuilder.loadTexts: mscIpivcDnaRowStatusTable.setStatus('mandatory')
mscIpivcDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaIndex"))
if mibBuilder.loadTexts: mscIpivcDnaRowStatusEntry.setStatus('mandatory')
mscIpivcDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaRowStatus.setStatus('mandatory')
mscIpivcDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaComponentName.setStatus('mandatory')
mscIpivcDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaStorageType.setStatus('mandatory')
mscIpivcDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpivcDnaIndex.setStatus('mandatory')
mscIpivcDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 10), )
if mibBuilder.loadTexts: mscIpivcDnaAddressTable.setStatus('mandatory')
mscIpivcDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaIndex"))
if mibBuilder.loadTexts: mscIpivcDnaAddressEntry.setStatus('mandatory')
mscIpivcDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaNumberingPlanIndicator.setStatus('mandatory')
mscIpivcDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaDataNetworkAddress.setStatus('mandatory')
mscIpivcDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 11), )
if mibBuilder.loadTexts: mscIpivcDnaOutgoingOptionsTable.setStatus('mandatory')
mscIpivcDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaIndex"))
if mibBuilder.loadTexts: mscIpivcDnaOutgoingOptionsEntry.setStatus('mandatory')
mscIpivcDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaOutCalls.setStatus('mandatory')
mscIpivcDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaOutDefaultPathSensitivity.setStatus('obsolete')
mscIpivcDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaOutPathSensitivityOverRide.setStatus('obsolete')
mscIpivcDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaDefaultTransferPriority.setStatus('mandatory')
mscIpivcDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaTransferPriorityOverRide.setStatus('mandatory')
mscIpivcDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12), )
if mibBuilder.loadTexts: mscIpivcDnaIncomingOptionsTable.setStatus('mandatory')
mscIpivcDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaIndex"))
if mibBuilder.loadTexts: mscIpivcDnaIncomingOptionsEntry.setStatus('mandatory')
mscIpivcDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncCalls.setStatus('mandatory')
mscIpivcDnaIncHighPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncHighPriorityReverseCharge.setStatus('mandatory')
mscIpivcDnaIncNormalPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncNormalPriorityReverseCharge.setStatus('mandatory')
mscIpivcDnaIncIntlNormalCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncIntlNormalCharge.setStatus('mandatory')
mscIpivcDnaIncIntlReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncIntlReverseCharge.setStatus('mandatory')
mscIpivcDnaIncFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncFastSelect.setStatus('mandatory')
mscIpivcDnaIncSameService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncSameService.setStatus('mandatory')
mscIpivcDnaIncChargeTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncChargeTransfer.setStatus('mandatory')
mscIpivcDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaIncAccess.setStatus('mandatory')
mscIpivcDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13), )
if mibBuilder.loadTexts: mscIpivcDnaCallOptionsTable.setStatus('mandatory')
mscIpivcDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaIndex"))
if mibBuilder.loadTexts: mscIpivcDnaCallOptionsEntry.setStatus('mandatory')
mscIpivcDnaServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31))).clone(namedValues=NamedValues(("gsp", 0), ("x25", 1), ("enhancedIti", 2), ("ncs", 3), ("mlti", 4), ("sm", 5), ("ici", 6), ("dsp3270", 7), ("iam", 8), ("mlhi", 9), ("term3270", 10), ("iti", 11), ("bsi", 13), ("hostIti", 14), ("x75", 15), ("hdsp3270", 16), ("api3201", 20), ("sdlc", 21), ("snaMultiHost", 22), ("redirectionServ", 23), ("trSnaTpad", 24), ("offnetNui", 25), ("gasServer", 26), ("vapServer", 28), ("vapAgent", 29), ("frameRelay", 30), ("ipiVc", 31))).clone('ipiVc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaServiceCategory.setStatus('mandatory')
mscIpivcDnaPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0100")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaPacketSizes.setStatus('mandatory')
mscIpivcDnaDefaultRecvFrmNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaDefaultRecvFrmNetworkPacketSize.setStatus('mandatory')
mscIpivcDnaDefaultSendToNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaDefaultSendToNetworkPacketSize.setStatus('mandatory')
mscIpivcDnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
mscIpivcDnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
mscIpivcDnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
mscIpivcDnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
mscIpivcDnaPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("endToEnd", 0), ("local", 1))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaPacketSizeNegotiation.setStatus('mandatory')
mscIpivcDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaAccountClass.setStatus('mandatory')
mscIpivcDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaServiceExchange.setStatus('mandatory')
mscIpivcDnaCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("extended", 1))).clone('basic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaCugFormat.setStatus('mandatory')
mscIpivcDnaCug0AsNonCugCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaCug0AsNonCugCall.setStatus('mandatory')
mscIpivcDnaFastSelectCallsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaFastSelectCallsOnly.setStatus('mandatory')
mscIpivcDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2))
mscIpivcDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 1), )
if mibBuilder.loadTexts: mscIpivcDnaCugRowStatusTable.setStatus('mandatory')
mscIpivcDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaCugIndex"))
if mibBuilder.loadTexts: mscIpivcDnaCugRowStatusEntry.setStatus('mandatory')
mscIpivcDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaCugRowStatus.setStatus('mandatory')
mscIpivcDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaCugComponentName.setStatus('mandatory')
mscIpivcDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaCugStorageType.setStatus('mandatory')
mscIpivcDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpivcDnaCugIndex.setStatus('mandatory')
mscIpivcDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10), )
if mibBuilder.loadTexts: mscIpivcDnaCugCugOptionsTable.setStatus('mandatory')
mscIpivcDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDnaCugIndex"))
if mibBuilder.loadTexts: mscIpivcDnaCugCugOptionsEntry.setStatus('mandatory')
mscIpivcDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaCugType.setStatus('mandatory')
mscIpivcDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaCugDnic.setStatus('mandatory')
mscIpivcDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaCugInterlockCode.setStatus('mandatory')
mscIpivcDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaCugOutCalls.setStatus('mandatory')
mscIpivcDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDnaCugIncCalls.setStatus('mandatory')
mscIpivcDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDnaCugPrivileged.setStatus('mandatory')
mscIpivcDr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3))
mscIpivcDrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 1), )
if mibBuilder.loadTexts: mscIpivcDrRowStatusTable.setStatus('mandatory')
mscIpivcDrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDrIndex"))
if mibBuilder.loadTexts: mscIpivcDrRowStatusEntry.setStatus('mandatory')
mscIpivcDrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDrRowStatus.setStatus('mandatory')
mscIpivcDrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDrComponentName.setStatus('mandatory')
mscIpivcDrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcDrStorageType.setStatus('mandatory')
mscIpivcDrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpivcDrIndex.setStatus('mandatory')
mscIpivcDrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 10), )
if mibBuilder.loadTexts: mscIpivcDrProvTable.setStatus('mandatory')
mscIpivcDrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcDrIndex"))
if mibBuilder.loadTexts: mscIpivcDrProvEntry.setStatus('mandatory')
mscIpivcDrCallingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDrCallingIpAddress.setStatus('mandatory')
mscIpivcDrCallingNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDrCallingNumberingPlanIndicator.setStatus('mandatory')
mscIpivcDrCallingDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 3, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpivcDrCallingDataNetworkAddress.setStatus('mandatory')
mscIpivcLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4))
mscIpivcLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 1), )
if mibBuilder.loadTexts: mscIpivcLcnRowStatusTable.setStatus('mandatory')
mscIpivcLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnIndex"))
if mibBuilder.loadTexts: mscIpivcLcnRowStatusEntry.setStatus('mandatory')
mscIpivcLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnRowStatus.setStatus('mandatory')
mscIpivcLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnComponentName.setStatus('mandatory')
mscIpivcLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnStorageType.setStatus('mandatory')
mscIpivcLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 39)))
if mibBuilder.loadTexts: mscIpivcLcnIndex.setStatus('mandatory')
mscIpivcLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10), )
if mibBuilder.loadTexts: mscIpivcLcnStateTable.setStatus('mandatory')
mscIpivcLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnIndex"))
if mibBuilder.loadTexts: mscIpivcLcnStateEntry.setStatus('mandatory')
mscIpivcLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnAdminState.setStatus('mandatory')
mscIpivcLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnOperationalState.setStatus('mandatory')
mscIpivcLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnUsageState.setStatus('mandatory')
mscIpivcLcnAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnAvailabilityStatus.setStatus('mandatory')
mscIpivcLcnProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnProceduralStatus.setStatus('mandatory')
mscIpivcLcnControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnControlStatus.setStatus('mandatory')
mscIpivcLcnAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnAlarmStatus.setStatus('mandatory')
mscIpivcLcnStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnStandbyStatus.setStatus('mandatory')
mscIpivcLcnUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnUnknownStatus.setStatus('mandatory')
mscIpivcLcnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11), )
if mibBuilder.loadTexts: mscIpivcLcnOperTable.setStatus('mandatory')
mscIpivcLcnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnIndex"))
if mibBuilder.loadTexts: mscIpivcLcnOperEntry.setStatus('mandatory')
mscIpivcLcnIpInterfaceDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnIpInterfaceDevice.setStatus('mandatory')
mscIpivcLcnDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnDestinationIpAddress.setStatus('mandatory')
mscIpivcLcnPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnPacketsSent.setStatus('mandatory')
mscIpivcLcnPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnPacketsReceived.setStatus('mandatory')
mscIpivcLcnDiscardTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnDiscardTxPackets.setStatus('mandatory')
mscIpivcLcnDiscardRcvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnDiscardRcvPackets.setStatus('mandatory')
mscIpivcLcnVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2))
mscIpivcLcnVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 1), )
if mibBuilder.loadTexts: mscIpivcLcnVcRowStatusTable.setStatus('mandatory')
mscIpivcLcnVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnVcIndex"))
if mibBuilder.loadTexts: mscIpivcLcnVcRowStatusEntry.setStatus('mandatory')
mscIpivcLcnVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcRowStatus.setStatus('mandatory')
mscIpivcLcnVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcComponentName.setStatus('mandatory')
mscIpivcLcnVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcStorageType.setStatus('mandatory')
mscIpivcLcnVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpivcLcnVcIndex.setStatus('mandatory')
mscIpivcLcnVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10), )
if mibBuilder.loadTexts: mscIpivcLcnVcCadTable.setStatus('mandatory')
mscIpivcLcnVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnVcIndex"))
if mibBuilder.loadTexts: mscIpivcLcnVcCadEntry.setStatus('mandatory')
mscIpivcLcnVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcType.setStatus('mandatory')
mscIpivcLcnVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcState.setStatus('mandatory')
mscIpivcLcnVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPreviousState.setStatus('mandatory')
mscIpivcLcnVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcDiagnosticCode.setStatus('mandatory')
mscIpivcLcnVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPreviousDiagnosticCode.setStatus('mandatory')
mscIpivcLcnVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCalledNpi.setStatus('mandatory')
mscIpivcLcnVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCalledDna.setStatus('mandatory')
mscIpivcLcnVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCalledLcn.setStatus('mandatory')
mscIpivcLcnVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCallingNpi.setStatus('mandatory')
mscIpivcLcnVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCallingDna.setStatus('mandatory')
mscIpivcLcnVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCallingLcn.setStatus('mandatory')
mscIpivcLcnVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcAccountingEnabled.setStatus('mandatory')
mscIpivcLcnVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcFastSelectCall.setStatus('mandatory')
mscIpivcLcnVcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcLocalRxPktSize.setStatus('mandatory')
mscIpivcLcnVcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcLocalTxPktSize.setStatus('mandatory')
mscIpivcLcnVcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcLocalTxWindowSize.setStatus('mandatory')
mscIpivcLcnVcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcLocalRxWindowSize.setStatus('mandatory')
mscIpivcLcnVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPathReliability.setStatus('mandatory')
mscIpivcLcnVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcAccountingEnd.setStatus('mandatory')
mscIpivcLcnVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPriority.setStatus('mandatory')
mscIpivcLcnVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSegmentSize.setStatus('mandatory')
mscIpivcLcnVcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSubnetTxPktSize.setStatus('mandatory')
mscIpivcLcnVcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSubnetTxWindowSize.setStatus('mandatory')
mscIpivcLcnVcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSubnetRxPktSize.setStatus('mandatory')
mscIpivcLcnVcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSubnetRxWindowSize.setStatus('mandatory')
mscIpivcLcnVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcMaxSubnetPktSize.setStatus('mandatory')
mscIpivcLcnVcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcTransferPriorityToNetwork.setStatus('mandatory')
mscIpivcLcnVcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcTransferPriorityFromNetwork.setStatus('mandatory')
mscIpivcLcnVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11), )
if mibBuilder.loadTexts: mscIpivcLcnVcIntdTable.setStatus('mandatory')
mscIpivcLcnVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnVcIndex"))
if mibBuilder.loadTexts: mscIpivcLcnVcIntdEntry.setStatus('mandatory')
mscIpivcLcnVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCallReferenceNumber.setStatus('obsolete')
mscIpivcLcnVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcElapsedTimeTillNow.setStatus('mandatory')
mscIpivcLcnVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSegmentsRx.setStatus('mandatory')
mscIpivcLcnVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSegmentsSent.setStatus('mandatory')
mscIpivcLcnVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcStartTime.setStatus('mandatory')
mscIpivcLcnVcCallReferenceNumberDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcCallReferenceNumberDecimal.setStatus('mandatory')
mscIpivcLcnVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12), )
if mibBuilder.loadTexts: mscIpivcLcnVcStatsTable.setStatus('mandatory')
mscIpivcLcnVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiVcMIB", "mscIpivcLcnVcIndex"))
if mibBuilder.loadTexts: mscIpivcLcnVcStatsEntry.setStatus('mandatory')
mscIpivcLcnVcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcAckStackingTimeouts.setStatus('mandatory')
mscIpivcLcnVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscIpivcLcnVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcDuplicatesFromSubnet.setStatus('mandatory')
mscIpivcLcnVcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcFrmRetryTimeouts.setStatus('mandatory')
mscIpivcLcnVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPeakRetryQueueSize.setStatus('mandatory')
mscIpivcLcnVcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPeakOoSeqQueueSize.setStatus('mandatory')
mscIpivcLcnVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscIpivcLcnVcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcPeakStackedAcksRx.setStatus('mandatory')
mscIpivcLcnVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcSubnetRecoveries.setStatus('mandatory')
mscIpivcLcnVcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcWindowClosuresToSubnet.setStatus('mandatory')
mscIpivcLcnVcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcWindowClosuresFromSubnet.setStatus('mandatory')
mscIpivcLcnVcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 51, 4, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpivcLcnVcWrTriggers.setStatus('mandatory')
ipiVcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 1))
ipiVcGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 1, 1))
ipiVcGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 1, 1, 3))
ipiVcGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 1, 1, 3, 2))
ipiVcCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 3))
ipiVcCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 3, 1))
ipiVcCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 3, 1, 3))
ipiVcCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 53, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-IpiVcMIB", mscIpivcLcnVcCallingNpi=mscIpivcLcnVcCallingNpi, mscIpivcLcnAdminState=mscIpivcLcnAdminState, mscIpivcLcnVcLocalRxPktSize=mscIpivcLcnVcLocalRxPktSize, mscIpivcLcnVcWrTriggers=mscIpivcLcnVcWrTriggers, mscIpivcDnaIncAccess=mscIpivcDnaIncAccess, mscIpivcDrRowStatusTable=mscIpivcDrRowStatusTable, mscIpivcDnaCugCugOptionsEntry=mscIpivcDnaCugCugOptionsEntry, ipiVcMIB=ipiVcMIB, mscIpivcLcnUsageState=mscIpivcLcnUsageState, mscIpivcLcnVcType=mscIpivcLcnVcType, mscIpivcDnaCugStorageType=mscIpivcDnaCugStorageType, mscIpivcLcnVcDuplicatesFromSubnet=mscIpivcLcnVcDuplicatesFromSubnet, mscIpivcLcnComponentName=mscIpivcLcnComponentName, mscIpivcLcnVcPriority=mscIpivcLcnVcPriority, mscIpivcLcnVcSegmentSize=mscIpivcLcnVcSegmentSize, mscIpivcDrRowStatus=mscIpivcDrRowStatus, mscIpivcIpAddress=mscIpivcIpAddress, mscIpivcLcnVcOutOfRangeFrmFromSubnet=mscIpivcLcnVcOutOfRangeFrmFromSubnet, mscIpivcLcnOperTable=mscIpivcLcnOperTable, mscIpivcLcnVcPeakOoSeqQueueSize=mscIpivcLcnVcPeakOoSeqQueueSize, mscIpivcLcnVcElapsedTimeTillNow=mscIpivcLcnVcElapsedTimeTillNow, mscIpivcRowStatusTable=mscIpivcRowStatusTable, mscIpivcDnaTransferPriorityOverRide=mscIpivcDnaTransferPriorityOverRide, mscIpivcDnaCug=mscIpivcDnaCug, mscIpivcDnaIncHighPriorityReverseCharge=mscIpivcDnaIncHighPriorityReverseCharge, mscIpivcLcnVcSubnetTxPktSize=mscIpivcLcnVcSubnetTxPktSize, mscIpivcDnaOutDefaultPathSensitivity=mscIpivcDnaOutDefaultPathSensitivity, mscIpivcLcnIpInterfaceDevice=mscIpivcLcnIpInterfaceDevice, mscIpivcLcnVcWindowClosuresFromSubnet=mscIpivcLcnVcWindowClosuresFromSubnet, mscIpivcDnaDataNetworkAddress=mscIpivcDnaDataNetworkAddress, mscIpivcLcnOperEntry=mscIpivcLcnOperEntry, mscIpivcDnaRowStatus=mscIpivcDnaRowStatus, mscIpivcDnaCugComponentName=mscIpivcDnaCugComponentName, mscIpivcLcnVcIntdEntry=mscIpivcLcnVcIntdEntry, mscIpivcLcnDiscardRcvPackets=mscIpivcLcnDiscardRcvPackets, ipiVcCapabilitiesCA02=ipiVcCapabilitiesCA02, mscIpivcDnaIncFastSelect=mscIpivcDnaIncFastSelect, mscIpivcLcnVcPreviousState=mscIpivcLcnVcPreviousState, mscIpivcDnaOutPathSensitivityOverRide=mscIpivcDnaOutPathSensitivityOverRide, mscIpivcLcnUnknownStatus=mscIpivcLcnUnknownStatus, mscIpivcLcnVcCadEntry=mscIpivcLcnVcCadEntry, mscIpivcLcnRowStatus=mscIpivcLcnRowStatus, mscIpivcLcnVcStatsTable=mscIpivcLcnVcStatsTable, ipiVcCapabilities=ipiVcCapabilities, mscIpivcLcnVcAckStackingTimeouts=mscIpivcLcnVcAckStackingTimeouts, mscIpivcDnaCugRowStatus=mscIpivcDnaCugRowStatus, mscIpivcLcnRowStatusTable=mscIpivcLcnRowStatusTable, mscIpivcDnaComponentName=mscIpivcDnaComponentName, mscIpivcLcnVcPathReliability=mscIpivcLcnVcPathReliability, mscIpivcLcnVcTransferPriorityFromNetwork=mscIpivcLcnVcTransferPriorityFromNetwork, mscIpivcLcnVcCallingDna=mscIpivcLcnVcCallingDna, mscIpivcLcnVcCallReferenceNumberDecimal=mscIpivcLcnVcCallReferenceNumberDecimal, mscIpivcDr=mscIpivcDr, mscIpivcLcnVcFrmRetryTimeouts=mscIpivcLcnVcFrmRetryTimeouts, mscIpivcLcnRowStatusEntry=mscIpivcLcnRowStatusEntry, mscIpivcDnaDefaultRecvFrmNetworkPacketSize=mscIpivcDnaDefaultRecvFrmNetworkPacketSize, mscIpivcLcnVcCalledLcn=mscIpivcLcnVcCalledLcn, mscIpivcDnaPacketSizes=mscIpivcDnaPacketSizes, mscIpivcLcnVcLocalTxWindowSize=mscIpivcLcnVcLocalTxWindowSize, ipiVcCapabilitiesCA02A=ipiVcCapabilitiesCA02A, mscIpivcDnaAddressEntry=mscIpivcDnaAddressEntry, mscIpivcLcnDiscardTxPackets=mscIpivcLcnDiscardTxPackets, mscIpivcDrStorageType=mscIpivcDrStorageType, mscIpivcLcnVcLocalRxWindowSize=mscIpivcLcnVcLocalRxWindowSize, ipiVcGroupCA=ipiVcGroupCA, mscIpivcLcnVcStatsEntry=mscIpivcLcnVcStatsEntry, mscIpivcLcnIndex=mscIpivcLcnIndex, mscIpivcDnaStorageType=mscIpivcDnaStorageType, mscIpivcDnaOutCalls=mscIpivcDnaOutCalls, mscIpivcLcnVcSegmentsRx=mscIpivcLcnVcSegmentsRx, mscIpivcDrCallingNumberingPlanIndicator=mscIpivcDrCallingNumberingPlanIndicator, mscIpivcDnaServiceCategory=mscIpivcDnaServiceCategory, mscIpivcLcnVcPeakRetryQueueSize=mscIpivcLcnVcPeakRetryQueueSize, mscIpivcDnaIncomingOptionsEntry=mscIpivcDnaIncomingOptionsEntry, mscIpivcDnaCugFormat=mscIpivcDnaCugFormat, mscIpivcLcnVcDiagnosticCode=mscIpivcLcnVcDiagnosticCode, mscIpivcDnaCugOutCalls=mscIpivcDnaCugOutCalls, mscIpivcLcnVcStartTime=mscIpivcLcnVcStartTime, mscIpivcIndex=mscIpivcIndex, mscIpivcLcnStandbyStatus=mscIpivcLcnStandbyStatus, mscIpivcRowStatus=mscIpivcRowStatus, mscIpivcMaximumNumberOfLcn=mscIpivcMaximumNumberOfLcn, mscIpivcDrProvTable=mscIpivcDrProvTable, mscIpivcDnaCallOptionsEntry=mscIpivcDnaCallOptionsEntry, mscIpivcLcnVcPreviousDiagnosticCode=mscIpivcLcnVcPreviousDiagnosticCode, mscIpivcLcnVcState=mscIpivcLcnVcState, mscIpivcLcnVcSubnetRecoveries=mscIpivcLcnVcSubnetRecoveries, mscIpivcDnaCug0AsNonCugCall=mscIpivcDnaCug0AsNonCugCall, mscIpivcDrRowStatusEntry=mscIpivcDrRowStatusEntry, mscIpivcLcnVcSubnetTxWindowSize=mscIpivcLcnVcSubnetTxWindowSize, ipiVcCapabilitiesCA=ipiVcCapabilitiesCA, mscIpivcDnaDefaultRecvFrmNetworkThruputClass=mscIpivcDnaDefaultRecvFrmNetworkThruputClass, mscIpivcLcnVcMaxSubnetPktSize=mscIpivcLcnVcMaxSubnetPktSize, mscIpivc=mscIpivc, mscIpivcDnaIncIntlReverseCharge=mscIpivcDnaIncIntlReverseCharge, mscIpivcDnaCallOptionsTable=mscIpivcDnaCallOptionsTable, mscIpivcLcnStateEntry=mscIpivcLcnStateEntry, mscIpivcDnaDefaultSendToNetworkThruputClass=mscIpivcDnaDefaultSendToNetworkThruputClass, mscIpivcLcnVcIntdTable=mscIpivcLcnVcIntdTable, mscIpivcLcnVcRowStatus=mscIpivcLcnVcRowStatus, mscIpivcDnaDefaultTransferPriority=mscIpivcDnaDefaultTransferPriority, mscIpivcLcnVcRowStatusEntry=mscIpivcLcnVcRowStatusEntry, mscIpivcDrCallingIpAddress=mscIpivcDrCallingIpAddress, mscIpivcDnaOutgoingOptionsTable=mscIpivcDnaOutgoingOptionsTable, mscIpivcDnaCugIncCalls=mscIpivcDnaCugIncCalls, mscIpivcLcnStateTable=mscIpivcLcnStateTable, mscIpivcLcnDestinationIpAddress=mscIpivcLcnDestinationIpAddress, mscIpivcLcnVcPeakStackedAcksRx=mscIpivcLcnVcPeakStackedAcksRx, mscIpivcProvTable=mscIpivcProvTable, mscIpivcDnaAddressTable=mscIpivcDnaAddressTable, mscIpivcDnaIndex=mscIpivcDnaIndex, mscIpivcDnaOutgoingOptionsEntry=mscIpivcDnaOutgoingOptionsEntry, mscIpivcDnaAccountClass=mscIpivcDnaAccountClass, mscIpivcDnaCugRowStatusEntry=mscIpivcDnaCugRowStatusEntry, mscIpivcLcnOperationalState=mscIpivcLcnOperationalState, mscIpivcLcnVcSegmentsSent=mscIpivcLcnVcSegmentsSent, mscIpivcLcnVc=mscIpivcLcnVc, mscIpivcLcnPacketsReceived=mscIpivcLcnPacketsReceived, mscIpivcDnaDefaultSendToNetworkWindowSize=mscIpivcDnaDefaultSendToNetworkWindowSize, mscIpivcDrProvEntry=mscIpivcDrProvEntry, mscIpivcDnaIncCalls=mscIpivcDnaIncCalls, mscIpivcProvEntry=mscIpivcProvEntry, mscIpivcLcnVcComponentName=mscIpivcLcnVcComponentName, ipiVcGroupCA02A=ipiVcGroupCA02A, mscIpivcDnaFastSelectCallsOnly=mscIpivcDnaFastSelectCallsOnly, mscIpivcDrIndex=mscIpivcDrIndex, mscIpivcLcnAvailabilityStatus=mscIpivcLcnAvailabilityStatus, mscIpivcLcnControlStatus=mscIpivcLcnControlStatus, mscIpivcLcnVcWindowClosuresToSubnet=mscIpivcLcnVcWindowClosuresToSubnet, mscIpivcDnaDefaultRecvFrmNetworkWindowSize=mscIpivcDnaDefaultRecvFrmNetworkWindowSize, mscIpivcDnaIncNormalPriorityReverseCharge=mscIpivcDnaIncNormalPriorityReverseCharge, mscIpivcComponentName=mscIpivcComponentName, mscIpivcDnaIncSameService=mscIpivcDnaIncSameService, mscIpivcLcnVcIndex=mscIpivcLcnVcIndex, mscIpivcLcnVcRowStatusTable=mscIpivcLcnVcRowStatusTable, mscIpivcLcnAlarmStatus=mscIpivcLcnAlarmStatus, mscIpivcDnaIncChargeTransfer=mscIpivcDnaIncChargeTransfer, mscIpivcDnaDefaultSendToNetworkPacketSize=mscIpivcDnaDefaultSendToNetworkPacketSize, mscIpivcDnaCugDnic=mscIpivcDnaCugDnic, mscIpivcDnaRowStatusEntry=mscIpivcDnaRowStatusEntry, mscIpivcDnaNumberingPlanIndicator=mscIpivcDnaNumberingPlanIndicator, mscIpivcDnaRowStatusTable=mscIpivcDnaRowStatusTable, mscIpivcLcnVcLocalTxPktSize=mscIpivcLcnVcLocalTxPktSize, mscIpivcDna=mscIpivcDna, mscIpivcDrComponentName=mscIpivcDrComponentName, mscIpivcDnaServiceExchange=mscIpivcDnaServiceExchange, mscIpivcLcnPacketsSent=mscIpivcLcnPacketsSent, mscIpivcDnaIncomingOptionsTable=mscIpivcDnaIncomingOptionsTable, mscIpivcDnaCugType=mscIpivcDnaCugType, mscIpivcDnaCugPrivileged=mscIpivcDnaCugPrivileged, ipiVcGroupCA02=ipiVcGroupCA02, mscIpivcLcnVcPeakOoSeqFrmForwarded=mscIpivcLcnVcPeakOoSeqFrmForwarded, ipiVcGroup=ipiVcGroup, mscIpivcLcnVcCalledNpi=mscIpivcLcnVcCalledNpi, mscIpivcDnaIncIntlNormalCharge=mscIpivcDnaIncIntlNormalCharge, mscIpivcLcnVcSubnetRxPktSize=mscIpivcLcnVcSubnetRxPktSize, mscIpivcLcnVcAccountingEnabled=mscIpivcLcnVcAccountingEnabled, mscIpivcDnaPacketSizeNegotiation=mscIpivcDnaPacketSizeNegotiation, mscIpivcStorageType=mscIpivcStorageType, mscIpivcLcnStorageType=mscIpivcLcnStorageType, mscIpivcLcnVcSubnetRxWindowSize=mscIpivcLcnVcSubnetRxWindowSize, mscIpivcLcn=mscIpivcLcn, mscIpivcLcnVcCallingLcn=mscIpivcLcnVcCallingLcn, mscIpivcDnaCugInterlockCode=mscIpivcDnaCugInterlockCode, mscIpivcLcnVcCadTable=mscIpivcLcnVcCadTable, mscIpivcDnaCugRowStatusTable=mscIpivcDnaCugRowStatusTable, mscIpivcDnaCugCugOptionsTable=mscIpivcDnaCugCugOptionsTable, mscIpivcLcnVcAccountingEnd=mscIpivcLcnVcAccountingEnd, mscIpivcLcnProceduralStatus=mscIpivcLcnProceduralStatus, mscIpivcLcnVcTransferPriorityToNetwork=mscIpivcLcnVcTransferPriorityToNetwork, mscIpivcDnaCugIndex=mscIpivcDnaCugIndex, mscIpivcDrCallingDataNetworkAddress=mscIpivcDrCallingDataNetworkAddress, mscIpivcRowStatusEntry=mscIpivcRowStatusEntry, mscIpivcLcnVcFastSelectCall=mscIpivcLcnVcFastSelectCall, mscIpivcLcnVcCalledDna=mscIpivcLcnVcCalledDna, mscIpivcLcnVcStorageType=mscIpivcLcnVcStorageType, mscIpivcLcnVcCallReferenceNumber=mscIpivcLcnVcCallReferenceNumber)
