#
# PySNMP MIB module CLAB-GW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CLAB-GW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:08:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
clabCommonMibs, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabCommonMibs")
InetAddressIPv4, InetAddressPrefixLength, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressPrefixLength", "InetAddressIPv6")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Integer32, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, IpAddress, NotificationType, MibIdentifier, Bits, Counter64, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "Bits", "Counter64", "ObjectIdentity", "iso")
TextualConvention, TruthValue, DateAndTime, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DateAndTime", "RowStatus", "DisplayString")
clabGWMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 4, 6))
clabGWMib.setRevisions(('2016-08-04 00:00', '2016-02-24 00:00',))
if mibBuilder.loadTexts: clabGWMib.setLastUpdated('201608040000Z')
if mibBuilder.loadTexts: clabGWMib.setOrganization('Cable Television Laboratories, Inc.')
clabGWNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 0))
clabGWMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1))
clabGWMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2))
clabGWMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 1))
clabGWMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2))
clabGWDeviceInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1))
clabGWDNSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 2))
clabGWMAPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3))
clabGWDeviceInfoManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturer.setStatus('current')
clabGWDeviceInfoManufacturerOUI = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturerOUI.setStatus('current')
clabGWDeviceInfoDeviceCategory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoDeviceCategory.setStatus('current')
clabGWDeviceInfoModelName = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoModelName.setStatus('current')
clabGWDeviceInfoModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoModelNumber.setStatus('current')
clabGWDeviceInfoDescription = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoDescription.setStatus('current')
clabGWDeviceInfoProductClass = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoProductClass.setStatus('current')
clabGWDeviceInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoSerialNumber.setStatus('current')
clabGWDeviceInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoHardwareVersion.setStatus('current')
clabGWDeviceInfoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoSoftwareVersion.setStatus('current')
clabGWDeviceInfoAdditionalHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoAdditionalHardwareVersion.setStatus('current')
clabGWDeviceInfoAdditonalSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoAdditonalSoftwareVersion.setStatus('current')
clabGWDeviceInfoProvisioningCode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWDeviceInfoProvisioningCode.setStatus('current')
clabGWDeviceInfoUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoUpTime.setStatus('current')
clabGWDeviceInfoFirstUseDate = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoFirstUseDate.setStatus('current')
clabGWDevicePublicAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWDevicePublicAccessEnabled.setStatus('current')
clabGWDeviceDNSIpv6QueryForDualMode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWDeviceDNSIpv6QueryForDualMode.setStatus('current')
clabGWMAPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWMAPEnable.setStatus('current')
clabGWMAPTunnelDomainNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPTunnelDomainNumEntries.setStatus('current')
clabGWMAPDomainTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3), )
if mibBuilder.loadTexts: clabGWMAPDomainTable.setStatus('current')
clabGWMAPDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainEntry.setStatus('current')
clabGWMAPDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: clabGWMAPDomainIndex.setStatus('current')
clabGWMAPDomainEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainEnable.setStatus('current')
clabGWMAPDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("errorMisconfigured", 3), ("error", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainStatus.setStatus('current')
clabGWMAPDomainAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainAlias.setStatus('current')
clabGWMAPDomainTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encapsulation", 1), ("translation", 2))).clone('translation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainTransportMode.setStatus('current')
clabGWMAPDomainWANInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainWANInterface.setStatus('current')
clabGWMAPDomainIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 7), InetAddressIPv6().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIPv6Prefix.setStatus('current')
clabGWMAPDomainIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIPv6PrefixLen.setStatus('current')
clabGWMAPDomainBRIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 9), InetAddressIPv6().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6Prefix.setStatus('current')
clabGWMAPDomainBRIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 10), InetAddressPrefixLength().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6PrefixLen.setStatus('current')
clabGWMAPDomainDSCPMarkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainDSCPMarkPolicy.setStatus('current')
clabGWMAPDomainIncludeSystemPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIncludeSystemPorts.setStatus('current')
clabGWMAPDomainRuleNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainRuleNumEntries.setStatus('current')
clabGWMAPDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRowStatus.setStatus('current')
clabGWMAPDomainRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4), )
if mibBuilder.loadTexts: clabGWMAPDomainRuleTable.setStatus('current')
clabGWMAPDomainRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"), (0, "CLAB-GW-MIB", "clabGWMAPDomainRuleIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainRuleEntry.setStatus('current')
clabGWMAPDomainRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: clabGWMAPDomainRuleIndex.setStatus('current')
clabGWMAPDomainRuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleEnable.setStatus('current')
clabGWMAPDomainRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("error", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainRuleStatus.setStatus('current')
clabGWMAPDomainRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleAlias.setStatus('current')
clabGWMAPDomainRuleOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpv6", 1), ("static", 2))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleOrigin.setStatus('current')
clabGWMAPDomainRuleIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 6), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6Prefix.setStatus('current')
clabGWMAPDomainRuleIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6PrefixLen.setStatus('current')
clabGWMAPDomainRuleIPv4Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 8), InetAddressIPv4().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4Prefix.setStatus('current')
clabGWMAPDomainRuleIPv4PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 9), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4PrefixLen.setStatus('current')
clabGWMAPDomainRuleEABitsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleEABitsLength.setStatus('current')
clabGWMAPDomainRuleIsFMR = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIsFMR.setStatus('current')
clabGWMAPDomainRulePSIDOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDOffset.setStatus('current')
clabGWMAPDomainRulePSIDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDLength.setStatus('current')
clabGWMAPDomainRulePSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRulePSID.setStatus('current')
clabGWMAPDomainRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleRowStatus.setStatus('current')
clabGWMAPDomainIfTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5), )
if mibBuilder.loadTexts: clabGWMAPDomainIfTable.setStatus('current')
clabGWMAPDomainIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainIfEntry.setStatus('current')
clabGWMAPDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: clabGWMAPDomainIfIndex.setStatus('current')
clabGWMAPDomainIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfEnable.setStatus('current')
clabGWMAPDomainIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3), ("dormant", 4), ("notPresent", 5), ("lowerLayerDown", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatus.setStatus('current')
clabGWMAPDomainIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfAlias.setStatus('current')
clabGWMAPDomainIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfName.setStatus('current')
clabGWMAPDomainIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfLastChange.setStatus('current')
clabGWMAPDomainIfLowerLayers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfLowerLayers.setStatus('current')
clabGWMAPDomainIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfRowStatus.setStatus('current')
clabGWMAPDomainIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6), )
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsTable.setStatus('current')
clabGWMAPDomainIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsEntry.setStatus('current')
clabGWMAPDomainIfStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesSent.setStatus('current')
clabGWMAPDomainIfStatsBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesRcvd.setStatus('current')
clabGWMAPDomainIfStatsPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktSent.setStatus('current')
clabGWMAPDomainIfStatsPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktRcvd.setStatus('current')
clabGWMAPDomainIfStatsErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrorsSent.setStatus('current')
clabGWMAPDomainIfStatsErrsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrsRcvd.setStatus('current')
clabGWMAPDomainIfStatsUcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktSent.setStatus('current')
clabGWMAPDomainIfStatsUcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktRcvd.setStatus('current')
clabGWMAPDomainIfStatsDcardPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktSent.setStatus('current')
clabGWMAPDomainIfStatsDcardPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktRcvd.setStatus('current')
clabGWMAPDomainIfStatsMcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktSent.setStatus('current')
clabGWMAPDomainIfStatsMcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktRcvd.setStatus('current')
clabGWMAPDomainIfStatsBcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktSent.setStatus('current')
clabGWMAPDomainIfStatsBcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 14), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktRcvd.setStatus('current')
clabGWMAPDomainIfStatsUkwnProtoPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUkwnProtoPkt.setStatus('current')
clabGWMAPDomainIfStatsInvV4Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsInvV4Pkts.setStatus('current')
clabGWCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 1, 1)).setObjects(("CLAB-GW-MIB", "clabGWGroup"), ("CLAB-GW-MIB", "clabGWDNSGroup"), ("CLAB-GW-MIB", "clabGWMAPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWCompliance = clabGWCompliance.setStatus('current')
clabGWGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2, 1)).setObjects(("CLAB-GW-MIB", "clabGWDeviceInfoManufacturer"), ("CLAB-GW-MIB", "clabGWDeviceInfoManufacturerOUI"), ("CLAB-GW-MIB", "clabGWDeviceInfoDeviceCategory"), ("CLAB-GW-MIB", "clabGWDeviceInfoModelName"), ("CLAB-GW-MIB", "clabGWDeviceInfoModelNumber"), ("CLAB-GW-MIB", "clabGWDeviceInfoDescription"), ("CLAB-GW-MIB", "clabGWDeviceInfoProductClass"), ("CLAB-GW-MIB", "clabGWDeviceInfoSerialNumber"), ("CLAB-GW-MIB", "clabGWDeviceInfoHardwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoSoftwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoAdditionalHardwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoAdditonalSoftwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoProvisioningCode"), ("CLAB-GW-MIB", "clabGWDeviceInfoUpTime"), ("CLAB-GW-MIB", "clabGWDeviceInfoFirstUseDate"), ("CLAB-GW-MIB", "clabGWDevicePublicAccessEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWGroup = clabGWGroup.setStatus('current')
clabGWDNSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2, 3)).setObjects(("CLAB-GW-MIB", "clabGWDeviceDNSIpv6QueryForDualMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWDNSGroup = clabGWDNSGroup.setStatus('current')
clabGWMAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2, 4)).setObjects(("CLAB-GW-MIB", "clabGWMAPEnable"), ("CLAB-GW-MIB", "clabGWMAPTunnelDomainNumEntries"), ("CLAB-GW-MIB", "clabGWMAPDomainEnable"), ("CLAB-GW-MIB", "clabGWMAPDomainStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainAlias"), ("CLAB-GW-MIB", "clabGWMAPDomainTransportMode"), ("CLAB-GW-MIB", "clabGWMAPDomainWANInterface"), ("CLAB-GW-MIB", "clabGWMAPDomainIPv6Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainIPv6PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainBRIPv6Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainBRIPv6PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainDSCPMarkPolicy"), ("CLAB-GW-MIB", "clabGWMAPDomainIncludeSystemPorts"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleNumEntries"), ("CLAB-GW-MIB", "clabGWMAPDomainRowStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleEnable"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleAlias"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleOrigin"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv6Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv6PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv4Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv4PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleEABitsLength"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIsFMR"), ("CLAB-GW-MIB", "clabGWMAPDomainRulePSIDOffset"), ("CLAB-GW-MIB", "clabGWMAPDomainRulePSIDLength"), ("CLAB-GW-MIB", "clabGWMAPDomainRulePSID"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleRowStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainIfEnable"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainIfAlias"), ("CLAB-GW-MIB", "clabGWMAPDomainIfName"), ("CLAB-GW-MIB", "clabGWMAPDomainIfLastChange"), ("CLAB-GW-MIB", "clabGWMAPDomainIfLowerLayers"), ("CLAB-GW-MIB", "clabGWMAPDomainIfRowStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBytesSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBytesRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsErrorsSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsErrsRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsUcastPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsUcastPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsDcardPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsDcardPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsMcastPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsMcastPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBcastPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBcastPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsUkwnProtoPkt"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsInvV4Pkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWMAPGroup = clabGWMAPGroup.setStatus('current')
mibBuilder.exportSymbols("CLAB-GW-MIB", clabGWMAPDomainIfStatsBytesSent=clabGWMAPDomainIfStatsBytesSent, clabGWMAPDomainIfStatsMcastPktSent=clabGWMAPDomainIfStatsMcastPktSent, clabGWDeviceInfoProvisioningCode=clabGWDeviceInfoProvisioningCode, clabGWMAPDomainRuleRowStatus=clabGWMAPDomainRuleRowStatus, clabGWMAPDomainBRIPv6PrefixLen=clabGWMAPDomainBRIPv6PrefixLen, clabGWMAPDomainAlias=clabGWMAPDomainAlias, clabGWMAPDomainRuleEABitsLength=clabGWMAPDomainRuleEABitsLength, clabGWMAPDomainRulePSID=clabGWMAPDomainRulePSID, clabGWDevicePublicAccessEnabled=clabGWDevicePublicAccessEnabled, clabGWDeviceInfoModelName=clabGWDeviceInfoModelName, clabGWMAPObjects=clabGWMAPObjects, clabGWMAPDomainIfStatsDcardPktRcvd=clabGWMAPDomainIfStatsDcardPktRcvd, clabGWMAPDomainIfName=clabGWMAPDomainIfName, clabGWMAPDomainRuleIsFMR=clabGWMAPDomainRuleIsFMR, clabGWMAPTunnelDomainNumEntries=clabGWMAPTunnelDomainNumEntries, clabGWDeviceInfoAdditonalSoftwareVersion=clabGWDeviceInfoAdditonalSoftwareVersion, clabGWMAPDomainRulePSIDLength=clabGWMAPDomainRulePSIDLength, clabGWMAPDomainWANInterface=clabGWMAPDomainWANInterface, clabGWMAPDomainIfRowStatus=clabGWMAPDomainIfRowStatus, clabGWMAPDomainRuleIPv4Prefix=clabGWMAPDomainRuleIPv4Prefix, clabGWNotifications=clabGWNotifications, clabGWMAPGroup=clabGWMAPGroup, clabGWMAPDomainIfStatsUcastPktSent=clabGWMAPDomainIfStatsUcastPktSent, clabGWMAPDomainIfStatus=clabGWMAPDomainIfStatus, clabGWMAPDomainIfStatsUkwnProtoPkt=clabGWMAPDomainIfStatsUkwnProtoPkt, clabGWMAPDomainIfEnable=clabGWMAPDomainIfEnable, clabGWMAPDomainRulePSIDOffset=clabGWMAPDomainRulePSIDOffset, clabGWMAPDomainIfStatsMcastPktRcvd=clabGWMAPDomainIfStatsMcastPktRcvd, clabGWDeviceInfoModelNumber=clabGWDeviceInfoModelNumber, clabGWMAPDomainIfStatsErrsRcvd=clabGWMAPDomainIfStatsErrsRcvd, clabGWMAPEnable=clabGWMAPEnable, clabGWMAPDomainIPv6Prefix=clabGWMAPDomainIPv6Prefix, clabGWMAPDomainEnable=clabGWMAPDomainEnable, clabGWMAPDomainRowStatus=clabGWMAPDomainRowStatus, clabGWMAPDomainRuleNumEntries=clabGWMAPDomainRuleNumEntries, clabGWMibConformance=clabGWMibConformance, clabGWDNSGroup=clabGWDNSGroup, clabGWMAPDomainIfAlias=clabGWMAPDomainIfAlias, clabGWMAPDomainTable=clabGWMAPDomainTable, clabGWDeviceInfoDeviceCategory=clabGWDeviceInfoDeviceCategory, clabGWMAPDomainIfStatsBcastPktSent=clabGWMAPDomainIfStatsBcastPktSent, clabGWMAPDomainRuleStatus=clabGWMAPDomainRuleStatus, clabGWMAPDomainIncludeSystemPorts=clabGWMAPDomainIncludeSystemPorts, clabGWMAPDomainRuleIndex=clabGWMAPDomainRuleIndex, clabGWMAPDomainIfStatsPktSent=clabGWMAPDomainIfStatsPktSent, clabGWMAPDomainIfStatsDcardPktSent=clabGWMAPDomainIfStatsDcardPktSent, clabGWMAPDomainIfStatsTable=clabGWMAPDomainIfStatsTable, clabGWMAPDomainRuleOrigin=clabGWMAPDomainRuleOrigin, clabGWDeviceInfoObjects=clabGWDeviceInfoObjects, clabGWMAPDomainIndex=clabGWMAPDomainIndex, clabGWDeviceInfoFirstUseDate=clabGWDeviceInfoFirstUseDate, clabGWDeviceInfoUpTime=clabGWDeviceInfoUpTime, clabGWDeviceInfoDescription=clabGWDeviceInfoDescription, clabGWMAPDomainIfStatsUcastPktRcvd=clabGWMAPDomainIfStatsUcastPktRcvd, clabGWDeviceInfoManufacturer=clabGWDeviceInfoManufacturer, clabGWMAPDomainRuleAlias=clabGWMAPDomainRuleAlias, clabGWCompliance=clabGWCompliance, clabGWMAPDomainIfStatsErrorsSent=clabGWMAPDomainIfStatsErrorsSent, clabGWMAPDomainRuleEnable=clabGWMAPDomainRuleEnable, clabGWMAPDomainIfStatsInvV4Pkts=clabGWMAPDomainIfStatsInvV4Pkts, clabGWMAPDomainEntry=clabGWMAPDomainEntry, clabGWMAPDomainRuleTable=clabGWMAPDomainRuleTable, clabGWMibObjects=clabGWMibObjects, clabGWMibGroups=clabGWMibGroups, clabGWMAPDomainIfLowerLayers=clabGWMAPDomainIfLowerLayers, clabGWMAPDomainIPv6PrefixLen=clabGWMAPDomainIPv6PrefixLen, clabGWMAPDomainIfStatsPktRcvd=clabGWMAPDomainIfStatsPktRcvd, clabGWMib=clabGWMib, clabGWMAPDomainIfTable=clabGWMAPDomainIfTable, clabGWMAPDomainIfIndex=clabGWMAPDomainIfIndex, clabGWMAPDomainIfLastChange=clabGWMAPDomainIfLastChange, clabGWMibCompliances=clabGWMibCompliances, clabGWDeviceDNSIpv6QueryForDualMode=clabGWDeviceDNSIpv6QueryForDualMode, clabGWDeviceInfoHardwareVersion=clabGWDeviceInfoHardwareVersion, clabGWDeviceInfoSoftwareVersion=clabGWDeviceInfoSoftwareVersion, clabGWDNSObjects=clabGWDNSObjects, clabGWMAPDomainRuleEntry=clabGWMAPDomainRuleEntry, clabGWDeviceInfoManufacturerOUI=clabGWDeviceInfoManufacturerOUI, clabGWDeviceInfoSerialNumber=clabGWDeviceInfoSerialNumber, clabGWMAPDomainRuleIPv6Prefix=clabGWMAPDomainRuleIPv6Prefix, clabGWMAPDomainBRIPv6Prefix=clabGWMAPDomainBRIPv6Prefix, clabGWGroup=clabGWGroup, clabGWMAPDomainDSCPMarkPolicy=clabGWMAPDomainDSCPMarkPolicy, clabGWMAPDomainIfStatsBcastPktRcvd=clabGWMAPDomainIfStatsBcastPktRcvd, clabGWMAPDomainStatus=clabGWMAPDomainStatus, clabGWMAPDomainRuleIPv4PrefixLen=clabGWMAPDomainRuleIPv4PrefixLen, clabGWMAPDomainIfStatsBytesRcvd=clabGWMAPDomainIfStatsBytesRcvd, PYSNMP_MODULE_ID=clabGWMib, clabGWDeviceInfoProductClass=clabGWDeviceInfoProductClass, clabGWMAPDomainIfEntry=clabGWMAPDomainIfEntry, clabGWMAPDomainRuleIPv6PrefixLen=clabGWMAPDomainRuleIPv6PrefixLen, clabGWMAPDomainTransportMode=clabGWMAPDomainTransportMode, clabGWMAPDomainIfStatsEntry=clabGWMAPDomainIfStatsEntry, clabGWDeviceInfoAdditionalHardwareVersion=clabGWDeviceInfoAdditionalHardwareVersion)
