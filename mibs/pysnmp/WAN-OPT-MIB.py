#
# PySNMP MIB module WAN-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WAN-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, enterprises, NotificationType, Integer32, iso, ObjectIdentity, Bits, ModuleIdentity, Unsigned32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "enterprises", "NotificationType", "Integer32", "iso", "ObjectIdentity", "Bits", "ModuleIdentity", "Unsigned32", "IpAddress", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTLANConnectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContWANAdaptor = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1))
class Counter8(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500GCTLANConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16), )
if mibBuilder.loadTexts: cdx6500GCTLANConnectionTable.setStatus('mandatory')
cdx6500GCTLANConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WAEntryNumber"))
if mibBuilder.loadTexts: cdx6500GCTLANConnectionEntry.setStatus('mandatory')
cdx6500WAEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAEntryNumber.setStatus('mandatory')
cdx6500WALanForwarderType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50, 100))).clone(namedValues=NamedValues(("brid", 0), ("rout", 1), ("brout", 2), ("newvalBrid", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanForwarderType.setStatus('mandatory')
cdx6500WABridgeLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WABridgeLinkNumber.setStatus('mandatory')
cdx6500WARouterInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WARouterInterfaceNum.setStatus('mandatory')
cdx6500WACfgEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deprecatedObj", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgEncapsulationType.setStatus('deprecated')
cdx6500WAAutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAutocallMnemonic.setStatus('mandatory')
cdx6500WAAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAutocallTimeout.setStatus('mandatory')
cdx6500WAMaxAutocallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAMaxAutocallAttempts.setStatus('mandatory')
cdx6500WARemoteConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WARemoteConnectionId.setStatus('mandatory')
cdx6500WABillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WABillingRecords.setStatus('mandatory')
cdx6500WADataPassingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50, 100))).clone(namedValues=NamedValues(("low", 0), ("med", 1), ("high", 2), ("exp", 3), ("newvalLow", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WADataPassingPriority.setStatus('mandatory')
cdx6500WALCONQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALCONQueueLimit.setStatus('mandatory')
cdx6500WACfgEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50, 100))).clone(namedValues=NamedValues(("codex", 0), ("rfc1294", 1), ("rfc877", 2), ("newvalCodex", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgEncapType.setStatus('mandatory')
cdx6500WACfgOnDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgOnDemand.setStatus('mandatory')
cdx6500WACfgIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgIdleTimeout.setStatus('mandatory')
cdx6500WACfgLanConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("ptToPt", 0), ("group", 1), ("newvalPtToPt", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgLanConnectionType.setStatus('mandatory')
cdx6500WACfgNexthopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgNexthopIpAddress.setStatus('mandatory')
cdx6500WACfgNexthopIpxNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgNexthopIpxNodeNumber.setStatus('mandatory')
cdx6500WACfgParallelSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgParallelSvc.setStatus('mandatory')
cdx6500WACfgParallelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgParallelThreshold.setStatus('mandatory')
cdx6500WACfgParallelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgParallelPort.setStatus('mandatory')
cdx6500WACfgBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 16, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 100))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACfgBroadcast.setStatus('mandatory')
cdx6500GCTWanAdaptorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 17))
cdx6500GCMaxLCON = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GCMaxLCON.setStatus('mandatory')
cdx6500LCTDataSummaryStats = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1), )
if mibBuilder.loadTexts: cdx6500LCTDataSummaryStats.setStatus('mandatory')
cdx6500WADataStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WALanConnNumberData"))
if mibBuilder.loadTexts: cdx6500WADataStatEntry.setStatus('mandatory')
cdx6500WALanConnNumberData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanConnNumberData.setStatus('mandatory')
cdx6500WALastStatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALastStatResetTime.setStatus('mandatory')
cdx6500WAAvgPktSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 3), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAvgPktSizeTx.setStatus('mandatory')
cdx6500WACurTxQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACurTxQueueDepth.setStatus('mandatory')
cdx6500WAMaxTxQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAMaxTxQueueDepth.setStatus('mandatory')
cdx6500WAMaxTxQDepthTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAMaxTxQDepthTime.setStatus('mandatory')
cdx6500WAAvgPktSizeRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 7), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAAvgPktSizeRcv.setStatus('mandatory')
cdx6500WATxPktDiscardFrwdReq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardFrwdReq.setStatus('deprecated')
cdx6500WATxPktDiscardTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardTransDelay.setStatus('mandatory')
cdx6500WATxPktDiscardCong = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCong.setStatus('mandatory')
cdx6500WATxPktDiscardMaxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardMaxFrame.setStatus('mandatory')
cdx6500WATxPktDiscardCLrReq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCLrReq.setStatus('mandatory')
cdx6500WATxPktDiscardCallEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WATxPktDiscardCallEstab.setStatus('mandatory')
cdx6500WABytesOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WABytesOutstanding.setStatus('mandatory')
cdx6500LCTCallSummaryStats = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2), )
if mibBuilder.loadTexts: cdx6500LCTCallSummaryStats.setStatus('mandatory')
cdx6500WACallStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WALanConnNumberCall"))
if mibBuilder.loadTexts: cdx6500WACallStatEntry.setStatus('mandatory')
cdx6500WALanConnNumberCall = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanConnNumberCall.setStatus('mandatory')
cdx6500WAConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAConnectionType.setStatus('mandatory')
cdx6500WAStatEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("codex", 0), ("rfc1294", 1), ("rfc877", 2), ("newvalCodex", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAStatEncapsulationType.setStatus('mandatory')
cdx6500WAConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 17, 18, 50))).clone(namedValues=NamedValues(("unconfigured", 0), ("backinHeap", 1), ("notConnected", 2), ("disabled", 3), ("handshaking", 4), ("waitForCall", 6), ("wfccRecall", 7), ("wfccWaitForCall", 8), ("wfccDisabled", 9), ("calling", 11), ("connected", 17), ("connectedCongested", 18), ("newvalUnconfigured", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAConnectionState.setStatus('mandatory')
cdx6500WAForwardersConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAForwardersConnected.setStatus('mandatory')
cdx6500WARemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WARemoteAddress.setStatus('mandatory')
cdx6500WANumAutocallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 7), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WANumAutocallAttempts.setStatus('mandatory')
cdx6500WALastClearCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALastClearCauseCode.setStatus('mandatory')
cdx6500WALastClearDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALastClearDiagCode.setStatus('mandatory')
cdx6500WAParallelSvcsEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 10), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAParallelSvcsEstab.setStatus('mandatory')
cdx6500WAParallelSvcsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 2, 1, 11), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAParallelSvcsConfigured.setStatus('mandatory')
cdx6500LCTPacketSummaryStats = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3), )
if mibBuilder.loadTexts: cdx6500LCTPacketSummaryStats.setStatus('mandatory')
cdx6500WAPktStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WALanConnNumberPkt"))
if mibBuilder.loadTexts: cdx6500WAPktStatEntry.setStatus('mandatory')
cdx6500WALanConnNumberPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WALanConnNumberPkt.setStatus('mandatory')
cdx6500WADataPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WADataPktTx.setStatus('mandatory')
cdx6500WADataPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WADataPktRcv.setStatus('mandatory')
cdx6500WACallReqPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallReqPktsTx.setStatus('mandatory')
cdx6500WACallReqPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallReqPktsRcv.setStatus('mandatory')
cdx6500WACallAcceptPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallAcceptPktsTx.setStatus('mandatory')
cdx6500WACallAcceptPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WACallAcceptPktsRcv.setStatus('mandatory')
cdx6500WAClearReqPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearReqPktsTx.setStatus('mandatory')
cdx6500WAClearReqPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearReqPktsRcv.setStatus('mandatory')
cdx6500WAClearConfPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearConfPktsTx.setStatus('mandatory')
cdx6500WAClearConfPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAClearConfPktsRcv.setStatus('mandatory')
cdx6500WAResetReqPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetReqPktsTx.setStatus('mandatory')
cdx6500WAResetReqPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetReqPktsRcv.setStatus('mandatory')
cdx6500WAResetConfPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetConfPktsTx.setStatus('mandatory')
cdx6500WAResetConfPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAResetConfPktsRcv.setStatus('mandatory')
cdx6500ContWANAdaptorTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1), )
if mibBuilder.loadTexts: cdx6500ContWANAdaptorTable.setStatus('mandatory')
cdx6500ContWANAdaptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1), ).setIndexNames((0, "WAN-OPT-MIB", "cdx6500WAControlLanConnNumber"))
if mibBuilder.loadTexts: cdx6500ContWANAdaptorEntry.setStatus('mandatory')
cdx6500WAControlLanConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500WAControlLanConnNumber.setStatus('mandatory')
cdx6500WALanConnEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("newvalEnable", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500WALanConnEnableDisable.setStatus('mandatory')
cdx6500WALanConnBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("boot", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500WALanConnBoot.setStatus('mandatory')
cdx6500WALanConnResetStat = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500WALanConnResetStat.setStatus('mandatory')
mibBuilder.exportSymbols("WAN-OPT-MIB", cdx6500GCTLANConnectionEntry=cdx6500GCTLANConnectionEntry, cdx6500WAParallelSvcsEstab=cdx6500WAParallelSvcsEstab, cdx6500WAConnectionState=cdx6500WAConnectionState, cdx6500WAMaxAutocallAttempts=cdx6500WAMaxAutocallAttempts, cdx6500WADataStatEntry=cdx6500WADataStatEntry, cdx6500WATxPktDiscardCong=cdx6500WATxPktDiscardCong, cdx6500WAClearReqPktsRcv=cdx6500WAClearReqPktsRcv, cdx6500WALanConnResetStat=cdx6500WALanConnResetStat, cdx6500ContWANAdaptorEntry=cdx6500ContWANAdaptorEntry, cdx6500WAClearConfPktsTx=cdx6500WAClearConfPktsTx, cdx6500WAStatEncapsulationType=cdx6500WAStatEncapsulationType, cdx6500WALanConnNumberData=cdx6500WALanConnNumberData, cdx6500WAResetConfPktsRcv=cdx6500WAResetConfPktsRcv, cdx6500ContWANAdaptorTable=cdx6500ContWANAdaptorTable, cdx6500WACfgParallelSvc=cdx6500WACfgParallelSvc, cdx6500WACallAcceptPktsTx=cdx6500WACallAcceptPktsTx, cdx6500WAResetReqPktsRcv=cdx6500WAResetReqPktsRcv, cdx6500Configuration=cdx6500Configuration, cdx6500WAAvgPktSizeTx=cdx6500WAAvgPktSizeTx, cdx6500WACallAcceptPktsRcv=cdx6500WACallAcceptPktsRcv, cdx6500GCTWanAdaptorGroup=cdx6500GCTWanAdaptorGroup, cdx6500WACallReqPktsTx=cdx6500WACallReqPktsTx, cdx6500WALanForwarderType=cdx6500WALanForwarderType, cdx6500Statistics=cdx6500Statistics, DisplayString=DisplayString, cdx6500WADataPktTx=cdx6500WADataPktTx, cdx6500WAConnectionType=cdx6500WAConnectionType, cdx6500WAResetConfPktsTx=cdx6500WAResetConfPktsTx, cdx6500WACfgParallelPort=cdx6500WACfgParallelPort, cdx6500WAClearReqPktsTx=cdx6500WAClearReqPktsTx, cdx6500WACallStatEntry=cdx6500WACallStatEntry, cdx6500WAForwardersConnected=cdx6500WAForwardersConnected, cdx6500WAAutocallTimeout=cdx6500WAAutocallTimeout, cdx6500=cdx6500, cdx6500WAEntryNumber=cdx6500WAEntryNumber, cdx6500WACfgNexthopIpxNodeNumber=cdx6500WACfgNexthopIpxNodeNumber, cdx6500WALastStatResetTime=cdx6500WALastStatResetTime, cdx6500WADataPassingPriority=cdx6500WADataPassingPriority, cdx6500WACallReqPktsRcv=cdx6500WACallReqPktsRcv, cdx6500ContWANAdaptor=cdx6500ContWANAdaptor, cdx6500WALanConnEnableDisable=cdx6500WALanConnEnableDisable, cdx6500WADataPktRcv=cdx6500WADataPktRcv, cdxProductSpecific=cdxProductSpecific, cdx6500WATxPktDiscardCLrReq=cdx6500WATxPktDiscardCLrReq, cdx6500WACfgOnDemand=cdx6500WACfgOnDemand, cdx6500WATxPktDiscardTransDelay=cdx6500WATxPktDiscardTransDelay, Counter16=Counter16, cdx6500WAParallelSvcsConfigured=cdx6500WAParallelSvcsConfigured, cdx6500WACfgBroadcast=cdx6500WACfgBroadcast, cdx6500WAAvgPktSizeRcv=cdx6500WAAvgPktSizeRcv, cdx6500WAMaxTxQDepthTime=cdx6500WAMaxTxQDepthTime, cdx6500WALanConnNumberCall=cdx6500WALanConnNumberCall, Counter8=Counter8, cdx6500WAMaxTxQueueDepth=cdx6500WAMaxTxQueueDepth, codex=codex, cdx6500WAPktStatEntry=cdx6500WAPktStatEntry, cdx6500WALastClearDiagCode=cdx6500WALastClearDiagCode, cdx6500PSTLANConnectionGroup=cdx6500PSTLANConnectionGroup, cdx6500WACfgNexthopIpAddress=cdx6500WACfgNexthopIpAddress, cdx6500WALanConnBoot=cdx6500WALanConnBoot, cdx6500LCTDataSummaryStats=cdx6500LCTDataSummaryStats, cdx6500WALastClearCauseCode=cdx6500WALastClearCauseCode, cdx6500WATxPktDiscardCallEstab=cdx6500WATxPktDiscardCallEstab, cdx6500WABridgeLinkNumber=cdx6500WABridgeLinkNumber, cdx6500WACfgEncapType=cdx6500WACfgEncapType, cdx6500WAResetReqPktsTx=cdx6500WAResetReqPktsTx, cdx6500WACfgParallelThreshold=cdx6500WACfgParallelThreshold, cdx6500WALanConnNumberPkt=cdx6500WALanConnNumberPkt, cdx6500WACurTxQueueDepth=cdx6500WACurTxQueueDepth, cdx6500WACfgLanConnectionType=cdx6500WACfgLanConnectionType, cdx6500WATxPktDiscardMaxFrame=cdx6500WATxPktDiscardMaxFrame, cdx6500WARemoteAddress=cdx6500WARemoteAddress, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500LCTPacketSummaryStats=cdx6500LCTPacketSummaryStats, cdx6500WARemoteConnectionId=cdx6500WARemoteConnectionId, cdx6500WATxPktDiscardFrwdReq=cdx6500WATxPktDiscardFrwdReq, cdx6500WACfgEncapsulationType=cdx6500WACfgEncapsulationType, cdx6500WAAutocallMnemonic=cdx6500WAAutocallMnemonic, cdx6500Controls=cdx6500Controls, cdx6500WANumAutocallAttempts=cdx6500WANumAutocallAttempts, cdx6500LCTCallSummaryStats=cdx6500LCTCallSummaryStats, cdx6500WARouterInterfaceNum=cdx6500WARouterInterfaceNum, cdx6500GCMaxLCON=cdx6500GCMaxLCON, cdx6500WABytesOutstanding=cdx6500WABytesOutstanding, cdx6500WABillingRecords=cdx6500WABillingRecords, cdx6500WAControlLanConnNumber=cdx6500WAControlLanConnNumber, cdx6500GCTLANConnectionTable=cdx6500GCTLANConnectionTable, cdx6500WACfgIdleTimeout=cdx6500WACfgIdleTimeout, cdx6500WAClearConfPktsRcv=cdx6500WAClearConfPktsRcv, cdx6500WALCONQueueLimit=cdx6500WALCONQueueLimit, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup)
