#
# PySNMP MIB module SYNOPTICS-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYNOPTICS-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, MibIdentifier, ObjectIdentity, Unsigned32, Bits, IpAddress, Gauge32, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Bits", "IpAddress", "Gauge32", "Counter32", "TimeTicks")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
s3000Ethernet, S3ModuleType = mibBuilder.importSymbols("SYNOPTICS-COMMON-MIB", "s3000Ethernet", "S3ModuleType")
SnpxBackplaneType, SnpxChassisType = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "SnpxBackplaneType", "SnpxChassisType")
s3000EnetConcentrator = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1))
s3000EnetBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2))
s3000EnetLocBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2))
s3000EnetRemBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3))
s3000EnetRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 4))
s3000EnetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3))
s3000EnetNmm = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4))
s3000EnetNode = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5))
s3000EnetTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6))
s3000EnetNmmTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1))
s3000EnetBridTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2))
s3000EnetTopInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 3))
s3000EnetThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8))
s3000EnetSADATraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9))
s3000EnetPlusStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10))
s3000EnetPlusConc = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 3))
s3000EnetFrameSizeDist = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11))
s3000EnetFrameConc = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 3))
s3000EnetProtoTypeDist = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12))
s3000EnetProtoConc = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3))
s3000EnetHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13))
s3EnetConcRetimingStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetConcRetimingStatus.setStatus('mandatory')
s3EnetConcFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcFrmsRxOk.setStatus('mandatory')
s3EnetConcOctetsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcOctetsRxOk.setStatus('mandatory')
s3EnetConcMcastFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcMcastFrmsRxOk.setStatus('mandatory')
s3EnetConcBcastFrmsRxOk = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcBcastFrmsRxOk.setStatus('mandatory')
s3EnetConcColls = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcColls.setStatus('mandatory')
s3EnetConcTooLongErrors = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcTooLongErrors.setStatus('mandatory')
s3EnetConcRuntErrors = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcRuntErrors.setStatus('mandatory')
s3EnetConcFragErrors = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcFragErrors.setStatus('mandatory')
s3EnetConcAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcAlignErrors.setStatus('mandatory')
s3EnetConcFcsErrors = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcFcsErrors.setStatus('mandatory')
s3EnetConcLateCollErrors = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcLateCollErrors.setStatus('mandatory')
s3EnetConcSecureStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("concSecureOn", 2), ("portCheckOn", 3), ("slotCheckOn", 4), ("concSecureOff", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetConcSecureStatus.setStatus('mandatory')
s3EnetConcAuthAction = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noAction", 2), ("sendTrap", 3), ("partition", 4), ("sendTrapPartition", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetConcAuthAction.setStatus('mandatory')
s3EnetConcSecurityLock = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("notLocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcSecurityLock.setStatus('mandatory')
s3EnetConcEnetChan = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enetA", 2), ("enetB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcEnetChan.setStatus('mandatory')
s3EnetBoardTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: s3EnetBoardTable.setStatus('mandatory')
s3EnetBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetBoardIndex"))
if mibBuilder.loadTexts: s3EnetBoardEntry.setStatus('mandatory')
s3EnetBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardIndex.setStatus('mandatory')
s3EnetBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("empty", 1), ("other", 2), ("m3302", 3), ("m3304-ST", 4), ("m3305", 5), ("m3308", 6), ("m3313", 7), ("m3313M", 8), ("m3314-ST", 9), ("m3314M-ST", 10), ("m3323", 11), ("m3324-ST", 12), ("m3301", 16), ("m3307", 17), ("m3356", 18), ("m3383", 24), ("m3384", 25), ("m331x", 26), ("m3386", 32), ("m3394", 33), ("m3395", 34), ("m3323S", 35), ("m3324S-ST", 36), ("m3307A", 37), ("m3308A", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardType.setStatus('obsolete')
s3EnetBoardHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardHwVer.setStatus('obsolete')
s3EnetBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardStatus.setStatus('obsolete')
s3EnetBoardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetBoardReset.setStatus('obsolete')
s3EnetBoardPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("partition", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetBoardPartStatus.setStatus('obsolete')
s3EnetBoardNmCntlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notNmControl", 1), ("nmControl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardNmCntlStatus.setStatus('obsolete')
s3EnetBoardPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardPsStatus.setStatus('obsolete')
s3EnetBoardFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardFrmsRxOk.setStatus('mandatory')
s3EnetBoardOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardOctetsRxOk.setStatus('mandatory')
s3EnetBoardMcastFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardMcastFrmsRxOk.setStatus('mandatory')
s3EnetBoardBcastFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardBcastFrmsRxOk.setStatus('mandatory')
s3EnetBoardColls = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardColls.setStatus('mandatory')
s3EnetBoardTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardTooLongErrors.setStatus('mandatory')
s3EnetBoardRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardRuntErrors.setStatus('mandatory')
s3EnetBoardAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardAlignErrors.setStatus('mandatory')
s3EnetBoardFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardFcsErrors.setStatus('mandatory')
s3EnetBoardLateCollErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardLateCollErrors.setStatus('mandatory')
s3EnetBoardAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetBoardAuthStatus.setStatus('mandatory')
s3EnetBoardAuthAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noAction", 2), ("sendTrap", 3), ("partition", 4), ("sendTrapPartition", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetBoardAuthAction.setStatus('mandatory')
s3EnetBoardUpStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 1, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardUpStamp.setStatus('mandatory')
s3EnetLocBridgeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1), )
if mibBuilder.loadTexts: s3EnetLocBridgeSlotTable.setStatus('mandatory')
s3EnetLocBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetLocBridgeIndex"))
if mibBuilder.loadTexts: s3EnetLocBridgeEntry.setStatus('mandatory')
s3EnetLocBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgeIndex.setStatus('mandatory')
s3EnetLocBridgeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgeDescr.setStatus('mandatory')
s3EnetLocBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgePortCount.setStatus('mandatory')
s3EnetLocBridgeDiagSts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgeDiagSts.setStatus('mandatory')
s3EnetLocBridgeBootSts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reqstToBoot", 2), ("notReqstToBoot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgeBootSts.setStatus('mandatory')
s3EnetLocBridgeStandbySts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standby", 2), ("notStandby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgeStandbySts.setStatus('mandatory')
s3EnetLocBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2), )
if mibBuilder.loadTexts: s3EnetLocBridgePortTable.setStatus('mandatory')
s3EnetLocBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetLocBridgePortSlotIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetLocBridgePortIndex"))
if mibBuilder.loadTexts: s3EnetLocBridgePortEntry.setStatus('mandatory')
s3EnetLocBridgePortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgePortSlotIndex.setStatus('mandatory')
s3EnetLocBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgePortIndex.setStatus('mandatory')
s3EnetLocBridgePortMdaId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgePortMdaId.setStatus('mandatory')
s3EnetLocBridgePortIf = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("etherEther", 2), ("etherTokenRing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgePortIf.setStatus('mandatory')
s3EnetLocBridgePortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgePortDescr.setStatus('mandatory')
s3EnetLocBridgePortOpSts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standby", 2), ("notStandby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetLocBridgePortOpSts.setStatus('mandatory')
s3EnetRemBridgeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1), )
if mibBuilder.loadTexts: s3EnetRemBridgeSlotTable.setStatus('mandatory')
s3EnetRemBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetRemBridgeIndex"))
if mibBuilder.loadTexts: s3EnetRemBridgeEntry.setStatus('mandatory')
s3EnetRemBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgeIndex.setStatus('mandatory')
s3EnetRemBridgeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgeDescr.setStatus('mandatory')
s3EnetRemBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortCount.setStatus('mandatory')
s3EnetRemBridgeDiagSts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgeDiagSts.setStatus('mandatory')
s3EnetRemBridgeBootSts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reqstToBoot", 2), ("notReqstToBoot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgeBootSts.setStatus('mandatory')
s3EnetRemBridgeStandbySts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standby", 2), ("notStandby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgeStandbySts.setStatus('mandatory')
s3EnetRemBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2), )
if mibBuilder.loadTexts: s3EnetRemBridgePortTable.setStatus('mandatory')
s3EnetRemBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetRemBridgePortSlotIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetRemBridgePortIndex"))
if mibBuilder.loadTexts: s3EnetRemBridgePortEntry.setStatus('mandatory')
s3EnetRemBridgePortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortSlotIndex.setStatus('mandatory')
s3EnetRemBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortIndex.setStatus('mandatory')
s3EnetRemBridgePortMdaId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("x21Barrier", 3), ("x21Unbarrier", 4), ("rs232", 5), ("rs449", 6), ("v35", 7), ("g703", 8), ("t1", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortMdaId.setStatus('mandatory')
s3EnetRemBridgePortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortDescr.setStatus('mandatory')
s3EnetRemBridgePortOpSts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standby", 2), ("operational", 3), ("noLink", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortOpSts.setStatus('mandatory')
s3EnetRemBridgePortRdySnd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rdySnd", 2), ("notRdySnd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortRdySnd.setStatus('mandatory')
s3EnetRemBridgePortClrSnd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clrSnd", 2), ("notClrSnd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortClrSnd.setStatus('mandatory')
s3EnetRemBridgePortCarDt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("carDt", 2), ("noCarDt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRemBridgePortCarDt.setStatus('mandatory')
s3EnetRouterSlotTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 4, 1), )
if mibBuilder.loadTexts: s3EnetRouterSlotTable.setStatus('mandatory')
s3EnetRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 4, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetRouterIndex"))
if mibBuilder.loadTexts: s3EnetRouterEntry.setStatus('mandatory')
s3EnetRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRouterIndex.setStatus('mandatory')
s3EnetRouterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRouterDescr.setStatus('mandatory')
s3EnetRouterDiagSts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRouterDiagSts.setStatus('mandatory')
s3EnetRouterStandbySts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("standby", 2), ("notStandby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRouterStandbySts.setStatus('mandatory')
s3EnetCommonBoardTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 5), )
if mibBuilder.loadTexts: s3EnetCommonBoardTable.setStatus('mandatory')
s3EnetCommonBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 5, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetCommonBoardIndex"))
if mibBuilder.loadTexts: s3EnetCommonBoardEntry.setStatus('mandatory')
s3EnetCommonBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetCommonBoardIndex.setStatus('mandatory')
s3EnetCommonBoardEnetAB = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enetA", 2), ("enetB", 3), ("enetAandEnetB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetCommonBoardEnetAB.setStatus('mandatory')
s3EnetCommonBoardChanSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("switchCapable", 2), ("notSwitchCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetCommonBoardChanSwitch.setStatus('mandatory')
s3EnetCommonBoardRedund = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("redundCapable", 2), ("notRedundCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetCommonBoardRedund.setStatus('mandatory')
s3EnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: s3EnetPortTable.setStatus('mandatory')
s3EnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetPortBoardIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetPortIndex"))
if mibBuilder.loadTexts: s3EnetPortEntry.setStatus('mandatory')
s3EnetPortBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortBoardIndex.setStatus('mandatory')
s3EnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortIndex.setStatus('mandatory')
s3EnetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortLinkStatus.setStatus('deprecated')
s3EnetPortPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("partition", 2), ("autoPartition", 3), ("timedPartition", 4), ("latSecPartition", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetPortPartStatus.setStatus('deprecated')
s3EnetPortJabberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("jabbering", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortJabberStatus.setStatus('mandatory')
s3EnetPortFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortFrmsRxOk.setStatus('mandatory')
s3EnetPortOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortOctetsRxOk.setStatus('mandatory')
s3EnetPortMcastFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortMcastFrmsRxOk.setStatus('mandatory')
s3EnetPortBcastFrmsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortBcastFrmsRxOk.setStatus('mandatory')
s3EnetPortColls = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortColls.setStatus('mandatory')
s3EnetPortTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortTooLongErrors.setStatus('mandatory')
s3EnetPortRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortRuntErrors.setStatus('mandatory')
s3EnetPortAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortAlignErrors.setStatus('mandatory')
s3EnetPortFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortFcsErrors.setStatus('mandatory')
s3EnetPortLateCollErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortLateCollErrors.setStatus('mandatory')
s3EnetPortAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetPortAuthStatus.setStatus('mandatory')
s3EnetPortAuthAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noAction", 2), ("sendTrap", 3), ("partition", 4), ("sendTrapPartition", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetPortAuthAction.setStatus('mandatory')
s3EnetPortPartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 18), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetPortPartTime.setStatus('deprecated')
s3EnetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("tenBaseT", 2), ("tenBaseTMdi", 3), ("aui", 4), ("bnc", 5), ("foirl", 6), ("tenBaseFL", 7), ("switch", 8), ("switchMdi", 9), ("tenBaseFLRedund", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortType.setStatus('deprecated')
s3EnetPortInterconStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("interconnect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortInterconStatus.setStatus('mandatory')
s3EnetPortAddrCollect = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("neverCollect", 2), ("alwaysCollect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetPortAddrCollect.setStatus('mandatory')
s3EnetPortAddrLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noAutoLearn", 2), ("continuousLearn", 3), ("oneShotLearn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetPortAddrLearnMode.setStatus('mandatory')
s3EnetPortTxSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetPortTxSecurity.setStatus('mandatory')
s3EnetCommonPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2), )
if mibBuilder.loadTexts: s3EnetCommonPortTable.setStatus('mandatory')
s3EnetCommonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetCommonPortBoardIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetCommonPortIndex"))
if mibBuilder.loadTexts: s3EnetCommonPortEntry.setStatus('mandatory')
s3EnetCommonPortBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetCommonPortBoardIndex.setStatus('mandatory')
s3EnetCommonPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetCommonPortIndex.setStatus('mandatory')
s3EnetCommonPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetCommonPortLinkStatus.setStatus('mandatory')
s3EnetCommonPortPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("partition", 2), ("autoPartition", 3), ("timedPartition", 4), ("latSecPartition", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetCommonPortPartStatus.setStatus('mandatory')
s3EnetCommonPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("tenBaseT", 2), ("tenBaseTMdi", 3), ("aui", 4), ("bnc", 5), ("foirl", 6), ("tenBaseFL", 7), ("switch", 8), ("switchMdi", 9), ("tenBaseFLRedund", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetCommonPortType.setStatus('mandatory')
s3EnetCommonPortPartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 2, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetCommonPortPartTime.setStatus('mandatory')
s3EnetRedPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3), )
if mibBuilder.loadTexts: s3EnetRedPortTable.setStatus('mandatory')
s3EnetRedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetRedPortBoardIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetRedPortIndex"))
if mibBuilder.loadTexts: s3EnetRedPortEntry.setStatus('mandatory')
s3EnetRedPortBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRedPortBoardIndex.setStatus('mandatory')
s3EnetRedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRedPortIndex.setStatus('mandatory')
s3EnetRedPortRedundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standAlone", 1), ("hwActive", 2), ("hwStandby", 3), ("swActive", 4), ("swStandby", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetRedPortRedundMode.setStatus('mandatory')
s3EnetRedPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("localFault", 3), ("remoteFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRedPortOperStatus.setStatus('mandatory')
s3EnetRedPortRemoteOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("snpxFLRemFltCpblPortUp", 1), ("snpxFLFBRemFltCpblPortUp", 2), ("tenBaseFLPortUp", 3), ("tenBaseFBPortUp", 4), ("snpxRemFltCpblPortFault", 5), ("tenBaseFBPortFault", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRedPortRemoteOperStatus.setStatus('mandatory')
s3EnetRedPortCompanionSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetRedPortCompanionSlotNo.setStatus('mandatory')
s3EnetRedPortCompanionPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetRedPortCompanionPortNo.setStatus('mandatory')
s3EnetRedPortSwitchoverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("timedSwitchover", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetRedPortSwitchoverStatus.setStatus('mandatory')
s3EnetRedPortSwitchoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetRedPortSwitchoverTime.setStatus('mandatory')
s3EnetRedPortCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hwRedOnly", 1), ("swRedOnly", 2), ("notRedunCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRedPortCapability.setStatus('mandatory')
s3EnetRedPortLastChg = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 3, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetRedPortLastChg.setStatus('mandatory')
s3EnetNmmType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("m3313", 2), ("m3313M", 3), ("m3314-ST", 4), ("m3314M-ST", 5), ("m3138", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetNmmType.setStatus('obsolete')
s3EnetNmmMdaHwVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetNmmMdaHwVer.setStatus('obsolete')
s3EnetNmmFwVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetNmmFwVer.setStatus('obsolete')
s3EnetNmmSwMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetNmmSwMajorVer.setStatus('obsolete')
s3EnetNmmSwMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetNmmSwMinorVer.setStatus('obsolete')
s3EnetNmmStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetNmmStatus.setStatus('obsolete')
s3EnetNmmMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmMode.setStatus('obsolete')
s3EnetNmmReset = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notreset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmReset.setStatus('obsolete')
s3EnetNmmRestart = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notrestart", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmRestart.setStatus('obsolete')
s3EnetNmmIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmIpAddr.setStatus('obsolete')
s3EnetNmmNetMask = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmNetMask.setStatus('obsolete')
s3EnetNmmDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmDefaultGateway.setStatus('obsolete')
s3EnetNmmFileServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmFileServerAddr.setStatus('obsolete')
s3EnetNmmBootFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmBootFile.setStatus('obsolete')
s3EnetNmmBootMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eeprom", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmBootMode.setStatus('obsolete')
s3EnetNmmWriteEeprom = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notWriteEeprom", 1), ("writeEeprom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmWriteEeprom.setStatus('obsolete')
s3EnetNmmBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetNmmBaudRate.setStatus('obsolete')
s3EnetNmmInitString = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmInitString.setStatus('obsolete')
s3EnetNmmLocation = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmLocation.setStatus('obsolete')
s3EnetNmmTrapServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 20), )
if mibBuilder.loadTexts: s3EnetNmmTrapServerTable.setStatus('obsolete')
s3EnetNmmTrapServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 20, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetNmmTrapServerAddress"))
if mibBuilder.loadTexts: s3EnetNmmTrapServerEntry.setStatus('obsolete')
s3EnetNmmTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmTrapType.setStatus('obsolete')
s3EnetNmmTrapServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 20, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmTrapServerAddress.setStatus('obsolete')
s3EnetNmmTrapServerComm = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmTrapServerComm.setStatus('obsolete')
s3EnetNmmAuthTrap = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNmmAuthTrap.setStatus('obsolete')
s3EnetShowNodesTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1), )
if mibBuilder.loadTexts: s3EnetShowNodesTable.setStatus('mandatory')
s3EnetShowNodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetShowNodesSlotIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetShowNodesPortIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetShowNodesMacAddress"))
if mibBuilder.loadTexts: s3EnetShowNodesEntry.setStatus('mandatory')
s3EnetShowNodesSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetShowNodesSlotIndex.setStatus('mandatory')
s3EnetShowNodesPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetShowNodesPortIndex.setStatus('mandatory')
s3EnetShowNodesMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetShowNodesMacAddress.setStatus('mandatory')
s3EnetShowNodesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetShowNodesStatus.setStatus('mandatory')
s3EnetShowNodesVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("threeCom", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetShowNodesVendorType.setStatus('deprecated')
s3EnetShowNodesAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("network", 2), ("nmm", 3), ("authorized", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetShowNodesAuthStatus.setStatus('mandatory')
s3EnetNodeAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetNodeAgeInterval.setStatus('mandatory')
s3EnetFindNodesTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 3), )
if mibBuilder.loadTexts: s3EnetFindNodesTable.setStatus('mandatory')
s3EnetFindNodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 3, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetFindNodesMacAddress"))
if mibBuilder.loadTexts: s3EnetFindNodesEntry.setStatus('mandatory')
s3EnetFindNodesMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 3, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFindNodesMacAddress.setStatus('mandatory')
s3EnetFindNodesSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFindNodesSlotIndex.setStatus('mandatory')
s3EnetFindNodesPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFindNodesPortIndex.setStatus('mandatory')
s3EnetAuthNodesTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 4), )
if mibBuilder.loadTexts: s3EnetAuthNodesTable.setStatus('mandatory')
s3EnetAuthNodesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 4, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetAuthNodesMacAddr"))
if mibBuilder.loadTexts: s3EnetAuthNodesEntry.setStatus('mandatory')
s3EnetAuthNodesMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 4, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetAuthNodesMacAddr.setStatus('mandatory')
s3EnetAuthNodesSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetAuthNodesSlotIndex.setStatus('mandatory')
s3EnetAuthNodesPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetAuthNodesPortIndex.setStatus('mandatory')
s3EnetAuthNodesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetAuthNodesStatus.setStatus('mandatory')
s3EnetMaxNodesPerPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetMaxNodesPerPort.setStatus('mandatory')
s3EnetTopNmmTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1), )
if mibBuilder.loadTexts: s3EnetTopNmmTable.setStatus('mandatory')
s3EnetTopNmmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopNmmSlot"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopNmmPort"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopNmmIpAddr"))
if mibBuilder.loadTexts: s3EnetTopNmmEntry.setStatus('mandatory')
s3EnetTopNmmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmSlot.setStatus('mandatory')
s3EnetTopNmmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmPort.setStatus('mandatory')
s3EnetTopNmmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmIpAddr.setStatus('mandatory')
s3EnetTopNmmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 4), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmMacAddr.setStatus('mandatory')
s3EnetTopNmmChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 5), SnpxChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmChassisType.setStatus('mandatory')
s3EnetTopNmmBkplType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 6), SnpxBackplaneType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmBkplType.setStatus('mandatory')
s3EnetTopNmmLocalSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmLocalSeg.setStatus('mandatory')
s3EnetTopNmmNumSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmNumSeen.setStatus('mandatory')
s3EnetTopNmmModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 9), S3ModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmModuleType.setStatus('mandatory')
s3EnetTopNmmNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmNumLinks.setStatus('mandatory')
s3EnetTopNmmChgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changed", 1), ("noChange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmChgStatus.setStatus('mandatory')
s3EnetTopNmmHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmHelloTime.setStatus('mandatory')
s3EnetTopNmmSubsetTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 3), )
if mibBuilder.loadTexts: s3EnetTopNmmSubsetTable.setStatus('mandatory')
s3EnetTopNmmSubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 3, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopNmmSlot"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopNmmPort"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopNmmIpAddr"))
if mibBuilder.loadTexts: s3EnetTopNmmSubsetEntry.setStatus('mandatory')
s3EnetTopNmmSubset = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmSubset.setStatus('mandatory')
s3EnetTopBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1), )
if mibBuilder.loadTexts: s3EnetTopBridgeTable.setStatus('mandatory')
s3EnetTopBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopBridgeIpAddr"))
if mibBuilder.loadTexts: s3EnetTopBridgeEntry.setStatus('mandatory')
s3EnetTopBridgeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeIpAddr.setStatus('mandatory')
s3EnetTopBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeNumber.setStatus('mandatory')
s3EnetTopBridgeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeMacAddr.setStatus('mandatory')
s3EnetTopBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("localSyn2Port", 2), ("remoteSyn3Port", 3), ("etherSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeType.setStatus('mandatory')
s3EnetTopBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeStatus.setStatus('mandatory')
s3EnetTopBridgeSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeSlotNum.setStatus('mandatory')
s3EnetTopBridgePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgePortNum.setStatus('mandatory')
s3EnetTopBridgeModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 8), S3ModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeModuleType.setStatus('mandatory')
s3EnetTopBridgeHelloPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeHelloPortNum.setStatus('mandatory')
s3EnetTopBridgeHelloPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ether", 2), ("tokenRing4", 3), ("tokenRing16", 4), ("fddi", 5), ("t1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeHelloPortType.setStatus('mandatory')
s3EnetTopBridgeHelloPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeHelloPortStatus.setStatus('mandatory')
s3EnetTopBridgeCompBridgeMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 12), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeCompBridgeMac1.setStatus('mandatory')
s3EnetTopBridgeCompBridgeMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 1, 1, 13), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeCompBridgeMac2.setStatus('mandatory')
s3EnetTopBdgSubsetTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 2), )
if mibBuilder.loadTexts: s3EnetTopBdgSubsetTable.setStatus('mandatory')
s3EnetTopBdgSubsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTopBridgeIpAddr"))
if mibBuilder.loadTexts: s3EnetTopBdgSubsetEntry.setStatus('mandatory')
s3EnetTopBdgSubset = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBdgSubset.setStatus('mandatory')
s3EnetTopNmmLstChg = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopNmmLstChg.setStatus('mandatory')
s3EnetTopBridgeLstChg = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 6, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTopBridgeLstChg.setStatus('mandatory')
s3EnetThreshTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1), )
if mibBuilder.loadTexts: s3EnetThreshTable.setStatus('mandatory')
s3EnetThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetThreshIndex"))
if mibBuilder.loadTexts: s3EnetThreshEntry.setStatus('mandatory')
s3EnetThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetThreshIndex.setStatus('mandatory')
s3EnetThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("addActive", 1), ("delDead", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshStatus.setStatus('mandatory')
s3EnetThreshObject = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("concentrator", 2), ("slot", 3), ("port", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshObject.setStatus('mandatory')
s3EnetThreshSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshSlot.setStatus('mandatory')
s3EnetThreshPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshPort.setStatus('mandatory')
s3EnetThreshType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("other", 1), ("goodBytes", 2), ("goodPkts", 3), ("badPkts", 4), ("crcPkts", 5), ("misaligned", 6), ("runtPkts", 7), ("fragPkts", 8), ("tooLong", 9), ("collision", 10), ("lateColls", 11), ("linkStatus", 12), ("multicast", 13), ("broadcast", 14), ("shortEvents", 15), ("srcAddrChanges", 16), ("dataRateMismatches", 17), ("networkErrors", 18), ("badToGoodPktRatio", 19), ("netErrToGoodPktRatio", 20), ("colltoGoodPktRatio", 21), ("collBackOffErr", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshType.setStatus('mandatory')
s3EnetThreshCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("crossValue", 2), ("overValue", 3), ("overRate", 4), ("linkOn", 5), ("linkOff", 6), ("overRatio", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshCondition.setStatus('mandatory')
s3EnetThreshSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshSetValue.setStatus('mandatory')
s3EnetThreshActualValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetThreshActualValue.setStatus('mandatory')
s3EnetThreshAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("noAction", 2), ("sendTrap", 3), ("res4", 4), ("res5", 5), ("partSlot", 6), ("partSlotPort", 7), ("res8", 8), ("res9", 9), ("trapPartSlot", 10), ("trapPartSlotPort", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshAction.setStatus('mandatory')
s3EnetThreshExceedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetThreshExceedCount.setStatus('mandatory')
s3EnetThreshDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 1, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetThreshDuration.setStatus('mandatory')
s3EnetThreshTableSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetThreshTableSize.setStatus('mandatory')
s3EnetSdTrafTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 1), )
if mibBuilder.loadTexts: s3EnetSdTrafTable.setStatus('deprecated')
s3EnetSdTrafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetSdTrafMacSA"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetSdTrafMacDA"))
if mibBuilder.loadTexts: s3EnetSdTrafEntry.setStatus('deprecated')
s3EnetSdTrafMacSA = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 1, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetSdTrafMacSA.setStatus('deprecated')
s3EnetSdTrafMacDA = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 1, 1, 2), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetSdTrafMacDA.setStatus('deprecated')
s3EnetSdTrafFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetSdTrafFrames.setStatus('deprecated')
s3EnetSdTrafBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetSdTrafBytes.setStatus('deprecated')
s3EnetDsTrafTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 2), )
if mibBuilder.loadTexts: s3EnetDsTrafTable.setStatus('deprecated')
s3EnetDsTrafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetDsTrafMacDA"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetDsTrafMacSA"))
if mibBuilder.loadTexts: s3EnetDsTrafEntry.setStatus('deprecated')
s3EnetDsTrafMacDA = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 2, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetDsTrafMacDA.setStatus('deprecated')
s3EnetDsTrafMacSA = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 2, 1, 2), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetDsTrafMacSA.setStatus('deprecated')
s3EnetDsTrafFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetDsTrafFrames.setStatus('deprecated')
s3EnetDsTrafBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetDsTrafBytes.setStatus('deprecated')
s3EnetPagedTrafTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 3), )
if mibBuilder.loadTexts: s3EnetPagedTrafTable.setStatus('deprecated')
s3EnetPagedTrafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 3, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetTrafPageNo"))
if mibBuilder.loadTexts: s3EnetPagedTrafEntry.setStatus('deprecated')
s3EnetTrafPageNo = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTrafPageNo.setStatus('deprecated')
s3EnetTrafPageEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetTrafPageEntries.setStatus('deprecated')
s3EnetTrafAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 9, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3EnetTrafAgeInterval.setStatus('deprecated')
s3EnetPlusPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1), )
if mibBuilder.loadTexts: s3EnetPlusPortTable.setStatus('mandatory')
s3EnetPlusPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetPlusPortBoardIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetPlusPortIndex"))
if mibBuilder.loadTexts: s3EnetPlusPortEntry.setStatus('mandatory')
s3EnetPlusPortBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPlusPortBoardIndex.setStatus('mandatory')
s3EnetPlusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPlusPortIndex.setStatus('mandatory')
s3EnetPortFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortFragments.setStatus('mandatory')
s3EnetPortShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortShortEvents.setStatus('mandatory')
s3EnetPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortAutoPartitions.setStatus('mandatory')
s3EnetPortRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortRateMismatches.setStatus('mandatory')
s3EnetPortJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortJabbers.setStatus('mandatory')
s3EnetPortLastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 8), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortLastSrcAddr.setStatus('mandatory')
s3EnetPortSrcAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPortSrcAddrChanges.setStatus('mandatory')
s3EnetPlusBoardTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2), )
if mibBuilder.loadTexts: s3EnetPlusBoardTable.setStatus('mandatory')
s3EnetPlusBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetPlusBoardIndex"))
if mibBuilder.loadTexts: s3EnetPlusBoardEntry.setStatus('mandatory')
s3EnetPlusBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetPlusBoardIndex.setStatus('mandatory')
s3EnetBoardFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardFragments.setStatus('mandatory')
s3EnetBoardShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardShortEvents.setStatus('mandatory')
s3EnetBoardAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardAutoPartitions.setStatus('mandatory')
s3EnetBoardRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardRateMismatches.setStatus('mandatory')
s3EnetBoardJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetBoardJabbers.setStatus('mandatory')
s3EnetConcShortEvents = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcShortEvents.setStatus('mandatory')
s3EnetConcAutoPartitions = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcAutoPartitions.setStatus('mandatory')
s3EnetConcRateMismatches = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcRateMismatches.setStatus('mandatory')
s3EnetConcJabbers = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcJabbers.setStatus('mandatory')
s3EnetConcCollBackoffErrors = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 10, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetConcCollBackoffErrors.setStatus('mandatory')
s3EnetFrSizePortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1), )
if mibBuilder.loadTexts: s3EnetFrSizePortTable.setStatus('mandatory')
s3EnetFrSizePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetFrSizePortBoardIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetFrSizePortIndex"))
if mibBuilder.loadTexts: s3EnetFrSizePortEntry.setStatus('mandatory')
s3EnetFrSizePortBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizePortBoardIndex.setStatus('mandatory')
s3EnetFrSizePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizePortIndex.setStatus('mandatory')
s3EnetFrSizePort64to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizePort64to127.setStatus('mandatory')
s3EnetFrSizePort128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizePort128to255.setStatus('mandatory')
s3EnetFrSizePort256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizePort256to511.setStatus('mandatory')
s3EnetFrSizePort512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizePort512to1023.setStatus('mandatory')
s3EnetFrSizePort1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizePort1024to1518.setStatus('mandatory')
s3EnetFrSizeBoardTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2), )
if mibBuilder.loadTexts: s3EnetFrSizeBoardTable.setStatus('mandatory')
s3EnetFrSizeBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetFrSizeBoardIndex"))
if mibBuilder.loadTexts: s3EnetFrSizeBoardEntry.setStatus('mandatory')
s3EnetFrSizeBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeBoardIndex.setStatus('mandatory')
s3EnetFrSizeBoard64to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeBoard64to127.setStatus('mandatory')
s3EnetFrSizeBoard128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeBoard128to255.setStatus('mandatory')
s3EnetFrSizeBoard256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeBoard256to511.setStatus('mandatory')
s3EnetFrSizeBoard512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeBoard512to1023.setStatus('mandatory')
s3EnetFrSizeBoard1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeBoard1024to1518.setStatus('mandatory')
s3EnetFrSizeConc64to127 = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeConc64to127.setStatus('mandatory')
s3EnetFrSizeConc128to255 = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeConc128to255.setStatus('mandatory')
s3EnetFrSizeConc256to511 = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeConc256to511.setStatus('mandatory')
s3EnetFrSizeConc512to1023 = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeConc512to1023.setStatus('mandatory')
s3EnetFrSizeConc1024to1518 = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 11, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetFrSizeConc1024to1518.setStatus('mandatory')
s3EnetProtoPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1), )
if mibBuilder.loadTexts: s3EnetProtoPortTable.setStatus('mandatory')
s3EnetProtoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetProtoPortBoardIndex"), (0, "SYNOPTICS-ETHERNET-MIB", "s3EnetProtoPortIndex"))
if mibBuilder.loadTexts: s3EnetProtoPortEntry.setStatus('mandatory')
s3EnetProtoPortBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortBoardIndex.setStatus('mandatory')
s3EnetProtoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortIndex.setStatus('mandatory')
s3EnetProtoPort8023Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPort8023Frames.setStatus('mandatory')
s3EnetProtoPortEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortEthernetFrames.setStatus('mandatory')
s3EnetProtoPortOtherFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortOtherFrames.setStatus('mandatory')
s3EnetProtoPortSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortSnaFrames.setStatus('mandatory')
s3EnetProtoPortIpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortIpFrames.setStatus('mandatory')
s3EnetProtoPortIsoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortIsoFrames.setStatus('mandatory')
s3EnetProtoPortArpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortArpFrames.setStatus('mandatory')
s3EnetProtoPortDecIVFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortDecIVFrames.setStatus('mandatory')
s3EnetProtoPortDecLatFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortDecLatFrames.setStatus('mandatory')
s3EnetProtoPortEthTalkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortEthTalkFrames.setStatus('mandatory')
s3EnetProtoPortXnsFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortXnsFrames.setStatus('mandatory')
s3EnetProtoPortIpxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortIpxFrames.setStatus('mandatory')
s3EnetProtoPortDecLavcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortDecLavcFrames.setStatus('mandatory')
s3EnetProtoPortNetBiosFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortNetBiosFrames.setStatus('mandatory')
s3EnetProtoPortBrdgSpanTreeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoPortBrdgSpanTreeFrames.setStatus('mandatory')
s3EnetProtoBoardTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2), )
if mibBuilder.loadTexts: s3EnetProtoBoardTable.setStatus('mandatory')
s3EnetProtoBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetProtoBoardIndex"))
if mibBuilder.loadTexts: s3EnetProtoBoardEntry.setStatus('mandatory')
s3EnetProtoBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardIndex.setStatus('mandatory')
s3EnetProtoBoard8023Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoard8023Frames.setStatus('mandatory')
s3EnetProtoBoardEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardEthernetFrames.setStatus('mandatory')
s3EnetProtoBoardOtherFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardOtherFrames.setStatus('mandatory')
s3EnetProtoBoardSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardSnaFrames.setStatus('mandatory')
s3EnetProtoBoardIpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardIpFrames.setStatus('mandatory')
s3EnetProtoBoardIsoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardIsoFrames.setStatus('mandatory')
s3EnetProtoBoardArpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardArpFrames.setStatus('mandatory')
s3EnetProtoBoardDecIVFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardDecIVFrames.setStatus('mandatory')
s3EnetProtoBoardDecLatFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardDecLatFrames.setStatus('mandatory')
s3EnetProtoBoardEthTalkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardEthTalkFrames.setStatus('mandatory')
s3EnetProtoBoardXnsFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardXnsFrames.setStatus('mandatory')
s3EnetProtoBoardIpxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardIpxFrames.setStatus('mandatory')
s3EnetProtoBoardDecLavcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardDecLavcFrames.setStatus('mandatory')
s3EnetProtoBoardNetBiosFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardNetBiosFrames.setStatus('mandatory')
s3EnetProtoBoardBrdgSpanTreeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoBoardBrdgSpanTreeFrames.setStatus('mandatory')
s3EnetProtoConc8023Frames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConc8023Frames.setStatus('mandatory')
s3EnetProtoConcEthernetFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcEthernetFrames.setStatus('mandatory')
s3EnetProtoConcOtherFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcOtherFrames.setStatus('mandatory')
s3EnetProtoConcSnaFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcSnaFrames.setStatus('mandatory')
s3EnetProtoConcIpFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcIpFrames.setStatus('mandatory')
s3EnetProtoConcIsoFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcIsoFrames.setStatus('mandatory')
s3EnetProtoConcArpFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcArpFrames.setStatus('mandatory')
s3EnetProtoConcDecIVFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcDecIVFrames.setStatus('mandatory')
s3EnetProtoConcDecLatFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcDecLatFrames.setStatus('mandatory')
s3EnetProtoConcEthTalkFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcEthTalkFrames.setStatus('mandatory')
s3EnetProtoConcXnsFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcXnsFrames.setStatus('mandatory')
s3EnetProtoConcIpxFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcIpxFrames.setStatus('mandatory')
s3EnetProtoConcDecLavcFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcDecLavcFrames.setStatus('mandatory')
s3EnetProtoConcNetBiosFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcNetBiosFrames.setStatus('mandatory')
s3EnetProtoConcBrdgSpanTreeFrames = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 12, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetProtoConcBrdgSpanTreeFrames.setStatus('mandatory')
s3EnetHostTableSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostTableSize.setStatus('mandatory')
s3EnetHostLastDeleteTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostLastDeleteTime.setStatus('mandatory')
s3EnetHostTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3), )
if mibBuilder.loadTexts: s3EnetHostTable.setStatus('mandatory')
s3EnetHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1), ).setIndexNames((0, "SYNOPTICS-ETHERNET-MIB", "s3EnetHostIndex"))
if mibBuilder.loadTexts: s3EnetHostEntry.setStatus('mandatory')
s3EnetHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostIndex.setStatus('mandatory')
s3EnetHostObserveOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostObserveOrder.setStatus('mandatory')
s3EnetHostNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostNetAddr.setStatus('mandatory')
s3EnetHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostAddrType.setStatus('mandatory')
s3EnetHostMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 5), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostMacAddress.setStatus('mandatory')
s3EnetHostSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostSlotIndex.setStatus('mandatory')
s3EnetHostPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostPortIndex.setStatus('mandatory')
s3EnetHostLearnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("arpRequest", 2), ("arpResponse", 3), ("ripRequest", 4), ("ripResponse", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostLearnMethod.setStatus('mandatory')
s3EnetHostTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 2, 13, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3EnetHostTimeStamp.setStatus('mandatory')
mibBuilder.exportSymbols("SYNOPTICS-ETHERNET-MIB", s3EnetTopNmmNumSeen=s3EnetTopNmmNumSeen, s3EnetTopBridgeCompBridgeMac1=s3EnetTopBridgeCompBridgeMac1, s3EnetProtoConcNetBiosFrames=s3EnetProtoConcNetBiosFrames, s3EnetRouterStandbySts=s3EnetRouterStandbySts, s3EnetNmmIpAddr=s3EnetNmmIpAddr, s3EnetProtoBoardIpxFrames=s3EnetProtoBoardIpxFrames, s3EnetRouterSlotTable=s3EnetRouterSlotTable, s3EnetRemBridgePortClrSnd=s3EnetRemBridgePortClrSnd, s3EnetCommonPortTable=s3EnetCommonPortTable, s3EnetDsTrafEntry=s3EnetDsTrafEntry, s3EnetProtoBoardTable=s3EnetProtoBoardTable, s3EnetProtoConcArpFrames=s3EnetProtoConcArpFrames, s3EnetFrSizeBoard1024to1518=s3EnetFrSizeBoard1024to1518, s3EnetTrafPageNo=s3EnetTrafPageNo, s3EnetBoardTable=s3EnetBoardTable, s3EnetProtoConcOtherFrames=s3EnetProtoConcOtherFrames, s3EnetRemBridgePortIndex=s3EnetRemBridgePortIndex, s3EnetPlusPortBoardIndex=s3EnetPlusPortBoardIndex, s3EnetRouterDescr=s3EnetRouterDescr, s3EnetAuthNodesEntry=s3EnetAuthNodesEntry, s3EnetRemBridgeStandbySts=s3EnetRemBridgeStandbySts, s3EnetConcRetimingStatus=s3EnetConcRetimingStatus, s3EnetPortAutoPartitions=s3EnetPortAutoPartitions, s3EnetTopBridgeTable=s3EnetTopBridgeTable, s3EnetRemBridgeDiagSts=s3EnetRemBridgeDiagSts, s3EnetConcEnetChan=s3EnetConcEnetChan, s3EnetRedPortSwitchoverStatus=s3EnetRedPortSwitchoverStatus, s3EnetTopBridgeNumber=s3EnetTopBridgeNumber, s3000EnetNmm=s3000EnetNmm, s3EnetCommonBoardEnetAB=s3EnetCommonBoardEnetAB, s3EnetRemBridgePortSlotIndex=s3EnetRemBridgePortSlotIndex, s3EnetBoardAlignErrors=s3EnetBoardAlignErrors, s3EnetTopBridgeType=s3EnetTopBridgeType, s3EnetTopNmmTable=s3EnetTopNmmTable, s3EnetPagedTrafTable=s3EnetPagedTrafTable, s3EnetPortPartStatus=s3EnetPortPartStatus, s3EnetSdTrafBytes=s3EnetSdTrafBytes, s3EnetRedPortIndex=s3EnetRedPortIndex, s3EnetPlusPortTable=s3EnetPlusPortTable, s3EnetTopBridgeHelloPortStatus=s3EnetTopBridgeHelloPortStatus, s3EnetBoardNmCntlStatus=s3EnetBoardNmCntlStatus, s3EnetLocBridgePortMdaId=s3EnetLocBridgePortMdaId, s3EnetFindNodesEntry=s3EnetFindNodesEntry, s3EnetTopBridgeEntry=s3EnetTopBridgeEntry, s3EnetRemBridgeEntry=s3EnetRemBridgeEntry, s3EnetTopNmmEntry=s3EnetTopNmmEntry, s3EnetProtoBoardOtherFrames=s3EnetProtoBoardOtherFrames, s3EnetConcRateMismatches=s3EnetConcRateMismatches, s3EnetTopBridgeMacAddr=s3EnetTopBridgeMacAddr, s3EnetTopNmmBkplType=s3EnetTopNmmBkplType, s3EnetShowNodesMacAddress=s3EnetShowNodesMacAddress, s3EnetRemBridgeIndex=s3EnetRemBridgeIndex, s3EnetFrSizePortEntry=s3EnetFrSizePortEntry, s3EnetAuthNodesStatus=s3EnetAuthNodesStatus, s3EnetCommonPortBoardIndex=s3EnetCommonPortBoardIndex, s3EnetCommonPortLinkStatus=s3EnetCommonPortLinkStatus, s3EnetProtoPortIsoFrames=s3EnetProtoPortIsoFrames, s3EnetCommonBoardRedund=s3EnetCommonBoardRedund, s3EnetPortRateMismatches=s3EnetPortRateMismatches, s3EnetProtoPortIndex=s3EnetProtoPortIndex, s3EnetHostTableSize=s3EnetHostTableSize, s3EnetAuthNodesPortIndex=s3EnetAuthNodesPortIndex, s3EnetPlusBoardIndex=s3EnetPlusBoardIndex, s3EnetNmmInitString=s3EnetNmmInitString, s3EnetRedPortTable=s3EnetRedPortTable, s3000EnetNode=s3000EnetNode, s3EnetRedPortSwitchoverTime=s3EnetRedPortSwitchoverTime, s3EnetConcColls=s3EnetConcColls, s3EnetNmmBootFile=s3EnetNmmBootFile, s3EnetBoardEntry=s3EnetBoardEntry, s3EnetAuthNodesTable=s3EnetAuthNodesTable, s3EnetNmmFileServerAddr=s3EnetNmmFileServerAddr, s3EnetProtoPortXnsFrames=s3EnetProtoPortXnsFrames, s3EnetBoardUpStamp=s3EnetBoardUpStamp, s3EnetRemBridgePortMdaId=s3EnetRemBridgePortMdaId, s3EnetNmmFwVer=s3EnetNmmFwVer, s3EnetBoardAutoPartitions=s3EnetBoardAutoPartitions, s3EnetCommonPortEntry=s3EnetCommonPortEntry, s3EnetBoardPartStatus=s3EnetBoardPartStatus, s3EnetFrSizeConc512to1023=s3EnetFrSizeConc512to1023, s3EnetHostMacAddress=s3EnetHostMacAddress, s3EnetNmmDefaultGateway=s3EnetNmmDefaultGateway, s3EnetThreshDuration=s3EnetThreshDuration, s3EnetLocBridgeIndex=s3EnetLocBridgeIndex, s3EnetSdTrafFrames=s3EnetSdTrafFrames, s3EnetRemBridgeSlotTable=s3EnetRemBridgeSlotTable, s3EnetThreshAction=s3EnetThreshAction, s3EnetThreshStatus=s3EnetThreshStatus, s3EnetFrSizePortTable=s3EnetFrSizePortTable, s3EnetThreshPort=s3EnetThreshPort, s3EnetHostIndex=s3EnetHostIndex, s3EnetFrSizeBoard128to255=s3EnetFrSizeBoard128to255, s3EnetFindNodesMacAddress=s3EnetFindNodesMacAddress, s3EnetRedPortBoardIndex=s3EnetRedPortBoardIndex, s3EnetFrSizeConc256to511=s3EnetFrSizeConc256to511, s3EnetProtoBoardArpFrames=s3EnetProtoBoardArpFrames, s3EnetProtoBoardNetBiosFrames=s3EnetProtoBoardNetBiosFrames, s3EnetLocBridgePortSlotIndex=s3EnetLocBridgePortSlotIndex, s3EnetTopBdgSubset=s3EnetTopBdgSubset, s3EnetFrSizePort1024to1518=s3EnetFrSizePort1024to1518, s3EnetPortMcastFrmsRxOk=s3EnetPortMcastFrmsRxOk, s3EnetMaxNodesPerPort=s3EnetMaxNodesPerPort, s3EnetConcMcastFrmsRxOk=s3EnetConcMcastFrmsRxOk, s3EnetLocBridgePortTable=s3EnetLocBridgePortTable, s3EnetProtoBoardIsoFrames=s3EnetProtoBoardIsoFrames, s3EnetBoardType=s3EnetBoardType, s3EnetProtoBoardDecLatFrames=s3EnetProtoBoardDecLatFrames, s3000EnetFrameConc=s3000EnetFrameConc, s3EnetConcFcsErrors=s3EnetConcFcsErrors, s3EnetPlusPortIndex=s3EnetPlusPortIndex, s3EnetPortFcsErrors=s3EnetPortFcsErrors, s3EnetProtoConc8023Frames=s3EnetProtoConc8023Frames, s3EnetBoardColls=s3EnetBoardColls, s3EnetTopNmmNumLinks=s3EnetTopNmmNumLinks, s3EnetDsTrafBytes=s3EnetDsTrafBytes, s3000EnetLocBridge=s3000EnetLocBridge, s3EnetNmmMode=s3EnetNmmMode, s3EnetProtoConcSnaFrames=s3EnetProtoConcSnaFrames, s3EnetPortInterconStatus=s3EnetPortInterconStatus, s3000EnetThreshold=s3000EnetThreshold, s3EnetTopNmmHelloTime=s3EnetTopNmmHelloTime, s3EnetConcTooLongErrors=s3EnetConcTooLongErrors, s3EnetFindNodesSlotIndex=s3EnetFindNodesSlotIndex, s3EnetPortFragments=s3EnetPortFragments, s3EnetPortColls=s3EnetPortColls, s3EnetRemBridgeBootSts=s3EnetRemBridgeBootSts, s3EnetLocBridgeDiagSts=s3EnetLocBridgeDiagSts, s3EnetTopNmmLocalSeg=s3EnetTopNmmLocalSeg, s3EnetLocBridgeStandbySts=s3EnetLocBridgeStandbySts, s3EnetFrSizePort256to511=s3EnetFrSizePort256to511, s3EnetPortEntry=s3EnetPortEntry, s3EnetConcOctetsRxOk=s3EnetConcOctetsRxOk, s3EnetNmmStatus=s3EnetNmmStatus, s3EnetNmmTrapServerTable=s3EnetNmmTrapServerTable, s3EnetLocBridgePortOpSts=s3EnetLocBridgePortOpSts, s3EnetProtoPortDecIVFrames=s3EnetProtoPortDecIVFrames, s3EnetTopBridgeIpAddr=s3EnetTopBridgeIpAddr, s3EnetConcRuntErrors=s3EnetConcRuntErrors, s3000EnetHosts=s3000EnetHosts, s3EnetProtoPortIpxFrames=s3EnetProtoPortIpxFrames, s3EnetFrSizeBoard512to1023=s3EnetFrSizeBoard512to1023, s3EnetBoardFrmsRxOk=s3EnetBoardFrmsRxOk, s3EnetBoardTooLongErrors=s3EnetBoardTooLongErrors, s3EnetShowNodesSlotIndex=s3EnetShowNodesSlotIndex, s3EnetProtoBoardEthTalkFrames=s3EnetProtoBoardEthTalkFrames, s3EnetSdTrafMacDA=s3EnetSdTrafMacDA, s3EnetBoardLateCollErrors=s3EnetBoardLateCollErrors, s3EnetBoardRuntErrors=s3EnetBoardRuntErrors, s3EnetTopBridgeHelloPortNum=s3EnetTopBridgeHelloPortNum, s3EnetCommonPortPartStatus=s3EnetCommonPortPartStatus, s3EnetLocBridgePortIndex=s3EnetLocBridgePortIndex, s3EnetRedPortRemoteOperStatus=s3EnetRedPortRemoteOperStatus, s3EnetTopNmmMacAddr=s3EnetTopNmmMacAddr, s3EnetRedPortLastChg=s3EnetRedPortLastChg, s3EnetCommonPortIndex=s3EnetCommonPortIndex, s3EnetTopNmmSubsetTable=s3EnetTopNmmSubsetTable, s3000EnetRemBridge=s3000EnetRemBridge, s3EnetBoardOctetsRxOk=s3EnetBoardOctetsRxOk, s3EnetLocBridgeBootSts=s3EnetLocBridgeBootSts, s3000EnetProtoConc=s3000EnetProtoConc, s3EnetNmmTrapType=s3EnetNmmTrapType, s3EnetRemBridgePortTable=s3EnetRemBridgePortTable, s3EnetNmmTrapServerEntry=s3EnetNmmTrapServerEntry, s3EnetFrSizeConc128to255=s3EnetFrSizeConc128to255, s3EnetPortLinkStatus=s3EnetPortLinkStatus, s3EnetCommonBoardTable=s3EnetCommonBoardTable, s3EnetConcShortEvents=s3EnetConcShortEvents, s3EnetRemBridgePortCarDt=s3EnetRemBridgePortCarDt, s3EnetFrSizePortBoardIndex=s3EnetFrSizePortBoardIndex, s3EnetBoardFragments=s3EnetBoardFragments, s3EnetTopBridgePortNum=s3EnetTopBridgePortNum, s3EnetProtoPort8023Frames=s3EnetProtoPort8023Frames, s3EnetConcLateCollErrors=s3EnetConcLateCollErrors, s3EnetFrSizePortIndex=s3EnetFrSizePortIndex, s3EnetProtoPortIpFrames=s3EnetProtoPortIpFrames, s3EnetNmmLocation=s3EnetNmmLocation, s3EnetHostAddrType=s3EnetHostAddrType, s3EnetThreshEntry=s3EnetThreshEntry, s3EnetPortRuntErrors=s3EnetPortRuntErrors, s3EnetPortAuthAction=s3EnetPortAuthAction, s3000EnetRouter=s3000EnetRouter, s3EnetPortPartTime=s3EnetPortPartTime, s3EnetTopBridgeLstChg=s3EnetTopBridgeLstChg, s3EnetProtoPortEthTalkFrames=s3EnetProtoPortEthTalkFrames, s3EnetProtoConcIpxFrames=s3EnetProtoConcIpxFrames, s3000EnetSADATraffic=s3000EnetSADATraffic, s3EnetPortBcastFrmsRxOk=s3EnetPortBcastFrmsRxOk, s3EnetTopNmmPort=s3EnetTopNmmPort, s3EnetBoardAuthStatus=s3EnetBoardAuthStatus, s3EnetThreshCondition=s3EnetThreshCondition, s3EnetPortTxSecurity=s3EnetPortTxSecurity, s3EnetThreshObject=s3EnetThreshObject, s3EnetPortTooLongErrors=s3EnetPortTooLongErrors, s3EnetProtoPortArpFrames=s3EnetProtoPortArpFrames, s3000EnetTopology=s3000EnetTopology, s3EnetNmmTrapServerAddress=s3EnetNmmTrapServerAddress, s3EnetNmmNetMask=s3EnetNmmNetMask, s3EnetNmmSwMajorVer=s3EnetNmmSwMajorVer, s3EnetPortAuthStatus=s3EnetPortAuthStatus, s3EnetNmmSwMinorVer=s3EnetNmmSwMinorVer, s3EnetProtoBoardIpFrames=s3EnetProtoBoardIpFrames, s3EnetLocBridgePortEntry=s3EnetLocBridgePortEntry, s3EnetHostPortIndex=s3EnetHostPortIndex, s3EnetPortShortEvents=s3EnetPortShortEvents, s3EnetProtoBoardSnaFrames=s3EnetProtoBoardSnaFrames, s3EnetAuthNodesSlotIndex=s3EnetAuthNodesSlotIndex, s3EnetRedPortCompanionPortNo=s3EnetRedPortCompanionPortNo, s3EnetNmmBootMode=s3EnetNmmBootMode, s3EnetProtoConcBrdgSpanTreeFrames=s3EnetProtoConcBrdgSpanTreeFrames, s3EnetLocBridgePortCount=s3EnetLocBridgePortCount, s3EnetProtoConcIsoFrames=s3EnetProtoConcIsoFrames, s3EnetRemBridgePortCount=s3EnetRemBridgePortCount, s3EnetRedPortOperStatus=s3EnetRedPortOperStatus, s3EnetProtoBoardEntry=s3EnetProtoBoardEntry, s3EnetHostObserveOrder=s3EnetHostObserveOrder, s3EnetHostEntry=s3EnetHostEntry, s3EnetConcAutoPartitions=s3EnetConcAutoPartitions, s3EnetThreshIndex=s3EnetThreshIndex, s3EnetBoardIndex=s3EnetBoardIndex, s3EnetPortType=s3EnetPortType, s3EnetNodeAgeInterval=s3EnetNodeAgeInterval, s3EnetDsTrafMacSA=s3EnetDsTrafMacSA, s3EnetProtoPortBrdgSpanTreeFrames=s3EnetProtoPortBrdgSpanTreeFrames, s3EnetHostLearnMethod=s3EnetHostLearnMethod, s3EnetShowNodesAuthStatus=s3EnetShowNodesAuthStatus, s3EnetConcJabbers=s3EnetConcJabbers, s3EnetThreshSlot=s3EnetThreshSlot, s3EnetNmmBaudRate=s3EnetNmmBaudRate, s3EnetProtoConcXnsFrames=s3EnetProtoConcXnsFrames, s3EnetProtoPortOtherFrames=s3EnetProtoPortOtherFrames, s3EnetPortOctetsRxOk=s3EnetPortOctetsRxOk, s3EnetProtoConcEthernetFrames=s3EnetProtoConcEthernetFrames, s3EnetRouterEntry=s3EnetRouterEntry, s3EnetRemBridgeDescr=s3EnetRemBridgeDescr, s3EnetRemBridgePortOpSts=s3EnetRemBridgePortOpSts, s3EnetTopNmmChassisType=s3EnetTopNmmChassisType, s3EnetThreshSetValue=s3EnetThreshSetValue, s3000EnetFrameSizeDist=s3000EnetFrameSizeDist, s3EnetTopBridgeCompBridgeMac2=s3EnetTopBridgeCompBridgeMac2, s3000EnetPlusStatistics=s3000EnetPlusStatistics, s3EnetDsTrafTable=s3EnetDsTrafTable, s3EnetRemBridgePortDescr=s3EnetRemBridgePortDescr, s3EnetHostTable=s3EnetHostTable, s3EnetTrafPageEntries=s3EnetTrafPageEntries, s3EnetThreshTable=s3EnetThreshTable, s3EnetProtoPortSnaFrames=s3EnetProtoPortSnaFrames, s3EnetFindNodesPortIndex=s3EnetFindNodesPortIndex, s3EnetPortLastSrcAddr=s3EnetPortLastSrcAddr, s3EnetFrSizePort64to127=s3EnetFrSizePort64to127, s3EnetHostTimeStamp=s3EnetHostTimeStamp, s3EnetPortJabberStatus=s3EnetPortJabberStatus, s3EnetTrafAgeInterval=s3EnetTrafAgeInterval, s3000EnetPort=s3000EnetPort, s3000EnetBridTopology=s3000EnetBridTopology)
mibBuilder.exportSymbols("SYNOPTICS-ETHERNET-MIB", s3000EnetConcentrator=s3000EnetConcentrator, s3EnetCommonBoardChanSwitch=s3EnetCommonBoardChanSwitch, s3EnetRemBridgePortEntry=s3EnetRemBridgePortEntry, s3EnetConcBcastFrmsRxOk=s3EnetConcBcastFrmsRxOk, s3EnetTopNmmSlot=s3EnetTopNmmSlot, s3EnetHostNetAddr=s3EnetHostNetAddr, s3EnetBoardReset=s3EnetBoardReset, s3EnetBoardShortEvents=s3EnetBoardShortEvents, s3EnetProtoConcIpFrames=s3EnetProtoConcIpFrames, s3EnetProtoPortEntry=s3EnetProtoPortEntry, s3EnetFrSizeConc64to127=s3EnetFrSizeConc64to127, s3EnetHostSlotIndex=s3EnetHostSlotIndex, s3000EnetTopInfo=s3000EnetTopInfo, s3000EnetPlusConc=s3000EnetPlusConc, s3EnetThreshTableSize=s3EnetThreshTableSize, s3EnetProtoConcDecIVFrames=s3EnetProtoConcDecIVFrames, s3EnetThreshActualValue=s3EnetThreshActualValue, s3EnetProtoBoardBrdgSpanTreeFrames=s3EnetProtoBoardBrdgSpanTreeFrames, s3EnetTopNmmIpAddr=s3EnetTopNmmIpAddr, s3EnetConcAlignErrors=s3EnetConcAlignErrors, s3EnetAuthNodesMacAddr=s3EnetAuthNodesMacAddr, s3EnetPortSrcAddrChanges=s3EnetPortSrcAddrChanges, s3EnetDsTrafFrames=s3EnetDsTrafFrames, s3EnetCommonBoardIndex=s3EnetCommonBoardIndex, s3EnetBoardAuthAction=s3EnetBoardAuthAction, s3EnetShowNodesPortIndex=s3EnetShowNodesPortIndex, s3EnetFrSizeBoardTable=s3EnetFrSizeBoardTable, s3EnetTopNmmSubsetEntry=s3EnetTopNmmSubsetEntry, s3EnetTopNmmChgStatus=s3EnetTopNmmChgStatus, s3EnetProtoBoardDecLavcFrames=s3EnetProtoBoardDecLavcFrames, s3EnetConcFragErrors=s3EnetConcFragErrors, s3EnetProtoBoard8023Frames=s3EnetProtoBoard8023Frames, s3EnetProtoPortNetBiosFrames=s3EnetProtoPortNetBiosFrames, s3EnetRedPortCompanionSlotNo=s3EnetRedPortCompanionSlotNo, s3EnetThreshExceedCount=s3EnetThreshExceedCount, s3EnetRedPortRedundMode=s3EnetRedPortRedundMode, s3EnetLocBridgePortIf=s3EnetLocBridgePortIf, s3EnetPlusPortEntry=s3EnetPlusPortEntry, s3EnetTopBridgeStatus=s3EnetTopBridgeStatus, s3EnetBoardStatus=s3EnetBoardStatus, s3EnetRemBridgePortRdySnd=s3EnetRemBridgePortRdySnd, s3EnetRedPortCapability=s3EnetRedPortCapability, s3EnetDsTrafMacDA=s3EnetDsTrafMacDA, s3000EnetProtoTypeDist=s3000EnetProtoTypeDist, s3EnetProtoBoardIndex=s3EnetProtoBoardIndex, s3EnetBoardHwVer=s3EnetBoardHwVer, s3EnetShowNodesVendorType=s3EnetShowNodesVendorType, s3EnetProtoPortBoardIndex=s3EnetProtoPortBoardIndex, s3EnetProtoPortDecLatFrames=s3EnetProtoPortDecLatFrames, s3EnetProtoBoardXnsFrames=s3EnetProtoBoardXnsFrames, s3EnetNmmWriteEeprom=s3EnetNmmWriteEeprom, s3EnetSdTrafTable=s3EnetSdTrafTable, s3EnetNmmMdaHwVer=s3EnetNmmMdaHwVer, s3EnetThreshType=s3EnetThreshType, s3EnetBoardRateMismatches=s3EnetBoardRateMismatches, s3EnetProtoPortTable=s3EnetProtoPortTable, s3EnetNmmTrapServerComm=s3EnetNmmTrapServerComm, s3EnetTopNmmModuleType=s3EnetTopNmmModuleType, s3EnetCommonPortPartTime=s3EnetCommonPortPartTime, s3EnetTopBridgeSlotNum=s3EnetTopBridgeSlotNum, s3EnetPortBoardIndex=s3EnetPortBoardIndex, s3EnetRouterDiagSts=s3EnetRouterDiagSts, s3EnetProtoConcDecLavcFrames=s3EnetProtoConcDecLavcFrames, s3EnetRouterIndex=s3EnetRouterIndex, s3EnetPortAddrCollect=s3EnetPortAddrCollect, s3EnetHostLastDeleteTime=s3EnetHostLastDeleteTime, s3EnetPortIndex=s3EnetPortIndex, s3EnetFrSizeBoard64to127=s3EnetFrSizeBoard64to127, s3EnetBoardMcastFrmsRxOk=s3EnetBoardMcastFrmsRxOk, s3EnetShowNodesEntry=s3EnetShowNodesEntry, s3000EnetBoard=s3000EnetBoard, s3EnetFrSizePort512to1023=s3EnetFrSizePort512to1023, s3EnetTopNmmLstChg=s3EnetTopNmmLstChg, s3EnetTopBdgSubsetEntry=s3EnetTopBdgSubsetEntry, s3EnetFrSizeBoardIndex=s3EnetFrSizeBoardIndex, s3EnetNmmAuthTrap=s3EnetNmmAuthTrap, s3EnetCommonBoardEntry=s3EnetCommonBoardEntry, s3EnetLocBridgePortDescr=s3EnetLocBridgePortDescr, s3EnetSdTrafMacSA=s3EnetSdTrafMacSA, s3000EnetNmmTopology=s3000EnetNmmTopology, s3EnetBoardBcastFrmsRxOk=s3EnetBoardBcastFrmsRxOk, s3EnetProtoBoardEthernetFrames=s3EnetProtoBoardEthernetFrames, s3EnetBoardJabbers=s3EnetBoardJabbers, s3EnetShowNodesStatus=s3EnetShowNodesStatus, s3EnetPortJabbers=s3EnetPortJabbers, s3EnetConcAuthAction=s3EnetConcAuthAction, s3EnetLocBridgeSlotTable=s3EnetLocBridgeSlotTable, s3EnetFindNodesTable=s3EnetFindNodesTable, s3EnetProtoBoardDecIVFrames=s3EnetProtoBoardDecIVFrames, s3EnetFrSizeBoard256to511=s3EnetFrSizeBoard256to511, s3EnetFrSizeConc1024to1518=s3EnetFrSizeConc1024to1518, s3EnetProtoPortDecLavcFrames=s3EnetProtoPortDecLavcFrames, s3EnetPlusBoardTable=s3EnetPlusBoardTable, s3EnetBoardPsStatus=s3EnetBoardPsStatus, s3EnetCommonPortType=s3EnetCommonPortType, s3EnetPortFrmsRxOk=s3EnetPortFrmsRxOk, s3EnetTopBdgSubsetTable=s3EnetTopBdgSubsetTable, s3EnetLocBridgeDescr=s3EnetLocBridgeDescr, s3EnetPortTable=s3EnetPortTable, s3EnetSdTrafEntry=s3EnetSdTrafEntry, s3EnetPortAddrLearnMode=s3EnetPortAddrLearnMode, s3EnetNmmType=s3EnetNmmType, s3EnetRedPortEntry=s3EnetRedPortEntry, s3EnetNmmReset=s3EnetNmmReset, s3EnetConcCollBackoffErrors=s3EnetConcCollBackoffErrors, s3EnetPlusBoardEntry=s3EnetPlusBoardEntry, s3EnetConcFrmsRxOk=s3EnetConcFrmsRxOk, s3EnetPortAlignErrors=s3EnetPortAlignErrors, s3EnetPortLateCollErrors=s3EnetPortLateCollErrors, s3EnetProtoPortEthernetFrames=s3EnetProtoPortEthernetFrames, s3EnetTopNmmSubset=s3EnetTopNmmSubset, s3EnetProtoConcDecLatFrames=s3EnetProtoConcDecLatFrames, s3EnetTopBridgeModuleType=s3EnetTopBridgeModuleType, s3EnetFrSizePort128to255=s3EnetFrSizePort128to255, s3EnetNmmRestart=s3EnetNmmRestart, s3EnetConcSecureStatus=s3EnetConcSecureStatus, s3EnetTopBridgeHelloPortType=s3EnetTopBridgeHelloPortType, s3EnetProtoConcEthTalkFrames=s3EnetProtoConcEthTalkFrames, s3EnetShowNodesTable=s3EnetShowNodesTable, s3EnetBoardFcsErrors=s3EnetBoardFcsErrors, s3EnetPagedTrafEntry=s3EnetPagedTrafEntry, s3EnetLocBridgeEntry=s3EnetLocBridgeEntry, s3EnetConcSecurityLock=s3EnetConcSecurityLock, s3EnetFrSizeBoardEntry=s3EnetFrSizeBoardEntry)
