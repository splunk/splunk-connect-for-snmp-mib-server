#
# PySNMP MIB module GW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:07:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
experimental, TimeTicks, IpAddress, Bits, NotificationType, Counter32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, MibIdentifier, ModuleIdentity, Integer32, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "experimental", "TimeTicks", "IpAddress", "Bits", "NotificationType", "Counter32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "MibIdentifier", "ModuleIdentity", "Integer32", "iso", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
gw = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 18))
gwTe = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 18, 1))
gwTeTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1), )
if mibBuilder.loadTexts: gwTeTable.setStatus('mandatory')
gwTeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1, 1), ).setIndexNames((0, "GW-MIB", "gwTeIndex"))
if mibBuilder.loadTexts: gwTeEntry.setStatus('mandatory')
gwTeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwTeIndex.setStatus('mandatory')
gwTegwNetworkFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwTegwNetworkFailed.setStatus('mandatory')
gwTegwNetworkRestored = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwTegwNetworkRestored.setStatus('mandatory')
gwTegwIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwTegwIPAddress.setStatus('mandatory')
gwTeArNetFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwTeArNetFailed.setStatus('mandatory')
gwTeArNetRestored = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 18, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwTeArNetRestored.setStatus('mandatory')
mibBuilder.exportSymbols("GW-MIB", gwTeEntry=gwTeEntry, nas=nas, usr=usr, gwTegwNetworkRestored=gwTegwNetworkRestored, gwTeIndex=gwTeIndex, gwTegwNetworkFailed=gwTegwNetworkFailed, gwTegwIPAddress=gwTegwIPAddress, gwTeArNetRestored=gwTeArNetRestored, gw=gw, gwTeArNetFailed=gwTeArNetFailed, gwTeTable=gwTeTable, gwTe=gwTe)
