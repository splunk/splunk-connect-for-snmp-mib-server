#
# PySNMP MIB module NTN-QOS-POLICY-EXT-PIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTN-QOS-POLICY-EXT-PIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
PolicyInstanceId, RoleCombination = mibBuilder.importSymbols("POLICY-FRAMEWORK-PIB", "PolicyInstanceId", "RoleCombination")
QosIeee802Cos, qos802AceEntry, qos802DscpMappingEntry = mibBuilder.importSymbols("QOS-POLICY-802-PIB", "QosIeee802Cos", "qos802AceEntry", "qos802DscpMappingEntry")
qosInterfaceTypeEntry, QosInterfaceQueueCount, qosActionEntry = mibBuilder.importSymbols("QOS-POLICY-IP-PIB", "qosInterfaceTypeEntry", "QosInterfaceQueueCount", "qosActionEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, NotificationType, Counter64, ModuleIdentity, Gauge32, iso, TimeTicks, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "NotificationType", "Counter64", "ModuleIdentity", "Gauge32", "iso", "TimeTicks", "Unsigned32", "MibIdentifier")
TextualConvention, StorageType, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "StorageType", "RowStatus", "DisplayString", "TruthValue")
policy, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "policy")
ntnQosPolicyExtPib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 4, 4))
ntnQosPolicyExtPib.setRevisions(('2004-07-20 00:00',))
if mibBuilder.loadTexts: ntnQosPolicyExtPib.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: ntnQosPolicyExtPib.setOrganization('Nortel Networks, Inc.')
ntnQosPolicyExtPibClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 4, 1))
class DropPrecedence(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

ntnQosIfParametersExt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1))
ntnQosIfPriAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1), )
if mibBuilder.loadTexts: ntnQosIfPriAssignmentTable.setStatus('current')
ntnQosIfPriAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EXT-PIB", "ntnQosIfPriAssignmentId"))
if mibBuilder.loadTexts: ntnQosIfPriAssignmentEntry.setStatus('current')
ntnQosIfPriAssignmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: ntnQosIfPriAssignmentId.setStatus('current')
ntnQosIfPriAssignmentRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1, 1, 2), RoleCombination()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfPriAssignmentRoles.setStatus('current')
ntnQosIfPriAssignmentPri = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1, 1, 3), QosIeee802Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfPriAssignmentPri.setStatus('current')
ntnQosIfPriAssignmentQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1, 1, 4), QosInterfaceQueueCount()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfPriAssignmentQueue.setStatus('current')
ntnQosIfPriAssignmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfPriAssignmentStorageType.setStatus('current')
ntnQosIfPriAssignmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfPriAssignmentStatus.setStatus('current')
ntnQosInterfaceTypeExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 2), )
if mibBuilder.loadTexts: ntnQosInterfaceTypeExtTable.setStatus('current')
ntnQosInterfaceTypeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 2, 1), )
qosInterfaceTypeEntry.registerAugmentions(("NTN-QOS-POLICY-EXT-PIB", "ntnQosInterfaceTypeExtEntry"))
ntnQosInterfaceTypeExtEntry.setIndexNames(*qosInterfaceTypeEntry.getIndexNames())
if mibBuilder.loadTexts: ntnQosInterfaceTypeExtEntry.setStatus('current')
ntnQosInterfaceTypeExtIfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("core", 1), ("access", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceTypeExtIfClass.setStatus('current')
ntnQosIfDscpMappingExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 3), )
if mibBuilder.loadTexts: ntnQosIfDscpMappingExtTable.setStatus('current')
ntnQosIfDscpMappingExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 3, 1), )
qos802DscpMappingEntry.registerAugmentions(("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfDscpMappingExtEntry"))
ntnQosIfDscpMappingExtEntry.setIndexNames(*qos802DscpMappingEntry.getIndexNames())
if mibBuilder.loadTexts: ntnQosIfDscpMappingExtEntry.setStatus('current')
ntnQosIfDscpMappingExtDropPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 1, 3, 1, 1), DropPrecedence()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfDscpMappingExtDropPrec.setStatus('current')
ntnQosActionExt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2))
ntnQosActionExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1), )
if mibBuilder.loadTexts: ntnQosActionExtTable.setStatus('current')
ntnQosActionExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1, 1), )
qosActionEntry.registerAugmentions(("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtEntry"))
ntnQosActionExtEntry.setIndexNames(*qosActionEntry.getIndexNames())
if mibBuilder.loadTexts: ntnQosActionExtEntry.setStatus('current')
ntnQosActionExtAssignFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosActionExtAssignFlowId.setStatus('current')
ntnQosActionExtCopyToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosActionExtCopyToCpu.setStatus('current')
ntnQosActionExtMirrorFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosActionExtMirrorFrame.setStatus('current')
ntnQosActionExtSetDropPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("dropPrec1", 1), ("dropPrec2", 2), ("dropPrec3", 3), ("dropPrec4", 4), ("dropPrec5", 5), ("dropPrec6", 6), ("dropPrec7", 7), ("dropPrec8", 8), ("useDefault", 9), ("ignore", 10), ("useEgressMap", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosActionExtSetDropPrec.setStatus('current')
ntnQosActionExtUpdatePri = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("useDefault", 9), ("ignore", 10), ("useEgressMap", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosActionExtUpdatePri.setStatus('current')
ntnQosActionExtMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))).clone('ingress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosActionExtMirrorDirection.setStatus('current')
ntnQos802FilterExt = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3))
ntnQos802FilterExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1), )
if mibBuilder.loadTexts: ntnQos802FilterExtTable.setStatus('current')
ntnQos802FilterExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1), )
qos802AceEntry.registerAugmentions(("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterExtEntry"))
ntnQos802FilterExtEntry.setIndexNames(*qos802AceEntry.getIndexNames())
if mibBuilder.loadTexts: ntnQos802FilterExtEntry.setStatus('current')
ntnQos802FilterDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQos802FilterDscp.setStatus('current')
ntnQos802FilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQos802FilterProtocol.setStatus('current')
ntnQos802FilterDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQos802FilterDstL4PortMin.setStatus('current')
ntnQos802FilterDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQos802FilterDstL4PortMax.setStatus('current')
ntnQos802FilterSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQos802FilterSrcL4PortMin.setStatus('current')
ntnQos802FilterSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQos802FilterSrcL4PortMax.setStatus('current')
ntnQos802FilterVlanIdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 4, 1, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQos802FilterVlanIdSet.setStatus('current')
ntnQosPolicyExtPibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 4, 2))
ntnQosPolicyExtPibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 1))
ntnQosPolicyExtPibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 2))
ntnQosPolicyExtPibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 1, 1)).setObjects(("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfPriAssignmentGroup"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosInterfaceTypeExtGroup"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfDscpMappingExtGroup"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtGroup"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosPolicyExtPibCompliance = ntnQosPolicyExtPibCompliance.setStatus('current')
ntnQosIfPriAssignmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 2, 1)).setObjects(("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfPriAssignmentRoles"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfPriAssignmentPri"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfPriAssignmentQueue"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfPriAssignmentStorageType"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfPriAssignmentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosIfPriAssignmentGroup = ntnQosIfPriAssignmentGroup.setStatus('current')
ntnQosInterfaceTypeExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 2, 2)).setObjects(("NTN-QOS-POLICY-EXT-PIB", "ntnQosInterfaceTypeExtIfClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosInterfaceTypeExtGroup = ntnQosInterfaceTypeExtGroup.setStatus('current')
ntnQosIfDscpMappingExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 2, 3)).setObjects(("NTN-QOS-POLICY-EXT-PIB", "ntnQosIfDscpMappingExtDropPrec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosIfDscpMappingExtGroup = ntnQosIfDscpMappingExtGroup.setStatus('current')
ntnQosActionExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 2, 4)).setObjects(("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtAssignFlowId"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtCopyToCpu"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtMirrorFrame"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtSetDropPrec"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtUpdatePri"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQosActionExtMirrorDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosActionExtGroup = ntnQosActionExtGroup.setStatus('current')
ntnQos802FilterExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 4, 2, 2, 5)).setObjects(("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterDscp"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterProtocol"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterDstL4PortMin"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterDstL4PortMax"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterSrcL4PortMin"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterSrcL4PortMax"), ("NTN-QOS-POLICY-EXT-PIB", "ntnQos802FilterVlanIdSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQos802FilterExtGroup = ntnQos802FilterExtGroup.setStatus('current')
mibBuilder.exportSymbols("NTN-QOS-POLICY-EXT-PIB", ntnQosIfDscpMappingExtTable=ntnQosIfDscpMappingExtTable, ntnQosPolicyExtPibCompliances=ntnQosPolicyExtPibCompliances, ntnQosActionExtAssignFlowId=ntnQosActionExtAssignFlowId, ntnQos802FilterDstL4PortMax=ntnQos802FilterDstL4PortMax, ntnQos802FilterSrcL4PortMax=ntnQos802FilterSrcL4PortMax, ntnQosIfPriAssignmentGroup=ntnQosIfPriAssignmentGroup, ntnQosIfPriAssignmentId=ntnQosIfPriAssignmentId, ntnQosIfPriAssignmentEntry=ntnQosIfPriAssignmentEntry, ntnQos802FilterVlanIdSet=ntnQos802FilterVlanIdSet, ntnQos802FilterDscp=ntnQos802FilterDscp, ntnQosIfPriAssignmentStorageType=ntnQosIfPriAssignmentStorageType, ntnQosIfPriAssignmentQueue=ntnQosIfPriAssignmentQueue, ntnQosIfPriAssignmentStatus=ntnQosIfPriAssignmentStatus, ntnQosIfDscpMappingExtGroup=ntnQosIfDscpMappingExtGroup, ntnQos802FilterExtTable=ntnQos802FilterExtTable, ntnQosPolicyExtPibConformance=ntnQosPolicyExtPibConformance, ntnQosPolicyExtPib=ntnQosPolicyExtPib, ntnQos802FilterProtocol=ntnQos802FilterProtocol, ntnQosActionExtMirrorFrame=ntnQosActionExtMirrorFrame, ntnQos802FilterExtEntry=ntnQos802FilterExtEntry, ntnQosIfPriAssignmentRoles=ntnQosIfPriAssignmentRoles, ntnQosIfParametersExt=ntnQosIfParametersExt, DropPrecedence=DropPrecedence, PYSNMP_MODULE_ID=ntnQosPolicyExtPib, ntnQosPolicyExtPibClasses=ntnQosPolicyExtPibClasses, ntnQosIfDscpMappingExtDropPrec=ntnQosIfDscpMappingExtDropPrec, ntnQosActionExtMirrorDirection=ntnQosActionExtMirrorDirection, ntnQos802FilterSrcL4PortMin=ntnQos802FilterSrcL4PortMin, ntnQos802FilterExtGroup=ntnQos802FilterExtGroup, ntnQosActionExtEntry=ntnQosActionExtEntry, ntnQosInterfaceTypeExtGroup=ntnQosInterfaceTypeExtGroup, ntnQosIfPriAssignmentPri=ntnQosIfPriAssignmentPri, ntnQosActionExt=ntnQosActionExt, ntnQosActionExtTable=ntnQosActionExtTable, ntnQosIfPriAssignmentTable=ntnQosIfPriAssignmentTable, ntnQosActionExtSetDropPrec=ntnQosActionExtSetDropPrec, ntnQosActionExtCopyToCpu=ntnQosActionExtCopyToCpu, ntnQosInterfaceTypeExtTable=ntnQosInterfaceTypeExtTable, ntnQosIfDscpMappingExtEntry=ntnQosIfDscpMappingExtEntry, ntnQosActionExtGroup=ntnQosActionExtGroup, ntnQosInterfaceTypeExtEntry=ntnQosInterfaceTypeExtEntry, ntnQos802FilterDstL4PortMin=ntnQos802FilterDstL4PortMin, ntnQosPolicyExtPibGroups=ntnQosPolicyExtPibGroups, ntnQos802FilterExt=ntnQos802FilterExt, ntnQosPolicyExtPibCompliance=ntnQosPolicyExtPibCompliance, ntnQosActionExtUpdatePri=ntnQosActionExtUpdatePri, ntnQosInterfaceTypeExtIfClass=ntnQosInterfaceTypeExtIfClass)
