#
# PySNMP MIB module FN10-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FN10-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:00:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
dot1dStpPortDesignatedPort, dot1dStpMaxAge, dot1dStpPortDesignatedRoot, dot1dStpDesignatedRoot, dot1dStpPortDesignatedCost, dot1dStpPortState, dot1dStpForwardDelay, dot1dStpPortDesignatedBridge, dot1dStpRootCost, dot1dStpRootPort, dot1dStpHelloTime = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortDesignatedPort", "dot1dStpMaxAge", "dot1dStpPortDesignatedRoot", "dot1dStpDesignatedRoot", "dot1dStpPortDesignatedCost", "dot1dStpPortState", "dot1dStpForwardDelay", "dot1dStpPortDesignatedBridge", "dot1dStpRootCost", "dot1dStpRootPort", "dot1dStpHelloTime")
ifInErrors, ifOutDiscards, ifOutErrors = mibBuilder.importSymbols("IF-MIB", "ifInErrors", "ifOutDiscards", "ifOutErrors")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, enterprises, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Integer32, TimeTicks, NotificationType, Gauge32, ObjectIdentity, NotificationType, iso, MibIdentifier, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Integer32", "TimeTicks", "NotificationType", "Gauge32", "ObjectIdentity", "NotificationType", "iso", "MibIdentifier", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cmu = MibIdentifier((1, 3, 6, 1, 4, 1, 3))
sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
es_1xe = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2)).setLabel("es-1xe")
sxhw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 1))
sxsw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 2))
sxadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 3))
sxswdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 4))
sxaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 5))
sxif = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 6))
sxdot3 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 7))
sxuart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 8))
sxfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 9))
sxdebug = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 10))
sxlpbk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 11))
sxproto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 12))
sxtrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 13))
sxworkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 14))
sxtrapMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 2, 15))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 2))
cmuSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 1))
cmuKip = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 2))
cmuRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 3))
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("es-1xe-bridge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traps-need-acks", 1), ("traps-not-acked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapAck.setStatus('mandatory')
sysTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapTime.setStatus('mandatory')
sysTrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapRetry.setStatus('mandatory')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
sxhwDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwDiagCode.setStatus('mandatory')
sxhwManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwManufData.setStatus('mandatory')
sxhwPortCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortCount.setStatus('mandatory')
sxhwPortTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 1, 4), )
if mibBuilder.loadTexts: sxhwPortTable.setStatus('mandatory')
sxhwUpLink = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwUpLink.setStatus('mandatory')
sxhwUpLinkManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwUpLinkManufData.setStatus('mandatory')
sxhwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1), ).setIndexNames((0, "FN10-MIB", "sxhwPortIndex"))
if mibBuilder.loadTexts: sxhwPortEntry.setStatus('mandatory')
sxhwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortIndex.setStatus('mandatory')
sxhwPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 255))).clone(namedValues=NamedValues(("port-csma", 1), ("port-uart", 6), ("port-none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortType.setStatus('mandatory')
sxhwPortSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 14, 16, 17, 18, 80, 255))).clone(namedValues=NamedValues(("csmacd-tpx", 13), ("csmacd-aui-tpx", 14), ("csmacd-100-tpx", 16), ("csmacd-100-fx", 17), ("csmacd-100-tp4", 18), ("uart-female-9pin", 80), ("no-information", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortSubType.setStatus('mandatory')
sxhwPortDiagPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diag-passed", 1), ("diag-failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwPortDiagPassed.setStatus('mandatory')
sxhwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 1, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxhwAddr.setStatus('mandatory')
sxswNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswNumber.setStatus('mandatory')
sxswFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 2, 2), )
if mibBuilder.loadTexts: sxswFilesetTable.setStatus('mandatory')
sxswFileset = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1), ).setIndexNames((0, "FN10-MIB", "sxswIndex"))
if mibBuilder.loadTexts: sxswFileset.setStatus('mandatory')
sxswIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswIndex.setStatus('mandatory')
sxswDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswDesc.setStatus('mandatory')
sxswCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswCount.setStatus('mandatory')
sxswType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswType.setStatus('mandatory')
sxswSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswSizes.setStatus('mandatory')
sxswStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswStarts.setStatus('mandatory')
sxswBases = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswBases.setStatus('mandatory')
sxswFlashBank = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswFlashBank.setStatus('mandatory')
sxadminFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminFatalErr.setStatus('mandatory')
sxadminAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminAnyPass.setStatus('mandatory')
sxadminGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminGetPass.setStatus('mandatory')
sxadminNMSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminNMSIPAddr.setStatus('mandatory')
sxadminAlarmDynamic = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminAlarmDynamic.setStatus('mandatory')
sxadminAlarmAddressChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminAlarmAddressChange.setStatus('mandatory')
sxadminStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminStorageFailure.setStatus('mandatory')
sxadminAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminAuthenticationFailure.setStatus('mandatory')
sxadminStatsExtended = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminStatsExtended.setStatus('mandatory')
sxadminNAMReceiveCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminNAMReceiveCongests.setStatus('mandatory')
sxadminArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminArpEntries.setStatus('mandatory')
sxadminArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminArpStatics.setStatus('mandatory')
sxadminArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminArpOverflows.setStatus('mandatory')
sxadminIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminIpEntries.setStatus('mandatory')
sxadminIpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminIpStatics.setStatus('mandatory')
sxadminStaticPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminStaticPreference.setStatus('mandatory')
sxadminRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminRipPreference.setStatus('mandatory')
sxadminRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminRipRouteDiscards.setStatus('mandatory')
sxadminRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminRebootConfig.setStatus('mandatory')
sxadminTempOK = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperature-normal", 1), ("temperature-too-hot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminTempOK.setStatus('mandatory')
sxadminDisableButton = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminDisableButton.setStatus('mandatory')
sxadminButtonSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-any-activity", 1), ("led-rx-activity", 2), ("led-tx-activity", 3), ("led-any-collision", 4), ("led-programmed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminButtonSelection.setStatus('mandatory')
sxadminLEDProgramOption = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("program-led-any-error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminLEDProgramOption.setStatus('mandatory')
sxadminNAMTxBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminNAMTxBufferCount.setStatus('mandatory')
sxadminNAMRxBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminNAMRxBufferSize.setStatus('mandatory')
sxadminCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-cpu", 1), ("medium-cpu", 2), ("high-cpu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxadminCpuUtilization.setStatus('mandatory')
sxadminExtraTrunkGrouping = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxadminExtraTrunkGrouping.setStatus('mandatory')
sxswdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswdisDesc.setStatus('mandatory')
sxswdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisAccess.setStatus('mandatory')
sxswdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxswdisWriteStatus.setStatus('mandatory')
sxswdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisConfigIp.setStatus('mandatory')
sxswdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisConfigRetryTime.setStatus('mandatory')
sxswdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxswdisConfigTotalTimeout.setStatus('mandatory')
sxaddrStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrStatics.setStatus('mandatory')
sxaddrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrDynamics.setStatus('mandatory')
sxaddrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrDynamicMax.setStatus('mandatory')
sxaddrDynamicOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrDynamicOverflows.setStatus('mandatory')
sxaddrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrFlags.setStatus('mandatory')
sxaddrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrMAC.setStatus('mandatory')
sxaddrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrPort.setStatus('mandatory')
sxaddrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("zero-stats", 3), ("update", 4), ("delete", 5), ("read-block", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrOperation.setStatus('mandatory')
sxaddrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrIndex.setStatus('mandatory')
sxaddrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrNext.setStatus('mandatory')
sxaddrAge = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrAge.setStatus('mandatory')
sxaddrDestAge = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrDestAge.setStatus('mandatory')
sxaddrRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxPkts.setStatus('mandatory')
sxaddrRxChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxChars.setStatus('mandatory')
sxaddrRxMultiPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxMultiPkts.setStatus('mandatory')
sxaddrRxFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrRxFwdPkts.setStatus('mandatory')
sxaddrTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrTxPkts.setStatus('mandatory')
sxaddrTxChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrTxChars.setStatus('mandatory')
sxaddrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrBlockSize.setStatus('mandatory')
sxaddrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxaddrBlock.setStatus('mandatory')
sxaddrAlarmMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 5, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxaddrAlarmMAC.setStatus('mandatory')
sxifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 6, 1), )
if mibBuilder.loadTexts: sxifTable.setStatus('mandatory')
sxifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxifIndex"))
if mibBuilder.loadTexts: sxifEntry.setStatus('mandatory')
sxifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifIndex.setStatus('mandatory')
sxifRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxCnt.setStatus('mandatory')
sxifTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxCnt.setStatus('mandatory')
sxifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifThreshold.setStatus('mandatory')
sxifThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifThresholdTime.setStatus('mandatory')
sxifRxQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifRxQueueThresh.setStatus('mandatory')
sxifRxQueueThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifRxQueueThreshTime.setStatus('mandatory')
sxifTxStormCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifTxStormCnt.setStatus('mandatory')
sxifTxStormTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifTxStormTime.setStatus('mandatory')
sxifFilterFloodSourceSame = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterFloodSourceSame.setStatus('mandatory')
sxifFilterAllSourceLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterAllSourceLearned.setStatus('mandatory')
sxifFilterNoLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterNoLearning.setStatus('mandatory')
sxifFilterAllDestLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifFilterAllDestLearned.setStatus('mandatory')
sxifCongestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifCongestTime.setStatus('mandatory')
sxifQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 15), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifQueueTime.setStatus('mandatory')
sxifFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifFunction.setStatus('mandatory')
sxifRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxPacket.setStatus('mandatory')
sxifRxHwFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxHwFCSs.setStatus('mandatory')
sxifRxQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifRxQueues.setStatus('mandatory')
sxifTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxPacket.setStatus('mandatory')
sxifTxStorms = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxStorms.setStatus('mandatory')
sxifTxDests = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifTxDests.setStatus('mandatory')
sxifLan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan1.setStatus('mandatory')
sxifLan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan2.setStatus('mandatory')
sxifLan3 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan3.setStatus('mandatory')
sxifLan4 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifLan4.setStatus('mandatory')
sxifStatisticsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifStatisticsTime.setStatus('mandatory')
sxifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifIpAddr.setStatus('mandatory')
sxifIpGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifIpGroupAddr.setStatus('mandatory')
sxifForwardedChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifForwardedChars.setStatus('mandatory')
sxifFilteredChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxifFilteredChars.setStatus('mandatory')
sxifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 6, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxifDescr.setStatus('mandatory')
sxdot3Table = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 7, 1), )
if mibBuilder.loadTexts: sxdot3Table.setStatus('mandatory')
sxdot3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxdot3Index"))
if mibBuilder.loadTexts: sxdot3Entry.setStatus('mandatory')
sxdot3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3Index.setStatus('mandatory')
sxdot3TPLinkOK = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TPLinkOK.setStatus('mandatory')
sxdot3LedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("led-on", 1), ("led-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3LedOn.setStatus('mandatory')
sxdot3RxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxCollisions.setStatus('mandatory')
sxdot3RxRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxRunts.setStatus('mandatory')
sxdot3RxLateColls = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxLateColls.setStatus('mandatory')
sxdot3TxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxJabbers.setStatus('mandatory')
sxdot3TxBabbles = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxBabbles.setStatus('mandatory')
sxdot3TxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxCollisions.setStatus('mandatory')
sxdot3RxErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3RxErrInfo.setStatus('mandatory')
sxdot3TxErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3TxErrInfo.setStatus('mandatory')
sxdot3FuseOkay = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdot3FuseOkay.setStatus('mandatory')
sxdot3SpeedSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-10mbit", 1), ("speed-100mbit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdot3SpeedSelection.setStatus('mandatory')
sxuartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 8, 1), )
if mibBuilder.loadTexts: sxuartTable.setStatus('mandatory')
sxuartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxuartIndex"))
if mibBuilder.loadTexts: sxuartEntry.setStatus('mandatory')
sxuartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxuartIndex.setStatus('mandatory')
sxuartBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("external-clock", 1), ("b1200-baud", 2), ("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6), ("b38400-baud", 7), ("b56-kilobits", 8), ("b1544-kilobits", 9), ("b2048-kilobits", 10), ("b45-megabits", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxuartBaud.setStatus('mandatory')
sxuartAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxuartAlignmentErrors.setStatus('mandatory')
sxuartOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxuartOverrunErrors.setStatus('mandatory')
sxfilterMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterMaxCount.setStatus('mandatory')
sxfilterCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterCurrentCount.setStatus('mandatory')
sxfilterDeleteID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDeleteID.setStatus('mandatory')
sxfilterNextID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterNextID.setStatus('mandatory')
sxfilterAddID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterAddID.setStatus('mandatory')
sxfilterAddIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterAddIndex.setStatus('mandatory')
sxfilterTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 9, 7), )
if mibBuilder.loadTexts: sxfilterTable.setStatus('mandatory')
sxfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1), ).setIndexNames((0, "FN10-MIB", "sxfilterIndex"))
if mibBuilder.loadTexts: sxfilterEntry.setStatus('mandatory')
sxfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterIndex.setStatus('mandatory')
sxfilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterID.setStatus('mandatory')
sxfilterPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterPortNo.setStatus('mandatory')
sxfilterComboType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterComboType.setStatus('mandatory')
sxfilterFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterFlags.setStatus('mandatory')
sxfilterFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any-llc", 1), ("any-ethernet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterFrame.setStatus('mandatory')
sxfilterSource = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSource.setStatus('mandatory')
sxfilterSourceEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSourceEnd.setStatus('mandatory')
sxfilterDest = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDest.setStatus('mandatory')
sxfilterDestEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDestEnd.setStatus('mandatory')
sxfilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSourceMask.setStatus('mandatory')
sxfilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterDestMask.setStatus('mandatory')
sxfilterSrcLan = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterSrcLan.setStatus('mandatory')
sxfilterOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterOffset.setStatus('mandatory')
sxfilterField = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterField.setStatus('mandatory')
sxfilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterMask.setStatus('mandatory')
sxfilterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterThreshold.setStatus('mandatory')
sxfilterThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxfilterThreshTime.setStatus('mandatory')
sxfilterThreshFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterThreshFlag.setStatus('mandatory')
sxfilterPktCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterPktCnts.setStatus('mandatory')
sxfilterLastSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterLastSrc.setStatus('mandatory')
sxfilterByteCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 9, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxfilterByteCnts.setStatus('mandatory')
sxdebugStringID = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdebugStringID.setStatus('mandatory')
sxdebugString = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 10, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdebugString.setStatus('mandatory')
sxdebugTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 10, 3), )
if mibBuilder.loadTexts: sxdebugTable.setStatus('mandatory')
sxdebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1), ).setIndexNames((0, "FN10-MIB", "sxdebugIndex"))
if mibBuilder.loadTexts: sxdebugEntry.setStatus('mandatory')
sxdebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxdebugIndex.setStatus('mandatory')
sxdebugOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("examine", 1), ("modify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugOperation.setStatus('mandatory')
sxdebugBase = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugBase.setStatus('mandatory')
sxdebugLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugLength.setStatus('mandatory')
sxdebugData = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 10, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxdebugData.setStatus('mandatory')
sxlpbkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 11, 1), )
if mibBuilder.loadTexts: sxlpbkTable.setStatus('mandatory')
sxlpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxlpbkIndex"))
if mibBuilder.loadTexts: sxlpbkEntry.setStatus('mandatory')
sxlpbkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkIndex.setStatus('mandatory')
sxlpbkOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopback-off", 1), ("loopback-local", 2), ("loopback-remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkOperation.setStatus('mandatory')
sxlpbkDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkDestAddr.setStatus('mandatory')
sxlpbkPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkPktNum.setStatus('mandatory')
sxlpbkInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkInterval.setStatus('mandatory')
sxlpbkPktLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkPktLength.setStatus('mandatory')
sxlpbkIncrements = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxlpbkIncrements.setStatus('mandatory')
sxlpbkGoods = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkGoods.setStatus('mandatory')
sxlpbkErrorNoReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorNoReceives.setStatus('mandatory')
sxlpbkErrorBadReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorBadReceives.setStatus('mandatory')
sxlpbkErrorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorSize.setStatus('mandatory')
sxlpbkErrorSent = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorSent.setStatus('mandatory')
sxlpbkErrorReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorReceived.setStatus('mandatory')
sxlpbkErrorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 11, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxlpbkErrorOffset.setStatus('mandatory')
sxprotoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 12, 1), )
if mibBuilder.loadTexts: sxprotoTable.setStatus('mandatory')
sxprotoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxprotoIfIndex"))
if mibBuilder.loadTexts: sxprotoEntry.setStatus('mandatory')
sxprotoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxprotoIfIndex.setStatus('mandatory')
sxprotoBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("transparent", 1), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoBridge.setStatus('mandatory')
sxprotoSuppressBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoSuppressBpdu.setStatus('mandatory')
sxprotoRipListen = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoRipListen.setStatus('mandatory')
sxprotoTrunking = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxprotoTrunking.setStatus('mandatory')
sxsprotoCollisionRelief = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxsprotoCollisionRelief.setStatus('mandatory')
sxtrunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 13, 1), )
if mibBuilder.loadTexts: sxtrunkTable.setStatus('mandatory')
sxtrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxtrunkIfIndex"))
if mibBuilder.loadTexts: sxtrunkEntry.setStatus('mandatory')
sxtrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkIfIndex.setStatus('mandatory')
sxtrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("closed", 2), ("oneway", 3), ("joined", 4), ("perturbed", 5), ("helddown", 6), ("broken", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkState.setStatus('mandatory')
sxtrunkRemoteBridgeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkRemoteBridgeAddr.setStatus('mandatory')
sxtrunkRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkRemoteIp.setStatus('mandatory')
sxtrunkLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("ack-lost", 4), ("standby", 5), ("too-many-groups", 6), ("no-ack", 7), ("perturbed-threshold", 8), ("self-connect", 9), ("port-moved", 10), ("multiple-lan-types", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLastError.setStatus('mandatory')
sxtrunkLinkOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLinkOrdinal.setStatus('mandatory')
sxtrunkLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLinkCount.setStatus('mandatory')
sxtrunkLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrunkLastChange.setStatus('mandatory')
sxWorkGroupNextNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxWorkGroupNextNumber.setStatus('mandatory')
sxWorkGroupCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxWorkGroupCurrentCount.setStatus('mandatory')
sxWorkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxWorkGroupMaxCount.setStatus('mandatory')
sxWorkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 14, 4), )
if mibBuilder.loadTexts: sxWorkGroupTable.setStatus('mandatory')
sxWorkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1), ).setIndexNames((0, "FN10-MIB", "sxWorkGroupNumber"))
if mibBuilder.loadTexts: sxWorkGroupEntry.setStatus('mandatory')
sxWorkGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupNumber.setStatus('mandatory')
sxWorkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupName.setStatus('mandatory')
sxWorkGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupPorts.setStatus('mandatory')
sxWorkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("all", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupType.setStatus('mandatory')
sxWorkGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupIpAddress.setStatus('mandatory')
sxWorkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupIpMask.setStatus('mandatory')
sxWorkGroupIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 14, 4, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxWorkGroupIpxNetwork.setStatus('mandatory')
sxtrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 15, 1), )
if mibBuilder.loadTexts: sxtrapControlTable.setStatus('mandatory')
sxtrapControl = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1), ).setIndexNames((0, "FN10-MIB", "sxtrapIndex"))
if mibBuilder.loadTexts: sxtrapControl.setStatus('mandatory')
sxtrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapIndex.setStatus('mandatory')
sxtrapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapEnabled.setStatus('mandatory')
sxtrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapSeverity.setStatus('mandatory')
sxtrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapText.setStatus('mandatory')
sxtrapSeverityControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 15, 2), )
if mibBuilder.loadTexts: sxtrapSeverityControlTable.setStatus('mandatory')
sxtrapSeverityControl = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 15, 2, 1), ).setIndexNames((0, "FN10-MIB", "sxtrapSeverityControlSeverity"))
if mibBuilder.loadTexts: sxtrapSeverityControl.setStatus('mandatory')
sxtrapSeverityControlSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapSeverityControlSeverity.setStatus('mandatory')
sxtrapSeverityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapSeverityEnable.setStatus('mandatory')
sxtrapIncludeText = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapIncludeText.setStatus('mandatory')
sxtrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapTime.setStatus('mandatory')
sxtrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sxtrapRetry.setStatus('mandatory')
sxtrapEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 2, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryNumber.setStatus('mandatory')
sxtrapTable = MibTable((1, 3, 6, 1, 4, 1, 97, 2, 15, 7), )
if mibBuilder.loadTexts: sxtrapTable.setStatus('mandatory')
sxtrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1), ).setIndexNames((0, "FN10-MIB", "sxtrapEntryIndex"))
if mibBuilder.loadTexts: sxtrapEntry.setStatus('mandatory')
sxtrapEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryIndex.setStatus('mandatory')
sxtrapEntryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryTimeStamp.setStatus('mandatory')
sxtrapEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntryText.setStatus('mandatory')
sxtrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapNumber.setStatus('mandatory')
sxtrapEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 2, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sxtrapEntrySeverity.setStatus('mandatory')
sxTempOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,1)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxadminTempOK"), ("FN10-MIB", "sxhwManufData"))
sxWriteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,2)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxswdisWriteStatus"), ("FN10-MIB", "sxswdisDesc"))
sxPortFunctionsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,3)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxifFunction"))
sxRxQueuesTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,4)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxifRxQueues"))
sxTxStormFlagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,5)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxifTxStorms"))
sxTxCongestsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,6)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxadminNAMReceiveCongests"))
sxFilterThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,7)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxfilterLastSrc"), ("FN10-MIB", "sxfilterPortNo"))
sxDebugStringIdTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,8)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxdebugStringID"), ("FN10-MIB", "sxdebugString"))
sxLpbkOperationTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,9)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxlpbkOperation"), ("FN10-MIB", "sxlpbkErrorNoReceives"), ("FN10-MIB", "sxlpbkErrorBadReceives"))
sxTrunkStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,10)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkState"))
sxTrunkBridgeAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,11)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkRemoteBridgeAddr"))
sxTrunkIPAddrTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,12)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkRemoteIp"))
sxTrunkErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,13)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkLastError"))
sxTrunkLinkOrdinalTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,14)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkLinkOrdinal"))
sxTrunkLinkCountTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,15)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxtrunkLinkCount"))
sxDiagUnitBootedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,16)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxadminFatalErr"))
sxStorageFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,17)).setObjects(("FN10-MIB", "sxtrapSeverity"))
sxPortCongestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,18)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("IF-MIB", "ifOutDiscards"))
sxTopChangeBegunTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,19)).setObjects(("FN10-MIB", "sxtrapSeverity"))
sxTopChangeEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,20)).setObjects(("FN10-MIB", "sxtrapSeverity"))
sxIfErrorsTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,21)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"))
sxStRootIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,22)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpDesignatedRoot"))
sxStRootCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,23)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpRootCost"))
sxStRootPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,24)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpRootPort"))
sxStMaxAgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,25)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpMaxAge"))
sxStHelloTimeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,26)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpHelloTime"))
sxStForwardDelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,27)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpForwardDelay"))
sxStDesigRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,28)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedRoot"))
sxStPortDesigBridgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,29)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedBridge"))
sxStPortDesigCostTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,30)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedCost"))
sxStPortDesigPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,31)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortDesignatedPort"))
sxStPortStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,32)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("BRIDGE-MIB", "dot1dStpPortState"))
sxhwDiagTrap = NotificationType((1, 3, 6, 1, 4, 1, 97) + (0,100)).setObjects(("FN10-MIB", "sxtrapSeverity"), ("FN10-MIB", "sxhwDiagCode"))
mibBuilder.exportSymbols("FN10-MIB", sxdebugData=sxdebugData, sxprotoBridge=sxprotoBridge, sxifFilterAllDestLearned=sxifFilterAllDestLearned, sxaddrPort=sxaddrPort, sxtrunkRemoteIp=sxtrunkRemoteIp, cmuRouter=cmuRouter, sxWorkGroupNextNumber=sxWorkGroupNextNumber, sxworkgroup=sxworkgroup, sxStRootIDTrap=sxStRootIDTrap, sxWorkGroupIpMask=sxWorkGroupIpMask, sxifStatisticsTime=sxifStatisticsTime, sxaddrRxFwdPkts=sxaddrRxFwdPkts, sxifIndex=sxifIndex, sxtrunkTable=sxtrunkTable, sxadminLEDProgramOption=sxadminLEDProgramOption, sxaddrDynamics=sxaddrDynamics, sxhw=sxhw, sxswDesc=sxswDesc, sxtrapIncludeText=sxtrapIncludeText, sxadminStorageFailure=sxadminStorageFailure, sxdebug=sxdebug, sxdot3TxJabbers=sxdot3TxJabbers, sxtrapIndex=sxtrapIndex, sxaddrAge=sxaddrAge, sxfilterField=sxfilterField, sxdebugString=sxdebugString, sxhwManufData=sxhwManufData, sxsw=sxsw, sxStRootPortTrap=sxStRootPortTrap, sxfilterLastSrc=sxfilterLastSrc, cmu=cmu, sxhwDiagTrap=sxhwDiagTrap, sxadminStaticPreference=sxadminStaticPreference, sxaddrDestAge=sxaddrDestAge, sxifEntry=sxifEntry, sxlpbk=sxlpbk, sxadminStatsExtended=sxadminStatsExtended, sxifForwardedChars=sxifForwardedChars, sxfilterFrame=sxfilterFrame, sxStorageFailureTrap=sxStorageFailureTrap, sxtrapEntryTimeStamp=sxtrapEntryTimeStamp, sxhwPortCount=sxhwPortCount, sys=sys, sxaddrBlockSize=sxaddrBlockSize, sxtrunkLinkOrdinal=sxtrunkLinkOrdinal, sxDebugStringIdTrap=sxDebugStringIdTrap, sxswFlashBank=sxswFlashBank, sxadminRipRouteDiscards=sxadminRipRouteDiscards, sxifIpGroupAddr=sxifIpGroupAddr, sxswFileset=sxswFileset, sxdot3TxErrInfo=sxdot3TxErrInfo, sxfilterNextID=sxfilterNextID, sxaddrStatics=sxaddrStatics, es_1xe=es_1xe, sxWorkGroupNumber=sxWorkGroupNumber, sxtrapSeverity=sxtrapSeverity, sxaddrIndex=sxaddrIndex, sxprotoEntry=sxprotoEntry, sxfilter=sxfilter, sxLpbkOperationTrap=sxLpbkOperationTrap, sxtrapEntryNumber=sxtrapEntryNumber, mibs=mibs, sxtrapNumber=sxtrapNumber, sxTrunkStateTrap=sxTrunkStateTrap, sxhwPortTable=sxhwPortTable, sxTrunkLinkOrdinalTrap=sxTrunkLinkOrdinalTrap, sxStPortDesigBridgeTrap=sxStPortDesigBridgeTrap, sxlpbkGoods=sxlpbkGoods, sxswNumber=sxswNumber, sysTrapTime=sysTrapTime, sxtrunkEntry=sxtrunkEntry, sxif=sxif, sxifRxQueueThreshTime=sxifRxQueueThreshTime, sxhwAddr=sxhwAddr, sxfilterThreshFlag=sxfilterThreshFlag, sxtrapControl=sxtrapControl, sxfilterPortNo=sxfilterPortNo, sxadminArpEntries=sxadminArpEntries, sxifLan2=sxifLan2, sxfilterCurrentCount=sxfilterCurrentCount, sxadminButtonSelection=sxadminButtonSelection, sxifLan4=sxifLan4, sxlpbkErrorBadReceives=sxlpbkErrorBadReceives, sxTxStormFlagTrap=sxTxStormFlagTrap, sxtrapEntryText=sxtrapEntryText, sxtrapSeverityControlSeverity=sxtrapSeverityControlSeverity, sxTxCongestsTrap=sxTxCongestsTrap, sxadminRebootConfig=sxadminRebootConfig, sxswdisDesc=sxswdisDesc, sxPortFunctionsTrap=sxPortFunctionsTrap, sxifQueueTime=sxifQueueTime, sxifLan1=sxifLan1, sxlpbkInterval=sxlpbkInterval, sxfilterOffset=sxfilterOffset, sxlpbkOperation=sxlpbkOperation, sxlpbkIncrements=sxlpbkIncrements, sxlpbkErrorSent=sxlpbkErrorSent, sxadminAlarmDynamic=sxadminAlarmDynamic, sxadminIpStatics=sxadminIpStatics, sxifFunction=sxifFunction, sxdot3TxCollisions=sxdot3TxCollisions, sysTrapRetry=sysTrapRetry, sxuartEntry=sxuartEntry, sxFilterThreshTrap=sxFilterThreshTrap, sxWorkGroupIpAddress=sxWorkGroupIpAddress, sxswIndex=sxswIndex, sxuartIndex=sxuartIndex, sxswStarts=sxswStarts, sxswdisWriteStatus=sxswdisWriteStatus, sxprotoTrunking=sxprotoTrunking, sxfilterSource=sxfilterSource, sxuartOverrunErrors=sxuartOverrunErrors, sxuart=sxuart, sxWorkGroupMaxCount=sxWorkGroupMaxCount, sxtrapEntryIndex=sxtrapEntryIndex, sxadminAnyPass=sxadminAnyPass, sxStHelloTimeTrap=sxStHelloTimeTrap, sxswdis=sxswdis, sxaddrDynamicOverflows=sxaddrDynamicOverflows, sxlpbkErrorOffset=sxlpbkErrorOffset, sxWriteStatusTrap=sxWriteStatusTrap, sxtrapSeverityControlTable=sxtrapSeverityControlTable, sxaddrBlock=sxaddrBlock, sxadminFatalErr=sxadminFatalErr, sxifFilterNoLearning=sxifFilterNoLearning, sxlpbkErrorNoReceives=sxlpbkErrorNoReceives, sxdot3Entry=sxdot3Entry, sxadmin=sxadmin, sxadminCpuUtilization=sxadminCpuUtilization, sxaddrTxPkts=sxaddrTxPkts, sxuartAlignmentErrors=sxuartAlignmentErrors, sxdebugIndex=sxdebugIndex, sxprotoIfIndex=sxprotoIfIndex, sxhwDiagCode=sxhwDiagCode, sxtrapRetry=sxtrapRetry, sxtrapTable=sxtrapTable, sxadminNAMTxBufferCount=sxadminNAMTxBufferCount, sxlpbkIndex=sxlpbkIndex, sxfilterFlags=sxfilterFlags, sxifTable=sxifTable, sxdebugLength=sxdebugLength, sxswdisConfigTotalTimeout=sxswdisConfigTotalTimeout, sxWorkGroupCurrentCount=sxWorkGroupCurrentCount, sxtrapEnabled=sxtrapEnabled, sxIfErrorsTrap=sxIfErrorsTrap, sxaddrOperation=sxaddrOperation, sxifFilterFloodSourceSame=sxifFilterFloodSourceSame, sxadminNMSIPAddr=sxadminNMSIPAddr, sxaddrDynamicMax=sxaddrDynamicMax, sxlpbkErrorSize=sxlpbkErrorSize, sysTrapAck=sysTrapAck, sxaddrNext=sxaddrNext, sxfilterMask=sxfilterMask, sxprotoRipListen=sxprotoRipListen, sxfilterThreshold=sxfilterThreshold, sxaddrAlarmMAC=sxaddrAlarmMAC, sxfilterMaxCount=sxfilterMaxCount, sxtrapMgt=sxtrapMgt, sxswFilesetTable=sxswFilesetTable, sxtrapControlTable=sxtrapControlTable, sxtrunkLastError=sxtrunkLastError, sxswdisAccess=sxswdisAccess, sxTrunkBridgeAddrTrap=sxTrunkBridgeAddrTrap, sxStPortDesigCostTrap=sxStPortDesigCostTrap, sxsprotoCollisionRelief=sxsprotoCollisionRelief, sxhwPortType=sxhwPortType, sxWorkGroupType=sxWorkGroupType, sxTopChangeEndTrap=sxTopChangeEndTrap, sxifCongestTime=sxifCongestTime, sxfilterID=sxfilterID, sxdot3LedOn=sxdot3LedOn, sxuartTable=sxuartTable, systems=systems, sxlpbkEntry=sxlpbkEntry, sxtrunkState=sxtrunkState, sxswSizes=sxswSizes, sxfilterPktCnts=sxfilterPktCnts, sxdot3RxErrInfo=sxdot3RxErrInfo, sxifFilteredChars=sxifFilteredChars, sxlpbkDestAddr=sxlpbkDestAddr, sysID=sysID, sxifRxCnt=sxifRxCnt, sysTrapPort=sysTrapPort, sxifRxHwFCSs=sxifRxHwFCSs, sxdot3RxLateColls=sxdot3RxLateColls, sxadminArpStatics=sxadminArpStatics, sxdot3FuseOkay=sxdot3FuseOkay, sxdot3SpeedSelection=sxdot3SpeedSelection, sxifTxDests=sxifTxDests, sxhwUpLink=sxhwUpLink, sxifLan3=sxifLan3, sxswBases=sxswBases, sxfilterDest=sxfilterDest, sxtrapText=sxtrapText, sxifTxStormTime=sxifTxStormTime, sxfilterDestMask=sxfilterDestMask, sxtrapSeverityEnable=sxtrapSeverityEnable, sxWorkGroupPorts=sxWorkGroupPorts, sxStPortStateTrap=sxStPortStateTrap, sxadminTempOK=sxadminTempOK, cmuSNMP=cmuSNMP, sxifRxQueueThresh=sxifRxQueueThresh, sxproto=sxproto, sysReset=sysReset, sxtrunk=sxtrunk, sxhwPortIndex=sxhwPortIndex, sxadminIpEntries=sxadminIpEntries, sxdot3RxRunts=sxdot3RxRunts, sxdot3Index=sxdot3Index, sxdot3TxBabbles=sxdot3TxBabbles, sxadminNAMRxBufferSize=sxadminNAMRxBufferSize, sxadminDisableButton=sxadminDisableButton, sxWorkGroupTable=sxWorkGroupTable, sigma=sigma, sxStRootCostTrap=sxStRootCostTrap, sxStForwardDelayTrap=sxStForwardDelayTrap, sxStMaxAgeTrap=sxStMaxAgeTrap, sxifRxPacket=sxifRxPacket, sxadminAlarmAddressChange=sxadminAlarmAddressChange, sxaddrFlags=sxaddrFlags, sxfilterAddID=sxfilterAddID, sxfilterComboType=sxfilterComboType, sxTempOKTrap=sxTempOKTrap, sxTrunkIPAddrTrap=sxTrunkIPAddrTrap, sxifRxQueues=sxifRxQueues, sxtrapEntrySeverity=sxtrapEntrySeverity, sxhwPortDiagPassed=sxhwPortDiagPassed, sxfilterDeleteID=sxfilterDeleteID, sxTrunkErrorTrap=sxTrunkErrorTrap, sxTopChangeBegunTrap=sxTopChangeBegunTrap, sxadminArpOverflows=sxadminArpOverflows, sxtrunkLastChange=sxtrunkLastChange, sxaddrRxMultiPkts=sxaddrRxMultiPkts, sxfilterAddIndex=sxfilterAddIndex, sxlpbkTable=sxlpbkTable, sxRxQueuesTrap=sxRxQueuesTrap, sxifTxCnt=sxifTxCnt, sxdebugBase=sxdebugBase, sxlpbkErrorReceived=sxlpbkErrorReceived, sxtrapSeverityControl=sxtrapSeverityControl, sxswCount=sxswCount, sxdebugOperation=sxdebugOperation, sxfilterSourceEnd=sxfilterSourceEnd, sxfilterSourceMask=sxfilterSourceMask, sxifTxStorms=sxifTxStorms, sxaddrTxChars=sxaddrTxChars, sxdebugStringID=sxdebugStringID, sxPortCongestedTrap=sxPortCongestedTrap, sxadminGetPass=sxadminGetPass, cmuKip=cmuKip, sxadminRipPreference=sxadminRipPreference, sxifThreshold=sxifThreshold, sxfilterByteCnts=sxfilterByteCnts, sxdot3=sxdot3)
mibBuilder.exportSymbols("FN10-MIB", sxdot3RxCollisions=sxdot3RxCollisions, sxadminNAMReceiveCongests=sxadminNAMReceiveCongests, sxaddrRxChars=sxaddrRxChars, sxStPortDesigPortTrap=sxStPortDesigPortTrap, sxhwPortEntry=sxhwPortEntry, sxswdisConfigRetryTime=sxswdisConfigRetryTime, sxdot3Table=sxdot3Table, sxtrunkIfIndex=sxtrunkIfIndex, sxtrapTime=sxtrapTime, sxtrunkLinkCount=sxtrunkLinkCount, sxfilterIndex=sxfilterIndex, sxWorkGroupEntry=sxWorkGroupEntry, sxfilterSrcLan=sxfilterSrcLan, sxdebugTable=sxdebugTable, sxswType=sxswType, sxprotoSuppressBpdu=sxprotoSuppressBpdu, sxdebugEntry=sxdebugEntry, sxlpbkPktNum=sxlpbkPktNum, sxfilterEntry=sxfilterEntry, sxifTxStormCnt=sxifTxStormCnt, sxifThresholdTime=sxifThresholdTime, sxprotoTable=sxprotoTable, sxtrunkRemoteBridgeAddr=sxtrunkRemoteBridgeAddr, sxWorkGroupName=sxWorkGroupName, sxfilterThreshTime=sxfilterThreshTime, sxDiagUnitBootedTrap=sxDiagUnitBootedTrap, sxStDesigRootTrap=sxStDesigRootTrap, sxhwUpLinkManufData=sxhwUpLinkManufData, sxfilterDestEnd=sxfilterDestEnd, sxadminAuthenticationFailure=sxadminAuthenticationFailure, sxadminExtraTrunkGrouping=sxadminExtraTrunkGrouping, sxifTxPacket=sxifTxPacket, sxdot3TPLinkOK=sxdot3TPLinkOK, sxfilterTable=sxfilterTable, sxTrunkLinkCountTrap=sxTrunkLinkCountTrap, sxifFilterAllSourceLearned=sxifFilterAllSourceLearned, sxuartBaud=sxuartBaud, sxaddrMAC=sxaddrMAC, sxWorkGroupIpxNetwork=sxWorkGroupIpxNetwork, sxaddrRxPkts=sxaddrRxPkts, sxaddr=sxaddr, sxhwPortSubType=sxhwPortSubType, sxswdisConfigIp=sxswdisConfigIp, sxlpbkPktLength=sxlpbkPktLength, sxifDescr=sxifDescr, sxtrapEntry=sxtrapEntry, sxifIpAddr=sxifIpAddr)
