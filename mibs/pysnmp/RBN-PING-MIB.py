#
# PySNMP MIB module RBN-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-PING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:44:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
pingCtlOwnerIndex, pingCtlEntry, pingResultsEntry, pingCtlTestName = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingCtlOwnerIndex", "pingCtlEntry", "pingResultsEntry", "pingCtlTestName")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, Unsigned32, Integer32, Gauge32, iso, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, MibIdentifier, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Unsigned32", "Integer32", "Gauge32", "iso", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "MibIdentifier", "NotificationType", "ModuleIdentity")
TruthValue, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention")
rbnPingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 46))
rbnPingMib.setRevisions(('2008-07-30 00:00',))
if mibBuilder.loadTexts: rbnPingMib.setLastUpdated('200807300000Z')
if mibBuilder.loadTexts: rbnPingMib.setOrganization('Redback Networks, Inc.')
rbnPingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1))
rbnPingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2))
rbnPingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 3))
rbnPingGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 1))
rbnPingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2))
rbnPingControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3))
rbnPingIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4))
rbnPingNumTests = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingNumTests.setStatus('current')
rbnPingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 1), )
if mibBuilder.loadTexts: rbnPingResultsTable.setStatus('current')
rbnPingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 1, 1), )
pingResultsEntry.registerAugmentions(("RBN-PING-MIB", "rbnPingResultsEntry"))
rbnPingResultsEntry.setIndexNames(*pingResultsEntry.getIndexNames())
if mibBuilder.loadTexts: rbnPingResultsEntry.setStatus('current')
rbnPingResultsJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 1, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingResultsJitter.setStatus('current')
rbnPingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2), )
if mibBuilder.loadTexts: rbnPingHistoryTable.setStatus('current')
rbnPingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "RBN-PING-MIB", "rbnPingHistoryIndex"))
if mibBuilder.loadTexts: rbnPingHistoryEntry.setStatus('current')
rbnPingHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnPingHistoryIndex.setStatus('current')
rbnPingHistoryIpTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 2), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryIpTargetAddressType.setStatus('current')
rbnPingHistoryIpTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 3), InetAddress().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryIpTargetAddress.setStatus('current')
rbnPingHistoryMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryMinRtt.setStatus('current')
rbnPingHistoryMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 5), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryMaxRtt.setStatus('current')
rbnPingHistoryAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryAverageRtt.setStatus('current')
rbnPingHistoryProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 7), Gauge32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryProbeResponses.setStatus('current')
rbnPingHistorySentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 8), Gauge32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistorySentProbes.setStatus('current')
rbnPingHistoryRttSumOfSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryRttSumOfSquares.setStatus('current')
rbnPingHistoryLastGoodProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryLastGoodProbe.setStatus('current')
rbnPingHistoryJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryJitter.setStatus('current')
rbnPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3, 1), )
if mibBuilder.loadTexts: rbnPingCtlTable.setStatus('current')
rbnPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3, 1, 1), )
pingCtlEntry.registerAugmentions(("RBN-PING-MIB", "rbnPingCtlEntry"))
rbnPingCtlEntry.setIndexNames(*pingCtlEntry.getIndexNames())
if mibBuilder.loadTexts: rbnPingCtlEntry.setStatus('current')
rbnPingCtlMaxHistoryRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3, 1, 1, 1), Unsigned32().clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnPingCtlMaxHistoryRows.setStatus('current')
rbnPingCtlIpTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1), )
if mibBuilder.loadTexts: rbnPingCtlIpTable.setStatus('current')
rbnPingCtlIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1, 1), )
pingCtlEntry.registerAugmentions(("RBN-PING-MIB", "rbnPingCtlIpEntry"))
rbnPingCtlIpEntry.setIndexNames(*pingCtlEntry.getIndexNames())
if mibBuilder.loadTexts: rbnPingCtlIpEntry.setStatus('current')
rbnPingCtlIpDontFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnPingCtlIpDontFragment.setStatus('current')
rbnPingCtlIpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnPingCtlIpTtl.setStatus('current')
rbnPingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 1))
rbnPingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2))
rbnPingIpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 1, 1)).setObjects(("RBN-PING-MIB", "rbnPingGlobalsGroup"), ("RBN-PING-MIB", "rbnPingResultsGroup"), ("RBN-PING-MIB", "rbnPingCtlGroup"), ("RBN-PING-MIB", "rbnPingIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingIpCompliance = rbnPingIpCompliance.setStatus('current')
rbnPingGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 1)).setObjects(("RBN-PING-MIB", "rbnPingNumTests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingGlobalsGroup = rbnPingGlobalsGroup.setStatus('current')
rbnPingResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 2)).setObjects(("RBN-PING-MIB", "rbnPingResultsJitter"), ("RBN-PING-MIB", "rbnPingHistoryIpTargetAddressType"), ("RBN-PING-MIB", "rbnPingHistoryIpTargetAddress"), ("RBN-PING-MIB", "rbnPingHistoryMinRtt"), ("RBN-PING-MIB", "rbnPingHistoryMaxRtt"), ("RBN-PING-MIB", "rbnPingHistoryAverageRtt"), ("RBN-PING-MIB", "rbnPingHistoryProbeResponses"), ("RBN-PING-MIB", "rbnPingHistorySentProbes"), ("RBN-PING-MIB", "rbnPingHistoryRttSumOfSquares"), ("RBN-PING-MIB", "rbnPingHistoryLastGoodProbe"), ("RBN-PING-MIB", "rbnPingHistoryJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingResultsGroup = rbnPingResultsGroup.setStatus('current')
rbnPingCtlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 3)).setObjects(("RBN-PING-MIB", "rbnPingCtlMaxHistoryRows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingCtlGroup = rbnPingCtlGroup.setStatus('current')
rbnPingIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 4)).setObjects(("RBN-PING-MIB", "rbnPingCtlIpDontFragment"), ("RBN-PING-MIB", "rbnPingCtlIpTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingIpGroup = rbnPingIpGroup.setStatus('current')
mibBuilder.exportSymbols("RBN-PING-MIB", rbnPingCtlIpDontFragment=rbnPingCtlIpDontFragment, rbnPingCtlIpTtl=rbnPingCtlIpTtl, rbnPingHistorySentProbes=rbnPingHistorySentProbes, rbnPingResults=rbnPingResults, rbnPingResultsJitter=rbnPingResultsJitter, rbnPingHistoryLastGoodProbe=rbnPingHistoryLastGoodProbe, rbnPingHistoryProbeResponses=rbnPingHistoryProbeResponses, rbnPingResultsEntry=rbnPingResultsEntry, rbnPingCtlIpTable=rbnPingCtlIpTable, rbnPingIpCompliance=rbnPingIpCompliance, rbnPingIpGroup=rbnPingIpGroup, rbnPingCtlTable=rbnPingCtlTable, rbnPingHistoryRttSumOfSquares=rbnPingHistoryRttSumOfSquares, rbnPingGlobals=rbnPingGlobals, rbnPingResultsTable=rbnPingResultsTable, rbnPingHistoryMinRtt=rbnPingHistoryMinRtt, rbnPingHistoryAverageRtt=rbnPingHistoryAverageRtt, rbnPingHistoryIpTargetAddress=rbnPingHistoryIpTargetAddress, rbnPingCtlMaxHistoryRows=rbnPingCtlMaxHistoryRows, rbnPingCtlIpEntry=rbnPingCtlIpEntry, rbnPingResultsGroup=rbnPingResultsGroup, rbnPingHistoryIpTargetAddressType=rbnPingHistoryIpTargetAddressType, rbnPingIp=rbnPingIp, rbnPingNumTests=rbnPingNumTests, rbnPingGroups=rbnPingGroups, PYSNMP_MODULE_ID=rbnPingMib, rbnPingConformance=rbnPingConformance, rbnPingControl=rbnPingControl, rbnPingHistoryMaxRtt=rbnPingHistoryMaxRtt, rbnPingHistoryEntry=rbnPingHistoryEntry, rbnPingCtlEntry=rbnPingCtlEntry, rbnPingObjects=rbnPingObjects, rbnPingHistoryIndex=rbnPingHistoryIndex, rbnPingNotifications=rbnPingNotifications, rbnPingMib=rbnPingMib, rbnPingGlobalsGroup=rbnPingGlobalsGroup, rbnPingCompliances=rbnPingCompliances, rbnPingHistoryJitter=rbnPingHistoryJitter, rbnPingHistoryTable=rbnPingHistoryTable, rbnPingCtlGroup=rbnPingCtlGroup)
