#
# PySNMP MIB module LX-10-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LX-10-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, TimeTicks, Gauge32, ModuleIdentity, ObjectIdentity, NotificationType, Counter64, MibIdentifier, IpAddress, NotificationType, Counter32, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "TimeTicks", "Gauge32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Counter64", "MibIdentifier", "IpAddress", "NotificationType", "Counter32", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
onstream = MibIdentifier((1, 3, 6, 1, 4, 1, 135))
lx_10 = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22)).setLabel("lx-10")
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 1))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 2))
fault = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 3))
perf = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 4))
class TimeAndDate(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sysGenInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 1, 1))
sysGenInfoShelfName = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoShelfName.setStatus('mandatory')
sysGenInfoCustomerName = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoCustomerName.setStatus('mandatory')
sysGenInfoPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoPhoneNumber.setStatus('mandatory')
sysGenInfoMaintenanceContact = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoMaintenanceContact.setStatus('mandatory')
sysGenInfoLocation = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoLocation.setStatus('mandatory')
sysGenInfoAutoLogoutTime = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoAutoLogoutTime.setStatus('mandatory')
sysGenInfoPassword = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('onstream')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoPassword.setStatus('mandatory')
sysGenInfoShelfId = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGenInfoShelfId.setStatus('mandatory')
sysTimeAndDate = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 2), TimeAndDate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeAndDate.setStatus('mandatory')
sysIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 1, 3))
sysIpConfigHostInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 1), )
if mibBuilder.loadTexts: sysIpConfigHostInterfaceTable.setStatus('mandatory')
sysIpConfigHostInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 1, 1), ).setIndexNames((0, "LX-10-MIB", "sysIpConfigHostInterfaceIndex"))
if mibBuilder.loadTexts: sysIpConfigHostInterfaceEntry.setStatus('mandatory')
sysIpConfigHostInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("slip", 2), ("nxt1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpConfigHostInterfaceIndex.setStatus('mandatory')
sysIpConfigHostInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 1, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpConfigHostInterfaceIpAddress.setStatus('mandatory')
sysIpConfigHostInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpConfigHostInterfaceSubnetMask.setStatus('mandatory')
sysIpConfigHostInterfaceXmtRoutingMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigHostInterfaceXmtRoutingMsg.setStatus('mandatory')
sysIpConfigDefaultGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 2))
sysIpConfigDefaultGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 2, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigDefaultGatewayIpAddress.setStatus('mandatory')
sysIpConfigDefaultGatewaySubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 2, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigDefaultGatewaySubnetMask.setStatus('mandatory')
sysIpConfigTrapClientTable = MibTable((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 3), )
if mibBuilder.loadTexts: sysIpConfigTrapClientTable.setStatus('mandatory')
sysIpConfigTrapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 3, 1), ).setIndexNames((0, "LX-10-MIB", "sysIpConfigTrapClientIndex"))
if mibBuilder.loadTexts: sysIpConfigTrapClientEntry.setStatus('mandatory')
sysIpConfigTrapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigTrapClientIndex.setStatus('mandatory')
sysIpConfigTrapClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 3, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigTrapClientIpAddress.setStatus('mandatory')
sysIpConfigTrapClientSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 3, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigTrapClientSubnetMask.setStatus('mandatory')
sysIpConfigTrapClientPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 3, 1, 4), Integer32().clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigTrapClientPortNumber.setStatus('mandatory')
sysIpConfigCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('onstream')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpConfigCommunityName.setStatus('mandatory')
sysIpConfigMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 3, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpConfigMacAddress.setStatus('mandatory')
sysRs232Table = MibTable((1, 3, 6, 1, 4, 1, 135, 22, 1, 4), )
if mibBuilder.loadTexts: sysRs232Table.setStatus('mandatory')
sysRs232Entry = MibTableRow((1, 3, 6, 1, 4, 1, 135, 22, 1, 4, 1), ).setIndexNames((0, "LX-10-MIB", "sysRs232Port"))
if mibBuilder.loadTexts: sysRs232Entry.setStatus('mandatory')
sysRs232Port = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRs232Port.setStatus('mandatory')
sysRs232BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("br-300", 1), ("br-1200", 2), ("br-2400", 3), ("br-4800", 4), ("br-9600", 5), ("br-19200", 6), ("br-38400", 7))).clone('br-9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRs232BaudRate.setStatus('mandatory')
sysRs232Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRs232Parity.setStatus('mandatory')
sysRs232DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("db-7", 1), ("db-8", 2))).clone('db-8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRs232DataBits.setStatus('mandatory')
sysRs232StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sb-1", 1), ("sb-2", 2))).clone('sb-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRs232StopBits.setStatus('mandatory')
sysMainProcessorFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMainProcessorFirmwareRev.setStatus('mandatory')
sysPortCardFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCardFirmwareRev.setStatus('mandatory')
configDs1Table = MibTable((1, 3, 6, 1, 4, 1, 135, 22, 2, 1), )
if mibBuilder.loadTexts: configDs1Table.setStatus('mandatory')
configDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1), ).setIndexNames((0, "LX-10-MIB", "configDs1Port"))
if mibBuilder.loadTexts: configDs1Entry.setStatus('mandatory')
configDs1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDs1Port.setStatus('mandatory')
configDs1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDs1AdminStatus.setStatus('mandatory')
configDs1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDs1OperStatus.setStatus('mandatory')
configDs1LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dB-0", 1), ("dB-7-5", 2), ("dB-15", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDs1LBO.setStatus('mandatory')
configDs1Encoding = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDs1Encoding.setStatus('mandatory')
configDs1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDs1Framing.setStatus('mandatory')
configDs1XmtAis = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDs1XmtAis.setStatus('mandatory')
configDs1Timing = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("looped", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDs1Timing.setStatus('mandatory')
configAfa = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 2, 3))
configAfaActivationRate = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a-10-4", 1), ("a-10-5", 2), ("a-10-6", 3), ("a-10-7", 4), ("a-10-8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAfaActivationRate.setStatus('mandatory')
configAfaActivationTime = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAfaActivationTime.setStatus('mandatory')
configAfaDeactivationRate = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("d-10-6", 1), ("d-10-7", 2), ("d-10-8", 3), ("d-10-9", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAfaDeactivationRate.setStatus('mandatory')
configAfaDeactivationTime = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAfaDeactivationTime.setStatus('mandatory')
configAfaStatus = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAfaStatus.setStatus('mandatory')
configAfaFarEndLpbkDetect = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAfaFarEndLpbkDetect.setStatus('mandatory')
configPortCardType = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hsdp", 1), ("ethernet", 2), ("token-ring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPortCardType.setStatus('mandatory')
configHsdp = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 2, 5))
configHsdpMode = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v-35", 1), ("rs-422", 2), ("hssi", 3))).clone('hssi')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHsdpMode.setStatus('mandatory')
configHsdpCtsControl = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("no-bandwidth", 2), ("frequency-change", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHsdpCtsControl.setStatus('mandatory')
configHsdpCtsStatus = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("set", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configHsdpCtsStatus.setStatus('mandatory')
configHsdpTermTimingSource = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHsdpTermTimingSource.setStatus('mandatory')
configHsdpTermTiming = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHsdpTermTiming.setStatus('mandatory')
configHsdpRecvTiming = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHsdpRecvTiming.setStatus('mandatory')
configHsdpHoldoffSeconds = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sec1", 1), ("sec2", 2), ("sec3", 3), ("sec4", 4), ("sec5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHsdpHoldoffSeconds.setStatus('mandatory')
configHdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 2, 6))
configHdlcMode = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHdlcMode.setStatus('mandatory')
configHdlcLocalPort = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configHdlcLocalPort.setStatus('mandatory')
configHdlcFarEndPort = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configHdlcFarEndPort.setStatus('mandatory')
configInverseMux = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secondary", 1), ("primary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configInverseMux.setStatus('mandatory')
faultDs1 = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 3, 1))
faultDs1LoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 135, 22, 3, 1, 1), )
if mibBuilder.loadTexts: faultDs1LoopbackTable.setStatus('mandatory')
faultDs1LoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 135, 22, 3, 1, 1, 1), ).setIndexNames((0, "LX-10-MIB", "faultDs1LoopbackPort"))
if mibBuilder.loadTexts: faultDs1LoopbackEntry.setStatus('mandatory')
faultDs1LoopbackPort = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultDs1LoopbackPort.setStatus('mandatory')
faultDs1LoopbackNetworkLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("card", 2), ("line", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultDs1LoopbackNetworkLoopback.setStatus('mandatory')
faultDs1RemoteLineLoopback = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultDs1RemoteLineLoopback.setStatus('mandatory')
faultDte = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 3, 2))
faultDteLaLead = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("set", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultDteLaLead.setStatus('mandatory')
faultDteLbLead = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("set", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultDteLbLead.setStatus('mandatory')
faultDteLaLbTranslation = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local-line", 2), ("remote-line", 3), ("dte", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultDteLaLbTranslation.setStatus('mandatory')
faultDteLaLbLoopbackEnable = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultDteLaLbLoopbackEnable.setStatus('mandatory')
faultDteCustomerLoopback = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultDteCustomerLoopback.setStatus('mandatory')
faultDteDteLoopback = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultDteDteLoopback.setStatus('mandatory')
faultClearCurrentAlarms = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultClearCurrentAlarms.setStatus('mandatory')
faultClearHistoryAlarms = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultClearHistoryAlarms.setStatus('mandatory')
faultCurrentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 135, 22, 3, 5), )
if mibBuilder.loadTexts: faultCurrentAlarmTable.setStatus('mandatory')
faultCurrentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1), ).setIndexNames((0, "LX-10-MIB", "faultCurrentAlarmTag"))
if mibBuilder.loadTexts: faultCurrentAlarmEntry.setStatus('mandatory')
faultCurrentAlarmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultCurrentAlarmTag.setStatus('mandatory')
faultCurrentAlarmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77))).clone(namedValues=NamedValues(("ds1-net-card-lpbk", 1), ("ds1-net-line-lpbk", 2), ("la-lb-dte-lpbk", 3), ("la-lb-local-lpbk", 4), ("la-lb-remote-lpbk", 5), ("remote-line-lpbk", 6), ("dte-lpbk", 7), ("customer-lpbk", 8), ("dte-clk-loss", 9), ("hsdc-ga-oof", 10), ("pll-fail", 11), ("card-fail", 12), ("ds1-los", 13), ("ds1-oof", 14), ("ds1-ais", 15), ("ds1-yel", 16), ("fan1-failed", 17), ("fan2-failed", 18), ("trunk-card-config-mismatch", 19), ("cim-card-config-mismatch", 20), ("cpu-restarted", 21), ("port-alarms-cleared", 22), ("all-alarms-cleared", 23), ("ds1-afa-alarm", 24), ("alarm-history-cleared", 25), ("p1-connected-to-p2", 26), ("p1-connected-to-p3", 27), ("p1-connected-to-p4", 28), ("p1-connected-to-p5", 29), ("p1-connected-to-p6", 30), ("p1-connected-to-p7", 31), ("p2-connected-to-p1", 32), ("p2-connected-to-p3", 33), ("p2-connected-to-p4", 34), ("p2-connected-to-p5", 35), ("p2-connected-to-p6", 36), ("p2-connected-to-p7", 37), ("p3-connected-to-p1", 38), ("p3-connected-to-p2", 39), ("p3-connected-to-p4", 40), ("p3-connected-to-p5", 41), ("p3-connected-to-p6", 42), ("p3-connected-to-p7", 43), ("p4-connected-to-p1", 44), ("p4-connected-to-p2", 45), ("p4-connected-to-p3", 46), ("p4-connected-to-p5", 47), ("p4-connected-to-p6", 48), ("p4-connected-to-p7", 49), ("p5-connected-to-p1", 50), ("p5-connected-to-p2", 51), ("p5-connected-to-p3", 52), ("p5-connected-to-p4", 53), ("p5-connected-to-p6", 54), ("p5-connected-to-p7", 55), ("p6-connected-to-p1", 56), ("p6-connected-to-p2", 57), ("p6-connected-to-p3", 58), ("p6-connected-to-p4", 59), ("p6-connected-to-p5", 60), ("p6-connected-to-p7", 61), ("p7-connected-to-p1", 62), ("p7-connected-to-p2", 63), ("p7-connected-to-p3", 64), ("p7-connected-to-p4", 65), ("p7-connected-to-p5", 66), ("p7-connected-to-p6", 67), ("alarm1-in", 68), ("alarm2-in", 69), ("alarm3-in", 70), ("hdlc-unlocked", 71), ("far-end-loopback", 72), ("remote-afa", 73), ("att-fdl-loopback", 74), ("inband-loopback", 75), ("t1-link-down", 76), ("ports-out-of-sequence", 77)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultCurrentAlarmAlarmType.setStatus('mandatory')
faultCurrentAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultCurrentAlarmSeverity.setStatus('mandatory')
faultCurrentAlarmCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hsdp", 1), ("ethernet", 2), ("token-ring", 3), ("ds1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultCurrentAlarmCardType.setStatus('mandatory')
faultCurrentAlarmPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultCurrentAlarmPortNumber.setStatus('mandatory')
faultCurrentAlarmSetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1, 6), TimeAndDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultCurrentAlarmSetTime.setStatus('mandatory')
faultCurrentAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultCurrentAlarmDescription.setStatus('mandatory')
faultHistoryAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 135, 22, 3, 6), )
if mibBuilder.loadTexts: faultHistoryAlarmTable.setStatus('mandatory')
faultHistoryAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1), ).setIndexNames((0, "LX-10-MIB", "faultHistoryAlarmTag"))
if mibBuilder.loadTexts: faultHistoryAlarmEntry.setStatus('mandatory')
faultHistoryAlarmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmTag.setStatus('mandatory')
faultHistoryAlarmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77))).clone(namedValues=NamedValues(("ds1-net-card-lpbk", 1), ("ds1-net-line-lpbk", 2), ("la-lb-dte-lpbk", 3), ("la-lb-local-lpbk", 4), ("la-lb-remote-lpbk", 5), ("remote-line-lpbk", 6), ("dte-lpbk", 7), ("customer-lpbk", 8), ("dte-clk-loss", 9), ("hsdc-ga-oof", 10), ("pll-fail", 11), ("card-fail", 12), ("ds1-los", 13), ("ds1-oof", 14), ("ds1-ais", 15), ("ds1-yel", 16), ("fan1-failed", 17), ("fan2-failed", 18), ("trunk-card-config-mismatch", 19), ("cim-card-config-mismatch", 20), ("cpu-restarted", 21), ("port-alarms-cleared", 22), ("all-alarms-cleared", 23), ("ds1-afa-alarm", 24), ("alarm-history-cleared", 25), ("p1-connected-to-p2", 26), ("p1-connected-to-p3", 27), ("p1-connected-to-p4", 28), ("p1-connected-to-p5", 29), ("p1-connected-to-p6", 30), ("p1-connected-to-p7", 31), ("p2-connected-to-p1", 32), ("p2-connected-to-p3", 33), ("p2-connected-to-p4", 34), ("p2-connected-to-p5", 35), ("p2-connected-to-p6", 36), ("p2-connected-to-p7", 37), ("p3-connected-to-p1", 38), ("p3-connected-to-p2", 39), ("p3-connected-to-p4", 40), ("p3-connected-to-p5", 41), ("p3-connected-to-p6", 42), ("p3-connected-to-p7", 43), ("p4-connected-to-p1", 44), ("p4-connected-to-p2", 45), ("p4-connected-to-p3", 46), ("p4-connected-to-p5", 47), ("p4-connected-to-p6", 48), ("p4-connected-to-p7", 49), ("p5-connected-to-p1", 50), ("p5-connected-to-p2", 51), ("p5-connected-to-p3", 52), ("p5-connected-to-p4", 53), ("p5-connected-to-p6", 54), ("p5-connected-to-p7", 55), ("p6-connected-to-p1", 56), ("p6-connected-to-p2", 57), ("p6-connected-to-p3", 58), ("p6-connected-to-p4", 59), ("p6-connected-to-p5", 60), ("p6-connected-to-p7", 61), ("p7-connected-to-p1", 62), ("p7-connected-to-p2", 63), ("p7-connected-to-p3", 64), ("p7-connected-to-p4", 65), ("p7-connected-to-p5", 66), ("p7-connected-to-p6", 67), ("alarm1-in", 68), ("alarm2-in", 69), ("alarm3-in", 70), ("hdlc-unlocked", 71), ("far-end-loopback", 72), ("remote-afa", 73), ("att-fdl-loopback", 74), ("inband-loopback", 75), ("t1-link-down", 76), ("ports-out-of-sequence", 77)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmAlarmType.setStatus('mandatory')
faultHistoryAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("info", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmSeverity.setStatus('mandatory')
faultHistoryAlarmCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hsdp", 1), ("ethernet", 2), ("token-ring", 3), ("ds1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmCardType.setStatus('mandatory')
faultHistoryAlarmPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmPortNumber.setStatus('mandatory')
faultHistoryAlarmSetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 6), TimeAndDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmSetTime.setStatus('mandatory')
faultHistoryAlarmClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 7), TimeAndDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmClearTime.setStatus('mandatory')
faultHistoryAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 135, 22, 3, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultHistoryAlarmDescription.setStatus('mandatory')
perfClearDs1Performance = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfClearDs1Performance.setStatus('mandatory')
perfClearEnetPortCardStats = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfClearEnetPortCardStats.setStatus('mandatory')
enetPortCardStats = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 4, 3))
enetPortCardStatsFramesReceived = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsFramesReceived.setStatus('mandatory')
enetPortCardStatsBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsBytesReceived.setStatus('mandatory')
enetPortCardStatsFramesTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsFramesTransmitted.setStatus('mandatory')
enetPortCardStatsBytesTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsBytesTransmitted.setStatus('mandatory')
enetPortCardStatsAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsAlignmentErrors.setStatus('mandatory')
enetPortCardStatsFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsFCSErrors.setStatus('mandatory')
enetPortCardStatsSingleCollisionFrames = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsSingleCollisionFrames.setStatus('mandatory')
enetPortCardStatsMultipleCollisionFrames = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsMultipleCollisionFrames.setStatus('mandatory')
enetPortCardStatsDeferredTransmissions = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsDeferredTransmissions.setStatus('mandatory')
enetPortCardStatsLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsLateCollisions.setStatus('mandatory')
enetPortCardStatsExcessiveCollisions = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsExcessiveCollisions.setStatus('mandatory')
enetPortCardStatsInternalMacTransmitErrors = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsInternalMacTransmitErrors.setStatus('mandatory')
enetPortCardStatsCarrierSenseErrors = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsCarrierSenseErrors.setStatus('mandatory')
enetPortCardStatsFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetPortCardStatsFrameTooLongs.setStatus('mandatory')
perfClearNxT1PortStats = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfClearNxT1PortStats.setStatus('mandatory')
nxt1PortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 135, 22, 4, 5))
nxt1PortStatsFramesReceived = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nxt1PortStatsFramesReceived.setStatus('mandatory')
nxt1PortStatsBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nxt1PortStatsBytesReceived.setStatus('mandatory')
nxt1PortStatsFramesTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nxt1PortStatsFramesTransmitted.setStatus('mandatory')
nxt1PortStatsBytesTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nxt1PortStatsBytesTransmitted.setStatus('mandatory')
nxt1PortStatsCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 135, 22, 4, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nxt1PortStatsCrcErrors.setStatus('mandatory')
alarmOnReport = NotificationType((1, 3, 6, 1, 4, 1, 135, 22) + (0,1)).setObjects(("LX-10-MIB", "faultCurrentAlarmAlarmType"), ("LX-10-MIB", "faultCurrentAlarmSeverity"), ("LX-10-MIB", "faultCurrentAlarmCardType"), ("LX-10-MIB", "faultCurrentAlarmPortNumber"), ("LX-10-MIB", "faultCurrentAlarmSetTime"), ("LX-10-MIB", "faultCurrentAlarmDescription"))
alarmOffReport = NotificationType((1, 3, 6, 1, 4, 1, 135, 22) + (0,2)).setObjects(("LX-10-MIB", "faultHistoryAlarmAlarmType"), ("LX-10-MIB", "faultHistoryAlarmSeverity"), ("LX-10-MIB", "faultHistoryAlarmCardType"), ("LX-10-MIB", "faultHistoryAlarmPortNumber"), ("LX-10-MIB", "faultHistoryAlarmSetTime"), ("LX-10-MIB", "faultHistoryAlarmClearTime"), ("LX-10-MIB", "faultHistoryAlarmDescription"))
mibBuilder.exportSymbols("LX-10-MIB", faultHistoryAlarmTag=faultHistoryAlarmTag, sysIpConfigTrapClientEntry=sysIpConfigTrapClientEntry, sysRs232BaudRate=sysRs232BaudRate, configDs1Timing=configDs1Timing, onstream=onstream, configDs1AdminStatus=configDs1AdminStatus, faultDteLaLead=faultDteLaLead, alarmOnReport=alarmOnReport, configHdlcLocalPort=configHdlcLocalPort, TimeAndDate=TimeAndDate, sysMainProcessorFirmwareRev=sysMainProcessorFirmwareRev, configDs1Entry=configDs1Entry, sysPortCardFirmwareRev=sysPortCardFirmwareRev, faultDs1=faultDs1, sysIpConfigCommunityName=sysIpConfigCommunityName, faultCurrentAlarmPortNumber=faultCurrentAlarmPortNumber, config=config, faultDs1LoopbackPort=faultDs1LoopbackPort, configHdlcMode=configHdlcMode, nxt1PortStatsBytesTransmitted=nxt1PortStatsBytesTransmitted, lx_10=lx_10, sysRs232Entry=sysRs232Entry, faultCurrentAlarmTag=faultCurrentAlarmTag, alarmOffReport=alarmOffReport, sysIpConfigHostInterfaceEntry=sysIpConfigHostInterfaceEntry, configHsdpTermTiming=configHsdpTermTiming, configHsdpCtsControl=configHsdpCtsControl, sysRs232DataBits=sysRs232DataBits, configHsdp=configHsdp, nxt1PortStatsFramesReceived=nxt1PortStatsFramesReceived, configDs1Table=configDs1Table, faultCurrentAlarmTable=faultCurrentAlarmTable, configAfaActivationRate=configAfaActivationRate, configAfaDeactivationRate=configAfaDeactivationRate, configDs1XmtAis=configDs1XmtAis, configDs1LBO=configDs1LBO, configHsdpCtsStatus=configHsdpCtsStatus, configHsdpMode=configHsdpMode, perfClearNxT1PortStats=perfClearNxT1PortStats, faultDteLbLead=faultDteLbLead, configDs1OperStatus=configDs1OperStatus, nxt1PortStatsCrcErrors=nxt1PortStatsCrcErrors, faultCurrentAlarmEntry=faultCurrentAlarmEntry, faultDteDteLoopback=faultDteDteLoopback, sysIpConfigDefaultGatewayIpAddress=sysIpConfigDefaultGatewayIpAddress, faultCurrentAlarmDescription=faultCurrentAlarmDescription, sysIpConfigHostInterfaceIndex=sysIpConfigHostInterfaceIndex, configAfaActivationTime=configAfaActivationTime, sysRs232Table=sysRs232Table, perfClearDs1Performance=perfClearDs1Performance, faultDs1LoopbackEntry=faultDs1LoopbackEntry, faultHistoryAlarmAlarmType=faultHistoryAlarmAlarmType, sysIpConfigHostInterfaceSubnetMask=sysIpConfigHostInterfaceSubnetMask, sysIpConfigTrapClientIpAddress=sysIpConfigTrapClientIpAddress, configDs1Port=configDs1Port, faultClearHistoryAlarms=faultClearHistoryAlarms, enetPortCardStatsBytesTransmitted=enetPortCardStatsBytesTransmitted, sysGenInfoShelfId=sysGenInfoShelfId, sysIpConfigHostInterfaceTable=sysIpConfigHostInterfaceTable, faultCurrentAlarmSetTime=faultCurrentAlarmSetTime, enetPortCardStatsBytesReceived=enetPortCardStatsBytesReceived, configAfaFarEndLpbkDetect=configAfaFarEndLpbkDetect, perf=perf, enetPortCardStatsInternalMacTransmitErrors=enetPortCardStatsInternalMacTransmitErrors, configAfaDeactivationTime=configAfaDeactivationTime, enetPortCardStatsSingleCollisionFrames=enetPortCardStatsSingleCollisionFrames, nxt1PortStatsBytesReceived=nxt1PortStatsBytesReceived, configAfa=configAfa, faultCurrentAlarmSeverity=faultCurrentAlarmSeverity, perfClearEnetPortCardStats=perfClearEnetPortCardStats, configHdlcFarEndPort=configHdlcFarEndPort, configDs1Framing=configDs1Framing, enetPortCardStatsExcessiveCollisions=enetPortCardStatsExcessiveCollisions, sysGenInfoMaintenanceContact=sysGenInfoMaintenanceContact, configHsdpRecvTiming=configHsdpRecvTiming, sysIpConfigHostInterfaceIpAddress=sysIpConfigHostInterfaceIpAddress, faultHistoryAlarmCardType=faultHistoryAlarmCardType, faultHistoryAlarmSetTime=faultHistoryAlarmSetTime, configHsdpTermTimingSource=configHsdpTermTimingSource, sysTimeAndDate=sysTimeAndDate, fault=fault, sysGenInfoCustomerName=sysGenInfoCustomerName, enetPortCardStatsDeferredTransmissions=enetPortCardStatsDeferredTransmissions, faultDs1RemoteLineLoopback=faultDs1RemoteLineLoopback, sys=sys, configAfaStatus=configAfaStatus, faultDteLaLbTranslation=faultDteLaLbTranslation, enetPortCardStatsAlignmentErrors=enetPortCardStatsAlignmentErrors, sysRs232Port=sysRs232Port, sysRs232StopBits=sysRs232StopBits, configHsdpHoldoffSeconds=configHsdpHoldoffSeconds, sysIpConfigMacAddress=sysIpConfigMacAddress, sysRs232Parity=sysRs232Parity, faultCurrentAlarmCardType=faultCurrentAlarmCardType, sysIpConfigTrapClientPortNumber=sysIpConfigTrapClientPortNumber, sysIpConfigTrapClientIndex=sysIpConfigTrapClientIndex, faultDte=faultDte, faultDteLaLbLoopbackEnable=faultDteLaLbLoopbackEnable, faultHistoryAlarmPortNumber=faultHistoryAlarmPortNumber, sysGenInfoShelfName=sysGenInfoShelfName, faultDs1LoopbackNetworkLoopback=faultDs1LoopbackNetworkLoopback, faultDteCustomerLoopback=faultDteCustomerLoopback, sysIpConfigHostInterfaceXmtRoutingMsg=sysIpConfigHostInterfaceXmtRoutingMsg, nxt1PortStatsFramesTransmitted=nxt1PortStatsFramesTransmitted, sysIpConfigDefaultGateway=sysIpConfigDefaultGateway, enetPortCardStatsFramesReceived=enetPortCardStatsFramesReceived, sysIpConfigTrapClientSubnetMask=sysIpConfigTrapClientSubnetMask, faultHistoryAlarmDescription=faultHistoryAlarmDescription, sysIpConfig=sysIpConfig, configPortCardType=configPortCardType, faultHistoryAlarmTable=faultHistoryAlarmTable, nxt1PortStats=nxt1PortStats, sysGenInfoLocation=sysGenInfoLocation, sysIpConfigDefaultGatewaySubnetMask=sysIpConfigDefaultGatewaySubnetMask, sysGenInfoAutoLogoutTime=sysGenInfoAutoLogoutTime, faultClearCurrentAlarms=faultClearCurrentAlarms, faultHistoryAlarmEntry=faultHistoryAlarmEntry, sysGenInfoPassword=sysGenInfoPassword, sysIpConfigTrapClientTable=sysIpConfigTrapClientTable, enetPortCardStatsFramesTransmitted=enetPortCardStatsFramesTransmitted, configHdlc=configHdlc, sysGenInfoPhoneNumber=sysGenInfoPhoneNumber, faultHistoryAlarmSeverity=faultHistoryAlarmSeverity, faultDs1LoopbackTable=faultDs1LoopbackTable, configInverseMux=configInverseMux, enetPortCardStatsMultipleCollisionFrames=enetPortCardStatsMultipleCollisionFrames, faultHistoryAlarmClearTime=faultHistoryAlarmClearTime, enetPortCardStatsLateCollisions=enetPortCardStatsLateCollisions, enetPortCardStatsFrameTooLongs=enetPortCardStatsFrameTooLongs, sysGenInfo=sysGenInfo, configDs1Encoding=configDs1Encoding, faultCurrentAlarmAlarmType=faultCurrentAlarmAlarmType, enetPortCardStats=enetPortCardStats, enetPortCardStatsFCSErrors=enetPortCardStatsFCSErrors, enetPortCardStatsCarrierSenseErrors=enetPortCardStatsCarrierSenseErrors)
