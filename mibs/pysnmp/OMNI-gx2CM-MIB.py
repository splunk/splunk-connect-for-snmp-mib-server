#
# PySNMP MIB module OMNI-gx2CM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2CM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
gx2Cm, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Cm")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNETrapLastTrapTimeStamp, trapNetworkElemModelNumber, trapNetworkElemAvailStatus, trapChangedValueDisplayString, trapChangedValueInteger, trapNetworkElemSerialNum, trapNetworkElemOperState, trapNetworkElemAdminState, trapChangedObjectId, trapText, trapIdentifier, trapNetworkElemAlarmStatus, trapPerceivedSeverity = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp", "trapNetworkElemModelNumber", "trapNetworkElemAvailStatus", "trapChangedValueDisplayString", "trapChangedValueInteger", "trapNetworkElemSerialNum", "trapNetworkElemOperState", "trapNetworkElemAdminState", "trapChangedObjectId", "trapText", "trapIdentifier", "trapNetworkElemAlarmStatus", "trapPerceivedSeverity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
iso, IpAddress, Unsigned32, MibIdentifier, Counter64, Integer32, Counter32, NotificationType, TimeTicks, Bits, ModuleIdentity, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Unsigned32", "MibIdentifier", "Counter64", "Integer32", "Counter32", "NotificationType", "TimeTicks", "Bits", "ModuleIdentity", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2cmDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 1))
gx2cmFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2), )
if mibBuilder.loadTexts: gx2cmFactoryTable.setStatus('mandatory')
gx2cmFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmFactoryTableIndex"))
if mibBuilder.loadTexts: gx2cmFactoryEntry.setStatus('mandatory')
gx2cmNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3), )
if mibBuilder.loadTexts: gx2cmNetworkTable.setStatus('mandatory')
gx2cmNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmNetworkTableIndex"))
if mibBuilder.loadTexts: gx2cmNetworkEntry.setStatus('mandatory')
gx2cmAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4), )
if mibBuilder.loadTexts: gx2cmAnalogTable.setStatus('mandatory')
gx2cmAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmTableIndex"))
if mibBuilder.loadTexts: gx2cmAnalogEntry.setStatus('mandatory')
gx2cmDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5), )
if mibBuilder.loadTexts: gx2cmDigitalTable.setStatus('mandatory')
gx2cmDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmDigitalTableIndex"))
if mibBuilder.loadTexts: gx2cmDigitalEntry.setStatus('mandatory')
gx2cmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6), )
if mibBuilder.loadTexts: gx2cmStatusTable.setStatus('mandatory')
gx2cmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmStatusTableIndex"))
if mibBuilder.loadTexts: gx2cmStatusEntry.setStatus('mandatory')
gx2cmAMCTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7), )
if mibBuilder.loadTexts: gx2cmAMCTable.setStatus('mandatory')
gx2cmAMCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmAMCTableIndex"))
if mibBuilder.loadTexts: gx2cmAMCEntry.setStatus('mandatory')
gx2cmSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8), )
if mibBuilder.loadTexts: gx2cmSecurityTable.setStatus('mandatory')
gx2cmSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmSecurityTableIndex"))
if mibBuilder.loadTexts: gx2cmSecurityEntry.setStatus('mandatory')
gx2cmDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9), )
if mibBuilder.loadTexts: gx2cmDiagnosticTable.setStatus('mandatory')
gx2cmDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmDiagnosticTableIndex"))
if mibBuilder.loadTexts: gx2cmDiagnosticEntry.setStatus('mandatory')
gx2cmDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10), )
if mibBuilder.loadTexts: gx2cmDownloadTable.setStatus('mandatory')
gx2cmDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmDownloadTableIndex"))
if mibBuilder.loadTexts: gx2cmDownloadEntry.setStatus('mandatory')
cmTrapHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11), )
if mibBuilder.loadTexts: cmTrapHistoryTable.setStatus('mandatory')
cmTrapHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10), ).setIndexNames((0, "OMNI-gx2CM-MIB", "cmTrapHistoryTableIndex"))
if mibBuilder.loadTexts: cmTrapHistoryEntry.setStatus('mandatory')
gx2cmTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmTableIndex.setStatus('mandatory')
labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelModTemp.setStatus('optional')
uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomModTemp.setStatus('optional')
majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighModTemp.setStatus('mandatory')
majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowModTemp.setStatus('mandatory')
minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighModTemp.setStatus('mandatory')
minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowModTemp.setStatus('mandatory')
currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueModTemp.setStatus('mandatory')
stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagModTemp.setStatus('mandatory')
minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueModTemp.setStatus('optional')
maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueModTemp.setStatus('optional')
alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateModTemp.setStatus('mandatory')
gx2cmDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmDigitalTableIndex.setStatus('mandatory')
labelRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelRemoteLocal.setStatus('obsolete')
enumRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumRemoteLocal.setStatus('obsolete')
valueRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueRemoteLocal.setStatus('obsolete')
stateFlagRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagRemoteLocal.setStatus('obsolete')
labelResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelResetSlot.setStatus('optional')
enumResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumResetSlot.setStatus('optional')
valueResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueResetSlot.setStatus('mandatory')
stateResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateResetSlot.setStatus('mandatory')
labelIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelIdShelf.setStatus('optional')
enumIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumIdShelf.setStatus('optional')
valueIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueIdShelf.setStatus('mandatory')
stateFlagIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagIdShelf.setStatus('mandatory')
labelResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelResetAlarm.setStatus('optional')
enumResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumResetAlarm.setStatus('optional')
valueResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueResetAlarm.setStatus('mandatory')
stateFlagResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagResetAlarm.setStatus('mandatory')
gx2cmStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmStatusTableIndex.setStatus('mandatory')
labelShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelShelfAlarm.setStatus('optional')
valueShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueShelfAlarm.setStatus('mandatory')
stateShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateShelfAlarm.setStatus('mandatory')
labelDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelDataCrc.setStatus('optional')
valueDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueDataCrc.setStatus('mandatory')
stateDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateDataCrc.setStatus('mandatory')
labelFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFlashStatus.setStatus('optional')
valueFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueFlashStatus.setStatus('mandatory')
stateFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlashStatus.setStatus('mandatory')
labelBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelBootStatus.setStatus('optional')
valueBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueBootStatus.setStatus('mandatory')
stateBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateBootStatus.setStatus('mandatory')
labelAlmLimCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelAlmLimCrc.setStatus('optional')
valueAlmLimCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueAlmLimCrc.setStatus('mandatory')
stateAlmLimCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateAlmLimCrc.setStatus('mandatory')
gx2cmFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmFactoryTableIndex.setStatus('mandatory')
bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootControlByte.setStatus('mandatory')
bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootStatusByte.setStatus('mandatory')
bank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bank0CRC.setStatus('mandatory')
bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bank1CRC.setStatus('mandatory')
prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prgEEPROMByte.setStatus('mandatory')
factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryCRC.setStatus('mandatory')
calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calculateCRC.setStatus('mandatory')
hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourMeter.setStatus('mandatory')
flashPrgCnt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPrgCnt0.setStatus('mandatory')
flashPrgCnt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPrgCnt1.setStatus('mandatory')
flashBank0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashBank0.setStatus('mandatory')
flashBank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashBank1.setStatus('mandatory')
localMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localMacAdd.setStatus('mandatory')
netWorkMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netWorkMacAdd.setStatus('mandatory')
gx2cmNetworkTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmNetworkTableIndex.setStatus('mandatory')
labelLocalEthIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLocalEthIPAdd.setStatus('optional')
valueLocalEthIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueLocalEthIPAdd.setStatus('mandatory')
labelLocalEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLocalEthMask.setStatus('optional')
valueLocalEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueLocalEthMask.setStatus('mandatory')
labelNetworkEthAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelNetworkEthAdd.setStatus('optional')
valueNetworkEthAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueNetworkEthAdd.setStatus('mandatory')
labelNetworkEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelNetworkEthMask.setStatus('optional')
valueNetworkEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueNetworkEthMask.setStatus('mandatory')
labelShelfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelShelfSerialNum.setStatus('optional')
valueShelfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueShelfSerialNum.setStatus('mandatory')
labelGateWayIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelGateWayIPAdd.setStatus('optional')
valueGateWayIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueGateWayIPAdd.setStatus('mandatory')
labelTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrapDestination.setStatus('optional')
valueTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrapDestination.setStatus('mandatory')
labelTFTPserver = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTFTPserver.setStatus('optional')
valueTFTPserver = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTFTPserver.setStatus('mandatory')
labelTrap2Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap2Destination.setStatus('optional')
valueTrap2Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap2Destination.setStatus('mandatory')
labelTrap3Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap3Destination.setStatus('optional')
valueTrap3Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap3Destination.setStatus('mandatory')
labelTrap4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap4Destination.setStatus('optional')
valueTrap4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap4Destination.setStatus('mandatory')
labelTrap5Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap5Destination.setStatus('optional')
valueTrap5Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap5Destination.setStatus('mandatory')
labelISDNMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNMode.setStatus('optional')
valueISDNMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNMode.setStatus('mandatory')
labelISDNModemIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNModemIPAddress.setStatus('optional')
valueISDNModemIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNModemIPAddress.setStatus('mandatory')
labelISDNTrapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNTrapTimeout.setStatus('optional')
valueISDNTrapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNTrapTimeout.setStatus('mandatory')
labelISDNPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNPingTimeout.setStatus('optional')
valueISDNPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNPingTimeout.setStatus('mandatory')
labelISDNBackoffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNBackoffTimer.setStatus('optional')
valueISDNBackoffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNBackoffTimer.setStatus('mandatory')
gx2cmSecurityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmSecurityTableIndex.setStatus('mandatory')
labelSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelSecurityMode.setStatus('optional')
enumSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumSecurityMode.setStatus('optional')
valueSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("read-only", 1), ("operator-access", 2), ("factory-access", 3), ("remote-write-only", 4), ("local-write-only", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueSecurityMode.setStatus('mandatory')
stateSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateSecurityMode.setStatus('mandatory')
labelPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelPassword.setStatus('optional')
valuePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuePassword.setStatus('mandatory')
statePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statePassword.setStatus('mandatory')
labelFactoryChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFactoryChgString.setStatus('optional')
valueFactoryChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueFactoryChgString.setStatus('mandatory')
stateFactoryChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFactoryChgString.setStatus('mandatory')
labelOperatorChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelOperatorChgString.setStatus('optional')
valueOperatorChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueOperatorChgString.setStatus('mandatory')
stateOperatorChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateOperatorChgString.setStatus('mandatory')
labelReadOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelReadOnlyChgString.setStatus('optional')
valueReadOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueReadOnlyChgString.setStatus('mandatory')
stateReadOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateReadOnlyChgString.setStatus('mandatory')
labelRemoteOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelRemoteOnlyChgString.setStatus('optional')
valueRemoteOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueRemoteOnlyChgString.setStatus('mandatory')
stateRemoteOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateRemoteOnlyChgString.setStatus('mandatory')
labelLocalOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLocalOnlyChgString.setStatus('optional')
valueLocalOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueLocalOnlyChgString.setStatus('mandatory')
stateLocalOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateLocalOnlyChgString.setStatus('mandatory')
gx2cmAMCTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmAMCTableIndex.setStatus('mandatory')
valueAMCslot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot1.setStatus('mandatory')
serialAMCslot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot1.setStatus('mandatory')
agentIDAMCslot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot1.setStatus('mandatory')
valueAMCslot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot2.setStatus('mandatory')
serialAMCslot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot2.setStatus('mandatory')
agentIDAMCslot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot2.setStatus('mandatory')
valueAMCslot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot3.setStatus('mandatory')
serialAMCslot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot3.setStatus('mandatory')
agentIDAMCslot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot3.setStatus('mandatory')
valueAMCslot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot4.setStatus('mandatory')
serialAMCslot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot4.setStatus('mandatory')
agentIDAMCslot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot4.setStatus('mandatory')
valueAMCslot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot5.setStatus('mandatory')
serialAMCslot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot5.setStatus('mandatory')
agentIDAMCslot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot5.setStatus('mandatory')
valueAMCslot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot6.setStatus('mandatory')
serialAMCslot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot6.setStatus('mandatory')
agentIDAMCslot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot6.setStatus('mandatory')
valueAMCslot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot7.setStatus('mandatory')
serialAMCslot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot7.setStatus('mandatory')
agentIDAMCslot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot7.setStatus('mandatory')
valueAMCslot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot8.setStatus('mandatory')
serialAMCslot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot8.setStatus('mandatory')
agentIDAMCslot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot8.setStatus('mandatory')
valueAMCslot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot9.setStatus('mandatory')
serialAMCslot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot9.setStatus('mandatory')
agentIDAMCslot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot9.setStatus('mandatory')
valueAMCslot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot10.setStatus('mandatory')
serialAMCslot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot10.setStatus('mandatory')
agentIDAMCslot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot10.setStatus('mandatory')
valueAMCslot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot11.setStatus('mandatory')
serialAMCslot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot11.setStatus('mandatory')
agentIDAMCslot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot11.setStatus('mandatory')
valueAMCslot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot12.setStatus('mandatory')
serialAMCslot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot12.setStatus('mandatory')
agentIDAMCslot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot12.setStatus('mandatory')
valueAMCslot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot13.setStatus('mandatory')
serialAMCslot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot13.setStatus('mandatory')
agentIDAMCslot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot13.setStatus('mandatory')
valueAMCslot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot14.setStatus('mandatory')
serialAMCslot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot14.setStatus('mandatory')
agentIDAMCslot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot14.setStatus('mandatory')
valueAMCslot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot15.setStatus('mandatory')
serialAMCslot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot15.setStatus('mandatory')
agentIDAMCslot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot15.setStatus('mandatory')
valueAMCslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot16.setStatus('mandatory')
serialAMCslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot16.setStatus('mandatory')
agentIDAMCslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot16.setStatus('mandatory')
valueAMCslot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot17.setStatus('mandatory')
serialAMCslot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot17.setStatus('mandatory')
agentIDAMCslot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot17.setStatus('mandatory')
valueAMCslot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot18.setStatus('mandatory')
serialAMCslot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot18.setStatus('mandatory')
agentIDAMCslot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot18.setStatus('mandatory')
autoQuickSwapCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("timeroff", 1), ("onehour", 2), ("oneday", 3), ("oneweek", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoQuickSwapCnt.setStatus('mandatory')
gx2cmDiagnosticTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmDiagnosticTableIndex.setStatus('mandatory')
ledTestValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledTestValue.setStatus('mandatory')
bpTestCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpTestCnt.setStatus('mandatory')
successTransSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot1.setStatus('mandatory')
successTransSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot2.setStatus('mandatory')
successTransSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot3.setStatus('mandatory')
successTransSlot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot4.setStatus('mandatory')
successTransSlot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot5.setStatus('mandatory')
successTransSlot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot6.setStatus('mandatory')
successTransSlot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot7.setStatus('mandatory')
successTransSlot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot8.setStatus('mandatory')
successTransSlot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot9.setStatus('mandatory')
successTransSlot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot10.setStatus('mandatory')
successTransSlot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot11.setStatus('mandatory')
successTransSlot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot12.setStatus('mandatory')
successTransSlot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot13.setStatus('mandatory')
successTransSlot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot14.setStatus('mandatory')
successTransSlot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot15.setStatus('mandatory')
successTransSlot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot16.setStatus('mandatory')
successTransSlot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot17.setStatus('mandatory')
successTransSlot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot18.setStatus('mandatory')
failureTransSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot1.setStatus('mandatory')
failureTransSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot2.setStatus('mandatory')
failureTransSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot3.setStatus('mandatory')
failureTransSlot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot4.setStatus('mandatory')
failureTransSlot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot5.setStatus('mandatory')
failureTransSlot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot6.setStatus('mandatory')
failureTransSlot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot7.setStatus('mandatory')
failureTransSlot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot8.setStatus('mandatory')
failureTransSlot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot9.setStatus('mandatory')
failureTransSlot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot10.setStatus('mandatory')
failureTransSlot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot11.setStatus('mandatory')
failureTransSlot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot12.setStatus('mandatory')
failureTransSlot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot13.setStatus('mandatory')
failureTransSlot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot14.setStatus('mandatory')
failureTransSlot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot15.setStatus('mandatory')
failureTransSlot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot16.setStatus('mandatory')
failureTransSlot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot17.setStatus('mandatory')
failureTransSlot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot18.setStatus('mandatory')
fanTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanTestMode.setStatus('mandatory')
fanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanControl.setStatus('mandatory')
relayTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayTestMode.setStatus('mandatory')
relayControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayControl.setStatus('mandatory')
slotPollMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotPollMode.setStatus('mandatory')
bootCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootCount.setStatus('mandatory')
objectTableData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectTableData.setStatus('mandatory')
setSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSysTime.setStatus('mandatory')
gx2cmDownloadTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmDownloadTableIndex.setStatus('mandatory')
downloadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadValue.setStatus('mandatory')
autoDownloadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivate", 1), ("activate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDownloadReset.setStatus('mandatory')
downloadFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadFilename.setStatus('mandatory')
downloadState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadState.setStatus('mandatory')
switchFwBank = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFwBank.setStatus('mandatory')
cmTrapHistoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapHistoryTableIndex.setStatus('mandatory')
netrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapId.setStatus('mandatory')
netrapNetworkElemModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemModelNumber.setStatus('mandatory')
netrapNetworkElemSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemSerialNum.setStatus('mandatory')
netrapPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapPerceivedSeverity.setStatus('mandatory')
netrapNetworkElemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemOperState.setStatus('mandatory')
netrapNetworkElemAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemAlarmStatus.setStatus('mandatory')
netrapNetworkElemAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemAdminState.setStatus('mandatory')
netrapNetworkElemAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemAvailStatus.setStatus('mandatory')
netrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapText.setStatus('mandatory')
netrapLastTrapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapLastTrapTimeStamp.setStatus('mandatory')
netrapChangedObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedObjectId.setStatus('mandatory')
netrapAdditionalInfoInteger1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapAdditionalInfoInteger1.setStatus('mandatory')
netrapAdditionalInfoInteger2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapAdditionalInfoInteger2.setStatus('mandatory')
netrapAdditionalInfoInteger3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapAdditionalInfoInteger3.setStatus('mandatory')
netrapChangedValueDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueDisplayString.setStatus('mandatory')
netrapChangedValueOID = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueOID.setStatus('mandatory')
netrapChangedValueIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueIpAddress.setStatus('mandatory')
netrapChangedValueInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueInteger.setStatus('mandatory')
trapCMConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapCMConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapCMModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapCMEEPROMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapCMFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapCMHardwareAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapCMInitEEPROMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapCMBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2CM-MIB", successTransSlot18=successTransSlot18, valueISDNPingTimeout=valueISDNPingTimeout, valueAMCslot11=valueAMCslot11, failureTransSlot4=failureTransSlot4, gx2cmNetworkTableIndex=gx2cmNetworkTableIndex, successTransSlot13=successTransSlot13, failureTransSlot13=failureTransSlot13, failureTransSlot16=failureTransSlot16, trapCMFlashAlarm=trapCMFlashAlarm, successTransSlot8=successTransSlot8, netrapChangedValueDisplayString=netrapChangedValueDisplayString, labelTrap2Destination=labelTrap2Destination, gx2cmStatusTable=gx2cmStatusTable, alarmStateModTemp=alarmStateModTemp, relayControl=relayControl, successTransSlot15=successTransSlot15, netrapNetworkElemModelNumber=netrapNetworkElemModelNumber, enumRemoteLocal=enumRemoteLocal, gx2cmDescriptor=gx2cmDescriptor, agentIDAMCslot12=agentIDAMCslot12, valueLocalEthIPAdd=valueLocalEthIPAdd, valueNetworkEthAdd=valueNetworkEthAdd, netrapNetworkElemSerialNum=netrapNetworkElemSerialNum, valueIdShelf=valueIdShelf, gx2cmDigitalEntry=gx2cmDigitalEntry, netrapId=netrapId, gx2cmDigitalTableIndex=gx2cmDigitalTableIndex, serialAMCslot18=serialAMCslot18, bootCount=bootCount, factoryCRC=factoryCRC, stateFlagResetAlarm=stateFlagResetAlarm, labelTFTPserver=labelTFTPserver, trapCMConfigChangeInteger=trapCMConfigChangeInteger, agentIDAMCslot1=agentIDAMCslot1, enumIdShelf=enumIdShelf, minorHighModTemp=minorHighModTemp, successTransSlot2=successTransSlot2, flashPrgCnt0=flashPrgCnt0, autoDownloadReset=autoDownloadReset, trapCMInitEEPROMAlarm=trapCMInitEEPROMAlarm, labelTrap5Destination=labelTrap5Destination, majorLowModTemp=majorLowModTemp, gx2cmSecurityEntry=gx2cmSecurityEntry, gx2cmAMCTable=gx2cmAMCTable, currentValueModTemp=currentValueModTemp, successTransSlot1=successTransSlot1, serialAMCslot4=serialAMCslot4, serialAMCslot8=serialAMCslot8, valueResetSlot=valueResetSlot, enumSecurityMode=enumSecurityMode, successTransSlot10=successTransSlot10, switchFwBank=switchFwBank, stateOperatorChgString=stateOperatorChgString, agentIDAMCslot15=agentIDAMCslot15, hourMeter=hourMeter, stateBootStatus=stateBootStatus, valueTrap3Destination=valueTrap3Destination, valueISDNBackoffTimer=valueISDNBackoffTimer, stateFlagIdShelf=stateFlagIdShelf, labelReadOnlyChgString=labelReadOnlyChgString, netrapNetworkElemAvailStatus=netrapNetworkElemAvailStatus, gx2cmDiagnosticTableIndex=gx2cmDiagnosticTableIndex, failureTransSlot2=failureTransSlot2, labelTrap3Destination=labelTrap3Destination, gx2cmDownloadTableIndex=gx2cmDownloadTableIndex, autoQuickSwapCnt=autoQuickSwapCnt, netrapLastTrapTimeStamp=netrapLastTrapTimeStamp, labelLocalOnlyChgString=labelLocalOnlyChgString, valueAMCslot4=valueAMCslot4, labelRemoteLocal=labelRemoteLocal, serialAMCslot2=serialAMCslot2, agentIDAMCslot11=agentIDAMCslot11, labelISDNTrapTimeout=labelISDNTrapTimeout, valueISDNTrapTimeout=valueISDNTrapTimeout, valueAMCslot17=valueAMCslot17, valueAMCslot16=valueAMCslot16, failureTransSlot7=failureTransSlot7, trapCMConfigChangeDisplayString=trapCMConfigChangeDisplayString, valueTrap2Destination=valueTrap2Destination, gx2cmAMCEntry=gx2cmAMCEntry, valueAMCslot3=valueAMCslot3, valueResetAlarm=valueResetAlarm, labelModTemp=labelModTemp, valueReadOnlyChgString=valueReadOnlyChgString, valueAMCslot7=valueAMCslot7, valueAMCslot6=valueAMCslot6, labelResetAlarm=labelResetAlarm, calculateCRC=calculateCRC, Float=Float, stateShelfAlarm=stateShelfAlarm, stateFactoryChgString=stateFactoryChgString, serialAMCslot9=serialAMCslot9, agentIDAMCslot13=agentIDAMCslot13, successTransSlot3=successTransSlot3, failureTransSlot15=failureTransSlot15, downloadValue=downloadValue, netrapPerceivedSeverity=netrapPerceivedSeverity, serialAMCslot17=serialAMCslot17, stateLocalOnlyChgString=stateLocalOnlyChgString, labelFactoryChgString=labelFactoryChgString, agentIDAMCslot3=agentIDAMCslot3, netrapNetworkElemOperState=netrapNetworkElemOperState, gx2cmStatusEntry=gx2cmStatusEntry, gx2cmNetworkTable=gx2cmNetworkTable, netrapChangedValueInteger=netrapChangedValueInteger, valueAMCslot14=valueAMCslot14, valueLocalEthMask=valueLocalEthMask, minValueModTemp=minValueModTemp, gx2cmDiagnosticTable=gx2cmDiagnosticTable, labelISDNMode=labelISDNMode, labelOperatorChgString=labelOperatorChgString, valueAMCslot13=valueAMCslot13, stateFlagModTemp=stateFlagModTemp, stateFlagRemoteLocal=stateFlagRemoteLocal, stateRemoteOnlyChgString=stateRemoteOnlyChgString, valueNetworkEthMask=valueNetworkEthMask, valueTrapDestination=valueTrapDestination, valuePassword=valuePassword, gx2cmSecurityTable=gx2cmSecurityTable, serialAMCslot7=serialAMCslot7, setSysTime=setSysTime, netrapNetworkElemAlarmStatus=netrapNetworkElemAlarmStatus, gx2cmTableIndex=gx2cmTableIndex, labelFlashStatus=labelFlashStatus, enumResetAlarm=enumResetAlarm, agentIDAMCslot10=agentIDAMCslot10, agentIDAMCslot17=agentIDAMCslot17, stateSecurityMode=stateSecurityMode, cmTrapHistoryEntry=cmTrapHistoryEntry, agentIDAMCslot7=agentIDAMCslot7, labelDataCrc=labelDataCrc, labelAlmLimCrc=labelAlmLimCrc, valueISDNMode=valueISDNMode, netrapText=netrapText, valueAMCslot15=valueAMCslot15, labelBootStatus=labelBootStatus, stateReadOnlyChgString=stateReadOnlyChgString, failureTransSlot9=failureTransSlot9, valueAMCslot1=valueAMCslot1, gx2cmNetworkEntry=gx2cmNetworkEntry, valueAMCslot9=valueAMCslot9, trapCMEEPROMAlarm=trapCMEEPROMAlarm, valueTFTPserver=valueTFTPserver, valueAMCslot12=valueAMCslot12, failureTransSlot17=failureTransSlot17, serialAMCslot10=serialAMCslot10, labelPassword=labelPassword, serialAMCslot13=serialAMCslot13, labelIdShelf=labelIdShelf, valueBootStatus=valueBootStatus, gx2cmStatusTableIndex=gx2cmStatusTableIndex, bootStatusByte=bootStatusByte, valueAMCslot2=valueAMCslot2, gx2cmFactoryEntry=gx2cmFactoryEntry, maxValueModTemp=maxValueModTemp, labelRemoteOnlyChgString=labelRemoteOnlyChgString, agentIDAMCslot18=agentIDAMCslot18, valueLocalOnlyChgString=valueLocalOnlyChgString, flashBank0=flashBank0, failureTransSlot6=failureTransSlot6, valueSecurityMode=valueSecurityMode, valueGateWayIPAdd=valueGateWayIPAdd, bank0CRC=bank0CRC, valueFlashStatus=valueFlashStatus, valueAMCslot18=valueAMCslot18, gx2cmDigitalTable=gx2cmDigitalTable, valueTrap5Destination=valueTrap5Destination, serialAMCslot5=serialAMCslot5, stateDataCrc=stateDataCrc, labelTrap4Destination=labelTrap4Destination, gx2cmFactoryTableIndex=gx2cmFactoryTableIndex, serialAMCslot16=serialAMCslot16, ledTestValue=ledTestValue, failureTransSlot3=failureTransSlot3, valueAMCslot8=valueAMCslot8, failureTransSlot5=failureTransSlot5, failureTransSlot10=failureTransSlot10, localMacAdd=localMacAdd, valueRemoteOnlyChgString=valueRemoteOnlyChgString, bank1CRC=bank1CRC, prgEEPROMByte=prgEEPROMByte, gx2cmDownloadEntry=gx2cmDownloadEntry, labelNetworkEthAdd=labelNetworkEthAdd, failureTransSlot14=failureTransSlot14, successTransSlot14=successTransSlot14, valueRemoteLocal=valueRemoteLocal, majorHighModTemp=majorHighModTemp, valueAMCslot5=valueAMCslot5, netrapNetworkElemAdminState=netrapNetworkElemAdminState, agentIDAMCslot5=agentIDAMCslot5, serialAMCslot12=serialAMCslot12, netrapAdditionalInfoInteger1=netrapAdditionalInfoInteger1, agentIDAMCslot4=agentIDAMCslot4, labelTrapDestination=labelTrapDestination, labelResetSlot=labelResetSlot, labelShelfAlarm=labelShelfAlarm, cmTrapHistoryTable=cmTrapHistoryTable, downloadFilename=downloadFilename, labelLocalEthIPAdd=labelLocalEthIPAdd, failureTransSlot18=failureTransSlot18, successTransSlot7=successTransSlot7, valueTrap4Destination=valueTrap4Destination, stateFlashStatus=stateFlashStatus, labelNetworkEthMask=labelNetworkEthMask, serialAMCslot6=serialAMCslot6, successTransSlot11=successTransSlot11, stateResetSlot=stateResetSlot, labelShelfSerialNum=labelShelfSerialNum, successTransSlot6=successTransSlot6, enumResetSlot=enumResetSlot, agentIDAMCslot6=agentIDAMCslot6, valueDataCrc=valueDataCrc, labelSecurityMode=labelSecurityMode, agentIDAMCslot14=agentIDAMCslot14, failureTransSlot11=failureTransSlot11, uomModTemp=uomModTemp, relayTestMode=relayTestMode, agentIDAMCslot9=agentIDAMCslot9, cmTrapHistoryTableIndex=cmTrapHistoryTableIndex, flashPrgCnt1=flashPrgCnt1, labelLocalEthMask=labelLocalEthMask, successTransSlot9=successTransSlot9, netrapAdditionalInfoInteger2=netrapAdditionalInfoInteger2, gx2cmFactoryTable=gx2cmFactoryTable, valueShelfAlarm=valueShelfAlarm, statePassword=statePassword, serialAMCslot1=serialAMCslot1, objectTableData=objectTableData, bootControlByte=bootControlByte, gx2cmAnalogTable=gx2cmAnalogTable, gx2cmDownloadTable=gx2cmDownloadTable, stateAlmLimCrc=stateAlmLimCrc, valueISDNModemIPAddress=valueISDNModemIPAddress, successTransSlot12=successTransSlot12, failureTransSlot12=failureTransSlot12, labelISDNPingTimeout=labelISDNPingTimeout, downloadState=downloadState, netrapChangedValueOID=netrapChangedValueOID, agentIDAMCslot16=agentIDAMCslot16, netWorkMacAdd=netWorkMacAdd, valueAlmLimCrc=valueAlmLimCrc, labelISDNModemIPAddress=labelISDNModemIPAddress, successTransSlot17=successTransSlot17, serialAMCslot14=serialAMCslot14, netrapChangedObjectId=netrapChangedObjectId, netrapAdditionalInfoInteger3=netrapAdditionalInfoInteger3, flashBank1=flashBank1, trapCMHardwareAlarm=trapCMHardwareAlarm, bpTestCnt=bpTestCnt, gx2cmAMCTableIndex=gx2cmAMCTableIndex, successTransSlot16=successTransSlot16, trapCMModuleTempAlarm=trapCMModuleTempAlarm, valueFactoryChgString=valueFactoryChgString, fanTestMode=fanTestMode)
mibBuilder.exportSymbols("OMNI-gx2CM-MIB", gx2cmSecurityTableIndex=gx2cmSecurityTableIndex, minorLowModTemp=minorLowModTemp, serialAMCslot3=serialAMCslot3, valueOperatorChgString=valueOperatorChgString, netrapChangedValueIpAddress=netrapChangedValueIpAddress, agentIDAMCslot2=agentIDAMCslot2, labelGateWayIPAdd=labelGateWayIPAdd, trapCMBootAlarm=trapCMBootAlarm, agentIDAMCslot8=agentIDAMCslot8, slotPollMode=slotPollMode, successTransSlot4=successTransSlot4, gx2cmAnalogEntry=gx2cmAnalogEntry, gx2cmDiagnosticEntry=gx2cmDiagnosticEntry, valueShelfSerialNum=valueShelfSerialNum, labelISDNBackoffTimer=labelISDNBackoffTimer, valueAMCslot10=valueAMCslot10, serialAMCslot11=serialAMCslot11, serialAMCslot15=serialAMCslot15, successTransSlot5=successTransSlot5, fanControl=fanControl, failureTransSlot8=failureTransSlot8, failureTransSlot1=failureTransSlot1)
