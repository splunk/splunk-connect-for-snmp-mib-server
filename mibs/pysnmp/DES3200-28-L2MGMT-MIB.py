#
# PySNMP MIB module DES3200-28-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES3200-28-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:25:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, ModuleIdentity, Unsigned32, iso, IpAddress, Gauge32, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "ModuleIdentity", "Unsigned32", "iso", "IpAddress", "Gauge32", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "NotificationType", "Counter32")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
des3200_28, = mibBuilder.importSymbols("SWPRIMGMT-DES3200-MIB", "des3200-28")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('1010040000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link, Inc.')
class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4))
swPortMirrorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 6))
swIGMPPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 12))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15))
swL2CosMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17))
swL2DhcpRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21))
swL2MultiFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23))
swL2DhcpLocalRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 24))
swL2FloodMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 1))
swL2DevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DevInfoFrontPanelLedStatus.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2))
swL2DevCtrlSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reboot", 2), ("save-config-and-reboot", 3), ("reboot-and-load-factory-default-config", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSystemReboot.setStatus('current')
swL2DevCtrlSystemIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSystemIP.setStatus('current')
swL2DevCtrlSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSubnetMask.setStatus('current')
swL2DevCtrlDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlDefaultGateway.setStatus('current')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 5), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlSnmpEnableAuthenTraps = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpEnableAuthenTraps.setStatus('current')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
swL2DevCtrlIpAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoConfig.setStatus('current')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
swL2IGMPSnoopingMulticastVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingMulticastVlanState.setStatus('current')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
swL2DevArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevArpAgingTime.setStatus('current')
swL2DevPasswordEncryptionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevPasswordEncryptionState.setStatus('current')
swL2DevCtrlCFM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 29))
swL2DevCtrlCFMState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setStatus('current')
swL2DevCtrlCFMPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 29, 2), )
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setStatus('current')
swL2DevCtrlCFMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 29, 2, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2DevCtrlCFMPortIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setStatus('current')
swL2DevCtrlCFMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 29, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setStatus('current')
swL2DevCtrlCFMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 29, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setStatus('current')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 30))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 2, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 3))
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DES3200-28-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("auto", 1), ("half-10Mbps", 2), ("full-10Mbps", 3), ("half-100Mbps", 4), ("full-100Mbps", 5), ("full-1Gigabps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
swL2PortInfoFlowCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ieee8023x", 2), ("backPressure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoFlowCtrlOperStatus.setStatus('current')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DES3200-28-L2MGMT-MIB", "swL2PortCtrlPortMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
swL2PortCtrlPortMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortMediumType.setStatus('current')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("nway-auto", 1), ("nway-disabled-10Mbps-Half", 2), ("nway-disabled-10Mbps-Full", 3), ("nway-disabled-100Mbps-Half", 4), ("nway-disabled-100Mbps-Full", 5), ("nway-disabled-1Gigabps-Full", 7), ("nway-disabled-1Gigabps-Full-Master", 8), ("nway-disabled-1Gigabps-Full-Slave", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
swL2PortCtrlDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlDescription.setStatus('current')
swL2PortCtrlAddressLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAddressLearning.setStatus('current')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
swL2PortCtrlMulticastfilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMulticastfilter.setStatus('current')
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
swL2PortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 3), )
if mibBuilder.loadTexts: swL2PortErrTable.setStatus('current')
swL2PortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 3, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2PortErrPortIndex"))
if mibBuilder.loadTexts: swL2PortErrEntry.setStatus('current')
swL2PortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortIndex.setStatus('current')
swL2PortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortState.setStatus('current')
swL2PortErrPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortStatus.setStatus('current')
swL2PortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("stp-lbd", 1), ("storm-control", 2), ("storm-control-lbd", 3), ("loopdetect", 4), ("ddm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortReason.setStatus('current')
swL2PortErrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrDescription.setStatus('current')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 2, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
swL2QOSSchedulingMaxWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxWeight.setStatus('current')
swL2QOSSchedulingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setStatus('current')
swL2QOSSchedulingMechanismCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("weightfair", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setStatus('current')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 3, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 4, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
swPortTrunkMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMaxEntries.setStatus('current')
swPortTrunkMaxPortMembers = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMaxPortMembers.setStatus('current')
swPortTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3), )
if mibBuilder.loadTexts: swPortTrunkTable.setStatus('current')
swPortTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swPortTrunkIndex"))
if mibBuilder.loadTexts: swPortTrunkEntry.setStatus('current')
swPortTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkIndex.setStatus('current')
swPortTrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkMasterPort.setStatus('current')
swPortTrunkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkPortList.setStatus('current')
swPortTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkType.setStatus('current')
swPortTrunkActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkActivePort.setStatus('current')
swPortTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortTrunkState.setStatus('current')
swPortTrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkFloodingPort.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 5, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 6, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
swPortMirrorRxPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 6, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorRxPortList.setStatus('current')
swPortMirrorTxPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 6, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorTxPortList.setStatus('current')
swPortMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorTargetPort.setStatus('current')
swPortMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMirrorState.setStatus('current')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
swL2IGMPMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setStatus('current')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
swL2IGMPFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeave.setStatus('current')
swL2IGMPDynIPMultVlanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultVlanAge.setStatus('current')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 4, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
swL2IGMPRouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 6), )
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setStatus('current')
swL2IGMPRouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 6, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2IGMPRouterPortVlanid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setStatus('current')
swL2IGMPRouterPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setStatus('current')
swL2IGMPRouterPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setStatus('current')
swL2IGMPRouterPortStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 6, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setStatus('current')
swL2IGMPRouterPortDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 6, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setStatus('current')
swL2IGMPRouterPortForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 6, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setStatus('current')
swL2IGMPAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 7), )
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setStatus('current')
swL2IGMPAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 7, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2IGMPAccessAuthPort"))
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setStatus('current')
swL2IGMPAccessAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setStatus('current')
swL2IGMPAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setStatus('current')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
swL2IGMPMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setStatus('current')
swL2IGMPMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setStatus('current')
swL2IGMPMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setStatus('current')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
swL2IGMPMulticastVlanUntagSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 9), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanUntagSourcePort.setStatus('current')
swL2IGMPMulticastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemapPriority.setStatus('current')
swL2IGMPMulticastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplacePriority.setStatus('current')
swL2IGMPMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 9), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setStatus('current')
swL2IGMPMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 9, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupVid"), (0, "DES3200-28-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupFromIp"), (0, "DES3200-28-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setStatus('current')
swL2IGMPMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setStatus('current')
swL2IGMPMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setStatus('current')
swL2IGMPMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setStatus('current')
swL2IGMPMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setStatus('current')
swL2IGMPDynIpMultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 12))
swL2IGMPDynIPMultMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultMaxEntry.setStatus('current')
swL2IGMPSnoopingClearDynIpMult = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 12, 2))
swL2IGMPSnoopingClearDynIpMultVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 12, 2, 1), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultVID.setStatus('current')
swL2IGMPSnoopingClearDynIpMultIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 12, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultIP.setStatus('current')
swL2IGMPSnoopingClearDynIpMultAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 12, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("vlan", 2), ("group", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultAction.setStatus('current')
swIGMPSnoopingHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 13), )
if mibBuilder.loadTexts: swIGMPSnoopingHostTable.setStatus('current')
swIGMPSnoopingHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 13, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swIGMPSnoopingHostVid"), (0, "DES3200-28-L2MGMT-MIB", "swIGMPSnoopingHostGroup"), (0, "DES3200-28-L2MGMT-MIB", "swIGMPSnoopingHostPort"), (0, "DES3200-28-L2MGMT-MIB", "swIGMPSnoopingHostIp"))
if mibBuilder.loadTexts: swIGMPSnoopingHostEntry.setStatus('current')
swIGMPSnoopingHostVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 13, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingHostVid.setStatus('current')
swIGMPSnoopingHostGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingHostGroup.setStatus('current')
swIGMPSnoopingHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingHostPort.setStatus('current')
swIGMPSnoopingHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 7, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingHostIp.setStatus('current')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 12, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 12, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 12, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
swL2PortSecurityEntryClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityEntryClearCtrl.setStatus('current')
swL2PortSecurityTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setStatus('current')
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 3))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 3, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 15, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
swL2CosPriorityCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3))
swL2CosPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 1), )
if mibBuilder.loadTexts: swL2CosPriorityTable.setStatus('current')
swL2CosPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2CosPriorityPort"))
if mibBuilder.loadTexts: swL2CosPriorityEntry.setStatus('current')
swL2CosPriorityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosPriorityPort.setStatus('current')
swL2CosPriorityEtherPRI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ether8021p", 2), ("macBase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPriorityEtherPRI.setStatus('current')
swL2CosPriorityIpPRI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("tos", 2), ("dscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPriorityIpPRI.setStatus('current')
swL2CosPriorityNone = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosPriorityNone.setStatus('current')
swL2CosTosPRITable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 4), )
if mibBuilder.loadTexts: swL2CosTosPRITable.setStatus('current')
swL2CosTosPRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 4, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2CosTosPRIIndex"))
if mibBuilder.loadTexts: swL2CosTosPRIEntry.setStatus('current')
swL2CosTosPRIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosTosPRIIndex.setStatus('current')
swL2CosTosPRIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosTosPRIClass.setStatus('current')
swL2CosDscpPRITable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 5), )
if mibBuilder.loadTexts: swL2CosDscpPRITable.setStatus('current')
swL2CosDscpPRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 5, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2CosDscpPRIIndex"))
if mibBuilder.loadTexts: swL2CosDscpPRIEntry.setStatus('current')
swL2CosDscpPRIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2CosDscpPRIIndex.setStatus('current')
swL2CosDscpPRIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 17, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2CosDscpPRIClass.setStatus('current')
swL2DhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayState.setStatus('obsolete')
swL2DhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setStatus('obsolete')
swL2DhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setStatus('obsolete')
swL2DhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setStatus('obsolete')
swL2DhcpRelayOption82Check = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setStatus('obsolete')
swL2DhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setStatus('obsolete')
swL2DhcpRelayCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 7), )
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setStatus('obsolete')
swL2DhcpRelayCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 7, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2DhcpRelayCtrlInterfaceName"), (0, "DES3200-28-L2MGMT-MIB", "swL2DhcpRelayCtrlServer"))
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setStatus('obsolete')
swL2DhcpRelayCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setStatus('obsolete')
swL2DhcpRelayCtrlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setStatus('obsolete')
swL2DhcpRelayCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 18, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setStatus('obsolete')
swL2MgmtMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0))
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0, 1)).setObjects(("DES3200-28-L2MGMT-MIB", "swL2PortSecurityPortIndex"), ("DES3200-28-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0, 2)).setObjects(("DES3200-28-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0, 3)).setObjects(("DES3200-28-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0, 4)).setObjects(("DES3200-28-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0, 5)).setObjects(("DES3200-28-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DES3200-28-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0, 6)).setObjects(("DES3200-28-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DES3200-28-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
swL2FloodMacDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 0, 7)).setObjects(("DES3200-28-L2MGMT-MIB", "swL2FloodMacDetectedMacVid"), ("DES3200-28-L2MGMT-MIB", "swL2FloodMacDetectedMacAddress"))
if mibBuilder.loadTexts: swL2FloodMacDetectedTrap.setStatus('current')
swl2PortSecurityBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 1))
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
swl2NotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 2))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
swL2FloodMacDetectedMacVid = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMacDetectedMacVid.setStatus('current')
swL2FloodMacDetectedMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 20, 2, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMacDetectedMacAddress.setStatus('current')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 2, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
swL2McastFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 2), )
if mibBuilder.loadTexts: swL2McastFilterTable.setStatus('current')
swL2McastFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 2, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2McastFilterProfileIndex"))
if mibBuilder.loadTexts: swL2McastFilterEntry.setStatus('current')
swL2McastFilterProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterProfileIndex.setStatus('current')
swL2McastFilterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterProfileName.setStatus('current')
swL2McastFilterAddOrDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterAddOrDelState.setStatus('current')
swL2McastFilterGroupList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterGroupList.setStatus('current')
swL2McastFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2McastFilterStatus.setStatus('current')
swL2McastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 3), )
if mibBuilder.loadTexts: swL2McastFilterPortTable.setStatus('current')
swL2McastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 3, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2McastFilterPortGroupPortIndex"))
if mibBuilder.loadTexts: swL2McastFilterPortEntry.setStatus('current')
swL2McastFilterPortGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortGroupPortIndex.setStatus('current')
swL2McastFilterPortProfileAddOrDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterPortProfileAddOrDelState.setStatus('current')
swL2McastFilterPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterPortProfileID.setStatus('current')
swL2McastFilterPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterPortAccess.setStatus('current')
swL2McastFilterPortMaxGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 4), )
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupTable.setStatus('current')
swL2McastFilterPortMaxGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 4, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2McastFilterPortMaxGroupPortIndex"))
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupEntry.setStatus('current')
swL2McastFilterPortMaxGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroupPortIndex.setStatus('current')
swL2McastFilterPortMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2McastFilterPortMaxGroup.setStatus('current')
swL2McastFilterPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 5), )
if mibBuilder.loadTexts: swL2McastFilterPortInfoTable.setStatus('current')
swL2McastFilterPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 5, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2McastFilterPortInfoPortIndex"))
if mibBuilder.loadTexts: swL2McastFilterPortInfoEntry.setStatus('current')
swL2McastFilterPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortInfoPortIndex.setStatus('current')
swL2McastFilterPortInfoProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortInfoProfileID.setStatus('current')
swL2McastFilterPortInfoAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 22, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2McastFilterPortInfoAccess.setStatus('current')
swL2VlanAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 1), )
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setStatus('current')
swL2VlanAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setStatus('current')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
swL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanName.setStatus('current')
swL2VlanAdvertiseState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setStatus('current')
swL2VlanMultiplyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 2))
swL2VlanMultiplyVlanList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyVlanList.setStatus('current')
swL2VlanMultiplyAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyAdvertisement.setStatus('current')
swL2VlanMultiplyPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 2, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyPortList.setStatus('current')
swL2VlanMultiplyPortListAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("add-tagged", 2), ("add-untagged", 3), ("add-forbidden", 4), ("delete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyPortListAction.setStatus('current')
swL2VlanMultiplyAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("create", 2), ("configure", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanMultiplyAction.setStatus('current')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
swL2DhcpLocalRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setStatus('current')
swL2DhcpLocalRelayVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 24, 2), )
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setStatus('current')
swL2DhcpLocalRelayVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 24, 2, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2DhcpLocalRelayVLANID"))
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setStatus('current')
swL2DhcpLocalRelayVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setStatus('current')
swL2DhcpLocalRelayVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setStatus('current')
swL2FloodMACMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1))
swL2FloodMACGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 1))
swL2FloodMACState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACState.setStatus('current')
swL2FloodMACLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACLogState.setStatus('current')
swL2FloodMACTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACTrapState.setStatus('current')
swL2FloodMACClearFDB = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-action", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2FloodMACClearFDB.setStatus('current')
swL2FloodMACAutoFDBCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 2), )
if mibBuilder.loadTexts: swL2FloodMACAutoFDBCtrlTable.setStatus('current')
swL2FloodMACAutoFDBCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 2, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2FloodMACAutoFDBIPAddress"))
if mibBuilder.loadTexts: swL2FloodMACAutoFDBCtrlEntry.setStatus('current')
swL2FloodMACAutoFDBIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL2FloodMACAutoFDBIPAddress.setStatus('current')
swL2FloodMACAutoFDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBRowStatus.setStatus('current')
swL2FloodMACInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2))
swL2FloodMACFDBTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 1), )
if mibBuilder.loadTexts: swL2FloodMACFDBTable.setStatus('current')
swL2FloodMACFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 1, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2FloodMACFDBIndex"), (0, "DES3200-28-L2MGMT-MIB", "swL2FloodMACFDBVID"), (0, "DES3200-28-L2MGMT-MIB", "swL2FloodMACFDBMacAddress"))
if mibBuilder.loadTexts: swL2FloodMACFDBEntry.setStatus('current')
swL2FloodMACFDBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2FloodMACFDBIndex.setStatus('current')
swL2FloodMACFDBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: swL2FloodMACFDBVID.setStatus('current')
swL2FloodMACFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 1, 1, 3), MacAddress())
if mibBuilder.loadTexts: swL2FloodMACFDBMacAddress.setStatus('current')
swL2FloodMACFDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACFDBStatus.setStatus('current')
swL2FloodMACFDBTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACFDBTimestamp.setStatus('current')
swL2FloodMACAutoFDBTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 2), )
if mibBuilder.loadTexts: swL2FloodMACAutoFDBTable.setStatus('current')
swL2FloodMACAutoFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 2, 1), ).setIndexNames((0, "DES3200-28-L2MGMT-MIB", "swL2FloodMACAutoFDBIPAddress"))
if mibBuilder.loadTexts: swL2FloodMACAutoFDBEntry.setStatus('current')
swL2FloodMACAutoFDBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBVID.setStatus('current')
swL2FloodMACAutoFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBMacAddress.setStatus('current')
swL2FloodMACAutoFDBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBPort.setStatus('current')
swL2FloodMACAutoFDBTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 113, 5, 2, 25, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2FloodMACAutoFDBTimestamp.setStatus('current')
mibBuilder.exportSymbols("DES3200-28-L2MGMT-MIB", swL2McastFilterGroupList=swL2McastFilterGroupList, swL2MgmtMIBTrapPrefix=swL2MgmtMIBTrapPrefix, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swL2TrafficSegPort=swL2TrafficSegPort, swL2FloodMACClearFDB=swL2FloodMACClearFDB, swL2FloodMACAutoFDBTable=swL2FloodMACAutoFDBTable, swL2IGMPAccessAuthTable=swL2IGMPAccessAuthTable, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2DevCtrlCFM=swL2DevCtrlCFM, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2VlanMultiplyMgmt=swL2VlanMultiplyMgmt, swL2McastFilterPortMaxGroup=swL2McastFilterPortMaxGroup, swL2PortCtrlAddressLearning=swL2PortCtrlAddressLearning, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2McastFilterPortAccess=swL2McastFilterPortAccess, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2DevCtrlCFMPortIndex=swL2DevCtrlCFMPortIndex, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2IGMPSnoopingClearDynIpMultAction=swL2IGMPSnoopingClearDynIpMultAction, swL2McastFilterPortInfoPortIndex=swL2McastFilterPortInfoPortIndex, swL2DhcpRelayCtrlState=swL2DhcpRelayCtrlState, swL2CosPriorityIpPRI=swL2CosPriorityIpPRI, swL2PortErrTable=swL2PortErrTable, swL2IGMPSnoopingClearDynIpMult=swL2IGMPSnoopingClearDynIpMult, swL2PortInfoTable=swL2PortInfoTable, swIGMPSnoopingHostPort=swIGMPSnoopingHostPort, swL2VlanAdvertiseState=swL2VlanAdvertiseState, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2McastFilterProfileName=swL2McastFilterProfileName, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swPortMirrorRxPortList=swPortMirrorRxPortList, swL2PortErrPortIndex=swL2PortErrPortIndex, swL2DevCtrlSystemIP=swL2DevCtrlSystemIP, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2DevCtrlSnmpEnableAuthenTraps=swL2DevCtrlSnmpEnableAuthenTraps, swL2QOSSchedulingMechanism=swL2QOSSchedulingMechanism, swL2DhcpLocalRelayVLANState=swL2DhcpLocalRelayVLANState, swL2FloodMAC=swL2FloodMAC, swL2IGMPMulticastVlanReplaceSourceIp=swL2IGMPMulticastVlanReplaceSourceIp, swL2MACNotifyState=swL2MACNotifyState, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2IGMPRouterPortForbiddenPortList=swL2IGMPRouterPortForbiddenPortList, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swL2DhcpRelayCtrlInterfaceName=swL2DhcpRelayCtrlInterfaceName, swPortTrunkEntry=swPortTrunkEntry, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2FloodMacDetectedMacAddress=swL2FloodMacDetectedMacAddress, swL2McastFilterPortProfileID=swL2McastFilterPortProfileID, swL2FloodMACAutoFDBPort=swL2FloodMACAutoFDBPort, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2VlanIndex=swL2VlanIndex, swL2PortErrPortReason=swL2PortErrPortReason, swL2IGMPMulticastVlanUntagSourcePort=swL2IGMPMulticastVlanUntagSourcePort, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2McastFilterPortMaxGroupPortIndex=swL2McastFilterPortMaxGroupPortIndex, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2IGMPFastLeave=swL2IGMPFastLeave, swL2DhcpLocalRelayVLANTable=swL2DhcpLocalRelayVLANTable, swL2IGMPQueryState=swL2IGMPQueryState, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2CosPriorityCtrl=swL2CosPriorityCtrl, swL2DhcpRelayOption82State=swL2DhcpRelayOption82State, swL2MultiFilter=swL2MultiFilter, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swPortTrunkTable=swPortTrunkTable, swL2IGMPDynIPMultMaxEntry=swL2IGMPDynIPMultMaxEntry, swPortTrunkFloodingPort=swPortTrunkFloodingPort, VlanId=VlanId, swL2PortSecurityTrapLogState=swL2PortSecurityTrapLogState, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2FloodMACState=swL2FloodMACState, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2DevInfo=swL2DevInfo, swL2IGMPMulticastVlanGroupToIp=swL2IGMPMulticastVlanGroupToIp, swIGMPSnoopingHostIp=swIGMPSnoopingHostIp, swL2PortCtrlDescription=swL2PortCtrlDescription, swPortMirrorPackage=swPortMirrorPackage, swL2FloodMACGlobalSettings=swL2FloodMACGlobalSettings, swL2FloodMACInfo=swL2FloodMACInfo, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, swL2McastFilterPortEntry=swL2McastFilterPortEntry, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2McastFilterAddOrDelState=swL2McastFilterAddOrDelState, swL2PortErrPortState=swL2PortErrPortState, MacAddress=MacAddress, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2VlanAdvertisementEntry=swL2VlanAdvertisementEntry, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swPortTrunkState=swPortTrunkState, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2VlanAdvertisementTable=swL2VlanAdvertisementTable, swPortTrunkPortList=swPortTrunkPortList, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2DevCtrlDefaultGateway=swL2DevCtrlDefaultGateway, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2CosTosPRIEntry=swL2CosTosPRIEntry, swL2FloodMacDetectedTrap=swL2FloodMacDetectedTrap, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2MgmtMIB=swL2MgmtMIB, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2macNotification=swL2macNotification, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, swL2DhcpRelayCtrlServer=swL2DhcpRelayCtrlServer, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2DevInfoFrontPanelLedStatus=swL2DevInfoFrontPanelLedStatus, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2FloodMACFDBTimestamp=swL2FloodMACFDBTimestamp, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2CosPriorityTable=swL2CosPriorityTable, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2DhcpRelayTimeThreshold=swL2DhcpRelayTimeThreshold, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2DevCtrlCFMPortTable=swL2DevCtrlCFMPortTable, swPortTrunkMaxPortMembers=swPortTrunkMaxPortMembers, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2FloodMACFDBEntry=swL2FloodMACFDBEntry, swL2McastFilterPortInfoProfileID=swL2McastFilterPortInfoProfileID, swL2PortMgmt=swL2PortMgmt, swL2FloodMACAutoFDBEntry=swL2FloodMACAutoFDBEntry, swL2DevCtrlSubnetMask=swL2DevCtrlSubnetMask, swL2CosTosPRIIndex=swL2CosTosPRIIndex, swL2FloodMACFDBMacAddress=swL2FloodMACFDBMacAddress, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2VlanMultiplyAction=swL2VlanMultiplyAction, swL2FloodMacDetectedMacVid=swL2FloodMacDetectedMacVid, swIGMPSnoopingHostVid=swIGMPSnoopingHostVid, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2IGMPSnoopingClearDynIpMultIP=swL2IGMPSnoopingClearDynIpMultIP, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2FloodMACAutoFDBCtrlEntry=swL2FloodMACAutoFDBCtrlEntry, swPortMirrorTargetPort=swPortMirrorTargetPort, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2CosDscpPRIEntry=swL2CosDscpPRIEntry, swPortTrunkMasterPort=swPortTrunkMasterPort, swL2DhcpRelayHopCount=swL2DhcpRelayHopCount, swPortMirrorState=swPortMirrorState, swL2IGMPAccessAuthState=swL2IGMPAccessAuthState, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2IGMPAccessAuthPort=swL2IGMPAccessAuthPort, swL2FloodMACAutoFDBTimestamp=swL2FloodMACAutoFDBTimestamp, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2QOSMgmt=swL2QOSMgmt, swL2McastFilterPortTable=swL2McastFilterPortTable, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2FloodMACAutoFDBMacAddress=swL2FloodMACAutoFDBMacAddress, swL2FloodMACTrapState=swL2FloodMACTrapState, swIGMPSnoopingHostTable=swIGMPSnoopingHostTable, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2TrunkVLANState=swL2TrunkVLANState, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2CosPriorityNone=swL2CosPriorityNone, swL2IGMPMulticastVlanGroupEntry=swL2IGMPMulticastVlanGroupEntry, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2CosDscpPRITable=swL2CosDscpPRITable, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2DhcpLocalRelayState=swL2DhcpLocalRelayState, swL2TrafficSegTable=swL2TrafficSegTable, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2CosDscpPRIClass=swL2CosDscpPRIClass, swL2DhcpRelayCtrlEntry=swL2DhcpRelayCtrlEntry, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2IGMPSnoopingMulticastVlanState=swL2IGMPSnoopingMulticastVlanState, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2CosDscpPRIIndex=swL2CosDscpPRIIndex, swL2CosTosPRIClass=swL2CosTosPRIClass, swL2McastFilterPortGroupPortIndex=swL2McastFilterPortGroupPortIndex, swL2VlanName=swL2VlanName, swL2IGMPRouterPortVlanName=swL2IGMPRouterPortVlanName, swL2DevCtrl=swL2DevCtrl, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2FloodMACFDBTable=swL2FloodMACFDBTable, swL2FloodMACFDBIndex=swL2FloodMACFDBIndex, swL2IGMPMulticastVlanReplacePriority=swL2IGMPMulticastVlanReplacePriority, swL2FloodMACAutoFDBVID=swL2FloodMACAutoFDBVID, swL2QOSSchedulingMechanismCtrl=swL2QOSSchedulingMechanismCtrl, swL2FloodMACAutoFDBRowStatus=swL2FloodMACAutoFDBRowStatus, swL2DhcpRelayState=swL2DhcpRelayState, swL2McastFilterPortInfoAccess=swL2McastFilterPortInfoAccess, swL2IGMPMulticastVlanGroupTable=swL2IGMPMulticastVlanGroupTable, swL2DevArpAgingTime=swL2DevArpAgingTime, swl2PortSecurityBindings=swl2PortSecurityBindings, swL2FloodMACMgmt=swL2FloodMACMgmt, swL2DhcpLocalRelayMgmt=swL2DhcpLocalRelayMgmt, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2IGMPRouterPortVlanid=swL2IGMPRouterPortVlanid, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2LoopDetectMode=swL2LoopDetectMode, swL2FloodMACFDBVID=swL2FloodMACFDBVID, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2IGMPRouterPortEntry=swL2IGMPRouterPortEntry, swIGMPSnoopingHostGroup=swIGMPSnoopingHostGroup, swL2CosPriorityPort=swL2CosPriorityPort, swL2DhcpRelayCtrlTable=swL2DhcpRelayCtrlTable, swL2PortCtrlPortMediumType=swL2PortCtrlPortMediumType, swL2McastFilterPortMaxGroupEntry=swL2McastFilterPortMaxGroupEntry, swL2DhcpRelayMgmt=swL2DhcpRelayMgmt, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2QOSSchedulingMaxWeight=swL2QOSSchedulingMaxWeight, swL2PortCtrlMulticastfilter=swL2PortCtrlMulticastfilter, swL2DhcpRelayOption82Check=swL2DhcpRelayOption82Check, swL2PortInfoEntry=swL2PortInfoEntry, swL2PortErrEntry=swL2PortErrEntry, swL2FloodMACAutoFDBCtrlTable=swL2FloodMACAutoFDBCtrlTable, swPortTrunkActivePort=swPortTrunkActivePort, swPortTrunkMaxEntries=swPortTrunkMaxEntries, swL2VlanMultiplyVlanList=swL2VlanMultiplyVlanList, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2VlanMultiplyPortList=swL2VlanMultiplyPortList, swL2IGMPMulticastVlanRemapPriority=swL2IGMPMulticastVlanRemapPriority, swL2CosTosPRITable=swL2CosTosPRITable, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swL2IGMPRouterPortStaticPortList=swL2IGMPRouterPortStaticPortList, swL2IGMPSnoopingClearDynIpMultVID=swL2IGMPSnoopingClearDynIpMultVID, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2DevMgmt=swL2DevMgmt, swL2IGMPMulticastVlanState=swL2IGMPMulticastVlanState, swL2PortSecurityMode=swL2PortSecurityMode, swL2macNotifyInfo=swL2macNotifyInfo, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2McastFilterProfileIndex=swL2McastFilterProfileIndex, swL2IGMPMulticastVlanTagMemberPort=swL2IGMPMulticastVlanTagMemberPort, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2IGMPDynIpMultMgmt=swL2IGMPDynIpMultMgmt, swL2McastFilterPortInfoEntry=swL2McastFilterPortInfoEntry, swL2IGMPDynIPMultVlanAge=swL2IGMPDynIPMultVlanAge, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2McastFilterPortMaxGroupTable=swL2McastFilterPortMaxGroupTable, PortList=PortList, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2DevPasswordEncryptionState=swL2DevPasswordEncryptionState, swL2PortErrPortStatus=swL2PortErrPortStatus, swL2DhcpLocalRelayVLANID=swL2DhcpLocalRelayVLANID, swL2PortCtrlTable=swL2PortCtrlTable, swIGMPPackage=swIGMPPackage)
mibBuilder.exportSymbols("DES3200-28-L2MGMT-MIB", swL2IGMPRouterPortTable=swL2IGMPRouterPortTable, swL2CosMgmt=swL2CosMgmt, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2DhcpLocalRelayVLANEntry=swL2DhcpLocalRelayVLANEntry, swL2IGMPRouterPortDynamicPortList=swL2IGMPRouterPortDynamicPortList, swPortMirrorTxPortList=swPortMirrorTxPortList, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swl2NotificationBindings=swl2NotificationBindings, swL2FloodMACAutoFDBIPAddress=swL2FloodMACAutoFDBIPAddress, swL2IGMPMulticastVlanGroupVid=swL2IGMPMulticastVlanGroupVid, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2CosPriorityEtherPRI=swL2CosPriorityEtherPRI, swL2DevCtrlCFMPortEntry=swL2DevCtrlCFMPortEntry, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2DevCtrlCFMPortState=swL2DevCtrlCFMPortState, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2DhcpRelayOption82Policy=swL2DhcpRelayOption82Policy, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2PortLoopRestart=swL2PortLoopRestart, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2DevCtrlCFMState=swL2DevCtrlCFMState, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swL2McastFilterStatus=swL2McastFilterStatus, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swPortTrunkIndex=swPortTrunkIndex, swL2IGMPMaxIpGroupNumPerVlan=swL2IGMPMaxIpGroupNumPerVlan, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2McastFilterTable=swL2McastFilterTable, swL2IGMPAccessAuthEntry=swL2IGMPAccessAuthEntry, swL2IGMPRobustness=swL2IGMPRobustness, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2FloodMACFDBStatus=swL2FloodMACFDBStatus, swL2PortInfoFlowCtrlOperStatus=swL2PortInfoFlowCtrlOperStatus, swL2McastFilterEntry=swL2McastFilterEntry, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2TrunkMgmt=swL2TrunkMgmt, swL2PortSecurityEntryClearCtrl=swL2PortSecurityEntryClearCtrl, swL2McastFilterPortInfoTable=swL2McastFilterPortInfoTable, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swPortTrunkType=swPortTrunkType, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swIGMPSnoopingHostEntry=swIGMPSnoopingHostEntry, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2PortErrDescription=swL2PortErrDescription, swL2VlanMgmt=swL2VlanMgmt, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2DevCtrlSystemReboot=swL2DevCtrlSystemReboot, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2IGMPMulticastVlanGroupStatus=swL2IGMPMulticastVlanGroupStatus, swL2DevCtrlIpAutoConfig=swL2DevCtrlIpAutoConfig, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2IGMPMulticastVlanGroupFromIp=swL2IGMPMulticastVlanGroupFromIp, swL2McastFilterPortProfileAddOrDelState=swL2McastFilterPortProfileAddOrDelState, swL2DevAlarm=swL2DevAlarm, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2VlanMultiplyAdvertisement=swL2VlanMultiplyAdvertisement, swL2CosPriorityEntry=swL2CosPriorityEntry, swL2VlanMultiplyPortListAction=swL2VlanMultiplyPortListAction, swL2FloodMACLogState=swL2FloodMACLogState)
