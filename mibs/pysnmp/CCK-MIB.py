#
# PySNMP MIB module CCK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CCK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ipAddrEntry, = mibBuilder.importSymbols("IP-MIB", "ipAddrEntry")
rsCCK, = mibBuilder.importSymbols("RADWARE-MIB", "rsCCK")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, NotificationType, MibIdentifier, Bits, ObjectIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, Counter64, enterprises, Integer32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "NotificationType", "MibIdentifier", "Bits", "ObjectIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "Counter64", "enterprises", "Integer32", "Unsigned32", "NotificationType")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

rsCCKElementTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1), )
if mibBuilder.loadTexts: rsCCKElementTable.setStatus('mandatory')
rsCCKElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKElementId"))
if mibBuilder.loadTexts: rsCCKElementEntry.setStatus('mandatory')
rsCCKElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementId.setStatus('mandatory')
rsCCKElementDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementDescription.setStatus('mandatory')
rsCCKElementGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementGroup.setStatus('mandatory')
rsCCKElementIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementIsActive.setStatus('mandatory')
rsCCKElementIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementIsAvailable.setStatus('mandatory')
rsCCKElementDftAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementDftAddr.setStatus('mandatory')
rsCCKElementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 1, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKElementRowStatus.setStatus('mandatory')
rsCCKHealthChkTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2), )
if mibBuilder.loadTexts: rsCCKHealthChkTable.setStatus('mandatory')
rsCCKHealthChkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKHealthChkName"))
if mibBuilder.loadTexts: rsCCKHealthChkEntry.setStatus('mandatory')
rsCCKHealthChkName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKHealthChkName.setStatus('mandatory')
rsCCKHealthChkId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkId.setStatus('mandatory')
rsCCKHealthChkMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkMethod.setStatus('mandatory')
rsCCKHealthChkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKHealthChkStatus.setStatus('mandatory')
rsCCKHealthChkDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkDstAddr.setStatus('mandatory')
rsCCKHealthChkNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkNextHop.setStatus('mandatory')
rsCCKHealthChkDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkDstPort.setStatus('mandatory')
rsCCKHealthChkArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkArguments.setStatus('mandatory')
rsCCKHealthChkInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkInterval.setStatus('mandatory')
rsCCKHealthChkRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkRetries.setStatus('mandatory')
rsCCKHealthChkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkTimeout.setStatus('mandatory')
rsCCKHealthChkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 2, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKHealthChkRowStatus.setStatus('mandatory')
rsCCKChkBindingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3), )
if mibBuilder.loadTexts: rsCCKChkBindingTable.setStatus('mandatory')
rsCCKChkBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKChkBindingHealthChk"), (0, "CCK-MIB", "rsCCKChkBindingElement"))
if mibBuilder.loadTexts: rsCCKChkBindingEntry.setStatus('mandatory')
rsCCKChkBindingHealthChk = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkBindingHealthChk.setStatus('mandatory')
rsCCKChkBindingElement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkBindingElement.setStatus('mandatory')
rsCCKChkBindingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKChkBindingGroup.setStatus('mandatory')
rsCCKChkBindingMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ismandatory", 1), ("isnon-mandatory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKChkBindingMandatory.setStatus('mandatory')
rsCCKChkBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKChkBindingRowStatus.setStatus('mandatory')
rsCCKChkMethodTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4), )
if mibBuilder.loadTexts: rsCCKChkMethodTable.setStatus('mandatory')
rsCCKChkMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKChkMethodId"))
if mibBuilder.loadTexts: rsCCKChkMethodEntry.setStatus('mandatory')
rsCCKChkMethodId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkMethodId.setStatus('mandatory')
rsCCKChkMethodDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkMethodDescription.setStatus('mandatory')
rsCCKChkMethodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 4, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCCKChkMethodRowStatus.setStatus('mandatory')
rsCCKPktSequenceTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5), )
if mibBuilder.loadTexts: rsCCKPktSequenceTable.setStatus('mandatory')
rsCCKPktSequenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1), ).setIndexNames((0, "CCK-MIB", "rsCCKPktSequenceSeqId"), (0, "CCK-MIB", "rsCCKPktSequencePktId"))
if mibBuilder.loadTexts: rsCCKPktSequenceEntry.setStatus('mandatory')
rsCCKPktSequenceSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceSeqId.setStatus('mandatory')
rsCCKPktSequencePktId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequencePktId.setStatus('mandatory')
rsCCKPktSequenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("receive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceType.setStatus('mandatory')
rsCCKPktSequenceString = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceString.setStatus('mandatory')
rsCCKPktSequenceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceDescription.setStatus('mandatory')
rsCCKPktSequenceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKPktSequenceRowStatus.setStatus('mandatory')
rsCCKArgDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKArgDelimiter.setStatus('mandatory')
rsCCKNextElementId = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKNextElementId.setStatus('mandatory')
rsCCKNextCheckId = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKNextCheckId.setStatus('mandatory')
rsCCKStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 79, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCCKStatus.setStatus('mandatory')
mibBuilder.exportSymbols("CCK-MIB", rsCCKPktSequenceEntry=rsCCKPktSequenceEntry, rsCCKStatus=rsCCKStatus, rsCCKHealthChkMethod=rsCCKHealthChkMethod, rsCCKChkMethodTable=rsCCKChkMethodTable, rsCCKElementGroup=rsCCKElementGroup, rsCCKElementIsAvailable=rsCCKElementIsAvailable, rsCCKElementRowStatus=rsCCKElementRowStatus, rsCCKPktSequencePktId=rsCCKPktSequencePktId, rsCCKPktSequenceType=rsCCKPktSequenceType, rsCCKChkBindingHealthChk=rsCCKChkBindingHealthChk, rsCCKHealthChkTable=rsCCKHealthChkTable, rsCCKHealthChkRowStatus=rsCCKHealthChkRowStatus, rsCCKPktSequenceTable=rsCCKPktSequenceTable, rsCCKArgDelimiter=rsCCKArgDelimiter, rsCCKNextCheckId=rsCCKNextCheckId, rsCCKChkMethodDescription=rsCCKChkMethodDescription, rsCCKPktSequenceDescription=rsCCKPktSequenceDescription, rsCCKHealthChkStatus=rsCCKHealthChkStatus, rsCCKElementDftAddr=rsCCKElementDftAddr, rsCCKChkBindingElement=rsCCKChkBindingElement, rsCCKHealthChkEntry=rsCCKHealthChkEntry, rsCCKPktSequenceRowStatus=rsCCKPktSequenceRowStatus, rsCCKElementId=rsCCKElementId, rsCCKHealthChkDstAddr=rsCCKHealthChkDstAddr, rsCCKElementEntry=rsCCKElementEntry, rsCCKHealthChkTimeout=rsCCKHealthChkTimeout, rsCCKElementTable=rsCCKElementTable, rsCCKHealthChkId=rsCCKHealthChkId, rsCCKChkBindingGroup=rsCCKChkBindingGroup, TruthValue=TruthValue, rsCCKPktSequenceString=rsCCKPktSequenceString, rsCCKHealthChkArguments=rsCCKHealthChkArguments, RowStatus=RowStatus, rsCCKChkMethodId=rsCCKChkMethodId, NetNumber=NetNumber, rsCCKElementDescription=rsCCKElementDescription, rsCCKChkBindingTable=rsCCKChkBindingTable, rsCCKChkBindingEntry=rsCCKChkBindingEntry, rsCCKHealthChkDstPort=rsCCKHealthChkDstPort, rsCCKHealthChkRetries=rsCCKHealthChkRetries, rsCCKHealthChkName=rsCCKHealthChkName, rsCCKChkBindingRowStatus=rsCCKChkBindingRowStatus, rsCCKElementIsActive=rsCCKElementIsActive, rsCCKChkBindingMandatory=rsCCKChkBindingMandatory, rsCCKChkMethodEntry=rsCCKChkMethodEntry, rsCCKNextElementId=rsCCKNextElementId, rsCCKHealthChkNextHop=rsCCKHealthChkNextHop, rsCCKPktSequenceSeqId=rsCCKPktSequenceSeqId, rsCCKHealthChkInterval=rsCCKHealthChkInterval, rsCCKChkMethodRowStatus=rsCCKChkMethodRowStatus)
