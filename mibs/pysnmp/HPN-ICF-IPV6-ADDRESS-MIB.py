#
# PySNMP MIB module HPN-ICF-IPV6-ADDRESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-IPV6-ADDRESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, IpAddress, ModuleIdentity, ObjectIdentity, TimeTicks, Counter64, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Counter64", "Bits", "iso")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hpnicfIpv6AddrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71))
hpnicfIpv6AddrMIB.setRevisions(('2006-03-15 00:00',))
if mibBuilder.loadTexts: hpnicfIpv6AddrMIB.setLastUpdated('200603150000Z')
if mibBuilder.loadTexts: hpnicfIpv6AddrMIB.setOrganization('')
hpnicfIpv6AddressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1))
hpnicfIpv6AddressConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1))
hpnicfIpv6AddrSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfIpv6AddrSetTable.setStatus('current')
hpnicfIpv6AddrSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrSetIfIndex"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrSetAddrType"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrSetAddr"))
if mibBuilder.loadTexts: hpnicfIpv6AddrSetEntry.setStatus('current')
hpnicfIpv6AddrSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfIpv6AddrSetIfIndex.setStatus('current')
hpnicfIpv6AddrSetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfIpv6AddrSetAddrType.setStatus('current')
hpnicfIpv6AddrSetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpnicfIpv6AddrSetAddr.setStatus('current')
hpnicfIpv6AddrSetPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIpv6AddrSetPfxLength.setStatus('current')
hpnicfIpv6AddrSetSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("assignedIp", 1), ("assignedEUI64Ip", 2), ("assignedLinklocalIp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIpv6AddrSetSourceType.setStatus('current')
hpnicfIpv6AddrSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIpv6AddrSetRowStatus.setStatus('current')
hpnicfIpv6AddrReadTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfIpv6AddrReadTable.setStatus('current')
hpnicfIpv6AddrReadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrReadIfIndex"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrReadAddrType"), (0, "HPN-ICF-IPV6-ADDRESS-MIB", "hpnicfIpv6AddrReadAddr"))
if mibBuilder.loadTexts: hpnicfIpv6AddrReadEntry.setStatus('current')
hpnicfIpv6AddrReadIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfIpv6AddrReadIfIndex.setStatus('current')
hpnicfIpv6AddrReadAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfIpv6AddrReadAddrType.setStatus('current')
hpnicfIpv6AddrReadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpnicfIpv6AddrReadAddr.setStatus('current')
hpnicfIpv6AddrReadPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpv6AddrReadPfxLength.setStatus('current')
hpnicfIpv6AddrReadSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("assignedIp", 1), ("assignedEUI64Ip", 2), ("assignedAutoIp", 3), ("autoIp", 4), ("dhcpv6", 5), ("negotiate", 6), ("cluster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpv6AddrReadSourceType.setStatus('current')
hpnicfIpv6AddrReadCatalog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 71, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nodelocal", 1), ("linklocal", 2), ("sitelocal", 3), ("orglocal", 4), ("global", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpv6AddrReadCatalog.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-IPV6-ADDRESS-MIB", hpnicfIpv6AddrMIB=hpnicfIpv6AddrMIB, hpnicfIpv6AddrSetTable=hpnicfIpv6AddrSetTable, hpnicfIpv6AddrReadTable=hpnicfIpv6AddrReadTable, hpnicfIpv6AddrReadAddrType=hpnicfIpv6AddrReadAddrType, hpnicfIpv6AddrSetRowStatus=hpnicfIpv6AddrSetRowStatus, hpnicfIpv6AddrSetEntry=hpnicfIpv6AddrSetEntry, hpnicfIpv6AddrReadPfxLength=hpnicfIpv6AddrReadPfxLength, hpnicfIpv6AddrSetAddrType=hpnicfIpv6AddrSetAddrType, hpnicfIpv6AddrSetIfIndex=hpnicfIpv6AddrSetIfIndex, hpnicfIpv6AddrReadAddr=hpnicfIpv6AddrReadAddr, hpnicfIpv6AddrReadEntry=hpnicfIpv6AddrReadEntry, hpnicfIpv6AddrSetAddr=hpnicfIpv6AddrSetAddr, hpnicfIpv6AddrReadCatalog=hpnicfIpv6AddrReadCatalog, hpnicfIpv6AddressConfig=hpnicfIpv6AddressConfig, hpnicfIpv6AddrReadSourceType=hpnicfIpv6AddrReadSourceType, hpnicfIpv6AddressObjects=hpnicfIpv6AddressObjects, PYSNMP_MODULE_ID=hpnicfIpv6AddrMIB, hpnicfIpv6AddrSetPfxLength=hpnicfIpv6AddrSetPfxLength, hpnicfIpv6AddrSetSourceType=hpnicfIpv6AddrSetSourceType, hpnicfIpv6AddrReadIfIndex=hpnicfIpv6AddrReadIfIndex)
