#
# PySNMP MIB module REDLINE-E1T1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDLINE-E1T1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, Gauge32, Bits, Integer32, ObjectIdentity, iso, ModuleIdentity, IpAddress, enterprises, NotificationType, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "Gauge32", "Bits", "Integer32", "ObjectIdentity", "iso", "ModuleIdentity", "IpAddress", "enterprises", "NotificationType", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
redline = MibIdentifier((1, 3, 6, 1, 4, 1, 10728))
redlineProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 1))
redlineMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2))
redlineE1T1 = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 52))
e1t1General = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1))
e1t1Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5))
e1t1Commands = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 52, 6))
e1t1VlanIdData = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1VlanIdData.setStatus('mandatory')
e1t1VlanIdVoice = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1VlanIdVoice.setStatus('mandatory')
e1t1Clock = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1Clock.setStatus('mandatory')
e1t1SyncOn = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1SyncOn.setStatus('mandatory')
e1t1IdleCode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1IdleCode.setStatus('mandatory')
e1t1Hostname = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1Hostname.setStatus('mandatory')
e1t1IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1IpAddress.setStatus('mandatory')
e1t1IpMask = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1IpMask.setStatus('mandatory')
e1t1IpGateway = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1IpGateway.setStatus('mandatory')
e1t1OptionKey = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1OptionKey.setStatus('mandatory')
e1t1Line = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1Line.setStatus('mandatory')
e1t1SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1SoftwareVersion.setStatus('mandatory')
e1t1SaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1SaveConfig.setStatus('mandatory')
e1t1ActivateConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("activeConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1ActivateConfig.setStatus('mandatory')
e1t1ResetBoard = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1ResetBoard.setStatus('mandatory')
e1t1ResetStats = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1ResetStats.setStatus('mandatory')
e1t1ReStartConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1ReStartConfig.setStatus('mandatory')
e1t1EthRate = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthRate.setStatus('mandatory')
e1t1EthMode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthMode.setStatus('mandatory')
e1t1EthState = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthState.setStatus('mandatory')
e1t1EthMAC = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthMAC.setStatus('mandatory')
e1t1EthFROK = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthFROK.setStatus('mandatory')
e1t1EthBROK = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthBROK.setStatus('mandatory')
e1t1EthAERR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthAERR.setStatus('mandatory')
e1t1EthCERR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthCERR.setStatus('mandatory')
e1t1EthFTOK = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthFTOK.setStatus('mandatory')
e1t1EthBTOK = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthBTOK.setStatus('mandatory')
e1t1EthSCOL = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthSCOL.setStatus('mandatory')
e1t1EthMCOL = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthMCOL.setStatus('mandatory')
e1t1EthTDEF = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthTDEF.setStatus('mandatory')
e1t1EthLCOL = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EthLCOL.setStatus('mandatory')
e1t1FanStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1FanStatus.setStatus('mandatory')
e1t1LastSaveErr = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 52, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1LastSaveErr.setStatus('mandatory')
e1t1SerialTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 52, 2), )
if mibBuilder.loadTexts: e1t1SerialTable.setStatus('mandatory')
e1t1SerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 52, 2, 1), ).setIndexNames((0, "REDLINE-E1T1-MIB", "e1t1SerialID"))
if mibBuilder.loadTexts: e1t1SerialEntry.setStatus('mandatory')
e1t1SerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1SerialID.setStatus('mandatory')
e1t1SerialCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1SerialCoding.setStatus('mandatory')
e1t1SerialFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1SerialFraming.setStatus('mandatory')
e1t1SerialLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1SerialLBO.setStatus('mandatory')
e1t1GroupTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3), )
if mibBuilder.loadTexts: e1t1GroupTable.setStatus('mandatory')
e1t1GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1), ).setIndexNames((0, "REDLINE-E1T1-MIB", "e1t1GroupID"))
if mibBuilder.loadTexts: e1t1GroupEntry.setStatus('mandatory')
e1t1GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1GroupID.setStatus('mandatory')
e1t1GroupTsBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1GroupTsBegin.setStatus('mandatory')
e1t1GroupTsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1GroupTsNum.setStatus('mandatory')
e1t1GroupDestGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1GroupDestGroup.setStatus('mandatory')
e1t1GroupDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1GroupDestIp.setStatus('mandatory')
e1t1GroupJitterBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1GroupJitterBuffer.setStatus('mandatory')
e1t1GroupPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1GroupPacketLength.setStatus('mandatory')
e1t1GroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 3, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1GroupRowStatus.setStatus('mandatory')
e1t1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4), )
if mibBuilder.loadTexts: e1t1StatsTable.setStatus('mandatory')
e1t1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1), ).setIndexNames((0, "REDLINE-E1T1-MIB", "e1t1SerialStatsID"))
if mibBuilder.loadTexts: e1t1StatsEntry.setStatus('mandatory')
e1t1SerialStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1SerialStatsID.setStatus('mandatory')
e1t1TdmsLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsLOS.setStatus('mandatory')
e1t1TdmsLFA = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsLFA.setStatus('mandatory')
e1t1TdmsLOMF = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsLOMF.setStatus('mandatory')
e1t1TdmsRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsRAI.setStatus('mandatory')
e1t1TdmsAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsAIS.setStatus('mandatory')
e1t1TdmsES = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsES.setStatus('mandatory')
e1t1TdmsFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsFEC.setStatus('mandatory')
e1t1TdmsCVC = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 52, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1TdmsCVC.setStatus('mandatory')
mibBuilder.exportSymbols("REDLINE-E1T1-MIB", e1t1General=e1t1General, e1t1StatsEntry=e1t1StatsEntry, e1t1EthCERR=e1t1EthCERR, e1t1TdmsES=e1t1TdmsES, e1t1SerialEntry=e1t1SerialEntry, e1t1TdmsFEC=e1t1TdmsFEC, e1t1GroupRowStatus=e1t1GroupRowStatus, redlineE1T1=redlineE1T1, e1t1VlanIdVoice=e1t1VlanIdVoice, redline=redline, e1t1VlanIdData=e1t1VlanIdData, e1t1IdleCode=e1t1IdleCode, e1t1Hostname=e1t1Hostname, e1t1EthMAC=e1t1EthMAC, e1t1EthAERR=e1t1EthAERR, e1t1EthMCOL=e1t1EthMCOL, e1t1SerialTable=e1t1SerialTable, e1t1TdmsLFA=e1t1TdmsLFA, e1t1SerialCoding=e1t1SerialCoding, e1t1ActivateConfig=e1t1ActivateConfig, e1t1EthBROK=e1t1EthBROK, e1t1Commands=e1t1Commands, e1t1SerialID=e1t1SerialID, e1t1TdmsLOMF=e1t1TdmsLOMF, e1t1SerialLBO=e1t1SerialLBO, e1t1GroupTsBegin=e1t1GroupTsBegin, e1t1EthState=e1t1EthState, e1t1EthFROK=e1t1EthFROK, e1t1IpMask=e1t1IpMask, e1t1TdmsAIS=e1t1TdmsAIS, e1t1GroupEntry=e1t1GroupEntry, e1t1Clock=e1t1Clock, e1t1FanStatus=e1t1FanStatus, e1t1GroupDestGroup=e1t1GroupDestGroup, e1t1EthFTOK=e1t1EthFTOK, e1t1IpGateway=e1t1IpGateway, e1t1SerialStatsID=e1t1SerialStatsID, e1t1Line=e1t1Line, e1t1ResetBoard=e1t1ResetBoard, e1t1SoftwareVersion=e1t1SoftwareVersion, e1t1SerialFraming=e1t1SerialFraming, e1t1Stats=e1t1Stats, e1t1ResetStats=e1t1ResetStats, e1t1GroupID=e1t1GroupID, e1t1EthTDEF=e1t1EthTDEF, e1t1ReStartConfig=e1t1ReStartConfig, e1t1SaveConfig=e1t1SaveConfig, e1t1TdmsCVC=e1t1TdmsCVC, e1t1TdmsRAI=e1t1TdmsRAI, e1t1GroupDestIp=e1t1GroupDestIp, e1t1SyncOn=e1t1SyncOn, e1t1GroupPacketLength=e1t1GroupPacketLength, e1t1OptionKey=e1t1OptionKey, e1t1EthMode=e1t1EthMode, e1t1StatsTable=e1t1StatsTable, e1t1EthRate=e1t1EthRate, e1t1LastSaveErr=e1t1LastSaveErr, redlineProducts=redlineProducts, e1t1GroupJitterBuffer=e1t1GroupJitterBuffer, e1t1GroupTsNum=e1t1GroupTsNum, e1t1EthSCOL=e1t1EthSCOL, e1t1TdmsLOS=e1t1TdmsLOS, e1t1EthBTOK=e1t1EthBTOK, redlineMgmt=redlineMgmt, e1t1EthLCOL=e1t1EthLCOL, e1t1GroupTable=e1t1GroupTable, e1t1IpAddress=e1t1IpAddress)
