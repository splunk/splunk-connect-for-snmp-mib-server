#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ATM-IMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ATM-IMA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:01:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, Counter32, IpAddress, NotificationType, Unsigned32, MibIdentifier, iso, Gauge32, TimeTicks, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "Counter32", "IpAddress", "NotificationType", "Unsigned32", "MibIdentifier", "iso", "Gauge32", "TimeTicks", "ObjectIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonomaATM, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaATM")
sonomaImaATMAdapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7))
atmImaGroupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1))
atmImaLinkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2))
atmImaDs1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3))
atmImaE1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4))
imaGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumber.setStatus('mandatory')
imaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2), )
if mibBuilder.loadTexts: imaGroupTable.setStatus('mandatory')
imaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaGroupIndex"))
if mibBuilder.loadTexts: imaGroupEntry.setStatus('mandatory')
imaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIndex.setStatus('mandatory')
imaGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupRowStatus.setStatus('mandatory')
imaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupIfIndex.setStatus('mandatory')
imaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeState.setStatus('mandatory')
imaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeState.setStatus('mandatory')
imaGroupFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFailureStatus.setStatus('mandatory')
imaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3))).clone('symmetricOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupSymmetry.setStatus('mandatory')
imaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupMinNumTxLinks.setStatus('mandatory')
imaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupMinNumRxLinks.setStatus('mandatory')
imaGroupNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2))).clone('ctc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupNeTxClkMode.setStatus('mandatory')
imaGroupFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeTxClkMode.setStatus('mandatory')
imaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTxTimingRefLink.setStatus('mandatory')
imaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxTimingRefLink.setStatus('mandatory')
imaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLastChange.setStatus('mandatory')
imaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTxImaId.setStatus('mandatory')
imaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxImaId.setStatus('mandatory')
imaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))).clone(namedValues=NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))).clone('m128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTxFrameLength.setStatus('mandatory')
imaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))).clone(namedValues=NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxFrameLength.setStatus('mandatory')
imaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 19), Integer32().clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupDiffDelayMax.setStatus('mandatory')
imaGroupLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupLeastDelayLink.setStatus('mandatory')
imaGroupDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupDiffDelayMaxObs.setStatus('mandatory')
imaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupAlphaValue.setStatus('mandatory')
imaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupBetaValue.setStatus('mandatory')
imaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupGammaValue.setStatus('mandatory')
imaGroupRunningSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRunningSecs.setStatus('mandatory')
imaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupUnavailSecs.setStatus('mandatory')
imaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNeNumFailures.setStatus('mandatory')
imaGroupFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupFeNumFailures.setStatus('mandatory')
imaGroupTxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupTxAvailCellRate.setStatus('mandatory')
imaGroupRxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupRxAvailCellRate.setStatus('mandatory')
imaGroupNumTxCfgLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxCfgLnks.setStatus('mandatory')
imaGroupNumRxCfgLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxCfgLnks.setStatus('mandatory')
imaGroupNumTxActLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumTxActLnks.setStatus('mandatory')
imaGroupNumRxActLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGroupNumRxActLnks.setStatus('mandatory')
imaGroupTestLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 35), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTestLinkIfIndex.setStatus('mandatory')
imaGroupTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 36), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTestPattern.setStatus('mandatory')
imaGroupTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("operating", 2), ("linkFail", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaGroupTestProcStatus.setStatus('mandatory')
imaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1), )
if mibBuilder.loadTexts: imaLinkTable.setStatus('mandatory')
imaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaLinkGroupIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaLinkIfIndex"))
if mibBuilder.loadTexts: imaLinkEntry.setStatus('mandatory')
imaLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkIfIndex.setStatus('mandatory')
imaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaLinkRowStatus.setStatus('mandatory')
imaLinkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("imaGroup-1", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaLinkGroupIndex.setStatus('mandatory')
imaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxState.setStatus('mandatory')
imaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxState.setStatus('mandatory')
imaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxState.setStatus('mandatory')
imaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableBlocked", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxState.setStatus('mandatory')
imaLinkNeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxFailureStatus.setStatus('mandatory')
imaLinkFeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxFailureStatus.setStatus('mandatory')
imaLinkTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxLid.setStatus('mandatory')
imaLinkRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxLid.setStatus('mandatory')
imaLinkRelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRelDelay.setStatus('mandatory')
imaLinkImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkImaViolations.setStatus('mandatory')
imaLinkOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkOifAnomalies.setStatus('mandatory')
imaLinkNeSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeSevErroredSec.setStatus('mandatory')
imaLinkFeSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeSevErroredSec.setStatus('mandatory')
imaLinkNeUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeUnavailSec.setStatus('mandatory')
imaLinkFeUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeUnavailSec.setStatus('mandatory')
imaLinkNeTxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxUnusableSec.setStatus('mandatory')
imaLinkNeRxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxUnusableSec.setStatus('mandatory')
imaLinkFeTxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxUnusableSec.setStatus('mandatory')
imaLinkFeRxUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxUnusableSec.setStatus('mandatory')
imaLinkNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeTxNumFailures.setStatus('mandatory')
imaLinkNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNeRxNumFailures.setStatus('mandatory')
imaLinkFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeTxNumFailures.setStatus('mandatory')
imaLinkFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkFeRxNumFailures.setStatus('mandatory')
imaLinkTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTxStuffs.setStatus('mandatory')
imaLinkRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxStuffs.setStatus('mandatory')
imaLinkRxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkRxTestPattern.setStatus('mandatory')
imaLinkTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("operating", 2), ("linkFail", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkTestProcStatus.setStatus('mandatory')
imaLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 2, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaLinkNumber.setStatus('mandatory')
imaDs1Table = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1), )
if mibBuilder.loadTexts: imaDs1Table.setStatus('mandatory')
imaDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaDs1GroupIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaDs1Index"))
if mibBuilder.loadTexts: imaDs1Entry.setStatus('mandatory')
imaDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1Index.setStatus('mandatory')
imaDs1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1GroupIndex.setStatus('mandatory')
imaDs1ConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("line", 3), ("local", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1ConfLoopback.setStatus('mandatory')
imaDs1ConfTxClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("recovered", 2))).clone('recovered')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1ConfTxClockSelect.setStatus('mandatory')
imaDs1ConfLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfLineCode.setStatus('mandatory')
imaDs1ConfFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sf", 1), ("esf", 2))).clone('esf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfFrameFormat.setStatus('mandatory')
imaDs1ConfCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("short-haul-0-133-FT", 1), ("short-haul-133-266-FT", 2), ("short-haul-266-399-FT", 3), ("short-haul-399-533-FT", 4), ("short-haul-533-655-FT", 5), ("long-haul-0-0-dB", 6), ("long-haul-7-5-dB", 7), ("long-haul-15-0-dB", 8), ("long-haul-22-5-dB", 9))).clone('short-haul-0-133-FT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1ConfCableLength.setStatus('mandatory')
imaDs1ConfTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfTxTimingRefLink.setStatus('mandatory')
imaDs1ConfScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1ConfScramble.setStatus('mandatory')
imaDs1StatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsNoSignals.setStatus('mandatory')
imaDs1StatsAISDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsAISDetects.setStatus('mandatory')
imaDs1StatsYelAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsYelAlarmCount.setStatus('mandatory')
imaDs1StatsLCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsLCVErrors.setStatus('mandatory')
imaDs1StatsPCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsPCVErrors.setStatus('mandatory')
imaDs1StatsMOSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsMOSErrors.setStatus('mandatory')
imaDs1StatsSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSyncLossCount.setStatus('mandatory')
imaDs1StatsHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsHECErrors.setStatus('mandatory')
imaDs1StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSignalLoss.setStatus('mandatory')
imaDs1StatsAISDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsAISDetect.setStatus('mandatory')
imaDs1StatsYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsYellowAlarm.setStatus('mandatory')
imaDs1StatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSyncLoss.setStatus('mandatory')
imaDs1StatsTxClockLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsTxClockLoss.setStatus('mandatory')
imaDs1StatsErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsErrSec.setStatus('mandatory')
imaDs1StatsLineErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsLineErrSec.setStatus('mandatory')
imaDs1StatsErrFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsErrFreeSec.setStatus('mandatory')
imaDs1StatsBurstErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsBurstErrSec.setStatus('mandatory')
imaDs1StatsSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSevErrSec.setStatus('mandatory')
imaDs1StatsConSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsConSevErrSec.setStatus('mandatory')
imaDs1StatsFailedSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsFailedSignal.setStatus('mandatory')
imaDs1StatsUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsUnavailSec.setStatus('mandatory')
imaDs1StatsSevErrFramSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1StatsSevErrFramSec.setStatus('mandatory')
imaDs1StatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1StatsClearCounters.setStatus('mandatory')
imaDs1DebugAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugAddr.setStatus('mandatory')
imaDs1DebugReadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugReadValue.setStatus('mandatory')
imaDs1DebugWriteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugWriteValue.setStatus('mandatory')
imaDs1DebugRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 36), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaDs1DebugRead.setStatus('mandatory')
imaDs1PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 3, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaDs1PortNumber.setStatus('mandatory')
imaE1Table = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1), )
if mibBuilder.loadTexts: imaE1Table.setStatus('mandatory')
imaE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaE1GroupIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", "imaE1Index"))
if mibBuilder.loadTexts: imaE1Entry.setStatus('mandatory')
imaE1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1Index.setStatus('mandatory')
imaE1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1GroupIndex.setStatus('mandatory')
imaE1ConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("internal", 2), ("external", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1ConfLoopback.setStatus('mandatory')
imaE1ConfTxClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("recovered", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1ConfTxClockSelect.setStatus('mandatory')
imaE1ConfLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdb3", 1), ("ami", 2))).clone('hdb3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfLineCode.setStatus('mandatory')
imaE1ConfFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc4-enabled", 1), ("crc4-disabled", 2))).clone('crc4-enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfFrameFormat.setStatus('mandatory')
imaE1ConfCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("short-haul", 1), ("long-haul", 2), ("long-haul-75", 3))).clone('short-haul')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1ConfCableLength.setStatus('mandatory')
imaE1ConfTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfTxTimingRefLink.setStatus('mandatory')
imaE1ConfScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1ConfScramble.setStatus('mandatory')
imaE1StatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsNoSignals.setStatus('mandatory')
imaE1StatsRAIDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsRAIDetects.setStatus('mandatory')
imaE1StatsFASErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsFASErrors.setStatus('mandatory')
imaE1StatsCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsCVErrors.setStatus('mandatory')
imaE1StatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsCRCErrors.setStatus('mandatory')
imaE1StatsEBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsEBitErrors.setStatus('mandatory')
imaE1StatsSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSyncLossCount.setStatus('mandatory')
imaE1StatsHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsHECErrors.setStatus('mandatory')
imaE1StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSignalLoss.setStatus('mandatory')
imaE1StatsRAIDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsRAIDetect.setStatus('mandatory')
imaE1StatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSyncLoss.setStatus('mandatory')
imaE1StatsTxClockLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsTxClockLoss.setStatus('mandatory')
imaE1StatsErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsErrSec.setStatus('mandatory')
imaE1StatsLineErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsLineErrSec.setStatus('mandatory')
imaE1StatsErrFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsErrFreeSec.setStatus('mandatory')
imaE1StatsBurstErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsBurstErrSec.setStatus('mandatory')
imaE1StatsSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSevErrSec.setStatus('mandatory')
imaE1StatsConSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsConSevErrSec.setStatus('mandatory')
imaE1StatsFailedSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsFailedSignal.setStatus('mandatory')
imaE1StatsUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsUnavailSec.setStatus('mandatory')
imaE1StatsSevErrFramSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1StatsSevErrFramSec.setStatus('mandatory')
imaE1StatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1StatsClearCounters.setStatus('mandatory')
imaE1DebugAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugAddr.setStatus('mandatory')
imaE1DebugReadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugReadValue.setStatus('mandatory')
imaE1DebugWriteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugWriteValue.setStatus('mandatory')
imaE1DebugRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 35), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaE1DebugRead.setStatus('mandatory')
imaE1PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 7, 4, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaE1PortNumber.setStatus('mandatory')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ATM-IMA-MIB", imaE1StatsCRCErrors=imaE1StatsCRCErrors, imaDs1DebugRead=imaDs1DebugRead, imaE1StatsBurstErrSec=imaE1StatsBurstErrSec, imaGroupRxTimingRefLink=imaGroupRxTimingRefLink, imaGroupGammaValue=imaGroupGammaValue, imaE1StatsSyncLoss=imaE1StatsSyncLoss, imaDs1StatsBurstErrSec=imaDs1StatsBurstErrSec, imaGroupSymmetry=imaGroupSymmetry, imaE1DebugWriteValue=imaE1DebugWriteValue, imaE1StatsFASErrors=imaE1StatsFASErrors, imaLinkNeUnavailSec=imaLinkNeUnavailSec, imaDs1StatsFailedSignal=imaDs1StatsFailedSignal, imaE1ConfTxClockSelect=imaE1ConfTxClockSelect, imaE1StatsSyncLossCount=imaE1StatsSyncLossCount, imaDs1StatsSyncLossCount=imaDs1StatsSyncLossCount, atmImaDs1Objects=atmImaDs1Objects, imaGroupLeastDelayLink=imaGroupLeastDelayLink, imaGroupIndex=imaGroupIndex, imaE1StatsLineErrSec=imaE1StatsLineErrSec, imaDs1StatsNoSignals=imaDs1StatsNoSignals, imaGroupTestProcStatus=imaGroupTestProcStatus, imaGroupNumber=imaGroupNumber, imaDs1DebugReadValue=imaDs1DebugReadValue, imaDs1StatsYellowAlarm=imaDs1StatsYellowAlarm, imaE1StatsCVErrors=imaE1StatsCVErrors, imaDs1ConfScramble=imaDs1ConfScramble, imaE1StatsHECErrors=imaE1StatsHECErrors, imaDs1ConfLineCode=imaDs1ConfLineCode, imaE1StatsTxClockLoss=imaE1StatsTxClockLoss, imaE1StatsUnavailSec=imaE1StatsUnavailSec, imaLinkIfIndex=imaLinkIfIndex, imaDs1DebugWriteValue=imaDs1DebugWriteValue, imaDs1StatsPCVErrors=imaDs1StatsPCVErrors, imaE1Entry=imaE1Entry, imaLinkTestProcStatus=imaLinkTestProcStatus, imaDs1StatsLCVErrors=imaDs1StatsLCVErrors, imaLinkFeRxUnusableSec=imaLinkFeRxUnusableSec, imaLinkEntry=imaLinkEntry, imaLinkNeSevErroredSec=imaLinkNeSevErroredSec, imaDs1StatsAISDetects=imaDs1StatsAISDetects, imaDs1ConfTxTimingRefLink=imaDs1ConfTxTimingRefLink, imaDs1StatsSevErrSec=imaDs1StatsSevErrSec, imaLinkNeRxState=imaLinkNeRxState, atmImaLinkObjects=atmImaLinkObjects, imaLinkFeTxNumFailures=imaLinkFeTxNumFailures, imaGroupIfIndex=imaGroupIfIndex, imaGroupTable=imaGroupTable, imaDs1ConfLoopback=imaDs1ConfLoopback, imaDs1StatsMOSErrors=imaDs1StatsMOSErrors, imaLinkRxLid=imaLinkRxLid, imaLinkNeRxNumFailures=imaLinkNeRxNumFailures, imaE1ConfTxTimingRefLink=imaE1ConfTxTimingRefLink, imaLinkFeUnavailSec=imaLinkFeUnavailSec, sonomaImaATMAdapterGroup=sonomaImaATMAdapterGroup, imaGroupNumTxCfgLnks=imaGroupNumTxCfgLnks, imaGroupLastChange=imaGroupLastChange, imaE1Index=imaE1Index, imaDs1StatsTxClockLoss=imaDs1StatsTxClockLoss, imaGroupFeTxClkMode=imaGroupFeTxClkMode, imaGroupUnavailSecs=imaGroupUnavailSecs, imaGroupFailureStatus=imaGroupFailureStatus, imaGroupNumRxCfgLnks=imaGroupNumRxCfgLnks, imaE1StatsSevErrSec=imaE1StatsSevErrSec, imaLinkRelDelay=imaLinkRelDelay, imaGroupMinNumTxLinks=imaGroupMinNumTxLinks, imaLinkOifAnomalies=imaLinkOifAnomalies, imaE1ConfScramble=imaE1ConfScramble, imaDs1GroupIndex=imaDs1GroupIndex, imaGroupDiffDelayMax=imaGroupDiffDelayMax, imaLinkNumber=imaLinkNumber, imaE1DebugAddr=imaE1DebugAddr, imaDs1Index=imaDs1Index, imaGroupRowStatus=imaGroupRowStatus, imaDs1PortNumber=imaDs1PortNumber, imaLinkTxStuffs=imaLinkTxStuffs, imaDs1StatsClearCounters=imaDs1StatsClearCounters, imaGroupTxTimingRefLink=imaGroupTxTimingRefLink, imaE1Table=imaE1Table, imaE1ConfCableLength=imaE1ConfCableLength, imaGroupTestPattern=imaGroupTestPattern, imaDs1Entry=imaDs1Entry, imaLinkNeTxNumFailures=imaLinkNeTxNumFailures, imaDs1StatsSevErrFramSec=imaDs1StatsSevErrFramSec, imaE1StatsRAIDetects=imaE1StatsRAIDetects, imaE1ConfLineCode=imaE1ConfLineCode, imaDs1StatsAISDetect=imaDs1StatsAISDetect, imaGroupRxImaId=imaGroupRxImaId, imaDs1StatsConSevErrSec=imaDs1StatsConSevErrSec, imaE1DebugReadValue=imaE1DebugReadValue, imaDs1StatsErrSec=imaDs1StatsErrSec, imaLinkFeTxState=imaLinkFeTxState, imaLinkNeRxUnusableSec=imaLinkNeRxUnusableSec, imaDs1StatsSignalLoss=imaDs1StatsSignalLoss, imaGroupTestLinkIfIndex=imaGroupTestLinkIfIndex, imaGroupDiffDelayMaxObs=imaGroupDiffDelayMaxObs, imaLinkFeSevErroredSec=imaLinkFeSevErroredSec, imaE1StatsClearCounters=imaE1StatsClearCounters, imaE1StatsConSevErrSec=imaE1StatsConSevErrSec, imaGroupFeState=imaGroupFeState, imaGroupNeTxClkMode=imaGroupNeTxClkMode, imaLinkTxLid=imaLinkTxLid, imaGroupRunningSecs=imaGroupRunningSecs, imaLinkGroupIndex=imaLinkGroupIndex, imaDs1ConfCableLength=imaDs1ConfCableLength, imaDs1ConfTxClockSelect=imaDs1ConfTxClockSelect, imaDs1StatsLineErrSec=imaDs1StatsLineErrSec, imaGroupTxFrameLength=imaGroupTxFrameLength, imaDs1StatsYelAlarmCount=imaDs1StatsYelAlarmCount, imaE1DebugRead=imaE1DebugRead, imaGroupTxImaId=imaGroupTxImaId, imaLinkRxTestPattern=imaLinkRxTestPattern, imaE1StatsEBitErrors=imaE1StatsEBitErrors, imaLinkFeRxState=imaLinkFeRxState, imaLinkNeTxUnusableSec=imaLinkNeTxUnusableSec, imaLinkImaViolations=imaLinkImaViolations, imaGroupNeState=imaGroupNeState, imaGroupRxFrameLength=imaGroupRxFrameLength, imaGroupNumRxActLnks=imaGroupNumRxActLnks, imaGroupTxAvailCellRate=imaGroupTxAvailCellRate, imaDs1ConfFrameFormat=imaDs1ConfFrameFormat, imaGroupBetaValue=imaGroupBetaValue, imaDs1DebugAddr=imaDs1DebugAddr, imaE1ConfFrameFormat=imaE1ConfFrameFormat, imaE1StatsFailedSignal=imaE1StatsFailedSignal, imaGroupMinNumRxLinks=imaGroupMinNumRxLinks, imaLinkRowStatus=imaLinkRowStatus, imaDs1StatsUnavailSec=imaDs1StatsUnavailSec, imaGroupNumTxActLnks=imaGroupNumTxActLnks, imaDs1Table=imaDs1Table, imaGroupRxAvailCellRate=imaGroupRxAvailCellRate, imaGroupEntry=imaGroupEntry, imaE1StatsSignalLoss=imaE1StatsSignalLoss, imaDs1StatsSyncLoss=imaDs1StatsSyncLoss, imaE1GroupIndex=imaE1GroupIndex, imaE1StatsErrSec=imaE1StatsErrSec, imaDs1StatsErrFreeSec=imaDs1StatsErrFreeSec, imaE1StatsSevErrFramSec=imaE1StatsSevErrFramSec, imaLinkTable=imaLinkTable, imaE1ConfLoopback=imaE1ConfLoopback, imaGroupAlphaValue=imaGroupAlphaValue, imaLinkFeRxNumFailures=imaLinkFeRxNumFailures, imaLinkFeRxFailureStatus=imaLinkFeRxFailureStatus, imaE1StatsRAIDetect=imaE1StatsRAIDetect, imaE1PortNumber=imaE1PortNumber, imaE1StatsErrFreeSec=imaE1StatsErrFreeSec, atmImaGroupObjects=atmImaGroupObjects, imaLinkFeTxUnusableSec=imaLinkFeTxUnusableSec, atmImaE1Objects=atmImaE1Objects, imaE1StatsNoSignals=imaE1StatsNoSignals, imaLinkNeRxFailureStatus=imaLinkNeRxFailureStatus, imaGroupNeNumFailures=imaGroupNeNumFailures, imaGroupFeNumFailures=imaGroupFeNumFailures, imaDs1StatsHECErrors=imaDs1StatsHECErrors, imaLinkNeTxState=imaLinkNeTxState, imaLinkRxStuffs=imaLinkRxStuffs)
