#
# PySNMP MIB module IBM2212-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM2212-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, Unsigned32, MibIdentifier, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Bits, ModuleIdentity, enterprises, Gauge32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Bits", "ModuleIdentity", "enterprises", "Gauge32", "Integer32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm2212 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149))
ibm2212admin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 1))
ibm2212system = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 2))
ibm2212hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 3))
ibm2212routing = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 4))
ibm2212switching = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 5))
ibm2212adminproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 1, 1))
ibm2212adminOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 1, 2))
ibm2212adminDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 1, 3))
ibm2212systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 2, 1))
ibm2212cfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 2, 2))
ibm2212hardwareGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1))
ibm2212EnetChipSet = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 1, 2, 1))
enetChipSetUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 1, 2, 1, 1))
enetChipSetAMD = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 149, 1, 2, 1, 2))
ibm2212AdapTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 1), )
if mibBuilder.loadTexts: ibm2212AdapTable.setStatus('mandatory')
ibm2212AdapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 1, 1), ).setIndexNames((0, "IBM2212-MIB", "ibm2212AdapSlotNum"))
if mibBuilder.loadTexts: ibm2212AdapEntry.setStatus('mandatory')
ibm2212AdapSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm2212AdapSlotNum.setStatus('mandatory')
ibm2212AdapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("not-present", 2), ("eth-fast-1port", 3), ("token-ring-1port", 4), ("eth-fast-2port", 5), ("token-ring-2port", 6), ("serial-4port-shallow", 7), ("isdn-bri-u-2port", 8), ("isdn-bri-st-2port", 9), ("isdn-pri-t1j1-1port", 10), ("isdn-pri-e1-1port", 11), ("compression-encryption", 12), ("serial-4port-deep", 13), ("isdn-pri-t1j1-2port", 14), ("isdn-pri-e1-2port", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm2212AdapType.setStatus('mandatory')
ibm2212AdapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("not-present", 2), ("enable-pending", 3), ("enabled", 4), ("unknown-device", 5), ("hardware-error", 6), ("not-powered", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm2212AdapOperStatus.setStatus('mandatory')
ibm2212GraphicTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 2), )
if mibBuilder.loadTexts: ibm2212GraphicTable.setStatus('mandatory')
ibm2212GraphicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 2, 1), ).setIndexNames((0, "IBM2212-MIB", "ibm2212GraphicSlotNum"), (0, "IBM2212-MIB", "ibm2212GraphicPortNum"))
if mibBuilder.loadTexts: ibm2212GraphicEntry.setStatus('mandatory')
ibm2212GraphicSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm2212GraphicSlotNum.setStatus('mandatory')
ibm2212GraphicPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm2212GraphicPortNum.setStatus('mandatory')
ibm2212GraphicifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 149, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm2212GraphicifIndex.setStatus('mandatory')
mibBuilder.exportSymbols("IBM2212-MIB", ibm2212adminproducts=ibm2212adminproducts, ibm2212AdapOperStatus=ibm2212AdapOperStatus, ibm2212systemInfo=ibm2212systemInfo, ibm2212GraphicSlotNum=ibm2212GraphicSlotNum, ibm2212GraphicPortNum=ibm2212GraphicPortNum, ibm2212admin=ibm2212admin, ibm2212=ibm2212, ibm2212hardwareGeneral=ibm2212hardwareGeneral, ibm2212routing=ibm2212routing, enetChipSetUnknown=enetChipSetUnknown, ibm2212AdapSlotNum=ibm2212AdapSlotNum, ibm2212adminDebug=ibm2212adminDebug, ibmProd=ibmProd, ibm2212adminOID=ibm2212adminOID, ibm2212AdapEntry=ibm2212AdapEntry, ibm2212hardware=ibm2212hardware, ibm2212AdapType=ibm2212AdapType, ibm2212switching=ibm2212switching, ibm=ibm, ibm2212GraphicEntry=ibm2212GraphicEntry, ibm2212EnetChipSet=ibm2212EnetChipSet, ibm2212GraphicTable=ibm2212GraphicTable, ibm2212cfgInfo=ibm2212cfgInfo, ibm2212GraphicifIndex=ibm2212GraphicifIndex, ibm2212AdapTable=ibm2212AdapTable, enetChipSetAMD=enetChipSetAMD, ibm2212system=ibm2212system)
