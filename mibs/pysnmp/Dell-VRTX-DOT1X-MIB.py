#
# PySNMP MIB module Dell-VRTX-DOT1X-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dell-VRTX-DOT1X-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:42:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
rnd, = mibBuilder.importSymbols("Dell-VRTX-MIB", "rnd")
PaeControlledPortStatus, dot1xAuthSessionStatsEntry, dot1xPaePortNumber = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "PaeControlledPortStatus", "dot1xAuthSessionStatsEntry", "dot1xPaePortNumber")
dot1qFdbId, VlanIndex, PortList = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qFdbId", "VlanIndex", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, Bits, NotificationType, TimeTicks, Gauge32, IpAddress, ObjectIdentity, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Bits", "NotificationType", "TimeTicks", "Gauge32", "IpAddress", "ObjectIdentity", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Counter32")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
rldot1x = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 95))
rldot1x.setRevisions(('2007-01-02 00:00',))
if mibBuilder.loadTexts: rldot1x.setLastUpdated('200701020000Z')
if mibBuilder.loadTexts: rldot1x.setOrganization('Dell')
rldot1xMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xMibVersion.setStatus('current')
rldot1xExtAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 2), )
if mibBuilder.loadTexts: rldot1xExtAuthSessionStatsTable.setStatus('current')
rldot1xExtAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 2, 1), )
dot1xAuthSessionStatsEntry.registerAugmentions(("Dell-VRTX-DOT1X-MIB", "rldot1xExtAuthSessionStatsEntry"))
rldot1xExtAuthSessionStatsEntry.setIndexNames(*dot1xAuthSessionStatsEntry.getIndexNames())
if mibBuilder.loadTexts: rldot1xExtAuthSessionStatsEntry.setStatus('current')
rlDot1xAuthSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDot1xAuthSessionAuthenticMethod.setStatus('current')
rldot1xGuestVlanSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xGuestVlanSupported.setStatus('current')
rldot1xGuestVlanVID = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xGuestVlanVID.setStatus('current')
rldot1xGuestVlanPorts = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xGuestVlanPorts.setStatus('current')
rldot1xUnAuthenticatedVlanSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xUnAuthenticatedVlanSupported.setStatus('current')
rldot1xUnAuthenticatedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 7), )
if mibBuilder.loadTexts: rldot1xUnAuthenticatedVlanTable.setStatus('current')
rldot1xUnAuthenticatedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 7, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: rldot1xUnAuthenticatedVlanEntry.setStatus('current')
rldot1xUnAuthenticatedVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 7, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rldot1xUnAuthenticatedVlanStatus.setStatus('current')
rldot1xUserBasedVlanSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xUserBasedVlanSupported.setStatus('current')
rldot1xUserBasedVlanPorts = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 9), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xUserBasedVlanPorts.setStatus('current')
rldot1xAuthenticationPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 10), )
if mibBuilder.loadTexts: rldot1xAuthenticationPortTable.setStatus('current')
rldot1xAuthenticationPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 10, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: rldot1xAuthenticationPortEntry.setStatus('current')
rldot1xAuthenticationPortMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("eapolOnly", 1), ("macAndEapol", 2), ("macOnly", 3), ("webOnly", 4), ("webAndEapol", 5), ("webAndMac", 6), ("webAndMacAndEapol", 7))).clone('eapolOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xAuthenticationPortMethod.setStatus('current')
rldot1xRadiusAttrVlanIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xRadiusAttrVlanIdEnabled.setStatus('current')
rldot1xRadiusAttAclNameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xRadiusAttAclNameEnabled.setStatus('current')
rldot1xTimeBasedName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xTimeBasedName.setStatus('current')
rldot1xTimeBasedActive = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xTimeBasedActive.setStatus('current')
rldot1xRadiusAttrVlanIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 6), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xRadiusAttrVlanIdentifier.setStatus('current')
rldot1xMaxHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xMaxHosts.setStatus('current')
rldot1xMaxLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xMaxLoginAttempts.setStatus('current')
rldot1xTimeoutSilencePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xTimeoutSilencePeriod.setStatus('current')
rldot1xNumOfAuthorizedHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xNumOfAuthorizedHosts.setStatus('current')
rldot1xAuthenticationOpenEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 10, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xAuthenticationOpenEnabled.setStatus('current')
rldot1xAuthMultiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 11), )
if mibBuilder.loadTexts: rldot1xAuthMultiStatsTable.setStatus('current')
rldot1xAuthMultiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 11, 1), ).setIndexNames((0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiStatsPortNumber"), (0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiStatsSourceMac"))
if mibBuilder.loadTexts: rldot1xAuthMultiStatsEntry.setStatus('current')
rldot1xAuthMultiStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiStatsPortNumber.setStatus('current')
rldot1xAuthMultiStatsSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiStatsSourceMac.setStatus('current')
rldot1xAuthMultiEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolFramesRx.setStatus('current')
rldot1xAuthMultiEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolFramesTx.setStatus('current')
rldot1xAuthMultiEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolStartFramesRx.setStatus('current')
rldot1xAuthMultiEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolLogoffFramesRx.setStatus('current')
rldot1xAuthMultiEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolRespIdFramesRx.setStatus('current')
rldot1xAuthMultiEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolRespFramesRx.setStatus('current')
rldot1xAuthMultiEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolReqIdFramesTx.setStatus('current')
rldot1xAuthMultiEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapolReqFramesTx.setStatus('current')
rldot1xAuthMultiInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiInvalidEapolFramesRx.setStatus('current')
rldot1xAuthMultiEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEapLengthErrorFramesRx.setStatus('current')
rldot1xAuthMultiDiagTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 12), )
if mibBuilder.loadTexts: rldot1xAuthMultiDiagTable.setStatus('current')
rldot1xAuthMultiDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 12, 1), ).setIndexNames((0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiDiagPortNumber"), (0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiDiagSourceMac"))
if mibBuilder.loadTexts: rldot1xAuthMultiDiagEntry.setStatus('current')
rldot1xAuthMultiDiagPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiDiagPortNumber.setStatus('current')
rldot1xAuthMultiDiagSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiDiagSourceMac.setStatus('current')
rldot1xAuthMultiEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEntersConnecting.setStatus('current')
rldot1xAuthMultiEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiEntersAuthenticating.setStatus('current')
rldot1xAuthMultiAuthSuccessWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiAuthSuccessWhileAuthenticating.setStatus('current')
rldot1xAuthMultiAuthFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiAuthFailWhileAuthenticating.setStatus('current')
rldot1xAuthMultiAuthReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiAuthReauthsWhileAuthenticating.setStatus('current')
rldot1xAuthMultiAuthEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiAuthEapStartsWhileAuthenticating.setStatus('current')
rldot1xAuthMultiAuthReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiAuthReauthsWhileAuthenticated.setStatus('current')
rldot1xAuthMultiAuthEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiAuthEapStartsWhileAuthenticated.setStatus('current')
rldot1xAuthMultiBackendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiBackendResponses.setStatus('current')
rldot1xAuthMultiBackendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiBackendAccessChallenges.setStatus('current')
rldot1xAuthMultiBackendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiBackendOtherRequestsToSupplicant.setStatus('current')
rldot1xAuthMultiBackendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiBackendNonNakResponsesFromSupplicant.setStatus('current')
rldot1xAuthMultiBackendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiBackendAuthSuccesses.setStatus('current')
rldot1xAuthMultiSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 13), )
if mibBuilder.loadTexts: rldot1xAuthMultiSessionStatsTable.setStatus('current')
rldot1xAuthMultiSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 13, 1), ).setIndexNames((0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiSessionStatsPortNumber"), (0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiSessionStatsSourceMac"))
if mibBuilder.loadTexts: rldot1xAuthMultiSessionStatsEntry.setStatus('current')
rldot1xAuthMultiSessionStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionStatsPortNumber.setStatus('current')
rldot1xAuthMultiSessionStatsSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionStatsSourceMac.setStatus('current')
rldot1xAuthMultiSessionOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionOctetsRx.setStatus('current')
rldot1xAuthMultiSessionOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionOctetsTx.setStatus('current')
rldot1xAuthMultiSessionFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionFramesRx.setStatus('current')
rldot1xAuthMultiSessionFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionFramesTx.setStatus('current')
rldot1xAuthMultiSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionId.setStatus('current')
rldot1xAuthMultiSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionTime.setStatus('current')
rldot1xAuthMultiSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionUserName.setStatus('current')
rldot1xAuthMultiSessionRadiusAttrVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionRadiusAttrVlan.setStatus('current')
rldot1xAuthMultiSessionRadiusAttrFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionRadiusAttrFilterId.setStatus('current')
rldot1xAuthMultiSessionRadiusAttrSecondFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSessionRadiusAttrSecondFilterId.setStatus('current')
rlDot1xAuthMultiSessionMonitorResultsReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("notRejected", 0), ("aclNotExst", 1), ("aclOvrfl", 2), ("authErr", 3), ("fltrErr", 4), ("ipv6WithMac", 5), ("ipv6WithNotIp", 6), ("polBasicMode", 7), ("aclDel", 8), ("polDel", 9), ("vlanDfly", 10), ("vlanDynam", 11), ("vlanGuest", 12), ("vlanNoInMsg", 13), ("vlanNotExst", 14), ("vlanOvfl", 15), ("vlanVoice", 16), ("vlanUnauth", 17), ("frsMthDeny", 18), ("radApierr", 19), ("radInvlres", 20), ("radNoresp", 21), ("aclEgress", 22), ("maxHosts", 23), ("noActivity", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDot1xAuthMultiSessionMonitorResultsReason.setStatus('current')
rlDot1xAuthMultiSessionMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eapol", 1), ("mac", 2), ("web", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDot1xAuthMultiSessionMethodType.setStatus('current')
rldot1xAuthMultiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 14), )
if mibBuilder.loadTexts: rldot1xAuthMultiConfigTable.setStatus('current')
rldot1xAuthMultiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 14, 1), ).setIndexNames((0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiPortNumber"), (0, "Dell-VRTX-DOT1X-MIB", "rldot1xAuthMultiSourceMac"))
if mibBuilder.loadTexts: rldot1xAuthMultiConfigEntry.setStatus('current')
rldot1xAuthMultiPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiPortNumber.setStatus('current')
rldot1xAuthMultiSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 14, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiSourceMac.setStatus('current')
rldot1xAuthMultiPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiPaeState.setStatus('current')
rldot1xAuthMultiBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiBackendAuthState.setStatus('current')
rldot1xAuthMultiControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 14, 1, 5), PaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xAuthMultiControlledPortStatus.setStatus('current')
rldot1xBpduFilteringEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xBpduFilteringEnabled.setStatus('current')
rldot1xRadiusAttributesErrorsAclReject = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xRadiusAttributesErrorsAclReject.setStatus('current')
rldot1xGuestVlanTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xGuestVlanTimeInterval.setStatus('current')
rldot1xMacAuthSuccessTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xMacAuthSuccessTrapEnabled.setStatus('current')
rldot1xMacAuthFailureTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xMacAuthFailureTrapEnabled.setStatus('current')
rldot1xLegacyPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 22), )
if mibBuilder.loadTexts: rldot1xLegacyPortTable.setStatus('current')
rldot1xLegacyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 22, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: rldot1xLegacyPortEntry.setStatus('current')
rldot1xLegacyPortModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 22, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xLegacyPortModeEnabled.setStatus('current')
rldot1xSystemAuthControlMonitorVlan = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xSystemAuthControlMonitorVlan.setStatus('current')
rldot1xClearPortMibCounters = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 24), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xClearPortMibCounters.setStatus('current')
rldot1xWebQuietFailureTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xWebQuietFailureTrapEnabled.setStatus('current')
rldot1xMacWebAuthSuccessTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("eapolOnly", 1), ("macAndEapol", 2), ("macOnly", 3), ("webOnly", 4), ("webAndEapol", 5), ("webAndMac", 6), ("webAndMacAndEapol", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xMacWebAuthSuccessTrapEnabled.setStatus('current')
rldot1xMacWebAuthFailureTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 95, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("eapolOnly", 1), ("macAndEapol", 2), ("macOnly", 3), ("webOnly", 4), ("webAndEapol", 5), ("webAndMac", 6), ("webAndMacAndEapol", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xMacWebAuthFailureTrapEnabled.setStatus('current')
rldot1xLockedCientsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 95, 28), )
if mibBuilder.loadTexts: rldot1xLockedCientsTable.setStatus('current')
rldot1xLockedCientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 95, 28, 1), ).setIndexNames((0, "Dell-VRTX-DOT1X-MIB", "rldot1xLockedCientsPortNumber"), (0, "Dell-VRTX-DOT1X-MIB", "rldot1xLockedCientsSourceMac"))
if mibBuilder.loadTexts: rldot1xLockedCientsEntry.setStatus('current')
rldot1xLockedCientsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xLockedCientsPortNumber.setStatus('current')
rldot1xLockedCientsSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 28, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xLockedCientsSourceMac.setStatus('current')
rldot1xLockedCientsRemainedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 28, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rldot1xLockedCientsRemainedTime.setStatus('current')
rldot1xLockedCientsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 95, 28, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rldot1xLockedCientsRowStatus.setStatus('current')
mibBuilder.exportSymbols("Dell-VRTX-DOT1X-MIB", rldot1xAuthMultiEapolLogoffFramesRx=rldot1xAuthMultiEapolLogoffFramesRx, rldot1xAuthMultiSessionOctetsRx=rldot1xAuthMultiSessionOctetsRx, rldot1xExtAuthSessionStatsTable=rldot1xExtAuthSessionStatsTable, rldot1xAuthMultiSessionFramesRx=rldot1xAuthMultiSessionFramesRx, rldot1xMacWebAuthSuccessTrapEnabled=rldot1xMacWebAuthSuccessTrapEnabled, rldot1xAuthMultiBackendAccessChallenges=rldot1xAuthMultiBackendAccessChallenges, rldot1xAuthMultiStatsSourceMac=rldot1xAuthMultiStatsSourceMac, rldot1xLockedCientsRemainedTime=rldot1xLockedCientsRemainedTime, rldot1xUnAuthenticatedVlanEntry=rldot1xUnAuthenticatedVlanEntry, rldot1xLockedCientsRowStatus=rldot1xLockedCientsRowStatus, PYSNMP_MODULE_ID=rldot1x, rldot1xRadiusAttrVlanIdentifier=rldot1xRadiusAttrVlanIdentifier, rldot1xAuthMultiPaeState=rldot1xAuthMultiPaeState, rldot1xNumOfAuthorizedHosts=rldot1xNumOfAuthorizedHosts, rldot1xAuthMultiEapolReqIdFramesTx=rldot1xAuthMultiEapolReqIdFramesTx, rldot1xMacAuthSuccessTrapEnabled=rldot1xMacAuthSuccessTrapEnabled, rldot1xMacAuthFailureTrapEnabled=rldot1xMacAuthFailureTrapEnabled, rlDot1xAuthMultiSessionMethodType=rlDot1xAuthMultiSessionMethodType, rldot1xMacWebAuthFailureTrapEnabled=rldot1xMacWebAuthFailureTrapEnabled, rldot1xAuthMultiSessionOctetsTx=rldot1xAuthMultiSessionOctetsTx, rldot1xTimeBasedActive=rldot1xTimeBasedActive, rldot1xGuestVlanTimeInterval=rldot1xGuestVlanTimeInterval, rldot1xAuthMultiEapolFramesRx=rldot1xAuthMultiEapolFramesRx, rldot1xAuthMultiDiagEntry=rldot1xAuthMultiDiagEntry, rldot1xUnAuthenticatedVlanSupported=rldot1xUnAuthenticatedVlanSupported, rldot1xAuthMultiEntersAuthenticating=rldot1xAuthMultiEntersAuthenticating, rldot1xAuthMultiAuthFailWhileAuthenticating=rldot1xAuthMultiAuthFailWhileAuthenticating, rldot1xAuthMultiEapolRespFramesRx=rldot1xAuthMultiEapolRespFramesRx, rldot1xAuthMultiEapLengthErrorFramesRx=rldot1xAuthMultiEapLengthErrorFramesRx, rldot1xLockedCientsEntry=rldot1xLockedCientsEntry, rldot1xExtAuthSessionStatsEntry=rldot1xExtAuthSessionStatsEntry, rldot1xTimeBasedName=rldot1xTimeBasedName, rldot1xLegacyPortEntry=rldot1xLegacyPortEntry, rldot1xAuthMultiStatsPortNumber=rldot1xAuthMultiStatsPortNumber, rldot1xAuthMultiEapolStartFramesRx=rldot1xAuthMultiEapolStartFramesRx, rldot1xAuthMultiBackendAuthState=rldot1xAuthMultiBackendAuthState, rldot1xAuthMultiConfigTable=rldot1xAuthMultiConfigTable, rldot1xAuthMultiSessionId=rldot1xAuthMultiSessionId, rldot1xAuthMultiDiagSourceMac=rldot1xAuthMultiDiagSourceMac, rldot1xClearPortMibCounters=rldot1xClearPortMibCounters, rldot1xAuthMultiControlledPortStatus=rldot1xAuthMultiControlledPortStatus, rldot1xWebQuietFailureTrapEnabled=rldot1xWebQuietFailureTrapEnabled, rldot1xAuthMultiBackendNonNakResponsesFromSupplicant=rldot1xAuthMultiBackendNonNakResponsesFromSupplicant, rldot1xGuestVlanPorts=rldot1xGuestVlanPorts, rldot1xMaxLoginAttempts=rldot1xMaxLoginAttempts, rldot1xAuthMultiSessionStatsSourceMac=rldot1xAuthMultiSessionStatsSourceMac, rldot1xAuthMultiBackendResponses=rldot1xAuthMultiBackendResponses, rldot1xLockedCientsTable=rldot1xLockedCientsTable, rldot1xAuthenticationPortMethod=rldot1xAuthenticationPortMethod, rldot1xRadiusAttributesErrorsAclReject=rldot1xRadiusAttributesErrorsAclReject, rldot1xLegacyPortTable=rldot1xLegacyPortTable, rldot1xUnAuthenticatedVlanStatus=rldot1xUnAuthenticatedVlanStatus, rldot1xAuthMultiAuthReauthsWhileAuthenticating=rldot1xAuthMultiAuthReauthsWhileAuthenticating, rldot1xLockedCientsPortNumber=rldot1xLockedCientsPortNumber, rldot1xAuthenticationOpenEnabled=rldot1xAuthenticationOpenEnabled, rldot1xAuthMultiSessionFramesTx=rldot1xAuthMultiSessionFramesTx, rldot1xAuthMultiEapolReqFramesTx=rldot1xAuthMultiEapolReqFramesTx, rldot1xLockedCientsSourceMac=rldot1xLockedCientsSourceMac, rldot1xAuthMultiSessionRadiusAttrSecondFilterId=rldot1xAuthMultiSessionRadiusAttrSecondFilterId, rldot1xAuthMultiAuthSuccessWhileAuthenticating=rldot1xAuthMultiAuthSuccessWhileAuthenticating, rldot1xAuthMultiConfigEntry=rldot1xAuthMultiConfigEntry, rldot1xAuthMultiDiagPortNumber=rldot1xAuthMultiDiagPortNumber, rldot1xAuthMultiStatsEntry=rldot1xAuthMultiStatsEntry, rldot1xAuthMultiSessionStatsPortNumber=rldot1xAuthMultiSessionStatsPortNumber, rldot1xAuthenticationPortEntry=rldot1xAuthenticationPortEntry, rldot1x=rldot1x, rldot1xSystemAuthControlMonitorVlan=rldot1xSystemAuthControlMonitorVlan, rldot1xAuthMultiEntersConnecting=rldot1xAuthMultiEntersConnecting, rldot1xGuestVlanVID=rldot1xGuestVlanVID, rldot1xAuthMultiAuthEapStartsWhileAuthenticating=rldot1xAuthMultiAuthEapStartsWhileAuthenticating, rldot1xAuthMultiInvalidEapolFramesRx=rldot1xAuthMultiInvalidEapolFramesRx, rldot1xAuthMultiBackendOtherRequestsToSupplicant=rldot1xAuthMultiBackendOtherRequestsToSupplicant, rlDot1xAuthSessionAuthenticMethod=rlDot1xAuthSessionAuthenticMethod, rldot1xAuthMultiSourceMac=rldot1xAuthMultiSourceMac, rldot1xAuthMultiAuthReauthsWhileAuthenticated=rldot1xAuthMultiAuthReauthsWhileAuthenticated, rldot1xTimeoutSilencePeriod=rldot1xTimeoutSilencePeriod, rldot1xRadiusAttAclNameEnabled=rldot1xRadiusAttAclNameEnabled, rldot1xAuthMultiBackendAuthSuccesses=rldot1xAuthMultiBackendAuthSuccesses, rldot1xAuthMultiPortNumber=rldot1xAuthMultiPortNumber, rldot1xAuthMultiSessionStatsTable=rldot1xAuthMultiSessionStatsTable, rldot1xUnAuthenticatedVlanTable=rldot1xUnAuthenticatedVlanTable, rldot1xUserBasedVlanPorts=rldot1xUserBasedVlanPorts, rldot1xAuthMultiSessionTime=rldot1xAuthMultiSessionTime, rldot1xAuthMultiDiagTable=rldot1xAuthMultiDiagTable, rlDot1xAuthMultiSessionMonitorResultsReason=rlDot1xAuthMultiSessionMonitorResultsReason, rldot1xAuthMultiAuthEapStartsWhileAuthenticated=rldot1xAuthMultiAuthEapStartsWhileAuthenticated, rldot1xAuthMultiStatsTable=rldot1xAuthMultiStatsTable, rldot1xAuthMultiSessionStatsEntry=rldot1xAuthMultiSessionStatsEntry, rldot1xAuthenticationPortTable=rldot1xAuthenticationPortTable, rldot1xAuthMultiEapolFramesTx=rldot1xAuthMultiEapolFramesTx, rldot1xMibVersion=rldot1xMibVersion, rldot1xAuthMultiSessionUserName=rldot1xAuthMultiSessionUserName, rldot1xBpduFilteringEnabled=rldot1xBpduFilteringEnabled, rldot1xAuthMultiSessionRadiusAttrVlan=rldot1xAuthMultiSessionRadiusAttrVlan, rldot1xRadiusAttrVlanIdEnabled=rldot1xRadiusAttrVlanIdEnabled, rldot1xAuthMultiEapolRespIdFramesRx=rldot1xAuthMultiEapolRespIdFramesRx, rldot1xMaxHosts=rldot1xMaxHosts, rldot1xUserBasedVlanSupported=rldot1xUserBasedVlanSupported, rldot1xGuestVlanSupported=rldot1xGuestVlanSupported, rldot1xAuthMultiSessionRadiusAttrFilterId=rldot1xAuthMultiSessionRadiusAttrFilterId, rldot1xLegacyPortModeEnabled=rldot1xLegacyPortModeEnabled)
