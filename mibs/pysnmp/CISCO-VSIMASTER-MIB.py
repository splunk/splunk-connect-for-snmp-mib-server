#
# PySNMP MIB module CISCO-VSIMASTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VSIMASTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:03:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, IpAddress, Gauge32, ModuleIdentity, NotificationType, TimeTicks, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "IpAddress", "Gauge32", "ModuleIdentity", "NotificationType", "TimeTicks", "iso", "Counter32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoVsiMasterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 162))
ciscoVsiMasterMIB.setRevisions(('2000-10-17 00:00', '2000-06-01 00:00',))
if mibBuilder.loadTexts: ciscoVsiMasterMIB.setLastUpdated('200010170000Z')
if mibBuilder.loadTexts: ciscoVsiMasterMIB.setOrganization('Cisco Systems, Inc.')
class VsiControllerIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class VsiSessionIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class VsiLogicalIfIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class VsiXCIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

ciscoVsiMasterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 162, 1))
ciscoVsiMasterNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 162, 2))
ciscoVsiMasterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 162, 3))
vsiMasterControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1), )
if mibBuilder.loadTexts: vsiMasterControllerTable.setStatus('current')
vsiMasterControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1), ).setIndexNames((0, "CISCO-VSIMASTER-MIB", "vsiControllerIndex"))
if mibBuilder.loadTexts: vsiMasterControllerEntry.setStatus('current')
vsiControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 1), VsiControllerIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiControllerIndex.setStatus('current')
vsiControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiControllerId.setStatus('current')
vsiCrossConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiCrossConnects.setStatus('current')
vsiControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mpls", 2), ("pnni", 3), ("par", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiControllerType.setStatus('current')
vsiBaseVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiBaseVersionSupported.setStatus('current')
vsiTopVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiTopVersionSupported.setStatus('current')
vsiVersionInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiVersionInUse.setStatus('current')
vsiSpecifiedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiSpecifiedVersion.setStatus('current')
vsiControlInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiControlInterface.setStatus('current')
vsiLogicalControlInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 10), VsiLogicalIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalControlInterface.setStatus('current')
vsiControlIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiControlIfIpAddress.setStatus('current')
vsiAvailableChnlWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiAvailableChnlWarnThreshold.setStatus('current')
vsiAvailableChnlAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiAvailableChnlAlarmThreshold.setStatus('current')
vsiAvailableChnlThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("warning", 1), ("alarm", 2), ("recovery", 3), ("normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiAvailableChnlThresholdStatus.setStatus('current')
vsiSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2), )
if mibBuilder.loadTexts: vsiSessionTable.setStatus('current')
vsiSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1), ).setIndexNames((0, "CISCO-VSIMASTER-MIB", "vsiSessionControllerIndex"), (0, "CISCO-VSIMASTER-MIB", "vsiSessionIndex"))
if mibBuilder.loadTexts: vsiSessionEntry.setStatus('current')
vsiSessionControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 1), VsiControllerIndex())
if mibBuilder.loadTexts: vsiSessionControllerIndex.setStatus('current')
vsiSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 2), VsiSessionIndex())
if mibBuilder.loadTexts: vsiSessionIndex.setStatus('current')
vsiSessionVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionVpi.setStatus('current')
vsiSessionVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionVci.setStatus('current')
vsiSessionSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionSwitchId.setStatus('current')
vsiSessionSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionSwitchName.setStatus('current')
vsiSessionSlaveId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionSlaveId.setStatus('current')
vsiSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("inactive", 1), ("unknown", 2), ("configuring", 3), ("resyncStarting", 4), ("resyncUnderway", 5), ("resyncEnding", 6), ("discovery", 7), ("established", 8), ("shutdownStarting", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionState.setStatus('current')
vsiSessionWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionWindowSize.setStatus('current')
vsiSessionCmdsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionCmdsPending.setStatus('current')
vsiSessionActiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionActiveId.setStatus('current')
vsiSessionPowerupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiSessionPowerupId.setStatus('current')
vsiLogicalIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3), )
if mibBuilder.loadTexts: vsiLogicalIfTable.setStatus('current')
vsiLogicalIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1), ).setIndexNames((0, "CISCO-VSIMASTER-MIB", "vsiLogicalIfControllerIndex"), (0, "CISCO-VSIMASTER-MIB", "vsiLogicalIfIndex"))
if mibBuilder.loadTexts: vsiLogicalIfEntry.setStatus('current')
vsiLogicalIfControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 1), VsiControllerIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfControllerIndex.setStatus('current')
vsiLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 2), VsiLogicalIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfIndex.setStatus('current')
vsiLogicalIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfName.setStatus('current')
vsiLogicalIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("removed", 1), ("active", 2), ("failedExternal", 3), ("failedInternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfOperState.setStatus('current')
vsiLogicalIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("pendingDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfAdminState.setStatus('current')
vsiLogicalIfRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfRxCells.setStatus('current')
vsiLogicalIfTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfTxCells.setStatus('current')
vsiLogicalIfRxCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfRxCellsDiscarded.setStatus('current')
vsiLogicalIfTxCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfTxCellsDiscarded.setStatus('current')
vsiLogicalIfRxHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfRxHeaderErrors.setStatus('current')
vsiLogicalIfRxInvalidAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfRxInvalidAddrs.setStatus('current')
vsiLogicalIfEndPointsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfEndPointsInUse.setStatus('current')
vsiLogicalIfAvailIngressChnls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfAvailIngressChnls.setStatus('current')
vsiLogicalIfAvailEgressChnls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfAvailEgressChnls.setStatus('current')
vsiLogicalIfAvailIngressCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfAvailIngressCellRate.setStatus('current')
vsiLogicalIfAvailEgressCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfAvailEgressCellRate.setStatus('current')
vsiLogicalIfVcMergeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfVcMergeSupported.setStatus('current')
vsiLogicalIfMulticastSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfMulticastSupported.setStatus('current')
vsiLogicalIfVpiTranslated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfVpiTranslated.setStatus('current')
vsiLogicalIfStrictSigRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfStrictSigRange.setStatus('current')
vsiLogicalIfMaxIngressCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfMaxIngressCellRate.setStatus('current')
vsiLogicalIfMaxEgressCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfMaxEgressCellRate.setStatus('current')
vsiLogicalIfMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfMinVpi.setStatus('current')
vsiLogicalIfMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfMaxVpi.setStatus('current')
vsiLogicalIfMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfMinVci.setStatus('current')
vsiLogicalIfMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfMaxVci.setStatus('current')
vsiLogicalControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 27), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalControlIfIndex.setStatus('current')
vsiLogicalIfSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 3, 1, 28), VsiSessionIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiLogicalIfSessionIndex.setStatus('current')
vsiXCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4), )
if mibBuilder.loadTexts: vsiXCTable.setStatus('current')
vsiXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1), ).setIndexNames((0, "CISCO-VSIMASTER-MIB", "vsiXCControllerIndex"), (0, "CISCO-VSIMASTER-MIB", "vsiXCLogicalIfLow"), (0, "CISCO-VSIMASTER-MIB", "vsiXCLogicalIfHi"), (0, "CISCO-VSIMASTER-MIB", "vsiXCIndex"))
if mibBuilder.loadTexts: vsiXCEntry.setStatus('current')
vsiXCControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 1), VsiControllerIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCControllerIndex.setStatus('current')
vsiXCLogicalIfLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 2), VsiLogicalIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCLogicalIfLow.setStatus('current')
vsiXCLogicalIfHi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 3), VsiLogicalIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCLogicalIfHi.setStatus('current')
vsiXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 4), VsiXCIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCIndex.setStatus('current')
vsiXCState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deleted", 1), ("reserved", 2), ("committed", 3), ("reservedFail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCState.setStatus('current')
vsiXCVpiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCVpiLow.setStatus('current')
vsiXCVciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCVciLow.setStatus('current')
vsiXCVpiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCVpiHi.setStatus('current')
vsiXCVciHi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiXCVciHi.setStatus('current')
vsiControllerTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiControllerTrapEnable.setStatus('current')
vsiSessionTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiSessionTrapEnable.setStatus('current')
vsiLogicalIfTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiLogicalIfTrapEnable.setStatus('current')
vsiXCTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiXCTrapEnable.setStatus('current')
vsiVSITrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 162, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsiVSITrapEnable.setStatus('current')
vsiControllerAdded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 1)).setObjects(("CISCO-VSIMASTER-MIB", "vsiControllerType"))
if mibBuilder.loadTexts: vsiControllerAdded.setStatus('current')
vsiControllerDeleted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 2)).setObjects(("CISCO-VSIMASTER-MIB", "vsiControllerType"))
if mibBuilder.loadTexts: vsiControllerDeleted.setStatus('current')
vsiSessionUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 3)).setObjects(("CISCO-VSIMASTER-MIB", "vsiSessionState"))
if mibBuilder.loadTexts: vsiSessionUp.setStatus('current')
vsiSessionDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 4)).setObjects(("CISCO-VSIMASTER-MIB", "vsiSessionState"))
if mibBuilder.loadTexts: vsiSessionDown.setStatus('current')
vsiLogicalIfUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 5)).setObjects(("CISCO-VSIMASTER-MIB", "vsiLogicalIfOperState"))
if mibBuilder.loadTexts: vsiLogicalIfUp.setStatus('current')
vsiLogicalIfDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 6)).setObjects(("CISCO-VSIMASTER-MIB", "vsiLogicalIfOperState"))
if mibBuilder.loadTexts: vsiLogicalIfDown.setStatus('current')
vsiXCFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 7)).setObjects(("CISCO-VSIMASTER-MIB", "vsiXCControllerIndex"), ("CISCO-VSIMASTER-MIB", "vsiXCLogicalIfLow"), ("CISCO-VSIMASTER-MIB", "vsiXCLogicalIfHi"))
if mibBuilder.loadTexts: vsiXCFailed.setStatus('current')
vsiLcnExhaustionNotice = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 162, 2, 8)).setObjects(("CISCO-VSIMASTER-MIB", "vsiControllerIndex"), ("CISCO-VSIMASTER-MIB", "vsiAvailableChnlThresholdStatus"))
if mibBuilder.loadTexts: vsiLcnExhaustionNotice.setStatus('current')
ciscoVsiMasterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 1))
ciscoVsiMasterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 2))
ciscoVsiMasterModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 2, 1)).setObjects(("CISCO-VSIMASTER-MIB", "ciscoVsiMasterGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVsiMasterModuleCompliance = ciscoVsiMasterModuleCompliance.setStatus('deprecated')
ciscoVsi2MasterModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 2, 2)).setObjects(("CISCO-VSIMASTER-MIB", "ciscoVsiMasterGeneralGroup"), ("CISCO-VSIMASTER-MIB", "ciscoVsi2MasterGroup"), ("CISCO-VSIMASTER-MIB", "ciscoVsi2AlarmControlGroup"), ("CISCO-VSIMASTER-MIB", "ciscoVsi2MasterNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVsi2MasterModuleCompliance = ciscoVsi2MasterModuleCompliance.setStatus('current')
ciscoVsiMasterGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 1, 1)).setObjects(("CISCO-VSIMASTER-MIB", "vsiControllerIndex"), ("CISCO-VSIMASTER-MIB", "vsiControllerId"), ("CISCO-VSIMASTER-MIB", "vsiCrossConnects"), ("CISCO-VSIMASTER-MIB", "vsiControllerType"), ("CISCO-VSIMASTER-MIB", "vsiBaseVersionSupported"), ("CISCO-VSIMASTER-MIB", "vsiTopVersionSupported"), ("CISCO-VSIMASTER-MIB", "vsiVersionInUse"), ("CISCO-VSIMASTER-MIB", "vsiSpecifiedVersion"), ("CISCO-VSIMASTER-MIB", "vsiControlInterface"), ("CISCO-VSIMASTER-MIB", "vsiLogicalControlInterface"), ("CISCO-VSIMASTER-MIB", "vsiSessionVpi"), ("CISCO-VSIMASTER-MIB", "vsiSessionVci"), ("CISCO-VSIMASTER-MIB", "vsiSessionSwitchId"), ("CISCO-VSIMASTER-MIB", "vsiSessionSwitchName"), ("CISCO-VSIMASTER-MIB", "vsiSessionSlaveId"), ("CISCO-VSIMASTER-MIB", "vsiSessionState"), ("CISCO-VSIMASTER-MIB", "vsiSessionWindowSize"), ("CISCO-VSIMASTER-MIB", "vsiSessionCmdsPending"), ("CISCO-VSIMASTER-MIB", "vsiSessionActiveId"), ("CISCO-VSIMASTER-MIB", "vsiSessionPowerupId"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfControllerIndex"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfIndex"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfName"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfOperState"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfAdminState"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfRxCells"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfTxCells"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfRxCellsDiscarded"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfTxCellsDiscarded"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfRxHeaderErrors"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfRxInvalidAddrs"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfEndPointsInUse"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfAvailIngressChnls"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfAvailEgressChnls"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfAvailIngressCellRate"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfAvailEgressCellRate"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfMaxIngressCellRate"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfMaxEgressCellRate"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfVcMergeSupported"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfMulticastSupported"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfVpiTranslated"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfStrictSigRange"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfMinVpi"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfMaxVpi"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfMinVci"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfMaxVci"), ("CISCO-VSIMASTER-MIB", "vsiLogicalControlIfIndex"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfSessionIndex"), ("CISCO-VSIMASTER-MIB", "vsiXCControllerIndex"), ("CISCO-VSIMASTER-MIB", "vsiXCLogicalIfLow"), ("CISCO-VSIMASTER-MIB", "vsiXCLogicalIfHi"), ("CISCO-VSIMASTER-MIB", "vsiXCIndex"), ("CISCO-VSIMASTER-MIB", "vsiXCState"), ("CISCO-VSIMASTER-MIB", "vsiXCVpiLow"), ("CISCO-VSIMASTER-MIB", "vsiXCVciLow"), ("CISCO-VSIMASTER-MIB", "vsiXCVpiHi"), ("CISCO-VSIMASTER-MIB", "vsiXCVciHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVsiMasterGeneralGroup = ciscoVsiMasterGeneralGroup.setStatus('current')
ciscoVsi2MasterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 1, 2)).setObjects(("CISCO-VSIMASTER-MIB", "vsiControlIfIpAddress"), ("CISCO-VSIMASTER-MIB", "vsiAvailableChnlWarnThreshold"), ("CISCO-VSIMASTER-MIB", "vsiAvailableChnlAlarmThreshold"), ("CISCO-VSIMASTER-MIB", "vsiAvailableChnlThresholdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVsi2MasterGroup = ciscoVsi2MasterGroup.setStatus('current')
ciscoVsi2AlarmControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 1, 3)).setObjects(("CISCO-VSIMASTER-MIB", "vsiControllerTrapEnable"), ("CISCO-VSIMASTER-MIB", "vsiSessionTrapEnable"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfTrapEnable"), ("CISCO-VSIMASTER-MIB", "vsiXCTrapEnable"), ("CISCO-VSIMASTER-MIB", "vsiVSITrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVsi2AlarmControlGroup = ciscoVsi2AlarmControlGroup.setStatus('current')
ciscoVsi2MasterNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 162, 3, 1, 4)).setObjects(("CISCO-VSIMASTER-MIB", "vsiControllerAdded"), ("CISCO-VSIMASTER-MIB", "vsiControllerDeleted"), ("CISCO-VSIMASTER-MIB", "vsiSessionUp"), ("CISCO-VSIMASTER-MIB", "vsiSessionDown"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfUp"), ("CISCO-VSIMASTER-MIB", "vsiLogicalIfDown"), ("CISCO-VSIMASTER-MIB", "vsiXCFailed"), ("CISCO-VSIMASTER-MIB", "vsiLcnExhaustionNotice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVsi2MasterNotificationGroup = ciscoVsi2MasterNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-VSIMASTER-MIB", vsiLogicalIfMaxEgressCellRate=vsiLogicalIfMaxEgressCellRate, vsiAvailableChnlAlarmThreshold=vsiAvailableChnlAlarmThreshold, vsiLogicalIfOperState=vsiLogicalIfOperState, vsiXCVciLow=vsiXCVciLow, vsiSessionTrapEnable=vsiSessionTrapEnable, vsiLogicalIfStrictSigRange=vsiLogicalIfStrictSigRange, vsiBaseVersionSupported=vsiBaseVersionSupported, ciscoVsiMasterCompliances=ciscoVsiMasterCompliances, vsiLogicalIfAvailEgressChnls=vsiLogicalIfAvailEgressChnls, vsiSessionEntry=vsiSessionEntry, vsiXCEntry=vsiXCEntry, vsiLogicalIfAvailIngressChnls=vsiLogicalIfAvailIngressChnls, vsiXCControllerIndex=vsiXCControllerIndex, vsiSessionUp=vsiSessionUp, vsiLogicalIfMinVci=vsiLogicalIfMinVci, vsiCrossConnects=vsiCrossConnects, vsiLogicalIfAvailEgressCellRate=vsiLogicalIfAvailEgressCellRate, vsiControlInterface=vsiControlInterface, vsiControllerDeleted=vsiControllerDeleted, ciscoVsiMasterObjects=ciscoVsiMasterObjects, vsiSessionTable=vsiSessionTable, vsiSessionWindowSize=vsiSessionWindowSize, ciscoVsiMasterMIB=ciscoVsiMasterMIB, vsiSpecifiedVersion=vsiSpecifiedVersion, ciscoVsiMasterGroups=ciscoVsiMasterGroups, vsiLogicalIfMinVpi=vsiLogicalIfMinVpi, vsiLcnExhaustionNotice=vsiLcnExhaustionNotice, vsiControllerTrapEnable=vsiControllerTrapEnable, vsiLogicalIfControllerIndex=vsiLogicalIfControllerIndex, vsiLogicalIfRxInvalidAddrs=vsiLogicalIfRxInvalidAddrs, vsiSessionPowerupId=vsiSessionPowerupId, vsiLogicalIfTxCellsDiscarded=vsiLogicalIfTxCellsDiscarded, vsiLogicalIfDown=vsiLogicalIfDown, vsiLogicalIfTrapEnable=vsiLogicalIfTrapEnable, vsiControlIfIpAddress=vsiControlIfIpAddress, vsiLogicalControlInterface=vsiLogicalControlInterface, vsiLogicalIfRxCellsDiscarded=vsiLogicalIfRxCellsDiscarded, vsiLogicalIfMaxVci=vsiLogicalIfMaxVci, ciscoVsi2MasterModuleCompliance=ciscoVsi2MasterModuleCompliance, PYSNMP_MODULE_ID=ciscoVsiMasterMIB, vsiLogicalIfVcMergeSupported=vsiLogicalIfVcMergeSupported, vsiLogicalIfIndex=vsiLogicalIfIndex, vsiLogicalIfTxCells=vsiLogicalIfTxCells, VsiXCIndex=VsiXCIndex, vsiSessionActiveId=vsiSessionActiveId, vsiXCTable=vsiXCTable, vsiSessionCmdsPending=vsiSessionCmdsPending, vsiLogicalIfVpiTranslated=vsiLogicalIfVpiTranslated, vsiXCIndex=vsiXCIndex, vsiXCFailed=vsiXCFailed, ciscoVsiMasterModuleCompliance=ciscoVsiMasterModuleCompliance, ciscoVsi2MasterGroup=ciscoVsi2MasterGroup, vsiLogicalIfMulticastSupported=vsiLogicalIfMulticastSupported, ciscoVsiMasterNotifications=ciscoVsiMasterNotifications, vsiSessionIndex=vsiSessionIndex, vsiXCVpiHi=vsiXCVpiHi, vsiLogicalIfUp=vsiLogicalIfUp, vsiSessionVpi=vsiSessionVpi, VsiSessionIndex=VsiSessionIndex, vsiSessionSwitchName=vsiSessionSwitchName, vsiLogicalIfEntry=vsiLogicalIfEntry, vsiControllerAdded=vsiControllerAdded, vsiAvailableChnlWarnThreshold=vsiAvailableChnlWarnThreshold, vsiControllerId=vsiControllerId, vsiSessionSwitchId=vsiSessionSwitchId, vsiXCTrapEnable=vsiXCTrapEnable, vsiLogicalIfAvailIngressCellRate=vsiLogicalIfAvailIngressCellRate, vsiTopVersionSupported=vsiTopVersionSupported, vsiLogicalIfSessionIndex=vsiLogicalIfSessionIndex, ciscoVsi2MasterNotificationGroup=ciscoVsi2MasterNotificationGroup, vsiMasterControllerTable=vsiMasterControllerTable, vsiLogicalIfEndPointsInUse=vsiLogicalIfEndPointsInUse, ciscoVsiMasterConformance=ciscoVsiMasterConformance, vsiControllerType=vsiControllerType, vsiLogicalIfTable=vsiLogicalIfTable, vsiControllerIndex=vsiControllerIndex, vsiVersionInUse=vsiVersionInUse, vsiLogicalIfRxCells=vsiLogicalIfRxCells, vsiLogicalIfAdminState=vsiLogicalIfAdminState, ciscoVsi2AlarmControlGroup=ciscoVsi2AlarmControlGroup, vsiSessionControllerIndex=vsiSessionControllerIndex, vsiAvailableChnlThresholdStatus=vsiAvailableChnlThresholdStatus, vsiSessionState=vsiSessionState, vsiVSITrapEnable=vsiVSITrapEnable, vsiLogicalIfRxHeaderErrors=vsiLogicalIfRxHeaderErrors, vsiXCState=vsiXCState, vsiXCVpiLow=vsiXCVpiLow, vsiLogicalIfMaxIngressCellRate=vsiLogicalIfMaxIngressCellRate, vsiSessionSlaveId=vsiSessionSlaveId, vsiXCLogicalIfHi=vsiXCLogicalIfHi, vsiLogicalControlIfIndex=vsiLogicalControlIfIndex, vsiSessionVci=vsiSessionVci, vsiLogicalIfMaxVpi=vsiLogicalIfMaxVpi, VsiControllerIndex=VsiControllerIndex, vsiSessionDown=vsiSessionDown, vsiXCLogicalIfLow=vsiXCLogicalIfLow, ciscoVsiMasterGeneralGroup=ciscoVsiMasterGeneralGroup, vsiLogicalIfName=vsiLogicalIfName, vsiMasterControllerEntry=vsiMasterControllerEntry, vsiXCVciHi=vsiXCVciHi, VsiLogicalIfIndex=VsiLogicalIfIndex)
