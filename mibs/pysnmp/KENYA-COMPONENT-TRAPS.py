#
# PySNMP MIB module KENYA-COMPONENT-TRAPS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KENYA-COMPONENT-TRAPS
# Produced by pysmi-0.3.4 at Mon Apr 29 19:54:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
nmSoftwares, pxSoftwares, scSoftwares = mibBuilder.importSymbols("KENYA-COMPONENT-MIB", "nmSoftwares", "pxSoftwares", "scSoftwares")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, IpAddress, Bits, Counter32, MibIdentifier, NotificationType, Gauge32, Integer32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "IpAddress", "Bits", "Counter32", "MibIdentifier", "NotificationType", "Gauge32", "Integer32", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vlbComponents, volubill = mibBuilder.importSymbols("VOLUBILL-ROOT-MIB", "vlbComponents", "volubill")
nmDataCollector = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1))
dcCheckedOid = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCheckedOid.setStatus('mandatory')
dcErrorString = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcErrorString.setStatus('mandatory')
dcTestDescr = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcTestDescr.setStatus('mandatory')
dcNbRepeat = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNbRepeat.setStatus('mandatory')
dcSystemRequirement = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemRequirement.setStatus('mandatory')
dcSystemErrorDate = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemErrorDate.setStatus('mandatory')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("informative", 1), ("warning", 2), ("serious", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('mandatory')
procRespawner = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 2))
prMissingProcName = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prMissingProcName.setStatus('mandatory')
prRespawnCommand = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prRespawnCommand.setStatus('mandatory')
nmsGolbalStatusProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 3))
snmpFailedComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpFailedComponent.setStatus('mandatory')
snmpRequestedOid = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRequestedOid.setStatus('mandatory')
componentTrapSender = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4))
sourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceComponent.setStatus('mandatory')
componentInfo = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentInfo.setStatus('mandatory')
alarmDescription = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDescription.setStatus('mandatory')
processName = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 2, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processName.setStatus('mandatory')
scAgentApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 3, 1))
scaSourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scaSourceComponent.setStatus('mandatory')
scaErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scaErrorMessage.setStatus('mandatory')
udrWriterApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 3, 2))
uwSourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uwSourceComponent.setStatus('mandatory')
uwInfoMessage = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 3, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uwInfoMessage.setStatus('mandatory')
proxyApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 9905, 2, 4, 1))
pxSourceComponent = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxSourceComponent.setStatus('mandatory')
pxErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 9905, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxErrorMessage.setStatus('mandatory')
procMissing = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,1)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "prMissingProcName"), ("KENYA-COMPONENT-TRAPS", "prRespawnCommand"))
procMissingAfterRespawn = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,2)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "prMissingProcName"), ("KENYA-COMPONENT-TRAPS", "prRespawnCommand"))
snmpUnreachableHost = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,3)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "snmpFailedComponent"), ("KENYA-COMPONENT-TRAPS", "snmpRequestedOid"))
dataCollectorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,4)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "dcCheckedOid"), ("KENYA-COMPONENT-TRAPS", "dcErrorString"), ("KENYA-COMPONENT-TRAPS", "dcTestDescr"), ("KENYA-COMPONENT-TRAPS", "dcNbRepeat"))
dataCollectorSystemRequirement = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,5)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "dcSystemRequirement"), ("KENYA-COMPONENT-TRAPS", "dcSystemErrorDate"))
dataCollectorSystemError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,6)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "dcSystemRequirement"))
scAgentError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,7)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "scaSourceComponent"), ("KENYA-COMPONENT-TRAPS", "scaErrorMessage"))
healthCheckError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,8)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"))
proxyError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,9)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "pxSourceComponent"), ("KENYA-COMPONENT-TRAPS", "pxErrorMessage"))
switchProvisioningError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,10)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"))
powerFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,11)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"))
linkFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,12)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
caInvalidVIPStatus = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,13)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
caValidVIPStatus = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,14)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
successfulProvisioning = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,15)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
sSNModuleNotHA = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,16)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
successfulRollback = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,17)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
procStarted = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,18)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"))
rectifierAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,19)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "alarmDescription"))
powerOn = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,20)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"))
uwMessage = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,21)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "uwSourceComponent"), ("KENYA-COMPONENT-TRAPS", "uwInfoMessage"))
vlbProcStarted = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,22)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
vlbProcNotStarted = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,23)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
vlbProcStopped = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,24)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
vlbLogTrap = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,25)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "processName"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
bssgStart = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,30)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
bssgStop = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,31)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
bssgSmiConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,32)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
bssgQuickRulesConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,33)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
bssgSCDKDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,34)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
bssgDatabaseConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,35)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
bssgReloadConfig = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,36)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
start = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,70)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
stop = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,71)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
overloadActivatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,72)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
overloadDesactivated = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,73)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
sCDKConnection = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,74)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
sCDKDisconnection = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,75)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
uDRWritingError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,76)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
provisioningError = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,77)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
activatedUDRZipper = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,78)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
desactivatedUDRZipper = NotificationType((1, 3, 6, 1, 4, 1, 9905) + (0,79)).setObjects(("KENYA-COMPONENT-TRAPS", "trapSeverity"), ("KENYA-COMPONENT-TRAPS", "sourceComponent"), ("KENYA-COMPONENT-TRAPS", "componentInfo"))
mibBuilder.exportSymbols("KENYA-COMPONENT-TRAPS", dcErrorString=dcErrorString, dcCheckedOid=dcCheckedOid, dcSystemErrorDate=dcSystemErrorDate, componentTrapSender=componentTrapSender, bssgDatabaseConnectFailure=bssgDatabaseConnectFailure, provisioningError=provisioningError, switchProvisioningError=switchProvisioningError, bssgReloadConfig=bssgReloadConfig, bssgSCDKDisconnect=bssgSCDKDisconnect, procRespawner=procRespawner, pxErrorMessage=pxErrorMessage, bssgSmiConnectFailure=bssgSmiConnectFailure, sourceComponent=sourceComponent, snmpRequestedOid=snmpRequestedOid, uwSourceComponent=uwSourceComponent, snmpUnreachableHost=snmpUnreachableHost, dataCollectorSystemError=dataCollectorSystemError, start=start, procMissing=procMissing, proxyApplication=proxyApplication, sSNModuleNotHA=sSNModuleNotHA, rectifierAlarm=rectifierAlarm, uDRWritingError=uDRWritingError, procStarted=procStarted, powerOn=powerOn, caInvalidVIPStatus=caInvalidVIPStatus, scAgentError=scAgentError, vlbProcNotStarted=vlbProcNotStarted, bssgStart=bssgStart, procMissingAfterRespawn=procMissingAfterRespawn, vlbProcStopped=vlbProcStopped, snmpFailedComponent=snmpFailedComponent, bssgQuickRulesConnectFailure=bssgQuickRulesConnectFailure, linkFailure=linkFailure, bssgStop=bssgStop, scaSourceComponent=scaSourceComponent, proxyError=proxyError, successfulProvisioning=successfulProvisioning, nmsGolbalStatusProcessor=nmsGolbalStatusProcessor, dataCollectorThresholdExceeded=dataCollectorThresholdExceeded, trapSeverity=trapSeverity, uwMessage=uwMessage, vlbProcStarted=vlbProcStarted, alarmDescription=alarmDescription, powerFailure=powerFailure, processName=processName, nmDataCollector=nmDataCollector, caValidVIPStatus=caValidVIPStatus, vlbLogTrap=vlbLogTrap, overloadDesactivated=overloadDesactivated, dcNbRepeat=dcNbRepeat, healthCheckError=healthCheckError, stop=stop, prMissingProcName=prMissingProcName, dcSystemRequirement=dcSystemRequirement, scAgentApplication=scAgentApplication, scaErrorMessage=scaErrorMessage, componentInfo=componentInfo, successfulRollback=successfulRollback, uwInfoMessage=uwInfoMessage, overloadActivatedTrap=overloadActivatedTrap, sCDKDisconnection=sCDKDisconnection, dcTestDescr=dcTestDescr, sCDKConnection=sCDKConnection, dataCollectorSystemRequirement=dataCollectorSystemRequirement, udrWriterApplication=udrWriterApplication, activatedUDRZipper=activatedUDRZipper, prRespawnCommand=prRespawnCommand, desactivatedUDRZipper=desactivatedUDRZipper, pxSourceComponent=pxSourceComponent)
