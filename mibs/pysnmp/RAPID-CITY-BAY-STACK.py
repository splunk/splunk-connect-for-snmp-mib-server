#
# PySNMP MIB module RAPID-CITY-BAY-STACK (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAPID-CITY-BAY-STACK
# Produced by pysmi-0.3.4 at Mon Apr 29 20:43:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
rcBayStack, = mibBuilder.importSymbols("RAPID-CITY", "rcBayStack")
rcMltId, = mibBuilder.importSymbols("RC-MLT-MIB", "rcMltId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ModuleIdentity, iso, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, ObjectIdentity, NotificationType, Counter64, MibIdentifier, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "iso", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "ObjectIdentity", "NotificationType", "Counter64", "MibIdentifier", "Gauge32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rcBayStackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2272, 40, 1))
rcBayStackMIB.setRevisions(('2007-12-14 00:00', '2004-09-29 00:00', '2004-07-20 00:00',))
if mibBuilder.loadTexts: rcBayStackMIB.setLastUpdated('200712140000Z')
if mibBuilder.loadTexts: rcBayStackMIB.setOrganization('Nortel Networks')
rcBayStackObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1))
rcBayStackTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 21))
rcBayStackTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 21, 0))
rcBayStackTftpExt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 1))
rcBayStackTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("downloadSshPublicKeys", 2), ("deleteSshDsaAuthKey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcBayStackTftpAction.setStatus('current')
rcBayStackSshSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2), )
if mibBuilder.loadTexts: rcBayStackSshSessionTable.setStatus('current')
rcBayStackSshSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1), ).setIndexNames((0, "RAPID-CITY-BAY-STACK", "rcBayStackSshSessionId"))
if mibBuilder.loadTexts: rcBayStackSshSessionEntry.setStatus('current')
rcBayStackSshSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rcBayStackSshSessionId.setStatus('current')
rcBayStackSshSessionIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshSessionIp.setStatus('current')
rcBayStackSshSessionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshSessionInetAddressType.setStatus('current')
rcBayStackSshSessionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshSessionInetAddress.setStatus('current')
rcBayStackSshExt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 3))
rcBayStackSshDsaHostKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notGenerated", 1), ("generated", 2), ("generating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshDsaHostKeyStatus.setStatus('current')
rcMltConfigError = NotificationType((1, 3, 6, 1, 4, 1, 2272, 40, 1, 21, 0, 1)).setObjects(("RC-MLT-MIB", "rcMltId"))
if mibBuilder.loadTexts: rcMltConfigError.setStatus('current')
mibBuilder.exportSymbols("RAPID-CITY-BAY-STACK", rcBayStackSshSessionIp=rcBayStackSshSessionIp, rcBayStackObjects=rcBayStackObjects, rcBayStackSshSessionTable=rcBayStackSshSessionTable, rcBayStackTftpExt=rcBayStackTftpExt, rcBayStackTftpAction=rcBayStackTftpAction, rcBayStackSshSessionInetAddress=rcBayStackSshSessionInetAddress, rcBayStackSshExt=rcBayStackSshExt, PYSNMP_MODULE_ID=rcBayStackMIB, rcBayStackTraps=rcBayStackTraps, rcBayStackSshDsaHostKeyStatus=rcBayStackSshDsaHostKeyStatus, rcBayStackSshSessionId=rcBayStackSshSessionId, rcBayStackTraps0=rcBayStackTraps0, rcBayStackMIB=rcBayStackMIB, rcBayStackSshSessionEntry=rcBayStackSshSessionEntry, rcMltConfigError=rcMltConfigError, rcBayStackSshSessionInetAddressType=rcBayStackSshSessionInetAddressType)
