#
# PySNMP MIB module RUCKUS-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-DEVICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:50:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ruckusCommonDeviceModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusCommonDeviceModule")
RuckusCountryCode, = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusCountryCode")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Unsigned32, IpAddress, Bits, iso, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "IpAddress", "Bits", "iso", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "NotificationType")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ruckusDeviceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1))
if mibBuilder.loadTexts: ruckusDeviceMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusDeviceMIB.setOrganization('Ruckus Wireless, Inc.')
ruckusDeviceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1))
ruckusDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1))
ruckusDeviceTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 2))
ruckusDeviceIPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 3))
ruckusDeviceWanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4))
ruckusDeviceEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 2))
ruckusDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceName.setStatus('current')
ruckusDeviceReboot = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceReboot.setStatus('current')
ruckusDeviceRebootWithDefaults = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceRebootWithDefaults.setStatus('current')
ruckusDeviceCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1, 4), RuckusCountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceCountryCode.setStatus('current')
ruckusDeviceGPS = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceGPS.setStatus('current')
ruckusDeviceNEId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceNEId.setStatus('current')
ruckusDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceLocation.setStatus('current')
ruckusDeviceTrapDestination = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceTrapDestination.setStatus('current')
ruckusDeviceTrapDestination2 = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceTrapDestination2.setStatus('current')
ruckusDevicePrimaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDevicePrimaryDNS.setStatus('current')
ruckusDeviceSecondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceSecondaryDNS.setStatus('current')
ruckusDevicePrimaryDNSIPV6 = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDevicePrimaryDNSIPV6.setStatus('current')
ruckusDeviceSecondaryDNSIPV6 = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceSecondaryDNSIPV6.setStatus('current')
ruckusDeviceWanTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1), )
if mibBuilder.loadTexts: ruckusDeviceWanTable.setStatus('current')
ruckusDeviceWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusDeviceWanEntry.setStatus('current')
ruckusDeviceWanIPAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("static", 2), ("dhcp", 3), ("pppoe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanIPAddrMode.setStatus('current')
ruckusDeviceWanIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanIPAddr.setStatus('current')
ruckusDeviceWanName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusDeviceWanName.setStatus('current')
ruckusDeviceWanNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanNetmask.setStatus('current')
ruckusDeviceWanGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanGateway.setStatus('current')
ruckusDeviceWanIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("dualstack", 3))).clone('ipv6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanIPVersion.setStatus('current')
ruckusDeviceWanIPV6AddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-configuration", 1), ("static", 2))).clone('auto-configuration')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanIPV6AddrMode.setStatus('current')
ruckusDeviceWanIPV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanIPV6Addr.setStatus('current')
ruckusDeviceWanIPV6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanIPV6PrefixLen.setStatus('current')
ruckusDeviceWanIPV6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 4, 1, 1, 4, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusDeviceWanIPV6Gateway.setStatus('current')
mibBuilder.exportSymbols("RUCKUS-DEVICE-MIB", ruckusDeviceSecondaryDNS=ruckusDeviceSecondaryDNS, ruckusDeviceCountryCode=ruckusDeviceCountryCode, ruckusDeviceInfo=ruckusDeviceInfo, ruckusDeviceRebootWithDefaults=ruckusDeviceRebootWithDefaults, ruckusDeviceGPS=ruckusDeviceGPS, ruckusDeviceWanInfo=ruckusDeviceWanInfo, ruckusDeviceTrapDestination=ruckusDeviceTrapDestination, ruckusDeviceWanGateway=ruckusDeviceWanGateway, ruckusDeviceTrapDestination2=ruckusDeviceTrapDestination2, ruckusDeviceObjects=ruckusDeviceObjects, ruckusDeviceWanNetmask=ruckusDeviceWanNetmask, ruckusDeviceWanEntry=ruckusDeviceWanEntry, ruckusDeviceNEId=ruckusDeviceNEId, ruckusDeviceWanIPV6PrefixLen=ruckusDeviceWanIPV6PrefixLen, PYSNMP_MODULE_ID=ruckusDeviceMIB, ruckusDeviceWanName=ruckusDeviceWanName, ruckusDeviceReboot=ruckusDeviceReboot, ruckusDeviceMIB=ruckusDeviceMIB, ruckusDeviceTrapInfo=ruckusDeviceTrapInfo, ruckusDeviceName=ruckusDeviceName, ruckusDeviceWanIPAddrMode=ruckusDeviceWanIPAddrMode, ruckusDeviceIPInfo=ruckusDeviceIPInfo, ruckusDeviceSecondaryDNSIPV6=ruckusDeviceSecondaryDNSIPV6, ruckusDeviceWanIPV6Gateway=ruckusDeviceWanIPV6Gateway, ruckusDeviceWanTable=ruckusDeviceWanTable, ruckusDeviceWanIPV6AddrMode=ruckusDeviceWanIPV6AddrMode, ruckusDeviceWanIPVersion=ruckusDeviceWanIPVersion, ruckusDeviceWanIPV6Addr=ruckusDeviceWanIPV6Addr, ruckusDevicePrimaryDNS=ruckusDevicePrimaryDNS, ruckusDeviceEvents=ruckusDeviceEvents, ruckusDevicePrimaryDNSIPV6=ruckusDevicePrimaryDNSIPV6, ruckusDeviceLocation=ruckusDeviceLocation, ruckusDeviceWanIPAddr=ruckusDeviceWanIPAddr)
