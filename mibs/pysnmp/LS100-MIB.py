#
# PySNMP MIB module LS100-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LS100-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, Counter64, IpAddress, Counter32, Unsigned32, Integer32, TimeTicks, iso, MibIdentifier, NotificationType, ModuleIdentity, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "Counter64", "IpAddress", "Counter32", "Unsigned32", "Integer32", "TimeTicks", "iso", "MibIdentifier", "NotificationType", "ModuleIdentity", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
atomis_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14)).setLabel("atomis-mib")
m5core_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3)).setLabel("m5core-mib")
node = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1))
linf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2))
conn = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3))
perf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4))
nodeOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("offLine", 3), ("testing", 4), ("initializing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOperStatus.setStatus('mandatory')
nodeIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2), )
if mibBuilder.loadTexts: nodeIfConfTable.setStatus('mandatory')
nodeIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1), ).setIndexNames((0, "LS100-MIB", "nodeIfConfIndex"))
if mibBuilder.loadTexts: nodeIfConfEntry.setStatus('mandatory')
nodeIfConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfIndex.setStatus('mandatory')
nodeIfConfPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 99))).clone(namedValues=NamedValues(("other", 1), ("sar", 2), ("taxi100M", 3), ("oc3cSMF", 4), ("oc3cMMF", 5), ("ds3PlcpScramble", 6), ("ds3PlcpNoScramble", 7), ("relay6Mcell", 8), ("ds3Scramble", 9), ("ds3NoScramble", 10), ("e3PlcpScramble", 11), ("e3PlcpNoScramble", 12), ("e3Scramble", 13), ("e3NoScramble", 14), ("utp5", 15), ("leasedLine3M", 16), ("leasedLine4M", 17), ("leasedLine6M", 18), ("utp5classB", 19), ("oc3cSmfShaper", 20), ("taxi140M", 21), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfPhysType.setStatus('mandatory')
nodeIfConfRev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfRev.setStatus('mandatory')
nodeIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("other", 1), ("inService", 2), ("outOfService", 3), ("testing", 4), ("localLoopBack", 5), ("remoteLoopBack", 6), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfConfStatus.setStatus('mandatory')
nodeFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFanStatus.setStatus('mandatory')
nodeUpcWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeUpcWindowSize.setStatus('mandatory')
nodeBestEffortBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBestEffortBufferSize.setStatus('mandatory')
nodeGuaranteedBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeGuaranteedBufferSize.setStatus('mandatory')
nodeBestEffortBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBestEffortBufferThreshold.setStatus('mandatory')
nodeGuaranteedBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeGuaranteedBufferThreshold.setStatus('mandatory')
nodeSaveConf = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("noOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSaveConf.setStatus('mandatory')
nodeSaveResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("temporaryFailure", 1), ("notReady", 2), ("ready", 3), ("success", 4), ("nearend", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSaveResult.setStatus('mandatory')
nodeReset = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeReset.setStatus('mandatory')
linfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1), )
if mibBuilder.loadTexts: linfStatusTable.setStatus('mandatory')
linfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1), ).setIndexNames((0, "LS100-MIB", "linfIndex"))
if mibBuilder.loadTexts: linfStatusEntry.setStatus('mandatory')
linfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfIndex.setStatus('mandatory')
linfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 99))).clone(namedValues=NamedValues(("normal", 1), ("los", 2), ("lof", 3), ("loc", 4), ("ais", 5), ("yellowLine", 6), ("yellowPath", 7), ("lop", 8), ("idle", 9), ("yellowAlarm", 10), ("plcpLOF", 11), ("plcpYellow", 12), ("maFERF", 13), ("rai", 14), ("payloadAllOnes", 15), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfStatus.setStatus('mandatory')
linfConf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("publicUNI", 1), ("privateUNI", 2), ("privateNNI", 3), ("others", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linfConf.setStatus('mandatory')
linfFwdAvailableBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfFwdAvailableBandWidth.setStatus('mandatory')
linfBkwdAvailableBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfBkwdAvailableBandWidth.setStatus('mandatory')
connPvcIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcIndexNext.setStatus('mandatory')
connPvcIndexEnable = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcIndexEnable.setStatus('deprecated')
connPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3), )
if mibBuilder.loadTexts: connPvcTable.setStatus('mandatory')
connPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1), ).setIndexNames((0, "LS100-MIB", "connPvcIndex"), (0, "LS100-MIB", "connPvcHighIfIndex"))
if mibBuilder.loadTexts: connPvcEntry.setStatus('mandatory')
connPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcIndex.setStatus('mandatory')
connPvcTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("uniDirectionalVCC", 1), ("biDirectionalVCC", 2), ("uniDirectionalVPC", 3), ("biDirectionalVPC", 4), ("broadcastVPC", 5), ("broadcastVCC", 6), ("gateway", 7), ("vpterm", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcTopology.setStatus('mandatory')
connPvcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("trafficCBR", 1), ("trafficVBR", 2), ("trafficUBR", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcTrafficType.setStatus('mandatory')
connPvcLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcLowIfIndex.setStatus('mandatory')
connPvcLowVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcLowVPI.setStatus('mandatory')
connPvcLowVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcLowVCI.setStatus('mandatory')
connPvcLowUpcParam = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcLowUpcParam.setStatus('mandatory')
connPvcLowUpc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("discard", 2), ("tagging", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcLowUpc.setStatus('mandatory')
connPvcLowThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 622))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcLowThroughput.setStatus('mandatory')
connPvcHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcHighIfIndex.setStatus('mandatory')
connPvcHighVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcHighVPI.setStatus('mandatory')
connPvcHighVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcHighVCI.setStatus('mandatory')
connPvcHighUpcParam = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcHighUpcParam.setStatus('mandatory')
connPvcHighUpc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("discard", 2), ("tagging", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcHighUpc.setStatus('mandatory')
connPvcHighThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 622))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcHighThroughput.setStatus('mandatory')
connPvcLowInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcLowInCells.setStatus('mandatory')
connPvcHighOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcHighOutCells.setStatus('mandatory')
connPvcHighInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcHighInCells.setStatus('mandatory')
connPvcLowOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcLowOutCells.setStatus('mandatory')
connPvcLowUpcViolatedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcLowUpcViolatedCells.setStatus('mandatory')
connPvcHighUpcViolatedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcHighUpcViolatedCells.setStatus('mandatory')
connPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcRowStatus.setStatus('mandatory')
connPvcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("existing", 1), ("vpivciBusy", 2), ("vpivciOutOfRange", 3), ("rateOverFlow", 4), ("upvpOutOfRange", 5), ("broadcastTableFull", 6), ("inconsistentVPVC", 7), ("lineDiagnosis", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcCause.setStatus('mandatory')
connPvcKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcKind.setStatus('mandatory')
perfTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfTrapEnable.setStatus('mandatory')
perfIfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2), )
if mibBuilder.loadTexts: perfIfTable.setStatus('mandatory')
perfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1), ).setIndexNames((0, "LS100-MIB", "perfIfIndex"))
if mibBuilder.loadTexts: perfIfEntry.setStatus('mandatory')
perfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfIndex.setStatus('mandatory')
perfIfLcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfLcvs.setStatus('mandatory')
perfIfParitySections = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfParitySections.setStatus('mandatory')
perfIfParityLines = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfParityLines.setStatus('mandatory')
perfIfParityPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfParityPaths.setStatus('mandatory')
perfIfHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfHecErrors.setStatus('mandatory')
perfIfMisDelivdCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfMisDelivdCells.setStatus('mandatory')
perfIfOverFlowCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfOverFlowCells.setStatus('mandatory')
perfIfInCBRCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfInCBRCells.setStatus('mandatory')
perfIfOutCBRCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfOutCBRCells.setStatus('mandatory')
perfIfInVBRCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfInVBRCells.setStatus('mandatory')
perfIfOutVBRCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfOutVBRCells.setStatus('mandatory')
perfIfInUBRCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfInUBRCells.setStatus('mandatory')
perfIfOutUBRCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 3, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfOutUBRCells.setStatus('mandatory')
mibBuilder.exportSymbols("LS100-MIB", connPvcHighVCI=connPvcHighVCI, perfIfOverFlowCells=perfIfOverFlowCells, connPvcIndexEnable=connPvcIndexEnable, connPvcLowVCI=connPvcLowVCI, connPvcLowOutCells=connPvcLowOutCells, linfFwdAvailableBandWidth=linfFwdAvailableBandWidth, linf=linf, nodeBestEffortBufferSize=nodeBestEffortBufferSize, linfBkwdAvailableBandWidth=linfBkwdAvailableBandWidth, perfIfParitySections=perfIfParitySections, connPvcHighVPI=connPvcHighVPI, perfIfIndex=perfIfIndex, connPvcLowVPI=connPvcLowVPI, perf=perf, nodeOperStatus=nodeOperStatus, connPvcHighUpcViolatedCells=connPvcHighUpcViolatedCells, linfStatus=linfStatus, DisplayString=DisplayString, nec=nec, nec_mib=nec_mib, perfIfInCBRCells=perfIfInCBRCells, connPvcHighUpcParam=connPvcHighUpcParam, nodeIfConfRev=nodeIfConfRev, connPvcHighUpc=connPvcHighUpc, perfIfOutVBRCells=perfIfOutVBRCells, node=node, perfIfMisDelivdCells=perfIfMisDelivdCells, connPvcIndex=connPvcIndex, connPvcLowUpcParam=connPvcLowUpcParam, linfConf=linfConf, perfIfTable=perfIfTable, connPvcCause=connPvcCause, connPvcLowThroughput=connPvcLowThroughput, perfIfInVBRCells=perfIfInVBRCells, connPvcTopology=connPvcTopology, connPvcTrafficType=connPvcTrafficType, nodeIfConfTable=nodeIfConfTable, connPvcHighInCells=connPvcHighInCells, connPvcTable=connPvcTable, nodeFanStatus=nodeFanStatus, linfStatusTable=linfStatusTable, nodeIfConfIndex=nodeIfConfIndex, linfStatusEntry=linfStatusEntry, m5core_mib=m5core_mib, necProductDepend=necProductDepend, conn=conn, nodeGuaranteedBufferThreshold=nodeGuaranteedBufferThreshold, perfIfEntry=perfIfEntry, perfIfParityPaths=perfIfParityPaths, connPvcHighThroughput=connPvcHighThroughput, nodeGuaranteedBufferSize=nodeGuaranteedBufferSize, connPvcLowIfIndex=connPvcLowIfIndex, connPvcRowStatus=connPvcRowStatus, nodeReset=nodeReset, connPvcKind=connPvcKind, connPvcLowUpc=connPvcLowUpc, nodeIfConfStatus=nodeIfConfStatus, connPvcHighIfIndex=connPvcHighIfIndex, nodeSaveConf=nodeSaveConf, atomis_mib=atomis_mib, perfIfOutUBRCells=perfIfOutUBRCells, connPvcHighOutCells=connPvcHighOutCells, connPvcLowInCells=connPvcLowInCells, nodeIfConfEntry=nodeIfConfEntry, perfIfInUBRCells=perfIfInUBRCells, connPvcIndexNext=connPvcIndexNext, nodeUpcWindowSize=nodeUpcWindowSize, linfIndex=linfIndex, nodeBestEffortBufferThreshold=nodeBestEffortBufferThreshold, connPvcLowUpcViolatedCells=connPvcLowUpcViolatedCells, perfIfOutCBRCells=perfIfOutCBRCells, nodeSaveResult=nodeSaveResult, perfTrapEnable=perfTrapEnable, perfIfHecErrors=perfIfHecErrors, connPvcEntry=connPvcEntry, perfIfParityLines=perfIfParityLines, nodeIfConfPhysType=nodeIfConfPhysType, perfIfLcvs=perfIfLcvs)
