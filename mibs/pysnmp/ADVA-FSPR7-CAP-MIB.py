#
# PySNMP MIB module ADVA-FSPR7-CAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADVA-FSPR7-CAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:59:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
entityOptLineIndexNo1, entityCrossDcnExtNo, entityCrsOptLineFromIndexNo4, entityShelfConnShelfNo, entityExternalPortExtNo, entityExternalPortShelfNo, entityFacilityExtNo, entityProtectionCableIndex3, entityFacilityClassName, entityOpticalMuxPortNo, entityShelfConnPortNo, entityCrsOptLineToIndexNo1, entityFilterCableIndex3, entityOpticalMuxExtNo, entityCrossDcnPortNo, entityContainerSlotNo, entityCrsOptLineToClassName, entityCrsOptLineToIndexNo3, entityTerminPointIndexNo2, entityContainerShelfNo, entityContainerClassName, entityCrsOptLineToIndexNo4, entityExternalPortSlotNo, entityTerminPointClassName, entityDcnExtNo, entityOptLineClassName, entityFilterCableIndex4, entityProtectionCableIndex4, entityContainerExtNo, entityCrsOptLineFromIndexNo2, entityShelfConnSlotNo, entityOpticalMuxShelfNo, entityDcnShelfNo, entityEqptExtNo, entityCrossDcnClassName, entityFacilityPortNo, entityCrossConnFromSlotNo, entityEqptShelfNo, entityOpticalMuxSlotNo, entityTerminPointIndexNo1, entityFfpClassName, entityFilterCableIndex1, entityCrossConnFromExtNo, entityExternalPortClassName, entityCrsOptLineFromClassName, entityCrossDcnShelfNo, entityCrossConnFromPortNo, entityDcnSlotNo, entityCrossConnFromClassName, entityCrossConnToExtNo, entityDcnClassName, entityCrsOptLineFromIndexNo1, entityCrossConnFromShelfNo, entityCrsOptLineToIndexNo2, entityFfpShelfNo, entityCrossDcnSlotNo, entityFilterCableClassName, entityEqptPortNo, entityCrossConnToPortNo, entityTerminPointIndexNo4, entityEqptSlotNo, entityCrsOptLineClassName, entityDcnPortNo, entityContainerPortNo, entityCrossConnToClassName, entityProtectionCableClassName, entityFacilityShelfNo, entityFilterCableIndex2, entityEqptClassName, entityOpticalMuxClassName, entityProtectionCableIndex1, entityFacilitySlotNo, entityProtectionCableIndex2, entityShelfConnExtNo, entityExternalPortPortNo, entityFfpPortNo, entityFfpSlotNo, entityCrossConnToSlotNo, entityCrossConnClassName, entityCrossConnToShelfNo, entityFfpExtNo, entityShelfConnClassName, entityTerminPointIndexNo3, entityCrsOptLineFromIndexNo3, entityConnectionClassName = mibBuilder.importSymbols("ADVA-FSPR7-MIB", "entityOptLineIndexNo1", "entityCrossDcnExtNo", "entityCrsOptLineFromIndexNo4", "entityShelfConnShelfNo", "entityExternalPortExtNo", "entityExternalPortShelfNo", "entityFacilityExtNo", "entityProtectionCableIndex3", "entityFacilityClassName", "entityOpticalMuxPortNo", "entityShelfConnPortNo", "entityCrsOptLineToIndexNo1", "entityFilterCableIndex3", "entityOpticalMuxExtNo", "entityCrossDcnPortNo", "entityContainerSlotNo", "entityCrsOptLineToClassName", "entityCrsOptLineToIndexNo3", "entityTerminPointIndexNo2", "entityContainerShelfNo", "entityContainerClassName", "entityCrsOptLineToIndexNo4", "entityExternalPortSlotNo", "entityTerminPointClassName", "entityDcnExtNo", "entityOptLineClassName", "entityFilterCableIndex4", "entityProtectionCableIndex4", "entityContainerExtNo", "entityCrsOptLineFromIndexNo2", "entityShelfConnSlotNo", "entityOpticalMuxShelfNo", "entityDcnShelfNo", "entityEqptExtNo", "entityCrossDcnClassName", "entityFacilityPortNo", "entityCrossConnFromSlotNo", "entityEqptShelfNo", "entityOpticalMuxSlotNo", "entityTerminPointIndexNo1", "entityFfpClassName", "entityFilterCableIndex1", "entityCrossConnFromExtNo", "entityExternalPortClassName", "entityCrsOptLineFromClassName", "entityCrossDcnShelfNo", "entityCrossConnFromPortNo", "entityDcnSlotNo", "entityCrossConnFromClassName", "entityCrossConnToExtNo", "entityDcnClassName", "entityCrsOptLineFromIndexNo1", "entityCrossConnFromShelfNo", "entityCrsOptLineToIndexNo2", "entityFfpShelfNo", "entityCrossDcnSlotNo", "entityFilterCableClassName", "entityEqptPortNo", "entityCrossConnToPortNo", "entityTerminPointIndexNo4", "entityEqptSlotNo", "entityCrsOptLineClassName", "entityDcnPortNo", "entityContainerPortNo", "entityCrossConnToClassName", "entityProtectionCableClassName", "entityFacilityShelfNo", "entityFilterCableIndex2", "entityEqptClassName", "entityOpticalMuxClassName", "entityProtectionCableIndex1", "entityFacilitySlotNo", "entityProtectionCableIndex2", "entityShelfConnExtNo", "entityExternalPortPortNo", "entityFfpPortNo", "entityFfpSlotNo", "entityCrossConnToSlotNo", "entityCrossConnClassName", "entityCrossConnToShelfNo", "entityFfpExtNo", "entityShelfConnClassName", "entityTerminPointIndexNo3", "entityCrsOptLineFromIndexNo3", "entityConnectionClassName")
FspR7NdpCleanupCaps, FspR7RlsManCaps, FspR7BidirectionalChannelCaps, FspR7EdfaOutputPowerRatingCaps, Counter64StringCaps, FspR7DispersionCompensationCaps, FspR7OpuPayloadTypeCaps, FspR7XfpDecisionThresCaps, FspR7YesNo, ApsRevertModeCaps, FspR7LaserDelayTimerCaps, FspR7ChannelIdentifierCaps, FspR7TransmissionModeCaps, FspR7PlugDataRateCaps, FspR7IPv6TypeCaps, FspR7BitrateCaps, FspR7EnableDisableCaps, FspR7NumberOfChannelsProvCaps, FspR7InterfaceTypeCaps, FspR7ChannelBandwidthCaps, FspR7SupplyTypeCaps, FspR7ManualAutoCaps, FspR7LineCodingCaps, FspR7TypeConnectionCaps, FspR7Integer32Caps, FspR7PsuOutputPowerCaps, FspR7RedLinedStateCaps, FspR7GainRangeCaps, FspR7StuffCaps, FspR7AutoThresResetCaps, FspR7FlowControlModeCaps, FspR7OpticalInterfaceReachCaps, FspR7YesNoCaps, FspR7ErrorFwdModeCaps, FspR7TurnupConfigCaps, FspR7FrameFormatCaps, FspR7BERThresholdCaps, FspR7OspfModeCaps, FspR7ConnectorTypeCaps, FspR7OpticalSubBandCaps, FspR7NumberOfChannelsCaps, FspR7CpAuthTypeCaps, FspR7IpModeCaps, FspR7OpticalBandCaps, FspR7ForceConfigCaps, FspR7TxOffOnTmCaps, FspR7LagPortTypeCaps, FspR7InitEqualizationCaps, FspR7IpTypeCaps, FspR7EqlzAdminStateCaps, FspR7PmResetCaps, FspR7VoaModeCaps, FfpTypeCaps, FspR7MaxBitErrorRateCaps, FspR7OtdrPeriodCaps, FspR7PortBehaviourCaps, FspR7BERThresholdSectionCaps, FspR7ForcedStatusCaps, FspR7MuxMethodCaps, FspR7TrafficDirectionCaps, FspR7TopologyCaps, FspR7AlsModeCaps, FspR7Unsigned32Caps, FspR7APSCommandCaps, FspR7FecTypeCaps, FspR7RoadmNumberCaps, FspR7SnmpLongString, FspR7DCFiberTypeCaps, FspR7LaserForcedOperationCaps, FspR7FiberBrandCaps, FspR7PathNodeCaps, FspR7NoYesCaps, FspR7FltrCableTypeCaps, FspR7PRBSTestCaps, FspR7TelemetryOutputCaps, FspR7FunctionCrsCaps, FspR7ScramblingCaps, FspR7PortRoleCaps, FspR7DeploymentScenarioCaps, FspR7BaundCaps, FspR7ChannelSpacingCaps, FspR7DispersionModesCaps, FspR7OscUsageCaps, FspR7DisableEnableCaps, FspR7CapInventoryCaps, FspR7LaneGroupInventoryCaps, FspR7LossAttenuationCaps, FspR7RowStatusCaps, ApsTypeCaps, FspR7TiltSetCaps, FspR7GainCaps, FspR7FiberDetectCaps, FspR7AseTabOprCaps, FspR7ConnCaps, FspR7DispersionConfigCaps, FspR7SingleFiberLocationCaps, FspR7PrbsPmResetCaps, FspR7UntaggedFramesCaps, FspR7PortModeCaps, FspR7AdminStateCaps, FspR7TifOutputResetCaps, FspR7LacpTimeoutCaps, FspR7InvertTelemetryInputLogicCaps, FspR7OptUpdateCaps, FspR7YcableTypeCaps, FspR7LacpModeCaps, FspR7OpticalGroupCaps, FspR7CodeGainCaps, FspR7MappingCaps, FspR7OpticalFiberTypeCaps, FspR7TypeCrsCaps = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7NdpCleanupCaps", "FspR7RlsManCaps", "FspR7BidirectionalChannelCaps", "FspR7EdfaOutputPowerRatingCaps", "Counter64StringCaps", "FspR7DispersionCompensationCaps", "FspR7OpuPayloadTypeCaps", "FspR7XfpDecisionThresCaps", "FspR7YesNo", "ApsRevertModeCaps", "FspR7LaserDelayTimerCaps", "FspR7ChannelIdentifierCaps", "FspR7TransmissionModeCaps", "FspR7PlugDataRateCaps", "FspR7IPv6TypeCaps", "FspR7BitrateCaps", "FspR7EnableDisableCaps", "FspR7NumberOfChannelsProvCaps", "FspR7InterfaceTypeCaps", "FspR7ChannelBandwidthCaps", "FspR7SupplyTypeCaps", "FspR7ManualAutoCaps", "FspR7LineCodingCaps", "FspR7TypeConnectionCaps", "FspR7Integer32Caps", "FspR7PsuOutputPowerCaps", "FspR7RedLinedStateCaps", "FspR7GainRangeCaps", "FspR7StuffCaps", "FspR7AutoThresResetCaps", "FspR7FlowControlModeCaps", "FspR7OpticalInterfaceReachCaps", "FspR7YesNoCaps", "FspR7ErrorFwdModeCaps", "FspR7TurnupConfigCaps", "FspR7FrameFormatCaps", "FspR7BERThresholdCaps", "FspR7OspfModeCaps", "FspR7ConnectorTypeCaps", "FspR7OpticalSubBandCaps", "FspR7NumberOfChannelsCaps", "FspR7CpAuthTypeCaps", "FspR7IpModeCaps", "FspR7OpticalBandCaps", "FspR7ForceConfigCaps", "FspR7TxOffOnTmCaps", "FspR7LagPortTypeCaps", "FspR7InitEqualizationCaps", "FspR7IpTypeCaps", "FspR7EqlzAdminStateCaps", "FspR7PmResetCaps", "FspR7VoaModeCaps", "FfpTypeCaps", "FspR7MaxBitErrorRateCaps", "FspR7OtdrPeriodCaps", "FspR7PortBehaviourCaps", "FspR7BERThresholdSectionCaps", "FspR7ForcedStatusCaps", "FspR7MuxMethodCaps", "FspR7TrafficDirectionCaps", "FspR7TopologyCaps", "FspR7AlsModeCaps", "FspR7Unsigned32Caps", "FspR7APSCommandCaps", "FspR7FecTypeCaps", "FspR7RoadmNumberCaps", "FspR7SnmpLongString", "FspR7DCFiberTypeCaps", "FspR7LaserForcedOperationCaps", "FspR7FiberBrandCaps", "FspR7PathNodeCaps", "FspR7NoYesCaps", "FspR7FltrCableTypeCaps", "FspR7PRBSTestCaps", "FspR7TelemetryOutputCaps", "FspR7FunctionCrsCaps", "FspR7ScramblingCaps", "FspR7PortRoleCaps", "FspR7DeploymentScenarioCaps", "FspR7BaundCaps", "FspR7ChannelSpacingCaps", "FspR7DispersionModesCaps", "FspR7OscUsageCaps", "FspR7DisableEnableCaps", "FspR7CapInventoryCaps", "FspR7LaneGroupInventoryCaps", "FspR7LossAttenuationCaps", "FspR7RowStatusCaps", "ApsTypeCaps", "FspR7TiltSetCaps", "FspR7GainCaps", "FspR7FiberDetectCaps", "FspR7AseTabOprCaps", "FspR7ConnCaps", "FspR7DispersionConfigCaps", "FspR7SingleFiberLocationCaps", "FspR7PrbsPmResetCaps", "FspR7UntaggedFramesCaps", "FspR7PortModeCaps", "FspR7AdminStateCaps", "FspR7TifOutputResetCaps", "FspR7LacpTimeoutCaps", "FspR7InvertTelemetryInputLogicCaps", "FspR7OptUpdateCaps", "FspR7YcableTypeCaps", "FspR7LacpModeCaps", "FspR7OpticalGroupCaps", "FspR7CodeGainCaps", "FspR7MappingCaps", "FspR7OpticalFiberTypeCaps", "FspR7TypeCrsCaps")
FspR7EquipmentTypeCaps, OhTerminationLevelCaps, ApsDirectionCaps, fspR7, SonetTimingSourceCaps, EthDuplexModeCaps, OtnTcmLevelCaps, LoopConfigCaps, EnableStateCaps, SonetTraceFormCaps, ProtectionMechCaps, VirtualContainerTypeCaps, ApsHoldoffTimeCaps, TimModeCaps, OtnPayloadTypeCaps = mibBuilder.importSymbols("ADVA-MIB", "FspR7EquipmentTypeCaps", "OhTerminationLevelCaps", "ApsDirectionCaps", "fspR7", "SonetTimingSourceCaps", "EthDuplexModeCaps", "OtnTcmLevelCaps", "LoopConfigCaps", "EnableStateCaps", "SonetTraceFormCaps", "ProtectionMechCaps", "VirtualContainerTypeCaps", "ApsHoldoffTimeCaps", "TimModeCaps", "OtnPayloadTypeCaps")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, iso, MibIdentifier, Counter32, ObjectIdentity, IpAddress, Counter64, Unsigned32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibIdentifier", "Counter32", "ObjectIdentity", "IpAddress", "Counter64", "Unsigned32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
advaFspR7Cap = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9))
advaFspR7Cap.setRevisions(('2014-10-15 00:00', '2014-09-29 00:00', '2013-12-04 00:00', '2013-08-20 00:00', '2011-05-22 00:00',))
if mibBuilder.loadTexts: advaFspR7Cap.setLastUpdated('201410150000Z')
if mibBuilder.loadTexts: advaFspR7Cap.setOrganization('ADVA Optical Networking')
managementCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3))
specificMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2))
eqptMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3))
facilityMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4))
dcnMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5))
opticalMuxMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6))
shelfConnMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7))
envMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8))
containerMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9))
opticalLineMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10))
performanceCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6))
performanceFacilityCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4))
performanceFacilityThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1))
pmEqptCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 10))
pmDcnCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11))
pmDcnDataCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 1))
pmDcnPhysicalCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2))
pmDcnPhysThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2))
pmFacilityCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12))
pmFacilityDataCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1))
pmFacilityDataThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1))
pmFacilityPhysicalCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2))
pmFacilityPhysValueCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 1))
pmFacilityPhysThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2))
pmTerminPointCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 13))
pmOptMuxCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14))
pmOptMuxDataCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 1))
pmOptMuxPhysicalCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2))
pmOptMuxPhysValueCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 1))
pmOptMuxPhysThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2))
featureSpecificCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7))
fiberMapCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1))
eciCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3))
changeServiceCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5))
protectionCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6))
crossConnectionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6), )
if mibBuilder.loadTexts: crossConnectionCapTable.setStatus('current')
crossConnectionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: crossConnectionCapEntry.setStatus('current')
crossConnectionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapRowStatus.setStatus('current')
crossConnectionCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 2), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapAdmin.setStatus('current')
crossConnectionCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 3), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapRedLineState.setStatus('current')
crossConnectionCapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 4), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapConn.setStatus('current')
crossConnectionCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapAlias.setStatus('current')
crossConnectionCapPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 6), FspR7PathNodeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapPathNode.setStatus('current')
crossConnectionCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapTunnelAid.setStatus('current')
crossConnectionCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 8), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapType.setStatus('current')
crossConnectionCapCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 9), FspR7FunctionCrsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsFunction.setStatus('current')
crossConnectionCapCrsFromAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 10), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsFromAidTwo.setStatus('current')
crossConnectionCapCrsToAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 11), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsToAidTwo.setStatus('current')
crossConnectionCapCrsMcAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 12), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsMcAidList.setStatus('current')
crossConnectionCapCrsContAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 13), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsContAidList.setStatus('current')
crossConnectionCapCrsContAidListTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 14), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsContAidListTwo.setStatus('current')
crossOpticalLineCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7), )
if mibBuilder.loadTexts: crossOpticalLineCapTable.setStatus('current')
crossOpticalLineCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: crossOpticalLineCapEntry.setStatus('current')
crossOpticalLineCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapRowStatus.setStatus('current')
crossOpticalLineCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 2), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapRedLineState.setStatus('current')
crossOpticalLineCapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 3), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapConn.setStatus('current')
crossOpticalLineCapCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 4), FspR7TypeCrsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapCrsType.setStatus('current')
crossOpticalLineCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapAlias.setStatus('current')
crossOpticalLineCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapTunnelAid.setStatus('current')
endOfCrossOpticalLineCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossOpticalLineCapTable.setStatus('current')
crossDcnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9), )
if mibBuilder.loadTexts: crossDcnCapTable.setStatus('current')
crossDcnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: crossDcnCapEntry.setStatus('current')
crossDcnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapRowStatus.setStatus('current')
crossDcnCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 2), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapType.setStatus('current')
crossDcnCapLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapLink.setStatus('current')
crossDcnCapEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapEcc.setStatus('current')
endOfCrossDcnCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossDcnCapTable.setStatus('current')
endOfSpecificMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSpecificMgmtCap.setStatus('current')
shelfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1), )
if mibBuilder.loadTexts: shelfCapTable.setStatus('current')
shelfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: shelfCapEntry.setStatus('current')
shelfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRowStatus.setStatus('current')
shelfCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 2), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapPsuOutputPower.setStatus('current')
shelfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapType.setStatus('current')
shelfCapRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRack.setStatus('current')
shelfCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 5), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapSupply.setStatus('current')
shelfCapBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 6), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapBandProvision.setStatus('current')
shelfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 7), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapAdmin.setStatus('current')
shelfCapRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRackNumber.setStatus('current')
shelfCapRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRackOrder.setStatus('current')
shelfCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapAlias.setStatus('current')
shelfCapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapSlot.setStatus('current')
endOfShelfCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfCapTable.setStatus('current')
fanCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3), )
if mibBuilder.loadTexts: fanCapTable.setStatus('current')
fanCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: fanCapEntry.setStatus('current')
fanCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapRowStatus.setStatus('current')
fanCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapForceDestroy.setStatus('current')
fanCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapAdmin.setStatus('current')
fanCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 4), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapType.setStatus('current')
fanCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapAlias.setStatus('current')
fanCapOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 6), FspR7TifOutputResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapOutputReset.setStatus('current')
endOfFanCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFanCapTable.setStatus('current')
plugCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5), )
if mibBuilder.loadTexts: plugCapTable.setStatus('current')
plugCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: plugCapEntry.setStatus('current')
plugCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapRowStatus.setStatus('current')
plugCapConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 2), FspR7ConnectorTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapConnector.setStatus('current')
plugCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapType.setStatus('current')
plugCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 4), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapReach.setStatus('current')
plugCapLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 5), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapLoopbackAttenuation.setStatus('current')
plugCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 6), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapTransmitChannel.setStatus('current')
plugCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapAlias.setStatus('current')
plugCapLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 8), FspR7LaneGroupInventoryCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapLaneGroup.setStatus('current')
plugCapMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 9), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapMaxDataRate.setStatus('current')
plugCapThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 10), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapThirdPartyUsage.setStatus('current')
plugCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 11), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapAdmin.setStatus('current')
plugCapBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 12), FspR7BidirectionalChannelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapBidirectionalChannel.setStatus('current')
plugCapChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 13), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapChannelSpacingProvision.setStatus('current')
endOfPlugCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPlugCapTable.setStatus('current')
moduleCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7), )
if mibBuilder.loadTexts: moduleCapTable.setStatus('current')
moduleCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: moduleCapEntry.setStatus('current')
moduleCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRowStatus.setStatus('current')
moduleCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapForceDestroy.setStatus('current')
moduleCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 3), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapPsuOutputPower.setStatus('current')
moduleCapPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 4), FspR7EdfaOutputPowerRatingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapPower.setStatus('current')
moduleCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 5), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapReach.setStatus('current')
moduleCapInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 6), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapInitEqlz.setStatus('current')
moduleCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapLanAid.setStatus('current')
moduleCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 8), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapType.setStatus('current')
moduleCapMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 9), FspR7MappingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapMapping.setStatus('current')
moduleCapGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 10), FspR7GainRangeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapGainRange.setStatus('current')
moduleCapSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 11), FspR7SingleFiberLocationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapSfProvision.setStatus('current')
moduleCapCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 12), FspR7CapInventoryCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapCapabilityLevelProvision.setStatus('current')
moduleCapDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 13), FspR7DCFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapDCFiberType.setStatus('current')
moduleCapChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 14), FspR7NumberOfChannelsProvCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelsProvision.setStatus('current')
moduleCapFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 15), FspR7FiberDetectCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapFiberDetect.setStatus('current')
moduleCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 16), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapSupply.setStatus('current')
moduleCapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 17), FspR7OpticalGroupCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapGroup.setStatus('current')
moduleCapDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 18), FspR7DeploymentScenarioCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapDeploy.setStatus('current')
moduleCapLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapLagSysPrio.setStatus('current')
moduleCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 20), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapTransmitChannel.setStatus('current')
moduleCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 21), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapBand.setStatus('current')
moduleCapTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 22), FspR7TrafficDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapTrafficDirection.setStatus('current')
moduleCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapIpAddr.setStatus('current')
moduleCapDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 24), FspR7DispersionCompensationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapDispersionCompensation.setStatus('current')
moduleCapActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 25), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapActivateDetect.setStatus('current')
moduleCapOscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 26), FspR7OscUsageCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapOscUsage.setStatus('current')
moduleCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 27), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapAdmin.setStatus('current')
moduleCapScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 28), FspR7ScramblingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapScrambling.setStatus('current')
moduleCapChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 29), FspR7NumberOfChannelsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelsNumber.setStatus('current')
moduleCapChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 30), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelSpacingProvision.setStatus('current')
moduleCapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 31), FspR7TransmissionModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapMode.setStatus('current')
moduleCapSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 32), FspR7OpticalSubBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapSubBandProvision.setStatus('current')
moduleCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapAlias.setStatus('current')
moduleCapFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 34), FspR7OpticalFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapFiberType.setStatus('current')
moduleCapChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 35), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelSpacing.setStatus('current')
moduleCapOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 36), FspR7TifOutputResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapOutputReset.setStatus('current')
moduleCapRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 37), FspR7RoadmNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRoadmNumber.setStatus('current')
moduleCapTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 38), FspR7TopologyCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapTopology.setStatus('current')
moduleCapForceConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 39), FspR7ForceConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapForceConfig.setStatus('current')
moduleCapMuxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 40), FspR7MuxMethodCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapMuxMethod.setStatus('current')
moduleCapNdpCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 41), FspR7NdpCleanupCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapNdpCleanup.setStatus('current')
moduleCapRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 42), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRstp.setStatus('current')
moduleCapRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 43), FspR7RlsManCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRemoteReset.setStatus('current')
endOfModuleCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfModuleCap.setStatus('current')
protectionCableCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9), )
if mibBuilder.loadTexts: protectionCableCapTable.setStatus('current')
protectionCableCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: protectionCableCapEntry.setStatus('current')
protectionCableCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionCableCapRowStatus.setStatus('current')
protectionCableCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9, 1, 2), FspR7YcableTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionCableCapType.setStatus('current')
endOfProtectionCableCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionCableCap.setStatus('current')
filterCableCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11), )
if mibBuilder.loadTexts: filterCableCapTable.setStatus('current')
filterCableCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: filterCableCapEntry.setStatus('current')
filterCableCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCableCapRowStatus.setStatus('current')
filterCableCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11, 1, 2), FspR7FltrCableTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCableCapType.setStatus('current')
endOfFilterCableCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFilterCableCap.setStatus('current')
endOfEqptMgmCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEqptMgmCap.setStatus('current')
physicalPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1), )
if mibBuilder.loadTexts: physicalPortCapTable.setStatus('current')
physicalPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: physicalPortCapEntry.setStatus('current')
physicalPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapRowStatus.setStatus('current')
physicalPortCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapType.setStatus('current')
physicalPortCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAdmin.setStatus('current')
physicalPortCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAlias.setStatus('current')
physicalPortCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 5), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAlsMode.setStatus('current')
physicalPortCapAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 6), FspR7AutoThresResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAutoThresReset.setStatus('current')
physicalPortCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 7), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAutonegotiation.setStatus('current')
physicalPortCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 8), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapBehaviour.setStatus('current')
physicalPortCapDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 9), FspR7DispersionConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDispertionConfig.setStatus('current')
physicalPortCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 10), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDispersionSetting.setStatus('current')
physicalPortCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 11), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDispersionMode.setStatus('current')
physicalPortCapChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 12), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapChannelProv.setStatus('current')
physicalPortCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 13), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapWdmRxChannel.setStatus('current')
physicalPortCapCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 14), FspR7CodeGainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapCodeGain.setStatus('current')
physicalPortCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 15), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapXfpDecisionThres.setStatus('current')
physicalPortCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 16), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDisparityCorrection.setStatus('current')
physicalPortCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 17), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapEqlzAdmin.setStatus('current')
physicalPortCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 18), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapErrorForwarding.setStatus('current')
physicalPortCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 19), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapFecType.setStatus('current')
physicalPortCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 20), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapFarEndCommunication.setStatus('current')
physicalPortCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 21), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapFlowControl.setStatus('current')
physicalPortCapForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 22), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapForceLaserOn.setStatus('current')
physicalPortCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 23), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapInhibitSwitchToProt.setStatus('current')
physicalPortCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 24), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapInhibitSwitchToWork.setStatus('current')
physicalPortCapLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 25), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaneChannelSetting.setStatus('current')
physicalPortCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 26), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLoopConfig.setStatus('current')
physicalPortCapLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 27), FspR7LaserDelayTimerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserDelayTimer.setStatus('current')
physicalPortCapLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 28), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserOffTimer.setStatus('current')
physicalPortCapLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 29), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserOnTimer.setStatus('current')
physicalPortCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 30), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserOffDelayFunction.setStatus('current')
physicalPortCapAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 31), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAutoPTassignment.setStatus('current')
physicalPortCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 32), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTributarySlotMethod.setStatus('current')
physicalPortCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 33), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapInitiateEqualization.setStatus('current')
physicalPortCapLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 34), FspR7LossAttenuationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLossAttenuation.setStatus('current')
physicalPortCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 35), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapOpticalSetPoint.setStatus('current')
physicalPortCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 36), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDataLayerPmReset.setStatus('current')
physicalPortCapPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 37), FspR7PrbsPmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPrbsPmReset.setStatus('current')
physicalPortCapTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 38), FspR7PRBSTestCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTestPrbsRcvMode.setStatus('current')
physicalPortCapTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 39), FspR7PRBSTestCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTestPrbsTrmtMode.setStatus('current')
physicalPortCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 40), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSwitchCommand.setStatus('current')
physicalPortCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 41), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapOpuPayloadType.setStatus('current')
physicalPortCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 42), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSonetLine.setStatus('current')
physicalPortCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 43), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSdhMs.setStatus('current')
physicalPortCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 44), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOtu.setStatus('current')
physicalPortCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 45), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOdu.setStatus('current')
physicalPortCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 46), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThreshold.setStatus('current')
physicalPortCapSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 47), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPcslThreshold.setStatus('current')
physicalPortCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 48), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSonetSection.setStatus('current')
physicalPortCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 49), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSdhSection.setStatus('current')
physicalPortCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 50), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmA.setStatus('current')
physicalPortCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 51), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmB.setStatus('current')
physicalPortCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 52), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmC.setStatus('current')
physicalPortCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 53), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSignalDegradePeriod.setStatus('current')
physicalPortCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 54), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOdu.setStatus('current')
physicalPortCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 55), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOtu.setStatus('current')
physicalPortCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 56), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodIntegration.setStatus('current')
physicalPortCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 57), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodSdhSection.setStatus('current')
physicalPortCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 58), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmA.setStatus('current')
physicalPortCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 59), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmB.setStatus('current')
physicalPortCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 60), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmC.setStatus('current')
physicalPortCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 61), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapOtnStuffing.setStatus('current')
physicalPortCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 62), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTcmALevel.setStatus('current')
physicalPortCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 63), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTcmBLevel.setStatus('current')
physicalPortCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 64), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTcmCLevel.setStatus('current')
physicalPortCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 65), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTerminationLevel.setStatus('current')
physicalPortCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 66), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimingSource.setStatus('current')
physicalPortCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 67), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOdu.setStatus('current')
physicalPortCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 68), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOtu.setStatus('current')
physicalPortCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 69), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeSonetSection.setStatus('current')
physicalPortCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 70), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmA.setStatus('current')
physicalPortCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 71), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmB.setStatus('current')
physicalPortCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 72), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmC.setStatus('current')
physicalPortCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 73), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceFormSonetSection.setStatus('current')
physicalPortCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedSonetSection.setStatus('current')
physicalPortCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSonetSection.setStatus('current')
physicalPortCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOtu.setStatus('current')
physicalPortCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOtu.setStatus('current')
physicalPortCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOtu.setStatus('current')
physicalPortCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOtu.setStatus('current')
physicalPortCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOdu.setStatus('current')
physicalPortCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOdu.setStatus('current')
physicalPortCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOdu.setStatus('current')
physicalPortCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOdu.setStatus('current')
physicalPortCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmA.setStatus('current')
physicalPortCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmA.setStatus('current')
physicalPortCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmA.setStatus('current')
physicalPortCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmA.setStatus('current')
physicalPortCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmB.setStatus('current')
physicalPortCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmB.setStatus('current')
physicalPortCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmB.setStatus('current')
physicalPortCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmB.setStatus('current')
physicalPortCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmC.setStatus('current')
physicalPortCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmC.setStatus('current')
physicalPortCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmC.setStatus('current')
physicalPortCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmC.setStatus('current')
physicalPortCapTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 96), FspR7TurnupConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTurnupConfig.setStatus('current')
physicalPortCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 97), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOffDelay.setStatus('current')
physicalPortCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 98), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapVoaMode.setStatus('current')
physicalPortCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 99), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapVoaSetpoint.setStatus('current')
physicalPortCapLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 100), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLagPrio.setStatus('current')
physicalPortCapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 101), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapMaxFrameSize.setStatus('current')
physicalPortCapPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 102), OtnPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPayload.setStatus('current')
physicalPortCapPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 103), FspR7PortModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPortMode.setStatus('current')
physicalPortCapPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 104), FspR7PortRoleCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPortRole.setStatus('current')
physicalPortCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 105), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPriority.setStatus('current')
physicalPortCapPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 106), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPvid.setStatus('current')
physicalPortCapStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapStagType.setStatus('current')
physicalPortCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 108), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapUtag.setStatus('current')
physicalPortCapVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 109), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapVethAid.setStatus('current')
physicalPortCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 110), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapRedLineState.setStatus('current')
physicalPortCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTunnelAid.setStatus('current')
physicalPortCapRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 112), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapRateLimit.setStatus('current')
physicalPortCapTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 113), FspR7TxOffOnTmCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOffOnTm.setStatus('current')
physicalPortCapTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 114), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOffTimer.setStatus('current')
physicalPortCapTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 115), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOnTimer.setStatus('current')
virtualPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2), )
if mibBuilder.loadTexts: virtualPortCapTable.setStatus('current')
virtualPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: virtualPortCapEntry.setStatus('current')
virtualPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapRowStatus.setStatus('current')
virtualPortCapChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 2), FspR7ChannelBandwidthCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapChannelBand.setStatus('current')
virtualPortCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapType.setStatus('current')
virtualPortCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapAlias.setStatus('current')
virtualPortCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 5), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapAdmin.setStatus('current')
virtualPortCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 6), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapEqlzAdmin.setStatus('current')
virtualPortCapInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 7), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapInitEqlz.setStatus('current')
virtualPortCapLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 8), FspR7LacpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLacpMode.setStatus('current')
virtualPortCapLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 9), FspR7LacpTimeoutCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLacpTimeout.setStatus('current')
virtualPortCapLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLagActivePorts.setStatus('current')
virtualPortCapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapMaxFrameSize.setStatus('current')
virtualPortCapPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 12), FspR7PortModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPortMode.setStatus('current')
virtualPortCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 13), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapDataLayerPmReset.setStatus('current')
virtualPortCapPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 14), FspR7PortRoleCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPortRole.setStatus('current')
virtualPortCapLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 15), FspR7LagPortTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLagPortType.setStatus('current')
virtualPortCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 16), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPriority.setStatus('current')
virtualPortCapPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 17), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPvid.setStatus('current')
virtualPortCapRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 18), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapRevertiveMode.setStatus('current')
virtualPortCapStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapStagType.setStatus('current')
virtualPortCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 20), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapUtag.setStatus('current')
virtualPortCapBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 21), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapBundle.setStatus('current')
virtualPortCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 22), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSwitchCommand.setStatus('current')
virtualPortCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 23), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapInhibitSwitchToWork.setStatus('current')
virtualPortCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 24), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapInhibitSwitchToProt.setStatus('current')
virtualPortCapOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOduTribPortNo.setStatus('current')
virtualPortCapOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 26), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOduTribTimeSlottNo.setStatus('current')
virtualPortCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 27), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOdu.setStatus('current')
virtualPortCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOdu.setStatus('current')
virtualPortCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOdu.setStatus('current')
virtualPortCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOdu.setStatus('current')
virtualPortCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOdu.setStatus('current')
virtualPortCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOdu.setStatus('current')
virtualPortCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 33), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOdu.setStatus('current')
virtualPortCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 34), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmA.setStatus('current')
virtualPortCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 35), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmA.setStatus('current')
virtualPortCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmB.setStatus('current')
virtualPortCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 37), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmB.setStatus('current')
virtualPortCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 38), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmC.setStatus('current')
virtualPortCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 39), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmC.setStatus('current')
virtualPortCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 40), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTcmALevel.setStatus('current')
virtualPortCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 41), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTcmBLevel.setStatus('current')
virtualPortCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 42), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTcmCLevel.setStatus('current')
virtualPortCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmA.setStatus('current')
virtualPortCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmA.setStatus('current')
virtualPortCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmA.setStatus('current')
virtualPortCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmA.setStatus('current')
virtualPortCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 47), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmA.setStatus('current')
virtualPortCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmB.setStatus('current')
virtualPortCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmB.setStatus('current')
virtualPortCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmB.setStatus('current')
virtualPortCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmB.setStatus('current')
virtualPortCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 52), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmB.setStatus('current')
virtualPortCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmC.setStatus('current')
virtualPortCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmC.setStatus('current')
virtualPortCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmC.setStatus('current')
virtualPortCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmC.setStatus('current')
virtualPortCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmC.setStatus('current')
virtualPortCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 58), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTerminationLevel.setStatus('current')
virtualPortCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 59), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLoopConfig.setStatus('current')
virtualPortCapVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 60), VirtualContainerTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapVcType.setStatus('current')
virtualPortCapCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 61), FspR7Unsigned32Caps()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapCir.setStatus('current')
virtualPortCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 62), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOpuPayloadType.setStatus('current')
virtualPortCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 63), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOtnStuffing.setStatus('current')
virtualPortCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 64), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapRedLineState.setStatus('current')
virtualPortCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTunnelAid.setStatus('current')
virtualPortCapTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 66), FspR7TrafficDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTrafficDirection.setStatus('current')
virtualPortCapChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 67), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapChannelId.setStatus('current')
endOfVirtualPortCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfVirtualPortCapTable.setStatus('current')
endOfFacilityMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityMgmtCap.setStatus('current')
linkCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1), )
if mibBuilder.loadTexts: linkCapTable.setStatus('current')
linkCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: linkCapEntry.setStatus('current')
linkCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapRowStatus.setStatus('current')
linkCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapType.setStatus('current')
linkCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAdmin.setStatus('current')
linkCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAlias.setStatus('current')
linkCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAuthString.setStatus('current')
linkCapProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 6), FspR7NoYesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapProxyArp.setStatus('current')
linkCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 7), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapOspf.setStatus('current')
linkCapBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 8), FspR7BaundCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapBaud.setStatus('current')
linkCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 9), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAuthType.setStatus('current')
linkCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 10), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapIpType.setStatus('current')
linkCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapMetric.setStatus('current')
linkCapAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAreaAid.setStatus('current')
linkCapNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 13), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapNearEndIp.setStatus('current')
linkCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 14), FspR7Unsigned32Caps()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapBitrate.setStatus('current')
linkCapIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 15), FspR7IPv6TypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapIPv6Type.setStatus('current')
linkCapNendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 16), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapNendIPv6.setStatus('current')
endOfLinkCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLinkCapTable.setStatus('current')
scCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3), )
if mibBuilder.loadTexts: scCapTable.setStatus('current')
scCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: scCapEntry.setStatus('current')
scCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapRowStatus.setStatus('current')
scCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapType.setStatus('current')
scCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAdmin.setStatus('current')
scCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAlias.setStatus('current')
scCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAuthString.setStatus('current')
scCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 6), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapOspf.setStatus('current')
scCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 7), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAuthType.setStatus('current')
scCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 8), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpType.setStatus('current')
scCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapMetric.setStatus('current')
scCapAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAreaAid.setStatus('current')
scCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 11), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAlsMode.setStatus('current')
scCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 12), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapSigDegThresReceiver.setStatus('current')
scCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 13), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAutonegotiation.setStatus('current')
scCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 14), FspR7BitrateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapBitrate.setStatus('current')
scCapDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 15), EthDuplexModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapDuplex.setStatus('current')
scCapAttGradientTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 16), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAttGradientTh.setStatus('current')
scCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 17), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpAddr.setStatus('current')
scCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapLanAid.setStatus('current')
scCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 19), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpMask.setStatus('current')
scCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 20), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapDataLayerPmReset.setStatus('current')
scCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 21), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapPriority.setStatus('current')
scCapIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 22), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIPv6.setStatus('current')
scCapIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIPv6PrefixLen.setStatus('current')
scCapIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 24), FspR7IpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpMode.setStatus('current')
scCapGatewayProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 25), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapGatewayProxyArp.setStatus('current')
endOfScCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfScCapTable.setStatus('current')
lanCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5), )
if mibBuilder.loadTexts: lanCapTable.setStatus('current')
lanCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: lanCapEntry.setStatus('current')
lanCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapRowStatus.setStatus('current')
lanCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapType.setStatus('current')
lanCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAdmin.setStatus('current')
lanCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAlias.setStatus('current')
lanCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAuthString.setStatus('current')
lanCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 6), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapOspf.setStatus('current')
lanCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 7), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAuthType.setStatus('current')
lanCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 8), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpType.setStatus('current')
lanCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapMetric.setStatus('current')
lanCapAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAreaAid.setStatus('current')
lanCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 11), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpAddr.setStatus('current')
lanCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 12), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpMask.setStatus('current')
lanCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapPriority.setStatus('current')
lanCapIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 14), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIPv6.setStatus('current')
lanCapIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 15), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIPv6PrefixLen.setStatus('current')
lanCapIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 16), FspR7IpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpMode.setStatus('current')
endOfLanCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLanCapTable.setStatus('current')
eccCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7), )
if mibBuilder.loadTexts: eccCapTable.setStatus('current')
eccCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: eccCapEntry.setStatus('current')
eccCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapRowStatus.setStatus('current')
eccCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapType.setStatus('current')
eccCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapAdmin.setStatus('current')
eccCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapAlias.setStatus('current')
eccCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapLanAid.setStatus('current')
eccCapExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapExternalVid.setStatus('current')
endOfEccCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEccCapTable.setStatus('current')
endOfDcnMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnMgmtCap.setStatus('current')
opticalMuxCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1), )
if mibBuilder.loadTexts: opticalMuxCapTable.setStatus('current')
opticalMuxCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxCapEntry.setStatus('current')
opticalMuxCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapRowStatus.setStatus('current')
opticalMuxCapPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapPumpPower.setStatus('current')
opticalMuxCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 3), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapInhibitSwitchToWork.setStatus('current')
opticalMuxCapForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 4), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapForceLaserOn.setStatus('current')
opticalMuxCapAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 5), FspR7AseTabOprCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAseTabCreation.setStatus('current')
opticalMuxCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 6), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOpticalSetPoint.setStatus('current')
opticalMuxCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 7), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapInitiateEqualization.setStatus('current')
opticalMuxCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 8), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapTilt.setStatus('current')
opticalMuxCapOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 9), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOscOpticalSetpoint.setStatus('current')
opticalMuxCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 10), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOffset.setStatus('current')
opticalMuxCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 11), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapSwitchCommand.setStatus('current')
opticalMuxCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 12), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAlsMode.setStatus('current')
opticalMuxCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 13), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapType.setStatus('current')
opticalMuxCapAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 14), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAttenuationGradient.setStatus('current')
opticalMuxCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 15), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapInhibitSwitchToProt.setStatus('current')
opticalMuxCapVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 16), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapVariableGain.setStatus('current')
opticalMuxCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 17), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAdmin.setStatus('current')
opticalMuxCapTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 18), FspR7OtdrPeriodCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapTimePeriod.setStatus('current')
opticalMuxCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 19), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapSigDegThresReceiver.setStatus('current')
opticalMuxCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAlias.setStatus('current')
opticalMuxCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 21), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapDataLayerPmReset.setStatus('current')
opticalMuxCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 22), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapGain.setStatus('current')
opticalMuxCapEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 23), FspR7EdfaOutputPowerRatingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapEdfaPwrOut.setStatus('current')
opticalMuxCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 24), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapVoaSetpoint.setStatus('current')
opticalMuxCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 25), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapFiberBrand.setStatus('current')
opticalMuxCapTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 26), FspR7TiltSetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapTiltSet.setStatus('current')
opticalMuxCapForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 27), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapForceFwdAsePilotOn.setStatus('current')
opticalMuxCapBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 28), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapBandProvision.setStatus('current')
opticalMuxCapOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 29), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOffsetHigh.setStatus('current')
opticalMuxCapOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 30), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOffsetLow.setStatus('current')
opticalMuxCapOptUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 31), FspR7OptUpdateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOptUpdate.setStatus('current')
endOfOpticalMuxCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxCapTable.setStatus('current')
endOfOpticalMuxMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxMgmtCap.setStatus('current')
shelfConnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1), )
if mibBuilder.loadTexts: shelfConnCapTable.setStatus('current')
shelfConnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: shelfConnCapEntry.setStatus('current')
shelfConnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapRowStatus.setStatus('current')
shelfConnCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 2), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapAdmin.setStatus('current')
shelfConnCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapAlias.setStatus('current')
shelfConnCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 4), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapFacilityType.setStatus('current')
endOfShelfConnCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnCapTable.setStatus('current')
endOfShelfConnMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnMgmtCap.setStatus('current')
envPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1), )
if mibBuilder.loadTexts: envPortCapTable.setStatus('current')
envPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: envPortCapEntry.setStatus('current')
envPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapRowStatus.setStatus('current')
envPortCapTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 2), FspR7TelemetryOutputCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapTelemetry.setStatus('current')
envPortCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapFacilityType.setStatus('current')
envPortCapTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapTifAlarmType.setStatus('current')
envPortCapTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapTifAlarmMessage.setStatus('current')
envPortCapInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 6), FspR7InvertTelemetryInputLogicCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapInvertTifInputLogic.setStatus('current')
endOfEnvPortCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvPortCapTable.setStatus('current')
endOfEnvMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvMgmtCap.setStatus('current')
containerCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1), )
if mibBuilder.loadTexts: containerCapTable.setStatus('current')
containerCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: containerCapEntry.setStatus('current')
containerCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCapRowStatus.setStatus('current')
containerCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCapFacilityType.setStatus('current')
endOfContainerCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerCapTable.setStatus('current')
endOfContainerMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerMgmtCap.setStatus('current')
opticalLineCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1), )
if mibBuilder.loadTexts: opticalLineCapTable.setStatus('current')
opticalLineCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: opticalLineCapEntry.setStatus('current')
opticalLineCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapRowStatus.setStatus('current')
opticalLineCapTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapTxLineAttenuation.setStatus('current')
opticalLineCapRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapRxLineAttenuation.setStatus('current')
opticalLineCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapAlias.setStatus('current')
opticalLineCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapFarEndLocation.setStatus('current')
endOfOpticalLineCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineCapTable.setStatus('current')
endOfOpticalLineMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineMgmtCap.setStatus('current')
endOfManagementCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfManagementCap.setStatus('current')
optThresholdConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1), )
if mibBuilder.loadTexts: optThresholdConfigCapTable.setStatus('current')
optThresholdConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: optThresholdConfigCapEntry.setStatus('current')
optThresholdConfigCapLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigCapLowConfig.setStatus('current')
optThresholdConfigCapHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigCapHighConfig.setStatus('current')
oprThresholdConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2), )
if mibBuilder.loadTexts: oprThresholdConfigCapTable.setStatus('current')
oprThresholdConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oprThresholdConfigCapEntry.setStatus('current')
oprThresholdConfigCapLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigCapLowConfig.setStatus('current')
oprThresholdConfigCapHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigCapHighConfig.setStatus('current')
endOfOprThresholdConfigCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOprThresholdConfigCapTable.setStatus('current')
endOfPerformanceFacilityThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformanceFacilityThresholdCap.setStatus('current')
endOfPerformanceFacilityCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformanceFacilityCap.setStatus('current')
dcnPhysThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1), )
if mibBuilder.loadTexts: dcnPhysThresholdCapTable.setStatus('current')
dcnPhysThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: dcnPhysThresholdCapEntry.setStatus('current')
dcnPhysThresholdCapOprLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapOprLow.setStatus('current')
dcnPhysThresholdCapOprHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapOprHigh.setStatus('current')
dcnPhysThresholdCapAttRcvLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapAttRcvLow.setStatus('current')
dcnPhysThresholdCapAttRcvHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapAttRcvHigh.setStatus('current')
endOfDcnPhysThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnPhysThresholdCapTable.setStatus('current')
endOfPmDcnPhysThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmDcnPhysThresholdCap.setStatus('current')
endOfPmDcnPhysicalCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmDcnPhysicalCap.setStatus('current')
endOfPmDcnCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmDcnCap.setStatus('current')
oduFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1), )
if mibBuilder.loadTexts: oduFacilityDataThresholdCapTable.setStatus('current')
oduFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oduFacilityDataThresholdCapEntry.setStatus('current')
oduFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapESHighThres15min.setStatus('current')
oduFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapESHighThres1day.setStatus('current')
oduFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapSESHighThres15min.setStatus('current')
oduFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapSESHighThres1day.setStatus('current')
oduFacilityDataThresholdCapBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapBbeHighThres15min.setStatus('current')
oduFacilityDataThresholdCapBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapBbeHighThres1day.setStatus('current')
oduFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapUASHighThres15min.setStatus('current')
oduFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapUASHighThres1day.setStatus('current')
endOfOduFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOduFacilityDataThresholdCapTable.setStatus('current')
tcmAFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3), )
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapTable.setStatus('current')
tcmAFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapEntry.setStatus('current')
tcmAFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapESHighThres15min.setStatus('current')
tcmAFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapESHighThres1day.setStatus('current')
tcmAFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapSESHighThres15min.setStatus('current')
tcmAFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapSESHighThres1day.setStatus('current')
tcmAFacilityDataThresholdCapBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapBbeHighThres15min.setStatus('current')
tcmAFacilityDataThresholdCapBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapBbeHighThres1day.setStatus('current')
tcmAFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapUASHighThres15min.setStatus('current')
tcmAFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapUASHighThres1day.setStatus('current')
endOfTcmAFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTcmAFacilityDataThresholdCapTable.setStatus('current')
tcmBFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5), )
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapTable.setStatus('current')
tcmBFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapEntry.setStatus('current')
tcmBFacilityDataThresholdCapBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapBESHighThres15min.setStatus('current')
tcmBFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapESHighThres1day.setStatus('current')
tcmBFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapSESHighThres15min.setStatus('current')
tcmBFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapSESHighThres1day.setStatus('current')
tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min.setStatus('current')
tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day.setStatus('current')
tcmBFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapUASHighThres15min.setStatus('current')
tcmBFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapUASHighThres1day.setStatus('current')
endOfTcmBFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTcmBFacilityDataThresholdCapTable.setStatus('current')
tcmCFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7), )
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapTable.setStatus('current')
tcmCFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapEntry.setStatus('current')
tcmCFacilityDataThresholdCapBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapBESHighThres15min.setStatus('current')
tcmCFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapESHighThres1day.setStatus('current')
tcmCFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapSESHighThres15min.setStatus('current')
tcmCFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapSESHighThres1day.setStatus('current')
tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min.setStatus('current')
tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day.setStatus('current')
tcmCFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapUASHighThres15min.setStatus('current')
tcmCFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapUASHighThres1day.setStatus('current')
endOfTcmCFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTcmCFacilityDataThresholdCapTable.setStatus('current')
otuFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9), )
if mibBuilder.loadTexts: otuFacilityDataThresholdCapTable.setStatus('current')
otuFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: otuFacilityDataThresholdCapEntry.setStatus('current')
otuFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapESHighThres15min.setStatus('current')
otuFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapESHighThres1day.setStatus('current')
otuFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapSESHighThres15min.setStatus('current')
otuFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapSESHighThres1day.setStatus('current')
otuFacilityDataThresholdCapBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapBbeHighThres15min.setStatus('current')
otuFacilityDataThresholdCapBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapBbeHighThres1day.setStatus('current')
otuFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapUASHighThres15min.setStatus('current')
otuFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapUASHighThres1day.setStatus('current')
endOfOtuFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOtuFacilityDataThresholdCapTable.setStatus('current')
otuFecFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11), )
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapTable.setStatus('current')
otuFecFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapEntry.setStatus('current')
otuFecFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapESHighThres15min.setStatus('current')
otuFecFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapESHighThres1day.setStatus('current')
otuFecFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapSESHighThres15min.setStatus('current')
otuFecFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapSESHighThres1day.setStatus('current')
otuFecFacilityDataThresholdCapUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapUBEHighThres15min.setStatus('current')
otuFecFacilityDataThresholdCapUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapUBEHighThres1day.setStatus('current')
otuFecFacilityDataThresholdCapCErrHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 7), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapCErrHighThres15min.setStatus('current')
otuFecFacilityDataThresholdCapCErrHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 8), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapCErrHighThres1day.setStatus('current')
otuFecFacilityDataThresholdCapBERCErrHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 9), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapBERCErrHighThres15min.setStatus('current')
otuFecFacilityDataThresholdCapBERCErrHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 10), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapBERCErrHighThres1day.setStatus('current')
endOfOtuFecFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOtuFecFacilityDataThresholdCapTable.setStatus('current')
fecFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13), )
if mibBuilder.loadTexts: fecFacilityDataThresholdCapTable.setStatus('current')
fecFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: fecFacilityDataThresholdCapEntry.setStatus('current')
fecFacilityDataThresholdCapCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 1), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapCEHighThres15min.setStatus('current')
fecFacilityDataThresholdCapCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 2), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapCEHighThres1day.setStatus('current')
fecFacilityDataThresholdCapUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 3), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapUBEHighThres15min.setStatus('current')
fecFacilityDataThresholdCapUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 4), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapUBEHighThres1day.setStatus('current')
endOfFecFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFecFacilityDataThresholdCapTable.setStatus('current')
pcs2FacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15), )
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapTable.setStatus('current')
pcs2FacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapEntry.setStatus('current')
pcs2FacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapESHighThres15min.setStatus('current')
pcs2FacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapESHighThres1day.setStatus('current')
pcs2FacilityDataThresholdCapDEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapDEHighThres15min.setStatus('current')
pcs2FacilityDataThresholdCapDEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapDEHighThres1day.setStatus('current')
pcs2FacilityDataThresholdCapCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapCVHighThres15min.setStatus('current')
pcs2FacilityDataThresholdCapCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapCVHighThres1day.setStatus('current')
endOfPcs2FacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPcs2FacilityDataThresholdCapTable.setStatus('current')
lFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17), )
if mibBuilder.loadTexts: lFacilityDataThresholdCapTable.setStatus('current')
lFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lFacilityDataThresholdCapEntry.setStatus('current')
lFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapESHighThres15min.setStatus('current')
lFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapESHighThres1day.setStatus('current')
lFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapSESHighThres15min.setStatus('current')
lFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapSESHighThres1day.setStatus('current')
lFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 5), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapUASHighThres15min.setStatus('current')
lFacilityDataThresholdCapUASSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapUASSHighThres1day.setStatus('current')
lFacilityDataThresholdCapCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 7), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapCVHighThres15min.setStatus('current')
lFacilityDataThresholdCapCVSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 8), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapCVSHighThres1day.setStatus('current')
endOfLFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLFacilityDataThresholdCapTable.setStatus('current')
sFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19), )
if mibBuilder.loadTexts: sFacilityDataThresholdCapTable.setStatus('current')
sFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: sFacilityDataThresholdCapEntry.setStatus('current')
sFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapESHighThres15min.setStatus('current')
sFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapESHighThres1day.setStatus('current')
sFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSESHighThres15min.setStatus('current')
sFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSESHighThres1day.setStatus('current')
sFacilityDataThresholdCapSEFSHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 5), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSEFSHighThres15min.setStatus('current')
sFacilityDataThresholdCapSEFSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSEFSHighThres1day.setStatus('current')
sFacilityDataThresholdCapCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 7), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapCVHighThres15min.setStatus('current')
sFacilityDataThresholdCapCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 8), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapCVHighThres1day.setStatus('current')
endOfSFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSFacilityDataThresholdCapTable.setStatus('current')
endOfPmFacilityDataThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityDataThresholdCap.setStatus('current')
endOfPmFacilityDataCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityDataCap.setStatus('current')
facilityPhysThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1), )
if mibBuilder.loadTexts: facilityPhysThresholdCapTable.setStatus('current')
facilityPhysThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: facilityPhysThresholdCapEntry.setStatus('current')
facilityPhysThresholdCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapOpticalInputPwrLow.setStatus('current')
facilityPhysThresholdCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapOpticalInputPwrHigh.setStatus('current')
facilityPhysThresholdCapConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapConfigurableOpticalOutputPwrLow.setStatus('current')
facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh.setStatus('current')
facilityPhysThresholdCapRoundTripDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 5), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapRoundTripDelayLowThres.setStatus('current')
facilityPhysThresholdCapRoundTripDelayHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 6), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapRoundTripDelayHighThres.setStatus('current')
facilityPhysThresholdCapLatencyLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 7), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapLatencyLowThres.setStatus('current')
facilityPhysThresholdCapLatencyHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 8), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapLatencyHighThres.setStatus('current')
facilityPhysThresholdCapChromaticDispersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 9), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapChromaticDispersionHigh.setStatus('current')
facilityPhysThresholdCapChromaticDispersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 10), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapChromaticDispersionLow.setStatus('current')
facilityPhysThresholdCapCarrierFreqOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 11), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapCarrierFreqOffsetLow.setStatus('current')
facilityPhysThresholdCapCarrierFreqOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 12), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapCarrierFreqOffsetHigh.setStatus('current')
facilityPhysThresholdCapLogicalLanesSkewHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 13), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapLogicalLanesSkewHigh.setStatus('current')
facilityPhysThresholdCapDispersionCompensationLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 14), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapDispersionCompensationLowThres.setStatus('current')
facilityPhysThresholdCapDispersionCompensationHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 15), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapDispersionCompensationHighThres.setStatus('current')
facilityPhysThresholdCapSignalToNoiseRatioLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapSignalToNoiseRatioLow.setStatus('current')
facilityPhysThresholdCapDifferentialGroupDelayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 17), FspR7Integer32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapDifferentialGroupDelayHigh.setStatus('current')
endOfFacilityPhysThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityPhysThresholdCapTable.setStatus('current')
endOfPmFacilityPhysThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityPhysThresholdCap.setStatus('current')
endOfPmFacilityPhysicalCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityPhysicalCap.setStatus('current')
endOfPmFacilityCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityCap.setStatus('current')
optMuxPhysThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2), )
if mibBuilder.loadTexts: optMuxPhysThresholdCapTable.setStatus('current')
optMuxPhysThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: optMuxPhysThresholdCapEntry.setStatus('current')
optMuxPhysThresholdCapBrtxHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapBrtxHighConfig.setStatus('current')
optMuxPhysThresholdCapBrPwrReceivedHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapBrPwrReceivedHighThres.setStatus('current')
optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh.setStatus('current')
optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow.setStatus('current')
optMuxPhysThresholdCapOscPwrRcvHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 5), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOscPwrRcvHighThres.setStatus('current')
optMuxPhysThresholdCapOscPwrRcvLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 6), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOscPwrRcvLowThres.setStatus('current')
optMuxPhysThresholdCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 7), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOpticalInputPwrHigh.setStatus('current')
optMuxPhysThresholdCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 8), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOpticalInputPwrLow.setStatus('current')
optMuxPhysThresholdCapAttRxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 9), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttRxHigh.setStatus('current')
optMuxPhysThresholdCapAttRxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 10), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttRxLow.setStatus('current')
optMuxPhysThresholdCapAttTxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttTxHigh.setStatus('current')
optMuxPhysThresholdCapAttTxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 12), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttTxLow.setStatus('current')
endOfOptMuxPhysThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOptMuxPhysThresholdCapTable.setStatus('current')
endOfPmOptMuxPhysThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmOptMuxPhysThresholdCap.setStatus('current')
terminationPointCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1), )
if mibBuilder.loadTexts: terminationPointCapTable.setStatus('current')
terminationPointCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: terminationPointCapEntry.setStatus('current')
terminationPointCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapRowStatus.setStatus('current')
terminationPointCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 2), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapAdmin.setStatus('current')
terminationPointCapFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 3), FspR7FiberDetectCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapFiberDetect.setStatus('current')
terminationPointCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapAlias.setStatus('current')
connectionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2), )
if mibBuilder.loadTexts: connectionCapTable.setStatus('current')
connectionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: connectionCapEntry.setStatus('current')
connectionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionCapRowStatus.setStatus('current')
connectionCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2, 1, 2), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionCapType.setStatus('current')
endOfConnectionCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfConnectionCapTable.setStatus('current')
endOfFiberMapCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFiberMapCap.setStatus('current')
externalPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1), )
if mibBuilder.loadTexts: externalPortCapTable.setStatus('current')
externalPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortCapEntry.setStatus('current')
externalPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapRowStatus.setStatus('current')
externalPortCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapType.setStatus('current')
externalPortCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 3), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapTransmitChannel.setStatus('current')
externalPortCapChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 4), FspR7ChannelBandwidthCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapChannelBandwith.setStatus('current')
externalPortCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapAlias.setStatus('current')
externalPortCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapFarEndLocation.setStatus('current')
externalPortCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 7), FspR7Unsigned32Caps()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapBitrate.setStatus('current')
externalPortCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 8), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapFecType.setStatus('current')
externalPortCapLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 9), FspR7LineCodingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapLineCoding.setStatus('current')
externalPortCapFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 10), FspR7FrameFormatCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapFrameFormat.setStatus('current')
externalPortCapOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapOpticalPowerTx.setStatus('current')
externalPortCapOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 12), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapOsnrTransmit.setStatus('current')
externalPortCapPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 13), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapPmdTransmit.setStatus('current')
externalPortCapChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 14), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapChromDisperTx.setStatus('current')
externalPortCapMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 15), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMinOsnrRcv.setStatus('current')
externalPortCapMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMinOptPowerRcv.setStatus('current')
externalPortCapMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 17), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxOptPowerRcv.setStatus('current')
externalPortCapMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 18), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxPmdRcv.setStatus('current')
externalPortCapMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 19), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMinChromDisperRcv.setStatus('current')
externalPortCapMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 20), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxChromDisperRcv.setStatus('current')
externalPortCapMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 21), FspR7MaxBitErrorRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxBitErrorRate.setStatus('current')
externalPortCapSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapSourceProfile.setStatus('current')
endOfExternalPortCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfExternalPortCapTable.setStatus('current')
endOfEciCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEciCap.setStatus('current')
changePhysicalPortServiceCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1), )
if mibBuilder.loadTexts: changePhysicalPortServiceCapTable.setStatus('current')
changePhysicalPortServiceCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: changePhysicalPortServiceCapEntry.setStatus('current')
changePhysicalPortServiceCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapRowStatus.setStatus('current')
changePhysicalPortServiceCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapType.setStatus('current')
changePhysicalPortServiceCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAdmin.setStatus('current')
changePhysicalPortServiceCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAlias.setStatus('current')
changePhysicalPortServiceCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 5), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAlsMode.setStatus('current')
changePhysicalPortServiceCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 6), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapBehaviour.setStatus('current')
changePhysicalPortServiceCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 7), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapDispersionSetting.setStatus('current')
changePhysicalPortServiceCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 8), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapDispersionMode.setStatus('current')
changePhysicalPortServiceCapChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 9), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapChannelProv.setStatus('current')
changePhysicalPortServiceCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 10), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapWdmRxChannel.setStatus('current')
changePhysicalPortServiceCapCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 11), FspR7CodeGainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapCodeGain.setStatus('current')
changePhysicalPortServiceCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 12), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapXfpDecisionThres.setStatus('current')
changePhysicalPortServiceCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 13), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapDisparityCorrection.setStatus('current')
changePhysicalPortServiceCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 14), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapEqlzAdmin.setStatus('current')
changePhysicalPortServiceCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 15), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapErrorForwarding.setStatus('current')
changePhysicalPortServiceCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 16), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapFecType.setStatus('current')
changePhysicalPortServiceCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 17), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapFarEndCommunication.setStatus('current')
changePhysicalPortServiceCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 18), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapFlowControl.setStatus('current')
changePhysicalPortServiceCapLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 19), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaneChannelSetting.setStatus('current')
changePhysicalPortServiceCapLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 20), FspR7LaserDelayTimerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserDelayTimer.setStatus('current')
changePhysicalPortServiceCapLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 21), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOffTimer.setStatus('current')
changePhysicalPortServiceCapLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOnTimer.setStatus('current')
changePhysicalPortServiceCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 23), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOffDelayFunction.setStatus('current')
changePhysicalPortServiceCapAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 24), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAutoPTassignment.setStatus('current')
changePhysicalPortServiceCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 25), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTributarySlotMethod.setStatus('current')
changePhysicalPortServiceCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 26), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapOpticalSetPoint.setStatus('current')
changePhysicalPortServiceCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 27), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapOpuPayloadType.setStatus('current')
changePhysicalPortServiceCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 28), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSonetLine.setStatus('current')
changePhysicalPortServiceCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 29), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSdhMs.setStatus('current')
changePhysicalPortServiceCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 30), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOtu.setStatus('current')
changePhysicalPortServiceCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 31), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOdu.setStatus('current')
changePhysicalPortServiceCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 32), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThreshold.setStatus('current')
changePhysicalPortServiceCapSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 33), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPcslThreshold.setStatus('current')
changePhysicalPortServiceCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 34), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSonetSection.setStatus('current')
changePhysicalPortServiceCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 35), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSdhSection.setStatus('current')
changePhysicalPortServiceCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmA.setStatus('current')
changePhysicalPortServiceCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 37), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmB.setStatus('current')
changePhysicalPortServiceCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 38), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmC.setStatus('current')
changePhysicalPortServiceCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 39), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSignalDegradePeriod.setStatus('current')
changePhysicalPortServiceCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 40), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOdu.setStatus('current')
changePhysicalPortServiceCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 41), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOtu.setStatus('current')
changePhysicalPortServiceCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 42), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodIntegration.setStatus('current')
changePhysicalPortServiceCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 43), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodSdhSection.setStatus('current')
changePhysicalPortServiceCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 44), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmA.setStatus('current')
changePhysicalPortServiceCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 45), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmB.setStatus('current')
changePhysicalPortServiceCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 46), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmC.setStatus('current')
changePhysicalPortServiceCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 47), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapOtnStuffing.setStatus('current')
changePhysicalPortServiceCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 48), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmALevel.setStatus('current')
changePhysicalPortServiceCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 49), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmBLevel.setStatus('current')
changePhysicalPortServiceCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 50), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmCLevel.setStatus('current')
changePhysicalPortServiceCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 51), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTerminationLevel.setStatus('current')
changePhysicalPortServiceCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 52), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimingSource.setStatus('current')
changePhysicalPortServiceCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 53), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOdu.setStatus('current')
changePhysicalPortServiceCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 54), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOtu.setStatus('current')
changePhysicalPortServiceCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 55), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeSonetSection.setStatus('current')
changePhysicalPortServiceCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 56), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmA.setStatus('current')
changePhysicalPortServiceCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmB.setStatus('current')
changePhysicalPortServiceCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 58), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmC.setStatus('current')
changePhysicalPortServiceCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 59), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceFormSonetSection.setStatus('current')
changePhysicalPortServiceCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedSonetSection.setStatus('current')
changePhysicalPortServiceCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSonetSection.setStatus('current')
changePhysicalPortServiceCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOtu.setStatus('current')
changePhysicalPortServiceCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOtu.setStatus('current')
changePhysicalPortServiceCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOtu.setStatus('current')
changePhysicalPortServiceCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOtu.setStatus('current')
changePhysicalPortServiceCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOdu.setStatus('current')
changePhysicalPortServiceCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOdu.setStatus('current')
changePhysicalPortServiceCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOdu.setStatus('current')
changePhysicalPortServiceCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOdu.setStatus('current')
changePhysicalPortServiceCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmA.setStatus('current')
changePhysicalPortServiceCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmA.setStatus('current')
changePhysicalPortServiceCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmA.setStatus('current')
changePhysicalPortServiceCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmA.setStatus('current')
changePhysicalPortServiceCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmB.setStatus('current')
changePhysicalPortServiceCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmB.setStatus('current')
changePhysicalPortServiceCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmB.setStatus('current')
changePhysicalPortServiceCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmB.setStatus('current')
changePhysicalPortServiceCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmC.setStatus('current')
changePhysicalPortServiceCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmC.setStatus('current')
changePhysicalPortServiceCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmC.setStatus('current')
changePhysicalPortServiceCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmC.setStatus('current')
changePhysicalPortServiceCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 82), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffDelay.setStatus('current')
changePhysicalPortServiceCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 83), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapVoaMode.setStatus('current')
changePhysicalPortServiceCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 84), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapVoaSetpoint.setStatus('current')
changePhysicalPortServiceCapTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 85), FspR7TxOffOnTmCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffOnTm.setStatus('current')
changePhysicalPortServiceCapTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 86), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffTimer.setStatus('current')
changePhysicalPortServiceCapTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 87), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOnTimer.setStatus('current')
endOfChangePhysicalPortServiceCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangePhysicalPortServiceCapTable.setStatus('current')
endOfChangeServiceCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangeServiceCap.setStatus('current')
ffpCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2), )
if mibBuilder.loadTexts: ffpCapTable.setStatus('current')
ffpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: ffpCapEntry.setStatus('current')
ffpCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapRowStatus.setStatus('current')
ffpCapCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 2), FfpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapCreationMethod.setStatus('current')
ffpCapSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 3), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapSDswitching.setStatus('current')
ffpCapHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 4), ApsHoldoffTimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapHoldOffTime.setStatus('current')
ffpCapProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 5), ProtectionMechCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapProtectionMech.setStatus('current')
ffpCapWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapWorkingAid.setStatus('current')
ffpCapProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapProtectionAid.setStatus('current')
ffpCapSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 8), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapSignalDegradeSwitching.setStatus('current')
ffpCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapFarEndIp.setStatus('current')
ffpCapPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapPeerAid.setStatus('current')
ffpCapApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 11), ApsTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapApsType.setStatus('current')
ffpCapRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 12), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapRevertMode.setStatus('current')
ffpCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 13), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapWaitToRestore.setStatus('current')
ffpCapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 14), ApsDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapDirection.setStatus('current')
endOfFfpCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFfpCapTable.setStatus('current')
endOfProtectionCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionCap.setStatus('current')
conformanceCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10))
compliancesCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 1))
groupsCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 2))
complianceCap = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 1, 1)).setObjects(("ADVA-FSPR7-CAP-MIB", "objectGroupCap"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceCap = complianceCap.setStatus('current')
objectGroupCap = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 2, 1)).setObjects(("ADVA-FSPR7-CAP-MIB", "crossConnectionCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapRedLineState"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapConn"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapAlias"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapPathNode"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapTunnelAid"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapRedLineState"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapConn"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapCrsType"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapAlias"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapTunnelAid"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapType"), ("ADVA-FSPR7-CAP-MIB", "physicalPortCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "physicalPortCapType"), ("ADVA-FSPR7-CAP-MIB", "physicalPortCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapChannelBand"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapType"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapAlias"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapEqlzAdmin"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapInitEqlz"), ("ADVA-FSPR7-CAP-MIB", "optThresholdConfigCapLowConfig"), ("ADVA-FSPR7-CAP-MIB", "optThresholdConfigCapHighConfig"), ("ADVA-FSPR7-CAP-MIB", "oprThresholdConfigCapLowConfig"), ("ADVA-FSPR7-CAP-MIB", "oprThresholdConfigCapHighConfig"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapFiberDetect"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapAlias"), ("ADVA-FSPR7-CAP-MIB", "connectionCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "connectionCapType"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapType"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapTransmitChannel"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapChannelBandwith"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapAlias"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapFarEndLocation"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapBitrate"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxChromDisperRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxBitErrorRate"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapSourceProfile"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapFecType"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapLineCoding"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapFrameFormat"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapOpticalPowerTx"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapOsnrTransmit"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapPmdTransmit"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapChromDisperTx"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMinOsnrRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMinOptPowerRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxOptPowerRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxPmdRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMinChromDisperRcv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupCap = objectGroupCap.setStatus('current')
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", opticalMuxCapTiltSet=opticalMuxCapTiltSet, terminationPointCapAlias=terminationPointCapAlias, changePhysicalPortServiceCapEqlzAdmin=changePhysicalPortServiceCapEqlzAdmin, optMuxPhysThresholdCapOscPwrRcvHighThres=optMuxPhysThresholdCapOscPwrRcvHighThres, crossOpticalLineCapTunnelAid=crossOpticalLineCapTunnelAid, plugCapAdmin=plugCapAdmin, facilityPhysThresholdCapConfigurableOpticalOutputPwrLow=facilityPhysThresholdCapConfigurableOpticalOutputPwrLow, moduleCapActivateDetect=moduleCapActivateDetect, changePhysicalPortServiceCapTraceTransmitDapiOtu=changePhysicalPortServiceCapTraceTransmitDapiOtu, crossConnectionCapCrsToAidTwo=crossConnectionCapCrsToAidTwo, virtualPortCapChannelBand=virtualPortCapChannelBand, endOfOduFacilityDataThresholdCapTable=endOfOduFacilityDataThresholdCapTable, facilityPhysThresholdCapOpticalInputPwrLow=facilityPhysThresholdCapOpticalInputPwrLow, endOfOptMuxPhysThresholdCapTable=endOfOptMuxPhysThresholdCapTable, virtualPortCapOduTribTimeSlottNo=virtualPortCapOduTribTimeSlottNo, optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh=optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh, virtualPortCapTimModeOduTcmB=virtualPortCapTimModeOduTcmB, physicalPortCapVethAid=physicalPortCapVethAid, fanCapEntry=fanCapEntry, physicalPortCapAutonegotiation=physicalPortCapAutonegotiation, physicalPortCapSwitchCommand=physicalPortCapSwitchCommand, eciCap=eciCap, scCapSigDegThresReceiver=scCapSigDegThresReceiver, crossConnectionCapEntry=crossConnectionCapEntry, eccCapExternalVid=eccCapExternalVid, physicalPortCapFecType=physicalPortCapFecType, optThresholdConfigCapTable=optThresholdConfigCapTable, tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min=tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min, plugCapChannelSpacingProvision=plugCapChannelSpacingProvision, facilityPhysThresholdCapDifferentialGroupDelayHigh=facilityPhysThresholdCapDifferentialGroupDelayHigh, externalPortCapTransmitChannel=externalPortCapTransmitChannel, virtualPortCapChannelId=virtualPortCapChannelId, physicalPortCapRowStatus=physicalPortCapRowStatus, externalPortCapLineCoding=externalPortCapLineCoding, endOfPerformanceFacilityThresholdCap=endOfPerformanceFacilityThresholdCap, optMuxPhysThresholdCapAttRxHigh=optMuxPhysThresholdCapAttRxHigh, crossOpticalLineCapAlias=crossOpticalLineCapAlias, lanCapAreaAid=lanCapAreaAid, physicalPortCapMaxFrameSize=physicalPortCapMaxFrameSize, crossConnectionCapAlias=crossConnectionCapAlias, changePhysicalPortServiceCapSigDegThresOduTcmB=changePhysicalPortServiceCapSigDegThresOduTcmB, changePhysicalPortServiceCapAlias=changePhysicalPortServiceCapAlias, lanCapOspf=lanCapOspf, moduleCapBand=moduleCapBand, physicalPortCapTcmALevel=physicalPortCapTcmALevel, endOfOtuFecFacilityDataThresholdCapTable=endOfOtuFecFacilityDataThresholdCapTable, physicalPortCapTimingSource=physicalPortCapTimingSource, physicalPortCapTcmBLevel=physicalPortCapTcmBLevel, virtualPortCapPortRole=virtualPortCapPortRole, moduleCapLanAid=moduleCapLanAid, scCapIPv6PrefixLen=scCapIPv6PrefixLen, plugCapBidirectionalChannel=plugCapBidirectionalChannel, virtualPortCapEqlzAdmin=virtualPortCapEqlzAdmin, moduleCapAlias=moduleCapAlias, virtualPortCapOtnStuffing=virtualPortCapOtnStuffing, fanCapRowStatus=fanCapRowStatus, containerCapTable=containerCapTable, linkCapIpType=linkCapIpType, opticalMuxCapSigDegThresReceiver=opticalMuxCapSigDegThresReceiver, physicalPortCapSigDegThresOtu=physicalPortCapSigDegThresOtu, shelfConnCapEntry=shelfConnCapEntry, groupsCap=groupsCap, opticalMuxCapVoaSetpoint=opticalMuxCapVoaSetpoint, crossConnectionCapPathNode=crossConnectionCapPathNode, scCapAreaAid=scCapAreaAid, crossConnectionCapCrsMcAidList=crossConnectionCapCrsMcAidList, physicalPortCapRateLimit=physicalPortCapRateLimit, oprThresholdConfigCapLowConfig=oprThresholdConfigCapLowConfig, virtualPortCapTraceTransmitSapiOduTcmC=virtualPortCapTraceTransmitSapiOduTcmC, endOfFecFacilityDataThresholdCapTable=endOfFecFacilityDataThresholdCapTable, changePhysicalPortServiceCapTimModeOtu=changePhysicalPortServiceCapTimModeOtu, ffpCapEntry=ffpCapEntry, crossOpticalLineCapConn=crossOpticalLineCapConn, physicalPortCapTraceTransmitOpspOduTcmC=physicalPortCapTraceTransmitOpspOduTcmC, physicalPortCapLoopConfig=physicalPortCapLoopConfig, changePhysicalPortServiceCapErrorForwarding=changePhysicalPortServiceCapErrorForwarding, optThresholdConfigCapHighConfig=optThresholdConfigCapHighConfig, virtualPortCapPortMode=virtualPortCapPortMode, linkCapBaud=linkCapBaud, physicalPortCapAlsMode=physicalPortCapAlsMode, dcnPhysThresholdCapOprLow=dcnPhysThresholdCapOprLow, oduFacilityDataThresholdCapSESHighThres15min=oduFacilityDataThresholdCapSESHighThres15min, opticalMuxCapPumpPower=opticalMuxCapPumpPower, pmOptMuxPhysThresholdCap=pmOptMuxPhysThresholdCap, virtualPortCapSigDegThresOduTcmC=virtualPortCapSigDegThresOduTcmC, changePhysicalPortServiceCapTraceTransmitOpspOduTcmB=changePhysicalPortServiceCapTraceTransmitOpspOduTcmB, physicalPortCapDispersionMode=physicalPortCapDispersionMode, crossDcnCapType=crossDcnCapType, optMuxPhysThresholdCapEntry=optMuxPhysThresholdCapEntry, performanceCap=performanceCap, tcmBFacilityDataThresholdCapUASHighThres1day=tcmBFacilityDataThresholdCapUASHighThres1day, shelfCapTable=shelfCapTable, opticalMuxCapSwitchCommand=opticalMuxCapSwitchCommand, advaFspR7Cap=advaFspR7Cap, endOfPerformanceFacilityCap=endOfPerformanceFacilityCap, linkCapAdmin=linkCapAdmin, sFacilityDataThresholdCapTable=sFacilityDataThresholdCapTable, pcs2FacilityDataThresholdCapDEHighThres15min=pcs2FacilityDataThresholdCapDEHighThres15min, oprThresholdConfigCapHighConfig=oprThresholdConfigCapHighConfig, endOfModuleCap=endOfModuleCap, moduleCapForceDestroy=moduleCapForceDestroy, changePhysicalPortServiceCapTable=changePhysicalPortServiceCapTable, optMuxPhysThresholdCapOpticalInputPwrHigh=optMuxPhysThresholdCapOpticalInputPwrHigh, physicalPortCapTxOffDelay=physicalPortCapTxOffDelay, facilityPhysThresholdCapDispersionCompensationHighThres=facilityPhysThresholdCapDispersionCompensationHighThres, physicalPortCapFlowControl=physicalPortCapFlowControl, otuFecFacilityDataThresholdCapUBEHighThres15min=otuFecFacilityDataThresholdCapUBEHighThres15min, virtualPortCapLoopConfig=virtualPortCapLoopConfig, changePhysicalPortServiceCapSigDegThreshold=changePhysicalPortServiceCapSigDegThreshold, changePhysicalPortServiceCapSigDegThresOdu=changePhysicalPortServiceCapSigDegThresOdu, otuFecFacilityDataThresholdCapSESHighThres15min=otuFecFacilityDataThresholdCapSESHighThres15min, physicalPortCapStagType=physicalPortCapStagType, lFacilityDataThresholdCapSESHighThres15min=lFacilityDataThresholdCapSESHighThres15min, scCapEntry=scCapEntry, pcs2FacilityDataThresholdCapCVHighThres1day=pcs2FacilityDataThresholdCapCVHighThres1day, endOfOpticalLineMgmtCap=endOfOpticalLineMgmtCap, physicalPortCapTraceTransmitSapiOduTcmC=physicalPortCapTraceTransmitSapiOduTcmC, endOfPmOptMuxPhysThresholdCap=endOfPmOptMuxPhysThresholdCap, crossOpticalLineCapEntry=crossOpticalLineCapEntry, scCapPriority=scCapPriority, endOfPmDcnPhysicalCap=endOfPmDcnPhysicalCap, changePhysicalPortServiceCapTraceTransmitDapiOduTcmB=changePhysicalPortServiceCapTraceTransmitDapiOduTcmB, lanCapIpType=lanCapIpType, physicalPortCapSigDegPcslThreshold=physicalPortCapSigDegPcslThreshold, tcmCFacilityDataThresholdCapUASHighThres1day=tcmCFacilityDataThresholdCapUASHighThres1day, ffpCapFarEndIp=ffpCapFarEndIp, virtualPortCapTraceTransmitOpspOdu=virtualPortCapTraceTransmitOpspOdu, physicalPortCapFarEndCommunication=physicalPortCapFarEndCommunication, physicalPortCapDisparityCorrection=physicalPortCapDisparityCorrection, opticalLineCapFarEndLocation=opticalLineCapFarEndLocation, moduleCapPower=moduleCapPower, physicalPortCapLaneChannelSetting=physicalPortCapLaneChannelSetting, physicalPortCapTraceExpectedOduTcmB=physicalPortCapTraceExpectedOduTcmB, scCapType=scCapType, crossConnectionCapAdmin=crossConnectionCapAdmin, eccCapAlias=eccCapAlias, virtualPortCapTcmCLevel=virtualPortCapTcmCLevel, scCapIpType=scCapIpType, endOfSFacilityDataThresholdCapTable=endOfSFacilityDataThresholdCapTable, pmOptMuxCap=pmOptMuxCap, changePhysicalPortServiceCapTraceTransmitSapiOduTcmA=changePhysicalPortServiceCapTraceTransmitSapiOduTcmA, changePhysicalPortServiceCapTraceExpectedOdu=changePhysicalPortServiceCapTraceExpectedOdu, endOfEccCapTable=endOfEccCapTable, opticalMuxCapInhibitSwitchToProt=opticalMuxCapInhibitSwitchToProt, physicalPortCapTraceTransmitOpspOtu=physicalPortCapTraceTransmitOpspOtu, optThresholdConfigCapLowConfig=optThresholdConfigCapLowConfig, changePhysicalPortServiceCapAutoPTassignment=changePhysicalPortServiceCapAutoPTassignment, tcmBFacilityDataThresholdCapSESHighThres1day=tcmBFacilityDataThresholdCapSESHighThres1day, changePhysicalPortServiceCapTraceTransmitSapiOdu=changePhysicalPortServiceCapTraceTransmitSapiOdu, opticalMuxCapInitiateEqualization=opticalMuxCapInitiateEqualization, physicalPortCapTraceTransmitOpspOduTcmB=physicalPortCapTraceTransmitOpspOduTcmB, oduFacilityDataThresholdCapTable=oduFacilityDataThresholdCapTable, otuFecFacilityDataThresholdCapESHighThres15min=otuFecFacilityDataThresholdCapESHighThres15min, pcs2FacilityDataThresholdCapDEHighThres1day=pcs2FacilityDataThresholdCapDEHighThres1day, ffpCapCreationMethod=ffpCapCreationMethod, moduleCapSupply=moduleCapSupply, changePhysicalPortServiceCapDispersionMode=changePhysicalPortServiceCapDispersionMode, opticalMuxCapAlias=opticalMuxCapAlias, scCapIpMask=scCapIpMask, opticalMuxCapRowStatus=opticalMuxCapRowStatus, plugCapMaxDataRate=plugCapMaxDataRate, externalPortCapType=externalPortCapType, externalPortCapBitrate=externalPortCapBitrate, moduleCapGroup=moduleCapGroup, endOfFilterCableCap=endOfFilterCableCap, externalPortCapSourceProfile=externalPortCapSourceProfile, physicalPortCapTraceFormSonetSection=physicalPortCapTraceFormSonetSection, lFacilityDataThresholdCapESHighThres1day=lFacilityDataThresholdCapESHighThres1day, lFacilityDataThresholdCapTable=lFacilityDataThresholdCapTable, tcmAFacilityDataThresholdCapSESHighThres15min=tcmAFacilityDataThresholdCapSESHighThres15min, physicalPortCapSigDegThresOduTcmB=physicalPortCapSigDegThresOduTcmB, optMuxPhysThresholdCapAttTxHigh=optMuxPhysThresholdCapAttTxHigh, shelfCapRack=shelfCapRack, endOfOpticalMuxMgmtCap=endOfOpticalMuxMgmtCap, otuFacilityDataThresholdCapSESHighThres15min=otuFacilityDataThresholdCapSESHighThres15min, tcmCFacilityDataThresholdCapESHighThres1day=tcmCFacilityDataThresholdCapESHighThres1day, moduleCapSubBandProvision=moduleCapSubBandProvision, otuFecFacilityDataThresholdCapBERCErrHighThres15min=otuFecFacilityDataThresholdCapBERCErrHighThres15min, changePhysicalPortServiceCapTxOffOnTm=changePhysicalPortServiceCapTxOffOnTm, changePhysicalPortServiceCapTraceTransmitSonetSection=changePhysicalPortServiceCapTraceTransmitSonetSection, plugCapTable=plugCapTable, tcmAFacilityDataThresholdCapBbeHighThres1day=tcmAFacilityDataThresholdCapBbeHighThres1day, physicalPortCapOpuPayloadType=physicalPortCapOpuPayloadType, physicalPortCapInitiateEqualization=physicalPortCapInitiateEqualization, moduleCapInitEqlz=moduleCapInitEqlz, changePhysicalPortServiceCapTraceTransmitOpspOdu=changePhysicalPortServiceCapTraceTransmitOpspOdu, containerCapEntry=containerCapEntry, opticalMuxCapEntry=opticalMuxCapEntry, otuFecFacilityDataThresholdCapUBEHighThres1day=otuFecFacilityDataThresholdCapUBEHighThres1day, virtualPortCapTraceTransmitSapiOduTcmA=virtualPortCapTraceTransmitSapiOduTcmA, shelfCapSlot=shelfCapSlot, changePhysicalPortServiceCapTcmCLevel=changePhysicalPortServiceCapTcmCLevel, otuFecFacilityDataThresholdCapTable=otuFecFacilityDataThresholdCapTable, fanCapAdmin=fanCapAdmin, moduleCapIpAddr=moduleCapIpAddr, virtualPortCapTraceTransmitDapiOduTcmC=virtualPortCapTraceTransmitDapiOduTcmC, externalPortCapMinOptPowerRcv=externalPortCapMinOptPowerRcv, virtualPortCapBundle=virtualPortCapBundle, fecFacilityDataThresholdCapCEHighThres15min=fecFacilityDataThresholdCapCEHighThres15min, ffpCapPeerAid=ffpCapPeerAid, opticalMuxCapForceLaserOn=opticalMuxCapForceLaserOn, objectGroupCap=objectGroupCap, virtualPortCapInitEqlz=virtualPortCapInitEqlz, virtualPortCapTraceExpectedOdu=virtualPortCapTraceExpectedOdu, tcmBFacilityDataThresholdCapTable=tcmBFacilityDataThresholdCapTable, virtualPortCapInhibitSwitchToWork=virtualPortCapInhibitSwitchToWork, crossConnectionCapRedLineState=crossConnectionCapRedLineState, shelfCapAdmin=shelfCapAdmin, virtualPortCapTraceTransmitSapiOdu=virtualPortCapTraceTransmitSapiOdu, oduFacilityDataThresholdCapSESHighThres1day=oduFacilityDataThresholdCapSESHighThres1day, changePhysicalPortServiceCapTraceTransmitOpspOtu=changePhysicalPortServiceCapTraceTransmitOpspOtu, facilityPhysThresholdCapRoundTripDelayLowThres=facilityPhysThresholdCapRoundTripDelayLowThres, virtualPortCapTerminationLevel=virtualPortCapTerminationLevel, changePhysicalPortServiceCapEntry=changePhysicalPortServiceCapEntry, fanCapTable=fanCapTable, moduleCapOscUsage=moduleCapOscUsage, physicalPortCapTraceTransmitOpspOdu=physicalPortCapTraceTransmitOpspOdu, facilityPhysThresholdCapCarrierFreqOffsetHigh=facilityPhysThresholdCapCarrierFreqOffsetHigh, physicalPortCapLaserOffTimer=physicalPortCapLaserOffTimer, physicalPortCapSigDegThresOdu=physicalPortCapSigDegThresOdu, terminationPointCapTable=terminationPointCapTable, endOfVirtualPortCapTable=endOfVirtualPortCapTable, endOfOpticalMuxCapTable=endOfOpticalMuxCapTable, virtualPortCapPvid=virtualPortCapPvid, ffpCapWorkingAid=ffpCapWorkingAid, changePhysicalPortServiceCapSigDegPeriodOduTcmB=changePhysicalPortServiceCapSigDegPeriodOduTcmB, changePhysicalPortServiceCapTcmALevel=changePhysicalPortServiceCapTcmALevel, physicalPortCapTraceExpectedOtu=physicalPortCapTraceExpectedOtu, opticalMuxCapOffsetHigh=opticalMuxCapOffsetHigh, lFacilityDataThresholdCapEntry=lFacilityDataThresholdCapEntry, shelfCapPsuOutputPower=shelfCapPsuOutputPower, envPortCapTelemetry=envPortCapTelemetry, otuFecFacilityDataThresholdCapBERCErrHighThres1day=otuFecFacilityDataThresholdCapBERCErrHighThres1day, sFacilityDataThresholdCapSESHighThres1day=sFacilityDataThresholdCapSESHighThres1day, ffpCapRowStatus=ffpCapRowStatus, pcs2FacilityDataThresholdCapESHighThres1day=pcs2FacilityDataThresholdCapESHighThres1day, opticalMuxCapTable=opticalMuxCapTable, physicalPortCapTestPrbsRcvMode=physicalPortCapTestPrbsRcvMode, virtualPortCapSigDegThresOduTcmB=virtualPortCapSigDegThresOduTcmB, lanCapIpAddr=lanCapIpAddr, linkCapBitrate=linkCapBitrate, lanCapIpMode=lanCapIpMode, plugCapRowStatus=plugCapRowStatus, sFacilityDataThresholdCapSEFSHighThres15min=sFacilityDataThresholdCapSEFSHighThres15min, optMuxPhysThresholdCapAttTxLow=optMuxPhysThresholdCapAttTxLow, moduleCapChannelSpacing=moduleCapChannelSpacing, crossConnectionCapCrsContAidList=crossConnectionCapCrsContAidList, physicalPortCapTraceExpectedOdu=physicalPortCapTraceExpectedOdu, facilityPhysThresholdCapOpticalInputPwrHigh=facilityPhysThresholdCapOpticalInputPwrHigh, opticalLineCapTable=opticalLineCapTable, containerCapFacilityType=containerCapFacilityType, physicalPortCapTraceTransmitSapiOdu=physicalPortCapTraceTransmitSapiOdu, physicalPortCapVoaSetpoint=physicalPortCapVoaSetpoint, virtualPortCapEntry=virtualPortCapEntry)
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", moduleCapFiberDetect=moduleCapFiberDetect, physicalPortCapVoaMode=physicalPortCapVoaMode, endOfTcmAFacilityDataThresholdCapTable=endOfTcmAFacilityDataThresholdCapTable, changePhysicalPortServiceCapXfpDecisionThres=changePhysicalPortServiceCapXfpDecisionThres, virtualPortCapMaxFrameSize=virtualPortCapMaxFrameSize, physicalPortCapSigDegPeriodOduTcmB=physicalPortCapSigDegPeriodOduTcmB, virtualPortCapRedLineState=virtualPortCapRedLineState, endOfFfpCapTable=endOfFfpCapTable, endOfEqptMgmCap=endOfEqptMgmCap, physicalPortCapPortRole=physicalPortCapPortRole, performanceFacilityThresholdCap=performanceFacilityThresholdCap, changePhysicalPortServiceCapRowStatus=changePhysicalPortServiceCapRowStatus, physicalPortCapTraceTransmitSapiOduTcmA=physicalPortCapTraceTransmitSapiOduTcmA, optThresholdConfigCapEntry=optThresholdConfigCapEntry, changePhysicalPortServiceCapTxOnTimer=changePhysicalPortServiceCapTxOnTimer, virtualPortCapTraceExpectedOduTcmA=virtualPortCapTraceExpectedOduTcmA, changePhysicalPortServiceCapTimModeOduTcmA=changePhysicalPortServiceCapTimModeOduTcmA, tcmBFacilityDataThresholdCapUASHighThres15min=tcmBFacilityDataThresholdCapUASHighThres15min, terminationPointCapAdmin=terminationPointCapAdmin, changePhysicalPortServiceCapDisparityCorrection=changePhysicalPortServiceCapDisparityCorrection, shelfCapBandProvision=shelfCapBandProvision, sFacilityDataThresholdCapSESHighThres15min=sFacilityDataThresholdCapSESHighThres15min, endOfProtectionCap=endOfProtectionCap, physicalPortCapSigDegPeriodSdhSection=physicalPortCapSigDegPeriodSdhSection, virtualPortCapTraceTransmitDapiOduTcmA=virtualPortCapTraceTransmitDapiOduTcmA, endOfCrossOpticalLineCapTable=endOfCrossOpticalLineCapTable, opticalLineMgmtCap=opticalLineMgmtCap, fanCapType=fanCapType, physicalPortCapErrorForwarding=physicalPortCapErrorForwarding, opticalLineCapRowStatus=opticalLineCapRowStatus, scCapLanAid=scCapLanAid, virtualPortCapTable=virtualPortCapTable, physicalPortCapForceLaserOn=physicalPortCapForceLaserOn, eccCapRowStatus=eccCapRowStatus, eccCapType=eccCapType, envPortCapRowStatus=envPortCapRowStatus, pcs2FacilityDataThresholdCapEntry=pcs2FacilityDataThresholdCapEntry, externalPortCapChromDisperTx=externalPortCapChromDisperTx, changePhysicalPortServiceCapTcmBLevel=changePhysicalPortServiceCapTcmBLevel, facilityPhysThresholdCapSignalToNoiseRatioLow=facilityPhysThresholdCapSignalToNoiseRatioLow, moduleCapDispersionCompensation=moduleCapDispersionCompensation, linkCapNendIPv6=linkCapNendIPv6, oduFacilityDataThresholdCapUASHighThres15min=oduFacilityDataThresholdCapUASHighThres15min, moduleCapType=moduleCapType, shelfCapRackOrder=shelfCapRackOrder, opticalMuxCapEdfaPwrOut=opticalMuxCapEdfaPwrOut, changePhysicalPortServiceCapTimModeOduTcmB=changePhysicalPortServiceCapTimModeOduTcmB, facilityPhysThresholdCapRoundTripDelayHighThres=facilityPhysThresholdCapRoundTripDelayHighThres, endOfLinkCapTable=endOfLinkCapTable, sFacilityDataThresholdCapEntry=sFacilityDataThresholdCapEntry, changePhysicalPortServiceCapSigDegThresOduTcmC=changePhysicalPortServiceCapSigDegThresOduTcmC, lanCapAlias=lanCapAlias, tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day=tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day, crossConnectionCapCrsContAidListTwo=crossConnectionCapCrsContAidListTwo, changeServiceCap=changeServiceCap, virtualPortCapTraceExpectedOduTcmB=virtualPortCapTraceExpectedOduTcmB, fecFacilityDataThresholdCapTable=fecFacilityDataThresholdCapTable, virtualPortCapRevertiveMode=virtualPortCapRevertiveMode, physicalPortCapTxOnTimer=physicalPortCapTxOnTimer, physicalPortCapOpticalSetPoint=physicalPortCapOpticalSetPoint, protectionCableCapType=protectionCableCapType, pmDcnPhysicalCap=pmDcnPhysicalCap, virtualPortCapSwitchCommand=virtualPortCapSwitchCommand, ffpCapTable=ffpCapTable, physicalPortCapSigDegThreshold=physicalPortCapSigDegThreshold, virtualPortCapTimModeOdu=virtualPortCapTimModeOdu, endOfOpticalLineCapTable=endOfOpticalLineCapTable, physicalPortCapAutoPTassignment=physicalPortCapAutoPTassignment, otuFacilityDataThresholdCapESHighThres1day=otuFacilityDataThresholdCapESHighThres1day, endOfFacilityMgmtCap=endOfFacilityMgmtCap, pcs2FacilityDataThresholdCapESHighThres15min=pcs2FacilityDataThresholdCapESHighThres15min, changePhysicalPortServiceCapTerminationLevel=changePhysicalPortServiceCapTerminationLevel, oduFacilityDataThresholdCapEntry=oduFacilityDataThresholdCapEntry, changePhysicalPortServiceCapOpticalSetPoint=changePhysicalPortServiceCapOpticalSetPoint, physicalPortCapLagPrio=physicalPortCapLagPrio, performanceFacilityCap=performanceFacilityCap, changePhysicalPortServiceCapTimModeOduTcmC=changePhysicalPortServiceCapTimModeOduTcmC, scCapIPv6=scCapIPv6, otuFecFacilityDataThresholdCapESHighThres1day=otuFecFacilityDataThresholdCapESHighThres1day, virtualPortCapTcmBLevel=virtualPortCapTcmBLevel, physicalPortCapBehaviour=physicalPortCapBehaviour, facilityPhysThresholdCapDispersionCompensationLowThres=facilityPhysThresholdCapDispersionCompensationLowThres, moduleCapRemoteReset=moduleCapRemoteReset, ffpCapSDswitching=ffpCapSDswitching, physicalPortCapDispertionConfig=physicalPortCapDispertionConfig, otuFacilityDataThresholdCapBbeHighThres15min=otuFacilityDataThresholdCapBbeHighThres15min, fanCapOutputReset=fanCapOutputReset, endOfOprThresholdConfigCapTable=endOfOprThresholdConfigCapTable, physicalPortCapType=physicalPortCapType, pcs2FacilityDataThresholdCapTable=pcs2FacilityDataThresholdCapTable, connectionCapEntry=connectionCapEntry, opticalLineCapEntry=opticalLineCapEntry, externalPortCapChannelBandwith=externalPortCapChannelBandwith, changePhysicalPortServiceCapBehaviour=changePhysicalPortServiceCapBehaviour, shelfConnCapFacilityType=shelfConnCapFacilityType, oduFacilityDataThresholdCapESHighThres1day=oduFacilityDataThresholdCapESHighThres1day, endOfShelfConnCapTable=endOfShelfConnCapTable, endOfDcnPhysThresholdCapTable=endOfDcnPhysThresholdCapTable, moduleCapMuxMethod=moduleCapMuxMethod, virtualPortCapLacpMode=virtualPortCapLacpMode, virtualPortCapTimModeOduTcmA=virtualPortCapTimModeOduTcmA, eccCapEntry=eccCapEntry, physicalPortCapSigDegPeriodOduTcmA=physicalPortCapSigDegPeriodOduTcmA, physicalPortCapInhibitSwitchToProt=physicalPortCapInhibitSwitchToProt, physicalPortCapDispersionSetting=physicalPortCapDispersionSetting, endOfPmFacilityPhysicalCap=endOfPmFacilityPhysicalCap, externalPortCapFarEndLocation=externalPortCapFarEndLocation, linkCapMetric=linkCapMetric, conformanceCap=conformanceCap, linkCapOspf=linkCapOspf, moduleCapTable=moduleCapTable, endOfSpecificMgmtCap=endOfSpecificMgmtCap, shelfConnMgmtCap=shelfConnMgmtCap, endOfPmDcnPhysThresholdCap=endOfPmDcnPhysThresholdCap, plugCapType=plugCapType, physicalPortCapTraceTransmitDapiOduTcmC=physicalPortCapTraceTransmitDapiOduTcmC, oduFacilityDataThresholdCapBbeHighThres15min=oduFacilityDataThresholdCapBbeHighThres15min, ffpCapApsType=ffpCapApsType, facilityPhysThresholdCapChromaticDispersionHigh=facilityPhysThresholdCapChromaticDispersionHigh, changePhysicalPortServiceCapTraceTransmitSapiOtu=changePhysicalPortServiceCapTraceTransmitSapiOtu, ffpCapWaitToRestore=ffpCapWaitToRestore, lFacilityDataThresholdCapCVHighThres15min=lFacilityDataThresholdCapCVHighThres15min, endOfTcmBFacilityDataThresholdCapTable=endOfTcmBFacilityDataThresholdCapTable, pcs2FacilityDataThresholdCapCVHighThres15min=pcs2FacilityDataThresholdCapCVHighThres15min, changePhysicalPortServiceCapCodeGain=changePhysicalPortServiceCapCodeGain, physicalPortCapPrbsPmReset=physicalPortCapPrbsPmReset, filterCableCapTable=filterCableCapTable, physicalPortCapTable=physicalPortCapTable, virtualPortCapTraceExpectedOduTcmC=virtualPortCapTraceExpectedOduTcmC, tcmCFacilityDataThresholdCapEntry=tcmCFacilityDataThresholdCapEntry, opticalMuxMgmtCap=opticalMuxMgmtCap, sFacilityDataThresholdCapCVHighThres15min=sFacilityDataThresholdCapCVHighThres15min, scCapMetric=scCapMetric, containerMgmtCap=containerMgmtCap, moduleCapChannelSpacingProvision=moduleCapChannelSpacingProvision, virtualPortCapRowStatus=virtualPortCapRowStatus, linkCapRowStatus=linkCapRowStatus, lanCapMetric=lanCapMetric, otuFecFacilityDataThresholdCapCErrHighThres1day=otuFecFacilityDataThresholdCapCErrHighThres1day, physicalPortCapTraceTransmitSapiOtu=physicalPortCapTraceTransmitSapiOtu, opticalMuxCapFiberBrand=opticalMuxCapFiberBrand, dcnPhysThresholdCapAttRcvHigh=dcnPhysThresholdCapAttRcvHigh, linkCapType=linkCapType, complianceCap=complianceCap, facilityPhysThresholdCapEntry=facilityPhysThresholdCapEntry, changePhysicalPortServiceCapSigDegThresOduTcmA=changePhysicalPortServiceCapSigDegThresOduTcmA, sFacilityDataThresholdCapSEFSHighThres1day=sFacilityDataThresholdCapSEFSHighThres1day, physicalPortCapTraceTransmitDapiOtu=physicalPortCapTraceTransmitDapiOtu, connectionCapTable=connectionCapTable, tcmAFacilityDataThresholdCapEntry=tcmAFacilityDataThresholdCapEntry, lanCapTable=lanCapTable, crossOpticalLineCapTable=crossOpticalLineCapTable, virtualPortCapType=virtualPortCapType, physicalPortCapEqlzAdmin=physicalPortCapEqlzAdmin, endOfPmFacilityDataThresholdCap=endOfPmFacilityDataThresholdCap, virtualPortCapPriority=virtualPortCapPriority, tcmBFacilityDataThresholdCapEntry=tcmBFacilityDataThresholdCapEntry, changePhysicalPortServiceCapFlowControl=changePhysicalPortServiceCapFlowControl, physicalPortCapTraceTransmitSonetSection=physicalPortCapTraceTransmitSonetSection, otuFacilityDataThresholdCapEntry=otuFacilityDataThresholdCapEntry, sFacilityDataThresholdCapESHighThres1day=sFacilityDataThresholdCapESHighThres1day, externalPortCapMinChromDisperRcv=externalPortCapMinChromDisperRcv, changePhysicalPortServiceCapSigDegPeriodSdhSection=changePhysicalPortServiceCapSigDegPeriodSdhSection, crossDcnCapRowStatus=crossDcnCapRowStatus, dcnPhysThresholdCapTable=dcnPhysThresholdCapTable, virtualPortCapCir=virtualPortCapCir, pmFacilityCap=pmFacilityCap, physicalPortCapSigDegThresSonetLine=physicalPortCapSigDegThresSonetLine, facilityPhysThresholdCapTable=facilityPhysThresholdCapTable, virtualPortCapSigDegPeriodOduTcmB=virtualPortCapSigDegPeriodOduTcmB, virtualPortCapStagType=virtualPortCapStagType, virtualPortCapTraceTransmitOpspOduTcmC=virtualPortCapTraceTransmitOpspOduTcmC, endOfContainerCapTable=endOfContainerCapTable, linkCapTable=linkCapTable, connectionCapType=connectionCapType, plugCapThirdPartyUsage=plugCapThirdPartyUsage, plugCapConnector=plugCapConnector, otuFecFacilityDataThresholdCapCErrHighThres15min=otuFecFacilityDataThresholdCapCErrHighThres15min, crossDcnCapLink=crossDcnCapLink, crossConnectionCapTunnelAid=crossConnectionCapTunnelAid, pmFacilityPhysThresholdCap=pmFacilityPhysThresholdCap, shelfConnCapAlias=shelfConnCapAlias, crossOpticalLineCapCrsType=crossOpticalLineCapCrsType, opticalMuxCapTilt=opticalMuxCapTilt, lFacilityDataThresholdCapCVSHighThres1day=lFacilityDataThresholdCapCVSHighThres1day, externalPortCapMaxOptPowerRcv=externalPortCapMaxOptPowerRcv, changePhysicalPortServiceCapVoaMode=changePhysicalPortServiceCapVoaMode, oprThresholdConfigCapEntry=oprThresholdConfigCapEntry, endOfPmFacilityDataCap=endOfPmFacilityDataCap, changePhysicalPortServiceCapTributarySlotMethod=changePhysicalPortServiceCapTributarySlotMethod, changePhysicalPortServiceCapSigDegPcslThreshold=changePhysicalPortServiceCapSigDegPcslThreshold, virtualPortCapAdmin=virtualPortCapAdmin, oprThresholdConfigCapTable=oprThresholdConfigCapTable, physicalPortCapSigDegThresSdhSection=physicalPortCapSigDegThresSdhSection, physicalPortCapWdmRxChannel=physicalPortCapWdmRxChannel, physicalPortCapUtag=physicalPortCapUtag, facilityPhysThresholdCapChromaticDispersionLow=facilityPhysThresholdCapChromaticDispersionLow, plugCapAlias=plugCapAlias, shelfCapEntry=shelfCapEntry, pmDcnDataCap=pmDcnDataCap, changePhysicalPortServiceCapSigDegPeriodIntegration=changePhysicalPortServiceCapSigDegPeriodIntegration, physicalPortCapXfpDecisionThres=physicalPortCapXfpDecisionThres, plugCapLoopbackAttenuation=plugCapLoopbackAttenuation, virtualPortCapTcmALevel=virtualPortCapTcmALevel, changePhysicalPortServiceCapTimModeSonetSection=changePhysicalPortServiceCapTimModeSonetSection, moduleCapRowStatus=moduleCapRowStatus, changePhysicalPortServiceCapLaserOffTimer=changePhysicalPortServiceCapLaserOffTimer, terminationPointCapFiberDetect=terminationPointCapFiberDetect, externalPortCapTable=externalPortCapTable, externalPortCapFrameFormat=externalPortCapFrameFormat, envMgmtCap=envMgmtCap, virtualPortCapSigDegThresOduTcmA=virtualPortCapSigDegThresOduTcmA, oduFacilityDataThresholdCapBbeHighThres1day=oduFacilityDataThresholdCapBbeHighThres1day, lanCapAuthString=lanCapAuthString, lanCapIpMask=lanCapIpMask, fecFacilityDataThresholdCapEntry=fecFacilityDataThresholdCapEntry, facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh=facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh, externalPortCapMaxBitErrorRate=externalPortCapMaxBitErrorRate, opticalMuxCapBandProvision=opticalMuxCapBandProvision, changePhysicalPortServiceCapLaserOffDelayFunction=changePhysicalPortServiceCapLaserOffDelayFunction, physicalPortCapDataLayerPmReset=physicalPortCapDataLayerPmReset, tcmAFacilityDataThresholdCapSESHighThres1day=tcmAFacilityDataThresholdCapSESHighThres1day, lanCapIPv6=lanCapIPv6, fanCapForceDestroy=fanCapForceDestroy, linkCapNearEndIp=linkCapNearEndIp, pmDcnPhysThresholdCap=pmDcnPhysThresholdCap, protectionCableCapRowStatus=protectionCableCapRowStatus, lFacilityDataThresholdCapUASSHighThres1day=lFacilityDataThresholdCapUASSHighThres1day, endOfPlugCapTable=endOfPlugCapTable, endOfLanCapTable=endOfLanCapTable, endOfPmFacilityPhysThresholdCap=endOfPmFacilityPhysThresholdCap, externalPortCapAlias=externalPortCapAlias, lFacilityDataThresholdCapUASHighThres15min=lFacilityDataThresholdCapUASHighThres15min, facilityPhysThresholdCapLogicalLanesSkewHigh=facilityPhysThresholdCapLogicalLanesSkewHigh, changePhysicalPortServiceCapAdmin=changePhysicalPortServiceCapAdmin, envPortCapTifAlarmMessage=envPortCapTifAlarmMessage, changePhysicalPortServiceCapLaserDelayTimer=changePhysicalPortServiceCapLaserDelayTimer, physicalPortCapTurnupConfig=physicalPortCapTurnupConfig, physicalPortCapSigDegThresOduTcmA=physicalPortCapSigDegThresOduTcmA, crossOpticalLineCapRowStatus=crossOpticalLineCapRowStatus, moduleCapDCFiberType=moduleCapDCFiberType, endOfFanCapTable=endOfFanCapTable, physicalPortCapPriority=physicalPortCapPriority, protectionCableCapEntry=protectionCableCapEntry, physicalPortCapCodeGain=physicalPortCapCodeGain, opticalMuxCapOptUpdate=opticalMuxCapOptUpdate, dcnPhysThresholdCapAttRcvLow=dcnPhysThresholdCapAttRcvLow, endOfPmFacilityCap=endOfPmFacilityCap, optMuxPhysThresholdCapOscPwrRcvLowThres=optMuxPhysThresholdCapOscPwrRcvLowThres, fiberMapCap=fiberMapCap, physicalPortCapTimModeOdu=physicalPortCapTimModeOdu, crossConnectionCapCrsFromAidTwo=crossConnectionCapCrsFromAidTwo, envPortCapFacilityType=envPortCapFacilityType, physicalPortCapTraceExpectedSonetSection=physicalPortCapTraceExpectedSonetSection)
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", changePhysicalPortServiceCapSigDegThresSdhSection=changePhysicalPortServiceCapSigDegThresSdhSection, linkCapAreaAid=linkCapAreaAid, moduleCapTopology=moduleCapTopology, changePhysicalPortServiceCapLaserOnTimer=changePhysicalPortServiceCapLaserOnTimer, shelfConnCapTable=shelfConnCapTable, tcmBFacilityDataThresholdCapSESHighThres15min=tcmBFacilityDataThresholdCapSESHighThres15min, changePhysicalPortServiceCapTraceTransmitDapiOdu=changePhysicalPortServiceCapTraceTransmitDapiOdu, ffpCapDirection=ffpCapDirection, physicalPortCapTerminationLevel=physicalPortCapTerminationLevel, changePhysicalPortServiceCapTxOffTimer=changePhysicalPortServiceCapTxOffTimer, changePhysicalPortServiceCapTraceExpectedOtu=changePhysicalPortServiceCapTraceExpectedOtu, endOfChangeServiceCap=endOfChangeServiceCap, changePhysicalPortServiceCapFecType=changePhysicalPortServiceCapFecType, changePhysicalPortServiceCapDispersionSetting=changePhysicalPortServiceCapDispersionSetting, ffpCapHoldOffTime=ffpCapHoldOffTime, terminationPointCapRowStatus=terminationPointCapRowStatus, opticalMuxCapTimePeriod=opticalMuxCapTimePeriod, changePhysicalPortServiceCapTraceExpectedOduTcmA=changePhysicalPortServiceCapTraceExpectedOduTcmA, facilityMgmtCap=facilityMgmtCap, endOfDcnMgmtCap=endOfDcnMgmtCap, facilityPhysThresholdCapLatencyLowThres=facilityPhysThresholdCapLatencyLowThres, lanCapType=lanCapType, pmTerminPointCap=pmTerminPointCap, optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow=optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow, physicalPortCapPvid=physicalPortCapPvid, envPortCapTable=envPortCapTable, scCapAuthType=scCapAuthType, linkCapAuthString=linkCapAuthString, lanCapAuthType=lanCapAuthType, plugCapLaneGroup=plugCapLaneGroup, moduleCapGainRange=moduleCapGainRange, opticalMuxCapAseTabCreation=opticalMuxCapAseTabCreation, changePhysicalPortServiceCapTraceTransmitOpspOduTcmC=changePhysicalPortServiceCapTraceTransmitOpspOduTcmC, moduleCapAdmin=moduleCapAdmin, physicalPortCapSigDegThresSonetSection=physicalPortCapSigDegThresSonetSection, shelfCapRackNumber=shelfCapRackNumber, tcmBFacilityDataThresholdCapESHighThres1day=tcmBFacilityDataThresholdCapESHighThres1day, virtualPortCapLacpTimeout=virtualPortCapLacpTimeout, physicalPortCapAutoThresReset=physicalPortCapAutoThresReset, shelfCapAlias=shelfCapAlias, virtualPortCapTraceTransmitSapiOduTcmB=virtualPortCapTraceTransmitSapiOduTcmB, scCapTable=scCapTable, tcmAFacilityDataThresholdCapBbeHighThres15min=tcmAFacilityDataThresholdCapBbeHighThres15min, dcnPhysThresholdCapOprHigh=dcnPhysThresholdCapOprHigh, endOfFacilityPhysThresholdCapTable=endOfFacilityPhysThresholdCapTable, physicalPortCapLaserOnTimer=physicalPortCapLaserOnTimer, tcmCFacilityDataThresholdCapBESHighThres15min=tcmCFacilityDataThresholdCapBESHighThres15min, scCapDataLayerPmReset=scCapDataLayerPmReset, physicalPortCapSigDegThresSdhMs=physicalPortCapSigDegThresSdhMs, externalPortCapMaxChromDisperRcv=externalPortCapMaxChromDisperRcv, pmOptMuxDataCap=pmOptMuxDataCap, moduleCapCapabilityLevelProvision=moduleCapCapabilityLevelProvision, tcmAFacilityDataThresholdCapESHighThres15min=tcmAFacilityDataThresholdCapESHighThres15min, pmOptMuxPhysicalCap=pmOptMuxPhysicalCap, physicalPortCapSigDegPeriodOtu=physicalPortCapSigDegPeriodOtu, terminationPointCapEntry=terminationPointCapEntry, endOfOtuFacilityDataThresholdCapTable=endOfOtuFacilityDataThresholdCapTable, sFacilityDataThresholdCapCVHighThres1day=sFacilityDataThresholdCapCVHighThres1day, changePhysicalPortServiceCapTraceExpectedOduTcmB=changePhysicalPortServiceCapTraceExpectedOduTcmB, opticalMuxCapGain=opticalMuxCapGain, moduleCapChannelsNumber=moduleCapChannelsNumber, connectionCapRowStatus=connectionCapRowStatus, virtualPortCapTraceTransmitOpspOduTcmA=virtualPortCapTraceTransmitOpspOduTcmA, virtualPortCapVcType=virtualPortCapVcType, physicalPortCapAlias=physicalPortCapAlias, physicalPortCapTimModeOtu=physicalPortCapTimModeOtu, endOfEnvMgmtCap=endOfEnvMgmtCap, externalPortCapPmdTransmit=externalPortCapPmdTransmit, externalPortCapMaxPmdRcv=externalPortCapMaxPmdRcv, changePhysicalPortServiceCapTraceTransmitSapiOduTcmB=changePhysicalPortServiceCapTraceTransmitSapiOduTcmB, moduleCapMode=moduleCapMode, physicalPortCapSigDegPeriodOdu=physicalPortCapSigDegPeriodOdu, changePhysicalPortServiceCapTimingSource=changePhysicalPortServiceCapTimingSource, linkCapEntry=linkCapEntry, fecFacilityDataThresholdCapCEHighThres1day=fecFacilityDataThresholdCapCEHighThres1day, facilityPhysThresholdCapCarrierFreqOffsetLow=facilityPhysThresholdCapCarrierFreqOffsetLow, changePhysicalPortServiceCapSigDegPeriodOdu=changePhysicalPortServiceCapSigDegPeriodOdu, changePhysicalPortServiceCapTraceTransmitOpspOduTcmA=changePhysicalPortServiceCapTraceTransmitOpspOduTcmA, scCapAttGradientTh=scCapAttGradientTh, containerCapRowStatus=containerCapRowStatus, moduleCapReach=moduleCapReach, crossConnectionCapType=crossConnectionCapType, scCapAuthString=scCapAuthString, physicalPortCapLaserDelayTimer=physicalPortCapLaserDelayTimer, virtualPortCapOpuPayloadType=virtualPortCapOpuPayloadType, changePhysicalPortServiceCapSigDegThresSonetSection=changePhysicalPortServiceCapSigDegThresSonetSection, changePhysicalPortServiceCapSigDegPeriodOduTcmA=changePhysicalPortServiceCapSigDegPeriodOduTcmA, moduleCapTrafficDirection=moduleCapTrafficDirection, tcmAFacilityDataThresholdCapUASHighThres15min=tcmAFacilityDataThresholdCapUASHighThres15min, changePhysicalPortServiceCapTraceFormSonetSection=changePhysicalPortServiceCapTraceFormSonetSection, endOfShelfCapTable=endOfShelfCapTable, opticalMuxCapOpticalSetPoint=opticalMuxCapOpticalSetPoint, moduleCapLagSysPrio=moduleCapLagSysPrio, tcmCFacilityDataThresholdCapUASHighThres15min=tcmCFacilityDataThresholdCapUASHighThres15min, changePhysicalPortServiceCapChannelProv=changePhysicalPortServiceCapChannelProv, endOfPcs2FacilityDataThresholdCapTable=endOfPcs2FacilityDataThresholdCapTable, changePhysicalPortServiceCapTraceTransmitDapiOduTcmC=changePhysicalPortServiceCapTraceTransmitDapiOduTcmC, crossDcnCapEcc=crossDcnCapEcc, virtualPortCapUtag=virtualPortCapUtag, pmOptMuxPhysValueCap=pmOptMuxPhysValueCap, endOfFiberMapCap=endOfFiberMapCap, tcmAFacilityDataThresholdCapTable=tcmAFacilityDataThresholdCapTable, filterCableCapEntry=filterCableCapEntry, lanCapIPv6PrefixLen=lanCapIPv6PrefixLen, dcnPhysThresholdCapEntry=dcnPhysThresholdCapEntry, virtualPortCapOduTribPortNo=virtualPortCapOduTribPortNo, tcmCFacilityDataThresholdCapSESHighThres15min=tcmCFacilityDataThresholdCapSESHighThres15min, oduFacilityDataThresholdCapESHighThres15min=oduFacilityDataThresholdCapESHighThres15min, physicalPortCapTestPrbsTrmtMode=physicalPortCapTestPrbsTrmtMode, virtualPortCapTimModeOduTcmC=virtualPortCapTimModeOduTcmC, pmFacilityDataCap=pmFacilityDataCap, scCapGatewayProxyArp=scCapGatewayProxyArp, opticalMuxCapAttenuationGradient=opticalMuxCapAttenuationGradient, moduleCapFiberType=moduleCapFiberType, otuFacilityDataThresholdCapUASHighThres15min=otuFacilityDataThresholdCapUASHighThres15min, dcnMgmtCap=dcnMgmtCap, physicalPortCapTraceTransmitDapiOduTcmB=physicalPortCapTraceTransmitDapiOduTcmB, physicalPortCapSignalDegradePeriod=physicalPortCapSignalDegradePeriod, shelfConnCapAdmin=shelfConnCapAdmin, sFacilityDataThresholdCapESHighThres15min=sFacilityDataThresholdCapESHighThres15min, endOfEnvPortCapTable=endOfEnvPortCapTable, optMuxPhysThresholdCapOpticalInputPwrLow=optMuxPhysThresholdCapOpticalInputPwrLow, opticalMuxCapOffset=opticalMuxCapOffset, lanCapAdmin=lanCapAdmin, envPortCapInvertTifInputLogic=envPortCapInvertTifInputLogic, PYSNMP_MODULE_ID=advaFspR7Cap, moduleCapRoadmNumber=moduleCapRoadmNumber, tcmAFacilityDataThresholdCapUASHighThres1day=tcmAFacilityDataThresholdCapUASHighThres1day, virtualPortCapTunnelAid=virtualPortCapTunnelAid, changePhysicalPortServiceCapTraceExpectedSonetSection=changePhysicalPortServiceCapTraceExpectedSonetSection, linkCapAuthType=linkCapAuthType, envPortCapEntry=envPortCapEntry, ffpCapProtectionMech=ffpCapProtectionMech, physicalPortCapTxOffTimer=physicalPortCapTxOffTimer, physicalPortCapTunnelAid=physicalPortCapTunnelAid, physicalPortCapTimModeSonetSection=physicalPortCapTimModeSonetSection, moduleCapSfProvision=moduleCapSfProvision, physicalPortCapSigDegThresOduTcmC=physicalPortCapSigDegThresOduTcmC, opticalLineCapTxLineAttenuation=opticalLineCapTxLineAttenuation, physicalPortCapSigDegPeriodIntegration=physicalPortCapSigDegPeriodIntegration, filterCableCapRowStatus=filterCableCapRowStatus, changePhysicalPortServiceCapSigDegPeriodOtu=changePhysicalPortServiceCapSigDegPeriodOtu, crossDcnCapTable=crossDcnCapTable, otuFacilityDataThresholdCapTable=otuFacilityDataThresholdCapTable, eccCapLanAid=eccCapLanAid, endOfShelfConnMgmtCap=endOfShelfConnMgmtCap, scCapBitrate=scCapBitrate, opticalMuxCapForceFwdAsePilotOn=opticalMuxCapForceFwdAsePilotOn, optMuxPhysThresholdCapTable=optMuxPhysThresholdCapTable, ffpCapRevertMode=ffpCapRevertMode, scCapOspf=scCapOspf, virtualPortCapSigDegPeriodOdu=virtualPortCapSigDegPeriodOdu, optMuxPhysThresholdCapAttRxLow=optMuxPhysThresholdCapAttRxLow, externalPortCapOsnrTransmit=externalPortCapOsnrTransmit, oduFacilityDataThresholdCapUASHighThres1day=oduFacilityDataThresholdCapUASHighThres1day, shelfConnCapRowStatus=shelfConnCapRowStatus, changePhysicalPortServiceCapOtnStuffing=changePhysicalPortServiceCapOtnStuffing, endOfCrossDcnCapTable=endOfCrossDcnCapTable, moduleCapScrambling=moduleCapScrambling, virtualPortCapSigDegPeriodOduTcmA=virtualPortCapSigDegPeriodOduTcmA, scCapAutonegotiation=scCapAutonegotiation, fecFacilityDataThresholdCapUBEHighThres15min=fecFacilityDataThresholdCapUBEHighThres15min, pmFacilityDataThresholdCap=pmFacilityDataThresholdCap, physicalPortCapTraceTransmitOpspOduTcmA=physicalPortCapTraceTransmitOpspOduTcmA, physicalPortCapTcmCLevel=physicalPortCapTcmCLevel, crossConnectionCapTable=crossConnectionCapTable, virtualPortCapDataLayerPmReset=virtualPortCapDataLayerPmReset, scCapAdmin=scCapAdmin, opticalMuxCapAdmin=opticalMuxCapAdmin, moduleCapEntry=moduleCapEntry, endOfEciCap=endOfEciCap, crossDcnCapEntry=crossDcnCapEntry, opticalMuxCapInhibitSwitchToWork=opticalMuxCapInhibitSwitchToWork, featureSpecificCap=featureSpecificCap, externalPortCapMinOsnrRcv=externalPortCapMinOsnrRcv, moduleCapChannelsProvision=moduleCapChannelsProvision, physicalPortCapPortMode=physicalPortCapPortMode, physicalPortCapRedLineState=physicalPortCapRedLineState, endOfScCapTable=endOfScCapTable, plugCapEntry=plugCapEntry, physicalPortCapSigDegPeriodOduTcmC=physicalPortCapSigDegPeriodOduTcmC, physicalPortCapTraceTransmitSapiOduTcmB=physicalPortCapTraceTransmitSapiOduTcmB, eqptMgmtCap=eqptMgmtCap, physicalPortCapTimModeOduTcmB=physicalPortCapTimModeOduTcmB, opticalMuxCapOffsetLow=opticalMuxCapOffsetLow, changePhysicalPortServiceCapSigDegThresOtu=changePhysicalPortServiceCapSigDegThresOtu, changePhysicalPortServiceCapLaneChannelSetting=changePhysicalPortServiceCapLaneChannelSetting, physicalPortCapTraceExpectedOduTcmA=physicalPortCapTraceExpectedOduTcmA, eccCapAdmin=eccCapAdmin, changePhysicalPortServiceCapTraceTransmitSapiOduTcmC=changePhysicalPortServiceCapTraceTransmitSapiOduTcmC, virtualPortCapInhibitSwitchToProt=virtualPortCapInhibitSwitchToProt, changePhysicalPortServiceCapSigDegPeriodOduTcmC=changePhysicalPortServiceCapSigDegPeriodOduTcmC, virtualPortCapAlias=virtualPortCapAlias, opticalMuxCapOscOpticalSetpoint=opticalMuxCapOscOpticalSetpoint, opticalMuxCapVariableGain=opticalMuxCapVariableGain, moduleCapTransmitChannel=moduleCapTransmitChannel, virtualPortCapTraceTransmitOpspOduTcmB=virtualPortCapTraceTransmitOpspOduTcmB, opticalMuxCapAlsMode=opticalMuxCapAlsMode, specificMgmtCap=specificMgmtCap, shelfCapType=shelfCapType, envPortCapTifAlarmType=envPortCapTifAlarmType, linkCapProxyArp=linkCapProxyArp, virtualPortCapLagPortType=virtualPortCapLagPortType, otuFecFacilityDataThresholdCapSESHighThres1day=otuFecFacilityDataThresholdCapSESHighThres1day, changePhysicalPortServiceCapFarEndCommunication=changePhysicalPortServiceCapFarEndCommunication, pmDcnCap=pmDcnCap, tcmBFacilityDataThresholdCapBESHighThres15min=tcmBFacilityDataThresholdCapBESHighThres15min, tcmCFacilityDataThresholdCapSESHighThres1day=tcmCFacilityDataThresholdCapSESHighThres1day, otuFacilityDataThresholdCapBbeHighThres1day=otuFacilityDataThresholdCapBbeHighThres1day, changePhysicalPortServiceCapSigDegThresSdhMs=changePhysicalPortServiceCapSigDegThresSdhMs, shelfCapRowStatus=shelfCapRowStatus, physicalPortCapTraceExpectedOduTcmC=physicalPortCapTraceExpectedOduTcmC, physicalPortCapEntry=physicalPortCapEntry, physicalPortCapPayload=physicalPortCapPayload, scCapIpMode=scCapIpMode, virtualPortCapTrafficDirection=virtualPortCapTrafficDirection, optMuxPhysThresholdCapBrPwrReceivedHighThres=optMuxPhysThresholdCapBrPwrReceivedHighThres, changePhysicalPortServiceCapTraceExpectedOduTcmC=changePhysicalPortServiceCapTraceExpectedOduTcmC, virtualPortCapTraceTransmitDapiOduTcmB=virtualPortCapTraceTransmitDapiOduTcmB, fanCapAlias=fanCapAlias, changePhysicalPortServiceCapTraceTransmitDapiOduTcmA=changePhysicalPortServiceCapTraceTransmitDapiOduTcmA, changePhysicalPortServiceCapVoaSetpoint=changePhysicalPortServiceCapVoaSetpoint, changePhysicalPortServiceCapTimModeOdu=changePhysicalPortServiceCapTimModeOdu, scCapIpAddr=scCapIpAddr, endOfLFacilityDataThresholdCapTable=endOfLFacilityDataThresholdCapTable, externalPortCapOpticalPowerTx=externalPortCapOpticalPowerTx, opticalMuxCapDataLayerPmReset=opticalMuxCapDataLayerPmReset, plugCapTransmitChannel=plugCapTransmitChannel, moduleCapPsuOutputPower=moduleCapPsuOutputPower, fecFacilityDataThresholdCapUBEHighThres1day=fecFacilityDataThresholdCapUBEHighThres1day, moduleCapDeploy=moduleCapDeploy, shelfCapSupply=shelfCapSupply, endOfProtectionCableCap=endOfProtectionCableCap, physicalPortCapAdmin=physicalPortCapAdmin, physicalPortCapTributarySlotMethod=physicalPortCapTributarySlotMethod, linkCapIPv6Type=linkCapIPv6Type, lFacilityDataThresholdCapSESHighThres1day=lFacilityDataThresholdCapSESHighThres1day, changePhysicalPortServiceCapTxOffDelay=changePhysicalPortServiceCapTxOffDelay, changePhysicalPortServiceCapSigDegThresSonetLine=changePhysicalPortServiceCapSigDegThresSonetLine, otuFacilityDataThresholdCapESHighThres15min=otuFacilityDataThresholdCapESHighThres15min, virtualPortCapSigDegPeriodOduTcmC=virtualPortCapSigDegPeriodOduTcmC, physicalPortCapLossAttenuation=physicalPortCapLossAttenuation, changePhysicalPortServiceCapAlsMode=changePhysicalPortServiceCapAlsMode, tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min=tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min, physicalPortCapTimModeOduTcmC=physicalPortCapTimModeOduTcmC, filterCableCapType=filterCableCapType, crossConnectionCapRowStatus=crossConnectionCapRowStatus, endOfPmDcnCap=endOfPmDcnCap, changePhysicalPortServiceCapOpuPayloadType=changePhysicalPortServiceCapOpuPayloadType, pmFacilityPhysicalCap=pmFacilityPhysicalCap, endOfTcmCFacilityDataThresholdCapTable=endOfTcmCFacilityDataThresholdCapTable, scCapRowStatus=scCapRowStatus, managementCap=managementCap, optMuxPhysThresholdCapBrtxHighConfig=optMuxPhysThresholdCapBrtxHighConfig)
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", physicalPortCapInhibitSwitchToWork=physicalPortCapInhibitSwitchToWork, opticalMuxCapType=opticalMuxCapType, tcmCFacilityDataThresholdCapTable=tcmCFacilityDataThresholdCapTable, crossOpticalLineCapRedLineState=crossOpticalLineCapRedLineState, crossConnectionCapConn=crossConnectionCapConn, externalPortCapFecType=externalPortCapFecType, lanCapRowStatus=lanCapRowStatus, scCapAlsMode=scCapAlsMode, changePhysicalPortServiceCapType=changePhysicalPortServiceCapType, moduleCapNdpCleanup=moduleCapNdpCleanup, crossConnectionCapCrsFunction=crossConnectionCapCrsFunction, physicalPortCapTimModeOduTcmA=physicalPortCapTimModeOduTcmA, physicalPortCapOtnStuffing=physicalPortCapOtnStuffing, virtualPortCapTraceTransmitDapiOdu=virtualPortCapTraceTransmitDapiOdu, eccCapTable=eccCapTable, endOfExternalPortCapTable=endOfExternalPortCapTable, endOfManagementCap=endOfManagementCap, ffpCapProtectionAid=ffpCapProtectionAid, moduleCapForceConfig=moduleCapForceConfig, opticalLineCapRxLineAttenuation=opticalLineCapRxLineAttenuation, compliancesCap=compliancesCap, physicalPortCapTxOffOnTm=physicalPortCapTxOffOnTm, tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day=tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day, moduleCapRstp=moduleCapRstp, virtualPortCapSigDegThresOdu=virtualPortCapSigDegThresOdu, ffpCapSignalDegradeSwitching=ffpCapSignalDegradeSwitching, endOfContainerMgmtCap=endOfContainerMgmtCap, physicalPortCapTraceTransmitDapiOduTcmA=physicalPortCapTraceTransmitDapiOduTcmA, lanCapEntry=lanCapEntry, scCapAlias=scCapAlias, pmFacilityPhysValueCap=pmFacilityPhysValueCap, moduleCapMapping=moduleCapMapping, lFacilityDataThresholdCapESHighThres15min=lFacilityDataThresholdCapESHighThres15min, changePhysicalPortServiceCapWdmRxChannel=changePhysicalPortServiceCapWdmRxChannel, changePhysicalPortServiceCapSignalDegradePeriod=changePhysicalPortServiceCapSignalDegradePeriod, moduleCapOutputReset=moduleCapOutputReset, otuFecFacilityDataThresholdCapEntry=otuFecFacilityDataThresholdCapEntry, physicalPortCapTraceTransmitDapiOdu=physicalPortCapTraceTransmitDapiOdu, tcmAFacilityDataThresholdCapESHighThres1day=tcmAFacilityDataThresholdCapESHighThres1day, endOfConnectionCapTable=endOfConnectionCapTable, externalPortCapEntry=externalPortCapEntry, plugCapReach=plugCapReach, physicalPortCapChannelProv=physicalPortCapChannelProv, protectionCableCapTable=protectionCableCapTable, pmEqptCap=pmEqptCap, physicalPortCapLaserOffDelayFunction=physicalPortCapLaserOffDelayFunction, virtualPortCapLagActivePorts=virtualPortCapLagActivePorts, facilityPhysThresholdCapLatencyHighThres=facilityPhysThresholdCapLatencyHighThres, externalPortCapRowStatus=externalPortCapRowStatus, endOfChangePhysicalPortServiceCapTable=endOfChangePhysicalPortServiceCapTable, linkCapAlias=linkCapAlias, lanCapPriority=lanCapPriority, opticalLineCapAlias=opticalLineCapAlias, protectionCap=protectionCap, otuFacilityDataThresholdCapUASHighThres1day=otuFacilityDataThresholdCapUASHighThres1day, scCapDuplex=scCapDuplex, otuFacilityDataThresholdCapSESHighThres1day=otuFacilityDataThresholdCapSESHighThres1day)
