#
# PySNMP MIB module NTN-QOS-POLICY-EVOL-PIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTN-QOS-POLICY-EVOL-PIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
bnIfExtnSlot, bnIfExtnPort = mibBuilder.importSymbols("BN-IF-EXTENSIONS-MIB", "bnIfExtnSlot", "bnIfExtnPort")
DscpOrAny, Dscp = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "DscpOrAny", "Dscp")
IndexInteger, IndexIntegerNextFree = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexInteger", "IndexIntegerNextFree")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddressPrefixLength, InetAddressType, InetAddressIPv4, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddressIPv4", "InetAddress", "InetPortNumber")
BurstSize, = mibBuilder.importSymbols("INTEGRATED-SERVICES-MIB", "BurstSize")
Role, RoleCombination = mibBuilder.importSymbols("POLICY-FRAMEWORK-PIB", "Role", "RoleCombination")
PortList, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, zeroDotZero, iso, TimeTicks, Unsigned32, Gauge32, ObjectIdentity, MibIdentifier, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "zeroDotZero", "iso", "TimeTicks", "Unsigned32", "Gauge32", "ObjectIdentity", "MibIdentifier", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ModuleIdentity", "NotificationType")
DisplayString, AutonomousType, RowStatus, RowPointer, TextualConvention, MacAddress, StorageType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "AutonomousType", "RowStatus", "RowPointer", "TextualConvention", "MacAddress", "StorageType", "TruthValue")
policy, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "policy")
ntnQosPolicyEvolPib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7))
ntnQosPolicyEvolPib.setRevisions(('2015-02-20 00:00', '2014-04-03 00:00', '2014-02-14 00:00', '2012-06-14 00:00', '2012-05-16 00:00', '2012-03-16 00:00', '2012-01-13 00:00', '2011-07-26 00:00', '2011-07-15 00:00', '2011-04-15 00:00', '2010-03-08 00:00', '2010-01-05 00:00', '2009-11-05 00:00', '2009-08-11 00:00', '2009-03-26 00:00', '2009-01-05 00:00', '2008-11-05 00:00', '2008-07-09 00:00', '2008-07-02 00:00', '2008-06-26 00:00', '2008-05-29 00:00', '2006-09-28 00:00', '2006-04-21 00:00', '2005-02-03 00:00', '2004-10-25 00:00', '2004-09-20 00:00', '2004-07-20 00:00',))
if mibBuilder.loadTexts: ntnQosPolicyEvolPib.setLastUpdated('201502200000Z')
if mibBuilder.loadTexts: ntnQosPolicyEvolPib.setOrganization('Avaya Networks, Inc.')
class IndexIntegerOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class QosIeee802Cos(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class FlowIdOrAny(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1048575), )
class DscpUpdate(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ValueRangeConstraint(64, 64), )
class VersionIndicator(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("version1", 1), ("version2", 2))

class FcId(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x.1x.1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class InterfaceList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

ntnQosPolicyEvolPibClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1))
ntnQosPolicyEvolPibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 2))
ntnQosPolicyEvolPibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 3))
ntnQosInterfaceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1), )
if mibBuilder.loadTexts: ntnQosInterfaceTypeTable.setStatus('current')
ntnQosInterfaceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceTypeId"))
if mibBuilder.loadTexts: ntnQosInterfaceTypeEntry.setStatus('current')
ntnQosInterfaceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosInterfaceTypeId.setStatus('current')
ntnQosInterfaceTypeRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1, 1, 2), RoleCombination()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceTypeRoles.setStatus('current')
ntnQosInterfaceTypeIfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trusted", 1), ("nonTrusted", 2), ("unrestricted", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceTypeIfClass.setStatus('current')
ntnQosInterfaceTypeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1, 1, 4), Bits().clone(namedValues=NamedValues(("other", 0), ("inputIpClassification", 1), ("outputIpClassification", 2), ("input802Classification", 3), ("output802Classification", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceTypeCapabilities.setStatus('current')
ntnQosInterfaceTypeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceTypeStorageType.setStatus('current')
ntnQosInterfaceTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceTypeStatus.setStatus('current')
ntnQosQsetPriAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2), )
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentTable.setStatus('current')
ntnQosQsetPriAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetPriAssignmentId"))
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentEntry.setStatus('current')
ntnQosQsetPriAssignmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentId.setStatus('current')
ntnQosQsetPriAssignmentQset = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentQset.setStatus('current')
ntnQosQsetPriAssignmentPri = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2, 1, 3), QosIeee802Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentPri.setStatus('current')
ntnQosQsetPriAssignmentQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentQueue.setStatus('current')
ntnQosQsetPriAssignmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentStorageType.setStatus('current')
ntnQosQsetPriAssignmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetPriAssignmentStatus.setStatus('current')
ntnQosQsetDscpAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3), )
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentTable.setStatus('current')
ntnQosQsetDscpAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetDscpAssignmentId"))
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentEntry.setStatus('current')
ntnQosQsetDscpAssignmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentId.setStatus('current')
ntnQosQsetDscpAssignmentQset = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentQset.setStatus('current')
ntnQosQsetDscpAssignmentDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3, 1, 3), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentDscp.setStatus('current')
ntnQosQsetDscpAssignmentQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentQueue.setStatus('current')
ntnQosQsetDscpAssignmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentStorageType.setStatus('current')
ntnQosQsetDscpAssignmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQsetDscpAssignmentStatus.setStatus('current')
ntnQosShapingParamsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4), )
if mibBuilder.loadTexts: ntnQosShapingParamsTable.setStatus('current')
ntnQosShapingParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosShapingParamsId"))
if mibBuilder.loadTexts: ntnQosShapingParamsEntry.setStatus('current')
ntnQosShapingParamsId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosShapingParamsId.setStatus('current')
ntnQosShapingParamsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosShapingParamsRate.setStatus('current')
ntnQosShapingParamsBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosShapingParamsBurstSize.setStatus('current')
ntnQosShapingParamsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePkt", 1), ("twoPkts", 2), ("fourPkts", 3), ("eightPkts", 4), ("sixteenPkts", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosShapingParamsQueueSize.setStatus('current')
ntnQosShapingParamsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosShapingParamsStorageType.setStatus('current')
ntnQosShapingParamsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosShapingParamsStatus.setStatus('current')
ntnQosShapingParamsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosShapingParamsLabel.setStatus('current')
ntnClassifierClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5))
ntnDsMultiFieldClfrNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrNextFree.setStatus('current')
ntnDsMultiFieldClfrTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2), )
if mibBuilder.loadTexts: ntnDsMultiFieldClfrTable.setStatus('current')
ntnDsMultiFieldClfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrId"))
if mibBuilder.loadTexts: ntnDsMultiFieldClfrEntry.setStatus('current')
ntnDsMultiFieldClfrId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnDsMultiFieldClfrId.setStatus('current')
ntnDsMultiFieldClfrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrAddrType.setStatus('current')
ntnDsMultiFieldClfrDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrDstAddr.setStatus('current')
ntnDsMultiFieldClfrDstPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 4), InetAddressPrefixLength()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrDstPrefixLength.setStatus('current')
ntnDsMultiFieldClfrSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 5), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrSrcAddr.setStatus('current')
ntnDsMultiFieldClfrSrcPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 6), InetAddressPrefixLength()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrSrcPrefixLength.setStatus('current')
ntnDsMultiFieldClfrDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 7), DscpOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrDscp.setStatus('current')
ntnDsMultiFieldClfrFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 8), FlowIdOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrFlowId.setStatus('current')
ntnDsMultiFieldClfrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrProtocol.setStatus('current')
ntnDsMultiFieldClfrDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 10), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrDstL4PortMin.setStatus('current')
ntnDsMultiFieldClfrDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 11), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrDstL4PortMax.setStatus('current')
ntnDsMultiFieldClfrSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 12), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrSrcL4PortMin.setStatus('current')
ntnDsMultiFieldClfrSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 13), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrSrcL4PortMax.setStatus('current')
ntnDsMultiFieldClfrStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 14), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrStorage.setStatus('current')
ntnDsMultiFieldClfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrStatus.setStatus('current')
ntnDsMultiFieldClfrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrLabel.setStatus('current')
ntnDsMultiFieldClfrSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrSessionId.setStatus('current')
ntnDsMultiFieldClfrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 18), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrVersion.setStatus('current')
ntnDsMultiFieldClfrIpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 19), Bits().clone(namedValues=NamedValues(("ipv4MfFlagSet", 0), ("ipv4DfFlagSet", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrIpFlags.setStatus('current')
ntnDsMultiFieldClfrTcpCtrlFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 20), Bits().clone(namedValues=NamedValues(("tcpUrgFlagSet", 0), ("tcpAckFlagSet", 1), ("tcpPshFlagSet", 2), ("tcpRstFlagSet", 3), ("tcpSynFlagSet", 4), ("tcpFinFlagSet", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrTcpCtrlFlags.setStatus('current')
ntnDsMultiFieldClfrIpv4Options = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4OptionsPresent", 1), ("ipv4OptionsNotPresent", 2), ("ignore", 3))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnDsMultiFieldClfrIpv4Options.setStatus('current')
ntnL2MultiFieldClfrNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 3), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrNextFree.setStatus('current')
ntnL2MultiFieldClfrTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4), )
if mibBuilder.loadTexts: ntnL2MultiFieldClfrTable.setStatus('current')
ntnL2MultiFieldClfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrId"))
if mibBuilder.loadTexts: ntnL2MultiFieldClfrEntry.setStatus('current')
ntnL2MultiFieldClfrId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnL2MultiFieldClfrId.setStatus('current')
ntnL2MultiFieldClfrDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrDstAddr.setStatus('current')
ntnL2MultiFieldClfrDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrDstAddrMask.setStatus('current')
ntnL2MultiFieldClfrSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 4), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrSrcAddr.setStatus('current')
ntnL2MultiFieldClfrSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrSrcAddrMask.setStatus('current')
ntnL2MultiFieldClfrVlanIdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrVlanIdMin.setStatus('current')
ntnL2MultiFieldClfrVlanIdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrVlanIdMax.setStatus('current')
ntnL2MultiFieldClfrVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("ignore", 3), ("doubleTagged", 4))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrVlanTag.setStatus('current')
ntnL2MultiFieldClfrEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrEtherType.setStatus('current')
ntnL2MultiFieldClfrUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("matchPriority0", 1), ("matchPriority1", 2), ("matchPriority2", 3), ("matchPriority3", 4), ("matchPriority4", 5), ("matchPriority5", 6), ("matchPriority6", 7), ("matchPriority7", 8), ("matchAllPriorities", 9))).clone('matchAllPriorities')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrUserPriority.setStatus('current')
ntnL2MultiFieldClfrStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrStorage.setStatus('current')
ntnL2MultiFieldClfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrStatus.setStatus('current')
ntnL2MultiFieldClfrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrLabel.setStatus('current')
ntnL2MultiFieldClfrSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrSessionId.setStatus('current')
ntnL2MultiFieldClfrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 15), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrVersion.setStatus('current')
ntnL2MultiFieldClfrPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("snap", 2), ("llc", 3), ("ignore", 4))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrPktType.setStatus('current')
ntnL2MultiFieldClfrIvidMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrIvidMin.setStatus('current')
ntnL2MultiFieldClfrIvidMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrIvidMax.setStatus('current')
ntnL2MultiFieldClfrTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrTPID.setStatus('current')
ntnL2MultiFieldClfrCFI = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cfiZero", 1), ("cfiOne", 2), ("ignore", 3))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrCFI.setStatus('current')
ntnL2MultiFieldClfrITPID = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrITPID.setStatus('current')
ntnL2MultiFieldClfrICFI = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cfiZero", 1), ("cfiOne", 2), ("ignore", 3))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrICFI.setStatus('current')
ntnL2MultiFieldClfrIUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("matchPriority0", 1), ("matchPriority1", 2), ("matchPriority2", 3), ("matchPriority3", 4), ("matchPriority4", 5), ("matchPriority5", 6), ("matchPriority6", 7), ("matchPriority7", 8), ("matchAllPriorities", 9))).clone('matchAllPriorities')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnL2MultiFieldClfrIUserPriority.setStatus('current')
ntnSystemClfrNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 5), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnSystemClfrNextFree.setStatus('current')
ntnSystemClfrTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6), )
if mibBuilder.loadTexts: ntnSystemClfrTable.setStatus('current')
ntnSystemClfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrId"))
if mibBuilder.loadTexts: ntnSystemClfrEntry.setStatus('current')
ntnSystemClfrId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnSystemClfrId.setStatus('current')
ntnSystemClfrUnknownUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrUnknownUcastFrames.setStatus('current')
ntnSystemClfrUnknownMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrUnknownMcastFrames.setStatus('current')
ntnSystemClfrKnownUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrKnownUcastFrames.setStatus('current')
ntnSystemClfrKnownMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrKnownMcastFrames.setStatus('current')
ntnSystemClfrBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrBcastFrames.setStatus('current')
ntnSystemClfrPatternPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrPatternPosition.setStatus('current')
ntnSystemClfrPatternData = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrPatternData.setStatus('current')
ntnSystemClfrStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrStorage.setStatus('current')
ntnSystemClfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrStatus.setStatus('current')
ntnSystemClfrPatternFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("doubleTagged", 3))).clone('tagged')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrPatternFormat.setStatus('current')
ntnSystemClfrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrLabel.setStatus('current')
ntnSystemClfrSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrSessionId.setStatus('current')
ntnSystemClfrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 14), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrVersion.setStatus('current')
ntnSystemClfrUnknownIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrUnknownIpMcast.setStatus('current')
ntnSystemClfrKnownIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrKnownIpMcast.setStatus('current')
ntnSystemClfrNonIpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrNonIpPkt.setStatus('current')
ntnSystemClfrPatternIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("nonIp", 2), ("ipv4", 3), ("ipv6", 4))).clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrPatternIpVersion.setStatus('current')
ntnSystemClfrUnknownNonIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrUnknownNonIpMcast.setStatus('current')
ntnSystemClfrKnownNonIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrKnownNonIpMcast.setStatus('current')
ntnSystemClfrPatternL2Format = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("ethernetII", 2), ("snap", 3), ("llc", 4))).clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnSystemClfrPatternL2Format.setStatus('current')
ntnClfrComponentNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 7), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnClfrComponentNextFree.setStatus('current')
ntnClfrComponentTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8), )
if mibBuilder.loadTexts: ntnClfrComponentTable.setStatus('current')
ntnClfrComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentId"))
if mibBuilder.loadTexts: ntnClfrComponentEntry.setStatus('current')
ntnClfrComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnClfrComponentId.setStatus('current')
ntnClfrComponentSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 2), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrComponentSpecific.setStatus('current')
ntnClfrComponentSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrComponentSetId.setStatus('current')
ntnClfrComponentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrComponentLabel.setStatus('current')
ntnClfrComponentStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrComponentStorage.setStatus('current')
ntnClfrComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrComponentStatus.setStatus('current')
ntnClfrComponentSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrComponentSessionId.setStatus('current')
ntnClfrComponentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 8, 1, 8), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrComponentVersion.setStatus('current')
ntnClfrBlockNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 9), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnClfrBlockNextFree.setStatus('current')
ntnClfrBlockTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10), )
if mibBuilder.loadTexts: ntnClfrBlockTable.setStatus('current')
ntnClfrBlockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockId"))
if mibBuilder.loadTexts: ntnClfrBlockEntry.setStatus('current')
ntnClfrBlockId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnClfrBlockId.setStatus('current')
ntnClfrBlockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockNumber.setStatus('current')
ntnClfrBlockClfrCompSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockClfrCompSetId.setStatus('current')
ntnClfrBlockMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 4), IndexIntegerOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockMeter.setStatus('current')
ntnClfrBlockAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 5), IndexIntegerOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockAction.setStatus('current')
ntnClfrBlockLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockLabel.setStatus('current')
ntnClfrBlockStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockStorage.setStatus('current')
ntnClfrBlockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockStatus.setStatus('current')
ntnClfrBlockSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockSessionId.setStatus('current')
ntnClfrBlockVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 10), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockVersion.setStatus('current')
ntnClfrBlockPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnClfrBlockPrecedence.setStatus('current')
ntnClfrComponentSetNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 11), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnClfrComponentSetNextFree.setStatus('current')
ntnClfrBlockNumberNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 5, 12), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnClfrBlockNumberNextFree.setStatus('current')
ntnQosMeterClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6))
ntnQosMeterNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosMeterNextFree.setStatus('current')
ntnQosMeterTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2), )
if mibBuilder.loadTexts: ntnQosMeterTable.setStatus('current')
ntnQosMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterId"))
if mibBuilder.loadTexts: ntnQosMeterEntry.setStatus('current')
ntnQosMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosMeterId.setStatus('current')
ntnQosMeterSucceedNext = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 2), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterSucceedNext.setStatus('current')
ntnQosMeterFailNext = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterFailNext.setStatus('current')
ntnQosMeterSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterSpecific.setStatus('current')
ntnQosMeterOutOfProfileStats = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 5), IndexIntegerOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterOutOfProfileStats.setStatus('current')
ntnQosMeterLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterLabel.setStatus('current')
ntnQosMeterStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterStorage.setStatus('current')
ntnQosMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterStatus.setStatus('current')
ntnQosMeterSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterSessionId.setStatus('current')
ntnQosMeterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 2, 1, 10), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosMeterVersion.setStatus('current')
ntnQosTBParamNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 3), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosTBParamNextFree.setStatus('current')
ntnQosTBParamTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4), )
if mibBuilder.loadTexts: ntnQosTBParamTable.setStatus('current')
ntnQosTBParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamId"))
if mibBuilder.loadTexts: ntnQosTBParamEntry.setStatus('current')
ntnQosTBParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosTBParamId.setStatus('current')
ntnQosTBParamType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 2), AutonomousType().clone((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamType.setStatus('current')
ntnQosTBParamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamRate.setStatus('current')
ntnQosTBParamBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 4), BurstSize()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamBurstSize.setStatus('current')
ntnQosTBParamInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamInterval.setStatus('current')
ntnQosTBParamLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamLabel.setStatus('current')
ntnQosTBParamStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamStorage.setStatus('current')
ntnQosTBParamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamStatus.setStatus('current')
ntnQosTBParamSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamSessionId.setStatus('current')
ntnQosTBParamVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 10), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamVersion.setStatus('current')
ntnQosTBParamMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosTBParamMinRate.setStatus('current')
ntnQosTBMeters = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5))
ntnQosTBParamSimpleTokenBucket = ObjectIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 1))
if mibBuilder.loadTexts: ntnQosTBParamSimpleTokenBucket.setStatus('current')
ntnQosTBParamAvgRate = ObjectIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 2))
if mibBuilder.loadTexts: ntnQosTBParamAvgRate.setStatus('current')
ntnQosTBParamSrTCMBlind = ObjectIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 3))
if mibBuilder.loadTexts: ntnQosTBParamSrTCMBlind.setStatus('current')
ntnQosTBParamSrTCMAware = ObjectIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 4))
if mibBuilder.loadTexts: ntnQosTBParamSrTCMAware.setStatus('current')
ntnQosTBParamTrTCMBlind = ObjectIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 5))
if mibBuilder.loadTexts: ntnQosTBParamTrTCMBlind.setStatus('current')
ntnQosTBParamTrTCMAware = ObjectIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 6))
if mibBuilder.loadTexts: ntnQosTBParamTrTCMAware.setStatus('current')
ntnQosTBParamTswTCM = ObjectIdentity((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 7))
if mibBuilder.loadTexts: ntnQosTBParamTswTCM.setStatus('current')
ntnQosActionClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7))
ntnQosBaseActionNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosBaseActionNextFree.setStatus('current')
ntnQosBaseActionTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2), )
if mibBuilder.loadTexts: ntnQosBaseActionTable.setStatus('current')
ntnQosBaseActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionId"))
if mibBuilder.loadTexts: ntnQosBaseActionEntry.setStatus('current')
ntnQosBaseActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosBaseActionId.setStatus('current')
ntnQosBaseActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("dontDrop", 2), ("deferredPass", 3))).clone('deferredPass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionDrop.setStatus('current')
ntnQosBaseActionUpdateDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 3), DscpUpdate().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionUpdateDscp.setStatus('current')
ntnQosBaseActionUpdateUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("deriveFromIngressTosPrec", 9), ("deriveFromIngressDscp", 10), ("deriveFromEgressDscp", 11), ("ignore", 12), ("markAsPriorityCopy", 13))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionUpdateUserPriority.setStatus('current')
ntnQosBaseActionSetDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionSetDropPrecedence.setStatus('current')
ntnQosBaseActionCopyToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionCopyToCpu.setStatus('current')
ntnQosBaseActionMirrorFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionMirrorFrame.setStatus('current')
ntnQosBaseActionExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 8), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionExtension.setStatus('current')
ntnQosBaseActionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionLabel.setStatus('current')
ntnQosBaseActionStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 10), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionStorage.setStatus('current')
ntnQosBaseActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionStatus.setStatus('current')
ntnQosBaseActionSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 2, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosBaseActionSessionId.setStatus('current')
ntnQosIfcActionNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 3), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosIfcActionNextFree.setStatus('current')
ntnQosIfcActionTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4), )
if mibBuilder.loadTexts: ntnQosIfcActionTable.setStatus('current')
ntnQosIfcActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionId"))
if mibBuilder.loadTexts: ntnQosIfcActionEntry.setStatus('current')
ntnQosIfcActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosIfcActionId.setStatus('current')
ntnQosIfcActionUpdateVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4094), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionUpdateVlanId.setStatus('current')
ntnQosIfcActionSetEgressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(64, 64), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionSetEgressMask.setStatus('current')
ntnQosIfcActionSetEgressUcastIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionSetEgressUcastIfc.setStatus('current')
ntnQosIfcActionSetEgressNUcastIfc = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionSetEgressNUcastIfc.setStatus('current')
ntnQosIfcActionExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 6), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionExtension.setStatus('current')
ntnQosIfcActionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionLabel.setStatus('current')
ntnQosIfcActionStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionStorage.setStatus('current')
ntnQosIfcActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionStatus.setStatus('current')
ntnQosIfcActionSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 7, 4, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfcActionSessionId.setStatus('current')
ntnQosPolicyClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8))
ntnQosPolicyNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyNextFree.setStatus('current')
ntnQosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2), )
if mibBuilder.loadTexts: ntnQosPolicyTable.setStatus('current')
ntnQosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyId"))
if mibBuilder.loadTexts: ntnQosPolicyEntry.setStatus('current')
ntnQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosPolicyId.setStatus('current')
ntnQosPolicyClassifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("individualClfr", 1), ("blockOfClfrs", 2), ("filterSetIndividualClfr", 3), ("filterSetBlockOfClfrs", 4))).clone('individualClfr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyClassifierType.setStatus('current')
ntnQosPolicyClassifierId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyClassifierId.setStatus('current')
ntnQosPolicyInterfaceRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 4), RoleCombination()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyInterfaceRoles.setStatus('current')
ntnQosPolicyPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyPrecedence.setStatus('current')
ntnQosPolicyMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 6), IndexIntegerOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyMeter.setStatus('current')
ntnQosPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 7), IndexIntegerOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyAction.setStatus('current')
ntnQosPolicyNonMatchAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 8), IndexIntegerOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyNonMatchAction.setStatus('current')
ntnQosPolicyLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyLabel.setStatus('current')
ntnQosPolicyStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 10), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyStorage.setStatus('current')
ntnQosPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyStatus.setStatus('current')
ntnQosPolicyStats = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 12), IndexIntegerOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyStats.setStatus('current')
ntnQosPolicyStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("individualClfr", 1), ("aggregateClfr", 2))).clone('aggregateClfr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyStatsType.setStatus('current')
ntnQosPolicyInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyInterfaceIndex.setStatus('current')
ntnQosPolicySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicySessionId.setStatus('current')
ntnQosPolicyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 16), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosPolicyVersion.setStatus('current')
ntnQosPolicyMeteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noMetering", 1), ("policyBasedMetering", 2), ("blockBasedMetering", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyMeteringMode.setStatus('current')
ntnQosCountActNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 3), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosCountActNextFree.setStatus('current')
ntnQosCountActTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4), )
if mibBuilder.loadTexts: ntnQosCountActTable.setStatus('current')
ntnQosCountActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosCountActId"))
if mibBuilder.loadTexts: ntnQosCountActEntry.setStatus('current')
ntnQosCountActId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosCountActId.setStatus('current')
ntnQosCountActOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosCountActOctets.setStatus('current')
ntnQosCountActPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosCountActPkts.setStatus('current')
ntnQosCountActStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCountActStorage.setStatus('current')
ntnQosCountActStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCountActStatus.setStatus('current')
ntnQosCountActSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 4, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCountActSessionId.setStatus('current')
ntnQosFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5), )
if mibBuilder.loadTexts: ntnQosFilterStatsTable.setStatus('current')
ntnQosFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsPolicyId"), (0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsFilterId"), (0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsInterfaceId"))
if mibBuilder.loadTexts: ntnQosFilterStatsEntry.setStatus('current')
ntnQosFilterStatsPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosFilterStatsPolicyId.setStatus('current')
ntnQosFilterStatsFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 2), IndexIntegerOrZero())
if mibBuilder.loadTexts: ntnQosFilterStatsFilterId.setStatus('current')
ntnQosFilterStatsInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosFilterStatsInterfaceId.setStatus('current')
ntnQosFilterStatsInProfileOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterStatsInProfileOctets.setStatus('current')
ntnQosFilterStatsInProfilePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterStatsInProfilePkts.setStatus('current')
ntnQosFilterStatsOutOfProfileOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterStatsOutOfProfileOctets.setStatus('current')
ntnQosFilterStatsOutOfProfilePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterStatsOutOfProfilePkts.setStatus('current')
ntnQosFilterStatsStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosFilterStatsStorage.setStatus('current')
ntnQosFilterStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 5, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosFilterStatsStatus.setStatus('current')
ntnQosPolicyDiagsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6), )
if mibBuilder.loadTexts: ntnQosPolicyDiagsTable.setStatus('current')
ntnQosPolicyDiagsMasksConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsMasksConsumed.setStatus('current')
ntnQosPolicyDiagsFiltersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsFiltersConsumed.setStatus('current')
ntnQosPolicyDiagsMetersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsMetersConsumed.setStatus('current')
ntnQosPolicyDiagsNonQosMasksConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsNonQosMasksConsumed.setStatus('current')
ntnQosPolicyDiagsNonQosFiltersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsNonQosFiltersConsumed.setStatus('current')
ntnQosPolicyDiagsNonQosMetersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsNonQosMetersConsumed.setStatus('current')
ntnQosPolicyDiagsCountersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsCountersConsumed.setStatus('current')
ntnQosPolicyDiagsTotalMasksAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsTotalMasksAvail.setStatus('current')
ntnQosPolicyDiagsTotalFiltersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsTotalFiltersAvail.setStatus('current')
ntnQosPolicyDiagsTotalMetersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsTotalMetersAvail.setStatus('current')
ntnQosPolicyDiagsTotalCountersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDiagsTotalCountersAvail.setStatus('current')
ntnQosPolicyPrecResDiagsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7), )
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsTable.setStatus('current')
ntnQosPolicyPrecResDiagsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsPrec"), (0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsInterface"))
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsEntry.setStatus('current')
ntnQosPolicyPrecResDiagsPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsPrec.setStatus('current')
ntnQosPolicyPrecResDiagsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsInterface.setStatus('current')
ntnQosPolicyPrecResDiagsKeysConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsKeysConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsFiltersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsFiltersConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsMetersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsMetersConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsNonQosKeysConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsNonQosKeysConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsNonQosFiltersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsNonQosFiltersConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsNonQosMetersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsNonQosMetersConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsCountersConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsCountersConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsTotalKeysAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsTotalKeysAvail.setStatus('current')
ntnQosPolicyPrecResDiagsTotalFiltersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsTotalFiltersAvail.setStatus('current')
ntnQosPolicyPrecResDiagsTotalMetersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsTotalMetersAvail.setStatus('current')
ntnQosPolicyPrecResDiagsTotalCountersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsTotalCountersAvail.setStatus('current')
ntnQosPolicyPrecResDiagsRangeChkElemsConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsRangeChkElemsConsumed.setStatus('current')
ntnQosPolicyPrecResDiagsApplicationIdUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsApplicationIdUsed.setStatus('current')
ntnQosPolicyPrecResDiagsApplicationNameUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsApplicationNameUsed.setStatus('current')
ntnQosPolicyPrecResDiagsRangeChkElemsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 7, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyPrecResDiagsRangeChkElemsAvail.setStatus('current')
ntnQosInterfaceClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9))
ntnQosIfAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1), )
if mibBuilder.loadTexts: ntnQosIfAssignmentTable.setStatus('current')
ntnQosIfAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAssignmentIfIndex"))
if mibBuilder.loadTexts: ntnQosIfAssignmentEntry.setStatus('current')
ntnQosPolicyDiagsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 8, 6, 1), )
ntnQosIfAssignmentEntry.registerAugmentions(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsEntry"))
ntnQosPolicyDiagsEntry.setIndexNames(*ntnQosIfAssignmentEntry.getIndexNames())
if mibBuilder.loadTexts: ntnQosPolicyDiagsEntry.setStatus('current')
ntnQosIfAssignmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosIfAssignmentIfIndex.setStatus('current')
ntnQosIfAssignmentRoleCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1, 1, 2), RoleCombination()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAssignmentRoleCombination.setStatus('current')
ntnQosIfAssignmentQueueSet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAssignmentQueueSet.setStatus('current')
ntnQosIfAssignmentStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAssignmentStorage.setStatus('current')
ntnQosIfAssignmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAssignmentStatus.setStatus('current')
ntnQosIfAssignmentCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 1, 1, 6), Bits().clone(namedValues=NamedValues(("other", 0), ("inputIpClassification", 1), ("outputIpClassification", 2), ("input802Classification", 3), ("output802Classification", 4), ("inputSystemClassification", 5), ("outputSystemClassification", 6), ("meteringRate1023", 7), ("meteringRate16383", 8), ("meteringBucket512K", 9), ("meteringBucket8192K", 10), ("meteringGranularity64Kbps", 11), ("meteringGranularity1000Kbps", 12), ("shapingRate1023", 13), ("shapingRate16383", 14), ("shapingBucket512K", 15), ("shapingBucket8192K", 16), ("shapingGranularity64Kbps", 17), ("shapingGranularity1000Kbps", 18), ("actionIPv6Remarking", 19), ("meteringTypeSimpleTb", 20), ("meteringTypeSrTcm", 21), ("meteringTypeTrTcm", 22), ("shapingTypeInterface", 23), ("shapingTypeCos", 24), ("version1Caps", 25), ("version2Caps", 26), ("meteringRate32767", 27), ("shapingRate32767", 28), ("meteringBucket16384K", 29), ("shapingBucket16384K", 30), ("dappSupport", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosIfAssignmentCapabilities.setStatus('current')
ntnQosIfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2), )
if mibBuilder.loadTexts: ntnQosIfQueueTable.setStatus('current')
ntnQosIfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueId"))
if mibBuilder.loadTexts: ntnQosIfQueueEntry.setStatus('current')
ntnQosIfQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosIfQueueId.setStatus('current')
ntnQosIfQueueSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueSetId.setStatus('current')
ntnQosIfQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueIndex.setStatus('current')
ntnQosIfQueueDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fifo", 1), ("pq", 2), ("fq", 3), ("wfq", 4), ("wrr", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueDiscipline.setStatus('current')
ntnQosIfQueueDrainSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueDrainSize.setStatus('current')
ntnQosIfQueueAbsBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueAbsBandwidth.setStatus('current')
ntnQosIfQueueBandwidthAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("relative", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueBandwidthAllocation.setStatus('current')
ntnQosIfQueueServiceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueServiceOrder.setStatus('current')
ntnQosIfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueSize.setStatus('current')
ntnQosIfQueueStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 10), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueStorage.setStatus('current')
ntnQosIfQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfQueueStatus.setStatus('current')
ntnQosInterfaceRoleNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 3), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosInterfaceRoleNextFree.setStatus('current')
ntnQosInterfaceRoleTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4), )
if mibBuilder.loadTexts: ntnQosInterfaceRoleTable.setStatus('current')
ntnQosInterfaceRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleId"))
if mibBuilder.loadTexts: ntnQosInterfaceRoleEntry.setStatus('current')
ntnQosInterfaceRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosInterfaceRoleId.setStatus('current')
ntnQosInterfaceRoleRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1, 2), Role()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceRoleRole.setStatus('current')
ntnQosInterfaceRoleIfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("trusted", 1), ("nonTrusted", 2), ("unrestricted", 3), ("untrustedv4v6", 4), ("untrustedBasic", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceRoleIfClass.setStatus('current')
ntnQosInterfaceRoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1, 4), Bits().clone(namedValues=NamedValues(("other", 0), ("inputIpClassification", 1), ("outputIpClassification", 2), ("input802Classification", 3), ("output802Classification", 4), ("inputSystemClassification", 5), ("outputSystemClassification", 6), ("meteringRate1023", 7), ("meteringRate16383", 8), ("meteringBucket512K", 9), ("meteringBucket8192K", 10), ("meteringGranularity64Kbps", 11), ("meteringGranularity1000Kbps", 12), ("shapingRate1023", 13), ("shapingRate16383", 14), ("shapingBucket512K", 15), ("shapingBucket8192K", 16), ("shapingGranularity64Kbps", 17), ("shapingGranularity1000Kbps", 18), ("actionIPv6Remarking", 19), ("meteringTypeSimpleTb", 20), ("meteringTypeSrTcm", 21), ("meteringTypeTrTcm", 22), ("shapingTypeInterface", 23), ("shapingTypeCos", 24), ("version1Caps", 25), ("version2Caps", 26), ("meteringRate32767", 27), ("shapingRate32767", 28), ("meteringBucket16384K", 29), ("shapingBucket16384K", 30)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceRoleCapabilities.setStatus('current')
ntnQosInterfaceRoleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceRoleStorageType.setStatus('current')
ntnQosInterfaceRoleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosInterfaceRoleStatus.setStatus('current')
ntnQosInterfaceRoleStatsTrackingType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("individual", 2), ("aggregate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosInterfaceRoleStatsTrackingType.setStatus('current')
ntnQosUserRoleTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5), )
if mibBuilder.loadTexts: ntnQosUserRoleTable.setStatus('current')
ntnQosUserRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleIfIndex"))
if mibBuilder.loadTexts: ntnQosUserRoleEntry.setStatus('current')
ntnQosUserRoleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosUserRoleIfIndex.setStatus('current')
ntnQosUserRoleRoleCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 2), RoleCombination()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserRoleRoleCombination.setStatus('current')
ntnQosUserRoleUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserRoleUserName.setStatus('current')
ntnQosUserRoleUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserRoleUserGroup.setStatus('current')
ntnQosUserRoleSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosUserRoleSessionId.setStatus('current')
ntnQosUserRoleSessionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosUserRoleSessionStart.setStatus('current')
ntnQosUserRoleSessionGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosUserRoleSessionGroup.setStatus('current')
ntnQosUserRoleStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 8), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserRoleStorage.setStatus('current')
ntnQosUserRoleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 5, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserRoleStatus.setStatus('current')
ntnQosIfShapingTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 6), )
if mibBuilder.loadTexts: ntnQosIfShapingTable.setStatus('current')
ntnQosIfShapingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 6, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfShapingIfIndex"))
if mibBuilder.loadTexts: ntnQosIfShapingEntry.setStatus('current')
ntnQosIfShapingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosIfShapingIfIndex.setStatus('current')
ntnQosIfShapingSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 6, 1, 2), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfShapingSpecific.setStatus('current')
ntnQosIfShapingLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 6, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfShapingLabel.setStatus('current')
ntnQosIfShapingStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 6, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfShapingStorage.setStatus('current')
ntnQosIfShapingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfShapingStatus.setStatus('current')
ntnQosCosShapingTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7), )
if mibBuilder.loadTexts: ntnQosCosShapingTable.setStatus('current')
ntnQosCosShapingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosShapingIfIndex"), (0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosShapingCos"))
if mibBuilder.loadTexts: ntnQosCosShapingEntry.setStatus('current')
ntnQosCosShapingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosCosShapingIfIndex.setStatus('current')
ntnQosCosShapingCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7, 1, 2), QosIeee802Cos())
if mibBuilder.loadTexts: ntnQosCosShapingCos.setStatus('current')
ntnQosCosShapingSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosShapingSpecific.setStatus('current')
ntnQosCosShapingLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosShapingLabel.setStatus('current')
ntnQosCosShapingStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosShapingStorage.setStatus('current')
ntnQosCosShapingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosShapingStatus.setStatus('current')
ntnQosQueueShapingTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8), )
if mibBuilder.loadTexts: ntnQosQueueShapingTable.setStatus('current')
ntnQosQueueShapingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosQueueShapingIfIndex"), (0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosQueueShapingQueue"))
if mibBuilder.loadTexts: ntnQosQueueShapingEntry.setStatus('current')
ntnQosQueueShapingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosQueueShapingIfIndex.setStatus('current')
ntnQosQueueShapingQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: ntnQosQueueShapingQueue.setStatus('current')
ntnQosQueueShapingSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQueueShapingSpecific.setStatus('current')
ntnQosQueueShapingLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQueueShapingLabel.setStatus('current')
ntnQosQueueShapingStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQueueShapingStorage.setStatus('current')
ntnQosQueueShapingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 9, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosQueueShapingStatus.setStatus('current')
ntnQosMappingClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10))
ntnQosDscpToCosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1), )
if mibBuilder.loadTexts: ntnQosDscpToCosTable.setStatus('current')
ntnQosDscpToCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosId"))
if mibBuilder.loadTexts: ntnQosDscpToCosEntry.setStatus('current')
ntnQosDscpToCosId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosDscpToCosId.setStatus('current')
ntnQosDscpToCosDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 2), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDscpToCosDscp.setStatus('current')
ntnQosDscpToCosCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 3), QosIeee802Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDscpToCosCos.setStatus('current')
ntnQosDscpToCosDropPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDscpToCosDropPrec.setStatus('current')
ntnQosDscpToCosLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDscpToCosLabel.setStatus('current')
ntnQosDscpToCosStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDscpToCosStorage.setStatus('current')
ntnQosDscpToCosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDscpToCosStatus.setStatus('current')
ntnQosDscpToCosNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 1, 1, 8), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDscpToCosNewDscp.setStatus('current')
ntnQosCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2), )
if mibBuilder.loadTexts: ntnQosCosToDscpTable.setStatus('current')
ntnQosCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosToDscpId"))
if mibBuilder.loadTexts: ntnQosCosToDscpEntry.setStatus('current')
ntnQosCosToDscpId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosCosToDscpId.setStatus('current')
ntnQosCosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2, 1, 2), QosIeee802Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosToDscpCos.setStatus('current')
ntnQosCosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2, 1, 3), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosToDscpDscp.setStatus('current')
ntnQosCosToDscpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosToDscpLabel.setStatus('current')
ntnQosCosToDscpStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosToDscpStorage.setStatus('current')
ntnQosCosToDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosCosToDscpStatus.setStatus('current')
ntnQosMappingClassesScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 3))
ntnQosMappingRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dscpToCos", 2), ("cosToDscp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosMappingRestoreDefault.setStatus('current')
ntnQosMappingDscpToCosEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosMappingDscpToCosEnabled.setStatus('current')
ntnQosMappingCosToDscpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 10, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosMappingCosToDscpEnabled.setStatus('current')
ntnQosPolicyAgtClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11))
ntnQosPrcSupportTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 1), )
if mibBuilder.loadTexts: ntnQosPrcSupportTable.setStatus('current')
ntnQosPrcSupportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 1, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosPrcSupportId"))
if mibBuilder.loadTexts: ntnQosPrcSupportEntry.setStatus('current')
ntnQosPrcSupportId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 1, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosPrcSupportId.setStatus('current')
ntnQosPrcSupportSupportedPrc = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPrcSupportSupportedPrc.setStatus('current')
ntnQosPrcSupportSupportedAttrs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPrcSupportSupportedAttrs.setStatus('current')
ntnQosPrcSupportMaxPris = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPrcSupportMaxPris.setStatus('current')
ntnQosPrcSupportCurrentPris = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPrcSupportCurrentPris.setStatus('current')
ntnQosPolicyDeviceIdentTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 2), )
if mibBuilder.loadTexts: ntnQosPolicyDeviceIdentTable.setStatus('current')
ntnQosPolicyDeviceIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDeviceIdentId"))
if mibBuilder.loadTexts: ntnQosPolicyDeviceIdentEntry.setStatus('current')
ntnQosPolicyDeviceIdentId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosPolicyDeviceIdentId.setStatus('current')
ntnQosPolicyDeviceIdentDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDeviceIdentDescr.setStatus('current')
ntnQosPolicyDeviceIdentMaxMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosPolicyDeviceIdentMaxMsg.setStatus('current')
ntnQosInterfaceTypeNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 12), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosInterfaceTypeNextFree.setStatus('current')
ntnQosApplicationClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13))
ntnQosDsAccessElemNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosDsAccessElemNextFree.setStatus('current')
ntnQosDsAccessElemTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2), )
if mibBuilder.loadTexts: ntnQosDsAccessElemTable.setStatus('current')
ntnQosDsAccessElemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemId"))
if mibBuilder.loadTexts: ntnQosDsAccessElemEntry.setStatus('current')
ntnQosDsAccessElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosDsAccessElemId.setStatus('current')
ntnQosDsAccessElemAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemAddrType.setStatus('current')
ntnQosDsAccessElemDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemDstAddr.setStatus('current')
ntnQosDsAccessElemDstPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 4), InetAddressPrefixLength()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemDstPrefixLength.setStatus('current')
ntnQosDsAccessElemSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 5), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemSrcAddr.setStatus('current')
ntnQosDsAccessElemSrcPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 6), InetAddressPrefixLength()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemSrcPrefixLength.setStatus('current')
ntnQosDsAccessElemDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 7), DscpOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemDscp.setStatus('current')
ntnQosDsAccessElemFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 8), FlowIdOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemFlowId.setStatus('current')
ntnQosDsAccessElemProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemProtocol.setStatus('current')
ntnQosDsAccessElemDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 10), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemDstL4PortMin.setStatus('current')
ntnQosDsAccessElemDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 11), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemDstL4PortMax.setStatus('current')
ntnQosDsAccessElemSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 12), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemSrcL4PortMin.setStatus('current')
ntnQosDsAccessElemSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 13), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemSrcL4PortMax.setStatus('current')
ntnQosDsAccessElemActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemActionDrop.setStatus('current')
ntnQosDsAccessElemActionRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemActionRemarkDscp.setStatus('current')
ntnQosDsAccessElemActionRemarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("ignore", 9))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemActionRemarkCos.setStatus('current')
ntnQosDsAccessElemActionSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemActionSetPrec.setStatus('current')
ntnQosDsAccessElemName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemName.setStatus('current')
ntnQosDsAccessElemBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemBlock.setStatus('current')
ntnQosDsAccessElemType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsAcl", 1), ("dsAppClfr", 2), ("dsMultimediaClfr", 3), ("dsUserDefinedClfr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemType.setStatus('current')
ntnQosDsAccessElemStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 21), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemStorage.setStatus('current')
ntnQosDsAccessElemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemStatus.setStatus('current')
ntnQosDsAccessElemEvalPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsAccessElemEvalPrec.setStatus('current')
ntnQosL2AccessElemNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 3), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosL2AccessElemNextFree.setStatus('current')
ntnQosL2AccessElemTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4), )
if mibBuilder.loadTexts: ntnQosL2AccessElemTable.setStatus('current')
ntnQosL2AccessElemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemId"))
if mibBuilder.loadTexts: ntnQosL2AccessElemEntry.setStatus('current')
ntnQosL2AccessElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosL2AccessElemId.setStatus('current')
ntnQosL2AccessElemDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemDstAddr.setStatus('current')
ntnQosL2AccessElemDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemDstAddrMask.setStatus('current')
ntnQosL2AccessElemSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 4), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemSrcAddr.setStatus('current')
ntnQosL2AccessElemSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemSrcAddrMask.setStatus('current')
ntnQosL2AccessElemVlanIdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemVlanIdMin.setStatus('current')
ntnQosL2AccessElemVlanIdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemVlanIdMax.setStatus('current')
ntnQosL2AccessElemVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("ignore", 3))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemVlanTag.setStatus('current')
ntnQosL2AccessElemEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemEtherType.setStatus('current')
ntnQosL2AccessElemUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("matchPriority0", 1), ("matchPriority1", 2), ("matchPriority2", 3), ("matchPriority3", 4), ("matchPriority4", 5), ("matchPriority5", 6), ("matchPriority6", 7), ("matchPriority7", 8), ("matchAllPriorities", 9))).clone('matchAllPriorities')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemUserPriority.setStatus('current')
ntnQosL2AccessElemActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemActionDrop.setStatus('current')
ntnQosL2AccessElemActionRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemActionRemarkDscp.setStatus('current')
ntnQosL2AccessElemActionRemarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("ignore", 9))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemActionRemarkCos.setStatus('current')
ntnQosL2AccessElemActionSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemActionSetPrec.setStatus('current')
ntnQosL2AccessElemName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemName.setStatus('current')
ntnQosL2AccessElemBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemBlock.setStatus('current')
ntnQosL2AccessElemType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("l2Acl", 1), ("l2AppClfr", 2), ("l2MultimediaClfr", 3), ("l2UserDefinedClfr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemType.setStatus('current')
ntnQosL2AccessElemStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 18), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemStorage.setStatus('current')
ntnQosL2AccessElemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemStatus.setStatus('current')
ntnQosL2AccessElemEvalPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 4, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosL2AccessElemEvalPrec.setStatus('current')
ntnQosAccessAsgnNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 5), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosAccessAsgnNextFree.setStatus('current')
ntnQosAccessAsgnTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6), )
if mibBuilder.loadTexts: ntnQosAccessAsgnTable.setStatus('current')
ntnQosAccessAsgnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnId"))
if mibBuilder.loadTexts: ntnQosAccessAsgnEntry.setStatus('current')
ntnQosAccessAsgnId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosAccessAsgnId.setStatus('current')
ntnQosAccessAsgnAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dsAcl", 1), ("l2Acl", 2), ("dsAppClfr", 3), ("l2AppClfr", 4), ("dsUserDefinedClfr", 5), ("l2UserDefinedClfr", 6), ("multimediaClfr", 7), ("dsL2NsnaClfr", 8), ("dsL2UbpClfr", 9), ("dsL2TrafficProfile", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnAclType.setStatus('current')
ntnQosAccessAsgnName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnName.setStatus('current')
ntnQosAccessAsgnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnIfIndex.setStatus('current')
ntnQosAccessAsgnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnRate.setStatus('current')
ntnQosAccessAsgnBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 6), BurstSize()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnBurstSize.setStatus('current')
ntnQosAccessAsgnOutActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnOutActionDrop.setStatus('current')
ntnQosAccessAsgnOutActionRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnOutActionRemarkDscp.setStatus('current')
ntnQosAccessAsgnOutActionRemarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("ignore", 9), ("deriveFromEgressDscp", 10), ("deriveFromIngressTosPrec", 11))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnOutActionRemarkCos.setStatus('current')
ntnQosAccessAsgnOutActionSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnOutActionSetPrec.setStatus('current')
ntnQosAccessAsgnStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("individualClfr", 1), ("aggregateClfr", 2), ("noStatsTracking", 3))).clone('aggregateClfr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnStatsType.setStatus('current')
ntnQosAccessAsgnStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 12), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnStorage.setStatus('current')
ntnQosAccessAsgnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnStatus.setStatus('current')
ntnQosAccessAsgnNonMatchActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2), ("defer", 3))).clone('defer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnNonMatchActionDrop.setStatus('current')
ntnQosAccessAsgnMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 15), AutonomousType().clone((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 6, 5, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnMeterType.setStatus('current')
ntnQosAccessAsgnSecondaryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnSecondaryRate.setStatus('current')
ntnQosAccessAsgnSecondaryBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 17), BurstSize()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnSecondaryBurstSize.setStatus('current')
ntnQosAccessAsgnYelActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnYelActionDrop.setStatus('current')
ntnQosAccessAsgnYelActionRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnYelActionRemarkDscp.setStatus('current')
ntnQosAccessAsgnYelActionRemarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("ignore", 9))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnYelActionRemarkCos.setStatus('current')
ntnQosAccessAsgnYelActionSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnYelActionSetPrec.setStatus('current')
ntnQosAccessAsgnSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnSetPriority.setStatus('current')
ntnQosAccessAsgnMeteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noMetering", 1), ("perPolicyUniformRateMetering", 2), ("perPolicyIndividualRateMetering", 3), ("perClassifierMetering", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosAccessAsgnMeteringMode.setStatus('current')
ntnQosIfAppsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7), )
if mibBuilder.loadTexts: ntnQosIfAppsTable.setStatus('current')
ntnQosIfAppsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAppsIfIndex"))
if mibBuilder.loadTexts: ntnQosIfAppsEntry.setStatus('current')
ntnQosIfAppsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosIfAppsIfIndex.setStatus('current')
ntnQosIfAppsAppEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1, 2), Bits().clone(namedValues=NamedValues(("other", 0), ("arpSpoofing", 1), ("dhcpSnooping", 2), ("dhcpSpoofing", 3), ("sqlSlam", 4), ("nachia", 5), ("xmas", 6), ("synFinScan", 7), ("ftpPort", 8), ("dnsPort", 9), ("bpduBlocker", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAppsAppEnable.setStatus('current')
ntnQosIfAppsDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1, 3), InetAddressIPv4().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAppsDefaultGateway.setStatus('current')
ntnQosIfAppsIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("core", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAppsIfType.setStatus('current')
ntnQosIfAppsDHCPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1, 5), InetAddressIPv4().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAppsDHCPServer.setStatus('current')
ntnQosIfAppsStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAppsStorage.setStatus('current')
ntnQosIfAppsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 7, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosIfAppsStatus.setStatus('current')
ntnQosUserPolicyNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 8), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosUserPolicyNextFree.setStatus('current')
ntnQosUserPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9), )
if mibBuilder.loadTexts: ntnQosUserPolicyTable.setStatus('current')
ntnQosUserPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyId"))
if mibBuilder.loadTexts: ntnQosUserPolicyEntry.setStatus('current')
ntnQosUserPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosUserPolicyId.setStatus('current')
ntnQosUserPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicyIfIndex.setStatus('current')
ntnQosUserPolicyRoleCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 3), RoleCombination()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicyRoleCombination.setStatus('current')
ntnQosUserPolicyUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicyUserName.setStatus('current')
ntnQosUserPolicyUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicyUserGroup.setStatus('current')
ntnQosUserPolicySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosUserPolicySessionId.setStatus('current')
ntnQosUserPolicySessionStart = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosUserPolicySessionStart.setStatus('current')
ntnQosUserPolicySessionGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosUserPolicySessionGroup.setStatus('current')
ntnQosUserPolicyStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 9), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicyStorage.setStatus('current')
ntnQosUserPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicyStatus.setStatus('current')
ntnQosUserPolicySrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicySrcMacAddr.setStatus('current')
ntnQosUserPolicySrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 9, 1, 12), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosUserPolicySrcMacAddrMask.setStatus('current')
ntnQosDsL2AccessElemNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 10), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemNextFree.setStatus('current')
ntnQosDsL2AccessElemTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11), )
if mibBuilder.loadTexts: ntnQosDsL2AccessElemTable.setStatus('current')
ntnQosDsL2AccessElemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemId"))
if mibBuilder.loadTexts: ntnQosDsL2AccessElemEntry.setStatus('current')
ntnQosDsL2AccessElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosDsL2AccessElemId.setStatus('current')
ntnQosDsL2AccessElemAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemAddrType.setStatus('current')
ntnQosDsL2AccessElemDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemDstIpAddr.setStatus('current')
ntnQosDsL2AccessElemDstIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 4), InetAddressPrefixLength()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemDstIpPrefixLength.setStatus('current')
ntnQosDsL2AccessElemSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 5), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSrcIpAddr.setStatus('current')
ntnQosDsL2AccessElemSrcIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 6), InetAddressPrefixLength()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSrcIpPrefixLength.setStatus('current')
ntnQosDsL2AccessElemDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 7), DscpOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemDscp.setStatus('current')
ntnQosDsL2AccessElemFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 8), FlowIdOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemFlowId.setStatus('current')
ntnQosDsL2AccessElemProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemProtocol.setStatus('current')
ntnQosDsL2AccessElemDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 10), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemDstL4PortMin.setStatus('current')
ntnQosDsL2AccessElemDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 11), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemDstL4PortMax.setStatus('current')
ntnQosDsL2AccessElemSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 12), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSrcL4PortMin.setStatus('current')
ntnQosDsL2AccessElemSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 13), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSrcL4PortMax.setStatus('current')
ntnQosDsL2AccessElemDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 14), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemDstMacAddr.setStatus('current')
ntnQosDsL2AccessElemDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 15), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemDstMacAddrMask.setStatus('current')
ntnQosDsL2AccessElemSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 16), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSrcMacAddr.setStatus('current')
ntnQosDsL2AccessElemSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 17), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSrcMacAddrMask.setStatus('current')
ntnQosDsL2AccessElemVlanIdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemVlanIdMin.setStatus('current')
ntnQosDsL2AccessElemVlanIdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemVlanIdMax.setStatus('current')
ntnQosDsL2AccessElemVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("ignore", 3), ("doubleTagged", 4))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemVlanTag.setStatus('current')
ntnQosDsL2AccessElemEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemEtherType.setStatus('current')
ntnQosDsL2AccessElemUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("matchPriority0", 1), ("matchPriority1", 2), ("matchPriority2", 3), ("matchPriority3", 4), ("matchPriority4", 5), ("matchPriority5", 6), ("matchPriority6", 7), ("matchPriority7", 8), ("matchAllPriorities", 9))).clone('matchAllPriorities')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemUserPriority.setStatus('current')
ntnQosDsL2AccessElemActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemActionDrop.setStatus('current')
ntnQosDsL2AccessElemActionRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemActionRemarkDscp.setStatus('current')
ntnQosDsL2AccessElemActionRemarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("ignore", 9), ("deriveFromEgressDscp", 10), ("deriveFromIngressTosPrec", 11))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemActionRemarkCos.setStatus('current')
ntnQosDsL2AccessElemActionSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemActionSetPrec.setStatus('current')
ntnQosDsL2AccessElemName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemName.setStatus('current')
ntnQosDsL2AccessElemBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemBlock.setStatus('current')
ntnQosDsL2AccessElemType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dsL2NsnaClfr", 1), ("dsL2UbpClfr", 2), ("dsL2TrafficProfile", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemType.setStatus('current')
ntnQosDsL2AccessElemStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 30), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemStorage.setStatus('current')
ntnQosDsL2AccessElemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemStatus.setStatus('current')
ntnQosDsL2AccessElemEvalPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemEvalPrec.setStatus('current')
ntnQosDsL2AccessElemIpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 33), Bits().clone(namedValues=NamedValues(("ipv4MfFlagSet", 0), ("ipv4DfFlagSet", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemIpFlags.setStatus('current')
ntnQosDsL2AccessElemTcpCtrlFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 34), Bits().clone(namedValues=NamedValues(("tcpUrgFlagSet", 0), ("tcpAckFlagSet", 1), ("tcpPshFlagSet", 2), ("tcpRstFlagSet", 3), ("tcpSynFlagSet", 4), ("tcpFinFlagSet", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemTcpCtrlFlags.setStatus('current')
ntnQosDsL2AccessElemIpv4Options = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4OptionsPresent", 1), ("ipv4OptionsNotPresent", 2), ("ignore", 3))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemIpv4Options.setStatus('current')
ntnQosDsL2AccessElemPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("snap", 2), ("llc", 3), ("ignore", 4))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemPktType.setStatus('current')
ntnQosDsL2AccessElemIvidMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemIvidMin.setStatus('current')
ntnQosDsL2AccessElemIvidMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemIvidMax.setStatus('current')
ntnQosDsL2AccessElemUnknownUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 39), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemUnknownUcastFrames.setStatus('current')
ntnQosDsL2AccessElemUnknownMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 40), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemUnknownMcastFrames.setStatus('current')
ntnQosDsL2AccessElemKnownUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 41), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemKnownUcastFrames.setStatus('current')
ntnQosDsL2AccessElemKnownMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 42), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemKnownMcastFrames.setStatus('current')
ntnQosDsL2AccessElemBcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 43), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemBcastFrames.setStatus('current')
ntnQosDsL2AccessElemUnknownIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 44), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemUnknownIpMcast.setStatus('current')
ntnQosDsL2AccessElemKnownIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 45), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemKnownIpMcast.setStatus('current')
ntnQosDsL2AccessElemNonIpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 46), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemNonIpPkt.setStatus('current')
ntnQosDsL2AccessElemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 47), VersionIndicator().clone('version1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemVersion.setStatus('current')
ntnQosDsL2AccessElemUnknownNonIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 48), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemUnknownNonIpMcast.setStatus('current')
ntnQosDsL2AccessElemKnownNonIpMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 49), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemKnownNonIpMcast.setStatus('current')
ntnQosDsL2AccessElemMasterBlockMember = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 50), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemMasterBlockMember.setStatus('current')
ntnQosDsL2AccessElemMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("simpleTokenBucket", 1), ("srTCMBlind", 2), ("srTCMAware", 3), ("trTCMBlind", 4), ("trTCMAware", 5))).clone('simpleTokenBucket')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemMeterType.setStatus('current')
ntnQosDsL2AccessElemRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemRate.setStatus('current')
ntnQosDsL2AccessElemBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 53), BurstSize()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemBurstSize.setStatus('current')
ntnQosDsL2AccessElemOutActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemOutActionDrop.setStatus('current')
ntnQosDsL2AccessElemOutActionRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemOutActionRemarkDscp.setStatus('current')
ntnQosDsL2AccessElemOutActionRemarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("ignore", 9), ("deriveFromEgressDscp", 10), ("deriveFromIngressTosPrec", 11))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemOutActionRemarkCos.setStatus('current')
ntnQosDsL2AccessElemOutActionSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemOutActionSetPrec.setStatus('current')
ntnQosDsL2AccessElemSecondaryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSecondaryRate.setStatus('current')
ntnQosDsL2AccessElemSecondaryBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 59), BurstSize()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemSecondaryBurstSize.setStatus('current')
ntnQosDsL2AccessElemYelActionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("pass", 2))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemYelActionDrop.setStatus('current')
ntnQosDsL2AccessElemYelActionRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemYelActionRemarkDscp.setStatus('current')
ntnQosDsL2AccessElemYelActionRemarkCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("markAsPriority0", 1), ("markAsPriority1", 2), ("markAsPriority2", 3), ("markAsPriority3", 4), ("markAsPriority4", 5), ("markAsPriority5", 6), ("markAsPriority6", 7), ("markAsPriority7", 8), ("ignore", 9), ("deriveFromEgressDscp", 10), ("deriveFromIngressTosPrec", 11))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemYelActionRemarkCos.setStatus('current')
ntnQosDsL2AccessElemYelActionSetPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 11, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowDropPrec", 1), ("highDropPrec", 2))).clone('lowDropPrec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosDsL2AccessElemYelActionSetPrec.setStatus('current')
ntnQosFilterSetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12), )
if mibBuilder.loadTexts: ntnQosFilterSetStatsTable.setStatus('current')
ntnQosFilterSetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsAccessAsgnId"), (0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsPrecedence"), (0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsEvalOrder"))
if mibBuilder.loadTexts: ntnQosFilterSetStatsEntry.setStatus('current')
ntnQosFilterSetStatsAccessAsgnId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 1), IndexInteger())
if mibBuilder.loadTexts: ntnQosFilterSetStatsAccessAsgnId.setStatus('current')
ntnQosFilterSetStatsPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 2), IndexInteger())
if mibBuilder.loadTexts: ntnQosFilterSetStatsPrecedence.setStatus('current')
ntnQosFilterSetStatsEvalOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 3), IndexInteger())
if mibBuilder.loadTexts: ntnQosFilterSetStatsEvalOrder.setStatus('current')
ntnQosFilterSetStatsInProfileOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterSetStatsInProfileOctets.setStatus('current')
ntnQosFilterSetStatsInProfilePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterSetStatsInProfilePkts.setStatus('current')
ntnQosFilterSetStatsOutOfProfileOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterSetStatsOutOfProfileOctets.setStatus('current')
ntnQosFilterSetStatsOutOfProfilePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterSetStatsOutOfProfilePkts.setStatus('current')
ntnQosFilterSetStatsAccessElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosFilterSetStatsAccessElemId.setStatus('current')
ntnQosFilterSetStatsStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosFilterSetStatsStorage.setStatus('current')
ntnQosFilterSetStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 12, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntnQosFilterSetStatsStatus.setStatus('current')
avFcoeRedirNextFree = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 13), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avFcoeRedirNextFree.setStatus('current')
avFcoeRedirTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14), )
if mibBuilder.loadTexts: avFcoeRedirTable.setStatus('current')
avFcoeRedirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirId"))
if mibBuilder.loadTexts: avFcoeRedirEntry.setStatus('current')
avFcoeRedirId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 1), IndexInteger())
if mibBuilder.loadTexts: avFcoeRedirId.setStatus('current')
avFcoeRedirDstId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 2), FcId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirDstId.setStatus('current')
avFcoeRedirIngressInterfaceList = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 3), InterfaceList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirIngressInterfaceList.setStatus('current')
avFcoeRedirVlanIdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirVlanIdMin.setStatus('current')
avFcoeRedirVlanIdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirVlanIdMax.setStatus('current')
avFcoeRedirUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("matchPriority0", 1), ("matchPriority1", 2), ("matchPriority2", 3), ("matchPriority3", 4), ("matchPriority4", 5), ("matchPriority5", 6), ("matchPriority6", 7), ("matchPriority7", 8), ("matchAllPriorities", 9))).clone('matchAllPriorities')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirUserPriority.setStatus('current')
avFcoeRedirEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(35078)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirEtherType.setStatus('current')
avFcoeRedirSrcId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 8), FcId().clone(hexValue="000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirSrcId.setStatus('current')
avFcoeRedirActionUpdateDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirActionUpdateDstMac.setStatus('current')
avFcoeRedirActionUpdateSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirActionUpdateSrcMac.setStatus('current')
avFcoeRedirActionEgressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirActionEgressInterface.setStatus('current')
avFcoeRedirName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirName.setStatus('current')
avFcoeRedirStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 13), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirStorage.setStatus('current')
avFcoeRedirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirStatus.setStatus('current')
avFcoeRedirProcessedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avFcoeRedirProcessedFrames.setStatus('current')
avFcoeRedirActionEgressTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 13, 14, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avFcoeRedirActionEgressTrunkId.setStatus('current')
ntnQosDEITable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 14), )
if mibBuilder.loadTexts: ntnQosDEITable.setStatus('current')
ntnQosDEIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 14, 1), ).setIndexNames((0, "NTN-QOS-POLICY-EVOL-PIB", "ntnQosDEIInterfaceId"))
if mibBuilder.loadTexts: ntnQosDEIEntry.setStatus('current')
ntnQosDEIInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ntnQosDEIInterfaceId.setStatus('current')
ntnQosDEIIngressColorFromDEI = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 14, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosDEIIngressColorFromDEI.setStatus('current')
ntnQosDEIEgressMarkDEI = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 14, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosDEIEgressMarkDEI.setStatus('current')
ntnQosConfigResetToDefaults = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigResetToDefaults.setStatus('current')
ntnQosConfigTrackStatistics = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("individual", 2), ("aggregate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigTrackStatistics.setStatus('current')
ntnQosConfigNVCommitDelay = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigNVCommitDelay.setStatus('current')
ntnQosConfigDefaultQueueCfg = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("queueSetOne", 1), ("queueSetTwo", 2), ("queueSetThree", 3), ("queueSetFour", 4), ("queueSetFive", 5), ("queueSetSix", 6), ("queueSetSeven", 7), ("queueSetEight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigDefaultQueueCfg.setStatus('current')
ntnQosConfigDefaultBufferingCaps = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("minimumOverAllocation", 1), ("mediumOverAllocation", 2), ("maximumOverAllocation", 3), ("lossless", 4), ("losslessPfc", 5), ("spb-scaled", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigDefaultBufferingCaps.setStatus('current')
ntnQosConfigUBPSupportLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ubpSupportDisabled", 1), ("ubpSupportHighSecurityLocalData", 2), ("ubpSupportLowSecurityLocalData", 3), ("ubpSupportEPMData", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigUBPSupportLevel.setStatus('current')
ntnQosConfigRoleAssocCompatLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("roleAssocCompatLoose", 1), ("roleAssocCompatStrict", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigRoleAssocCompatLevel.setStatus('current')
ntnQosConfigDappEnable = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enableWithoutStatusTracking", 2), ("enableWithStatusTracking", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigDappEnable.setStatus('current')
ntnQosConfigDappMinTcpHdrSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigDappMinTcpHdrSize.setStatus('current')
ntnQosConfigDappIpv4IcmpMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigDappIpv4IcmpMaxLength.setStatus('current')
ntnQosConfigDappIpv6IcmpMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigDappIpv6IcmpMaxLength.setStatus('current')
ntnQosConfigNtApplicationMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enablePureMode", 2), ("enableMixedMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigNtApplicationMode.setStatus('current')
ntnQosConfigQosOperMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigQosOperMode.setStatus('current')
ntnQosConfigTrustedProcessingMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partialDscpMapping", 1), ("fullDscpMapping", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigTrustedProcessingMode.setStatus('current')
ntnQosConfigResetToPartialDefaults = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigResetToPartialDefaults.setStatus('current')
ntnQosConfigClearStats = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigClearStats.setStatus('current')
ntnQosConfigFcoeRedirOperMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigFcoeRedirOperMode.setStatus('current')
ntnQosConfigFcoeControllerMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 20), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigFcoeControllerMacAddr.setStatus('current')
ntnQosConfigFcoeRedirAvail = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessible", 1), ("notAccessible", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigFcoeRedirAvail.setStatus('current')
ntnQosConfigFcoeControllerIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 22), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigFcoeControllerIfIndex.setStatus('current')
ntnQosConfigFcoeControllerVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 11, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosConfigFcoeControllerVlan.setStatus('current')
ntnQosQuickPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15))
ntnQosQuickPolicyControl = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("create", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyControl.setStatus('current')
ntnQosQuickPolicyPortList = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyPortList.setStatus('current')
ntnQosQuickPolicyAction = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forward", 1), ("pbits", 2), ("rate", 3), ("trtcm", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyAction.setStatus('current')
ntnQosQuickPolicyId = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 4), IndexInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyId.setStatus('current')
ntnQosQuickPolicyPbitsValue = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyPbitsValue.setStatus('current')
ntnQosQuickPolicyRate = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 32000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyRate.setStatus('current')
ntnQosQuickPolicyTrTCMType = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blind", 1), ("aware", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyTrTCMType.setStatus('current')
ntnQosQuickPolicyCIRRate = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 32000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyCIRRate.setStatus('current')
ntnQosQuickPolicyPIRRate = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 32000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyPIRRate.setStatus('current')
ntnQosQuickPolicyTrackQiQType = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qinq1", 1), ("qinq2", 2), ("ignore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyTrackQiQType.setStatus('current')
ntnQosQuickPolicyDscp = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 11), Dscp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyDscp.setStatus('current')
ntnQosQuickPolicyPriority = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyPriority.setStatus('current')
ntnQosQuickPolicyVid = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 13), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyVid.setStatus('current')
ntnQosQuickPolicyTPID = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyTPID.setStatus('current')
ntnQosQuickPolicyIVid = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 15), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyIVid.setStatus('current')
ntnQosQuickPolicyITPID = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyITPID.setStatus('current')
ntnQosQuickPolicyIPriority = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyIPriority.setStatus('current')
ntnQosQuickPolicyPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyPrecedence.setStatus('current')
ntnQosQuickPolicyTrackStatistics = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 15, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosQuickPolicyTrackStatistics.setStatus('current')
ntnQosFilterLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 16))
ntnQosFilterLimitingAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 16, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntnQosFilterLimitingAdminEnabled.setStatus('current')
ntnQosFilterLimitingOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 7, 1, 16, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntnQosFilterLimitingOperEnabled.setStatus('current')
ntnQosPolicyEvolLocalUbpSessionFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 4, 7, 3, 1)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigUBPSupportLevel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyIfIndex"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyUserName"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyUserGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyRoleCombination"))
if mibBuilder.loadTexts: ntnQosPolicyEvolLocalUbpSessionFailure.setStatus('current')
ntnQosPolicyEvolDosAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 45, 4, 7, 3, 2)).setObjects(("BN-IF-EXTENSIONS-MIB", "bnIfExtnSlot"), ("BN-IF-EXTENSIONS-MIB", "bnIfExtnPort"))
if mibBuilder.loadTexts: ntnQosPolicyEvolDosAttackDetected.setStatus('current')
avFcoeRedirEgressIssueDetected = NotificationType((1, 3, 6, 1, 4, 1, 45, 4, 7, 3, 3)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirActionEgressInterface"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirActionEgressTrunkId"))
if mibBuilder.loadTexts: avFcoeRedirEgressIssueDetected.setStatus('current')
ntnQosPolicyEvolPibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 1))
ntnQosPolicyEvolPibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2))
ntnQosPolicyEvolPibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 1, 2)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAssignmentGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPrcSupportGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDeviceIdentGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAgentConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosPolicyEvolPibCompliance = ntnQosPolicyEvolPibCompliance.setStatus('current')
ntnQosInterfaceTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 1)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceTypeRoles"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceTypeIfClass"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceTypeCapabilities"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceTypeStorageType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceTypeStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceTypeNextFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosInterfaceTypeGroup = ntnQosInterfaceTypeGroup.setStatus('current')
ntnQosQsetPriAssignmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 2)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetPriAssignmentQset"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetPriAssignmentPri"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetPriAssignmentQueue"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetPriAssignmentStorageType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetPriAssignmentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosQsetPriAssignmentGroup = ntnQosQsetPriAssignmentGroup.setStatus('current')
ntnQosQsetDscpAssignmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 3)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetDscpAssignmentQset"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetDscpAssignmentDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetDscpAssignmentQueue"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetDscpAssignmentStorageType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQsetDscpAssignmentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosQsetDscpAssignmentGroup = ntnQosQsetDscpAssignmentGroup.setStatus('current')
ntnQosShapingParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 4)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosShapingParamsRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosShapingParamsBurstSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosShapingParamsQueueSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosShapingParamsStorageType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosShapingParamsStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosShapingParamsLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosShapingParamsGroup = ntnQosShapingParamsGroup.setStatus('current')
ntnDsMultiFieldClfrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 5)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrAddrType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrDstAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrDstPrefixLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrSrcAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrSrcPrefixLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrFlowId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrProtocol"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrDstL4PortMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrDstL4PortMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrSrcL4PortMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrSrcL4PortMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrIpFlags"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrTcpCtrlFlags"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnDsMultiFieldClfrIpv4Options"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnDsMultiFieldClfrGroup = ntnDsMultiFieldClfrGroup.setStatus('current')
ntnL2MultiFieldClfrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 6)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrDstAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrDstAddrMask"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrSrcAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrSrcAddrMask"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrVlanIdMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrVlanIdMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrVlanTag"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrEtherType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrUserPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrPktType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrIvidMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrIvidMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrTPID"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrCFI"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrITPID"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrICFI"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnL2MultiFieldClfrIUserPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnL2MultiFieldClfrGroup = ntnL2MultiFieldClfrGroup.setStatus('current')
ntnSystemClfrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 7)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrUnknownUcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrUnknownMcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrKnownUcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrKnownMcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrBcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrPatternPosition"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrPatternData"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrPatternFormat"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrUnknownIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrKnownIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrNonIpPkt"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrPatternIpVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrUnknownNonIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrKnownNonIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnSystemClfrPatternL2Format"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnSystemClfrGroup = ntnSystemClfrGroup.setStatus('current')
ntnClfrComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 8)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentSpecific"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentSetId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrComponentSetNextFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnClfrComponentGroup = ntnClfrComponentGroup.setStatus('current')
ntnClfrBlockGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 9)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockNumber"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockClfrCompSetId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockMeter"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockAction"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockNumberNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnClfrBlockPrecedence"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnClfrBlockGroup = ntnClfrBlockGroup.setStatus('current')
ntnQosMeterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 10)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterSucceedNext"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterFailNext"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterSpecific"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterOutOfProfileStats"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMeterVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosMeterGroup = ntnQosMeterGroup.setStatus('current')
ntnQosTBParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 11)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamBurstSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamInterval"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosTBParamMinRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosTBParamGroup = ntnQosTBParamGroup.setStatus('current')
ntnQosBaseActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 12)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionUpdateDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionUpdateUserPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionSetDropPrecedence"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionCopyToCpu"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionMirrorFrame"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionExtension"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosBaseActionSessionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosBaseActionGroup = ntnQosBaseActionGroup.setStatus('current')
ntnQosIfcActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 13)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionUpdateVlanId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionSetEgressMask"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionSetEgressUcastIfc"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionSetEgressNUcastIfc"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionExtension"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfcActionSessionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosIfcActionGroup = ntnQosIfcActionGroup.setStatus('current')
ntnQosPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 14)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyClassifierType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyClassifierId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyInterfaceRoles"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecedence"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyMeter"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyAction"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyNonMatchAction"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyStats"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyStatsType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyInterfaceIndex"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicySessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyMeteringMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosPolicyGroup = ntnQosPolicyGroup.setStatus('current')
ntnQosCountActGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 15)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCountActNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCountActOctets"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCountActPkts"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCountActStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCountActStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCountActSessionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosCountActGroup = ntnQosCountActGroup.setStatus('current')
ntnQosFilterStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 16)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsInProfileOctets"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsInProfilePkts"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsOutOfProfileOctets"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsOutOfProfilePkts"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterStatsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosFilterStatsGroup = ntnQosFilterStatsGroup.setStatus('current')
ntnQosPolicyDiagsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 17)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsMasksConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsFiltersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsMetersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsNonQosMasksConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsNonQosFiltersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsNonQosMetersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsCountersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsTotalMasksAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsTotalFiltersAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsTotalMetersAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDiagsTotalCountersAvail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosPolicyDiagsGroup = ntnQosPolicyDiagsGroup.setStatus('current')
ntnQosIfAssignmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 18)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAssignmentRoleCombination"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAssignmentQueueSet"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAssignmentStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAssignmentStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAssignmentCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosIfAssignmentGroup = ntnQosIfAssignmentGroup.setStatus('current')
ntnQosIfQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 19)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueSetId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueIndex"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueDiscipline"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueDrainSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueAbsBandwidth"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueBandwidthAllocation"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueServiceOrder"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfQueueStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosIfQueueGroup = ntnQosIfQueueGroup.setStatus('current')
ntnQosDscpToCosGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 20)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosDropPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDscpToCosNewDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosDscpToCosGroup = ntnQosDscpToCosGroup.setStatus('current')
ntnQosCosToDscpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 21)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosToDscpCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosToDscpDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosToDscpLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosToDscpStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosToDscpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosCosToDscpGroup = ntnQosCosToDscpGroup.setStatus('current')
ntnQosPrcSupportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 22)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPrcSupportSupportedPrc"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPrcSupportSupportedAttrs"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPrcSupportMaxPris"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPrcSupportCurrentPris"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosPrcSupportGroup = ntnQosPrcSupportGroup.setStatus('current')
ntnQosPolicyDeviceIdentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 23)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDeviceIdentDescr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyDeviceIdentMaxMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosPolicyDeviceIdentGroup = ntnQosPolicyDeviceIdentGroup.setStatus('current')
ntnQosAgentConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 24)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigResetToDefaults"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigTrackStatistics"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigNVCommitDelay"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigDefaultQueueCfg"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigDefaultBufferingCaps"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigUBPSupportLevel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigRoleAssocCompatLevel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigDappEnable"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigDappMinTcpHdrSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigDappIpv4IcmpMaxLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigDappIpv6IcmpMaxLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigNtApplicationMode"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigQosOperMode"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigTrustedProcessingMode"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigResetToPartialDefaults"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigClearStats"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigFcoeRedirOperMode"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigFcoeControllerMacAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigFcoeRedirAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigFcoeControllerIfIndex"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosConfigFcoeControllerVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosAgentConfigGroup = ntnQosAgentConfigGroup.setStatus('current')
ntnQosInterfaceRoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 25)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleRole"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleIfClass"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleCapabilities"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleStorageType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleStatsTrackingType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosInterfaceRoleNextFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosInterfaceRoleGroup = ntnQosInterfaceRoleGroup.setStatus('current')
ntnQosUserRoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 26)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleRoleCombination"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleUserName"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleUserGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleSessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleSessionStart"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleSessionGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserRoleStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosUserRoleGroup = ntnQosUserRoleGroup.setStatus('current')
ntnQosIfShapingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 27)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfShapingSpecific"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfShapingLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfShapingStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfShapingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosIfShapingGroup = ntnQosIfShapingGroup.setStatus('current')
ntnQosDsAccessElemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 28)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemAddrType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemDstAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemDstPrefixLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemSrcAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemSrcPrefixLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemFlowId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemProtocol"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemDstL4PortMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemDstL4PortMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemSrcL4PortMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemSrcL4PortMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemActionRemarkDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemActionRemarkCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemActionSetPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemName"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemBlock"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsAccessElemEvalPrec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosDsAccessElemGroup = ntnQosDsAccessElemGroup.setStatus('current')
ntnQosL2AccessElemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 29)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemDstAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemDstAddrMask"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemSrcAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemSrcAddrMask"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemVlanIdMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemVlanIdMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemVlanTag"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemEtherType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemUserPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemActionRemarkDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemActionRemarkCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemActionSetPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemName"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemBlock"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosL2AccessElemEvalPrec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosL2AccessElemGroup = ntnQosL2AccessElemGroup.setStatus('current')
ntnQosAccessAsgnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 30)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnAclType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnName"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnIfIndex"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnBurstSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnOutActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnOutActionRemarkDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnOutActionRemarkCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnOutActionSetPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnStatsType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnNonMatchActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnMeterType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnSecondaryRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnSecondaryBurstSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnYelActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnYelActionRemarkDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnYelActionRemarkCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnYelActionSetPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnSetPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosAccessAsgnMeteringMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosAccessAsgnGroup = ntnQosAccessAsgnGroup.setStatus('current')
ntnQosIfAppsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 31)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAppsAppEnable"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAppsDefaultGateway"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAppsIfType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAppsDHCPServer"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAppsStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosIfAppsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosIfAppsGroup = ntnQosIfAppsGroup.setStatus('current')
ntnQosUserPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 32)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyIfIndex"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyRoleCombination"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyUserName"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyUserGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicySessionId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicySessionStart"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicySessionGroup"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicyStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicySrcMacAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosUserPolicySrcMacAddrMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosUserPolicyGroup = ntnQosUserPolicyGroup.setStatus('current')
ntnQosDsL2AccessElemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 33)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemAddrType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemDstIpAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemDstIpPrefixLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSrcIpAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSrcIpPrefixLength"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemFlowId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemProtocol"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemDstL4PortMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemDstL4PortMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSrcL4PortMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSrcL4PortMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemDstMacAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemDstMacAddrMask"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSrcMacAddr"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSrcMacAddrMask"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemVlanIdMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemVlanIdMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemVlanTag"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemEtherType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemUserPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemActionRemarkDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemActionRemarkCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemActionSetPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemName"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemBlock"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemEvalPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemIpFlags"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemTcpCtrlFlags"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemIpv4Options"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemPktType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemIvidMin"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemIvidMax"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemUnknownUcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemUnknownMcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemKnownUcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemKnownMcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemBcastFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemUnknownIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemKnownIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemNonIpPkt"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemVersion"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemUnknownNonIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemKnownNonIpMcast"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemMasterBlockMember"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemMeterType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemBurstSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemOutActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemOutActionRemarkDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemOutActionRemarkCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemOutActionSetPrec"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSecondaryRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemSecondaryBurstSize"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemYelActionDrop"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemYelActionRemarkDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemYelActionRemarkCos"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDsL2AccessElemYelActionSetPrec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosDsL2AccessElemGroup = ntnQosDsL2AccessElemGroup.setStatus('current')
ntnQosCosShapingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 34)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosShapingSpecific"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosShapingLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosShapingStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosCosShapingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosCosShapingGroup = ntnQosCosShapingGroup.setStatus('current')
ntnQosPolicyPrecResDiagsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 35)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsKeysConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsFiltersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsMetersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsNonQosKeysConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsNonQosFiltersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsNonQosMetersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsCountersConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsTotalKeysAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsTotalFiltersAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsTotalMetersAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsTotalCountersAvail"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsRangeChkElemsConsumed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsApplicationIdUsed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsApplicationNameUsed"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyPrecResDiagsRangeChkElemsAvail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosPolicyPrecResDiagsGroup = ntnQosPolicyPrecResDiagsGroup.setStatus('current')
ntnQosQueueShapingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 36)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQueueShapingSpecific"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQueueShapingLabel"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQueueShapingStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQueueShapingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosQueueShapingGroup = ntnQosQueueShapingGroup.setStatus('current')
ntnQosFilterSetStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 37)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsInProfileOctets"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsInProfilePkts"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsOutOfProfileOctets"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsOutOfProfilePkts"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsAccessElemId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterSetStatsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosFilterSetStatsGroup = ntnQosFilterSetStatsGroup.setStatus('current')
avFcoeRedirGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 38)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirNextFree"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirDstId"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirIngressInterfaceList"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirVlanIdMin"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirVlanIdMax"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirUserPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirEtherType"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirSrcId"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirActionUpdateDstMac"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirActionUpdateSrcMac"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirActionEgressInterface"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirName"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirStorage"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirStatus"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirProcessedFrames"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirActionEgressTrunkId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avFcoeRedirGroup = avFcoeRedirGroup.setStatus('current')
ntnQosQuickPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 39)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyControl"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyPortList"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyAction"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyId"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyPbitsValue"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyTrTCMType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyCIRRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyPIRRate"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyTrackQiQType"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyDscp"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyVid"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyTPID"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyIVid"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyITPID"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyIPriority"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyPrecedence"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosQuickPolicyTrackStatistics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosQuickPolicyGroup = ntnQosQuickPolicyGroup.setStatus('current')
ntnQosFilterLimitingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 40)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterLimitingAdminEnabled"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosFilterLimitingOperEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosFilterLimitingGroup = ntnQosFilterLimitingGroup.setStatus('current')
ntnQosDEIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 41)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDEIIngressColorFromDEI"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosDEIEgressMarkDEI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosDEIGroup = ntnQosDEIGroup.setStatus('current')
ntnQosMappingScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 42)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMappingRestoreDefault"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMappingDscpToCosEnabled"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosMappingCosToDscpEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosMappingScalarsGroup = ntnQosMappingScalarsGroup.setStatus('current')
ntnQosNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 45, 4, 7, 2, 2, 43)).setObjects(("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyEvolLocalUbpSessionFailure"), ("NTN-QOS-POLICY-EVOL-PIB", "ntnQosPolicyEvolDosAttackDetected"), ("NTN-QOS-POLICY-EVOL-PIB", "avFcoeRedirEgressIssueDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntnQosNotificationGroup = ntnQosNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("NTN-QOS-POLICY-EVOL-PIB", ntnQosAccessAsgnNonMatchActionDrop=ntnQosAccessAsgnNonMatchActionDrop, ntnQosPolicyClasses=ntnQosPolicyClasses, ntnQosIfShapingIfIndex=ntnQosIfShapingIfIndex, ntnQosBaseActionNextFree=ntnQosBaseActionNextFree, ntnQosDsL2AccessElemUnknownMcastFrames=ntnQosDsL2AccessElemUnknownMcastFrames, avFcoeRedirStorage=avFcoeRedirStorage, ntnQosMeterGroup=ntnQosMeterGroup, ntnQosQueueShapingEntry=ntnQosQueueShapingEntry, ntnQosUserRoleEntry=ntnQosUserRoleEntry, ntnQosQsetDscpAssignmentTable=ntnQosQsetDscpAssignmentTable, ntnQosQsetDscpAssignmentStatus=ntnQosQsetDscpAssignmentStatus, ntnQosDsL2AccessElemMeterType=ntnQosDsL2AccessElemMeterType, ntnQosPolicyVersion=ntnQosPolicyVersion, ntnQosFilterLimitingAdminEnabled=ntnQosFilterLimitingAdminEnabled, ntnDsMultiFieldClfrEntry=ntnDsMultiFieldClfrEntry, ntnQosIfcActionUpdateVlanId=ntnQosIfcActionUpdateVlanId, ntnQosPolicyDiagsTable=ntnQosPolicyDiagsTable, ntnClfrComponentLabel=ntnClfrComponentLabel, ntnQosUserRoleRoleCombination=ntnQosUserRoleRoleCombination, ntnQosIfQueueServiceOrder=ntnQosIfQueueServiceOrder, ntnQosIfAssignmentQueueSet=ntnQosIfAssignmentQueueSet, ntnQosPolicyEvolPibCompliances=ntnQosPolicyEvolPibCompliances, ntnQosPolicyDiagsTotalCountersAvail=ntnQosPolicyDiagsTotalCountersAvail, ntnQosInterfaceRoleTable=ntnQosInterfaceRoleTable, ntnQosDsL2AccessElemTcpCtrlFlags=ntnQosDsL2AccessElemTcpCtrlFlags, ntnQosBaseActionCopyToCpu=ntnQosBaseActionCopyToCpu, ntnQosDsL2AccessElemSrcMacAddrMask=ntnQosDsL2AccessElemSrcMacAddrMask, ntnQosUserPolicyStorage=ntnQosUserPolicyStorage, ntnQosQuickPolicyITPID=ntnQosQuickPolicyITPID, ntnQosFilterSetStatsAccessAsgnId=ntnQosFilterSetStatsAccessAsgnId, ntnQosIfAppsGroup=ntnQosIfAppsGroup, ntnQosPolicyLabel=ntnQosPolicyLabel, ntnQosPolicyPrecResDiagsTable=ntnQosPolicyPrecResDiagsTable, ntnSystemClfrNonIpPkt=ntnSystemClfrNonIpPkt, ntnQosPolicyPrecResDiagsTotalMetersAvail=ntnQosPolicyPrecResDiagsTotalMetersAvail, ntnQosTBParamEntry=ntnQosTBParamEntry, ntnQosMeterStatus=ntnQosMeterStatus, ntnQosDsAccessElemProtocol=ntnQosDsAccessElemProtocol, ntnQosDsAccessElemStatus=ntnQosDsAccessElemStatus, ntnQosConfigFcoeControllerVlan=ntnQosConfigFcoeControllerVlan, ntnQosQsetPriAssignmentStorageType=ntnQosQsetPriAssignmentStorageType, ntnQosDsL2AccessElemAddrType=ntnQosDsL2AccessElemAddrType, ntnQosPolicyEvolPibNotifications=ntnQosPolicyEvolPibNotifications, ntnQosIfAppsIfIndex=ntnQosIfAppsIfIndex, ntnQosDsL2AccessElemBurstSize=ntnQosDsL2AccessElemBurstSize, ntnQosPolicyEvolDosAttackDetected=ntnQosPolicyEvolDosAttackDetected, ntnQosAccessAsgnGroup=ntnQosAccessAsgnGroup, ntnQosPrcSupportTable=ntnQosPrcSupportTable, ntnQosMeterVersion=ntnQosMeterVersion, ntnQosIfAssignmentRoleCombination=ntnQosIfAssignmentRoleCombination, ntnQosCountActStatus=ntnQosCountActStatus, ntnQosMeterOutOfProfileStats=ntnQosMeterOutOfProfileStats, ntnQosIfQueueDiscipline=ntnQosIfQueueDiscipline, avFcoeRedirUserPriority=avFcoeRedirUserPriority, ntnClfrBlockLabel=ntnClfrBlockLabel, ntnClfrBlockSessionId=ntnClfrBlockSessionId, ntnQosQuickPolicyPrecedence=ntnQosQuickPolicyPrecedence, ntnQosDsL2AccessElemActionSetPrec=ntnQosDsL2AccessElemActionSetPrec, ntnQosTBParamTswTCM=ntnQosTBParamTswTCM, ntnQosIfShapingStorage=ntnQosIfShapingStorage, ntnQosMeterNextFree=ntnQosMeterNextFree, ntnQosPolicyDiagsNonQosMetersConsumed=ntnQosPolicyDiagsNonQosMetersConsumed, ntnL2MultiFieldClfrEntry=ntnL2MultiFieldClfrEntry, ntnQosMeterSucceedNext=ntnQosMeterSucceedNext, ntnQosUserRoleSessionStart=ntnQosUserRoleSessionStart, ntnQosPolicyPrecResDiagsNonQosFiltersConsumed=ntnQosPolicyPrecResDiagsNonQosFiltersConsumed, ntnQosQuickPolicyAction=ntnQosQuickPolicyAction, ntnQosQuickPolicyCIRRate=ntnQosQuickPolicyCIRRate, ntnQosIfcActionEntry=ntnQosIfcActionEntry, ntnQosQuickPolicyPIRRate=ntnQosQuickPolicyPIRRate, ntnQosL2AccessElemEvalPrec=ntnQosL2AccessElemEvalPrec, ntnQosDsL2AccessElemStatus=ntnQosDsL2AccessElemStatus, avFcoeRedirEntry=avFcoeRedirEntry, ntnQosFilterLimiting=ntnQosFilterLimiting, ntnDsMultiFieldClfrDstL4PortMax=ntnDsMultiFieldClfrDstL4PortMax, ntnQosDsL2AccessElemDstIpPrefixLength=ntnQosDsL2AccessElemDstIpPrefixLength, ntnQosPolicyDiagsMasksConsumed=ntnQosPolicyDiagsMasksConsumed, ntnQosNotificationGroup=ntnQosNotificationGroup, ntnQosUserRoleIfIndex=ntnQosUserRoleIfIndex, ntnQosDscpToCosGroup=ntnQosDscpToCosGroup, ntnQosAgentConfigGroup=ntnQosAgentConfigGroup, ntnQosAccessAsgnOutActionRemarkCos=ntnQosAccessAsgnOutActionRemarkCos, ntnSystemClfrKnownUcastFrames=ntnSystemClfrKnownUcastFrames, ntnQosQuickPolicyTrackStatistics=ntnQosQuickPolicyTrackStatistics, ntnQosIfQueueId=ntnQosIfQueueId, ntnQosAccessAsgnStorage=ntnQosAccessAsgnStorage, ntnClfrBlockVersion=ntnClfrBlockVersion, ntnQosCosToDscpLabel=ntnQosCosToDscpLabel, ntnQosIfAssignmentGroup=ntnQosIfAssignmentGroup, ntnQosDsAccessElemDstPrefixLength=ntnQosDsAccessElemDstPrefixLength, ntnQosQuickPolicyTrackQiQType=ntnQosQuickPolicyTrackQiQType, ntnQosShapingParamsBurstSize=ntnQosShapingParamsBurstSize, ntnDsMultiFieldClfrTcpCtrlFlags=ntnDsMultiFieldClfrTcpCtrlFlags, ntnQosDscpToCosDropPrec=ntnQosDscpToCosDropPrec, avFcoeRedirIngressInterfaceList=avFcoeRedirIngressInterfaceList, ntnQosQueueShapingSpecific=ntnQosQueueShapingSpecific, ntnQosDscpToCosLabel=ntnQosDscpToCosLabel, ntnQosAccessAsgnAclType=ntnQosAccessAsgnAclType, ntnQosPolicyPrecResDiagsRangeChkElemsAvail=ntnQosPolicyPrecResDiagsRangeChkElemsAvail, ntnQosL2AccessElemName=ntnQosL2AccessElemName, avFcoeRedirGroup=avFcoeRedirGroup, avFcoeRedirActionUpdateSrcMac=avFcoeRedirActionUpdateSrcMac, ntnL2MultiFieldClfrGroup=ntnL2MultiFieldClfrGroup, ntnDsMultiFieldClfrProtocol=ntnDsMultiFieldClfrProtocol, ntnQosDsL2AccessElemBlock=ntnQosDsL2AccessElemBlock, ntnQosMeterEntry=ntnQosMeterEntry, ntnDsMultiFieldClfrId=ntnDsMultiFieldClfrId, ntnDsMultiFieldClfrSrcPrefixLength=ntnDsMultiFieldClfrSrcPrefixLength, ntnClfrBlockStatus=ntnClfrBlockStatus, ntnL2MultiFieldClfrVersion=ntnL2MultiFieldClfrVersion, ntnDsMultiFieldClfrDscp=ntnDsMultiFieldClfrDscp, ntnQosQsetPriAssignmentQset=ntnQosQsetPriAssignmentQset, avFcoeRedirDstId=avFcoeRedirDstId, ntnQosPolicyDiagsCountersConsumed=ntnQosPolicyDiagsCountersConsumed, ntnQosPolicyNonMatchAction=ntnQosPolicyNonMatchAction, ntnQosShapingParamsTable=ntnQosShapingParamsTable, ntnQosIfAssignmentTable=ntnQosIfAssignmentTable, ntnQosAccessAsgnSecondaryBurstSize=ntnQosAccessAsgnSecondaryBurstSize, ntnSystemClfrGroup=ntnSystemClfrGroup, ntnQosIfQueueStatus=ntnQosIfQueueStatus, ntnQosUserRoleStorage=ntnQosUserRoleStorage, ntnQosTBParamSrTCMBlind=ntnQosTBParamSrTCMBlind, ntnQosPolicyDiagsTotalFiltersAvail=ntnQosPolicyDiagsTotalFiltersAvail, ntnQosFilterLimitingGroup=ntnQosFilterLimitingGroup, ntnL2MultiFieldClfrVlanTag=ntnL2MultiFieldClfrVlanTag, ntnQosTBParamId=ntnQosTBParamId, ntnQosConfigDappIpv4IcmpMaxLength=ntnQosConfigDappIpv4IcmpMaxLength, ntnSystemClfrTable=ntnSystemClfrTable, ntnQosPolicyStatsType=ntnQosPolicyStatsType, ntnQosFilterStatsInProfilePkts=ntnQosFilterStatsInProfilePkts, ntnQosInterfaceClasses=ntnQosInterfaceClasses, ntnQosUserPolicyUserGroup=ntnQosUserPolicyUserGroup, ntnQosUserPolicySessionId=ntnQosUserPolicySessionId, ntnQosInterfaceTypeStatus=ntnQosInterfaceTypeStatus, ntnQosCosToDscpGroup=ntnQosCosToDscpGroup, ntnQosDEIGroup=ntnQosDEIGroup, ntnQosCosShapingTable=ntnQosCosShapingTable, avFcoeRedirVlanIdMin=avFcoeRedirVlanIdMin, ntnQosPrcSupportEntry=ntnQosPrcSupportEntry, ntnQosDsL2AccessElemKnownUcastFrames=ntnQosDsL2AccessElemKnownUcastFrames, ntnClassifierClasses=ntnClassifierClasses, ntnQosCosToDscpStatus=ntnQosCosToDscpStatus, ntnQosDEIIngressColorFromDEI=ntnQosDEIIngressColorFromDEI, ntnQosL2AccessElemNextFree=ntnQosL2AccessElemNextFree, ntnSystemClfrStatus=ntnSystemClfrStatus, ntnQosDsAccessElemSrcL4PortMin=ntnQosDsAccessElemSrcL4PortMin, ntnSystemClfrPatternPosition=ntnSystemClfrPatternPosition, ntnQosConfigFcoeControllerIfIndex=ntnQosConfigFcoeControllerIfIndex, ntnQosCosShapingIfIndex=ntnQosCosShapingIfIndex, ntnQosPolicyPrecResDiagsTotalKeysAvail=ntnQosPolicyPrecResDiagsTotalKeysAvail, ntnQosUserRoleUserName=ntnQosUserRoleUserName, ntnQosCountActTable=ntnQosCountActTable, ntnQosIfcActionExtension=ntnQosIfcActionExtension, ntnQosUserRoleStatus=ntnQosUserRoleStatus, FlowIdOrAny=FlowIdOrAny, ntnQosIfcActionTable=ntnQosIfcActionTable, ntnQosPolicyInterfaceRoles=ntnQosPolicyInterfaceRoles, ntnQosDsL2AccessElemRate=ntnQosDsL2AccessElemRate, ntnQosDEIEgressMarkDEI=ntnQosDEIEgressMarkDEI, ntnQosConfigDappIpv6IcmpMaxLength=ntnQosConfigDappIpv6IcmpMaxLength, ntnQosFilterSetStatsOutOfProfileOctets=ntnQosFilterSetStatsOutOfProfileOctets, ntnSystemClfrPatternIpVersion=ntnSystemClfrPatternIpVersion, ntnQosPolicyPrecResDiagsInterface=ntnQosPolicyPrecResDiagsInterface, ntnSystemClfrStorage=ntnSystemClfrStorage, ntnDsMultiFieldClfrSrcL4PortMax=ntnDsMultiFieldClfrSrcL4PortMax, ntnQosShapingParamsRate=ntnQosShapingParamsRate, ntnL2MultiFieldClfrICFI=ntnL2MultiFieldClfrICFI, ntnQosFilterSetStatsTable=ntnQosFilterSetStatsTable, ntnSystemClfrKnownIpMcast=ntnSystemClfrKnownIpMcast, ntnQosCosShapingStatus=ntnQosCosShapingStatus, ntnQosUserPolicyIfIndex=ntnQosUserPolicyIfIndex, ntnQosCosToDscpId=ntnQosCosToDscpId, ntnQosAccessAsgnSetPriority=ntnQosAccessAsgnSetPriority, ntnQosQuickPolicyPriority=ntnQosQuickPolicyPriority, ntnQosPolicyEvolLocalUbpSessionFailure=ntnQosPolicyEvolLocalUbpSessionFailure, ntnQosInterfaceTypeCapabilities=ntnQosInterfaceTypeCapabilities, ntnQosConfigTrustedProcessingMode=ntnQosConfigTrustedProcessingMode, ntnQosPolicyStats=ntnQosPolicyStats, ntnQosDsL2AccessElemProtocol=ntnQosDsL2AccessElemProtocol, ntnQosPolicySessionId=ntnQosPolicySessionId, ntnDsMultiFieldClfrGroup=ntnDsMultiFieldClfrGroup, ntnClfrComponentVersion=ntnClfrComponentVersion, ntnQosDsL2AccessElemSrcIpPrefixLength=ntnQosDsL2AccessElemSrcIpPrefixLength, ntnQosL2AccessElemStatus=ntnQosL2AccessElemStatus, ntnSystemClfrPatternFormat=ntnSystemClfrPatternFormat, ntnQosL2AccessElemEntry=ntnQosL2AccessElemEntry, ntnL2MultiFieldClfrSrcAddr=ntnL2MultiFieldClfrSrcAddr, ntnClfrBlockNextFree=ntnClfrBlockNextFree, ntnQosCountActId=ntnQosCountActId, ntnQosDsAccessElemStorage=ntnQosDsAccessElemStorage, ntnQosQsetPriAssignmentEntry=ntnQosQsetPriAssignmentEntry, ntnQosDscpToCosId=ntnQosDscpToCosId, ntnQosConfigDappMinTcpHdrSize=ntnQosConfigDappMinTcpHdrSize, ntnQosBaseActionSessionId=ntnQosBaseActionSessionId, ntnQosCosToDscpDscp=ntnQosCosToDscpDscp, ntnQosTBParamVersion=ntnQosTBParamVersion, ntnQosPolicyGroup=ntnQosPolicyGroup, ntnQosInterfaceRoleStatsTrackingType=ntnQosInterfaceRoleStatsTrackingType, ntnQosQuickPolicyGroup=ntnQosQuickPolicyGroup, ntnQosIfQueueDrainSize=ntnQosIfQueueDrainSize, ntnQosPolicyDiagsNonQosFiltersConsumed=ntnQosPolicyDiagsNonQosFiltersConsumed, ntnQosQueueShapingQueue=ntnQosQueueShapingQueue, ntnQosL2AccessElemActionRemarkCos=ntnQosL2AccessElemActionRemarkCos, ntnQosPolicyStorage=ntnQosPolicyStorage, ntnQosShapingParamsId=ntnQosShapingParamsId, ntnQosPolicyPrecResDiagsMetersConsumed=ntnQosPolicyPrecResDiagsMetersConsumed, ntnQosQuickPolicyTrTCMType=ntnQosQuickPolicyTrTCMType, ntnQosQsetPriAssignmentQueue=ntnQosQsetPriAssignmentQueue, ntnSystemClfrNextFree=ntnSystemClfrNextFree, ntnQosPolicyDiagsGroup=ntnQosPolicyDiagsGroup, ntnQosPolicyDiagsFiltersConsumed=ntnQosPolicyDiagsFiltersConsumed, avFcoeRedirId=avFcoeRedirId, ntnQosAccessAsgnNextFree=ntnQosAccessAsgnNextFree, ntnQosCosShapingStorage=ntnQosCosShapingStorage, ntnQosPrcSupportCurrentPris=ntnQosPrcSupportCurrentPris, ntnQosFilterSetStatsOutOfProfilePkts=ntnQosFilterSetStatsOutOfProfilePkts, ntnQosConfigResetToPartialDefaults=ntnQosConfigResetToPartialDefaults, ntnQosPolicyPrecResDiagsCountersConsumed=ntnQosPolicyPrecResDiagsCountersConsumed, ntnSystemClfrUnknownNonIpMcast=ntnSystemClfrUnknownNonIpMcast, ntnQosDsAccessElemAddrType=ntnQosDsAccessElemAddrType, ntnSystemClfrId=ntnSystemClfrId, ntnQosPolicyMeteringMode=ntnQosPolicyMeteringMode, ntnQosFilterSetStatsEvalOrder=ntnQosFilterSetStatsEvalOrder, ntnQosPolicyDiagsTotalMasksAvail=ntnQosPolicyDiagsTotalMasksAvail, ntnClfrBlockMeter=ntnClfrBlockMeter, ntnQosDsL2AccessElemTable=ntnQosDsL2AccessElemTable, ntnQosDscpToCosEntry=ntnQosDscpToCosEntry, ntnQosDsL2AccessElemSrcMacAddr=ntnQosDsL2AccessElemSrcMacAddr, ntnClfrBlockStorage=ntnClfrBlockStorage, ntnQosQuickPolicyRate=ntnQosQuickPolicyRate, ntnQosAccessAsgnYelActionSetPrec=ntnQosAccessAsgnYelActionSetPrec, ntnQosTBParamInterval=ntnQosTBParamInterval, ntnQosPolicyInterfaceIndex=ntnQosPolicyInterfaceIndex, ntnQosCountActGroup=ntnQosCountActGroup, ntnClfrComponentEntry=ntnClfrComponentEntry, ntnQosUserRoleGroup=ntnQosUserRoleGroup, ntnQosDsL2AccessElemPktType=ntnQosDsL2AccessElemPktType, ntnDsMultiFieldClfrLabel=ntnDsMultiFieldClfrLabel, ntnQosPolicyEntry=ntnQosPolicyEntry, ntnQosConfigDefaultBufferingCaps=ntnQosConfigDefaultBufferingCaps, ntnQosPolicyStatus=ntnQosPolicyStatus, ntnQosDsAccessElemType=ntnQosDsAccessElemType, ntnQosUserPolicyTable=ntnQosUserPolicyTable, ntnL2MultiFieldClfrDstAddr=ntnL2MultiFieldClfrDstAddr, ntnQosConfigDappEnable=ntnQosConfigDappEnable, ntnClfrComponentSessionId=ntnClfrComponentSessionId, ntnQosPolicyMeter=ntnQosPolicyMeter, ntnClfrComponentSpecific=ntnClfrComponentSpecific, ntnSystemClfrSessionId=ntnSystemClfrSessionId, ntnQosPolicyEvolPibClasses=ntnQosPolicyEvolPibClasses, ntnDsMultiFieldClfrDstAddr=ntnDsMultiFieldClfrDstAddr, ntnQosInterfaceTypeEntry=ntnQosInterfaceTypeEntry, ntnSystemClfrEntry=ntnSystemClfrEntry, ntnQosIfcActionGroup=ntnQosIfcActionGroup)
mibBuilder.exportSymbols("NTN-QOS-POLICY-EVOL-PIB", ntnQosL2AccessElemType=ntnQosL2AccessElemType, ntnDsMultiFieldClfrStatus=ntnDsMultiFieldClfrStatus, ntnQosAccessAsgnIfIndex=ntnQosAccessAsgnIfIndex, ntnQosFilterSetStatsGroup=ntnQosFilterSetStatsGroup, ntnL2MultiFieldClfrUserPriority=ntnL2MultiFieldClfrUserPriority, ntnQosDsL2AccessElemVlanTag=ntnQosDsL2AccessElemVlanTag, ntnQosDsAccessElemActionDrop=ntnQosDsAccessElemActionDrop, ntnQosIfQueueTable=ntnQosIfQueueTable, ntnQosUserPolicyNextFree=ntnQosUserPolicyNextFree, ntnQosQuickPolicyDscp=ntnQosQuickPolicyDscp, ntnQosDsAccessElemSrcAddr=ntnQosDsAccessElemSrcAddr, ntnQosBaseActionEntry=ntnQosBaseActionEntry, ntnQosTBParamNextFree=ntnQosTBParamNextFree, ntnQosIfcActionSetEgressUcastIfc=ntnQosIfcActionSetEgressUcastIfc, ntnQosPolicyPrecResDiagsKeysConsumed=ntnQosPolicyPrecResDiagsKeysConsumed, ntnQosCosShapingEntry=ntnQosCosShapingEntry, ntnQosMappingRestoreDefault=ntnQosMappingRestoreDefault, ntnQosCosToDscpEntry=ntnQosCosToDscpEntry, ntnQosBaseActionMirrorFrame=ntnQosBaseActionMirrorFrame, ntnQosPolicyPrecResDiagsTotalCountersAvail=ntnQosPolicyPrecResDiagsTotalCountersAvail, ntnL2MultiFieldClfrDstAddrMask=ntnL2MultiFieldClfrDstAddrMask, ntnQosCountActNextFree=ntnQosCountActNextFree, ntnQosAccessAsgnId=ntnQosAccessAsgnId, ntnQosDsL2AccessElemType=ntnQosDsL2AccessElemType, ntnQosIfAssignmentStorage=ntnQosIfAssignmentStorage, ntnDsMultiFieldClfrIpFlags=ntnDsMultiFieldClfrIpFlags, ntnQosDsAccessElemActionRemarkDscp=ntnQosDsAccessElemActionRemarkDscp, ntnQosL2AccessElemDstAddr=ntnQosL2AccessElemDstAddr, ntnQosDsL2AccessElemName=ntnQosDsL2AccessElemName, ntnClfrComponentTable=ntnClfrComponentTable, ntnQosIfQueueSetId=ntnQosIfQueueSetId, ntnQosAccessAsgnMeterType=ntnQosAccessAsgnMeterType, DscpUpdate=DscpUpdate, ntnQosBaseActionExtension=ntnQosBaseActionExtension, ntnQosAccessAsgnRate=ntnQosAccessAsgnRate, ntnQosDsAccessElemDstAddr=ntnQosDsAccessElemDstAddr, ntnQosInterfaceTypeIfClass=ntnQosInterfaceTypeIfClass, ntnDsMultiFieldClfrAddrType=ntnDsMultiFieldClfrAddrType, ntnQosBaseActionStorage=ntnQosBaseActionStorage, ntnQosInterfaceRoleStorageType=ntnQosInterfaceRoleStorageType, ntnQosPolicyPrecResDiagsRangeChkElemsConsumed=ntnQosPolicyPrecResDiagsRangeChkElemsConsumed, ntnQosTBParamBurstSize=ntnQosTBParamBurstSize, ntnClfrComponentNextFree=ntnClfrComponentNextFree, ntnQosInterfaceTypeGroup=ntnQosInterfaceTypeGroup, ntnL2MultiFieldClfrSessionId=ntnL2MultiFieldClfrSessionId, ntnQosPolicyPrecResDiagsNonQosMetersConsumed=ntnQosPolicyPrecResDiagsNonQosMetersConsumed, ntnQosActionClasses=ntnQosActionClasses, ntnQosAccessAsgnYelActionDrop=ntnQosAccessAsgnYelActionDrop, ntnQosQsetPriAssignmentGroup=ntnQosQsetPriAssignmentGroup, ntnQosQsetDscpAssignmentQset=ntnQosQsetDscpAssignmentQset, ntnQosConfigNVCommitDelay=ntnQosConfigNVCommitDelay, ntnQosInterfaceRoleStatus=ntnQosInterfaceRoleStatus, ntnQosUserPolicyRoleCombination=ntnQosUserPolicyRoleCombination, ntnQosIfAppsStorage=ntnQosIfAppsStorage, ntnQosDsL2AccessElemVlanIdMin=ntnQosDsL2AccessElemVlanIdMin, ntnQosQueueShapingLabel=ntnQosQueueShapingLabel, ntnClfrComponentStatus=ntnClfrComponentStatus, ntnQosIfAppsEntry=ntnQosIfAppsEntry, ntnQosDscpToCosStatus=ntnQosDscpToCosStatus, ntnClfrBlockAction=ntnClfrBlockAction, avFcoeRedirTable=avFcoeRedirTable, ntnQosIfAppsStatus=ntnQosIfAppsStatus, ntnQosMappingDscpToCosEnabled=ntnQosMappingDscpToCosEnabled, ntnQosCountActSessionId=ntnQosCountActSessionId, ntnQosL2AccessElemVlanIdMin=ntnQosL2AccessElemVlanIdMin, ntnL2MultiFieldClfrSrcAddrMask=ntnL2MultiFieldClfrSrcAddrMask, ntnQosDsL2AccessElemOutActionRemarkCos=ntnQosDsL2AccessElemOutActionRemarkCos, ntnQosPolicyPrecResDiagsTotalFiltersAvail=ntnQosPolicyPrecResDiagsTotalFiltersAvail, IndexIntegerOrZero=IndexIntegerOrZero, ntnQosQuickPolicyControl=ntnQosQuickPolicyControl, ntnQosIfQueueIndex=ntnQosIfQueueIndex, ntnQosDsAccessElemName=ntnQosDsAccessElemName, ntnDsMultiFieldClfrSrcL4PortMin=ntnDsMultiFieldClfrSrcL4PortMin, ntnQosFilterStatsOutOfProfileOctets=ntnQosFilterStatsOutOfProfileOctets, ntnQosMeterStorage=ntnQosMeterStorage, ntnQosDsAccessElemDstL4PortMax=ntnQosDsAccessElemDstL4PortMax, ntnQosFilterSetStatsInProfileOctets=ntnQosFilterSetStatsInProfileOctets, ntnQosDsL2AccessElemOutActionDrop=ntnQosDsL2AccessElemOutActionDrop, avFcoeRedirEgressIssueDetected=avFcoeRedirEgressIssueDetected, ntnQosQsetPriAssignmentStatus=ntnQosQsetPriAssignmentStatus, ntnQosConfigQosOperMode=ntnQosConfigQosOperMode, ntnQosTBMeters=ntnQosTBMeters, ntnClfrBlockEntry=ntnClfrBlockEntry, ntnQosConfigDefaultQueueCfg=ntnQosConfigDefaultQueueCfg, ntnQosMeterTable=ntnQosMeterTable, ntnQosQuickPolicyTPID=ntnQosQuickPolicyTPID, avFcoeRedirActionEgressInterface=avFcoeRedirActionEgressInterface, ntnQosCountActStorage=ntnQosCountActStorage, ntnQosQsetPriAssignmentPri=ntnQosQsetPriAssignmentPri, ntnL2MultiFieldClfrVlanIdMax=ntnL2MultiFieldClfrVlanIdMax, ntnQosTBParamTrTCMAware=ntnQosTBParamTrTCMAware, ntnL2MultiFieldClfrIvidMin=ntnL2MultiFieldClfrIvidMin, ntnQosDsL2AccessElemYelActionRemarkCos=ntnQosDsL2AccessElemYelActionRemarkCos, ntnQosFilterSetStatsStatus=ntnQosFilterSetStatsStatus, ntnClfrBlockTable=ntnClfrBlockTable, ntnQosIfQueueAbsBandwidth=ntnQosIfQueueAbsBandwidth, ntnQosInterfaceRoleNextFree=ntnQosInterfaceRoleNextFree, ntnQosQuickPolicyPbitsValue=ntnQosQuickPolicyPbitsValue, ntnQosDsL2AccessElemIvidMax=ntnQosDsL2AccessElemIvidMax, FcId=FcId, ntnQosDsL2AccessElemSecondaryBurstSize=ntnQosDsL2AccessElemSecondaryBurstSize, ntnQosIfcActionStatus=ntnQosIfcActionStatus, ntnQosApplicationClasses=ntnQosApplicationClasses, ntnQosAccessAsgnEntry=ntnQosAccessAsgnEntry, ntnQosDsL2AccessElemSecondaryRate=ntnQosDsL2AccessElemSecondaryRate, ntnQosFilterLimitingOperEnabled=ntnQosFilterLimitingOperEnabled, ntnQosTBParamTrTCMBlind=ntnQosTBParamTrTCMBlind, ntnQosCosShapingLabel=ntnQosCosShapingLabel, ntnQosIfcActionLabel=ntnQosIfcActionLabel, ntnQosDsL2AccessElemNonIpPkt=ntnQosDsL2AccessElemNonIpPkt, ntnL2MultiFieldClfrTable=ntnL2MultiFieldClfrTable, ntnQosUserPolicyStatus=ntnQosUserPolicyStatus, ntnL2MultiFieldClfrPktType=ntnL2MultiFieldClfrPktType, ntnQosQsetPriAssignmentTable=ntnQosQsetPriAssignmentTable, ntnQosTBParamMinRate=ntnQosTBParamMinRate, ntnQosDsL2AccessElemStorage=ntnQosDsL2AccessElemStorage, avFcoeRedirActionUpdateDstMac=avFcoeRedirActionUpdateDstMac, ntnQosDsL2AccessElemYelActionSetPrec=ntnQosDsL2AccessElemYelActionSetPrec, ntnQosDsL2AccessElemEntry=ntnQosDsL2AccessElemEntry, ntnQosCountActPkts=ntnQosCountActPkts, ntnQosDsL2AccessElemKnownNonIpMcast=ntnQosDsL2AccessElemKnownNonIpMcast, ntnQosQueueShapingIfIndex=ntnQosQueueShapingIfIndex, ntnQosInterfaceRoleRole=ntnQosInterfaceRoleRole, ntnQosCosToDscpStorage=ntnQosCosToDscpStorage, ntnL2MultiFieldClfrLabel=ntnL2MultiFieldClfrLabel, ntnL2MultiFieldClfrStorage=ntnL2MultiFieldClfrStorage, ntnQosTBParamRate=ntnQosTBParamRate, ntnQosConfigFcoeRedirOperMode=ntnQosConfigFcoeRedirOperMode, ntnQosIfAppsIfType=ntnQosIfAppsIfType, ntnQosDsL2AccessElemDscp=ntnQosDsL2AccessElemDscp, ntnQosQsetDscpAssignmentGroup=ntnQosQsetDscpAssignmentGroup, ntnQosDsL2AccessElemVlanIdMax=ntnQosDsL2AccessElemVlanIdMax, ntnQosShapingParamsEntry=ntnQosShapingParamsEntry, ntnQosIfAssignmentEntry=ntnQosIfAssignmentEntry, ntnQosAccessAsgnYelActionRemarkDscp=ntnQosAccessAsgnYelActionRemarkDscp, ntnQosDsAccessElemNextFree=ntnQosDsAccessElemNextFree, ntnQosPolicyPrecedence=ntnQosPolicyPrecedence, ntnQosDEIEntry=ntnQosDEIEntry, ntnQosPrcSupportMaxPris=ntnQosPrcSupportMaxPris, ntnQosTBParamGroup=ntnQosTBParamGroup, QosIeee802Cos=QosIeee802Cos, ntnQosTBParamStatus=ntnQosTBParamStatus, ntnQosDsAccessElemBlock=ntnQosDsAccessElemBlock, ntnQosDsL2AccessElemIpv4Options=ntnQosDsL2AccessElemIpv4Options, ntnL2MultiFieldClfrIvidMax=ntnL2MultiFieldClfrIvidMax, ntnQosInterfaceRoleEntry=ntnQosInterfaceRoleEntry, ntnQosFilterStatsTable=ntnQosFilterStatsTable, ntnQosDsL2AccessElemYelActionDrop=ntnQosDsL2AccessElemYelActionDrop, ntnQosQsetDscpAssignmentEntry=ntnQosQsetDscpAssignmentEntry, ntnQosPolicyDiagsTotalMetersAvail=ntnQosPolicyDiagsTotalMetersAvail, ntnQosMappingCosToDscpEnabled=ntnQosMappingCosToDscpEnabled, ntnQosBaseActionStatus=ntnQosBaseActionStatus, ntnQosFilterStatsFilterId=ntnQosFilterStatsFilterId, ntnQosShapingParamsStatus=ntnQosShapingParamsStatus, ntnQosDscpToCosStorage=ntnQosDscpToCosStorage, ntnQosPolicyPrecResDiagsNonQosKeysConsumed=ntnQosPolicyPrecResDiagsNonQosKeysConsumed, ntnQosIfShapingSpecific=ntnQosIfShapingSpecific, ntnQosPolicyDeviceIdentMaxMsg=ntnQosPolicyDeviceIdentMaxMsg, ntnQosAccessAsgnOutActionRemarkDscp=ntnQosAccessAsgnOutActionRemarkDscp, ntnQosDsAccessElemId=ntnQosDsAccessElemId, ntnQosUserPolicyGroup=ntnQosUserPolicyGroup, ntnQosPolicyTable=ntnQosPolicyTable, ntnQosIfcActionSetEgressNUcastIfc=ntnQosIfcActionSetEgressNUcastIfc, ntnQosBaseActionTable=ntnQosBaseActionTable, ntnQosBaseActionDrop=ntnQosBaseActionDrop, ntnSystemClfrUnknownMcastFrames=ntnSystemClfrUnknownMcastFrames, ntnDsMultiFieldClfrSrcAddr=ntnDsMultiFieldClfrSrcAddr, ntnDsMultiFieldClfrDstPrefixLength=ntnDsMultiFieldClfrDstPrefixLength, ntnQosBaseActionGroup=ntnQosBaseActionGroup, ntnL2MultiFieldClfrEtherType=ntnL2MultiFieldClfrEtherType, ntnClfrBlockPrecedence=ntnClfrBlockPrecedence, ntnL2MultiFieldClfrStatus=ntnL2MultiFieldClfrStatus, ntnQosPrcSupportSupportedAttrs=ntnQosPrcSupportSupportedAttrs, ntnQosDsL2AccessElemIpFlags=ntnQosDsL2AccessElemIpFlags, ntnQosPolicyAgtClasses=ntnQosPolicyAgtClasses, ntnQosInterfaceRoleCapabilities=ntnQosInterfaceRoleCapabilities, ntnQosPolicyClassifierType=ntnQosPolicyClassifierType, avFcoeRedirEtherType=avFcoeRedirEtherType, ntnQosPolicyPrecResDiagsGroup=ntnQosPolicyPrecResDiagsGroup, ntnQosDEITable=ntnQosDEITable, ntnClfrComponentStorage=ntnClfrComponentStorage, ntnQosQsetDscpAssignmentDscp=ntnQosQsetDscpAssignmentDscp, ntnQosTBParamSimpleTokenBucket=ntnQosTBParamSimpleTokenBucket, ntnQosIfQueueSize=ntnQosIfQueueSize, ntnClfrBlockGroup=ntnClfrBlockGroup, ntnDsMultiFieldClfrDstL4PortMin=ntnDsMultiFieldClfrDstL4PortMin, ntnQosIfShapingTable=ntnQosIfShapingTable, ntnQosL2AccessElemSrcAddr=ntnQosL2AccessElemSrcAddr, ntnQosDsL2AccessElemYelActionRemarkDscp=ntnQosDsL2AccessElemYelActionRemarkDscp, avFcoeRedirActionEgressTrunkId=avFcoeRedirActionEgressTrunkId, ntnQosInterfaceTypeTable=ntnQosInterfaceTypeTable, ntnQosPolicyPrecResDiagsEntry=ntnQosPolicyPrecResDiagsEntry, ntnQosConfigFcoeRedirAvail=ntnQosConfigFcoeRedirAvail, ntnQosUserPolicyEntry=ntnQosUserPolicyEntry, ntnQosDsAccessElemTable=ntnQosDsAccessElemTable, ntnQosQuickPolicyVid=ntnQosQuickPolicyVid, ntnQosShapingParamsLabel=ntnQosShapingParamsLabel, ntnQosCosShapingSpecific=ntnQosCosShapingSpecific, ntnQosConfigResetToDefaults=ntnQosConfigResetToDefaults, avFcoeRedirProcessedFrames=avFcoeRedirProcessedFrames, ntnQosMeterSpecific=ntnQosMeterSpecific, ntnQosFilterSetStatsEntry=ntnQosFilterSetStatsEntry, ntnSystemClfrBcastFrames=ntnSystemClfrBcastFrames, ntnQosPolicyDiagsNonQosMasksConsumed=ntnQosPolicyDiagsNonQosMasksConsumed, ntnQosPolicyDeviceIdentTable=ntnQosPolicyDeviceIdentTable, ntnQosUserPolicySessionGroup=ntnQosUserPolicySessionGroup, PYSNMP_MODULE_ID=ntnQosPolicyEvolPib, ntnQosUserPolicyId=ntnQosUserPolicyId, ntnQosQsetDscpAssignmentQueue=ntnQosQsetDscpAssignmentQueue, ntnQosQuickPolicyId=ntnQosQuickPolicyId, ntnQosDsL2AccessElemDstMacAddrMask=ntnQosDsL2AccessElemDstMacAddrMask, ntnSystemClfrKnownMcastFrames=ntnSystemClfrKnownMcastFrames, ntnQosInterfaceTypeStorageType=ntnQosInterfaceTypeStorageType, ntnQosIfQueueStorage=ntnQosIfQueueStorage, ntnDsMultiFieldClfrVersion=ntnDsMultiFieldClfrVersion, ntnQosTBParamTable=ntnQosTBParamTable, ntnQosL2AccessElemBlock=ntnQosL2AccessElemBlock, ntnQosDsL2AccessElemUnknownUcastFrames=ntnQosDsL2AccessElemUnknownUcastFrames, ntnQosMappingClassesScalars=ntnQosMappingClassesScalars, ntnQosAccessAsgnName=ntnQosAccessAsgnName, ntnDsMultiFieldClfrNextFree=ntnDsMultiFieldClfrNextFree, ntnQosUserPolicySessionStart=ntnQosUserPolicySessionStart, ntnQosInterfaceRoleId=ntnQosInterfaceRoleId, ntnQosPolicyId=ntnQosPolicyId, ntnL2MultiFieldClfrId=ntnL2MultiFieldClfrId, ntnQosPolicyDeviceIdentGroup=ntnQosPolicyDeviceIdentGroup, ntnQosAccessAsgnSecondaryRate=ntnQosAccessAsgnSecondaryRate, ntnQosUserPolicyUserName=ntnQosUserPolicyUserName, ntnQosL2AccessElemGroup=ntnQosL2AccessElemGroup, ntnSystemClfrPatternL2Format=ntnSystemClfrPatternL2Format, ntnQosIfcActionSessionId=ntnQosIfcActionSessionId, ntnQosDsL2AccessElemActionDrop=ntnQosDsL2AccessElemActionDrop, ntnQosIfQueueGroup=ntnQosIfQueueGroup, ntnQosDsL2AccessElemEtherType=ntnQosDsL2AccessElemEtherType, ntnQosIfShapingLabel=ntnQosIfShapingLabel, ntnQosQsetDscpAssignmentId=ntnQosQsetDscpAssignmentId, ntnQosDsAccessElemSrcL4PortMax=ntnQosDsAccessElemSrcL4PortMax, ntnQosIfQueueBandwidthAllocation=ntnQosIfQueueBandwidthAllocation, ntnQosDsAccessElemGroup=ntnQosDsAccessElemGroup, ntnQosDsL2AccessElemEvalPrec=ntnQosDsL2AccessElemEvalPrec, ntnQosInterfaceTypeRoles=ntnQosInterfaceTypeRoles, ntnQosIfAppsDHCPServer=ntnQosIfAppsDHCPServer, ntnQosCountActEntry=ntnQosCountActEntry, ntnQosMeterFailNext=ntnQosMeterFailNext, ntnQosFilterStatsOutOfProfilePkts=ntnQosFilterStatsOutOfProfilePkts, ntnL2MultiFieldClfrVlanIdMin=ntnL2MultiFieldClfrVlanIdMin, ntnQosDsL2AccessElemActionRemarkCos=ntnQosDsL2AccessElemActionRemarkCos, ntnClfrComponentGroup=ntnClfrComponentGroup, ntnQosDsL2AccessElemId=ntnQosDsL2AccessElemId, ntnQosPolicyEvolPibCompliance=ntnQosPolicyEvolPibCompliance, ntnQosInterfaceRoleIfClass=ntnQosInterfaceRoleIfClass, ntnQosL2AccessElemEtherType=ntnQosL2AccessElemEtherType, ntnQosIfShapingGroup=ntnQosIfShapingGroup, ntnQosQsetDscpAssignmentStorageType=ntnQosQsetDscpAssignmentStorageType)
mibBuilder.exportSymbols("NTN-QOS-POLICY-EVOL-PIB", ntnClfrBlockId=ntnClfrBlockId, ntnQosTBParamSessionId=ntnQosTBParamSessionId, ntnQosShapingParamsGroup=ntnQosShapingParamsGroup, ntnL2MultiFieldClfrTPID=ntnL2MultiFieldClfrTPID, ntnQosIfcActionNextFree=ntnQosIfcActionNextFree, avFcoeRedirStatus=avFcoeRedirStatus, ntnQosDsL2AccessElemDstL4PortMax=ntnQosDsL2AccessElemDstL4PortMax, ntnQosBaseActionSetDropPrecedence=ntnQosBaseActionSetDropPrecedence, ntnQosConfigClearStats=ntnQosConfigClearStats, ntnQosIfAssignmentIfIndex=ntnQosIfAssignmentIfIndex, ntnQosIfAppsDefaultGateway=ntnQosIfAppsDefaultGateway, ntnQosL2AccessElemTable=ntnQosL2AccessElemTable, InterfaceList=InterfaceList, ntnQosMeterLabel=ntnQosMeterLabel, ntnQosDsL2AccessElemGroup=ntnQosDsL2AccessElemGroup, ntnQosMappingScalarsGroup=ntnQosMappingScalarsGroup, ntnQosL2AccessElemVlanTag=ntnQosL2AccessElemVlanTag, ntnQosPrcSupportId=ntnQosPrcSupportId, avFcoeRedirVlanIdMax=avFcoeRedirVlanIdMax, ntnQosDsL2AccessElemUnknownIpMcast=ntnQosDsL2AccessElemUnknownIpMcast, ntnQosTBParamSrTCMAware=ntnQosTBParamSrTCMAware, ntnQosQueueShapingStorage=ntnQosQueueShapingStorage, ntnQosDsL2AccessElemMasterBlockMember=ntnQosDsL2AccessElemMasterBlockMember, ntnQosDsAccessElemActionSetPrec=ntnQosDsAccessElemActionSetPrec, ntnQosFilterStatsEntry=ntnQosFilterStatsEntry, ntnQosPolicyPrecResDiagsFiltersConsumed=ntnQosPolicyPrecResDiagsFiltersConsumed, ntnQosDscpToCosDscp=ntnQosDscpToCosDscp, ntnQosPolicyDiagsMetersConsumed=ntnQosPolicyDiagsMetersConsumed, ntnQosFilterStatsPolicyId=ntnQosFilterStatsPolicyId, ntnQosDsL2AccessElemOutActionSetPrec=ntnQosDsL2AccessElemOutActionSetPrec, ntnSystemClfrVersion=ntnSystemClfrVersion, ntnQosMeterSessionId=ntnQosMeterSessionId, ntnQosBaseActionUpdateUserPriority=ntnQosBaseActionUpdateUserPriority, ntnQosInterfaceTypeId=ntnQosInterfaceTypeId, ntnClfrComponentId=ntnClfrComponentId, ntnQosIfAppsAppEnable=ntnQosIfAppsAppEnable, ntnQosDsL2AccessElemSrcIpAddr=ntnQosDsL2AccessElemSrcIpAddr, ntnQosIfcActionSetEgressMask=ntnQosIfcActionSetEgressMask, ntnQosPolicyClassifierId=ntnQosPolicyClassifierId, ntnQosBaseActionId=ntnQosBaseActionId, ntnQosDsAccessElemActionRemarkCos=ntnQosDsAccessElemActionRemarkCos, avFcoeRedirName=avFcoeRedirName, ntnQosDsAccessElemDscp=ntnQosDsAccessElemDscp, ntnClfrComponentSetId=ntnClfrComponentSetId, ntnQosL2AccessElemActionDrop=ntnQosL2AccessElemActionDrop, ntnQosAccessAsgnYelActionRemarkCos=ntnQosAccessAsgnYelActionRemarkCos, ntnQosUserPolicySrcMacAddrMask=ntnQosUserPolicySrcMacAddrMask, ntnQosIfcActionStorage=ntnQosIfcActionStorage, ntnQosConfigUBPSupportLevel=ntnQosConfigUBPSupportLevel, ntnQosTBParamType=ntnQosTBParamType, ntnQosMeterId=ntnQosMeterId, ntnQosAccessAsgnBurstSize=ntnQosAccessAsgnBurstSize, ntnQosAccessAsgnOutActionSetPrec=ntnQosAccessAsgnOutActionSetPrec, ntnQosQuickPolicyIVid=ntnQosQuickPolicyIVid, ntnQosShapingParamsQueueSize=ntnQosShapingParamsQueueSize, ntnQosL2AccessElemSrcAddrMask=ntnQosL2AccessElemSrcAddrMask, ntnQosDsAccessElemEvalPrec=ntnQosDsAccessElemEvalPrec, ntnQosPolicyDeviceIdentDescr=ntnQosPolicyDeviceIdentDescr, ntnQosPolicyEvolPib=ntnQosPolicyEvolPib, ntnQosPolicyNextFree=ntnQosPolicyNextFree, ntnQosQueueShapingGroup=ntnQosQueueShapingGroup, ntnQosDEIInterfaceId=ntnQosDEIInterfaceId, ntnClfrBlockNumberNextFree=ntnClfrBlockNumberNextFree, ntnQosConfigRoleAssocCompatLevel=ntnQosConfigRoleAssocCompatLevel, ntnQosUserRoleSessionGroup=ntnQosUserRoleSessionGroup, ntnQosIfAppsTable=ntnQosIfAppsTable, ntnQosDsL2AccessElemSrcL4PortMax=ntnQosDsL2AccessElemSrcL4PortMax, ntnQosUserRoleSessionId=ntnQosUserRoleSessionId, ntnQosFilterSetStatsStorage=ntnQosFilterSetStatsStorage, ntnDsMultiFieldClfrIpv4Options=ntnDsMultiFieldClfrIpv4Options, ntnQosDsL2AccessElemVersion=ntnQosDsL2AccessElemVersion, ntnQosDsL2AccessElemUnknownNonIpMcast=ntnQosDsL2AccessElemUnknownNonIpMcast, ntnQosDsL2AccessElemActionRemarkDscp=ntnQosDsL2AccessElemActionRemarkDscp, ntnQosPolicyPrecResDiagsApplicationNameUsed=ntnQosPolicyPrecResDiagsApplicationNameUsed, VersionIndicator=VersionIndicator, ntnQosDsL2AccessElemDstIpAddr=ntnQosDsL2AccessElemDstIpAddr, ntnQosMappingClasses=ntnQosMappingClasses, ntnQosQsetPriAssignmentId=ntnQosQsetPriAssignmentId, ntnQosDsL2AccessElemOutActionRemarkDscp=ntnQosDsL2AccessElemOutActionRemarkDscp, ntnQosIfAssignmentCapabilities=ntnQosIfAssignmentCapabilities, ntnQosQuickPolicyIPriority=ntnQosQuickPolicyIPriority, ntnDsMultiFieldClfrTable=ntnDsMultiFieldClfrTable, ntnQosQuickPolicy=ntnQosQuickPolicy, ntnQosTBParamStorage=ntnQosTBParamStorage, ntnQosConfigTrackStatistics=ntnQosConfigTrackStatistics, ntnQosUserRoleUserGroup=ntnQosUserRoleUserGroup, ntnQosInterfaceTypeNextFree=ntnQosInterfaceTypeNextFree, ntnQosUserRoleTable=ntnQosUserRoleTable, ntnQosL2AccessElemUserPriority=ntnQosL2AccessElemUserPriority, ntnClfrBlockClfrCompSetId=ntnClfrBlockClfrCompSetId, avFcoeRedirNextFree=avFcoeRedirNextFree, ntnSystemClfrLabel=ntnSystemClfrLabel, ntnQosL2AccessElemActionSetPrec=ntnQosL2AccessElemActionSetPrec, ntnQosDsL2AccessElemIvidMin=ntnQosDsL2AccessElemIvidMin, ntnQosFilterStatsStorage=ntnQosFilterStatsStorage, ntnQosDsAccessElemEntry=ntnQosDsAccessElemEntry, avFcoeRedirSrcId=avFcoeRedirSrcId, ntnL2MultiFieldClfrITPID=ntnL2MultiFieldClfrITPID, ntnQosCosToDscpTable=ntnQosCosToDscpTable, ntnQosAccessAsgnStatsType=ntnQosAccessAsgnStatsType, ntnQosShapingParamsStorageType=ntnQosShapingParamsStorageType, ntnQosPolicyDiagsEntry=ntnQosPolicyDiagsEntry, ntnQosAccessAsgnMeteringMode=ntnQosAccessAsgnMeteringMode, ntnSystemClfrUnknownUcastFrames=ntnSystemClfrUnknownUcastFrames, ntnQosFilterStatsStatus=ntnQosFilterStatsStatus, ntnQosDsAccessElemFlowId=ntnQosDsAccessElemFlowId, ntnQosDscpToCosCos=ntnQosDscpToCosCos, ntnQosMeterClasses=ntnQosMeterClasses, ntnQosDscpToCosTable=ntnQosDscpToCosTable, ntnQosAccessAsgnOutActionDrop=ntnQosAccessAsgnOutActionDrop, ntnQosFilterSetStatsInProfilePkts=ntnQosFilterSetStatsInProfilePkts, ntnQosIfAssignmentStatus=ntnQosIfAssignmentStatus, ntnQosL2AccessElemVlanIdMax=ntnQosL2AccessElemVlanIdMax, ntnQosDsL2AccessElemFlowId=ntnQosDsL2AccessElemFlowId, ntnDsMultiFieldClfrStorage=ntnDsMultiFieldClfrStorage, ntnQosDsL2AccessElemDstMacAddr=ntnQosDsL2AccessElemDstMacAddr, ntnQosFilterSetStatsPrecedence=ntnQosFilterSetStatsPrecedence, ntnQosL2AccessElemId=ntnQosL2AccessElemId, ntnQosQuickPolicyPortList=ntnQosQuickPolicyPortList, ntnQosQueueShapingStatus=ntnQosQueueShapingStatus, ntnQosConfigNtApplicationMode=ntnQosConfigNtApplicationMode, ntnQosPrcSupportGroup=ntnQosPrcSupportGroup, ntnQosPolicyEvolPibConformance=ntnQosPolicyEvolPibConformance, ntnQosIfShapingEntry=ntnQosIfShapingEntry, ntnQosPolicyAction=ntnQosPolicyAction, ntnQosDsL2AccessElemBcastFrames=ntnQosDsL2AccessElemBcastFrames, ntnQosDsL2AccessElemSrcL4PortMin=ntnQosDsL2AccessElemSrcL4PortMin, ntnQosBaseActionUpdateDscp=ntnQosBaseActionUpdateDscp, ntnQosQueueShapingTable=ntnQosQueueShapingTable, ntnSystemClfrUnknownIpMcast=ntnSystemClfrUnknownIpMcast, ntnQosPolicyDeviceIdentId=ntnQosPolicyDeviceIdentId, ntnQosInterfaceRoleGroup=ntnQosInterfaceRoleGroup, ntnClfrComponentSetNextFree=ntnClfrComponentSetNextFree, ntnQosCosToDscpCos=ntnQosCosToDscpCos, ntnDsMultiFieldClfrFlowId=ntnDsMultiFieldClfrFlowId, ntnQosL2AccessElemActionRemarkDscp=ntnQosL2AccessElemActionRemarkDscp, ntnDsMultiFieldClfrSessionId=ntnDsMultiFieldClfrSessionId, ntnQosCountActOctets=ntnQosCountActOctets, ntnQosDsAccessElemDstL4PortMin=ntnQosDsAccessElemDstL4PortMin, ntnQosDsL2AccessElemDstL4PortMin=ntnQosDsL2AccessElemDstL4PortMin, ntnQosDsL2AccessElemKnownIpMcast=ntnQosDsL2AccessElemKnownIpMcast, ntnQosFilterStatsInProfileOctets=ntnQosFilterStatsInProfileOctets, ntnClfrBlockNumber=ntnClfrBlockNumber, ntnQosUserPolicySrcMacAddr=ntnQosUserPolicySrcMacAddr, ntnQosDscpToCosNewDscp=ntnQosDscpToCosNewDscp, ntnQosDsL2AccessElemNextFree=ntnQosDsL2AccessElemNextFree, ntnQosIfQueueEntry=ntnQosIfQueueEntry, ntnQosDsL2AccessElemUserPriority=ntnQosDsL2AccessElemUserPriority, ntnQosBaseActionLabel=ntnQosBaseActionLabel, ntnQosPolicyPrecResDiagsPrec=ntnQosPolicyPrecResDiagsPrec, ntnQosCosShapingCos=ntnQosCosShapingCos, ntnQosDsAccessElemSrcPrefixLength=ntnQosDsAccessElemSrcPrefixLength, ntnL2MultiFieldClfrCFI=ntnL2MultiFieldClfrCFI, ntnL2MultiFieldClfrNextFree=ntnL2MultiFieldClfrNextFree, ntnQosIfShapingStatus=ntnQosIfShapingStatus, ntnQosFilterStatsInterfaceId=ntnQosFilterStatsInterfaceId, ntnQosPolicyEvolPibGroups=ntnQosPolicyEvolPibGroups, ntnQosIfcActionId=ntnQosIfcActionId, ntnQosTBParamAvgRate=ntnQosTBParamAvgRate, ntnQosDsL2AccessElemKnownMcastFrames=ntnQosDsL2AccessElemKnownMcastFrames, ntnSystemClfrPatternData=ntnSystemClfrPatternData, ntnQosConfigFcoeControllerMacAddr=ntnQosConfigFcoeControllerMacAddr, ntnQosFilterSetStatsAccessElemId=ntnQosFilterSetStatsAccessElemId, ntnQosPolicyPrecResDiagsApplicationIdUsed=ntnQosPolicyPrecResDiagsApplicationIdUsed, ntnQosFilterStatsGroup=ntnQosFilterStatsGroup, ntnQosAccessAsgnTable=ntnQosAccessAsgnTable, ntnQosTBParamLabel=ntnQosTBParamLabel, ntnSystemClfrKnownNonIpMcast=ntnSystemClfrKnownNonIpMcast, ntnQosPrcSupportSupportedPrc=ntnQosPrcSupportSupportedPrc, ntnQosPolicyDeviceIdentEntry=ntnQosPolicyDeviceIdentEntry, ntnQosAccessAsgnStatus=ntnQosAccessAsgnStatus, ntnQosL2AccessElemDstAddrMask=ntnQosL2AccessElemDstAddrMask, ntnQosCosShapingGroup=ntnQosCosShapingGroup, ntnQosL2AccessElemStorage=ntnQosL2AccessElemStorage, ntnL2MultiFieldClfrIUserPriority=ntnL2MultiFieldClfrIUserPriority)
