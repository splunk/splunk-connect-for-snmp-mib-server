#
# PySNMP MIB module BRS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BRS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:24:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, IpAddress, Unsigned32, Gauge32, Integer32, ObjectIdentity, enterprises, Counter32, MibIdentifier, Bits, NotificationType, ModuleIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Unsigned32", "Gauge32", "Integer32", "ObjectIdentity", "enterprises", "Counter32", "MibIdentifier", "Bits", "NotificationType", "ModuleIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
proteon = MibIdentifier((1, 3, 6, 1, 4, 1, 1))
proAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1))
proFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1, 7))
proFeatureBrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1, 7, 1))
proBrsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1))
class BRSPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("low", 1), ("normal", 2), ("high", 3), ("urgent", 4))

proBrsNumber = MibScalar((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsNumber.setStatus('mandatory')
proBrsPortTable = MibTable((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: proBrsPortTable.setStatus('mandatory')
proBrsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: proBrsPortEntry.setStatus('mandatory')
proBrsClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassNumber.setStatus('mandatory')
proBrsDefaultClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsDefaultClassName.setStatus('mandatory')
proBrsDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1, 3), BRSPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsDefaultPriority.setStatus('mandatory')
proBrsClassTable = MibTable((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3), )
if mibBuilder.loadTexts: proBrsClassTable.setStatus('mandatory')
proBrsClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "BRS-MIB", "proBrsClassId"))
if mibBuilder.loadTexts: proBrsClassEntry.setStatus('mandatory')
proBrsClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassId.setStatus('mandatory')
proBrsClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassName.setStatus('mandatory')
proBrsClassAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proBrsClassAlloc.setStatus('mandatory')
proBrsClassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassBytes.setStatus('mandatory')
proBrsClassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassPkts.setStatus('mandatory')
proBrsClassDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassDiscs.setStatus('mandatory')
proBrsFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4), )
if mibBuilder.loadTexts: proBrsFilterTable.setStatus('mandatory')
proBrsFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "BRS-MIB", "proBrsClassId"), (0, "BRS-MIB", "proBrsFilterId"))
if mibBuilder.loadTexts: proBrsFilterEntry.setStatus('mandatory')
proBrsFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterId.setStatus('mandatory')
proBrsFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterName.setStatus('mandatory')
proBrsFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("high", 3), ("urgent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterPriority.setStatus('mandatory')
proBrsFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterPortType.setStatus('mandatory')
proBrsFilterLowPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterLowPortNum.setStatus('mandatory')
proBrsFilterHighPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterHighPortNum.setStatus('mandatory')
proBrsFilterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterIpAddr.setStatus('mandatory')
proBrsFilterTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterTag.setStatus('mandatory')
mibBuilder.exportSymbols("BRS-MIB", proBrsClassDiscs=proBrsClassDiscs, proFeatureBrs=proFeatureBrs, proBrsDefaultPriority=proBrsDefaultPriority, proBrsClassAlloc=proBrsClassAlloc, proBrsClassName=proBrsClassName, proBrsFilterIpAddr=proBrsFilterIpAddr, proBrsFilterPriority=proBrsFilterPriority, proBrsFilterName=proBrsFilterName, proBrsClassNumber=proBrsClassNumber, proBrsFilterPortType=proBrsFilterPortType, proAdmin=proAdmin, proBrsPortEntry=proBrsPortEntry, proBrsNumber=proBrsNumber, proteon=proteon, proBrsFilterEntry=proBrsFilterEntry, proBrsFilterTag=proBrsFilterTag, proFeature=proFeature, proBrsMib=proBrsMib, proBrsClassPkts=proBrsClassPkts, proBrsClassBytes=proBrsClassBytes, proBrsClassTable=proBrsClassTable, proBrsDefaultClassName=proBrsDefaultClassName, proBrsFilterTable=proBrsFilterTable, proBrsFilterHighPortNum=proBrsFilterHighPortNum, BRSPriority=BRSPriority, proBrsPortTable=proBrsPortTable, proBrsClassEntry=proBrsClassEntry, proBrsFilterId=proBrsFilterId, proBrsFilterLowPortNum=proBrsFilterLowPortNum, proBrsClassId=proBrsClassId)
