#
# PySNMP MIB module HM2-TIMESYNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-TIMESYNC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hm2ConfigurationMibs, HmEnabledStatus, HmTimeSeconds1970 = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus", "HmTimeSeconds1970")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Counter64, IpAddress, Gauge32, iso, Bits, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Counter64", "IpAddress", "Gauge32", "iso", "Bits", "ModuleIdentity", "MibIdentifier")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
hm2TimeSyncMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 50))
hm2TimeSyncMib.setRevisions(('2011-03-16 00:00',))
if mibBuilder.loadTexts: hm2TimeSyncMib.setLastUpdated('201103160000Z')
if mibBuilder.loadTexts: hm2TimeSyncMib.setOrganization('Hirschmann Automation and Control GmbH')
class HmSntpClientServerStatus(TextualConvention, Integer32):
    reference = 'RFC 4330 - Simple Network Time Protocol (SNTP) Version 4 for IPv4, IPv6 and OSI; Section 4.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("success", 2), ("requestTimedOut", 3), ("badDateEncoded", 4), ("versionNotSupported", 5), ("serverUnsychronized", 6), ("serverKissOfDeath", 7))

class Hm2Ptp2LogSyncIntervalTc(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-2, -1, 0, 1))
    namedValues = NamedValues(("msec-250", -2), ("msec-500", -1), ("sec-1", 0), ("sec-2", 1))

class Hm2Ptp2LogPdelayReqIntervalTc(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("sec-1", 0), ("sec-2", 1), ("sec-4", 2), ("sec-8", 3), ("sec-16", 4), ("sec-32", 5))

class PtpTimeInterval(TextualConvention, OctetString):
    reference = 'IEEE 1588-2008 Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PtpTimeStamp(TextualConvention, OctetString):
    reference = 'IEEE P1588 Standard '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

class PtpPortIdentity(TextualConvention, OctetString):
    reference = 'IEEE 1588-2008 Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

class PtpClockIdentity(TextualConvention, OctetString):
    reference = 'IEEE 1588-2008 Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PtpClockQuality(TextualConvention, OctetString):
    reference = 'IEEE 1588-2008 Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

hm2TimeSyncMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 0))
hm2TimeSyncMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1))
hm2TimeSyncMibSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 3))
hm2SystemTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 1))
hm2SntpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2))
hm2NtpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3))
hm2PtpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4))
hm2IrigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 5))
hm2SystemUtcTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 1, 1), HmTimeSeconds1970()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SystemUtcTime.setStatus('current')
hm2SystemTimeSource = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 1), ("sntp", 2), ("ntp", 3), ("ptp", 4), ("gps", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SystemTimeSource.setStatus('current')
hm2SystemLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 1, 3), HmTimeSeconds1970()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SystemLocalTime.setStatus('current')
hm2SystemLocalOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-780, 840)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SystemLocalOffset.setStatus('current')
hm2SntpServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 1))
hm2SntpServerBroadcastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2))
hm2SntpClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3))
hm2SntpServerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerAdminState.setStatus('current')
hm2SntpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 1, 2), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(123)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerPort.setStatus('current')
hm2SntpServerOnlyIfSync = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerOnlyIfSync.setStatus('current')
hm2SntpServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("notSynchronized", 2), ("syncToLocal", 3), ("syncToRefclock", 4), ("syncToRemoteServer", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SntpServerStatus.setStatus('current')
hm2SntpServerBroadcastAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerBroadcastAdminState.setStatus('current')
hm2SntpServerBroadcastAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerBroadcastAddrType.setStatus('current')
hm2SntpServerBroadcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerBroadcastAddr.setStatus('current')
hm2SntpServerBroadcastPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 4), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(123)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerBroadcastPort.setStatus('current')
hm2SntpServerBroadcastInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpServerBroadcastInterval.setStatus('current')
hm2SntpServerBroadcastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 10), )
if mibBuilder.loadTexts: hm2SntpServerBroadcastVlanTable.setStatus('current')
hm2SntpServerBroadcastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 10, 1), ).setIndexNames((0, "HM2-TIMESYNC-MIB", "hm2SntpServerBroadcastVlan"))
if mibBuilder.loadTexts: hm2SntpServerBroadcastVlanEntry.setStatus('current')
hm2SntpServerBroadcastVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SntpServerBroadcastVlan.setStatus('current')
hm2SntpServerBroadcastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 2, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SntpServerBroadcastVlanRowStatus.setStatus('current')
hm2SntpClientAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpClientAdminState.setStatus('current')
hm2SntpClientOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("broadcast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpClientOperatingMode.setStatus('current')
hm2SntpClientDisableAfterSync = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpClientDisableAfterSync.setStatus('current')
hm2SntpClientRequestInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpClientRequestInterval.setStatus('current')
hm2SntpClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("disabled", 1), ("notSynchronized", 2), ("synchronizedToRemoteServer", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SntpClientStatus.setStatus('current')
hm2SntpClientBroadcastRecvTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 2048)).clone(320)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SntpClientBroadcastRecvTimeout.setStatus('current')
hm2SntpClientServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10), )
if mibBuilder.loadTexts: hm2SntpClientServerAddrTable.setStatus('current')
hm2SntpClientServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1), ).setIndexNames((0, "HM2-TIMESYNC-MIB", "hm2SntpClientServerIndex"))
if mibBuilder.loadTexts: hm2SntpClientServerAddrEntry.setStatus('current')
hm2SntpClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2SntpClientServerIndex.setStatus('current')
hm2SntpClientServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SntpClientServerAddrType.setStatus('current')
hm2SntpClientServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SntpClientServerAddr.setStatus('current')
hm2SntpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1, 4), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(123)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SntpClientServerPort.setStatus('current')
hm2SntpClientServerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SntpClientServerDescr.setStatus('current')
hm2SntpClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1, 6), HmSntpClientServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SntpClientServerStatus.setStatus('current')
hm2SntpClientServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 2, 3, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SntpClientServerRowStatus.setStatus('current')
hm2NtpGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 1))
hm2NtpOperatingState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("notSynchronized", 2), ("syncToLocal", 3), ("syncToRefclock", 4), ("syncToRemoteServer", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NtpOperatingState.setStatus('current')
hm2NtpServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 2))
hm2NtpServerConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 2, 1))
hm2NtpServerAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 2, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NtpServerAdminState.setStatus('current')
hm2NtpServerOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("symmetric", 1), ("client-server", 2))).clone('client-server')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NtpServerOperatingMode.setStatus('current')
hm2NtpServerLocalClockStratum = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NtpServerLocalClockStratum.setStatus('current')
hm2NtpClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3))
hm2NtpClientConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 1))
hm2NtpClientAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NtpClientAdminState.setStatus('current')
hm2NtpClientOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("broadcast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NtpClientOperatingMode.setStatus('current')
hm2NtpClientServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4), )
if mibBuilder.loadTexts: hm2NtpClientServerAddrTable.setStatus('current')
hm2NtpClientServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1), ).setIndexNames((0, "HM2-TIMESYNC-MIB", "hm2NtpClientServerIndex"))
if mibBuilder.loadTexts: hm2NtpClientServerAddrEntry.setStatus('current')
hm2NtpClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2NtpClientServerIndex.setStatus('current')
hm2NtpClientServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientServerAddressType.setStatus('current')
hm2NtpClientServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientServerAddress.setStatus('current')
hm2NtpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 4), InetPortNumber().clone(123)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientServerPort.setStatus('current')
hm2NtpClientServerInitialBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 5), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientServerInitialBurst.setStatus('current')
hm2NtpClientServerBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 6), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientServerBurst.setStatus('current')
hm2NtpClientServerPrefer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientServerPrefer.setStatus('current')
hm2NtpClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("protocolError", 2), ("notSynchronized", 3), ("notResponding", 4), ("synchronizing", 5), ("synchronized", 6), ("genericError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NtpClientServerStatus.setStatus('current')
hm2NtpClientServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientServerRowStatus.setStatus('current')
hm2NtpClientListenAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5), )
if mibBuilder.loadTexts: hm2NtpClientListenAddrTable.setStatus('current')
hm2NtpClientListenAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5, 1), ).setIndexNames((0, "HM2-TIMESYNC-MIB", "hm2NtpClientListenAddrIndex"))
if mibBuilder.loadTexts: hm2NtpClientListenAddrEntry.setStatus('current')
hm2NtpClientListenAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2NtpClientListenAddrIndex.setStatus('current')
hm2NtpClientListenAddrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientListenAddrAddressType.setStatus('current')
hm2NtpClientListenAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientListenAddrAddress.setStatus('current')
hm2NtpClientListenAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5, 1, 4), InetPortNumber().clone(123)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientListenAddrPort.setStatus('current')
hm2NtpClientListenAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("protocolError", 2), ("notSynchronized", 3), ("notResponding", 4), ("synchronizing", 5), ("synchronized", 6), ("genericError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2NtpClientListenAddrStatus.setStatus('current')
hm2NtpClientListenAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 3, 3, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2NtpClientListenAddrRowStatus.setStatus('current')
hm2PtpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1))
hm2PtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PtpEnable.setStatus('current')
hm2PtpClockMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v2-boundary-clock", 2), ("v2-transparent-clock", 3))).clone('v2-transparent-clock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PtpClockMode.setStatus('current')
hm2PtpProfile = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-defined", 1), ("default-e2e", 2), ("default-p2p", 3))).clone('default-e2e')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PtpProfile.setStatus('current')
hm2PtpIsSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PtpIsSynchronized.setStatus('current')
hm2PtpSyncLowerBound = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999999)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PtpSyncLowerBound.setStatus('current')
hm2PtpSyncUpperBound = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(31, 1000000000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PtpSyncUpperBound.setStatus('current')
hm2PtpAbsMaxOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PtpAbsMaxOffset.setStatus('current')
hm2PtpTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 8), PtpTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PtpTimeSeconds.setStatus('current')
hm2PtpManagement = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PtpManagement.setStatus('current')
hm2Ptp2Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2))
hm2Ptp2Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1))
hm2Ptp2TwoStepClock = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TwoStepClock.setStatus('current')
hm2Ptp2ClockIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 2), PtpClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ClockIdentity.setStatus('current')
hm2Ptp2ClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 3), PtpClockQuality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ClockQuality.setStatus('current')
hm2Ptp2ClockClass = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ClockClass.setStatus('current')
hm2Ptp2ClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 254))).clone(namedValues=NamedValues(("within25ns", 32), ("within100ns", 33), ("within250ns", 34), ("within1000ns", 35), ("within2500ns", 36), ("within10us", 37), ("within25us", 38), ("within100us", 39), ("within250us", 40), ("within1000us", 41), ("within2500us", 42), ("within10ms", 43), ("within25ms", 44), ("within100ms", 45), ("within250ms", 46), ("within1s", 47), ("within10s", 48), ("beyond10s", 49), ("unknown", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ClockAccuracy.setStatus('current')
hm2Ptp2ClockVariance = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ClockVariance.setStatus('current')
hm2Ptp2Priority1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2Priority1.setStatus('current')
hm2Ptp2Priority2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2Priority2.setStatus('current')
hm2Ptp2DomainNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2DomainNumber.setStatus('current')
hm2Ptp2StepsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2StepsRemoved.setStatus('current')
hm2Ptp2OffsetFromMaster = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 11), PtpTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2OffsetFromMaster.setStatus('current')
hm2Ptp2MeanPathDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 12), PtpTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2MeanPathDelay.setStatus('current')
hm2Ptp2ParentPortIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 13), PtpPortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ParentPortIdentity.setStatus('current')
hm2Ptp2ParentStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ParentStats.setStatus('current')
hm2Ptp2ObservedParentOffsetScaledLogVariance = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ObservedParentOffsetScaledLogVariance.setStatus('current')
hm2Ptp2ObservedParentClockPhaseChangeRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2ObservedParentClockPhaseChangeRate.setStatus('current')
hm2Ptp2GrandmasterIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 17), PtpClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2GrandmasterIdentity.setStatus('current')
hm2Ptp2GrandmasterClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 18), PtpClockQuality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2GrandmasterClockQuality.setStatus('current')
hm2Ptp2GrandmasterClockClass = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2GrandmasterClockClass.setStatus('current')
hm2Ptp2GrandmasterClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 254))).clone(namedValues=NamedValues(("within25ns", 32), ("within100ns", 33), ("within250ns", 34), ("within1000ns", 35), ("within2500ns", 36), ("within10us", 37), ("within25us", 38), ("within100us", 39), ("within250us", 40), ("within1000us", 41), ("within2500us", 42), ("within10ms", 43), ("within25ms", 44), ("within100ms", 45), ("within250ms", 46), ("within1s", 47), ("within10s", 48), ("beyond10s", 49), ("unknown", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2GrandmasterClockAccuracy.setStatus('current')
hm2Ptp2GrandmasterClockVariance = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2GrandmasterClockVariance.setStatus('current')
hm2Ptp2GrandmasterPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2GrandmasterPriority1.setStatus('current')
hm2Ptp2GrandmasterPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2GrandmasterPriority2.setStatus('current')
hm2Ptp2CurrentUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767)).clone(37)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2CurrentUtcOffset.setStatus('current')
hm2Ptp2CurrentUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2CurrentUtcOffsetValid.setStatus('current')
hm2Ptp2Leap59 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2Leap59.setStatus('current')
hm2Ptp2Leap61 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2Leap61.setStatus('current')
hm2Ptp2TimeTraceable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TimeTraceable.setStatus('current')
hm2Ptp2FrequencyTraceable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2FrequencyTraceable.setStatus('current')
hm2Ptp2PtpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2PtpTimescale.setStatus('current')
hm2Ptp2TimeSource = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 96, 144, 160))).clone(namedValues=NamedValues(("atomicClock", 16), ("gps", 32), ("terrestrialRadio", 48), ("ptp", 64), ("ntp", 80), ("handSet", 96), ("other", 144), ("internalOscillator", 160))).clone('internalOscillator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TimeSource.setStatus('current')
hm2Ptp2PortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2), )
if mibBuilder.loadTexts: hm2Ptp2PortTable.setStatus('current')
hm2Ptp2PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2Ptp2PortEntry.setStatus('current')
hm2Ptp2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2PortEnable.setStatus('current')
hm2Ptp2PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initializing", 1), ("faulty", 2), ("disabled", 3), ("listening", 4), ("pre-master", 5), ("master", 6), ("passive", 7), ("uncalibrated", 8), ("slave", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2PortState.setStatus('current')
hm2Ptp2LogDelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2LogDelayReqInterval.setStatus('current')
hm2Ptp2PeerMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 4), PtpTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2PeerMeanPathDelay.setStatus('current')
hm2Ptp2LogAnnounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("sec-1", 0), ("sec-2", 1), ("sec-4", 2), ("sec-8", 3), ("sec-16", 4))).clone('sec-2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2LogAnnounceInterval.setStatus('current')
hm2Ptp2AnnounceReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2AnnounceReceiptTimeout.setStatus('current')
hm2Ptp2LogSyncInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 7), Hm2Ptp2LogSyncIntervalTc().clone('sec-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2LogSyncInterval.setStatus('current')
hm2Ptp2DelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("e2e", 1), ("p2p", 2), ("disabled", 254))).clone('e2e')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2DelayMechanism.setStatus('current')
hm2Ptp2LogPdelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 9), Hm2Ptp2LogPdelayReqIntervalTc().clone('sec-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2LogPdelayReqInterval.setStatus('current')
hm2Ptp2VersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptpVersion1", 1), ("ptpVersion2", 2))).clone('ptpVersion2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2VersionNumber.setStatus('current')
hm2Ptp2NetworkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("udpIpv4", 1), ("ieee8023", 3))).clone('ieee8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2NetworkProtocol.setStatus('current')
hm2Ptp2V1Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2V1Compatibility.setStatus('current')
hm2Ptp2DelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2000000000, 2000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2DelayAsymmetry.setStatus('current')
hm2Ptp2PortCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 14), Bits().clone(namedValues=NamedValues(("reserved", 0), ("one-step", 1), ("e2e-delay", 2), ("p2p-delay", 3), ("ptp2Ieee8023", 4), ("ptp2UdpIpv4", 5), ("ptp2UdpIpv6", 6), ("asymmCorrection", 7), ("halfDuplex", 8), ("ptp2UdpE2EGlobal", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2PortCapability.setStatus('current')
hm2Ptp2VlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4042)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2VlanID.setStatus('current')
hm2Ptp2VlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2VlanPriority.setStatus('current')
hm2Ptp2TCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3))
hm2Ptp2TCConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1))
hm2Ptp2TCClockIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 1), PtpClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TCClockIdentity.setStatus('current')
hm2Ptp2TCDelayMechanism = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254))).clone(namedValues=NamedValues(("e2e", 1), ("p2p", 2), ("e2e-optimized", 3), ("disabled", 254))).clone('e2e')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCDelayMechanism.setStatus('current')
hm2Ptp2TCPrimaryDomain = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCPrimaryDomain.setStatus('current')
hm2Ptp2TCSyntonized = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCSyntonized.setStatus('current')
hm2Ptp2TCNetworkProtocol = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("udpIpv4", 1), ("ieee8023", 3))).clone('ieee8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCNetworkProtocol.setStatus('current')
hm2Ptp2TCCurrentMaster = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 6), PtpPortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TCCurrentMaster.setStatus('current')
hm2Ptp2TCMultiDomainMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCMultiDomainMode.setStatus('current')
hm2Ptp2TCSyncLocalClock = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCSyncLocalClock.setStatus('current')
hm2Ptp2TCOffsetFromMaster = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 9), PtpTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TCOffsetFromMaster.setStatus('current')
hm2Ptp2TCMeanPathDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 10), PtpTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TCMeanPathDelay.setStatus('current')
hm2Ptp2TCVlanID = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCVlanID.setStatus('current')
hm2Ptp2TCVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCVlanPriority.setStatus('current')
hm2Ptp2TCCapability = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 1, 13), Bits().clone(namedValues=NamedValues(("reserved", 0), ("one-step", 1), ("e2e-delay", 2), ("p2p-delay", 3), ("ptp2Ieee8023", 4), ("ptp2UdpIpv4", 5), ("ptp2UdpIpv6", 6), ("asymmCorrection", 7), ("halfDuplex", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TCCapability.setStatus('current')
hm2Ptp2TCPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 2), )
if mibBuilder.loadTexts: hm2Ptp2TCPortTable.setStatus('current')
hm2Ptp2TCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2Ptp2TCPortEntry.setStatus('current')
hm2Ptp2TCPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 2, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCPortEnable.setStatus('current')
hm2Ptp2TCLogPdelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 2, 1, 2), Hm2Ptp2LogPdelayReqIntervalTc().clone('sec-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCLogPdelayReqInterval.setStatus('current')
hm2Ptp2TCFaulty = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TCFaulty.setStatus('current')
hm2Ptp2TCPeerMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 2, 1, 4), PtpTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2Ptp2TCPeerMeanPathDelay.setStatus('current')
hm2Ptp2TCDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2000000000, 2000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2Ptp2TCDelayAsymmetry.setStatus('current')
hm2IrigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 5, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IrigAdminStatus.setStatus('current')
hm2IrigMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("irig-b000", 0), ("irig-b001", 1), ("irig-b002", 2), ("irig-b003", 3), ("irig-b004", 4), ("irig-b005", 5), ("irig-b006", 6), ("irig-b007", 7))).clone('irig-b003')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IrigMode.setStatus('current')
hm2IrigPpsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 5, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IrigPpsAdminStatus.setStatus('current')
hm2IrigTimeMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("utc", 1), ("local", 2))).clone('utc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IrigTimeMode.setStatus('current')
hm2IrigOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 5, 5), HmEnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IrigOperStatus.setStatus('current')
hm2IrigTimeQuality = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 50, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("locked", 0), ("within1ns", 1), ("within10ns", 2), ("within100ns", 3), ("within1us", 4), ("within10us", 5), ("within100us", 6), ("within1ms", 7), ("within10ms", 8), ("within100ms", 9), ("within1s", 10), ("within10s", 11), ("within100s", 12), ("within1000s", 13), ("within10000s", 14), ("failure", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IrigTimeQuality.setStatus('current')
hm2TimeSyncSystemTimeSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 3, 1))
hm2TimeSyncSntpSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 3, 2))
hm2TimeSyncNtpSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 3, 3))
hm2TimeSyncPtpSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 3, 4))
hm2TimeSyncIrigSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 50, 3, 5))
hm2TimeSyncSntpSESIpv4PortNumberPairInUse = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 50, 3, 2, 1))
if mibBuilder.loadTexts: hm2TimeSyncSntpSESIpv4PortNumberPairInUse.setStatus('current')
hm2TimeSyncSntpSESDnsPortNumberPairInUse = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 50, 3, 2, 2))
if mibBuilder.loadTexts: hm2TimeSyncSntpSESDnsPortNumberPairInUse.setStatus('current')
hm2Ptp2SynchronizationChange = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 50, 0, 1)).setObjects(("HM2-TIMESYNC-MIB", "hm2PtpIsSynchronized"))
if mibBuilder.loadTexts: hm2Ptp2SynchronizationChange.setStatus('current')
hm2SntpClientSynchronizationChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 50, 0, 10)).setObjects(("HM2-TIMESYNC-MIB", "hm2SntpClientStatus"))
if mibBuilder.loadTexts: hm2SntpClientSynchronizationChangeTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-TIMESYNC-MIB", hm2TimeSyncPtpSESGroup=hm2TimeSyncPtpSESGroup, hm2Ptp2TCPeerMeanPathDelay=hm2Ptp2TCPeerMeanPathDelay, hm2SntpClientServerPort=hm2SntpClientServerPort, hm2SystemTimeSource=hm2SystemTimeSource, hm2NtpClientServerInitialBurst=hm2NtpClientServerInitialBurst, hm2TimeSyncSystemTimeSESGroup=hm2TimeSyncSystemTimeSESGroup, hm2Ptp2TimeSource=hm2Ptp2TimeSource, hm2TimeSyncSntpSESGroup=hm2TimeSyncSntpSESGroup, hm2TimeSyncIrigSESGroup=hm2TimeSyncIrigSESGroup, hm2Ptp2ClockQuality=hm2Ptp2ClockQuality, hm2SntpClientSynchronizationChangeTrap=hm2SntpClientSynchronizationChangeTrap, hm2SntpClientBroadcastRecvTimeout=hm2SntpClientBroadcastRecvTimeout, hm2Ptp2LogPdelayReqInterval=hm2Ptp2LogPdelayReqInterval, hm2SntpClientServerRowStatus=hm2SntpClientServerRowStatus, Hm2Ptp2LogSyncIntervalTc=Hm2Ptp2LogSyncIntervalTc, hm2NtpOperatingState=hm2NtpOperatingState, hm2Ptp2TCMeanPathDelay=hm2Ptp2TCMeanPathDelay, hm2SntpServerAdminState=hm2SntpServerAdminState, hm2PtpGroup=hm2PtpGroup, hm2Ptp2StepsRemoved=hm2Ptp2StepsRemoved, hm2Ptp2Leap61=hm2Ptp2Leap61, hm2NtpClientAdminState=hm2NtpClientAdminState, PYSNMP_MODULE_ID=hm2TimeSyncMib, hm2Ptp2ClockAccuracy=hm2Ptp2ClockAccuracy, hm2SystemLocalTime=hm2SystemLocalTime, hm2Ptp2Priority2=hm2Ptp2Priority2, hm2Ptp2AnnounceReceiptTimeout=hm2Ptp2AnnounceReceiptTimeout, hm2NtpClientListenAddrIndex=hm2NtpClientListenAddrIndex, hm2IrigTimeQuality=hm2IrigTimeQuality, hm2NtpServerGroup=hm2NtpServerGroup, hm2PtpSyncLowerBound=hm2PtpSyncLowerBound, hm2Ptp2PtpTimescale=hm2Ptp2PtpTimescale, hm2Ptp2V1Compatibility=hm2Ptp2V1Compatibility, hm2PtpIsSynchronized=hm2PtpIsSynchronized, hm2Ptp2PortEntry=hm2Ptp2PortEntry, hm2Ptp2PortTable=hm2Ptp2PortTable, hm2SntpClientServerAddrType=hm2SntpClientServerAddrType, hm2IrigPpsAdminStatus=hm2IrigPpsAdminStatus, hm2PtpManagement=hm2PtpManagement, hm2Ptp2DelayAsymmetry=hm2Ptp2DelayAsymmetry, hm2NtpClientConfigGroup=hm2NtpClientConfigGroup, hm2SntpClientDisableAfterSync=hm2SntpClientDisableAfterSync, hm2TimeSyncSntpSESIpv4PortNumberPairInUse=hm2TimeSyncSntpSESIpv4PortNumberPairInUse, hm2NtpClientListenAddrStatus=hm2NtpClientListenAddrStatus, hm2SntpServerGroup=hm2SntpServerGroup, hm2Ptp2TCLogPdelayReqInterval=hm2Ptp2TCLogPdelayReqInterval, hm2NtpClientOperatingMode=hm2NtpClientOperatingMode, hm2Ptp2NetworkProtocol=hm2Ptp2NetworkProtocol, hm2SntpClientGroup=hm2SntpClientGroup, hm2Ptp2MeanPathDelay=hm2Ptp2MeanPathDelay, hm2TimeSyncMibSNMPExtensionGroup=hm2TimeSyncMibSNMPExtensionGroup, hm2TimeSyncSntpSESDnsPortNumberPairInUse=hm2TimeSyncSntpSESDnsPortNumberPairInUse, hm2TimeSyncNtpSESGroup=hm2TimeSyncNtpSESGroup, hm2Ptp2LogDelayReqInterval=hm2Ptp2LogDelayReqInterval, hm2SntpGroup=hm2SntpGroup, hm2Ptp2CurrentUtcOffset=hm2Ptp2CurrentUtcOffset, hm2TimeSyncMibObjects=hm2TimeSyncMibObjects, hm2Ptp2GrandmasterClockAccuracy=hm2Ptp2GrandmasterClockAccuracy, hm2SntpServerBroadcastAdminState=hm2SntpServerBroadcastAdminState, hm2NtpGroup=hm2NtpGroup, hm2Ptp2TCSyntonized=hm2Ptp2TCSyntonized, hm2Ptp2ObservedParentClockPhaseChangeRate=hm2Ptp2ObservedParentClockPhaseChangeRate, hm2NtpGeneralGroup=hm2NtpGeneralGroup, hm2NtpClientServerStatus=hm2NtpClientServerStatus, hm2Ptp2GrandmasterIdentity=hm2Ptp2GrandmasterIdentity, hm2SntpClientServerStatus=hm2SntpClientServerStatus, hm2NtpClientListenAddrTable=hm2NtpClientListenAddrTable, hm2IrigGroup=hm2IrigGroup, hm2PtpAbsMaxOffset=hm2PtpAbsMaxOffset, hm2Ptp2PortState=hm2Ptp2PortState, hm2NtpServerLocalClockStratum=hm2NtpServerLocalClockStratum, hm2NtpClientServerAddressType=hm2NtpClientServerAddressType, hm2SntpClientAdminState=hm2SntpClientAdminState, hm2SntpServerBroadcastVlanRowStatus=hm2SntpServerBroadcastVlanRowStatus, hm2Ptp2TwoStepClock=hm2Ptp2TwoStepClock, hm2Ptp2Priority1=hm2Ptp2Priority1, hm2Ptp2Configuration=hm2Ptp2Configuration, hm2Ptp2LogAnnounceInterval=hm2Ptp2LogAnnounceInterval, hm2Ptp2TCPortTable=hm2Ptp2TCPortTable, hm2IrigOperStatus=hm2IrigOperStatus, hm2SntpClientServerAddrEntry=hm2SntpClientServerAddrEntry, hm2SntpServerBroadcastVlanEntry=hm2SntpServerBroadcastVlanEntry, hm2Ptp2ParentPortIdentity=hm2Ptp2ParentPortIdentity, hm2NtpClientServerAddress=hm2NtpClientServerAddress, PtpClockIdentity=PtpClockIdentity, hm2Ptp2TCNetworkProtocol=hm2Ptp2TCNetworkProtocol, hm2NtpClientServerBurst=hm2NtpClientServerBurst, hm2Ptp2PortCapability=hm2Ptp2PortCapability, hm2SntpClientServerIndex=hm2SntpClientServerIndex, hm2Ptp2GrandmasterPriority2=hm2Ptp2GrandmasterPriority2, hm2NtpClientListenAddrEntry=hm2NtpClientListenAddrEntry, hm2NtpClientServerIndex=hm2NtpClientServerIndex, hm2Ptp2Leap59=hm2Ptp2Leap59, HmSntpClientServerStatus=HmSntpClientServerStatus, hm2NtpClientServerRowStatus=hm2NtpClientServerRowStatus, hm2Ptp2VlanPriority=hm2Ptp2VlanPriority, hm2SntpClientServerDescr=hm2SntpClientServerDescr, hm2Ptp2DomainNumber=hm2Ptp2DomainNumber, hm2NtpClientListenAddrPort=hm2NtpClientListenAddrPort, hm2SystemTimeGroup=hm2SystemTimeGroup, hm2TimeSyncMibNotifications=hm2TimeSyncMibNotifications, hm2SntpServerBroadcastAddr=hm2SntpServerBroadcastAddr, hm2SntpClientStatus=hm2SntpClientStatus, PtpTimeStamp=PtpTimeStamp, hm2SntpServerOnlyIfSync=hm2SntpServerOnlyIfSync, hm2NtpServerAdminState=hm2NtpServerAdminState, hm2NtpClientListenAddrRowStatus=hm2NtpClientListenAddrRowStatus, hm2PtpTimeSeconds=hm2PtpTimeSeconds, hm2Ptp2TimeTraceable=hm2Ptp2TimeTraceable, hm2NtpClientServerAddrEntry=hm2NtpClientServerAddrEntry, hm2SntpServerBroadcastAddrType=hm2SntpServerBroadcastAddrType, hm2SntpClientServerAddr=hm2SntpClientServerAddr, hm2Ptp2ParentStats=hm2Ptp2ParentStats, PtpClockQuality=PtpClockQuality, hm2Ptp2ClockVariance=hm2Ptp2ClockVariance, hm2Ptp2GrandmasterClockClass=hm2Ptp2GrandmasterClockClass, hm2Ptp2TCConfiguration=hm2Ptp2TCConfiguration, hm2Ptp2TCCapability=hm2Ptp2TCCapability, hm2Ptp2TCDelayAsymmetry=hm2Ptp2TCDelayAsymmetry, hm2Ptp2VersionNumber=hm2Ptp2VersionNumber, hm2Ptp2TCVlanPriority=hm2Ptp2TCVlanPriority, hm2Ptp2TCObjects=hm2Ptp2TCObjects, hm2SntpServerBroadcastVlan=hm2SntpServerBroadcastVlan, hm2Ptp2TCDelayMechanism=hm2Ptp2TCDelayMechanism, hm2PtpSyncUpperBound=hm2PtpSyncUpperBound, hm2SntpClientServerAddrTable=hm2SntpClientServerAddrTable, hm2Ptp2ObservedParentOffsetScaledLogVariance=hm2Ptp2ObservedParentOffsetScaledLogVariance, hm2Ptp2PeerMeanPathDelay=hm2Ptp2PeerMeanPathDelay, hm2NtpClientServerAddrTable=hm2NtpClientServerAddrTable, hm2NtpClientServerPrefer=hm2NtpClientServerPrefer, hm2PtpGlobal=hm2PtpGlobal, hm2Ptp2CurrentUtcOffsetValid=hm2Ptp2CurrentUtcOffsetValid, hm2IrigMode=hm2IrigMode, hm2Ptp2LogSyncInterval=hm2Ptp2LogSyncInterval, hm2Ptp2OffsetFromMaster=hm2Ptp2OffsetFromMaster, hm2Ptp2TCPortEnable=hm2Ptp2TCPortEnable, hm2SntpServerBroadcastPort=hm2SntpServerBroadcastPort, PtpTimeInterval=PtpTimeInterval, hm2Ptp2DelayMechanism=hm2Ptp2DelayMechanism, hm2NtpClientGroup=hm2NtpClientGroup, hm2NtpClientServerPort=hm2NtpClientServerPort, hm2IrigAdminStatus=hm2IrigAdminStatus, hm2PtpEnable=hm2PtpEnable, hm2NtpServerOperatingMode=hm2NtpServerOperatingMode, PtpPortIdentity=PtpPortIdentity, hm2Ptp2ClockClass=hm2Ptp2ClockClass, hm2Ptp2PortEnable=hm2Ptp2PortEnable, hm2Ptp2VlanID=hm2Ptp2VlanID, hm2Ptp2TCClockIdentity=hm2Ptp2TCClockIdentity, hm2Ptp2ClockIdentity=hm2Ptp2ClockIdentity, hm2Ptp2TCMultiDomainMode=hm2Ptp2TCMultiDomainMode, hm2NtpClientListenAddrAddress=hm2NtpClientListenAddrAddress, hm2Ptp2GrandmasterClockQuality=hm2Ptp2GrandmasterClockQuality, hm2Ptp2GrandmasterPriority1=hm2Ptp2GrandmasterPriority1, hm2Ptp2TCOffsetFromMaster=hm2Ptp2TCOffsetFromMaster, hm2Ptp2TCPortEntry=hm2Ptp2TCPortEntry, hm2IrigTimeMode=hm2IrigTimeMode, hm2SntpClientOperatingMode=hm2SntpClientOperatingMode, hm2Ptp2TCPrimaryDomain=hm2Ptp2TCPrimaryDomain, hm2Ptp2TCSyncLocalClock=hm2Ptp2TCSyncLocalClock, hm2TimeSyncMib=hm2TimeSyncMib, hm2SntpServerPort=hm2SntpServerPort, hm2Ptp2GrandmasterClockVariance=hm2Ptp2GrandmasterClockVariance, hm2NtpClientListenAddrAddressType=hm2NtpClientListenAddrAddressType, hm2SystemLocalOffset=hm2SystemLocalOffset, hm2SntpServerBroadcastInterval=hm2SntpServerBroadcastInterval, hm2Ptp2FrequencyTraceable=hm2Ptp2FrequencyTraceable, hm2PtpClockMode=hm2PtpClockMode, hm2NtpServerConfigGroup=hm2NtpServerConfigGroup, hm2Ptp2TCFaulty=hm2Ptp2TCFaulty, hm2PtpProfile=hm2PtpProfile, hm2Ptp2SynchronizationChange=hm2Ptp2SynchronizationChange, hm2Ptp2TCVlanID=hm2Ptp2TCVlanID, hm2SystemUtcTime=hm2SystemUtcTime, hm2SntpServerBroadcastVlanTable=hm2SntpServerBroadcastVlanTable, hm2SntpServerStatus=hm2SntpServerStatus, hm2Ptp2TCCurrentMaster=hm2Ptp2TCCurrentMaster, hm2SntpServerBroadcastGroup=hm2SntpServerBroadcastGroup, hm2SntpClientRequestInterval=hm2SntpClientRequestInterval, Hm2Ptp2LogPdelayReqIntervalTc=Hm2Ptp2LogPdelayReqIntervalTc, hm2Ptp2Objects=hm2Ptp2Objects)
