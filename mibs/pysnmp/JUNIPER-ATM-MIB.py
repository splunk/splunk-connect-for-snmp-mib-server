#
# PySNMP MIB module JUNIPER-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
atmInterfaceConfEntry, atmVclEntry, atmVplEntry = mibBuilder.importSymbols("ATM-MIB", "atmInterfaceConfEntry", "atmVclEntry", "atmVplEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressIPv4, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressIPv6")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, iso, ObjectIdentity, Unsigned32, MibIdentifier, Counter64, TimeTicks, IpAddress, Gauge32, Counter32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "iso", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter64", "TimeTicks", "IpAddress", "Gauge32", "Counter32", "ModuleIdentity", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxAtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 10))
jnxAtm.setRevisions(('2004-01-06 00:00', '2003-12-04 00:00', '2003-09-17 00:00', '2002-07-04 00:00', '2002-01-23 00:00', '2001-07-08 00:00',))
if mibBuilder.loadTexts: jnxAtm.setLastUpdated('200312040000Z')
if mibBuilder.loadTexts: jnxAtm.setOrganization('Juniper Networks, Inc.')
class JnxAtmFlags(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("inverseArpEnabled", 0), ("ilmiEnabled", 1), ("oamEnabled", 2), ("shapingEnabled", 3), ("passiveOam", 4), ("multicast", 5), ("closed", 6), ("down", 7), ("active", 8), ("cosEnabled", 9))

jnxAtmIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1), )
if mibBuilder.loadTexts: jnxAtmIfTable.setStatus('current')
jnxAtmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1), )
atmInterfaceConfEntry.registerAugmentions(("JUNIPER-ATM-MIB", "jnxAtmIfEntry"))
jnxAtmIfEntry.setIndexNames(*atmInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: jnxAtmIfEntry.setStatus('current')
jnxAtmIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("oc3", 2), ("oc12", 3), ("t3", 4), ("e3", 5), ("oc48", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfPortType.setStatus('current')
jnxAtmIfEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("atmPvc", 2), ("atmCccCellRelay", 3))).clone('atmPvc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfEncaps.setStatus('current')
jnxAtmIfLpBackInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoopBack", 1), ("localLoopBack", 2), ("remoteLoopBack", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfLpBackInfo.setStatus('current')
jnxAtmIfScrambleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfScrambleEnable.setStatus('current')
jnxAtmIfTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfTxCellCount.setStatus('current')
jnxAtmIfRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfRxCellCount.setStatus('current')
jnxAtmIfTxIdleCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfTxIdleCellCount.setStatus('current')
jnxAtmIfUncorrHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfUncorrHCSErrs.setStatus('current')
jnxAtmIfCorrHCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfCorrHCSErrs.setStatus('current')
jnxAtmIfTxCellFIFOOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfTxCellFIFOOverRuns.setStatus('current')
jnxAtmIfRxCellFIFOOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfRxCellFIFOOverRuns.setStatus('current')
jnxAtmIfRxCellFIFOUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfRxCellFIFOUnderRuns.setStatus('current')
jnxAtmIfInInvalidVCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfInInvalidVCCells.setStatus('current')
jnxAtmIfInNoBufferOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfInNoBufferOAMCells.setStatus('current')
jnxAtmIfInNoBufDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfInNoBufDropPkts.setStatus('current')
jnxAtmIfOutVCQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfOutVCQueueDrops.setStatus('current')
jnxAtmIfInBadCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfInBadCrcs.setStatus('current')
jnxAtmIfInLenErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfInLenErrPkts.setStatus('current')
jnxAtmIfInTimeoutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfInTimeoutPkts.setStatus('current')
jnxAtmIfL2CircuitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("aal5", 3), ("cell", 4), ("uniTrunk", 5), ("nniTrunk", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmIfL2CircuitMode.setStatus('current')
jnxAtmVCTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2), )
if mibBuilder.loadTexts: jnxAtmVCTable.setStatus('current')
jnxAtmVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1), )
atmVclEntry.registerAugmentions(("JUNIPER-ATM-MIB", "jnxAtmVCEntry"))
jnxAtmVCEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: jnxAtmVCEntry.setStatus('current')
jnxAtmVCConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("p2p", 2), ("p2mp", 3), ("multicast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCConnType.setStatus('current')
jnxAtmVCEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("atmCccCellRelay", 2), ("atmCccVcMux", 3), ("atmCiscoNlpid", 4), ("atmNlpid", 5), ("atmSnap", 6), ("atmVcMux", 7), ("atmTccVcMux", 8), ("atmTccSnap", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCEncapsulation.setStatus('current')
jnxAtmVCMpDestIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 3), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCMpDestIPv4Addr.setStatus('current')
jnxAtmVCMpDestIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 4), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCMpDestIPv6Addr.setStatus('current')
jnxAtmVCFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 5), JnxAtmFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCFlags.setStatus('current')
jnxAtmVCTotalDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCTotalDownTime.setStatus('current')
jnxAtmVCInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCInBytes.setStatus('current')
jnxAtmVCOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOutBytes.setStatus('current')
jnxAtmVCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCInPkts.setStatus('current')
jnxAtmVCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOutPkts.setStatus('current')
jnxAtmVCTailQueuePktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCTailQueuePktDrops.setStatus('current')
jnxAtmVCOAMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOAMPeriod.setStatus('current')
jnxAtmVCOAMUpCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOAMUpCellCount.setStatus('current')
jnxAtmVCOAMDownCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOAMDownCellCount.setStatus('current')
jnxAtmVCInOAMF5LoopCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCInOAMF5LoopCells.setStatus('current')
jnxAtmVCOutOAMF5LoopCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOutOAMF5LoopCells.setStatus('current')
jnxAtmVCInOAMF5RDICells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCInOAMF5RDICells.setStatus('current')
jnxAtmVCOutOAMF5RDICells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOutOAMF5RDICells.setStatus('current')
jnxAtmVCInOAMF5AISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCInOAMF5AISCells.setStatus('current')
jnxAtmVCOutOAMF5AISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVCOutOAMF5AISCells.setStatus('current')
jnxAtmVpTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3), )
if mibBuilder.loadTexts: jnxAtmVpTable.setStatus('current')
jnxAtmVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1), )
atmVplEntry.registerAugmentions(("JUNIPER-ATM-MIB", "jnxAtmVpEntry"))
jnxAtmVpEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: jnxAtmVpEntry.setStatus('current')
jnxAtmVpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 1), Bits().clone(namedValues=NamedValues(("active", 0), ("down", 1), ("oamEnabled", 2), ("shapingEnabled", 3), ("passiveOam", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpFlags.setStatus('current')
jnxAtmVpTotalDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpTotalDownTime.setStatus('current')
jnxAtmVpOamPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOamPeriod.setStatus('current')
jnxAtmVpOamUpCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOamUpCellCount.setStatus('current')
jnxAtmVpOamDownCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOamDownCellCount.setStatus('current')
jnxAtmVpInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpInBytes.setStatus('current')
jnxAtmVpOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOutBytes.setStatus('current')
jnxAtmVpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpInPkts.setStatus('current')
jnxAtmVpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOutPkts.setStatus('current')
jnxAtmVpInOamF4Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpInOamF4Cells.setStatus('current')
jnxAtmVpOutOamF4Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOutOamF4Cells.setStatus('current')
jnxAtmVpInOamF4LoopCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpInOamF4LoopCells.setStatus('current')
jnxAtmVpOutOamF4LoopCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOutOamF4LoopCells.setStatus('current')
jnxAtmVpInOamF4RdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpInOamF4RdiCells.setStatus('current')
jnxAtmVpOutOamF4RdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpOutOamF4RdiCells.setStatus('current')
jnxAtmVpInOamF4AisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmVpInOamF4AisCells.setStatus('current')
jnxAtmTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4), )
if mibBuilder.loadTexts: jnxAtmTrunkTable.setStatus('current')
jnxAtmTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxAtmTrunkEntry.setStatus('current')
jnxAtmTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkId.setStatus('current')
jnxAtmTrunkConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("p2p", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkConnType.setStatus('current')
jnxAtmTrunkEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("atmCccCellRelay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkEncapsulation.setStatus('current')
jnxAtmTrunkFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 4), JnxAtmFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkFlags.setStatus('current')
jnxAtmTrunkTotalDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkTotalDownTime.setStatus('current')
jnxAtmTrunkInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkInBytes.setStatus('current')
jnxAtmTrunkOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkOutBytes.setStatus('current')
jnxAtmTrunkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkInPkts.setStatus('current')
jnxAtmTrunkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkOutPkts.setStatus('current')
jnxAtmTrunkTailQueuePktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkTailQueuePktDrops.setStatus('current')
jnxAtmTrunkInOAMF4AISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkInOAMF4AISCells.setStatus('current')
jnxAtmTrunkOutOAMF4AISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 10, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAtmTrunkOutOAMF4AISCells.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-ATM-MIB", jnxAtmTrunkInPkts=jnxAtmTrunkInPkts, jnxAtmIfInBadCrcs=jnxAtmIfInBadCrcs, jnxAtmVpOamPeriod=jnxAtmVpOamPeriod, PYSNMP_MODULE_ID=jnxAtm, jnxAtmIfRxCellCount=jnxAtmIfRxCellCount, jnxAtmVpTable=jnxAtmVpTable, jnxAtmVpOutOamF4RdiCells=jnxAtmVpOutOamF4RdiCells, jnxAtmTrunkTailQueuePktDrops=jnxAtmTrunkTailQueuePktDrops, jnxAtm=jnxAtm, jnxAtmIfTxIdleCellCount=jnxAtmIfTxIdleCellCount, jnxAtmVpInOamF4AisCells=jnxAtmVpInOamF4AisCells, jnxAtmIfPortType=jnxAtmIfPortType, jnxAtmVpFlags=jnxAtmVpFlags, jnxAtmVCOutBytes=jnxAtmVCOutBytes, jnxAtmVpInOamF4RdiCells=jnxAtmVpInOamF4RdiCells, jnxAtmVCInOAMF5AISCells=jnxAtmVCInOAMF5AISCells, jnxAtmVCMpDestIPv4Addr=jnxAtmVCMpDestIPv4Addr, jnxAtmVCOutOAMF5LoopCells=jnxAtmVCOutOAMF5LoopCells, jnxAtmIfCorrHCSErrs=jnxAtmIfCorrHCSErrs, jnxAtmVCOAMDownCellCount=jnxAtmVCOAMDownCellCount, JnxAtmFlags=JnxAtmFlags, jnxAtmVpOamUpCellCount=jnxAtmVpOamUpCellCount, jnxAtmIfInNoBufDropPkts=jnxAtmIfInNoBufDropPkts, jnxAtmVCEntry=jnxAtmVCEntry, jnxAtmTrunkTable=jnxAtmTrunkTable, jnxAtmVpInBytes=jnxAtmVpInBytes, jnxAtmIfTable=jnxAtmIfTable, jnxAtmVCOAMPeriod=jnxAtmVCOAMPeriod, jnxAtmVpOutOamF4Cells=jnxAtmVpOutOamF4Cells, jnxAtmIfScrambleEnable=jnxAtmIfScrambleEnable, jnxAtmIfOutVCQueueDrops=jnxAtmIfOutVCQueueDrops, jnxAtmVpOamDownCellCount=jnxAtmVpOamDownCellCount, jnxAtmIfUncorrHCSErrs=jnxAtmIfUncorrHCSErrs, jnxAtmVpInPkts=jnxAtmVpInPkts, jnxAtmVCTailQueuePktDrops=jnxAtmVCTailQueuePktDrops, jnxAtmVCInOAMF5RDICells=jnxAtmVCInOAMF5RDICells, jnxAtmTrunkEntry=jnxAtmTrunkEntry, jnxAtmTrunkTotalDownTime=jnxAtmTrunkTotalDownTime, jnxAtmVCTotalDownTime=jnxAtmVCTotalDownTime, jnxAtmVpOutPkts=jnxAtmVpOutPkts, jnxAtmVCInBytes=jnxAtmVCInBytes, jnxAtmTrunkOutOAMF4AISCells=jnxAtmTrunkOutOAMF4AISCells, jnxAtmIfInInvalidVCCells=jnxAtmIfInInvalidVCCells, jnxAtmVCOAMUpCellCount=jnxAtmVCOAMUpCellCount, jnxAtmTrunkInOAMF4AISCells=jnxAtmTrunkInOAMF4AISCells, jnxAtmTrunkOutPkts=jnxAtmTrunkOutPkts, jnxAtmVCTable=jnxAtmVCTable, jnxAtmTrunkOutBytes=jnxAtmTrunkOutBytes, jnxAtmTrunkConnType=jnxAtmTrunkConnType, jnxAtmVpOutOamF4LoopCells=jnxAtmVpOutOamF4LoopCells, jnxAtmTrunkId=jnxAtmTrunkId, jnxAtmVpOutBytes=jnxAtmVpOutBytes, jnxAtmTrunkFlags=jnxAtmTrunkFlags, jnxAtmTrunkInBytes=jnxAtmTrunkInBytes, jnxAtmIfInNoBufferOAMCells=jnxAtmIfInNoBufferOAMCells, jnxAtmTrunkEncapsulation=jnxAtmTrunkEncapsulation, jnxAtmIfL2CircuitMode=jnxAtmIfL2CircuitMode, jnxAtmVCOutOAMF5AISCells=jnxAtmVCOutOAMF5AISCells, jnxAtmVCOutPkts=jnxAtmVCOutPkts, jnxAtmVpInOamF4LoopCells=jnxAtmVpInOamF4LoopCells, jnxAtmVpEntry=jnxAtmVpEntry, jnxAtmVCConnType=jnxAtmVCConnType, jnxAtmVCInOAMF5LoopCells=jnxAtmVCInOAMF5LoopCells, jnxAtmVpInOamF4Cells=jnxAtmVpInOamF4Cells, jnxAtmIfTxCellFIFOOverRuns=jnxAtmIfTxCellFIFOOverRuns, jnxAtmVpTotalDownTime=jnxAtmVpTotalDownTime, jnxAtmIfLpBackInfo=jnxAtmIfLpBackInfo, jnxAtmVCEncapsulation=jnxAtmVCEncapsulation, jnxAtmVCOutOAMF5RDICells=jnxAtmVCOutOAMF5RDICells, jnxAtmIfTxCellCount=jnxAtmIfTxCellCount, jnxAtmIfEncaps=jnxAtmIfEncaps, jnxAtmVCMpDestIPv6Addr=jnxAtmVCMpDestIPv6Addr, jnxAtmIfInLenErrPkts=jnxAtmIfInLenErrPkts, jnxAtmIfInTimeoutPkts=jnxAtmIfInTimeoutPkts, jnxAtmVCFlags=jnxAtmVCFlags, jnxAtmIfRxCellFIFOOverRuns=jnxAtmIfRxCellFIFOOverRuns, jnxAtmVCInPkts=jnxAtmVCInPkts, jnxAtmIfEntry=jnxAtmIfEntry, jnxAtmIfRxCellFIFOUnderRuns=jnxAtmIfRxCellFIFOUnderRuns)
