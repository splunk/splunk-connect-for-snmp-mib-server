#
# PySNMP MIB module AISLCANALOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISLCANALOG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, enterprises, Unsigned32, NotificationType, Integer32, MibIdentifier, IpAddress, ModuleIdentity, Counter64, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "enterprises", "Unsigned32", "NotificationType", "Integer32", "MibIdentifier", "IpAddress", "ModuleIdentity", "Counter64", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLCAnalog = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 28))
if mibBuilder.loadTexts: aiSLCAnalog.setLastUpdated('0002181700Z')
if mibBuilder.loadTexts: aiSLCAnalog.setOrganization('Applied Innovation Inc.')
aiSLCAnalogInputTable = MibTable((1, 3, 6, 1, 4, 1, 539, 28, 1), )
if mibBuilder.loadTexts: aiSLCAnalogInputTable.setStatus('current')
aiSLCAnalogInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 28, 1, 1), ).setIndexNames((0, "AISLCANALOG-MIB", "aislcainPointNumber"))
if mibBuilder.loadTexts: aiSLCAnalogInputEntry.setStatus('current')
aislcainPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainPointNumber.setStatus('current')
aislcainScanningEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainScanningEnabled.setStatus('current')
aislcainDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainDescription.setStatus('current')
aislcainTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainTrapEnable.setStatus('current')
aislcainNormalStateTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainNormalStateTrap.setStatus('current')
aislcainHighAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmSeverity.setStatus('current')
aislcainHighAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmStateText.setStatus('current')
aislcainLowAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmSeverity.setStatus('current')
aislcainLowAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmStateText.setStatus('current')
aislcainNormalStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainNormalStateText.setStatus('current')
aislcainUserUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainUserUnits.setStatus('current')
aislcainMinInputmA = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMinInputmA.setStatus('current')
aislcainMinInputuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMinInputuu.setStatus('current')
aislcainMaxInputmA = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMaxInputmA.setStatus('current')
aislcainMaxInputuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainMaxInputuu.setStatus('current')
aislcainHighLimitScan = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighLimitScan.setStatus('current')
aislcainHighAlarmThresholduu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmThresholduu.setStatus('current')
aislcainHighAlarmThresholdIntervaluu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmThresholdIntervaluu.setStatus('current')
aislcainHighAlarmMinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmMinPeriod.setStatus('current')
aislcainHighAlarmHysteresisuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainHighAlarmHysteresisuu.setStatus('current')
aislcainLowLimitScan = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowLimitScan.setStatus('current')
aislcainLowAlarmThresholduu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmThresholduu.setStatus('current')
aislcainLowAlarmThresholdIntervaluu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmThresholdIntervaluu.setStatus('current')
aislcainLowAlarmMinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmMinPeriod.setStatus('current')
aislcainLowAlarmHysteresisuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcainLowAlarmHysteresisuu.setStatus('current')
aislcainCurrentValueuu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainCurrentValueuu.setStatus('current')
aislcainCurrentValuemA = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainCurrentValuemA.setStatus('current')
aislcainLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainLastChangeTime.setStatus('current')
aislcaintl1AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1AccessID.setStatus('current')
aislcaintl1Provisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1Provisioned.setStatus('current')
aislcaintl1AccessIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equipment", 1), ("environmental", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1AccessIDType.setStatus('current')
aislcaintl1HighAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmType.setStatus('current')
aislcaintl1HighAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmMessage.setStatus('current')
aislcaintl1LowAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmType.setStatus('current')
aislcaintl1LowAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmMessage.setStatus('current')
aislcaintl1HighAlarmNotificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmNotificationCode.setStatus('current')
aislcaintl1HighAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceAffecting", 1), ("notServiceAffecting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmServiceAffecting.setStatus('current')
aislcaintl1HighAlarmConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmConditionType.setStatus('current')
aislcaintl1HighAlarmConditionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1HighAlarmConditionDesc.setStatus('current')
aislcaintl1LowAlarmNotificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmNotificationCode.setStatus('current')
aislcaintl1LowAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceAffecting", 1), ("notServiceAffecting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmServiceAffecting.setStatus('current')
aislcaintl1LowAlarmConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmConditionType.setStatus('current')
aislcaintl1LowAlarmConditionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcaintl1LowAlarmConditionDesc.setStatus('current')
aislcainAnalogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("highLimitExceeded", 2), ("lowLimitExceeded", 3), ("lossOfSignal", 4), ("saturated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainAnalogStatus.setStatus('current')
aislcainCurrentStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainCurrentStateText.setStatus('current')
aislcainAnalogAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 28, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcainAnalogAlarmState.setStatus('current')
mibBuilder.exportSymbols("AISLCANALOG-MIB", aislcainLowAlarmHysteresisuu=aislcainLowAlarmHysteresisuu, aislcainHighAlarmThresholduu=aislcainHighAlarmThresholduu, aiSLCAnalogInputEntry=aiSLCAnalogInputEntry, aislcaintl1HighAlarmServiceAffecting=aislcaintl1HighAlarmServiceAffecting, aislcainNormalStateTrap=aislcainNormalStateTrap, aislcainHighAlarmSeverity=aislcainHighAlarmSeverity, aislcainHighAlarmMinPeriod=aislcainHighAlarmMinPeriod, aislcainLowAlarmThresholduu=aislcainLowAlarmThresholduu, aislcaintl1LowAlarmType=aislcaintl1LowAlarmType, aislcainLastChangeTime=aislcainLastChangeTime, aislcainCurrentStateText=aislcainCurrentStateText, aislcaintl1AccessID=aislcaintl1AccessID, aislcainCurrentValuemA=aislcainCurrentValuemA, aislcainMaxInputuu=aislcainMaxInputuu, aislcainHighLimitScan=aislcainHighLimitScan, aii=aii, aislcainCurrentValueuu=aislcainCurrentValueuu, aislcaintl1HighAlarmConditionType=aislcaintl1HighAlarmConditionType, aislcaintl1LowAlarmConditionType=aislcaintl1LowAlarmConditionType, aislcainMaxInputmA=aislcainMaxInputmA, NonNegativeInteger=NonNegativeInteger, aislcainPointNumber=aislcainPointNumber, aislcaintl1HighAlarmType=aislcaintl1HighAlarmType, aislcainDescription=aislcainDescription, aislcainHighAlarmHysteresisuu=aislcainHighAlarmHysteresisuu, aislcaintl1Provisioned=aislcaintl1Provisioned, aislcainLowAlarmThresholdIntervaluu=aislcainLowAlarmThresholdIntervaluu, aislcainAnalogAlarmState=aislcainAnalogAlarmState, aislcainScanningEnabled=aislcainScanningEnabled, aislcainLowAlarmSeverity=aislcainLowAlarmSeverity, aislcainHighAlarmThresholdIntervaluu=aislcainHighAlarmThresholdIntervaluu, aislcainLowLimitScan=aislcainLowLimitScan, aiSLCAnalogInputTable=aiSLCAnalogInputTable, aiSLCAnalog=aiSLCAnalog, aislcaintl1AccessIDType=aislcaintl1AccessIDType, aislcaintl1LowAlarmServiceAffecting=aislcaintl1LowAlarmServiceAffecting, aislcainMinInputuu=aislcainMinInputuu, PYSNMP_MODULE_ID=aiSLCAnalog, aislcainLowAlarmStateText=aislcainLowAlarmStateText, aislcaintl1LowAlarmConditionDesc=aislcaintl1LowAlarmConditionDesc, PositiveInteger=PositiveInteger, aislcainUserUnits=aislcainUserUnits, aislcainTrapEnable=aislcainTrapEnable, aislcainLowAlarmMinPeriod=aislcainLowAlarmMinPeriod, aislcaintl1HighAlarmNotificationCode=aislcaintl1HighAlarmNotificationCode, aislcainAnalogStatus=aislcainAnalogStatus, aislcainHighAlarmStateText=aislcainHighAlarmStateText, aislcainMinInputmA=aislcainMinInputmA, aislcaintl1HighAlarmConditionDesc=aislcaintl1HighAlarmConditionDesc, aislcaintl1LowAlarmNotificationCode=aislcaintl1LowAlarmNotificationCode, aislcaintl1HighAlarmMessage=aislcaintl1HighAlarmMessage, aislcainNormalStateText=aislcainNormalStateText, aislcaintl1LowAlarmMessage=aislcaintl1LowAlarmMessage)
