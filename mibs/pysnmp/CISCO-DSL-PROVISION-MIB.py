#
# PySNMP MIB module CISCO-DSL-PROVISION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DSL-PROVISION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:38:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, Bits, MibIdentifier, ModuleIdentity, TimeTicks, ObjectIdentity, Integer32, Gauge32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibIdentifier", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Integer32", "Gauge32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Counter32")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
ciscoDslProvisionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 30))
if mibBuilder.loadTexts: ciscoDslProvisionMIB.setLastUpdated('990618000000Z')
if mibBuilder.loadTexts: ciscoDslProvisionMIB.setOrganization('Cisco Systems, Inc.')
ciscoDslProvMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 1))
cdslNrpSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 1))
cdslVirtualTemplate = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2))
cdslLocalIpAddrPool = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3))
cdslAtmPvc = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4))
cdslVcClass = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5))
cdslMaxNrps = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslMaxNrps.setStatus('current')
cdslNrpNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslNrpNumber.setStatus('current')
cdslNrpIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 1, 3), )
if mibBuilder.loadTexts: cdslNrpIpAddressTable.setStatus('current')
cdslNrpIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"))
if mibBuilder.loadTexts: cdslNrpIpAddressEntry.setStatus('current')
cdslNrpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cdslNrpSlotIndex.setStatus('current')
cdslNrpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslNrpIpAddress.setStatus('current')
cdslVirtualTemplateNumberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 1), )
if mibBuilder.loadTexts: cdslVirtualTemplateNumberTable.setStatus('current')
cdslVirtualTemplateNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"))
if mibBuilder.loadTexts: cdslVirtualTemplateNumberEntry.setStatus('current')
cdslMaxVirtualTemplates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslMaxVirtualTemplates.setStatus('current')
cdslVirtualTemplates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslVirtualTemplates.setStatus('current')
cdslVirtualTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2), )
if mibBuilder.loadTexts: cdslVirtualTemplateTable.setStatus('current')
cdslVirtualTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"), (0, "CISCO-DSL-PROVISION-MIB", "cdslVTIndex"))
if mibBuilder.loadTexts: cdslVirtualTemplateEntry.setStatus('current')
cdslVTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cdslVTIndex.setStatus('current')
cdslVTIpAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipAddress", 1), ("interfaceIp", 2), ("negotiate", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTIpAddressMethod.setStatus('current')
cdslVTIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTIpAddress.setStatus('current')
cdslVTIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 4), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTIpAddressMask.setStatus('current')
cdslVTIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTIpIfIndex.setStatus('current')
cdslVTPeerIpAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("negotiate", 1), ("ipAddressPool", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPeerIpAddressMethod.setStatus('current')
cdslVTPeerIpAddrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPeerIpAddrPool.setStatus('current')
cdslVTPppAuthChap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppAuthChap.setStatus('current')
cdslVTPppAuthMSChap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppAuthMSChap.setStatus('current')
cdslVTPppAuthPap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppAuthPap.setStatus('current')
cdslVTPppChapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppChapHost.setStatus('current')
cdslVTPppChapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppChapPassword.setStatus('current')
cdslVTPppChapEncrypType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppChapEncrypType.setStatus('current')
cdslVTPppChapRefuse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("refuse", 2), ("refuseCallinOnly", 3))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppChapRefuse.setStatus('current')
cdslVTPppChapWaitPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppChapWaitPeer.setStatus('current')
cdslVTPppPapUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppPapUserName.setStatus('current')
cdslVTPppPapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppPapPassword.setStatus('current')
cdslVTPppPapEncrypType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppPapEncrypType.setStatus('current')
cdslVTPppUseTacacs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("singleLine", 3))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTPppUseTacacs.setStatus('current')
cdslVTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 2, 2, 1, 20), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVTRowStatus.setStatus('current')
cdslLocalIpAddrPoolNumberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 1), )
if mibBuilder.loadTexts: cdslLocalIpAddrPoolNumberTable.setStatus('current')
cdslLocalIpAddrPoolNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"))
if mibBuilder.loadTexts: cdslLocalIpAddrPoolNumberEntry.setStatus('current')
cdslMaxLocalIpAddrPools = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslMaxLocalIpAddrPools.setStatus('current')
cdslLocalIpAddrPools = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslLocalIpAddrPools.setStatus('current')
cdslLocalIpAddrPoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 2), )
if mibBuilder.loadTexts: cdslLocalIpAddrPoolTable.setStatus('current')
cdslLocalIpAddrPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"), (1, "CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrPoolName"))
if mibBuilder.loadTexts: cdslLocalIpAddrPoolEntry.setStatus('current')
cdslLocalIpAddrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cdslLocalIpAddrPoolName.setStatus('current')
cdslLocalIpAddrPoolFreeAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslLocalIpAddrPoolFreeAddresses.setStatus('current')
cdslLocalIpAddrPoolInUseAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslLocalIpAddrPoolInUseAddresses.setStatus('current')
cdslLocalIpAddrRangeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 3), )
if mibBuilder.loadTexts: cdslLocalIpAddrRangeTable.setStatus('current')
cdslLocalIpAddrRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"), (0, "CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrRangeLowAddr"), (0, "CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrRangeHighAddr"), (1, "CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrPoolName"))
if mibBuilder.loadTexts: cdslLocalIpAddrRangeEntry.setStatus('current')
cdslLocalIpAddrRangeLowAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: cdslLocalIpAddrRangeLowAddr.setStatus('current')
cdslLocalIpAddrRangeHighAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: cdslLocalIpAddrRangeHighAddr.setStatus('current')
cdslLocalIpAddrRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslLocalIpAddrRangeRowStatus.setStatus('current')
cdslPppOverAtmPvcNumberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 1), )
if mibBuilder.loadTexts: cdslPppOverAtmPvcNumberTable.setStatus('current')
cdslPppOverAtmPvcNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"))
if mibBuilder.loadTexts: cdslPppOverAtmPvcNumberEntry.setStatus('current')
cdslPppOverAtmPvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslPppOverAtmPvcs.setStatus('current')
cdslAtmPvcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2), )
if mibBuilder.loadTexts: cdslAtmPvcTable.setStatus('current')
cdslAtmPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"), (0, "IF-MIB", "ifIndex"), (0, "CISCO-DSL-PROVISION-MIB", "cdslAtmPvcVpi"), (0, "CISCO-DSL-PROVISION-MIB", "cdslAtmPvcVci"))
if mibBuilder.loadTexts: cdslAtmPvcEntry.setStatus('current')
cdslAtmPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cdslAtmPvcVpi.setStatus('current')
cdslAtmPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cdslAtmPvcVci.setStatus('current')
cdslAtmPvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslAtmPvcName.setStatus('current')
cdslAtmPvcSubIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslAtmPvcSubIfNumber.setStatus('current')
cdslAtmPvcClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('default-vc-class')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslAtmPvcClass.setStatus('current')
cdslAtmPvcQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ubrDefault", 0), ("cbr", 1), ("ubr", 2), ("ubrPlus", 3), ("vbrRt", 4), ("vbrNrt", 5), ("abr", 6), ("max", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcQosType.setStatus('current')
cdslAtmPvcAbrPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcAbrPCR.setStatus('current')
cdslAtmPvcAbrMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcAbrMCR.setStatus('current')
cdslAtmPvcAbrIORIF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcAbrIORIF.setStatus('current')
cdslAtmPvcAbrIORDF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcAbrIORDF.setStatus('current')
cdslAtmPvcBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcBroadcast.setStatus('current')
cdslAtmPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 0), ("aal5snap", 1), ("aal5mux", 2), ("aal5nlpid", 3), ("aal34smds", 4), ("aal5ilmi", 5), ("aal5qsaal", 6), ("aal5ciscoppp", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcEncapsulation.setStatus('current')
cdslAtmPvcMuxLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("ppp", 2))).clone('ppp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslAtmPvcMuxLinkType.setStatus('current')
cdslAtmPvcVirtualTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslAtmPvcVirtualTemplate.setStatus('current')
cdslAtmPvcILMIManage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcILMIManage.setStatus('current')
cdslAtmPvcInarp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcInarp.setStatus('current')
cdslAtmPvcOamRetryUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcOamRetryUpCount.setStatus('current')
cdslAtmPvcOamRetryDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcOamRetryDownCount.setStatus('current')
cdslAtmPvcOamPvcManaged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcOamPvcManaged.setStatus('current')
cdslAtmPvcOamPvcLF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcOamPvcLF.setStatus('current')
cdslAtmPvcProtocolIpBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcProtocolIpBC.setStatus('current')
cdslAtmPvcProtocolIpxBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcProtocolIpxBC.setStatus('current')
cdslAtmPvcUbrPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcUbrPCR.setStatus('current')
cdslAtmPvcUbrPlusPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcUbrPlusPCR.setStatus('current')
cdslAtmPvcUbrPlusMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcUbrPlusMCR.setStatus('current')
cdslAtmPvcVbrNrtPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcVbrNrtPCR.setStatus('current')
cdslAtmPvcVbrNrtSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslAtmPvcVbrNrtSCR.setStatus('current')
cdslAtmPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 4, 2, 1, 28), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslAtmPvcRowStatus.setStatus('current')
cdslVcClassNumberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 1), )
if mibBuilder.loadTexts: cdslVcClassNumberTable.setStatus('current')
cdslVcClassNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"))
if mibBuilder.loadTexts: cdslVcClassNumberEntry.setStatus('current')
cdslMaxVcClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslMaxVcClasses.setStatus('current')
cdslVcClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslVcClasses.setStatus('current')
cdslVcClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2), )
if mibBuilder.loadTexts: cdslVcClassTable.setStatus('current')
cdslVcClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-DSL-PROVISION-MIB", "cdslNrpSlotIndex"), (1, "CISCO-DSL-PROVISION-MIB", "cdslVcClassName"))
if mibBuilder.loadTexts: cdslVcClassEntry.setStatus('current')
cdslVcClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cdslVcClassName.setStatus('current')
cdslVcClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atm", 1), ("funi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdslVcClassType.setStatus('current')
cdslVcClassQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ubrDefault", 0), ("cbr", 1), ("ubr", 2), ("ubrPlus", 3), ("vbrRt", 4), ("vbrNrt", 5), ("abr", 6), ("max", 7))).clone('ubrDefault')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassQosType.setStatus('current')
cdslVcClassAbrPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(56, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassAbrPCR.setStatus('current')
cdslVcClassAbrMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassAbrMcr.setStatus('current')
cdslVcClassAbrIORIF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassAbrIORIF.setStatus('current')
cdslVcClassAbrIORDF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassAbrIORDF.setStatus('current')
cdslVcClassBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassBroadcast.setStatus('current')
cdslVcClassEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 0), ("aal5snap", 1), ("aal5mux", 2), ("aal5nlpid", 3), ("aal34smds", 4), ("aal5ilmi", 5), ("aal5qsaal", 6), ("aal5ciscoppp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassEncapsulation.setStatus('current')
cdslVcClassMuxLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("ppp", 2))).clone('ppp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassMuxLinkType.setStatus('current')
cdslVcClassVirtualTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassVirtualTemplate.setStatus('current')
cdslVcClassIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassIdleTimeout.setStatus('current')
cdslVcClassIdleMTR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassIdleMTR.setStatus('current')
cdslVcClassILMIManage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassILMIManage.setStatus('current')
cdslVcClassInarp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassInarp.setStatus('current')
cdslVcClassOamRetryUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassOamRetryUpCount.setStatus('current')
cdslVcClassOamRetryDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassOamRetryDownCount.setStatus('current')
cdslVcClassOamPvcManaged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassOamPvcManaged.setStatus('current')
cdslVcClassOamPvcLF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassOamPvcLF.setStatus('current')
cdslVcClassOamSvcManaged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassOamSvcManaged.setStatus('current')
cdslVcClassOamSvcLF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassOamSvcLF.setStatus('current')
cdslVcClassProtocolIpBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassProtocolIpBC.setStatus('current')
cdslVcClassProtocolIpxBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassProtocolIpxBC.setStatus('current')
cdslVcClassTransmitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassTransmitPriority.setStatus('current')
cdslVcClassUbrPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassUbrPCR.setStatus('current')
cdslVcClassUbrInputPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassUbrInputPCR.setStatus('current')
cdslVcClassUbrPlusPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassUbrPlusPCR.setStatus('current')
cdslVcClassUbrPlusMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassUbrPlusMCR.setStatus('current')
cdslVcClassUbrPlusInputPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassUbrPlusInputPCR.setStatus('current')
cdslVcClassUbrPlusInputMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassUbrPlusInputMCR.setStatus('current')
cdslVcClassVbrNrtPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassVbrNrtPCR.setStatus('current')
cdslVcClassVbrNrtSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassVbrNrtSCR.setStatus('current')
cdslVcClassVbrNrtInputBP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassVbrNrtInputBP.setStatus('current')
cdslVcClassVbrNrtInputPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassVbrNrtInputPCR.setStatus('current')
cdslVcClassVbrNrtInputSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassVbrNrtInputSCR.setStatus('current')
cdslVcClassVbrNrtInputMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassVbrNrtInputMBS.setStatus('current')
cdslVcClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 30, 1, 5, 2, 1, 37), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdslVcClassRowStatus.setStatus('current')
ciscoDslProvMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 2))
ciscoDslProvMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 3))
ciscoDslProvMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 1))
ciscoDslProvMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 2))
ciscoDslProvMIBBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 1, 1)).setObjects(("CISCO-DSL-PROVISION-MIB", "ciscoNrpSlotGroup"), ("CISCO-DSL-PROVISION-MIB", "ciscoVirtualTemplateGroup"), ("CISCO-DSL-PROVISION-MIB", "ciscoIpPoolGroup"), ("CISCO-DSL-PROVISION-MIB", "ciscoDslPVCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDslProvMIBBasicCompliance = ciscoDslProvMIBBasicCompliance.setStatus('current')
ciscoNrpSlotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 2, 1)).setObjects(("CISCO-DSL-PROVISION-MIB", "cdslMaxNrps"), ("CISCO-DSL-PROVISION-MIB", "cdslNrpNumber"), ("CISCO-DSL-PROVISION-MIB", "cdslNrpIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNrpSlotGroup = ciscoNrpSlotGroup.setStatus('current')
ciscoVirtualTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 2, 2)).setObjects(("CISCO-DSL-PROVISION-MIB", "cdslMaxVirtualTemplates"), ("CISCO-DSL-PROVISION-MIB", "cdslVirtualTemplates"), ("CISCO-DSL-PROVISION-MIB", "cdslVTIpAddressMethod"), ("CISCO-DSL-PROVISION-MIB", "cdslVTIpAddress"), ("CISCO-DSL-PROVISION-MIB", "cdslVTIpAddressMask"), ("CISCO-DSL-PROVISION-MIB", "cdslVTIpIfIndex"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPeerIpAddressMethod"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPeerIpAddrPool"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppAuthPap"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppAuthChap"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppAuthMSChap"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppChapHost"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppChapPassword"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppChapEncrypType"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppChapRefuse"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppChapWaitPeer"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppPapUserName"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppPapPassword"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppPapEncrypType"), ("CISCO-DSL-PROVISION-MIB", "cdslVTPppUseTacacs"), ("CISCO-DSL-PROVISION-MIB", "cdslVTRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVirtualTemplateGroup = ciscoVirtualTemplateGroup.setStatus('current')
ciscoIpPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 2, 3)).setObjects(("CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrPools"), ("CISCO-DSL-PROVISION-MIB", "cdslMaxLocalIpAddrPools"), ("CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrPoolFreeAddresses"), ("CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrPoolInUseAddresses"), ("CISCO-DSL-PROVISION-MIB", "cdslLocalIpAddrRangeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpPoolGroup = ciscoIpPoolGroup.setStatus('current')
ciscoDslPVCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 2, 4)).setObjects(("CISCO-DSL-PROVISION-MIB", "cdslPppOverAtmPvcs"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcName"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcSubIfNumber"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcClass"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcAbrPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcAbrIORIF"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcAbrIORDF"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcBroadcast"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcEncapsulation"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcMuxLinkType"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcILMIManage"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcInarp"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcOamRetryUpCount"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcOamRetryDownCount"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcOamPvcManaged"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcOamPvcLF"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcProtocolIpBC"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcProtocolIpxBC"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcUbrPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcUbrPlusPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcUbrPlusMCR"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcVbrNrtPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcVbrNrtSCR"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcVirtualTemplate"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcRowStatus"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcQosType"), ("CISCO-DSL-PROVISION-MIB", "cdslAtmPvcAbrMCR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDslPVCGroup = ciscoDslPVCGroup.setStatus('current')
ciscoVcClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 30, 3, 2, 5)).setObjects(("CISCO-DSL-PROVISION-MIB", "cdslVcClasses"), ("CISCO-DSL-PROVISION-MIB", "cdslMaxVcClasses"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassType"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassQosType"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassAbrPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassAbrMcr"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassAbrIORIF"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassAbrIORDF"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassBroadcast"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassEncapsulation"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassMuxLinkType"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassIdleTimeout"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassIdleMTR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassILMIManage"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassInarp"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassOamRetryUpCount"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassOamRetryDownCount"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassOamPvcManaged"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassOamPvcLF"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassOamSvcManaged"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassOamSvcLF"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassProtocolIpBC"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassProtocolIpxBC"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassTransmitPriority"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassUbrPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassUbrInputPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassUbrPlusPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassUbrPlusMCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassUbrPlusInputPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassUbrPlusInputMCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassVbrNrtPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassVbrNrtSCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassVbrNrtInputBP"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassVbrNrtInputPCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassVbrNrtInputSCR"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassVbrNrtInputMBS"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassVirtualTemplate"), ("CISCO-DSL-PROVISION-MIB", "cdslVcClassRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVcClassGroup = ciscoVcClassGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-DSL-PROVISION-MIB", cdslAtmPvcEncapsulation=cdslAtmPvcEncapsulation, ciscoDslProvisionMIB=ciscoDslProvisionMIB, cdslAtmPvcILMIManage=cdslAtmPvcILMIManage, cdslVTIpAddress=cdslVTIpAddress, cdslAtmPvcProtocolIpxBC=cdslAtmPvcProtocolIpxBC, cdslVirtualTemplate=cdslVirtualTemplate, cdslVTPppChapEncrypType=cdslVTPppChapEncrypType, cdslLocalIpAddrPoolTable=cdslLocalIpAddrPoolTable, cdslVcClassAbrIORDF=cdslVcClassAbrIORDF, cdslVTPeerIpAddrPool=cdslVTPeerIpAddrPool, cdslAtmPvcVci=cdslAtmPvcVci, cdslVcClassType=cdslVcClassType, cdslLocalIpAddrRangeHighAddr=cdslLocalIpAddrRangeHighAddr, cdslVcClassVbrNrtInputMBS=cdslVcClassVbrNrtInputMBS, cdslVTPppChapRefuse=cdslVTPppChapRefuse, cdslLocalIpAddrPoolNumberTable=cdslLocalIpAddrPoolNumberTable, cdslAtmPvc=cdslAtmPvc, cdslVcClassOamSvcLF=cdslVcClassOamSvcLF, ciscoDslPVCGroup=ciscoDslPVCGroup, cdslAtmPvcProtocolIpBC=cdslAtmPvcProtocolIpBC, cdslPppOverAtmPvcNumberTable=cdslPppOverAtmPvcNumberTable, cdslVcClassUbrInputPCR=cdslVcClassUbrInputPCR, cdslMaxNrps=cdslMaxNrps, cdslVTIndex=cdslVTIndex, cdslAtmPvcUbrPlusPCR=cdslAtmPvcUbrPlusPCR, cdslLocalIpAddrPools=cdslLocalIpAddrPools, cdslVirtualTemplateNumberTable=cdslVirtualTemplateNumberTable, cdslVTPeerIpAddressMethod=cdslVTPeerIpAddressMethod, cdslAtmPvcSubIfNumber=cdslAtmPvcSubIfNumber, cdslMaxVirtualTemplates=cdslMaxVirtualTemplates, cdslVcClassVbrNrtPCR=cdslVcClassVbrNrtPCR, cdslNrpIpAddress=cdslNrpIpAddress, cdslVcClassUbrPlusInputMCR=cdslVcClassUbrPlusInputMCR, cdslVcClassAbrPCR=cdslVcClassAbrPCR, cdslVcClassBroadcast=cdslVcClassBroadcast, cdslVcClassIdleMTR=cdslVcClassIdleMTR, cdslAtmPvcVbrNrtPCR=cdslAtmPvcVbrNrtPCR, cdslVTPppAuthChap=cdslVTPppAuthChap, cdslVcClassMuxLinkType=cdslVcClassMuxLinkType, cdslAtmPvcAbrPCR=cdslAtmPvcAbrPCR, cdslLocalIpAddrPoolFreeAddresses=cdslLocalIpAddrPoolFreeAddresses, cdslVcClassVbrNrtInputBP=cdslVcClassVbrNrtInputBP, cdslVcClassName=cdslVcClassName, ciscoDslProvMIBConformance=ciscoDslProvMIBConformance, cdslVcClassOamRetryDownCount=cdslVcClassOamRetryDownCount, cdslAtmPvcMuxLinkType=cdslAtmPvcMuxLinkType, cdslVcClassUbrPlusInputPCR=cdslVcClassUbrPlusInputPCR, cdslVTIpIfIndex=cdslVTIpIfIndex, cdslAtmPvcAbrIORDF=cdslAtmPvcAbrIORDF, ciscoIpPoolGroup=ciscoIpPoolGroup, cdslVTPppPapPassword=cdslVTPppPapPassword, cdslVcClassOamPvcLF=cdslVcClassOamPvcLF, cdslVcClassTable=cdslVcClassTable, cdslVTRowStatus=cdslVTRowStatus, cdslAtmPvcBroadcast=cdslAtmPvcBroadcast, cdslLocalIpAddrRangeTable=cdslLocalIpAddrRangeTable, cdslVTPppUseTacacs=cdslVTPppUseTacacs, cdslAtmPvcInarp=cdslAtmPvcInarp, cdslVTIpAddressMask=cdslVTIpAddressMask, cdslVcClassIdleTimeout=cdslVcClassIdleTimeout, cdslAtmPvcEntry=cdslAtmPvcEntry, cdslVTPppChapPassword=cdslVTPppChapPassword, cdslAtmPvcOamRetryDownCount=cdslAtmPvcOamRetryDownCount, cdslAtmPvcAbrMCR=cdslAtmPvcAbrMCR, ciscoNrpSlotGroup=ciscoNrpSlotGroup, cdslPppOverAtmPvcNumberEntry=cdslPppOverAtmPvcNumberEntry, cdslPppOverAtmPvcs=cdslPppOverAtmPvcs, ciscoVcClassGroup=ciscoVcClassGroup, cdslAtmPvcAbrIORIF=cdslAtmPvcAbrIORIF, cdslVirtualTemplateTable=cdslVirtualTemplateTable, cdslVcClassUbrPlusMCR=cdslVcClassUbrPlusMCR, cdslLocalIpAddrPool=cdslLocalIpAddrPool, cdslAtmPvcRowStatus=cdslAtmPvcRowStatus, cdslAtmPvcUbrPCR=cdslAtmPvcUbrPCR, cdslLocalIpAddrPoolNumberEntry=cdslLocalIpAddrPoolNumberEntry, cdslVcClassInarp=cdslVcClassInarp, cdslVcClassVbrNrtSCR=cdslVcClassVbrNrtSCR, cdslAtmPvcOamPvcManaged=cdslAtmPvcOamPvcManaged, cdslVcClass=cdslVcClass, cdslVcClassOamPvcManaged=cdslVcClassOamPvcManaged, cdslVcClassAbrMcr=cdslVcClassAbrMcr, cdslVcClassOamRetryUpCount=cdslVcClassOamRetryUpCount, cdslAtmPvcOamRetryUpCount=cdslAtmPvcOamRetryUpCount, ciscoDslProvMIBBasicCompliance=ciscoDslProvMIBBasicCompliance, cdslNrpIpAddressEntry=cdslNrpIpAddressEntry, cdslVcClassNumberEntry=cdslVcClassNumberEntry, cdslNrpNumber=cdslNrpNumber, ciscoVirtualTemplateGroup=ciscoVirtualTemplateGroup, cdslNrpSlot=cdslNrpSlot, cdslVcClassAbrIORIF=cdslVcClassAbrIORIF, cdslMaxLocalIpAddrPools=cdslMaxLocalIpAddrPools, cdslAtmPvcVpi=cdslAtmPvcVpi, cdslVcClassProtocolIpBC=cdslVcClassProtocolIpBC, ciscoDslProvMIBGroups=ciscoDslProvMIBGroups, cdslLocalIpAddrRangeRowStatus=cdslLocalIpAddrRangeRowStatus, cdslLocalIpAddrPoolEntry=cdslLocalIpAddrPoolEntry, cdslMaxVcClasses=cdslMaxVcClasses, cdslVTPppPapEncrypType=cdslVTPppPapEncrypType, cdslVirtualTemplates=cdslVirtualTemplates, cdslLocalIpAddrRangeEntry=cdslLocalIpAddrRangeEntry, cdslVcClassOamSvcManaged=cdslVcClassOamSvcManaged, cdslVcClassTransmitPriority=cdslVcClassTransmitPriority, cdslVcClassNumberTable=cdslVcClassNumberTable, cdslAtmPvcName=cdslAtmPvcName, cdslVcClassUbrPCR=cdslVcClassUbrPCR, cdslLocalIpAddrPoolInUseAddresses=cdslLocalIpAddrPoolInUseAddresses, cdslVirtualTemplateEntry=cdslVirtualTemplateEntry, cdslVTPppChapHost=cdslVTPppChapHost, ciscoDslProvMIBObjects=ciscoDslProvMIBObjects, cdslVcClassUbrPlusPCR=cdslVcClassUbrPlusPCR, cdslLocalIpAddrRangeLowAddr=cdslLocalIpAddrRangeLowAddr, cdslVcClassILMIManage=cdslVcClassILMIManage, cdslAtmPvcOamPvcLF=cdslAtmPvcOamPvcLF, cdslAtmPvcQosType=cdslAtmPvcQosType, PYSNMP_MODULE_ID=ciscoDslProvisionMIB, cdslVcClasses=cdslVcClasses, cdslVcClassQosType=cdslVcClassQosType, cdslNrpIpAddressTable=cdslNrpIpAddressTable, cdslVTPppPapUserName=cdslVTPppPapUserName, cdslVTPppAuthPap=cdslVTPppAuthPap, cdslLocalIpAddrPoolName=cdslLocalIpAddrPoolName, cdslAtmPvcVbrNrtSCR=cdslAtmPvcVbrNrtSCR, cdslNrpSlotIndex=cdslNrpSlotIndex, cdslVTPppChapWaitPeer=cdslVTPppChapWaitPeer, cdslAtmPvcTable=cdslAtmPvcTable, cdslVcClassRowStatus=cdslVcClassRowStatus, ciscoDslProvMIBCompliances=ciscoDslProvMIBCompliances, cdslAtmPvcVirtualTemplate=cdslAtmPvcVirtualTemplate, cdslVcClassVbrNrtInputPCR=cdslVcClassVbrNrtInputPCR, cdslVTPppAuthMSChap=cdslVTPppAuthMSChap, cdslAtmPvcUbrPlusMCR=cdslAtmPvcUbrPlusMCR, cdslVcClassVbrNrtInputSCR=cdslVcClassVbrNrtInputSCR, cdslVTIpAddressMethod=cdslVTIpAddressMethod, cdslVcClassEncapsulation=cdslVcClassEncapsulation, cdslAtmPvcClass=cdslAtmPvcClass, cdslVcClassProtocolIpxBC=cdslVcClassProtocolIpxBC, cdslVirtualTemplateNumberEntry=cdslVirtualTemplateNumberEntry, cdslVcClassVirtualTemplate=cdslVcClassVirtualTemplate, cdslVcClassEntry=cdslVcClassEntry, ciscoDslProvMIBNotificationPrefix=ciscoDslProvMIBNotificationPrefix)
