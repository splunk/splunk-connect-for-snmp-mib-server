#
# PySNMP MIB module F10-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10SlotState, F10SwDate, F10HundredthdB, F10SystemPortType, F10MfgDate, F10ChassisType, F10ProcessorModuleType, F10CardOperStatus, F10ChassisMode, F10SystemCardType = mibBuilder.importSymbols("FORCE10-TC", "F10SlotState", "F10SwDate", "F10HundredthdB", "F10SystemPortType", "F10MfgDate", "F10ChassisType", "F10ProcessorModuleType", "F10CardOperStatus", "F10ChassisMode", "F10SystemCardType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, Gauge32, NotificationType, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, MibIdentifier, ObjectIdentity, Counter32, Integer32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "NotificationType", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Counter32", "Integer32", "Bits", "TimeTicks")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
f10ChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 1))
f10ChassisMib.setRevisions(('2013-01-09 12:00', '2008-09-02 12:00', '2008-04-30 12:00', '2008-04-16 12:00', '2008-02-29 12:00', '2007-06-28 12:00', '2007-05-22 12:00', '1906-05-22 00:00', '1901-01-02 00:00', '1903-10-02 00:00', '1903-10-02 00:00', '1903-07-30 00:00', '1903-07-20 00:00', '1902-06-01 00:00', '1902-04-01 00:00', '1902-12-25 00:00', '1902-08-08 00:00', '1902-06-16 00:00', '1902-05-12 00:00', '1902-05-01 00:00', '1902-04-15 00:00', '1901-11-07 00:00', '1901-03-26 00:00', '1900-11-21 00:00', '1900-10-20 00:00', '1900-10-28 00:00', '1900-10-18 00:00', '1900-10-01 00:00',))
if mibBuilder.loadTexts: f10ChassisMib.setLastUpdated('201301091200Z')
if mibBuilder.loadTexts: f10ChassisMib.setOrganization('Dell Inc')
f10ChassisMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1))
chObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1))
chSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2))
chRpmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3))
chAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4))
chLineCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5))
chType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 1), F10ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chType.setStatus('current')
chSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSerialNumber.setStatus('current')
chVendorId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chVendorId.setStatus('current')
chMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 4), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chMfgDate.setStatus('current')
chEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chEcLevel.setStatus('deprecated')
chNumFanTrays = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumFanTrays.setStatus('current')
chNumPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumPowerSupplies.setStatus('current')
chNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSlots.setStatus('current')
chNumSfmSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSfmSlots.setStatus('current')
chNumAirFilters = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumAirFilters.setStatus('deprecated')
chSlot1to16 = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 11), F10SlotState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlot1to16.setStatus('current')
chCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCountryCode.setStatus('current')
chPartNum = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPartNum.setStatus('current')
chProductRev = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chProductRev.setStatus('current')
chProductOrder = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chProductOrder.setStatus('current')
chChassisMode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 16), F10ChassisMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chChassisMode.setStatus('current')
chSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1), )
if mibBuilder.loadTexts: chSysPowerSupplyTable.setStatus('current')
chSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysPowerSupplyIndex"))
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setStatus('current')
chSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setStatus('current')
chSysPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setStatus('current')
chSysPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyType.setStatus('current')
chSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2), )
if mibBuilder.loadTexts: chSysFanTrayTable.setStatus('current')
chSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysFanTrayIndex"))
if mibBuilder.loadTexts: chSysFanTrayEntry.setStatus('current')
chSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayIndex.setStatus('current')
chSysFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setStatus('current')
chSysCardTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3), )
if mibBuilder.loadTexts: chSysCardTable.setStatus('current')
chSysCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysCardSlotIndex"))
if mibBuilder.loadTexts: chSysCardEntry.setStatus('current')
chSysCardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSlotIndex.setStatus('current')
chSysCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 2), F10SystemCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardType.setStatus('current')
chSysCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumber.setStatus('current')
chSysCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSerialNumber.setStatus('current')
chSysCardVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardVendorId.setStatus('current')
chSysCardMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 6), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardMfgDate.setStatus('current')
chSysCardEcLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardEcLevel.setStatus('deprecated')
chSysCardUpperTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardUpperTemp.setStatus('current')
chSysCardLowerTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardLowerTemp.setStatus('current')
chSysCardNumProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumProcessors.setStatus('current')
chSysCardNumPhyPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumPhyPorts.setStatus('current')
chSysCardNumLgcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumLgcPorts.setStatus('current')
chSysCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardUpTime.setStatus('current')
chSysCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardAdminStatus.setStatus('current')
chSysCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 15), F10CardOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardOperStatus.setStatus('current')
chSysCardFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardFaultStatus.setStatus('current')
chSysCardLogStream = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardLogStream.setStatus('current')
chSysCardCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardCountryCode.setStatus('current')
chSysCardPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPartNum.setStatus('current')
chSysCardProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardProductRev.setStatus('current')
chSysCardProdOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardProdOrder.setStatus('current')
chSysCardParityPhantomError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardParityPhantomError.setStatus('current')
chSysCardParityRecoverableError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardParityRecoverableError.setStatus('current')
chSysCardParityNonrecovrableError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardParityNonrecovrableError.setStatus('current')
chSysPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4), )
if mibBuilder.loadTexts: chSysPortTable.setStatus('current')
chSysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysPortSlotIndex"), (0, "F10-CHASSIS-MIB", "chSysPortIndex"))
if mibBuilder.loadTexts: chSysPortEntry.setStatus('current')
chSysPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortSlotIndex.setStatus('current')
chSysPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIndex.setStatus('current')
chSysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 3), F10SystemPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortType.setStatus('current')
chSysPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortAdminStatus.setStatus('current')
chSysPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("portDown", 2), ("portProblem", 3), ("cardProblem", 4), ("cardDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortOperStatus.setStatus('current')
chSysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIfIndex.setStatus('current')
chSysXfpRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 7), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysXfpRecvPower.setStatus('current')
chSysProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6), )
if mibBuilder.loadTexts: chSysProcessorTable.setStatus('current')
chSysProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysProcessorSlotIndex"), (0, "F10-CHASSIS-MIB", "chSysProcessorIndex"))
if mibBuilder.loadTexts: chSysProcessorEntry.setStatus('current')
chSysProcessorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorSlotIndex.setStatus('current')
chSysProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorIndex.setStatus('current')
chSysProcessorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 3), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorModule.setStatus('current')
chSysProcessorUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorUpTime.setStatus('current')
chSysProcessorNvramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorNvramSize.setStatus('current')
chSysProcessorMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorMemSize.setStatus('current')
chSysProcessorLogStream = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorLogStream.setStatus('current')
chSysSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7), )
if mibBuilder.loadTexts: chSysSwModuleTable.setStatus('current')
chSysSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysSwSlotIndex"), (0, "F10-CHASSIS-MIB", "chSysSwProcessorIndex"))
if mibBuilder.loadTexts: chSysSwModuleEntry.setStatus('current')
chSysSwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwSlotIndex.setStatus('current')
chSysSwProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwProcessorIndex.setStatus('current')
chSysSwRuntimeImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setStatus('current')
chSysSwRuntimeImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 4), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setStatus('current')
chSysSwCurrentBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setStatus('current')
chSysSwCurrentBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setStatus('current')
chSysSwCurrentBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setStatus('current')
chSysSwBackupBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setStatus('current')
chSysSwBackupBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setStatus('current')
chSysSwBackupBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setStatus('current')
chSysSwNextRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwNextRebootImage.setStatus('current')
chSysSwCurrentBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setStatus('current')
chSysSfmTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8), )
if mibBuilder.loadTexts: chSysSfmTable.setStatus('current')
chSysSfmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysSfmIndex"))
if mibBuilder.loadTexts: chSysSfmEntry.setStatus('current')
chSysSfmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmIndex.setStatus('current')
chSysSfmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmSerialNumber.setStatus('current')
chSysSfmVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmVendorId.setStatus('current')
chSysSfmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 4), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmMfgDate.setStatus('current')
chSysSfmEcLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmEcLevel.setStatus('deprecated')
chSysSfmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmAdminStatus.setStatus('current')
chSysSfmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("absent", 2), ("standby", 3), ("incomp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmOperStatus.setStatus('current')
chSysSfmErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("not-available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmErrorStatus.setStatus('current')
chSysSfmCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmCountryCode.setStatus('current')
chSysSfmPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmPartNum.setStatus('current')
chSysSfmProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmProductRev.setStatus('current')
chSysSfmProdOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmProdOrder.setStatus('current')
chSysSfmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9))
chSfmUtil5Sec = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSfmUtil5Sec.setStatus('current')
chSfmUtil1Min = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSfmUtil1Min.setStatus('current')
chSfmUtil5Min = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSfmUtil5Min.setStatus('current')
chRpmNumRpms = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmNumRpms.setStatus('current')
chRpmSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmSlotNumber.setStatus('current')
chRpmUptime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmUptime.setStatus('current')
chRpmLastSwitchDate = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmLastSwitchDate.setStatus('current')
chRpmCOAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCOAlarmStatus.setStatus('current')
chRpmFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absent", 1), ("present", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmFlashStatus.setStatus('current')
chRpmUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7), )
if mibBuilder.loadTexts: chRpmUtilTable.setStatus('current')
chRpmUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chRpmCpuIndex"))
if mibBuilder.loadTexts: chRpmUtilEntry.setStatus('current')
chRpmCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuIndex.setStatus('current')
chRpmCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 2), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuType.setStatus('current')
chRpmCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Sec.setStatus('current')
chRpmCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil1Min.setStatus('current')
chRpmCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Min.setStatus('current')
chRpmMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMemUsageUtil.setStatus('current')
chRpmMajorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMajorAlarmStatus.setStatus('current')
chRpmMinorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMinorAlarmStatus.setStatus('current')
chLineCardUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1), )
if mibBuilder.loadTexts: chLineCardUtilTable.setStatus('current')
chLineCardUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysCardNumber"))
if mibBuilder.loadTexts: chLineCardUtilEntry.setStatus('current')
chLineCardCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Sec.setStatus('current')
chLineCardCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil1Min.setStatus('current')
chLineCardCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Min.setStatus('current')
chLineCardMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardMemUsageUtil.setStatus('current')
chAlarmMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0))
chAlarmVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1))
chAlarmVarInteger = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarInteger.setStatus('current')
chAlarmVarString = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarString.setStatus('current')
chAlarmVarSlot = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarSlot.setStatus('current')
chAlarmVarPort = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarPort.setStatus('current')
chAlarmCardDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 1)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardDown.setStatus('current')
chAlarmCardUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 2)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardUp.setStatus('current')
chAlarmCardReset = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 3)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardReset.setStatus('current')
chAlarmCardOffline = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 4)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardOffline.setStatus('current')
chAlarmCardMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 5)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardMismatch.setStatus('current')
chAlarmCardRemove = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 6)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardRemove.setStatus('current')
chAlarmCardProblem = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 7)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardProblem.setStatus('current')
chAlarmCutoff = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 8)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCutoff.setStatus('current')
chAlarmSfmUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 9)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmUp.setStatus('current')
chAlarmSfmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 10)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmDown.setStatus('current')
chAlarmRpmUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 11)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmRpmUp.setStatus('current')
chAlarmRpmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 12)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmRpmDown.setStatus('current')
chAlarmPowersupplyDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 13)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmPowersupplyDown.setStatus('current')
chAlarmMinorTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 14)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorTemperatureHigh.setStatus('current')
chAlarmMajorTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 15)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorTemperatureHigh.setStatus('current')
chAlarmFanTrayDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 16)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayDown.setStatus('current')
chAlarmPowersupplyClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 17)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmPowersupplyClear.setStatus('current')
chAlarmMinorTemperatureClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 18)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorTemperatureClear.setStatus('current')
chAlarmMajorTemperatureClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 19)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorTemperatureClear.setStatus('current')
chAlarmFanTrayClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 20)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayClear.setStatus('current')
chAlarmMinorFanBadClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 21)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorFanBadClear.setStatus('current')
chAlarmMajorSfmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 22)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorSfmDown.setStatus('current')
chAlarmMajorSfmDownClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 23)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorSfmDownClr.setStatus('current')
chAlarmMinorSfmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 24)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorSfmDown.setStatus('current')
chAlarmMinorSfmDownClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 25)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorSfmDownClr.setStatus('current')
chAlarmTaskSuspend = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 26)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmTaskSuspend.setStatus('current')
chAlarmTaskTerm = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 27)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmTaskTerm.setStatus('current')
chAlarmVrrpGoMaster = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 28)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmVrrpGoMaster.setStatus('current')
chAlarmVrrpGiveupMaster = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 29)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmVrrpGiveupMaster.setStatus('current')
chAlarmBgpEstb = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 30)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmBgpEstb.setStatus('current')
chAlarmBgpXsition = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 31)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmBgpXsition.setStatus('current')
chAlarmMajorPS = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 32)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorPS.setStatus('current')
chAlarmMajorPSClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 33)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorPSClr.setStatus('current')
chAlarmMinorPS = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 34)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorPS.setStatus('current')
chAlarmMinorPSClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 35)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorPSClr.setStatus('current')
chAlarmMinorFanBad = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 36)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorFanBad.setStatus('current')
chAlarmExdCpuThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 37)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmExdCpuThreshold.setStatus('current')
chAlarmClrCpuThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 38)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmClrCpuThreshold.setStatus('current')
chAlarmExdMemThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 39)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmExdMemThreshold.setStatus('current')
chAlarmClrMemThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 40)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmClrMemThreshold.setStatus('current')
chAlarmMacStationMove = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 41)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMacStationMove.setStatus('current')
chAlarmSfmAdd = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 42)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmAdd.setStatus('current')
chAlarmSfmRemove = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 43)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmRemove.setStatus('current')
chAlarmRpmPrimary = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 44)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmRpmPrimary.setStatus('current')
chSnmpIpAclDeny = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 45)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chSnmpIpAclDeny.setStatus('current')
chAlarmSRAMParityErrorDetect = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 47)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSRAMParityErrorDetect.setStatus('current')
chAlarmAcDcMixedPowerSupplyDetect = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 48)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmAcDcMixedPowerSupplyDetect.setStatus('current')
chAlarmCardVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 56)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardVersionMismatch.setStatus('current')
chAlarmUnsupportedOptic = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 57)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmUnsupportedOptic.setStatus('current')
chAlarmFanTrayOrPsuDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 58)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayOrPsuDown.setStatus('current')
chAlarmFanTrayOrPsuClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 59)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayOrPsuClear.setStatus('current')
f10ChassisMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2))
f10ChassisMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 1))
f10ChassisMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2))
f10ChassisMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 1, 1)).setObjects(("F10-CHASSIS-MIB", "f10ComponentGroup"), ("F10-CHASSIS-MIB", "f10SystemGroup"), ("F10-CHASSIS-MIB", "f10RpmGroup"), ("F10-CHASSIS-MIB", "f10LineCardGroup"), ("F10-CHASSIS-MIB", "f10ChassisNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ChassisMibCompliance = f10ChassisMibCompliance.setStatus('current')
f10ComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 1)).setObjects(("F10-CHASSIS-MIB", "chType"), ("F10-CHASSIS-MIB", "chSerialNumber"), ("F10-CHASSIS-MIB", "chVendorId"), ("F10-CHASSIS-MIB", "chMfgDate"), ("F10-CHASSIS-MIB", "chEcLevel"), ("F10-CHASSIS-MIB", "chNumFanTrays"), ("F10-CHASSIS-MIB", "chNumPowerSupplies"), ("F10-CHASSIS-MIB", "chNumSlots"), ("F10-CHASSIS-MIB", "chNumSfmSlots"), ("F10-CHASSIS-MIB", "chSlot1to16"), ("F10-CHASSIS-MIB", "chCountryCode"), ("F10-CHASSIS-MIB", "chPartNum"), ("F10-CHASSIS-MIB", "chProductRev"), ("F10-CHASSIS-MIB", "chProductOrder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ComponentGroup = f10ComponentGroup.setStatus('current')
f10SystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 2)).setObjects(("F10-CHASSIS-MIB", "chSysPowerSupplyOperStatus"), ("F10-CHASSIS-MIB", "chSysFanTrayOperStatus"), ("F10-CHASSIS-MIB", "chSysCardNumber"), ("F10-CHASSIS-MIB", "chSysCardType"), ("F10-CHASSIS-MIB", "chSysCardSerialNumber"), ("F10-CHASSIS-MIB", "chSysCardVendorId"), ("F10-CHASSIS-MIB", "chSysCardMfgDate"), ("F10-CHASSIS-MIB", "chSysCardEcLevel"), ("F10-CHASSIS-MIB", "chSysCardUpperTemp"), ("F10-CHASSIS-MIB", "chSysCardLowerTemp"), ("F10-CHASSIS-MIB", "chSysCardNumProcessors"), ("F10-CHASSIS-MIB", "chSysCardNumPhyPorts"), ("F10-CHASSIS-MIB", "chSysCardNumLgcPorts"), ("F10-CHASSIS-MIB", "chSysCardUpTime"), ("F10-CHASSIS-MIB", "chSysCardAdminStatus"), ("F10-CHASSIS-MIB", "chSysCardOperStatus"), ("F10-CHASSIS-MIB", "chSysCardFaultStatus"), ("F10-CHASSIS-MIB", "chSysCardLogStream"), ("F10-CHASSIS-MIB", "chSysCardCountryCode"), ("F10-CHASSIS-MIB", "chSysCardPartNum"), ("F10-CHASSIS-MIB", "chSysCardProductRev"), ("F10-CHASSIS-MIB", "chSysCardProdOrder"), ("F10-CHASSIS-MIB", "chSysCardParityPhantomError"), ("F10-CHASSIS-MIB", "chSysCardParityRecoverableError"), ("F10-CHASSIS-MIB", "chSysCardParityNonrecovrableError"), ("F10-CHASSIS-MIB", "chSysProcessorModule"), ("F10-CHASSIS-MIB", "chSysProcessorUpTime"), ("F10-CHASSIS-MIB", "chSysProcessorNvramSize"), ("F10-CHASSIS-MIB", "chSysProcessorMemSize"), ("F10-CHASSIS-MIB", "chSysProcessorLogStream"), ("F10-CHASSIS-MIB", "chSysPortType"), ("F10-CHASSIS-MIB", "chSysPortAdminStatus"), ("F10-CHASSIS-MIB", "chSysPortOperStatus"), ("F10-CHASSIS-MIB", "chSysPortIfIndex"), ("F10-CHASSIS-MIB", "chSysXfpRecvPower"), ("F10-CHASSIS-MIB", "chSysSwRuntimeImgVersion"), ("F10-CHASSIS-MIB", "chSysSwRuntimeImgDate"), ("F10-CHASSIS-MIB", "chSysSwCurrentBootImgVersion"), ("F10-CHASSIS-MIB", "chSysSwCurrentBootImgDate"), ("F10-CHASSIS-MIB", "chSysSwCurrentBootImgStatus"), ("F10-CHASSIS-MIB", "chSysSwBackupBootImgVersion"), ("F10-CHASSIS-MIB", "chSysSwBackupBootImgDate"), ("F10-CHASSIS-MIB", "chSysSwBackupBootImgStatus"), ("F10-CHASSIS-MIB", "chSysSwNextRebootImage"), ("F10-CHASSIS-MIB", "chSysSfmSerialNumber"), ("F10-CHASSIS-MIB", "chSysSfmVendorId"), ("F10-CHASSIS-MIB", "chSysSfmMfgDate"), ("F10-CHASSIS-MIB", "chSysSfmEcLevel"), ("F10-CHASSIS-MIB", "chSysSfmAdminStatus"), ("F10-CHASSIS-MIB", "chSysSfmOperStatus"), ("F10-CHASSIS-MIB", "chSysSfmErrorStatus"), ("F10-CHASSIS-MIB", "chSysSfmCountryCode"), ("F10-CHASSIS-MIB", "chSysSfmPartNum"), ("F10-CHASSIS-MIB", "chSysSfmProductRev"), ("F10-CHASSIS-MIB", "chSysSfmProdOrder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10SystemGroup = f10SystemGroup.setStatus('current')
f10RpmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 3)).setObjects(("F10-CHASSIS-MIB", "chRpmNumRpms"), ("F10-CHASSIS-MIB", "chRpmSlotNumber"), ("F10-CHASSIS-MIB", "chRpmUptime"), ("F10-CHASSIS-MIB", "chRpmLastSwitchDate"), ("F10-CHASSIS-MIB", "chRpmCOAlarmStatus"), ("F10-CHASSIS-MIB", "chRpmFlashStatus"), ("F10-CHASSIS-MIB", "chRpmCpuType"), ("F10-CHASSIS-MIB", "chRpmCpuUtil5Sec"), ("F10-CHASSIS-MIB", "chRpmCpuUtil1Min"), ("F10-CHASSIS-MIB", "chRpmCpuUtil5Min"), ("F10-CHASSIS-MIB", "chRpmMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10RpmGroup = f10RpmGroup.setStatus('current')
f10LineCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 4)).setObjects(("F10-CHASSIS-MIB", "chLineCardCpuUtil5Sec"), ("F10-CHASSIS-MIB", "chLineCardCpuUtil1Min"), ("F10-CHASSIS-MIB", "chLineCardCpuUtil5Min"), ("F10-CHASSIS-MIB", "chLineCardMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LineCardGroup = f10LineCardGroup.setStatus('current')
f10ChassisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 5)).setObjects(("F10-CHASSIS-MIB", "chAlarmCardDown"), ("F10-CHASSIS-MIB", "chAlarmCardUp"), ("F10-CHASSIS-MIB", "chAlarmCardReset"), ("F10-CHASSIS-MIB", "chAlarmCardOffline"), ("F10-CHASSIS-MIB", "chAlarmCardMismatch"), ("F10-CHASSIS-MIB", "chAlarmCardRemove"), ("F10-CHASSIS-MIB", "chAlarmCardProblem"), ("F10-CHASSIS-MIB", "chAlarmCutoff"), ("F10-CHASSIS-MIB", "chAlarmSfmUp"), ("F10-CHASSIS-MIB", "chAlarmSfmDown"), ("F10-CHASSIS-MIB", "chAlarmRpmUp"), ("F10-CHASSIS-MIB", "chAlarmRpmDown"), ("F10-CHASSIS-MIB", "chAlarmPowersupplyDown"), ("F10-CHASSIS-MIB", "chAlarmMinorTemperatureHigh"), ("F10-CHASSIS-MIB", "chAlarmMajorTemperatureHigh"), ("F10-CHASSIS-MIB", "chAlarmFanTrayDown"), ("F10-CHASSIS-MIB", "chAlarmPowersupplyClear"), ("F10-CHASSIS-MIB", "chAlarmMinorTemperatureClear"), ("F10-CHASSIS-MIB", "chAlarmMajorTemperatureClear"), ("F10-CHASSIS-MIB", "chAlarmFanTrayClear"), ("F10-CHASSIS-MIB", "chAlarmMinorFanBadClear"), ("F10-CHASSIS-MIB", "chAlarmMajorSfmDown"), ("F10-CHASSIS-MIB", "chAlarmMajorSfmDownClr"), ("F10-CHASSIS-MIB", "chAlarmMinorSfmDown"), ("F10-CHASSIS-MIB", "chAlarmMinorSfmDownClr"), ("F10-CHASSIS-MIB", "chAlarmTaskSuspend"), ("F10-CHASSIS-MIB", "chAlarmTaskTerm"), ("F10-CHASSIS-MIB", "chAlarmVrrpGoMaster"), ("F10-CHASSIS-MIB", "chAlarmVrrpGiveupMaster"), ("F10-CHASSIS-MIB", "chAlarmBgpEstb"), ("F10-CHASSIS-MIB", "chAlarmBgpXsition"), ("F10-CHASSIS-MIB", "chAlarmMajorPS"), ("F10-CHASSIS-MIB", "chAlarmMajorPSClr"), ("F10-CHASSIS-MIB", "chAlarmMinorPS"), ("F10-CHASSIS-MIB", "chAlarmMinorPSClr"), ("F10-CHASSIS-MIB", "chAlarmMinorFanBad"), ("F10-CHASSIS-MIB", "chAlarmExdCpuThreshold"), ("F10-CHASSIS-MIB", "chAlarmClrCpuThreshold"), ("F10-CHASSIS-MIB", "chAlarmExdMemThreshold"), ("F10-CHASSIS-MIB", "chAlarmClrMemThreshold"), ("F10-CHASSIS-MIB", "chAlarmMacStationMove"), ("F10-CHASSIS-MIB", "chAlarmSfmAdd"), ("F10-CHASSIS-MIB", "chAlarmSfmRemove"), ("F10-CHASSIS-MIB", "chAlarmRpmPrimary"), ("F10-CHASSIS-MIB", "chSnmpIpAclDeny"), ("F10-CHASSIS-MIB", "chAlarmSRAMParityErrorDetect"), ("F10-CHASSIS-MIB", "chAlarmAcDcMixedPowerSupplyDetect"), ("F10-CHASSIS-MIB", "chAlarmCardVersionMismatch"), ("F10-CHASSIS-MIB", "chAlarmUnsupportedOptic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ChassisNotificationGroup = f10ChassisNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("F10-CHASSIS-MIB", chAlarmVrrpGiveupMaster=chAlarmVrrpGiveupMaster, chSysProcessorUpTime=chSysProcessorUpTime, chSysSwCurrentBootImage=chSysSwCurrentBootImage, chSysSfmVendorId=chSysSfmVendorId, chSysCardTable=chSysCardTable, chAlarmTaskTerm=chAlarmTaskTerm, chSysCardOperStatus=chSysCardOperStatus, chVendorId=chVendorId, chAlarmPowersupplyDown=chAlarmPowersupplyDown, f10LineCardGroup=f10LineCardGroup, chSysFanTrayIndex=chSysFanTrayIndex, chAlarmCardMismatch=chAlarmCardMismatch, chSysCardPartNum=chSysCardPartNum, chAlarmMinorSfmDown=chAlarmMinorSfmDown, chAlarmObjects=chAlarmObjects, chSysCardParityNonrecovrableError=chSysCardParityNonrecovrableError, chSfmUtil5Min=chSfmUtil5Min, chAlarmCardRemove=chAlarmCardRemove, chSysSwModuleEntry=chSysSwModuleEntry, chRpmFlashStatus=chRpmFlashStatus, chSysProcessorTable=chSysProcessorTable, chLineCardUtilEntry=chLineCardUtilEntry, chAlarmMinorFanBadClear=chAlarmMinorFanBadClear, chAlarmVarSlot=chAlarmVarSlot, chRpmCpuUtil5Min=chRpmCpuUtil5Min, chSysCardVendorId=chSysCardVendorId, chSysProcessorNvramSize=chSysProcessorNvramSize, chSysSwNextRebootImage=chSysSwNextRebootImage, chSysFanTrayOperStatus=chSysFanTrayOperStatus, chAlarmRpmUp=chAlarmRpmUp, chSysSwProcessorIndex=chSysSwProcessorIndex, chSysCardNumPhyPorts=chSysCardNumPhyPorts, chAlarmExdCpuThreshold=chAlarmExdCpuThreshold, chSysCardProductRev=chSysCardProductRev, chAlarmMajorTemperatureHigh=chAlarmMajorTemperatureHigh, chSysSfmErrorStatus=chSysSfmErrorStatus, chSfmUtil1Min=chSfmUtil1Min, chAlarmMinorPSClr=chAlarmMinorPSClr, chRpmUptime=chRpmUptime, chAlarmMajorPS=chAlarmMajorPS, chSysPortTable=chSysPortTable, chAlarmMinorFanBad=chAlarmMinorFanBad, chSerialNumber=chSerialNumber, chEcLevel=chEcLevel, f10ComponentGroup=f10ComponentGroup, chAlarmCardUp=chAlarmCardUp, chAlarmVarInteger=chAlarmVarInteger, chAlarmTaskSuspend=chAlarmTaskSuspend, chSysCardEcLevel=chSysCardEcLevel, f10ChassisMibObject=f10ChassisMibObject, chNumSfmSlots=chNumSfmSlots, chAlarmRpmDown=chAlarmRpmDown, chLineCardCpuUtil1Min=chLineCardCpuUtil1Min, chSysSwCurrentBootImgVersion=chSysSwCurrentBootImgVersion, chAlarmFanTrayDown=chAlarmFanTrayDown, chSysSfmEntry=chSysSfmEntry, chAlarmFanTrayOrPsuDown=chAlarmFanTrayOrPsuDown, chSysCardType=chSysCardType, chLineCardUtilTable=chLineCardUtilTable, chAlarmAcDcMixedPowerSupplyDetect=chAlarmAcDcMixedPowerSupplyDetect, chSnmpIpAclDeny=chSnmpIpAclDeny, chSysCardProdOrder=chSysCardProdOrder, chSysCardAdminStatus=chSysCardAdminStatus, chSysCardParityRecoverableError=chSysCardParityRecoverableError, chAlarmSfmAdd=chAlarmSfmAdd, chNumSlots=chNumSlots, chSysCardUpTime=chSysCardUpTime, chSysSwRuntimeImgDate=chSysSwRuntimeImgDate, chSysPowerSupplyType=chSysPowerSupplyType, chSysPortIfIndex=chSysPortIfIndex, chAlarmPowersupplyClear=chAlarmPowersupplyClear, chCountryCode=chCountryCode, chSysSfmMfgDate=chSysSfmMfgDate, chType=chType, chSysCardNumLgcPorts=chSysCardNumLgcPorts, chAlarmVarString=chAlarmVarString, chLineCardMemUsageUtil=chLineCardMemUsageUtil, chNumAirFilters=chNumAirFilters, chAlarmVarPort=chAlarmVarPort, f10RpmGroup=f10RpmGroup, chSysCardMfgDate=chSysCardMfgDate, chSysSwBackupBootImgVersion=chSysSwBackupBootImgVersion, chSysProcessorSlotIndex=chSysProcessorSlotIndex, chRpmSlotNumber=chRpmSlotNumber, chAlarmSfmRemove=chAlarmSfmRemove, chSysSfmProductRev=chSysSfmProductRev, chRpmMemUsageUtil=chRpmMemUsageUtil, chSysCardParityPhantomError=chSysCardParityPhantomError, chSysCardEntry=chSysCardEntry, chNumFanTrays=chNumFanTrays, chSysSwCurrentBootImgStatus=chSysSwCurrentBootImgStatus, chAlarmMajorSfmDown=chAlarmMajorSfmDown, chAlarmSfmDown=chAlarmSfmDown, chAlarmCutoff=chAlarmCutoff, chRpmUtilEntry=chRpmUtilEntry, chSysCardLowerTemp=chSysCardLowerTemp, chSysSfmTable=chSysSfmTable, chAlarmBgpEstb=chAlarmBgpEstb, chSysCardNumber=chSysCardNumber, chAlarmClrCpuThreshold=chAlarmClrCpuThreshold, chProductOrder=chProductOrder, chSfmUtil5Sec=chSfmUtil5Sec, chSysProcessorMemSize=chSysProcessorMemSize, chSysSfmSerialNumber=chSysSfmSerialNumber, chAlarmVrrpGoMaster=chAlarmVrrpGoMaster, chRpmMinorAlarmStatus=chRpmMinorAlarmStatus, f10ChassisMibCompliance=f10ChassisMibCompliance, chSysPortOperStatus=chSysPortOperStatus, chSysCardLogStream=chSysCardLogStream, chAlarmMajorTemperatureClear=chAlarmMajorTemperatureClear, chLineCardCpuUtil5Sec=chLineCardCpuUtil5Sec, chAlarmSfmUp=chAlarmSfmUp, chSysSwBackupBootImgDate=chSysSwBackupBootImgDate, chSysObjects=chSysObjects, chSysXfpRecvPower=chSysXfpRecvPower, chSysProcessorEntry=chSysProcessorEntry, chRpmNumRpms=chRpmNumRpms, chSysSwCurrentBootImgDate=chSysSwCurrentBootImgDate, chAlarmCardOffline=chAlarmCardOffline, chSysCardFaultStatus=chSysCardFaultStatus, chProductRev=chProductRev, chLineCardObjects=chLineCardObjects, chNumPowerSupplies=chNumPowerSupplies, chAlarmVariable=chAlarmVariable, chAlarmMinorPS=chAlarmMinorPS, f10ChassisNotificationGroup=f10ChassisNotificationGroup, chSysSfmIndex=chSysSfmIndex, chAlarmFanTrayOrPsuClear=chAlarmFanTrayOrPsuClear, f10SystemGroup=f10SystemGroup, chChassisMode=chChassisMode, chAlarmBgpXsition=chAlarmBgpXsition, chRpmUtilTable=chRpmUtilTable, chAlarmMinorSfmDownClr=chAlarmMinorSfmDownClr, f10ChassisMibConformance=f10ChassisMibConformance, chSysSfmOperStatus=chSysSfmOperStatus, chAlarmSRAMParityErrorDetect=chAlarmSRAMParityErrorDetect, chRpmCpuIndex=chRpmCpuIndex, chSysSfmAdminStatus=chSysSfmAdminStatus, chSysProcessorModule=chSysProcessorModule, chMfgDate=chMfgDate, chSysPortAdminStatus=chSysPortAdminStatus, f10ChassisMibGroups=f10ChassisMibGroups, chSysSwRuntimeImgVersion=chSysSwRuntimeImgVersion, chAlarmClrMemThreshold=chAlarmClrMemThreshold, chAlarmRpmPrimary=chAlarmRpmPrimary, chAlarmMajorSfmDownClr=chAlarmMajorSfmDownClr, f10ChassisMib=f10ChassisMib, chAlarmCardVersionMismatch=chAlarmCardVersionMismatch, PYSNMP_MODULE_ID=f10ChassisMib, chSysProcessorIndex=chSysProcessorIndex, chSysSfmGroup=chSysSfmGroup, chSysCardSlotIndex=chSysCardSlotIndex, chAlarmExdMemThreshold=chAlarmExdMemThreshold, chSysPortType=chSysPortType, chAlarmUnsupportedOptic=chAlarmUnsupportedOptic, f10ChassisMibCompliances=f10ChassisMibCompliances, chRpmLastSwitchDate=chRpmLastSwitchDate, chSlot1to16=chSlot1to16, chSysCardUpperTemp=chSysCardUpperTemp, chAlarmCardProblem=chAlarmCardProblem, chAlarmCardDown=chAlarmCardDown, chSysSfmEcLevel=chSysSfmEcLevel, chRpmMajorAlarmStatus=chRpmMajorAlarmStatus, chSysCardNumProcessors=chSysCardNumProcessors, chSysPortSlotIndex=chSysPortSlotIndex, chSysSfmProdOrder=chSysSfmProdOrder, chAlarmMinorTemperatureClear=chAlarmMinorTemperatureClear, chRpmCpuUtil5Sec=chRpmCpuUtil5Sec, chSysSfmPartNum=chSysSfmPartNum, chSysFanTrayTable=chSysFanTrayTable, chSysPowerSupplyEntry=chSysPowerSupplyEntry, chRpmCpuUtil1Min=chRpmCpuUtil1Min, chRpmObjects=chRpmObjects, chAlarmMibNotifications=chAlarmMibNotifications, chSysCardSerialNumber=chSysCardSerialNumber, chPartNum=chPartNum, chRpmCOAlarmStatus=chRpmCOAlarmStatus, chAlarmMinorTemperatureHigh=chAlarmMinorTemperatureHigh, chSysFanTrayEntry=chSysFanTrayEntry, chSysPortIndex=chSysPortIndex, chSysCardCountryCode=chSysCardCountryCode, chRpmCpuType=chRpmCpuType, chAlarmMacStationMove=chAlarmMacStationMove, chSysSwBackupBootImgStatus=chSysSwBackupBootImgStatus, chSysPortEntry=chSysPortEntry, chSysSwModuleTable=chSysSwModuleTable, chObjects=chObjects, chSysPowerSupplyIndex=chSysPowerSupplyIndex, chSysPowerSupplyTable=chSysPowerSupplyTable, chSysSfmCountryCode=chSysSfmCountryCode, chSysSwSlotIndex=chSysSwSlotIndex, chSysProcessorLogStream=chSysProcessorLogStream, chLineCardCpuUtil5Min=chLineCardCpuUtil5Min, chAlarmCardReset=chAlarmCardReset, chAlarmFanTrayClear=chAlarmFanTrayClear, chSysPowerSupplyOperStatus=chSysPowerSupplyOperStatus, chAlarmMajorPSClr=chAlarmMajorPSClr)
