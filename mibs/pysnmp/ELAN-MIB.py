#
# PySNMP MIB module ELAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
LecDataFrameFormat, LecDataFrameSize, AtmLaneAddress = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "LecDataFrameFormat", "LecDataFrameSize", "AtmLaneAddress")
MacAddress, = mibBuilder.importSymbols("RFC1286-MIB", "MacAddress")
AutonomousType, = mibBuilder.importSymbols("RFC1316-MIB", "AutonomousType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Integer32, MibIdentifier, Counter32, Gauge32, NotificationType, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, enterprises, iso, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "MibIdentifier", "Counter32", "Gauge32", "NotificationType", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "enterprises", "iso", "TimeTicks", "Counter64")
TimeStamp, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "DisplayString", "TextualConvention")
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfLanEmulation = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3))
elanMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2))
class IfIndexOrZero(Integer32):
    pass

class ElanLocalIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class AtmLaneMask(OctetString):
    pass

class TlvSelectorIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class PolicySelectorIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class LecsErrLogIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

elanAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 1))
elanConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2))
elanLecsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3))
elanLecsConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1))
elanLecsFaultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2))
elanLecsStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3))
elanAdminPolicyVal = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 1, 1))
byAtmAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 1, 1, 1))
byMacAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 1, 1, 2))
byRouteDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 1, 1, 3))
byLanType = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 1, 1, 4))
byPktSize = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 1, 1, 5))
elanConfNextId = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 1), ElanLocalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elanConfNextId.setStatus('mandatory')
elanConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2), )
if mibBuilder.loadTexts: elanConfTable.setStatus('mandatory')
elanConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2, 1), ).setIndexNames((0, "ELAN-MIB", "elanConfIndex"))
if mibBuilder.loadTexts: elanConfEntry.setStatus('mandatory')
elanConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2, 1, 1), ElanLocalIndex())
if mibBuilder.loadTexts: elanConfIndex.setStatus('mandatory')
elanConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanConfName.setStatus('mandatory')
elanConfTlvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2, 1, 3), TlvSelectorIndexType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanConfTlvIndex.setStatus('mandatory')
elanConfLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2, 1, 4), LecDataFrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanConfLanType.setStatus('mandatory')
elanConfMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2, 1, 5), LecDataFrameSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanConfMaxFrameSize.setStatus('mandatory')
elanConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanConfRowStatus.setStatus('mandatory')
elanLesTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 3), )
if mibBuilder.loadTexts: elanLesTable.setStatus('mandatory')
elanLesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 3, 1), ).setIndexNames((0, "ELAN-MIB", "elanConfIndex"), (0, "ELAN-MIB", "elanLesIndex"))
if mibBuilder.loadTexts: elanLesEntry.setStatus('mandatory')
elanLesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: elanLesIndex.setStatus('mandatory')
elanLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 3, 1, 2), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanLesAtmAddress.setStatus('mandatory')
elanLesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanLesRowStatus.setStatus('mandatory')
elanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 4), )
if mibBuilder.loadTexts: elanPolicyTable.setStatus('mandatory')
elanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 4, 1), ).setIndexNames((0, "ELAN-MIB", "elanPolicySelectorIndex"), (0, "ELAN-MIB", "elanPolicyIndex"))
if mibBuilder.loadTexts: elanPolicyEntry.setStatus('mandatory')
elanPolicySelectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 4, 1, 1), PolicySelectorIndexType())
if mibBuilder.loadTexts: elanPolicySelectorIndex.setStatus('mandatory')
elanPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: elanPolicyIndex.setStatus('mandatory')
elanPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanPolicyPriority.setStatus('mandatory')
elanPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 4, 1, 4), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanPolicyType.setStatus('mandatory')
elanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanPolicyRowStatus.setStatus('mandatory')
elanLecAtmAddrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 5), )
if mibBuilder.loadTexts: elanLecAtmAddrTable.setStatus('mandatory')
elanLecAtmAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 5, 1), ).setIndexNames((0, "ELAN-MIB", "elanConfIndex"), (0, "ELAN-MIB", "elanLesIndex"), (0, "ELAN-MIB", "elanLecAtmAddress"), (0, "ELAN-MIB", "elanLecAtmMask"))
if mibBuilder.loadTexts: elanLecAtmAddrEntry.setStatus('mandatory')
elanLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 5, 1, 1), AtmLaneAddress())
if mibBuilder.loadTexts: elanLecAtmAddress.setStatus('mandatory')
elanLecAtmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 5, 1, 2), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanLecAtmMask.setStatus('mandatory')
elanLecAtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanLecAtmRowStatus.setStatus('mandatory')
elanLecMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 6), )
if mibBuilder.loadTexts: elanLecMacAddrTable.setStatus('mandatory')
elanLecMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 6, 1), ).setIndexNames((0, "ELAN-MIB", "elanConfIndex"), (0, "ELAN-MIB", "elanLesIndex"), (0, "ELAN-MIB", "elanLecMacAddress"))
if mibBuilder.loadTexts: elanLecMacAddrEntry.setStatus('mandatory')
elanLecMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: elanLecMacAddress.setStatus('mandatory')
elanLecMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 6, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanLecMacRowStatus.setStatus('mandatory')
elanLecRdTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 7), )
if mibBuilder.loadTexts: elanLecRdTable.setStatus('mandatory')
elanLecRdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 7, 1), ).setIndexNames((0, "ELAN-MIB", "elanConfIndex"), (0, "ELAN-MIB", "elanLesIndex"), (0, "ELAN-MIB", "elanLecRdSegId"), (0, "ELAN-MIB", "elanLecRdBridgeNum"))
if mibBuilder.loadTexts: elanLecRdEntry.setStatus('mandatory')
elanLecRdSegId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: elanLecRdSegId.setStatus('mandatory')
elanLecRdBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: elanLecRdBridgeNum.setStatus('mandatory')
elanLecRdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 2, 7, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanLecRdRowStatus.setStatus('mandatory')
lecsConfNextId = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 1), ElanLocalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsConfNextId.setStatus('mandatory')
lecsConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2), )
if mibBuilder.loadTexts: lecsConfTable.setStatus('mandatory')
lecsConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1), ).setIndexNames((0, "ELAN-MIB", "lecsConfIndex"))
if mibBuilder.loadTexts: lecsConfEntry.setStatus('mandatory')
lecsConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: lecsConfIndex.setStatus('mandatory')
lecsAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 2), IfIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmIfIndex.setStatus('mandatory')
lecsAtmAddrSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 3), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmAddrSpec.setStatus('mandatory')
lecsAtmAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 4), AtmLaneMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAtmAddrMask.setStatus('mandatory')
lecsAtmAddrActual = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 5), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsAtmAddrActual.setStatus('mandatory')
lecsPolicySelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 6), PolicySelectorIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsPolicySelIndex.setStatus('mandatory')
lecsLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsLastInitialized.setStatus('mandatory')
lecsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsOperStatus.setStatus('mandatory')
lecsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsAdminStatus.setStatus('mandatory')
lecsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsRowStatus.setStatus('mandatory')
lecsElanTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 3), )
if mibBuilder.loadTexts: lecsElanTable.setStatus('mandatory')
lecsElanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 3, 1), )
if mibBuilder.loadTexts: lecsElanEntry.setStatus('mandatory')
elanLecsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 3, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elanLecsRowStatus.setStatus('mandatory')
lecsTlvTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 4), )
if mibBuilder.loadTexts: lecsTlvTable.setStatus('mandatory')
lecsTlvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 4, 1), ).setIndexNames((0, "ELAN-MIB", "lecsTlvSelectorIndex"), (0, "ELAN-MIB", "lecsTlvTag"), (0, "ELAN-MIB", "lecsTlvIndex"))
if mibBuilder.loadTexts: lecsTlvEntry.setStatus('mandatory')
lecsTlvSelectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 4, 1, 1), TlvSelectorIndexType())
if mibBuilder.loadTexts: lecsTlvSelectorIndex.setStatus('mandatory')
lecsTlvTag = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 4, 1, 2), OctetString())
if mibBuilder.loadTexts: lecsTlvTag.setStatus('mandatory')
lecsTlvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: lecsTlvIndex.setStatus('mandatory')
lecsTlvVal = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 4, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsTlvVal.setStatus('mandatory')
lecsTlvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 1, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsTlvRowStatus.setStatus('mandatory')
lecsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1), )
if mibBuilder.loadTexts: lecsStatsTable.setStatus('mandatory')
lecsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1), )
if mibBuilder.loadTexts: lecsStatsEntry.setStatus('mandatory')
lecsStatSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatSuccessful.setStatus('mandatory')
lecsStatInBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatInBadFrames.setStatus('mandatory')
lecsStatInvalidParam = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatInvalidParam.setStatus('mandatory')
lecsStatInsufRes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatInsufRes.setStatus('mandatory')
lecsStatAccDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatAccDenied.setStatus('mandatory')
lecsStatInvalidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatInvalidReq.setStatus('mandatory')
lecsStatInvalidDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatInvalidDest.setStatus('mandatory')
lecsStatInvalidAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatInvalidAddr.setStatus('mandatory')
lecsStatNoConf = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatNoConf.setStatus('mandatory')
lecsStatConfError = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatConfError.setStatus('mandatory')
lecsStatInsufInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsStatInsufInfo.setStatus('mandatory')
lecsErrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 1), )
if mibBuilder.loadTexts: lecsErrCtlTable.setStatus('mandatory')
lecsErrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 1, 1), )
if mibBuilder.loadTexts: lecsErrCtlEntry.setStatus('mandatory')
lecsErrCtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsErrCtlAdminStatus.setStatus('mandatory')
lecsErrCtlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("outOfRes", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsErrCtlOperStatus.setStatus('mandatory')
lecsErrCtlClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsErrCtlClearLog.setStatus('mandatory')
lecsErrCtlMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsErrCtlMaxEntries.setStatus('mandatory')
lecsErrCtlLastEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 1, 1, 5), LecsErrLogIndexType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsErrCtlLastEntry.setStatus('mandatory')
lecsErrLogTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 2), )
if mibBuilder.loadTexts: lecsErrLogTable.setStatus('mandatory')
lecsErrLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 2, 1), ).setIndexNames((0, "ELAN-MIB", "lecsConfIndex"), (0, "ELAN-MIB", "lecsErrLogIndex"))
if mibBuilder.loadTexts: lecsErrLogEntry.setStatus('mandatory')
lecsErrLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 2, 1, 1), LecsErrLogIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsErrLogIndex.setStatus('mandatory')
lecsErrLogAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsErrLogAtmAddr.setStatus('mandatory')
lecsErrLogErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsErrLogErrCode.setStatus('mandatory')
lecsErrLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 3, 2, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lecsErrLogTime.setStatus('mandatory')
elanMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4))
elanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1))
elanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 2))
elanMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 2, 1))
elanCConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1, 1))
elanLecAssignByAtmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1, 2))
elanLecAssignByMacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1, 3))
elanLecAssignByRdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1, 4))
lecsCStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1, 5))
lecsCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1, 6))
lecsCFaultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 3, 2, 4, 1, 7))
mibBuilder.exportSymbols("ELAN-MIB", lecsTlvSelectorIndex=lecsTlvSelectorIndex, lecsTlvTag=lecsTlvTag, lecsStatSuccessful=lecsStatSuccessful, atmfLanEmulation=atmfLanEmulation, lecsElanEntry=lecsElanEntry, elanLecRdTable=elanLecRdTable, atmForumNetworkManagement=atmForumNetworkManagement, elanLecMacRowStatus=elanLecMacRowStatus, lecsErrLogErrCode=lecsErrLogErrCode, elanLecsConfGroup=elanLecsConfGroup, elanLecRdBridgeNum=elanLecRdBridgeNum, lecsErrCtlTable=lecsErrCtlTable, IfIndexOrZero=IfIndexOrZero, byLanType=byLanType, elanMIBCompliances=elanMIBCompliances, elanLecAtmAddress=elanLecAtmAddress, AtmLaneMask=AtmLaneMask, elanLecMacAddrTable=elanLecMacAddrTable, lecsStatInsufInfo=lecsStatInsufInfo, lecsStatConfError=lecsStatConfError, atmForum=atmForum, lecsStatInvalidAddr=lecsStatInvalidAddr, byMacAddr=byMacAddr, elanLesEntry=elanLesEntry, elanCConfGroup=elanCConfGroup, lecsCFaultGroup=lecsCFaultGroup, lecsConfEntry=lecsConfEntry, lecsStatsTable=lecsStatsTable, lecsOperStatus=lecsOperStatus, lecsTlvEntry=lecsTlvEntry, lecsErrLogTable=lecsErrLogTable, lecsErrCtlClearLog=lecsErrCtlClearLog, elanLecMacAddrEntry=elanLecMacAddrEntry, elanMIBConformance=elanMIBConformance, lecsConfNextId=lecsConfNextId, lecsAtmIfIndex=lecsAtmIfIndex, lecsErrCtlMaxEntries=lecsErrCtlMaxEntries, elanConfEntry=elanConfEntry, elanLesRowStatus=elanLesRowStatus, elanLecAtmAddrTable=elanLecAtmAddrTable, elanConfIndex=elanConfIndex, elanConfTable=elanConfTable, elanPolicyPriority=elanPolicyPriority, lecsCGroup=lecsCGroup, TlvSelectorIndexType=TlvSelectorIndexType, elanLecsStatGroup=elanLecsStatGroup, elanLesIndex=elanLesIndex, lecsAtmAddrActual=lecsAtmAddrActual, lecsStatInsufRes=lecsStatInsufRes, PolicySelectorIndexType=PolicySelectorIndexType, byRouteDescriptor=byRouteDescriptor, lecsTlvRowStatus=lecsTlvRowStatus, elanPolicyEntry=elanPolicyEntry, elanLecAssignByRdGroup=elanLecAssignByRdGroup, elanMIBGroups=elanMIBGroups, lecsStatInvalidParam=lecsStatInvalidParam, elanConfGroup=elanConfGroup, elanLecRdRowStatus=elanLecRdRowStatus, lecsStatAccDenied=lecsStatAccDenied, LecsErrLogIndexType=LecsErrLogIndexType, lecsStatInvalidDest=lecsStatInvalidDest, elanLecsGroup=elanLecsGroup, lecsErrLogEntry=lecsErrLogEntry, lecsAdminStatus=lecsAdminStatus, lecsRowStatus=lecsRowStatus, elanLecRdEntry=elanLecRdEntry, elanLesTable=elanLesTable, lecsConfIndex=lecsConfIndex, elanConfName=elanConfName, ElanLocalIndex=ElanLocalIndex, lecsErrLogAtmAddr=lecsErrLogAtmAddr, elanLecsFaultGroup=elanLecsFaultGroup, elanPolicySelectorIndex=elanPolicySelectorIndex, elanLecRdSegId=elanLecRdSegId, elanConfLanType=elanConfLanType, lecsErrCtlEntry=lecsErrCtlEntry, lecsPolicySelIndex=lecsPolicySelIndex, lecsElanTable=lecsElanTable, lecsAtmAddrSpec=lecsAtmAddrSpec, lecsTlvTable=lecsTlvTable, lecsStatNoConf=lecsStatNoConf, lecsLastInitialized=lecsLastInitialized, elanConfNextId=elanConfNextId, elanConfMaxFrameSize=elanConfMaxFrameSize, lecsStatInBadFrames=lecsStatInBadFrames, elanLecAssignByMacGroup=elanLecAssignByMacGroup, elanConfRowStatus=elanConfRowStatus, elanMIB=elanMIB, elanPolicyIndex=elanPolicyIndex, elanConfTlvIndex=elanConfTlvIndex, elanLecAtmRowStatus=elanLecAtmRowStatus, lecsErrLogTime=lecsErrLogTime, byPktSize=byPktSize, elanLecAssignByAtmGroup=elanLecAssignByAtmGroup, lecsAtmAddrMask=lecsAtmAddrMask, lecsCStatGroup=lecsCStatGroup, lecsConfTable=lecsConfTable, elanLecMacAddress=elanLecMacAddress, elanLecAtmMask=elanLecAtmMask, elanPolicyType=elanPolicyType, lecsErrCtlLastEntry=lecsErrCtlLastEntry, elanLecsRowStatus=elanLecsRowStatus, lecsStatsEntry=lecsStatsEntry, lecsErrCtlOperStatus=lecsErrCtlOperStatus, lecsTlvVal=lecsTlvVal, lecsStatInvalidReq=lecsStatInvalidReq, lecsTlvIndex=lecsTlvIndex, elanPolicyTable=elanPolicyTable, elanLecAtmAddrEntry=elanLecAtmAddrEntry, elanLesAtmAddress=elanLesAtmAddress, byAtmAddr=byAtmAddr, elanAdminPolicyVal=elanAdminPolicyVal, elanMIBCompliance=elanMIBCompliance, elanPolicyRowStatus=elanPolicyRowStatus, elanAdminGroup=elanAdminGroup, lecsErrLogIndex=lecsErrLogIndex, lecsErrCtlAdminStatus=lecsErrCtlAdminStatus)
