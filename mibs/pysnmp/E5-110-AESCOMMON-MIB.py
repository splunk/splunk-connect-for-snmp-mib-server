#
# PySNMP MIB module E5-110-AESCOMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/E5-110-AESCOMMON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:43:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
aesSeriesCommon, = mibBuilder.importSymbols("E5-110-MIB", "aesSeriesCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Counter64, Integer32, Gauge32, Bits, TimeTicks, Unsigned32, ObjectIdentity, iso, MibIdentifier, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Counter64", "Integer32", "Gauge32", "Bits", "TimeTicks", "Unsigned32", "ObjectIdentity", "iso", "MibIdentifier", "IpAddress", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aesMaxNumOfProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesMaxNumOfProfiles.setStatus('current')
aesLineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2), )
if mibBuilder.loadTexts: aesLineConfTable.setStatus('current')
aesLineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aesLineConfEntry.setStatus('current')
aesLineConfAdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("auto", 4), ("etsi", 5), ("adsl2", 6), ("adsl2Plus", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfAdslMode.setStatus('current')
aesLineConfEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("llc", 1), ("vc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfEncap.setStatus('current')
aesLineConfVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfVpi.setStatus('current')
aesLineConfVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfVci.setStatus('current')
aesLineConfAnnexL = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableNarrowMode", 1), ("enableWideMode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfAnnexL.setStatus('current')
aesLineConfPmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableL2Mode", 1), ("enableL2Mode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfPmMode.setStatus('current')
aesLineConfRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptAtStartup", 2), ("adaptAtRuntime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfRateMode.setStatus('current')
aesLineConfAnnexM = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineConfAnnexM.setStatus('current')
aesLineDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3))
aesAtucLineDiagLATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 1), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagLATN.setStatus('current')
aesAtucLineDiagSATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 2), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagSATN.setStatus('current')
aesAtucLineDiagSNRM = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 3), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagSNRM.setStatus('current')
aesAtucLineDiagACTATP = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 4), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagACTATP.setStatus('current')
aesAtucLineDiagATTNDR = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucLineDiagATTNDR.setStatus('current')
aesAturLineDiagLATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 6), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagLATN.setStatus('current')
aesAturLineDiagSATN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 7), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagSATN.setStatus('current')
aesAturLineDiagSNRM = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 8), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagSNRM.setStatus('current')
aesAturLineDiagACTATP = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 9), Integer32()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagACTATP.setStatus('current')
aesAturLineDiagATTNDR = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturLineDiagATTNDR.setStatus('current')
aesLineDiagTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineDiagTarget.setStatus('current')
aesLineDiagOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesLineDiagOps.setStatus('current')
aesLineDiagFailReason = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagFailReason.setStatus('current')
aesLineDiagPs = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4))
aesAtucNumOfSubcarriersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAtucNumOfSubcarriersPerPort.setStatus('current')
aesAturNumOfSubcarriersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesAturNumOfSubcarriersPerPort.setStatus('current')
aesLineDiagPsCCFLirl1 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLirl1.setStatus('current')
aesLineDiagPsCCFLirl2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLirl2.setStatus('current')
aesLineDiagPsCCFLiim1 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLiim1.setStatus('current')
aesLineDiagPsCCFLiim2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLiim2.setStatus('current')
aesLineDiagPsCCFLog1 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLog1.setStatus('current')
aesLineDiagPsCCFLog2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsCCFLog2.setStatus('current')
aesLineDiagPsQLN = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 9), OctetString()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsQLN.setStatus('current')
aesLineDiagPsSNR = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 4, 10), OctetString()).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineDiagPsSNR.setStatus('current')
aesMaxNumOfAlarmProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesMaxNumOfAlarmProfiles.setStatus('current')
aesBitLoadingTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6), )
if mibBuilder.loadTexts: aesBitLoadingTable.setStatus('current')
aesBitLoadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aesBitLoadingEntry.setStatus('current')
aesBitLoadingBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesBitLoadingBits.setStatus('current')
aesBitLoadingAtucNumOfCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesBitLoadingAtucNumOfCarriers.setStatus('current')
aesBitLoadingAturNumOfCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesBitLoadingAturNumOfCarriers.setStatus('current')
aesLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 7), )
if mibBuilder.loadTexts: aesLineStatusTable.setStatus('current')
aesLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aesLineStatusEntry.setStatus('current')
aesLineStatusAdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("etsi", 4), ("adsl2", 5), ("adsl2Plus", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aesLineStatusAdslMode.setStatus('current')
selt = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8))
seltTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltTarget.setStatus('current')
seltOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltOps.setStatus('current')
seltStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltStatus.setStatus('current')
seltCableType = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("awg24", 1), ("awg26", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltCableType.setStatus('current')
seltLoopEstimateLengthFt = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 5), Integer32()).setUnits('feet').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthFt.setStatus('current')
seltLoopEstimateLengthMeter = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 1, 97, 8, 6), Integer32()).setUnits('meter').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthMeter.setStatus('current')
mibBuilder.exportSymbols("E5-110-AESCOMMON-MIB", aesLineConfAdslMode=aesLineConfAdslMode, aesLineDiagPsCCFLirl2=aesLineDiagPsCCFLirl2, seltCableType=seltCableType, aesAturLineDiagACTATP=aesAturLineDiagACTATP, aesAturLineDiagATTNDR=aesAturLineDiagATTNDR, seltTarget=seltTarget, seltOps=seltOps, aesMaxNumOfAlarmProfiles=aesMaxNumOfAlarmProfiles, aesBitLoadingBits=aesBitLoadingBits, aesAtucLineDiagACTATP=aesAtucLineDiagACTATP, aesLineDiagPsCCFLiim1=aesLineDiagPsCCFLiim1, aesLineConfTable=aesLineConfTable, seltStatus=seltStatus, aesLineConfPmMode=aesLineConfPmMode, aesLineConfRateMode=aesLineConfRateMode, aesLineConfVpi=aesLineConfVpi, aesLineDiagPsCCFLirl1=aesLineDiagPsCCFLirl1, aesAtucLineDiagSNRM=aesAtucLineDiagSNRM, aesLineConfVci=aesLineConfVci, aesLineStatusAdslMode=aesLineStatusAdslMode, seltLoopEstimateLengthMeter=seltLoopEstimateLengthMeter, aesAturLineDiagLATN=aesAturLineDiagLATN, aesLineStatusEntry=aesLineStatusEntry, aesLineDiagPsCCFLog1=aesLineDiagPsCCFLog1, seltLoopEstimateLengthFt=seltLoopEstimateLengthFt, aesAtucLineDiagLATN=aesAtucLineDiagLATN, aesLineDiagFailReason=aesLineDiagFailReason, aesMaxNumOfProfiles=aesMaxNumOfProfiles, aesBitLoadingTable=aesBitLoadingTable, aesLineDiagPs=aesLineDiagPs, aesAturNumOfSubcarriersPerPort=aesAturNumOfSubcarriersPerPort, aesBitLoadingAturNumOfCarriers=aesBitLoadingAturNumOfCarriers, aesBitLoadingEntry=aesBitLoadingEntry, aesLineConfEntry=aesLineConfEntry, aesLineDiagPsCCFLog2=aesLineDiagPsCCFLog2, aesLineDiagPsSNR=aesLineDiagPsSNR, aesLineConfEncap=aesLineConfEncap, aesLineDiagPsCCFLiim2=aesLineDiagPsCCFLiim2, aesLineStatusTable=aesLineStatusTable, aesAtucLineDiagATTNDR=aesAtucLineDiagATTNDR, aesAturLineDiagSNRM=aesAturLineDiagSNRM, aesLineDiagPsQLN=aesLineDiagPsQLN, aesBitLoadingAtucNumOfCarriers=aesBitLoadingAtucNumOfCarriers, aesLineConfAnnexM=aesLineConfAnnexM, aesLineDiagTarget=aesLineDiagTarget, aesLineConfAnnexL=aesLineConfAnnexL, selt=selt, aesAtucNumOfSubcarriersPerPort=aesAtucNumOfSubcarriersPerPort, aesLineDiagnostic=aesLineDiagnostic, aesAturLineDiagSATN=aesAturLineDiagSATN, aesLineDiagOps=aesLineDiagOps, aesAtucLineDiagSATN=aesAtucLineDiagSATN)
