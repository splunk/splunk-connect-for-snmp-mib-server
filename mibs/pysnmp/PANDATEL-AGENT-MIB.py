#
# PySNMP MIB module PANDATEL-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-AGENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, ModuleIdentity, Unsigned32, Gauge32, Integer32, enterprises, Counter32, ObjectIdentity, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "ModuleIdentity", "Unsigned32", "Gauge32", "Integer32", "enterprises", "Counter32", "ObjectIdentity", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "NotificationType")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
pandatel = MibIdentifier((1, 3, 6, 1, 4, 1, 760))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 10000))
agentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1))
agentNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetAddress.setStatus('mandatory')
agentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSubnetMask.setStatus('mandatory')
agentPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPhysAddress.setStatus('mandatory')
agentMgmtAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inband", 2), ("outband", 3), ("proxy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtAccessMode.setStatus('mandatory')
agentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHardwareRevision.setStatus('mandatory')
agentSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSoftwareRevision.setStatus('mandatory')
agentTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7), )
if mibBuilder.loadTexts: agentTrapReceiverTable.setStatus('mandatory')
agentSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8), )
if mibBuilder.loadTexts: agentSecurityTable.setStatus('mandatory')
agTrapReceiverTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1), ).setIndexNames((0, "PANDATEL-AGENT-MIB", "agTrapReceiverNetAddress"))
if mibBuilder.loadTexts: agTrapReceiverTableEntry.setStatus('mandatory')
agTrapReceiverNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTrapReceiverNetAddress.setStatus('mandatory')
agTrapReceiverTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTrapReceiverTrapCommunity.setStatus('mandatory')
agTrapReceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTrapReceiverType.setStatus('mandatory')
agSecTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8, 1), ).setIndexNames((0, "PANDATEL-AGENT-MIB", "agSecSecurityLevel"))
if mibBuilder.loadTexts: agSecTableEntry.setStatus('mandatory')
agSecSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("read-only-sysgroup", 1), ("read-all-mgmt-objs", 2), ("standard-mgmt-access", 3), ("administrator-access", 4), ("high-security-access", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecSecurityLevel.setStatus('mandatory')
agSecCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSecCommunity.setStatus('mandatory')
agentMgmtSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 9))
agentAuthRestrictMode = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRestricted", 2), ("restricted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthRestrictMode.setStatus('mandatory')
mibBuilder.exportSymbols("PANDATEL-AGENT-MIB", pandatel=pandatel, agent=agent, agTrapReceiverNetAddress=agTrapReceiverNetAddress, mibs=mibs, agentPhysAddress=agentPhysAddress, agentGroup=agentGroup, agentHardwareRevision=agentHardwareRevision, agentSubnetMask=agentSubnetMask, agentTrapReceiverTable=agentTrapReceiverTable, agentMgmtSecurity=agentMgmtSecurity, agentNetAddress=agentNetAddress, agSecTableEntry=agSecTableEntry, agTrapReceiverTableEntry=agTrapReceiverTableEntry, agSecSecurityLevel=agSecSecurityLevel, agentMgmtAccessMode=agentMgmtAccessMode, agSecCommunity=agSecCommunity, agentAuthRestrictMode=agentAuthRestrictMode, agentSoftwareRevision=agentSoftwareRevision, agTrapReceiverTrapCommunity=agTrapReceiverTrapCommunity, agTrapReceiverType=agTrapReceiverType, agentSecurityTable=agentSecurityTable)
