#
# PySNMP MIB module HM2-IOMODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-IOMODULE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, Bits, NotificationType, ModuleIdentity, IpAddress, Gauge32, TimeTicks, Counter32, Integer32, Counter64, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "Bits", "NotificationType", "ModuleIdentity", "IpAddress", "Gauge32", "TimeTicks", "Counter32", "Integer32", "Counter64", "MibIdentifier", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hm2IOModuleMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 100))
hm2IOModuleMib.setRevisions(('2012-02-10 00:00',))
if mibBuilder.loadTexts: hm2IOModuleMib.setLastUpdated('201202100000Z')
if mibBuilder.loadTexts: hm2IOModuleMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2IOModuleMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 0))
hm2IOModuleMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1))
hm2IOModConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1))
hm2IOModConfigCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1))
hm2IOModConfigDigInputAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputAdminState.setStatus('current')
hm2IOModConfigDigOutputAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputAdminState.setStatus('current')
hm2IOModConfigDigInputRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputRefreshInterval.setStatus('current')
hm2IOModConfigDigOutputRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputRefreshInterval.setStatus('current')
hm2IOModConfigDigOutputRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputRetryCount.setStatus('current')
hm2IOModConfigDigInputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2), )
if mibBuilder.loadTexts: hm2IOModConfigDigInputTable.setStatus('current')
hm2IOModConfigDigInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigInputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigInputID"))
if mibBuilder.loadTexts: hm2IOModConfigDigInputEntry.setStatus('current')
hm2IOModConfigDigInputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModConfigDigInputModID.setStatus('current')
hm2IOModConfigDigInputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModConfigDigInputID.setStatus('current')
hm2IOModConfigDigInputLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputLogEvent.setStatus('current')
hm2IOModConfigDigInputSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputSnmpTrap.setStatus('current')
hm2IOModConfigDigOutputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3), )
if mibBuilder.loadTexts: hm2IOModConfigDigOutputTable.setStatus('current')
hm2IOModConfigDigOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigOutputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigOutputID"))
if mibBuilder.loadTexts: hm2IOModConfigDigOutputEntry.setStatus('current')
hm2IOModConfigDigOutputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModConfigDigOutputModID.setStatus('current')
hm2IOModConfigDigOutputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModConfigDigOutputID.setStatus('current')
hm2IOModConfigDigOutputLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputLogEvent.setStatus('current')
hm2IOModConfigDigOutputSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSnmpTrap.setStatus('current')
hm2IOModConfigDigOutputSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceAddressType.setStatus('current')
hm2IOModConfigDigOutputSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceAddress.setStatus('current')
hm2IOModConfigDigOutputSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 7), InetPortNumber().clone(161)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourcePort.setStatus('current')
hm2IOModConfigDigOutputSourceModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceModID.setStatus('current')
hm2IOModConfigDigOutputSourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceID.setStatus('current')
hm2IOModValueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2))
hm2IOModValueDigInputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1), )
if mibBuilder.loadTexts: hm2IOModValueDigInputTable.setStatus('current')
hm2IOModValueDigInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModValueDigInputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModValueDigInputID"))
if mibBuilder.loadTexts: hm2IOModValueDigInputEntry.setStatus('current')
hm2IOModValueDigInputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModValueDigInputModID.setStatus('current')
hm2IOModValueDigInputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModValueDigInputID.setStatus('current')
hm2IOModValueDigInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-available", 0), ("high", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IOModValueDigInputValue.setStatus('current')
hm2IOModValueDigOutputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2), )
if mibBuilder.loadTexts: hm2IOModValueDigOutputTable.setStatus('current')
hm2IOModValueDigOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModValueDigOutputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModValueDigOutputID"))
if mibBuilder.loadTexts: hm2IOModValueDigOutputEntry.setStatus('current')
hm2IOModValueDigOutputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModValueDigOutputModID.setStatus('current')
hm2IOModValueDigOutputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModValueDigOutputID.setStatus('current')
hm2IOModValueDigOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("not-available", 0), ("high", 1), ("low", 2), ("invalid", 3), ("not-configured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IOModValueDigOutputValue.setStatus('current')
hm2IOModDigInputChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 100, 0, 1)).setObjects(("HM2-IOMODULE-MIB", "hm2IOModValueDigInputValue"))
if mibBuilder.loadTexts: hm2IOModDigInputChangeTrap.setStatus('current')
hm2IOModDigOutputChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 100, 0, 2)).setObjects(("HM2-IOMODULE-MIB", "hm2IOModValueDigOutputValue"))
if mibBuilder.loadTexts: hm2IOModDigOutputChangeTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-IOMODULE-MIB", hm2IOModConfigDigOutputSnmpTrap=hm2IOModConfigDigOutputSnmpTrap, hm2IOModConfigDigInputAdminState=hm2IOModConfigDigInputAdminState, hm2IOModValueDigOutputTable=hm2IOModValueDigOutputTable, hm2IOModConfigDigOutputAdminState=hm2IOModConfigDigOutputAdminState, hm2IOModValueDigInputID=hm2IOModValueDigInputID, hm2IOModConfigDigOutputTable=hm2IOModConfigDigOutputTable, hm2IOModValueDigOutputEntry=hm2IOModValueDigOutputEntry, hm2IOModConfigCommon=hm2IOModConfigCommon, hm2IOModConfigDigInputID=hm2IOModConfigDigInputID, hm2IOModValueDigInputValue=hm2IOModValueDigInputValue, hm2IOModConfigDigOutputEntry=hm2IOModConfigDigOutputEntry, hm2IOModConfigDigInputRefreshInterval=hm2IOModConfigDigInputRefreshInterval, hm2IOModValueDigInputModID=hm2IOModValueDigInputModID, hm2IOModValueGroup=hm2IOModValueGroup, hm2IOModConfigDigOutputSourceAddress=hm2IOModConfigDigOutputSourceAddress, hm2IOModValueDigOutputModID=hm2IOModValueDigOutputModID, PYSNMP_MODULE_ID=hm2IOModuleMib, hm2IOModValueDigInputEntry=hm2IOModValueDigInputEntry, hm2IOModConfigDigOutputLogEvent=hm2IOModConfigDigOutputLogEvent, hm2IOModConfigDigInputSnmpTrap=hm2IOModConfigDigInputSnmpTrap, hm2IOModConfigDigOutputSourcePort=hm2IOModConfigDigOutputSourcePort, hm2IOModConfigDigOutputModID=hm2IOModConfigDigOutputModID, hm2IOModConfigDigInputLogEvent=hm2IOModConfigDigInputLogEvent, hm2IOModConfigDigOutputID=hm2IOModConfigDigOutputID, hm2IOModConfigDigOutputSourceAddressType=hm2IOModConfigDigOutputSourceAddressType, hm2IOModValueDigOutputID=hm2IOModValueDigOutputID, hm2IOModDigOutputChangeTrap=hm2IOModDigOutputChangeTrap, hm2IOModConfigDigInputModID=hm2IOModConfigDigInputModID, hm2IOModConfigDigOutputSourceModID=hm2IOModConfigDigOutputSourceModID, hm2IOModDigInputChangeTrap=hm2IOModDigInputChangeTrap, hm2IOModValueDigOutputValue=hm2IOModValueDigOutputValue, hm2IOModConfigDigOutputRetryCount=hm2IOModConfigDigOutputRetryCount, hm2IOModConfigDigOutputSourceID=hm2IOModConfigDigOutputSourceID, hm2IOModValueDigInputTable=hm2IOModValueDigInputTable, hm2IOModuleMib=hm2IOModuleMib, hm2IOModConfigGroup=hm2IOModConfigGroup, hm2IOModConfigDigOutputRefreshInterval=hm2IOModConfigDigOutputRefreshInterval, hm2IOModConfigDigInputTable=hm2IOModConfigDigInputTable, hm2IOModuleMibObjects=hm2IOModuleMibObjects, hm2IOModConfigDigInputEntry=hm2IOModConfigDigInputEntry, hm2IOModuleMibNotifications=hm2IOModuleMibNotifications)
