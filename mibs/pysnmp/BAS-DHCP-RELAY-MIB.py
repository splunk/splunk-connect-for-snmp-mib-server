#
# PySNMP MIB module BAS-DHCP-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-DHCP-RELAY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
basDhcpRelay, BasLogicalPortId, BasChassisId, BasSlotId, BasInterfaceId, BasSubnetClass = mibBuilder.importSymbols("BAS-MIB", "basDhcpRelay", "BasLogicalPortId", "BasChassisId", "BasSlotId", "BasInterfaceId", "BasSubnetClass")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Bits, Counter64, ModuleIdentity, ObjectIdentity, Gauge32, IpAddress, NotificationType, Counter32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Counter64", "ModuleIdentity", "ObjectIdentity", "Gauge32", "IpAddress", "NotificationType", "Counter32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
basDhcpRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1))
if mibBuilder.loadTexts: basDhcpRelayMIB.setLastUpdated('9902031415Z')
if mibBuilder.loadTexts: basDhcpRelayMIB.setOrganization('Broadband Access Systems, Inc.')
basDhcpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1), )
if mibBuilder.loadTexts: basDhcpRelayTable.setStatus('current')
basDhcpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1), ).setIndexNames((0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayChassis"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelaySlot"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayIf"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayLPort"))
if mibBuilder.loadTexts: basDhcpRelayEntry.setStatus('current')
basDhcpRelayChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basDhcpRelayChassis.setStatus('current')
basDhcpRelaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basDhcpRelaySlot.setStatus('current')
basDhcpRelayIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basDhcpRelayIf.setStatus('current')
basDhcpRelayLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basDhcpRelayLPort.setStatus('current')
basDhcpRelayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayEnable.setStatus('current')
basDhcpRelayDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayDiscover.setStatus('current')
basDhcpRelayOffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayOffer.setStatus('current')
basDhcpRelayRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayRequest.setStatus('current')
basDhcpRelayDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayDecline.setStatus('current')
basDhcpRelayNak = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayNak.setStatus('current')
basDhcpRelayInform = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayInform.setStatus('current')
basDhcpRelayAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayAck.setStatus('current')
basDhcpRelayRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayRelease.setStatus('current')
basDhcpRelayHelper = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayHelper.setStatus('current')
basDhcpRelayAlwaysBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayAlwaysBroadcast.setStatus('current')
basDhcpRelayDuplicateResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayDuplicateResponse.setStatus('current')
basDhcpRelayBasEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayBasEnable.setStatus('current')
basDhcpRelayBogusAgentDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayBogusAgentDrops.setStatus('current')
basDhcpRelayBogusGiaddrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayBogusGiaddrDrops.setStatus('current')
basDhcpRelayServerPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayServerPacketErrors.setStatus('current')
basDhcpRelayClientPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayClientPacketErrors.setStatus('current')
basDhcpRelayAddAgentOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayAddAgentOptions.setStatus('current')
basDhcpRelayDropAgentMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayDropAgentMismatch.setStatus('current')
basDhcpRelayCorruptAgentOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayCorruptAgentOptions.setStatus('current')
basDhcpRelayMissingAgentOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayMissingAgentOption.setStatus('current')
basDhcpRelayBadCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayBadCircuitId.setStatus('current')
basDhcpRelayMissingCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDhcpRelayMissingCircuitId.setStatus('current')
basDhcpRelayMaxAgentOptionPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayMaxAgentOptionPacketLength.setStatus('current')
basDhcpRelayAgentRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forwardAndAppend", 1), ("forwardAndReplace", 2), ("forwardUntouched", 3), ("discard", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDhcpRelayAgentRelayMode.setStatus('current')
basDhcpRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2), )
if mibBuilder.loadTexts: basDhcpRelayServerTable.setStatus('current')
basDhcpRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1), ).setIndexNames((0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerChassis"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerSlot"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerIf"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerLPort"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerAddress"), (0, "BAS-DHCP-RELAY-MIB", "basDhcpRelayServerType"))
if mibBuilder.loadTexts: basDhcpRelayServerEntry.setStatus('current')
basDhcpRelayServerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basDhcpRelayServerChassis.setStatus('current')
basDhcpRelayServerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basDhcpRelayServerSlot.setStatus('current')
basDhcpRelayServerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basDhcpRelayServerIf.setStatus('current')
basDhcpRelayServerLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basDhcpRelayServerLPort.setStatus('current')
basDhcpRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 5), IpAddress().clone(2))
if mibBuilder.loadTexts: basDhcpRelayServerAddress.setStatus('current')
basDhcpRelayServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 6), BasSubnetClass().clone(1))
if mibBuilder.loadTexts: basDhcpRelayServerType.setStatus('current')
basDhcpRelayServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 15, 1, 2, 1, 7), RowStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDhcpRelayServerStatus.setStatus('current')
mibBuilder.exportSymbols("BAS-DHCP-RELAY-MIB", basDhcpRelayServerAddress=basDhcpRelayServerAddress, basDhcpRelayNak=basDhcpRelayNak, basDhcpRelayServerType=basDhcpRelayServerType, basDhcpRelayDropAgentMismatch=basDhcpRelayDropAgentMismatch, basDhcpRelayDuplicateResponse=basDhcpRelayDuplicateResponse, basDhcpRelayInform=basDhcpRelayInform, basDhcpRelayAck=basDhcpRelayAck, basDhcpRelayCorruptAgentOptions=basDhcpRelayCorruptAgentOptions, basDhcpRelayOffer=basDhcpRelayOffer, basDhcpRelayClientPacketErrors=basDhcpRelayClientPacketErrors, basDhcpRelayServerStatus=basDhcpRelayServerStatus, basDhcpRelayIf=basDhcpRelayIf, basDhcpRelayBasEnable=basDhcpRelayBasEnable, basDhcpRelayDecline=basDhcpRelayDecline, basDhcpRelayAgentRelayMode=basDhcpRelayAgentRelayMode, basDhcpRelayBadCircuitId=basDhcpRelayBadCircuitId, basDhcpRelayHelper=basDhcpRelayHelper, basDhcpRelayEnable=basDhcpRelayEnable, basDhcpRelayServerTable=basDhcpRelayServerTable, basDhcpRelayServerIf=basDhcpRelayServerIf, basDhcpRelaySlot=basDhcpRelaySlot, basDhcpRelayAlwaysBroadcast=basDhcpRelayAlwaysBroadcast, basDhcpRelayBogusAgentDrops=basDhcpRelayBogusAgentDrops, basDhcpRelayTable=basDhcpRelayTable, basDhcpRelayMIB=basDhcpRelayMIB, basDhcpRelayServerPacketErrors=basDhcpRelayServerPacketErrors, PYSNMP_MODULE_ID=basDhcpRelayMIB, basDhcpRelayDiscover=basDhcpRelayDiscover, basDhcpRelayRelease=basDhcpRelayRelease, basDhcpRelayChassis=basDhcpRelayChassis, basDhcpRelayMissingCircuitId=basDhcpRelayMissingCircuitId, basDhcpRelayLPort=basDhcpRelayLPort, basDhcpRelayServerEntry=basDhcpRelayServerEntry, basDhcpRelayBogusGiaddrDrops=basDhcpRelayBogusGiaddrDrops, basDhcpRelayEntry=basDhcpRelayEntry, basDhcpRelayServerChassis=basDhcpRelayServerChassis, basDhcpRelayAddAgentOptions=basDhcpRelayAddAgentOptions, basDhcpRelayServerSlot=basDhcpRelayServerSlot, basDhcpRelayMissingAgentOption=basDhcpRelayMissingAgentOption, basDhcpRelayMaxAgentOptionPacketLength=basDhcpRelayMaxAgentOptionPacketLength, basDhcpRelayServerLPort=basDhcpRelayServerLPort, basDhcpRelayRequest=basDhcpRelayRequest)
