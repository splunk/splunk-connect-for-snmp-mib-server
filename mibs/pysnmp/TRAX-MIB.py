#
# PySNMP MIB module TRAX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRAX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, experimental, Gauge32, Counter32, ObjectIdentity, TimeTicks, Unsigned32, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, NotificationType, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "experimental", "Gauge32", "Counter32", "ObjectIdentity", "TimeTicks", "Unsigned32", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "NotificationType", "MibIdentifier", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
trax = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31))
traxId = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 1))
traxIdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1), )
if mibBuilder.loadTexts: traxIdTable.setStatus('mandatory')
traxIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxIdIndex"))
if mibBuilder.loadTexts: traxIdEntry.setStatus('mandatory')
traxIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdIndex.setStatus('mandatory')
traxIdHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdHardwareSerNum.setStatus('mandatory')
traxIdHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdHardwareRev.setStatus('mandatory')
traxIdSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdSoftwareRev.setStatus('mandatory')
traxIdCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("i80386", 1), ("i80486", 2), ("powerPC603", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdCpuType.setStatus('mandatory')
traxIdRamInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdRamInstalled.setStatus('mandatory')
traxIdFlashInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdFlashInstalled.setStatus('mandatory')
traxIdSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdSelfTestResult.setStatus('mandatory')
traxIdMgmtConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdMgmtConnect.setStatus('mandatory')
traxCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 2))
traxCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1), )
if mibBuilder.loadTexts: traxCmdTable.setStatus('mandatory')
traxCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxCmdIndex"))
if mibBuilder.loadTexts: traxCmdEntry.setStatus('mandatory')
traxCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdIndex.setStatus('mandatory')
traxCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdMgtStationId.setStatus('mandatory')
traxCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdReqId.setStatus('mandatory')
traxCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noCommand", 1), ("saveToNVRAM", 2), ("restoreFromNVRAM", 3), ("restoreFromDefault", 4), ("nonDisruptSelfTest", 5), ("disruptSelfTest", 6), ("softwareReset", 7), ("downloadCfgFile", 8), ("uploadCfgFile", 9), ("resetStsCounters", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdFunction.setStatus('mandatory')
traxCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdForce.setStatus('mandatory')
traxCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdParam.setStatus('mandatory')
traxCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdResult.setStatus('mandatory')
traxCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 46, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 93))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("fileTooBig", 46), ("userInterfaceActive", 58), ("badFlashRomID", 61), ("badFlashVoltage", 62), ("flashEraseError", 63), ("eraseSequenceError", 64), ("eraseExecutionError", 65), ("receiveBufferOverflow", 66), ("badProgramVoltage", 68), ("programmingDataError", 69), ("programCodeError", 70), ("invalidCodeError", 71), ("romCrcBad", 72), ("pendingSoftwareDownload", 73), ("ramCrcBad", 74), ("invalidRomId", 75), ("cardIdMismatch", 84), ("cardIdUnknown", 85), ("tftpTimeout", 86), ("flashEraseTimeout", 87), ("invalidFileHeader", 88), ("bulkTransferInProcess", 93)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdCode.setStatus('mandatory')
traxCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 3))
traxCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1), )
if mibBuilder.loadTexts: traxCfgTable.setStatus('mandatory')
traxCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxCfgIndex"))
if mibBuilder.loadTexts: traxCfgEntry.setStatus('mandatory')
traxCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCfgIndex.setStatus('mandatory')
traxCfgCardIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgCardIPAddress.setStatus('mandatory')
traxCfgIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgIPMask.setStatus('mandatory')
traxCfgGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgGatewayIpAddr.setStatus('mandatory')
traxCfgHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgHostIPAddr.setStatus('mandatory')
traxCfgX25Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgX25Addr.setStatus('mandatory')
traxCfgNicTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgNicTrapDestination.setStatus('mandatory')
traxCfgReadMemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgReadMemAddr.setStatus('mandatory')
traxCfgReadMemData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgReadMemData.setStatus('mandatory')
traxCfgReadMemLength = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgReadMemLength.setStatus('mandatory')
traxCfgWriteMemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgWriteMemAddr.setStatus('mandatory')
traxCfgWriteMemLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgWriteMemLen.setStatus('mandatory')
traxCfgWriteMemData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgWriteMemData.setStatus('mandatory')
traxFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 14), Integer32())
if mibBuilder.loadTexts: traxFailureReason.setStatus('mandatory')
traxDNIFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: traxDNIFailureReason.setStatus('mandatory')
traxCfgX25AddrPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgX25AddrPort1.setStatus('mandatory')
traxTrapEna = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 4))
traxTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1), )
if mibBuilder.loadTexts: traxTrapEnaTable.setStatus('mandatory')
traxTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxTrapEnaIndex"))
if mibBuilder.loadTexts: traxTrapEnaEntry.setStatus('mandatory')
traxTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxTrapEnaIndex.setStatus('mandatory')
traxTrapEnaNicMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaNicMissing.setStatus('mandatory')
traxTrapEnaX25FrameLevelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25FrameLevelUp.setStatus('mandatory')
traxTrapEnaX25FrameLevelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25FrameLevelDown.setStatus('mandatory')
traxTrapEnaX25PacketLevelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25PacketLevelUp.setStatus('mandatory')
traxTrapEnaX25PacketLevelDn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25PacketLevelDn.setStatus('mandatory')
traxTrapEnaX25LostCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25LostCalls.setStatus('mandatory')
traxTrapEnaX25LinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25LinkUp.setStatus('mandatory')
traxTrapEnaX25LinkDn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25LinkDn.setStatus('mandatory')
traxTrapEnaDnisLookUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaDnisLookUp.setStatus('mandatory')
traxTrapEnaSvcSetUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaSvcSetUp.setStatus('mandatory')
traxTrapEnaSvcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaSvcAlarm.setStatus('mandatory')
traxTrapDupTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapDupTrans.setStatus('mandatory')
traxVisaSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 5))
traxVisaStsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1), )
if mibBuilder.loadTexts: traxVisaStsTable.setStatus('mandatory')
traxVisaStsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxVisaStsIndex"))
if mibBuilder.loadTexts: traxVisaStsEntry.setStatus('mandatory')
traxVisaStsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaStsIndex.setStatus('mandatory')
traxVisaCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaCallCount.setStatus('mandatory')
traxVisaTransactionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaTransactionCount.setStatus('mandatory')
traxVisaRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaRetransCount.setStatus('mandatory')
traxVisaDuplicateTransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDuplicateTransCount.setStatus('mandatory')
traxVisaDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNormal.setStatus('mandatory')
traxVisaDiscPosRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosRequest.setStatus('mandatory')
traxVisaDiscHostRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostRequest.setStatus('mandatory')
traxVisaDiscMaxEnqs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxEnqs.setStatus('mandatory')
traxVisaDiscMaxRetranToPos = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxRetranToPos.setStatus('mandatory')
traxVisaDiscMaxRetranToHost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxRetranToHost.setStatus('mandatory')
traxVisaDiscMaxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxBadFrames.setStatus('mandatory')
traxVisaDiscPosWriteTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosWriteTimeouts.setStatus('mandatory')
traxVisaDiscHostWriteTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostWriteTimeouts.setStatus('mandatory')
traxVisaDiscSynDelayTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscSynDelayTooLong.setStatus('mandatory')
traxVisaDiscBadCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscBadCurrentState.setStatus('mandatory')
traxVisaDiscUnexpectedEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscUnexpectedEvent.setStatus('mandatory')
traxVisaDiscNdcLogonFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNdcLogonFailures.setStatus('mandatory')
traxVisaDiscPosRcvTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosRcvTimeouts.setStatus('mandatory')
traxVisaDiscPosFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosFrameTooBig.setStatus('mandatory')
traxVisaDiscHostFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostFrameTooBig.setStatus('mandatory')
traxVisaDiscHostRespTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostRespTimeouts.setStatus('mandatory')
traxVisaDiscNumBadMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNumBadMsg.setStatus('mandatory')
traxVisaDiscNumSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNumSystem.setStatus('mandatory')
traxSyncSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 6))
traxSyncStsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1), )
if mibBuilder.loadTexts: traxSyncStsTable.setStatus('mandatory')
traxSyncStsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxSyncStsIndex"))
if mibBuilder.loadTexts: traxSyncStsEntry.setStatus('mandatory')
traxSyncStsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncStsIndex.setStatus('mandatory')
traxSyncCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncCallCount.setStatus('mandatory')
traxSyncTransactionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncTransactionCount.setStatus('mandatory')
traxSyncDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscNormal.setStatus('mandatory')
traxSyncDiscMaxRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscMaxRetrans.setStatus('mandatory')
traxSyncDiscMaxSnrms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscMaxSnrms.setStatus('mandatory')
traxSyncDiscHostFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscHostFrameTooBig.setStatus('mandatory')
traxSyncDiscPosFrameTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscPosFrameTooSmall.setStatus('mandatory')
traxSyncDiscPosFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscPosFrameTooBig.setStatus('mandatory')
traxSyncDiscHostFlowOffTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscHostFlowOffTimeOuts.setStatus('mandatory')
traxSyncDiscPosFlowoffTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscPosFlowoffTimeOuts.setStatus('mandatory')
traxSyncDiscInactivityTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscInactivityTimeouts.setStatus('mandatory')
traxSyncDiscNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscNoBuffers.setStatus('mandatory')
traxSyncDiscInvalidEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscInvalidEvent.setStatus('mandatory')
traxSyncDiscInvalidState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscInvalidState.setStatus('mandatory')
traxX25wSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 7))
traxx25wanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1))
traxx25wanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1), )
if mibBuilder.loadTexts: traxx25wanStatsTable.setStatus('mandatory')
traxx25wanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxx25wanStatsIndex"))
if mibBuilder.loadTexts: traxx25wanStatsEntry.setStatus('mandatory')
traxx25wanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsIndex.setStatus('mandatory')
traxx25wanStatsGoodFramesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsGoodFramesTxs.setStatus('mandatory')
traxx25wanStatsGoodFramesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsGoodFramesRxs.setStatus('mandatory')
traxx25wanStatsTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxUnderruns.setStatus('mandatory')
traxx25wanStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxOverruns.setStatus('mandatory')
traxx25wanStatsRxCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxCrcErrs.setStatus('mandatory')
traxx25wanStatsRxFrameNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxFrameNoBufs.setStatus('mandatory')
traxx25wanStatsUnrecoveredRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsUnrecoveredRxs.setStatus('mandatory')
traxx25wanStatsRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxOverflows.setStatus('mandatory')
traxx25wanStatsRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxAborts.setStatus('mandatory')
traxx25wanStatsRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxTooLongs.setStatus('mandatory')
traxx25wanStatsTxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxTooShorts.setStatus('mandatory')
traxx25wanStatsRxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxTooShorts.setStatus('mandatory')
traxx25wanStatsTxBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxBadPackets.setStatus('mandatory')
traxx25wanStatsTxRingQFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxRingQFulls.setStatus('mandatory')
traxx25wanStatsDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsDSR.setStatus('mandatory')
traxx25wanStatsCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsCTS.setStatus('mandatory')
traxx25wanStatsDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsDCD.setStatus('mandatory')
traxUX25Sts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 8))
traxUx25StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1), )
if mibBuilder.loadTexts: traxUx25StatTable.setStatus('mandatory')
traxUx25StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxUx25StatIndex"))
if mibBuilder.loadTexts: traxUx25StatEntry.setStatus('mandatory')
traxUx25StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatIndex.setStatus('mandatory')
traxUx25StatCallsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsRcvd.setStatus('mandatory')
traxUx25StatCallsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsSent.setStatus('mandatory')
traxUx25StatCallsRcvdEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsRcvdEstab.setStatus('mandatory')
traxUx25StatCallsSentEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsSentEstab.setStatus('mandatory')
traxUx25StatDataPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDataPktsRcvd.setStatus('mandatory')
traxUx25StatDataPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDataPktsSent.setStatus('mandatory')
traxUx25StatRestartsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRestartsRcvd.setStatus('mandatory')
traxUx25StatRestartsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRestartsSent.setStatus('mandatory')
traxUx25StatRcvrNotRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrNotRdyRcvd.setStatus('mandatory')
traxUx25StatRcvrNotRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrNotRdySent.setStatus('mandatory')
traxUx25StatRcvrRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrRdyRcvd.setStatus('mandatory')
traxUx25StatRcvrRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrRdySent.setStatus('mandatory')
traxUx25StatResetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatResetsRcvd.setStatus('mandatory')
traxUx25StatResetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatResetsSent.setStatus('mandatory')
traxUx25StatDiagPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDiagPktsRcvd.setStatus('mandatory')
traxUx25StatDiagPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDiagPktsSent.setStatus('mandatory')
traxUx25StatIntrptPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatIntrptPktsRcvd.setStatus('mandatory')
traxUx25StatIntrptPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatIntrptPktsSent.setStatus('mandatory')
traxUx25StatRejPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRejPktsRcvd.setStatus('mandatory')
traxUx25StatRejPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRejPktsSent.setStatus('mandatory')
traxUx25StatClrPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatClrPktRcvd.setStatus('mandatory')
traxUx25StatClrPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatClrPktSent.setStatus('mandatory')
traxUx25StatPVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatPVCsInDatTrnsfrState.setStatus('mandatory')
traxUx25StatSVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatSVCsInDatTrnsfrState.setStatus('mandatory')
traxULPBSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 9))
traxulpbStatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1), )
if mibBuilder.loadTexts: traxulpbStatTable.setStatus('mandatory')
traxulpbStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxulpbStatIndex"))
if mibBuilder.loadTexts: traxulpbStatEntry.setStatus('mandatory')
traxulpbStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatIndex.setStatus('mandatory')
traxulpbStatRRRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRRRcvd.setStatus('mandatory')
traxulpbStatRRTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRRTrnsmt.setStatus('mandatory')
traxulpbStatRNRCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRNRCmdsRcvd.setStatus('mandatory')
traxulpbStatRNRCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRNRCmdsTrnsmt.setStatus('mandatory')
traxulpbStatREJCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJCmdsRcvd.setStatus('mandatory')
traxulpbStatREJCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJCmdsTrnsmt.setStatus('mandatory')
traxulpbStatREJRspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJRspsRcvd.setStatus('mandatory')
traxulpbStatREJRspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJRspsTrnsmt.setStatus('mandatory')
traxulpbStatSABMCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMCmdsRcvd.setStatus('mandatory')
traxulpbStatSABMCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMCmdsTrnsmt.setStatus('mandatory')
traxulpbStatSABMECmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMECmdsRcvd.setStatus('mandatory')
traxulpbStatSABMECmdsTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMECmdsTransmit.setStatus('mandatory')
traxulpbStatDISCCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDISCCmdsRcvd.setStatus('mandatory')
traxulpbStatDISCCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDISCCmdsTrnsmt.setStatus('mandatory')
traxulpbStatDMRspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDMRspsRcvd.setStatus('mandatory')
traxulpbStatDMRspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDMRspsTrnsmt.setStatus('mandatory')
traxulpbStatUARspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatUARspsRcvd.setStatus('mandatory')
traxulpbStatUARspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatUARspsTrnsmt.setStatus('mandatory')
traxulpbStatFRMRRspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatFRMRRspsRcvd.setStatus('mandatory')
traxulpbStatFRMRRspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatFRMRRspsTrnsmt.setStatus('mandatory')
traxulpbStatIFrameCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatIFrameCmdsRcvd.setStatus('mandatory')
traxulpbStatIFrameCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatIFrameCmdsTrnsmt.setStatus('mandatory')
mibBuilder.exportSymbols("TRAX-MIB", traxCfgWriteMemLen=traxCfgWriteMemLen, traxVisaDiscHostWriteTimeouts=traxVisaDiscHostWriteTimeouts, traxIdSelfTestResult=traxIdSelfTestResult, traxVisaDiscMaxEnqs=traxVisaDiscMaxEnqs, traxx25wanStatsUnrecoveredRxs=traxx25wanStatsUnrecoveredRxs, traxTrapDupTrans=traxTrapDupTrans, traxSyncDiscInvalidState=traxSyncDiscInvalidState, traxCfgReadMemData=traxCfgReadMemData, traxTrapEnaNicMissing=traxTrapEnaNicMissing, traxVisaDiscNumSystem=traxVisaDiscNumSystem, traxCfgCardIPAddress=traxCfgCardIPAddress, traxUx25StatRejPktsSent=traxUx25StatRejPktsSent, traxVisaDiscNormal=traxVisaDiscNormal, traxUx25StatTable=traxUx25StatTable, usr=usr, traxUx25StatSVCsInDatTrnsfrState=traxUx25StatSVCsInDatTrnsfrState, traxUx25StatClrPktSent=traxUx25StatClrPktSent, traxUx25StatRcvrRdyRcvd=traxUx25StatRcvrRdyRcvd, traxSyncCallCount=traxSyncCallCount, traxulpbStatDISCCmdsTrnsmt=traxulpbStatDISCCmdsTrnsmt, traxUx25StatDiagPktsRcvd=traxUx25StatDiagPktsRcvd, traxulpbStatUARspsTrnsmt=traxulpbStatUARspsTrnsmt, traxUx25StatDataPktsRcvd=traxUx25StatDataPktsRcvd, traxUx25StatCallsRcvdEstab=traxUx25StatCallsRcvdEstab, traxUx25StatIntrptPktsRcvd=traxUx25StatIntrptPktsRcvd, traxVisaSts=traxVisaSts, traxVisaDiscMaxBadFrames=traxVisaDiscMaxBadFrames, traxTrapEnaSvcAlarm=traxTrapEnaSvcAlarm, traxIdEntry=traxIdEntry, traxUx25StatRcvrRdySent=traxUx25StatRcvrRdySent, traxVisaDiscHostRequest=traxVisaDiscHostRequest, traxulpbStatSABMECmdsTransmit=traxulpbStatSABMECmdsTransmit, traxCmd=traxCmd, traxVisaDiscHostFrameTooBig=traxVisaDiscHostFrameTooBig, traxUx25StatRcvrNotRdyRcvd=traxUx25StatRcvrNotRdyRcvd, traxUx25StatDataPktsSent=traxUx25StatDataPktsSent, traxCfg=traxCfg, traxx25wanStatsTxUnderruns=traxx25wanStatsTxUnderruns, traxUx25StatPVCsInDatTrnsfrState=traxUx25StatPVCsInDatTrnsfrState, traxVisaDiscSynDelayTooLong=traxVisaDiscSynDelayTooLong, traxCmdReqId=traxCmdReqId, nas=nas, traxCfgReadMemAddr=traxCfgReadMemAddr, traxVisaStsTable=traxVisaStsTable, traxSyncDiscMaxSnrms=traxSyncDiscMaxSnrms, traxCfgX25AddrPort1=traxCfgX25AddrPort1, traxx25wanStatsDSR=traxx25wanStatsDSR, traxUx25StatDiagPktsSent=traxUx25StatDiagPktsSent, traxIdSoftwareRev=traxIdSoftwareRev, traxSyncDiscHostFrameTooBig=traxSyncDiscHostFrameTooBig, traxSyncDiscMaxRetrans=traxSyncDiscMaxRetrans, traxx25wanStatsIndex=traxx25wanStatsIndex, traxx25wanStatsRxAborts=traxx25wanStatsRxAborts, traxulpbStatIFrameCmdsRcvd=traxulpbStatIFrameCmdsRcvd, traxSyncStsTable=traxSyncStsTable, traxx25wanStatsEntry=traxx25wanStatsEntry, traxUx25StatIndex=traxUx25StatIndex, traxDNIFailureReason=traxDNIFailureReason, traxTrapEnaX25PacketLevelUp=traxTrapEnaX25PacketLevelUp, traxUx25StatRestartsRcvd=traxUx25StatRestartsRcvd, traxCfgNicTrapDestination=traxCfgNicTrapDestination, traxCfgIndex=traxCfgIndex, traxVisaDiscNdcLogonFailures=traxVisaDiscNdcLogonFailures, traxx25wanStatsRxCrcErrs=traxx25wanStatsRxCrcErrs, traxulpbStatSABMCmdsTrnsmt=traxulpbStatSABMCmdsTrnsmt, traxulpbStatRNRCmdsTrnsmt=traxulpbStatRNRCmdsTrnsmt, traxVisaRetransCount=traxVisaRetransCount, traxCmdFunction=traxCmdFunction, traxSyncDiscNoBuffers=traxSyncDiscNoBuffers, traxCfgGatewayIpAddr=traxCfgGatewayIpAddr, traxVisaStsEntry=traxVisaStsEntry, traxCmdTable=traxCmdTable, traxVisaDuplicateTransCount=traxVisaDuplicateTransCount, traxSyncTransactionCount=traxSyncTransactionCount, traxTrapEnaEntry=traxTrapEnaEntry, traxSyncDiscPosFrameTooBig=traxSyncDiscPosFrameTooBig, traxIdCpuType=traxIdCpuType, traxCfgX25Addr=traxCfgX25Addr, traxVisaCallCount=traxVisaCallCount, traxUx25StatEntry=traxUx25StatEntry, traxSyncSts=traxSyncSts, traxSyncStsEntry=traxSyncStsEntry, traxSyncDiscInvalidEvent=traxSyncDiscInvalidEvent, traxCfgWriteMemData=traxCfgWriteMemData, traxulpbStatIFrameCmdsTrnsmt=traxulpbStatIFrameCmdsTrnsmt, traxTrapEnaX25LinkDn=traxTrapEnaX25LinkDn, traxx25wanStatsTxRingQFulls=traxx25wanStatsTxRingQFulls, traxSyncStsIndex=traxSyncStsIndex, traxVisaDiscNumBadMsg=traxVisaDiscNumBadMsg, traxulpbStatFRMRRspsTrnsmt=traxulpbStatFRMRRspsTrnsmt, traxIdFlashInstalled=traxIdFlashInstalled, traxSyncDiscInactivityTimeouts=traxSyncDiscInactivityTimeouts, traxUx25StatClrPktRcvd=traxUx25StatClrPktRcvd, traxulpbStatEntry=traxulpbStatEntry, traxUx25StatResetsRcvd=traxUx25StatResetsRcvd, traxX25wSts=traxX25wSts, traxTrapEnaX25FrameLevelUp=traxTrapEnaX25FrameLevelUp, traxx25wanStatsGoodFramesRxs=traxx25wanStatsGoodFramesRxs, traxulpbStatDMRspsRcvd=traxulpbStatDMRspsRcvd, traxulpbStatDMRspsTrnsmt=traxulpbStatDMRspsTrnsmt, traxUx25StatRestartsSent=traxUx25StatRestartsSent, traxVisaDiscBadCurrentState=traxVisaDiscBadCurrentState, traxx25wanStatsRxTooLongs=traxx25wanStatsRxTooLongs, traxx25wanStatsGoodFramesTxs=traxx25wanStatsGoodFramesTxs, traxx25wanStatsCTS=traxx25wanStatsCTS, traxCfgWriteMemAddr=traxCfgWriteMemAddr, traxVisaDiscPosRcvTimeouts=traxVisaDiscPosRcvTimeouts, traxSyncDiscHostFlowOffTimeOuts=traxSyncDiscHostFlowOffTimeOuts, traxTrapEna=traxTrapEna, traxx25wanStatsTxTooShorts=traxx25wanStatsTxTooShorts, traxTrapEnaX25LostCalls=traxTrapEnaX25LostCalls, traxVisaDiscPosRequest=traxVisaDiscPosRequest, traxUx25StatCallsSentEstab=traxUx25StatCallsSentEstab, traxUX25Sts=traxUX25Sts, traxTrapEnaSvcSetUp=traxTrapEnaSvcSetUp, traxTrapEnaX25LinkUp=traxTrapEnaX25LinkUp, traxulpbStatFRMRRspsRcvd=traxulpbStatFRMRRspsRcvd, traxSyncDiscNormal=traxSyncDiscNormal, traxulpbStatTable=traxulpbStatTable, traxUx25StatResetsSent=traxUx25StatResetsSent, traxulpbStatRRTrnsmt=traxulpbStatRRTrnsmt, traxx25wanStatsDCD=traxx25wanStatsDCD, traxTrapEnaIndex=traxTrapEnaIndex, traxUx25StatCallsRcvd=traxUx25StatCallsRcvd, traxulpbStatREJCmdsTrnsmt=traxulpbStatREJCmdsTrnsmt, traxCmdIndex=traxCmdIndex, traxx25wanStatsRxTooShorts=traxx25wanStatsRxTooShorts, traxUx25StatCallsSent=traxUx25StatCallsSent, traxIdRamInstalled=traxIdRamInstalled, traxIdIndex=traxIdIndex, traxCfgTable=traxCfgTable, traxulpbStatSABMECmdsRcvd=traxulpbStatSABMECmdsRcvd, traxCmdMgtStationId=traxCmdMgtStationId, traxTrapEnaDnisLookUp=traxTrapEnaDnisLookUp, traxId=traxId, traxULPBSts=traxULPBSts, traxSyncDiscPosFlowoffTimeOuts=traxSyncDiscPosFlowoffTimeOuts, traxCmdEntry=traxCmdEntry, traxCmdForce=traxCmdForce, traxIdMgmtConnect=traxIdMgmtConnect, traxx25wanStatsRxFrameNoBufs=traxx25wanStatsRxFrameNoBufs, traxulpbStatREJRspsRcvd=traxulpbStatREJRspsRcvd, traxCfgHostIPAddr=traxCfgHostIPAddr, traxVisaDiscHostRespTimeouts=traxVisaDiscHostRespTimeouts, traxVisaDiscPosFrameTooBig=traxVisaDiscPosFrameTooBig, traxIdTable=traxIdTable, traxx25wanStatsTable=traxx25wanStatsTable, traxVisaDiscUnexpectedEvent=traxVisaDiscUnexpectedEvent, traxSyncDiscPosFrameTooSmall=traxSyncDiscPosFrameTooSmall, traxUx25StatRejPktsRcvd=traxUx25StatRejPktsRcvd, traxulpbStatIndex=traxulpbStatIndex, traxTrapEnaX25FrameLevelDown=traxTrapEnaX25FrameLevelDown, traxCfgReadMemLength=traxCfgReadMemLength, traxVisaDiscPosWriteTimeouts=traxVisaDiscPosWriteTimeouts, traxCmdResult=traxCmdResult, traxTrapEnaTable=traxTrapEnaTable, traxulpbStatRRRcvd=traxulpbStatRRRcvd, traxUx25StatRcvrNotRdySent=traxUx25StatRcvrNotRdySent, traxCfgIPMask=traxCfgIPMask, traxx25wanStatsRxOverruns=traxx25wanStatsRxOverruns, traxVisaTransactionCount=traxVisaTransactionCount, traxx25wanStatsTxBadPackets=traxx25wanStatsTxBadPackets, traxTrapEnaX25PacketLevelDn=traxTrapEnaX25PacketLevelDn, traxCmdParam=traxCmdParam, traxulpbStatSABMCmdsRcvd=traxulpbStatSABMCmdsRcvd, traxx25wanStatsRxOverflows=traxx25wanStatsRxOverflows, traxulpbStatRNRCmdsRcvd=traxulpbStatRNRCmdsRcvd, traxulpbStatDISCCmdsRcvd=traxulpbStatDISCCmdsRcvd, traxCmdCode=traxCmdCode, traxVisaDiscMaxRetranToHost=traxVisaDiscMaxRetranToHost, trax=trax, traxIdHardwareSerNum=traxIdHardwareSerNum, traxIdHardwareRev=traxIdHardwareRev, traxFailureReason=traxFailureReason, traxulpbStatUARspsRcvd=traxulpbStatUARspsRcvd, traxVisaStsIndex=traxVisaStsIndex, traxulpbStatREJCmdsRcvd=traxulpbStatREJCmdsRcvd, traxulpbStatREJRspsTrnsmt=traxulpbStatREJRspsTrnsmt, traxCfgEntry=traxCfgEntry, traxVisaDiscMaxRetranToPos=traxVisaDiscMaxRetranToPos, traxUx25StatIntrptPktsSent=traxUx25StatIntrptPktsSent, traxx25wanStats=traxx25wanStats)
