#
# PySNMP MIB module BIANCA-BRICK-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-OSPF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Bits, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Gauge32, MibIdentifier, Counter32, ObjectIdentity, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Bits", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Gauge32", "MibIdentifier", "Counter32", "ObjectIdentity", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
ospfErr = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 11))
ospfErrOspfBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadVersion.setStatus('mandatory')
ospfErrOspfBadPacketType = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadPacketType.setStatus('mandatory')
ospfErrOspfBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadChecksum.setStatus('mandatory')
ospfErrIpBadDestination = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrIpBadDestination.setStatus('mandatory')
ospfErrOspfBadAreaId = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadAreaId.setStatus('mandatory')
ospfErrOspfAuthenticationFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfAuthenticationFailed.setStatus('mandatory')
ospfErrOspfUnknownNeighbor = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfUnknownNeighbor.setStatus('mandatory')
ospfErrHelloNetmaskMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloNetmaskMismatch.setStatus('mandatory')
ospfErrHelloDeadTimerMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloDeadTimerMismatch.setStatus('mandatory')
ospfErrHelloTimerMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloTimerMismatch.setStatus('mandatory')
ospfErrHelloOptionMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloOptionMismatch.setStatus('mandatory')
ospfErrOspfRouterIdConfusion = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfRouterIdConfusion.setStatus('mandatory')
ospfErrOspfUnknownLsaType = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfUnknownLsaType.setStatus('mandatory')
ospfErrDdOptionMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrDdOptionMismatch.setStatus('mandatory')
ospfErrDdNeighborStateLow = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrDdNeighborStateLow.setStatus('mandatory')
ospfErrLsackBadAck = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsackBadAck.setStatus('mandatory')
ospfErrLsackDuplicateAck = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsackDuplicateAck.setStatus('mandatory')
ospfErrLsreqBadRequest = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsreqBadRequest.setStatus('mandatory')
ospfErrLsreqNeighborStateLow = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsreqNeighborStateLow.setStatus('mandatory')
ospfErrLsupdNeighborStateLow = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdNeighborStateLow.setStatus('mandatory')
ospfErrLsupdBadLsaChecksum = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdBadLsaChecksum.setStatus('mandatory')
ospfErrLsupdNewerSelfgenLsa = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdNewerSelfgenLsa.setStatus('mandatory')
ospfErrLsupdLessRecentLsa = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdLessRecentLsa.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-OSPF-MIB", ospfErrOspfRouterIdConfusion=ospfErrOspfRouterIdConfusion, ospfErrHelloTimerMismatch=ospfErrHelloTimerMismatch, ospfErrHelloNetmaskMismatch=ospfErrHelloNetmaskMismatch, ospfErrLsackBadAck=ospfErrLsackBadAck, ospfErrDdNeighborStateLow=ospfErrDdNeighborStateLow, private=private, ospfErrLsupdNeighborStateLow=ospfErrLsupdNeighborStateLow, ospfErrOspfBadPacketType=ospfErrOspfBadPacketType, ospfErrOspfBadAreaId=ospfErrOspfBadAreaId, ospfErr=ospfErr, ospfErrOspfUnknownLsaType=ospfErrOspfUnknownLsaType, ospfErrLsreqBadRequest=ospfErrLsreqBadRequest, ospfErrOspfAuthenticationFailed=ospfErrOspfAuthenticationFailed, ospfErrHelloDeadTimerMismatch=ospfErrHelloDeadTimerMismatch, ospfErrLsackDuplicateAck=ospfErrLsackDuplicateAck, ospfErrOspfBadVersion=ospfErrOspfBadVersion, org=org, ospfErrHelloOptionMismatch=ospfErrHelloOptionMismatch, ospfErrOspfUnknownNeighbor=ospfErrOspfUnknownNeighbor, ospfErrLsupdLessRecentLsa=ospfErrLsupdLessRecentLsa, ospfErrOspfBadChecksum=ospfErrOspfBadChecksum, ospfErrLsreqNeighborStateLow=ospfErrLsreqNeighborStateLow, internet=internet, ospfErrDdOptionMismatch=ospfErrDdOptionMismatch, ospfErrLsupdNewerSelfgenLsa=ospfErrLsupdNewerSelfgenLsa, ospfErrIpBadDestination=ospfErrIpBadDestination, biboip=biboip, enterprises=enterprises, ospfErrLsupdBadLsaChecksum=ospfErrLsupdBadLsaChecksum, bintec=bintec, bibo=bibo, dod=dod)
