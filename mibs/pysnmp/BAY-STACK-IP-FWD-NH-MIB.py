#
# PySNMP MIB module BAY-STACK-IP-FWD-NH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-IP-FWD-NH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, IpAddress, ObjectIdentity, ModuleIdentity, Counter32, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Unsigned32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Counter32", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Unsigned32", "iso", "MibIdentifier")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackIpFwdNhMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 35))
bayStackIpFwdNhMib.setRevisions(('2009-09-30 00:00', '2009-09-11 00:00', '2009-08-26 00:00', '2009-08-21 00:00',))
if mibBuilder.loadTexts: bayStackIpFwdNhMib.setLastUpdated('200909300000Z')
if mibBuilder.loadTexts: bayStackIpFwdNhMib.setOrganization('Nortel Networks')
bayStackIpFwdNhNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 35, 0))
bayStackIpFwdNhObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 35, 1))
bsifnScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 1))
bsifnIpForwardingNextHopAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsifnIpForwardingNextHopAdminEnabled.setStatus('current')
bsifnIpForwardingNextHopOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsifnIpForwardingNextHopOperEnabled.setStatus('current')
bsifnPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2), )
if mibBuilder.loadTexts: bsifnPolicyTable.setStatus('current')
bsifnPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1), ).setIndexNames((1, "BAY-STACK-IP-FWD-NH-MIB", "bsifnPolicyName"))
if mibBuilder.loadTexts: bsifnPolicyEntry.setStatus('current')
bsifnPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: bsifnPolicyName.setStatus('current')
bsifnPolicyMatchInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddressType.setStatus('current')
bsifnPolicyMatchInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddress.setStatus('current')
bsifnPolicyMatchInetAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 4), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchInetAddressMask.setStatus('current')
bsifnPolicyMatchPortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchPortMin.setStatus('current')
bsifnPolicyMatchPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyMatchPortMax.setStatus('current')
bsifnPolicySetNextHopInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicySetNextHopInetAddressType.setStatus('current')
bsifnPolicySetNextHopInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicySetNextHopInetAddress.setStatus('current')
bsifnPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyRowStatus.setStatus('current')
bsifnPolicyInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3), )
if mibBuilder.loadTexts: bsifnPolicyInterfaceTable.setStatus('current')
bsifnPolicyInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1), ).setIndexNames((0, "BAY-STACK-IP-FWD-NH-MIB", "bsifnPolicyInterfaceIndex"), (1, "BAY-STACK-IP-FWD-NH-MIB", "bsifnPolicyInterfacePolicyName"))
if mibBuilder.loadTexts: bsifnPolicyInterfaceEntry.setStatus('current')
bsifnPolicyInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsifnPolicyInterfaceIndex.setStatus('current')
bsifnPolicyInterfacePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: bsifnPolicyInterfacePolicyName.setStatus('current')
bsifnPolicyInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("normalRouting", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyInterfaceMode.setStatus('current')
bsifnPolicyInterfaceOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsifnPolicyInterfaceOperationalStatus.setStatus('current')
bsifnPolicyInterfaceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("normalRouting", 2), ("enable", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsifnPolicyInterfaceAction.setStatus('current')
bsifnPolicyInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 35, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsifnPolicyInterfaceRowStatus.setStatus('current')
mibBuilder.exportSymbols("BAY-STACK-IP-FWD-NH-MIB", bsifnPolicyInterfaceOperationalStatus=bsifnPolicyInterfaceOperationalStatus, bsifnPolicySetNextHopInetAddressType=bsifnPolicySetNextHopInetAddressType, bsifnScalars=bsifnScalars, bsifnPolicyMatchPortMin=bsifnPolicyMatchPortMin, bsifnIpForwardingNextHopOperEnabled=bsifnIpForwardingNextHopOperEnabled, bsifnPolicyInterfaceEntry=bsifnPolicyInterfaceEntry, bsifnPolicyInterfaceMode=bsifnPolicyInterfaceMode, PYSNMP_MODULE_ID=bayStackIpFwdNhMib, bsifnPolicyTable=bsifnPolicyTable, bsifnPolicyMatchInetAddressMask=bsifnPolicyMatchInetAddressMask, bsifnPolicyInterfaceIndex=bsifnPolicyInterfaceIndex, bayStackIpFwdNhObjects=bayStackIpFwdNhObjects, bsifnPolicyMatchInetAddressType=bsifnPolicyMatchInetAddressType, bsifnPolicyInterfaceTable=bsifnPolicyInterfaceTable, bsifnPolicyMatchInetAddress=bsifnPolicyMatchInetAddress, bsifnIpForwardingNextHopAdminEnabled=bsifnIpForwardingNextHopAdminEnabled, bsifnPolicySetNextHopInetAddress=bsifnPolicySetNextHopInetAddress, bsifnPolicyRowStatus=bsifnPolicyRowStatus, bayStackIpFwdNhMib=bayStackIpFwdNhMib, bsifnPolicyInterfaceAction=bsifnPolicyInterfaceAction, bsifnPolicyInterfaceRowStatus=bsifnPolicyInterfaceRowStatus, bsifnPolicyMatchPortMax=bsifnPolicyMatchPortMax, bsifnPolicyInterfacePolicyName=bsifnPolicyInterfacePolicyName, bayStackIpFwdNhNotifications=bayStackIpFwdNhNotifications, bsifnPolicyEntry=bsifnPolicyEntry, bsifnPolicyName=bsifnPolicyName)
