#
# PySNMP MIB module HPN-ICF-MDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MDC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ModuleIdentity, Counter32, IpAddress, Integer32, NotificationType, MibIdentifier, iso, Unsigned32, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ModuleIdentity", "Counter32", "IpAddress", "Integer32", "NotificationType", "MibIdentifier", "iso", "Unsigned32", "TimeTicks", "ObjectIdentity")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
hpnicfMDC = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136))
hpnicfMDC.setRevisions(('2013-03-05 14:48',))
if mibBuilder.loadTexts: hpnicfMDC.setLastUpdated('201303051448Z')
if mibBuilder.loadTexts: hpnicfMDC.setOrganization('')
class HpnicfMdcActionValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("start", 1), ("stop", 2))

class HpnicfMdcRunStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("inactive", 1), ("starting", 2), ("active", 3), ("stopping", 4), ("updating", 5))

hpnicfMDCScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 1))
hpnicfMDCMaxMDCNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCMaxMDCNum.setStatus('current')
hpnicfMDCCurrentMDCNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCCurrentMDCNum.setStatus('current')
hpnicfMDCTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2))
hpnicfMDCControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1))
hpnicfMDCControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1, 1), )
if mibBuilder.loadTexts: hpnicfMDCControlTable.setStatus('current')
hpnicfMDCControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-MDC-MIB", "hpnicfMDCIndex"))
if mibBuilder.loadTexts: hpnicfMDCControlEntry.setStatus('current')
hpnicfMDCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMDCIndex.setStatus('current')
hpnicfMDCName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMDCName.setStatus('current')
hpnicfMDCAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1, 1, 1, 3), HpnicfMdcActionValue().clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCAction.setStatus('current')
hpnicfMDCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1, 1, 1, 4), HpnicfMdcRunStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCStatus.setStatus('current')
hpnicfMDCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMDCRowStatus.setStatus('current')
hpnicfMDCResource = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2))
hpnicfMDCDISKResourceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1), )
if mibBuilder.loadTexts: hpnicfMDCDISKResourceTable.setStatus('current')
hpnicfMDCDISKResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HPN-ICF-MDC-MIB", "hpnicfMDCIndex"), (0, "HPN-ICF-MDC-MIB", "hpnicfMDCDISKResourceInstance"))
if mibBuilder.loadTexts: hpnicfMDCDISKResourceEntry.setStatus('current')
hpnicfMDCDISKResourceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfMDCDISKResourceInstance.setStatus('current')
hpnicfMDCDISKResourceInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCDISKResourceInstanceName.setStatus('current')
hpnicfMDCDISKResourceMinLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCDISKResourceMinLimit.setStatus('current')
hpnicfMDCDISKResourceMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCDISKResourceMaxLimit.setStatus('current')
hpnicfMDCDISKResourceReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 5), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCDISKResourceReserve.setStatus('current')
hpnicfMDCDISKResourceQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 6), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCDISKResourceQuota.setStatus('current')
hpnicfMDCDISKResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 7), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCDISKResourceUsage.setStatus('current')
hpnicfMDCDISKResourceAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 1, 1, 8), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCDISKResourceAvailable.setStatus('current')
hpnicfMDCMemoryResourceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2), )
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceTable.setStatus('current')
hpnicfMDCMemoryResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HPN-ICF-MDC-MIB", "hpnicfMDCIndex"))
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceEntry.setStatus('current')
hpnicfMDCMemoryResourceMinLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceMinLimit.setStatus('current')
hpnicfMDCMemoryResourceMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceMaxLimit.setStatus('current')
hpnicfMDCMemoryResourceReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2, 1, 3), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceReserve.setStatus('current')
hpnicfMDCMemoryResourceQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2, 1, 4), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceQuota.setStatus('current')
hpnicfMDCMemoryResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2, 1, 5), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceUsage.setStatus('current')
hpnicfMDCMemoryResourceAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 2, 1, 6), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCMemoryResourceAvailable.setStatus('current')
hpnicfMDCCPUResourceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 3), )
if mibBuilder.loadTexts: hpnicfMDCCPUResourceTable.setStatus('current')
hpnicfMDCCPUResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HPN-ICF-MDC-MIB", "hpnicfMDCIndex"))
if mibBuilder.loadTexts: hpnicfMDCCPUResourceEntry.setStatus('current')
hpnicfMDCCPUResourceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('weight').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCCPUResourceLimit.setStatus('current')
hpnicfMDCCPUResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCCPUResourceUsage.setStatus('current')
hpnicfMDCLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 3))
hpnicfMDCLocationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 3, 1), )
if mibBuilder.loadTexts: hpnicfMDCLocationTable.setStatus('current')
hpnicfMDCLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HPN-ICF-MDC-MIB", "hpnicfMDCIndex"))
if mibBuilder.loadTexts: hpnicfMDCLocationEntry.setStatus('current')
hpnicfMDCLocationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCLocationStatus.setStatus('current')
hpnicfMDCAllocate = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4))
hpnicfMDCGroupIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 1), )
if mibBuilder.loadTexts: hpnicfMDCGroupIfTable.setStatus('current')
hpnicfMDCGroupIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfMDCGroupIfEntry.setStatus('current')
hpnicfMDCGroupIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCGroupIdentity.setStatus('current')
hpnicfMDCAllocateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 2), )
if mibBuilder.loadTexts: hpnicfMDCAllocateTable.setStatus('current')
hpnicfMDCAllocateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 2, 1), ).setIndexNames((0, "HPN-ICF-MDC-MIB", "hpnicfMDCAllocateGroupIndex"))
if mibBuilder.loadTexts: hpnicfMDCAllocateEntry.setStatus('current')
hpnicfMDCAllocateGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfMDCAllocateGroupIndex.setStatus('current')
hpnicfMDCAllocateGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMDCAllocateGroupDescription.setStatus('current')
hpnicfMDCAllocateMDCId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMDCAllocateMDCId.setStatus('current')
hpnicfMDCNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 3))
hpnicfMDCNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 3, 0))
hpnicfMDCStateChangeToActive = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 3, 0, 1)).setObjects(("HPN-ICF-MDC-MIB", "hpnicfMDCIndex"), ("HPN-ICF-MDC-MIB", "hpnicfMDCName"))
if mibBuilder.loadTexts: hpnicfMDCStateChangeToActive.setStatus('current')
hpnicfMDCStateChangeToInactive = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 136, 3, 0, 2)).setObjects(("HPN-ICF-MDC-MIB", "hpnicfMDCIndex"), ("HPN-ICF-MDC-MIB", "hpnicfMDCName"))
if mibBuilder.loadTexts: hpnicfMDCStateChangeToInactive.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-MDC-MIB", hpnicfMDCGroupIfTable=hpnicfMDCGroupIfTable, hpnicfMDCAllocate=hpnicfMDCAllocate, hpnicfMDCScalarObjects=hpnicfMDCScalarObjects, hpnicfMDCName=hpnicfMDCName, hpnicfMDCDISKResourceInstance=hpnicfMDCDISKResourceInstance, hpnicfMDCMemoryResourceUsage=hpnicfMDCMemoryResourceUsage, hpnicfMDCNotificationObjects=hpnicfMDCNotificationObjects, hpnicfMDCAction=hpnicfMDCAction, hpnicfMDCAllocateTable=hpnicfMDCAllocateTable, hpnicfMDCTables=hpnicfMDCTables, hpnicfMDCNotification=hpnicfMDCNotification, hpnicfMDCMemoryResourceMaxLimit=hpnicfMDCMemoryResourceMaxLimit, hpnicfMDCDISKResourceTable=hpnicfMDCDISKResourceTable, hpnicfMDCAllocateEntry=hpnicfMDCAllocateEntry, hpnicfMDCLocation=hpnicfMDCLocation, hpnicfMDCCPUResourceEntry=hpnicfMDCCPUResourceEntry, hpnicfMDCGroupIfEntry=hpnicfMDCGroupIfEntry, hpnicfMDCLocationStatus=hpnicfMDCLocationStatus, hpnicfMDCDISKResourceInstanceName=hpnicfMDCDISKResourceInstanceName, hpnicfMDCStateChangeToInactive=hpnicfMDCStateChangeToInactive, hpnicfMDCDISKResourceReserve=hpnicfMDCDISKResourceReserve, hpnicfMDCControl=hpnicfMDCControl, HpnicfMdcRunStatus=HpnicfMdcRunStatus, hpnicfMDCDISKResourceAvailable=hpnicfMDCDISKResourceAvailable, hpnicfMDCAllocateGroupDescription=hpnicfMDCAllocateGroupDescription, hpnicfMDCResource=hpnicfMDCResource, PYSNMP_MODULE_ID=hpnicfMDC, HpnicfMdcActionValue=HpnicfMdcActionValue, hpnicfMDCDISKResourceMaxLimit=hpnicfMDCDISKResourceMaxLimit, hpnicfMDCMemoryResourceTable=hpnicfMDCMemoryResourceTable, hpnicfMDCStateChangeToActive=hpnicfMDCStateChangeToActive, hpnicfMDCRowStatus=hpnicfMDCRowStatus, hpnicfMDCLocationTable=hpnicfMDCLocationTable, hpnicfMDC=hpnicfMDC, hpnicfMDCCurrentMDCNum=hpnicfMDCCurrentMDCNum, hpnicfMDCMemoryResourceEntry=hpnicfMDCMemoryResourceEntry, hpnicfMDCMemoryResourceMinLimit=hpnicfMDCMemoryResourceMinLimit, hpnicfMDCDISKResourceUsage=hpnicfMDCDISKResourceUsage, hpnicfMDCMemoryResourceReserve=hpnicfMDCMemoryResourceReserve, hpnicfMDCLocationEntry=hpnicfMDCLocationEntry, hpnicfMDCStatus=hpnicfMDCStatus, hpnicfMDCControlEntry=hpnicfMDCControlEntry, hpnicfMDCMemoryResourceAvailable=hpnicfMDCMemoryResourceAvailable, hpnicfMDCControlTable=hpnicfMDCControlTable, hpnicfMDCIndex=hpnicfMDCIndex, hpnicfMDCCPUResourceUsage=hpnicfMDCCPUResourceUsage, hpnicfMDCAllocateMDCId=hpnicfMDCAllocateMDCId, hpnicfMDCAllocateGroupIndex=hpnicfMDCAllocateGroupIndex, hpnicfMDCDISKResourceQuota=hpnicfMDCDISKResourceQuota, hpnicfMDCMemoryResourceQuota=hpnicfMDCMemoryResourceQuota, hpnicfMDCMaxMDCNum=hpnicfMDCMaxMDCNum, hpnicfMDCCPUResourceLimit=hpnicfMDCCPUResourceLimit, hpnicfMDCDISKResourceEntry=hpnicfMDCDISKResourceEntry, hpnicfMDCDISKResourceMinLimit=hpnicfMDCDISKResourceMinLimit, hpnicfMDCCPUResourceTable=hpnicfMDCCPUResourceTable, hpnicfMDCGroupIdentity=hpnicfMDCGroupIdentity)
