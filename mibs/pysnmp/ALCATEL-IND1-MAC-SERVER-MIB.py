#
# PySNMP MIB module ALCATEL-IND1-MAC-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-MAC-SERVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:02:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
hardentIND1Physical, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "hardentIND1Physical")
physicalIndex, = mibBuilder.importSymbols("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, Gauge32, ObjectIdentity, IpAddress, Counter32, NotificationType, Unsigned32, Bits, iso, MibIdentifier, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "Gauge32", "ObjectIdentity", "IpAddress", "Counter32", "NotificationType", "Unsigned32", "Bits", "iso", "MibIdentifier", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
alcatelIND1MacServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3))
alcatelIND1MacServerMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1MacServerMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1MacServerMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
alcatelIND1MacServerMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBNotifications.setStatus('current')
alcatelIND1MacServerMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBObjects.setStatus('current')
alcatelIND1MacServerMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBConformance.setStatus('current')
alcatelIND1MacServerMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBGroups.setStatus('current')
alcatelIND1MacServerMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 2))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBCompliances.setStatus('current')
class MacAddrGlobalLocalStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 1), ("globallyAdministered", 2), ("locallyAdministered", 3), ("globallyAdministeredOverlap", 4))

class MacRangeIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 20)

chasMacAddressRangeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: chasMacAddressRangeTable.setStatus('current')
chasMacAddrRangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "ALCATEL-IND1-MAC-SERVER-MIB", "chasMacRangeIndex"))
if mibBuilder.loadTexts: chasMacAddrRangeTableEntry.setStatus('current')
chasMacRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 1), MacRangeIndex())
if mibBuilder.loadTexts: chasMacRangeIndex.setStatus('current')
chasMacAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasMacAddressStart.setStatus('current')
chasMacAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasMacAddressCount.setStatus('current')
chasGlobalLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 4), MacAddrGlobalLocalStatusType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasGlobalLocal.setStatus('current')
chasMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasMacRowStatus.setStatus('current')
chasMacAddressAllocTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: chasMacAddressAllocTable.setStatus('current')
chasMacAddressAllocTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-MAC-SERVER-MIB", "chasAppId"), (0, "ALCATEL-IND1-MAC-SERVER-MIB", "chasObjectId"))
if mibBuilder.loadTexts: chasMacAddressAllocTableEntry.setStatus('current')
chasAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: chasAppId.setStatus('current')
chasObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: chasObjectId.setStatus('current')
chasAllocMacRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 3), MacRangeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAllocMacRangeIndex.setStatus('current')
chasAllocMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAllocMacAddress.setStatus('current')
chasAllocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasAllocRowStatus.setStatus('current')
chasMacAddrDupAllocStatusTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 3))
chasMacAddrDuplicationStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasMacAddrDuplicationStatus.setStatus('current')
chasMacAddrAllocLocallyAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasMacAddrAllocLocallyAdminStatus.setStatus('current')
chasMacAddrRetentionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4))
chasMacAddrRetentionStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasMacAddrRetentionStatus.setStatus('current')
chasPossibleDuplicateMacTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPossibleDuplicateMacTrapStatus.setStatus('current')
chasRingStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2))).clone('notPresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRingStatus.setStatus('current')
chasBaseMacAddrSource = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("retained", 1), ("eEPROM", 2))).clone('eEPROM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBaseMacAddrSource.setStatus('current')
chasBaseMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBaseMacAddr.setStatus('current')
chasBaseMacReleaseAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSignificant", 0), ("releaseMac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBaseMacReleaseAction.setStatus('current')
chasBaseMacAddrRetentionTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBaseMacAddrRetentionTimer.setStatus('current')
alaMacServerTrapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 5))
chasTrapMacRangeIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 5, 1), MacRangeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapMacRangeIndex.setStatus('current')
baseMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 5, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseMacAddress.setStatus('current')
chassisTrapsMacOverlap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapMacRangeIndex"))
if mibBuilder.loadTexts: chassisTrapsMacOverlap.setStatus('current')
chassisTrapsPossibleDuplicateMac = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "baseMacAddress"))
if mibBuilder.loadTexts: chassisTrapsPossibleDuplicateMac.setStatus('current')
chassisTrapsDuplicateMacCleared = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "baseMacAddress"))
if mibBuilder.loadTexts: chassisTrapsDuplicateMacCleared.setStatus('current')
alcatelIND1MacServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 2, 1)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrRangeGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddressAllocGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrDupAllocStatusGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapsMacOverlapGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrRetentionGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapsPossibleDuplicateMacGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1MacServerMIBCompliance = alcatelIND1MacServerMIBCompliance.setStatus('current')
chasMacAddrRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 1)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddressStart"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddressCount"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasGlobalLocal"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddrRangeGroup = chasMacAddrRangeGroup.setStatus('current')
chasMacAddressAllocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 2)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasAllocMacRangeIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasAllocMacAddress"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasAllocRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddressAllocGroup = chasMacAddressAllocGroup.setStatus('current')
chasMacAddrDupAllocStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 3)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrDuplicationStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrAllocLocallyAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddrDupAllocStatusGroup = chasMacAddrDupAllocStatusGroup.setStatus('current')
chasTrapsMacOverlapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 4)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chassisTrapsMacOverlap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasTrapsMacOverlapGroup = chasTrapsMacOverlapGroup.setStatus('current')
chasMacAddrRetentionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 5)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrRetentionStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasPossibleDuplicateMacTrapStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasRingStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacAddrSource"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacAddr"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacReleaseAction"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacAddrRetentionTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddrRetentionGroup = chasMacAddrRetentionGroup.setStatus('current')
chasTrapsPossibleDuplicateMacGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 6)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chassisTrapsPossibleDuplicateMac"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chassisTrapsDuplicateMacCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasTrapsPossibleDuplicateMacGroup = chasTrapsPossibleDuplicateMacGroup.setStatus('current')
chasNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 7)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "baseMacAddress"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapMacRangeIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasNotificationObjectGroup = chasNotificationObjectGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-MAC-SERVER-MIB", chasMacAddrDupAllocStatusTable=chasMacAddrDupAllocStatusTable, chasBaseMacAddrSource=chasBaseMacAddrSource, chasMacAddrAllocLocallyAdminStatus=chasMacAddrAllocLocallyAdminStatus, chasMacAddrRangeGroup=chasMacAddrRangeGroup, chasTrapsMacOverlapGroup=chasTrapsMacOverlapGroup, chassisTrapsMacOverlap=chassisTrapsMacOverlap, chasBaseMacAddr=chasBaseMacAddr, alcatelIND1MacServerMIBCompliances=alcatelIND1MacServerMIBCompliances, chasGlobalLocal=chasGlobalLocal, chasMacAddressStart=chasMacAddressStart, alcatelIND1MacServerMIBObjects=alcatelIND1MacServerMIBObjects, chasBaseMacAddrRetentionTimer=chasBaseMacAddrRetentionTimer, chasTrapsPossibleDuplicateMacGroup=chasTrapsPossibleDuplicateMacGroup, PYSNMP_MODULE_ID=alcatelIND1MacServerMIB, chasMacAddrRetentionGroup=chasMacAddrRetentionGroup, chassisTrapsDuplicateMacCleared=chassisTrapsDuplicateMacCleared, chasObjectId=chasObjectId, chasMacAddrDupAllocStatusGroup=chasMacAddrDupAllocStatusGroup, alcatelIND1MacServerMIBGroups=alcatelIND1MacServerMIBGroups, alcatelIND1MacServerMIBNotifications=alcatelIND1MacServerMIBNotifications, chasMacAddrRetentionObjects=chasMacAddrRetentionObjects, baseMacAddress=baseMacAddress, chasTrapMacRangeIndex=chasTrapMacRangeIndex, chasMacRangeIndex=chasMacRangeIndex, chasMacAddrRangeTableEntry=chasMacAddrRangeTableEntry, alcatelIND1MacServerMIBCompliance=alcatelIND1MacServerMIBCompliance, MacAddrGlobalLocalStatusType=MacAddrGlobalLocalStatusType, chasAllocMacAddress=chasAllocMacAddress, chasPossibleDuplicateMacTrapStatus=chasPossibleDuplicateMacTrapStatus, chassisTrapsPossibleDuplicateMac=chassisTrapsPossibleDuplicateMac, alaMacServerTrapObjs=alaMacServerTrapObjs, alcatelIND1MacServerMIBConformance=alcatelIND1MacServerMIBConformance, chasMacAddressRangeTable=chasMacAddressRangeTable, chasMacAddressCount=chasMacAddressCount, chasAllocRowStatus=chasAllocRowStatus, chasMacAddrRetentionStatus=chasMacAddrRetentionStatus, chasBaseMacReleaseAction=chasBaseMacReleaseAction, chasAppId=chasAppId, chasNotificationObjectGroup=chasNotificationObjectGroup, chasMacAddressAllocTableEntry=chasMacAddressAllocTableEntry, chasAllocMacRangeIndex=chasAllocMacRangeIndex, chasMacAddrDuplicationStatus=chasMacAddrDuplicationStatus, chasMacAddressAllocGroup=chasMacAddressAllocGroup, chasRingStatus=chasRingStatus, alcatelIND1MacServerMIB=alcatelIND1MacServerMIB, chasMacAddressAllocTable=chasMacAddressAllocTable, chasMacRowStatus=chasMacRowStatus, MacRangeIndex=MacRangeIndex)
