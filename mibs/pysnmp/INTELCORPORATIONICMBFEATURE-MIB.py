#
# PySNMP MIB module INTELCORPORATIONICMBFEATURE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATIONICMBFEATURE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibIdentifier, ObjectIdentity, enterprises, IpAddress, TimeTicks, Bits, Integer32, Gauge32, Unsigned32, iso, Counter32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "ObjectIdentity", "enterprises", "IpAddress", "TimeTicks", "Bits", "Integer32", "Gauge32", "Unsigned32", "iso", "Counter32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
platforms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2))
icmbFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tIcmbChassisTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11), )
if mibBuilder.loadTexts: tIcmbChassisTable.setStatus('mandatory')
eIcmbChassisTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a11ChassisIndex"))
if mibBuilder.loadTexts: eIcmbChassisTable.setStatus('mandatory')
a11ChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ChassisIndex.setStatus('mandatory')
a11ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ComponentId.setStatus('mandatory')
a11ChassisAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vAvailable", 0), ("vShuttingDown", 1), ("vUnavailable", 2), ("vInitializing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a11ChassisAvailable.setStatus('mandatory')
tIcmbControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12), )
if mibBuilder.loadTexts: tIcmbControl.setStatus('mandatory')
eIcmbControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eIcmbControl.setStatus('mandatory')
a12State = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12State.setStatus('mandatory')
a12DiscoveryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12DiscoveryPeriod.setStatus('mandatory')
a12SdrReadState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12SdrReadState.setStatus('mandatory')
a12AcceptIcmbCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12AcceptIcmbCommands.setStatus('mandatory')
a12ReclaimResources = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 12, 1, 5), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12ReclaimResources.setStatus('mandatory')
tIcmbMifMappingTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13), )
if mibBuilder.loadTexts: tIcmbMifMappingTable.setStatus('mandatory')
eIcmbMifMappingTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a13MapIndex"))
if mibBuilder.loadTexts: eIcmbMifMappingTable.setStatus('mandatory')
a13MapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13MapIndex.setStatus('mandatory')
a13Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13Manufacturer.setStatus('mandatory')
a13ProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13ProductName.setStatus('mandatory')
a13ModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13ModelNumber.setStatus('mandatory')
a13MifFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 13, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a13MifFilename.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a1001MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibName.setStatus('mandatory')
a1001MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibOid.setStatus('mandatory')
a1001DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 1001, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1001DisableTrap.setStatus('mandatory')
tEifControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000), )
if mibBuilder.loadTexts: tEifControl.setStatus('mandatory')
eEifControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eEifControl.setStatus('mandatory')
a2000Status = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCreatedOnly", 3), ("vConstructedOnly", 4), ("vFullyOperational", 5), ("vIdle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000Status.setStatus('mandatory')
a2000DimContext = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 2), DmiOctetstring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000DimContext.setStatus('mandatory')
a2000PersistentDataWriteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000PersistentDataWriteDelay.setStatus('mandatory')
a2000EifInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2000, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2000EifInterfaceName.setStatus('mandatory')
tEifExtensionList = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001), )
if mibBuilder.loadTexts: tEifExtensionList.setStatus('mandatory')
eEifExtensionList = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a2001Index"))
if mibBuilder.loadTexts: eEifExtensionList.setStatus('mandatory')
a2001Index = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2001Index.setStatus('mandatory')
a2001Filename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2001Filename.setStatus('mandatory')
tEventGenerationForEifControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002), )
if mibBuilder.loadTexts: tEventGenerationForEifControl.setStatus('mandatory')
eEventGenerationForEifControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1), ).setIndexNames((0, "INTELCORPORATIONICMBFEATURE-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBFEATURE-MIB", "a2002AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForEifControl.setStatus('mandatory')
a2002EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNoDimContextsCreated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventType.setStatus('mandatory')
a2002EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSeverity.setStatus('mandatory')
a2002IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a2002IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002IsEventState_based.setStatus('mandatory')
a2002EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventStateKey.setStatus('mandatory')
a2002AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002AssociatedGroup.setStatus('mandatory')
a2002EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther1", 0), ("vUnknown1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSystem.setStatus('mandatory')
a2002EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSubsystem.setStatus('mandatory')
trap1ForEifControl = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4, 1, 2002, 1) + (0,1)).setObjects(("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventType"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventSeverity"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002IsEventState_based"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventStateKey"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002AssociatedGroup"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventSystem"), ("INTELCORPORATIONICMBFEATURE-MIB", "a2002EventSubsystem"))
mibBuilder.exportSymbols("INTELCORPORATIONICMBFEATURE-MIB", a11ChassisAvailable=a11ChassisAvailable, DmiDisplaystring=DmiDisplaystring, a1001DisableTrap=a1001DisableTrap, products=products, a2001Index=a2001Index, a2002EventSeverity=a2002EventSeverity, a12DiscoveryPeriod=a12DiscoveryPeriod, DmiComponentIndex=DmiComponentIndex, DmiOctetstring=DmiOctetstring, a1Installation=a1Installation, trap1ForEifControl=trap1ForEifControl, a2000EifInterfaceName=a2000EifInterfaceName, tIcmbChassisTable=tIcmbChassisTable, DmiInteger=DmiInteger, eEifExtensionList=eEifExtensionList, a12State=a12State, tEifExtensionList=tEifExtensionList, eEifControl=eEifControl, a2000Status=a2000Status, eIcmbChassisTable=eIcmbChassisTable, eIcmbMifMappingTable=eIcmbMifMappingTable, a2001Filename=a2001Filename, eEventGenerationForEifControl=eEventGenerationForEifControl, a13ModelNumber=a13ModelNumber, a2002EventType=a2002EventType, a13Manufacturer=a13Manufacturer, a2002IsEventState_based=a2002IsEventState_based, intel=intel, tComponentid=tComponentid, eComponentid=eComponentid, a12AcceptIcmbCommands=a12AcceptIcmbCommands, DmiDateX=DmiDateX, platforms=platforms, tIcmbControl=tIcmbControl, eMiftomib=eMiftomib, a2002EventStateKey=a2002EventStateKey, dmtfGroups=dmtfGroups, tEifControl=tEifControl, a12ReclaimResources=a12ReclaimResources, a1Product=a1Product, a2002AssociatedGroup=a2002AssociatedGroup, icmbFeature=icmbFeature, a12SdrReadState=a12SdrReadState, a13MifFilename=a13MifFilename, a1SerialNumber=a1SerialNumber, a1Manufacturer=a1Manufacturer, server_products=server_products, a1001MibName=a1001MibName, a2000PersistentDataWriteDelay=a2000PersistentDataWriteDelay, a2002EventSubsystem=a2002EventSubsystem, a2002EventSystem=a2002EventSystem, a2000DimContext=a2000DimContext, tEventGenerationForEifControl=tEventGenerationForEifControl, a1001MibOid=a1001MibOid, a11ComponentId=a11ComponentId, a1Verify=a1Verify, eIcmbControl=eIcmbControl, a1Version=a1Version, a11ChassisIndex=a11ChassisIndex, tMiftomib=tMiftomib, a13MapIndex=a13MapIndex, a13ProductName=a13ProductName, tIcmbMifMappingTable=tIcmbMifMappingTable)
