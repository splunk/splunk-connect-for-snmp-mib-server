#
# PySNMP MIB module RUCKUS-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-L2TP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:50:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ruckusCommonL2TPModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusCommonL2TPModule")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Counter32, Bits, Gauge32, iso, ObjectIdentity, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Unsigned32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Bits", "Gauge32", "iso", "ObjectIdentity", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Unsigned32", "MibIdentifier", "NotificationType")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ruckusL2TPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1))
if mibBuilder.loadTexts: ruckusL2TPMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusL2TPMIB.setOrganization('Ruckus Wireless, Inc')
ruckusL2TPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1))
ruckusL2TPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1))
ruckusL2TPEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 2))
ruckusL2TPServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPServiceStatus.setStatus('current')
ruckusL2TPConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPConnectionStatus.setStatus('current')
ruckusL2TPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPServerIP.setStatus('current')
ruckusL2TPSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPSharedSecret.setStatus('current')
ruckusL2TPUserName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPUserName.setStatus('current')
ruckusL2TPPassword = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPPassword.setStatus('current')
ruckusL2TPIfIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPIfIPAddr.setStatus('current')
ruckusL2TPIfNetMask = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPIfNetMask.setStatus('current')
ruckusL2TPIfGateway = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 14, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusL2TPIfGateway.setStatus('current')
mibBuilder.exportSymbols("RUCKUS-L2TP-MIB", ruckusL2TPServiceStatus=ruckusL2TPServiceStatus, ruckusL2TPObjects=ruckusL2TPObjects, ruckusL2TPEvents=ruckusL2TPEvents, ruckusL2TPServerIP=ruckusL2TPServerIP, ruckusL2TPIfNetMask=ruckusL2TPIfNetMask, PYSNMP_MODULE_ID=ruckusL2TPMIB, ruckusL2TPConnectionStatus=ruckusL2TPConnectionStatus, ruckusL2TPIfGateway=ruckusL2TPIfGateway, ruckusL2TPInfo=ruckusL2TPInfo, ruckusL2TPSharedSecret=ruckusL2TPSharedSecret, ruckusL2TPPassword=ruckusL2TPPassword, ruckusL2TPIfIPAddr=ruckusL2TPIfIPAddr, ruckusL2TPUserName=ruckusL2TPUserName, ruckusL2TPMIB=ruckusL2TPMIB)
