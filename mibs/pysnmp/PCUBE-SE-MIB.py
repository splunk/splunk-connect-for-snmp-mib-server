#
# PySNMP MIB module PCUBE-SE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCUBE-SE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:54:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
pcubeWorkgroup, pcubeModules = mibBuilder.importSymbols("PCUBE-SMI", "pcubeWorkgroup", "pcubeModules")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Bits, Integer32, Gauge32, iso, Counter64, NotificationType, ModuleIdentity, Counter32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "Gauge32", "iso", "Counter64", "NotificationType", "ModuleIdentity", "Counter32", "IpAddress", "TimeTicks")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
pcubeSeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5655, 2, 3))
pcubeSeMIB.setRevisions(('2006-11-07 00:00', '2006-05-10 00:00', '2006-02-12 00:00', '2005-08-16 00:00', '2004-12-12 00:00', '2004-07-01 00:00', '2003-07-02 00:00', '2003-01-05 00:00',))
if mibBuilder.loadTexts: pcubeSeMIB.setLastUpdated('200611070000Z')
if mibBuilder.loadTexts: pcubeSeMIB.setOrganization('Cisco Systems, Inc.')
pcubeSEObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1))
pcubeSeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1))
pcubeSeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1))
pcubeSeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 2))
systemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1))
pchassisGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2))
pmoduleGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3))
linkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4))
diskGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 5))
rdrFormatterGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6))
loggerGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7))
subscribersGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8))
trafficProcessorGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9))
pportGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10))
txQueuesGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11))
globalControllersGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12))
applicationGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13))
trafficCountersGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14))
attackGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15))
vasTrafficForwardingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16))
mplsVpnAutoLearnGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17))
class LinkModeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("bypass", 2), ("forwarding", 3), ("cutoff", 4), ("sniffing", 5))

sysOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("boot", 2), ("operational", 3), ("warning", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperationalStatus.setStatus('current')
sysFailureRecovery = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("operational", 2), ("nonOperational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFailureRecovery.setStatus('current')
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
pchassisSysType = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sce1000", 2), ("se100", 3), ("sce2000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisSysType.setStatus('current')
pchassisPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisPowerSupplyAlarm.setStatus('current')
pchassisFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisFansAlarm.setStatus('current')
pchassisTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisTempAlarm.setStatus('current')
pchassisVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisVoltageAlarm.setStatus('current')
pchassisNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisNumSlots.setStatus('current')
pchassisSlotConfig = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisSlotConfig.setStatus('current')
pchassisPsuType = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ac", 2), ("dc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisPsuType.setStatus('current')
pchassisLineFeedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisLineFeedAlarm.setStatus('current')
pmoduleTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1), )
if mibBuilder.loadTexts: pmoduleTable.setStatus('current')
pmoduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: pmoduleEntry.setStatus('current')
pmoduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleIndex.setStatus('current')
pmoduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("gbe2Module", 2), ("fe2Module", 3), ("gbe4Module", 4), ("fe4Module", 5), ("oc124Module", 6), ("fe8Module", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleType.setStatus('current')
pmoduleNumTrafficProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleNumTrafficProcessors.setStatus('current')
pmoduleSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleSlotNum.setStatus('current')
pmoduleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleHwVersion.setStatus('current')
pmoduleNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleNumPorts.setStatus('current')
pmoduleNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleNumLinks.setStatus('current')
pmoduleConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("inline", 2), ("receiveOnly", 3), ("inlineCascade", 4), ("receiveOnlyCascade", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleConnectionMode.setStatus('current')
pmoduleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleSerialNumber.setStatus('current')
pmoduleUpStreamAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 10), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleUpStreamAttackFilteringTime.setStatus('current')
pmoduleUpStreamLastAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 11), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleUpStreamLastAttackFilteringTime.setStatus('current')
pmoduleDownStreamAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 12), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleDownStreamAttackFilteringTime.setStatus('current')
pmoduleDownStreamLastAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 13), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleDownStreamLastAttackFilteringTime.setStatus('current')
pmoduleAttackObjectsClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 14), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmoduleAttackObjectsClearTime.setStatus('current')
pmoduleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleAdminStatus.setStatus('current')
pmoduleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleOperStatus.setStatus('current')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "linkModuleIndex"), (0, "PCUBE-SE-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
linkModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModuleIndex.setStatus('current')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('current')
linkAdminModeOnActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 3), LinkModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdminModeOnActive.setStatus('current')
linkAdminModeOnFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 4), LinkModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdminModeOnFailure.setStatus('current')
linkOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 5), LinkModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperMode.setStatus('current')
linkStatusReflectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatusReflectionEnable.setStatus('current')
linkSubscriberSidePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSubscriberSidePortIndex.setStatus('current')
linkNetworkSidePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNetworkSidePortIndex.setStatus('current')
diskNumUsedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumUsedBytes.setStatus('current')
diskNumFreeBytes = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumFreeBytes.setStatus('current')
rdrFormatterEnable = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterEnable.setStatus('current')
rdrFormatterDestTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2), )
if mibBuilder.loadTexts: rdrFormatterDestTable.setStatus('current')
rdrFormatterDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), (0, "PCUBE-SE-MIB", "rdrFormatterDestPort"))
if mibBuilder.loadTexts: rdrFormatterDestEntry.setStatus('current')
rdrFormatterDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestIPAddr.setStatus('current')
rdrFormatterDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestPort.setStatus('current')
rdrFormatterDestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestPriority.setStatus('current')
rdrFormatterDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestStatus.setStatus('current')
rdrFormatterDestConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestConnectionStatus.setStatus('current')
rdrFormatterDestNumReportsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestNumReportsSent.setStatus('current')
rdrFormatterDestNumReportsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestNumReportsDiscarded.setStatus('current')
rdrFormatterDestReportRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestReportRate.setStatus('current')
rdrFormatterDestReportRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestReportRatePeak.setStatus('current')
rdrFormatterDestReportRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 10), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestReportRatePeakTime.setStatus('current')
rdrFormatterNumReportsSent = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterNumReportsSent.setStatus('current')
rdrFormatterNumReportsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterNumReportsDiscarded.setStatus('current')
rdrFormatterClearCountersTime = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 5), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdrFormatterClearCountersTime.setStatus('current')
rdrFormatterReportRate = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterReportRate.setStatus('current')
rdrFormatterReportRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterReportRatePeak.setStatus('current')
rdrFormatterReportRatePeakTime = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 8), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterReportRatePeakTime.setStatus('current')
rdrFormatterProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rdrv1", 2), ("rdrv2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterProtocol.setStatus('current')
rdrFormatterForwardingMode = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("redundancy", 2), ("simpleLoadBalancing", 3), ("multicast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterForwardingMode.setStatus('current')
rdrFormatterCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11), )
if mibBuilder.loadTexts: rdrFormatterCategoryTable.setStatus('current')
rdrFormatterCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "rdrFormatterCategoryIndex"))
if mibBuilder.loadTexts: rdrFormatterCategoryEntry.setStatus('current')
rdrFormatterCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryIndex.setStatus('current')
rdrFormatterCategoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryName.setStatus('current')
rdrFormatterCategoryNumReportsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsSent.setStatus('current')
rdrFormatterCategoryNumReportsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsDiscarded.setStatus('current')
rdrFormatterCategoryReportRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryReportRate.setStatus('current')
rdrFormatterCategoryReportRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryReportRatePeak.setStatus('current')
rdrFormatterCategoryReportRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 7), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryReportRatePeakTime.setStatus('current')
rdrFormatterCategoryNumReportsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsQueued.setStatus('current')
rdrFormatterCategoryDestTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12), )
if mibBuilder.loadTexts: rdrFormatterCategoryDestTable.setStatus('current')
rdrFormatterCategoryDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "rdrFormatterCategoryIndex"), (0, "PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), (0, "PCUBE-SE-MIB", "rdrFormatterDestPort"))
if mibBuilder.loadTexts: rdrFormatterCategoryDestEntry.setStatus('current')
rdrFormatterCategoryDestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryDestPriority.setStatus('current')
rdrFormatterCategoryDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryDestStatus.setStatus('current')
loggerUserLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogEnable.setStatus('current')
loggerUserLogNumInfo = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumInfo.setStatus('current')
loggerUserLogNumWarning = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumWarning.setStatus('current')
loggerUserLogNumError = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumError.setStatus('current')
loggerUserLogNumFatal = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumFatal.setStatus('current')
loggerUserLogClearCountersTime = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 6), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggerUserLogClearCountersTime.setStatus('current')
subscribersInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1), )
if mibBuilder.loadTexts: subscribersInfoTable.setStatus('current')
subscribersInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: subscribersInfoEntry.setStatus('current')
subscribersNumIntroduced = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIntroduced.setStatus('current')
subscribersNumFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumFree.setStatus('current')
subscribersNumIpAddrMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpAddrMappings.setStatus('current')
subscribersNumIpAddrMappingsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpAddrMappingsFree.setStatus('current')
subscribersNumIpRangeMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpRangeMappings.setStatus('current')
subscribersNumIpRangeMappingsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpRangeMappingsFree.setStatus('current')
subscribersNumVlanMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumVlanMappings.setStatus('current')
subscribersNumVlanMappingsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumVlanMappingsFree.setStatus('current')
subscribersNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumActive.setStatus('current')
subscribersNumActivePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumActivePeak.setStatus('current')
subscribersNumActivePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 11), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumActivePeakTime.setStatus('current')
subscribersNumUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumUpdates.setStatus('current')
subscribersCountersClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 13), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscribersCountersClearTime.setStatus('current')
subscribersNumTpIpRanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumTpIpRanges.setStatus('current')
subscribersNumTpIpRangesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumTpIpRangesFree.setStatus('current')
subscribersNumAnonymous = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumAnonymous.setStatus('current')
subscribersNumWithSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumWithSessions.setStatus('current')
tpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1), )
if mibBuilder.loadTexts: tpInfoTable.setStatus('current')
tpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "tpModuleIndex"), (0, "PCUBE-SE-MIB", "tpIndex"))
if mibBuilder.loadTexts: tpInfoEntry.setStatus('current')
tpModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpModuleIndex.setStatus('current')
tpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIndex.setStatus('current')
tpTotalNumHandledPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumHandledPackets.setStatus('current')
tpTotalNumHandledFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumHandledFlows.setStatus('current')
tpNumActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumActiveFlows.setStatus('current')
tpNumActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumActiveFlowsPeak.setStatus('current')
tpNumActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 7), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumActiveFlowsPeakTime.setStatus('current')
tpNumTcpActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumTcpActiveFlows.setStatus('current')
tpNumTcpActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumTcpActiveFlowsPeak.setStatus('current')
tpNumTcpActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 10), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumTcpActiveFlowsPeakTime.setStatus('current')
tpNumUdpActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumUdpActiveFlows.setStatus('current')
tpNumUdpActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumUdpActiveFlowsPeak.setStatus('current')
tpNumUdpActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 13), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumUdpActiveFlowsPeakTime.setStatus('current')
tpNumNonTcpUdpActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlows.setStatus('current')
tpNumNonTcpUdpActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlowsPeak.setStatus('current')
tpNumNonTcpUdpActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 16), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlowsPeakTime.setStatus('current')
tpTotalNumBlockedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumBlockedPackets.setStatus('current')
tpTotalNumBlockedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumBlockedFlows.setStatus('current')
tpTotalNumDiscardedPacketsDueToBwLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumDiscardedPacketsDueToBwLimit.setStatus('current')
tpTotalNumWredDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumWredDiscardedPackets.setStatus('current')
tpTotalNumFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumFragments.setStatus('current')
tpTotalNumNonIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumNonIpPackets.setStatus('current')
tpTotalNumIpCrcErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumIpCrcErrPackets.setStatus('current')
tpTotalNumIpLengthErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumIpLengthErrPackets.setStatus('current')
tpTotalNumIpBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumIpBroadcastPackets.setStatus('current')
tpTotalNumTtlErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumTtlErrPackets.setStatus('current')
tpTotalNumTcpUdpCrcErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumTcpUdpCrcErrPackets.setStatus('current')
tpClearCountersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 28), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpClearCountersTime.setStatus('current')
tpHandledPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledPacketsRate.setStatus('current')
tpHandledPacketsRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledPacketsRatePeak.setStatus('current')
tpHandledPacketsRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 31), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledPacketsRatePeakTime.setStatus('current')
tpHandledFlowsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledFlowsRate.setStatus('current')
tpHandledFlowsRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledFlowsRatePeak.setStatus('current')
tpHandledFlowsRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 34), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledFlowsRatePeakTime.setStatus('current')
tpCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpCpuUtilization.setStatus('current')
tpCpuUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpCpuUtilizationPeak.setStatus('current')
tpCpuUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 37), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpCpuUtilizationPeakTime.setStatus('current')
tpFlowsCapacityUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpFlowsCapacityUtilization.setStatus('current')
tpFlowsCapacityUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpFlowsCapacityUtilizationPeak.setStatus('current')
tpFlowsCapacityUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 40), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpFlowsCapacityUtilizationPeakTime.setStatus('current')
tpServiceLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpServiceLoss.setStatus('current')
pportTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1), )
if mibBuilder.loadTexts: pportTable.setStatus('current')
pportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pportModuleIndex"), (0, "PCUBE-SE-MIB", "pportIndex"))
if mibBuilder.loadTexts: pportEntry.setStatus('current')
pportModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportModuleIndex.setStatus('current')
pportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportIndex.setStatus('current')
pportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 11, 15, 28))).clone(namedValues=NamedValues(("other", 1), ("e100BaseTX", 11), ("e1000BaseT", 15), ("e1000BaseSX", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportType.setStatus('current')
pportNumTxQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportNumTxQueues.setStatus('current')
pportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportIfIndex.setStatus('current')
pportAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10000000, 100000000, 1000000000))).clone(namedValues=NamedValues(("autoNegotiation", 1), ("s10000000", 10000000), ("s100000000", 100000000), ("s1000000000", 1000000000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAdminSpeed.setStatus('current')
pportAdminDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAdminDuplex.setStatus('current')
pportOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOperDuplex.setStatus('current')
pportLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportLinkIndex.setStatus('current')
pportOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("reflectionForcingDown", 3), ("redundancyForcingDown", 4), ("otherDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOperStatus.setStatus('current')
txQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1), )
if mibBuilder.loadTexts: txQueuesTable.setStatus('current')
txQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "txQueuesModuleIndex"), (0, "PCUBE-SE-MIB", "txQueuesPortIndex"), (0, "PCUBE-SE-MIB", "txQueuesQueueIndex"))
if mibBuilder.loadTexts: txQueuesEntry.setStatus('current')
txQueuesModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesModuleIndex.setStatus('current')
txQueuesPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesPortIndex.setStatus('current')
txQueuesQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesQueueIndex.setStatus('current')
txQueuesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesDescription.setStatus('current')
txQueuesBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesBandwidth.setStatus('current')
txQueuesUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesUtilization.setStatus('current')
txQueuesUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesUtilizationPeak.setStatus('current')
txQueuesUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 8), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesUtilizationPeakTime.setStatus('current')
txQueuesClearCountersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 9), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txQueuesClearCountersTime.setStatus('current')
txQueuesDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesDroppedBytes.setStatus('current')
globalControllersTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1), )
if mibBuilder.loadTexts: globalControllersTable.setStatus('current')
globalControllersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "globalControllersModuleIndex"), (0, "PCUBE-SE-MIB", "globalControllersPortIndex"), (0, "PCUBE-SE-MIB", "globalControllersIndex"))
if mibBuilder.loadTexts: globalControllersEntry.setStatus('current')
globalControllersModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersModuleIndex.setStatus('current')
globalControllersPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersPortIndex.setStatus('current')
globalControllersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersIndex.setStatus('current')
globalControllersDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersDescription.setStatus('current')
globalControllersBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersBandwidth.setStatus('current')
globalControllersUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersUtilization.setStatus('current')
globalControllersUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersUtilizationPeak.setStatus('current')
globalControllersUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 8), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersUtilizationPeakTime.setStatus('current')
globalControllersClearCountersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 9), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalControllersClearCountersTime.setStatus('current')
globalControllersDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersDroppedBytes.setStatus('current')
appInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1), )
if mibBuilder.loadTexts: appInfoTable.setStatus('current')
appInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: appInfoEntry.setStatus('current')
appName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appName.setStatus('current')
appDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDescription.setStatus('current')
appVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appVersion.setStatus('current')
appPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2), )
if mibBuilder.loadTexts: appPropertiesTable.setStatus('current')
appPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "apIndex"))
if mibBuilder.loadTexts: appPropertiesEntry.setStatus('current')
apIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIndex.setStatus('current')
apName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apName.setStatus('current')
apType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apType.setStatus('current')
appPropertiesValueTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3), )
if mibBuilder.loadTexts: appPropertiesValueTable.setStatus('current')
appPropertiesValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "apvIndex"))
if mibBuilder.loadTexts: appPropertiesValueEntry.setStatus('current')
apvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: apvIndex.setStatus('current')
apvPropertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apvPropertyName.setStatus('current')
apvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apvRowStatus.setStatus('current')
apvPropertyStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apvPropertyStringValue.setStatus('current')
apvPropertyUintValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apvPropertyUintValue.setStatus('current')
apvPropertyCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apvPropertyCounter64Value.setStatus('current')
subscribersPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2), )
if mibBuilder.loadTexts: subscribersPropertiesTable.setStatus('current')
subscribersPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "spIndex"))
if mibBuilder.loadTexts: subscribersPropertiesEntry.setStatus('current')
spIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spIndex.setStatus('current')
spName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spName.setStatus('current')
spType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spType.setStatus('current')
subscribersPropertiesValueTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3), )
if mibBuilder.loadTexts: subscribersPropertiesValueTable.setStatus('current')
subscribersPropertiesValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "spvIndex"))
if mibBuilder.loadTexts: subscribersPropertiesValueEntry.setStatus('current')
spvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: spvIndex.setStatus('current')
spvSubName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvSubName.setStatus('current')
spvPropertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvPropertyName.setStatus('current')
spvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvRowStatus.setStatus('current')
spvPropertyStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvPropertyStringValue.setStatus('current')
spvPropertyUintValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvPropertyUintValue.setStatus('current')
spvPropertyCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvPropertyCounter64Value.setStatus('current')
trafficCountersTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1), )
if mibBuilder.loadTexts: trafficCountersTable.setStatus('current')
trafficCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "trafficCounterIndex"))
if mibBuilder.loadTexts: trafficCountersEntry.setStatus('current')
trafficCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterIndex.setStatus('current')
trafficCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterValue.setStatus('current')
trafficCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterName.setStatus('current')
trafficCounterType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bytes", 2), ("packets", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterType.setStatus('current')
attackTypeTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1), )
if mibBuilder.loadTexts: attackTypeTable.setStatus('current')
attackTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "attackTypeIndex"))
if mibBuilder.loadTexts: attackTypeEntry.setStatus('current')
attackTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeIndex.setStatus('current')
attackTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeName.setStatus('current')
attackTypeCurrentNumAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeCurrentNumAttacks.setStatus('current')
attackTypeTotalNumAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeTotalNumAttacks.setStatus('current')
attackTypeTotalNumFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeTotalNumFlows.setStatus('current')
attackTypeTotalNumSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeTotalNumSeconds.setStatus('current')
vasServerTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1), )
if mibBuilder.loadTexts: vasServerTable.setStatus('current')
vasServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "vasServerIndex"))
if mibBuilder.loadTexts: vasServerEntry.setStatus('current')
vasServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerIndex.setStatus('current')
vasServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerId.setStatus('current')
vasServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerAdminStatus.setStatus('current')
vasServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerOperStatus.setStatus('current')
mplsVpnSoftwareCountersTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1), )
if mibBuilder.loadTexts: mplsVpnSoftwareCountersTable.setStatus('current')
mplsVpnSoftwareCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: mplsVpnSoftwareCountersEntry.setStatus('current')
mplsVpnMaxHWMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnMaxHWMappings.setStatus('current')
mplsVpnCurrentHWMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnCurrentHWMappings.setStatus('current')
pcubeSeEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 3)).setObjects(("PCUBE-SE-MIB", "operationalStatusOperationalTrap"), ("PCUBE-SE-MIB", "operationalStatusWarningTrap"), ("PCUBE-SE-MIB", "operationalStatusFailureTrap"), ("PCUBE-SE-MIB", "systemResetTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOffTrap"), ("PCUBE-SE-MIB", "chassisVoltageAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisFansAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisPowerSupplyAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrNoActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrConnectionUpTrap"), ("PCUBE-SE-MIB", "rdrConnectionDownTrap"), ("PCUBE-SE-MIB", "telnetSessionStartedTrap"), ("PCUBE-SE-MIB", "telnetSessionEndedTrap"), ("PCUBE-SE-MIB", "telnetSessionDeniedAccessTrap"), ("PCUBE-SE-MIB", "telnetSessionBadLoginTrap"), ("PCUBE-SE-MIB", "loggerUserLogIsFullTrap"), ("PCUBE-SE-MIB", "sntpClockDriftWarnTrap"), ("PCUBE-SE-MIB", "linkModeBypassTrap"), ("PCUBE-SE-MIB", "linkModeForwardingTrap"), ("PCUBE-SE-MIB", "linkModeCutoffTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterActivatedTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterDeactivatedTrap"), ("PCUBE-SE-MIB", "moduleEmAgentGenericTrap"), ("PCUBE-SE-MIB", "linkModeSniffingTrap"), ("PCUBE-SE-MIB", "moduleRedundancyReadyTrap"), ("PCUBE-SE-MIB", "moduleRedundantConfigurationMismatchTrap"), ("PCUBE-SE-MIB", "moduleLostRedundancyTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionDownTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionUpTrap"), ("PCUBE-SE-MIB", "moduleOperStatusChangeTrap"), ("PCUBE-SE-MIB", "portOperStatusChangeTrap"), ("PCUBE-SE-MIB", "chassisLineFeedAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDiscardingReportsTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryStoppedDiscardingReportsTrap"), ("PCUBE-SE-MIB", "sessionStartedTrap"), ("PCUBE-SE-MIB", "sessionEndedTrap"), ("PCUBE-SE-MIB", "sessionDeniedAccessTrap"), ("PCUBE-SE-MIB", "sessionBadLoginTrap"), ("PCUBE-SE-MIB", "illegalSubscriberMappingTrap"), ("PCUBE-SE-MIB", "loggerLineAttackLogFullTrap"), ("PCUBE-SE-MIB", "vasServerOpertionalStatusChangeTrap"), ("PCUBE-SE-MIB", "pullRequestRetryFailedTrap"), ("PCUBE-SE-MIB", "mplsVpnTotalHWMappingsThresholdExceededTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSeEventsGroup = pcubeSeEventsGroup.setStatus('deprecated')
pcubeSeEventsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 4)).setObjects(("PCUBE-SE-MIB", "operationalStatusOperationalTrap"), ("PCUBE-SE-MIB", "operationalStatusWarningTrap"), ("PCUBE-SE-MIB", "operationalStatusFailureTrap"), ("PCUBE-SE-MIB", "systemResetTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOffTrap"), ("PCUBE-SE-MIB", "chassisVoltageAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisFansAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisPowerSupplyAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrNoActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrConnectionUpTrap"), ("PCUBE-SE-MIB", "rdrConnectionDownTrap"), ("PCUBE-SE-MIB", "loggerUserLogIsFullTrap"), ("PCUBE-SE-MIB", "sntpClockDriftWarnTrap"), ("PCUBE-SE-MIB", "linkModeBypassTrap"), ("PCUBE-SE-MIB", "linkModeForwardingTrap"), ("PCUBE-SE-MIB", "linkModeCutoffTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterActivatedTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterDeactivatedTrap"), ("PCUBE-SE-MIB", "moduleEmAgentGenericTrap"), ("PCUBE-SE-MIB", "linkModeSniffingTrap"), ("PCUBE-SE-MIB", "moduleRedundancyReadyTrap"), ("PCUBE-SE-MIB", "moduleRedundantConfigurationMismatchTrap"), ("PCUBE-SE-MIB", "moduleLostRedundancyTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionDownTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionUpTrap"), ("PCUBE-SE-MIB", "moduleOperStatusChangeTrap"), ("PCUBE-SE-MIB", "portOperStatusChangeTrap"), ("PCUBE-SE-MIB", "chassisLineFeedAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDiscardingReportsTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryStoppedDiscardingReportsTrap"), ("PCUBE-SE-MIB", "sessionStartedTrap"), ("PCUBE-SE-MIB", "sessionEndedTrap"), ("PCUBE-SE-MIB", "sessionDeniedAccessTrap"), ("PCUBE-SE-MIB", "sessionBadLoginTrap"), ("PCUBE-SE-MIB", "illegalSubscriberMappingTrap"), ("PCUBE-SE-MIB", "loggerLineAttackLogFullTrap"), ("PCUBE-SE-MIB", "vasServerOpertionalStatusChangeTrap"), ("PCUBE-SE-MIB", "pullRequestRetryFailedTrap"), ("PCUBE-SE-MIB", "mplsVpnTotalHWMappingsThresholdExceededTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSeEventsGroupRev1 = pcubeSeEventsGroupRev1.setStatus('current')
pcubeSeEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 0))
operationalStatusOperationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 1)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"))
if mibBuilder.loadTexts: operationalStatusOperationalTrap.setStatus('current')
operationalStatusWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 2)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"))
if mibBuilder.loadTexts: operationalStatusWarningTrap.setStatus('current')
operationalStatusFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 3)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"))
if mibBuilder.loadTexts: operationalStatusFailureTrap.setStatus('current')
systemResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 4))
if mibBuilder.loadTexts: systemResetTrap.setStatus('current')
chassisTempAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 5)).setObjects(("PCUBE-SE-MIB", "pchassisTempAlarm"))
if mibBuilder.loadTexts: chassisTempAlarmOnTrap.setStatus('current')
chassisTempAlarmOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 6)).setObjects(("PCUBE-SE-MIB", "pchassisTempAlarm"))
if mibBuilder.loadTexts: chassisTempAlarmOffTrap.setStatus('current')
chassisVoltageAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 7)).setObjects(("PCUBE-SE-MIB", "pchassisVoltageAlarm"))
if mibBuilder.loadTexts: chassisVoltageAlarmOnTrap.setStatus('current')
chassisFansAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 8)).setObjects(("PCUBE-SE-MIB", "pchassisFansAlarm"))
if mibBuilder.loadTexts: chassisFansAlarmOnTrap.setStatus('current')
chassisPowerSupplyAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 9)).setObjects(("PCUBE-SE-MIB", "pchassisPowerSupplyAlarm"))
if mibBuilder.loadTexts: chassisPowerSupplyAlarmOnTrap.setStatus('current')
rdrActiveConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 10)).setObjects(("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestStatus"))
if mibBuilder.loadTexts: rdrActiveConnectionTrap.setStatus('current')
rdrNoActiveConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 11))
if mibBuilder.loadTexts: rdrNoActiveConnectionTrap.setStatus('current')
rdrConnectionUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 12)).setObjects(("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestConnectionStatus"))
if mibBuilder.loadTexts: rdrConnectionUpTrap.setStatus('current')
rdrConnectionDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 13)).setObjects(("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestConnectionStatus"))
if mibBuilder.loadTexts: rdrConnectionDownTrap.setStatus('current')
telnetSessionStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 14))
if mibBuilder.loadTexts: telnetSessionStartedTrap.setStatus('deprecated')
telnetSessionEndedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 15))
if mibBuilder.loadTexts: telnetSessionEndedTrap.setStatus('deprecated')
telnetSessionDeniedAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 16))
if mibBuilder.loadTexts: telnetSessionDeniedAccessTrap.setStatus('deprecated')
telnetSessionBadLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 17))
if mibBuilder.loadTexts: telnetSessionBadLoginTrap.setStatus('deprecated')
loggerUserLogIsFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 18))
if mibBuilder.loadTexts: loggerUserLogIsFullTrap.setStatus('current')
sntpClockDriftWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 19))
if mibBuilder.loadTexts: sntpClockDriftWarnTrap.setStatus('current')
linkModeBypassTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 20)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeBypassTrap.setStatus('current')
linkModeForwardingTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 21)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeForwardingTrap.setStatus('current')
linkModeCutoffTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 22)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeCutoffTrap.setStatus('current')
pcubeSeEventGenericString1 = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 0, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcubeSeEventGenericString1.setStatus('current')
pcubeSeEventGenericString2 = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 0, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcubeSeEventGenericString2.setStatus('current')
moduleAttackFilterActivatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 25)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: moduleAttackFilterActivatedTrap.setStatus('current')
moduleAttackFilterDeactivatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 26)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString2"))
if mibBuilder.loadTexts: moduleAttackFilterDeactivatedTrap.setStatus('current')
moduleEmAgentGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 27)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString2"))
if mibBuilder.loadTexts: moduleEmAgentGenericTrap.setStatus('current')
linkModeSniffingTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 28)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeSniffingTrap.setStatus('current')
moduleRedundancyReadyTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 29)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if mibBuilder.loadTexts: moduleRedundancyReadyTrap.setStatus('current')
moduleRedundantConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 30)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: moduleRedundantConfigurationMismatchTrap.setStatus('current')
moduleLostRedundancyTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 31)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if mibBuilder.loadTexts: moduleLostRedundancyTrap.setStatus('current')
moduleSmConnectionDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 32)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: moduleSmConnectionDownTrap.setStatus('current')
moduleSmConnectionUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 33)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: moduleSmConnectionUpTrap.setStatus('current')
moduleOperStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 34)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if mibBuilder.loadTexts: moduleOperStatusChangeTrap.setStatus('current')
portOperStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 35)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pportIndex"), ("PCUBE-SE-MIB", "pportOperStatus"))
if mibBuilder.loadTexts: portOperStatusChangeTrap.setStatus('current')
chassisLineFeedAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 36)).setObjects(("PCUBE-SE-MIB", "pchassisLineFeedAlarm"))
if mibBuilder.loadTexts: chassisLineFeedAlarmOnTrap.setStatus('current')
rdrFormatterCategoryDiscardingReportsTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 37)).setObjects(("PCUBE-SE-MIB", "rdrFormatterCategoryIndex"))
if mibBuilder.loadTexts: rdrFormatterCategoryDiscardingReportsTrap.setStatus('current')
rdrFormatterCategoryStoppedDiscardingReportsTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 38)).setObjects(("PCUBE-SE-MIB", "rdrFormatterCategoryIndex"))
if mibBuilder.loadTexts: rdrFormatterCategoryStoppedDiscardingReportsTrap.setStatus('current')
sessionStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 39)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: sessionStartedTrap.setStatus('current')
sessionEndedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 40)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: sessionEndedTrap.setStatus('current')
sessionDeniedAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 41))
if mibBuilder.loadTexts: sessionDeniedAccessTrap.setStatus('current')
sessionBadLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 42))
if mibBuilder.loadTexts: sessionBadLoginTrap.setStatus('current')
illegalSubscriberMappingTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 43)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: illegalSubscriberMappingTrap.setStatus('current')
loggerLineAttackLogFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 44))
if mibBuilder.loadTexts: loggerLineAttackLogFullTrap.setStatus('current')
vasServerOpertionalStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 45)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "vasServerIndex"), ("PCUBE-SE-MIB", "vasServerId"), ("PCUBE-SE-MIB", "vasServerOperStatus"))
if mibBuilder.loadTexts: vasServerOpertionalStatusChangeTrap.setStatus('current')
pullRequestNumber = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 0, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pullRequestNumber.setStatus('current')
pullRequestRetryFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 47)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pullRequestNumber"))
if mibBuilder.loadTexts: pullRequestRetryFailedTrap.setStatus('current')
mplsVpnTotalHWMappingsThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 48)).setObjects(("PCUBE-SE-MIB", "mplsVpnCurrentHWMappings"))
if mibBuilder.loadTexts: mplsVpnTotalHWMappingsThresholdExceededTrap.setStatus('current')
pcubeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 2, 1)).setObjects(("PCUBE-SE-MIB", "pcubeSystemGroup"), ("PCUBE-SE-MIB", "pcubeChassisGroup"), ("PCUBE-SE-MIB", "pcuebModuleGroup"), ("PCUBE-SE-MIB", "pcubeLinkGroup"), ("PCUBE-SE-MIB", "pcubeDiskGroup"), ("PCUBE-SE-MIB", "pcubeRdrFormatterGroup"), ("PCUBE-SE-MIB", "pcubeLoggerGroup"), ("PCUBE-SE-MIB", "pcubeSubscribersGroup"), ("PCUBE-SE-MIB", "pcubeTrafficProcessorGroup"), ("PCUBE-SE-MIB", "pcubePortGroup"), ("PCUBE-SE-MIB", "pcubeTxQueuesGroup"), ("PCUBE-SE-MIB", "pcubeGlobalControllersGroup"), ("PCUBE-SE-MIB", "pcubeApplicationGroup"), ("PCUBE-SE-MIB", "pcubeTrafficCountersGroup"), ("PCUBE-SE-MIB", "pcubeAttackGroup"), ("PCUBE-SE-MIB", "pcubeVasTrafficForwardingGroup"), ("PCUBE-SE-MIB", "pcubeTrapObjectsGroup"), ("PCUBE-SE-MIB", "pcubeMplsVpnAutoLearnGroup"), ("PCUBE-SE-MIB", "pcubeSeEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeCompliance = pcubeCompliance.setStatus('deprecated')
pcubeComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 2, 2)).setObjects(("PCUBE-SE-MIB", "pcubeSystemGroup"), ("PCUBE-SE-MIB", "pcubeChassisGroup"), ("PCUBE-SE-MIB", "pcuebModuleGroup"), ("PCUBE-SE-MIB", "pcubeLinkGroup"), ("PCUBE-SE-MIB", "pcubeDiskGroup"), ("PCUBE-SE-MIB", "pcubeRdrFormatterGroup"), ("PCUBE-SE-MIB", "pcubeLoggerGroup"), ("PCUBE-SE-MIB", "pcubeSubscribersGroup"), ("PCUBE-SE-MIB", "pcubeTrafficProcessorGroup"), ("PCUBE-SE-MIB", "pcubePortGroup"), ("PCUBE-SE-MIB", "pcubeTxQueuesGroup"), ("PCUBE-SE-MIB", "pcubeGlobalControllersGroup"), ("PCUBE-SE-MIB", "pcubeApplicationGroup"), ("PCUBE-SE-MIB", "pcubeTrafficCountersGroup"), ("PCUBE-SE-MIB", "pcubeAttackGroup"), ("PCUBE-SE-MIB", "pcubeVasTrafficForwardingGroup"), ("PCUBE-SE-MIB", "pcubeTrapObjectsGroup"), ("PCUBE-SE-MIB", "pcubeMplsVpnAutoLearnGroup"), ("PCUBE-SE-MIB", "pcubeSeEventsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeComplianceRev1 = pcubeComplianceRev1.setStatus('current')
pcubeSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 1)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"), ("PCUBE-SE-MIB", "sysFailureRecovery"), ("PCUBE-SE-MIB", "sysVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSystemGroup = pcubeSystemGroup.setStatus('current')
pcubeChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 2)).setObjects(("PCUBE-SE-MIB", "pchassisSysType"), ("PCUBE-SE-MIB", "pchassisPowerSupplyAlarm"), ("PCUBE-SE-MIB", "pchassisFansAlarm"), ("PCUBE-SE-MIB", "pchassisTempAlarm"), ("PCUBE-SE-MIB", "pchassisVoltageAlarm"), ("PCUBE-SE-MIB", "pchassisNumSlots"), ("PCUBE-SE-MIB", "pchassisSlotConfig"), ("PCUBE-SE-MIB", "pchassisPsuType"), ("PCUBE-SE-MIB", "pchassisLineFeedAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeChassisGroup = pcubeChassisGroup.setStatus('current')
pcuebModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 3)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleType"), ("PCUBE-SE-MIB", "pmoduleNumTrafficProcessors"), ("PCUBE-SE-MIB", "pmoduleSlotNum"), ("PCUBE-SE-MIB", "pmoduleHwVersion"), ("PCUBE-SE-MIB", "pmoduleNumPorts"), ("PCUBE-SE-MIB", "pmoduleNumLinks"), ("PCUBE-SE-MIB", "pmoduleConnectionMode"), ("PCUBE-SE-MIB", "pmoduleSerialNumber"), ("PCUBE-SE-MIB", "pmoduleUpStreamAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleUpStreamLastAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleDownStreamAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleDownStreamLastAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleAttackObjectsClearTime"), ("PCUBE-SE-MIB", "pmoduleAdminStatus"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcuebModuleGroup = pcuebModuleGroup.setStatus('current')
pcubeLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 4)).setObjects(("PCUBE-SE-MIB", "linkModuleIndex"), ("PCUBE-SE-MIB", "linkIndex"), ("PCUBE-SE-MIB", "linkAdminModeOnActive"), ("PCUBE-SE-MIB", "linkAdminModeOnFailure"), ("PCUBE-SE-MIB", "linkOperMode"), ("PCUBE-SE-MIB", "linkStatusReflectionEnable"), ("PCUBE-SE-MIB", "linkSubscriberSidePortIndex"), ("PCUBE-SE-MIB", "linkNetworkSidePortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeLinkGroup = pcubeLinkGroup.setStatus('current')
pcubeDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 5)).setObjects(("PCUBE-SE-MIB", "diskNumUsedBytes"), ("PCUBE-SE-MIB", "diskNumFreeBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeDiskGroup = pcubeDiskGroup.setStatus('current')
pcubeRdrFormatterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 6)).setObjects(("PCUBE-SE-MIB", "rdrFormatterEnable"), ("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestPort"), ("PCUBE-SE-MIB", "rdrFormatterDestPriority"), ("PCUBE-SE-MIB", "rdrFormatterDestStatus"), ("PCUBE-SE-MIB", "rdrFormatterDestConnectionStatus"), ("PCUBE-SE-MIB", "rdrFormatterDestNumReportsSent"), ("PCUBE-SE-MIB", "rdrFormatterDestNumReportsDiscarded"), ("PCUBE-SE-MIB", "rdrFormatterDestReportRate"), ("PCUBE-SE-MIB", "rdrFormatterDestReportRatePeak"), ("PCUBE-SE-MIB", "rdrFormatterDestReportRatePeakTime"), ("PCUBE-SE-MIB", "rdrFormatterNumReportsSent"), ("PCUBE-SE-MIB", "rdrFormatterNumReportsDiscarded"), ("PCUBE-SE-MIB", "rdrFormatterClearCountersTime"), ("PCUBE-SE-MIB", "rdrFormatterReportRate"), ("PCUBE-SE-MIB", "rdrFormatterReportRatePeak"), ("PCUBE-SE-MIB", "rdrFormatterReportRatePeakTime"), ("PCUBE-SE-MIB", "rdrFormatterProtocol"), ("PCUBE-SE-MIB", "rdrFormatterForwardingMode"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDestPriority"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDestStatus"), ("PCUBE-SE-MIB", "rdrFormatterCategoryIndex"), ("PCUBE-SE-MIB", "rdrFormatterCategoryName"), ("PCUBE-SE-MIB", "rdrFormatterCategoryNumReportsSent"), ("PCUBE-SE-MIB", "rdrFormatterCategoryNumReportsDiscarded"), ("PCUBE-SE-MIB", "rdrFormatterCategoryReportRate"), ("PCUBE-SE-MIB", "rdrFormatterCategoryReportRatePeak"), ("PCUBE-SE-MIB", "rdrFormatterCategoryReportRatePeakTime"), ("PCUBE-SE-MIB", "rdrFormatterCategoryNumReportsQueued"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeRdrFormatterGroup = pcubeRdrFormatterGroup.setStatus('current')
pcubeLoggerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 7)).setObjects(("PCUBE-SE-MIB", "loggerUserLogEnable"), ("PCUBE-SE-MIB", "loggerUserLogNumInfo"), ("PCUBE-SE-MIB", "loggerUserLogNumWarning"), ("PCUBE-SE-MIB", "loggerUserLogNumError"), ("PCUBE-SE-MIB", "loggerUserLogNumFatal"), ("PCUBE-SE-MIB", "loggerUserLogClearCountersTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeLoggerGroup = pcubeLoggerGroup.setStatus('current')
pcubeSubscribersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 8)).setObjects(("PCUBE-SE-MIB", "subscribersNumIntroduced"), ("PCUBE-SE-MIB", "subscribersNumFree"), ("PCUBE-SE-MIB", "subscribersNumIpAddrMappings"), ("PCUBE-SE-MIB", "subscribersNumIpAddrMappingsFree"), ("PCUBE-SE-MIB", "subscribersNumIpRangeMappings"), ("PCUBE-SE-MIB", "subscribersNumIpRangeMappingsFree"), ("PCUBE-SE-MIB", "subscribersNumVlanMappings"), ("PCUBE-SE-MIB", "subscribersNumVlanMappingsFree"), ("PCUBE-SE-MIB", "subscribersNumActive"), ("PCUBE-SE-MIB", "subscribersNumActivePeak"), ("PCUBE-SE-MIB", "subscribersNumActivePeakTime"), ("PCUBE-SE-MIB", "subscribersNumUpdates"), ("PCUBE-SE-MIB", "subscribersCountersClearTime"), ("PCUBE-SE-MIB", "subscribersNumTpIpRanges"), ("PCUBE-SE-MIB", "subscribersNumTpIpRangesFree"), ("PCUBE-SE-MIB", "subscribersNumAnonymous"), ("PCUBE-SE-MIB", "subscribersNumWithSessions"), ("PCUBE-SE-MIB", "spIndex"), ("PCUBE-SE-MIB", "spName"), ("PCUBE-SE-MIB", "spType"), ("PCUBE-SE-MIB", "spvSubName"), ("PCUBE-SE-MIB", "spvPropertyName"), ("PCUBE-SE-MIB", "spvRowStatus"), ("PCUBE-SE-MIB", "spvPropertyStringValue"), ("PCUBE-SE-MIB", "spvPropertyUintValue"), ("PCUBE-SE-MIB", "spvPropertyCounter64Value"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSubscribersGroup = pcubeSubscribersGroup.setStatus('current')
pcubeTrafficProcessorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 9)).setObjects(("PCUBE-SE-MIB", "tpModuleIndex"), ("PCUBE-SE-MIB", "tpIndex"), ("PCUBE-SE-MIB", "tpTotalNumHandledPackets"), ("PCUBE-SE-MIB", "tpTotalNumHandledFlows"), ("PCUBE-SE-MIB", "tpNumActiveFlows"), ("PCUBE-SE-MIB", "tpNumActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpNumTcpActiveFlows"), ("PCUBE-SE-MIB", "tpNumTcpActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumTcpActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpNumUdpActiveFlows"), ("PCUBE-SE-MIB", "tpNumUdpActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumUdpActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpNumNonTcpUdpActiveFlows"), ("PCUBE-SE-MIB", "tpNumNonTcpUdpActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumNonTcpUdpActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpTotalNumBlockedPackets"), ("PCUBE-SE-MIB", "tpTotalNumBlockedFlows"), ("PCUBE-SE-MIB", "tpTotalNumDiscardedPacketsDueToBwLimit"), ("PCUBE-SE-MIB", "tpTotalNumWredDiscardedPackets"), ("PCUBE-SE-MIB", "tpTotalNumFragments"), ("PCUBE-SE-MIB", "tpTotalNumNonIpPackets"), ("PCUBE-SE-MIB", "tpTotalNumIpCrcErrPackets"), ("PCUBE-SE-MIB", "tpTotalNumIpLengthErrPackets"), ("PCUBE-SE-MIB", "tpTotalNumIpBroadcastPackets"), ("PCUBE-SE-MIB", "tpTotalNumTtlErrPackets"), ("PCUBE-SE-MIB", "tpTotalNumTcpUdpCrcErrPackets"), ("PCUBE-SE-MIB", "tpClearCountersTime"), ("PCUBE-SE-MIB", "tpHandledPacketsRate"), ("PCUBE-SE-MIB", "tpHandledPacketsRatePeak"), ("PCUBE-SE-MIB", "tpHandledPacketsRatePeakTime"), ("PCUBE-SE-MIB", "tpHandledFlowsRate"), ("PCUBE-SE-MIB", "tpHandledFlowsRatePeak"), ("PCUBE-SE-MIB", "tpHandledFlowsRatePeakTime"), ("PCUBE-SE-MIB", "tpCpuUtilization"), ("PCUBE-SE-MIB", "tpCpuUtilizationPeak"), ("PCUBE-SE-MIB", "tpCpuUtilizationPeakTime"), ("PCUBE-SE-MIB", "tpFlowsCapacityUtilization"), ("PCUBE-SE-MIB", "tpFlowsCapacityUtilizationPeak"), ("PCUBE-SE-MIB", "tpFlowsCapacityUtilizationPeakTime"), ("PCUBE-SE-MIB", "tpServiceLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTrafficProcessorGroup = pcubeTrafficProcessorGroup.setStatus('current')
pcubePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 10)).setObjects(("PCUBE-SE-MIB", "pportModuleIndex"), ("PCUBE-SE-MIB", "pportIndex"), ("PCUBE-SE-MIB", "pportType"), ("PCUBE-SE-MIB", "pportNumTxQueues"), ("PCUBE-SE-MIB", "pportIfIndex"), ("PCUBE-SE-MIB", "pportAdminSpeed"), ("PCUBE-SE-MIB", "pportAdminDuplex"), ("PCUBE-SE-MIB", "pportOperDuplex"), ("PCUBE-SE-MIB", "pportLinkIndex"), ("PCUBE-SE-MIB", "pportOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubePortGroup = pcubePortGroup.setStatus('current')
pcubeTxQueuesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 11)).setObjects(("PCUBE-SE-MIB", "txQueuesModuleIndex"), ("PCUBE-SE-MIB", "txQueuesPortIndex"), ("PCUBE-SE-MIB", "txQueuesQueueIndex"), ("PCUBE-SE-MIB", "txQueuesDescription"), ("PCUBE-SE-MIB", "txQueuesBandwidth"), ("PCUBE-SE-MIB", "txQueuesUtilization"), ("PCUBE-SE-MIB", "txQueuesUtilizationPeak"), ("PCUBE-SE-MIB", "txQueuesUtilizationPeakTime"), ("PCUBE-SE-MIB", "txQueuesClearCountersTime"), ("PCUBE-SE-MIB", "txQueuesDroppedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTxQueuesGroup = pcubeTxQueuesGroup.setStatus('current')
pcubeGlobalControllersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 12)).setObjects(("PCUBE-SE-MIB", "globalControllersModuleIndex"), ("PCUBE-SE-MIB", "globalControllersPortIndex"), ("PCUBE-SE-MIB", "globalControllersIndex"), ("PCUBE-SE-MIB", "globalControllersDescription"), ("PCUBE-SE-MIB", "globalControllersBandwidth"), ("PCUBE-SE-MIB", "globalControllersUtilization"), ("PCUBE-SE-MIB", "globalControllersUtilizationPeak"), ("PCUBE-SE-MIB", "globalControllersUtilizationPeakTime"), ("PCUBE-SE-MIB", "globalControllersClearCountersTime"), ("PCUBE-SE-MIB", "globalControllersDroppedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeGlobalControllersGroup = pcubeGlobalControllersGroup.setStatus('current')
pcubeApplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 13)).setObjects(("PCUBE-SE-MIB", "appName"), ("PCUBE-SE-MIB", "appDescription"), ("PCUBE-SE-MIB", "appVersion"), ("PCUBE-SE-MIB", "apIndex"), ("PCUBE-SE-MIB", "apName"), ("PCUBE-SE-MIB", "apType"), ("PCUBE-SE-MIB", "apvPropertyName"), ("PCUBE-SE-MIB", "apvRowStatus"), ("PCUBE-SE-MIB", "apvPropertyStringValue"), ("PCUBE-SE-MIB", "apvPropertyUintValue"), ("PCUBE-SE-MIB", "apvPropertyCounter64Value"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeApplicationGroup = pcubeApplicationGroup.setStatus('current')
pcubeTrafficCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 14)).setObjects(("PCUBE-SE-MIB", "trafficCounterIndex"), ("PCUBE-SE-MIB", "trafficCounterValue"), ("PCUBE-SE-MIB", "trafficCounterName"), ("PCUBE-SE-MIB", "trafficCounterType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTrafficCountersGroup = pcubeTrafficCountersGroup.setStatus('current')
pcubeAttackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 15)).setObjects(("PCUBE-SE-MIB", "attackTypeIndex"), ("PCUBE-SE-MIB", "attackTypeName"), ("PCUBE-SE-MIB", "attackTypeCurrentNumAttacks"), ("PCUBE-SE-MIB", "attackTypeTotalNumAttacks"), ("PCUBE-SE-MIB", "attackTypeTotalNumFlows"), ("PCUBE-SE-MIB", "attackTypeTotalNumSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeAttackGroup = pcubeAttackGroup.setStatus('current')
pcubeVasTrafficForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 16)).setObjects(("PCUBE-SE-MIB", "vasServerIndex"), ("PCUBE-SE-MIB", "vasServerId"), ("PCUBE-SE-MIB", "vasServerAdminStatus"), ("PCUBE-SE-MIB", "vasServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeVasTrafficForwardingGroup = pcubeVasTrafficForwardingGroup.setStatus('current')
pcubeMplsVpnAutoLearnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 17)).setObjects(("PCUBE-SE-MIB", "mplsVpnMaxHWMappings"), ("PCUBE-SE-MIB", "mplsVpnCurrentHWMappings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeMplsVpnAutoLearnGroup = pcubeMplsVpnAutoLearnGroup.setStatus('current')
pcubeTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 18)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString2"), ("PCUBE-SE-MIB", "pullRequestNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTrapObjectsGroup = pcubeTrapObjectsGroup.setStatus('current')
mibBuilder.exportSymbols("PCUBE-SE-MIB", rdrConnectionUpTrap=rdrConnectionUpTrap, pportTable=pportTable, moduleRedundantConfigurationMismatchTrap=moduleRedundantConfigurationMismatchTrap, subscribersNumIpRangeMappingsFree=subscribersNumIpRangeMappingsFree, pmoduleGrp=pmoduleGrp, tpNumTcpActiveFlows=tpNumTcpActiveFlows, apType=apType, pcubeTrafficCountersGroup=pcubeTrafficCountersGroup, vasServerOpertionalStatusChangeTrap=vasServerOpertionalStatusChangeTrap, txQueuesModuleIndex=txQueuesModuleIndex, tpHandledPacketsRate=tpHandledPacketsRate, tpHandledPacketsRatePeakTime=tpHandledPacketsRatePeakTime, sysOperationalStatus=sysOperationalStatus, globalControllersDescription=globalControllersDescription, telnetSessionEndedTrap=telnetSessionEndedTrap, moduleAttackFilterDeactivatedTrap=moduleAttackFilterDeactivatedTrap, tpNumUdpActiveFlows=tpNumUdpActiveFlows, rdrFormatterCategoryNumReportsQueued=rdrFormatterCategoryNumReportsQueued, moduleSmConnectionDownTrap=moduleSmConnectionDownTrap, chassisTempAlarmOnTrap=chassisTempAlarmOnTrap, diskNumFreeBytes=diskNumFreeBytes, rdrFormatterReportRate=rdrFormatterReportRate, rdrFormatterCategoryTable=rdrFormatterCategoryTable, tpServiceLoss=tpServiceLoss, loggerLineAttackLogFullTrap=loggerLineAttackLogFullTrap, txQueuesUtilizationPeakTime=txQueuesUtilizationPeakTime, rdrFormatterCategoryNumReportsSent=rdrFormatterCategoryNumReportsSent, trafficProcessorGrp=trafficProcessorGrp, pcubeSeEventGenericString1=pcubeSeEventGenericString1, rdrFormatterCategoryDiscardingReportsTrap=rdrFormatterCategoryDiscardingReportsTrap, spvPropertyName=spvPropertyName, pchassisSysType=pchassisSysType, tpNumNonTcpUdpActiveFlowsPeak=tpNumNonTcpUdpActiveFlowsPeak, globalControllersPortIndex=globalControllersPortIndex, loggerUserLogIsFullTrap=loggerUserLogIsFullTrap, subscribersPropertiesValueTable=subscribersPropertiesValueTable, tpTotalNumWredDiscardedPackets=tpTotalNumWredDiscardedPackets, apvPropertyName=apvPropertyName, moduleAttackFilterActivatedTrap=moduleAttackFilterActivatedTrap, pcubeSubscribersGroup=pcubeSubscribersGroup, vasTrafficForwardingGrp=vasTrafficForwardingGrp, appInfoEntry=appInfoEntry, tpFlowsCapacityUtilization=tpFlowsCapacityUtilization, vasServerIndex=vasServerIndex, moduleRedundancyReadyTrap=moduleRedundancyReadyTrap, linkModeSniffingTrap=linkModeSniffingTrap, chassisPowerSupplyAlarmOnTrap=chassisPowerSupplyAlarmOnTrap, vasServerTable=vasServerTable, tpTotalNumBlockedPackets=tpTotalNumBlockedPackets, trafficCountersEntry=trafficCountersEntry, pcubeVasTrafficForwardingGroup=pcubeVasTrafficForwardingGroup, linkGrp=linkGrp, pullRequestNumber=pullRequestNumber, rdrFormatterEnable=rdrFormatterEnable, trafficCounterValue=trafficCounterValue, subscribersNumTpIpRanges=subscribersNumTpIpRanges, pcubeComplianceRev1=pcubeComplianceRev1, attackTypeIndex=attackTypeIndex, linkStatusReflectionEnable=linkStatusReflectionEnable, rdrFormatterDestPort=rdrFormatterDestPort, appName=appName, linkAdminModeOnFailure=linkAdminModeOnFailure, rdrFormatterDestConnectionStatus=rdrFormatterDestConnectionStatus, subscribersNumFree=subscribersNumFree, globalControllersGrp=globalControllersGrp, mplsVpnMaxHWMappings=mplsVpnMaxHWMappings, rdrFormatterCategoryEntry=rdrFormatterCategoryEntry, trafficCountersTable=trafficCountersTable, chassisLineFeedAlarmOnTrap=chassisLineFeedAlarmOnTrap, tpTotalNumHandledFlows=tpTotalNumHandledFlows, mplsVpnSoftwareCountersEntry=mplsVpnSoftwareCountersEntry, moduleEmAgentGenericTrap=moduleEmAgentGenericTrap, attackTypeEntry=attackTypeEntry, rdrFormatterNumReportsDiscarded=rdrFormatterNumReportsDiscarded, sessionDeniedAccessTrap=sessionDeniedAccessTrap, subscribersPropertiesTable=subscribersPropertiesTable, pchassisNumSlots=pchassisNumSlots, rdrConnectionDownTrap=rdrConnectionDownTrap, pullRequestRetryFailedTrap=pullRequestRetryFailedTrap, subscribersPropertiesValueEntry=subscribersPropertiesValueEntry, subscribersNumIpAddrMappingsFree=subscribersNumIpAddrMappingsFree, pcubeRdrFormatterGroup=pcubeRdrFormatterGroup, attackTypeTable=attackTypeTable, mplsVpnAutoLearnGrp=mplsVpnAutoLearnGrp, pcubeApplicationGroup=pcubeApplicationGroup, pcubeLoggerGroup=pcubeLoggerGroup, tpNumActiveFlowsPeakTime=tpNumActiveFlowsPeakTime, tpInfoEntry=tpInfoEntry, pchassisPowerSupplyAlarm=pchassisPowerSupplyAlarm, sysFailureRecovery=sysFailureRecovery, pmoduleUpStreamAttackFilteringTime=pmoduleUpStreamAttackFilteringTime, subscribersNumWithSessions=subscribersNumWithSessions, tpFlowsCapacityUtilizationPeak=tpFlowsCapacityUtilizationPeak, pportOperStatus=pportOperStatus, apvIndex=apvIndex, applicationGrp=applicationGrp, pportEntry=pportEntry, pcubeSeEventsGroupRev1=pcubeSeEventsGroupRev1, appPropertiesEntry=appPropertiesEntry, operationalStatusOperationalTrap=operationalStatusOperationalTrap, vasServerAdminStatus=vasServerAdminStatus, rdrFormatterForwardingMode=rdrFormatterForwardingMode, rdrFormatterCategoryStoppedDiscardingReportsTrap=rdrFormatterCategoryStoppedDiscardingReportsTrap, attackTypeTotalNumAttacks=attackTypeTotalNumAttacks, linkModeCutoffTrap=linkModeCutoffTrap, loggerUserLogClearCountersTime=loggerUserLogClearCountersTime, pmoduleOperStatus=pmoduleOperStatus, tpClearCountersTime=tpClearCountersTime, systemGrp=systemGrp, pmoduleDownStreamAttackFilteringTime=pmoduleDownStreamAttackFilteringTime, rdrFormatterCategoryName=rdrFormatterCategoryName, rdrFormatterDestNumReportsSent=rdrFormatterDestNumReportsSent, linkModeForwardingTrap=linkModeForwardingTrap, pcubeTxQueuesGroup=pcubeTxQueuesGroup, pcuebModuleGroup=pcuebModuleGroup, rdrFormatterDestReportRatePeakTime=rdrFormatterDestReportRatePeakTime, linkOperMode=linkOperMode, spvPropertyUintValue=spvPropertyUintValue, spvRowStatus=spvRowStatus, subscribersNumIntroduced=subscribersNumIntroduced, apName=apName, globalControllersModuleIndex=globalControllersModuleIndex, attackTypeCurrentNumAttacks=attackTypeCurrentNumAttacks, tpNumActiveFlows=tpNumActiveFlows, appInfoTable=appInfoTable, subscribersNumActivePeakTime=subscribersNumActivePeakTime, sntpClockDriftWarnTrap=sntpClockDriftWarnTrap, trafficCountersGrp=trafficCountersGrp, pmoduleUpStreamLastAttackFilteringTime=pmoduleUpStreamLastAttackFilteringTime, linkSubscriberSidePortIndex=linkSubscriberSidePortIndex, attackTypeTotalNumSeconds=attackTypeTotalNumSeconds, diskGrp=diskGrp, rdrFormatterCategoryReportRate=rdrFormatterCategoryReportRate, rdrFormatterCategoryDestStatus=rdrFormatterCategoryDestStatus, rdrFormatterDestReportRate=rdrFormatterDestReportRate, tpNumActiveFlowsPeak=tpNumActiveFlowsPeak, pmoduleDownStreamLastAttackFilteringTime=pmoduleDownStreamLastAttackFilteringTime, tpInfoTable=tpInfoTable, sysVersion=sysVersion, pmoduleSerialNumber=pmoduleSerialNumber, linkAdminModeOnActive=linkAdminModeOnActive, pcubeSystemGroup=pcubeSystemGroup, appDescription=appDescription, spvSubName=spvSubName, rdrFormatterCategoryDestEntry=rdrFormatterCategoryDestEntry, subscribersCountersClearTime=subscribersCountersClearTime, pcubeSeEventGenericString2=pcubeSeEventGenericString2, globalControllersUtilizationPeakTime=globalControllersUtilizationPeakTime, linkModuleIndex=linkModuleIndex, pcubeAttackGroup=pcubeAttackGroup, subscribersNumIpRangeMappings=subscribersNumIpRangeMappings, tpTotalNumNonIpPackets=tpTotalNumNonIpPackets, loggerUserLogNumWarning=loggerUserLogNumWarning, txQueuesBandwidth=txQueuesBandwidth, pchassisFansAlarm=pchassisFansAlarm, mplsVpnTotalHWMappingsThresholdExceededTrap=mplsVpnTotalHWMappingsThresholdExceededTrap, globalControllersUtilizationPeak=globalControllersUtilizationPeak, pchassisGrp=pchassisGrp, subscribersNumAnonymous=subscribersNumAnonymous, pportOperDuplex=pportOperDuplex, rdrFormatterDestIPAddr=rdrFormatterDestIPAddr, pmoduleNumTrafficProcessors=pmoduleNumTrafficProcessors, tpNumNonTcpUdpActiveFlowsPeakTime=tpNumNonTcpUdpActiveFlowsPeakTime, tpModuleIndex=tpModuleIndex, pcubeSEObjs=pcubeSEObjs, tpTotalNumTcpUdpCrcErrPackets=tpTotalNumTcpUdpCrcErrPackets, pmoduleConnectionMode=pmoduleConnectionMode, txQueuesDroppedBytes=txQueuesDroppedBytes, txQueuesEntry=txQueuesEntry, pmoduleAttackObjectsClearTime=pmoduleAttackObjectsClearTime, pmoduleTable=pmoduleTable, pportType=pportType, pportIfIndex=pportIfIndex, rdrFormatterCategoryIndex=rdrFormatterCategoryIndex, illegalSubscriberMappingTrap=illegalSubscriberMappingTrap, globalControllersBandwidth=globalControllersBandwidth, subscribersNumActive=subscribersNumActive, chassisFansAlarmOnTrap=chassisFansAlarmOnTrap, rdrFormatterDestPriority=rdrFormatterDestPriority, vasServerOperStatus=vasServerOperStatus, pcubeChassisGroup=pcubeChassisGroup, rdrFormatterDestStatus=rdrFormatterDestStatus, pportAdminDuplex=pportAdminDuplex, loggerUserLogNumError=loggerUserLogNumError, pportNumTxQueues=pportNumTxQueues, mplsVpnSoftwareCountersTable=mplsVpnSoftwareCountersTable, tpNumTcpActiveFlowsPeakTime=tpNumTcpActiveFlowsPeakTime, attackTypeName=attackTypeName, chassisTempAlarmOffTrap=chassisTempAlarmOffTrap, loggerUserLogNumInfo=loggerUserLogNumInfo, pcubeSeCompliances=pcubeSeCompliances, rdrFormatterDestEntry=rdrFormatterDestEntry, tpCpuUtilizationPeakTime=tpCpuUtilizationPeakTime, pmoduleHwVersion=pmoduleHwVersion, diskNumUsedBytes=diskNumUsedBytes, tpCpuUtilizationPeak=tpCpuUtilizationPeak, tpTotalNumBlockedFlows=tpTotalNumBlockedFlows, tpTotalNumIpCrcErrPackets=tpTotalNumIpCrcErrPackets, pcubeSeEventsGroup=pcubeSeEventsGroup, rdrActiveConnectionTrap=rdrActiveConnectionTrap, tpHandledPacketsRatePeak=tpHandledPacketsRatePeak, apIndex=apIndex, pmoduleType=pmoduleType, portOperStatusChangeTrap=portOperStatusChangeTrap, txQueuesUtilizationPeak=txQueuesUtilizationPeak, loggerUserLogEnable=loggerUserLogEnable, apvPropertyCounter64Value=apvPropertyCounter64Value, rdrFormatterReportRatePeakTime=rdrFormatterReportRatePeakTime, pportLinkIndex=pportLinkIndex, txQueuesGrp=txQueuesGrp, pmoduleEntry=pmoduleEntry, spvIndex=spvIndex, pcubeTrapObjectsGroup=pcubeTrapObjectsGroup, subscribersNumIpAddrMappings=subscribersNumIpAddrMappings, vasServerId=vasServerId, pcubeSeGroups=pcubeSeGroups, linkTable=linkTable, moduleOperStatusChangeTrap=moduleOperStatusChangeTrap, pcubeDiskGroup=pcubeDiskGroup, rdrFormatterCategoryDestTable=rdrFormatterCategoryDestTable, linkEntry=linkEntry, apvRowStatus=apvRowStatus, rdrFormatterDestReportRatePeak=rdrFormatterDestReportRatePeak, pchassisVoltageAlarm=pchassisVoltageAlarm, globalControllersClearCountersTime=globalControllersClearCountersTime, globalControllersTable=globalControllersTable, LinkModeType=LinkModeType, txQueuesUtilization=txQueuesUtilization, trafficCounterType=trafficCounterType, loggerGrp=loggerGrp, subscribersInfoEntry=subscribersInfoEntry, tpFlowsCapacityUtilizationPeakTime=tpFlowsCapacityUtilizationPeakTime, subscribersNumActivePeak=subscribersNumActivePeak, operationalStatusWarningTrap=operationalStatusWarningTrap, tpNumUdpActiveFlowsPeak=tpNumUdpActiveFlowsPeak, tpTotalNumHandledPackets=tpTotalNumHandledPackets, sessionBadLoginTrap=sessionBadLoginTrap, tpTotalNumIpLengthErrPackets=tpTotalNumIpLengthErrPackets, tpNumUdpActiveFlowsPeakTime=tpNumUdpActiveFlowsPeakTime, rdrFormatterNumReportsSent=rdrFormatterNumReportsSent, txQueuesTable=txQueuesTable, rdrFormatterCategoryReportRatePeakTime=rdrFormatterCategoryReportRatePeakTime, pportAdminSpeed=pportAdminSpeed, PYSNMP_MODULE_ID=pcubeSeMIB, attackTypeTotalNumFlows=attackTypeTotalNumFlows, pmoduleNumLinks=pmoduleNumLinks, mplsVpnCurrentHWMappings=mplsVpnCurrentHWMappings, tpCpuUtilization=tpCpuUtilization, linkNetworkSidePortIndex=linkNetworkSidePortIndex, sessionStartedTrap=sessionStartedTrap, appPropertiesTable=appPropertiesTable, subscribersPropertiesEntry=subscribersPropertiesEntry, tpTotalNumDiscardedPacketsDueToBwLimit=tpTotalNumDiscardedPacketsDueToBwLimit, subscribersGrp=subscribersGrp)
mibBuilder.exportSymbols("PCUBE-SE-MIB", tpNumNonTcpUdpActiveFlows=tpNumNonTcpUdpActiveFlows, pcubeSeConformance=pcubeSeConformance, tpTotalNumTtlErrPackets=tpTotalNumTtlErrPackets, subscribersNumVlanMappings=subscribersNumVlanMappings, moduleLostRedundancyTrap=moduleLostRedundancyTrap, pcubeCompliance=pcubeCompliance, spvPropertyCounter64Value=spvPropertyCounter64Value, rdrFormatterCategoryNumReportsDiscarded=rdrFormatterCategoryNumReportsDiscarded, rdrFormatterCategoryDestPriority=rdrFormatterCategoryDestPriority, rdrFormatterCategoryReportRatePeak=rdrFormatterCategoryReportRatePeak, txQueuesDescription=txQueuesDescription, tpIndex=tpIndex, pmoduleSlotNum=pmoduleSlotNum, apvPropertyUintValue=apvPropertyUintValue, spType=spType, subscribersNumVlanMappingsFree=subscribersNumVlanMappingsFree, appVersion=appVersion, vasServerEntry=vasServerEntry, pcubeGlobalControllersGroup=pcubeGlobalControllersGroup, systemResetTrap=systemResetTrap, pmoduleNumPorts=pmoduleNumPorts, spvPropertyStringValue=spvPropertyStringValue, tpTotalNumFragments=tpTotalNumFragments, attackGrp=attackGrp, pportGrp=pportGrp, globalControllersEntry=globalControllersEntry, pchassisLineFeedAlarm=pchassisLineFeedAlarm, appPropertiesValueTable=appPropertiesValueTable, spIndex=spIndex, trafficCounterName=trafficCounterName, tpNumTcpActiveFlowsPeak=tpNumTcpActiveFlowsPeak, tpHandledFlowsRatePeak=tpHandledFlowsRatePeak, globalControllersIndex=globalControllersIndex, pchassisPsuType=pchassisPsuType, loggerUserLogNumFatal=loggerUserLogNumFatal, linkModeBypassTrap=linkModeBypassTrap, rdrFormatterDestTable=rdrFormatterDestTable, globalControllersDroppedBytes=globalControllersDroppedBytes, pchassisSlotConfig=pchassisSlotConfig, globalControllersUtilization=globalControllersUtilization, rdrNoActiveConnectionTrap=rdrNoActiveConnectionTrap, sessionEndedTrap=sessionEndedTrap, rdrFormatterClearCountersTime=rdrFormatterClearCountersTime, spName=spName, txQueuesQueueIndex=txQueuesQueueIndex, apvPropertyStringValue=apvPropertyStringValue, trafficCounterIndex=trafficCounterIndex, pcubeSeEvents=pcubeSeEvents, rdrFormatterDestNumReportsDiscarded=rdrFormatterDestNumReportsDiscarded, pchassisTempAlarm=pchassisTempAlarm, pcubeSeMIB=pcubeSeMIB, pcubePortGroup=pcubePortGroup, telnetSessionStartedTrap=telnetSessionStartedTrap, subscribersNumTpIpRangesFree=subscribersNumTpIpRangesFree, tpHandledFlowsRatePeakTime=tpHandledFlowsRatePeakTime, tpTotalNumIpBroadcastPackets=tpTotalNumIpBroadcastPackets, pportModuleIndex=pportModuleIndex, txQueuesPortIndex=txQueuesPortIndex, pmoduleIndex=pmoduleIndex, txQueuesClearCountersTime=txQueuesClearCountersTime, pmoduleAdminStatus=pmoduleAdminStatus, operationalStatusFailureTrap=operationalStatusFailureTrap, moduleSmConnectionUpTrap=moduleSmConnectionUpTrap, telnetSessionDeniedAccessTrap=telnetSessionDeniedAccessTrap, pcubeTrafficProcessorGroup=pcubeTrafficProcessorGroup, tpHandledFlowsRate=tpHandledFlowsRate, subscribersNumUpdates=subscribersNumUpdates, subscribersInfoTable=subscribersInfoTable, telnetSessionBadLoginTrap=telnetSessionBadLoginTrap, rdrFormatterReportRatePeak=rdrFormatterReportRatePeak, pportIndex=pportIndex, chassisVoltageAlarmOnTrap=chassisVoltageAlarmOnTrap, rdrFormatterProtocol=rdrFormatterProtocol, rdrFormatterGrp=rdrFormatterGrp, appPropertiesValueEntry=appPropertiesValueEntry, pcubeMplsVpnAutoLearnGroup=pcubeMplsVpnAutoLearnGroup, linkIndex=linkIndex, pcubeLinkGroup=pcubeLinkGroup)
