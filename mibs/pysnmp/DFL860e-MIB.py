#
# PySNMP MIB module DFL860e-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DFL860e-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, Bits, TimeTicks, MibIdentifier, IpAddress, Integer32, NotificationType, Counter64, Counter32, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "Bits", "TimeTicks", "MibIdentifier", "IpAddress", "Integer32", "NotificationType", "Counter64", "Counter32", "ObjectIdentity", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dfl860e_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 1, 2)).setLabel("dfl860e-MIB")
dfl860e_MIB.setRevisions(('2010-09-02 11:39', '2010-03-30 09:00', '2009-11-10 09:16', '2008-11-18 16:05', '2008-10-14 12:27', '2007-10-31 00:00',))
if mibBuilder.loadTexts: dfl860e_MIB.setLastUpdated('201009021139Z')
if mibBuilder.loadTexts: dfl860e_MIB.setOrganization('D-Link Corporation')
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
netdefendMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20))
utmFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2))
dfl860e = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7))
dfl860eOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1))
dfl860eOSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2))
dfl860ereg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2))
dfl860eMibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 1))
dfl860eMibConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 2))
dfl860eMibObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3))
dfl860eSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1))
dfl860eSysCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysCpuLoad.setStatus('current')
dfl860eSysForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysForwardedBits.setStatus('current')
dfl860eSysForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysForwardedPackets.setStatus('current')
dfl860eSysBuffUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysBuffUse.setStatus('current')
dfl860eSysConns = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysConns.setStatus('current')
dfl860eSysPerStateCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6))
dfl860eSysPscTcpSyn = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscTcpSyn.setStatus('current')
dfl860eSysPscTcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscTcpOpen.setStatus('current')
dfl860eSysPscTcpFin = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscTcpFin.setStatus('current')
dfl860eSysPscUdp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscUdp.setStatus('current')
dfl860eSysPscIcmp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscIcmp.setStatus('current')
dfl860eSysPscOther = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscOther.setStatus('current')
dfl860eIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7), )
if mibBuilder.loadTexts: dfl860eIfStatsTable.setStatus('current')
dfl860eIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfStatsIndex"))
if mibBuilder.loadTexts: dfl860eIfStatsEntry.setStatus('current')
dfl860eIfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfStatsIndex.setStatus('current')
dfl860eIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfName.setStatus('current')
dfl860eIfFragsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfFragsIn.setStatus('current')
dfl860eIfFragReassOk = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfFragReassOk.setStatus('current')
dfl860eIfFragReassFail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfFragReassFail.setStatus('current')
dfl860eIfPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfPktsInCnt.setStatus('current')
dfl860eIfPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfPktsOutCnt.setStatus('current')
dfl860eIfBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfBitsInCnt.setStatus('current')
dfl860eIfBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfBitsOutCnt.setStatus('current')
dfl860eIfPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfPktsTotCnt.setStatus('current')
dfl860eIfBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfBitsTotCnt.setStatus('current')
dfl860eIfHCPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCPktsInCnt.setStatus('current')
dfl860eIfHCPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCPktsOutCnt.setStatus('current')
dfl860eIfHCBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCBitsInCnt.setStatus('current')
dfl860eIfHCBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCBitsOutCnt.setStatus('current')
dfl860eIfHCPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCPktsTotCnt.setStatus('current')
dfl860eIfHCBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCBitsTotCnt.setStatus('current')
dfl860eIfRxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8), )
if mibBuilder.loadTexts: dfl860eIfRxRingTable.setStatus('current')
dfl860eIfRxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfRxRingIndex"))
if mibBuilder.loadTexts: dfl860eIfRxRingEntry.setStatus('current')
dfl860eIfRxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfRxRingIndex.setStatus('current')
dfl860eIfRxRingFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxRingFifoErrors.setStatus('current')
dfl860eIfRxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxDespools.setStatus('current')
dfl860eIfRxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxAvgUse.setStatus('current')
dfl860eIfRxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxRingSaturation.setStatus('current')
dfl860eRxRingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRxRingFlooded.setStatus('current')
dfl860eIfTxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9), )
if mibBuilder.loadTexts: dfl860eIfTxRingTable.setStatus('current')
dfl860eIfTxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfTxRingIndex"))
if mibBuilder.loadTexts: dfl860eIfTxRingEntry.setStatus('current')
dfl860eIfTxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfTxRingIndex.setStatus('current')
dfl860eIfTxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfTxDespools.setStatus('current')
dfl860eIfTxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfTxAvgUse.setStatus('current')
dfl860eIfTxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfTxRingSaturation.setStatus('current')
dfl860eRxTingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRxTingFlooded.setStatus('current')
dfl860eIfVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10), )
if mibBuilder.loadTexts: dfl860eIfVlanStatsTable.setStatus('current')
dfl860eIfVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfVlanIndex"))
if mibBuilder.loadTexts: dfl860eIfVlanStatsEntry.setStatus('current')
dfl860eIfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfVlanIndex.setStatus('current')
dfl860eIfVlanUntaggedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedInPkts.setStatus('current')
dfl860eIfVlanUntaggedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedOutPkts.setStatus('current')
dfl860eIfVlanUntaggedTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedTotPkts.setStatus('current')
dfl860eIfVlanUntaggedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedInOctets.setStatus('current')
dfl860eIfVlanUntaggedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedOutOctets.setStatus('current')
dfl860eIfVlanUntaggedTotOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedTotOctets.setStatus('current')
dfl860eHWSensorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11), )
if mibBuilder.loadTexts: dfl860eHWSensorTable.setStatus('current')
dfl860eHWSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eHWSensorIndex"))
if mibBuilder.loadTexts: dfl860eHWSensorEntry.setStatus('current')
dfl860eHWSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eHWSensorIndex.setStatus('current')
dfl860eHWSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHWSensorName.setStatus('current')
dfl860eHWSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHWSensorValue.setStatus('current')
dfl860eHWSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHWSensorUnit.setStatus('current')
dfl860eSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysMemUsage.setStatus('current')
dfl860eSysTCPUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13))
dfl860eSysTCPRecvSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPRecvSmall.setStatus('current')
dfl860eSysTCPRecvLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPRecvLarge.setStatus('current')
dfl860eSysTCPSendSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPSendSmall.setStatus('current')
dfl860eSysTCPSendLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPSendLarge.setStatus('current')
dfl860eSysTimerUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTimerUsage.setStatus('current')
dfl860eSysConnOPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysConnOPS.setStatus('current')
dfl860eSysConnCPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysConnCPS.setStatus('current')
dfl860eSysHCForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysHCForwardedBits.setStatus('current')
dfl860eVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2))
dfl860eIPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1))
dfl860eIPsecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1))
dfl860eIPsecPhaseOneActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneActive.setStatus('current')
dfl860eIPsecPhaseOneAggrModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneAggrModeDone.setStatus('current')
dfl860eIPsecQuickModeActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecQuickModeActive.setStatus('current')
dfl860eIPsecPhaseOneDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneDone.setStatus('current')
dfl860eIPsecPhaseOneFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneFailed.setStatus('current')
dfl860eIPsecPhaseOneRekeyed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneRekeyed.setStatus('current')
dfl860eIPsecQuickModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecQuickModeDone.setStatus('current')
dfl860eIPsecQuickModeFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecQuickModeFailed.setStatus('current')
dfl860eIPsecInfoDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInfoDone.setStatus('current')
dfl860eIPsecInfoFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInfoFailed.setStatus('current')
dfl860eIPsecInOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInOctetsComp.setStatus('current')
dfl860eIPsecInOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInOctetsUncomp.setStatus('current')
dfl860eIPsecOutOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutOctetsComp.setStatus('current')
dfl860eIPsecOutOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutOctetsUncomp.setStatus('current')
dfl860eIPsecForwardedOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecForwardedOctetsComp.setStatus('current')
dfl860eIPsecForwardedOctetsUcomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecForwardedOctetsUcomp.setStatus('current')
dfl860eIPsecInPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInPackets.setStatus('current')
dfl860eIPsecOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutPackets.setStatus('current')
dfl860eIPsecForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecForwardedPackets.setStatus('current')
dfl860eIPsecActiveTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecActiveTransforms.setStatus('current')
dfl860eIPsecTotalTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecTotalTransforms.setStatus('current')
dfl860eIPsecOutOfTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutOfTransforms.setStatus('current')
dfl860eIPsecTotalRekeys = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecTotalRekeys.setStatus('current')
dfl860eRules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3))
dfl860eRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dfl860eRuleUseTable.setStatus('current')
dfl860eRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eRuleIndex"))
if mibBuilder.loadTexts: dfl860eRuleUseEntry.setStatus('current')
dfl860eRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eRuleIndex.setStatus('current')
dfl860eRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRuleName.setStatus('current')
dfl860eRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRuleUse.setStatus('current')
dfl860eIPPools = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4))
dfl860eIPPoolsNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolsNumber.setStatus('current')
dfl860eIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2), )
if mibBuilder.loadTexts: dfl860eIPPoolTable.setStatus('current')
dfl860eIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIPPoolIndex"))
if mibBuilder.loadTexts: dfl860eIPPoolEntry.setStatus('current')
dfl860eIPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIPPoolIndex.setStatus('current')
dfl860eIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolName.setStatus('current')
dfl860eIPPoolPrepare = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolPrepare.setStatus('current')
dfl860eIPPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolFree.setStatus('current')
dfl860eIPPoolMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolMisses.setStatus('current')
dfl860eIPPoolClientFails = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolClientFails.setStatus('current')
dfl860eIPPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolUsed.setStatus('current')
dfl860eDHCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5))
dfl860eDHCPTotalRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPTotalRejected.setStatus('current')
dfl860eDHCPRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2), )
if mibBuilder.loadTexts: dfl860eDHCPRuleTable.setStatus('current')
dfl860eDHCPRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eDHCPRuleIndex"))
if mibBuilder.loadTexts: dfl860eDHCPRuleEntry.setStatus('current')
dfl860eDHCPRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eDHCPRuleIndex.setStatus('current')
dfl860eDHCPRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRuleName.setStatus('current')
dfl860eDHCPRuleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRuleUsage.setStatus('current')
dfl860eDHCPRuleUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRuleUsagePercent.setStatus('current')
dfl860eDHCPActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPActiveClients.setStatus('current')
dfl860eDHCPActiveClientsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPActiveClientsPercent.setStatus('current')
dfl860eDHCPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRejectedRequests.setStatus('current')
dfl860eDHCPTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPTotalLeases.setStatus('current')
dfl860eUserAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6))
dfl860eUserAuthHTTPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthHTTPUsers.setStatus('current')
dfl860eUserAuthXAUTHUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthXAUTHUsers.setStatus('current')
dfl860eUserAuthHTTPSUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthHTTPSUsers.setStatus('current')
dfl860eUserAuthPPPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthPPPUsers.setStatus('current')
dfl860eUserAuthEAPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthEAPUsers.setStatus('current')
dfl860eUserAuthRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6), )
if mibBuilder.loadTexts: dfl860eUserAuthRuleUseTable.setStatus('current')
dfl860eUserAuthRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eUserAuthRuleIndex"))
if mibBuilder.loadTexts: dfl860eUserAuthRuleUseEntry.setStatus('current')
dfl860eUserAuthRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eUserAuthRuleIndex.setStatus('current')
dfl860eUserAuthRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthRuleName.setStatus('current')
dfl860eUserAuthRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthRuleUse.setStatus('current')
dfl860eLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7))
dfl860eLinkMonGrp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonGrp.setStatus('current')
dfl860eLinkMonGrpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2), )
if mibBuilder.loadTexts: dfl860eLinkMonGrpTable.setStatus('current')
dfl860eLinkMonGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eLinkMonGrpIndex"))
if mibBuilder.loadTexts: dfl860eLinkMonGrpEntry.setStatus('current')
dfl860eLinkMonGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eLinkMonGrpIndex.setStatus('current')
dfl860eLinkMonGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonGrpName.setStatus('current')
dfl860eLinkMonGrpHostsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonGrpHostsUp.setStatus('current')
dfl860eLinkMonHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3), )
if mibBuilder.loadTexts: dfl860eLinkMonHostTable.setStatus('current')
dfl860eLinkMonHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eLinkMonGrpIndex"), (0, "DFL860e-MIB", "dfl860eLinkMonHostIndex"))
if mibBuilder.loadTexts: dfl860eLinkMonHostEntry.setStatus('current')
dfl860eLinkMonHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eLinkMonHostIndex.setStatus('current')
dfl860eLinkMonHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonHostId.setStatus('current')
dfl860eLinkMonHostShortTermLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonHostShortTermLoss.setStatus('current')
dfl860eLinkMonHostPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonHostPacketsLost.setStatus('current')
dfl860ePipes = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8))
dfl860ePipeUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeUsers.setStatus('current')
dfl860ePipeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dfl860ePipeTable.setStatus('current')
dfl860ePipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860ePipeIndex"))
if mibBuilder.loadTexts: dfl860ePipeEntry.setStatus('current')
dfl860ePipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860ePipeIndex.setStatus('current')
dfl860ePipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeName.setStatus('current')
dfl860ePipeMinPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeMinPrec.setStatus('current')
dfl860ePipeMaxPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeMaxPrec.setStatus('current')
dfl860ePipeDefPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeDefPrec.setStatus('current')
dfl860ePipeNumPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeNumPrec.setStatus('current')
dfl860ePipeNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeNumUsers.setStatus('current')
dfl860ePipeCurrentBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeCurrentBps.setStatus('current')
dfl860ePipeCurrentPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeCurrentPps.setStatus('current')
dfl860ePipeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeDelayedPackets.setStatus('current')
dfl860ePipeDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeDropedPackets.setStatus('current')
dfl860ePipePrecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3), )
if mibBuilder.loadTexts: dfl860ePipePrecTable.setStatus('current')
dfl860ePipePrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860ePipeIndex"), (0, "DFL860e-MIB", "dfl860ePipePrecIndex"))
if mibBuilder.loadTexts: dfl860ePipePrecEntry.setStatus('current')
dfl860ePipePrecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860ePipePrecIndex.setStatus('current')
dfl860ePipePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrec.setStatus('current')
dfl860ePipePrecBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecBps.setStatus('current')
dfl860ePipePrecTotalPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecTotalPps.setStatus('current')
dfl860ePipePrecReservedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecReservedBps.setStatus('current')
dfl860ePipePrecDynLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDynLimBps.setStatus('current')
dfl860ePipePrecDynUsrLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDynUsrLimBps.setStatus('current')
dfl860ePipePrecDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDelayedPackets.setStatus('current')
dfl860ePipePrecDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDropedPackets.setStatus('current')
dfl860eALG = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9))
dfl860eAlgSessions = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eAlgSessions.setStatus('current')
dfl860eAlgConnections = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eAlgConnections.setStatus('current')
dfl860eAlgTCPStreams = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eAlgTCPStreams.setStatus('current')
dfl860eHttpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4))
dfl860eHttpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1), )
if mibBuilder.loadTexts: dfl860eHttpAlgTable.setStatus('current')
dfl860eHttpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eHttpAlgIndex"))
if mibBuilder.loadTexts: dfl860eHttpAlgEntry.setStatus('current')
dfl860eHttpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eHttpAlgIndex.setStatus('current')
dfl860eHttpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgName.setStatus('current')
dfl860eHttpAlgTotalRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgTotalRequested.setStatus('current')
dfl860eHttpAlgTotalAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgTotalAllowed.setStatus('current')
dfl860eHttpAlgTotalBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgTotalBlocked.setStatus('current')
dfl860eHttpAlgCntFltTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2), )
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltTable.setStatus('current')
dfl860eHttpAlgCntFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eHttpAlgIndex"), (0, "DFL860e-MIB", "dfl860eHttpAlgCntFltIndex"))
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltEntry.setStatus('current')
dfl860eHttpAlgCntFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltIndex.setStatus('current')
dfl860eHttpAlgCntFltName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltName.setStatus('current')
dfl860eHttpAlgCntFltRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltRequests.setStatus('current')
dfl860eHttpAlgCntFltAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltAllowed.setStatus('current')
dfl860eHttpAlgCntFltBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltBlocked.setStatus('current')
dfl860eSmtpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5))
dfl860eSmtpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1), )
if mibBuilder.loadTexts: dfl860eSmtpAlgTable.setStatus('current')
dfl860eSmtpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eSmtpAlgIndex"))
if mibBuilder.loadTexts: dfl860eSmtpAlgEntry.setStatus('current')
dfl860eSmtpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eSmtpAlgIndex.setStatus('current')
dfl860eSmtpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgName.setStatus('current')
dfl860eSmtpAlgTotCheckedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgTotCheckedSes.setStatus('current')
dfl860eSmtpAlgTotSpamSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgTotSpamSes.setStatus('current')
dfl860eSmtpAlgTotDroppedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgTotDroppedSes.setStatus('current')
dfl860eSmtpAlgDnsBlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2), )
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlTable.setStatus('current')
dfl860eSmtpAlgDnsBlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eSmtpAlgIndex"), (0, "DFL860e-MIB", "dfl860eSmtpAlgDnsBlIndex"))
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlEntry.setStatus('current')
dfl860eSmtpAlgDnsBlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlIndex.setStatus('current')
dfl860eSmtpAlgDnsBlName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlName.setStatus('current')
dfl860eSmtpAlgDnsBlChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlChecked.setStatus('current')
dfl860eSmtpAlgDnsBlMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlMatched.setStatus('current')
dfl860eSmtpAlgDnsBlFailChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlFailChecks.setStatus('current')
dfl860eDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11))
dfl860eDHCPRelayCurClients = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayCurClients.setStatus('current')
dfl860eDHCPRelayCurTrans = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayCurTrans.setStatus('current')
dfl860eDHCPRelayRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRejected.setStatus('current')
dfl860eDHCPRelayRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4), )
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleTable.setStatus('current')
dfl860eDHCPRelayRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eDHCPRelayRuleIndex"))
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleEntry.setStatus('current')
dfl860eDHCPRelayRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleIndex.setStatus('current')
dfl860eDHCPRelayRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleName.setStatus('current')
dfl860eDHCPRelayRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleHits.setStatus('current')
dfl860eDHCPRelayRuleCurClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleCurClients.setStatus('current')
dfl860eDHCPRelayRuleRejCliPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleRejCliPkts.setStatus('current')
dfl860eDHCPRelayRuleRejSrvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleRejSrvPkts.setStatus('current')
dfl860eHA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12))
dfl860eHASyncSendQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendQueueLength.setStatus('current')
dfl860eHASyncSendQueueUsagePkt = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendQueueUsagePkt.setStatus('current')
dfl860eHASyncSendQueueUsageOct = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendQueueUsageOct.setStatus('current')
dfl860eHASyncSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSentPackets.setStatus('current')
dfl860eHASyncSendResentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendResentPackets.setStatus('current')
dfl860eStatsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 2, 1))
dfl860eStatsRegGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1))
dfl860eSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 1)).setObjects(("DFL860e-MIB", "dfl860eSysCpuLoad"), ("DFL860e-MIB", "dfl860eSysForwardedBits"), ("DFL860e-MIB", "dfl860eSysForwardedPackets"), ("DFL860e-MIB", "dfl860eSysBuffUse"), ("DFL860e-MIB", "dfl860eSysConns"), ("DFL860e-MIB", "dfl860eHWSensorName"), ("DFL860e-MIB", "dfl860eHWSensorValue"), ("DFL860e-MIB", "dfl860eHWSensorUnit"), ("DFL860e-MIB", "dfl860eSysMemUsage"), ("DFL860e-MIB", "dfl860eSysTimerUsage"), ("DFL860e-MIB", "dfl860eSysConnOPS"), ("DFL860e-MIB", "dfl860eSysConnCPS"), ("DFL860e-MIB", "dfl860eSysHCForwardedBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eSystemObjectGroup = dfl860eSystemObjectGroup.setStatus('current')
dfl860eIPsecObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 2)).setObjects(("DFL860e-MIB", "dfl860eIPsecPhaseOneActive"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneAggrModeDone"), ("DFL860e-MIB", "dfl860eIPsecQuickModeActive"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneDone"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneFailed"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneRekeyed"), ("DFL860e-MIB", "dfl860eIPsecQuickModeDone"), ("DFL860e-MIB", "dfl860eIPsecQuickModeFailed"), ("DFL860e-MIB", "dfl860eIPsecInfoDone"), ("DFL860e-MIB", "dfl860eIPsecInfoFailed"), ("DFL860e-MIB", "dfl860eIPsecInOctetsComp"), ("DFL860e-MIB", "dfl860eIPsecInOctetsUncomp"), ("DFL860e-MIB", "dfl860eIPsecOutOctetsComp"), ("DFL860e-MIB", "dfl860eIPsecOutOctetsUncomp"), ("DFL860e-MIB", "dfl860eIPsecForwardedOctetsComp"), ("DFL860e-MIB", "dfl860eIPsecForwardedOctetsUcomp"), ("DFL860e-MIB", "dfl860eIPsecInPackets"), ("DFL860e-MIB", "dfl860eIPsecOutPackets"), ("DFL860e-MIB", "dfl860eIPsecForwardedPackets"), ("DFL860e-MIB", "dfl860eIPsecActiveTransforms"), ("DFL860e-MIB", "dfl860eIPsecTotalTransforms"), ("DFL860e-MIB", "dfl860eIPsecOutOfTransforms"), ("DFL860e-MIB", "dfl860eIPsecTotalRekeys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIPsecObjectGroup = dfl860eIPsecObjectGroup.setStatus('current')
dfl860eStateCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 3)).setObjects(("DFL860e-MIB", "dfl860eSysPscTcpSyn"), ("DFL860e-MIB", "dfl860eSysPscTcpOpen"), ("DFL860e-MIB", "dfl860eSysPscTcpFin"), ("DFL860e-MIB", "dfl860eSysPscUdp"), ("DFL860e-MIB", "dfl860eSysPscIcmp"), ("DFL860e-MIB", "dfl860eSysPscOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eStateCountersGroup = dfl860eStateCountersGroup.setStatus('current')
dfl860eIPPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 4)).setObjects(("DFL860e-MIB", "dfl860eIPPoolsNumber"), ("DFL860e-MIB", "dfl860eIPPoolName"), ("DFL860e-MIB", "dfl860eIPPoolPrepare"), ("DFL860e-MIB", "dfl860eIPPoolFree"), ("DFL860e-MIB", "dfl860eIPPoolMisses"), ("DFL860e-MIB", "dfl860eIPPoolClientFails"), ("DFL860e-MIB", "dfl860eIPPoolUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIPPoolGroup = dfl860eIPPoolGroup.setStatus('current')
dfl860eDHCPServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 5)).setObjects(("DFL860e-MIB", "dfl860eDHCPTotalRejected"), ("DFL860e-MIB", "dfl860eDHCPRuleName"), ("DFL860e-MIB", "dfl860eDHCPRuleUsage"), ("DFL860e-MIB", "dfl860eDHCPRuleUsagePercent"), ("DFL860e-MIB", "dfl860eDHCPActiveClients"), ("DFL860e-MIB", "dfl860eDHCPActiveClientsPercent"), ("DFL860e-MIB", "dfl860eDHCPRejectedRequests"), ("DFL860e-MIB", "dfl860eDHCPTotalLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eDHCPServerGroup = dfl860eDHCPServerGroup.setStatus('current')
dfl860eRuleUseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 6)).setObjects(("DFL860e-MIB", "dfl860eRuleName"), ("DFL860e-MIB", "dfl860eRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eRuleUseGroup = dfl860eRuleUseGroup.setStatus('current')
dfl860eUserAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 7)).setObjects(("DFL860e-MIB", "dfl860eUserAuthHTTPUsers"), ("DFL860e-MIB", "dfl860eUserAuthXAUTHUsers"), ("DFL860e-MIB", "dfl860eUserAuthHTTPSUsers"), ("DFL860e-MIB", "dfl860eUserAuthPPPUsers"), ("DFL860e-MIB", "dfl860eUserAuthEAPUsers"), ("DFL860e-MIB", "dfl860eUserAuthRuleName"), ("DFL860e-MIB", "dfl860eUserAuthRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eUserAuthGroup = dfl860eUserAuthGroup.setStatus('current')
dfl860eIfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 8)).setObjects(("DFL860e-MIB", "dfl860eIfName"), ("DFL860e-MIB", "dfl860eIfFragsIn"), ("DFL860e-MIB", "dfl860eIfFragReassOk"), ("DFL860e-MIB", "dfl860eIfFragReassFail"), ("DFL860e-MIB", "dfl860eIfPktsInCnt"), ("DFL860e-MIB", "dfl860eIfPktsOutCnt"), ("DFL860e-MIB", "dfl860eIfBitsInCnt"), ("DFL860e-MIB", "dfl860eIfBitsOutCnt"), ("DFL860e-MIB", "dfl860eIfPktsTotCnt"), ("DFL860e-MIB", "dfl860eIfBitsTotCnt"), ("DFL860e-MIB", "dfl860eIfHCPktsInCnt"), ("DFL860e-MIB", "dfl860eIfHCPktsOutCnt"), ("DFL860e-MIB", "dfl860eIfHCBitsInCnt"), ("DFL860e-MIB", "dfl860eIfHCBitsOutCnt"), ("DFL860e-MIB", "dfl860eIfHCPktsTotCnt"), ("DFL860e-MIB", "dfl860eIfHCBitsTotCnt"), ("DFL860e-MIB", "dfl860eIfRxRingFifoErrors"), ("DFL860e-MIB", "dfl860eIfRxDespools"), ("DFL860e-MIB", "dfl860eIfRxAvgUse"), ("DFL860e-MIB", "dfl860eIfRxRingSaturation"), ("DFL860e-MIB", "dfl860eRxRingFlooded"), ("DFL860e-MIB", "dfl860eIfTxDespools"), ("DFL860e-MIB", "dfl860eIfTxAvgUse"), ("DFL860e-MIB", "dfl860eIfTxRingSaturation"), ("DFL860e-MIB", "dfl860eRxTingFlooded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIfStatsGroup = dfl860eIfStatsGroup.setStatus('current')
dfl860eLinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 9)).setObjects(("DFL860e-MIB", "dfl860eLinkMonGrp"), ("DFL860e-MIB", "dfl860eLinkMonGrpName"), ("DFL860e-MIB", "dfl860eLinkMonGrpHostsUp"), ("DFL860e-MIB", "dfl860eLinkMonHostId"), ("DFL860e-MIB", "dfl860eLinkMonHostShortTermLoss"), ("DFL860e-MIB", "dfl860eLinkMonHostPacketsLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eLinkMonitorGroup = dfl860eLinkMonitorGroup.setStatus('current')
dfl860ePipesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 10)).setObjects(("DFL860e-MIB", "dfl860ePipeUsers"), ("DFL860e-MIB", "dfl860ePipeName"), ("DFL860e-MIB", "dfl860ePipeMinPrec"), ("DFL860e-MIB", "dfl860ePipeMaxPrec"), ("DFL860e-MIB", "dfl860ePipeDefPrec"), ("DFL860e-MIB", "dfl860ePipeNumPrec"), ("DFL860e-MIB", "dfl860ePipeNumUsers"), ("DFL860e-MIB", "dfl860ePipeCurrentBps"), ("DFL860e-MIB", "dfl860ePipeCurrentPps"), ("DFL860e-MIB", "dfl860ePipeDelayedPackets"), ("DFL860e-MIB", "dfl860ePipeDropedPackets"), ("DFL860e-MIB", "dfl860ePipePrec"), ("DFL860e-MIB", "dfl860ePipePrecBps"), ("DFL860e-MIB", "dfl860ePipePrecTotalPps"), ("DFL860e-MIB", "dfl860ePipePrecReservedBps"), ("DFL860e-MIB", "dfl860ePipePrecDynLimBps"), ("DFL860e-MIB", "dfl860ePipePrecDynUsrLimBps"), ("DFL860e-MIB", "dfl860ePipePrecDelayedPackets"), ("DFL860e-MIB", "dfl860ePipePrecDropedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860ePipesObjectGroup = dfl860ePipesObjectGroup.setStatus('current')
dfl860eDHCPRelayObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 12)).setObjects(("DFL860e-MIB", "dfl860eDHCPRelayCurClients"), ("DFL860e-MIB", "dfl860eDHCPRelayCurTrans"), ("DFL860e-MIB", "dfl860eDHCPRelayRejected"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleName"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleHits"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleCurClients"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleRejCliPkts"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleRejSrvPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eDHCPRelayObjectGroup = dfl860eDHCPRelayObjectGroup.setStatus('current')
dfl860eAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 13)).setObjects(("DFL860e-MIB", "dfl860eAlgSessions"), ("DFL860e-MIB", "dfl860eAlgConnections"), ("DFL860e-MIB", "dfl860eAlgTCPStreams"), ("DFL860e-MIB", "dfl860eHttpAlgName"), ("DFL860e-MIB", "dfl860eHttpAlgTotalRequested"), ("DFL860e-MIB", "dfl860eHttpAlgTotalAllowed"), ("DFL860e-MIB", "dfl860eHttpAlgTotalBlocked"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltName"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltRequests"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltAllowed"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eAlgGroup = dfl860eAlgGroup.setStatus('current')
dfl860eHAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 14)).setObjects(("DFL860e-MIB", "dfl860eHASyncSendQueueLength"), ("DFL860e-MIB", "dfl860eHASyncSendQueueUsagePkt"), ("DFL860e-MIB", "dfl860eHASyncSendQueueUsageOct"), ("DFL860e-MIB", "dfl860eHASyncSentPackets"), ("DFL860e-MIB", "dfl860eHASyncSendResentPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eHAGroup = dfl860eHAGroup.setStatus('current')
dfl860eIfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 15)).setObjects(("DFL860e-MIB", "dfl860eIfVlanUntaggedInPkts"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedOutPkts"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedTotPkts"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedInOctets"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedOutOctets"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedTotOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIfVlanGroup = dfl860eIfVlanGroup.setStatus('current')
dfl860eSmtpAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 16)).setObjects(("DFL860e-MIB", "dfl860eSmtpAlgName"), ("DFL860e-MIB", "dfl860eSmtpAlgTotCheckedSes"), ("DFL860e-MIB", "dfl860eSmtpAlgTotSpamSes"), ("DFL860e-MIB", "dfl860eSmtpAlgTotDroppedSes"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlName"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlChecked"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlMatched"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlFailChecks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eSmtpAlgGroup = dfl860eSmtpAlgGroup.setStatus('current')
dfl860eSysTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 17)).setObjects(("DFL860e-MIB", "dfl860eSysTCPRecvSmall"), ("DFL860e-MIB", "dfl860eSysTCPRecvLarge"), ("DFL860e-MIB", "dfl860eSysTCPSendSmall"), ("DFL860e-MIB", "dfl860eSysTCPSendLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eSysTCPGroup = dfl860eSysTCPGroup.setStatus('current')
dfl860eStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 2, 1, 1)).setObjects(("DFL860e-MIB", "dfl860eSystemObjectGroup"), ("DFL860e-MIB", "dfl860eIPsecObjectGroup"), ("DFL860e-MIB", "dfl860eStateCountersGroup"), ("DFL860e-MIB", "dfl860eIPPoolGroup"), ("DFL860e-MIB", "dfl860eDHCPServerGroup"), ("DFL860e-MIB", "dfl860eRuleUseGroup"), ("DFL860e-MIB", "dfl860eUserAuthGroup"), ("DFL860e-MIB", "dfl860eIfStatsGroup"), ("DFL860e-MIB", "dfl860eLinkMonitorGroup"), ("DFL860e-MIB", "dfl860ePipesObjectGroup"), ("DFL860e-MIB", "dfl860eDHCPRelayObjectGroup"), ("DFL860e-MIB", "dfl860eAlgGroup"), ("DFL860e-MIB", "dfl860eHAGroup"), ("DFL860e-MIB", "dfl860eIfVlanGroup"), ("DFL860e-MIB", "dfl860eSmtpAlgGroup"), ("DFL860e-MIB", "dfl860eSysTCPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eStatsCompliance = dfl860eStatsCompliance.setStatus('current')
mibBuilder.exportSymbols("DFL860e-MIB", dfl860eIfHCPktsTotCnt=dfl860eIfHCPktsTotCnt, dfl860eLinkMonGrpIndex=dfl860eLinkMonGrpIndex, dfl860ePipePrec=dfl860ePipePrec, dfl860eRuleUseEntry=dfl860eRuleUseEntry, dfl860eIPPoolEntry=dfl860eIPPoolEntry, dfl860eLinkMonHostShortTermLoss=dfl860eLinkMonHostShortTermLoss, dfl860eIPsecObjectGroup=dfl860eIPsecObjectGroup, dfl860eHAGroup=dfl860eHAGroup, dfl860eMibModules=dfl860eMibModules, dfl860eIPsecForwardedPackets=dfl860eIPsecForwardedPackets, dfl860ePipeName=dfl860ePipeName, dfl860eHASyncSentPackets=dfl860eHASyncSentPackets, dfl860ePipeTable=dfl860ePipeTable, dfl860eDHCPRelayRuleIndex=dfl860eDHCPRelayRuleIndex, dfl860eSysPscUdp=dfl860eSysPscUdp, dfl860eSmtpAlgTotSpamSes=dfl860eSmtpAlgTotSpamSes, dfl860ePipeMaxPrec=dfl860ePipeMaxPrec, dfl860eDHCPTotalLeases=dfl860eDHCPTotalLeases, dfl860eHWSensorName=dfl860eHWSensorName, dfl860eALG=dfl860eALG, dfl860eUserAuthXAUTHUsers=dfl860eUserAuthXAUTHUsers, dfl860eSysTCPSendLarge=dfl860eSysTCPSendLarge, dfl860eIPsecInPackets=dfl860eIPsecInPackets, dfl860eIfRxRingSaturation=dfl860eIfRxRingSaturation, dfl860eIfVlanStatsTable=dfl860eIfVlanStatsTable, dfl860eHWSensorTable=dfl860eHWSensorTable, dfl860ePipeCurrentPps=dfl860ePipeCurrentPps, dfl860eIfHCBitsOutCnt=dfl860eIfHCBitsOutCnt, dfl860ePipeDropedPackets=dfl860ePipeDropedPackets, dfl860eHWSensorIndex=dfl860eHWSensorIndex, dfl860eSysForwardedPackets=dfl860eSysForwardedPackets, dfl860eIfStatsEntry=dfl860eIfStatsEntry, dfl860eDHCPRejectedRequests=dfl860eDHCPRejectedRequests, dfl860eHttpAlgEntry=dfl860eHttpAlgEntry, dfl860eHttpAlgCntFltIndex=dfl860eHttpAlgCntFltIndex, dfl860eSysMemUsage=dfl860eSysMemUsage, dfl860ePipes=dfl860ePipes, utmFirewall=utmFirewall, dfl860eSysBuffUse=dfl860eSysBuffUse, dfl860eHASyncSendQueueUsageOct=dfl860eHASyncSendQueueUsageOct, dfl860eIfRxRingEntry=dfl860eIfRxRingEntry, dfl860eSmtpAlgGroup=dfl860eSmtpAlgGroup, dfl860eIPPools=dfl860eIPPools, dfl860eIfTxRingIndex=dfl860eIfTxRingIndex, dfl860eIfVlanIndex=dfl860eIfVlanIndex, dfl860eIPPoolClientFails=dfl860eIPPoolClientFails, dfl860eSysTimerUsage=dfl860eSysTimerUsage, dfl860eHttpAlgCntFltName=dfl860eHttpAlgCntFltName, dfl860eIfPktsTotCnt=dfl860eIfPktsTotCnt, dfl860eUserAuthRuleIndex=dfl860eUserAuthRuleIndex, dfl860eDHCPRelayRuleHits=dfl860eDHCPRelayRuleHits, dfl860ePipeIndex=dfl860ePipeIndex, dlink=dlink, dfl860eHttpAlgCntFltAllowed=dfl860eHttpAlgCntFltAllowed, dfl860eIPsecTotalTransforms=dfl860eIPsecTotalTransforms, dfl860eIPPoolTable=dfl860eIPPoolTable, dfl860eSysPscTcpSyn=dfl860eSysPscTcpSyn, dfl860eAlgSessions=dfl860eAlgSessions, dfl860eSmtpAlgIndex=dfl860eSmtpAlgIndex, dfl860eHttpAlgTotalAllowed=dfl860eHttpAlgTotalAllowed, dfl860eIfHCPktsInCnt=dfl860eIfHCPktsInCnt, dfl860eIPPoolsNumber=dfl860eIPPoolsNumber, dfl860eHASyncSendQueueLength=dfl860eHASyncSendQueueLength, dfl860eRuleUseGroup=dfl860eRuleUseGroup, dfl860eIPsecPhaseOneFailed=dfl860eIPsecPhaseOneFailed, dfl860eIfBitsOutCnt=dfl860eIfBitsOutCnt, dfl860eHttpAlgTotalBlocked=dfl860eHttpAlgTotalBlocked, dfl860eIPsecInfoDone=dfl860eIPsecInfoDone, dfl860eIPsecTotalRekeys=dfl860eIPsecTotalRekeys, dfl860eSmtpAlgDnsBlTable=dfl860eSmtpAlgDnsBlTable, dfl860eDHCPRelayCurClients=dfl860eDHCPRelayCurClients, dfl860eIfRxAvgUse=dfl860eIfRxAvgUse, dfl860ePipeNumUsers=dfl860ePipeNumUsers, dfl860eHttpAlgCntFltBlocked=dfl860eHttpAlgCntFltBlocked, dfl860eDHCPTotalRejected=dfl860eDHCPTotalRejected, dfl860eSmtpAlg=dfl860eSmtpAlg, dfl860eUserAuthRuleUseEntry=dfl860eUserAuthRuleUseEntry, dfl860eHWSensorUnit=dfl860eHWSensorUnit, dfl860eDHCPRuleName=dfl860eDHCPRuleName, dfl860eSmtpAlgDnsBlChecked=dfl860eSmtpAlgDnsBlChecked, dfl860eSmtpAlgDnsBlMatched=dfl860eSmtpAlgDnsBlMatched, dfl860eSysPscIcmp=dfl860eSysPscIcmp, dfl860eHttpAlgCntFltRequests=dfl860eHttpAlgCntFltRequests, dfl860eIPPoolName=dfl860eIPPoolName, dfl860eLinkMonHostEntry=dfl860eLinkMonHostEntry, dfl860eRxRingFlooded=dfl860eRxRingFlooded, dfl860eDHCPRelay=dfl860eDHCPRelay, dfl860eUserAuthRuleUse=dfl860eUserAuthRuleUse, dfl860eRuleUse=dfl860eRuleUse, dfl860ePipeMinPrec=dfl860ePipeMinPrec, dfl860eHttpAlgCntFltEntry=dfl860eHttpAlgCntFltEntry, dfl860eIPPoolIndex=dfl860eIPPoolIndex, dfl860eSystemObjectGroup=dfl860eSystemObjectGroup, dfl860eOSStats=dfl860eOSStats, dfl860eIPsecQuickModeFailed=dfl860eIPsecQuickModeFailed, dfl860eRuleUseTable=dfl860eRuleUseTable, dfl860eAlgConnections=dfl860eAlgConnections, dfl860ePipePrecDelayedPackets=dfl860ePipePrecDelayedPackets, dfl860ePipePrecTotalPps=dfl860ePipePrecTotalPps, dfl860eIPsecOutOctetsUncomp=dfl860eIPsecOutOctetsUncomp, dfl860eRuleIndex=dfl860eRuleIndex, dfl860eDHCPActiveClientsPercent=dfl860eDHCPActiveClientsPercent, dfl860ePipeDelayedPackets=dfl860ePipeDelayedPackets, dfl860eSmtpAlgTable=dfl860eSmtpAlgTable, dfl860eIfPktsOutCnt=dfl860eIfPktsOutCnt, dfl860eIPsecInOctetsUncomp=dfl860eIPsecInOctetsUncomp, dfl860eIfVlanUntaggedOutOctets=dfl860eIfVlanUntaggedOutOctets, dfl860eDHCPRuleUsagePercent=dfl860eDHCPRuleUsagePercent, dfl860eDHCPRuleTable=dfl860eDHCPRuleTable, dfl860eSmtpAlgTotCheckedSes=dfl860eSmtpAlgTotCheckedSes, dfl860e=dfl860e, PYSNMP_MODULE_ID=dfl860e_MIB, dfl860eIfTxRingTable=dfl860eIfTxRingTable, dfl860eSysHCForwardedBits=dfl860eSysHCForwardedBits, dfl860eIPsecPhaseOneAggrModeDone=dfl860eIPsecPhaseOneAggrModeDone, dfl860eSysCpuLoad=dfl860eSysCpuLoad, dfl860eSysPerStateCounters=dfl860eSysPerStateCounters, dfl860eIPsecOutOctetsComp=dfl860eIPsecOutOctetsComp, dfl860ePipePrecEntry=dfl860ePipePrecEntry, dfl860eDHCPRelayRuleName=dfl860eDHCPRelayRuleName, dfl860eSysTCPRecvLarge=dfl860eSysTCPRecvLarge, dfl860eIfBitsInCnt=dfl860eIfBitsInCnt, dfl860eDHCPRelayRuleTable=dfl860eDHCPRelayRuleTable, dfl860eDHCPRelayRuleRejCliPkts=dfl860eDHCPRelayRuleRejCliPkts, dfl860eLinkMonitor=dfl860eLinkMonitor, dfl860eIfFragReassFail=dfl860eIfFragReassFail, dfl860eSysTCPSendSmall=dfl860eSysTCPSendSmall, dfl860eIfTxAvgUse=dfl860eIfTxAvgUse, dfl860eLinkMonGrpHostsUp=dfl860eLinkMonGrpHostsUp, dfl860ePipesObjectGroup=dfl860ePipesObjectGroup, dfl860ePipePrecBps=dfl860ePipePrecBps, dfl860eDHCPRelayObjectGroup=dfl860eDHCPRelayObjectGroup, dfl860eLinkMonitorGroup=dfl860eLinkMonitorGroup, dfl860ePipeCurrentBps=dfl860ePipeCurrentBps, dfl860eIPsecPhaseOneRekeyed=dfl860eIPsecPhaseOneRekeyed, dfl860eAlgTCPStreams=dfl860eAlgTCPStreams, dfl860eHA=dfl860eHA, dfl860ePipePrecIndex=dfl860ePipePrecIndex, dfl860eIfStatsGroup=dfl860eIfStatsGroup, dfl860eUserAuthHTTPSUsers=dfl860eUserAuthHTTPSUsers, dfl860eDHCPRelayRuleEntry=dfl860eDHCPRelayRuleEntry, dfl860ePipePrecDynUsrLimBps=dfl860ePipePrecDynUsrLimBps, dfl860eDHCPServerGroup=dfl860eDHCPServerGroup, dfl860eIfTxRingSaturation=dfl860eIfTxRingSaturation, dfl860eHWSensorEntry=dfl860eHWSensorEntry, dfl860eUserAuth=dfl860eUserAuth, dfl860eHASyncSendQueueUsagePkt=dfl860eHASyncSendQueueUsagePkt, dfl860eStatsRegGroups=dfl860eStatsRegGroups, dfl860eIfTxRingEntry=dfl860eIfTxRingEntry, dfl860ePipeNumPrec=dfl860ePipeNumPrec, dfl860eMibObjectGroups=dfl860eMibObjectGroups, dfl860eRxTingFlooded=dfl860eRxTingFlooded, dfl860eAlgGroup=dfl860eAlgGroup, dfl860eDHCPRuleEntry=dfl860eDHCPRuleEntry, dfl860eIPPoolPrepare=dfl860eIPPoolPrepare, dfl860eIfVlanUntaggedOutPkts=dfl860eIfVlanUntaggedOutPkts, dfl860eVPN=dfl860eVPN, dfl860eSmtpAlgTotDroppedSes=dfl860eSmtpAlgTotDroppedSes, dfl860eSysTCPGroup=dfl860eSysTCPGroup, dfl860eHttpAlgIndex=dfl860eHttpAlgIndex, dfl860eIfName=dfl860eIfName, dfl860eUserAuthHTTPUsers=dfl860eUserAuthHTTPUsers, dfl860eSmtpAlgDnsBlEntry=dfl860eSmtpAlgDnsBlEntry, dfl860eIfRxRingIndex=dfl860eIfRxRingIndex, dfl860eIPsecForwardedOctetsUcomp=dfl860eIPsecForwardedOctetsUcomp, dfl860eRules=dfl860eRules, dfl860eStatsCompliance=dfl860eStatsCompliance, dfl860eIfStatsIndex=dfl860eIfStatsIndex, dfl860eLinkMonHostIndex=dfl860eLinkMonHostIndex, dfl860eSysPscTcpFin=dfl860eSysPscTcpFin, dfl860eIPsecActiveTransforms=dfl860eIPsecActiveTransforms, dfl860eIfRxRingFifoErrors=dfl860eIfRxRingFifoErrors, dfl860ePipePrecReservedBps=dfl860ePipePrecReservedBps, dfl860eLinkMonGrpName=dfl860eLinkMonGrpName, dfl860eLinkMonGrp=dfl860eLinkMonGrp, dfl860eUserAuthRuleUseTable=dfl860eUserAuthRuleUseTable, dfl860eIfFragsIn=dfl860eIfFragsIn, dfl860eSysTCPRecvSmall=dfl860eSysTCPRecvSmall, dfl860eRuleName=dfl860eRuleName, dfl860eSysTCPUsage=dfl860eSysTCPUsage, dfl860eIPsecPhaseOneActive=dfl860eIPsecPhaseOneActive, dfl860eIfHCBitsTotCnt=dfl860eIfHCBitsTotCnt, dfl860eIfVlanGroup=dfl860eIfVlanGroup, dfl860eIPsecForwardedOctetsComp=dfl860eIPsecForwardedOctetsComp, dfl860eSmtpAlgDnsBlIndex=dfl860eSmtpAlgDnsBlIndex, dfl860eIPsecOutPackets=dfl860eIPsecOutPackets, dfl860eIfVlanUntaggedTotOctets=dfl860eIfVlanUntaggedTotOctets, dfl860eSysConnOPS=dfl860eSysConnOPS, dfl860eIfFragReassOk=dfl860eIfFragReassOk, dfl860eUserAuthPPPUsers=dfl860eUserAuthPPPUsers, dfl860eUserAuthEAPUsers=dfl860eUserAuthEAPUsers, dfl860eIPsecQuickModeDone=dfl860eIPsecQuickModeDone, dfl860eDHCPActiveClients=dfl860eDHCPActiveClients, dfl860eIPsec=dfl860eIPsec, dfl860eIfVlanStatsEntry=dfl860eIfVlanStatsEntry, dfl860eIPsecOutOfTransforms=dfl860eIPsecOutOfTransforms, dfl860eIPPoolFree=dfl860eIPPoolFree, netdefendMgmt=netdefendMgmt, dfl860eIPsecPhaseOneDone=dfl860eIPsecPhaseOneDone, dfl860eSmtpAlgDnsBlName=dfl860eSmtpAlgDnsBlName, dfl860eSmtpAlgEntry=dfl860eSmtpAlgEntry, dfl860ereg=dfl860ereg, dfl860eSystem=dfl860eSystem, dfl860eIfStatsTable=dfl860eIfStatsTable, dfl860eLinkMonHostPacketsLost=dfl860eLinkMonHostPacketsLost, dfl860eHWSensorValue=dfl860eHWSensorValue, dfl860eDHCPRelayRuleCurClients=dfl860eDHCPRelayRuleCurClients, dfl860ePipePrecDynLimBps=dfl860ePipePrecDynLimBps, dfl860eIPPoolGroup=dfl860eIPPoolGroup, dfl860eOS=dfl860eOS, dfl860eIPPoolUsed=dfl860eIPPoolUsed, dfl860eUserAuthRuleName=dfl860eUserAuthRuleName, dfl860eLinkMonGrpTable=dfl860eLinkMonGrpTable, dfl860ePipePrecTable=dfl860ePipePrecTable, dfl860eHttpAlgTable=dfl860eHttpAlgTable, dfl860eHASyncSendResentPackets=dfl860eHASyncSendResentPackets, dfl860eLinkMonHostId=dfl860eLinkMonHostId, dfl860eHttpAlgCntFltTable=dfl860eHttpAlgCntFltTable, dfl860eMibConfs=dfl860eMibConfs, dfl860eIfBitsTotCnt=dfl860eIfBitsTotCnt, dfl860eLinkMonHostTable=dfl860eLinkMonHostTable, dfl860eDHCPRuleIndex=dfl860eDHCPRuleIndex, dfl860eIPsecInfoFailed=dfl860eIPsecInfoFailed, dfl860eSysPscTcpOpen=dfl860eSysPscTcpOpen, dfl860eHttpAlg=dfl860eHttpAlg, dfl860eSysConns=dfl860eSysConns, dfl860eIfHCPktsOutCnt=dfl860eIfHCPktsOutCnt, dfl860ePipeUsers=dfl860ePipeUsers, dfl860eIfRxRingTable=dfl860eIfRxRingTable, dfl860eStateCountersGroup=dfl860eStateCountersGroup, dfl860eSysForwardedBits=dfl860eSysForwardedBits, dfl860ePipePrecDropedPackets=dfl860ePipePrecDropedPackets, dfl860eDHCPRuleUsage=dfl860eDHCPRuleUsage, dfl860eSmtpAlgDnsBlFailChecks=dfl860eSmtpAlgDnsBlFailChecks, dfl860eIfRxDespools=dfl860eIfRxDespools, dfl860eDHCPServer=dfl860eDHCPServer, dfl860ePipeDefPrec=dfl860ePipeDefPrec, dfl860eHttpAlgName=dfl860eHttpAlgName, dfl860eIfPktsInCnt=dfl860eIfPktsInCnt, dfl860eDHCPRelayRuleRejSrvPkts=dfl860eDHCPRelayRuleRejSrvPkts, dfl860ePipeEntry=dfl860ePipeEntry, dfl860eStatsConformance=dfl860eStatsConformance, dfl860eUserAuthGroup=dfl860eUserAuthGroup, dfl860eIfVlanUntaggedTotPkts=dfl860eIfVlanUntaggedTotPkts, dfl860eIfHCBitsInCnt=dfl860eIfHCBitsInCnt, dfl860eIPsecGlobal=dfl860eIPsecGlobal, dfl860eIPsecQuickModeActive=dfl860eIPsecQuickModeActive, dfl860eSysConnCPS=dfl860eSysConnCPS, dfl860eIPPoolMisses=dfl860eIPPoolMisses, dfl860eLinkMonGrpEntry=dfl860eLinkMonGrpEntry, dfl860eSysPscOther=dfl860eSysPscOther, dfl860e_MIB=dfl860e_MIB, dfl860eDHCPRelayRejected=dfl860eDHCPRelayRejected, dfl860eIfVlanUntaggedInOctets=dfl860eIfVlanUntaggedInOctets)
mibBuilder.exportSymbols("DFL860e-MIB", dfl860eHttpAlgTotalRequested=dfl860eHttpAlgTotalRequested, dfl860eDHCPRelayCurTrans=dfl860eDHCPRelayCurTrans, dfl860eIfVlanUntaggedInPkts=dfl860eIfVlanUntaggedInPkts, dfl860eIPsecInOctetsComp=dfl860eIPsecInOctetsComp, dfl860eSmtpAlgName=dfl860eSmtpAlgName, dfl860eIfTxDespools=dfl860eIfTxDespools)
