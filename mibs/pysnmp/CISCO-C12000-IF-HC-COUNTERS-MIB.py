#
# PySNMP MIB module CISCO-C12000-IF-HC-COUNTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-C12000-IF-HC-COUNTERS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:34:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, TimeTicks, Unsigned32, Bits, iso, Counter64, Counter32, NotificationType, Integer32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Unsigned32", "Bits", "iso", "Counter64", "Counter32", "NotificationType", "Integer32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoC12000IfHcCountersMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 31))
if mibBuilder.loadTexts: ciscoC12000IfHcCountersMIB.setLastUpdated('9805270000Z')
if mibBuilder.loadTexts: ciscoC12000IfHcCountersMIB.setOrganization('Cisco Systems, Inc.')
cHCCounterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 1))
cHCCounterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1), )
if mibBuilder.loadTexts: cHCCounterTable.setStatus('current')
cHCCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cHCCounterEntry.setStatus('current')
cHCCounterIfInOctetsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInOctetsUpper.setStatus('current')
cHCCounterIfInOctetsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInOctetsLower.setStatus('current')
cHCCounterIfInUcastPktsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInUcastPktsUpper.setStatus('current')
cHCCounterIfInUcastPktsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInUcastPktsLower.setStatus('current')
cHCCounterIfOutOctetsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutOctetsUpper.setStatus('current')
cHCCounterIfOutOctetsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutOctetsLower.setStatus('current')
cHCCounterIfOutUcastPktsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutUcastPktsUpper.setStatus('current')
cHCCounterIfOutUcastPktsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutUcastPktsLower.setStatus('current')
ciscoHCCountersMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 2))
ciscoHCCountersMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 3))
ciscoHCCountersMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 1))
ciscoHCCountersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 2))
ciscoHCCountersMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 1, 1)).setObjects(("CISCO-C12000-IF-HC-COUNTERS-MIB", "ciscoHCCountersMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHCCountersMIBCompliance = ciscoHCCountersMIBCompliance.setStatus('current')
ciscoHCCountersMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 2, 1)).setObjects(("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInOctetsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInOctetsLower"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInUcastPktsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInUcastPktsLower"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutOctetsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutOctetsLower"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutUcastPktsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutUcastPktsLower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHCCountersMIBGroup = ciscoHCCountersMIBGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-C12000-IF-HC-COUNTERS-MIB", cHCCounterIfInUcastPktsUpper=cHCCounterIfInUcastPktsUpper, cHCCounterIfInUcastPktsLower=cHCCounterIfInUcastPktsLower, cHCCounterTable=cHCCounterTable, PYSNMP_MODULE_ID=ciscoC12000IfHcCountersMIB, ciscoHCCountersMIBCompliances=ciscoHCCountersMIBCompliances, ciscoHCCountersMIBGroups=ciscoHCCountersMIBGroups, cHCCounterIfOutOctetsLower=cHCCounterIfOutOctetsLower, ciscoHCCountersMIBCompliance=ciscoHCCountersMIBCompliance, cHCCounterIfInOctetsUpper=cHCCounterIfInOctetsUpper, ciscoHCCountersMIBGroup=ciscoHCCountersMIBGroup, cHCCounterMIBObjects=cHCCounterMIBObjects, ciscoC12000IfHcCountersMIB=ciscoC12000IfHcCountersMIB, cHCCounterEntry=cHCCounterEntry, ciscoHCCountersMIBConformance=ciscoHCCountersMIBConformance, cHCCounterIfOutUcastPktsUpper=cHCCounterIfOutUcastPktsUpper, cHCCounterIfOutUcastPktsLower=cHCCounterIfOutUcastPktsLower, ciscoHCCountersMIBNotifications=ciscoHCCountersMIBNotifications, cHCCounterIfOutOctetsUpper=cHCCounterIfOutOctetsUpper, cHCCounterIfInOctetsLower=cHCCounterIfInOctetsLower)
