#
# PySNMP MIB module PW-ENET-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PW-ENET-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
pwIndex, = mibBuilder.importSymbols("PW-STD-MIB", "pwIndex")
VlanIdOrAnyOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrAnyOrNone")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Bits, Counter32, Counter64, iso, Gauge32, IpAddress, mib_2, ObjectIdentity, TimeTicks, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Bits", "Counter32", "Counter64", "iso", "Gauge32", "IpAddress", "mib-2", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Integer32")
StorageType, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "TextualConvention", "RowStatus")
pwEnetStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 180))
pwEnetStdMIB.setRevisions(('2009-06-15 00:00',))
if mibBuilder.loadTexts: pwEnetStdMIB.setLastUpdated('200906150000Z')
if mibBuilder.loadTexts: pwEnetStdMIB.setOrganization('Pseudowire Edge-to-Edge Emulation (PWE3) Working Group')
pwEnetObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 180, 1))
pwEnetConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 180, 2))
pwEnetTable = MibTable((1, 3, 6, 1, 2, 1, 180, 1, 1), )
if mibBuilder.loadTexts: pwEnetTable.setStatus('current')
pwEnetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 180, 1, 1, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"), (0, "PW-ENET-STD-MIB", "pwEnetPwInstance"))
if mibBuilder.loadTexts: pwEnetEntry.setStatus('current')
pwEnetPwInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pwEnetPwInstance.setStatus('current')
pwEnetPwVlan = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 2), VlanIdOrAnyOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwEnetPwVlan.setStatus('current')
pwEnetVlanMode = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("portBased", 1), ("noChange", 2), ("changeVlan", 3), ("addVlan", 4), ("removeVlan", 5))).clone('noChange')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwEnetVlanMode.setStatus('current')
pwEnetPortVlan = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 4), VlanIdOrAnyOrNone().clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwEnetPortVlan.setStatus('current')
pwEnetPortIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwEnetPortIfIndex.setStatus('current')
pwEnetPwIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwEnetPwIfIndex.setStatus('current')
pwEnetRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwEnetRowStatus.setStatus('current')
pwEnetStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 1, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwEnetStorageType.setStatus('current')
pwEnetStatsTable = MibTable((1, 3, 6, 1, 2, 1, 180, 1, 2), )
if mibBuilder.loadTexts: pwEnetStatsTable.setStatus('current')
pwEnetStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 180, 1, 2, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: pwEnetStatsEntry.setStatus('current')
pwEnetStatsIllegalVlan = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 2, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwEnetStatsIllegalVlan.setStatus('current')
pwEnetStatsIllegalLength = MibTableColumn((1, 3, 6, 1, 2, 1, 180, 1, 2, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwEnetStatsIllegalLength.setStatus('current')
pwEnetGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 180, 2, 1))
pwEnetCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 180, 2, 2))
pwEnetModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 180, 2, 2, 1)).setObjects(("PW-ENET-STD-MIB", "pwEnetGroup"), ("PW-ENET-STD-MIB", "pwEnetStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwEnetModuleFullCompliance = pwEnetModuleFullCompliance.setStatus('current')
pwEnetModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 180, 2, 2, 2)).setObjects(("PW-ENET-STD-MIB", "pwEnetGroup"), ("PW-ENET-STD-MIB", "pwEnetStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwEnetModuleReadOnlyCompliance = pwEnetModuleReadOnlyCompliance.setStatus('current')
pwEnetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 180, 2, 1, 1)).setObjects(("PW-ENET-STD-MIB", "pwEnetPwVlan"), ("PW-ENET-STD-MIB", "pwEnetVlanMode"), ("PW-ENET-STD-MIB", "pwEnetPortVlan"), ("PW-ENET-STD-MIB", "pwEnetPortIfIndex"), ("PW-ENET-STD-MIB", "pwEnetPwIfIndex"), ("PW-ENET-STD-MIB", "pwEnetRowStatus"), ("PW-ENET-STD-MIB", "pwEnetStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwEnetGroup = pwEnetGroup.setStatus('current')
pwEnetStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 180, 2, 1, 2)).setObjects(("PW-ENET-STD-MIB", "pwEnetStatsIllegalVlan"), ("PW-ENET-STD-MIB", "pwEnetStatsIllegalLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwEnetStatsGroup = pwEnetStatsGroup.setStatus('current')
mibBuilder.exportSymbols("PW-ENET-STD-MIB", pwEnetPwVlan=pwEnetPwVlan, pwEnetStatsTable=pwEnetStatsTable, pwEnetStorageType=pwEnetStorageType, PYSNMP_MODULE_ID=pwEnetStdMIB, pwEnetConformance=pwEnetConformance, pwEnetStatsIllegalVlan=pwEnetStatsIllegalVlan, pwEnetModuleFullCompliance=pwEnetModuleFullCompliance, pwEnetStdMIB=pwEnetStdMIB, pwEnetModuleReadOnlyCompliance=pwEnetModuleReadOnlyCompliance, pwEnetObjects=pwEnetObjects, pwEnetPwIfIndex=pwEnetPwIfIndex, pwEnetPwInstance=pwEnetPwInstance, pwEnetStatsGroup=pwEnetStatsGroup, pwEnetTable=pwEnetTable, pwEnetVlanMode=pwEnetVlanMode, pwEnetStatsEntry=pwEnetStatsEntry, pwEnetEntry=pwEnetEntry, pwEnetGroups=pwEnetGroups, pwEnetRowStatus=pwEnetRowStatus, pwEnetPortVlan=pwEnetPortVlan, pwEnetGroup=pwEnetGroup, pwEnetPortIfIndex=pwEnetPortIfIndex, pwEnetStatsIllegalLength=pwEnetStatsIllegalLength, pwEnetCompliances=pwEnetCompliances)
