#
# PySNMP MIB module HPNSAECC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAECC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, Gauge32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Counter32, Integer32, ModuleIdentity, Counter64, NotificationType, Bits, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Gauge32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Counter32", "Integer32", "ModuleIdentity", "Counter64", "NotificationType", "Bits", "IpAddress", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaECC = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6))
hpnsaEccMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 1))
hpnsaEccAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2))
hpnsaEccLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3))
hpnsaEccMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMibRevMajor.setStatus('mandatory')
hpnsaEccMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMibRevMinor.setStatus('mandatory')
hpnsaEccAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1), )
if mibBuilder.loadTexts: hpnsaEccAgentTable.setStatus('mandatory')
hpnsaEccAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1), ).setIndexNames((0, "HPNSAECC-MIB", "hpnsaEccAgentIndex"))
if mibBuilder.loadTexts: hpnsaEccAgentEntry.setStatus('mandatory')
hpnsaEccAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentIndex.setStatus('mandatory')
hpnsaEccAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentName.setStatus('mandatory')
hpnsaEccAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentVersion.setStatus('mandatory')
hpnsaEccAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccAgentDate.setStatus('mandatory')
hpnsaEccStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccStatus.setStatus('mandatory')
hpnsaEccEraseLog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccEraseLog.setStatus('mandatory')
hpnsaEccTotalErrCorrected = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccTotalErrCorrected.setStatus('mandatory')
hpnsaEccTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("trapOn", 1), ("trapOff", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccTrapEnable.setStatus('mandatory')
hpnsaEccTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccTrapDelay.setStatus('mandatory')
hpnsaEccPollTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2592000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEccPollTime.setStatus('mandatory')
hpnsaEccMemErrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7), )
if mibBuilder.loadTexts: hpnsaEccMemErrTable.setStatus('mandatory')
hpnsaEccMemErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1), ).setIndexNames((0, "HPNSAECC-MIB", "hpnsaEccMemErrIndex"))
if mibBuilder.loadTexts: hpnsaEccMemErrEntry.setStatus('mandatory')
hpnsaEccMemErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMemErrIndex.setStatus('mandatory')
hpnsaEccMemErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMemErrTime.setStatus('mandatory')
hpnsaEccMemErrDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 6, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccMemErrDesc.setStatus('mandatory')
hpnsaEccErrorCorrected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4353))
hpnsaEccSBEOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4354))
hpnsaEccMemoryResize = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4355))
hpnsaEccMultiBitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4357))
hpnsaEccMultiBitErrorOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4358))
mibBuilder.exportSymbols("HPNSAECC-MIB", hpnsaEccPollTime=hpnsaEccPollTime, hpnsaEccTrapDelay=hpnsaEccTrapDelay, hpnsaEccMibRevMinor=hpnsaEccMibRevMinor, hpnsaEccMemErrDesc=hpnsaEccMemErrDesc, nm=nm, hpnsaEccAgentDate=hpnsaEccAgentDate, hpnsaEccMemErrTime=hpnsaEccMemErrTime, hpnsaEccAgentName=hpnsaEccAgentName, hpnsaEccMemErrTable=hpnsaEccMemErrTable, hpnsaEccMemoryResize=hpnsaEccMemoryResize, hpnsaEccAgentIndex=hpnsaEccAgentIndex, hpnsaEccMibRevMajor=hpnsaEccMibRevMajor, hpnsaEccLog=hpnsaEccLog, hpnsaEccTotalErrCorrected=hpnsaEccTotalErrCorrected, hpnsaEccMultiBitErrorOverflow=hpnsaEccMultiBitErrorOverflow, hpnsaEccErrorCorrected=hpnsaEccErrorCorrected, hpnsaEccAgentVersion=hpnsaEccAgentVersion, hpnsa=hpnsa, hpnsaEccTrapEnable=hpnsaEccTrapEnable, hpnsaEccMemErrEntry=hpnsaEccMemErrEntry, hpnsaEccSBEOverflow=hpnsaEccSBEOverflow, hpnsaEccAgent=hpnsaEccAgent, hpnsaEccStatus=hpnsaEccStatus, hpnsaEccMultiBitError=hpnsaEccMultiBitError, hpnsaEccMibRev=hpnsaEccMibRev, hpnsaEccAgentTable=hpnsaEccAgentTable, hpnsaEccAgentEntry=hpnsaEccAgentEntry, hpnsaEccMemErrIndex=hpnsaEccMemErrIndex, hp=hp, hpnsaECC=hpnsaECC, hpnsaEccEraseLog=hpnsaEccEraseLog)
