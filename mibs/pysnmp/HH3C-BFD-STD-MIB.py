#
# PySNMP MIB module HH3C-BFD-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-BFD-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ModuleIdentity, Gauge32, TimeTicks, ObjectIdentity, Integer32, IpAddress, Unsigned32, NotificationType, Bits, Counter64, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Gauge32", "TimeTicks", "ObjectIdentity", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "Bits", "Counter64", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
hh3cBfdMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 72))
hh3cBfdMIB.setRevisions(('2014-01-17 12:00', '2006-05-16 12:00',))
if mibBuilder.loadTexts: hh3cBfdMIB.setLastUpdated('201401171200Z')
if mibBuilder.loadTexts: hh3cBfdMIB.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cBfdNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 72, 0))
hh3cBfdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1))
hh3cBfdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 72, 2))
hh3cBfdGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 1))
class BfdSessIndexTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdInterval(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdDiag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noDiagnostic", 1), ("controlDetectionTimeExpired", 2), ("echoFunctionFailed", 3), ("neighborSignaledSessionDown", 4), ("forwardingPlaneReset", 5), ("pathDown", 6), ("concatenatedPathDown", 7), ("administrativelyDown", 8), ("reverseConcatenatedPathDown", 9))

hh3cBfdVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 1, 1), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdVersionNumber.setStatus('current')
hh3cBfdSysInitMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBfdSysInitMode.setStatus('current')
hh3cBfdSessNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBfdSessNotificationsEnable.setStatus('current')
hh3cBfdSessNumberLimit = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessNumberLimit.setStatus('current')
hh3cBfdIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 2), )
if mibBuilder.loadTexts: hh3cBfdIfTable.setStatus('current')
hh3cBfdIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 2, 1), ).setIndexNames((0, "HH3C-BFD-STD-MIB", "hh3cBfdIfIndex"))
if mibBuilder.loadTexts: hh3cBfdIfEntry.setStatus('current')
hh3cBfdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cBfdIfIndex.setStatus('current')
hh3cBfdIfDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 2, 1, 2), BfdInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBfdIfDesiredMinTxInterval.setStatus('current')
hh3cBfdIfDesiredMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 2, 1, 3), BfdInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBfdIfDesiredMinRxInterval.setStatus('current')
hh3cBfdIfDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBfdIfDetectMult.setStatus('current')
hh3cBfdIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3), ("mmd5", 4), ("sha1", 5), ("msha1", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdIfAuthType.setStatus('current')
hh3cBfdSessTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3), )
if mibBuilder.loadTexts: hh3cBfdSessTable.setStatus('current')
hh3cBfdSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1), ).setIndexNames((0, "HH3C-BFD-STD-MIB", "hh3cBfdSessIfIndex"), (0, "HH3C-BFD-STD-MIB", "hh3cBfdSessIndex"))
if mibBuilder.loadTexts: hh3cBfdSessEntry.setStatus('current')
hh3cBfdSessIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cBfdSessIfIndex.setStatus('current')
hh3cBfdSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 2), BfdSessIndexTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cBfdSessIndex.setStatus('current')
hh3cBfdSessAppSupportId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 3), Bits().clone(namedValues=NamedValues(("none", 0), ("ospf", 1), ("isis", 2), ("bgp", 3), ("mpls", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessAppSupportId.setStatus('current')
hh3cBfdSessLocalDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessLocalDiscr.setStatus('current')
hh3cBfdSessRemoteDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessRemoteDiscr.setStatus('current')
hh3cBfdSessDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 6), InetPortNumber().clone(3784)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessDstPort.setStatus('current')
hh3cBfdSessOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asynchModeWOEchoFun", 1), ("demandModeWOEchoFunction", 2), ("asyncModeWEchoFun", 3), ("demandModeWEchoFunction", 4))).clone('asynchModeWOEchoFun')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessOperMode.setStatus('current')
hh3cBfdSessAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessAddrType.setStatus('current')
hh3cBfdSessLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessLocalAddr.setStatus('current')
hh3cBfdSessRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessRemoteAddr.setStatus('current')
hh3cBfdSessLocalDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 11), BfdDiag().clone('noDiagnostic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessLocalDiag.setStatus('current')
hh3cBfdSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("adminDown", 0), ("down", 1), ("init", 2), ("up", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessState.setStatus('current')
hh3cBfdSessControlPlanIndepFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 13), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessControlPlanIndepFlag.setStatus('current')
hh3cBfdSessAuthFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessAuthFlag.setStatus('current')
hh3cBfdSessDemandModeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessDemandModeFlag.setStatus('current')
hh3cBfdSessStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 4), )
if mibBuilder.loadTexts: hh3cBfdSessStatTable.setStatus('current')
hh3cBfdSessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 4, 1), )
hh3cBfdSessEntry.registerAugmentions(("HH3C-BFD-STD-MIB", "hh3cBfdSessStatEntry"))
hh3cBfdSessStatEntry.setIndexNames(*hh3cBfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cBfdSessStatEntry.setStatus('current')
hh3cBfdSessStatPktInHC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessStatPktInHC.setStatus('current')
hh3cBfdSessStatPktOutHC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessStatPktOutHC.setStatus('current')
hh3cBfdSessStatDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessStatDownCount.setStatus('current')
hh3cBfdSessStatPktDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessStatPktDiscard.setStatus('current')
hh3cBfdSessStatPktLost = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessStatPktLost.setStatus('current')
hh3cBfdSessPerfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 5), )
if mibBuilder.loadTexts: hh3cBfdSessPerfTable.setStatus('current')
hh3cBfdSessPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 5, 1), )
hh3cBfdSessEntry.registerAugmentions(("HH3C-BFD-STD-MIB", "hh3cBfdSessPerfEntry"))
hh3cBfdSessPerfEntry.setIndexNames(*hh3cBfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cBfdSessPerfEntry.setStatus('current')
hh3cBfdSessPerfCreatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 5, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessPerfCreatTime.setStatus('current')
hh3cBfdSessPerfLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessPerfLastUpTime.setStatus('current')
hh3cBfdSessPerfLastDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 72, 1, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBfdSessPerfLastDownTime.setStatus('current')
hh3cBfdSessStateChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 72, 0, 1)).setObjects(("HH3C-BFD-STD-MIB", "hh3cBfdSessIfIndex"), ("HH3C-BFD-STD-MIB", "hh3cBfdSessIndex"), ("HH3C-BFD-STD-MIB", "hh3cBfdSessState"))
if mibBuilder.loadTexts: hh3cBfdSessStateChange.setStatus('current')
hh3cBfdSessAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 72, 0, 2)).setObjects(("HH3C-BFD-STD-MIB", "hh3cBfdIfIndex"))
if mibBuilder.loadTexts: hh3cBfdSessAuthFail.setStatus('current')
hh3cBfdSessStateUp = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 72, 0, 3)).setObjects(("HH3C-BFD-STD-MIB", "hh3cBfdSessIfIndex"), ("HH3C-BFD-STD-MIB", "hh3cBfdSessIndex"), ("HH3C-BFD-STD-MIB", "hh3cBfdSessState"))
if mibBuilder.loadTexts: hh3cBfdSessStateUp.setStatus('current')
hh3cBfdSessStateDown = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 72, 0, 4)).setObjects(("HH3C-BFD-STD-MIB", "hh3cBfdSessIfIndex"), ("HH3C-BFD-STD-MIB", "hh3cBfdSessIndex"), ("HH3C-BFD-STD-MIB", "hh3cBfdSessState"))
if mibBuilder.loadTexts: hh3cBfdSessStateDown.setStatus('current')
hh3cBfdSessReachLimit = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 72, 0, 5)).setObjects(("HH3C-BFD-STD-MIB", "hh3cBfdSessNumberLimit"))
if mibBuilder.loadTexts: hh3cBfdSessReachLimit.setStatus('current')
mibBuilder.exportSymbols("HH3C-BFD-STD-MIB", hh3cBfdMIB=hh3cBfdMIB, hh3cBfdSessAuthFlag=hh3cBfdSessAuthFlag, hh3cBfdSessStatDownCount=hh3cBfdSessStatDownCount, hh3cBfdSessLocalAddr=hh3cBfdSessLocalAddr, hh3cBfdSessAddrType=hh3cBfdSessAddrType, hh3cBfdNotifications=hh3cBfdNotifications, hh3cBfdSessEntry=hh3cBfdSessEntry, hh3cBfdSessAppSupportId=hh3cBfdSessAppSupportId, hh3cBfdSessIfIndex=hh3cBfdSessIfIndex, hh3cBfdSessRemoteAddr=hh3cBfdSessRemoteAddr, hh3cBfdSessPerfLastUpTime=hh3cBfdSessPerfLastUpTime, PYSNMP_MODULE_ID=hh3cBfdMIB, BfdDiag=BfdDiag, hh3cBfdObjects=hh3cBfdObjects, hh3cBfdSessState=hh3cBfdSessState, hh3cBfdSessNumberLimit=hh3cBfdSessNumberLimit, hh3cBfdSessAuthFail=hh3cBfdSessAuthFail, hh3cBfdSessTable=hh3cBfdSessTable, hh3cBfdSessStateChange=hh3cBfdSessStateChange, hh3cBfdSessOperMode=hh3cBfdSessOperMode, hh3cBfdGlobalObjects=hh3cBfdGlobalObjects, hh3cBfdSessIndex=hh3cBfdSessIndex, hh3cBfdSessPerfEntry=hh3cBfdSessPerfEntry, BfdInterval=BfdInterval, hh3cBfdSessStatPktInHC=hh3cBfdSessStatPktInHC, hh3cBfdSessPerfTable=hh3cBfdSessPerfTable, hh3cBfdIfDesiredMinTxInterval=hh3cBfdIfDesiredMinTxInterval, hh3cBfdIfDetectMult=hh3cBfdIfDetectMult, hh3cBfdVersionNumber=hh3cBfdVersionNumber, hh3cBfdSysInitMode=hh3cBfdSysInitMode, hh3cBfdIfEntry=hh3cBfdIfEntry, hh3cBfdSessStateUp=hh3cBfdSessStateUp, hh3cBfdSessControlPlanIndepFlag=hh3cBfdSessControlPlanIndepFlag, hh3cBfdSessStatEntry=hh3cBfdSessStatEntry, BfdSessIndexTC=BfdSessIndexTC, hh3cBfdSessStatPktDiscard=hh3cBfdSessStatPktDiscard, hh3cBfdIfAuthType=hh3cBfdIfAuthType, hh3cBfdSessRemoteDiscr=hh3cBfdSessRemoteDiscr, hh3cBfdSessStatTable=hh3cBfdSessStatTable, hh3cBfdSessStatPktLost=hh3cBfdSessStatPktLost, hh3cBfdSessPerfLastDownTime=hh3cBfdSessPerfLastDownTime, hh3cBfdConformance=hh3cBfdConformance, hh3cBfdSessNotificationsEnable=hh3cBfdSessNotificationsEnable, hh3cBfdSessStatPktOutHC=hh3cBfdSessStatPktOutHC, hh3cBfdSessLocalDiscr=hh3cBfdSessLocalDiscr, hh3cBfdSessDstPort=hh3cBfdSessDstPort, hh3cBfdIfDesiredMinRxInterval=hh3cBfdIfDesiredMinRxInterval, hh3cBfdSessReachLimit=hh3cBfdSessReachLimit, hh3cBfdIfTable=hh3cBfdIfTable, hh3cBfdSessLocalDiag=hh3cBfdSessLocalDiag, hh3cBfdSessPerfCreatTime=hh3cBfdSessPerfCreatTime, hh3cBfdSessStateDown=hh3cBfdSessStateDown, hh3cBfdSessDemandModeFlag=hh3cBfdSessDemandModeFlag, hh3cBfdIfIndex=hh3cBfdIfIndex)
