#
# PySNMP MIB module HUAWEI-DISMAN-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DISMAN-PING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:32:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
pingCtlTestName, pingCtlEntry, pingCtlOwnerIndex = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingCtlTestName", "pingCtlEntry", "pingCtlOwnerIndex")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, Gauge32, mib_2, Integer32, TimeTicks, Counter64, NotificationType, Counter32, ObjectIdentity, Unsigned32, ModuleIdentity, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Gauge32", "mib-2", "Integer32", "TimeTicks", "Counter64", "NotificationType", "Counter32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, Unsigned32, TimeStamp, RowStatus, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "Unsigned32", "TimeStamp", "RowStatus", "DateAndTime", "TextualConvention")
hwDismanPing = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28))
if mibBuilder.loadTexts: hwDismanPing.setLastUpdated('200308130000Z')
if mibBuilder.loadTexts: hwDismanPing.setOrganization('Huawei Technologies co.,Ltd.')
hwPingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1))
class InetAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

hwPingImplementationTypeDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2))
hwpingUdpEcho = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 1))
if mibBuilder.loadTexts: hwpingUdpEcho.setStatus('current')
hwpingTcpconnect = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 2))
if mibBuilder.loadTexts: hwpingTcpconnect.setStatus('current')
hwpingjitter = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 3))
if mibBuilder.loadTexts: hwpingjitter.setStatus('current')
hwpingHttp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 4))
if mibBuilder.loadTexts: hwpingHttp.setStatus('current')
hwpingdlsw = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 5))
if mibBuilder.loadTexts: hwpingdlsw.setStatus('current')
hwpingdhcp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 6))
if mibBuilder.loadTexts: hwpingdhcp.setStatus('current')
hwpingftp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 7))
if mibBuilder.loadTexts: hwpingftp.setStatus('current')
hwPingMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingMIBVersion.setStatus('current')
hwPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2), )
if mibBuilder.loadTexts: hwPingCtlTable.setStatus('current')
hwPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1), )
pingCtlEntry.registerAugmentions(("HUAWEI-DISMAN-PING-MIB", "hwPingCtlEntry"))
hwPingCtlEntry.setIndexNames(*pingCtlEntry.getIndexNames())
if mibBuilder.loadTexts: hwPingCtlEntry.setStatus('current')
hwpingCtlTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlTargetPort.setStatus('current')
hwpingCtlSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlSourcePort.setStatus('current')
hwpingCtlTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 3), Integer32().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlTTL.setStatus('current')
hwpingCtlJitterAdminInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 4), Integer32().clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlJitterAdminInterval.setStatus('current')
hwpingCtlJitterAdminNumPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 5), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlJitterAdminNumPackets.setStatus('current')
hwpingCtlHttpOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("post", 2))).clone('get')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlHttpOperationType.setStatus('current')
hwpingCtlHttpOperationString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlHttpOperationString.setStatus('current')
hwpingCtlFtpOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("put", 2))).clone('get')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpOperationType.setStatus('current')
hwpingCtlFtpUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpUsername.setStatus('current')
hwpingCtlFtpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpPassword.setStatus('current')
hwpingCtlFtpOperationString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpOperationString.setStatus('current')
hwpingCtlVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlVPNInstance.setStatus('current')
hwpingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3), )
if mibBuilder.loadTexts: hwpingResultsTable.setStatus('current')
hwpingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"))
if mibBuilder.loadTexts: hwpingResultsEntry.setStatus('current')
hwpingResultsRttNumDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttNumDisconnects.setStatus('current')
hwpingResultsRttTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttTimeouts.setStatus('current')
hwpingResultsRttBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttBusies.setStatus('current')
hwpingResultsRttNoConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttNoConnections.setStatus('current')
hwpingResultsRttDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttDrops.setStatus('current')
hwpingResultsRttSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttSequenceErrors.setStatus('current')
hwpingResultsRttStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttStatsErrors.setStatus('current')
hwpingResultsMaxDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsMaxDelaySD.setStatus('current')
hwpingResultsMaxDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsMaxDelayDS.setStatus('current')
hwpingResultsLostPacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsLostPacketRatio.setStatus('current')
hwPingJitterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4), )
if mibBuilder.loadTexts: hwPingJitterStatsTable.setStatus('current')
hwPingJitterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"))
if mibBuilder.loadTexts: hwPingJitterStatsEntry.setStatus('current')
hwPingJitterStatsNumOfRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfRTT.setStatus('current')
hwPingJitterStatsMinOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfPositivesSD.setStatus('current')
hwPingJitterStatsMaxOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfPositivesSD.setStatus('current')
hwPingJitterStatsNumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfPositivesSD.setStatus('current')
hwPingJitterStatsSumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfPositivesSD.setStatus('current')
hwPingJitterStatsSum2PositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2PositivesSD.setStatus('current')
hwPingJitterStatsMinOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfNegativesSD.setStatus('current')
hwPingJitterStatsMaxOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfNegativesSD.setStatus('current')
hwPingJitterStatsNumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfNegativesSD.setStatus('current')
hwPingJitterStatsSumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfNegativesSD.setStatus('current')
hwPingJitterStatsSum2NegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2NegativesSD.setStatus('current')
hwPingJitterStatsMinOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfPositivesDS.setStatus('current')
hwPingJitterStatsMaxOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfPositivesDS.setStatus('current')
hwPingJitterStatsNumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfPositivesDS.setStatus('current')
hwPingJitterStatsSumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfPositivesDS.setStatus('current')
hwPingJitterStatsSum2PositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2PositivesDS.setStatus('current')
hwPingJitterStatsMinOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfNegativesDS.setStatus('current')
hwPingJitterStatsMaxOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfNegativesDS.setStatus('current')
hwPingJitterStatsNumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfNegativesDS.setStatus('current')
hwPingJitterStatsSumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfNegativesDS.setStatus('current')
hwPingJitterStatsSum2NegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2NegativesDS.setStatus('current')
hwPingJitterStatsPacketLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsPacketLossSD.setStatus('current')
hwPingJitterStatsPacketLossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsPacketLossDS.setStatus('current')
hwPingJitterStatsAvePositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAvePositivesSD.setStatus('current')
hwPingJitterStatsAveNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAveNegativesSD.setStatus('current')
hwPingJitterStatsAvePositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAvePositivesDS.setStatus('current')
hwPingJitterStatsAveNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAveNegativesDS.setStatus('current')
hwPingJitterStatsPktLossUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 28), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsPktLossUnknown.setStatus('current')
hwPingAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPingAgentEnable.setStatus('current')
hwPingTcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6), )
if mibBuilder.loadTexts: hwPingTcpServerTable.setStatus('current')
hwPingTcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1), ).setIndexNames((0, "HUAWEI-DISMAN-PING-MIB", "hwPingTcpServerIpAddress"), (0, "HUAWEI-DISMAN-PING-MIB", "hwPingTcpServerPort"), (0, "HUAWEI-DISMAN-PING-MIB", "hwpingTcpServerVPNInstance"))
if mibBuilder.loadTexts: hwPingTcpServerEntry.setStatus('current')
hwPingTcpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 1), InetAddress().clone(hexValue=""))
if mibBuilder.loadTexts: hwPingTcpServerIpAddress.setStatus('current')
hwPingTcpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwPingTcpServerPort.setStatus('current')
hwpingTcpServerVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwpingTcpServerVPNInstance.setStatus('current')
hwpingTcpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingTcpServerRowStatus.setStatus('current')
hwPingUdpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7), )
if mibBuilder.loadTexts: hwPingUdpServerTable.setStatus('current')
hwPingUdpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1), ).setIndexNames((0, "HUAWEI-DISMAN-PING-MIB", "hwPingUdpServerIpAddress"), (0, "HUAWEI-DISMAN-PING-MIB", "hwPingUdpServerPort"), (0, "HUAWEI-DISMAN-PING-MIB", "hwpingUdpServerVPNInstance"))
if mibBuilder.loadTexts: hwPingUdpServerEntry.setStatus('current')
hwPingUdpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 1), InetAddress().clone(hexValue=""))
if mibBuilder.loadTexts: hwPingUdpServerIpAddress.setStatus('current')
hwPingUdpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwPingUdpServerPort.setStatus('current')
hwpingUdpServerVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwpingUdpServerVPNInstance.setStatus('current')
hwpingUdpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingUdpServerRowStatus.setStatus('current')
hwPingServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPingServerEnable.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-DISMAN-PING-MIB", hwPingJitterStatsNumOfPositivesSD=hwPingJitterStatsNumOfPositivesSD, hwpingftp=hwpingftp, hwpingResultsRttStatsErrors=hwpingResultsRttStatsErrors, hwPingTcpServerEntry=hwPingTcpServerEntry, hwPingJitterStatsAveNegativesSD=hwPingJitterStatsAveNegativesSD, hwPingJitterStatsSum2NegativesDS=hwPingJitterStatsSum2NegativesDS, hwpingUdpEcho=hwpingUdpEcho, hwpingTcpServerVPNInstance=hwpingTcpServerVPNInstance, hwpingResultsTable=hwpingResultsTable, hwpingTcpconnect=hwpingTcpconnect, hwpingResultsRttSequenceErrors=hwpingResultsRttSequenceErrors, hwPingTcpServerPort=hwPingTcpServerPort, hwpingHttp=hwpingHttp, hwPingJitterStatsSum2PositivesSD=hwPingJitterStatsSum2PositivesSD, hwPingJitterStatsSumOfNegativesSD=hwPingJitterStatsSumOfNegativesSD, hwPingImplementationTypeDomains=hwPingImplementationTypeDomains, hwPingJitterStatsNumOfNegativesDS=hwPingJitterStatsNumOfNegativesDS, hwpingResultsMaxDelaySD=hwpingResultsMaxDelaySD, hwpingCtlFtpPassword=hwpingCtlFtpPassword, hwPingJitterStatsSumOfNegativesDS=hwPingJitterStatsSumOfNegativesDS, hwPingUdpServerEntry=hwPingUdpServerEntry, hwPingJitterStatsNumOfNegativesSD=hwPingJitterStatsNumOfNegativesSD, hwPingJitterStatsMaxOfPositivesDS=hwPingJitterStatsMaxOfPositivesDS, hwPingJitterStatsEntry=hwPingJitterStatsEntry, hwpingUdpServerRowStatus=hwpingUdpServerRowStatus, hwPingJitterStatsSum2PositivesDS=hwPingJitterStatsSum2PositivesDS, InetAddress=InetAddress, hwPingJitterStatsSumOfPositivesSD=hwPingJitterStatsSumOfPositivesSD, hwpingdhcp=hwpingdhcp, hwPingAgentEnable=hwPingAgentEnable, hwPingJitterStatsMaxOfNegativesDS=hwPingJitterStatsMaxOfNegativesDS, hwpingUdpServerVPNInstance=hwpingUdpServerVPNInstance, hwPingJitterStatsTable=hwPingJitterStatsTable, hwPingUdpServerIpAddress=hwPingUdpServerIpAddress, hwpingdlsw=hwpingdlsw, hwpingResultsRttBusies=hwpingResultsRttBusies, hwpingResultsRttNumDisconnects=hwpingResultsRttNumDisconnects, hwPingJitterStatsAvePositivesSD=hwPingJitterStatsAvePositivesSD, hwPingJitterStatsNumOfPositivesDS=hwPingJitterStatsNumOfPositivesDS, hwPingMIBVersion=hwPingMIBVersion, hwPingJitterStatsMinOfPositivesDS=hwPingJitterStatsMinOfPositivesDS, hwPingJitterStatsSum2NegativesSD=hwPingJitterStatsSum2NegativesSD, hwpingCtlVPNInstance=hwpingCtlVPNInstance, hwPingObjects=hwPingObjects, hwPingJitterStatsAveNegativesDS=hwPingJitterStatsAveNegativesDS, hwPingUdpServerTable=hwPingUdpServerTable, hwpingCtlHttpOperationString=hwpingCtlHttpOperationString, hwpingCtlFtpUsername=hwpingCtlFtpUsername, hwpingResultsEntry=hwpingResultsEntry, hwpingCtlTTL=hwpingCtlTTL, hwpingResultsLostPacketRatio=hwpingResultsLostPacketRatio, hwpingTcpServerRowStatus=hwpingTcpServerRowStatus, hwPingJitterStatsMinOfNegativesSD=hwPingJitterStatsMinOfNegativesSD, hwPingJitterStatsSumOfPositivesDS=hwPingJitterStatsSumOfPositivesDS, hwpingjitter=hwpingjitter, hwPingServerEnable=hwPingServerEnable, hwPingJitterStatsMinOfNegativesDS=hwPingJitterStatsMinOfNegativesDS, hwPingJitterStatsAvePositivesDS=hwPingJitterStatsAvePositivesDS, hwpingCtlJitterAdminNumPackets=hwpingCtlJitterAdminNumPackets, hwPingJitterStatsMinOfPositivesSD=hwPingJitterStatsMinOfPositivesSD, hwpingResultsRttTimeouts=hwpingResultsRttTimeouts, hwpingCtlSourcePort=hwpingCtlSourcePort, hwpingResultsRttDrops=hwpingResultsRttDrops, hwPingJitterStatsPktLossUnknown=hwPingJitterStatsPktLossUnknown, hwPingJitterStatsMaxOfNegativesSD=hwPingJitterStatsMaxOfNegativesSD, hwpingCtlTargetPort=hwpingCtlTargetPort, hwPingJitterStatsNumOfRTT=hwPingJitterStatsNumOfRTT, PYSNMP_MODULE_ID=hwDismanPing, hwPingJitterStatsPacketLossSD=hwPingJitterStatsPacketLossSD, hwPingTcpServerIpAddress=hwPingTcpServerIpAddress, hwpingCtlFtpOperationType=hwpingCtlFtpOperationType, hwPingCtlTable=hwPingCtlTable, hwpingResultsRttNoConnections=hwpingResultsRttNoConnections, hwpingCtlJitterAdminInterval=hwpingCtlJitterAdminInterval, hwpingCtlFtpOperationString=hwpingCtlFtpOperationString, hwPingUdpServerPort=hwPingUdpServerPort, hwPingJitterStatsMaxOfPositivesSD=hwPingJitterStatsMaxOfPositivesSD, hwPingCtlEntry=hwPingCtlEntry, hwpingCtlHttpOperationType=hwpingCtlHttpOperationType, hwPingJitterStatsPacketLossDS=hwPingJitterStatsPacketLossDS, hwDismanPing=hwDismanPing, hwPingTcpServerTable=hwPingTcpServerTable, hwpingResultsMaxDelayDS=hwpingResultsMaxDelayDS)
