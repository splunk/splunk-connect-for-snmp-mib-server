#
# PySNMP MIB module NETSCREEN-IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-IDS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
netscreenIDS, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenIDS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, IpAddress, Bits, Counter64, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ModuleIdentity, NotificationType, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "IpAddress", "Bits", "Counter64", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ModuleIdentity", "NotificationType", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nsIdsProtect = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 3, 1))
nsIdsProtect.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2002-04-26 00:00', '2001-09-28 00:00', '2001-01-08 00:00',))
if mibBuilder.loadTexts: nsIdsProtect.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: nsIdsProtect.setOrganization('Juniper Networks, Inc.')
nsIdsProtectSetTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1), )
if mibBuilder.loadTexts: nsIdsProtectSetTable.setStatus('current')
nsIdsProtectSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1), ).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsProtectZoneIdx"))
if mibBuilder.loadTexts: nsIdsProtectSetEntry.setStatus('current')
nsIdsProtectZoneIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsProtectZoneIdx.setStatus('current')
nsIdsDetectPingOfDeath = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectPingOfDeath.setStatus('current')
nsIdsDetectTearDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTearDrop.setStatus('current')
nsIdsDetectWinNuke = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectWinNuke.setStatus('current')
nsIdsFilterIpSrcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsFilterIpSrcRoute.setStatus('current')
nsIdsDetectPortScan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectPortScan.setStatus('current')
nsIdsDetectAddrSweep = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectAddrSweep.setStatus('current')
nsIdsDetectLand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectLand.setStatus('current')
nsIdsBlockComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsBlockComponent.setStatus('current')
nsIdsDetectIpSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpSpoof.setStatus('current')
nsIdsDetectSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSyn.setStatus('current')
nsIdsDetectIcmpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpFlood.setStatus('current')
nsIdsDetectUdpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectUdpFlood.setStatus('current')
nsIdsDetectSynFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSynFrag.setStatus('current')
nsIdsDetectTcpNoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpNoFlag.setStatus('current')
nsIdsDetectIpUnknownProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpUnknownProt.setStatus('current')
nsIdsDetectIpOptBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptBad.setStatus('current')
nsIdsDetectIpOptRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptRecord.setStatus('current')
nsIdsDetectIpOptTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptTimestamp.setStatus('current')
nsIdsDetectIpOptSCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptSCHT.setStatus('current')
nsIdsDetectIpOptLSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptLSR.setStatus('current')
nsIdsDetectIpOptSSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptSSR.setStatus('current')
nsIdsDetectIpOptStream = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpOptStream.setStatus('current')
nsIdsDetectIcmpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpFrag.setStatus('current')
nsIdsDetectIcmpLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIcmpLarge.setStatus('current')
nsIdsDetectTcpSynFin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpSynFin.setStatus('current')
nsIdsDetectTcpFinNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectTcpFinNoAck.setStatus('current')
nsIdsHttpMalUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsHttpMalUrl.setStatus('current')
nsIdsSessMalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSessMalNum.setStatus('current')
nsIdsDetectSynAckAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectSynAckAck.setStatus('current')
nsIdsDetectIpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsDetectIpFrag.setStatus('current')
nsIdsProtectThreshTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2), )
if mibBuilder.loadTexts: nsIdsProtectThreshTable.setStatus('current')
nsIdsProtectThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1), ).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsProtectThreshZoneIdx"))
if mibBuilder.loadTexts: nsIdsProtectThreshEntry.setStatus('current')
nsIdsProtectThreshZoneIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsProtectThreshZoneIdx.setStatus('current')
nsIdsSynAttackThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackThresh.setStatus('current')
nsIdsSynAttackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackTimeout.setStatus('current')
nsIdsSynAttackAlmTh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackAlmTh.setStatus('current')
nsIdsSynAttackQueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackQueSize.setStatus('current')
nsIdsSynAttackAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAttackAgeTime.setStatus('current')
nsIdsIcmpFloodThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsIcmpFloodThresh.setStatus('current')
nsIdsUdpFloodThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsUdpFloodThresh.setStatus('current')
nsIdsPortScanThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsPortScanThresh.setStatus('current')
nsIdsIpSweepThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsIpSweepThresh.setStatus('current')
nsIdsSynAckAckThres = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsSynAckAckThres.setStatus('current')
nsIdsAttkMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 3, 2), )
if mibBuilder.loadTexts: nsIdsAttkMonTable.setStatus('current')
nsIdsAttkMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1), ).setIndexNames((0, "NETSCREEN-IDS-MIB", "nsIdsAttkMonIfIdx"))
if mibBuilder.loadTexts: nsIdsAttkMonEntry.setStatus('current')
nsIdsAttkMonIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIfIdx.setStatus('current')
nsIdsAttkMonVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonVsys.setStatus('current')
nsIdsAttkMonSynAttk = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonSynAttk.setStatus('current')
nsIdsAttkMonTearDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonTearDrop.setStatus('current')
nsIdsAttkMonSrcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonSrcRoute.setStatus('current')
nsIdsAttkMonPingDeath = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonPingDeath.setStatus('current')
nsIdsAttkMonAddrSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonAddrSpoof.setStatus('current')
nsIdsAttkMonLand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonLand.setStatus('current')
nsIdsAttkMonIcmpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIcmpFlood.setStatus('current')
nsIdsAttkMonUdpFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonUdpFlood.setStatus('current')
nsIdsAttkMonWinnuke = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonWinnuke.setStatus('current')
nsIdsAttkMonPortScan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonPortScan.setStatus('current')
nsIdsAttkMonIpSweep = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIpSweep.setStatus('current')
nsAttkMonSynFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSynFrag.setStatus('current')
nsAttkMonTcpNoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpNoFlag.setStatus('current')
nsAttkMonIpUnknownProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpUnknownProt.setStatus('current')
nsAttkMonIpOptBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptBad.setStatus('current')
nsAttkMonIpOptRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptRecord.setStatus('current')
nsAttkMonIpOptTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptTimestamp.setStatus('current')
nsAttkMonIpOptSCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptSCHT.setStatus('current')
nsAttkMonIpOptLSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptLSR.setStatus('current')
nsAttkMonIpOptSSR = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptSSR.setStatus('current')
nsAttkMonIpOptStream = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpOptStream.setStatus('current')
nsAttkMonIcmpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIcmpFrag.setStatus('current')
nsAttkMonIcmpLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIcmpLarge.setStatus('current')
nsAttkMonTcpSynFin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpSynFin.setStatus('current')
nsAttkMonTcpFinNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonTcpFinNoAck.setStatus('current')
nsAttkMonHttpMalUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonHttpMalUrl.setStatus('current')
nsAttkMonSessMalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSessMalNum.setStatus('current')
nsAttkMonSynAckAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonSynAckAck.setStatus('current')
nsAttkMonIpFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsAttkMonIpFrag.setStatus('current')
nsIdsAttkMonIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIdsAttkMonIfInfo.setStatus('current')
mibBuilder.exportSymbols("NETSCREEN-IDS-MIB", nsIdsSynAttackAgeTime=nsIdsSynAttackAgeTime, nsIdsDetectIpFrag=nsIdsDetectIpFrag, nsIdsDetectTcpNoFlag=nsIdsDetectTcpNoFlag, nsAttkMonIpUnknownProt=nsAttkMonIpUnknownProt, nsAttkMonIpOptStream=nsAttkMonIpOptStream, nsIdsAttkMonPortScan=nsIdsAttkMonPortScan, nsAttkMonSynAckAck=nsAttkMonSynAckAck, nsIdsAttkMonIcmpFlood=nsIdsAttkMonIcmpFlood, nsIdsDetectWinNuke=nsIdsDetectWinNuke, nsIdsHttpMalUrl=nsIdsHttpMalUrl, nsIdsAttkMonAddrSpoof=nsIdsAttkMonAddrSpoof, nsIdsDetectIpUnknownProt=nsIdsDetectIpUnknownProt, nsIdsProtect=nsIdsProtect, nsIdsUdpFloodThresh=nsIdsUdpFloodThresh, nsIdsAttkMonVsys=nsIdsAttkMonVsys, nsIdsBlockComponent=nsIdsBlockComponent, nsIdsProtectThreshTable=nsIdsProtectThreshTable, nsAttkMonHttpMalUrl=nsAttkMonHttpMalUrl, nsIdsAttkMonSynAttk=nsIdsAttkMonSynAttk, nsIdsDetectPingOfDeath=nsIdsDetectPingOfDeath, nsIdsSynAttackTimeout=nsIdsSynAttackTimeout, nsIdsPortScanThresh=nsIdsPortScanThresh, nsAttkMonIpFrag=nsAttkMonIpFrag, nsIdsDetectIpOptTimestamp=nsIdsDetectIpOptTimestamp, nsIdsSynAttackAlmTh=nsIdsSynAttackAlmTh, PYSNMP_MODULE_ID=nsIdsProtect, nsIdsDetectPortScan=nsIdsDetectPortScan, nsIdsDetectIpSpoof=nsIdsDetectIpSpoof, nsIdsSynAttackQueSize=nsIdsSynAttackQueSize, nsIdsAttkMonIfIdx=nsIdsAttkMonIfIdx, nsIdsDetectSyn=nsIdsDetectSyn, nsIdsDetectIpOptLSR=nsIdsDetectIpOptLSR, nsIdsDetectIpOptBad=nsIdsDetectIpOptBad, nsIdsAttkMonIfInfo=nsIdsAttkMonIfInfo, nsIdsDetectTcpFinNoAck=nsIdsDetectTcpFinNoAck, nsAttkMonTcpNoFlag=nsAttkMonTcpNoFlag, nsAttkMonIpOptTimestamp=nsAttkMonIpOptTimestamp, nsAttkMonIcmpFrag=nsAttkMonIcmpFrag, nsAttkMonIpOptSSR=nsAttkMonIpOptSSR, nsIdsDetectUdpFlood=nsIdsDetectUdpFlood, nsIdsAttkMonUdpFlood=nsIdsAttkMonUdpFlood, nsIdsSynAttackThresh=nsIdsSynAttackThresh, nsIdsDetectSynFrag=nsIdsDetectSynFrag, nsAttkMonSynFrag=nsAttkMonSynFrag, nsAttkMonTcpFinNoAck=nsAttkMonTcpFinNoAck, nsIdsDetectTearDrop=nsIdsDetectTearDrop, nsIdsSynAckAckThres=nsIdsSynAckAckThres, nsIdsDetectIcmpFlood=nsIdsDetectIcmpFlood, nsIdsProtectThreshEntry=nsIdsProtectThreshEntry, nsIdsDetectTcpSynFin=nsIdsDetectTcpSynFin, nsIdsAttkMonSrcRoute=nsIdsAttkMonSrcRoute, nsIdsDetectIcmpLarge=nsIdsDetectIcmpLarge, nsIdsProtectZoneIdx=nsIdsProtectZoneIdx, nsAttkMonIpOptSCHT=nsAttkMonIpOptSCHT, nsIdsProtectThreshZoneIdx=nsIdsProtectThreshZoneIdx, nsAttkMonSessMalNum=nsAttkMonSessMalNum, nsIdsDetectIpOptSCHT=nsIdsDetectIpOptSCHT, nsIdsAttkMonPingDeath=nsIdsAttkMonPingDeath, nsAttkMonIpOptBad=nsAttkMonIpOptBad, nsIdsAttkMonEntry=nsIdsAttkMonEntry, nsIdsAttkMonTable=nsIdsAttkMonTable, nsIdsIcmpFloodThresh=nsIdsIcmpFloodThresh, nsIdsDetectIpOptStream=nsIdsDetectIpOptStream, nsAttkMonIcmpLarge=nsAttkMonIcmpLarge, nsIdsDetectLand=nsIdsDetectLand, nsIdsProtectSetEntry=nsIdsProtectSetEntry, nsIdsSessMalNum=nsIdsSessMalNum, nsIdsIpSweepThresh=nsIdsIpSweepThresh, nsIdsDetectIpOptSSR=nsIdsDetectIpOptSSR, nsIdsDetectAddrSweep=nsIdsDetectAddrSweep, nsIdsAttkMonWinnuke=nsIdsAttkMonWinnuke, nsAttkMonIpOptLSR=nsAttkMonIpOptLSR, nsIdsFilterIpSrcRoute=nsIdsFilterIpSrcRoute, nsAttkMonTcpSynFin=nsAttkMonTcpSynFin, nsIdsAttkMonTearDrop=nsIdsAttkMonTearDrop, nsIdsAttkMonIpSweep=nsIdsAttkMonIpSweep, nsIdsAttkMonLand=nsIdsAttkMonLand, nsIdsProtectSetTable=nsIdsProtectSetTable, nsIdsDetectIpOptRecord=nsIdsDetectIpOptRecord, nsAttkMonIpOptRecord=nsAttkMonIpOptRecord, nsIdsDetectSynAckAck=nsIdsDetectSynAckAck, nsIdsDetectIcmpFrag=nsIdsDetectIcmpFrag)
