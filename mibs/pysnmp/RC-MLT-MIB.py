#
# PySNMP MIB module RC-MLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RC-MLT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:43:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
PortSet, rcL2Redundancy, rcStat, rcMlt, rcLinkFlapDetect, IdList, EnableValue = mibBuilder.importSymbols("RAPID-CITY", "PortSet", "rcL2Redundancy", "rcStat", "rcMlt", "rcLinkFlapDetect", "IdList", "EnableValue")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ModuleIdentity, iso, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, ObjectIdentity, NotificationType, Counter64, MibIdentifier, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "iso", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "ObjectIdentity", "NotificationType", "Counter64", "MibIdentifier", "Gauge32", "Integer32")
TextualConvention, TruthValue, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress", "RowStatus")
rcMltMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2272, 1, 17, 0))
rcMltMib.setRevisions(('2010-10-20 00:00', '2010-09-21 00:00', '2010-09-14 00:00', '2009-12-16 00:00', '2009-11-16 00:00', '2009-03-20 00:00', '2007-12-20 00:00', '2007-04-16 00:00', '2006-07-05 00:00', '2005-12-06 00:00', '2005-09-01 00:00', '2005-08-10 00:00', '2005-07-11 00:00', '2005-05-27 00:00', '2005-02-02 00:00', '2005-01-04 00:00', '2004-12-21 00:00', '2004-09-30 00:00', '2004-09-23 00:00', '2004-07-13 00:00',))
if mibBuilder.loadTexts: rcMltMib.setLastUpdated('201010200000Z')
if mibBuilder.loadTexts: rcMltMib.setOrganization('Bay Networks, Rapid-City Group')
rcStatMlt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6))
rcStatMltIfExtnTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1), )
if mibBuilder.loadTexts: rcStatMltIfExtnTable.setStatus('current')
rcStatMltIfExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltIfExtnMltId"))
if mibBuilder.loadTexts: rcStatMltIfExtnEntry.setStatus('current')
rcStatMltIfExtnMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnMltId.setStatus('current')
rcStatMltIfExtnIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfInMulticastPkts.setStatus('current')
rcStatMltIfExtnIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfInBroadcastPkts.setStatus('current')
rcStatMltIfExtnIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfOutMulticastPkts.setStatus('current')
rcStatMltIfExtnIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfOutBroadcastPkts.setStatus('current')
rcStatMltIfExtnIfHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInOctets.setStatus('current')
rcStatMltIfExtnIfHCInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInUcastPkts.setStatus('current')
rcStatMltIfExtnIfHCInMulticastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInMulticastPkt.setStatus('current')
rcStatMltIfExtnIfHCInBroadcastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInBroadcastPkt.setStatus('current')
rcStatMltIfExtnIfHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutOctets.setStatus('current')
rcStatMltIfExtnIfHCOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutUcastPkts.setStatus('current')
rcStatMltIfExtnIfHCOutMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutMulticast.setStatus('current')
rcStatMltIfExtnIfHCOutBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutBroadcast.setStatus('current')
rcStatMltEtherTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2), )
if mibBuilder.loadTexts: rcStatMltEtherTable.setStatus('current')
rcStatMltEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltEtherMltId"))
if mibBuilder.loadTexts: rcStatMltEtherEntry.setStatus('current')
rcStatMltEtherMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherMltId.setStatus('current')
rcStatMltEtherAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherAlignmentErrors.setStatus('current')
rcStatMltEtherFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherFCSErrors.setStatus('current')
rcStatMltEtherSingleCollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherSingleCollFrames.setStatus('current')
rcStatMltEtherMultipleCollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherMultipleCollFrames.setStatus('current')
rcStatMltEtherSQETestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherSQETestError.setStatus('current')
rcStatMltEtherDeferredTransmiss = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherDeferredTransmiss.setStatus('current')
rcStatMltEtherLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherLateCollisions.setStatus('current')
rcStatMltEtherExcessiveCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherExcessiveCollis.setStatus('current')
rcStatMltEtherIMacTransmitError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherIMacTransmitError.setStatus('current')
rcStatMltEtherCarrierSenseError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherCarrierSenseError.setStatus('current')
rcStatMltEtherFrameTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherFrameTooLong.setStatus('current')
rcStatMltEtherIMacReceiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherIMacReceiveError.setStatus('current')
rcStatMltIpTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3), )
if mibBuilder.loadTexts: rcStatMltIpTable.setStatus('deprecated')
rcStatMltIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltIpMltId"))
if mibBuilder.loadTexts: rcStatMltIpEntry.setStatus('deprecated')
rcStatMltIpMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpMltId.setStatus('deprecated')
rcStatMltIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInReceives.setStatus('deprecated')
rcStatMltIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInHdrErrors.setStatus('deprecated')
rcStatMltIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInAddrErrors.setStatus('deprecated')
rcStatMltIpForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpForwDatagrams.setStatus('deprecated')
rcStatMltIpInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInUnknownProtos.setStatus('deprecated')
rcStatMltIpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInDiscards.setStatus('deprecated')
rcStatMltIpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInDelivers.setStatus('deprecated')
rcStatMltIpOutRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpOutRequest.setStatus('deprecated')
rcStatMltIpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpOutDiscards.setStatus('deprecated')
rcStatMltIpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpOutNoRoutes.setStatus('deprecated')
rcStatMltIpReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpReasmReqds.setStatus('deprecated')
rcStatMltIpReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpReasmOKs.setStatus('deprecated')
rcStatMltIpReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpReasmFails.setStatus('deprecated')
rcStatMltIpFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpFragOKs.setStatus('deprecated')
rcStatMltIpFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpFragFails.setStatus('deprecated')
rcStatMltIpFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpFragCreates.setStatus('deprecated')
rcStatMltIpRoutingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpRoutingDiscards.setStatus('deprecated')
rcStatSmltIstDownCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltIstDownCnt.setStatus('current')
rcStatSmltHelloTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltHelloTxMsgCnt.setStatus('current')
rcStatSmltHelloRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltHelloRxMsgCnt.setStatus('current')
rcStatSmltLearnMacAddrTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLearnMacAddrTxMsgCnt.setStatus('current')
rcStatSmltLearnMacAddrRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLearnMacAddrRxMsgCnt.setStatus('current')
rcStatSmltMacAddrAgeOutTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeOutTxMsgCnt.setStatus('current')
rcStatSmltMacAddrAgeOutRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeOutRxMsgCnt.setStatus('current')
rcStatSmltMacAddrAgeExpTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeExpTxMsgCnt.setStatus('current')
rcStatSmltMacAddrAgeExpRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeExpRxMsgCnt.setStatus('current')
rcStatSmltStgInfoTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltStgInfoTxMsgCnt.setStatus('current')
rcStatSmltStgInfoRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltStgInfoRxMsgCnt.setStatus('current')
rcStatSmltDelMacAddrTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltDelMacAddrTxMsgCnt.setStatus('current')
rcStatSmltDelMacAddrRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltDelMacAddrRxMsgCnt.setStatus('current')
rcStatSmltSmltDownTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltDownTxMsgCnt.setStatus('current')
rcStatSmltSmltDownRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltDownRxMsgCnt.setStatus('current')
rcStatSmltSmltUpTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltUpTxMsgCnt.setStatus('current')
rcStatSmltSmltUpRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltUpRxMsgCnt.setStatus('current')
rcStatSmltSendMacTblTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSendMacTblTxMsgCnt.setStatus('current')
rcStatSmltSendMacTblRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSendMacTblRxMsgCnt.setStatus('current')
rcStatSmltIgmpTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltIgmpTxMsgCnt.setStatus('current')
rcStatSmltIgmpRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltIgmpRxMsgCnt.setStatus('current')
rcStatSmltPortDownTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltPortDownTxMsgCnt.setStatus('current')
rcStatSmltPortDownRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltPortDownRxMsgCnt.setStatus('current')
rcStatSmltReqMacTblTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltReqMacTblTxMsgCnt.setStatus('current')
rcStatSmltReqMacTblRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltReqMacTblRxMsgCnt.setStatus('current')
rcStatSmltRxUnknownMsgTypeCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltRxUnknownMsgTypeCnt.setStatus('current')
rcStatMltIfUtilTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30), )
if mibBuilder.loadTexts: rcStatMltIfUtilTable.setStatus('current')
rcStatMltIfUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltIfUtilMltId"))
if mibBuilder.loadTexts: rcStatMltIfUtilEntry.setStatus('current')
rcStatMltIfUtilMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: rcStatMltIfUtilMltId.setStatus('current')
rcStatMltIfUtilIfHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCInOctets.setStatus('current')
rcStatMltIfUtilIfHCInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCInUtil.setStatus('current')
rcStatMltIfUtilIfHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCOutOctets.setStatus('current')
rcStatMltIfUtilIfHCOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCOutUtil.setStatus('current')
rcStatSmltLacpInfoRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLacpInfoRxMsgCnt.setStatus('current')
rcStatSmltLacpInfoTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLacpInfoTxMsgCnt.setStatus('current')
rcStatMltUtilTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33), )
if mibBuilder.loadTexts: rcStatMltUtilTable.setStatus('current')
rcStatMltUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltId"), (0, "RC-MLT-MIB", "rcStatMltUtilPortIfIndex"), (0, "RC-MLT-MIB", "rcStatMltUtilTrafficType"))
if mibBuilder.loadTexts: rcStatMltUtilEntry.setStatus('current')
rcStatMltUtilPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rcStatMltUtilPortIfIndex.setStatus('current')
rcStatMltUtilTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("rxTx", 3))))
if mibBuilder.loadTexts: rcStatMltUtilTrafficType.setStatus('current')
rcStatMltUtilTrafficLast5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast5Min.setStatus('current')
rcStatMltUtilTrafficLast30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast30Min.setStatus('current')
rcStatMltUtilTrafficLast1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast1Hour.setStatus('current')
rcMltNumMlts = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltNumMlts.setStatus('current')
rcMltPotentialMembers = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 2), PortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltPotentialMembers.setStatus('current')
rcMltIstSessionEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 3), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltIstSessionEnable.setStatus('current')
rcMltIstSessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltIstSessionStatus.setStatus('current')
rcMltIstPeerIp = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltIstPeerIp.setStatus('current')
rcMltIstVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltIstVlanId.setStatus('current')
rcMltDisablePortsOnShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltDisablePortsOnShutdown.setStatus('current')
rcMltTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10), )
if mibBuilder.loadTexts: rcMltTable.setStatus('current')
rcMltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltId"))
if mibBuilder.loadTexts: rcMltEntry.setStatus('current')
rcMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltId.setStatus('current')
rcMltName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltName.setStatus('current')
rcMltPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 3), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltPortMembers.setStatus('current')
rcMltPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2))).clone('access')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltPortType.setStatus('current')
rcMltNumVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltNumVlanIds.setStatus('current')
rcMltVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 6), IdList().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltVlanIds.setStatus('current')
rcMltRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltRowStatus.setStatus('current')
rcMltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltEnable.setStatus('current')
rcMltLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltLoadBalance.setStatus('current')
rcMltDistributionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("basic", 2), ("advanced", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltDistributionAlgorithm.setStatus('current')
rcMltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltIfIndex.setStatus('current')
rcMltMltType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalMLT", 1), ("istMLT", 2), ("splitMLT", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltMltType.setStatus('current')
rcMltSmltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltSmltId.setStatus('current')
rcMltRunningType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalMLT", 1), ("istMLT", 2), ("splitMLT", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltRunningType.setStatus('current')
rcMltSvlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("uni", 2), ("nni", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltSvlanPortType.setStatus('current')
rcMltMulticastDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 16), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltMulticastDistribution.setStatus('current')
rcMltLacp10gBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 17), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltLacp10gBackup.setStatus('current')
rcMltAggregatable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 18), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltAggregatable.setStatus('current')
rcMltClearLinkAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltClearLinkAggregate.setStatus('current')
rcMltNtStgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 20), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltNtStgEnable.setStatus('current')
rcMltDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 21), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltDesignatedPort.setStatus('current')
rcMltAggOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 22), EnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltAggOperState.setStatus('current')
rcMltAggTimeOfLastOperChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltAggTimeOfLastOperChange.setStatus('current')
rcMltVplsMgmtVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 24), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltVplsMgmtVlan.setStatus('current')
rcMltLoadDistributionOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bmac", 1), ("cmac", 2), ("bvid", 3), ("isid", 4))).clone('bmac')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltLoadDistributionOption.setStatus('current')
rcMltUniAggrMacIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 448))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltUniAggrMacIdx.setStatus('current')
rcMltUniAggrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 27), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltUniAggrMacAddress.setStatus('current')
rcMltQinqEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltQinqEtherType.setStatus('current')
rcMltEgressCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)).clone('DEFAULT_PORT_PROFILE')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltEgressCosProfileName.setStatus('current')
rcMltEgressPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 30), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltEgressPolicerAdminState.setStatus('current')
rcMltAggrEgressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 31), EnableValue().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltAggrEgressBandwidth.setStatus('current')
rcMltAggrIngressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 32), EnableValue().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltAggrIngressBandwidth.setStatus('current')
rcMltAggrMacAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 33), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltAggrMacAlloc.setStatus('current')
rcMltAggMinLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltAggMinLink.setStatus('current')
rcMltMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600)).clone(1518)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMtu.setStatus('current')
rcMltInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("silent", 2), ("uni", 3))).clone('silent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltInterfaceType.setStatus('current')
rcMltConfiguredMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 37), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltConfiguredMembers.setStatus('current')
rcMltMtuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 38), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMtuAdminState.setStatus('current')
rcMltPeerPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 39), PortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltPeerPortMembers.setStatus('current')
rcMltCpLimitPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 20000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltCpLimitPktRate.setStatus('current')
rcMltCpLimitShutDownEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 41), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltCpLimitShutDownEnable.setStatus('current')
rcMltVlanIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlanIdList.setStatus('current')
rcMltEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3), ("localAndRemote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltEntryOwner.setStatus('current')
rcMltDatapathProgrammingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3), ("localAndRemote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltDatapathProgrammingState.setStatus('current')
rcMltMcastDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11))
rcMltMcastDistributionEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionEnable.setStatus('current')
rcMltMcastDistributionGrpMask = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionGrpMask.setStatus('current')
rcMltMcastDistributionSrcMask = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionSrcMask.setStatus('current')
rcMltMcastDistributionRedistributionEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionRedistributionEnable.setStatus('current')
rcSltPortTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12), )
if mibBuilder.loadTexts: rcSltPortTable.setStatus('current')
rcSltPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcSltPortIfIndex"))
if mibBuilder.loadTexts: rcSltPortEntry.setStatus('current')
rcSltPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcSltPortIfIndex.setStatus('current')
rcSltPortSmltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcSltPortSmltId.setStatus('current')
rcSltPortOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("smlt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcSltPortOperType.setStatus('current')
rcSltPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcSltPortRowStatus.setStatus('current')
rcMltVlacpTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13), )
if mibBuilder.loadTexts: rcMltVlacpTable.setStatus('current')
rcMltVlacpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltId"))
if mibBuilder.loadTexts: rcMltVlacpEntry.setStatus('current')
rcMltVlacpAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpAdminEnable.setStatus('current')
rcMltVlacpFastPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 2), Integer32().clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpFastPeriodicTimer.setStatus('current')
rcMltVlacpTimeoutScale = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 3), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpTimeoutScale.setStatus('current')
rcMltVlacpEtherMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpEtherMacAddress.setStatus('current')
rcMltVlacpDualHomingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpDualHomingEnable.setStatus('current')
rcMltBvidPortTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14), )
if mibBuilder.loadTexts: rcMltBvidPortTable.setStatus('current')
rcMltBvidPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltBvidMltId"), (0, "RC-MLT-MIB", "rcMltBvidVlanId"))
if mibBuilder.loadTexts: rcMltBvidPortEntry.setStatus('current')
rcMltBvidMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: rcMltBvidMltId.setStatus('current')
rcMltBvidVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: rcMltBvidVlanId.setStatus('current')
rcMltBvidPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltBvidPrimaryPort.setStatus('current')
rcMltBvidSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltBvidSecondaryPort.setStatus('current')
rcMltBvidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltBvidRowStatus.setStatus('current')
rcMltNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 17, 15))
rcMltAggTrapEvent = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localdown", 1), ("remotedown", 2), ("up", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rcMltAggTrapEvent.setStatus('current')
rcLinkFlapDetectAutoPortDownEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectAutoPortDownEnable.setStatus('current')
rcLinkFlapDetectSendTrap = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectSendTrap.setStatus('current')
rcLinkFlapDetectFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectFrequency.setStatus('current')
rcLinkFlapDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectInterval.setStatus('current')
rcL2RedundancyHaCpuState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("initialization", 0), ("oneWayActive", 1), ("twoWayActive", 2), ("synchronized", 3), ("remoteIncompatible", 4), ("error", 5), ("disabled", 6), ("peerNotConnected", 7), ("peerConnected", 8), ("lostPeerConnection", 9), ("notSynchronized", 10), ("synchronizeInProgress", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcL2RedundancyHaCpuState.setStatus('current')
rcL2RedundancyHaEvent = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("restart", 0), ("systemRegistrationDone", 1), ("tableSynchronizationDone", 2), ("versionIncompatible", 3), ("noEvent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcL2RedundancyHaEvent.setStatus('current')
rcL2RedundancyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 3), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcL2RedundancyEnable.setStatus('current')
rcL2RedundancyStandbyCpu = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hotStandbyCPU", 1), ("warmStandbyCPU", 2), ("standbyCPUNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcL2RedundancyStandbyCpu.setStatus('current')
mibBuilder.exportSymbols("RC-MLT-MIB", rcStatSmltIstDownCnt=rcStatSmltIstDownCnt, rcStatMltIfExtnIfHCOutMulticast=rcStatMltIfExtnIfHCOutMulticast, rcStatMltIfUtilIfHCOutUtil=rcStatMltIfUtilIfHCOutUtil, rcStatSmltSmltUpRxMsgCnt=rcStatSmltSmltUpRxMsgCnt, rcStatMltIfExtnEntry=rcStatMltIfExtnEntry, rcMltIstSessionEnable=rcMltIstSessionEnable, rcStatSmltLacpInfoTxMsgCnt=rcStatSmltLacpInfoTxMsgCnt, rcSltPortEntry=rcSltPortEntry, rcStatMltIpTable=rcStatMltIpTable, rcMltBvidRowStatus=rcMltBvidRowStatus, rcStatMltUtilTable=rcStatMltUtilTable, rcMltPortMembers=rcMltPortMembers, rcStatMltIpRoutingDiscards=rcStatMltIpRoutingDiscards, rcMltUniAggrMacIdx=rcMltUniAggrMacIdx, rcStatMltEtherFrameTooLong=rcStatMltEtherFrameTooLong, rcMltLacp10gBackup=rcMltLacp10gBackup, rcMltAggTimeOfLastOperChange=rcMltAggTimeOfLastOperChange, rcMltPeerPortMembers=rcMltPeerPortMembers, rcMltMcastDistribution=rcMltMcastDistribution, rcMltAggregatable=rcMltAggregatable, rcMltSmltId=rcMltSmltId, rcStatMltIpInDelivers=rcStatMltIpInDelivers, rcMltNotificationObjects=rcMltNotificationObjects, rcMltAggMinLink=rcMltAggMinLink, rcStatMltEtherSQETestError=rcStatMltEtherSQETestError, rcMltMcastDistributionRedistributionEnable=rcMltMcastDistributionRedistributionEnable, rcLinkFlapDetectAutoPortDownEnable=rcLinkFlapDetectAutoPortDownEnable, rcMltConfiguredMembers=rcMltConfiguredMembers, rcStatMltEtherMltId=rcStatMltEtherMltId, rcStatMltIfExtnIfInBroadcastPkts=rcStatMltIfExtnIfInBroadcastPkts, rcStatMltIpInReceives=rcStatMltIpInReceives, rcMltMtu=rcMltMtu, rcMltDatapathProgrammingState=rcMltDatapathProgrammingState, rcMltBvidPrimaryPort=rcMltBvidPrimaryPort, rcStatMltIpInDiscards=rcStatMltIpInDiscards, rcStatMltEtherLateCollisions=rcStatMltEtherLateCollisions, rcLinkFlapDetectInterval=rcLinkFlapDetectInterval, rcMltBvidSecondaryPort=rcMltBvidSecondaryPort, PYSNMP_MODULE_ID=rcMltMib, rcMltLoadBalance=rcMltLoadBalance, rcStatMltIfUtilEntry=rcStatMltIfUtilEntry, rcMltBvidVlanId=rcMltBvidVlanId, rcStatSmltStgInfoRxMsgCnt=rcStatSmltStgInfoRxMsgCnt, rcStatMltIfUtilIfHCInOctets=rcStatMltIfUtilIfHCInOctets, rcMltNumVlanIds=rcMltNumVlanIds, rcStatSmltSmltUpTxMsgCnt=rcStatSmltSmltUpTxMsgCnt, rcSltPortSmltId=rcSltPortSmltId, rcMltName=rcMltName, rcStatMltIpOutRequest=rcStatMltIpOutRequest, rcStatMltIfUtilMltId=rcStatMltIfUtilMltId, rcL2RedundancyEnable=rcL2RedundancyEnable, rcStatMltIfExtnIfOutMulticastPkts=rcStatMltIfExtnIfOutMulticastPkts, rcMltMulticastDistribution=rcMltMulticastDistribution, rcStatMltIpFragOKs=rcStatMltIpFragOKs, rcLinkFlapDetectSendTrap=rcLinkFlapDetectSendTrap, rcStatMltEtherAlignmentErrors=rcStatMltEtherAlignmentErrors, rcStatSmltLearnMacAddrRxMsgCnt=rcStatSmltLearnMacAddrRxMsgCnt, rcStatMltUtilTrafficLast1Hour=rcStatMltUtilTrafficLast1Hour, rcMltNumMlts=rcMltNumMlts, rcStatSmltMacAddrAgeExpTxMsgCnt=rcStatSmltMacAddrAgeExpTxMsgCnt, rcStatSmltStgInfoTxMsgCnt=rcStatSmltStgInfoTxMsgCnt, rcL2RedundancyHaCpuState=rcL2RedundancyHaCpuState, rcMltPortType=rcMltPortType, rcMltIfIndex=rcMltIfIndex, rcStatSmltLearnMacAddrTxMsgCnt=rcStatSmltLearnMacAddrTxMsgCnt, rcStatSmltMacAddrAgeExpRxMsgCnt=rcStatSmltMacAddrAgeExpRxMsgCnt, rcMltAggrMacAlloc=rcMltAggrMacAlloc, rcStatMltUtilTrafficType=rcStatMltUtilTrafficType, rcStatMltIpInHdrErrors=rcStatMltIpInHdrErrors, rcStatMltIpInUnknownProtos=rcStatMltIpInUnknownProtos, rcMltClearLinkAggregate=rcMltClearLinkAggregate, rcMltVlacpDualHomingEnable=rcMltVlacpDualHomingEnable, rcStatSmltPortDownRxMsgCnt=rcStatSmltPortDownRxMsgCnt, rcStatSmltSmltDownTxMsgCnt=rcStatSmltSmltDownTxMsgCnt, rcStatSmltSmltDownRxMsgCnt=rcStatSmltSmltDownRxMsgCnt, rcMltMltType=rcMltMltType, rcStatSmltLacpInfoRxMsgCnt=rcStatSmltLacpInfoRxMsgCnt, rcStatMltIpReasmOKs=rcStatMltIpReasmOKs, rcStatMltEtherDeferredTransmiss=rcStatMltEtherDeferredTransmiss, rcStatMltUtilTrafficLast30Min=rcStatMltUtilTrafficLast30Min, rcMltBvidPortTable=rcMltBvidPortTable, rcLinkFlapDetectFrequency=rcLinkFlapDetectFrequency, rcStatSmltPortDownTxMsgCnt=rcStatSmltPortDownTxMsgCnt, rcMltMtuAdminState=rcMltMtuAdminState, rcStatMltIfExtnMltId=rcStatMltIfExtnMltId, rcMltNtStgEnable=rcMltNtStgEnable, rcStatSmltSendMacTblTxMsgCnt=rcStatSmltSendMacTblTxMsgCnt, rcMltVlanIdList=rcMltVlanIdList, rcStatSmltHelloRxMsgCnt=rcStatSmltHelloRxMsgCnt, rcL2RedundancyHaEvent=rcL2RedundancyHaEvent, rcStatSmltIgmpRxMsgCnt=rcStatSmltIgmpRxMsgCnt, rcStatSmltHelloTxMsgCnt=rcStatSmltHelloTxMsgCnt, rcL2RedundancyStandbyCpu=rcL2RedundancyStandbyCpu, rcStatMltIfExtnIfHCOutBroadcast=rcStatMltIfExtnIfHCOutBroadcast, rcMltIstVlanId=rcMltIstVlanId, rcSltPortRowStatus=rcSltPortRowStatus, rcMltVlacpEntry=rcMltVlacpEntry, rcMltVlacpFastPeriodicTimer=rcMltVlacpFastPeriodicTimer, rcMltTable=rcMltTable, rcStatMltEtherEntry=rcStatMltEtherEntry, rcMltIstPeerIp=rcMltIstPeerIp, rcSltPortIfIndex=rcSltPortIfIndex, rcMltMcastDistributionGrpMask=rcMltMcastDistributionGrpMask, rcMltBvidMltId=rcMltBvidMltId, rcStatMltIpMltId=rcStatMltIpMltId, rcStatMltEtherCarrierSenseError=rcStatMltEtherCarrierSenseError, rcMltDistributionAlgorithm=rcMltDistributionAlgorithm, rcMltEnable=rcMltEnable, rcMltLoadDistributionOption=rcMltLoadDistributionOption, rcMltAggrIngressBandwidth=rcMltAggrIngressBandwidth, rcStatMltEtherMultipleCollFrames=rcStatMltEtherMultipleCollFrames, rcStatMltIfExtnIfInMulticastPkts=rcStatMltIfExtnIfInMulticastPkts, rcStatMltIfExtnIfHCInBroadcastPkt=rcStatMltIfExtnIfHCInBroadcastPkt, rcStatMltIpReasmReqds=rcStatMltIpReasmReqds, rcStatMltUtilEntry=rcStatMltUtilEntry, rcMltVlacpTable=rcMltVlacpTable, rcStatMltIfExtnTable=rcStatMltIfExtnTable, rcMltVlacpTimeoutScale=rcMltVlacpTimeoutScale, rcStatSmltDelMacAddrRxMsgCnt=rcStatSmltDelMacAddrRxMsgCnt, rcMltAggrEgressBandwidth=rcMltAggrEgressBandwidth, rcStatSmltRxUnknownMsgTypeCnt=rcStatSmltRxUnknownMsgTypeCnt, rcMltPotentialMembers=rcMltPotentialMembers, rcMltQinqEtherType=rcMltQinqEtherType, rcStatMltIfUtilIfHCOutOctets=rcStatMltIfUtilIfHCOutOctets, rcStatMltIpReasmFails=rcStatMltIpReasmFails, rcStatMltUtilTrafficLast5Min=rcStatMltUtilTrafficLast5Min, rcStatSmltIgmpTxMsgCnt=rcStatSmltIgmpTxMsgCnt, rcMltAggOperState=rcMltAggOperState, rcMltCpLimitPktRate=rcMltCpLimitPktRate, rcStatSmltReqMacTblTxMsgCnt=rcStatSmltReqMacTblTxMsgCnt, rcMltUniAggrMacAddress=rcMltUniAggrMacAddress, rcMltRowStatus=rcMltRowStatus, rcStatMltIpFragFails=rcStatMltIpFragFails, rcMltMcastDistributionEnable=rcMltMcastDistributionEnable, rcStatMlt=rcStatMlt, rcMltInterfaceType=rcMltInterfaceType, rcMltMcastDistributionSrcMask=rcMltMcastDistributionSrcMask, rcStatMltIpEntry=rcStatMltIpEntry, rcStatMltEtherTable=rcStatMltEtherTable, rcMltCpLimitShutDownEnable=rcMltCpLimitShutDownEnable, rcMltVlacpAdminEnable=rcMltVlacpAdminEnable, rcMltEgressCosProfileName=rcMltEgressCosProfileName, rcMltAggTrapEvent=rcMltAggTrapEvent, rcStatMltEtherFCSErrors=rcStatMltEtherFCSErrors, rcMltVlacpEtherMacAddress=rcMltVlacpEtherMacAddress, rcStatSmltMacAddrAgeOutRxMsgCnt=rcStatSmltMacAddrAgeOutRxMsgCnt, rcStatMltIfExtnIfHCInMulticastPkt=rcStatMltIfExtnIfHCInMulticastPkt, rcStatMltEtherIMacTransmitError=rcStatMltEtherIMacTransmitError, rcStatMltIfExtnIfOutBroadcastPkts=rcStatMltIfExtnIfOutBroadcastPkts, rcStatMltIpInAddrErrors=rcStatMltIpInAddrErrors, rcStatMltIfUtilIfHCInUtil=rcStatMltIfUtilIfHCInUtil, rcMltEntryOwner=rcMltEntryOwner, rcMltEgressPolicerAdminState=rcMltEgressPolicerAdminState, rcMltMib=rcMltMib, rcMltDesignatedPort=rcMltDesignatedPort, rcStatMltEtherExcessiveCollis=rcStatMltEtherExcessiveCollis, rcMltId=rcMltId, rcStatMltEtherIMacReceiveError=rcStatMltEtherIMacReceiveError, rcStatMltIfExtnIfHCInUcastPkts=rcStatMltIfExtnIfHCInUcastPkts, rcMltVlanIds=rcMltVlanIds, rcMltIstSessionStatus=rcMltIstSessionStatus, rcStatMltEtherSingleCollFrames=rcStatMltEtherSingleCollFrames, rcStatSmltDelMacAddrTxMsgCnt=rcStatSmltDelMacAddrTxMsgCnt, rcStatMltIpFragCreates=rcStatMltIpFragCreates, rcMltDisablePortsOnShutdown=rcMltDisablePortsOnShutdown, rcMltSvlanPortType=rcMltSvlanPortType, rcStatSmltSendMacTblRxMsgCnt=rcStatSmltSendMacTblRxMsgCnt, rcStatMltIpOutNoRoutes=rcStatMltIpOutNoRoutes, rcStatMltUtilPortIfIndex=rcStatMltUtilPortIfIndex, rcMltVplsMgmtVlan=rcMltVplsMgmtVlan, rcStatSmltReqMacTblRxMsgCnt=rcStatSmltReqMacTblRxMsgCnt, rcStatMltIfExtnIfHCOutUcastPkts=rcStatMltIfExtnIfHCOutUcastPkts, rcStatSmltMacAddrAgeOutTxMsgCnt=rcStatSmltMacAddrAgeOutTxMsgCnt, rcMltRunningType=rcMltRunningType, rcSltPortTable=rcSltPortTable, rcStatMltIpForwDatagrams=rcStatMltIpForwDatagrams, rcStatMltIpOutDiscards=rcStatMltIpOutDiscards, rcMltEntry=rcMltEntry, rcMltBvidPortEntry=rcMltBvidPortEntry, rcStatMltIfExtnIfHCOutOctets=rcStatMltIfExtnIfHCOutOctets, rcSltPortOperType=rcSltPortOperType, rcStatMltIfExtnIfHCInOctets=rcStatMltIfExtnIfHCInOctets, rcStatMltIfUtilTable=rcStatMltIfUtilTable)
