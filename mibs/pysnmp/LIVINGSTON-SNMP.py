#
# PySNMP MIB module LIVINGSTON-SNMP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIVINGSTON-SNMP
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, NotificationType, enterprises, iso, Integer32, mgmt, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, NotificationType, TimeTicks, ObjectIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "NotificationType", "enterprises", "iso", "Integer32", "mgmt", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "ObjectIdentity", "IpAddress", "Counter32")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
at = MibIdentifier((1, 3, 6, 1, 2, 1, 3))
ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
tcp = MibIdentifier((1, 3, 6, 1, 2, 1, 6))
udp = MibIdentifier((1, 3, 6, 1, 2, 1, 7))
transmission = MibIdentifier((1, 3, 6, 1, 2, 1, 10))
sysDescr = MibScalar((1, 3, 6, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDescr.setStatus('mandatory')
sysObjectID = MibScalar((1, 3, 6, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysObjectID.setStatus('mandatory')
sysUpTime = MibScalar((1, 3, 6, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpTime.setStatus('mandatory')
sysContact = MibScalar((1, 3, 6, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContact.setStatus('mandatory')
sysName = MibScalar((1, 3, 6, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysName.setStatus('mandatory')
sysLocation = MibScalar((1, 3, 6, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocation.setStatus('mandatory')
sysServices = MibScalar((1, 3, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServices.setStatus('mandatory')
ifNumber = MibScalar((1, 3, 6, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifNumber.setStatus('mandatory')
ifTable = MibTable((1, 3, 6, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ifTable.setStatus('mandatory')
ifEntry = MibTableRow((1, 3, 6, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "ifIndex"))
if mibBuilder.loadTexts: ifEntry.setStatus('mandatory')
ifIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('mandatory')
ifDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescr.setStatus('mandatory')
ifType = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifType.setStatus('mandatory')
ifMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMtu.setStatus('mandatory')
ifSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpeed.setStatus('mandatory')
ifPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPhysAddress.setStatus('mandatory')
ifAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifAdminStatus.setStatus('mandatory')
ifOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOperStatus.setStatus('mandatory')
ifLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLastChange.setStatus('mandatory')
ifInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInOctets.setStatus('mandatory')
ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUcastPkts.setStatus('mandatory')
ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInNUcastPkts.setStatus('mandatory')
ifInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInDiscards.setStatus('mandatory')
ifInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInErrors.setStatus('mandatory')
ifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUnknownProtos.setStatus('mandatory')
ifOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutOctets.setStatus('mandatory')
ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutUcastPkts.setStatus('mandatory')
ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutNUcastPkts.setStatus('mandatory')
ifOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutDiscards.setStatus('mandatory')
ifOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutErrors.setStatus('mandatory')
ifOutQLen = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutQLen.setStatus('mandatory')
ifSpecific = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpecific.setStatus('mandatory')
atTable = MibTable((1, 3, 6, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: atTable.setStatus('deprecated')
atEntry = MibTableRow((1, 3, 6, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "atIfIndex"), (0, "LIVINGSTON-SNMP", "atNetAddress"))
if mibBuilder.loadTexts: atEntry.setStatus('deprecated')
atIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atIfIndex.setStatus('deprecated')
atPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atPhysAddress.setStatus('deprecated')
atNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNetAddress.setStatus('deprecated')
ipForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwarding.setStatus('mandatory')
ipDefaultTTL = MibScalar((1, 3, 6, 1, 2, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDefaultTTL.setStatus('mandatory')
ipInReceives = MibScalar((1, 3, 6, 1, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInReceives.setStatus('mandatory')
ipInHdrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInHdrErrors.setStatus('mandatory')
ipInAddrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInAddrErrors.setStatus('mandatory')
ipForwDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwDatagrams.setStatus('mandatory')
ipInUnknownProtos = MibScalar((1, 3, 6, 1, 2, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInUnknownProtos.setStatus('mandatory')
ipInDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDiscards.setStatus('mandatory')
ipInDelivers = MibScalar((1, 3, 6, 1, 2, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDelivers.setStatus('mandatory')
ipOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRequests.setStatus('mandatory')
ipOutDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutDiscards.setStatus('mandatory')
ipOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutNoRoutes.setStatus('mandatory')
ipReasmTimeout = MibScalar((1, 3, 6, 1, 2, 1, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmTimeout.setStatus('mandatory')
ipReasmReqds = MibScalar((1, 3, 6, 1, 2, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmReqds.setStatus('mandatory')
ipReasmOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmOKs.setStatus('mandatory')
ipReasmFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmFails.setStatus('mandatory')
ipFragOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragOKs.setStatus('mandatory')
ipFragFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragFails.setStatus('mandatory')
ipFragCreates = MibScalar((1, 3, 6, 1, 2, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragCreates.setStatus('mandatory')
ipAddrTable = MibTable((1, 3, 6, 1, 2, 1, 4, 20), )
if mibBuilder.loadTexts: ipAddrTable.setStatus('mandatory')
ipAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 20, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "ipAdEntAddr"))
if mibBuilder.loadTexts: ipAddrEntry.setStatus('mandatory')
ipAdEntAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntAddr.setStatus('mandatory')
ipAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntIfIndex.setStatus('mandatory')
ipAdEntNetMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntNetMask.setStatus('mandatory')
ipAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntBcastAddr.setStatus('mandatory')
ipAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntReasmMaxSize.setStatus('mandatory')
ipRouteTable = MibTable((1, 3, 6, 1, 2, 1, 4, 21), )
if mibBuilder.loadTexts: ipRouteTable.setStatus('mandatory')
ipRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 21, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "ipRouteDest"))
if mibBuilder.loadTexts: ipRouteEntry.setStatus('mandatory')
ipRouteDest = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteDest.setStatus('mandatory')
ipRouteIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteIfIndex.setStatus('mandatory')
ipRouteMetric1 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric1.setStatus('mandatory')
ipRouteMetric2 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteMetric2.setStatus('mandatory')
ipRouteMetric3 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteMetric3.setStatus('mandatory')
ipRouteMetric4 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteMetric4.setStatus('mandatory')
ipRouteNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteNextHop.setStatus('mandatory')
ipRouteType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteType.setStatus('mandatory')
ipRouteProto = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteProto.setStatus('mandatory')
ipRouteAge = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteAge.setStatus('mandatory')
ipRouteMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteMask.setStatus('mandatory')
ipRouteMetric5 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteMetric5.setStatus('mandatory')
ipRouteInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfo.setStatus('mandatory')
ipNetToMediaTable = MibTable((1, 3, 6, 1, 2, 1, 4, 22), )
if mibBuilder.loadTexts: ipNetToMediaTable.setStatus('mandatory')
ipNetToMediaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 22, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "ipNetToMediaIfIndex"), (0, "LIVINGSTON-SNMP", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: ipNetToMediaEntry.setStatus('mandatory')
ipNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetToMediaIfIndex.setStatus('mandatory')
ipNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaPhysAddress.setStatus('mandatory')
ipNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetToMediaNetAddress.setStatus('mandatory')
ipNetToMediaType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaType.setStatus('mandatory')
ipRoutingDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoutingDiscards.setStatus('mandatory')
icmpInMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInMsgs.setStatus('mandatory')
icmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInErrors.setStatus('mandatory')
icmpInDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInDestUnreachs.setStatus('mandatory')
icmpInTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimeExcds.setStatus('mandatory')
icmpInParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInParmProbs.setStatus('mandatory')
icmpInSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInSrcQuenchs.setStatus('mandatory')
icmpInRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInRedirects.setStatus('mandatory')
icmpInEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchos.setStatus('mandatory')
icmpInEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchoReps.setStatus('mandatory')
icmpInTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestamps.setStatus('mandatory')
icmpInTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestampReps.setStatus('mandatory')
icmpInAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMasks.setStatus('mandatory')
icmpInAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMaskReps.setStatus('mandatory')
icmpOutMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutMsgs.setStatus('mandatory')
icmpOutErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutErrors.setStatus('mandatory')
icmpOutDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutDestUnreachs.setStatus('mandatory')
icmpOutTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimeExcds.setStatus('mandatory')
icmpOutParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutParmProbs.setStatus('mandatory')
icmpOutSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutSrcQuenchs.setStatus('mandatory')
icmpOutRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutRedirects.setStatus('mandatory')
icmpOutEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchos.setStatus('mandatory')
icmpOutEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchoReps.setStatus('mandatory')
icmpOutTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestamps.setStatus('mandatory')
icmpOutTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestampReps.setStatus('mandatory')
icmpOutAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMasks.setStatus('mandatory')
icmpOutAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMaskReps.setStatus('mandatory')
tcpRtoAlgorithm = MibScalar((1, 3, 6, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoAlgorithm.setStatus('mandatory')
tcpRtoMin = MibScalar((1, 3, 6, 1, 2, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoMin.setStatus('mandatory')
tcpRtoMax = MibScalar((1, 3, 6, 1, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoMax.setStatus('mandatory')
tcpMaxConn = MibScalar((1, 3, 6, 1, 2, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxConn.setStatus('mandatory')
tcpActiveOpens = MibScalar((1, 3, 6, 1, 2, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpActiveOpens.setStatus('mandatory')
tcpPassiveOpens = MibScalar((1, 3, 6, 1, 2, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpPassiveOpens.setStatus('mandatory')
tcpAttemptFails = MibScalar((1, 3, 6, 1, 2, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpAttemptFails.setStatus('mandatory')
tcpEstabResets = MibScalar((1, 3, 6, 1, 2, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpEstabResets.setStatus('mandatory')
tcpCurrEstab = MibScalar((1, 3, 6, 1, 2, 1, 6, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurrEstab.setStatus('mandatory')
tcpInSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInSegs.setStatus('mandatory')
tcpOutSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutSegs.setStatus('mandatory')
tcpRetransSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRetransSegs.setStatus('mandatory')
tcpConnTable = MibTable((1, 3, 6, 1, 2, 1, 6, 13), )
if mibBuilder.loadTexts: tcpConnTable.setStatus('mandatory')
tcpConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 6, 13, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "tcpConnLocalAddress"), (0, "LIVINGSTON-SNMP", "tcpConnLocalPort"), (0, "LIVINGSTON-SNMP", "tcpConnRemAddress"), (0, "LIVINGSTON-SNMP", "tcpConnRemPort"))
if mibBuilder.loadTexts: tcpConnEntry.setStatus('mandatory')
tcpConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpConnState.setStatus('mandatory')
tcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalAddress.setStatus('mandatory')
tcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalPort.setStatus('mandatory')
tcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemAddress.setStatus('mandatory')
tcpConnRemPort = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemPort.setStatus('mandatory')
tcpInErrs = MibScalar((1, 3, 6, 1, 2, 1, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInErrs.setStatus('mandatory')
tcpOutRsts = MibScalar((1, 3, 6, 1, 2, 1, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutRsts.setStatus('mandatory')
udpInDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInDatagrams.setStatus('mandatory')
udpNoPorts = MibScalar((1, 3, 6, 1, 2, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpNoPorts.setStatus('mandatory')
udpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInErrors.setStatus('mandatory')
udpOutDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpOutDatagrams.setStatus('mandatory')
udpTable = MibTable((1, 3, 6, 1, 2, 1, 7, 5), )
if mibBuilder.loadTexts: udpTable.setStatus('mandatory')
udpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 7, 5, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "udpLocalAddress"), (0, "LIVINGSTON-SNMP", "udpLocalPort"))
if mibBuilder.loadTexts: udpEntry.setStatus('mandatory')
udpLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalAddress.setStatus('mandatory')
udpLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalPort.setStatus('mandatory')
livingston = MibIdentifier((1, 3, 6, 1, 4, 1, 307))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 2))
livingstonMib = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3))
livingstonPortMaster = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 2, 1))
livingstonSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 1))
livingstonInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 2))
livingstonAt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 3))
livingstonIp = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 4))
livingstonIcmp = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 5))
livingstonTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 6))
livingstonUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 7))
livingstonLocations = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 12))
livingstonUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 13))
livingstonAcctMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 14))
livingstonPerfMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 15))
livingstonTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 2, 1, 1))
livingstonSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 2, 1))
livingstonT1E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 2, 2))
livingstonModem = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 2, 3))
livingstonSerialTable = MibTable((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1), )
if mibBuilder.loadTexts: livingstonSerialTable.setStatus('mandatory')
livingstonSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "livingstonSerialIndex"))
if mibBuilder.loadTexts: livingstonSerialEntry.setStatus('mandatory')
livingstonSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialIndex.setStatus('mandatory')
livingstonSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialPortName.setStatus('mandatory')
livingstonSerialPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("async", 2), ("sync", 3), ("isdn", 4), ("trueDigital", 5), ("isdnV120", 6), ("isdnSync", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialPhysType.setStatus('mandatory')
livingstonSerialUser = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialUser.setStatus('mandatory')
livingstonSerialSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialSessionId.setStatus('mandatory')
livingstonSerialType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("network", 1), ("login", 2), ("device", 3), ("twoway", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialType.setStatus('mandatory')
livingstonSerialDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("inout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialDirection.setStatus('mandatory')
livingstonSerialPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connecting", 2), ("established", 3), ("disconnecting", 4), ("command", 5), ("noservice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialPortStatus.setStatus('mandatory')
livingstonSerialStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialStarted.setStatus('mandatory')
livingstonSerialIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialIdle.setStatus('mandatory')
livingstonSerialInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialInSpeed.setStatus('mandatory')
livingstonSerialOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialOutSpeed.setStatus('mandatory')
livingstonSerialModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialModemName.setStatus('mandatory')
livingstonSerialIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialIpAddress.setStatus('mandatory')
livingstonSerialifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialifDescr.setStatus('mandatory')
livingstonSerialInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialInOctets.setStatus('mandatory')
livingstonSerialOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialOutOctets.setStatus('mandatory')
livingstonSerialQOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialQOctets.setStatus('mandatory')
livingstonSerialModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("bound", 2), ("connecting", 3), ("active", 4), ("test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialModemStatus.setStatus('mandatory')
livingstonSerialModemCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("v42bis", 2), ("mnp5", 3), ("stac", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialModemCompression.setStatus('mandatory')
livingstonSerialModemProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lapm", 2), ("mnp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialModemProtocol.setStatus('mandatory')
livingstonSerialModemRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialModemRetrains.setStatus('mandatory')
livingstonSerialModemRenegotiates = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonSerialModemRenegotiates.setStatus('mandatory')
livingstonT1E1Table = MibTable((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1), )
if mibBuilder.loadTexts: livingstonT1E1Table.setStatus('mandatory')
livingstonT1E1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "livingstonT1E1Index"))
if mibBuilder.loadTexts: livingstonT1E1Entry.setStatus('mandatory')
livingstonT1E1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1Index.setStatus('mandatory')
livingstonT1E1PhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1PhysType.setStatus('mandatory')
livingstonT1E1Function = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("isdn", 1), ("channelized", 2), ("clear", 3), ("fractional", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1Function.setStatus('mandatory')
livingstonT1E1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1Status.setStatus('mandatory')
livingstonT1E1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("crc4", 3), ("fas", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1Framing.setStatus('mandatory')
livingstonT1E1Encoding = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1Encoding.setStatus('mandatory')
livingstonT1E1PCM = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ulaw", 1), ("alaw", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1PCM.setStatus('mandatory')
livingstonT1E1ChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1ChangeTime.setStatus('mandatory')
livingstonT1E1RecvLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1RecvLevel.setStatus('mandatory')
livingstonT1E1BlueAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1BlueAlarms.setStatus('mandatory')
livingstonT1E1YellowAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1YellowAlarms.setStatus('mandatory')
livingstonT1E1CarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1CarrierLoss.setStatus('mandatory')
livingstonT1E1SyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1SyncLoss.setStatus('mandatory')
livingstonT1E1BipolarErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1BipolarErrors.setStatus('mandatory')
livingstonT1E1CRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1CRCErrors.setStatus('mandatory')
livingstonT1E1SyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonT1E1SyncErrors.setStatus('mandatory')
livingstonModemTable = MibTable((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1), )
if mibBuilder.loadTexts: livingstonModemTable.setStatus('mandatory')
livingstonModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "livingstonModemIndex"))
if mibBuilder.loadTexts: livingstonModemEntry.setStatus('mandatory')
livingstonModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemIndex.setStatus('mandatory')
livingstonModemPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemPortName.setStatus('mandatory')
livingstonModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("bound", 2), ("connecting", 3), ("active", 4), ("test", 5), ("down", 6), ("ready", 7), ("halt", 8), ("admin", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemStatus.setStatus('mandatory')
livingstonModemProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lapm", 2), ("mnp", 3), ("bufferd", 4), ("direct", 5), ("cellular", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemProtocol.setStatus('mandatory')
livingstonModemCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("v42bis", 2), ("mnp5", 3), ("stac", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemCompression.setStatus('mandatory')
livingstonModemInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemInSpeed.setStatus('mandatory')
livingstonModemOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemOutSpeed.setStatus('mandatory')
livingstonModemInByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemInByteCount.setStatus('mandatory')
livingstonModemOutByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemOutByteCount.setStatus('mandatory')
livingstonModemRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemRetrains.setStatus('mandatory')
livingstonModemRenegotiates = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemRenegotiates.setStatus('mandatory')
livingstonModemCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemCalls.setStatus('mandatory')
livingstonModemDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemDetects.setStatus('mandatory')
livingstonModemConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonModemConnects.setStatus('mandatory')
livingstonPMCallSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 15, 1))
livingstonPMBoardCallSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1))
livingstonPMBrdCallSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1), )
if mibBuilder.loadTexts: livingstonPMBrdCallSummaryTable.setStatus('mandatory')
livingstonPMBrdCallSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "livingstonPMBrdCallSumBoardId"))
if mibBuilder.loadTexts: livingstonPMBrdCallSumEntry.setStatus('mandatory')
livingstonPMBrdCallSumBrdId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMBrdCallSumBrdId.setStatus('mandatory')
livingstonPMBrdCallSumCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMBrdCallSumCapacity.setStatus('mandatory')
livingstonPMBrdCallSumIsdnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMBrdCallSumIsdnCalls.setStatus('mandatory')
livingstonPMBrdCallSumV90Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMBrdCallSumV90Calls.setStatus('mandatory')
livingstonPMBoardCallSumV34Calls = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMBoardCallSumV34Calls.setStatus('mandatory')
livingstonPMBrdCallSumOtherCalls = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMBrdCallSumOtherCalls.setStatus('mandatory')
livingstonPMT1E1CallSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2))
livingstonPMT1E1CallSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1), )
if mibBuilder.loadTexts: livingstonPMT1E1CallSummaryTable.setStatus('mandatory')
livingstonPMT1E1CallSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1, 1), ).setIndexNames((0, "LIVINGSTON-SNMP", "livingstonPMT1E1CallSumBrdId"), (0, "LIVINGSTON-SNMP", "livingstonPMT1E1CallSumIfId"))
if mibBuilder.loadTexts: livingstonPMT1E1CallSumEntry.setStatus('mandatory')
livingstonPMT1E1CallSumIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMT1E1CallSumIfId.setStatus('mandatory')
livingstonPMT1E1CallSumCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMT1E1CallSumCapacity.setStatus('mandatory')
livingstonPMT1E1CallSumIsdnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMT1E1CallSumIsdnCalls.setStatus('mandatory')
livingstonPMT1E1CallSumV90Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMT1E1CallSumV90Calls.setStatus('mandatory')
livingstonPMT1E1CallSumV34Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMT1E1CallSumV34Calls.setStatus('mandatory')
livingstonPMT1E1CallSumOtherCalls = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMT1E1CallSumOtherCalls.setStatus('mandatory')
livingstonPMChasCallSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 3))
livingstonPMChasCapacity = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMChasCapacity.setStatus('mandatory')
livingstonPMChasIsdnCalls = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMChasIsdnCalls.setStatus('mandatory')
livingstonPMChasV90Calls = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMChasV90Calls.setStatus('mandatory')
livingstonPMChasV34Calls = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMChasV34Calls.setStatus('mandatory')
livingstonPMChasOtherCalls = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMChasOtherCalls.setStatus('mandatory')
livingstonPMChasSessions = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 15, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonPMChasSessions.setStatus('mandatory')
livingstonTrapString = MibScalar((1, 3, 6, 1, 4, 1, 307, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: livingstonTrapString.setStatus('mandatory')
livingstonPwrSupFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,3)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonPwrSupRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,5)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonFanFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,6)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonFanRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,7)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonBoardTempWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,8)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonBoardTooHotTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,10)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonModemFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,11)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonT1E1LineDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,12)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonBoardPwrOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,15)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
livingstonMCastHeartBeatFail = NotificationType((1, 3, 6, 1, 4, 1, 307) + (0,17)).setObjects(("LIVINGSTON-SNMP", "livingstonTrapString"))
mibBuilder.exportSymbols("LIVINGSTON-SNMP", ipForwarding=ipForwarding, livingstonPwrSupRestoredTrap=livingstonPwrSupRestoredTrap, livingstonSerialInSpeed=livingstonSerialInSpeed, livingstonT1E1PCM=livingstonT1E1PCM, ifType=ifType, ifOutQLen=ifOutQLen, atIfIndex=atIfIndex, icmpInRedirects=icmpInRedirects, livingstonMib=livingstonMib, livingstonT1E1SyncLoss=livingstonT1E1SyncLoss, ifInErrors=ifInErrors, ifMtu=ifMtu, livingstonModemInSpeed=livingstonModemInSpeed, livingstonPMT1E1CallSumIsdnCalls=livingstonPMT1E1CallSumIsdnCalls, tcpConnRemAddress=tcpConnRemAddress, livingstonPMT1E1CallSumEntry=livingstonPMT1E1CallSumEntry, ipInDelivers=ipInDelivers, ifNumber=ifNumber, livingstonT1E1=livingstonT1E1, tcpEstabResets=tcpEstabResets, ifSpeed=ifSpeed, ipAddrEntry=ipAddrEntry, livingstonT1E1Framing=livingstonT1E1Framing, livingstonBoardTempWarnTrap=livingstonBoardTempWarnTrap, ipRoutingDiscards=ipRoutingDiscards, ipReasmOKs=ipReasmOKs, at=at, livingstonPMChasCallSummary=livingstonPMChasCallSummary, icmpInParmProbs=icmpInParmProbs, ipFragFails=ipFragFails, livingstonModem=livingstonModem, livingstonModemDetects=livingstonModemDetects, livingstonSerialTable=livingstonSerialTable, livingstonSerialSessionId=livingstonSerialSessionId, ipAdEntNetMask=ipAdEntNetMask, icmpInSrcQuenchs=icmpInSrcQuenchs, livingstonUsers=livingstonUsers, ifPhysAddress=ifPhysAddress, ifOutNUcastPkts=ifOutNUcastPkts, livingstonPMBrdCallSumIsdnCalls=livingstonPMBrdCallSumIsdnCalls, icmpOutAddrMasks=icmpOutAddrMasks, ifIndex=ifIndex, ifInNUcastPkts=ifInNUcastPkts, tcpAttemptFails=tcpAttemptFails, livingstonSerialUser=livingstonSerialUser, atNetAddress=atNetAddress, icmpOutDestUnreachs=icmpOutDestUnreachs, icmpOutAddrMaskReps=icmpOutAddrMaskReps, ipNetToMediaPhysAddress=ipNetToMediaPhysAddress, icmpInTimestamps=icmpInTimestamps, ipAdEntReasmMaxSize=ipAdEntReasmMaxSize, livingstonModemTable=livingstonModemTable, livingstonModemIndex=livingstonModemIndex, icmpOutTimestamps=icmpOutTimestamps, transmission=transmission, tcpRetransSegs=tcpRetransSegs, ipNetToMediaIfIndex=ipNetToMediaIfIndex, livingstonSystem=livingstonSystem, livingstonT1E1Index=livingstonT1E1Index, livingstonTcp=livingstonTcp, icmpInDestUnreachs=icmpInDestUnreachs, icmpInEchos=icmpInEchos, livingstonFanRestoredTrap=livingstonFanRestoredTrap, ipRouteDest=ipRouteDest, icmp=icmp, icmpInTimeExcds=icmpInTimeExcds, livingstonT1E1Encoding=livingstonT1E1Encoding, livingstonPMBrdCallSumCapacity=livingstonPMBrdCallSumCapacity, ifOutOctets=ifOutOctets, livingstonAt=livingstonAt, system=system, icmpOutEchos=icmpOutEchos, ipFragCreates=ipFragCreates, livingstonSerialPortStatus=livingstonSerialPortStatus, atTable=atTable, ipRouteNextHop=ipRouteNextHop, tcpPassiveOpens=tcpPassiveOpens, livingstonSerialPhysType=livingstonSerialPhysType, livingstonModemCalls=livingstonModemCalls, ifInOctets=ifInOctets, tcpConnLocalAddress=tcpConnLocalAddress, tcp=tcp, livingstonT1E1LineDownTrap=livingstonT1E1LineDownTrap, livingstonPMT1E1CallSumV34Calls=livingstonPMT1E1CallSumV34Calls, ifLastChange=ifLastChange, livingstonModemProtocol=livingstonModemProtocol, ipFragOKs=ipFragOKs, livingstonPMBrdCallSumV90Calls=livingstonPMBrdCallSumV90Calls, livingstonPerfMgmt=livingstonPerfMgmt, interfaces=interfaces, livingstonModemConnects=livingstonModemConnects, ipInAddrErrors=ipInAddrErrors, livingstonPMT1E1CallSumIfId=livingstonPMT1E1CallSumIfId, livingstonT1E1PhysType=livingstonT1E1PhysType, livingstonSerialInOctets=livingstonSerialInOctets, mib_2=mib_2, livingstonPMBrdCallSumEntry=livingstonPMBrdCallSumEntry, livingstonFanFailTrap=livingstonFanFailTrap, ipOutRequests=ipOutRequests, livingstonPMBoardCallSumV34Calls=livingstonPMBoardCallSumV34Calls, livingstonSerialStarted=livingstonSerialStarted, ipRouteEntry=ipRouteEntry, udp=udp, ipNetToMediaType=ipNetToMediaType, livingstonPMT1E1CallSumOtherCalls=livingstonPMT1E1CallSumOtherCalls, livingstonIp=livingstonIp, livingstonPMChasCapacity=livingstonPMChasCapacity, sysObjectID=sysObjectID, livingstonSerialModemRenegotiates=livingstonSerialModemRenegotiates, ipRouteIfIndex=ipRouteIfIndex, icmpOutParmProbs=icmpOutParmProbs, ifInDiscards=ifInDiscards, ipOutDiscards=ipOutDiscards, livingstonPMChasSessions=livingstonPMChasSessions, ip=ip, icmpInErrors=icmpInErrors, tcpInErrs=tcpInErrs, livingstonPwrSupFailTrap=livingstonPwrSupFailTrap, ipOutNoRoutes=ipOutNoRoutes, udpInErrors=udpInErrors, livingston=livingston, livingstonSerial=livingstonSerial, ifOutErrors=ifOutErrors, livingstonPMBrdCallSummaryTable=livingstonPMBrdCallSummaryTable, icmpInAddrMasks=icmpInAddrMasks, products=products, livingstonSerialModemName=livingstonSerialModemName, udpEntry=udpEntry, livingstonPMBoardCallSummary=livingstonPMBoardCallSummary, livingstonBoardPwrOffTrap=livingstonBoardPwrOffTrap, livingstonModemOutByteCount=livingstonModemOutByteCount, ipRouteType=ipRouteType, ipAdEntBcastAddr=ipAdEntBcastAddr, ifDescr=ifDescr, udpLocalPort=udpLocalPort, livingstonSerialModemCompression=livingstonSerialModemCompression, livingstonT1E1BlueAlarms=livingstonT1E1BlueAlarms, ipRouteMetric3=ipRouteMetric3, icmpOutSrcQuenchs=icmpOutSrcQuenchs, sysServices=sysServices, livingstonTrapString=livingstonTrapString, livingstonModemPortName=livingstonModemPortName, livingstonBoardTooHotTrap=livingstonBoardTooHotTrap, ipInUnknownProtos=ipInUnknownProtos, livingstonSerialModemStatus=livingstonSerialModemStatus, livingstonSerialPortName=livingstonSerialPortName, livingstonSerialModemRetrains=livingstonSerialModemRetrains, livingstonPMBrdCallSumOtherCalls=livingstonPMBrdCallSumOtherCalls, sysLocation=sysLocation, sysContact=sysContact, atPhysAddress=atPhysAddress, livingstonModemEntry=livingstonModemEntry, livingstonInterfaces=livingstonInterfaces, livingstonSerialType=livingstonSerialType, tcpConnLocalPort=tcpConnLocalPort, ipRouteMetric1=ipRouteMetric1, ipRouteInfo=ipRouteInfo, tcpRtoMin=tcpRtoMin, livingstonModemCompression=livingstonModemCompression, livingstonT1E1Status=livingstonT1E1Status, livingstonSerialifDescr=livingstonSerialifDescr, livingstonT1E1ChangeTime=livingstonT1E1ChangeTime, livingstonSerialIdle=livingstonSerialIdle, livingstonModemOutSpeed=livingstonModemOutSpeed, ipRouteMetric4=ipRouteMetric4, livingstonSerialModemProtocol=livingstonSerialModemProtocol, ipReasmReqds=ipReasmReqds, ipReasmTimeout=ipReasmTimeout, ipRouteMetric2=ipRouteMetric2, tcpOutSegs=tcpOutSegs, tcpInSegs=tcpInSegs, icmpInAddrMaskReps=icmpInAddrMaskReps, livingstonLocations=livingstonLocations, livingstonSerialIndex=livingstonSerialIndex, tcpMaxConn=tcpMaxConn, tcpConnRemPort=tcpConnRemPort, tcpRtoAlgorithm=tcpRtoAlgorithm, livingstonT1E1Table=livingstonT1E1Table, livingstonT1E1BipolarErrors=livingstonT1E1BipolarErrors, ipRouteMask=ipRouteMask, udpLocalAddress=udpLocalAddress, ifInUcastPkts=ifInUcastPkts, livingstonSerialEntry=livingstonSerialEntry, sysName=sysName, livingstonMCastHeartBeatFail=livingstonMCastHeartBeatFail, ipInDiscards=ipInDiscards, ipReasmFails=ipReasmFails, livingstonPMT1E1CallSummary=livingstonPMT1E1CallSummary, livingstonAcctMgmt=livingstonAcctMgmt, livingstonPMChasV34Calls=livingstonPMChasV34Calls, livingstonModemStatus=livingstonModemStatus, livingstonT1E1Function=livingstonT1E1Function, udpInDatagrams=udpInDatagrams, ipNetToMediaTable=ipNetToMediaTable, livingstonPMT1E1CallSumCapacity=livingstonPMT1E1CallSumCapacity, ipForwDatagrams=ipForwDatagrams, sysDescr=sysDescr, livingstonT1E1RecvLevel=livingstonT1E1RecvLevel, ipRouteTable=ipRouteTable, ifOutUcastPkts=ifOutUcastPkts, tcpConnState=tcpConnState, icmpOutTimeExcds=icmpOutTimeExcds, livingstonPMT1E1CallSumV90Calls=livingstonPMT1E1CallSumV90Calls, livingstonPMChasIsdnCalls=livingstonPMChasIsdnCalls, ipInReceives=ipInReceives, livingstonT1E1CarrierLoss=livingstonT1E1CarrierLoss, livingstonPMBrdCallSumBrdId=livingstonPMBrdCallSumBrdId, ipNetToMediaEntry=ipNetToMediaEntry, ipAddrTable=ipAddrTable, icmpOutMsgs=icmpOutMsgs, ifTable=ifTable, ipNetToMediaNetAddress=ipNetToMediaNetAddress, icmpOutErrors=icmpOutErrors, icmpOutRedirects=icmpOutRedirects, ifOperStatus=ifOperStatus, livingstonModemRetrains=livingstonModemRetrains, livingstonTraps=livingstonTraps, icmpOutTimestampReps=icmpOutTimestampReps, livingstonSerialOutOctets=livingstonSerialOutOctets, icmpInEchoReps=icmpInEchoReps, livingstonPortMaster=livingstonPortMaster, tcpActiveOpens=tcpActiveOpens, tcpConnEntry=tcpConnEntry, ipAdEntAddr=ipAdEntAddr, tcpRtoMax=tcpRtoMax, ifInUnknownProtos=ifInUnknownProtos, ipAdEntIfIndex=ipAdEntIfIndex, livingstonT1E1Entry=livingstonT1E1Entry, livingstonSerialIpAddress=livingstonSerialIpAddress, livingstonModemFailTrap=livingstonModemFailTrap, livingstonIcmp=livingstonIcmp, livingstonT1E1CRCErrors=livingstonT1E1CRCErrors, ipRouteAge=ipRouteAge, livingstonModemInByteCount=livingstonModemInByteCount, livingstonUdp=livingstonUdp, icmpInMsgs=icmpInMsgs, ifSpecific=ifSpecific, udpTable=udpTable, livingstonPMT1E1CallSummaryTable=livingstonPMT1E1CallSummaryTable, ipDefaultTTL=ipDefaultTTL, ifEntry=ifEntry, livingstonModemRenegotiates=livingstonModemRenegotiates, ifOutDiscards=ifOutDiscards, tcpCurrEstab=tcpCurrEstab, udpNoPorts=udpNoPorts, udpOutDatagrams=udpOutDatagrams, tcpOutRsts=tcpOutRsts, livingstonPMChasV90Calls=livingstonPMChasV90Calls, livingstonT1E1YellowAlarms=livingstonT1E1YellowAlarms, icmpInTimestampReps=icmpInTimestampReps, sysUpTime=sysUpTime, ifAdminStatus=ifAdminStatus, atEntry=atEntry, ipRouteMetric5=ipRouteMetric5)
mibBuilder.exportSymbols("LIVINGSTON-SNMP", livingstonSerialOutSpeed=livingstonSerialOutSpeed, livingstonT1E1SyncErrors=livingstonT1E1SyncErrors, ipInHdrErrors=ipInHdrErrors, livingstonPMCallSummary=livingstonPMCallSummary, livingstonPMChasOtherCalls=livingstonPMChasOtherCalls, livingstonSerialQOctets=livingstonSerialQOctets, ipRouteProto=ipRouteProto, icmpOutEchoReps=icmpOutEchoReps, tcpConnTable=tcpConnTable, livingstonSerialDirection=livingstonSerialDirection)
