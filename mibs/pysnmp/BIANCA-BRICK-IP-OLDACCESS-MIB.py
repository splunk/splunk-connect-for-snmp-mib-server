#
# PySNMP MIB module BIANCA-BRICK-IP-OLDACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-IP-OLDACCESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, Gauge32, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, IpAddress, ModuleIdentity, NotificationType, Unsigned32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Gauge32", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "IpAddress", "ModuleIdentity", "NotificationType", "Unsigned32", "Integer32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboipold = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
ipAllowTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 1), )
if mibBuilder.loadTexts: ipAllowTable.setStatus('mandatory')
ipAllowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-OLDACCESS-MIB", "ipAllowProtocolMode"), (0, "BIANCA-BRICK-IP-OLDACCESS-MIB", "ipAllowSrcIfIndexMode"))
if mibBuilder.loadTexts: ipAllowEntry.setStatus('mandatory')
ipAllowProtocolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2), ("delete", 3))))
if mibBuilder.loadTexts: ipAllowProtocolMode.setStatus('mandatory')
ipAllowProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 8, 12, 17, 20, 22, 27, 89))).clone(namedValues=NamedValues(("icmp", 1), ("ggp", 3), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("hmp", 20), ("xns-idp", 22), ("rdp", 27), ("ospf", 89))))
if mibBuilder.loadTexts: ipAllowProtocol.setStatus('mandatory')
ipAllowSrcIfIndexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2))))
if mibBuilder.loadTexts: ipAllowSrcIfIndexMode.setStatus('mandatory')
ipAllowSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 4), Integer32())
if mibBuilder.loadTexts: ipAllowSrcIfIndex.setStatus('mandatory')
ipAllowSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: ipAllowSrcAddr.setStatus('mandatory')
ipAllowSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 6), IpAddress())
if mibBuilder.loadTexts: ipAllowSrcMask.setStatus('mandatory')
ipAllowSrcPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ignore", 1), ("specific", 2), ("clients", 3), ("server", 4), ("unpriv", 5), ("priv", 6))))
if mibBuilder.loadTexts: ipAllowSrcPortMode.setStatus('mandatory')
ipAllowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipAllowSrcPort.setStatus('mandatory')
ipAllowDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 9), IpAddress())
if mibBuilder.loadTexts: ipAllowDstAddr.setStatus('mandatory')
ipAllowDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: ipAllowDstMask.setStatus('mandatory')
ipAllowDstPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ignore", 1), ("specific", 2), ("clients", 3), ("server", 4), ("unpriv", 5), ("priv", 6))))
if mibBuilder.loadTexts: ipAllowDstPortMode.setStatus('mandatory')
ipAllowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipAllowDstPort.setStatus('mandatory')
ipAllowSrcPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)))
if mibBuilder.loadTexts: ipAllowSrcPortRange.setStatus('mandatory')
ipAllowDstPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)))
if mibBuilder.loadTexts: ipAllowDstPortRange.setStatus('mandatory')
ipDenyTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 2), )
if mibBuilder.loadTexts: ipDenyTable.setStatus('mandatory')
ipDenyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-OLDACCESS-MIB", "ipDenyProtocolMode"), (0, "BIANCA-BRICK-IP-OLDACCESS-MIB", "ipDenySrcIfIndexMode"))
if mibBuilder.loadTexts: ipDenyEntry.setStatus('mandatory')
ipDenyProtocolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2), ("delete", 3))))
if mibBuilder.loadTexts: ipDenyProtocolMode.setStatus('mandatory')
ipDenyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 8, 12, 17, 20, 22, 27, 89))).clone(namedValues=NamedValues(("icmp", 1), ("ggp", 3), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("hmp", 20), ("xns-idp", 22), ("rdp", 27), ("ospf", 89))))
if mibBuilder.loadTexts: ipDenyProtocol.setStatus('mandatory')
ipDenySrcIfIndexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-verify", 1), ("verify", 2))))
if mibBuilder.loadTexts: ipDenySrcIfIndexMode.setStatus('mandatory')
ipDenySrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: ipDenySrcIfIndex.setStatus('mandatory')
ipDenySrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 5), IpAddress())
if mibBuilder.loadTexts: ipDenySrcAddr.setStatus('mandatory')
ipDenySrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 6), IpAddress())
if mibBuilder.loadTexts: ipDenySrcMask.setStatus('mandatory')
ipDenySrcPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ignore", 1), ("specific", 2), ("clients", 3), ("server", 4), ("unpriv", 5), ("priv", 6))))
if mibBuilder.loadTexts: ipDenySrcPortMode.setStatus('mandatory')
ipDenySrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipDenySrcPort.setStatus('mandatory')
ipDenyDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 9), IpAddress())
if mibBuilder.loadTexts: ipDenyDstAddr.setStatus('mandatory')
ipDenyDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 10), IpAddress())
if mibBuilder.loadTexts: ipDenyDstMask.setStatus('mandatory')
ipDenyDstPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ignore", 1), ("specific", 2), ("clients", 3), ("server", 4), ("unpriv", 5), ("priv", 6))))
if mibBuilder.loadTexts: ipDenyDstPortMode.setStatus('mandatory')
ipDenyDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ipDenyDstPort.setStatus('mandatory')
ipDenySrcPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)))
if mibBuilder.loadTexts: ipDenySrcPortRange.setStatus('mandatory')
ipDenyDstPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)))
if mibBuilder.loadTexts: ipDenyDstPortRange.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-IP-OLDACCESS-MIB", ipDenySrcAddr=ipDenySrcAddr, ipDenyDstPortRange=ipDenyDstPortRange, ipAllowTable=ipAllowTable, bibo=bibo, private=private, ipAllowSrcAddr=ipAllowSrcAddr, ipDenyTable=ipDenyTable, ipDenySrcIfIndex=ipDenySrcIfIndex, ipDenySrcMask=ipDenySrcMask, ipDenyEntry=ipDenyEntry, ipAllowProtocolMode=ipAllowProtocolMode, ipAllowSrcPort=ipAllowSrcPort, ipDenySrcPortRange=ipDenySrcPortRange, ipAllowEntry=ipAllowEntry, ipDenyDstAddr=ipDenyDstAddr, ipDenySrcPortMode=ipDenySrcPortMode, ipAllowSrcMask=ipAllowSrcMask, ipAllowDstMask=ipAllowDstMask, ipDenyDstPort=ipDenyDstPort, org=org, ipAllowProtocol=ipAllowProtocol, ipDenySrcIfIndexMode=ipDenySrcIfIndexMode, bintec=bintec, ipAllowDstPortRange=ipAllowDstPortRange, ipAllowDstPortMode=ipAllowDstPortMode, ipDenySrcPort=ipDenySrcPort, dod=dod, ipAllowSrcPortMode=ipAllowSrcPortMode, enterprises=enterprises, ipAllowDstPort=ipAllowDstPort, ipDenyDstMask=ipDenyDstMask, internet=internet, ipAllowSrcIfIndexMode=ipAllowSrcIfIndexMode, ipAllowDstAddr=ipAllowDstAddr, biboipold=biboipold, ipAllowSrcPortRange=ipAllowSrcPortRange, ipDenyDstPortMode=ipDenyDstPortMode, ipDenyProtocolMode=ipDenyProtocolMode, ipAllowSrcIfIndex=ipAllowSrcIfIndex, ipDenyProtocol=ipDenyProtocol)
