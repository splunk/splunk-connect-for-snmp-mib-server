#
# PySNMP MIB module BAS-ALIAS-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-ALIAS-SNMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
BasSlotId, BasInterfaceId, BasChassisId, basAliasSnmp, BasLogicalPortId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "BasInterfaceId", "BasChassisId", "basAliasSnmp", "BasLogicalPortId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, NotificationType, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, MibIdentifier, Gauge32, iso, ObjectIdentity, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "NotificationType", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "MibIdentifier", "Gauge32", "iso", "ObjectIdentity", "Counter32", "Integer32")
DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp")
basAliasSnmpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1))
if mibBuilder.loadTexts: basAliasSnmpMib.setLastUpdated('9810081200Z')
if mibBuilder.loadTexts: basAliasSnmpMib.setOrganization('Broadband Access Systems')
basSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1))
basSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2))
basSysTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1), )
if mibBuilder.loadTexts: basSysTable.setStatus('current')
basSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1), ).setIndexNames((0, "BAS-ALIAS-SNMP-MIB", "basSysChassis"), (0, "BAS-ALIAS-SNMP-MIB", "basSysSlot"), (0, "BAS-ALIAS-SNMP-MIB", "basSysIf"), (0, "BAS-ALIAS-SNMP-MIB", "basSysLPort"))
if mibBuilder.loadTexts: basSysEntry.setStatus('current')
basSysDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysDescr.setStatus('current')
basSysObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysObjectID.setStatus('current')
basSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysUpTime.setStatus('current')
basSysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSysContact.setStatus('current')
basSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSysName.setStatus('current')
basSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSysLocation.setStatus('current')
basSysServices = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysServices.setStatus('current')
basSysORLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORLastChange.setStatus('current')
basSysChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 9), BasChassisId())
if mibBuilder.loadTexts: basSysChassis.setStatus('current')
basSysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 10), BasSlotId())
if mibBuilder.loadTexts: basSysSlot.setStatus('current')
basSysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 11), BasInterfaceId())
if mibBuilder.loadTexts: basSysIf.setStatus('current')
basSysLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 12), BasLogicalPortId())
if mibBuilder.loadTexts: basSysLPort.setStatus('current')
basSysORTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2), )
if mibBuilder.loadTexts: basSysORTable.setStatus('current')
basSysOREntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1), ).setIndexNames((0, "BAS-ALIAS-SNMP-MIB", "basSysORChassis"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORSlot"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORIf"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORLPort"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORIndex"))
if mibBuilder.loadTexts: basSysOREntry.setStatus('current')
basSysORIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basSysORIndex.setStatus('current')
basSysORID = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORID.setStatus('current')
basSysORDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORDescr.setStatus('current')
basSysORUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORUpTime.setStatus('current')
basSysORChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basSysORChassis.setStatus('current')
basSysORSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basSysORSlot.setStatus('current')
basSysORIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basSysORIf.setStatus('current')
basSysORLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basSysORLPort.setStatus('current')
basSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1), )
if mibBuilder.loadTexts: basSnmpTable.setStatus('current')
basSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1), ).setIndexNames((0, "BAS-ALIAS-SNMP-MIB", "basSnmpChassis"), (0, "BAS-ALIAS-SNMP-MIB", "basSnmpSlot"), (0, "BAS-ALIAS-SNMP-MIB", "basSnmpIf"), (0, "BAS-ALIAS-SNMP-MIB", "basSnmpLPort"))
if mibBuilder.loadTexts: basSnmpEntry.setStatus('current')
basSnmpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInPkts.setStatus('current')
basSnmpInBadVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInBadVersions.setStatus('current')
basSnmpInBadCommunityNames = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInBadCommunityNames.setStatus('current')
basSnmpInBadCommunityUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInBadCommunityUses.setStatus('current')
basSnmpInASNParseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInASNParseErrs.setStatus('current')
basSnmpEnableAuthenTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSnmpEnableAuthenTraps.setStatus('current')
basSnmpSilentDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpSilentDrops.setStatus('current')
basSnmpProxyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpProxyDrops.setStatus('current')
basSnmpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 33), BasChassisId())
if mibBuilder.loadTexts: basSnmpChassis.setStatus('current')
basSnmpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 34), BasSlotId())
if mibBuilder.loadTexts: basSnmpSlot.setStatus('current')
basSnmpIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 35), BasInterfaceId())
if mibBuilder.loadTexts: basSnmpIf.setStatus('current')
basSnmpLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 36), BasLogicalPortId())
if mibBuilder.loadTexts: basSnmpLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-ALIAS-SNMP-MIB", basSysEntry=basSysEntry, basSysTable=basSysTable, basSnmpInPkts=basSnmpInPkts, basSysORTable=basSysORTable, basSnmpSlot=basSnmpSlot, basSnmpLPort=basSnmpLPort, basSnmpInBadCommunityNames=basSnmpInBadCommunityNames, basSystem=basSystem, basSysServices=basSysServices, basSnmpEntry=basSnmpEntry, basSysSlot=basSysSlot, basSnmp=basSnmp, basSysORIf=basSysORIf, basSnmpSilentDrops=basSnmpSilentDrops, basSysObjectID=basSysObjectID, basSysUpTime=basSysUpTime, basSysChassis=basSysChassis, basSysLPort=basSysLPort, basSysORLastChange=basSysORLastChange, basSysORIndex=basSysORIndex, basSysORLPort=basSysORLPort, basSnmpInASNParseErrs=basSnmpInASNParseErrs, basSysORChassis=basSysORChassis, basSysORUpTime=basSysORUpTime, basAliasSnmpMib=basAliasSnmpMib, basSnmpInBadVersions=basSnmpInBadVersions, basSysContact=basSysContact, basSysName=basSysName, basSysORSlot=basSysORSlot, basSysDescr=basSysDescr, basSysOREntry=basSysOREntry, basSysORDescr=basSysORDescr, PYSNMP_MODULE_ID=basAliasSnmpMib, basSnmpInBadCommunityUses=basSnmpInBadCommunityUses, basSnmpChassis=basSnmpChassis, basSysIf=basSysIf, basSysORID=basSysORID, basSysLocation=basSysLocation, basSnmpIf=basSnmpIf, basSnmpEnableAuthenTraps=basSnmpEnableAuthenTraps, basSnmpTable=basSnmpTable, basSnmpProxyDrops=basSnmpProxyDrops)
