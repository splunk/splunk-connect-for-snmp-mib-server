#
# PySNMP MIB module TPLINK-8021X-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-8021X-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:16:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, NotificationType, TimeTicks, iso, ObjectIdentity, MibIdentifier, IpAddress, Counter32, Integer32, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "NotificationType", "TimeTicks", "iso", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "Integer32", "Bits", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplink8021xMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 31))
tplink8021xMIB.setRevisions(('2012-12-17 10:50',))
if mibBuilder.loadTexts: tplink8021xMIB.setLastUpdated('201212171050Z')
if mibBuilder.loadTexts: tplink8021xMIB.setOrganization('TPLINK')
tplink8021xMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1))
tplink8021xNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 31, 2))
tp8021xGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1))
tp8021xGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xGlobalEnable.setStatus('current')
tp8021xAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pap", 0), ("eap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAuthMode.setStatus('current')
tp8021xHandshake = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xHandshake.setStatus('current')
tp8021xGuestVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xGuestVlanEnable.setStatus('current')
tp8021xGuestVlanID = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xGuestVlanID.setStatus('current')
tp8021xQuietEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xQuietEnable.setStatus('current')
tp8021xQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xQuietPeriod.setStatus('current')
tp8021xRetryTimes = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xRetryTimes.setStatus('current')
tp8021xSupplicantTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xSupplicantTimeOut.setStatus('current')
tp8021xServerTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xServerTimeOut.setStatus('current')
tp8021xAuthPrimaryIP = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAuthPrimaryIP.setStatus('current')
tp8021xAuthSecondaryIP = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAuthSecondaryIP.setStatus('current')
tp8021xServerAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xServerAuthPort.setStatus('current')
tp8021xServerAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xServerAuthKey.setStatus('current')
tp8021xAcctEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAcctEnable.setStatus('current')
tp8021xAcctPrimaryIP = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAcctPrimaryIP.setStatus('current')
tp8021xAcctSecondaryIP = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAcctSecondaryIP.setStatus('current')
tp8021xAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAcctPort.setStatus('current')
tp8021xAcctKey = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xAcctKey.setStatus('current')
tp8021xPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2))
tp8021xPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1), )
if mibBuilder.loadTexts: tp8021xPortConfigTable.setStatus('current')
tp8021xPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tp8021xPortConfigEntry.setStatus('current')
tp8021xPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp8021xPortConfigPortIndex.setStatus('current')
tp8021xPortConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xPortConfigEnable.setStatus('current')
tp8021xPortConfigGuestVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xPortConfigGuestVlanEnable.setStatus('current')
tp8021xPortConfigControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceAuth", 0), ("forceUnAuth", 1), ("autoAuth", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xPortConfigControlMode.setStatus('current')
tp8021xPortConfigControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("macBased", 0), ("portBased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp8021xPortConfigControlType.setStatus('current')
tp8021xPortConfigAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unAuthorized", 0), ("authorized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp8021xPortConfigAuthState.setStatus('current')
tp8021xPortConfigPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 31, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp8021xPortConfigPortLag.setStatus('current')
mibBuilder.exportSymbols("TPLINK-8021X-MIB", tp8021xGlobalConfig=tp8021xGlobalConfig, tp8021xServerAuthKey=tp8021xServerAuthKey, tp8021xAcctEnable=tp8021xAcctEnable, tp8021xQuietPeriod=tp8021xQuietPeriod, tplink8021xNotifications=tplink8021xNotifications, tp8021xPortConfig=tp8021xPortConfig, tp8021xPortConfigAuthState=tp8021xPortConfigAuthState, tp8021xServerAuthPort=tp8021xServerAuthPort, tp8021xGuestVlanEnable=tp8021xGuestVlanEnable, tp8021xAuthMode=tp8021xAuthMode, tp8021xPortConfigEntry=tp8021xPortConfigEntry, tp8021xPortConfigPortLag=tp8021xPortConfigPortLag, tp8021xSupplicantTimeOut=tp8021xSupplicantTimeOut, tp8021xPortConfigPortIndex=tp8021xPortConfigPortIndex, tp8021xQuietEnable=tp8021xQuietEnable, tp8021xPortConfigEnable=tp8021xPortConfigEnable, tp8021xAcctPort=tp8021xAcctPort, tp8021xAuthSecondaryIP=tp8021xAuthSecondaryIP, tp8021xGlobalEnable=tp8021xGlobalEnable, tplink8021xMIB=tplink8021xMIB, PYSNMP_MODULE_ID=tplink8021xMIB, tp8021xServerTimeOut=tp8021xServerTimeOut, tp8021xRetryTimes=tp8021xRetryTimes, tp8021xHandshake=tp8021xHandshake, tp8021xAuthPrimaryIP=tp8021xAuthPrimaryIP, tp8021xPortConfigControlType=tp8021xPortConfigControlType, tp8021xGuestVlanID=tp8021xGuestVlanID, tplink8021xMIBObjects=tplink8021xMIBObjects, tp8021xAcctKey=tp8021xAcctKey, tp8021xPortConfigGuestVlanEnable=tp8021xPortConfigGuestVlanEnable, tp8021xAcctSecondaryIP=tp8021xAcctSecondaryIP, tp8021xPortConfigControlMode=tp8021xPortConfigControlMode, tp8021xAcctPrimaryIP=tp8021xAcctPrimaryIP, tp8021xPortConfigTable=tp8021xPortConfigTable)
