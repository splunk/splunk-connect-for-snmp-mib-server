#
# PySNMP MIB module SEI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SEI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, NotificationType, Gauge32, TimeTicks, Bits, Counter64, MibIdentifier, Unsigned32, Counter32, ObjectIdentity, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "NotificationType", "Gauge32", "TimeTicks", "Bits", "Counter64", "MibIdentifier", "Unsigned32", "Counter32", "ObjectIdentity", "Integer32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MemAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sei = MibIdentifier((1, 3, 6, 1, 4, 1, 175))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1))
suminet = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1))
sumistation = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 2))
sn3500 = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1))
s35Products = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 1))
s35System = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2))
s35Model00 = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 1, 1))
s35Box = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 1))
s35Board = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2))
s35BoardIf = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 4))
s35BoxFor00 = MibIdentifier((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 1, 1))
s35BoxFor00PowerState = MibScalar((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoxFor00PowerState.setStatus('mandatory')
s35BoxFor00FanState = MibScalar((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("working", 1), ("stopping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoxFor00FanState.setStatus('mandatory')
s35BoxFor00StationID = MibScalar((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoxFor00StationID.setStatus('mandatory')
s35BoxFor00LedState = MibScalar((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoxFor00LedState.setStatus('mandatory')
s35BoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardNumber.setStatus('mandatory')
s35BoardTable = MibTable((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: s35BoardTable.setStatus('mandatory')
s35BoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "SEI-MIB", "s35BoardIndex"))
if mibBuilder.loadTexts: s35BoardEntry.setStatus('mandatory')
s35BoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardIndex.setStatus('mandatory')
s35BoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("fddi-00-512K", 1), ("fddi-00-1M", 2), ("fddi-30-1M", 3), ("ethernet-30p-1M", 4), ("ethernet-noparity", 5), ("ethernet-parity", 6), ("tokenring-4M", 7), ("tokenring-16M", 8), ("v35", 9), ("hsds", 10), ("sn3200-vab", 11), ("accelerator", 12), ("memory-30p-12M", 13), ("fddi-LBR-30", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardType.setStatus('mandatory')
s35BoardCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nothing", 1), ("mc68000", 2), ("mc68030", 3), ("mc68302", 4), ("mc68010", 5), ("am29200", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardCpuType.setStatus('mandatory')
s35BoardHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardHardwareRevision.setStatus('optional')
s35BoardLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardLedState.setStatus('mandatory')
s35BoardDipInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardDipInformation.setStatus('mandatory')
s35BoardRomRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardRomRevision.setStatus('optional')
s35BoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardSerialNumber.setStatus('optional')
s35BoardIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardIfNumber.setStatus('mandatory')
s35BoardIfTable = MibTable((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: s35BoardIfTable.setStatus('mandatory')
s35BoardIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 4, 2, 1), ).setIndexNames((0, "SEI-MIB", "s35BoardIfBoardIndex"), (0, "SEI-MIB", "s35BoardIfIndex"))
if mibBuilder.loadTexts: s35BoardIfEntry.setStatus('mandatory')
s35BoardIfBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardIfBoardIndex.setStatus('mandatory')
s35BoardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardIfIndex.setStatus('mandatory')
s35BoardIfInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 175, 1, 1, 1, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialized", 1), ("uninitialized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s35BoardIfInitialized.setStatus('mandatory')
mibBuilder.exportSymbols("SEI-MIB", s35BoardRomRevision=s35BoardRomRevision, s35BoardIfNumber=s35BoardIfNumber, s35BoardIndex=s35BoardIndex, s35Board=s35Board, MacAddress=MacAddress, sn3500=sn3500, s35BoxFor00StationID=s35BoxFor00StationID, s35BoardType=s35BoardType, s35BoxFor00LedState=s35BoxFor00LedState, s35BoardTable=s35BoardTable, s35BoardEntry=s35BoardEntry, s35BoardDipInformation=s35BoardDipInformation, s35BoardSerialNumber=s35BoardSerialNumber, suminet=suminet, s35Model00=s35Model00, s35BoardIfTable=s35BoardIfTable, s35BoardIfIndex=s35BoardIfIndex, MemAddress=MemAddress, s35BoxFor00PowerState=s35BoxFor00PowerState, sei=sei, sumistation=sumistation, s35BoardLedState=s35BoardLedState, s35BoardIfInitialized=s35BoardIfInitialized, s35BoardIfBoardIndex=s35BoardIfBoardIndex, s35BoardIfEntry=s35BoardIfEntry, products=products, s35BoardHardwareRevision=s35BoardHardwareRevision, s35BoxFor00FanState=s35BoxFor00FanState, s35BoardIf=s35BoardIf, s35BoardCpuType=s35BoardCpuType, s35BoxFor00=s35BoxFor00, s35Products=s35Products, s35System=s35System, s35BoardNumber=s35BoardNumber, s35Box=s35Box)
