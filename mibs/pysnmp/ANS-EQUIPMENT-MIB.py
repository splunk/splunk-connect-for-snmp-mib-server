#
# PySNMP MIB module ANS-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANS-EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:06:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
RowStatus, mlpmpR115, RowPointer = mibBuilder.importSymbols("ANS-COMMON-MIB", "RowStatus", "mlpmpR115", "RowPointer")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, IpAddress, MibIdentifier, iso, Integer32, Gauge32, Counter32, ObjectIdentity, NotificationType, Counter64, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "IpAddress", "MibIdentifier", "iso", "Integer32", "Gauge32", "Counter32", "ObjectIdentity", "NotificationType", "Counter64", "TimeTicks", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
equipment = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3))
systemNode = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1))
subrack = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4))
physicalPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5))
netClockSource = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6))
class AnsSubrackType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 7, 9))
    namedValues = NamedValues(("badvalue", -1), ("concentrator", 7), ("wbas", 9))

class ProtectedBoardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("wbas-rn", 1))

ansSystemNodeTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3), )
if mibBuilder.loadTexts: ansSystemNodeTable.setStatus('mandatory')
ansSystemNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSystemNodeIndex"))
if mibBuilder.loadTexts: ansSystemNodeEntry.setStatus('mandatory')
ansSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSystemNodeIndex.setStatus('mandatory')
ansSystemNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeName.setStatus('mandatory')
ansSystemNodeOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("native", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeOrigin.setStatus('mandatory')
ansSystemNodeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeLocation.setStatus('mandatory')
ansSystemNodeClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("undefined", 1), ("net-clock-source", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSystemNodeClockSource.setStatus('mandatory')
ansSystemNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeRowStatus.setStatus('mandatory')
ansSubrackTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2), )
if mibBuilder.loadTexts: ansSubrackTable.setStatus('mandatory')
ansSubrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSubrackSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSubrackIndex"))
if mibBuilder.loadTexts: ansSubrackEntry.setStatus('mandatory')
ansSubrackSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackSystemNodeIndex.setStatus('mandatory')
ansSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackIndex.setStatus('mandatory')
ansSubrackName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackName.setStatus('mandatory')
ansSubrackHwId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(46, 46)).setFixedLength(46)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackHwId.setStatus('mandatory')
ansSubrackLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackLocation.setStatus('mandatory')
ansSubrackType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 6), AnsSubrackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackType.setStatus('mandatory')
ansSubrackProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-protected", 1), ("protected", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackProtectionState.setStatus('mandatory')
ansSubrackProtectionScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackProtectionScheme.setStatus('mandatory')
ansSubrackNoOfSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackNoOfSlots.setStatus('mandatory')
ansSubrackAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackAlarmStatus.setStatus('mandatory')
ansSubrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackRowStatus.setStatus('mandatory')
ansSlotTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1), )
if mibBuilder.loadTexts: ansSlotTable.setStatus('mandatory')
ansSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSlotSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotPosition"))
if mibBuilder.loadTexts: ansSlotEntry.setStatus('mandatory')
ansSlotSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotSystemNodeIndex.setStatus('mandatory')
ansSlotSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotSubrackIndex.setStatus('mandatory')
ansSlotPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotPosition.setStatus('mandatory')
ansSlotConfiguredBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSlotConfiguredBoardId.setStatus('mandatory')
ansSlotInsertedBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotInsertedBoardId.setStatus('mandatory')
ansSlotManagementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("managed", 1), ("unmanaged", 2), ("unconfigEmpty", 3), ("configEmpty", 4), ("configBoard", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSlotManagementStatus.setStatus('mandatory')
ansSlotFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotFallback.setStatus('mandatory')
ansSlotAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotAlarmStatus.setStatus('mandatory')
ansBoardTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2), )
if mibBuilder.loadTexts: ansBoardTable.setStatus('mandatory')
ansBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: ansBoardEntry.setStatus('mandatory')
ansBoardSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSystemNodeIndex.setStatus('mandatory')
ansBoardSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSubrackIndex.setStatus('mandatory')
ansBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardPosition.setStatus('mandatory')
ansBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardType.setStatus('mandatory')
ansBoardHwId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(46, 46)).setFixedLength(46)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardHwId.setStatus('mandatory')
ansBoardSwIdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSwIdActive.setStatus('mandatory')
ansBoardSwIdPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSwIdPassive.setStatus('mandatory')
ansBoardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardOperStatus.setStatus('mandatory')
ansBoardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansBoardAdminStatus.setStatus('mandatory')
ansBoardRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansBoardRestart.setStatus('mandatory')
ansBoardLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redOff", 1), ("redOn", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardLedStatus.setStatus('mandatory')
ansBoardStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("providing-service", 1), ("cold-standby", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardStandbyStatus.setStatus('mandatory')
ansBoardAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardAlarmStatus.setStatus('mandatory')
ansBoardUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardUsageState.setStatus('mandatory')
ansBoardSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("netMaster", 3), ("notUsed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansBoardSyncMode.setStatus('mandatory')
ansPhysicalPointTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1), )
if mibBuilder.loadTexts: ansPhysicalPointTable.setStatus('mandatory')
ansPhysicalPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointPosition"), (0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointIndex"))
if mibBuilder.loadTexts: ansPhysicalPointEntry.setStatus('mandatory')
ansPhysicalPointSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointSystemNodeIndex.setStatus('mandatory')
ansPhysicalPointSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointSubrackIndex.setStatus('mandatory')
ansPhysicalPointPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointPosition.setStatus('mandatory')
ansPhysicalPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointIndex.setStatus('mandatory')
ansDsPhysicalPointSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointSystemNodeIndex.setStatus('mandatory')
ansDsPhysicalPointSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointSubrackIndex.setStatus('mandatory')
ansDsPhysicalPointPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointPosition.setStatus('mandatory')
ansDsPhysicalPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointIndex.setStatus('mandatory')
ansPhysicalPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 4), ("sdhUni", 5), ("sdhUniTelia", 6), ("sonetUni", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointType.setStatus('mandatory')
ansPhysicalPointCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("service", 1), ("user", 2), ("serviceUser", 3), ("internal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansPhysicalPointCategory.setStatus('mandatory')
ansPhysicalPointOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointOperStatus.setStatus('mandatory')
ansPhysicalPointAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansPhysicalPointAdminStatus.setStatus('mandatory')
ansPhysicalPointUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointUsageState.setStatus('mandatory')
netClockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1), )
if mibBuilder.loadTexts: netClockSourceTable.setStatus('mandatory')
netClockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "netClockSourceSystemNodeIndex"))
if mibBuilder.loadTexts: netClockSourceEntry.setStatus('mandatory')
netClockSourceSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netClockSourceSystemNodeIndex.setStatus('mandatory')
netClockSourceSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceSubrack.setStatus('mandatory')
netClockSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceSlot.setStatus('mandatory')
netClockSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netClockSourcePort.setStatus('mandatory')
netClockSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("idle", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netClockSourceStatus.setStatus('mandatory')
netClockSourcePriorityList = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourcePriorityList.setStatus('mandatory')
netClockSourceRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("revertive", 1), ("not-revertive", 2), ("not-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceRevertiveMode.setStatus('mandatory')
netClockSourceTimeToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceTimeToRestore.setStatus('mandatory')
netClockSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("ANS-EQUIPMENT-MIB", ansPhysicalPointType=ansPhysicalPointType, ansSubrackEntry=ansSubrackEntry, ansPhysicalPointUsageState=ansPhysicalPointUsageState, ansDsPhysicalPointSystemNodeIndex=ansDsPhysicalPointSystemNodeIndex, ansBoardOperStatus=ansBoardOperStatus, ansSlotTable=ansSlotTable, ansBoardTable=ansBoardTable, ansBoardLedStatus=ansBoardLedStatus, ansBoardPosition=ansBoardPosition, ansSlotPosition=ansSlotPosition, ansSubrackHwId=ansSubrackHwId, ansBoardHwId=ansBoardHwId, ansSystemNodeClockSource=ansSystemNodeClockSource, board=board, netClockSourcePort=netClockSourcePort, ansBoardRestart=ansBoardRestart, ansPhysicalPointSystemNodeIndex=ansPhysicalPointSystemNodeIndex, ansDsPhysicalPointPosition=ansDsPhysicalPointPosition, ansSystemNodeRowStatus=ansSystemNodeRowStatus, ansSubrackType=ansSubrackType, ansSlotConfiguredBoardId=ansSlotConfiguredBoardId, ansBoardType=ansBoardType, netClockSourceSlot=netClockSourceSlot, netClockSourceEntry=netClockSourceEntry, netClockSourcePriorityList=netClockSourcePriorityList, ansSlotEntry=ansSlotEntry, netClockSourceSubrack=netClockSourceSubrack, ansPhysicalPointIndex=ansPhysicalPointIndex, ansSystemNodeEntry=ansSystemNodeEntry, ansBoardStandbyStatus=ansBoardStandbyStatus, ansSlotAlarmStatus=ansSlotAlarmStatus, ansPhysicalPointPosition=ansPhysicalPointPosition, ansPhysicalPointCategory=ansPhysicalPointCategory, netClockSourceTimeToRestore=netClockSourceTimeToRestore, ansBoardSystemNodeIndex=ansBoardSystemNodeIndex, ansBoardAdminStatus=ansBoardAdminStatus, ansSlotInsertedBoardId=ansSlotInsertedBoardId, netClockSourceRowStatus=netClockSourceRowStatus, netClockSource=netClockSource, ansPhysicalPointAdminStatus=ansPhysicalPointAdminStatus, physicalPoint=physicalPoint, ProtectedBoardType=ProtectedBoardType, ansBoardSwIdPassive=ansBoardSwIdPassive, ansSubrackIndex=ansSubrackIndex, ansSubrackProtectionScheme=ansSubrackProtectionScheme, ansSystemNodeName=ansSystemNodeName, AnsSubrackType=AnsSubrackType, ansSystemNodeOrigin=ansSystemNodeOrigin, ansSubrackTable=ansSubrackTable, ansSlotFallback=ansSlotFallback, ansPhysicalPointSubrackIndex=ansPhysicalPointSubrackIndex, netClockSourceTable=netClockSourceTable, ansSlotManagementStatus=ansSlotManagementStatus, ansBoardAlarmStatus=ansBoardAlarmStatus, ansBoardSwIdActive=ansBoardSwIdActive, ansBoardSyncMode=ansBoardSyncMode, ansSubrackNoOfSlots=ansSubrackNoOfSlots, systemNode=systemNode, ansSlotSystemNodeIndex=ansSlotSystemNodeIndex, equipment=equipment, ansSubrackSystemNodeIndex=ansSubrackSystemNodeIndex, ansPhysicalPointOperStatus=ansPhysicalPointOperStatus, ansDsPhysicalPointSubrackIndex=ansDsPhysicalPointSubrackIndex, ansPhysicalPointEntry=ansPhysicalPointEntry, ansSubrackRowStatus=ansSubrackRowStatus, ansSubrackProtectionState=ansSubrackProtectionState, netClockSourceSystemNodeIndex=netClockSourceSystemNodeIndex, ansSystemNodeLocation=ansSystemNodeLocation, ansSubrackAlarmStatus=ansSubrackAlarmStatus, netClockSourceStatus=netClockSourceStatus, ansBoardSubrackIndex=ansBoardSubrackIndex, ansPhysicalPointTable=ansPhysicalPointTable, netClockSourceRevertiveMode=netClockSourceRevertiveMode, ansSubrackName=ansSubrackName, ansSlotSubrackIndex=ansSlotSubrackIndex, slot=slot, ansDsPhysicalPointIndex=ansDsPhysicalPointIndex, ansSystemNodeTable=ansSystemNodeTable, ansSystemNodeIndex=ansSystemNodeIndex, ansBoardEntry=ansBoardEntry, subrack=subrack, ansSubrackLocation=ansSubrackLocation, ansBoardUsageState=ansBoardUsageState)
