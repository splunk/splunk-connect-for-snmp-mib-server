#
# PySNMP MIB module BDCOM-INTERFACES (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-INTERFACES
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
bdlocal, = mibBuilder.importSymbols("BDCOM-SMI", "bdlocal")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, TimeTicks, Counter64, NotificationType, Unsigned32, Counter32, IpAddress, ObjectIdentity, MibIdentifier, ModuleIdentity, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "TimeTicks", "Counter64", "NotificationType", "Unsigned32", "Counter32", "IpAddress", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bdlinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 2, 2))
bdlifTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1), )
if mibBuilder.loadTexts: bdlifTable.setStatus('mandatory')
bdlifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bdlifEntry.setStatus('mandatory')
bdlocIfHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfHardType.setStatus('mandatory')
bdlocIfLineProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLineProt.setStatus('mandatory')
bdlocIfLastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLastIn.setStatus('mandatory')
bdlocIfLastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLastOut.setStatus('mandatory')
bdlocIfLastOutHang = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLastOutHang.setStatus('mandatory')
bdlocIfInBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInBitsSec.setStatus('mandatory')
bdlocIfInPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInPktsSec.setStatus('mandatory')
bdlocIfOutBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfOutBitsSec.setStatus('mandatory')
bdlocIfOutPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfOutPktsSec.setStatus('mandatory')
bdlocIfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInRunts.setStatus('mandatory')
bdlocIfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInGiants.setStatus('mandatory')
bdlocIfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInCRC.setStatus('mandatory')
bdlocIfInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInFrame.setStatus('mandatory')
bdlocIfInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInOverrun.setStatus('mandatory')
bdlocIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInIgnored.setStatus('mandatory')
bdlocIfInAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInAbort.setStatus('mandatory')
bdlocIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfResets.setStatus('mandatory')
bdlocIfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfRestarts.setStatus('mandatory')
bdlocIfKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfKeep.setStatus('mandatory')
bdlocIfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfReason.setStatus('mandatory')
bdlocIfCarTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfCarTrans.setStatus('mandatory')
bdlocIfReliab = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfReliab.setStatus('mandatory')
bdlocIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfDelay.setStatus('mandatory')
bdlocIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLoad.setStatus('mandatory')
bdlocIfCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfCollisions.setStatus('mandatory')
bdlocIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInputQueueDrops.setStatus('mandatory')
bdlocIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfOutputQueueDrops.setStatus('mandatory')
bdlocIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdlocIfDescr.setStatus('mandatory')
bdlocIfSlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowInPkts.setStatus('mandatory')
bdlocIfSlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowOutPkts.setStatus('mandatory')
bdlocIfSlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowInOctets.setStatus('mandatory')
bdlocIfSlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowOutOctets.setStatus('mandatory')
bdlocIfFastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastInPkts.setStatus('mandatory')
bdlocIfFastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastOutPkts.setStatus('mandatory')
bdlocIfFastInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastInOctets.setStatus('mandatory')
bdlocIfFastOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastOutOctets.setStatus('mandatory')
bdlocIfotherInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherInPkts.setStatus('mandatory')
bdlocIfotherOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherOutPkts.setStatus('mandatory')
bdlocIfotherInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherInOctets.setStatus('mandatory')
bdlocIfotherOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherOutOctets.setStatus('mandatory')
bdlocIfipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipInPkts.setStatus('mandatory')
bdlocIfipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipOutPkts.setStatus('mandatory')
bdlocIfipInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipInOctets.setStatus('mandatory')
bdlocIfipOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipOutOctets.setStatus('mandatory')
bdlocIfdecnetInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetInPkts.setStatus('mandatory')
bdlocIfdecnetOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetOutPkts.setStatus('mandatory')
bdlocIfdecnetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetInOctets.setStatus('mandatory')
bdlocIfdecnetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetOutOctets.setStatus('mandatory')
bdlocIfxnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsInPkts.setStatus('mandatory')
bdlocIfxnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsOutPkts.setStatus('mandatory')
bdlocIfxnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsInOctets.setStatus('mandatory')
bdlocIfxnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsOutOctets.setStatus('mandatory')
bdlocIfclnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsInPkts.setStatus('mandatory')
bdlocIfclnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsOutPkts.setStatus('mandatory')
bdlocIfclnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsInOctets.setStatus('mandatory')
bdlocIfclnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsOutOctets.setStatus('mandatory')
bdlocIfappletalkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkInPkts.setStatus('mandatory')
bdlocIfappletalkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkOutPkts.setStatus('mandatory')
bdlocIfappletalkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkInOctets.setStatus('mandatory')
bdlocIfappletalkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkOutOctets.setStatus('mandatory')
bdlocIfnovellInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellInPkts.setStatus('mandatory')
bdlocIfnovellOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellOutPkts.setStatus('mandatory')
bdlocIfnovellInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellInOctets.setStatus('mandatory')
bdlocIfnovellOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellOutOctets.setStatus('mandatory')
bdlocIfapolloInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloInPkts.setStatus('mandatory')
bdlocIfapolloOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloOutPkts.setStatus('mandatory')
bdlocIfapolloInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloInOctets.setStatus('mandatory')
bdlocIfapolloOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloOutOctets.setStatus('mandatory')
bdlocIfvinesInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesInPkts.setStatus('mandatory')
bdlocIfvinesOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesOutPkts.setStatus('mandatory')
bdlocIfvinesInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesInOctets.setStatus('mandatory')
bdlocIfvinesOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesOutOctets.setStatus('mandatory')
bdlocIfbridgedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedInPkts.setStatus('mandatory')
bdlocIfbridgedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedOutPkts.setStatus('mandatory')
bdlocIfbridgedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedInOctets.setStatus('mandatory')
bdlocIfbridgedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedOutOctets.setStatus('mandatory')
bdlocIfsrbInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbInPkts.setStatus('mandatory')
bdlocIfsrbOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbOutPkts.setStatus('mandatory')
bdlocIfsrbInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbInOctets.setStatus('mandatory')
bdlocIfsrbOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbOutOctets.setStatus('mandatory')
bdlocIfchaosInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosInPkts.setStatus('mandatory')
bdlocIfchaosOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosOutPkts.setStatus('mandatory')
bdlocIfchaosInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosInOctets.setStatus('mandatory')
bdlocIfchaosOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosOutOctets.setStatus('mandatory')
bdlocIfpupInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupInPkts.setStatus('mandatory')
bdlocIfpupOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupOutPkts.setStatus('mandatory')
bdlocIfpupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupInOctets.setStatus('mandatory')
bdlocIfpupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupOutOctets.setStatus('mandatory')
bdlocIfmopInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopInPkts.setStatus('mandatory')
bdlocIfmopOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopOutPkts.setStatus('mandatory')
bdlocIfmopInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopInOctets.setStatus('mandatory')
bdlocIfmopOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopOutOctets.setStatus('mandatory')
bdlocIflanmanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanInPkts.setStatus('mandatory')
bdlocIflanmanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanOutPkts.setStatus('mandatory')
bdlocIflanmanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanInOctets.setStatus('mandatory')
bdlocIflanmanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanOutOctets.setStatus('mandatory')
bdlocIfstunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunInPkts.setStatus('mandatory')
bdlocIfstunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunOutPkts.setStatus('mandatory')
bdlocIfstunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunInOctets.setStatus('mandatory')
bdlocIfstunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunOutOctets.setStatus('mandatory')
bdlocIfspanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanInPkts.setStatus('mandatory')
bdlocIfspanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanOutPkts.setStatus('mandatory')
bdlocIfspanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanInOctets.setStatus('mandatory')
bdlocIfspanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanOutOctets.setStatus('mandatory')
bdlocIfarpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpInPkts.setStatus('mandatory')
bdlocIfarpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpOutPkts.setStatus('mandatory')
bdlocIfarpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpInOctets.setStatus('mandatory')
bdlocIfarpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpOutOctets.setStatus('mandatory')
bdlocIfprobeInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeInPkts.setStatus('mandatory')
bdlocIfprobeOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeOutPkts.setStatus('mandatory')
bdlocIfprobeInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeInOctets.setStatus('mandatory')
bdlocIfprobeOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeOutOctets.setStatus('mandatory')
bdlocIfDribbleInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfDribbleInputs.setStatus('mandatory')
bdlFSIPTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2), )
if mibBuilder.loadTexts: bdlFSIPTable.setStatus('mandatory')
bdlFSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1), ).setIndexNames((0, "BDCOM-INTERFACES", "bdlocIfFSIPIndex"))
if mibBuilder.loadTexts: bdlFSIPEntry.setStatus('mandatory')
bdlocIfFSIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPIndex.setStatus('mandatory')
bdlocIfFSIPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPtype.setStatus('mandatory')
bdlocIfFSIPrts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPrts.setStatus('mandatory')
bdlocIfFSIPcts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPcts.setStatus('mandatory')
bdlocIfFSIPdtr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPdtr.setStatus('mandatory')
bdlocIfFSIPdcd = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPdcd.setStatus('mandatory')
bdlocIfFSIPdsr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPdsr.setStatus('mandatory')
bdlocIfFSIPrxClockrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPrxClockrate.setStatus('mandatory')
bdlocIfFSIPrxClockrateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPrxClockrateHi.setStatus('mandatory')
bdlocIfFSIPportType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noCable", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5), ("x21", 6), ("rs449", 7), ("rs530", 8), ("hssi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPportType.setStatus('mandatory')
mibBuilder.exportSymbols("BDCOM-INTERFACES", bdlocIfdecnetInPkts=bdlocIfdecnetInPkts, bdlocIfFSIPtype=bdlocIfFSIPtype, bdlocIfxnsOutPkts=bdlocIfxnsOutPkts, bdlocIfInCRC=bdlocIfInCRC, bdlocIfpupInPkts=bdlocIfpupInPkts, bdlocIfpupOutPkts=bdlocIfpupOutPkts, bdlocIfstunInOctets=bdlocIfstunInOctets, bdlocIfsrbOutOctets=bdlocIfsrbOutOctets, bdlocIfDribbleInputs=bdlocIfDribbleInputs, bdlocIfLastIn=bdlocIfLastIn, bdlocIfsrbOutPkts=bdlocIfsrbOutPkts, bdlocIfInFrame=bdlocIfInFrame, bdlocIfvinesInOctets=bdlocIfvinesInOctets, bdlocIfspanOutPkts=bdlocIfspanOutPkts, bdlocIfFSIPrts=bdlocIfFSIPrts, bdlocIfstunOutPkts=bdlocIfstunOutPkts, bdlifTable=bdlifTable, bdlocIfmopOutOctets=bdlocIfmopOutOctets, bdlocIfOutputQueueDrops=bdlocIfOutputQueueDrops, bdlocIflanmanInOctets=bdlocIflanmanInOctets, bdlocIfspanInPkts=bdlocIfspanInPkts, bdlocIfarpInPkts=bdlocIfarpInPkts, bdlocIfFSIPIndex=bdlocIfFSIPIndex, bdlocIfxnsOutOctets=bdlocIfxnsOutOctets, bdlocIflanmanInPkts=bdlocIflanmanInPkts, bdlocIfLineProt=bdlocIfLineProt, bdlocIfbridgedInPkts=bdlocIfbridgedInPkts, bdlocIfDelay=bdlocIfDelay, bdlocIfFSIPdsr=bdlocIfFSIPdsr, bdlocIfSlowOutOctets=bdlocIfSlowOutOctets, bdlocIfFastInOctets=bdlocIfFastInOctets, bdlocIfappletalkOutOctets=bdlocIfappletalkOutOctets, bdlocIfapolloOutPkts=bdlocIfapolloOutPkts, bdlocIfnovellInOctets=bdlocIfnovellInOctets, bdlocIfInIgnored=bdlocIfInIgnored, bdlocIfsrbInPkts=bdlocIfsrbInPkts, bdlocIfReason=bdlocIfReason, bdlocIfInOverrun=bdlocIfInOverrun, bdlocIfipOutOctets=bdlocIfipOutOctets, bdlocIfnovellOutOctets=bdlocIfnovellOutOctets, bdlocIfResets=bdlocIfResets, bdlocIfspanOutOctets=bdlocIfspanOutOctets, bdlocIfarpOutPkts=bdlocIfarpOutPkts, bdlocIfprobeInPkts=bdlocIfprobeInPkts, bdlFSIPEntry=bdlFSIPEntry, bdlocIfipInOctets=bdlocIfipInOctets, bdlocIfipOutPkts=bdlocIfipOutPkts, bdlocIfbridgedInOctets=bdlocIfbridgedInOctets, bdlocIfstunInPkts=bdlocIfstunInPkts, bdlocIfnovellInPkts=bdlocIfnovellInPkts, bdlocIfappletalkInOctets=bdlocIfappletalkInOctets, bdlocIfchaosOutOctets=bdlocIfchaosOutOctets, bdlocIfotherInPkts=bdlocIfotherInPkts, bdlocIfFSIPrxClockrate=bdlocIfFSIPrxClockrate, bdlocIfvinesInPkts=bdlocIfvinesInPkts, bdlocIfmopInOctets=bdlocIfmopInOctets, bdlocIfotherOutOctets=bdlocIfotherOutOctets, bdlocIfLastOutHang=bdlocIfLastOutHang, bdlinterfaces=bdlinterfaces, bdlocIfInGiants=bdlocIfInGiants, bdlocIfarpInOctets=bdlocIfarpInOctets, bdlocIfclnsOutPkts=bdlocIfclnsOutPkts, bdlocIfclnsOutOctets=bdlocIfclnsOutOctets, bdlocIfapolloOutOctets=bdlocIfapolloOutOctets, bdlocIfLastOut=bdlocIfLastOut, bdlocIfxnsInOctets=bdlocIfxnsInOctets, bdlocIfpupInOctets=bdlocIfpupInOctets, bdlocIfspanInOctets=bdlocIfspanInOctets, bdlocIfdecnetOutPkts=bdlocIfdecnetOutPkts, bdlocIfapolloInPkts=bdlocIfapolloInPkts, bdlocIfFSIPdcd=bdlocIfFSIPdcd, bdlocIfchaosInOctets=bdlocIfchaosInOctets, bdlocIfvinesOutPkts=bdlocIfvinesOutPkts, bdlocIfLoad=bdlocIfLoad, bdlocIfprobeOutOctets=bdlocIfprobeOutOctets, bdlocIfInRunts=bdlocIfInRunts, bdlocIfdecnetOutOctets=bdlocIfdecnetOutOctets, bdlocIfprobeOutPkts=bdlocIfprobeOutPkts, bdlocIfpupOutOctets=bdlocIfpupOutOctets, bdlocIfHardType=bdlocIfHardType, bdlocIfapolloInOctets=bdlocIfapolloInOctets, bdlocIfmopInPkts=bdlocIfmopInPkts, bdlocIfstunOutOctets=bdlocIfstunOutOctets, bdlocIfnovellOutPkts=bdlocIfnovellOutPkts, bdlocIfclnsInOctets=bdlocIfclnsInOctets, bdlocIfSlowInOctets=bdlocIfSlowInOctets, bdlocIfxnsInPkts=bdlocIfxnsInPkts, bdlocIfFSIPportType=bdlocIfFSIPportType, bdlocIfarpOutOctets=bdlocIfarpOutOctets, bdlocIfOutPktsSec=bdlocIfOutPktsSec, bdlocIfFSIPcts=bdlocIfFSIPcts, bdlocIfRestarts=bdlocIfRestarts, bdlocIflanmanOutPkts=bdlocIflanmanOutPkts, bdlFSIPTable=bdlFSIPTable, bdlocIfmopOutPkts=bdlocIfmopOutPkts, bdlocIfSlowInPkts=bdlocIfSlowInPkts, bdlocIfbridgedOutOctets=bdlocIfbridgedOutOctets, bdlocIfDescr=bdlocIfDescr, bdlocIfCarTrans=bdlocIfCarTrans, bdlocIfInPktsSec=bdlocIfInPktsSec, bdlocIfclnsInPkts=bdlocIfclnsInPkts, bdlocIfFastOutOctets=bdlocIfFastOutOctets, bdlocIfReliab=bdlocIfReliab, bdlocIfFSIPdtr=bdlocIfFSIPdtr, bdlocIfKeep=bdlocIfKeep, bdlocIfprobeInOctets=bdlocIfprobeInOctets, bdlocIfInBitsSec=bdlocIfInBitsSec, bdlocIfSlowOutPkts=bdlocIfSlowOutPkts, bdlocIfappletalkOutPkts=bdlocIfappletalkOutPkts, bdlocIfotherInOctets=bdlocIfotherInOctets, bdlocIfsrbInOctets=bdlocIfsrbInOctets, bdlifEntry=bdlifEntry, bdlocIfotherOutPkts=bdlocIfotherOutPkts, bdlocIflanmanOutOctets=bdlocIflanmanOutOctets, bdlocIfInAbort=bdlocIfInAbort, bdlocIfFSIPrxClockrateHi=bdlocIfFSIPrxClockrateHi, bdlocIfchaosOutPkts=bdlocIfchaosOutPkts, bdlocIfCollisions=bdlocIfCollisions, bdlocIfFastOutPkts=bdlocIfFastOutPkts, bdlocIfOutBitsSec=bdlocIfOutBitsSec, bdlocIfchaosInPkts=bdlocIfchaosInPkts, bdlocIfbridgedOutPkts=bdlocIfbridgedOutPkts, bdlocIfipInPkts=bdlocIfipInPkts, bdlocIfFastInPkts=bdlocIfFastInPkts, bdlocIfInputQueueDrops=bdlocIfInputQueueDrops, bdlocIfdecnetInOctets=bdlocIfdecnetInOctets, bdlocIfvinesOutOctets=bdlocIfvinesOutOctets, bdlocIfappletalkInPkts=bdlocIfappletalkInPkts)
