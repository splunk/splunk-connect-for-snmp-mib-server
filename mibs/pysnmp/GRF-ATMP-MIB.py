#
# PySNMP MIB module GRF-ATMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GRF-ATMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:06:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
grAtmp, = mibBuilder.importSymbols("NETSTAR-MIB", "grAtmp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, TimeTicks, Counter64, Unsigned32, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Integer32, ObjectIdentity, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "TimeTicks", "Counter64", "Unsigned32", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Integer32", "ObjectIdentity", "IpAddress", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmpMIBVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 1))
atmpGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 2))
atmpDFAConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 3))
atmpGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 4))
atmpProtocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5))
atmpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6))
atmpMIBVersionMajor = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 1, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpMIBVersionMajor.setStatus('mandatory')
atmpMIBVersionMinor = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpMIBVersionMinor.setStatus('mandatory')
atmpUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpUDPPort.setStatus('mandatory')
atmpEnableAtmpTraps = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpEnableAtmpTraps.setStatus('mandatory')
atmpNumberFAs = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpNumberFAs.setStatus('mandatory')
atmpNumberHNs = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpNumberHNs.setStatus('mandatory')
atmpMaxNumberHNs = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpMaxNumberHNs.setStatus('mandatory')
atmpDFAConfigured = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpDFAConfigured.setStatus('mandatory')
atmpDFAWildcardIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpDFAWildcardIpAddress.setStatus('mandatory')
atmpDFAPassword = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 3, 3), DisplayString().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpDFAPassword.setStatus('mandatory')
atmpNumberTunnelsUp = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpNumberTunnelsUp.setStatus('mandatory')
atmpNumberTunnelsRegistering = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpNumberTunnelsRegistering.setStatus('mandatory')
atmpNumberFAFailingMatch = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpNumberFAFailingMatch.setStatus('mandatory')
atmpNumberFAPasswordRejects = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpNumberFAPasswordRejects.setStatus('mandatory')
atmpNumberDFAMatch = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpNumberDFAMatch.setStatus('mandatory')
atmpRxRegistrationRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxRegistrationRequestPkts.setStatus('mandatory')
atmpRxChallengeReplyPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxChallengeReplyPkts.setStatus('mandatory')
atmpRxDeRegistrationRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxDeRegistrationRequestPkts.setStatus('mandatory')
atmpTxChallengeRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxChallengeRequestPkts.setStatus('mandatory')
atmpTxRegistrationReplyPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxRegistrationReplyPkts.setStatus('mandatory')
atmpTxDeRegistrationReplyPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxDeRegistrationReplyPkts.setStatus('mandatory')
atmpReceiveProtocolErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7))
atmpTransmitProtocolErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8))
atmpRxErrorNotificationPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxErrorNotificationPkts.setStatus('mandatory')
atmpRxNoErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxNoErrorPkts.setStatus('mandatory')
atmpRxAuthFailedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxAuthFailedPkts.setStatus('mandatory')
atmpRxNotEnabledPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxNotEnabledPkts.setStatus('mandatory')
atmpRxTooManyPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxTooManyPkts.setStatus('mandatory')
atmpRxParameterErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxParameterErrorPkts.setStatus('mandatory')
atmpRxInvalidTunnelIdPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxInvalidTunnelIdPkts.setStatus('mandatory')
atmpRxTimeoutPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxTimeoutPkts.setStatus('mandatory')
atmpRxNetUnreachablePkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxNetUnreachablePkts.setStatus('mandatory')
atmpRxGeneralErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxGeneralErrorPkts.setStatus('mandatory')
atmpRxChallengeRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxChallengeRequestPkts.setStatus('mandatory')
atmpRxRegistrationReplyPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxRegistrationReplyPkts.setStatus('mandatory')
atmpRxDeRegistrationReplyPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxDeRegistrationReplyPkts.setStatus('mandatory')
atmpRxUndersizeLengthPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxUndersizeLengthPkts.setStatus('mandatory')
atmpRxBadVersionPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxBadVersionPkts.setStatus('mandatory')
atmpRxBufferAllocFailPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxBufferAllocFailPkts.setStatus('mandatory')
atmpRxBadAtmpCodePkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxBadAtmpCodePkts.setStatus('mandatory')
atmpRxNetworkErrors = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 7, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpRxNetworkErrors.setStatus('mandatory')
atmpTxErrorNotificationPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxErrorNotificationPkts.setStatus('mandatory')
atmpTxNoErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxNoErrorPkts.setStatus('mandatory')
atmpTxAuthFailedPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxAuthFailedPkts.setStatus('mandatory')
atmpTxNotEnabledPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxNotEnabledPkts.setStatus('mandatory')
atmpTxTooManyPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxTooManyPkts.setStatus('mandatory')
atmpTxParameterErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxParameterErrorPkts.setStatus('mandatory')
atmpTxInvalidTunnelIdPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxInvalidTunnelIdPkts.setStatus('mandatory')
atmpTxTimeoutPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxTimeoutPkts.setStatus('mandatory')
atmpTxNetUnreachablePkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxNetUnreachablePkts.setStatus('mandatory')
atmpTxGeneralErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxGeneralErrorPkts.setStatus('mandatory')
atmpTxNetworkErrors = MibScalar((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 5, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTxNetworkErrors.setStatus('mandatory')
atmpFATable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 1), )
if mibBuilder.loadTexts: atmpFATable.setStatus('mandatory')
atmpFAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 1, 1), ).setIndexNames((0, "GRF-ATMP-MIB", "atmpFAIpAddress"))
if mibBuilder.loadTexts: atmpFAEntry.setStatus('mandatory')
atmpFAIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpFAIpAddress.setStatus('mandatory')
atmpFAPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 1, 1, 2), DisplayString().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpFAPassword.setStatus('mandatory')
atmpFANumberTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpFANumberTunnels.setStatus('mandatory')
atmpHNTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2), )
if mibBuilder.loadTexts: atmpHNTable.setStatus('mandatory')
atmpHNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1), ).setIndexNames((0, "GRF-ATMP-MIB", "atmpHAIpAddress"))
if mibBuilder.loadTexts: atmpHNEntry.setStatus('mandatory')
atmpHAIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHAIpAddress.setStatus('mandatory')
atmpHNName = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNName.setStatus('mandatory')
atmpHNMTULimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNMTULimit.setStatus('mandatory')
atmpHNForceFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNForceFragmentation.setStatus('mandatory')
atmpHNBadSourceNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 1))).clone(namedValues=NamedValues(("no", 1), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNBadSourceNotification.setStatus('mandatory')
atmpHNMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNMaxTunnels.setStatus('mandatory')
atmpHNInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInactivityTimeout.setStatus('mandatory')
atmpHNNumberTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNNumberTunnels.setStatus('mandatory')
atmpHNInactiveTunnelsRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInactiveTunnelsRemoved.setStatus('mandatory')
atmpHNTunnelsMaxRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNTunnelsMaxRejected.setStatus('mandatory')
atmpHNTunnelHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNTunnelHighWater.setStatus('mandatory')
atmpHNSwitchToStandbyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNSwitchToStandbyInterface.setStatus('mandatory')
atmpHNSwitchToPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNSwitchToPrimaryInterface.setStatus('mandatory')
atmpHNRxErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNRxErrorCount.setStatus('mandatory')
atmpHNTxErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNTxErrorCount.setStatus('mandatory')
atmpHNInterfaceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceCount.setStatus('mandatory')
class AtmpResultCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("no-error", 1), ("auth-failed", 2), ("not-enabled", 3), ("too-many", 4), ("parameter-error", 5), ("invalid-tunnel-id", 6), ("timeout", 7), ("net-unreachable", 8), ("general-error", 9))

atmpHNTxErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 3), )
if mibBuilder.loadTexts: atmpHNTxErrorTable.setStatus('mandatory')
atmpHNTxErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 3, 1), ).setIndexNames((0, "GRF-ATMP-MIB", "atmpHAIpAddress"), (0, "GRF-ATMP-MIB", "atmpHNTxErrorIndex"))
if mibBuilder.loadTexts: atmpHNTxErrorEntry.setStatus('mandatory')
atmpHNTxErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNTxErrorIndex.setStatus('mandatory')
atmpHNTxErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 3, 1, 2), AtmpResultCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNTxErrorCode.setStatus('mandatory')
atmpHNTxErrorFAIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNTxErrorFAIpAddress.setStatus('mandatory')
atmpHNTxErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNTxErrorTime.setStatus('mandatory')
atmpHNRxErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 4), )
if mibBuilder.loadTexts: atmpHNRxErrorTable.setStatus('mandatory')
atmpHNRxErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 4, 1), ).setIndexNames((0, "GRF-ATMP-MIB", "atmpHAIpAddress"), (0, "GRF-ATMP-MIB", "atmpHNRxErrorIndex"))
if mibBuilder.loadTexts: atmpHNRxErrorEntry.setStatus('mandatory')
atmpHNRxErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNRxErrorIndex.setStatus('mandatory')
atmpHNRxErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 4, 1, 2), AtmpResultCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNRxErrorCode.setStatus('mandatory')
atmpHNRxErrorFAIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNRxErrorFAIpAddress.setStatus('mandatory')
atmpHNRxErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNRxErrorTime.setStatus('mandatory')
atmpHNInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5), )
if mibBuilder.loadTexts: atmpHNInterfaceTable.setStatus('mandatory')
atmpHNInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1), ).setIndexNames((0, "GRF-ATMP-MIB", "atmpHAIpAddress"), (0, "GRF-ATMP-MIB", "atmpHNInterfacePriority"))
if mibBuilder.loadTexts: atmpHNInterfaceEntry.setStatus('mandatory')
atmpHNInterfacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfacePriority.setStatus('mandatory')
atmpHNInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceName.setStatus('mandatory')
atmpHNInterfaceConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("circuit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceConfigType.setStatus('mandatory')
atmpHNInterfaceCard = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceCard.setStatus('mandatory')
atmpHNInterfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfacePort.setStatus('mandatory')
atmpHNInterfaceDcliOrVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceDcliOrVpi.setStatus('mandatory')
atmpHNInterfaceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceVci.setStatus('mandatory')
atmpHNInterfaceVpnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceVpnAddress.setStatus('mandatory')
atmpHNInterfaceVpnNetmaskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceVpnNetmaskSize.setStatus('mandatory')
atmpHNInterfaceRipv2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceRipv2Enabled.setStatus('mandatory')
atmpHNInterfaceRipv2Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceRipv2Metric.setStatus('mandatory')
atmpHNInterfaceRipv2Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceRipv2Pkts.setStatus('mandatory')
atmpHNInterfaceCompleteness = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uninitialized", 1), ("complete", 2), ("no-map-to-if", 3), ("no-map-to-circuit", 4), ("from-circuit-no-if", 5), ("from-if-no-if", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpHNInterfaceCompleteness.setStatus('mandatory')
atmpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6), )
if mibBuilder.loadTexts: atmpTunnelTable.setStatus('mandatory')
atmpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1), ).setIndexNames((0, "GRF-ATMP-MIB", "atmpHAIpAddress"), (0, "GRF-ATMP-MIB", "atmpTunnelMnIpAddress"))
if mibBuilder.loadTexts: atmpTunnelEntry.setStatus('mandatory')
atmpTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelId.setStatus('mandatory')
atmpTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("registering", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelState.setStatus('mandatory')
atmpTunnelProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelProtocol.setStatus('mandatory')
atmpTunnelFAIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelFAIpAddress.setStatus('mandatory')
atmpTunnelMnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelMnIpAddress.setStatus('mandatory')
atmpTunnelMnNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelMnNetmask.setStatus('mandatory')
atmpTunnelMnIpxNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelMnIpxNetAddress.setStatus('mandatory')
atmpTunnelMnIpxNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelMnIpxNodeAddress.setStatus('mandatory')
atmpTunnelActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelActive.setStatus('mandatory')
atmpTunnelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelInPkts.setStatus('mandatory')
atmpTunnelInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelInOctets.setStatus('mandatory')
atmpTunnelInErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelInErrPkts.setStatus('mandatory')
atmpTunnelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelOutPkts.setStatus('mandatory')
atmpTunnelOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelOutOctets.setStatus('mandatory')
atmpTunnelOutErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelOutErrPkts.setStatus('mandatory')
atmpTunnelInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelInOctetRate.setStatus('mandatory')
atmpTunnelInOctetSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelInOctetSampleRate.setStatus('mandatory')
atmpTunnelOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelOutOctetRate.setStatus('mandatory')
atmpTunnelOutOctetSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelOutOctetSampleRate.setStatus('mandatory')
atmpTunnelForcedToFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelForcedToFragmentPkts.setStatus('mandatory')
atmpTunnelFailedToFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1080, 1, 1, 8, 6, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmpTunnelFailedToFragmentPkts.setStatus('mandatory')
mibBuilder.exportSymbols("GRF-ATMP-MIB", atmpMIBVersionMajor=atmpMIBVersionMajor, atmpRxNetUnreachablePkts=atmpRxNetUnreachablePkts, atmpTunnelState=atmpTunnelState, atmpHNInterfaceRipv2Pkts=atmpHNInterfaceRipv2Pkts, atmpFAPassword=atmpFAPassword, atmpTxChallengeRequestPkts=atmpTxChallengeRequestPkts, atmpTunnelInOctetSampleRate=atmpTunnelInOctetSampleRate, atmpTunnelFailedToFragmentPkts=atmpTunnelFailedToFragmentPkts, atmpTxErrorNotificationPkts=atmpTxErrorNotificationPkts, atmpHNRxErrorCode=atmpHNRxErrorCode, atmpRxBufferAllocFailPkts=atmpRxBufferAllocFailPkts, atmpHNNumberTunnels=atmpHNNumberTunnels, atmpRxNoErrorPkts=atmpRxNoErrorPkts, atmpTxTimeoutPkts=atmpTxTimeoutPkts, atmpHNTxErrorTime=atmpHNTxErrorTime, atmpNumberFAs=atmpNumberFAs, atmpRxTimeoutPkts=atmpRxTimeoutPkts, atmpHNTunnelHighWater=atmpHNTunnelHighWater, atmpEnableAtmpTraps=atmpEnableAtmpTraps, atmpRxTooManyPkts=atmpRxTooManyPkts, atmpMaxNumberHNs=atmpMaxNumberHNs, atmpHNSwitchToPrimaryInterface=atmpHNSwitchToPrimaryInterface, atmpTunnelInPkts=atmpTunnelInPkts, atmpTunnelOutOctetRate=atmpTunnelOutOctetRate, atmpHNForceFragmentation=atmpHNForceFragmentation, atmpHNInterfaceRipv2Metric=atmpHNInterfaceRipv2Metric, atmpTunnelActive=atmpTunnelActive, atmpHNBadSourceNotification=atmpHNBadSourceNotification, atmpNumberHNs=atmpNumberHNs, atmpRxBadAtmpCodePkts=atmpRxBadAtmpCodePkts, atmpTunnelOutPkts=atmpTunnelOutPkts, atmpDFAConfigured=atmpDFAConfigured, atmpHNTable=atmpHNTable, atmpTunnelEntry=atmpTunnelEntry, atmpRxChallengeRequestPkts=atmpRxChallengeRequestPkts, atmpTxNetworkErrors=atmpTxNetworkErrors, atmpTxNetUnreachablePkts=atmpTxNetUnreachablePkts, atmpHNTxErrorEntry=atmpHNTxErrorEntry, atmpRxBadVersionPkts=atmpRxBadVersionPkts, atmpTunnelOutOctets=atmpTunnelOutOctets, atmpMIBVersionMinor=atmpMIBVersionMinor, atmpNumberTunnelsRegistering=atmpNumberTunnelsRegistering, atmpHNInterfaceName=atmpHNInterfaceName, atmpHNInterfacePort=atmpHNInterfacePort, atmpRxUndersizeLengthPkts=atmpRxUndersizeLengthPkts, atmpHNInterfacePriority=atmpHNInterfacePriority, AtmpResultCode=AtmpResultCode, atmpHNName=atmpHNName, atmpTunnelOutErrPkts=atmpTunnelOutErrPkts, atmpRxRegistrationReplyPkts=atmpRxRegistrationReplyPkts, atmpTunnelProtocol=atmpTunnelProtocol, atmpTxNotEnabledPkts=atmpTxNotEnabledPkts, atmpTunnelInOctetRate=atmpTunnelInOctetRate, atmpHNTxErrorFAIpAddress=atmpHNTxErrorFAIpAddress, atmpHNRxErrorCount=atmpHNRxErrorCount, atmpTunnelOutOctetSampleRate=atmpTunnelOutOctetSampleRate, atmpFANumberTunnels=atmpFANumberTunnels, atmpRxNetworkErrors=atmpRxNetworkErrors, atmpTunnelId=atmpTunnelId, atmpHNInterfaceVpnNetmaskSize=atmpHNInterfaceVpnNetmaskSize, atmpRxRegistrationRequestPkts=atmpRxRegistrationRequestPkts, atmpRxInvalidTunnelIdPkts=atmpRxInvalidTunnelIdPkts, atmpHNInterfaceConfigType=atmpHNInterfaceConfigType, atmpTunnelMnIpxNodeAddress=atmpTunnelMnIpxNodeAddress, atmpTunnelForcedToFragmentPkts=atmpTunnelForcedToFragmentPkts, atmpRxGeneralErrorPkts=atmpRxGeneralErrorPkts, atmpHNMTULimit=atmpHNMTULimit, atmpTunnelMnIpAddress=atmpTunnelMnIpAddress, atmpHNTxErrorIndex=atmpHNTxErrorIndex, atmpHNRxErrorFAIpAddress=atmpHNRxErrorFAIpAddress, atmpTxDeRegistrationReplyPkts=atmpTxDeRegistrationReplyPkts, atmpHNTxErrorTable=atmpHNTxErrorTable, atmpTransmitProtocolErrorStats=atmpTransmitProtocolErrorStats, atmpUDPPort=atmpUDPPort, atmpHNSwitchToStandbyInterface=atmpHNSwitchToStandbyInterface, atmpHNInterfaceDcliOrVpi=atmpHNInterfaceDcliOrVpi, atmpHNRxErrorEntry=atmpHNRxErrorEntry, atmpReceiveProtocolErrorStats=atmpReceiveProtocolErrorStats, atmpHNInterfaceRipv2Enabled=atmpHNInterfaceRipv2Enabled, atmpHNInterfaceVci=atmpHNInterfaceVci, atmpHNInterfaceVpnAddress=atmpHNInterfaceVpnAddress, atmpHNRxErrorTable=atmpHNRxErrorTable, atmpHNTxErrorCode=atmpHNTxErrorCode, atmpHNInterfaceCount=atmpHNInterfaceCount, atmpHNTxErrorCount=atmpHNTxErrorCount, atmpTunnelMnNetmask=atmpTunnelMnNetmask, atmpHNInterfaceTable=atmpHNInterfaceTable, atmpHAIpAddress=atmpHAIpAddress, atmpTunnelTable=atmpTunnelTable, atmpTxRegistrationReplyPkts=atmpTxRegistrationReplyPkts, atmpHNInactiveTunnelsRemoved=atmpHNInactiveTunnelsRemoved, atmpTunnelInErrPkts=atmpTunnelInErrPkts, atmpTunnelFAIpAddress=atmpTunnelFAIpAddress, atmpRxNotEnabledPkts=atmpRxNotEnabledPkts, atmpDFAConfig=atmpDFAConfig, atmpRxParameterErrorPkts=atmpRxParameterErrorPkts, atmpHNInterfaceEntry=atmpHNInterfaceEntry, atmpRxAuthFailedPkts=atmpRxAuthFailedPkts, atmpTxInvalidTunnelIdPkts=atmpTxInvalidTunnelIdPkts, atmpHNInterfaceCard=atmpHNInterfaceCard, atmpGeneralStats=atmpGeneralStats, atmpFAEntry=atmpFAEntry, atmpNumberTunnelsUp=atmpNumberTunnelsUp, atmpTunnelInOctets=atmpTunnelInOctets, atmpTxGeneralErrorPkts=atmpTxGeneralErrorPkts, atmpDFAWildcardIpAddress=atmpDFAWildcardIpAddress, atmpNumberFAFailingMatch=atmpNumberFAFailingMatch, atmpNumberFAPasswordRejects=atmpNumberFAPasswordRejects, atmpTxNoErrorPkts=atmpTxNoErrorPkts, atmpMIBVersion=atmpMIBVersion, atmpHNMaxTunnels=atmpHNMaxTunnels, atmpTxTooManyPkts=atmpTxTooManyPkts, atmpHNRxErrorTime=atmpHNRxErrorTime, atmpGeneralConfig=atmpGeneralConfig, atmpDFAPassword=atmpDFAPassword, atmpNumberDFAMatch=atmpNumberDFAMatch, atmpTxAuthFailedPkts=atmpTxAuthFailedPkts, atmpHNRxErrorIndex=atmpHNRxErrorIndex, atmpFAIpAddress=atmpFAIpAddress, atmpRxDeRegistrationReplyPkts=atmpRxDeRegistrationReplyPkts, atmpRxErrorNotificationPkts=atmpRxErrorNotificationPkts, atmpProtocolStats=atmpProtocolStats, atmpRxChallengeReplyPkts=atmpRxChallengeReplyPkts, atmpHNInactivityTimeout=atmpHNInactivityTimeout, atmpHNInterfaceCompleteness=atmpHNInterfaceCompleteness, atmpRxDeRegistrationRequestPkts=atmpRxDeRegistrationRequestPkts, atmpTunnelMnIpxNetAddress=atmpTunnelMnIpxNetAddress, atmpHNTunnelsMaxRejected=atmpHNTunnelsMaxRejected, atmpHNEntry=atmpHNEntry, atmpFATable=atmpFATable, atmpTables=atmpTables, atmpTxParameterErrorPkts=atmpTxParameterErrorPkts)
