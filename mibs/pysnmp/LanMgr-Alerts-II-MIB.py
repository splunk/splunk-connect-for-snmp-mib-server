#
# PySNMP MIB module LanMgr-Alerts-II-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LanMgr-Alerts-II-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
lanmanager, = mibBuilder.importSymbols("LanMgr-Mib-II-MIB", "lanmanager")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, ObjectIdentity, Unsigned32, NotificationType, Integer32, Counter32, Bits, NotificationType, Gauge32, TimeTicks, Counter64, MibIdentifier, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "NotificationType", "Integer32", "Counter32", "Bits", "NotificationType", "Gauge32", "TimeTicks", "Counter64", "MibIdentifier", "enterprises", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alerts_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2)).setLabel("alerts-2")
alerts = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 1))
alert_conditions = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2)).setLabel("alert-conditions")
alert_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 3)).setLabel("alert-mgmt")
bytesAvailData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 1))
netIOErrorsData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 2))
serverErrorsData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 3))
pwViolationsData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 4))
accessViolatData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 5))
pdcFailData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 6))
rplFailData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 7))
diskData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 8))
auditLogData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 9))
powerData = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 2, 2, 10))
primaryDCName = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryDCName.setStatus('mandatory')
primaryDCFailed = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pdc-Status-OK", 1), ("pdc-Status-Failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryDCFailed.setStatus('mandatory')
replMasterName = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: replMasterName.setStatus('mandatory')
replMasterFailed = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rpl-Status-OK", 1), ("rpl-Status-Failed", 2), ("rpl-Status-Unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: replMasterFailed.setStatus('mandatory')
netIOAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netIOAlertLevel.setStatus('mandatory')
numNetIOErrors = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 2, 2), Integer32())
if mibBuilder.loadTexts: numNetIOErrors.setStatus('mandatory')
networkId = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 2, 3), Integer32())
if mibBuilder.loadTexts: networkId.setStatus('mandatory')
netIOErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ioError-Status-OK", 1), ("ioError-Status-Alert", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netIOErrorStatus.setStatus('mandatory')
serverErrorAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverErrorAlertLevel.setStatus('mandatory')
numServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 3, 2), Integer32())
if mibBuilder.loadTexts: numServerErrors.setStatus('mandatory')
serverErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("svError-Status-OK", 1), ("svError-Status-Alert", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverErrorStatus.setStatus('mandatory')
pwLogonAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwLogonAlertLevel.setStatus('mandatory')
numPWViolations = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 4, 2), Integer32())
if mibBuilder.loadTexts: numPWViolations.setStatus('mandatory')
passwordErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pwError-Status-OK", 1), ("pwError-Status-Alert", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: passwordErrorStatus.setStatus('mandatory')
accessAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessAlertLevel.setStatus('mandatory')
numAccessViolations = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 5, 2), Integer32())
if mibBuilder.loadTexts: numAccessViolations.setStatus('mandatory')
accessErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pwError-Status-OK", 1), ("pwError-Status-Alert", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessErrorStatus.setStatus('mandatory')
numDiskDrives = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDiskDrives.setStatus('mandatory')
bytesAvailTable = MibTable((1, 3, 6, 1, 4, 1, 77, 2, 2, 1, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: bytesAvailTable.setStatus('mandatory')
bytesAvailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 2, 2, 1, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "LanMgr-Alerts-II-MIB", "diskDrive"))
if mibBuilder.loadTexts: bytesAvailEntry.setStatus('mandatory')
diskDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 2, 2, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDrive.setStatus('mandatory')
bytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 2, 2, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bytesAvail.setStatus('mandatory')
diskAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskAlertLevel.setStatus('mandatory')
diskHotFixes = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 8, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskHotFixes.setStatus('mandatory')
diskHardErrors = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 8, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diskHardErrors.setStatus('mandatory')
auditLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("audit-log-OK", 1), ("audit-log-80", 2), ("audit-log-Full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogStatus.setStatus('mandatory')
powerStatus = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("power-OK", 1), ("power-Battery", 2), ("power-Shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatus.setStatus('mandatory')
alertNameNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertNameNumber.setStatus('mandatory')
alertNameTable = MibTable((1, 3, 6, 1, 4, 1, 77, 2, 3, 2), )
if mibBuilder.loadTexts: alertNameTable.setStatus('mandatory')
svAlertNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 2, 3, 2, 1), ).setIndexNames((0, "LanMgr-Alerts-II-MIB", "svAlertName"))
if mibBuilder.loadTexts: svAlertNameEntry.setStatus('mandatory')
svAlertName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svAlertName.setStatus('mandatory')
alertSchedule = MibScalar((1, 3, 6, 1, 4, 1, 77, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertSchedule.setStatus('mandatory')
bytesAvailAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,1))
netIOErrorsAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,2)).setObjects(("LanMgr-Alerts-II-MIB", "networkId"), ("LanMgr-Alerts-II-MIB", "numNetIOErrors"))
serverErrorsAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,3)).setObjects(("LanMgr-Alerts-II-MIB", "serverErrorsData"))
pwViolationsAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,4)).setObjects(("LanMgr-Alerts-II-MIB", "numPWViolations"))
accessViolationsAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,5)).setObjects(("LanMgr-Alerts-II-MIB", "numAccessViolations"))
auditLogFullAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,6))
auditLog80Alert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,7))
upsPowerOutWarnAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,8))
upsPowerOutShutdownAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,9))
upsPowerRestoredAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,10))
logonPrimaryDCFailureAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,11)).setObjects(("LanMgr-Alerts-II-MIB", "primaryDCName"))
replMasterFailurealert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,12)).setObjects(("LanMgr-Alerts-II-MIB", "replMasterName"))
diskHotFixAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,13)).setObjects(("LanMgr-Alerts-II-MIB", "diskDrive"))
diskHardErrorAlert = NotificationType((1, 3, 6, 1, 4, 1, 77, 2, 1) + (0,14)).setObjects(("LanMgr-Alerts-II-MIB", "diskDrive"))
mibBuilder.exportSymbols("LanMgr-Alerts-II-MIB", primaryDCFailed=primaryDCFailed, numNetIOErrors=numNetIOErrors, replMasterName=replMasterName, numServerErrors=numServerErrors, svAlertNameEntry=svAlertNameEntry, upsPowerOutWarnAlert=upsPowerOutWarnAlert, alerts=alerts, netIOErrorsData=netIOErrorsData, bytesAvailData=bytesAvailData, alert_conditions=alert_conditions, accessViolatData=accessViolatData, diskDrive=diskDrive, diskHotFixes=diskHotFixes, accessViolationsAlert=accessViolationsAlert, pdcFailData=pdcFailData, serverErrorsData=serverErrorsData, bytesAvailEntry=bytesAvailEntry, serverErrorsAlert=serverErrorsAlert, svAlertName=svAlertName, auditLogFullAlert=auditLogFullAlert, bytesAvail=bytesAvail, diskData=diskData, pwViolationsData=pwViolationsData, netIOErrorStatus=netIOErrorStatus, replMasterFailed=replMasterFailed, logonPrimaryDCFailureAlert=logonPrimaryDCFailureAlert, upsPowerRestoredAlert=upsPowerRestoredAlert, netIOAlertLevel=netIOAlertLevel, numDiskDrives=numDiskDrives, bytesAvailTable=bytesAvailTable, alertSchedule=alertSchedule, passwordErrorStatus=passwordErrorStatus, serverErrorAlertLevel=serverErrorAlertLevel, accessErrorStatus=accessErrorStatus, numPWViolations=numPWViolations, primaryDCName=primaryDCName, numAccessViolations=numAccessViolations, diskHardErrors=diskHardErrors, auditLogData=auditLogData, bytesAvailAlert=bytesAvailAlert, powerData=powerData, powerStatus=powerStatus, replMasterFailurealert=replMasterFailurealert, auditLog80Alert=auditLog80Alert, netIOErrorsAlert=netIOErrorsAlert, networkId=networkId, pwLogonAlertLevel=pwLogonAlertLevel, accessAlertLevel=accessAlertLevel, alertNameTable=alertNameTable, auditLogStatus=auditLogStatus, diskHotFixAlert=diskHotFixAlert, serverErrorStatus=serverErrorStatus, diskAlertLevel=diskAlertLevel, alert_mgmt=alert_mgmt, alerts_2=alerts_2, rplFailData=rplFailData, pwViolationsAlert=pwViolationsAlert, alertNameNumber=alertNameNumber, upsPowerOutShutdownAlert=upsPowerOutShutdownAlert, diskHardErrorAlert=diskHardErrorAlert)
