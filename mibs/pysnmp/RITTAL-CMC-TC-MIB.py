#
# PySNMP MIB module RITTAL-CMC-TC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RITTAL-CMC-TC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:48:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysContact, sysName, sysDescr, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysContact", "sysName", "sysDescr", "sysLocation")
Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, iso, enterprises, Integer32, MibIdentifier, TimeTicks, Counter32, ObjectIdentity, NotificationType, Bits, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "iso", "enterprises", "Integer32", "MibIdentifier", "TimeTicks", "Counter32", "ObjectIdentity", "NotificationType", "Bits", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rittal = MibIdentifier((1, 3, 6, 1, 4, 1, 2606))
cmcTc = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4))
cmcTcMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 1))
cmcTcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2))
cmcTcStatusSensorUnit1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3))
cmcTcStatusUnit1Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5))
cmcTcStatusUnit1Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6))
cmcTcStatusUnit1Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7))
cmcTcStatusSensorUnit2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4))
cmcTcStatusUnit2Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5))
cmcTcStatusUnit2Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6))
cmcTcStatusUnit2Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7))
cmcTcStatusSensorUnit3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5))
cmcTcStatusUnit3Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5))
cmcTcStatusUnit3Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6))
cmcTcStatusUnit3Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7))
cmcTcStatusSensorUnit4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6))
cmcTcStatusUnit4Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5))
cmcTcStatusUnit4Outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6))
cmcTcStatusUnit4Msg = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7))
cmcTcStatusExtUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7))
cmcTcSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 3))
cmcTcSetupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1))
cmcTcTimerTable1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8))
cmcTcTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 4))
cmcTcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7))
cmcTcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 4, 5))
cmcTcMibMajRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcMibMajRev.setStatus('mandatory')
cmcTcMibMinRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcMibMinRev.setStatus('mandatory')
cmcTcMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("configChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcMibCondition.setStatus('mandatory')
cmcTcStatusDeviceCMC = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcStatusDeviceCMC.setStatus('mandatory')
cmcTcUnitsConnected = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnitsConnected.setStatus('mandatory')
cmcTcUnit1TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1TypeOfDevice.setStatus('mandatory')
cmcTcUnit1Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit1Text.setStatus('mandatory')
cmcTcUnit1Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1Serial.setStatus('mandatory')
cmcTcUnit1Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1Status.setStatus('mandatory')
cmcTcUnit1NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1NumberOfSensors.setStatus('mandatory')
cmcTcUnit1SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit1SensorTable.setStatus('mandatory')
cmcTcUnit1SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit1SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit1SensorEntry.setStatus('mandatory')
unit1SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorIndex.setStatus('mandatory')
unit1SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorType.setStatus('mandatory')
unit1SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorText.setStatus('mandatory')
unit1SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorStatus.setStatus('mandatory')
unit1SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1SensorValue.setStatus('mandatory')
unit1SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorSetHigh.setStatus('mandatory')
unit1SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorSetLow.setStatus('mandatory')
unit1SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1SensorSetWarn.setStatus('mandatory')
cmcTcUnit1NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1NumberOfOutputs.setStatus('mandatory')
cmcTcUnit1OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit1OutputTable.setStatus('mandatory')
cmcTcUnit1OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit1OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit1OutputEntry.setStatus('mandatory')
unit1OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1OutputIndex.setStatus('mandatory')
unit1OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1OutputType.setStatus('mandatory')
unit1OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputText.setStatus('mandatory')
unit1OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputStatus.setStatus('mandatory')
unit1OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputValue.setStatus('mandatory')
unit1OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputSet.setStatus('mandatory')
unit1OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputConfig.setStatus('mandatory')
unit1OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputDelay.setStatus('mandatory')
unit1OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1OutputTimeoutAction.setStatus('mandatory')
cmcTcUnit1NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit1NumberOfMsgs.setStatus('mandatory')
cmcTcUnit1MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit1MsgTable.setStatus('mandatory')
cmcTcUnit1MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit1MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit1MsgEntry.setStatus('mandatory')
unit1MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1MsgIndex.setStatus('mandatory')
unit1MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgText.setStatus('mandatory')
unit1MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit1MsgStatus.setStatus('mandatory')
unit1MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgRelay.setStatus('mandatory')
unit1MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgBeeper.setStatus('mandatory')
unit1MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap1.setStatus('mandatory')
unit1MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap2.setStatus('mandatory')
unit1MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap3.setStatus('mandatory')
unit1MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgTrap4.setStatus('mandatory')
unit1MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit1MsgQuit.setStatus('mandatory')
cmcTcUnit2TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2TypeOfDevice.setStatus('mandatory')
cmcTcUnit2Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit2Text.setStatus('mandatory')
cmcTcUnit2Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2Serial.setStatus('mandatory')
cmcTcUnit2Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2Status.setStatus('mandatory')
cmcTcUnit2NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2NumberOfSensors.setStatus('mandatory')
cmcTcUnit2SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit2SensorTable.setStatus('mandatory')
cmcTcUnit2SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit2SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit2SensorEntry.setStatus('mandatory')
unit2SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorIndex.setStatus('mandatory')
unit2SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorType.setStatus('mandatory')
unit2SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorText.setStatus('mandatory')
unit2SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorStatus.setStatus('mandatory')
unit2SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2SensorValue.setStatus('mandatory')
unit2SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorSetHigh.setStatus('mandatory')
unit2SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorSetLow.setStatus('mandatory')
unit2SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2SensorSetWarn.setStatus('mandatory')
cmcTcUnit2NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2NumberOfOutputs.setStatus('mandatory')
cmcTcUnit2OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit2OutputTable.setStatus('mandatory')
cmcTcUnit2OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit2OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit2OutputEntry.setStatus('mandatory')
unit2OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2OutputIndex.setStatus('mandatory')
unit2OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2OutputType.setStatus('mandatory')
unit2OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputText.setStatus('mandatory')
unit2OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputStatus.setStatus('mandatory')
unit2OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputValue.setStatus('mandatory')
unit2OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputSet.setStatus('mandatory')
unit2OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputConfig.setStatus('mandatory')
unit2OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputDelay.setStatus('mandatory')
unit2OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2OutputTimeoutAction.setStatus('mandatory')
cmcTcUnit2NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit2NumberOfMsgs.setStatus('mandatory')
cmcTcUnit2MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit2MsgTable.setStatus('mandatory')
cmcTcUnit2MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit2MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit2MsgEntry.setStatus('mandatory')
unit2MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2MsgIndex.setStatus('mandatory')
unit2MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgText.setStatus('mandatory')
unit2MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit2MsgStatus.setStatus('mandatory')
unit2MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgRelay.setStatus('mandatory')
unit2MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgBeeper.setStatus('mandatory')
unit2MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap1.setStatus('mandatory')
unit2MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap2.setStatus('mandatory')
unit2MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap3.setStatus('mandatory')
unit2MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgTrap4.setStatus('mandatory')
unit2MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit2MsgQuit.setStatus('mandatory')
cmcTcUnit3TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3TypeOfDevice.setStatus('mandatory')
cmcTcUnit3Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit3Text.setStatus('mandatory')
cmcTcUnit3Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3Serial.setStatus('mandatory')
cmcTcUnit3Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3Status.setStatus('mandatory')
cmcTcUnit3NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3NumberOfSensors.setStatus('mandatory')
cmcTcUnit3SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit3SensorTable.setStatus('mandatory')
cmcTcUnit3SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit3SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit3SensorEntry.setStatus('mandatory')
unit3SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorIndex.setStatus('mandatory')
unit3SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorType.setStatus('mandatory')
unit3SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorText.setStatus('mandatory')
unit3SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorStatus.setStatus('mandatory')
unit3SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3SensorValue.setStatus('mandatory')
unit3SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorSetHigh.setStatus('mandatory')
unit3SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorSetLow.setStatus('mandatory')
unit3SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3SensorSetWarn.setStatus('mandatory')
cmcTcUnit3NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3NumberOfOutputs.setStatus('mandatory')
cmcTcUnit3OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit3OutputTable.setStatus('mandatory')
cmcTcUnit3OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit3OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit3OutputEntry.setStatus('mandatory')
unit3OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3OutputIndex.setStatus('mandatory')
unit3OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3OutputType.setStatus('mandatory')
unit3OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputText.setStatus('mandatory')
unit3OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputStatus.setStatus('mandatory')
unit3OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputValue.setStatus('mandatory')
unit3OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputSet.setStatus('mandatory')
unit3OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputConfig.setStatus('mandatory')
unit3OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputDelay.setStatus('mandatory')
unit3OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3OutputTimeoutAction.setStatus('mandatory')
cmcTcUnit3NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit3NumberOfMsgs.setStatus('mandatory')
cmcTcUnit3MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit3MsgTable.setStatus('mandatory')
cmcTcUnit3MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit3MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit3MsgEntry.setStatus('mandatory')
unit3MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3MsgIndex.setStatus('mandatory')
unit3MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgText.setStatus('mandatory')
unit3MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit3MsgStatus.setStatus('mandatory')
unit3MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgRelay.setStatus('mandatory')
unit3MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgBeeper.setStatus('mandatory')
unit3MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap1.setStatus('mandatory')
unit3MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap2.setStatus('mandatory')
unit3MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap3.setStatus('mandatory')
unit3MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgTrap4.setStatus('mandatory')
unit3MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 5, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit3MsgQuit.setStatus('mandatory')
cmcTcUnit4TypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvail", 1), ("unitIO", 2), ("unitAccess", 3), ("unitClimate", 4), ("unitFCS", 5), ("unitRTT", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4TypeOfDevice.setStatus('mandatory')
cmcTcUnit4Text = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcUnit4Text.setStatus('mandatory')
cmcTcUnit4Serial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4Serial.setStatus('mandatory')
cmcTcUnit4Status = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("quit", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4Status.setStatus('mandatory')
cmcTcUnit4NumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4NumberOfSensors.setStatus('mandatory')
cmcTcUnit4SensorTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2), )
if mibBuilder.loadTexts: cmcTcUnit4SensorTable.setStatus('mandatory')
cmcTcUnit4SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit4SensorIndex"))
if mibBuilder.loadTexts: cmcTcUnit4SensorEntry.setStatus('mandatory')
unit4SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorIndex.setStatus('mandatory')
unit4SensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("lock", 15), ("unlock", 16), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("readerKeypad", 20), ("dutyPWM", 21), ("fanStatus", 22), ("leakage", 23), ("warningRTT", 24), ("alarmRTT", 25), ("filterRTT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorType.setStatus('mandatory')
unit4SensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorText.setStatus('mandatory')
unit4SensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorStatus.setStatus('mandatory')
unit4SensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4SensorValue.setStatus('mandatory')
unit4SensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorSetHigh.setStatus('mandatory')
unit4SensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorSetLow.setStatus('mandatory')
unit4SensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4SensorSetWarn.setStatus('mandatory')
cmcTcUnit4NumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4NumberOfOutputs.setStatus('mandatory')
cmcTcUnit4OutputTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2), )
if mibBuilder.loadTexts: cmcTcUnit4OutputTable.setStatus('mandatory')
cmcTcUnit4OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit4OutputIndex"))
if mibBuilder.loadTexts: cmcTcUnit4OutputEntry.setStatus('mandatory')
unit4OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4OutputIndex.setStatus('mandatory')
unit4OutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("doorLock", 4), ("univLock1", 5), ("univLock2", 6), ("fan", 7), ("fanSpeedContr", 8), ("universalOut", 9), ("roomLock", 10), ("powerOut", 11), ("doorLockMaster", 12), ("doorLockFRi", 13), ("setpoint", 14), ("setpointTimax", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4OutputType.setStatus('mandatory')
unit4OutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputText.setStatus('mandatory')
unit4OutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputStatus.setStatus('mandatory')
unit4OutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputValue.setStatus('mandatory')
unit4OutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputSet.setStatus('mandatory')
unit4OutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputConfig.setStatus('mandatory')
unit4OutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputDelay.setStatus('mandatory')
unit4OutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4OutputTimeoutAction.setStatus('mandatory')
cmcTcUnit4NumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcUnit4NumberOfMsgs.setStatus('mandatory')
cmcTcUnit4MsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2), )
if mibBuilder.loadTexts: cmcTcUnit4MsgTable.setStatus('mandatory')
cmcTcUnit4MsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "unit4MsgIndex"))
if mibBuilder.loadTexts: cmcTcUnit4MsgEntry.setStatus('mandatory')
unit4MsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4MsgIndex.setStatus('mandatory')
unit4MsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgText.setStatus('mandatory')
unit4MsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10), ("open", 11), ("closed", 12), ("locked", 13), ("unlRemote", 14), ("unlReaderKeypad", 15), ("unlSNMP", 16), ("unlWEB", 17), ("unlTimer", 18), ("noAccess", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit4MsgStatus.setStatus('mandatory')
unit4MsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgRelay.setStatus('mandatory')
unit4MsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgBeeper.setStatus('mandatory')
unit4MsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap1.setStatus('mandatory')
unit4MsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap2.setStatus('mandatory')
unit4MsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap3.setStatus('mandatory')
unit4MsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgTrap4.setStatus('mandatory')
unit4MsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 6, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit4MsgQuit.setStatus('mandatory')
cmcTcValuesRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesRelay.setStatus('mandatory')
cmcTcValuesBeeper = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesBeeper.setStatus('mandatory')
cmcTcValuesTrap1 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap1.setStatus('mandatory')
cmcTcValuesTrap2 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap2.setStatus('mandatory')
cmcTcValuesTrap3 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap3.setStatus('mandatory')
cmcTcValuesTrap4 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcValuesTrap4.setStatus('mandatory')
cmcTcNumberOfValues = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcNumberOfValues.setStatus('mandatory')
cmcTcValuesTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8), )
if mibBuilder.loadTexts: cmcTcValuesTable.setStatus('mandatory')
cmcTcValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "valuesIndex"))
if mibBuilder.loadTexts: cmcTcValuesEntry.setStatus('mandatory')
valuesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valuesIndex.setStatus('mandatory')
valuesText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuesText.setStatus('mandatory')
valuesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("tooLow", 5), ("tooHigh", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valuesStatus.setStatus('mandatory')
valuesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: valuesValue.setStatus('mandatory')
valuesSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuesSetHigh.setStatus('mandatory')
valuesSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 2, 7, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuesSetLow.setStatus('mandatory')
cmcTcSetTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetTempUnit.setStatus('mandatory')
cmcTcSetBeeper = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetBeeper.setStatus('mandatory')
cmcTcQuitRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcQuitRelay.setStatus('mandatory')
cmcTcLogicRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closeAtAlarm", 1), ("openAtAlarm", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcLogicRelay.setStatus('mandatory')
cmcTcWebAccess = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("viewOnly", 1), ("fullAccess", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcWebAccess.setStatus('mandatory')
cmcTcSetupDate = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetupDate.setStatus('mandatory')
cmcTcSetupTime = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcSetupTime.setStatus('mandatory')
cmcTcTimerNumber = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTimerNumber.setStatus('mandatory')
cmcTcTimerTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2), )
if mibBuilder.loadTexts: cmcTcTimerTable.setStatus('mandatory')
cmcTcTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "cmcTcTimerIndex"))
if mibBuilder.loadTexts: cmcTcTimerEntry.setStatus('mandatory')
cmcTcTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTimerIndex.setStatus('mandatory')
cmcTcTimerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchedOff", 1), ("switchedOn", 2), ("noTime", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTimerStatus.setStatus('mandatory')
cmcTcTimerDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7), ("sat-sun", 8), ("mon-fri", 9), ("mon-sun", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimerDayOfWeek.setStatus('mandatory')
cmcTcTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimeOn.setStatus('mandatory')
cmcTcTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimeOff.setStatus('mandatory')
cmcTcTimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimeControl.setStatus('mandatory')
cmcTcTimerFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 3, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("disKeypad1-1", 1), ("disKeypad2-1", 2), ("disKeypad1-2", 3), ("disKeypad2-2", 4), ("disKeypad1-3", 5), ("disKeypad2-3", 6), ("disKeypad1-4", 7), ("disKeypad2-4", 8), ("unlDoor1-1", 9), ("unlDoor2-1", 10), ("unlDoor1-2", 11), ("unlDoor2-2", 12), ("unlDoor1-3", 13), ("unlDoor2-3", 14), ("unlDoor1-4", 15), ("unlDoor2-5", 16), ("disTrapRec1", 17), ("disTrapRec2", 18), ("disTrapRec3", 19), ("disTrapRec4", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcTimerFunction.setStatus('mandatory')
cmcTcTraptableNumber = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcTcTraptableNumber.setStatus('mandatory')
cmcTcTrapTableTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2), )
if mibBuilder.loadTexts: cmcTcTrapTableTable.setStatus('mandatory')
cmcTcTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1), ).setIndexNames((0, "RITTAL-CMC-TC-MIB", "trapIndex"))
if mibBuilder.loadTexts: cmcTcTrapTableEntry.setStatus('mandatory')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
trapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 4, 4, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPaddress.setStatus('mandatory')
cmcTcQuitUnit = MibScalar((1, 3, 6, 1, 4, 1, 2606, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noQuit", 1), ("quit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcTcQuitUnit.setStatus('mandatory')
alarmSensorUnit1 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,1)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit1MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit1MsgText"), ("RITTAL-CMC-TC-MIB", "unit1MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit1SensorValue"))
alarmSensorUnit2 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,2)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit2MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit2MsgText"), ("RITTAL-CMC-TC-MIB", "unit2MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit2SensorValue"))
alarmSensorUnit3 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,3)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit3MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit3MsgText"), ("RITTAL-CMC-TC-MIB", "unit3MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit3SensorValue"))
alarmSensorUnit4 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,4)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "unit4MsgIndex"), ("RITTAL-CMC-TC-MIB", "unit4MsgText"), ("RITTAL-CMC-TC-MIB", "unit4MsgStatus"), ("RITTAL-CMC-TC-MIB", "unit4SensorValue"))
alarmUnit1 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,5)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit1Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit1Status"))
alarmUnit2 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,6)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit2Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit2Status"))
alarmUnit3 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,7)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit3Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit3Status"))
alarmUnit4 = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,8)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit4Text"), ("RITTAL-CMC-TC-MIB", "cmcTcUnit4Status"))
alarmValues = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,9)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RITTAL-CMC-TC-MIB", "valuesIndex"), ("RITTAL-CMC-TC-MIB", "valuesText"), ("RITTAL-CMC-TC-MIB", "valuesStatus"))
configChanged = NotificationType((1, 3, 6, 1, 4, 1, 2606, 4) + (0,10)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
mibBuilder.exportSymbols("RITTAL-CMC-TC-MIB", cmcTcStatusUnit1Outputs=cmcTcStatusUnit1Outputs, cmcTcUnit2Serial=cmcTcUnit2Serial, unit2MsgTrap3=unit2MsgTrap3, unit2MsgTrap4=unit2MsgTrap4, cmcTcUnit3NumberOfSensors=cmcTcUnit3NumberOfSensors, alarmSensorUnit1=alarmSensorUnit1, unit4SensorSetWarn=unit4SensorSetWarn, unit4OutputSet=unit4OutputSet, unit2OutputText=unit2OutputText, unit3MsgTrap4=unit3MsgTrap4, cmcTcQuitRelay=cmcTcQuitRelay, unit1SensorSetWarn=unit1SensorSetWarn, unit2MsgStatus=unit2MsgStatus, unit3SensorType=unit3SensorType, valuesSetLow=valuesSetLow, unit2OutputConfig=unit2OutputConfig, unit4SensorType=unit4SensorType, unit4MsgText=unit4MsgText, cmcTcStatusUnit3Outputs=cmcTcStatusUnit3Outputs, unit3MsgIndex=unit3MsgIndex, unit4OutputIndex=unit4OutputIndex, unit4MsgTrap1=unit4MsgTrap1, unit1SensorIndex=unit1SensorIndex, cmcTcUnit1NumberOfOutputs=cmcTcUnit1NumberOfOutputs, unit3SensorSetHigh=unit3SensorSetHigh, cmcTcUnit4MsgEntry=cmcTcUnit4MsgEntry, cmcTcStatus=cmcTcStatus, unit3OutputDelay=unit3OutputDelay, valuesStatus=valuesStatus, cmcTcStatusSensorUnit4=cmcTcStatusSensorUnit4, cmcTcUnit2TypeOfDevice=cmcTcUnit2TypeOfDevice, cmcTcStatusDeviceCMC=cmcTcStatusDeviceCMC, unit3MsgBeeper=unit3MsgBeeper, cmcTcTimeControl=cmcTcTimeControl, unit2MsgRelay=unit2MsgRelay, unit2SensorSetLow=unit2SensorSetLow, cmcTcUnit4TypeOfDevice=cmcTcUnit4TypeOfDevice, trapIPaddress=trapIPaddress, unit2OutputIndex=unit2OutputIndex, cmcTcUnit2OutputTable=cmcTcUnit2OutputTable, cmcTcUnit1MsgTable=cmcTcUnit1MsgTable, cmcTcUnit1Serial=cmcTcUnit1Serial, cmcTcUnit3OutputEntry=cmcTcUnit3OutputEntry, cmcTcUnit3SensorEntry=cmcTcUnit3SensorEntry, unit3SensorText=unit3SensorText, cmcTcTimeOn=cmcTcTimeOn, cmcTcTrapTableEntry=cmcTcTrapTableEntry, unit3OutputIndex=unit3OutputIndex, unit2SensorValue=unit2SensorValue, cmcTcUnit3Text=cmcTcUnit3Text, cmcTcStatusUnit1Msg=cmcTcStatusUnit1Msg, trapStatus=trapStatus, cmcTcSetupTime=cmcTcSetupTime, unit3OutputValue=unit3OutputValue, cmcTcUnit3NumberOfMsgs=cmcTcUnit3NumberOfMsgs, cmcTcSetBeeper=cmcTcSetBeeper, cmcTcMibCondition=cmcTcMibCondition, unit3SensorStatus=unit3SensorStatus, unit2OutputTimeoutAction=unit2OutputTimeoutAction, cmcTcStatusUnit1Sensors=cmcTcStatusUnit1Sensors, unit2MsgTrap1=unit2MsgTrap1, unit4SensorIndex=unit4SensorIndex, alarmUnit3=alarmUnit3, unit1SensorStatus=unit1SensorStatus, unit3SensorIndex=unit3SensorIndex, unit4MsgIndex=unit4MsgIndex, unit3MsgRelay=unit3MsgRelay, unit4MsgTrap3=unit4MsgTrap3, cmcTcNumberOfValues=cmcTcNumberOfValues, unit2MsgBeeper=unit2MsgBeeper, cmcTcTrapControl=cmcTcTrapControl, cmcTcQuitUnit=cmcTcQuitUnit, unit4MsgRelay=unit4MsgRelay, unit1SensorSetHigh=unit1SensorSetHigh, unit2SensorType=unit2SensorType, unit2OutputType=unit2OutputType, unit2OutputStatus=unit2OutputStatus, cmcTcMibRev=cmcTcMibRev, unit2OutputSet=unit2OutputSet, unit2OutputValue=unit2OutputValue, unit3MsgTrap3=unit3MsgTrap3, cmcTcUnit4Text=cmcTcUnit4Text, unit1MsgTrap4=unit1MsgTrap4, unit4MsgStatus=unit4MsgStatus, cmcTcTimerStatus=cmcTcTimerStatus, trapIndex=trapIndex, unit4SensorSetLow=unit4SensorSetLow, unit3MsgStatus=unit3MsgStatus, unit4OutputTimeoutAction=unit4OutputTimeoutAction, cmcTcStatusUnit4Msg=cmcTcStatusUnit4Msg, valuesIndex=valuesIndex, unit1MsgRelay=unit1MsgRelay, unit1MsgBeeper=unit1MsgBeeper, unit1OutputDelay=unit1OutputDelay, cmcTcTimerFunction=cmcTcTimerFunction, cmcTcTimerIndex=cmcTcTimerIndex, cmcTcTimeOff=cmcTcTimeOff, cmcTcUnit1SensorTable=cmcTcUnit1SensorTable, cmcTcUnit4OutputEntry=cmcTcUnit4OutputEntry, unit4OutputText=unit4OutputText, unit2SensorSetHigh=unit2SensorSetHigh, cmcTcUnit1NumberOfSensors=cmcTcUnit1NumberOfSensors, alarmValues=alarmValues, unit4SensorSetHigh=unit4SensorSetHigh, cmcTcLogicRelay=cmcTcLogicRelay, cmcTcUnit2Status=cmcTcUnit2Status, unit3MsgTrap1=unit3MsgTrap1, cmcTcUnit4NumberOfMsgs=cmcTcUnit4NumberOfMsgs, cmcTcTimerTable=cmcTcTimerTable, cmcTcStatusUnit2Msg=cmcTcStatusUnit2Msg, cmcTcUnit2NumberOfOutputs=cmcTcUnit2NumberOfOutputs, unit3OutputSet=unit3OutputSet, cmcTcUnit4NumberOfOutputs=cmcTcUnit4NumberOfOutputs, unit1MsgText=unit1MsgText, cmcTcUnit2OutputEntry=cmcTcUnit2OutputEntry, unit4SensorStatus=unit4SensorStatus, cmcTcStatusUnit3Sensors=cmcTcStatusUnit3Sensors, cmcTcWebAccess=cmcTcWebAccess, unit2MsgIndex=unit2MsgIndex, cmcTcUnit3TypeOfDevice=cmcTcUnit3TypeOfDevice, unit1SensorValue=unit1SensorValue, unit2SensorSetWarn=unit2SensorSetWarn, unit1OutputSet=unit1OutputSet, cmcTcStatusSensorUnit2=cmcTcStatusSensorUnit2, unit4SensorValue=unit4SensorValue, unit1OutputValue=unit1OutputValue, cmcTcUnit3MsgTable=cmcTcUnit3MsgTable, unit2SensorText=unit2SensorText, cmcTcValuesBeeper=cmcTcValuesBeeper, unit1MsgTrap2=unit1MsgTrap2, unit1OutputTimeoutAction=unit1OutputTimeoutAction, cmcTcValuesTable=cmcTcValuesTable, alarmSensorUnit4=alarmSensorUnit4, cmcTcUnit4MsgTable=cmcTcUnit4MsgTable, alarmSensorUnit2=alarmSensorUnit2, cmcTcTimerNumber=cmcTcTimerNumber, alarmUnit1=alarmUnit1, cmcTcUnit1SensorEntry=cmcTcUnit1SensorEntry, cmcTcUnit2NumberOfMsgs=cmcTcUnit2NumberOfMsgs, cmcTcUnit2Text=cmcTcUnit2Text, cmcTcValuesTrap2=cmcTcValuesTrap2, unit1MsgIndex=unit1MsgIndex, unit4OutputDelay=unit4OutputDelay, cmcTcUnit3Serial=cmcTcUnit3Serial, unit1MsgTrap3=unit1MsgTrap3, unit4OutputValue=unit4OutputValue, cmcTcStatusUnit4Sensors=cmcTcStatusUnit4Sensors, cmcTcValuesRelay=cmcTcValuesRelay, cmcTcMibMinRev=cmcTcMibMinRev, cmcTcUnit3OutputTable=cmcTcUnit3OutputTable, cmcTcTimerTable1=cmcTcTimerTable1, unit1OutputStatus=unit1OutputStatus, cmcTcUnit1OutputEntry=cmcTcUnit1OutputEntry, unit1OutputIndex=unit1OutputIndex, unit2MsgQuit=unit2MsgQuit, configChanged=configChanged, cmcTcSetup=cmcTcSetup, unit3OutputTimeoutAction=unit3OutputTimeoutAction, cmcTcControl=cmcTcControl, cmcTcUnit3NumberOfOutputs=cmcTcUnit3NumberOfOutputs, valuesValue=valuesValue, unit3SensorValue=unit3SensorValue, cmcTcStatusUnit2Outputs=cmcTcStatusUnit2Outputs, unit1OutputType=unit1OutputType, unit3OutputConfig=unit3OutputConfig, cmcTcTrapTableTable=cmcTcTrapTableTable, cmcTcUnit3MsgEntry=cmcTcUnit3MsgEntry, valuesText=valuesText, cmcTcSetupDate=cmcTcSetupDate, unit1SensorText=unit1SensorText, unit4MsgQuit=unit4MsgQuit, cmcTcTimerDayOfWeek=cmcTcTimerDayOfWeek, unit4OutputStatus=unit4OutputStatus, cmcTcUnit1MsgEntry=cmcTcUnit1MsgEntry, cmcTcStatusSensorUnit1=cmcTcStatusSensorUnit1, valuesSetHigh=valuesSetHigh, unit2MsgTrap2=unit2MsgTrap2, unit3OutputText=unit3OutputText, cmcTcTimerEntry=cmcTcTimerEntry, cmcTcUnit1NumberOfMsgs=cmcTcUnit1NumberOfMsgs, unit3OutputStatus=unit3OutputStatus, cmcTcValuesTrap1=cmcTcValuesTrap1, cmcTcStatusUnit3Msg=cmcTcStatusUnit3Msg, unit2MsgText=unit2MsgText, cmcTcUnit4SensorEntry=cmcTcUnit4SensorEntry, unit4OutputType=unit4OutputType, cmcTcUnit2SensorTable=cmcTcUnit2SensorTable, cmcTcSetupGeneral=cmcTcSetupGeneral, cmcTcUnitsConnected=cmcTcUnitsConnected, unit4OutputConfig=unit4OutputConfig, unit4SensorText=unit4SensorText, unit1MsgStatus=unit1MsgStatus, cmcTcUnit2MsgEntry=cmcTcUnit2MsgEntry, unit2SensorIndex=unit2SensorIndex, unit3MsgText=unit3MsgText, cmcTcTraps=cmcTcTraps, unit2SensorStatus=unit2SensorStatus, cmcTcUnit4Serial=cmcTcUnit4Serial, cmcTcValuesEntry=cmcTcValuesEntry, cmcTcUnit2SensorEntry=cmcTcUnit2SensorEntry, unit4MsgBeeper=unit4MsgBeeper, unit1SensorSetLow=unit1SensorSetLow, unit1OutputConfig=unit1OutputConfig, cmcTcValuesTrap3=cmcTcValuesTrap3, unit2OutputDelay=unit2OutputDelay, unit3MsgQuit=unit3MsgQuit, unit1MsgTrap1=unit1MsgTrap1, unit4MsgTrap2=unit4MsgTrap2, cmcTcValuesTrap4=cmcTcValuesTrap4, cmcTcUnit3Status=cmcTcUnit3Status, alarmUnit4=alarmUnit4, cmcTcUnit4OutputTable=cmcTcUnit4OutputTable, cmcTcUnit4NumberOfSensors=cmcTcUnit4NumberOfSensors, alarmSensorUnit3=alarmSensorUnit3, alarmUnit2=alarmUnit2, rittal=rittal, cmcTcStatusUnit2Sensors=cmcTcStatusUnit2Sensors, unit3OutputType=unit3OutputType, unit4MsgTrap4=unit4MsgTrap4, cmcTcStatusUnit4Outputs=cmcTcStatusUnit4Outputs, cmcTcUnit3SensorTable=cmcTcUnit3SensorTable, cmcTcMibMajRev=cmcTcMibMajRev, cmcTcTraptableNumber=cmcTcTraptableNumber, cmcTcUnit1Status=cmcTcUnit1Status, cmcTc=cmcTc, unit3SensorSetLow=unit3SensorSetLow, unit1OutputText=unit1OutputText, cmcTcStatusExtUnit=cmcTcStatusExtUnit, cmcTcUnit1TypeOfDevice=cmcTcUnit1TypeOfDevice, cmcTcUnit2MsgTable=cmcTcUnit2MsgTable, unit1SensorType=unit1SensorType, cmcTcUnit1OutputTable=cmcTcUnit1OutputTable, cmcTcUnit4SensorTable=cmcTcUnit4SensorTable, unit3SensorSetWarn=unit3SensorSetWarn, cmcTcUnit1Text=cmcTcUnit1Text, unit1MsgQuit=unit1MsgQuit, cmcTcUnit4Status=cmcTcUnit4Status, cmcTcSetTempUnit=cmcTcSetTempUnit, cmcTcUnit2NumberOfSensors=cmcTcUnit2NumberOfSensors, unit3MsgTrap2=unit3MsgTrap2, cmcTcStatusSensorUnit3=cmcTcStatusSensorUnit3)
