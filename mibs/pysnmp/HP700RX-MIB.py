#
# PySNMP MIB module HP700RX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP700RX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:24:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, TimeTicks, Gauge32, iso, IpAddress, ModuleIdentity, Bits, MibIdentifier, Unsigned32, ObjectIdentity, enterprises, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "TimeTicks", "Gauge32", "iso", "IpAddress", "ModuleIdentity", "Bits", "MibIdentifier", "Unsigned32", "ObjectIdentity", "enterprises", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 4))
icmp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 7))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 13))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 13, 1))
snmpdConf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 13, 2))
netPeripherals = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9))
hpXStation = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1))
terminal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2))
startup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4))
preferences = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 5))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 6))
monitor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("a1097", 1), ("hp98754", 2), ("hp98789", 3), ("hpd1187", 4), ("hpa1497", 5), ("hp98753", 6), ("hp98785", 7), ("hpd1188", 8), ("hpd1195", 9), ("hpd1182", 10), ("hp98774", 11), ("hpd1195x1224", 12), ("hpd1195x640", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitor.setStatus('mandatory')
monitorDescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDescription.setStatus('mandatory')
at2kbLEDControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at2kbLEDControl.setStatus('mandatory')
at2kbLanguage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("usascii", 1), ("danish", 2), ("french", 3), ("norwegian", 4), ("swissgerman", 5), ("candianfrench", 6), ("english", 7), ("finnish", 8), ("belgian", 9), ("spanish", 10), ("german", 11), ("swedish", 12), ("dutch", 13), ("italian", 14), ("candianenglish", 15), ("swissfrench", 16), ("hangul", 17), ("simplifiedchinese", 18), ("traditionalchinese", 19), ("kanji", 20), ("decLK401english", 21), ("reserved", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at2kbLanguage.setStatus('mandatory')
serialSpeed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("bps75", 1), ("bps150", 2), ("bps300", 3), ("bps600", 4), ("bps1200", 5), ("bps2400", 6), ("bps4800", 7), ("bps9600", 8), ("bps19200", 9), ("bps38400", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialSpeed.setStatus('mandatory')
serialDataBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bits7", 1), ("bits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDataBits.setStatus('mandatory')
serialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bits1", 1), ("bits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialStopBits.setStatus('mandatory')
serialParity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialParity.setStatus('mandatory')
serialPacing = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("rtscts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPacing.setStatus('mandatory')
serialUse = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("primary", 2), ("auxiliary", 3), ("diagnostics", 4), ("serialsession", 5), ("slip", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialUse.setStatus('mandatory')
parallelUse = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("primary", 2), ("auxiliary", 3), ("diagnostics", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parallelUse.setStatus('mandatory')
portuseEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portuseEnable.setStatus('mandatory')
networkParamsFrom = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootp", 1), ("eeprom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkParamsFrom.setStatus('mandatory')
configedAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configedAddress.setStatus('mandatory')
configedSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configedSubnetMask.setStatus('mandatory')
configedRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 4), )
if mibBuilder.loadTexts: configedRouteTable.setStatus('mandatory')
routeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 4, 1), ).setIndexNames((0, "HP700RX-MIB", "routeIndex"))
if mibBuilder.loadTexts: routeTableEntry.setStatus('mandatory')
routeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeIndex.setStatus('mandatory')
routeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeGateway.setStatus('mandatory')
routeDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeDestination.setStatus('mandatory')
primaryFileServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryFileServer.setStatus('mandatory')
primaryAccessMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("nfs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryAccessMethod.setStatus('mandatory')
alternateFileServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateFileServer.setStatus('mandatory')
alternateAccessMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("nfs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateAccessMethod.setStatus('mandatory')
fileTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTimeout.setStatus('mandatory')
primaryNameServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryNameServer.setStatus('mandatory')
alternateNameServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateNameServer.setStatus('mandatory')
domain = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domain.setStatus('mandatory')
terminalName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalName.setStatus('mandatory')
slipLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipLocalAddress.setStatus('mandatory')
slipRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipRemoteAddress.setStatus('mandatory')
slipMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 2, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipMask.setStatus('mandatory')
romFonts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: romFonts.setStatus('mandatory')
rgbFileFrom = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("rom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rgbFileFrom.setStatus('mandatory')
bootFileFrom = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("rom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootFileFrom.setStatus('mandatory')
bootFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootFileName.setStatus('mandatory')
remoteConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteConfigEnabled.setStatus('mandatory')
remoteConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteConfigFile.setStatus('mandatory')
xdmcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdmcpEnabled.setStatus('mandatory')
xdmcpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("direct", 2), ("indirect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdmcpType.setStatus('mandatory')
xdmcpHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdmcpHost.setStatus('mandatory')
telnetAutoStart = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAutoStart.setStatus('mandatory')
telnetCharSet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("usascii", 1), ("isoLatin1", 2), ("hpRoman8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetCharSet.setStatus('mandatory')
telnetHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetHost.setStatus('mandatory')
fontPathTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 13), )
if mibBuilder.loadTexts: fontPathTable.setStatus('mandatory')
fontEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 13, 1), ).setIndexNames((0, "HP700RX-MIB", "fontIndex"))
if mibBuilder.loadTexts: fontEntry.setStatus('mandatory')
fontIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fontIndex.setStatus('mandatory')
fontPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 3, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fontPath.setStatus('mandatory')
memInstalled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInstalled.setStatus('mandatory')
memFree = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFree.setStatus('mandatory')
memLowMark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memLowMark.setStatus('mandatory')
memFrags = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFrags.setStatus('mandatory')
memLargestFrag = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memLargestFrag.setStatus('mandatory')
memBackingstore = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBackingstore.setStatus('mandatory')
memReclaims = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memReclaims.setStatus('mandatory')
serialInOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialInOctets.setStatus('mandatory')
serialOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialOutOctets.setStatus('mandatory')
serialInErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialInErrors.setStatus('mandatory')
parallelOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelOutOctets.setStatus('mandatory')
parallelErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelErrors.setStatus('mandatory')
etherInPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInPackets.setStatus('mandatory')
etherInCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInCRCErrors.setStatus('mandatory')
etherInNoBuffers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInNoBuffers.setStatus('mandatory')
etherInRunts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInRunts.setStatus('mandatory')
etherInOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInOctets.setStatus('mandatory')
etherOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutPackets.setStatus('mandatory')
etherOutOneCollisions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutOneCollisions.setStatus('mandatory')
etherOutTwoCollisions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutTwoCollisions.setStatus('mandatory')
etherOutMoreCollisions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutMoreCollisions.setStatus('mandatory')
etherOutMaxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutMaxCollisions.setStatus('mandatory')
etherOutNoBuffers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutNoBuffers.setStatus('mandatory')
etherOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutOctets.setStatus('mandatory')
tftpTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpTimeouts.setStatus('mandatory')
statsTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsTime.setStatus('mandatory')
slipInPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipInPackets.setStatus('mandatory')
slipInOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipInOctets.setStatus('mandatory')
slipInErrs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipInErrs.setStatus('mandatory')
slipOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipOutPackets.setStatus('mandatory')
slipOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipOutOctets.setStatus('mandatory')
slipOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipOutErrors.setStatus('mandatory')
etherInAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInAlignErrors.setStatus('mandatory')
etherInCollisions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInCollisions.setStatus('mandatory')
clientAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientAuthentication.setStatus('mandatory')
accessControls = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControls.setStatus('mandatory')
r3BugCompatability = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: r3BugCompatability.setStatus('mandatory')
resetEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetEnable.setStatus('mandatory')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 3, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("dont", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('mandatory')
mibBuilder.exportSymbols("HP700RX-MIB", serialInOctets=serialInOctets, resetEnable=resetEnable, terminalName=terminalName, memBackingstore=memBackingstore, r3BugCompatability=r3BugCompatability, reboot=reboot, monitor=monitor, etherOutPackets=etherOutPackets, etherInAlignErrors=etherInAlignErrors, romFonts=romFonts, icmp=icmp, parallelErrors=parallelErrors, config=config, routeTableEntry=routeTableEntry, primaryAccessMethod=primaryAccessMethod, etherInOctets=etherInOctets, serialOutOctets=serialOutOctets, routeDestination=routeDestination, remoteConfigFile=remoteConfigFile, serialSpeed=serialSpeed, etherOutOctets=etherOutOctets, slipOutOctets=slipOutOctets, accessControls=accessControls, snmpdConf=snmpdConf, telnetHost=telnetHost, primaryNameServer=primaryNameServer, etherInRunts=etherInRunts, memFree=memFree, hpXStation=hpXStation, serialPacing=serialPacing, remoteConfigEnabled=remoteConfigEnabled, etherInNoBuffers=etherInNoBuffers, statistics=statistics, etherInPackets=etherInPackets, etherOutOneCollisions=etherOutOneCollisions, slipRemoteAddress=slipRemoteAddress, alternateAccessMethod=alternateAccessMethod, terminal=terminal, configedAddress=configedAddress, slipInPackets=slipInPackets, fontEntry=fontEntry, etherOutNoBuffers=etherOutNoBuffers, primaryFileServer=primaryFileServer, portuseEnable=portuseEnable, networkParamsFrom=networkParamsFrom, fontIndex=fontIndex, at2kbLEDControl=at2kbLEDControl, tftpTimeouts=tftpTimeouts, serialDataBits=serialDataBits, bootFileName=bootFileName, serialInErrors=serialInErrors, snmp=snmp, memLowMark=memLowMark, xdmcpHost=xdmcpHost, serialParity=serialParity, alternateFileServer=alternateFileServer, etherOutTwoCollisions=etherOutTwoCollisions, parallelOutOctets=parallelOutOctets, slipInOctets=slipInOctets, preferences=preferences, slipInErrs=slipInErrs, network=network, configedSubnetMask=configedSubnetMask, statsTime=statsTime, slipOutPackets=slipOutPackets, etherOutMoreCollisions=etherOutMoreCollisions, clientAuthentication=clientAuthentication, telnetAutoStart=telnetAutoStart, configedRouteTable=configedRouteTable, netPeripherals=netPeripherals, routeIndex=routeIndex, memReclaims=memReclaims, parallelUse=parallelUse, monitorDescription=monitorDescription, slipMask=slipMask, serialStopBits=serialStopBits, alternateNameServer=alternateNameServer, slipOutErrors=slipOutErrors, domain=domain, fileTimeout=fileTimeout, slipLocalAddress=slipLocalAddress, bootFileFrom=bootFileFrom, trap=trap, etherInCollisions=etherInCollisions, startup=startup, etherOutMaxCollisions=etherOutMaxCollisions, system=system, routeGateway=routeGateway, fontPathTable=fontPathTable, rgbFileFrom=rgbFileFrom, fontPath=fontPath, memLargestFrag=memLargestFrag, hp=hp, nm=nm, xdmcpEnabled=xdmcpEnabled, at2kbLanguage=at2kbLanguage, xdmcpType=xdmcpType, etherInCRCErrors=etherInCRCErrors, serialUse=serialUse, reset=reset, memInstalled=memInstalled, telnetCharSet=telnetCharSet, interface=interface, memFrags=memFrags)
