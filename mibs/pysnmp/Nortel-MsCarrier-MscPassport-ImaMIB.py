#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-ImaMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-ImaMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:21:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
mscLpDS3Index, mscLp, mscLpDS3, mscLpIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index", "mscLp", "mscLpDS3", "mscLpIndex")
DisplayString, Integer32, RowStatus, Gauge32, Counter32, Unsigned32, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DisplayString", "Integer32", "RowStatus", "Gauge32", "Counter32", "Unsigned32", "StorageType")
AsciiString, Link, NonReplicated, Hex, PassportCounter64 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "AsciiString", "Link", "NonReplicated", "Hex", "PassportCounter64")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Gauge32, Counter64, MibIdentifier, ObjectIdentity, Counter32, iso, IpAddress, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Gauge32", "Counter64", "MibIdentifier", "ObjectIdentity", "Counter32", "iso", "IpAddress", "Bits", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
imaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115))
mscLpDS3Ima = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7))
mscLpDS3ImaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 1), )
if mibBuilder.loadTexts: mscLpDS3ImaRowStatusTable.setStatus('mandatory')
mscLpDS3ImaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaRowStatusEntry.setStatus('mandatory')
mscLpDS3ImaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaRowStatus.setStatus('mandatory')
mscLpDS3ImaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaComponentName.setStatus('mandatory')
mscLpDS3ImaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaStorageType.setStatus('mandatory')
mscLpDS3ImaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 13)))
if mibBuilder.loadTexts: mscLpDS3ImaIndex.setStatus('mandatory')
mscLpDS3ImaProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10), )
if mibBuilder.loadTexts: mscLpDS3ImaProvTable.setStatus('mandatory')
mscLpDS3ImaProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaProvEntry.setStatus('mandatory')
mscLpDS3ImaLinkSelectionCriterion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("leastDelay", 0), ("maxBandwidth", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaLinkSelectionCriterion.setStatus('mandatory')
mscLpDS3ImaMaxDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaMaxDiffDelay.setStatus('mandatory')
mscLpDS3ImaLinkRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaLinkRetryTimeout.setStatus('mandatory')
mscLpDS3ImaApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaApplicationFramerName.setStatus('mandatory')
mscLpDS3ImaTransmitClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("itc", 0), ("ctc", 1))).clone('itc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTransmitClockMode.setStatus('mandatory')
mscLpDS3ImaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("atmForum10", 0), ("proprietary", 1))).clone('atmForum10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaProtocol.setStatus('mandatory')
mscLpDS3ImaOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11), )
if mibBuilder.loadTexts: mscLpDS3ImaOperTable.setStatus('mandatory')
mscLpDS3ImaOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaOperEntry.setStatus('mandatory')
mscLpDS3ImaFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noFailure", 0), ("noGoodLinksInStartup", 1), ("badGidInStartup", 2), ("badLidInStartup", 3), ("unsupportedFrameLengthInStartup", 4), ("timeoutInStartup", 5), ("noGoodLinks", 6), ("remoteFailure", 7), ("unsupportedSymmetryInStartup", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaFailureCause.setStatus('mandatory')
mscLpDS3ImaRemoteDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noDefect", 0), ("noGoodLinksInStartup", 1), ("badGidInStartup", 2), ("badLidInStartup", 3), ("unsupportedFrameLengthInStartup", 4), ("timeoutInStartup", 5), ("noGoodLinks", 6), ("locked", 7), ("unsupportedSymmetryInStartup", 8), ("otherAbortStartup", 9), ("insufficientLinks", 10), ("blocked", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaRemoteDefect.setStatus('mandatory')
mscLpDS3ImaRemoteLidsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaRemoteLidsConfig.setStatus('mandatory')
mscLpDS3ImaRemoteLidsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaRemoteLidsActive.setStatus('mandatory')
mscLpDS3ImaCellCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaCellCapacity.setStatus('mandatory')
mscLpDS3ImaRemoteGid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaRemoteGid.setStatus('mandatory')
mscLpDS3ImaClockingModeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaClockingModeMismatch.setStatus('mandatory')
mscLpDS3ImaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 12), )
if mibBuilder.loadTexts: mscLpDS3ImaStatsTable.setStatus('mandatory')
mscLpDS3ImaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaStatsEntry.setStatus('mandatory')
mscLpDS3ImaRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaRunningTime.setStatus('mandatory')
mscLpDS3ImaUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaUnavailSecs.setStatus('mandatory')
mscLpDS3ImaFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaFailures.setStatus('mandatory')
mscLpDS3ImaReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaReceiveCellUtilization.setStatus('mandatory')
mscLpDS3ImaTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 12, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTransmitCellUtilization.setStatus('mandatory')
mscLpDS3ImaCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 13), )
if mibBuilder.loadTexts: mscLpDS3ImaCidDataTable.setStatus('mandatory')
mscLpDS3ImaCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaCidDataEntry.setStatus('mandatory')
mscLpDS3ImaCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaCustomerIdentifier.setStatus('mandatory')
mscLpDS3ImaStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14), )
if mibBuilder.loadTexts: mscLpDS3ImaStateTable.setStatus('mandatory')
mscLpDS3ImaStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaStateEntry.setStatus('mandatory')
mscLpDS3ImaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaAdminState.setStatus('mandatory')
mscLpDS3ImaOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaOperationalState.setStatus('mandatory')
mscLpDS3ImaUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaUsageState.setStatus('mandatory')
mscLpDS3ImaAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaAvailabilityStatus.setStatus('mandatory')
mscLpDS3ImaProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaProceduralStatus.setStatus('mandatory')
mscLpDS3ImaControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaControlStatus.setStatus('mandatory')
mscLpDS3ImaAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaAlarmStatus.setStatus('mandatory')
mscLpDS3ImaStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaStandbyStatus.setStatus('mandatory')
mscLpDS3ImaUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaUnknownStatus.setStatus('mandatory')
mscLpDS3ImaTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2))
mscLpDS3ImaTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 1), )
if mibBuilder.loadTexts: mscLpDS3ImaTestRowStatusTable.setStatus('mandatory')
mscLpDS3ImaTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaTestIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaTestRowStatusEntry.setStatus('mandatory')
mscLpDS3ImaTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestRowStatus.setStatus('mandatory')
mscLpDS3ImaTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestComponentName.setStatus('mandatory')
mscLpDS3ImaTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestStorageType.setStatus('mandatory')
mscLpDS3ImaTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3ImaTestIndex.setStatus('mandatory')
mscLpDS3ImaTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 10), )
if mibBuilder.loadTexts: mscLpDS3ImaTestStateTable.setStatus('mandatory')
mscLpDS3ImaTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaTestIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaTestStateEntry.setStatus('mandatory')
mscLpDS3ImaTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestAdminState.setStatus('mandatory')
mscLpDS3ImaTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestOperationalState.setStatus('mandatory')
mscLpDS3ImaTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestUsageState.setStatus('mandatory')
mscLpDS3ImaTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11), )
if mibBuilder.loadTexts: mscLpDS3ImaTestSetupTable.setStatus('mandatory')
mscLpDS3ImaTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaTestIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaTestSetupEntry.setStatus('mandatory')
mscLpDS3ImaTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestPurpose.setStatus('mandatory')
mscLpDS3ImaTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestType.setStatus('mandatory')
mscLpDS3ImaTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestFrmSize.setStatus('mandatory')
mscLpDS3ImaTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestFrmPatternType.setStatus('mandatory')
mscLpDS3ImaTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestCustomizedPattern.setStatus('mandatory')
mscLpDS3ImaTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestDataStartDelay.setStatus('mandatory')
mscLpDS3ImaTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestDisplayInterval.setStatus('mandatory')
mscLpDS3ImaTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaTestDuration.setStatus('mandatory')
mscLpDS3ImaTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12), )
if mibBuilder.loadTexts: mscLpDS3ImaTestResultsTable.setStatus('mandatory')
mscLpDS3ImaTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaTestIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaTestResultsEntry.setStatus('mandatory')
mscLpDS3ImaTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestElapsedTime.setStatus('mandatory')
mscLpDS3ImaTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestTimeRemaining.setStatus('mandatory')
mscLpDS3ImaTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestCauseOfTermination.setStatus('mandatory')
mscLpDS3ImaTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestBitsTx.setStatus('mandatory')
mscLpDS3ImaTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestBytesTx.setStatus('mandatory')
mscLpDS3ImaTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestFrmTx.setStatus('mandatory')
mscLpDS3ImaTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestBitsRx.setStatus('mandatory')
mscLpDS3ImaTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestBytesRx.setStatus('mandatory')
mscLpDS3ImaTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestFrmRx.setStatus('mandatory')
mscLpDS3ImaTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestErroredFrmRx.setStatus('mandatory')
mscLpDS3ImaTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaTestBitErrorRate.setStatus('mandatory')
mscLpDS3ImaLk = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3))
mscLpDS3ImaLkRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 1), )
if mibBuilder.loadTexts: mscLpDS3ImaLkRowStatusTable.setStatus('mandatory')
mscLpDS3ImaLkRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaLkIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaLkRowStatusEntry.setStatus('mandatory')
mscLpDS3ImaLkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaLkRowStatus.setStatus('mandatory')
mscLpDS3ImaLkComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkComponentName.setStatus('mandatory')
mscLpDS3ImaLkStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkStorageType.setStatus('mandatory')
mscLpDS3ImaLkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mscLpDS3ImaLkIndex.setStatus('mandatory')
mscLpDS3ImaLkProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 10), )
if mibBuilder.loadTexts: mscLpDS3ImaLkProvTable.setStatus('mandatory')
mscLpDS3ImaLkProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaLkIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaLkProvEntry.setStatus('mandatory')
mscLpDS3ImaLkInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ImaLkInterfaceName.setStatus('mandatory')
mscLpDS3ImaLkOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 11), )
if mibBuilder.loadTexts: mscLpDS3ImaLkOperTable.setStatus('mandatory')
mscLpDS3ImaLkOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaLkIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaLkOperEntry.setStatus('mandatory')
mscLpDS3ImaLkFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 0), ("interfaceDown", 1), ("lif", 2), ("lods", 3), ("protocolError", 4), ("remoteFailure", 5), ("misconnected", 6), ("unsupportedFrameLength", 7), ("unsupportedSymmetry", 8), ("noIcp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkFailureCause.setStatus('mandatory')
mscLpDS3ImaLkRemoteDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noDefect", 0), ("physicalLayerDefect", 1), ("lif", 2), ("lods", 3), ("interfaceDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkRemoteDefect.setStatus('mandatory')
mscLpDS3ImaLkRemoteLid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkRemoteLid.setStatus('mandatory')
mscLpDS3ImaLkRelativeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkRelativeDelay.setStatus('mandatory')
mscLpDS3ImaLkLastOifCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOif", 0), ("badFrameLength", 1), ("badGid", 2), ("badLid", 3), ("badOffset", 4), ("badSequenceNumber", 5), ("stuffError", 6), ("missingIcp", 7), ("unexpectedIcp", 8), ("erroredIcp", 9), ("noCells", 10), ("idleCell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkLastOifCause.setStatus('mandatory')
mscLpDS3ImaLkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12), )
if mibBuilder.loadTexts: mscLpDS3ImaLkStatsTable.setStatus('mandatory')
mscLpDS3ImaLkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaLkIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaLkStatsEntry.setStatus('mandatory')
mscLpDS3ImaLkRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkRunningTime.setStatus('mandatory')
mscLpDS3ImaLkUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkUnavailSecs.setStatus('mandatory')
mscLpDS3ImaLkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkFailures.setStatus('mandatory')
mscLpDS3ImaLkUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkUnusableSec.setStatus('mandatory')
mscLpDS3ImaLkSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkSevErroredSec.setStatus('mandatory')
mscLpDS3ImaLkFarEndUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkFarEndUnusableSec.setStatus('mandatory')
mscLpDS3ImaLkFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkFarEndSevErroredSec.setStatus('mandatory')
mscLpDS3ImaLkFarEndUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkFarEndUnavailSec.setStatus('mandatory')
mscLpDS3ImaLkIcpViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkIcpViolations.setStatus('mandatory')
mscLpDS3ImaLkTxStuffEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkTxStuffEvents.setStatus('mandatory')
mscLpDS3ImaLkRxStuffEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkRxStuffEvents.setStatus('mandatory')
mscLpDS3ImaLkIdleCellSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkIdleCellSec.setStatus('mandatory')
mscLpDS3ImaLkStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13), )
if mibBuilder.loadTexts: mscLpDS3ImaLkStateTable.setStatus('mandatory')
mscLpDS3ImaLkStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpDS3ImaLkIndex"))
if mibBuilder.loadTexts: mscLpDS3ImaLkStateEntry.setStatus('mandatory')
mscLpDS3ImaLkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkAdminState.setStatus('mandatory')
mscLpDS3ImaLkOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkOperationalState.setStatus('mandatory')
mscLpDS3ImaLkUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkUsageState.setStatus('mandatory')
mscLpDS3ImaLkAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkAvailabilityStatus.setStatus('mandatory')
mscLpDS3ImaLkProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkProceduralStatus.setStatus('mandatory')
mscLpDS3ImaLkControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkControlStatus.setStatus('mandatory')
mscLpDS3ImaLkAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkAlarmStatus.setStatus('mandatory')
mscLpDS3ImaLkStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkStandbyStatus.setStatus('mandatory')
mscLpDS3ImaLkUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 7, 3, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ImaLkUnknownStatus.setStatus('mandatory')
mscLpIma = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22))
mscLpImaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 1), )
if mibBuilder.loadTexts: mscLpImaRowStatusTable.setStatus('mandatory')
mscLpImaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"))
if mibBuilder.loadTexts: mscLpImaRowStatusEntry.setStatus('mandatory')
mscLpImaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaRowStatus.setStatus('mandatory')
mscLpImaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaComponentName.setStatus('mandatory')
mscLpImaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaStorageType.setStatus('mandatory')
mscLpImaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29)))
if mibBuilder.loadTexts: mscLpImaIndex.setStatus('mandatory')
mscLpImaProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10), )
if mibBuilder.loadTexts: mscLpImaProvTable.setStatus('mandatory')
mscLpImaProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"))
if mibBuilder.loadTexts: mscLpImaProvEntry.setStatus('mandatory')
mscLpImaLinkSelectionCriterion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("leastDelay", 0), ("maxBandwidth", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaLinkSelectionCriterion.setStatus('mandatory')
mscLpImaMaxDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaMaxDiffDelay.setStatus('mandatory')
mscLpImaLinkRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaLinkRetryTimeout.setStatus('mandatory')
mscLpImaApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaApplicationFramerName.setStatus('mandatory')
mscLpImaTransmitClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("itc", 0), ("ctc", 1))).clone('itc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTransmitClockMode.setStatus('mandatory')
mscLpImaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("atmForum10", 0), ("proprietary", 1))).clone('atmForum10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaProtocol.setStatus('mandatory')
mscLpImaOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11), )
if mibBuilder.loadTexts: mscLpImaOperTable.setStatus('mandatory')
mscLpImaOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"))
if mibBuilder.loadTexts: mscLpImaOperEntry.setStatus('mandatory')
mscLpImaFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noFailure", 0), ("noGoodLinksInStartup", 1), ("badGidInStartup", 2), ("badLidInStartup", 3), ("unsupportedFrameLengthInStartup", 4), ("timeoutInStartup", 5), ("noGoodLinks", 6), ("remoteFailure", 7), ("unsupportedSymmetryInStartup", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaFailureCause.setStatus('mandatory')
mscLpImaRemoteDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noDefect", 0), ("noGoodLinksInStartup", 1), ("badGidInStartup", 2), ("badLidInStartup", 3), ("unsupportedFrameLengthInStartup", 4), ("timeoutInStartup", 5), ("noGoodLinks", 6), ("locked", 7), ("unsupportedSymmetryInStartup", 8), ("otherAbortStartup", 9), ("insufficientLinks", 10), ("blocked", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaRemoteDefect.setStatus('mandatory')
mscLpImaRemoteLidsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaRemoteLidsConfig.setStatus('mandatory')
mscLpImaRemoteLidsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaRemoteLidsActive.setStatus('mandatory')
mscLpImaCellCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaCellCapacity.setStatus('mandatory')
mscLpImaRemoteGid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaRemoteGid.setStatus('mandatory')
mscLpImaClockingModeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaClockingModeMismatch.setStatus('mandatory')
mscLpImaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 12), )
if mibBuilder.loadTexts: mscLpImaStatsTable.setStatus('mandatory')
mscLpImaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"))
if mibBuilder.loadTexts: mscLpImaStatsEntry.setStatus('mandatory')
mscLpImaRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaRunningTime.setStatus('mandatory')
mscLpImaUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaUnavailSecs.setStatus('mandatory')
mscLpImaFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaFailures.setStatus('mandatory')
mscLpImaReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaReceiveCellUtilization.setStatus('mandatory')
mscLpImaTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 12, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTransmitCellUtilization.setStatus('mandatory')
mscLpImaCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 13), )
if mibBuilder.loadTexts: mscLpImaCidDataTable.setStatus('mandatory')
mscLpImaCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"))
if mibBuilder.loadTexts: mscLpImaCidDataEntry.setStatus('mandatory')
mscLpImaCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaCustomerIdentifier.setStatus('mandatory')
mscLpImaStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14), )
if mibBuilder.loadTexts: mscLpImaStateTable.setStatus('mandatory')
mscLpImaStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"))
if mibBuilder.loadTexts: mscLpImaStateEntry.setStatus('mandatory')
mscLpImaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaAdminState.setStatus('mandatory')
mscLpImaOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaOperationalState.setStatus('mandatory')
mscLpImaUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaUsageState.setStatus('mandatory')
mscLpImaAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaAvailabilityStatus.setStatus('mandatory')
mscLpImaProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaProceduralStatus.setStatus('mandatory')
mscLpImaControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaControlStatus.setStatus('mandatory')
mscLpImaAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaAlarmStatus.setStatus('mandatory')
mscLpImaStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaStandbyStatus.setStatus('mandatory')
mscLpImaUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaUnknownStatus.setStatus('mandatory')
mscLpImaTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2))
mscLpImaTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 1), )
if mibBuilder.loadTexts: mscLpImaTestRowStatusTable.setStatus('mandatory')
mscLpImaTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaTestIndex"))
if mibBuilder.loadTexts: mscLpImaTestRowStatusEntry.setStatus('mandatory')
mscLpImaTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestRowStatus.setStatus('mandatory')
mscLpImaTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestComponentName.setStatus('mandatory')
mscLpImaTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestStorageType.setStatus('mandatory')
mscLpImaTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpImaTestIndex.setStatus('mandatory')
mscLpImaTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 10), )
if mibBuilder.loadTexts: mscLpImaTestStateTable.setStatus('mandatory')
mscLpImaTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaTestIndex"))
if mibBuilder.loadTexts: mscLpImaTestStateEntry.setStatus('mandatory')
mscLpImaTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestAdminState.setStatus('mandatory')
mscLpImaTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestOperationalState.setStatus('mandatory')
mscLpImaTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestUsageState.setStatus('mandatory')
mscLpImaTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11), )
if mibBuilder.loadTexts: mscLpImaTestSetupTable.setStatus('mandatory')
mscLpImaTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaTestIndex"))
if mibBuilder.loadTexts: mscLpImaTestSetupEntry.setStatus('mandatory')
mscLpImaTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestPurpose.setStatus('mandatory')
mscLpImaTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestType.setStatus('mandatory')
mscLpImaTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestFrmSize.setStatus('mandatory')
mscLpImaTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestFrmPatternType.setStatus('mandatory')
mscLpImaTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestCustomizedPattern.setStatus('mandatory')
mscLpImaTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestDataStartDelay.setStatus('mandatory')
mscLpImaTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestDisplayInterval.setStatus('mandatory')
mscLpImaTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaTestDuration.setStatus('mandatory')
mscLpImaTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12), )
if mibBuilder.loadTexts: mscLpImaTestResultsTable.setStatus('mandatory')
mscLpImaTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaTestIndex"))
if mibBuilder.loadTexts: mscLpImaTestResultsEntry.setStatus('mandatory')
mscLpImaTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestElapsedTime.setStatus('mandatory')
mscLpImaTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestTimeRemaining.setStatus('mandatory')
mscLpImaTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestCauseOfTermination.setStatus('mandatory')
mscLpImaTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestBitsTx.setStatus('mandatory')
mscLpImaTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestBytesTx.setStatus('mandatory')
mscLpImaTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestFrmTx.setStatus('mandatory')
mscLpImaTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestBitsRx.setStatus('mandatory')
mscLpImaTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestBytesRx.setStatus('mandatory')
mscLpImaTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestFrmRx.setStatus('mandatory')
mscLpImaTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestErroredFrmRx.setStatus('mandatory')
mscLpImaTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaTestBitErrorRate.setStatus('mandatory')
mscLpImaLk = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3))
mscLpImaLkRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 1), )
if mibBuilder.loadTexts: mscLpImaLkRowStatusTable.setStatus('mandatory')
mscLpImaLkRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaLkIndex"))
if mibBuilder.loadTexts: mscLpImaLkRowStatusEntry.setStatus('mandatory')
mscLpImaLkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaLkRowStatus.setStatus('mandatory')
mscLpImaLkComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkComponentName.setStatus('mandatory')
mscLpImaLkStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkStorageType.setStatus('mandatory')
mscLpImaLkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mscLpImaLkIndex.setStatus('mandatory')
mscLpImaLkProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 10), )
if mibBuilder.loadTexts: mscLpImaLkProvTable.setStatus('mandatory')
mscLpImaLkProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaLkIndex"))
if mibBuilder.loadTexts: mscLpImaLkProvEntry.setStatus('mandatory')
mscLpImaLkInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpImaLkInterfaceName.setStatus('mandatory')
mscLpImaLkOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 11), )
if mibBuilder.loadTexts: mscLpImaLkOperTable.setStatus('mandatory')
mscLpImaLkOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaLkIndex"))
if mibBuilder.loadTexts: mscLpImaLkOperEntry.setStatus('mandatory')
mscLpImaLkFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 0), ("interfaceDown", 1), ("lif", 2), ("lods", 3), ("protocolError", 4), ("remoteFailure", 5), ("misconnected", 6), ("unsupportedFrameLength", 7), ("unsupportedSymmetry", 8), ("noIcp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkFailureCause.setStatus('mandatory')
mscLpImaLkRemoteDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noDefect", 0), ("physicalLayerDefect", 1), ("lif", 2), ("lods", 3), ("interfaceDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkRemoteDefect.setStatus('mandatory')
mscLpImaLkRemoteLid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkRemoteLid.setStatus('mandatory')
mscLpImaLkRelativeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkRelativeDelay.setStatus('mandatory')
mscLpImaLkLastOifCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOif", 0), ("badFrameLength", 1), ("badGid", 2), ("badLid", 3), ("badOffset", 4), ("badSequenceNumber", 5), ("stuffError", 6), ("missingIcp", 7), ("unexpectedIcp", 8), ("erroredIcp", 9), ("noCells", 10), ("idleCell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkLastOifCause.setStatus('mandatory')
mscLpImaLkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12), )
if mibBuilder.loadTexts: mscLpImaLkStatsTable.setStatus('mandatory')
mscLpImaLkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaLkIndex"))
if mibBuilder.loadTexts: mscLpImaLkStatsEntry.setStatus('mandatory')
mscLpImaLkRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkRunningTime.setStatus('mandatory')
mscLpImaLkUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkUnavailSecs.setStatus('mandatory')
mscLpImaLkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkFailures.setStatus('mandatory')
mscLpImaLkUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkUnusableSec.setStatus('mandatory')
mscLpImaLkSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkSevErroredSec.setStatus('mandatory')
mscLpImaLkFarEndUnusableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkFarEndUnusableSec.setStatus('mandatory')
mscLpImaLkFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkFarEndSevErroredSec.setStatus('mandatory')
mscLpImaLkFarEndUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkFarEndUnavailSec.setStatus('mandatory')
mscLpImaLkIcpViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkIcpViolations.setStatus('mandatory')
mscLpImaLkTxStuffEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkTxStuffEvents.setStatus('mandatory')
mscLpImaLkRxStuffEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkRxStuffEvents.setStatus('mandatory')
mscLpImaLkIdleCellSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkIdleCellSec.setStatus('mandatory')
mscLpImaLkStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13), )
if mibBuilder.loadTexts: mscLpImaLkStateTable.setStatus('mandatory')
mscLpImaLkStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaIndex"), (0, "Nortel-MsCarrier-MscPassport-ImaMIB", "mscLpImaLkIndex"))
if mibBuilder.loadTexts: mscLpImaLkStateEntry.setStatus('mandatory')
mscLpImaLkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkAdminState.setStatus('mandatory')
mscLpImaLkOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkOperationalState.setStatus('mandatory')
mscLpImaLkUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkUsageState.setStatus('mandatory')
mscLpImaLkAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkAvailabilityStatus.setStatus('mandatory')
mscLpImaLkProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkProceduralStatus.setStatus('mandatory')
mscLpImaLkControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkControlStatus.setStatus('mandatory')
mscLpImaLkAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkAlarmStatus.setStatus('mandatory')
mscLpImaLkStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkStandbyStatus.setStatus('mandatory')
mscLpImaLkUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 22, 3, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpImaLkUnknownStatus.setStatus('mandatory')
imaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 1))
imaGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 1, 1))
imaGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 1, 1, 3))
imaGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 1, 1, 3, 2))
imaCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 3))
imaCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 3, 1))
imaCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 3, 1, 3))
imaCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 115, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-ImaMIB", mscLpDS3ImaTestFrmTx=mscLpDS3ImaTestFrmTx, mscLpDS3ImaTestCustomizedPattern=mscLpDS3ImaTestCustomizedPattern, mscLpDS3ImaStorageType=mscLpDS3ImaStorageType, mscLpImaLkInterfaceName=mscLpImaLkInterfaceName, mscLpImaLkStatsTable=mscLpImaLkStatsTable, mscLpDS3ImaLkStateTable=mscLpDS3ImaLkStateTable, mscLpImaLkProvTable=mscLpImaLkProvTable, mscLpImaLkOperEntry=mscLpImaLkOperEntry, mscLpDS3ImaLkTxStuffEvents=mscLpDS3ImaLkTxStuffEvents, mscLpImaTestCustomizedPattern=mscLpImaTestCustomizedPattern, mscLpDS3ImaTestRowStatusEntry=mscLpDS3ImaTestRowStatusEntry, mscLpDS3ImaRowStatusEntry=mscLpDS3ImaRowStatusEntry, mscLpDS3ImaLkUsageState=mscLpDS3ImaLkUsageState, mscLpDS3ImaTestFrmPatternType=mscLpDS3ImaTestFrmPatternType, mscLpDS3ImaTestTimeRemaining=mscLpDS3ImaTestTimeRemaining, mscLpDS3ImaTestUsageState=mscLpDS3ImaTestUsageState, mscLpImaTestComponentName=mscLpImaTestComponentName, mscLpDS3ImaCustomerIdentifier=mscLpDS3ImaCustomerIdentifier, imaCapabilitiesCA02A=imaCapabilitiesCA02A, mscLpImaLkRunningTime=mscLpImaLkRunningTime, mscLpImaLkUnknownStatus=mscLpImaLkUnknownStatus, mscLpDS3ImaLkFarEndUnavailSec=mscLpDS3ImaLkFarEndUnavailSec, mscLpIma=mscLpIma, mscLpDS3ImaRemoteLidsConfig=mscLpDS3ImaRemoteLidsConfig, mscLpDS3ImaTestResultsTable=mscLpDS3ImaTestResultsTable, mscLpDS3ImaCidDataTable=mscLpDS3ImaCidDataTable, mscLpDS3ImaLkStatsEntry=mscLpDS3ImaLkStatsEntry, mscLpImaCustomerIdentifier=mscLpImaCustomerIdentifier, mscLpImaLkStorageType=mscLpImaLkStorageType, mscLpDS3ImaTestAdminState=mscLpDS3ImaTestAdminState, mscLpImaTestType=mscLpImaTestType, mscLpDS3ImaLkLastOifCause=mscLpDS3ImaLkLastOifCause, mscLpImaStatsEntry=mscLpImaStatsEntry, mscLpDS3ImaIndex=mscLpDS3ImaIndex, mscLpDS3ImaTransmitClockMode=mscLpDS3ImaTransmitClockMode, mscLpDS3ImaRemoteGid=mscLpDS3ImaRemoteGid, mscLpImaTestRowStatusTable=mscLpImaTestRowStatusTable, mscLpImaTestSetupEntry=mscLpImaTestSetupEntry, mscLpImaLkRelativeDelay=mscLpImaLkRelativeDelay, mscLpImaTestResultsTable=mscLpImaTestResultsTable, mscLpDS3ImaLkIcpViolations=mscLpDS3ImaLkIcpViolations, mscLpImaTestBytesTx=mscLpImaTestBytesTx, imaGroupCA02=imaGroupCA02, mscLpDS3ImaTestBitsRx=mscLpDS3ImaTestBitsRx, mscLpImaLkSevErroredSec=mscLpImaLkSevErroredSec, mscLpImaTestBitErrorRate=mscLpImaTestBitErrorRate, mscLpDS3ImaProvTable=mscLpDS3ImaProvTable, mscLpDS3ImaLinkSelectionCriterion=mscLpDS3ImaLinkSelectionCriterion, mscLpImaUsageState=mscLpImaUsageState, mscLpDS3ImaAdminState=mscLpDS3ImaAdminState, mscLpImaRemoteLidsConfig=mscLpImaRemoteLidsConfig, mscLpImaLkRxStuffEvents=mscLpImaLkRxStuffEvents, imaCapabilitiesCA=imaCapabilitiesCA, mscLpImaTestUsageState=mscLpImaTestUsageState, mscLpDS3ImaLkOperTable=mscLpDS3ImaLkOperTable, mscLpDS3ImaTestComponentName=mscLpDS3ImaTestComponentName, mscLpDS3ImaFailureCause=mscLpDS3ImaFailureCause, mscLpDS3ImaRemoteDefect=mscLpDS3ImaRemoteDefect, mscLpDS3ImaLkFailureCause=mscLpDS3ImaLkFailureCause, mscLpDS3ImaLk=mscLpDS3ImaLk, mscLpDS3ImaUnknownStatus=mscLpDS3ImaUnknownStatus, mscLpImaStatsTable=mscLpImaStatsTable, mscLpDS3ImaClockingModeMismatch=mscLpDS3ImaClockingModeMismatch, mscLpDS3ImaLkComponentName=mscLpDS3ImaLkComponentName, mscLpImaReceiveCellUtilization=mscLpImaReceiveCellUtilization, mscLpImaApplicationFramerName=mscLpImaApplicationFramerName, mscLpDS3ImaOperationalState=mscLpDS3ImaOperationalState, mscLpDS3ImaTestBitErrorRate=mscLpDS3ImaTestBitErrorRate, mscLpDS3ImaLkRowStatusTable=mscLpDS3ImaLkRowStatusTable, mscLpDS3ImaReceiveCellUtilization=mscLpDS3ImaReceiveCellUtilization, mscLpImaTestDisplayInterval=mscLpImaTestDisplayInterval, mscLpImaAdminState=mscLpImaAdminState, mscLpImaLkRowStatus=mscLpImaLkRowStatus, imaGroupCA02A=imaGroupCA02A, mscLpDS3ImaLkUnusableSec=mscLpDS3ImaLkUnusableSec, mscLpDS3ImaTestDataStartDelay=mscLpDS3ImaTestDataStartDelay, mscLpImaRowStatus=mscLpImaRowStatus, mscLpImaRemoteDefect=mscLpImaRemoteDefect, mscLpDS3ImaLkStorageType=mscLpDS3ImaLkStorageType, mscLpImaProtocol=mscLpImaProtocol, mscLpDS3ImaComponentName=mscLpDS3ImaComponentName, mscLpDS3ImaLkRxStuffEvents=mscLpDS3ImaLkRxStuffEvents, mscLpImaLkIcpViolations=mscLpImaLkIcpViolations, mscLpImaTestElapsedTime=mscLpImaTestElapsedTime, mscLpDS3ImaTestFrmRx=mscLpDS3ImaTestFrmRx, mscLpImaTestIndex=mscLpImaTestIndex, mscLpImaLkAdminState=mscLpImaLkAdminState, mscLpDS3ImaTestBitsTx=mscLpDS3ImaTestBitsTx, mscLpImaTestCauseOfTermination=mscLpImaTestCauseOfTermination, mscLpImaProceduralStatus=mscLpImaProceduralStatus, mscLpImaLkRowStatusEntry=mscLpImaLkRowStatusEntry, mscLpImaLkLastOifCause=mscLpImaLkLastOifCause, mscLpImaRemoteLidsActive=mscLpImaRemoteLidsActive, mscLpImaTestRowStatus=mscLpImaTestRowStatus, mscLpDS3ImaApplicationFramerName=mscLpDS3ImaApplicationFramerName, mscLpDS3ImaLkUnavailSecs=mscLpDS3ImaLkUnavailSecs, mscLpDS3ImaStandbyStatus=mscLpDS3ImaStandbyStatus, mscLpDS3ImaTestBytesTx=mscLpDS3ImaTestBytesTx, mscLpImaRunningTime=mscLpImaRunningTime, imaGroup=imaGroup, mscLpImaTestFrmTx=mscLpImaTestFrmTx, mscLpImaTransmitCellUtilization=mscLpImaTransmitCellUtilization, mscLpImaUnknownStatus=mscLpImaUnknownStatus, mscLpDS3ImaCellCapacity=mscLpDS3ImaCellCapacity, mscLpDS3ImaLkStandbyStatus=mscLpDS3ImaLkStandbyStatus, mscLpDS3ImaCidDataEntry=mscLpDS3ImaCidDataEntry, mscLpImaTransmitClockMode=mscLpImaTransmitClockMode, mscLpDS3ImaLkOperEntry=mscLpDS3ImaLkOperEntry, mscLpImaOperEntry=mscLpImaOperEntry, mscLpImaTestFrmPatternType=mscLpImaTestFrmPatternType, mscLpImaLkComponentName=mscLpImaLkComponentName, mscLpImaLkFailureCause=mscLpImaLkFailureCause, imaCapabilities=imaCapabilities, mscLpDS3ImaTest=mscLpDS3ImaTest, mscLpDS3ImaTestRowStatusTable=mscLpDS3ImaTestRowStatusTable, mscLpDS3ImaTestDuration=mscLpDS3ImaTestDuration, mscLpImaProvTable=mscLpImaProvTable, mscLpDS3ImaStateTable=mscLpDS3ImaStateTable, mscLpDS3ImaTestIndex=mscLpDS3ImaTestIndex, mscLpImaTestFrmRx=mscLpImaTestFrmRx, mscLpImaClockingModeMismatch=mscLpImaClockingModeMismatch, mscLpDS3ImaLkRemoteDefect=mscLpDS3ImaLkRemoteDefect, mscLpDS3ImaTestResultsEntry=mscLpDS3ImaTestResultsEntry, mscLpDS3ImaProtocol=mscLpDS3ImaProtocol, mscLpImaTestBitsTx=mscLpImaTestBitsTx, mscLpImaTestFrmSize=mscLpImaTestFrmSize, mscLpImaLkUnusableSec=mscLpImaLkUnusableSec, mscLpImaFailureCause=mscLpImaFailureCause, mscLpImaTestDataStartDelay=mscLpImaTestDataStartDelay, mscLpImaUnavailSecs=mscLpImaUnavailSecs, mscLpDS3ImaLkControlStatus=mscLpDS3ImaLkControlStatus, mscLpImaLkStatsEntry=mscLpImaLkStatsEntry, mscLpDS3ImaRowStatus=mscLpDS3ImaRowStatus, mscLpImaLkFarEndSevErroredSec=mscLpImaLkFarEndSevErroredSec, mscLpImaLkRemoteLid=mscLpImaLkRemoteLid, mscLpImaLkTxStuffEvents=mscLpImaLkTxStuffEvents, mscLpImaStorageType=mscLpImaStorageType, mscLpDS3ImaOperTable=mscLpDS3ImaOperTable, mscLpDS3ImaLkRowStatus=mscLpDS3ImaLkRowStatus, mscLpDS3ImaLkFailures=mscLpDS3ImaLkFailures, mscLpDS3ImaLkStateEntry=mscLpDS3ImaLkStateEntry, mscLpDS3ImaFailures=mscLpDS3ImaFailures, mscLpImaProvEntry=mscLpImaProvEntry, mscLpImaCidDataTable=mscLpImaCidDataTable, mscLpImaLkProvEntry=mscLpImaLkProvEntry, mscLpImaLkUsageState=mscLpImaLkUsageState, mscLpDS3ImaTestErroredFrmRx=mscLpDS3ImaTestErroredFrmRx, mscLpImaTestStateTable=mscLpImaTestStateTable, mscLpDS3ImaAvailabilityStatus=mscLpDS3ImaAvailabilityStatus, mscLpDS3Ima=mscLpDS3Ima, mscLpDS3ImaProvEntry=mscLpDS3ImaProvEntry, mscLpDS3ImaStatsEntry=mscLpDS3ImaStatsEntry, mscLpDS3ImaLkIdleCellSec=mscLpDS3ImaLkIdleCellSec, mscLpImaTest=mscLpImaTest, imaGroupCA=imaGroupCA, mscLpImaComponentName=mscLpImaComponentName, mscLpDS3ImaStatsTable=mscLpDS3ImaStatsTable, mscLpImaAvailabilityStatus=mscLpImaAvailabilityStatus, mscLpDS3ImaTestFrmSize=mscLpDS3ImaTestFrmSize, mscLpDS3ImaRunningTime=mscLpDS3ImaRunningTime, mscLpDS3ImaLkProvTable=mscLpDS3ImaLkProvTable, mscLpImaStateTable=mscLpImaStateTable, mscLpImaLkIdleCellSec=mscLpImaLkIdleCellSec, mscLpImaCidDataEntry=mscLpImaCidDataEntry, mscLpImaLkStateTable=mscLpImaLkStateTable, mscLpImaLkRemoteDefect=mscLpImaLkRemoteDefect, mscLpImaLkFailures=mscLpImaLkFailures, mscLpImaLkOperTable=mscLpImaLkOperTable, mscLpImaIndex=mscLpImaIndex, mscLpDS3ImaLkAdminState=mscLpDS3ImaLkAdminState, imaMIB=imaMIB, mscLpImaTestOperationalState=mscLpImaTestOperationalState, mscLpDS3ImaControlStatus=mscLpDS3ImaControlStatus, mscLpDS3ImaTestSetupEntry=mscLpDS3ImaTestSetupEntry, mscLpDS3ImaTestCauseOfTermination=mscLpDS3ImaTestCauseOfTermination, mscLpImaLk=mscLpImaLk, mscLpDS3ImaLinkRetryTimeout=mscLpDS3ImaLinkRetryTimeout, imaCapabilitiesCA02=imaCapabilitiesCA02, mscLpDS3ImaAlarmStatus=mscLpDS3ImaAlarmStatus, mscLpDS3ImaLkRunningTime=mscLpDS3ImaLkRunningTime, mscLpDS3ImaLkRelativeDelay=mscLpDS3ImaLkRelativeDelay, mscLpImaLinkRetryTimeout=mscLpImaLinkRetryTimeout, mscLpDS3ImaProceduralStatus=mscLpDS3ImaProceduralStatus, mscLpDS3ImaLkInterfaceName=mscLpDS3ImaLkInterfaceName, mscLpDS3ImaLkFarEndSevErroredSec=mscLpDS3ImaLkFarEndSevErroredSec, mscLpDS3ImaMaxDiffDelay=mscLpDS3ImaMaxDiffDelay, mscLpDS3ImaLkProceduralStatus=mscLpDS3ImaLkProceduralStatus, mscLpDS3ImaTestDisplayInterval=mscLpDS3ImaTestDisplayInterval, mscLpImaRowStatusTable=mscLpImaRowStatusTable, mscLpImaLkOperationalState=mscLpImaLkOperationalState, mscLpDS3ImaLkUnknownStatus=mscLpDS3ImaLkUnknownStatus, mscLpImaCellCapacity=mscLpImaCellCapacity, mscLpDS3ImaTestStateTable=mscLpDS3ImaTestStateTable, mscLpImaRemoteGid=mscLpImaRemoteGid, mscLpImaLkFarEndUnusableSec=mscLpImaLkFarEndUnusableSec, mscLpDS3ImaTestSetupTable=mscLpDS3ImaTestSetupTable, mscLpDS3ImaUnavailSecs=mscLpDS3ImaUnavailSecs, mscLpDS3ImaLkOperationalState=mscLpDS3ImaLkOperationalState, mscLpDS3ImaTestElapsedTime=mscLpDS3ImaTestElapsedTime, mscLpDS3ImaTestPurpose=mscLpDS3ImaTestPurpose, mscLpImaRowStatusEntry=mscLpImaRowStatusEntry, mscLpDS3ImaTestRowStatus=mscLpDS3ImaTestRowStatus, mscLpImaLkControlStatus=mscLpImaLkControlStatus, mscLpDS3ImaLkStatsTable=mscLpDS3ImaLkStatsTable, mscLpDS3ImaOperEntry=mscLpDS3ImaOperEntry, mscLpDS3ImaLkAlarmStatus=mscLpDS3ImaLkAlarmStatus, mscLpImaMaxDiffDelay=mscLpImaMaxDiffDelay, mscLpImaTestSetupTable=mscLpImaTestSetupTable, mscLpImaTestBitsRx=mscLpImaTestBitsRx, mscLpImaTestDuration=mscLpImaTestDuration, mscLpDS3ImaLkAvailabilityStatus=mscLpDS3ImaLkAvailabilityStatus, mscLpDS3ImaLkFarEndUnusableSec=mscLpDS3ImaLkFarEndUnusableSec, mscLpDS3ImaLkSevErroredSec=mscLpDS3ImaLkSevErroredSec, mscLpImaLkUnavailSecs=mscLpImaLkUnavailSecs, mscLpDS3ImaLkRemoteLid=mscLpDS3ImaLkRemoteLid, mscLpImaTestResultsEntry=mscLpImaTestResultsEntry, mscLpDS3ImaStateEntry=mscLpDS3ImaStateEntry, mscLpDS3ImaTransmitCellUtilization=mscLpDS3ImaTransmitCellUtilization, mscLpDS3ImaTestType=mscLpDS3ImaTestType, mscLpImaOperationalState=mscLpImaOperationalState, mscLpImaLkRowStatusTable=mscLpImaLkRowStatusTable, mscLpImaLinkSelectionCriterion=mscLpImaLinkSelectionCriterion, mscLpImaLkFarEndUnavailSec=mscLpImaLkFarEndUnavailSec, mscLpImaLkAvailabilityStatus=mscLpImaLkAvailabilityStatus, mscLpImaLkStandbyStatus=mscLpImaLkStandbyStatus, mscLpDS3ImaRowStatusTable=mscLpDS3ImaRowStatusTable, mscLpImaTestRowStatusEntry=mscLpImaTestRowStatusEntry, mscLpImaLkIndex=mscLpImaLkIndex, mscLpDS3ImaUsageState=mscLpDS3ImaUsageState, mscLpImaLkProceduralStatus=mscLpImaLkProceduralStatus, mscLpImaOperTable=mscLpImaOperTable, mscLpImaTestBytesRx=mscLpImaTestBytesRx, mscLpImaTestStorageType=mscLpImaTestStorageType, mscLpImaLkAlarmStatus=mscLpImaLkAlarmStatus, mscLpImaLkStateEntry=mscLpImaLkStateEntry, mscLpImaStateEntry=mscLpImaStateEntry, mscLpImaControlStatus=mscLpImaControlStatus, mscLpDS3ImaTestBytesRx=mscLpDS3ImaTestBytesRx, mscLpDS3ImaLkIndex=mscLpDS3ImaLkIndex, mscLpDS3ImaTestStateEntry=mscLpDS3ImaTestStateEntry, mscLpImaTestStateEntry=mscLpImaTestStateEntry, mscLpDS3ImaLkProvEntry=mscLpDS3ImaLkProvEntry, mscLpImaFailures=mscLpImaFailures, mscLpImaStandbyStatus=mscLpImaStandbyStatus, mscLpImaTestAdminState=mscLpImaTestAdminState, mscLpImaTestPurpose=mscLpImaTestPurpose, mscLpImaTestTimeRemaining=mscLpImaTestTimeRemaining, mscLpDS3ImaRemoteLidsActive=mscLpDS3ImaRemoteLidsActive, mscLpDS3ImaTestStorageType=mscLpDS3ImaTestStorageType, mscLpImaTestErroredFrmRx=mscLpImaTestErroredFrmRx, mscLpDS3ImaTestOperationalState=mscLpDS3ImaTestOperationalState, mscLpDS3ImaLkRowStatusEntry=mscLpDS3ImaLkRowStatusEntry, mscLpImaAlarmStatus=mscLpImaAlarmStatus)
