#
# PySNMP MIB module BAY-STACK-VRRP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-VRRP-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ipAdEntAddr, = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Unsigned32, iso, IpAddress, Bits, MibIdentifier, TimeTicks, NotificationType, Counter64, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Unsigned32", "iso", "IpAddress", "Bits", "MibIdentifier", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "MacAddress", "TruthValue")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
vrrpOperVrId, vrrpOperPrimaryIpAddr = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId", "vrrpOperPrimaryIpAddr")
bayStackVrrpExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 11))
bayStackVrrpExtMib.setRevisions(('2005-07-01 00:00', '2012-10-18 00:00',))
if mibBuilder.loadTexts: bayStackVrrpExtMib.setLastUpdated('201210180000Z')
if mibBuilder.loadTexts: bayStackVrrpExtMib.setOrganization('Nortel Networks')
bsveNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 11, 0))
bsveObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 11, 1))
bsveScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 1))
bsveVrrpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpEnabled.setStatus('current')
bsveVrrpPingVirtualAddrEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpPingVirtualAddrEnabled.setStatus('current')
bsveVrrpOperExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2), )
if mibBuilder.loadTexts: bsveVrrpOperExtTable.setStatus('current')
bsveVrrpOperExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: bsveVrrpOperExtEntry.setStatus('current')
bsveVrrpOperExtCriticalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpOperExtCriticalIpAddr.setStatus('current')
bsveVrrpOperExtCriticalIpAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpOperExtCriticalIpAddrEnabled.setStatus('current')
bsveVrrpOperExtHoldDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpOperExtHoldDownTimer.setStatus('current')
bsveVrrpOperExtHoldDownState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dormant", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsveVrrpOperExtHoldDownState.setStatus('current')
bsveVrrpOperExtHoldDownTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsveVrrpOperExtHoldDownTimeRemaining.setStatus('current')
bsveVrrpOperExtAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("preemptHoldDownTimer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpOperExtAction.setStatus('current')
bsveVrrpOperExtBackUpMasterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpOperExtBackUpMasterEnabled.setStatus('current')
bsveVrrpOperExtBackUpMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsveVrrpOperExtBackUpMasterState.setStatus('current')
bsveVrrpOperExtFasterAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpOperExtFasterAdvInterval.setStatus('current')
bsveVrrpOperExtFasterAdvIntervalEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsveVrrpOperExtFasterAdvIntervalEnabled.setStatus('current')
bsveNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 4))
bsveVrrpTrapStateTransitionType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("masterToBackup", 2), ("backupToMaster", 3), ("initializeToMaster", 4), ("masterToInitialize", 5), ("initializeToBackup", 6), ("backupToInitialize", 7), ("backupToBackUpMaster", 8), ("backUpMasterToBackup", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsveVrrpTrapStateTransitionType.setStatus('current')
bsveVrrpTrapStateTransitionCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 11, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 1), ("higherPriorityAdvertizeReceived", 2), ("shutdownReceived", 3), ("vrrpAddrAndPhysicalAddrMatch", 4), ("masterDownInterval", 5), ("preempted", 6), ("criticalIPFail", 7), ("usrConfig", 8), ("syncFromPrimary", 9), ("iPInterfaceDown", 10), ("lowerPrioAdvReceived", 11), ("higherSrcIPEqualPrioAdvReceived", 12), ("lowerSrcIPEqualPrioAdvReceived", 13), ("startVR", 14), ("other", 15), ("reboot", 16)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsveVrrpTrapStateTransitionCause.setStatus('current')
bsveVrrpTrapStateTransition = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 11, 0, 1)).setObjects(("BAY-STACK-VRRP-EXT-MIB", "bsveVrrpTrapStateTransitionType"), ("BAY-STACK-VRRP-EXT-MIB", "bsveVrrpTrapStateTransitionCause"), ("VRRP-MIB", "vrrpOperPrimaryIpAddr"), ("IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: bsveVrrpTrapStateTransition.setStatus('current')
mibBuilder.exportSymbols("BAY-STACK-VRRP-EXT-MIB", bsveVrrpTrapStateTransitionType=bsveVrrpTrapStateTransitionType, bsveVrrpOperExtHoldDownTimer=bsveVrrpOperExtHoldDownTimer, bsveVrrpPingVirtualAddrEnabled=bsveVrrpPingVirtualAddrEnabled, bsveVrrpOperExtEntry=bsveVrrpOperExtEntry, bsveVrrpEnabled=bsveVrrpEnabled, bsveScalars=bsveScalars, bsveVrrpOperExtBackUpMasterEnabled=bsveVrrpOperExtBackUpMasterEnabled, bsveVrrpTrapStateTransition=bsveVrrpTrapStateTransition, bsveVrrpOperExtCriticalIpAddr=bsveVrrpOperExtCriticalIpAddr, bsveVrrpOperExtFasterAdvIntervalEnabled=bsveVrrpOperExtFasterAdvIntervalEnabled, bsveVrrpTrapStateTransitionCause=bsveVrrpTrapStateTransitionCause, PYSNMP_MODULE_ID=bayStackVrrpExtMib, bsveVrrpOperExtFasterAdvInterval=bsveVrrpOperExtFasterAdvInterval, bsveVrrpOperExtHoldDownTimeRemaining=bsveVrrpOperExtHoldDownTimeRemaining, bayStackVrrpExtMib=bayStackVrrpExtMib, bsveVrrpOperExtAction=bsveVrrpOperExtAction, bsveVrrpOperExtHoldDownState=bsveVrrpOperExtHoldDownState, bsveObjects=bsveObjects, bsveVrrpOperExtBackUpMasterState=bsveVrrpOperExtBackUpMasterState, bsveNotificationObjects=bsveNotificationObjects, bsveNotifications=bsveNotifications, bsveVrrpOperExtTable=bsveVrrpOperExtTable, bsveVrrpOperExtCriticalIpAddrEnabled=bsveVrrpOperExtCriticalIpAddrEnabled)
