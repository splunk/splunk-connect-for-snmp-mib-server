#
# PySNMP MIB module HP-ICF-VRRPV3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-VRRPV3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, IpAddress, Unsigned32, Counter64, MibIdentifier, TimeTicks, ObjectIdentity, Bits, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "IpAddress", "Unsigned32", "Counter64", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Bits", "NotificationType", "Counter32")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
vrrpv3OperationsEntry, vrrpv3OperationsInetAddrType, vrrpv3AssociatedIpAddrEntry, vrrpv3OperationsVrId = mibBuilder.importSymbols("VRRPV3-MIB", "vrrpv3OperationsEntry", "vrrpv3OperationsInetAddrType", "vrrpv3AssociatedIpAddrEntry", "vrrpv3OperationsVrId")
hpicfVrrpv3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90))
hpicfVrrpv3MIB.setRevisions(('2015-09-16 00:00', '2012-11-21 00:00', '2012-10-25 00:00',))
if mibBuilder.loadTexts: hpicfVrrpv3MIB.setLastUpdated('201509160000Z')
if mibBuilder.loadTexts: hpicfVrrpv3MIB.setOrganization('HP Networking')
hpicfVrrpv3Operations = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1))
hpicfVrrpv3ErrorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10))
hpicfVrrpv3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2))
hpicfVrrpv3IPv4AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4AdminStatus.setStatus('current')
hpicfVrrpv3IPv6AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6AdminStatus.setStatus('current')
hpicfVrrpv3OperationsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3), )
if mibBuilder.loadTexts: hpicfVrrpv3OperationsTable.setStatus('current')
hpicfVrrpv3OperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1), )
vrrpv3OperationsEntry.registerAugmentions(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3OperationsEntry"))
hpicfVrrpv3OperationsEntry.setIndexNames(*vrrpv3OperationsEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfVrrpv3OperationsEntry.setStatus('current')
hpicfVrrpv3VrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("owner", 1), ("backup", 2), ("uninitialized", 3))).clone('uninitialized')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrMode.setStatus('current')
hpicfVrrpv3VrPreemptDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrPreemptDelayTime.setStatus('current')
hpicfVrrpv3VrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("failback", 1), ("failover", 2), ("failoverWithMonitoring", 3), ("invalid", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrControl.setStatus('current')
hpicfVrrpv3VrRespondToPing = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrRespondToPing.setStatus('current')
hpicfVrrpv3Version = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v2", 2), ("v3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3Version.setStatus('current')
hpicfVrrpv3VrNullAuthCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrNullAuthCompatibility.setStatus('current')
hpicfVrrpv3VrBfdIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 13), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrBfdIPAddr.setStatus('current')
hpicfVrrpv3TrackTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4), )
if mibBuilder.loadTexts: hpicfVrrpv3TrackTable.setStatus('current')
hpicfVrrpv3TrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRPV3-MIB", "vrrpv3OperationsVrId"), (0, "VRRPV3-MIB", "vrrpv3OperationsInetAddrType"), (0, "HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrTrackType"), (0, "HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrTrackEntity"))
if mibBuilder.loadTexts: hpicfVrrpv3TrackEntry.setStatus('current')
hpicfVrrpv3VrTrackType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("trunk", 2), ("vlan", 3))))
if mibBuilder.loadTexts: hpicfVrrpv3VrTrackType.setStatus('current')
hpicfVrrpv3VrTrackEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: hpicfVrrpv3VrTrackEntity.setStatus('current')
hpicfVrrpv3TrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3TrackRowStatus.setStatus('current')
hpicfVrrpv3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 5), )
if mibBuilder.loadTexts: hpicfVrrpv3StatsTable.setStatus('current')
hpicfVrrpv3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 5, 1), )
vrrpv3OperationsEntry.registerAugmentions(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3StatsEntry"))
hpicfVrrpv3StatsEntry.setIndexNames(*vrrpv3OperationsEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfVrrpv3StatsEntry.setStatus('current')
hpicfVrrpv3StatsNearFailovers = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3StatsNearFailovers.setStatus('current')
hpicfVrrpv3RespondToPing = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3RespondToPing.setStatus('current')
hpicfVrrpv3RemoveConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3RemoveConfig.setStatus('current')
hpicfVrrpv3Nonstop = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3Nonstop.setStatus('current')
hpicfVrrpv3NotificationCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3NotificationCntl.setStatus('current')
hpicfVrrpv3IPv4RouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterChecksumErrors.setStatus('current')
hpicfVrrpv3IPv6RouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterChecksumErrors.setStatus('current')
hpicfVrrpv3IPv4RouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterVersionErrors.setStatus('current')
hpicfVrrpv3IPv6RouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterVersionErrors.setStatus('current')
hpicfVrrpv3IPv4RouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterVrIdErrors.setStatus('current')
hpicfVrrpv3IPv6RouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterVrIdErrors.setStatus('current')
hpicfVrrpv3MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 1))
hpicfVrrpv3MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2))
hpicfVrrpv3MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 1, 1)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3OperGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3TrackGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3BfdGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3OperGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3TrackGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3BfdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3MIBCompliance = hpicfVrrpv3MIBCompliance.setStatus('current')
hpicfVrrpv3OperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2, 1)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4AdminStatus"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6AdminStatus"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3Version"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrMode"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrRespondToPing"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrPreemptDelayTime"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrControl"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3StatsNearFailovers"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrNullAuthCompatibility"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3RespondToPing"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3RemoveConfig"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3Nonstop"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3NotificationCntl"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4RouterChecksumErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6RouterChecksumErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4RouterVersionErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6RouterVersionErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4RouterVrIdErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6RouterVrIdErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3OperGroup = hpicfVrrpv3OperGroup.setStatus('current')
hpicfVrrpv3TrackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2, 2)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3TrackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3TrackGroup = hpicfVrrpv3TrackGroup.setStatus('current')
hpicfVrrpv3BfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2, 5)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrBfdIPAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3BfdGroup = hpicfVrrpv3BfdGroup.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-VRRPV3-MIB", hpicfVrrpv3MIB=hpicfVrrpv3MIB, hpicfVrrpv3MIBGroups=hpicfVrrpv3MIBGroups, hpicfVrrpv3IPv4RouterVrIdErrors=hpicfVrrpv3IPv4RouterVrIdErrors, hpicfVrrpv3IPv6RouterVrIdErrors=hpicfVrrpv3IPv6RouterVrIdErrors, hpicfVrrpv3OperGroup=hpicfVrrpv3OperGroup, hpicfVrrpv3IPv6RouterChecksumErrors=hpicfVrrpv3IPv6RouterChecksumErrors, hpicfVrrpv3TrackGroup=hpicfVrrpv3TrackGroup, hpicfVrrpv3IPv6AdminStatus=hpicfVrrpv3IPv6AdminStatus, hpicfVrrpv3StatsTable=hpicfVrrpv3StatsTable, hpicfVrrpv3Conformance=hpicfVrrpv3Conformance, hpicfVrrpv3VrTrackType=hpicfVrrpv3VrTrackType, hpicfVrrpv3IPv4RouterChecksumErrors=hpicfVrrpv3IPv4RouterChecksumErrors, PYSNMP_MODULE_ID=hpicfVrrpv3MIB, hpicfVrrpv3OperationsEntry=hpicfVrrpv3OperationsEntry, hpicfVrrpv3Nonstop=hpicfVrrpv3Nonstop, hpicfVrrpv3TrackEntry=hpicfVrrpv3TrackEntry, hpicfVrrpv3ErrorObjects=hpicfVrrpv3ErrorObjects, hpicfVrrpv3OperationsTable=hpicfVrrpv3OperationsTable, hpicfVrrpv3VrPreemptDelayTime=hpicfVrrpv3VrPreemptDelayTime, hpicfVrrpv3VrTrackEntity=hpicfVrrpv3VrTrackEntity, hpicfVrrpv3IPv4RouterVersionErrors=hpicfVrrpv3IPv4RouterVersionErrors, hpicfVrrpv3MIBCompliances=hpicfVrrpv3MIBCompliances, hpicfVrrpv3TrackTable=hpicfVrrpv3TrackTable, hpicfVrrpv3VrRespondToPing=hpicfVrrpv3VrRespondToPing, hpicfVrrpv3VrBfdIPAddr=hpicfVrrpv3VrBfdIPAddr, hpicfVrrpv3VrControl=hpicfVrrpv3VrControl, hpicfVrrpv3VrMode=hpicfVrrpv3VrMode, hpicfVrrpv3IPv4AdminStatus=hpicfVrrpv3IPv4AdminStatus, hpicfVrrpv3Operations=hpicfVrrpv3Operations, hpicfVrrpv3StatsNearFailovers=hpicfVrrpv3StatsNearFailovers, hpicfVrrpv3RespondToPing=hpicfVrrpv3RespondToPing, hpicfVrrpv3NotificationCntl=hpicfVrrpv3NotificationCntl, hpicfVrrpv3TrackRowStatus=hpicfVrrpv3TrackRowStatus, hpicfVrrpv3IPv6RouterVersionErrors=hpicfVrrpv3IPv6RouterVersionErrors, hpicfVrrpv3VrNullAuthCompatibility=hpicfVrrpv3VrNullAuthCompatibility, hpicfVrrpv3StatsEntry=hpicfVrrpv3StatsEntry, hpicfVrrpv3RemoveConfig=hpicfVrrpv3RemoveConfig, hpicfVrrpv3BfdGroup=hpicfVrrpv3BfdGroup, hpicfVrrpv3MIBCompliance=hpicfVrrpv3MIBCompliance, hpicfVrrpv3Version=hpicfVrrpv3Version)
