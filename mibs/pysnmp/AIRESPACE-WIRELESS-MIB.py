#
# PySNMP MIB module AIRESPACE-WIRELESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIRESPACE-WIRELESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
airespace, = mibBuilder.importSymbols("AIRESPACE-REF-MIB", "airespace")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, ModuleIdentity, TimeTicks, Bits, ObjectIdentity, MibIdentifier, Counter64, Counter32, iso, Unsigned32, Gauge32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "TimeTicks", "Bits", "ObjectIdentity", "MibIdentifier", "Counter64", "Counter32", "iso", "Unsigned32", "Gauge32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TimeInterval, TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeInterval", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
bsnWireless = ModuleIdentity((1, 3, 6, 1, 4, 1, 14179, 2))
bsnWireless.setRevisions(('2011-09-27 00:00', '2010-02-09 00:00', '2006-04-10 00:00', '2005-10-30 00:00',))
if mibBuilder.loadTexts: bsnWireless.setLastUpdated('201109270000Z')
if mibBuilder.loadTexts: bsnWireless.setOrganization('Airespace, Inc.')
bsnEss = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 1))
bsnAP = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 2))
bsnGlobalDot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3))
bsnRrm = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 4))
bsnAAA = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 5))
bsnTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 6))
bsnUtility = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 7))
bsnMobility = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 8))
bsnIpsec = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 9))
bsnWrasGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 50))
bsnWrasCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 51))
class WEPKeytype(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 32)

class ProfileState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("fail", 0), ("pass", 1))

class BsnTxtSignatureMacInfo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("bsnSignatureMacAll", 0), ("bsnSignatureMacIndividual", 1), ("bsnSignatureMacBoth", 2))

class BsnSignaturePatternOffSetStart(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("sigPattStartFrm", 0), ("sigPattStartFrmBody", 1))

bsnDot11EssTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1), )
if mibBuilder.loadTexts: bsnDot11EssTable.setStatus('current')
bsnDot11EssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnDot11EssIndex"))
if mibBuilder.loadTexts: bsnDot11EssEntry.setStatus('current')
bsnDot11EssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 517))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssIndex.setStatus('current')
bsnDot11EssSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssSsid.setStatus('current')
bsnDot11EssSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssSessionTimeout.setStatus('current')
bsnDot11EssMacFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssMacFiltering.setStatus('current')
bsnDot11EssAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssAdminStatus.setStatus('current')
bsnDot11EssSecurityAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 128))).clone(namedValues=NamedValues(("authOpen", 0), ("authSharedKey", 1), ("authCiscoLeap", 128))).clone('authOpen')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnDot11EssSecurityAuthType.setStatus('current')
bsnDot11EssStaticWEPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssStaticWEPSecurity.setStatus('current')
bsnDot11EssStaticWEPEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("wep104", 0), ("wep40", 2), ("wep128", 3), ("notset", 4))).clone('wep104')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssStaticWEPEncryptionType.setStatus('current')
bsnDot11EssStaticWEPDefaultKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 10), WEPKeytype()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssStaticWEPDefaultKey.setStatus('current')
bsnDot11EssStaticWEPKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssStaticWEPKeyIndex.setStatus('current')
bsnDot11EssStaticWEPKeyFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2), ("default", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssStaticWEPKeyFormat.setStatus('current')
bsnDot11Ess8021xSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11Ess8021xSecurity.setStatus('current')
bsnDot11Ess8021xEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("wep104", 0), ("wep40", 2), ("wep128", 3), ("none", 4))).clone('wep104')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11Ess8021xEncryptionType.setStatus('current')
bsnDot11EssWPASecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWPASecurity.setStatus('deprecated')
bsnDot11EssWPAEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 5))).clone(namedValues=NamedValues(("wep104", 0), ("wep40", 2), ("wep128", 3), ("tkipmic", 5))).clone('tkipmic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWPAEncryptionType.setStatus('deprecated')
bsnDot11EssIpsecSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssIpsecSecurity.setStatus('current')
bsnDot11EssVpnEncrTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("tripleDes", 0), ("none", 1), ("des", 2), ("aesCbc", 3), ("aes256Cbc", 4))).clone('tripleDes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnEncrTransform.setStatus('current')
bsnDot11EssVpnAuthTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha1", 0))).clone('hmacSha1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnAuthTransform.setStatus('current')
bsnDot11EssVpnIkeAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("xauthEnablePsk", 0), ("certificate", 2), ("presharedKey", 3))).clone('presharedKey')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnIkeAuthMode.setStatus('current')
bsnDot11EssVpnSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnSharedKey.setStatus('current')
bsnDot11EssVpnSharedKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnDot11EssVpnSharedKeySize.setStatus('current')
bsnDot11EssVpnIkePhase1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("agressive", 0), ("main", 1))).clone('main')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnIkePhase1Mode.setStatus('current')
bsnDot11EssVpnIkeLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 345600)).clone(57600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnIkeLifetime.setStatus('current')
bsnDot11EssVpnIkeDHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 14))).clone(namedValues=NamedValues(("group2", 0), ("group1", 1), ("group5", 4), ("group14", 14))).clone('group2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnIkeDHGroup.setStatus('current')
bsnDot11EssIpsecPassthruSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssIpsecPassthruSecurity.setStatus('deprecated')
bsnDot11EssVpnPassthruGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 28), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnPassthruGateway.setStatus('current')
bsnDot11EssWebSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWebSecurity.setStatus('current')
bsnDot11EssRadioPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 0), ("dot11aOnly", 2), ("dot11bOnly", 1), ("dot11gOnly", 3), ("dot11bgOnly", 4), ("dot11agOnly", 5), ("dot11abOnly", 6))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRadioPolicy.setStatus('current')
bsnDot11EssQualityOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("bronze", 0), ("silver", 1), ("gold", 2), ("platinum", 3))).clone('bronze')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssQualityOfService.setStatus('current')
bsnDot11EssDhcpRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssDhcpRequired.setStatus('current')
bsnDot11EssDhcpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 33), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssDhcpServerIpAddress.setStatus('current')
bsnDot11EssVpnContivityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnContivityMode.setStatus('deprecated')
bsnDot11EssVpnQotdServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 35), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssVpnQotdServerAddress.setStatus('deprecated')
bsnDot11EssBlacklistTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssBlacklistTimeout.setStatus('current')
bsnDot11EssNumberOfMobileStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnDot11EssNumberOfMobileStations.setStatus('current')
bsnDot11EssWebPassthru = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWebPassthru.setStatus('current')
bsnDot11EssCraniteSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssCraniteSecurity.setStatus('current')
bsnDot11EssBlacklistingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssBlacklistingCapability.setStatus('current')
bsnDot11EssInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssInterfaceName.setStatus('current')
bsnDot11EssAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssAclName.setStatus('current')
bsnDot11EssAAAOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssAAAOverride.setStatus('current')
bsnDot11EssWPAAuthKeyMgmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWPAAuthKeyMgmtMode.setStatus('deprecated')
bsnDot11EssWPAAuthPresharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWPAAuthPresharedKey.setStatus('deprecated')
bsnDot11EssWepAllowSharedKeyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWepAllowSharedKeyAuth.setStatus('current')
bsnDot11EssFortressSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssFortressSecurity.setStatus('current')
bsnDot11EssL2tpSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssL2tpSecurity.setStatus('current')
bsnDot11EssWPAAuthPresharedKeyHex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWPAAuthPresharedKeyHex.setStatus('deprecated')
bsnDot11EssBroadcastSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssBroadcastSsid.setStatus('current')
bsnDot11EssExternalPolicyValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssExternalPolicyValidation.setStatus('current')
bsnDot11EssRSNSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRSNSecurity.setStatus('deprecated')
bsnDot11EssRSNWPACompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRSNWPACompatibilityMode.setStatus('deprecated')
bsnDot11EssRSNAllowTKIPClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRSNAllowTKIPClients.setStatus('deprecated')
bsnDot11EssRSNAuthKeyMgmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRSNAuthKeyMgmtMode.setStatus('deprecated')
bsnDot11EssRSNAuthPresharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRSNAuthPresharedKey.setStatus('deprecated')
bsnDot11EssRSNAuthPresharedKeyHex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRSNAuthPresharedKeyHex.setStatus('deprecated')
bsnDot11EssIPv6Bridging = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssIPv6Bridging.setStatus('deprecated')
bsnDot11EssRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 60), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRowStatus.setStatus('current')
bsnDot11EssWmePolicySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("allowed", 1), ("required", 2), ("invalid", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWmePolicySetting.setStatus('current')
bsnDot11Ess80211ePolicySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("allowed", 1), ("required", 2), ("invalid", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11Ess80211ePolicySetting.setStatus('current')
bsnDot11EssWebPassthroughEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssWebPassthroughEmail.setStatus('current')
bsnDot11Ess7920PhoneSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("clientCacLimit", 1), ("apCacLimit", 2), ("both", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11Ess7920PhoneSupport.setStatus('current')
bsnDot11EssRadiusAuthPrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRadiusAuthPrimaryServer.setStatus('current')
bsnDot11EssRadiusAuthSecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 96), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRadiusAuthSecondaryServer.setStatus('current')
bsnDot11EssRadiusAuthTertiaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRadiusAuthTertiaryServer.setStatus('current')
bsnDot11EssRadiusAcctPrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRadiusAcctPrimaryServer.setStatus('current')
bsnDot11EssRadiusAcctSecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRadiusAcctSecondaryServer.setStatus('current')
bsnDot11EssRadiusAcctTertiaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 1, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnDot11EssRadiusAcctTertiaryServer.setStatus('current')
bsnDot11QosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17), )
if mibBuilder.loadTexts: bsnDot11QosProfileTable.setStatus('current')
bsnDot11QosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnDot11QosProfileName"))
if mibBuilder.loadTexts: bsnDot11QosProfileEntry.setStatus('current')
bsnDot11QosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnDot11QosProfileName.setStatus('current')
bsnDot11QosProfileDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11QosProfileDesc.setStatus('current')
bsnDot11QosAverageDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11QosAverageDataRate.setStatus('current')
bsnDot11QosBurstDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11QosBurstDataRate.setStatus('current')
bsnDot11QosAvgRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11QosAvgRealTimeDataRate.setStatus('current')
bsnDot11QosBurstRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11QosBurstRealTimeDataRate.setStatus('current')
bsnDot11QosMaxRFUsagePerAP = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11QosMaxRFUsagePerAP.setStatus('current')
bsnDot11QosProfileQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11QosProfileQueueDepth.setStatus('current')
bsnDot11WiredQosProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("dot1p", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11WiredQosProtocol.setStatus('current')
bsnDot11802Dot1PTag = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11802Dot1PTag.setStatus('current')
bsnDot11ResetProfileToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 17, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("reset", 1), ("default", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11ResetProfileToDefault.setStatus('current')
bsnMobileStationTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4), )
if mibBuilder.loadTexts: bsnMobileStationTable.setStatus('current')
bsnMobileStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddress"))
if mibBuilder.loadTexts: bsnMobileStationEntry.setStatus('current')
bsnMobileStationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationMacAddress.setStatus('current')
bsnMobileStationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationIpAddress.setStatus('current')
bsnMobileStationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationUserName.setStatus('current')
bsnMobileStationAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationAPMacAddr.setStatus('current')
bsnMobileStationAPIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationAPIfSlotId.setStatus('current')
bsnMobileStationEssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationEssIndex.setStatus('current')
bsnMobileStationSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationSsid.setStatus('current')
bsnMobileStationAID = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationAID.setStatus('current')
bsnMobileStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 0), ("aaaPending", 1), ("authenticated", 2), ("associated", 3), ("powersave", 4), ("disassociated", 5), ("tobedeleted", 6), ("probing", 7), ("blacklisted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationStatus.setStatus('current')
bsnMobileStationReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 40, 41, 42, 43, 44, 45, 46, 99, 101, 105, 106, 200, 201, 202, 203))).clone(namedValues=NamedValues(("unspecified", 1), ("previousAuthNotValid", 2), ("deauthenticationLeaving", 3), ("disassociationDueToInactivity", 4), ("disassociationAPBusy", 5), ("class2FrameFromNonAuthStation", 6), ("class2FrameFromNonAssStation", 7), ("disassociationStaHasLeft", 8), ("staReqAssociationWithoutAuth", 9), ("invalidInformationElement", 40), ("groupCipherInvalid", 41), ("unicastCipherInvalid", 42), ("akmpInvalid", 43), ("unsupportedRsnVersion", 44), ("invalidRsnIeCapabilities", 45), ("cipherSuiteRejected", 46), ("missingReasonCode", 99), ("maxAssociatedClientsReached", 101), ("maxAssociatedClientsReachedOnRadio", 105), ("maxAssociatedClientsReachedOnWlan", 106), ("unSpecifiedQosFailure", 200), ("qosPolicyMismatch", 201), ("inSufficientBandwidth", 202), ("inValidQosParams", 203)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationReasonCode.setStatus('current')
bsnMobileStationMobilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unassociated", 0), ("local", 1), ("anchor", 2), ("foreign", 3), ("handoff", 4), ("unknown", 5), ("exportanchor", 6), ("exportforeign", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationMobilityStatus.setStatus('current')
bsnMobileStationAnchorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationAnchorAddress.setStatus('current')
bsnMobileStationCFPollable = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notimplemented", 0), ("implemented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationCFPollable.setStatus('current')
bsnMobileStationCFPollRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notimplemented", 0), ("implemented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationCFPollRequest.setStatus('current')
bsnMobileStationChannelAgilityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notimplemented", 0), ("implemented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationChannelAgilityEnabled.setStatus('current')
bsnMobileStationPBCCOptionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notimplemented", 0), ("implemented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPBCCOptionImplemented.setStatus('current')
bsnMobileStationShortPreambleOptionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notimplemented", 0), ("implemented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationShortPreambleOptionImplemented.setStatus('current')
bsnMobileStationSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationSessionTimeout.setStatus('current')
bsnMobileStationAuthenticationAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 128))).clone(namedValues=NamedValues(("openSystem", 0), ("sharedKey", 1), ("unknown", 2), ("openAndEap", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationAuthenticationAlgorithm.setStatus('current')
bsnMobileStationWepState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationWepState.setStatus('current')
bsnMobileStationPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPortNumber.setStatus('current')
bsnMobileStationDeleteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMobileStationDeleteAction.setStatus('current')
bsnMobileStationPolicyManagerState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPolicyManagerState.setStatus('current')
bsnMobileStationSecurityPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("completed", 0), ("notcompleted", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationSecurityPolicyStatus.setStatus('current')
bsnMobileStationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3), ("unknown", 4), ("mobile", 5), ("dot11n24", 6), ("dot11n5", 7), ("ethernet", 8), ("dot3", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationProtocol.setStatus('current')
bsnMobileStationMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMobileStationMirrorMode.setStatus('current')
bsnMobileStationInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationInterface.setStatus('current')
bsnMobileStationApMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("local", 0), ("monitor", 1), ("remote", 2), ("roguedetector", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationApMode.setStatus('current')
bsnMobileStationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationVlanId.setStatus('current')
bsnMobileStationPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dot1x", 0), ("wpa1", 1), ("wpa2", 2), ("wpa2vff", 3), ("notavailable", 4), ("unknown", 5), ("wapi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPolicyType.setStatus('current')
bsnMobileStationEncryptionCypher = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ccmpAes", 0), ("tkipMic", 1), ("wep40", 2), ("wep104", 3), ("wep128", 4), ("none", 5), ("notavailable", 6), ("unknown", 7), ("wapiSMS4", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationEncryptionCypher.setStatus('current')
bsnMobileStationEapType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("eapTls", 0), ("ttls", 1), ("peap", 2), ("leap", 3), ("speke", 4), ("eapFast", 5), ("notavailable", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationEapType.setStatus('current')
bsnMobileStationCcxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 0), ("ccxv1", 1), ("ccxv2", 2), ("ccxv3", 3), ("ccxv4", 4), ("ccxv5", 5), ("ccxv6", 6))).clone('notSupported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationCcxVersion.setStatus('current')
bsnMobileStationE2eVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("e2ev1", 1), ("e2ev2", 2))).clone('notSupported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationE2eVersion.setStatus('current')
bsnMobileStationStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationStatusCode.setStatus('current')
bsnMobileStationByIpTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 10), )
if mibBuilder.loadTexts: bsnMobileStationByIpTable.setStatus('current')
bsnMobileStationByIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 10, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationByIpAddress"))
if mibBuilder.loadTexts: bsnMobileStationByIpEntry.setStatus('current')
bsnMobileStationByIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationByIpAddress.setStatus('current')
bsnMobileStationByIpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationByIpMacAddress.setStatus('current')
bsnMobileStationByUsernameTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 13), )
if mibBuilder.loadTexts: bsnMobileStationByUsernameTable.setStatus('current')
bsnMobileStationByUsernameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 13, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationByUserName"), (0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationByUserMacAddress"))
if mibBuilder.loadTexts: bsnMobileStationByUsernameEntry.setStatus('current')
bsnMobileStationByUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationByUserName.setStatus('current')
bsnMobileStationByUserMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 13, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationByUserMacAddress.setStatus('current')
bsnMobileStationPerRadioPerVapTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 5), )
if mibBuilder.loadTexts: bsnMobileStationPerRadioPerVapTable.setStatus('current')
bsnMobileStationPerRadioPerVapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 5, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnDot11EssIndex"), (0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationPerRadioPerVapIndex"))
if mibBuilder.loadTexts: bsnMobileStationPerRadioPerVapEntry.setStatus('current')
bsnMobileStationPerRadioPerVapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPerRadioPerVapIndex.setStatus('current')
bsnMobileStationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 5, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationMacAddr.setStatus('current')
bsnMobileStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6), )
if mibBuilder.loadTexts: bsnMobileStationStatsTable.setStatus('current')
bsnMobileStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddress"))
if mibBuilder.loadTexts: bsnMobileStationStatsEntry.setStatus('current')
bsnMobileStationRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationRSSI.setStatus('current')
bsnMobileStationBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationBytesReceived.setStatus('current')
bsnMobileStationBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationBytesSent.setStatus('current')
bsnMobileStationPolicyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPolicyErrors.setStatus('current')
bsnMobileStationPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPacketsReceived.setStatus('current')
bsnMobileStationPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationPacketsSent.setStatus('current')
bsnMobileStationSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationSnr.setStatus('current')
bsnMobileStationExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 21), )
if mibBuilder.loadTexts: bsnMobileStationExtStatsTable.setStatus('obsolete')
bsnMobileStationExtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 21, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddress"))
if mibBuilder.loadTexts: bsnMobileStationExtStatsEntry.setStatus('obsolete')
bsnMobileStationSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationSampleTime.setStatus('obsolete')
bsnMobileStationTxExcessiveRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 21, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationTxExcessiveRetries.setStatus('obsolete')
bsnMobileStationTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 21, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationTxRetries.setStatus('obsolete')
bsnMobileStationTxFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 21, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationTxFiltered.setStatus('obsolete')
bsnMobileStationRssiDataTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11), )
if mibBuilder.loadTexts: bsnMobileStationRssiDataTable.setStatus('current')
bsnMobileStationRssiDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApMacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaIndex"))
if mibBuilder.loadTexts: bsnMobileStationRssiDataEntry.setStatus('current')
bsnMobileStationRssiDataApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationRssiDataApMacAddress.setStatus('current')
bsnMobileStationRssiDataApIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationRssiDataApIfSlotId.setStatus('current')
bsnMobileStationRssiDataApIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11bg", 1), ("dot11a", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationRssiDataApIfType.setStatus('current')
bsnMobileStationRssiDataApName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationRssiDataApName.setStatus('current')
bsnMobileStationRssiData = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationRssiData.setStatus('current')
bsnAPIfPhyAntennaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfPhyAntennaIndex.setStatus('current')
bsnMobileStationRssiDataLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMobileStationRssiDataLastHeard.setStatus('current')
bsnTagTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 18), )
if mibBuilder.loadTexts: bsnTagTable.setStatus('current')
bsnTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 18, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnTagDot11MacAddress"))
if mibBuilder.loadTexts: bsnTagEntry.setStatus('current')
bsnTagDot11MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 18, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagDot11MacAddress.setStatus('current')
bsnTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("unknown", 0), ("type1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagType.setStatus('current')
bsnTagTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 18, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagTimeInterval.setStatus('current')
bsnTagBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("low", 1), ("normal", 2), ("medium", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagBatteryStatus.setStatus('current')
bsnTagLastReported = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 18, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagLastReported.setStatus('current')
bsnTagStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 20), )
if mibBuilder.loadTexts: bsnTagStatsTable.setStatus('current')
bsnTagStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 20, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnTagDot11MacAddress"))
if mibBuilder.loadTexts: bsnTagStatsEntry.setStatus('current')
bsnTagBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagBytesReceived.setStatus('current')
bsnTagPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 20, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagPacketsReceived.setStatus('current')
bsnTagRssiDataTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19), )
if mibBuilder.loadTexts: bsnTagRssiDataTable.setStatus('current')
bsnTagRssiDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnTagDot11MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApMacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApIfSlotId"))
if mibBuilder.loadTexts: bsnTagRssiDataEntry.setStatus('current')
bsnTagRssiDataApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagRssiDataApMacAddress.setStatus('current')
bsnTagRssiDataApIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagRssiDataApIfSlotId.setStatus('current')
bsnTagRssiDataApIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2), ("uwb", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagRssiDataApIfType.setStatus('current')
bsnTagRssiDataApName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagRssiDataApName.setStatus('current')
bsnTagRssiDataLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagRssiDataLastHeard.setStatus('current')
bsnTagRssiData = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagRssiData.setStatus('current')
bsnTagRssiDataSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 19, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTagRssiDataSnr.setStatus('current')
bsnWatchListClientTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 12), )
if mibBuilder.loadTexts: bsnWatchListClientTable.setStatus('obsolete')
bsnWatchListClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 12, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnWatchListClientKey"), (0, "AIRESPACE-WIRELESS-MIB", "bsnWatchListClientType"))
if mibBuilder.loadTexts: bsnWatchListClientEntry.setStatus('obsolete')
bsnWatchListClientKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnWatchListClientKey.setStatus('obsolete')
bsnWatchListClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("byMac", 1), ("byUserName", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnWatchListClientType.setStatus('obsolete')
bsnWatchListClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 12, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnWatchListClientRowStatus.setStatus('obsolete')
bsnRogueAPTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7), )
if mibBuilder.loadTexts: bsnRogueAPTable.setStatus('current')
bsnRogueAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"))
if mibBuilder.loadTexts: bsnRogueAPEntry.setStatus('current')
bsnRogueAPDot11MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRogueAPDot11MacAddress.setStatus('current')
bsnRogueAPTotalDetectingAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPTotalDetectingAPs.setStatus('current')
bsnRogueAPFirstReported = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPFirstReported.setStatus('current')
bsnRogueAPLastReported = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPLastReported.setStatus('current')
bsnRogueAPContainmentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unassigned", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRogueAPContainmentLevel.setStatus('current')
bsnRogueAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ap", 0), ("adhoc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPType.setStatus('current')
bsnRogueAPOnNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPOnNetwork.setStatus('current')
bsnRogueAPTotalClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPTotalClients.setStatus('current')
bsnRogueAPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRogueAPRowStatus.setStatus('current')
bsnRogueAPMaxDetectedRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPMaxDetectedRSSI.setStatus('current')
bsnRogueAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPSSID.setStatus('current')
bsnRogueAPDetectingAPRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 12), Bits().clone(namedValues=NamedValues(("dot11b", 0), ("dot11a", 1), ("dot11g", 2), ("dot11n24", 3), ("dot11n5", 4), ("dot11abgn", 5), ("dot11ac", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPDetectingAPRadioType.setStatus('current')
bsnRogueAPDetectingAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPDetectingAPMacAddress.setStatus('current')
bsnRogueAPMaxRssiRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2), ("dot11abgn", 3), ("uwb", 4), ("dot11g", 5), ("dot11n24", 6), ("dot11n5", 7), ("dot11ac", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPMaxRssiRadioType.setStatus('current')
bsnRogueAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initializing", 0), ("pending", 1), ("alert", 2), ("detectedLrad", 3), ("known", 4), ("acknowledge", 5), ("contained", 6), ("threat", 7), ("containedPending", 8), ("knownContained", 9), ("trustedMissing", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRogueAPState.setStatus('current')
bsnRogueAPClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pending", 0), ("friendly", 1), ("malicious", 2), ("unclassified", 3), ("custom", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRogueAPClassType.setStatus('current')
bsnRogueAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPChannel.setStatus('current')
bsnRogueAPDetectingAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 7, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRogueAPDetectingAPName.setStatus('current')
bsnRogueAPAirespaceAPTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8), )
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPTable.setStatus('current')
bsnRogueAPAirespaceAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPMacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSlotId"))
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPEntry.setStatus('current')
bsnRogueAPAirespaceAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPMacAddress.setStatus('current')
bsnRogueAPAirespaceAPSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPSlotId.setStatus('current')
bsnRogueAPRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2), ("dot11abgn", 3), ("uwb", 4), ("dot11g", 5), ("dot11n24", 6), ("dot11n5", 7), ("unknown", 8), ("dot11ac", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPRadioType.setStatus('current')
bsnRogueAPAirespaceAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPName.setStatus('current')
bsnRogueAPChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPChannelNumber.setStatus('current')
bsnRogueAPSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPSsid.setStatus('current')
bsnRogueAPAirespaceAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPRSSI.setStatus('current')
bsnRogueAPContainmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 99))).clone(namedValues=NamedValues(("invalid", 0), ("deauthBroadcast", 1), ("cfp", 2), ("max", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPContainmentMode.setStatus('current')
bsnRogueAPContainmentChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPContainmentChannelCount.setStatus('current')
bsnRogueAPContainmentChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPContainmentChannels.setStatus('current')
bsnRogueAPAirespaceAPLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPLastHeard.setStatus('current')
bsnRogueAPAirespaceAPWepMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPWepMode.setStatus('current')
bsnRogueAPAirespaceAPPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("long", 0), ("short", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPPreamble.setStatus('current')
bsnRogueAPAirespaceAPWpaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPWpaMode.setStatus('current')
bsnRogueAPAirespaceAPSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPAirespaceAPSNR.setStatus('current')
bsnRogueAPChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("aboveforty", 4), ("belowforty", 5), ("abovefortyAndEighty", 6), ("abovefortyBelowEighty", 7), ("aboveEightyBelowforty", 8), ("belowfortyBelowEighty", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPChannelWidth.setStatus('current')
bsnRogueClientPerRogueAPTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 16), )
if mibBuilder.loadTexts: bsnRogueClientPerRogueAPTable.setStatus('current')
bsnRogueClientPerRogueAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 16, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddr"), (0, "AIRESPACE-WIRELESS-MIB", "bsnRogueClientDot11MacAddr"))
if mibBuilder.loadTexts: bsnRogueClientPerRogueAPEntry.setStatus('current')
bsnRogueAPDot11MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 16, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueAPDot11MacAddr.setStatus('current')
bsnRogueClientDot11MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 16, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientDot11MacAddr.setStatus('current')
bsnRogueClientTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14), )
if mibBuilder.loadTexts: bsnRogueClientTable.setStatus('current')
bsnRogueClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRogueClientDot11MacAddress"))
if mibBuilder.loadTexts: bsnRogueClientEntry.setStatus('current')
bsnRogueClientDot11MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 1), MacAddress())
if mibBuilder.loadTexts: bsnRogueClientDot11MacAddress.setStatus('current')
bsnRogueClientTotalDetectingAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientTotalDetectingAPs.setStatus('current')
bsnRogueClientFirstReported = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientFirstReported.setStatus('current')
bsnRogueClientLastReported = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientLastReported.setStatus('current')
bsnRogueClientBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientBSSID.setStatus('current')
bsnRogueClientContainmentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unassigned", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRogueClientContainmentLevel.setStatus('current')
bsnRogueClientLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientLastHeard.setStatus('current')
bsnRogueClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 14, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 0), ("pending", 1), ("alert", 2), ("contained", 6), ("threat", 7), ("containedpending", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRogueClientState.setStatus('current')
bsnRogueClientAirespaceAPTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15), )
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPTable.setStatus('current')
bsnRogueClientAirespaceAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRogueClientDot11MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPMacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPSlotId"))
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPEntry.setStatus('current')
bsnRogueClientAirespaceAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPMacAddress.setStatus('current')
bsnRogueClientAirespaceAPSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPSlotId.setStatus('current')
bsnRogueClientRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientRadioType.setStatus('current')
bsnRogueClientAirespaceAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPName.setStatus('current')
bsnRogueClientChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientChannelNumber.setStatus('current')
bsnRogueClientAirespaceAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPRSSI.setStatus('current')
bsnRogueClientAirespaceAPLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPLastHeard.setStatus('current')
bsnRogueClientAirespaceAPSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 15, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRogueClientAirespaceAPSNR.setStatus('current')
bsnThirdPartyAPTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9), )
if mibBuilder.loadTexts: bsnThirdPartyAPTable.setStatus('obsolete')
bsnThirdPartyAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnThirdPartyAPMacAddress"))
if mibBuilder.loadTexts: bsnThirdPartyAPEntry.setStatus('obsolete')
bsnThirdPartyAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnThirdPartyAPMacAddress.setStatus('obsolete')
bsnThirdPartyAPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnThirdPartyAPInterface.setStatus('obsolete')
bsnThirdPartyAPIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnThirdPartyAPIpAddress.setStatus('obsolete')
bsnThirdPartyAP802Dot1XRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnThirdPartyAP802Dot1XRequired.setStatus('obsolete')
bsnThirdPartyAPMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnThirdPartyAPMirrorMode.setStatus('obsolete')
bsnThirdPartyAPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 1, 9, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnThirdPartyAPRowStatus.setStatus('obsolete')
bsnAPTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1), )
if mibBuilder.loadTexts: bsnAPTable.setStatus('current')
bsnAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"))
if mibBuilder.loadTexts: bsnAPEntry.setStatus('current')
bsnAPDot3MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPDot3MacAddress.setStatus('current')
bsnAPNumOfSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPNumOfSlots.setStatus('current')
bsnAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPName.setStatus('current')
bsnAPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPLocation.setStatus('current')
bsnAPMonitorOnlyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 0), ("monitor", 1), ("remote", 2), ("roguedetector", 3), ("sniffer", 4), ("bridge", 5), ("seConnect", 6), ("remoteBridge", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPMonitorOnlyMode.setStatus('current')
bsnAPOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("disassociating", 2), ("downloading", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPOperationStatus.setStatus('current')
bsnAPSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPSoftwareVersion.setStatus('current')
bsnAPBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPBootVersion.setStatus('current')
bsnAPPrimaryMwarName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPPrimaryMwarName.setStatus('current')
bsnAPReset = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("reset", 1), ("default", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPReset.setStatus('current')
bsnAPStatsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPStatsTimer.setStatus('current')
bsnAPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPPortNumber.setStatus('deprecated')
bsnAPModel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPModel.setStatus('current')
bsnAPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPSerialNumber.setStatus('current')
bsnAPClearConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("clearAll", 2), ("clear", 1), ("default", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPClearConfig.setStatus('current')
bsnApIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnApIpAddress.setStatus('current')
bsnAPMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPMirrorMode.setStatus('current')
bsnAPRemoteModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPRemoteModeSupport.setStatus('current')
bsnAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("ap1000", 1), ("ap1030", 2), ("mimo", 3), ("unknown", 4), ("ap1100", 5), ("ap1130", 6), ("ap1240", 7), ("ap1200", 8), ("ap1310", 9), ("ap1500", 10), ("ap1250", 11), ("ap1505", 12), ("ap3201", 13), ("ap1520", 14), ("ap800", 15), ("ap1140", 16), ("ap800agn", 17), ("ap3500i", 18), ("ap3500e", 19), ("ap1260", 20), ("ap1040", 21), ("ap1550", 22), ("ap602i", 23), ("ap3500p", 24), ("ap802gn", 25), ("ap802agn", 26), ("ap3600i", 27), ("ap3600e", 28), ("ap2600i", 29), ("ap2600e", 30), ("ap802hagn", 31), ("ap1600i", 32), ("ap1600e", 33), ("ap702e", 34), ("ap702i", 35), ("ap3600p", 36), ("ap1530i", 37), ("ap1530e", 38), ("ap3700e", 39), ("ap3700i", 40), ("ap3700p", 41), ("ap2700e", 42), ("ap2700i", 43), ("ap702w", 44), ("wap2600i", 45), ("wap2600e", 46), ("wap1600i", 47), ("wap1600e", 48), ("wap702i", 49), ("wap702e", 50), ("ap1700i", 51), ("ap1700e", 52), ("ap1570e", 53), ("ap1570i", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPType.setStatus('current')
bsnAPSecondaryMwarName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPSecondaryMwarName.setStatus('current')
bsnAPTertiaryMwarName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPTertiaryMwarName.setStatus('current')
bsnAPIsStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIsStaticIP.setStatus('current')
bsnAPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPNetmask.setStatus('current')
bsnAPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPGateway.setStatus('current')
bsnAPStaticIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPStaticIPAddress.setStatus('current')
bsnAPBridgingSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPBridgingSupport.setStatus('current')
bsnAPGroupVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPGroupVlanName.setStatus('current')
bsnAPIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIOSVersion.setStatus('current')
bsnAPCertificateType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("manufactureinstalled", 1), ("selfsigned", 2), ("localsignificance", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPCertificateType.setStatus('current')
bsnAPEthernetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 33), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPEthernetMacAddress.setStatus('current')
bsnAPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPAdminStatus.setStatus('deprecated')
bsnAPIfTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2), )
if mibBuilder.loadTexts: bsnAPIfTable.setStatus('current')
bsnAPIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfEntry.setStatus('current')
bsnAPIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfSlotId.setStatus('current')
bsnAPIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2), ("dot11abgn", 3), ("uwb", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfType.setStatus('current')
bsnAPIfPhyChannelAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("customized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPhyChannelAssignment.setStatus('current')
bsnAPIfPhyChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 25, 26, 34, 36, 38, 40, 42, 44, 46, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165, 169, 173))).clone(namedValues=NamedValues(("ch1", 1), ("ch2", 2), ("ch3", 3), ("ch4", 4), ("ch5", 5), ("ch6", 6), ("ch7", 7), ("ch8", 8), ("ch9", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12), ("ch13", 13), ("ch14", 14), ("ch20", 20), ("ch21", 21), ("ch22", 22), ("ch23", 23), ("ch24", 24), ("ch25", 25), ("ch26", 26), ("ch34", 34), ("ch36", 36), ("ch38", 38), ("ch40", 40), ("ch42", 42), ("ch44", 44), ("ch46", 46), ("ch48", 48), ("ch52", 52), ("ch56", 56), ("ch60", 60), ("ch64", 64), ("ch100", 100), ("ch104", 104), ("ch108", 108), ("ch112", 112), ("ch116", 116), ("ch120", 120), ("ch124", 124), ("ch128", 128), ("ch132", 132), ("ch136", 136), ("ch140", 140), ("ch149", 149), ("ch153", 153), ("ch157", 157), ("ch161", 161), ("ch165", 165), ("ch169", 169), ("ch173", 173)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPhyChannelNumber.setStatus('current')
bsnAPIfPhyTxPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("customized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPhyTxPowerControl.setStatus('current')
bsnAPIfPhyTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPhyTxPowerLevel.setStatus('current')
bsnAPIfPhyAntennaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("sectorA", 1), ("sectorB", 2), ("omni", 3), ("notapplicable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPhyAntennaMode.setStatus('current')
bsnAPIfPhyAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPhyAntennaType.setStatus('current')
bsnAPIfPhyAntennaDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("connectorA", 0), ("connectorB", 1), ("enabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPhyAntennaDiversity.setStatus('current')
bsnAPIfCellSiteConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfCellSiteConfigId.setStatus('current')
bsnAPIfNumberOfVaps = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfNumberOfVaps.setStatus('current')
bsnAPIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfOperStatus.setStatus('current')
bsnAPIfPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfPortNumber.setStatus('current')
bsnAPIfPhyAntennaOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("internalAndExternal", 0), ("internal", 1), ("siacAp", 2), ("external", 3), ("ext11bInt11a", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfPhyAntennaOptions.setStatus('current')
bsnApIfNoOfUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnApIfNoOfUsers.setStatus('current')
bsnAPIfWlanOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfWlanOverride.setStatus('current')
bsnAPIfPacketsSniffingFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfPacketsSniffingFeature.setStatus('current')
bsnAPIfSniffChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 25, 26, 34, 36, 38, 40, 42, 44, 46, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165, 169, 173))).clone(namedValues=NamedValues(("ch0", 0), ("ch1", 1), ("ch2", 2), ("ch3", 3), ("ch4", 4), ("ch5", 5), ("ch6", 6), ("ch7", 7), ("ch8", 8), ("ch9", 9), ("ch10", 10), ("ch11", 11), ("ch12", 12), ("ch13", 13), ("ch14", 14), ("ch20", 20), ("ch21", 21), ("ch22", 22), ("ch23", 23), ("ch24", 24), ("ch25", 25), ("ch26", 26), ("ch34", 34), ("ch36", 36), ("ch38", 38), ("ch40", 40), ("ch42", 42), ("ch44", 44), ("ch46", 46), ("ch48", 48), ("ch52", 52), ("ch56", 56), ("ch60", 60), ("ch64", 64), ("ch100", 100), ("ch104", 104), ("ch108", 108), ("ch112", 112), ("ch116", 116), ("ch120", 120), ("ch124", 124), ("ch128", 128), ("ch132", 132), ("ch136", 136), ("ch140", 140), ("ch149", 149), ("ch153", 153), ("ch157", 157), ("ch161", 161), ("ch165", 165), ("ch169", 169), ("ch173", 173)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfSniffChannel.setStatus('current')
bsnAPIfSniffServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfSniffServerIPAddress.setStatus('current')
bsnAPIfAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfAntennaGain.setStatus('current')
bsnAPIfChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfChannelList.setStatus('current')
bsnAPIfAbsolutePowerList = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfAbsolutePowerList.setStatus('current')
bsnAPIfRegulatoryDomainSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRegulatoryDomainSupport.setStatus('current')
bsnAPIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disable", 2), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfAdminStatus.setStatus('deprecated')
bsnAPIfWlanOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 21), )
if mibBuilder.loadTexts: bsnAPIfWlanOverrideTable.setStatus('current')
bsnAPIfWlanOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 21, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverrideId"))
if mibBuilder.loadTexts: bsnAPIfWlanOverrideEntry.setStatus('current')
bsnAPIfWlanOverrideId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPIfWlanOverrideId.setStatus('current')
bsnAPIfWlanOverrideSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 21, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfWlanOverrideSsid.setStatus('current')
bsnAPIfWlanOverrideRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 21, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPIfWlanOverrideRowStatus.setStatus('current')
bsnAPIfSmtParamTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3), )
if mibBuilder.loadTexts: bsnAPIfSmtParamTable.setStatus('current')
bsnAPIfSmtParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfSmtParamEntry.setStatus('current')
bsnAPIfDot11BeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11BeaconPeriod.setStatus('current')
bsnAPIfDot11MediumOccupancyLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MediumOccupancyLimit.setStatus('current')
bsnAPIfDot11CFPPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11CFPPeriod.setStatus('current')
bsnAPIfDot11CFPMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11CFPMaxDuration.setStatus('current')
bsnAPIfDot11OperationalRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11OperationalRateSet.setStatus('current')
bsnAPIfDot11DTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11DTIMPeriod.setStatus('current')
bsnAPIfDot11MultiDomainCapabilityImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notimplemented", 0), ("implemented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MultiDomainCapabilityImplemented.setStatus('current')
bsnAPIfDot11MultiDomainCapabilityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MultiDomainCapabilityEnabled.setStatus('current')
bsnAPIfDot11CountryString = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11CountryString.setStatus('current')
bsnAPIfDot11SmtParamsConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("automatic", 0), ("customized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11SmtParamsConfigType.setStatus('current')
bsnAPIfDot11BSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 3, 1, 30), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11BSSID.setStatus('current')
bsnAPIfMultiDomainCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 4), )
if mibBuilder.loadTexts: bsnAPIfMultiDomainCapabilityTable.setStatus('current')
bsnAPIfMultiDomainCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 4, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfMultiDomainCapabilityEntry.setStatus('current')
bsnAPIfDot11MaximumTransmitPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MaximumTransmitPowerLevel.setStatus('current')
bsnAPIfDot11FirstChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11FirstChannelNumber.setStatus('current')
bsnAPIfDot11NumberofChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11NumberofChannels.setStatus('current')
bsnAPIfMacOperationParamTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5), )
if mibBuilder.loadTexts: bsnAPIfMacOperationParamTable.setStatus('current')
bsnAPIfMacOperationParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfMacOperationParamEntry.setStatus('current')
bsnAPIfDot11MacRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MacRTSThreshold.setStatus('current')
bsnAPIfDot11MacShortRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MacShortRetryLimit.setStatus('current')
bsnAPIfDot11MacLongRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MacLongRetryLimit.setStatus('current')
bsnAPIfDot11MacFragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MacFragmentationThreshold.setStatus('current')
bsnAPIfDot11MacMaxTransmitMSDULifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MacMaxTransmitMSDULifetime.setStatus('current')
bsnAPIfDot11MacParamsConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("automatic", 0), ("customized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MacParamsConfigType.setStatus('current')
bsnAPIfDot11MacMaxReceiveLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MacMaxReceiveLifetime.setStatus('current')
bsnAPIfDot11CountersTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6), )
if mibBuilder.loadTexts: bsnAPIfDot11CountersTable.setStatus('current')
bsnAPIfDot11CountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfDot11CountersEntry.setStatus('current')
bsnAPIfDot11TransmittedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TransmittedFragmentCount.setStatus('current')
bsnAPIfDot11MulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MulticastTransmittedFrameCount.setStatus('current')
bsnAPIfDot11RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11RetryCount.setStatus('current')
bsnAPIfDot11MultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MultipleRetryCount.setStatus('current')
bsnAPIfDot11FrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11FrameDuplicateCount.setStatus('current')
bsnAPIfDot11RTSSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11RTSSuccessCount.setStatus('current')
bsnAPIfDot11RTSFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11RTSFailureCount.setStatus('current')
bsnAPIfDot11ACKFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11ACKFailureCount.setStatus('current')
bsnAPIfDot11ReceivedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11ReceivedFragmentCount.setStatus('current')
bsnAPIfDot11MulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11MulticastReceivedFrameCount.setStatus('current')
bsnAPIfDot11FCSErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11FCSErrorCount.setStatus('current')
bsnAPIfDot11TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TransmittedFrameCount.setStatus('current')
bsnAPIfDot11WEPUndecryptableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11WEPUndecryptableCount.setStatus('current')
bsnAPIfDot11FailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11FailedCount.setStatus('current')
bsnAPIfDot11PhyTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8), )
if mibBuilder.loadTexts: bsnAPIfDot11PhyTxPowerTable.setStatus('deprecated')
bsnAPIfDot11PhyTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfDot11PhyTxPowerEntry.setStatus('deprecated')
bsnAPIfDot11NumberSupportedPowerLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11NumberSupportedPowerLevels.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel1.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel2.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel3.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel4.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel5.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel6.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel7.setStatus('deprecated')
bsnAPIfDot11TxPowerLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 8, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TxPowerLevel8.setStatus('deprecated')
bsnAPIfDot11PhyChannelTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 9), )
if mibBuilder.loadTexts: bsnAPIfDot11PhyChannelTable.setStatus('current')
bsnAPIfDot11PhyChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 9, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfDot11PhyChannelEntry.setStatus('current')
bsnAPIfDot11CurrentCCAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("edonly", 1), ("csonly", 2), ("edandcs", 4), ("cswithtimer", 8), ("hrcsanded", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11CurrentCCAMode.setStatus('current')
bsnAPIfDot11EDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11EDThreshold.setStatus('current')
bsnAPIfDot11TIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 9, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDot11TIThreshold.setStatus('current')
bsnAPIfProfileThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12), )
if mibBuilder.loadTexts: bsnAPIfProfileThresholdConfigTable.setStatus('current')
bsnAPIfProfileThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfProfileThresholdConfigEntry.setStatus('current')
bsnAPIfProfileParamAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("customized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfProfileParamAssignment.setStatus('current')
bsnAPIfForeignInterferenceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfForeignInterferenceThreshold.setStatus('current')
bsnAPIfForeignNoiseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfForeignNoiseThreshold.setStatus('current')
bsnAPIfRFUtilizationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfRFUtilizationThreshold.setStatus('current')
bsnAPIfThroughputThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfThroughputThreshold.setStatus('current')
bsnAPIfMobilesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfMobilesThreshold.setStatus('current')
bsnAPIfCoverageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfCoverageThreshold.setStatus('current')
bsnAPIfMobileMinExceptionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfMobileMinExceptionLevel.setStatus('current')
bsnAPIfCoverageExceptionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 12, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPIfCoverageExceptionLevel.setStatus('current')
bsnAPIfLoadParametersTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 13), )
if mibBuilder.loadTexts: bsnAPIfLoadParametersTable.setStatus('current')
bsnAPIfLoadParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 13, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfLoadParametersEntry.setStatus('current')
bsnAPIfLoadRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfLoadRxUtilization.setStatus('current')
bsnAPIfLoadTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfLoadTxUtilization.setStatus('current')
bsnAPIfLoadChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfLoadChannelUtilization.setStatus('current')
bsnAPIfLoadNumOfClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfLoadNumOfClients.setStatus('current')
bsnAPIfPoorSNRClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 13, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfPoorSNRClients.setStatus('current')
bsnAPIfChannelInterferenceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 14), )
if mibBuilder.loadTexts: bsnAPIfChannelInterferenceInfoTable.setStatus('current')
bsnAPIfChannelInterferenceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 14, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferenceChannelNo"))
if mibBuilder.loadTexts: bsnAPIfChannelInterferenceInfoEntry.setStatus('current')
bsnAPIfInterferenceChannelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfInterferenceChannelNo.setStatus('current')
bsnAPIfInterferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfInterferencePower.setStatus('current')
bsnAPIfInterferenceUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 14, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfInterferenceUtilization.setStatus('current')
bsnAPIfRadarChannelStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 24), )
if mibBuilder.loadTexts: bsnAPIfRadarChannelStatisticsTable.setStatus('current')
bsnAPIfRadarChannelStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 24, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfRadarDetectedChannelNumber"))
if mibBuilder.loadTexts: bsnAPIfRadarChannelStatisticsEntry.setStatus('current')
bsnAPIfRadarDetectedChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRadarDetectedChannelNumber.setStatus('current')
bsnAPIfRadarSignalLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 24, 1, 2), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRadarSignalLastHeard.setStatus('current')
bsnAPIfChannelNoiseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 15), )
if mibBuilder.loadTexts: bsnAPIfChannelNoiseInfoTable.setStatus('current')
bsnAPIfChannelNoiseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 15, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfNoiseChannelNo"))
if mibBuilder.loadTexts: bsnAPIfChannelNoiseInfoEntry.setStatus('current')
bsnAPIfNoiseChannelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfNoiseChannelNo.setStatus('current')
bsnAPIfDBNoisePower = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 15, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfDBNoisePower.setStatus('current')
bsnAPIfProfileStateTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 16), )
if mibBuilder.loadTexts: bsnAPIfProfileStateTable.setStatus('current')
bsnAPIfProfileStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 16, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfProfileStateEntry.setStatus('current')
bsnAPIfLoadProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 16, 1, 1), ProfileState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfLoadProfileState.setStatus('current')
bsnAPIfInterferenceProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 16, 1, 2), ProfileState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfInterferenceProfileState.setStatus('current')
bsnAPIfNoiseProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 16, 1, 3), ProfileState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfNoiseProfileState.setStatus('current')
bsnAPIfCoverageProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 16, 1, 24), ProfileState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfCoverageProfileState.setStatus('current')
bsnAPIfRxNeighborsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17), )
if mibBuilder.loadTexts: bsnAPIfRxNeighborsTable.setStatus('current')
bsnAPIfRxNeighborsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborMacAddress"))
if mibBuilder.loadTexts: bsnAPIfRxNeighborsEntry.setStatus('current')
bsnAPIfRxNeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRxNeighborMacAddress.setStatus('current')
bsnAPIfRxNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRxNeighborIpAddress.setStatus('current')
bsnAPIfRxNeighborRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRxNeighborRSSI.setStatus('current')
bsnAPIfRxNeighborSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRxNeighborSlot.setStatus('current')
bsnAPIfRxNeighborChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRxNeighborChannel.setStatus('current')
bsnAPIfRxNeighborChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 17, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("five", 1), ("ten", 2), ("twenty", 3), ("aboveforty", 4), ("belowforty", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRxNeighborChannelWidth.setStatus('current')
bsnMeshNodeTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22), )
if mibBuilder.loadTexts: bsnMeshNodeTable.setStatus('current')
bsnMeshNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"))
if mibBuilder.loadTexts: bsnMeshNodeEntry.setStatus('current')
bsnMeshNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pap", 0), ("rap", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeRole.setStatus('current')
bsnMeshNodeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeGroup.setStatus('current')
bsnMeshNodeBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11b", 1), ("dot11g", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeBackhaul.setStatus('current')
bsnMeshNodeBackhaulPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeBackhaulPAP.setStatus('current')
bsnMeshNodeBackhaulRAP = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11b", 1), ("dot11g", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMeshNodeBackhaulRAP.setStatus('current')
bsnMeshNodeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMeshNodeDataRate.setStatus('current')
bsnMeshNodeChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeChannel.setStatus('current')
bsnMeshNodeRoutingState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("start", 1), ("seek", 2), ("sync", 3), ("auth", 4), ("maint", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeRoutingState.setStatus('current')
bsnMeshNodeMalformedNeighPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeMalformedNeighPackets.setStatus('current')
bsnMeshNodePoorNeighSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodePoorNeighSnr.setStatus('current')
bsnMeshNodeBlacklistPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeBlacklistPackets.setStatus('current')
bsnMeshNodeInsufficientMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeInsufficientMemory.setStatus('current')
bsnMeshNodeRxNeighReq = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeRxNeighReq.setStatus('current')
bsnMeshNodeRxNeighRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeRxNeighRsp.setStatus('current')
bsnMeshNodeTxNeighReq = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeTxNeighReq.setStatus('current')
bsnMeshNodeTxNeighRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeTxNeighRsp.setStatus('current')
bsnMeshNodeParentChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeParentChanges.setStatus('current')
bsnMeshNodeNeighTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeNeighTimeout.setStatus('current')
bsnMeshNodeParentMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeParentMacAddress.setStatus('current')
bsnMeshNodeAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6))).clone(namedValues=NamedValues(("indoorBridge", 5), ("outdoorBridge", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeAPType.setStatus('current')
bsnMeshNodeEthernetBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMeshNodeEthernetBridge.setStatus('current')
bsnMeshNodeHops = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 22, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNodeHops.setStatus('current')
bsnMeshNeighsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23), )
if mibBuilder.loadTexts: bsnMeshNeighsTable.setStatus('current')
bsnMeshNeighsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnMeshNeighMacAddress"))
if mibBuilder.loadTexts: bsnMeshNeighsEntry.setStatus('current')
bsnMeshNeighMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighMacAddress.setStatus('current')
bsnMeshNeighType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("parent", 0), ("tentparent", 1), ("neigh", 2), ("blacklisted", 3), ("child", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighType.setStatus('current')
bsnMeshNeighState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("updated", 0), ("needupdate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighState.setStatus('current')
bsnMeshNeighSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighSnr.setStatus('current')
bsnMeshNeighSnrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighSnrUp.setStatus('current')
bsnMeshNeighSnrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighSnrDown.setStatus('current')
bsnMeshNeighLinkSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighLinkSnr.setStatus('current')
bsnMeshNeighAdjustedEase = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighAdjustedEase.setStatus('current')
bsnMeshNeighUnadjustedEase = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighUnadjustedEase.setStatus('current')
bsnMeshNeighRapEase = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighRapEase.setStatus('current')
bsnMeshNeighTxParent = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighTxParent.setStatus('current')
bsnMeshNeighRxParent = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighRxParent.setStatus('current')
bsnMeshNeighPoorSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighPoorSnr.setStatus('current')
bsnMeshNeighLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighLastUpdate.setStatus('current')
bsnMeshNeighParentChange = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 23, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMeshNeighParentChange.setStatus('current')
bsnAPIfStationRSSICoverageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 18), )
if mibBuilder.loadTexts: bsnAPIfStationRSSICoverageInfoTable.setStatus('current')
bsnAPIfStationRSSICoverageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 18, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfStationRSSICoverageIndex"))
if mibBuilder.loadTexts: bsnAPIfStationRSSICoverageInfoEntry.setStatus('current')
bsnAPIfStationRSSICoverageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfStationRSSICoverageIndex.setStatus('current')
bsnAPIfRSSILevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRSSILevel.setStatus('current')
bsnAPIfStationCountOnRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 18, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfStationCountOnRSSI.setStatus('current')
bsnAPIfStationSNRCoverageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 19), )
if mibBuilder.loadTexts: bsnAPIfStationSNRCoverageInfoTable.setStatus('current')
bsnAPIfStationSNRCoverageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 19, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfStationSNRCoverageIndex"))
if mibBuilder.loadTexts: bsnAPIfStationSNRCoverageInfoEntry.setStatus('current')
bsnAPIfStationSNRCoverageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfStationSNRCoverageIndex.setStatus('current')
bsnAPIfSNRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfSNRLevel.setStatus('current')
bsnAPIfStationCountOnSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 19, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfStationCountOnSNR.setStatus('current')
bsnAPIfRecommendedRFParametersTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 2, 20), )
if mibBuilder.loadTexts: bsnAPIfRecommendedRFParametersTable.setStatus('current')
bsnAPIfRecommendedRFParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 2, 20, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"))
if mibBuilder.loadTexts: bsnAPIfRecommendedRFParametersEntry.setStatus('current')
bsnAPIfRecommendedChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRecommendedChannelNumber.setStatus('current')
bsnAPIfRecommendedTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRecommendedTxPowerLevel.setStatus('current')
bsnAPIfRecommendedRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRecommendedRTSThreshold.setStatus('current')
bsnAPIfRecommendedFragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 2, 20, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAPIfRecommendedFragmentationThreshold.setStatus('current')
bsnGlobalDot11Config = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1))
bsnGlobalDot11PrivacyOptionImplemented = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notimplemented", 0), ("implemented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11PrivacyOptionImplemented.setStatus('current')
bsnGlobalDot11AuthenticationResponseTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11AuthenticationResponseTimeOut.setStatus('current')
bsnGlobalDot11MultiDomainCapabilityImplemented = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11MultiDomainCapabilityImplemented.setStatus('current')
bsnGlobalDot11MultiDomainCapabilityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11MultiDomainCapabilityEnabled.setStatus('current')
bsnGlobalDot11CountryIndex = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68))).clone(namedValues=NamedValues(("usa", 1), ("canada", 2), ("france", 3), ("japan", 4), ("mexico", 5), ("spain", 6), ("usalegacy", 7), ("korearepublic", 8), ("australia", 9), ("austria", 10), ("belgium", 11), ("denmark", 12), ("finland", 13), ("germany", 14), ("greece", 15), ("ireland", 16), ("italy", 17), ("luxembourg", 18), ("netherlands", 19), ("portugal", 20), ("sweden", 21), ("unitedkingdom", 22), ("none", 23), ("india", 24), ("hongkong", 25), ("switzerland", 26), ("iceland", 27), ("norway", 28), ("singapore", 29), ("thailand", 30), ("taiwan", 31), ("cyprus", 33), ("czechrepublic", 34), ("estonia", 35), ("hungary", 36), ("lithuania", 37), ("latvia", 38), ("malaysia", 39), ("newzealand", 40), ("poland", 41), ("slovenia", 42), ("slovakrepublic", 43), ("southafrica", 44), ("usachan165", 45), ("israel", 46), ("israelOutdoor", 47), ("argentina", 48), ("brazil", 49), ("saudiArabia", 51), ("turkey", 52), ("indonesia", 53), ("china", 54), ("koreaExtended", 55), ("japan2", 56), ("gibraltar", 57), ("liechtenstein", 58), ("malta", 59), ("monaco", 60), ("romania", 61), ("russianfederation", 62), ("chile", 63), ("colombia", 64), ("panama", 65), ("peru", 66), ("venezuela", 67), ("philippines", 68)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11CountryIndex.setStatus('deprecated')
bsnGlobalDot11LoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11LoadBalancing.setStatus('deprecated')
bsnGlobalDot11RogueTimer = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11RogueTimer.setStatus('current')
bsnPrimaryMwarForAPs = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnPrimaryMwarForAPs.setStatus('current')
bsnRtpProtocolPriority = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nopriority", 0), ("highpriority", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRtpProtocolPriority.setStatus('current')
bsnSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnSystemCurrentTime.setStatus('current')
bsnUpdateSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnUpdateSystemTime.setStatus('current')
bsnOperatingTemperatureEnvironment = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("commercial", 1), ("industrial", 2), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnOperatingTemperatureEnvironment.setStatus('current')
bsnSensorTemperature = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnSensorTemperature.setStatus('current')
bsnTemperatureAlarmLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTemperatureAlarmLowLimit.setStatus('current')
bsnTemperatureAlarmHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTemperatureAlarmHighLimit.setStatus('current')
bsnVirtualGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnVirtualGatewayAddress.setStatus('current')
bsnRFMobilityDomainName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRFMobilityDomainName.setStatus('current')
bsnClientWatchListFeature = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnClientWatchListFeature.setStatus('current')
bsnRogueLocationDiscoveryProtocol = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("allAPs", 1), ("monitorAPOnly", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRogueLocationDiscoveryProtocol.setStatus('current')
bsnRogueAutoContainFeature = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRogueAutoContainFeature.setStatus('current')
bsnOverAirProvisionApMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnOverAirProvisionApMode.setStatus('current')
bsnMaximumNumberOfConcurrentLogins = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMaximumNumberOfConcurrentLogins.setStatus('current')
bsnAutoContainRoguesAdvertisingSsid = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarmOnly", 0), ("contain", 1))).clone('alarmOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAutoContainRoguesAdvertisingSsid.setStatus('current')
bsnAutoContainAdhocNetworks = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarmOnly", 0), ("contain", 1))).clone('alarmOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAutoContainAdhocNetworks.setStatus('current')
bsnAutoContainTrustedClientsOnRogueAps = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarmOnly", 0), ("contain", 1))).clone('alarmOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAutoContainTrustedClientsOnRogueAps.setStatus('current')
bsnValidateRogueClientsAgainstAAA = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnValidateRogueClientsAgainstAAA.setStatus('current')
bsnSystemTimezoneDelta = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnSystemTimezoneDelta.setStatus('current')
bsnSystemTimezoneDeltaMinutes = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnSystemTimezoneDeltaMinutes.setStatus('current')
bsnSystemTimezoneDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnSystemTimezoneDaylightSavings.setStatus('obsolete')
bsnAllowAuthorizeApAgainstAAA = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAllowAuthorizeApAgainstAAA.setStatus('current')
bsnApFallbackEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnApFallbackEnabled.setStatus('current')
bsnAppleTalkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAppleTalkEnabled.setStatus('current')
bsnTrustedApPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40))
bsnPolicyForMisconfiguredAps = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarmOnly", 0), ("contain", 1))).clone('alarmOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnPolicyForMisconfiguredAps.setStatus('current')
bsnEncryptionPolicyEnforced = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("open", 1), ("wep", 2), ("wpa", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnEncryptionPolicyEnforced.setStatus('current')
bsnPreamblePolicyEnforced = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("short", 1), ("long", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnPreamblePolicyEnforced.setStatus('current')
bsnDot11ModePolicyEnforced = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("dcfOnly", 1), ("pcfOnly", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11ModePolicyEnforced.setStatus('current')
bsnRadioTypePolicyEnforced = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("aOnly", 1), ("bOnly", 2), ("bgOnly", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRadioTypePolicyEnforced.setStatus('current')
bsnValidateSsidForTrustedAp = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnValidateSsidForTrustedAp.setStatus('current')
bsnAlertIfTrustedApMissing = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAlertIfTrustedApMissing.setStatus('current')
bsnTrustedApEntryExpirationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 40, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 3600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnTrustedApEntryExpirationTimeout.setStatus('current')
bsnClientExclusionPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 41))
bsnExcessive80211AssocFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 41, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnExcessive80211AssocFailures.setStatus('current')
bsnExcessive80211AuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 41, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnExcessive80211AuthFailures.setStatus('current')
bsnExcessive8021xAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 41, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnExcessive8021xAuthFailures.setStatus('current')
bsnExternalPolicyServerFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 41, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnExternalPolicyServerFailures.setStatus('current')
bsnExcessiveWebAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 41, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnExcessiveWebAuthFailures.setStatus('current')
bsnIPTheftORReuse = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 41, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnIPTheftORReuse.setStatus('current')
bsnSignatureConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42))
bsnStandardSignatureTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1), )
if mibBuilder.loadTexts: bsnStandardSignatureTable.setStatus('current')
bsnStandardSignatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePrecedence"))
if mibBuilder.loadTexts: bsnStandardSignatureEntry.setStatus('current')
bsnStandardSignaturePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignaturePrecedence.setStatus('current')
bsnStandardSignatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureName.setStatus('current')
bsnStandardSignatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureDescription.setStatus('current')
bsnStandardSignatureFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("management", 0), ("data", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureFrameType.setStatus('current')
bsnStandardSignatureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("report", 1), ("contain", 2), ("exclude", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureAction.setStatus('current')
bsnStandardSignatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureState.setStatus('current')
bsnStandardSignatureFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnStandardSignatureFrequency.setStatus('current')
bsnStandardSignatureQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnStandardSignatureQuietTime.setStatus('current')
bsnStandardSignatureVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureVersion.setStatus('current')
bsnStandardSignatureConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pattern", 0), ("protocol", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureConfigType.setStatus('current')
bsnStandardSignatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnStandardSignatureEnable.setStatus('current')
bsnStandardSignatureMacInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 12), BsnTxtSignatureMacInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureMacInfo.setStatus('current')
bsnStandardSignatureMacFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnStandardSignatureMacFreq.setStatus('current')
bsnStandardSignatureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 20), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignatureRowStatus.setStatus('current')
bsnStandardSignatureInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnStandardSignatureInterval.setStatus('current')
bsnStandardSignaturePatternTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2), )
if mibBuilder.loadTexts: bsnStandardSignaturePatternTable.setStatus('current')
bsnStandardSignaturePatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePrecedence"), (0, "AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternIndex"))
if mibBuilder.loadTexts: bsnStandardSignaturePatternEntry.setStatus('current')
bsnStandardSignaturePatternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignaturePatternIndex.setStatus('current')
bsnStandardSignaturePatternOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignaturePatternOffset.setStatus('current')
bsnStandardSignaturePatternString = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignaturePatternString.setStatus('current')
bsnStandardSignaturePatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignaturePatternMask.setStatus('current')
bsnStandardSignaturePatternOffSetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2, 1, 5), BsnSignaturePatternOffSetStart()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignaturePatternOffSetStart.setStatus('current')
bsnStandardSignaturePatternRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 2, 1, 15), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnStandardSignaturePatternRowStatus.setStatus('current')
bsnCustomSignatureTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3), )
if mibBuilder.loadTexts: bsnCustomSignatureTable.setStatus('current')
bsnCustomSignatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePrecedence"))
if mibBuilder.loadTexts: bsnCustomSignatureEntry.setStatus('current')
bsnCustomSignaturePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignaturePrecedence.setStatus('current')
bsnCustomSignatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureName.setStatus('current')
bsnCustomSignatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureDescription.setStatus('current')
bsnCustomSignatureFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("management", 0), ("data", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureFrameType.setStatus('current')
bsnCustomSignatureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("report", 1), ("contain", 2), ("exclude", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureAction.setStatus('current')
bsnCustomSignatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureState.setStatus('current')
bsnCustomSignatureFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnCustomSignatureFrequency.setStatus('current')
bsnCustomSignatureQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnCustomSignatureQuietTime.setStatus('current')
bsnCustomSignatureVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureVersion.setStatus('current')
bsnCustomSignatureConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pattern", 0), ("protocol", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureConfigType.setStatus('current')
bsnCustomSignatureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnCustomSignatureEnable.setStatus('current')
bsnCustomSignatureMacInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 12), BsnTxtSignatureMacInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureMacInfo.setStatus('current')
bsnCustomSignatureMacFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnCustomSignatureMacFreq.setStatus('current')
bsnCustomSignatureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 20), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignatureRowStatus.setStatus('current')
bsnCustomSignatureInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnCustomSignatureInterval.setStatus('current')
bsnCustomSignaturePatternTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4), )
if mibBuilder.loadTexts: bsnCustomSignaturePatternTable.setStatus('current')
bsnCustomSignaturePatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePrecedence"), (0, "AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternIndex"))
if mibBuilder.loadTexts: bsnCustomSignaturePatternEntry.setStatus('current')
bsnCustomSignaturePatternIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignaturePatternIndex.setStatus('current')
bsnCustomSignaturePatternOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignaturePatternOffset.setStatus('current')
bsnCustomSignaturePatternString = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignaturePatternString.setStatus('current')
bsnCustomSignaturePatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignaturePatternMask.setStatus('current')
bsnCustomSignaturePatternOffSetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4, 1, 5), BsnSignaturePatternOffSetStart()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignaturePatternOffSetStart.setStatus('current')
bsnCustomSignaturePatternRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 4, 1, 15), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCustomSignaturePatternRowStatus.setStatus('current')
bsnSignatureCheckState = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 42, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnSignatureCheckState.setStatus('current')
bsnRfIdTagConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 43))
bsnRfIdTagStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 43, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRfIdTagStatus.setStatus('current')
bsnRfIdTagDataTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 43, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRfIdTagDataTimeout.setStatus('current')
bsnRfIdTagAutoTimeoutStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 43, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRfIdTagAutoTimeoutStatus.setStatus('current')
bsnAPNeighborAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 44))
bsnAPNeighborAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 44, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPNeighborAuthStatus.setStatus('current')
bsnAPNeighborAuthAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 44, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPNeighborAuthAlarmThreshold.setStatus('current')
bsnRFNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRFNetworkName.setStatus('current')
bsnFastSSIDChangeFeature = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnFastSSIDChangeFeature.setStatus('current')
bsnBridgingPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 47))
bsnBridgingZeroTouchConfig = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 47, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnBridgingZeroTouchConfig.setStatus('current')
bsnBridgingSharedSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 47, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnBridgingSharedSecretKey.setStatus('current')
bsnGlobalDot11b = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2))
bsnGlobalDot11a = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3))
bsnGlobalDot11h = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 4))
bsnGlobalDot11bConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1))
bsnGlobalDot11bNetworkStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bNetworkStatus.setStatus('current')
bsnGlobalDot11bBeaconPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bBeaconPeriod.setStatus('current')
bsnGlobalDot11bDynamicChannelAssignment = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("runOnce", 2), ("static", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDynamicChannelAssignment.setStatus('current')
bsnGlobalDot11bCurrentChannel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bCurrentChannel.setStatus('current')
bsnGlobalDot11bDynamicChannelUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 5), Unsigned32().clone(600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bDynamicChannelUpdateInterval.setStatus('current')
bsnGlobalDot11bInputsForDCA = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 6), Unsigned32().clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bInputsForDCA.setStatus('current')
bsnGlobalDot11bChannelUpdateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bChannelUpdateCmdInvoke.setStatus('current')
bsnGlobalDot11bChannelUpdateCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bChannelUpdateCmdStatus.setStatus('current')
bsnGlobalDot11bDynamicTransmitPowerControl = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("runOnce", 2), ("static", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDynamicTransmitPowerControl.setStatus('current')
bsnGlobalDot11bDynamicTxPowerControlInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 10), Unsigned32().clone(600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bDynamicTxPowerControlInterval.setStatus('current')
bsnGlobalDot11bCurrentTxPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bCurrentTxPowerLevel.setStatus('current')
bsnGlobalDot11bInputsForDTP = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 12), Unsigned32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bInputsForDTP.setStatus('current')
bsnGlobalDot11bPowerUpdateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bPowerUpdateCmdInvoke.setStatus('current')
bsnGlobalDot11bPowerUpdateCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bPowerUpdateCmdStatus.setStatus('current')
bsnGlobalDot11bDataRate1Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate1Mhz.setStatus('current')
bsnGlobalDot11bDataRate2Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate2Mhz.setStatus('current')
bsnGlobalDot11bDataRate5AndHalfMhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate5AndHalfMhz.setStatus('current')
bsnGlobalDot11bDataRate11Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate11Mhz.setStatus('current')
bsnGlobalDot11bShortPreamble = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bShortPreamble.setStatus('current')
bsnGlobalDot11bDot11gSupport = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDot11gSupport.setStatus('current')
bsnGlobalDot11bDataRate6Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate6Mhz.setStatus('current')
bsnGlobalDot11bDataRate9Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate9Mhz.setStatus('current')
bsnGlobalDot11bDataRate12Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate12Mhz.setStatus('current')
bsnGlobalDot11bDataRate18Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate18Mhz.setStatus('current')
bsnGlobalDot11bDataRate24Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate24Mhz.setStatus('current')
bsnGlobalDot11bDataRate36Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate36Mhz.setStatus('current')
bsnGlobalDot11bDataRate48Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate48Mhz.setStatus('current')
bsnGlobalDot11bDataRate54Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDataRate54Mhz.setStatus('current')
bsnGlobalDot11bPicoCellMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bPicoCellMode.setStatus('current')
bsnGlobalDot11bFastRoamingMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bFastRoamingMode.setStatus('current')
bsnGlobalDot11bFastRoamingVoipMinRate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5andHalfMbps", 3), ("rate11Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bFastRoamingVoipMinRate.setStatus('current')
bsnGlobalDot11bFastRoamingVoipPercentage = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("twentyfive", 2), ("fifty", 3), ("seventyfive", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bFastRoamingVoipPercentage.setStatus('current')
bsnGlobalDot11b80211eMaxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11b80211eMaxBandwidth.setStatus('current')
bsnGlobalDot11bDTPCSupport = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDTPCSupport.setStatus('current')
bsnGlobalDot11bRxSopThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("low", 1), ("medium", 2), ("high", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bRxSopThreshold.setStatus('current')
bsnGlobalDot11bPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2))
bsnGlobalDot11bMediumOccupancyLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bMediumOccupancyLimit.setStatus('current')
bsnGlobalDot11bCFPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bCFPPeriod.setStatus('current')
bsnGlobalDot11bCFPMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bCFPMaxDuration.setStatus('current')
bsnGlobalDot11bCFPollable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bCFPollable.setStatus('current')
bsnGlobalDot11bCFPollRequest = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bCFPollRequest.setStatus('current')
bsnGlobalDot11bDTIMPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bDTIMPeriod.setStatus('current')
bsnGlobalDot11bMaximumTransmitPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bMaximumTransmitPowerLevel.setStatus('deprecated')
bsnGlobalDot11bFirstChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bFirstChannelNumber.setStatus('deprecated')
bsnGlobalDot11bNumberofChannels = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bNumberofChannels.setStatus('deprecated')
bsnGlobalDot11bRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bRTSThreshold.setStatus('current')
bsnGlobalDot11bShortRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bShortRetryLimit.setStatus('current')
bsnGlobalDot11bLongRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bLongRetryLimit.setStatus('current')
bsnGlobalDot11bFragmentationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11bFragmentationThreshold.setStatus('current')
bsnGlobalDot11bMaxTransmitMSDULifetime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bMaxTransmitMSDULifetime.setStatus('current')
bsnGlobalDot11bMaxReceiveLifetime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bMaxReceiveLifetime.setStatus('current')
bsnGlobalDot11bEDThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bEDThreshold.setStatus('current')
bsnGlobalDot11bChannelAgilityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bChannelAgilityEnabled.setStatus('current')
bsnGlobalDot11bPBCCOptionImplemented = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bPBCCOptionImplemented.setStatus('current')
bsnGlobalDot11bShortPreambleOptionImplemented = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 2, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11bShortPreambleOptionImplemented.setStatus('current')
bsnGlobalDot11aConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1))
bsnGlobalDot11aNetworkStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aNetworkStatus.setStatus('current')
bsnGlobalDot11aLowBandNetwork = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aLowBandNetwork.setStatus('current')
bsnGlobalDot11aMediumBandNetwork = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aMediumBandNetwork.setStatus('current')
bsnGlobalDot11aHighBandNetwork = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aHighBandNetwork.setStatus('current')
bsnGlobalDot11aBeaconPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aBeaconPeriod.setStatus('current')
bsnGlobalDot11aDynamicChannelAssignment = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("runOnce", 2), ("static", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDynamicChannelAssignment.setStatus('current')
bsnGlobalDot11aCurrentChannel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aCurrentChannel.setStatus('current')
bsnGlobalDot11aDynamicChannelUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 8), Unsigned32().clone(600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aDynamicChannelUpdateInterval.setStatus('current')
bsnGlobalDot11aInputsForDCA = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 9), Unsigned32().clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aInputsForDCA.setStatus('current')
bsnGlobalDot11aChannelUpdateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aChannelUpdateCmdInvoke.setStatus('current')
bsnGlobalDot11aChannelUpdateCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aChannelUpdateCmdStatus.setStatus('current')
bsnGlobalDot11aDynamicTransmitPowerControl = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("runOnce", 2), ("static", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDynamicTransmitPowerControl.setStatus('current')
bsnGlobalDot11aCurrentTxPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aCurrentTxPowerLevel.setStatus('current')
bsnGlobalDot11aDynamicTxPowerControlInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 14), Unsigned32().clone(600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aDynamicTxPowerControlInterval.setStatus('current')
bsnGlobalDot11aInputsForDTP = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 15), Unsigned32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aInputsForDTP.setStatus('current')
bsnGlobalDot11aPowerUpdateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aPowerUpdateCmdInvoke.setStatus('current')
bsnGlobalDot11aPowerUpdateCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aPowerUpdateCmdStatus.setStatus('current')
bsnGlobalDot11aDataRate6Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate6Mhz.setStatus('current')
bsnGlobalDot11aDataRate9Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate9Mhz.setStatus('current')
bsnGlobalDot11aDataRate12Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate12Mhz.setStatus('current')
bsnGlobalDot11aDataRate18Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate18Mhz.setStatus('current')
bsnGlobalDot11aDataRate24Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate24Mhz.setStatus('current')
bsnGlobalDot11aDataRate36Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate36Mhz.setStatus('current')
bsnGlobalDot11aDataRate48Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate48Mhz.setStatus('current')
bsnGlobalDot11aDataRate54Mhz = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("supported", 1), ("mandatory", 2), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDataRate54Mhz.setStatus('current')
bsnGlobalDot11aPicoCellMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aPicoCellMode.setStatus('current')
bsnGlobalDot11aFastRoamingMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aFastRoamingMode.setStatus('current')
bsnGlobalDot11aFastRoamingVoipMinRate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5andHalfMbps", 3), ("rate11Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aFastRoamingVoipMinRate.setStatus('current')
bsnGlobalDot11aFastRoamingVoipPercentage = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("twentyfive", 2), ("fifty", 3), ("seventyfive", 4), ("hundred", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aFastRoamingVoipPercentage.setStatus('current')
bsnGlobalDot11a80211eMaxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11a80211eMaxBandwidth.setStatus('current')
bsnGlobalDot11aDTPCSupport = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDTPCSupport.setStatus('current')
bsnGlobalDot11aRxSopThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("low", 1), ("medium", 2), ("high", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aRxSopThreshold.setStatus('current')
bsnGlobalDot11aPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2))
bsnGlobalDot11aMediumOccupancyLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aMediumOccupancyLimit.setStatus('current')
bsnGlobalDot11aCFPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aCFPPeriod.setStatus('current')
bsnGlobalDot11aCFPMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aCFPMaxDuration.setStatus('current')
bsnGlobalDot11aCFPollable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aCFPollable.setStatus('current')
bsnGlobalDot11aCFPollRequest = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aCFPollRequest.setStatus('current')
bsnGlobalDot11aDTIMPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aDTIMPeriod.setStatus('current')
bsnGlobalDot11aMaximumTransmitPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aMaximumTransmitPowerLevel.setStatus('deprecated')
bsnGlobalDot11aFirstChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aFirstChannelNumber.setStatus('deprecated')
bsnGlobalDot11aNumberofChannels = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aNumberofChannels.setStatus('deprecated')
bsnGlobalDot11aRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aRTSThreshold.setStatus('current')
bsnGlobalDot11aShortRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aShortRetryLimit.setStatus('current')
bsnGlobalDot11aLongRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aLongRetryLimit.setStatus('current')
bsnGlobalDot11aFragmentationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11aFragmentationThreshold.setStatus('current')
bsnGlobalDot11aMaxTransmitMSDULifetime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aMaxTransmitMSDULifetime.setStatus('current')
bsnGlobalDot11aMaxReceiveLifetime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aMaxReceiveLifetime.setStatus('current')
bsnGlobalDot11aTIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aTIThreshold.setStatus('current')
bsnGlobalDot11aChannelAgilityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 3, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGlobalDot11aChannelAgilityEnabled.setStatus('current')
bsnGlobalDot11hConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 3, 4, 1))
bsnGlobalDot11hPowerConstraint = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('decibels').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11hPowerConstraint.setStatus('current')
bsnGlobalDot11hChannelSwitchEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11hChannelSwitchEnable.setStatus('current')
bsnGlobalDot11hChannelSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("loud", 0), ("quiet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnGlobalDot11hChannelSwitchMode.setStatus('current')
bsnRrmDot11a = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1))
bsnRrmDot11b = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2))
bsnRrmDot11aGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1))
bsnRrmDot11aGlobalAutomaticGrouping = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aGlobalAutomaticGrouping.setStatus('deprecated')
bsnRrmDot11aGroupLeaderMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmDot11aGroupLeaderMacAddr.setStatus('deprecated')
bsnRrmIsDot11aGroupLeader = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmIsDot11aGroupLeader.setStatus('deprecated')
bsnRrmDot11aGroupLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmDot11aGroupLastUpdateTime.setStatus('deprecated')
bsnRrmDot11aGlobalGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 5), Unsigned32().clone(3600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmDot11aGlobalGroupInterval.setStatus('deprecated')
bsnWrasDot11aGroupTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 9), )
if mibBuilder.loadTexts: bsnWrasDot11aGroupTable.setStatus('deprecated')
bsnWrasDot11aGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 9, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnWrasDot11aPeerMacAddress"))
if mibBuilder.loadTexts: bsnWrasDot11aGroupEntry.setStatus('deprecated')
bsnWrasDot11aPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnWrasDot11aPeerMacAddress.setStatus('deprecated')
bsnWrasDot11aPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 1, 9, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnWrasDot11aPeerIpAddress.setStatus('deprecated')
bsnRrmDot11aAPDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6))
bsnRrmDot11aForeignInterferenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aForeignInterferenceThreshold.setStatus('current')
bsnRrmDot11aForeignNoiseThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aForeignNoiseThreshold.setStatus('current')
bsnRrmDot11aRFUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aRFUtilizationThreshold.setStatus('current')
bsnRrmDot11aThroughputThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aThroughputThreshold.setStatus('current')
bsnRrmDot11aMobilesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aMobilesThreshold.setStatus('current')
bsnRrmDot11aCoverageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aCoverageThreshold.setStatus('current')
bsnRrmDot11aMobileMinExceptionLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aMobileMinExceptionLevel.setStatus('current')
bsnRrmDot11aCoverageExceptionLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aCoverageExceptionLevel.setStatus('current')
bsnRrmDot11aSignalMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aSignalMeasurementInterval.setStatus('current')
bsnRrmDot11aNoiseMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aNoiseMeasurementInterval.setStatus('current')
bsnRrmDot11aLoadMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aLoadMeasurementInterval.setStatus('current')
bsnRrmDot11aCoverageMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aCoverageMeasurementInterval.setStatus('current')
bsnRrmDot11aChannelMonitorList = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("country", 2), ("dca", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aChannelMonitorList.setStatus('current')
bsnRrmDot11aSetFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11aSetFactoryDefault.setStatus('current')
bsnRrmDot11bGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1))
bsnRrmDot11bGlobalAutomaticGrouping = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bGlobalAutomaticGrouping.setStatus('deprecated')
bsnRrmDot11bGroupLeaderMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmDot11bGroupLeaderMacAddr.setStatus('deprecated')
bsnRrmIsDot11bGroupLeader = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmIsDot11bGroupLeader.setStatus('deprecated')
bsnRrmDot11bGroupLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmDot11bGroupLastUpdateTime.setStatus('deprecated')
bsnRrmDot11bGlobalGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 5), Unsigned32().clone(3600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRrmDot11bGlobalGroupInterval.setStatus('deprecated')
bsnWrasDot11bGroupTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 9), )
if mibBuilder.loadTexts: bsnWrasDot11bGroupTable.setStatus('deprecated')
bsnWrasDot11bGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 9, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnWrasDot11bPeerMacAddress"))
if mibBuilder.loadTexts: bsnWrasDot11bGroupEntry.setStatus('deprecated')
bsnWrasDot11bPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnWrasDot11bPeerMacAddress.setStatus('deprecated')
bsnWrasDot11bPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 1, 9, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnWrasDot11bPeerIpAddress.setStatus('deprecated')
bsnRrmDot11bAPDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6))
bsnRrmDot11bForeignInterferenceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bForeignInterferenceThreshold.setStatus('current')
bsnRrmDot11bForeignNoiseThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bForeignNoiseThreshold.setStatus('current')
bsnRrmDot11bRFUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bRFUtilizationThreshold.setStatus('current')
bsnRrmDot11bThroughputThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bThroughputThreshold.setStatus('current')
bsnRrmDot11bMobilesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bMobilesThreshold.setStatus('current')
bsnRrmDot11bCoverageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bCoverageThreshold.setStatus('current')
bsnRrmDot11bMobileMinExceptionLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bMobileMinExceptionLevel.setStatus('current')
bsnRrmDot11bCoverageExceptionLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bCoverageExceptionLevel.setStatus('current')
bsnRrmDot11bSignalMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bSignalMeasurementInterval.setStatus('current')
bsnRrmDot11bNoiseMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bNoiseMeasurementInterval.setStatus('current')
bsnRrmDot11bLoadMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bLoadMeasurementInterval.setStatus('current')
bsnRrmDot11bCoverageMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bCoverageMeasurementInterval.setStatus('current')
bsnRrmDot11bChannelMonitorList = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("country", 2), ("dca", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bChannelMonitorList.setStatus('current')
bsnRrmDot11bSetFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRrmDot11bSetFactoryDefault.setStatus('current')
bsnRadiusAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1), )
if mibBuilder.loadTexts: bsnRadiusAuthServerTable.setStatus('current')
bsnRadiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIndex"))
if mibBuilder.loadTexts: bsnRadiusAuthServerEntry.setStatus('current')
bsnRadiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerIndex.setStatus('current')
bsnRadiusAuthServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerAddress.setStatus('deprecated')
bsnRadiusAuthClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthClientServerPortNumber.setStatus('current')
bsnRadiusAuthServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerKey.setStatus('current')
bsnRadiusAuthServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerStatus.setStatus('current')
bsnRadiusAuthServerKeyFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerKeyFormat.setStatus('current')
bsnRadiusAuthServerRFC3576 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerRFC3576.setStatus('current')
bsnRadiusAuthServerIPSec = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerIPSec.setStatus('current')
bsnRadiusAuthServerIPSecAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("hmacMd5", 1), ("hmacSha1", 2))).clone('hmacSha1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerIPSecAuth.setStatus('current')
bsnRadiusAuthServerIPSecEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("des", 1), ("tripleDes", 2), ("aesCbc", 3), ("aes256Cbc", 4))).clone('tripleDes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerIPSecEncryption.setStatus('current')
bsnRadiusAuthServerIPSecIKEPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("agressive", 2))).clone('main')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerIPSecIKEPhase1.setStatus('current')
bsnRadiusAuthServerIPSecIKELifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 345600)).clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerIPSecIKELifetime.setStatus('current')
bsnRadiusAuthServerIPSecDHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 14))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5), ("group14", 14))).clone('group2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerIPSecDHGroup.setStatus('current')
bsnRadiusAuthServerNetworkUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerNetworkUserConfig.setStatus('current')
bsnRadiusAuthServerMgmtUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerMgmtUserConfig.setStatus('current')
bsnRadiusAuthServerRetransmitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerRetransmitTimeout.setStatus('current')
bsnRadiusAuthServerKeyWrapKEKkey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 18), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerKeyWrapKEKkey.setStatus('current')
bsnRadiusAuthServerKeyWrapMACKkey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 19), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerKeyWrapMACKkey.setStatus('current')
bsnRadiusAuthServerKeyWrapFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerKeyWrapFormat.setStatus('current')
bsnRadiusAuthServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerRowStatus.setStatus('current')
bsnRadiusAuthServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 27), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerInetAddressType.setStatus('current')
bsnRadiusAuthServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 1, 1, 28), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAuthServerInetAddress.setStatus('current')
bsnRadiusAccServerTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2), )
if mibBuilder.loadTexts: bsnRadiusAccServerTable.setStatus('current')
bsnRadiusAccServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIndex"))
if mibBuilder.loadTexts: bsnRadiusAccServerEntry.setStatus('current')
bsnRadiusAccServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerIndex.setStatus('current')
bsnRadiusAccServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerAddress.setStatus('current')
bsnRadiusAccClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccClientServerPortNumber.setStatus('current')
bsnRadiusAccServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerKey.setStatus('current')
bsnRadiusAccServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerStatus.setStatus('current')
bsnRadiusAccServerKeyFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerKeyFormat.setStatus('current')
bsnRadiusAccServerIPSec = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerIPSec.setStatus('current')
bsnRadiusAccServerIPSecAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("hmacMd5", 1), ("hmacSha1", 2))).clone('hmacSha1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerIPSecAuth.setStatus('current')
bsnRadiusAccServerIPSecEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("des", 1), ("tripleDes", 2), ("aesCbc", 3), ("aes256Cbc", 4))).clone('tripleDes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerIPSecEncryption.setStatus('current')
bsnRadiusAccServerIPSecIKEPhase1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("agressive", 2))).clone('main')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerIPSecIKEPhase1.setStatus('current')
bsnRadiusAccServerIPSecIKELifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 345600)).clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerIPSecIKELifetime.setStatus('current')
bsnRadiusAccServerIPSecDHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 14))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5), ("group14", 14))).clone('group2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerIPSecDHGroup.setStatus('current')
bsnRadiusAccServerNetworkUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerNetworkUserConfig.setStatus('current')
bsnRadiusAccServerRetransmitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerRetransmitTimeout.setStatus('current')
bsnRadiusAccServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerRowStatus.setStatus('current')
bsnRadiusAccServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 27), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerInetAddressType.setStatus('current')
bsnRadiusAccServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 2, 1, 28), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnRadiusAccServerInetAddress.setStatus('current')
bsnRadiusAuthServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3), )
if mibBuilder.loadTexts: bsnRadiusAuthServerStatsTable.setStatus('current')
bsnRadiusAuthServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIndex"))
if mibBuilder.loadTexts: bsnRadiusAuthServerStatsEntry.setStatus('current')
bsnRadiusAuthClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientRoundTripTime.setStatus('current')
bsnRadiusAuthClientAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientAccessRequests.setStatus('current')
bsnRadiusAuthClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientAccessRetransmissions.setStatus('current')
bsnRadiusAuthClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientAccessAccepts.setStatus('current')
bsnRadiusAuthClientAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientAccessRejects.setStatus('current')
bsnRadiusAuthClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientAccessChallenges.setStatus('current')
bsnRadiusAuthClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientMalformedAccessResponses.setStatus('current')
bsnRadiusAuthClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientBadAuthenticators.setStatus('current')
bsnRadiusAuthClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientPendingRequests.setStatus('current')
bsnRadiusAuthClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientTimeouts.setStatus('current')
bsnRadiusAuthClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientUnknownTypes.setStatus('current')
bsnRadiusAuthClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAuthClientPacketsDropped.setStatus('current')
bsnRadiusAccServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4), )
if mibBuilder.loadTexts: bsnRadiusAccServerStatsTable.setStatus('current')
bsnRadiusAccServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIndex"))
if mibBuilder.loadTexts: bsnRadiusAccServerStatsEntry.setStatus('current')
bsnRadiusAccClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientRoundTripTime.setStatus('current')
bsnRadiusAccClientRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientRequests.setStatus('current')
bsnRadiusAccClientRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientRetransmissions.setStatus('current')
bsnRadiusAccClientResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientResponses.setStatus('current')
bsnRadiusAccClientMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientMalformedResponses.setStatus('current')
bsnRadiusAccClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientBadAuthenticators.setStatus('current')
bsnRadiusAccClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientPendingRequests.setStatus('current')
bsnRadiusAccClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientTimeouts.setStatus('current')
bsnRadiusAccClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientUnknownTypes.setStatus('current')
bsnRadiusAccClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnRadiusAccClientPacketsDropped.setStatus('current')
bsnUsersTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5), )
if mibBuilder.loadTexts: bsnUsersTable.setStatus('obsolete')
bsnUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnUserName"))
if mibBuilder.loadTexts: bsnUsersEntry.setStatus('obsolete')
bsnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnUserName.setStatus('obsolete')
bsnUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnUserPassword.setStatus('obsolete')
bsnUserEssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 517))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnUserEssIndex.setStatus('obsolete')
bsnUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnUserAccessMode.setStatus('obsolete')
bsnUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("management", 1), ("wlan", 2), ("macFilter", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnUserType.setStatus('obsolete')
bsnUserInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnUserInterfaceName.setStatus('obsolete')
bsnUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 5, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnUserRowStatus.setStatus('obsolete')
bsnMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 9), )
if mibBuilder.loadTexts: bsnMacFilterTable.setStatus('current')
bsnMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 9, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMacFilterAddress"))
if mibBuilder.loadTexts: bsnMacFilterEntry.setStatus('current')
bsnMacFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMacFilterAddress.setStatus('current')
bsnMacFilterWlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 517))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMacFilterWlanId.setStatus('current')
bsnMacFilterInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMacFilterInterfaceName.setStatus('current')
bsnMacFilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMacFilterDescription.setStatus('current')
bsnMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 9, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMacFilterRowStatus.setStatus('current')
bsnLocalNetUserTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10), )
if mibBuilder.loadTexts: bsnLocalNetUserTable.setStatus('current')
bsnLocalNetUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserName"))
if mibBuilder.loadTexts: bsnLocalNetUserEntry.setStatus('current')
bsnLocalNetUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalNetUserName.setStatus('current')
bsnLocalNetUserWlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 517))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalNetUserWlanId.setStatus('current')
bsnLocalNetUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalNetUserPassword.setStatus('current')
bsnLocalNetUserDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalNetUserDescription.setStatus('current')
bsnLocalNetUserLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 5), TimeInterval().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(6000, 259200000), )).clone(8640000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalNetUserLifetime.setStatus('current')
bsnLocalNetUserStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnLocalNetUserStartTime.setStatus('current')
bsnLocalNetUserRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnLocalNetUserRemainingTime.setStatus('current')
bsnLocalNetUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 10, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalNetUserRowStatus.setStatus('current')
bsnLocalManagementUserTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 11), )
if mibBuilder.loadTexts: bsnLocalManagementUserTable.setStatus('current')
bsnLocalManagementUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 11, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserName"))
if mibBuilder.loadTexts: bsnLocalManagementUserEntry.setStatus('current')
bsnLocalManagementUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalManagementUserName.setStatus('current')
bsnLocalManagementUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalManagementUserPassword.setStatus('current')
bsnLocalManagementUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalManagementUserAccessMode.setStatus('current')
bsnLocalManagementUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 11, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLocalManagementUserRowStatus.setStatus('current')
bsnAclTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 7), )
if mibBuilder.loadTexts: bsnAclTable.setStatus('current')
bsnAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 7, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAclName"))
if mibBuilder.loadTexts: bsnAclEntry.setStatus('current')
bsnAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclName.setStatus('current')
bsnAclApplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notapplied", 0), ("applied", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAclApplyMode.setStatus('current')
bsnAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 7, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRowStatus.setStatus('current')
bsnAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8), )
if mibBuilder.loadTexts: bsnAclRuleTable.setStatus('current')
bsnAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAclName"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAclRuleIndex"))
if mibBuilder.loadTexts: bsnAclRuleEntry.setStatus('current')
bsnAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleIndex.setStatus('current')
bsnAclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleAction.setStatus('current')
bsnAclRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inbound", 0), ("outbound", 1), ("any", 2))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleDirection.setStatus('current')
bsnAclRuleSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleSourceIpAddress.setStatus('current')
bsnAclRuleSourceIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleSourceIpNetmask.setStatus('current')
bsnAclRuleDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleDestinationIpAddress.setStatus('current')
bsnAclRuleDestinationIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleDestinationIpNetmask.setStatus('current')
bsnAclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleProtocol.setStatus('current')
bsnAclRuleStartSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleStartSourcePort.setStatus('current')
bsnAclRuleEndSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleEndSourcePort.setStatus('current')
bsnAclRuleStartDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleStartDestinationPort.setStatus('current')
bsnAclRuleEndDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleEndDestinationPort.setStatus('current')
bsnAclRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleDscp.setStatus('current')
bsnAclNewRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclNewRuleIndex.setStatus('current')
bsnAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 8, 1, 40), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAclRuleRowStatus.setStatus('current')
bsnRadiusAuthKeyWrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRadiusAuthKeyWrapEnable.setStatus('current')
bsnRadiusAuthCacheCredentialsLocally = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRadiusAuthCacheCredentialsLocally.setStatus('deprecated')
bsnAAAMacDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noDelimiter", 0), ("colon", 1), ("hyphen", 2), ("singleHyphen", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAAAMacDelimiter.setStatus('current')
bsnAAARadiusCompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ciscoACS", 0), ("orinocoRadius", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAAARadiusCompatibilityMode.setStatus('current')
bsnAAARadiusCallStationIdType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ipAddr", 0), ("macAddr", 1), ("apMacAddress", 2), ("apMacAddressSsid", 3), ("apNameSsid", 4), ("apName", 5), ("apGroupName", 6), ("flexGroupName", 7), ("apLocation", 8), ("apVlanId", 9), ("apMacEthAddress", 10), ("apMacEthAddressSsid", 11), ("apLabelAddress", 12), ("apLabelAddressSsid", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAAARadiusCallStationIdType.setStatus('current')
bsnAAALocalDatabaseSize = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAAALocalDatabaseSize.setStatus('current')
bsnAAACurrentLocalDatabaseSize = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnAAACurrentLocalDatabaseSize.setStatus('current')
bsnBlackListClientTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 6), )
if mibBuilder.loadTexts: bsnBlackListClientTable.setStatus('current')
bsnBlackListClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 6, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnBlackListClientMacAddress"))
if mibBuilder.loadTexts: bsnBlackListClientEntry.setStatus('current')
bsnBlackListClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnBlackListClientMacAddress.setStatus('current')
bsnBlackListClientDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnBlackListClientDescription.setStatus('current')
bsnBlackListClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 6, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnBlackListClientRowStatus.setStatus('current')
bsnExternalPolicyServerTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19), )
if mibBuilder.loadTexts: bsnExternalPolicyServerTable.setStatus('obsolete')
bsnExternalPolicyServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerIndex"))
if mibBuilder.loadTexts: bsnExternalPolicyServerEntry.setStatus('obsolete')
bsnExternalPolicyServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnExternalPolicyServerIndex.setStatus('obsolete')
bsnExternalPolicyServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnExternalPolicyServerAddress.setStatus('obsolete')
bsnExternalPolicyServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnExternalPolicyServerPortNumber.setStatus('obsolete')
bsnExternalPolicyServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnExternalPolicyServerKey.setStatus('obsolete')
bsnExternalPolicyServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnExternalPolicyServerAdminStatus.setStatus('obsolete')
bsnExternalPolicyServerConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnExternalPolicyServerConnectionStatus.setStatus('obsolete')
bsnExternalPolicyServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 19, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnExternalPolicyServerRowStatus.setStatus('obsolete')
bsnExternalPolicyServerAclName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 5, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnExternalPolicyServerAclName.setStatus('current')
bsnAcceptSelfSignedCertificate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAcceptSelfSignedCertificate.setStatus('current')
bsnSystemClockTime = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 3, 1, 49), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnSystemClockTime.setStatus('current')
bsnAPAuthorizationTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 5, 22), )
if mibBuilder.loadTexts: bsnAPAuthorizationTable.setStatus('current')
bsnAPAuthorizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 5, 22, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPAuthMacAddress"))
if mibBuilder.loadTexts: bsnAPAuthorizationEntry.setStatus('current')
bsnAPAuthMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 22, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPAuthMacAddress.setStatus('current')
bsnAPAuthCertificateType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("mic", 1), ("ssc", 2), ("locMic", 3), ("locSsc", 4), ("none", 5), ("locSsc256", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPAuthCertificateType.setStatus('current')
bsnAPAuthHashKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 22, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPAuthHashKey.setStatus('current')
bsnAPAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 5, 22, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPAuthRowStatus.setStatus('current')
bsnWrasIpsecCACertificate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnWrasIpsecCACertificate.setStatus('current')
bsnWrasIpsecCACertificateUpdate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnWrasIpsecCACertificateUpdate.setStatus('current')
bsnWrasIpsecCertTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 9, 3), )
if mibBuilder.loadTexts: bsnWrasIpsecCertTable.setStatus('current')
bsnWrasIpsecCertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 9, 3, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCertName"))
if mibBuilder.loadTexts: bsnWrasIpsecCertEntry.setStatus('current')
bsnWrasIpsecCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 9, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnWrasIpsecCertName.setStatus('current')
bsnWrasIpsecCertificateUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnWrasIpsecCertificateUpdate.setStatus('current')
bsnWrasIpsecCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnWrasIpsecCertificate.setStatus('current')
bsnWrasIpsecCertPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 9, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnWrasIpsecCertPassword.setStatus('current')
bsnWrasIpsecCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 9, 3, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnWrasIpsecCertStatus.setStatus('current')
bsnTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1))
bsnTrapVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2))
bsnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3))
bsnDot11StationTrapControlMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnDot11StationTrapControlMask.setStatus('current')
bsnDot11StationDisassociate = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 1)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnDot11StationDisassociate.setStatus('current')
bsnDot11StationDeauthenticate = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 2)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnDot11StationDeauthenticate.setStatus('current')
bsnDot11StationAuthenticateFail = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 3)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnDot11StationAuthenticateFail.setStatus('current')
bsnDot11StationAssociateFail = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 4)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnDot11StationAssociateFail.setStatus('current')
bsnDot11StationBlacklisted = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 52)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnStationBlacklistingReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnDot11StationBlacklisted.setStatus('current')
bsnDot11StationAssociate = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 53)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnDot11StationAssociate.setStatus('current')
bsnAPTrapControlMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 2), Unsigned32().clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPTrapControlMask.setStatus('current')
bsnAPUp = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 5)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"))
if mibBuilder.loadTexts: bsnAPUp.setStatus('obsolete')
bsnAPDown = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 6)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"))
if mibBuilder.loadTexts: bsnAPDown.setStatus('obsolete')
bsnAPAssociated = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 7)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPortNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPAssociated.setStatus('deprecated')
bsnAPDisassociated = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 8)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPDisassociated.setStatus('current')
bsnAPIfUp = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 9)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfUpDownCause"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPIfUp.setStatus('deprecated')
bsnAPIfDown = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 10)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAdminStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfAdminStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfUpDownCause"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPIfDown.setStatus('deprecated')
bsnAPProfileTrapControlMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPProfileTrapControlMask.setStatus('current')
bsnAPLoadProfileFailed = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 11)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPLoadProfileFailed.setStatus('current')
bsnAPNoiseProfileFailed = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 12)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPNoiseProfileFailed.setStatus('current')
bsnAPInterferenceProfileFailed = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 13)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPInterferenceProfileFailed.setStatus('current')
bsnAPMacAddrTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 20), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPMacAddrTrapVariable.setStatus('current')
bsnAPNameTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPNameTrapVariable.setStatus('current')
bsnAPSlotIdTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 22), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPSlotIdTrapVariable.setStatus('current')
bsnAPChannelNumberTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 23), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPChannelNumberTrapVariable.setStatus('current')
bsnAPCoverageThresholdTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 24), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPCoverageThresholdTrapVariable.setStatus('current')
bsnAPCoverageFailedClients = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 25), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPCoverageFailedClients.setStatus('current')
bsnAPCoverageTotalClients = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 26), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPCoverageTotalClients.setStatus('current')
bsnClientMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 27), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnClientMacAddr.setStatus('current')
bsnClientRssi = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 28), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnClientRssi.setStatus('current')
bsnClientSnr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 29), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnClientSnr.setStatus('current')
bsnInterferenceEnergyBeforeChannelUpdate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 30), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnInterferenceEnergyBeforeChannelUpdate.setStatus('current')
bsnInterferenceEnergyAfterChannelUpdate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 31), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnInterferenceEnergyAfterChannelUpdate.setStatus('current')
bsnAPPortNumberTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 32), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPPortNumberTrapVariable.setStatus('current')
bsnAPPreviousChannelNumberTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 83), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPPreviousChannelNumberTrapVariable.setStatus('current')
bsnAPReasonCodeTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 84), Bits().clone(namedValues=NamedValues(("noReason", 0), ("signal", 1), ("noise", 2), ("interference", 3), ("load", 4), ("radar", 5), ("deviceAware", 6), ("majorSIAQEvent", 7), ("radarClear", 8), ("userInput", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPReasonCodeTrapVariable.setStatus('current')
bsnNoiseBeforeChannelUpdate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 85), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnNoiseBeforeChannelUpdate.setStatus('current')
bsnNoiseAfterChannelUpdate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 86), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnNoiseAfterChannelUpdate.setStatus('current')
bsnInterferenceBeforeChannelUpdate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 87), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnInterferenceBeforeChannelUpdate.setStatus('current')
bsnInterferenceAfterChannelUpdate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 88), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnInterferenceAfterChannelUpdate.setStatus('current')
bsnAPCoverageProfileFailed = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 14)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNameTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSlotIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageThresholdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageFailedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageTotalClients"), ("AIRESPACE-WIRELESS-MIB", "bsnClientMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnClientRssi"), ("AIRESPACE-WIRELESS-MIB", "bsnClientSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPCoverageProfileFailed.setStatus('current')
bsnAPLoadProfileUpdatedToPass = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 37)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPLoadProfileUpdatedToPass.setStatus('current')
bsnAPNoiseProfileUpdatedToPass = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 38)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPNoiseProfileUpdatedToPass.setStatus('current')
bsnAPInterferenceProfileUpdatedToPass = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 39)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPInterferenceProfileUpdatedToPass.setStatus('current')
bsnAPCoverageProfileUpdatedToPass = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 40)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPCoverageProfileUpdatedToPass.setStatus('current')
bsnAPParamUpdateTrapControlMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPParamUpdateTrapControlMask.setStatus('current')
bsnAPCurrentTxPowerChanged = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 15)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPCurrentTxPowerChanged.setStatus('current')
bsnAPCurrentChannelChanged = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 16)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSlotIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPChannelNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceEnergyBeforeChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceEnergyAfterChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPreviousChannelNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPReasonCodeTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnNoiseBeforeChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnNoiseAfterChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceBeforeChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceAfterChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPCurrentChannelChanged.setStatus('current')
bsnRrmDot11aGroupingDone = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 21)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aGroupLeaderMacAddr"))
if mibBuilder.loadTexts: bsnRrmDot11aGroupingDone.setStatus('current')
bsnRrmDot11bGroupingDone = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 22)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bGroupLeaderMacAddr"))
if mibBuilder.loadTexts: bsnRrmDot11bGroupingDone.setStatus('current')
bsnConfigSaveTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnConfigSaveTrapEnable.setStatus('current')
bsnConfigSaved = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 23))
if mibBuilder.loadTexts: bsnConfigSaved.setStatus('current')
bsnDot11EssCreated = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 24)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIndex"))
if mibBuilder.loadTexts: bsnDot11EssCreated.setStatus('current')
bsnDot11EssDeleted = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 25)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIndex"))
if mibBuilder.loadTexts: bsnDot11EssDeleted.setStatus('current')
bsnAuthFailureUserName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAuthFailureUserName.setStatus('current')
bsnAuthFailureUserType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mgmtUser", 1), ("wlanUser", 2), ("macFilter", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAuthFailureUserType.setStatus('current')
bsnRADIUSServerTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRADIUSServerTrapEnable.setStatus('current')
bsnAuthenticationFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAuthenticationFailureTrapEnable.setStatus('current')
bsn80211SecurityTrapControlMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsn80211SecurityTrapControlMask.setStatus('current')
bsnWpsTrapControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnWpsTrapControlEnable.setStatus('current')
bsnRADIUSServerNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 26))
if mibBuilder.loadTexts: bsnRADIUSServerNotResponding.setStatus('current')
bsnAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 27)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAuthFailureUserType"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthFailureUserName"))
if mibBuilder.loadTexts: bsnAuthenticationFailure.setStatus('current')
bsnRemoteIPv4Address = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnRemoteIPv4Address.setStatus('current')
bsnIpsecErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnIpsecErrorCount.setStatus('current')
bsnIpsecSPI = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnIpsecSPI.setStatus('current')
bsnRemoteUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnRemoteUdpPort.setStatus('current')
bsnIkeAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnIkeAuthMethod.setStatus('current')
bsnIkeTotalInitFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnIkeTotalInitFailures.setStatus('current')
bsnIkeTotalInitNoResponses = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnIkeTotalInitNoResponses.setStatus('current')
bsnIkeTotalRespFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 10), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnIkeTotalRespFailures.setStatus('current')
bsnNotifiesSent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnNotifiesSent.setStatus('current')
bsnNotifiesReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnNotifiesReceived.setStatus('current')
bsnSuiteInitFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSuiteInitFailures.setStatus('current')
bsnSuiteRespondFailures = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSuiteRespondFailures.setStatus('current')
bsnInitiatorCookie = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnInitiatorCookie.setStatus('current')
bsnResponderCookie = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnResponderCookie.setStatus('current')
bsnIsakmpInvalidCookies = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnIsakmpInvalidCookies.setStatus('current')
bsnIpsecTrapsMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnIpsecTrapsMask.setStatus('current')
bsnIpsecEspAuthFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 28)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecErrorCount"))
if mibBuilder.loadTexts: bsnIpsecEspAuthFailureTrap.setStatus('current')
bsnIpsecEspReplayFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 29)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecErrorCount"))
if mibBuilder.loadTexts: bsnIpsecEspReplayFailureTrap.setStatus('current')
bsnIpsecEspInvalidSpiTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 31)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecSPI"))
if mibBuilder.loadTexts: bsnIpsecEspInvalidSpiTrap.setStatus('current')
bsnIpsecIkeNegFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 33)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnRemoteUdpPort"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeAuthMethod"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalInitFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalInitNoResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalRespFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesSent"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesReceived"))
if mibBuilder.loadTexts: bsnIpsecIkeNegFailure.setStatus('current')
bsnIpsecSuiteNegFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 34)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnSuiteInitFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnSuiteRespondFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesSent"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesReceived"))
if mibBuilder.loadTexts: bsnIpsecSuiteNegFailure.setStatus('current')
bsnIpsecInvalidCookieTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 35)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnRemoteUdpPort"), ("AIRESPACE-WIRELESS-MIB", "bsnInitiatorCookie"), ("AIRESPACE-WIRELESS-MIB", "bsnResponderCookie"), ("AIRESPACE-WIRELESS-MIB", "bsnIsakmpInvalidCookies"))
if mibBuilder.loadTexts: bsnIpsecInvalidCookieTrap.setStatus('current')
bsnRogueAPTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnRogueAPTrapEnable.setStatus('current')
bsnRogueAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 36)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPOnWiredNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAdhocMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPClassType"))
if mibBuilder.loadTexts: bsnRogueAPDetected.setStatus('deprecated')
bsnRogueAPRemoved = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 41)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPName"))
if mibBuilder.loadTexts: bsnRogueAPRemoved.setStatus('current')
bsnRogueAPDetectedOnWiredNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 59)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPOnWiredNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnRogueAPDetectedOnWiredNetwork.setStatus('current')
bsnApHasNoRadioCards = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 60)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnApHasNoRadioCards.setStatus('current')
bsnDuplicateIpAddressReported = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 61)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpReportedByAP"), ("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpTrapClear"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnDuplicateIpAddressReported.setStatus('current')
bsnAPContainedAsARogue = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 62)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPContainedAsARogue.setStatus('current')
bsnNetworkStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 69)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnNetworkType"), ("AIRESPACE-WIRELESS-MIB", "bsnNetworkState"))
if mibBuilder.loadTexts: bsnNetworkStateChanged.setStatus('current')
bsnSignatureAttackDetected = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 70)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureType"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureName"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackPreced"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackFrequency"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackerMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureMacInfo"))
if mibBuilder.loadTexts: bsnSignatureAttackDetected.setStatus('current')
bsnAPRadioCardTxFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 71)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPRadioCardTxFailure.setStatus('current')
bsnAPRadioCardTxFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 72)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPRadioCardTxFailureClear.setStatus('current')
bsnAPRadioCardRxFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 73)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPRadioCardRxFailure.setStatus('current')
bsnAPRadioCardRxFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 74)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPRadioCardRxFailureClear.setStatus('current')
bsnAPImpersonationDetected = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 75)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnImpersonatedAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnImpersonatingSourceMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPImpersonationDetected.setStatus('current')
bsnAPRegulatoryDomainMismatch = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 79)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnApRegulatoryDomain"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11CountryIndex"))
if mibBuilder.loadTexts: bsnAPRegulatoryDomainMismatch.setStatus('deprecated')
bsnTrustedApHasInvalidPreamble = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 76)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApPreambleUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApPreambleRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"))
if mibBuilder.loadTexts: bsnTrustedApHasInvalidPreamble.setStatus('current')
bsnCurrentRadiosCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 18), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnCurrentRadiosCount.setStatus('current')
bsnLicenseRadioCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnLicenseRadioCount.setStatus('current')
bsnMaxRogueCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 33), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnMaxRogueCount.setStatus('current')
bsnStationMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 34), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnStationMacAddress.setStatus('current')
bsnStationAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 35), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnStationAPMacAddr.setStatus('current')
bsnStationAPIfSlotId = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnStationAPIfSlotId.setStatus('current')
bsnStationReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 40, 41, 42, 43, 44, 45, 46, 99, 101, 105, 106, 200, 201, 202, 203))).clone(namedValues=NamedValues(("unspecified", 1), ("previousAuthNotValid", 2), ("deauthenticationLeaving", 3), ("disassociationDueToInactivity", 4), ("disassociationAPBusy", 5), ("class2FrameFromNonAuthStation", 6), ("class2FrameFromNonAssStation", 7), ("disassociationStaHasLeft", 8), ("staReqAssociationWithoutAuth", 9), ("invalidInformationElement", 40), ("groupCipherInvalid", 41), ("unicastCipherInvalid", 42), ("akmpInvalid", 43), ("unsupportedRsnVersion", 44), ("invalidRsnIeCapabilities", 45), ("cipherSuiteRejected", 46), ("missingReasonCode", 99), ("maxAssociatedClientsReached", 101), ("maxAssociatedClientsReachedOnRadio", 105), ("maxAssociatedClientsReachedOnWlan", 106), ("unSpecifiedQosFailure", 200), ("qosPolicyMismatch", 201), ("inSufficientBandwidth", 202), ("inValidQosParams", 203)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnStationReasonCode.setStatus('current')
bsnStationBlacklistingReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("failed80211Auth", 1), ("failedAssociation", 2), ("ipTheft", 3), ("failed8021xAuth", 4), ("failedWebAuth", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnStationBlacklistingReasonCode.setStatus('current')
bsnStationUserName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 39), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnStationUserName.setStatus('current')
bsnRogueAPOnWiredNetwork = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnRogueAPOnWiredNetwork.setStatus('current')
bsnNavDosAttackSourceMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 41), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnNavDosAttackSourceMacAddr.setStatus('current')
bsnWlanIdTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 517))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnWlanIdTrapVariable.setStatus('current')
bsnUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 43), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnUserIpAddress.setStatus('current')
bsnRogueAdhocMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnRogueAdhocMode.setStatus('current')
bsnClearTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnClearTrapVariable.setStatus('current')
bsnDuplicateIpTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 46), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnDuplicateIpTrapVariable.setStatus('current')
bsnDuplicateIpTrapClear = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnDuplicateIpTrapClear.setStatus('current')
bsnDuplicateIpReportedByAP = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnDuplicateIpReportedByAP.setStatus('current')
bsnTrustedApRadioPolicyRequired = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("dot11b", 1), ("dot11a", 2), ("dot11bg", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnTrustedApRadioPolicyRequired.setStatus('current')
bsnTrustedApEncryptionUsed = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("open", 1), ("wep", 2), ("wpa", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnTrustedApEncryptionUsed.setStatus('current')
bsnTrustedApEncryptionRequired = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("open", 1), ("wep", 2), ("wpa", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnTrustedApEncryptionRequired.setStatus('current')
bsnTrustedApRadioPolicyUsed = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("dot11b", 1), ("dot11a", 2), ("dot11bg", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnTrustedApRadioPolicyUsed.setStatus('current')
bsnNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnNetworkType.setStatus('current')
bsnNetworkState = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnNetworkState.setStatus('current')
bsnSignatureType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("custom", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureType.setStatus('current')
bsnSignatureName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureName.setStatus('current')
bsnSignatureDescription = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureDescription.setStatus('current')
bsnImpersonatedAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 58), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnImpersonatedAPMacAddr.setStatus('current')
bsnTrustedApPreambleUsed = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("short", 1), ("long", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnTrustedApPreambleUsed.setStatus('current')
bsnTrustedApPreambleRequired = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("short", 1), ("long", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnTrustedApPreambleRequired.setStatus('current')
bsnSignatureAttackPreced = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureAttackPreced.setStatus('current')
bsnSignatureAttackFrequency = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureAttackFrequency.setStatus('current')
bsnSignatureAttackChannel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureAttackChannel.setStatus('current')
bsnSignatureAttackerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 64), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureAttackerMacAddress.setStatus('current')
bsnApRegulatoryDomain = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 9, 16, 21, 32, 33, 34, 35, 48, 65535))).clone(namedValues=NamedValues(("a", 0), ("e", 1), ("i", 6), ("j", 9), ("c", 16), ("n", 21), ("k", 32), ("p", 33), ("s", 34), ("t", 35), ("r", 48), ("notavailable", 65535)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnApRegulatoryDomain.setStatus('current')
bsnRadiosExceedLicenseCount = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 42)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnCurrentRadiosCount"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseRadioCount"))
if mibBuilder.loadTexts: bsnRadiosExceedLicenseCount.setStatus('current')
bsnSensedTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 43)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnSensorTemperature"))
if mibBuilder.loadTexts: bsnSensedTemperatureTooHigh.setStatus('current')
bsnSensedTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 44)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnSensorTemperature"))
if mibBuilder.loadTexts: bsnSensedTemperatureTooLow.setStatus('current')
bsnTemperatureSensorFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 45))
if mibBuilder.loadTexts: bsnTemperatureSensorFailure.setStatus('current')
bsnTemperatureSensorClear = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 46)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnSensorTemperature"))
if mibBuilder.loadTexts: bsnTemperatureSensorClear.setStatus('current')
bsnPOEControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 47))
if mibBuilder.loadTexts: bsnPOEControllerFailure.setStatus('current')
bsnMaxRogueCountExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 48)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCount"))
if mibBuilder.loadTexts: bsnMaxRogueCountExceeded.setStatus('current')
bsnMaxRogueCountClear = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 49)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCount"))
if mibBuilder.loadTexts: bsnMaxRogueCountClear.setStatus('current')
bsnApMaxRogueCountExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 50)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnApMaxRogueCountExceeded.setStatus('current')
bsnApMaxRogueCountClear = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 51)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnApMaxRogueCountClear.setStatus('current')
bsnApBigNavDosAttack = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 55)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSlotIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnNavDosAttackSourceMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnApBigNavDosAttack.setStatus('current')
bsnTooManyUnsuccessLoginAttempts = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 56)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"))
if mibBuilder.loadTexts: bsnTooManyUnsuccessLoginAttempts.setStatus('current')
bsnWepKeyDecryptError = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 57)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"))
if mibBuilder.loadTexts: bsnWepKeyDecryptError.setStatus('current')
bsnWpaMicErrorCounterActivated = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 58)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnWlanIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnWpaMicErrorCounterActivated.setStatus('current')
bsnAdhocRogueAutoContained = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 65)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"))
if mibBuilder.loadTexts: bsnAdhocRogueAutoContained.setStatus('current')
bsnRogueApAutoContained = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 66)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"))
if mibBuilder.loadTexts: bsnRogueApAutoContained.setStatus('current')
bsnTrustedApHasInvalidEncryption = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 67)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEncryptionUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEncryptionRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"))
if mibBuilder.loadTexts: bsnTrustedApHasInvalidEncryption.setStatus('current')
bsnTrustedApHasInvalidRadioPolicy = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 68)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApRadioPolicyUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApRadioPolicyRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"))
if mibBuilder.loadTexts: bsnTrustedApHasInvalidRadioPolicy.setStatus('current')
bsnTrustedApHasInvalidSsid = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 63)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"))
if mibBuilder.loadTexts: bsnTrustedApHasInvalidSsid.setStatus('current')
bsnTrustedApIsMissing = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 64)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"))
if mibBuilder.loadTexts: bsnTrustedApIsMissing.setStatus('current')
bsnImpersonatingSourceMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 74), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnImpersonatingSourceMacAddr.setStatus('current')
bsnSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 7, 1))
bsnSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnSyslogEnable.setStatus('current')
bsnSyslogRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnSyslogRemoteAddress.setStatus('current')
bsnPing = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2))
bsnPingTestTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1), )
if mibBuilder.loadTexts: bsnPingTestTable.setStatus('current')
bsnPingTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnPingTestId"))
if mibBuilder.loadTexts: bsnPingTestEntry.setStatus('current')
bsnPingTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnPingTestId.setStatus('current')
bsnPingTestIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnPingTestIPAddress.setStatus('current')
bsnPingTestSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnPingTestSendCount.setStatus('current')
bsnPingTestReceivedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnPingTestReceivedCount.setStatus('current')
bsnPingTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inprogress", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnPingTestStatus.setStatus('current')
bsnPingTestMaxTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 6), Unsigned32()).setUnits('mSec').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnPingTestMaxTimeInterval.setStatus('current')
bsnPingTestMinTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 7), Unsigned32()).setUnits('mSec').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnPingTestMinTimeInterval.setStatus('current')
bsnPingTestAvgTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 8), Unsigned32()).setUnits('mSec').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnPingTestAvgTimeInterval.setStatus('current')
bsnPingTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 2, 1, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnPingTestRowStatus.setStatus('current')
bsnLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3))
bsnLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1), )
if mibBuilder.loadTexts: bsnLinkTestTable.setStatus('deprecated')
bsnLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnLinkTestId"))
if mibBuilder.loadTexts: bsnLinkTestEntry.setStatus('deprecated')
bsnLinkTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLinkTestId.setStatus('deprecated')
bsnLinkTestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLinkTestMacAddress.setStatus('deprecated')
bsnLinkTestSendPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLinkTestSendPktCount.setStatus('deprecated')
bsnLinkTestSendPktLength = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLinkTestSendPktLength.setStatus('deprecated')
bsnLinkTestReceivedPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnLinkTestReceivedPktCount.setStatus('deprecated')
bsnLinkTestClientRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnLinkTestClientRSSI.setStatus('deprecated')
bsnLinkTestLocalSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnLinkTestLocalSNR.setStatus('deprecated')
bsnLinkTestLocalRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnLinkTestLocalRSSI.setStatus('deprecated')
bsnLinkTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inprogress", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnLinkTestStatus.setStatus('deprecated')
bsnLinkTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 7, 3, 1, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnLinkTestRowStatus.setStatus('deprecated')
bsnMobilityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1))
bsnMobilityStats = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2))
bsnMobilityProtocolPortNum = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMobilityProtocolPortNum.setStatus('current')
bsnMobilityDynamicDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMobilityDynamicDiscovery.setStatus('current')
bsnMobilityStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("resetNow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnMobilityStatsReset.setStatus('current')
bsnMobilityGroupMembersTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 10), )
if mibBuilder.loadTexts: bsnMobilityGroupMembersTable.setStatus('current')
bsnMobilityGroupMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 10, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobilityGroupMemberMacAddress"))
if mibBuilder.loadTexts: bsnMobilityGroupMembersEntry.setStatus('current')
bsnMobilityGroupMemberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 10, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMobilityGroupMemberMacAddress.setStatus('current')
bsnMobilityGroupMemberIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 10, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMobilityGroupMemberIPAddress.setStatus('current')
bsnMobilityGroupMemberGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMobilityGroupMemberGroupName.setStatus('current')
bsnMobilityGroupMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 10, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMobilityGroupMemberRowStatus.setStatus('current')
bsnMobilityAnchorsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 11), )
if mibBuilder.loadTexts: bsnMobilityAnchorsTable.setStatus('deprecated')
bsnMobilityAnchorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 11, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnMobilityAnchorWlanSsid"), (0, "AIRESPACE-WIRELESS-MIB", "bsnMobilityAnchorSwitchIPAddress"))
if mibBuilder.loadTexts: bsnMobilityAnchorsEntry.setStatus('deprecated')
bsnMobilityAnchorWlanSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMobilityAnchorWlanSsid.setStatus('deprecated')
bsnMobilityAnchorSwitchIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 11, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMobilityAnchorSwitchIPAddress.setStatus('deprecated')
bsnMobilityAnchorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 1, 11, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnMobilityAnchorRowStatus.setStatus('deprecated')
bsnTotalHandoffRequests = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffRequests.setStatus('current')
bsnTotalHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffs.setStatus('current')
bsnCurrentExportedClients = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCurrentExportedClients.setStatus('current')
bsnTotalExportedClients = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalExportedClients.setStatus('current')
bsnCurrentImportedClients = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnCurrentImportedClients.setStatus('current')
bsnTotalImportedClients = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalImportedClients.setStatus('current')
bsnTotalHandoffErrors = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffErrors.setStatus('current')
bsnTotalCommunicationErrors = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalCommunicationErrors.setStatus('current')
bsnTotalReceiveErrors = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalReceiveErrors.setStatus('current')
bsnTotalTransmitErrors = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalTransmitErrors.setStatus('current')
bsnTotalResponsesRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalResponsesRetransmitted.setStatus('current')
bsnTotalHandoffEndRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffEndRequestsReceived.setStatus('current')
bsnTotalStateTransitionsDisallowed = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalStateTransitionsDisallowed.setStatus('current')
bsnTotalResourceErrors = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalResourceErrors.setStatus('current')
bsnTotalHandoffRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffRequestsSent.setStatus('current')
bsnTotalHandoffRepliesReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffRepliesReceived.setStatus('current')
bsnTotalHandoffAsLocalReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffAsLocalReceived.setStatus('current')
bsnTotalHandoffAsForeignReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffAsForeignReceived.setStatus('current')
bsnTotalHandoffDeniesReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffDeniesReceived.setStatus('current')
bsnTotalAnchorRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorRequestsSent.setStatus('current')
bsnTotalAnchorDenyReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorDenyReceived.setStatus('current')
bsnTotalAnchorGrantReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorGrantReceived.setStatus('current')
bsnTotalAnchorTransferReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorTransferReceived.setStatus('current')
bsnTotalHandoffRequestsIgnored = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffRequestsIgnored.setStatus('current')
bsnTotalPingPongHandoffRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalPingPongHandoffRequestsDropped.setStatus('current')
bsnTotalHandoffRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffRequestsDropped.setStatus('current')
bsnTotalHandoffRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffRequestsDenied.setStatus('current')
bsnTotalClientHandoffAsLocal = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalClientHandoffAsLocal.setStatus('current')
bsnTotalClientHandoffAsForeign = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalClientHandoffAsForeign.setStatus('current')
bsnTotalAnchorRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorRequestsReceived.setStatus('current')
bsnTotalAnchorRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorRequestsDenied.setStatus('current')
bsnTotalAnchorRequestsGranted = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorRequestsGranted.setStatus('current')
bsnTotalAnchorTransferred = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalAnchorTransferred.setStatus('current')
bsnTotalHandoffRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnTotalHandoffRequestsReceived.setStatus('current')
bsnMobilityGroupDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9), )
if mibBuilder.loadTexts: bsnMobilityGroupDirectoryTable.setStatus('current')
bsnMobilityGroupDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnGroupDirectoryMemberMacAddress"))
if mibBuilder.loadTexts: bsnMobilityGroupDirectoryEntry.setStatus('current')
bsnGroupDirectoryMemberIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGroupDirectoryMemberIPAddress.setStatus('current')
bsnGroupDirectoryMemberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGroupDirectoryMemberMacAddress.setStatus('current')
bsnGroupDirectoryDicoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("rrm", 2), ("broadcast", 3), ("learned", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnGroupDirectoryDicoveryType.setStatus('current')
bsnMemberCurrentAnchoredClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberCurrentAnchoredClients.setStatus('current')
bsnMemberTotalAnchoredClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberTotalAnchoredClients.setStatus('current')
bsnMemberCurrentExportedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberCurrentExportedClients.setStatus('current')
bsnMemberTotalExportedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberTotalExportedClients.setStatus('current')
bsnMemberCurrentImportedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberCurrentImportedClients.setStatus('current')
bsnMemberTotalImportedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberTotalImportedClients.setStatus('current')
bsnMemberTotalHandoffErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberTotalHandoffErrors.setStatus('current')
bsnMemberTotalCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 8, 2, 9, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsnMemberTotalCommunicationErrors.setStatus('current')
bsnAPGroupsVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 2, 10))
bsnAPGroupsVlanFeature = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsnAPGroupsVlanFeature.setStatus('current')
bsnAPGroupsVlanTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 10, 2), )
if mibBuilder.loadTexts: bsnAPGroupsVlanTable.setStatus('current')
bsnAPGroupsVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 10, 2, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanName"))
if mibBuilder.loadTexts: bsnAPGroupsVlanEntry.setStatus('current')
bsnAPGroupsVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 10, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPGroupsVlanName.setStatus('current')
bsnAPGroupsVlanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPGroupsVlanDescription.setStatus('current')
bsnAPGroupsVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 10, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPGroupsVlanRowStatus.setStatus('current')
bsnAPGroupsVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 2, 10, 3), )
if mibBuilder.loadTexts: bsnAPGroupsVlanMappingTable.setStatus('deprecated')
bsnAPGroupsVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 2, 10, 3, 1), ).setIndexNames((0, "AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanName"), (0, "AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanMappingSsid"))
if mibBuilder.loadTexts: bsnAPGroupsVlanMappingEntry.setStatus('deprecated')
bsnAPGroupsVlanMappingSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 10, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPGroupsVlanMappingSsid.setStatus('deprecated')
bsnAPGroupsVlanMappingInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 10, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPGroupsVlanMappingInterfaceName.setStatus('deprecated')
bsnAPGroupsVlanMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 2, 10, 3, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsnAPGroupsVlanMappingRowStatus.setStatus('deprecated')
bsnAPIPAddressFallback = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 77)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnApIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPStaticIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnAPIPAddressFallback.setStatus('current')
bsnAPFunctionalityDisabled = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 78)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnApFunctionalityDisableReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseKeyTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseKeyFeatureSetTrapVariable"))
if mibBuilder.loadTexts: bsnAPFunctionalityDisabled.setStatus('current')
bsnLicenseKeyTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnLicenseKeyTrapVariable.setStatus('current')
bsnApFunctionalityDisableReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("licenseKeyExpired", 1), ("licenseKeyDeleted", 2), ("licenseKeyFeatureMismatch", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnApFunctionalityDisableReasonCode.setStatus('current')
bsnLicenseKeyFeatureSetTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wps", 1), ("all", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnLicenseKeyFeatureSetTrapVariable.setStatus('current')
bsnRxMulticastQueueFull = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 80))
if mibBuilder.loadTexts: bsnRxMulticastQueueFull.setStatus('current')
bsnAPAuthorizationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("keymismatch", 1), ("entrydoesnotexist", 2), ("invalidCertifcate", 3), ("entryIsMIC", 4), ("aaaEntryDoesNotExist", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPAuthorizationFailureCause.setStatus('current')
bsnAPIfUpDownCause = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 0), ("radioFailure", 1), ("radioLowPower", 2), ("maxRetransmission", 3), ("echoTimeout", 4), ("configAP", 5), ("configRadio", 6), ("configNetwork", 7), ("adminConfigured", 8), ("missedRekey", 9), ("detectingInLinePower", 10), ("newDiscovery", 11)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPIfUpDownCause.setStatus('current')
bsnAPInvalidRadioType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("unsupportedRadio", 0)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnAPInvalidRadioType.setStatus('current')
locationNotifyContent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: locationNotifyContent.setStatus('current')
bsnSignatureMacInfo = MibScalar((1, 3, 6, 1, 4, 1, 14179, 2, 6, 2, 73), BsnTxtSignatureMacInfo()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsnSignatureMacInfo.setStatus('current')
bsnRadarChannelDetected = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 81)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnRadarChannelDetected.setStatus('current')
bsnRadarChannelCleared = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 82)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: bsnRadarChannelCleared.setStatus('current')
bsnAPAuthorizationFailure = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 83)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthCertificateType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthorizationFailureCause"))
if mibBuilder.loadTexts: bsnAPAuthorizationFailure.setStatus('current')
radioCoreDumpTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 84)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: radioCoreDumpTrap.setStatus('current')
invalidRadioTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 85)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPInvalidRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: invalidRadioTrap.setStatus('current')
countryChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 86)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11CountryIndex"))
if mibBuilder.loadTexts: countryChangeTrap.setStatus('deprecated')
unsupportedAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 87)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"))
if mibBuilder.loadTexts: unsupportedAPTrap.setStatus('current')
heartbeatLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 88))
if mibBuilder.loadTexts: heartbeatLossTrap.setStatus('current')
locationNotifyTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 2, 6, 3, 89)).setObjects(("AIRESPACE-WIRELESS-MIB", "locationNotifyContent"))
if mibBuilder.loadTexts: locationNotifyTrap.setStatus('current')
bsnWrasCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14179, 2, 51, 1)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnEssGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnApGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11Group"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnAAAGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnTrapsGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnUtilityGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasCompliance = bsnWrasCompliance.setStatus('deprecated')
bsnWrasComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 14179, 2, 51, 2)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnEssGroupRev1"), ("AIRESPACE-WIRELESS-MIB", "bsnApGroupRev1"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11GroupRev1"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnAAAGroupRev1"), ("AIRESPACE-WIRELESS-MIB", "bsnTrapsGroupRev1"), ("AIRESPACE-WIRELESS-MIB", "bsnWrasTrapRev1"), ("AIRESPACE-WIRELESS-MIB", "bsnUtilityGroupRev1"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasComplianceRev1 = bsnWrasComplianceRev1.setStatus('current')
bsnEssGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 1)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssSessionTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssMacFiltering"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssAdminStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssSecurityAuthType"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPEncryptionType"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPDefaultKey"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPKeyIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPKeyFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess8021xSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess8021xEncryptionType"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIpsecSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnEncrTransform"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnAuthTransform"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkeAuthMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnSharedKey"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnSharedKeySize"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkePhase1Mode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkeLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkeDHGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIpsecPassthruSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnPassthruGateway"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWebSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadioPolicy"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssQualityOfService"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssDhcpRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssDhcpServerIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnContivityMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnQotdServerAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssBlacklistTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssNumberOfMobileStations"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWebPassthru"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssCraniteSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssBlacklistingCapability"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssInterfaceName"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssAclName"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssAAAOverride"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWepAllowSharedKeyAuth"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssFortressSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssL2tpSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssBroadcastSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssExternalPolicyValidation"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWmePolicySetting"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess80211ePolicySetting"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWebPassthroughEmail"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess7920PhoneSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAuthPrimaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAuthSecondaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAuthTertiaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAcctPrimaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAcctSecondaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAcctTertiaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationEssIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMobilityStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAID"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAnchorAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationCFPollable"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationCFPollRequest"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationChannelAgilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPBCCOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationShortPreambleOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSessionTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAuthenticationAlgorithm"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationWepState"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationDeleteAction"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPolicyManagerState"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSecurityPolicyStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMirrorMode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationInterface"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationApMode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationVlanId"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPolicyType"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationEncryptionCypher"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationEapType"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationCcxVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationE2eVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationStatusCode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPerRadioPerVapIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationBytesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationBytesSent"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPolicyErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPacketsReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPacketsSent"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPTotalDetectingAPs"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPFirstReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPLastReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPOnNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPTotalClients"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPMaxDetectedRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPSSID"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPState"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentChannelCount"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentChannels"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPWepMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPPreamble"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPWpaMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByIpMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApName"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiData"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByUserMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientTotalDetectingAPs"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientFirstReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientLastReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientBSSID"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientContainmentLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientState"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientDot11MacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosProfileName"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosProfileDesc"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosAverageDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosBurstDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosAvgRealTimeDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosBurstRealTimeDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosMaxRFUsagePerAP"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosProfileQueueDepth"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11WiredQosProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11802Dot1PTag"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11ResetProfileToDefault"), ("AIRESPACE-WIRELESS-MIB", "bsnTagDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnTagType"), ("AIRESPACE-WIRELESS-MIB", "bsnTagTimeInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnTagBatteryStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnTagLastReported"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApName"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiData"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnTagBytesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTagPacketsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnEssGroup = bsnEssGroup.setStatus('deprecated')
bsnApGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 2)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNumOfSlots"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPLocation"), ("AIRESPACE-WIRELESS-MIB", "bsnAPMonitorOnlyMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAPOperationStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSoftwareVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnAPBootVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPrimaryMwarName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPReset"), ("AIRESPACE-WIRELESS-MIB", "bsnAPStatsTimer"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPModel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSerialNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPClearConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnApIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPMirrorMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRemoteModeSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnAPType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSecondaryMwarName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPTertiaryMwarName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIsStaticIP"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNetmask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGateway"), ("AIRESPACE-WIRELESS-MIB", "bsnAPStaticIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPBridgingSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupVlanName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIOSVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCertificateType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPEthernetMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAdminStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyChannelAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyTxPowerControl"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaDiversity"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCellSiteConfigId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfNumberOfVaps"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfOperStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaOptions"), ("AIRESPACE-WIRELESS-MIB", "bsnApIfNoOfUsers"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverride"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPacketsSniffingFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSniffChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSniffServerIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfAntennaGain"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfChannelList"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfAbsolutePowerList"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRegulatoryDomainSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfAdminStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11BeaconPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MediumOccupancyLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11CFPPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11CFPMaxDuration"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11OperationalRateSet"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11DTIMPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MultiDomainCapabilityImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MultiDomainCapabilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11CountryString"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11SmtParamsConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11BSSID"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MaximumTransmitPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FirstChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11NumberofChannels"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacShortRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacLongRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacMaxTransmitMSDULifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacParamsConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacMaxReceiveLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TransmittedFragmentCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MulticastTransmittedFrameCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11RetryCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MultipleRetryCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FrameDuplicateCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11RTSSuccessCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11RTSFailureCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11ACKFailureCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11ReceivedFragmentCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MulticastReceivedFrameCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FCSErrorCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TransmittedFrameCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11WEPUndecryptableCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FailedCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11EDThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TIThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfProfileParamAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfForeignInterferenceThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfForeignNoiseThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRFUtilizationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfThroughputThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfMobilesThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCoverageThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfMobileMinExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCoverageExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadRxUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadTxUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadChannelUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadNumOfClients"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPoorSNRClients"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferenceChannelNo"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferencePower"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferenceUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfNoiseChannelNo"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDBNoisePower"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferenceProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfNoiseProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCoverageProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborSlot"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationRSSICoverageIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRSSILevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationCountOnRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationSNRCoverageIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSNRLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationCountOnSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverrideId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverrideSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverrideRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRole"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBackhaul"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBackhaulPAP"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBackhaulRAP"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRoutingState"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeMalformedNeighPackets"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodePoorNeighSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBlacklistPackets"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeInsufficientMemory"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRxNeighReq"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRxNeighRsp"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeTxNeighReq"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeTxNeighRsp"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeParentChanges"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeNeighTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeParentMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeAPType"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeEthernetBridge"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeHops"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighType"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighState"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighSnrUp"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighSnrDown"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighLinkSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighAdjustedEase"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighUnadjustedEase"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighRapEase"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighTxParent"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighRxParent"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighPoorSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighLastUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighParentChange"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRadarDetectedChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRadarSignalLastHeard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnApGroup = bsnApGroup.setStatus('deprecated')
bsnGlobalDot11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 3)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11PrivacyOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11AuthenticationResponseTimeOut"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11MultiDomainCapabilityImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11MultiDomainCapabilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11CountryIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11LoadBalancing"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11RogueTimer"), ("AIRESPACE-WIRELESS-MIB", "bsnPrimaryMwarForAPs"), ("AIRESPACE-WIRELESS-MIB", "bsnRtpProtocolPriority"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemCurrentTime"), ("AIRESPACE-WIRELESS-MIB", "bsnUpdateSystemTime"), ("AIRESPACE-WIRELESS-MIB", "bsnOperatingTemperatureEnvironment"), ("AIRESPACE-WIRELESS-MIB", "bsnSensorTemperature"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureAlarmLowLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureAlarmHighLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnVirtualGatewayAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRFMobilityDomainName"), ("AIRESPACE-WIRELESS-MIB", "bsnClientWatchListFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueLocationDiscoveryProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAutoContainFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnOverAirProvisionApMode"), ("AIRESPACE-WIRELESS-MIB", "bsnMaximumNumberOfConcurrentLogins"), ("AIRESPACE-WIRELESS-MIB", "bsnAutoContainRoguesAdvertisingSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnAutoContainAdhocNetworks"), ("AIRESPACE-WIRELESS-MIB", "bsnAutoContainTrustedClientsOnRogueAps"), ("AIRESPACE-WIRELESS-MIB", "bsnValidateRogueClientsAgainstAAA"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemTimezoneDelta"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemTimezoneDeltaMinutes"), ("AIRESPACE-WIRELESS-MIB", "bsnAllowAuthorizeApAgainstAAA"), ("AIRESPACE-WIRELESS-MIB", "bsnApFallbackEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnAppleTalkEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnPolicyForMisconfiguredAps"), ("AIRESPACE-WIRELESS-MIB", "bsnEncryptionPolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnPreamblePolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11ModePolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnRadioTypePolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnValidateSsidForTrustedAp"), ("AIRESPACE-WIRELESS-MIB", "bsnAlertIfTrustedApMissing"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEntryExpirationTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessive80211AssocFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessive80211AuthFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessive8021xAuthFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessiveWebAuthFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnIPTheftORReuse"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePrecedence"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureName"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureFrameType"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureAction"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureState"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureFrequency"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureQuietTime"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureMacInfo"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureMacFreq"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternOffset"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternString"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternMask"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternOffSetStart"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePrecedence"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureName"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureFrameType"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureAction"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureState"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureFrequency"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureQuietTime"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureMacInfo"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureMacFreq"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternOffset"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternString"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternMask"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternOffSetStart"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureCheckState"), ("AIRESPACE-WIRELESS-MIB", "bsnRfIdTagStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRfIdTagDataTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnRfIdTagAutoTimeoutStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNeighborAuthStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNeighborAuthAlarmThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRFNetworkName"), ("AIRESPACE-WIRELESS-MIB", "bsnFastSSIDChangeFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnBridgingZeroTouchConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnBridgingSharedSecretKey"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bNetworkStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bBeaconPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicChannelAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCurrentChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicChannelUpdateInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bInputsForDCA"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bChannelUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bChannelUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicTransmitPowerControl"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicTxPowerControlInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCurrentTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bInputsForDTP"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPowerUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPowerUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate1Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate2Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate5AndHalfMhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate11Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bShortPreamble"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDot11gSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate6Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate9Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate12Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate18Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate24Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate36Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate48Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate54Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPicoCellMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFastRoamingMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFastRoamingVoipMinRate"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFastRoamingVoipPercentage"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11b80211eMaxBandwidth"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDTPCSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bRxSopThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bMediumOccupancyLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPMaxDuration"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPollable"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPollRequest"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDTIMPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bMaximumTransmitPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFirstChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bNumberofChannels"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bShortRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bLongRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bMaxTransmitMSDULifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bMaxReceiveLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bEDThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bChannelAgilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPBCCOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bShortPreambleOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aNetworkStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aLowBandNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMediumBandNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aHighBandNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aBeaconPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicChannelAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCurrentChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicChannelUpdateInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aInputsForDCA"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aChannelUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aChannelUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicTransmitPowerControl"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCurrentTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicTxPowerControlInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aInputsForDTP"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aPowerUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aPowerUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate6Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate9Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate12Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate18Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate24Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate36Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate48Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate54Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aPicoCellMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFastRoamingMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFastRoamingVoipMinRate"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFastRoamingVoipPercentage"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11a80211eMaxBandwidth"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDTPCSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aRxSopThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMediumOccupancyLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPMaxDuration"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPollable"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPollRequest"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDTIMPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMaximumTransmitPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFirstChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aNumberofChannels"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aShortRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aLongRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMaxTransmitMSDULifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMaxReceiveLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aTIThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aChannelAgilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11hPowerConstraint"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11hChannelSwitchEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11hChannelSwitchMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aGlobalAutomaticGrouping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnGlobalDot11Group = bsnGlobalDot11Group.setStatus('deprecated')
bsnRrmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 4)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aForeignInterferenceThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aForeignNoiseThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aRFUtilizationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aThroughputThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aMobilesThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aCoverageThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aMobileMinExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aCoverageExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aSignalMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aNoiseMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aLoadMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aCoverageMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aChannelMonitorList"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aSetFactoryDefault"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bForeignInterferenceThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bForeignNoiseThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bRFUtilizationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bThroughputThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bMobilesThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bCoverageThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bMobileMinExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bCoverageExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bSignalMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bNoiseMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bLoadMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bCoverageMeasurementInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bChannelMonitorList"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bSetFactoryDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnRrmGroup = bsnRrmGroup.setStatus('current')
bsnAAAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 5)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientServerPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerRFC3576"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSec"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecAuth"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecEncryption"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecIKEPhase1"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecIKELifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecDHGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerNetworkUserConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerMgmtUserConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerRetransmitTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyWrapKEKkey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyWrapMACKkey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyWrapFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientServerPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerKey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerKeyFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSec"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecAuth"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecEncryption"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecIKEPhase1"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecIKELifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecDHGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerNetworkUserConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerRetransmitTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientRoundTripTime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessRetransmissions"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessAccepts"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessRejects"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessChallenges"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientMalformedAccessResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientBadAuthenticators"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientPendingRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientTimeouts"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientUnknownTypes"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientPacketsDropped"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientRoundTripTime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientRetransmissions"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientMalformedResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientBadAuthenticators"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientPendingRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientTimeouts"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientUnknownTypes"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientPacketsDropped"), ("AIRESPACE-WIRELESS-MIB", "bsnAclName"), ("AIRESPACE-WIRELESS-MIB", "bsnAclApplyMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleAction"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDirection"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleSourceIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleSourceIpNetmask"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDestinationIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDestinationIpNetmask"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleStartSourcePort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleEndSourcePort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleStartDestinationPort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleEndDestinationPort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDscp"), ("AIRESPACE-WIRELESS-MIB", "bsnAclNewRuleIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterWlanId"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterInterfaceName"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserWlanId"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserPassword"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserStartTime"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserRemainingTime"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserPassword"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserAccessMode"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnBlackListClientMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnBlackListClientDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnBlackListClientRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthKeyWrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthCacheCredentialsLocally"), ("AIRESPACE-WIRELESS-MIB", "bsnAAAMacDelimiter"), ("AIRESPACE-WIRELESS-MIB", "bsnAAARadiusCompatibilityMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAAARadiusCallStationIdType"), ("AIRESPACE-WIRELESS-MIB", "bsnAAALocalDatabaseSize"), ("AIRESPACE-WIRELESS-MIB", "bsnAAACurrentLocalDatabaseSize"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerAclName"), ("AIRESPACE-WIRELESS-MIB", "bsnAcceptSelfSignedCertificate"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemClockTime"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthCertificateType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthHashKey"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnAAAGroup = bsnAAAGroup.setStatus('deprecated')
bsnTrapsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 6)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11StationTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPProfileTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNameTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSlotIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPChannelNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageThresholdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageFailedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageTotalClients"), ("AIRESPACE-WIRELESS-MIB", "bsnClientMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnClientRssi"), ("AIRESPACE-WIRELESS-MIB", "bsnClientSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceEnergyBeforeChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceEnergyAfterChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPortNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPParamUpdateTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnConfigSaveTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnRADIUSServerTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthenticationFailureTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsn80211SecurityTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnWpsTrapControlEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthFailureUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthFailureUserType"), ("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecErrorCount"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecSPI"), ("AIRESPACE-WIRELESS-MIB", "bsnRemoteUdpPort"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeAuthMethod"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalInitFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalInitNoResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalRespFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesSent"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnSuiteInitFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnSuiteRespondFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnInitiatorCookie"), ("AIRESPACE-WIRELESS-MIB", "bsnResponderCookie"), ("AIRESPACE-WIRELESS-MIB", "bsnIsakmpInvalidCookies"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecTrapsMask"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnCurrentRadiosCount"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseRadioCount"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCount"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnStationBlacklistingReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPOnWiredNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAdhocMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpReportedByAP"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpTrapClear"), ("AIRESPACE-WIRELESS-MIB", "bsnNavDosAttackSourceMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnWlanIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEncryptionUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEncryptionRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApRadioPolicyUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnNetworkType"), ("AIRESPACE-WIRELESS-MIB", "bsnNetworkState"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureType"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureName"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackPreced"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackFrequency"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackerMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnApRegulatoryDomain"), ("AIRESPACE-WIRELESS-MIB", "bsnImpersonatedAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApPreambleUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApPreambleRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApRadioPolicyRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnGroupDirectoryMemberIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnGroupDirectoryMemberMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnGroupDirectoryDicoveryType"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberCurrentAnchoredClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalAnchoredClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberCurrentExportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalExportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberCurrentImportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalImportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalHandoffErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalCommunicationErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanMappingSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanMappingInterfaceName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanMappingRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseKeyTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnApFunctionalityDisableReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseKeyFeatureSetTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthorizationFailureCause"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfUpDownCause"), ("AIRESPACE-WIRELESS-MIB", "bsnAPInvalidRadioType"), ("AIRESPACE-WIRELESS-MIB", "locationNotifyContent"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureMacInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnTrapsGroup = bsnTrapsGroup.setStatus('deprecated')
bsnUtilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 7)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnSyslogEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnSyslogRemoteAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestId"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestSendCount"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestReceivedCount"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnUtilityGroup = bsnUtilityGroup.setStatus('deprecated')
bsnMobilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 8)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnMobilityProtocolPortNum"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityDynamicDiscovery"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityStatsReset"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityGroupMemberMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityGroupMemberIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityGroupMemberGroupName"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityGroupMemberRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityAnchorWlanSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityAnchorSwitchIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobilityAnchorRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffs"), ("AIRESPACE-WIRELESS-MIB", "bsnCurrentExportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalExportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnCurrentImportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalImportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalCommunicationErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalReceiveErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalTransmitErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalResponsesRetransmitted"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffEndRequestsReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalStateTransitionsDisallowed"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalResourceErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffRequestsSent"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffRepliesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffAsLocalReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffAsForeignReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffDeniesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorRequestsSent"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorDenyReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorGrantReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorTransferReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffRequestsIgnored"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalPingPongHandoffRequestsDropped"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffRequestsDropped"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffRequestsDenied"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalClientHandoffAsLocal"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalClientHandoffAsForeign"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorRequestsReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorRequestsDenied"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorRequestsGranted"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalAnchorTransferred"), ("AIRESPACE-WIRELESS-MIB", "bsnTotalHandoffRequestsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnMobilityGroup = bsnMobilityGroup.setStatus('current')
bsnIpsecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 9)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCACertificate"), ("AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCACertificateUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCertName"), ("AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCertificateUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCertificate"), ("AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCertPassword"), ("AIRESPACE-WIRELESS-MIB", "bsnWrasIpsecCertStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnIpsecGroup = bsnIpsecGroup.setStatus('current')
bsnWrasDepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 10)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWPASecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWPAEncryptionType"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWPAAuthKeyMgmtMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWPAAuthPresharedKey"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWPAAuthPresharedKeyHex"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRSNSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRSNWPACompatibilityMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRSNAllowTKIPClients"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRSNAuthKeyMgmtMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRSNAuthPresharedKey"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRSNAuthPresharedKeyHex"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11NumberSupportedPowerLevels"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel1"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel2"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel3"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel4"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel5"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel6"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel7"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TxPowerLevel8"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11CurrentCCAMode"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestId"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestSendPktCount"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestSendPktLength"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestReceivedPktCount"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestClientRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestLocalSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestLocalRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnLinkTestRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasDepGroup = bsnWrasDepGroup.setStatus('deprecated')
bsnWrasObsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 11)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnUserPassword"), ("AIRESPACE-WIRELESS-MIB", "bsnUserEssIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnUserAccessMode"), ("AIRESPACE-WIRELESS-MIB", "bsnUserType"), ("AIRESPACE-WIRELESS-MIB", "bsnUserInterfaceName"), ("AIRESPACE-WIRELESS-MIB", "bsnUserRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerKey"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerAdminStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerConnectionStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnThirdPartyAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnThirdPartyAPInterface"), ("AIRESPACE-WIRELESS-MIB", "bsnThirdPartyAPIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnThirdPartyAP802Dot1XRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnThirdPartyAPMirrorMode"), ("AIRESPACE-WIRELESS-MIB", "bsnThirdPartyAPRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnWatchListClientKey"), ("AIRESPACE-WIRELESS-MIB", "bsnWatchListClientType"), ("AIRESPACE-WIRELESS-MIB", "bsnWatchListClientRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasObsGroup = bsnWrasObsGroup.setStatus('obsolete')
bsnWrasTrap = NotificationGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 12)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11StationDisassociate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationDeauthenticate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationAuthenticateFail"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationAssociateFail"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationBlacklisted"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationAssociate"), ("AIRESPACE-WIRELESS-MIB", "bsnAPUp"), ("AIRESPACE-WIRELESS-MIB", "bsnAPDown"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAssociated"), ("AIRESPACE-WIRELESS-MIB", "bsnAPDisassociated"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfUp"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDown"), ("AIRESPACE-WIRELESS-MIB", "bsnAPLoadProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNoiseProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPInterferenceProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPLoadProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNoiseProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPInterferenceProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCurrentTxPowerChanged"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCurrentChannelChanged"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aGroupingDone"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bGroupingDone"), ("AIRESPACE-WIRELESS-MIB", "bsnConfigSaved"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssCreated"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssDeleted"), ("AIRESPACE-WIRELESS-MIB", "bsnRADIUSServerNotResponding"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthenticationFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecEspAuthFailureTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecEspReplayFailureTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecEspInvalidSpiTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecIkeNegFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecSuiteNegFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecInvalidCookieTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRemoved"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDetectedOnWiredNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnApHasNoRadioCards"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpAddressReported"), ("AIRESPACE-WIRELESS-MIB", "bsnAPContainedAsARogue"), ("AIRESPACE-WIRELESS-MIB", "bsnNetworkStateChanged"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardTxFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardTxFailureClear"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardRxFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardRxFailureClear"), ("AIRESPACE-WIRELESS-MIB", "bsnAPImpersonationDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRegulatoryDomainMismatch"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidPreamble"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiosExceedLicenseCount"), ("AIRESPACE-WIRELESS-MIB", "bsnSensedTemperatureTooHigh"), ("AIRESPACE-WIRELESS-MIB", "bsnSensedTemperatureTooLow"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureSensorFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureSensorClear"), ("AIRESPACE-WIRELESS-MIB", "bsnPOEControllerFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCountExceeded"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCountClear"), ("AIRESPACE-WIRELESS-MIB", "bsnApMaxRogueCountExceeded"), ("AIRESPACE-WIRELESS-MIB", "bsnApMaxRogueCountClear"), ("AIRESPACE-WIRELESS-MIB", "bsnApBigNavDosAttack"), ("AIRESPACE-WIRELESS-MIB", "bsnTooManyUnsuccessLoginAttempts"), ("AIRESPACE-WIRELESS-MIB", "bsnWepKeyDecryptError"), ("AIRESPACE-WIRELESS-MIB", "bsnWpaMicErrorCounterActivated"), ("AIRESPACE-WIRELESS-MIB", "bsnAdhocRogueAutoContained"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueApAutoContained"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidEncryption"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidRadioPolicy"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApIsMissing"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIPAddressFallback"), ("AIRESPACE-WIRELESS-MIB", "bsnAPFunctionalityDisabled"), ("AIRESPACE-WIRELESS-MIB", "bsnRxMulticastQueueFull"), ("AIRESPACE-WIRELESS-MIB", "bsnRadarChannelDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnRadarChannelCleared"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthorizationFailure"), ("AIRESPACE-WIRELESS-MIB", "radioCoreDumpTrap"), ("AIRESPACE-WIRELESS-MIB", "invalidRadioTrap"), ("AIRESPACE-WIRELESS-MIB", "countryChangeTrap"), ("AIRESPACE-WIRELESS-MIB", "unsupportedAPTrap"), ("AIRESPACE-WIRELESS-MIB", "heartbeatLossTrap"), ("AIRESPACE-WIRELESS-MIB", "locationNotifyTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasTrap = bsnWrasTrap.setStatus('obsolete')
bsnEssGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 13)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssSessionTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssMacFiltering"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssAdminStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssSecurityAuthType"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPEncryptionType"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPDefaultKey"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPKeyIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssStaticWEPKeyFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess8021xSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess8021xEncryptionType"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIpsecSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnEncrTransform"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnAuthTransform"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkeAuthMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnSharedKey"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnSharedKeySize"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkePhase1Mode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkeLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnIkeDHGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssIpsecPassthruSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnPassthruGateway"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWebSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadioPolicy"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssQualityOfService"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssDhcpRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssDhcpServerIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnContivityMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssVpnQotdServerAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssBlacklistTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssNumberOfMobileStations"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWebPassthru"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssCraniteSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssBlacklistingCapability"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssInterfaceName"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssAclName"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssAAAOverride"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWepAllowSharedKeyAuth"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssFortressSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssL2tpSecurity"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssBroadcastSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssExternalPolicyValidation"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWmePolicySetting"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess80211ePolicySetting"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssWebPassthroughEmail"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11Ess7920PhoneSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAuthPrimaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAuthSecondaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAuthTertiaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAcctPrimaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAcctSecondaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssRadiusAcctTertiaryServer"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationEssIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMobilityStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAID"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAnchorAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationCFPollable"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationCFPollRequest"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationChannelAgilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPBCCOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationShortPreambleOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSessionTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationAuthenticationAlgorithm"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationWepState"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationDeleteAction"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPolicyManagerState"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSecurityPolicyStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMirrorMode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationInterface"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationApMode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationVlanId"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPolicyType"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationEncryptionCypher"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationEapType"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationCcxVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationE2eVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationStatusCode"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPerRadioPerVapIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationBytesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationBytesSent"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPolicyErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPacketsReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationPacketsSent"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPTotalDetectingAPs"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPFirstReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPLastReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPOnNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPTotalClients"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPMaxDetectedRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPSSID"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPState"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDetectingAPRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDetectingAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPMaxRssiRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPClassType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDetectingAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPChannelWidth"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentChannelCount"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPContainmentChannels"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPWepMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPPreamble"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPWpaMode"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPAirespaceAPSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByIpMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataApName"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiData"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationRssiDataLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationByUserMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientRadioType"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientAirespaceAPSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientTotalDetectingAPs"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientFirstReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientLastReported"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientBSSID"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientContainmentLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientState"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDot11MacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueClientDot11MacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosProfileName"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosProfileDesc"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosAverageDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosBurstDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosAvgRealTimeDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosBurstRealTimeDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosMaxRFUsagePerAP"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11QosProfileQueueDepth"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11WiredQosProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11802Dot1PTag"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11ResetProfileToDefault"), ("AIRESPACE-WIRELESS-MIB", "bsnTagDot11MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnTagType"), ("AIRESPACE-WIRELESS-MIB", "bsnTagTimeInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnTagBatteryStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnTagLastReported"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataApName"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiData"), ("AIRESPACE-WIRELESS-MIB", "bsnTagRssiDataSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnTagBytesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnTagPacketsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnEssGroupRev1 = bsnEssGroupRev1.setStatus('current')
bsnGlobalDot11GroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 14)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11PrivacyOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11AuthenticationResponseTimeOut"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11MultiDomainCapabilityImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11MultiDomainCapabilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11RogueTimer"), ("AIRESPACE-WIRELESS-MIB", "bsnPrimaryMwarForAPs"), ("AIRESPACE-WIRELESS-MIB", "bsnRtpProtocolPriority"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemCurrentTime"), ("AIRESPACE-WIRELESS-MIB", "bsnUpdateSystemTime"), ("AIRESPACE-WIRELESS-MIB", "bsnOperatingTemperatureEnvironment"), ("AIRESPACE-WIRELESS-MIB", "bsnSensorTemperature"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureAlarmLowLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureAlarmHighLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnVirtualGatewayAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRFMobilityDomainName"), ("AIRESPACE-WIRELESS-MIB", "bsnClientWatchListFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueLocationDiscoveryProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAutoContainFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnOverAirProvisionApMode"), ("AIRESPACE-WIRELESS-MIB", "bsnMaximumNumberOfConcurrentLogins"), ("AIRESPACE-WIRELESS-MIB", "bsnAutoContainRoguesAdvertisingSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnAutoContainAdhocNetworks"), ("AIRESPACE-WIRELESS-MIB", "bsnAutoContainTrustedClientsOnRogueAps"), ("AIRESPACE-WIRELESS-MIB", "bsnValidateRogueClientsAgainstAAA"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemTimezoneDelta"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemTimezoneDeltaMinutes"), ("AIRESPACE-WIRELESS-MIB", "bsnAllowAuthorizeApAgainstAAA"), ("AIRESPACE-WIRELESS-MIB", "bsnApFallbackEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnAppleTalkEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnPolicyForMisconfiguredAps"), ("AIRESPACE-WIRELESS-MIB", "bsnEncryptionPolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnPreamblePolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11ModePolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnRadioTypePolicyEnforced"), ("AIRESPACE-WIRELESS-MIB", "bsnValidateSsidForTrustedAp"), ("AIRESPACE-WIRELESS-MIB", "bsnAlertIfTrustedApMissing"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEntryExpirationTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessive80211AssocFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessive80211AuthFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessive8021xAuthFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnExcessiveWebAuthFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnIPTheftORReuse"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePrecedence"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureName"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureFrameType"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureAction"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureState"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureFrequency"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureQuietTime"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureMacInfo"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureMacFreq"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternOffset"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternString"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternMask"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternOffSetStart"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignaturePatternRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePrecedence"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureName"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureFrameType"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureAction"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureState"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureFrequency"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureQuietTime"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureMacInfo"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureMacFreq"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternOffset"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternString"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternMask"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternOffSetStart"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignaturePatternRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureCheckState"), ("AIRESPACE-WIRELESS-MIB", "bsnRfIdTagStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRfIdTagDataTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnRfIdTagAutoTimeoutStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNeighborAuthStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNeighborAuthAlarmThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnRFNetworkName"), ("AIRESPACE-WIRELESS-MIB", "bsnFastSSIDChangeFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnBridgingZeroTouchConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnBridgingSharedSecretKey"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bNetworkStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bBeaconPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicChannelAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCurrentChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicChannelUpdateInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bInputsForDCA"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bChannelUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bChannelUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicTransmitPowerControl"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDynamicTxPowerControlInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCurrentTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bInputsForDTP"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPowerUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPowerUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate1Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate2Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate5AndHalfMhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate11Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bShortPreamble"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDot11gSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate6Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate9Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate12Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate18Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate24Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate36Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate48Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDataRate54Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPicoCellMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFastRoamingMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFastRoamingVoipMinRate"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFastRoamingVoipPercentage"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11b80211eMaxBandwidth"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDTPCSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bRxSopThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bMediumOccupancyLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPMaxDuration"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPollable"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bCFPollRequest"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bDTIMPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bShortRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bLongRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bMaxTransmitMSDULifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bMaxReceiveLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bEDThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bChannelAgilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bPBCCOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11bShortPreambleOptionImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aNetworkStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aLowBandNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMediumBandNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aHighBandNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aBeaconPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicChannelAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCurrentChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicChannelUpdateInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aInputsForDCA"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aChannelUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aChannelUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicTransmitPowerControl"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCurrentTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDynamicTxPowerControlInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aInputsForDTP"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aPowerUpdateCmdInvoke"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aPowerUpdateCmdStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate6Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate9Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate12Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate18Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate24Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate36Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate48Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDataRate54Mhz"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aPicoCellMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFastRoamingMode"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFastRoamingVoipMinRate"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFastRoamingVoipPercentage"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11a80211eMaxBandwidth"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDTPCSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aRxSopThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMediumOccupancyLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPMaxDuration"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPollable"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aCFPollRequest"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aDTIMPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aShortRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aLongRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMaxTransmitMSDULifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aMaxReceiveLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aTIThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11aChannelAgilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11hPowerConstraint"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11hChannelSwitchEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnGlobalDot11hChannelSwitchMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnGlobalDot11GroupRev1 = bsnGlobalDot11GroupRev1.setStatus('current')
bsnAAAGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 15)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientServerPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerRFC3576"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSec"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecAuth"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecEncryption"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecIKEPhase1"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecIKELifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerIPSecDHGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerNetworkUserConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerMgmtUserConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerRetransmitTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyWrapKEKkey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyWrapMACKkey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerKeyWrapFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthServerRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientServerPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerKey"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerKeyFormat"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSec"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecAuth"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecEncryption"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecIKEPhase1"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecIKELifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerIPSecDHGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerNetworkUserConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerRetransmitTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccServerRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientRoundTripTime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessRetransmissions"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessAccepts"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessRejects"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientAccessChallenges"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientMalformedAccessResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientBadAuthenticators"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientPendingRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientTimeouts"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientUnknownTypes"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthClientPacketsDropped"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientRoundTripTime"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientRetransmissions"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientMalformedResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientBadAuthenticators"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientPendingRequests"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientTimeouts"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientUnknownTypes"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAccClientPacketsDropped"), ("AIRESPACE-WIRELESS-MIB", "bsnAclName"), ("AIRESPACE-WIRELESS-MIB", "bsnAclApplyMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleAction"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDirection"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleSourceIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleSourceIpNetmask"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDestinationIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDestinationIpNetmask"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleProtocol"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleStartSourcePort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleEndSourcePort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleStartDestinationPort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleEndDestinationPort"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleDscp"), ("AIRESPACE-WIRELESS-MIB", "bsnAclNewRuleIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAclRuleRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterWlanId"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterInterfaceName"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnMacFilterRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserWlanId"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserPassword"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserStartTime"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserRemainingTime"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalNetUserRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserPassword"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserAccessMode"), ("AIRESPACE-WIRELESS-MIB", "bsnLocalManagementUserRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnBlackListClientMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnBlackListClientDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnBlackListClientRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiusAuthKeyWrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnAAAMacDelimiter"), ("AIRESPACE-WIRELESS-MIB", "bsnAAARadiusCompatibilityMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAAARadiusCallStationIdType"), ("AIRESPACE-WIRELESS-MIB", "bsnAAALocalDatabaseSize"), ("AIRESPACE-WIRELESS-MIB", "bsnAAACurrentLocalDatabaseSize"), ("AIRESPACE-WIRELESS-MIB", "bsnExternalPolicyServerAclName"), ("AIRESPACE-WIRELESS-MIB", "bsnAcceptSelfSignedCertificate"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemClockTime"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthCertificateType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthHashKey"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnAAAGroupRev1 = bsnAAAGroupRev1.setStatus('current')
bsnTrapsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 16)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11StationTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPProfileTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPMacAddrTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNameTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSlotIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPChannelNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageThresholdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageFailedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageTotalClients"), ("AIRESPACE-WIRELESS-MIB", "bsnClientMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnClientRssi"), ("AIRESPACE-WIRELESS-MIB", "bsnClientSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceEnergyBeforeChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceEnergyAfterChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPortNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPParamUpdateTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnConfigSaveTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnRADIUSServerTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthenticationFailureTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsn80211SecurityTrapControlMask"), ("AIRESPACE-WIRELESS-MIB", "bsnWpsTrapControlEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthFailureUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthFailureUserType"), ("AIRESPACE-WIRELESS-MIB", "bsnRemoteIPv4Address"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecErrorCount"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecSPI"), ("AIRESPACE-WIRELESS-MIB", "bsnRemoteUdpPort"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeAuthMethod"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalInitFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalInitNoResponses"), ("AIRESPACE-WIRELESS-MIB", "bsnIkeTotalRespFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesSent"), ("AIRESPACE-WIRELESS-MIB", "bsnNotifiesReceived"), ("AIRESPACE-WIRELESS-MIB", "bsnSuiteInitFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnSuiteRespondFailures"), ("AIRESPACE-WIRELESS-MIB", "bsnInitiatorCookie"), ("AIRESPACE-WIRELESS-MIB", "bsnResponderCookie"), ("AIRESPACE-WIRELESS-MIB", "bsnIsakmpInvalidCookies"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecTrapsMask"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPTrapEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnCurrentRadiosCount"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseRadioCount"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCount"), ("AIRESPACE-WIRELESS-MIB", "bsnStationMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnStationAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnUserIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnStationReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnStationBlacklistingReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnStationUserName"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPOnWiredNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAdhocMode"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpReportedByAP"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpTrapClear"), ("AIRESPACE-WIRELESS-MIB", "bsnNavDosAttackSourceMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnWlanIdTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnClearTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEncryptionUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApEncryptionRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApRadioPolicyUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnNetworkType"), ("AIRESPACE-WIRELESS-MIB", "bsnNetworkState"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureType"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureName"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackPreced"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackFrequency"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackerMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnApRegulatoryDomain"), ("AIRESPACE-WIRELESS-MIB", "bsnImpersonatedAPMacAddr"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApPreambleUsed"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApPreambleRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApRadioPolicyRequired"), ("AIRESPACE-WIRELESS-MIB", "bsnGroupDirectoryMemberIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnGroupDirectoryMemberMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnGroupDirectoryDicoveryType"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberCurrentAnchoredClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalAnchoredClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberCurrentExportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalExportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberCurrentImportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalImportedClients"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalHandoffErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnMemberTotalCommunicationErrors"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanDescription"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupsVlanRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseKeyTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnApFunctionalityDisableReasonCode"), ("AIRESPACE-WIRELESS-MIB", "bsnLicenseKeyFeatureSetTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthorizationFailureCause"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfUpDownCause"), ("AIRESPACE-WIRELESS-MIB", "bsnAPInvalidRadioType"), ("AIRESPACE-WIRELESS-MIB", "locationNotifyContent"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureMacInfo"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPreviousChannelNumberTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnAPReasonCodeTrapVariable"), ("AIRESPACE-WIRELESS-MIB", "bsnNoiseBeforeChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnNoiseAfterChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceBeforeChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnInterferenceAfterChannelUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnImpersonatingSourceMacAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnTrapsGroupRev1 = bsnTrapsGroupRev1.setStatus('current')
bsnWrasTrapRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 17)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnDot11StationDisassociate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationDeauthenticate"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationAuthenticateFail"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationAssociateFail"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationBlacklisted"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11StationAssociate"), ("AIRESPACE-WIRELESS-MIB", "bsnAPDisassociated"), ("AIRESPACE-WIRELESS-MIB", "bsnAPLoadProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNoiseProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPInterferenceProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageProfileFailed"), ("AIRESPACE-WIRELESS-MIB", "bsnAPLoadProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNoiseProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPInterferenceProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCoverageProfileUpdatedToPass"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCurrentTxPowerChanged"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCurrentChannelChanged"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11aGroupingDone"), ("AIRESPACE-WIRELESS-MIB", "bsnRrmDot11bGroupingDone"), ("AIRESPACE-WIRELESS-MIB", "bsnConfigSaved"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssCreated"), ("AIRESPACE-WIRELESS-MIB", "bsnDot11EssDeleted"), ("AIRESPACE-WIRELESS-MIB", "bsnRADIUSServerNotResponding"), ("AIRESPACE-WIRELESS-MIB", "bsnAuthenticationFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecEspAuthFailureTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecEspReplayFailureTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecEspInvalidSpiTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecIkeNegFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecSuiteNegFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnIpsecInvalidCookieTrap"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPRemoved"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueAPDetectedOnWiredNetwork"), ("AIRESPACE-WIRELESS-MIB", "bsnApHasNoRadioCards"), ("AIRESPACE-WIRELESS-MIB", "bsnDuplicateIpAddressReported"), ("AIRESPACE-WIRELESS-MIB", "bsnAPContainedAsARogue"), ("AIRESPACE-WIRELESS-MIB", "bsnNetworkStateChanged"), ("AIRESPACE-WIRELESS-MIB", "bsnSignatureAttackDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardTxFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardTxFailureClear"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardRxFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRadioCardRxFailureClear"), ("AIRESPACE-WIRELESS-MIB", "bsnAPImpersonationDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidPreamble"), ("AIRESPACE-WIRELESS-MIB", "bsnRadiosExceedLicenseCount"), ("AIRESPACE-WIRELESS-MIB", "bsnSensedTemperatureTooHigh"), ("AIRESPACE-WIRELESS-MIB", "bsnSensedTemperatureTooLow"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureSensorFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnTemperatureSensorClear"), ("AIRESPACE-WIRELESS-MIB", "bsnPOEControllerFailure"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCountExceeded"), ("AIRESPACE-WIRELESS-MIB", "bsnMaxRogueCountClear"), ("AIRESPACE-WIRELESS-MIB", "bsnApMaxRogueCountExceeded"), ("AIRESPACE-WIRELESS-MIB", "bsnApMaxRogueCountClear"), ("AIRESPACE-WIRELESS-MIB", "bsnApBigNavDosAttack"), ("AIRESPACE-WIRELESS-MIB", "bsnTooManyUnsuccessLoginAttempts"), ("AIRESPACE-WIRELESS-MIB", "bsnWepKeyDecryptError"), ("AIRESPACE-WIRELESS-MIB", "bsnWpaMicErrorCounterActivated"), ("AIRESPACE-WIRELESS-MIB", "bsnAdhocRogueAutoContained"), ("AIRESPACE-WIRELESS-MIB", "bsnRogueApAutoContained"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidEncryption"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidRadioPolicy"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApHasInvalidSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnTrustedApIsMissing"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIPAddressFallback"), ("AIRESPACE-WIRELESS-MIB", "bsnAPFunctionalityDisabled"), ("AIRESPACE-WIRELESS-MIB", "bsnRxMulticastQueueFull"), ("AIRESPACE-WIRELESS-MIB", "bsnRadarChannelDetected"), ("AIRESPACE-WIRELESS-MIB", "bsnRadarChannelCleared"), ("AIRESPACE-WIRELESS-MIB", "bsnAPAuthorizationFailure"), ("AIRESPACE-WIRELESS-MIB", "radioCoreDumpTrap"), ("AIRESPACE-WIRELESS-MIB", "invalidRadioTrap"), ("AIRESPACE-WIRELESS-MIB", "unsupportedAPTrap"), ("AIRESPACE-WIRELESS-MIB", "heartbeatLossTrap"), ("AIRESPACE-WIRELESS-MIB", "locationNotifyTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasTrapRev1 = bsnWrasTrapRev1.setStatus('current')
bsnApGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 18)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPDot3MacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNumOfSlots"), ("AIRESPACE-WIRELESS-MIB", "bsnAPName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPLocation"), ("AIRESPACE-WIRELESS-MIB", "bsnAPMonitorOnlyMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAPOperationStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSoftwareVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnAPBootVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnAPPrimaryMwarName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPReset"), ("AIRESPACE-WIRELESS-MIB", "bsnAPStatsTimer"), ("AIRESPACE-WIRELESS-MIB", "bsnAPModel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSerialNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPClearConfig"), ("AIRESPACE-WIRELESS-MIB", "bsnApIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPMirrorMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAPRemoteModeSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnAPType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPSecondaryMwarName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPTertiaryMwarName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIsStaticIP"), ("AIRESPACE-WIRELESS-MIB", "bsnAPNetmask"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGateway"), ("AIRESPACE-WIRELESS-MIB", "bsnAPStaticIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPBridgingSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnAPGroupVlanName"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIOSVersion"), ("AIRESPACE-WIRELESS-MIB", "bsnAPCertificateType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPEthernetMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSlotId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyChannelAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyTxPowerControl"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaMode"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaDiversity"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCellSiteConfigId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfNumberOfVaps"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfOperStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPortNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPhyAntennaOptions"), ("AIRESPACE-WIRELESS-MIB", "bsnApIfNoOfUsers"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverride"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPacketsSniffingFeature"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSniffChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSniffServerIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfAntennaGain"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfChannelList"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfAbsolutePowerList"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRegulatoryDomainSupport"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11BeaconPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MediumOccupancyLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11CFPPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11CFPMaxDuration"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11OperationalRateSet"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11DTIMPeriod"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MultiDomainCapabilityImplemented"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MultiDomainCapabilityEnabled"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11CountryString"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11SmtParamsConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11BSSID"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MaximumTransmitPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FirstChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11NumberofChannels"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacShortRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacLongRetryLimit"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacMaxTransmitMSDULifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacParamsConfigType"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MacMaxReceiveLifetime"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TransmittedFragmentCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MulticastTransmittedFrameCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11RetryCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MultipleRetryCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FrameDuplicateCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11RTSSuccessCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11RTSFailureCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11ACKFailureCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11ReceivedFragmentCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11MulticastReceivedFrameCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FCSErrorCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TransmittedFrameCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11WEPUndecryptableCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11FailedCount"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11EDThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDot11TIThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfProfileParamAssignment"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfForeignInterferenceThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfForeignNoiseThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRFUtilizationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfThroughputThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfMobilesThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCoverageThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfMobileMinExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCoverageExceptionLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadRxUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadTxUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadChannelUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadNumOfClients"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfPoorSNRClients"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferenceChannelNo"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferencePower"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferenceUtilization"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfNoiseChannelNo"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfDBNoisePower"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfLoadProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfInterferenceProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfNoiseProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfCoverageProfileState"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborIpAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborSlot"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationRSSICoverageIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRSSILevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationCountOnRSSI"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationSNRCoverageIndex"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfSNRLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfStationCountOnSNR"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedTxPowerLevel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedRTSThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRecommendedFragmentationThreshold"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverrideId"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverrideSsid"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfWlanOverrideRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRole"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeGroup"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBackhaul"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBackhaulPAP"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBackhaulRAP"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeDataRate"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRoutingState"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeMalformedNeighPackets"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodePoorNeighSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeBlacklistPackets"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeInsufficientMemory"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRxNeighReq"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeRxNeighRsp"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeTxNeighReq"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeTxNeighRsp"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeParentChanges"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeNeighTimeout"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeParentMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeAPType"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeEthernetBridge"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNodeHops"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighMacAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighType"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighState"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighSnrUp"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighSnrDown"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighLinkSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighAdjustedEase"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighUnadjustedEase"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighRapEase"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighTxParent"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighRxParent"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighPoorSnr"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighLastUpdate"), ("AIRESPACE-WIRELESS-MIB", "bsnMeshNeighParentChange"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRadarDetectedChannelNumber"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRadarSignalLastHeard"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborChannel"), ("AIRESPACE-WIRELESS-MIB", "bsnAPIfRxNeighborChannelWidth"), ("AIRESPACE-WIRELESS-MIB", "bsnStandardSignatureInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnCustomSignatureInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnApGroupRev1 = bsnApGroupRev1.setStatus('current')
bsnUtilityGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 19)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnSyslogEnable"), ("AIRESPACE-WIRELESS-MIB", "bsnSyslogRemoteAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestId"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestIPAddress"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestSendCount"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestReceivedCount"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestRowStatus"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestMaxTimeInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestMinTimeInterval"), ("AIRESPACE-WIRELESS-MIB", "bsnPingTestAvgTimeInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnUtilityGroupRev1 = bsnUtilityGroupRev1.setStatus('current')
bsnWrasObsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 20)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnMobileStationSampleTime"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationTxExcessiveRetries"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationTxRetries"), ("AIRESPACE-WIRELESS-MIB", "bsnMobileStationTxFiltered"), ("AIRESPACE-WIRELESS-MIB", "bsnSystemTimezoneDaylightSavings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasObsGroupRev1 = bsnWrasObsGroupRev1.setStatus('obsolete')
bsnWrasObsTrap = NotificationGroup((1, 3, 6, 1, 4, 1, 14179, 2, 50, 21)).setObjects(("AIRESPACE-WIRELESS-MIB", "bsnAPUp"), ("AIRESPACE-WIRELESS-MIB", "bsnAPDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnWrasObsTrap = bsnWrasObsTrap.setStatus('obsolete')
mibBuilder.exportSymbols("AIRESPACE-WIRELESS-MIB", bsnCustomSignatureQuietTime=bsnCustomSignatureQuietTime, bsnTagRssiDataApIfSlotId=bsnTagRssiDataApIfSlotId, bsnMobileStationAPIfSlotId=bsnMobileStationAPIfSlotId, bsnLinkTestLocalRSSI=bsnLinkTestLocalRSSI, bsnAPIfAntennaGain=bsnAPIfAntennaGain, bsnGlobalDot11bRTSThreshold=bsnGlobalDot11bRTSThreshold, bsnAPNeighborAuthAlarmThreshold=bsnAPNeighborAuthAlarmThreshold, bsnLinkTestTable=bsnLinkTestTable, bsnAPDisassociated=bsnAPDisassociated, bsnAPIfDot11TxPowerLevel6=bsnAPIfDot11TxPowerLevel6, bsnMobilityAnchorSwitchIPAddress=bsnMobilityAnchorSwitchIPAddress, bsnLinkTestReceivedPktCount=bsnLinkTestReceivedPktCount, bsnAPIfProfileThresholdConfigEntry=bsnAPIfProfileThresholdConfigEntry, bsnRrmDot11aGroup=bsnRrmDot11aGroup, bsnGlobalDot11bDataRate36Mhz=bsnGlobalDot11bDataRate36Mhz, bsnSuiteRespondFailures=bsnSuiteRespondFailures, bsnWrasDot11bPeerIpAddress=bsnWrasDot11bPeerIpAddress, bsnMeshNodeEntry=bsnMeshNodeEntry, bsnNoiseBeforeChannelUpdate=bsnNoiseBeforeChannelUpdate, bsnTrustedApRadioPolicyRequired=bsnTrustedApRadioPolicyRequired, bsnRadiusAuthClientMalformedAccessResponses=bsnRadiusAuthClientMalformedAccessResponses, bsnAPAuthorizationFailureCause=bsnAPAuthorizationFailureCause, bsnLocalNetUserEntry=bsnLocalNetUserEntry, bsnAPCertificateType=bsnAPCertificateType, bsnMeshNodeParentChanges=bsnMeshNodeParentChanges, bsnAPGroupVlanName=bsnAPGroupVlanName, bsnMobileStationStatus=bsnMobileStationStatus, bsnRrmDot11bRFUtilizationThreshold=bsnRrmDot11bRFUtilizationThreshold, bsnTotalHandoffRequests=bsnTotalHandoffRequests, bsnRrmDot11aGroupingDone=bsnRrmDot11aGroupingDone, bsnDot11EssRadiusAcctTertiaryServer=bsnDot11EssRadiusAcctTertiaryServer, bsnWrasDot11aPeerMacAddress=bsnWrasDot11aPeerMacAddress, bsnRadiusAuthServerKey=bsnRadiusAuthServerKey, bsnDot11EssDeleted=bsnDot11EssDeleted, bsnDot11EssWmePolicySetting=bsnDot11EssWmePolicySetting, bsnRrmDot11aMobileMinExceptionLevel=bsnRrmDot11aMobileMinExceptionLevel, bsnGlobalDot11bInputsForDTP=bsnGlobalDot11bInputsForDTP, bsnAPIfDot11RTSFailureCount=bsnAPIfDot11RTSFailureCount, bsnLocalManagementUserPassword=bsnLocalManagementUserPassword, bsnRadiusAccClientServerPortNumber=bsnRadiusAccClientServerPortNumber, bsnStandardSignaturePatternRowStatus=bsnStandardSignaturePatternRowStatus, bsnDot11EssBlacklistingCapability=bsnDot11EssBlacklistingCapability, bsnAPIfDot11CountersTable=bsnAPIfDot11CountersTable, bsnMacFilterWlanId=bsnMacFilterWlanId, bsnGlobalDot11aLowBandNetwork=bsnGlobalDot11aLowBandNetwork, bsnMobileStationRssiDataApIfType=bsnMobileStationRssiDataApIfType, bsnAPIfDot11MacLongRetryLimit=bsnAPIfDot11MacLongRetryLimit, bsnAPIfPhyChannelAssignment=bsnAPIfPhyChannelAssignment, bsnRogueAPState=bsnRogueAPState, bsnMobilityGroupDirectoryEntry=bsnMobilityGroupDirectoryEntry, bsnAAA=bsnAAA, bsnRadiusAuthServerInetAddressType=bsnRadiusAuthServerInetAddressType, bsnGlobalDot11aHighBandNetwork=bsnGlobalDot11aHighBandNetwork, bsnGlobalDot11aCurrentTxPowerLevel=bsnGlobalDot11aCurrentTxPowerLevel, bsnApFunctionalityDisableReasonCode=bsnApFunctionalityDisableReasonCode, bsnImpersonatingSourceMacAddr=bsnImpersonatingSourceMacAddr, bsnLocalManagementUserName=bsnLocalManagementUserName, bsnMobileStationPacketsReceived=bsnMobileStationPacketsReceived, bsnRogueAPSSID=bsnRogueAPSSID, bsnTrustedApPreambleRequired=bsnTrustedApPreambleRequired, bsnAPMonitorOnlyMode=bsnAPMonitorOnlyMode, bsnCustomSignatureName=bsnCustomSignatureName, bsnInterferenceEnergyBeforeChannelUpdate=bsnInterferenceEnergyBeforeChannelUpdate, bsnGlobalDot11aMaxTransmitMSDULifetime=bsnGlobalDot11aMaxTransmitMSDULifetime, bsnTagEntry=bsnTagEntry, bsnAPIfDot11WEPUndecryptableCount=bsnAPIfDot11WEPUndecryptableCount, bsnAPIfCoverageExceptionLevel=bsnAPIfCoverageExceptionLevel, bsnTotalHandoffErrors=bsnTotalHandoffErrors, bsnAPRadioCardRxFailureClear=bsnAPRadioCardRxFailureClear, bsnAPIfRecommendedRTSThreshold=bsnAPIfRecommendedRTSThreshold, bsnMeshNodeParentMacAddress=bsnMeshNodeParentMacAddress, bsnRogueAPDetectedOnWiredNetwork=bsnRogueAPDetectedOnWiredNetwork, bsnDot11EssRowStatus=bsnDot11EssRowStatus, bsnDot11EssVpnContivityMode=bsnDot11EssVpnContivityMode, bsnSignatureAttackChannel=bsnSignatureAttackChannel, bsnAPPortNumberTrapVariable=bsnAPPortNumberTrapVariable, bsnMeshNeighParentChange=bsnMeshNeighParentChange, bsnWrasIpsecCertEntry=bsnWrasIpsecCertEntry, bsnGlobalDot11aCFPMaxDuration=bsnGlobalDot11aCFPMaxDuration, bsnAPIfRecommendedRFParametersEntry=bsnAPIfRecommendedRFParametersEntry, bsnIPTheftORReuse=bsnIPTheftORReuse, bsnTrustedApEncryptionUsed=bsnTrustedApEncryptionUsed, bsnAPInterferenceProfileFailed=bsnAPInterferenceProfileFailed, bsnTagRssiDataSnr=bsnTagRssiDataSnr, bsnGlobalDot11aPicoCellMode=bsnGlobalDot11aPicoCellMode, bsnAuthenticationFailureTrapEnable=bsnAuthenticationFailureTrapEnable, bsnTotalHandoffRequestsSent=bsnTotalHandoffRequestsSent, bsnAPIfType=bsnAPIfType, bsnAPIfPhyTxPowerControl=bsnAPIfPhyTxPowerControl, bsnAclRuleTable=bsnAclRuleTable, bsnRrmDot11bChannelMonitorList=bsnRrmDot11bChannelMonitorList, bsnRrmDot11b=bsnRrmDot11b, bsnAPIfNumberOfVaps=bsnAPIfNumberOfVaps, bsnDot11QosProfileEntry=bsnDot11QosProfileEntry, bsnMeshNodeNeighTimeout=bsnMeshNodeNeighTimeout, bsnDuplicateIpTrapClear=bsnDuplicateIpTrapClear, bsnAPStaticIPAddress=bsnAPStaticIPAddress, bsnDot11QosBurstRealTimeDataRate=bsnDot11QosBurstRealTimeDataRate, bsnAPNumOfSlots=bsnAPNumOfSlots, bsnDot11EssWebSecurity=bsnDot11EssWebSecurity, bsnMobileStationChannelAgilityEnabled=bsnMobileStationChannelAgilityEnabled, bsnAPIfPhyTxPowerLevel=bsnAPIfPhyTxPowerLevel, bsnAPIfDot11FCSErrorCount=bsnAPIfDot11FCSErrorCount, PYSNMP_MODULE_ID=bsnWireless, bsnTotalResourceErrors=bsnTotalResourceErrors, bsnAPIfWlanOverrideEntry=bsnAPIfWlanOverrideEntry, bsnRogueAPDetectingAPRadioType=bsnRogueAPDetectingAPRadioType, bsnAPIfChannelNoiseInfoEntry=bsnAPIfChannelNoiseInfoEntry, bsnRfIdTagStatus=bsnRfIdTagStatus, bsnClientSnr=bsnClientSnr, bsnMemberTotalHandoffErrors=bsnMemberTotalHandoffErrors, bsnAPIfRecommendedRFParametersTable=bsnAPIfRecommendedRFParametersTable, bsnAclRuleSourceIpAddress=bsnAclRuleSourceIpAddress, bsnRemoteUdpPort=bsnRemoteUdpPort, bsnCustomSignatureDescription=bsnCustomSignatureDescription, bsnAppleTalkEnabled=bsnAppleTalkEnabled, bsnIpsecGroup=bsnIpsecGroup, bsnDot11ResetProfileToDefault=bsnDot11ResetProfileToDefault, bsnRadiusAuthServerKeyFormat=bsnRadiusAuthServerKeyFormat, bsnGlobalDot11Config=bsnGlobalDot11Config, bsnAPIfStationSNRCoverageInfoTable=bsnAPIfStationSNRCoverageInfoTable, bsnRogueAPTrapEnable=bsnRogueAPTrapEnable, bsnWrasComplianceRev1=bsnWrasComplianceRev1, bsnAPIfRxNeighborChannel=bsnAPIfRxNeighborChannel, bsnGlobalDot11aShortRetryLimit=bsnGlobalDot11aShortRetryLimit, bsnCustomSignaturePatternOffset=bsnCustomSignaturePatternOffset, bsnAPSerialNumber=bsnAPSerialNumber, bsnAclRuleEndDestinationPort=bsnAclRuleEndDestinationPort, bsnStandardSignatureMacInfo=bsnStandardSignatureMacInfo, bsnAclRuleStartSourcePort=bsnAclRuleStartSourcePort, bsnUserType=bsnUserType, bsnTemperatureAlarmLowLimit=bsnTemperatureAlarmLowLimit, bsnRadiusAuthClientRoundTripTime=bsnRadiusAuthClientRoundTripTime, bsnExternalPolicyServerIndex=bsnExternalPolicyServerIndex, bsnMobileStationAID=bsnMobileStationAID, bsnExcessiveWebAuthFailures=bsnExcessiveWebAuthFailures, bsnMobileStationStatsTable=bsnMobileStationStatsTable, bsnAPIOSVersion=bsnAPIOSVersion, bsnRogueAPAirespaceAPTable=bsnRogueAPAirespaceAPTable, bsnRadiusAuthServerIPSec=bsnRadiusAuthServerIPSec, bsnWrasDot11bGroupEntry=bsnWrasDot11bGroupEntry, bsnAPLoadProfileFailed=bsnAPLoadProfileFailed, bsnAPIfDot11RetryCount=bsnAPIfDot11RetryCount, bsnDot11EssTable=bsnDot11EssTable, bsnGlobalDot11bFirstChannelNumber=bsnGlobalDot11bFirstChannelNumber, bsnWpsTrapControlEnable=bsnWpsTrapControlEnable, bsnStandardSignatureVersion=bsnStandardSignatureVersion, bsnRadiusAuthClientTimeouts=bsnRadiusAuthClientTimeouts, bsnGlobalDot11bDataRate2Mhz=bsnGlobalDot11bDataRate2Mhz, bsnAcceptSelfSignedCertificate=bsnAcceptSelfSignedCertificate, bsnGlobalDot11bDot11gSupport=bsnGlobalDot11bDot11gSupport, bsnAPIfDot11MaximumTransmitPowerLevel=bsnAPIfDot11MaximumTransmitPowerLevel, bsnTotalHandoffAsForeignReceived=bsnTotalHandoffAsForeignReceived, bsnRfIdTagConfig=bsnRfIdTagConfig, bsnDot11QosProfileQueueDepth=bsnDot11QosProfileQueueDepth, bsnRogueAPContainmentChannelCount=bsnRogueAPContainmentChannelCount, bsnRogueAutoContainFeature=bsnRogueAutoContainFeature, bsnPingTestRowStatus=bsnPingTestRowStatus, bsnGlobalDot11MultiDomainCapabilityImplemented=bsnGlobalDot11MultiDomainCapabilityImplemented, bsnAPIfProfileStateEntry=bsnAPIfProfileStateEntry, bsnDot11EssWepAllowSharedKeyAuth=bsnDot11EssWepAllowSharedKeyAuth, bsnRogueAPRadioType=bsnRogueAPRadioType, bsnAPIfDot11MacParamsConfigType=bsnAPIfDot11MacParamsConfigType, bsnAclRuleDestinationIpNetmask=bsnAclRuleDestinationIpNetmask, bsnStationAPIfSlotId=bsnStationAPIfSlotId, bsnGlobalDot11aRTSThreshold=bsnGlobalDot11aRTSThreshold, bsnApRegulatoryDomain=bsnApRegulatoryDomain, bsnAPIfChannelInterferenceInfoTable=bsnAPIfChannelInterferenceInfoTable, bsnGlobalDot11bDataRate54Mhz=bsnGlobalDot11bDataRate54Mhz, bsnIpsec=bsnIpsec, bsnMemberTotalExportedClients=bsnMemberTotalExportedClients, bsnWrasCompliance=bsnWrasCompliance, bsnThirdPartyAPTable=bsnThirdPartyAPTable, bsnRadiusAuthServerKeyWrapKEKkey=bsnRadiusAuthServerKeyWrapKEKkey, bsnLinkTestRowStatus=bsnLinkTestRowStatus, bsnAclRuleDscp=bsnAclRuleDscp, bsnDot11StationDeauthenticate=bsnDot11StationDeauthenticate, bsnAPRemoteModeSupport=bsnAPRemoteModeSupport, bsnSystemTimezoneDelta=bsnSystemTimezoneDelta, bsnRogueClientAirespaceAPName=bsnRogueClientAirespaceAPName, bsnAPTertiaryMwarName=bsnAPTertiaryMwarName, bsnMeshNodeRxNeighRsp=bsnMeshNodeRxNeighRsp, bsnRrmGroup=bsnRrmGroup, bsnSignatureAttackerMacAddress=bsnSignatureAttackerMacAddress, bsnAPIfDot11PhyChannelTable=bsnAPIfDot11PhyChannelTable, bsnMaximumNumberOfConcurrentLogins=bsnMaximumNumberOfConcurrentLogins, bsnAPIfChannelList=bsnAPIfChannelList, bsnLocalNetUserRowStatus=bsnLocalNetUserRowStatus, bsnAPEntry=bsnAPEntry, bsnWatchListClientEntry=bsnWatchListClientEntry, bsnDot11EssRadiusAuthSecondaryServer=bsnDot11EssRadiusAuthSecondaryServer, bsnRogueClientEntry=bsnRogueClientEntry, bsnGlobalDot11aDynamicChannelAssignment=bsnGlobalDot11aDynamicChannelAssignment, bsnGlobalDot11bDataRate5AndHalfMhz=bsnGlobalDot11bDataRate5AndHalfMhz, bsnAPEthernetMacAddress=bsnAPEthernetMacAddress, bsnRogueAPAirespaceAPRSSI=bsnRogueAPAirespaceAPRSSI, bsnAPIfDBNoisePower=bsnAPIfDBNoisePower, bsnAPIfProfileThresholdConfigTable=bsnAPIfProfileThresholdConfigTable, bsnCustomSignaturePatternOffSetStart=bsnCustomSignaturePatternOffSetStart, bsnDot11EssBlacklistTimeout=bsnDot11EssBlacklistTimeout, bsnAPIfPhyAntennaOptions=bsnAPIfPhyAntennaOptions, bsnMeshNodeTable=bsnMeshNodeTable, bsnAPOperationStatus=bsnAPOperationStatus, bsnMobileStationSsid=bsnMobileStationSsid, bsnAPIfDot11MacMaxTransmitMSDULifetime=bsnAPIfDot11MacMaxTransmitMSDULifetime, bsnRadiusAccClientResponses=bsnRadiusAccClientResponses, bsnMaxRogueCountExceeded=bsnMaxRogueCountExceeded, bsnAPImpersonationDetected=bsnAPImpersonationDetected, bsnMobileStationCcxVersion=bsnMobileStationCcxVersion, bsnIpsecErrorCount=bsnIpsecErrorCount, bsnApGroup=bsnApGroup, bsnMacFilterRowStatus=bsnMacFilterRowStatus, bsnRrmDot11aSetFactoryDefault=bsnRrmDot11aSetFactoryDefault, bsnGlobalDot11aFastRoamingMode=bsnGlobalDot11aFastRoamingMode, bsnRadiusAccServerInetAddress=bsnRadiusAccServerInetAddress, bsnIkeTotalRespFailures=bsnIkeTotalRespFailures, bsnAPIfDot11MulticastReceivedFrameCount=bsnAPIfDot11MulticastReceivedFrameCount, bsnRadiusAccClientRequests=bsnRadiusAccClientRequests, bsnMeshNodeTxNeighReq=bsnMeshNodeTxNeighReq, bsnTotalHandoffDeniesReceived=bsnTotalHandoffDeniesReceived, bsnTotalHandoffRequestsIgnored=bsnTotalHandoffRequestsIgnored, bsnRadarChannelCleared=bsnRadarChannelCleared, bsnStandardSignatureConfigType=bsnStandardSignatureConfigType, bsnRrmDot11bGroupLastUpdateTime=bsnRrmDot11bGroupLastUpdateTime, bsnGlobalDot11b=bsnGlobalDot11b, bsnIpsecEspInvalidSpiTrap=bsnIpsecEspInvalidSpiTrap, bsnMobilityDynamicDiscovery=bsnMobilityDynamicDiscovery, bsnTooManyUnsuccessLoginAttempts=bsnTooManyUnsuccessLoginAttempts, bsnGlobalDot11aMediumOccupancyLimit=bsnGlobalDot11aMediumOccupancyLimit, bsnDot11EssStaticWEPSecurity=bsnDot11EssStaticWEPSecurity, bsnGlobalDot11aNetworkStatus=bsnGlobalDot11aNetworkStatus, bsnWatchListClientType=bsnWatchListClientType, bsnGlobalDot11bMaximumTransmitPowerLevel=bsnGlobalDot11bMaximumTransmitPowerLevel, bsnRadiusAccServerStatus=bsnRadiusAccServerStatus, bsnMobileStationPerRadioPerVapTable=bsnMobileStationPerRadioPerVapTable, bsnMobileStationEssIndex=bsnMobileStationEssIndex, bsnDot11EssIpsecSecurity=bsnDot11EssIpsecSecurity, bsnRadiusAuthClientAccessAccepts=bsnRadiusAuthClientAccessAccepts, bsnUsersEntry=bsnUsersEntry, bsnAPIfInterferenceChannelNo=bsnAPIfInterferenceChannelNo, bsnAPGroupsVlanFeature=bsnAPGroupsVlanFeature, bsnDot11EssRadiusAcctPrimaryServer=bsnDot11EssRadiusAcctPrimaryServer, bsnTagType=bsnTagType, bsnDot11StationBlacklisted=bsnDot11StationBlacklisted, bsnRadiusAuthClientUnknownTypes=bsnRadiusAuthClientUnknownTypes, bsnCustomSignatureInterval=bsnCustomSignatureInterval, bsnAPModel=bsnAPModel, bsnCustomSignatureState=bsnCustomSignatureState, bsnIkeTotalInitFailures=bsnIkeTotalInitFailures, bsnMobileStationSecurityPolicyStatus=bsnMobileStationSecurityPolicyStatus, bsnAPIfWlanOverrideId=bsnAPIfWlanOverrideId, bsnStandardSignaturePatternOffset=bsnStandardSignaturePatternOffset, bsnMobileStationPBCCOptionImplemented=bsnMobileStationPBCCOptionImplemented, bsnLocalNetUserName=bsnLocalNetUserName)
mibBuilder.exportSymbols("AIRESPACE-WIRELESS-MIB", bsnRrmDot11aMobilesThreshold=bsnRrmDot11aMobilesThreshold, bsnLicenseKeyTrapVariable=bsnLicenseKeyTrapVariable, bsnRadiusAccServerIPSecDHGroup=bsnRadiusAccServerIPSecDHGroup, bsnSyslogRemoteAddress=bsnSyslogRemoteAddress, bsnMobileStationByUsernameTable=bsnMobileStationByUsernameTable, bsnUtility=bsnUtility, bsnDot11EssInterfaceName=bsnDot11EssInterfaceName, bsnRrmDot11aChannelMonitorList=bsnRrmDot11aChannelMonitorList, bsnAclRuleRowStatus=bsnAclRuleRowStatus, bsnMeshNodePoorNeighSnr=bsnMeshNodePoorNeighSnr, bsnStandardSignatureDescription=bsnStandardSignatureDescription, bsnRadiusAuthClientAccessRejects=bsnRadiusAuthClientAccessRejects, bsnRogueAPSsid=bsnRogueAPSsid, bsnTotalHandoffAsLocalReceived=bsnTotalHandoffAsLocalReceived, bsnTotalTransmitErrors=bsnTotalTransmitErrors, bsnMobilityStats=bsnMobilityStats, bsnGlobalDot11aDataRate24Mhz=bsnGlobalDot11aDataRate24Mhz, bsnRadiusAccServerRowStatus=bsnRadiusAccServerRowStatus, bsnMobilityAnchorWlanSsid=bsnMobilityAnchorWlanSsid, bsnRadiusAuthKeyWrapEnable=bsnRadiusAuthKeyWrapEnable, bsnMobileStationByIpTable=bsnMobileStationByIpTable, bsnMobilityGroupMemberRowStatus=bsnMobilityGroupMemberRowStatus, bsnDot11EssAAAOverride=bsnDot11EssAAAOverride, bsnAPIfRxNeighborsTable=bsnAPIfRxNeighborsTable, bsnAPIfLoadNumOfClients=bsnAPIfLoadNumOfClients, BsnSignaturePatternOffSetStart=BsnSignaturePatternOffSetStart, bsnTrustedApRadioPolicyUsed=bsnTrustedApRadioPolicyUsed, bsnAPIfDot11TxPowerLevel2=bsnAPIfDot11TxPowerLevel2, bsnRadiusAccServerIPSecIKEPhase1=bsnRadiusAccServerIPSecIKEPhase1, bsnStandardSignaturePatternEntry=bsnStandardSignaturePatternEntry, bsnGlobalDot11PrivacyOptionImplemented=bsnGlobalDot11PrivacyOptionImplemented, bsnMobileStationE2eVersion=bsnMobileStationE2eVersion, bsnGlobalDot11CountryIndex=bsnGlobalDot11CountryIndex, bsnTagBytesReceived=bsnTagBytesReceived, bsnCustomSignatureMacFreq=bsnCustomSignatureMacFreq, bsnMobileStationRssiDataApIfSlotId=bsnMobileStationRssiDataApIfSlotId, bsnWrasObsTrap=bsnWrasObsTrap, bsnExternalPolicyServerPortNumber=bsnExternalPolicyServerPortNumber, bsnAPIfLoadParametersEntry=bsnAPIfLoadParametersEntry, bsnGlobalDot11bMaxReceiveLifetime=bsnGlobalDot11bMaxReceiveLifetime, bsnWrasIpsecCertTable=bsnWrasIpsecCertTable, bsnGlobalDot11bMediumOccupancyLimit=bsnGlobalDot11bMediumOccupancyLimit, bsnUserInterfaceName=bsnUserInterfaceName, bsnLinkTestClientRSSI=bsnLinkTestClientRSSI, bsnIpsecSuiteNegFailure=bsnIpsecSuiteNegFailure, bsnSuiteInitFailures=bsnSuiteInitFailures, bsnConfigSaveTrapEnable=bsnConfigSaveTrapEnable, bsnMeshNodeBackhaul=bsnMeshNodeBackhaul, bsnRogueApAutoContained=bsnRogueApAutoContained, bsnAPAuthorizationTable=bsnAPAuthorizationTable, bsnAPIfDot11TransmittedFragmentCount=bsnAPIfDot11TransmittedFragmentCount, bsnAPMirrorMode=bsnAPMirrorMode, bsnWrasDot11bGroupTable=bsnWrasDot11bGroupTable, bsnGlobalDot11bShortPreamble=bsnGlobalDot11bShortPreamble, bsnRadiusAccServerIPSec=bsnRadiusAccServerIPSec, bsnRrmDot11bForeignNoiseThreshold=bsnRrmDot11bForeignNoiseThreshold, bsnRogueAPChannelNumber=bsnRogueAPChannelNumber, bsnGlobalDot11MultiDomainCapabilityEnabled=bsnGlobalDot11MultiDomainCapabilityEnabled, bsnRrmDot11bMobilesThreshold=bsnRrmDot11bMobilesThreshold, locationNotifyTrap=locationNotifyTrap, bsnAPCoverageProfileFailed=bsnAPCoverageProfileFailed, bsnClientWatchListFeature=bsnClientWatchListFeature, bsnDot11EssIPv6Bridging=bsnDot11EssIPv6Bridging, bsnSignatureMacInfo=bsnSignatureMacInfo, bsnAPIfDot11TxPowerLevel7=bsnAPIfDot11TxPowerLevel7, bsnRadiusAccServerInetAddressType=bsnRadiusAccServerInetAddressType, bsnAclRuleEntry=bsnAclRuleEntry, bsnRogueAdhocMode=bsnRogueAdhocMode, bsnSystemCurrentTime=bsnSystemCurrentTime, bsnAPNeighborAuthConfig=bsnAPNeighborAuthConfig, bsnPOEControllerFailure=bsnPOEControllerFailure, bsnGlobalDot11bDataRate48Mhz=bsnGlobalDot11bDataRate48Mhz, bsnAPIfDot11NumberSupportedPowerLevels=bsnAPIfDot11NumberSupportedPowerLevels, bsnDot11EssCreated=bsnDot11EssCreated, bsnLocalManagementUserAccessMode=bsnLocalManagementUserAccessMode, bsnTagLastReported=bsnTagLastReported, bsnRrmDot11aGroupLeaderMacAddr=bsnRrmDot11aGroupLeaderMacAddr, bsnMeshNodeRxNeighReq=bsnMeshNodeRxNeighReq, bsnRrmDot11aThroughputThreshold=bsnRrmDot11aThroughputThreshold, bsnRadiusAccClientMalformedResponses=bsnRadiusAccClientMalformedResponses, bsnAAARadiusCallStationIdType=bsnAAARadiusCallStationIdType, bsnTotalHandoffRepliesReceived=bsnTotalHandoffRepliesReceived, bsnAPIfDot11TxPowerLevel3=bsnAPIfDot11TxPowerLevel3, bsnGlobalDot11bDataRate6Mhz=bsnGlobalDot11bDataRate6Mhz, bsnMobileStationByIpAddress=bsnMobileStationByIpAddress, bsnPingTestReceivedCount=bsnPingTestReceivedCount, bsnMobileStationShortPreambleOptionImplemented=bsnMobileStationShortPreambleOptionImplemented, bsnAPLocation=bsnAPLocation, bsnWrasDot11aGroupEntry=bsnWrasDot11aGroupEntry, bsnRadiusAuthClientBadAuthenticators=bsnRadiusAuthClientBadAuthenticators, bsnStandardSignaturePatternTable=bsnStandardSignaturePatternTable, bsnRogueClientTotalDetectingAPs=bsnRogueClientTotalDetectingAPs, bsnMobileStationDeleteAction=bsnMobileStationDeleteAction, bsnMobileStationMobilityStatus=bsnMobileStationMobilityStatus, bsnRogueAPAirespaceAPSNR=bsnRogueAPAirespaceAPSNR, bsnImpersonatedAPMacAddr=bsnImpersonatedAPMacAddr, bsnDot11EssWPAAuthPresharedKeyHex=bsnDot11EssWPAAuthPresharedKeyHex, bsnMobileStationMirrorMode=bsnMobileStationMirrorMode, bsnRogueClientState=bsnRogueClientState, bsnGlobalDot11aLongRetryLimit=bsnGlobalDot11aLongRetryLimit, bsnRrmDot11aGroupLastUpdateTime=bsnRrmDot11aGroupLastUpdateTime, bsnSystemClockTime=bsnSystemClockTime, bsnGlobalDot11bPicoCellMode=bsnGlobalDot11bPicoCellMode, bsnAPIfDot11CFPPeriod=bsnAPIfDot11CFPPeriod, bsnGlobalDot11bFastRoamingVoipPercentage=bsnGlobalDot11bFastRoamingVoipPercentage, bsnGlobalDot11aRxSopThreshold=bsnGlobalDot11aRxSopThreshold, bsnMobileStationStatsEntry=bsnMobileStationStatsEntry, bsnRogueAPContainmentLevel=bsnRogueAPContainmentLevel, bsnAPIfRxNeighborChannelWidth=bsnAPIfRxNeighborChannelWidth, bsnDot11EssDhcpRequired=bsnDot11EssDhcpRequired, bsnWrasTrap=bsnWrasTrap, bsnCustomSignatureMacInfo=bsnCustomSignatureMacInfo, bsnTrustedApIsMissing=bsnTrustedApIsMissing, bsnDot11EssVpnPassthruGateway=bsnDot11EssVpnPassthruGateway, bsnRrmDot11bGroupLeaderMacAddr=bsnRrmDot11bGroupLeaderMacAddr, bsnStandardSignatureFrequency=bsnStandardSignatureFrequency, bsnThirdPartyAP802Dot1XRequired=bsnThirdPartyAP802Dot1XRequired, bsnStationBlacklistingReasonCode=bsnStationBlacklistingReasonCode, bsnRogueClientAirespaceAPRSSI=bsnRogueClientAirespaceAPRSSI, bsnRadiusAuthServerIPSecIKEPhase1=bsnRadiusAuthServerIPSecIKEPhase1, bsnStandardSignaturePrecedence=bsnStandardSignaturePrecedence, bsnRadiusAuthServerEntry=bsnRadiusAuthServerEntry, invalidRadioTrap=invalidRadioTrap, bsnRadiusAuthServerRowStatus=bsnRadiusAuthServerRowStatus, bsnWrasIpsecCACertificate=bsnWrasIpsecCACertificate, bsnAPIfStationSNRCoverageInfoEntry=bsnAPIfStationSNRCoverageInfoEntry, bsnStationReasonCode=bsnStationReasonCode, bsnAPIfRxNeighborRSSI=bsnAPIfRxNeighborRSSI, bsnWrasIpsecCertStatus=bsnWrasIpsecCertStatus, bsnRogueClientTable=bsnRogueClientTable, bsnAPIfStationSNRCoverageIndex=bsnAPIfStationSNRCoverageIndex, bsnAPIfCellSiteConfigId=bsnAPIfCellSiteConfigId, bsnMeshNodeEthernetBridge=bsnMeshNodeEthernetBridge, bsnDot11EssWebPassthroughEmail=bsnDot11EssWebPassthroughEmail, bsnAPIfDot11CFPMaxDuration=bsnAPIfDot11CFPMaxDuration, bsnNavDosAttackSourceMacAddr=bsnNavDosAttackSourceMacAddr, bsnTrustedApHasInvalidRadioPolicy=bsnTrustedApHasInvalidRadioPolicy, bsnAPIfDot11TxPowerLevel1=bsnAPIfDot11TxPowerLevel1, bsnWrasDepGroup=bsnWrasDepGroup, bsnGlobalDot11bDynamicChannelAssignment=bsnGlobalDot11bDynamicChannelAssignment, bsnNetworkStateChanged=bsnNetworkStateChanged, bsnRadiusAuthServerAddress=bsnRadiusAuthServerAddress, bsnMeshNodeBlacklistPackets=bsnMeshNodeBlacklistPackets, bsnAAARadiusCompatibilityMode=bsnAAARadiusCompatibilityMode, bsnGlobalDot11bFastRoamingMode=bsnGlobalDot11bFastRoamingMode, bsnWrasObsGroup=bsnWrasObsGroup, bsnWlanIdTrapVariable=bsnWlanIdTrapVariable, bsnDot11ModePolicyEnforced=bsnDot11ModePolicyEnforced, bsnApMaxRogueCountExceeded=bsnApMaxRogueCountExceeded, bsnMobilityAnchorsTable=bsnMobilityAnchorsTable, bsnMobileStationByIpEntry=bsnMobileStationByIpEntry, bsnAPIfRadarSignalLastHeard=bsnAPIfRadarSignalLastHeard, bsnPing=bsnPing, bsnRogueLocationDiscoveryProtocol=bsnRogueLocationDiscoveryProtocol, bsnGlobalDot11bPowerUpdateCmdInvoke=bsnGlobalDot11bPowerUpdateCmdInvoke, bsnDot11QosAverageDataRate=bsnDot11QosAverageDataRate, bsnDot11WiredQosProtocol=bsnDot11WiredQosProtocol, bsnTrapControl=bsnTrapControl, bsnAPIfWlanOverrideRowStatus=bsnAPIfWlanOverrideRowStatus, bsnClientExclusionPolicyConfig=bsnClientExclusionPolicyConfig, bsnRadiusAuthCacheCredentialsLocally=bsnRadiusAuthCacheCredentialsLocally, bsnApFallbackEnabled=bsnApFallbackEnabled, bsnInterferenceBeforeChannelUpdate=bsnInterferenceBeforeChannelUpdate, bsnExternalPolicyServerAddress=bsnExternalPolicyServerAddress, bsnMobility=bsnMobility, bsnRogueAPTable=bsnRogueAPTable, bsnAPIfDot11BSSID=bsnAPIfDot11BSSID, bsnRrmDot11aRFUtilizationThreshold=bsnRrmDot11aRFUtilizationThreshold, bsnEssGroupRev1=bsnEssGroupRev1, bsnGlobalDot11aTIThreshold=bsnGlobalDot11aTIThreshold, bsnRogueClientAirespaceAPMacAddress=bsnRogueClientAirespaceAPMacAddress, bsnGlobalDot11aDynamicChannelUpdateInterval=bsnGlobalDot11aDynamicChannelUpdateInterval, bsnAPIfRxNeighborsEntry=bsnAPIfRxNeighborsEntry, bsnAPIfDot11PhyTxPowerTable=bsnAPIfDot11PhyTxPowerTable, bsnAPNameTrapVariable=bsnAPNameTrapVariable, bsnRADIUSServerNotResponding=bsnRADIUSServerNotResponding, bsnMobileStationEncryptionCypher=bsnMobileStationEncryptionCypher, bsnDot11EssRadiusAuthTertiaryServer=bsnDot11EssRadiusAuthTertiaryServer, bsnRogueAPTotalClients=bsnRogueAPTotalClients, bsnCustomSignaturePatternTable=bsnCustomSignaturePatternTable, bsnAPIfDot11ReceivedFragmentCount=bsnAPIfDot11ReceivedFragmentCount, bsnRadiusAccClientPendingRequests=bsnRadiusAccClientPendingRequests, bsnGlobalDot11RogueTimer=bsnGlobalDot11RogueTimer, bsnRadiusAuthServerTable=bsnRadiusAuthServerTable, bsnAPGroupsVlanConfig=bsnAPGroupsVlanConfig, bsnAPBootVersion=bsnAPBootVersion, bsnAAAGroupRev1=bsnAAAGroupRev1, bsnTotalAnchorRequestsSent=bsnTotalAnchorRequestsSent, bsnAPIfDot11MacShortRetryLimit=bsnAPIfDot11MacShortRetryLimit, bsnRrmIsDot11aGroupLeader=bsnRrmIsDot11aGroupLeader, bsnDot11EssVpnSharedKey=bsnDot11EssVpnSharedKey, bsnIpsecTrapsMask=bsnIpsecTrapsMask, bsnMobilityStatsReset=bsnMobilityStatsReset, bsnMobileStationPolicyErrors=bsnMobileStationPolicyErrors, bsnAPAuthHashKey=bsnAPAuthHashKey, bsnTotalCommunicationErrors=bsnTotalCommunicationErrors, bsnAPIfEntry=bsnAPIfEntry, bsnAPGroupsVlanTable=bsnAPGroupsVlanTable, bsnTagTable=bsnTagTable, bsnMobileStationPacketsSent=bsnMobileStationPacketsSent, bsnStandardSignatureInterval=bsnStandardSignatureInterval, bsnAPAuthCertificateType=bsnAPAuthCertificateType, bsnAPIfUp=bsnAPIfUp, bsnDot11EssIpsecPassthruSecurity=bsnDot11EssIpsecPassthruSecurity, bsnMobileStationAPMacAddr=bsnMobileStationAPMacAddr, bsnGlobalDot11bPowerUpdateCmdStatus=bsnGlobalDot11bPowerUpdateCmdStatus, bsnAPIfCoverageThreshold=bsnAPIfCoverageThreshold, bsnAPIfAbsolutePowerList=bsnAPIfAbsolutePowerList, bsnRogueAPOnWiredNetwork=bsnRogueAPOnWiredNetwork, bsnGlobalDot11aMaxReceiveLifetime=bsnGlobalDot11aMaxReceiveLifetime, bsnGlobalDot11bCFPMaxDuration=bsnGlobalDot11bCFPMaxDuration, bsnTemperatureSensorFailure=bsnTemperatureSensorFailure, bsnAPFunctionalityDisabled=bsnAPFunctionalityDisabled, bsnAPSlotIdTrapVariable=bsnAPSlotIdTrapVariable, bsnRadiusAccServerNetworkUserConfig=bsnRadiusAccServerNetworkUserConfig, bsnGlobalDot11aDynamicTxPowerControlInterval=bsnGlobalDot11aDynamicTxPowerControlInterval, bsnUserEssIndex=bsnUserEssIndex, bsnGlobalDot11aNumberofChannels=bsnGlobalDot11aNumberofChannels, bsnGlobalDot11aChannelAgilityEnabled=bsnGlobalDot11aChannelAgilityEnabled, bsnAPSoftwareVersion=bsnAPSoftwareVersion, bsnLocalNetUserStartTime=bsnLocalNetUserStartTime, bsnDot11EssStaticWEPKeyIndex=bsnDot11EssStaticWEPKeyIndex, bsnMeshNodeMalformedNeighPackets=bsnMeshNodeMalformedNeighPackets, bsnPingTestMaxTimeInterval=bsnPingTestMaxTimeInterval, bsnCustomSignaturePatternRowStatus=bsnCustomSignaturePatternRowStatus, bsnAPIfDown=bsnAPIfDown, bsnAPIfDot11MacFragmentationThreshold=bsnAPIfDot11MacFragmentationThreshold, bsnTotalAnchorGrantReceived=bsnTotalAnchorGrantReceived, bsnMeshNeighRapEase=bsnMeshNeighRapEase, bsnCustomSignaturePrecedence=bsnCustomSignaturePrecedence, bsnAPIfTable=bsnAPIfTable, bsnGlobalDot11aPowerUpdateCmdInvoke=bsnGlobalDot11aPowerUpdateCmdInvoke, bsnStandardSignaturePatternMask=bsnStandardSignaturePatternMask, bsnThirdPartyAPEntry=bsnThirdPartyAPEntry, bsnRrmDot11bMobileMinExceptionLevel=bsnRrmDot11bMobileMinExceptionLevel, bsnAP=bsnAP, bsnMeshNodeRole=bsnMeshNodeRole, bsnLinkTestEntry=bsnLinkTestEntry, bsnAPNoiseProfileUpdatedToPass=bsnAPNoiseProfileUpdatedToPass, bsnTotalAnchorDenyReceived=bsnTotalAnchorDenyReceived, bsnRogueAPAirespaceAPLastHeard=bsnRogueAPAirespaceAPLastHeard, bsnMobileStationProtocol=bsnMobileStationProtocol, bsnRadiusAccClientUnknownTypes=bsnRadiusAccClientUnknownTypes, bsnGlobalDot11aCFPollRequest=bsnGlobalDot11aCFPollRequest, bsnDot11EssVpnQotdServerAddress=bsnDot11EssVpnQotdServerAddress, bsnMobileStationPerRadioPerVapEntry=bsnMobileStationPerRadioPerVapEntry, countryChangeTrap=countryChangeTrap, bsnDot11EssWPASecurity=bsnDot11EssWPASecurity, bsnDot11Ess8021xEncryptionType=bsnDot11Ess8021xEncryptionType, bsnStandardSignatureEntry=bsnStandardSignatureEntry, bsnMobileStationPortNumber=bsnMobileStationPortNumber, bsnRfIdTagDataTimeout=bsnRfIdTagDataTimeout, bsnLicenseKeyFeatureSetTrapVariable=bsnLicenseKeyFeatureSetTrapVariable, bsnMeshNeighTxParent=bsnMeshNeighTxParent)
mibBuilder.exportSymbols("AIRESPACE-WIRELESS-MIB", bsnSignatureAttackPreced=bsnSignatureAttackPreced, bsnMeshNodeHops=bsnMeshNodeHops, bsnDot11EssRSNAllowTKIPClients=bsnDot11EssRSNAllowTKIPClients, bsnRogueAPType=bsnRogueAPType, bsnIpsecEspReplayFailureTrap=bsnIpsecEspReplayFailureTrap, bsnAPIfStationCountOnRSSI=bsnAPIfStationCountOnRSSI, bsnWepKeyDecryptError=bsnWepKeyDecryptError, bsnStationAPMacAddr=bsnStationAPMacAddr, bsnGlobalDot11bEDThreshold=bsnGlobalDot11bEDThreshold, bsnTrustedApPolicyConfig=bsnTrustedApPolicyConfig, bsnRrmDot11aForeignInterferenceThreshold=bsnRrmDot11aForeignInterferenceThreshold, bsnAPIfInterferenceUtilization=bsnAPIfInterferenceUtilization, bsnAPIfStationRSSICoverageInfoTable=bsnAPIfStationRSSICoverageInfoTable, bsnMobileStationPerRadioPerVapIndex=bsnMobileStationPerRadioPerVapIndex, bsnDot11EssEntry=bsnDot11EssEntry, bsnMobileStationSnr=bsnMobileStationSnr, bsnGlobalDot11bNumberofChannels=bsnGlobalDot11bNumberofChannels, bsnDot11EssRSNSecurity=bsnDot11EssRSNSecurity, bsnDot11EssL2tpSecurity=bsnDot11EssL2tpSecurity, bsnMobileStationSampleTime=bsnMobileStationSampleTime, bsnAuthenticationFailure=bsnAuthenticationFailure, bsnThirdPartyAPIpAddress=bsnThirdPartyAPIpAddress, bsnMobileStationExtStatsTable=bsnMobileStationExtStatsTable, bsnTrapsGroup=bsnTrapsGroup, bsnDot11EssVpnAuthTransform=bsnDot11EssVpnAuthTransform, WEPKeytype=WEPKeytype, bsnRogueAPMaxRssiRadioType=bsnRogueAPMaxRssiRadioType, bsnAPIfMacOperationParamTable=bsnAPIfMacOperationParamTable, bsnAPGroupsVlanMappingSsid=bsnAPGroupsVlanMappingSsid, bsnAclRuleAction=bsnAclRuleAction, bsnGlobalDot11bCFPollable=bsnGlobalDot11bCFPollable, bsnEncryptionPolicyEnforced=bsnEncryptionPolicyEnforced, bsnBlackListClientTable=bsnBlackListClientTable, bsnMobilityGroupMemberIPAddress=bsnMobilityGroupMemberIPAddress, heartbeatLossTrap=heartbeatLossTrap, bsnAPIfDot11MulticastTransmittedFrameCount=bsnAPIfDot11MulticastTransmittedFrameCount, bsnOperatingTemperatureEnvironment=bsnOperatingTemperatureEnvironment, bsnRogueAPAirespaceAPPreamble=bsnRogueAPAirespaceAPPreamble, bsnStationMacAddress=bsnStationMacAddress, bsnRrmDot11bGroup=bsnRrmDot11bGroup, bsnRogueAPAirespaceAPName=bsnRogueAPAirespaceAPName, bsnRadiusAuthClientPendingRequests=bsnRadiusAuthClientPendingRequests, bsnWatchListClientKey=bsnWatchListClientKey, bsnRxMulticastQueueFull=bsnRxMulticastQueueFull, bsnAPNetmask=bsnAPNetmask, bsnAPIfLoadChannelUtilization=bsnAPIfLoadChannelUtilization, bsnApIfNoOfUsers=bsnApIfNoOfUsers, bsnAPIfLoadProfileState=bsnAPIfLoadProfileState, bsnRogueAPDetectingAPName=bsnRogueAPDetectingAPName, bsnAPIfSniffChannel=bsnAPIfSniffChannel, bsnRadioTypePolicyEnforced=bsnRadioTypePolicyEnforced, bsnAPIfRecommendedFragmentationThreshold=bsnAPIfRecommendedFragmentationThreshold, bsnGlobalDot11aDataRate12Mhz=bsnGlobalDot11aDataRate12Mhz, bsnGlobalDot11bLongRetryLimit=bsnGlobalDot11bLongRetryLimit, bsnCustomSignaturePatternMask=bsnCustomSignaturePatternMask, bsnDot11QosBurstDataRate=bsnDot11QosBurstDataRate, bsnGlobalDot11bDTIMPeriod=bsnGlobalDot11bDTIMPeriod, bsnRogueAPContainmentMode=bsnRogueAPContainmentMode, bsnRadiusAccServerRetransmitTimeout=bsnRadiusAccServerRetransmitTimeout, bsnCustomSignatureEntry=bsnCustomSignatureEntry, bsnAPIfNoiseProfileState=bsnAPIfNoiseProfileState, bsnRogueClientDot11MacAddress=bsnRogueClientDot11MacAddress, bsnRogueAPAirespaceAPWepMode=bsnRogueAPAirespaceAPWepMode, bsnMobileStationByIpMacAddress=bsnMobileStationByIpMacAddress, bsnAPIfDot11MultiDomainCapabilityEnabled=bsnAPIfDot11MultiDomainCapabilityEnabled, bsnGlobalDot11bDTPCSupport=bsnGlobalDot11bDTPCSupport, bsnDot11EssVpnIkeDHGroup=bsnDot11EssVpnIkeDHGroup, bsnTagTimeInterval=bsnTagTimeInterval, bsnMacFilterAddress=bsnMacFilterAddress, bsnAclName=bsnAclName, bsnSystemTimezoneDaylightSavings=bsnSystemTimezoneDaylightSavings, bsnGlobalDot11hConfig=bsnGlobalDot11hConfig, bsnRadiusAuthServerIPSecDHGroup=bsnRadiusAuthServerIPSecDHGroup, bsnPingTestId=bsnPingTestId, bsnRrm=bsnRrm, bsnTotalStateTransitionsDisallowed=bsnTotalStateTransitionsDisallowed, bsnCustomSignatureEnable=bsnCustomSignatureEnable, bsnDot11QosProfileName=bsnDot11QosProfileName, bsnAPInterferenceProfileUpdatedToPass=bsnAPInterferenceProfileUpdatedToPass, bsnMeshNeighState=bsnMeshNeighState, bsnGlobalDot11bCFPPeriod=bsnGlobalDot11bCFPPeriod, bsnGlobalDot11hChannelSwitchEnable=bsnGlobalDot11hChannelSwitchEnable, bsnMemberTotalAnchoredClients=bsnMemberTotalAnchoredClients, bsnDot11EssVpnIkeAuthMode=bsnDot11EssVpnIkeAuthMode, bsnDot11EssWPAAuthKeyMgmtMode=bsnDot11EssWPAAuthKeyMgmtMode, bsnAPIfSNRLevel=bsnAPIfSNRLevel, bsnGlobalDot11bCFPollRequest=bsnGlobalDot11bCFPollRequest, bsnSignatureName=bsnSignatureName, bsnTagRssiDataApMacAddress=bsnTagRssiDataApMacAddress, bsnAPIsStaticIP=bsnAPIsStaticIP, bsnThirdPartyAPRowStatus=bsnThirdPartyAPRowStatus, bsnRadiusAccClientRoundTripTime=bsnRadiusAccClientRoundTripTime, bsnGroupDirectoryMemberIPAddress=bsnGroupDirectoryMemberIPAddress, bsnRadiusAuthClientAccessChallenges=bsnRadiusAuthClientAccessChallenges, bsnRadiusAccClientPacketsDropped=bsnRadiusAccClientPacketsDropped, bsnAPRegulatoryDomainMismatch=bsnAPRegulatoryDomainMismatch, bsnMeshNeighsEntry=bsnMeshNeighsEntry, bsnAPGroupsVlanMappingInterfaceName=bsnAPGroupsVlanMappingInterfaceName, bsnSignatureAttackFrequency=bsnSignatureAttackFrequency, bsnTagStatsTable=bsnTagStatsTable, bsnWrasDot11aGroupTable=bsnWrasDot11aGroupTable, bsnAPTrapControlMask=bsnAPTrapControlMask, bsnAAAGroup=bsnAAAGroup, bsnUserName=bsnUserName, bsnDot11EssFortressSecurity=bsnDot11EssFortressSecurity, locationNotifyContent=locationNotifyContent, bsnTagRssiDataApName=bsnTagRssiDataApName, bsnMobileStationCFPollable=bsnMobileStationCFPollable, bsnBlackListClientEntry=bsnBlackListClientEntry, bsnMacFilterTable=bsnMacFilterTable, bsnMobileStationAnchorAddress=bsnMobileStationAnchorAddress, bsnGlobalDot11bFastRoamingVoipMinRate=bsnGlobalDot11bFastRoamingVoipMinRate, bsnTotalHandoffEndRequestsReceived=bsnTotalHandoffEndRequestsReceived, bsnGlobalDot11aConfig=bsnGlobalDot11aConfig, bsnRtpProtocolPriority=bsnRtpProtocolPriority, bsnAPAuthMacAddress=bsnAPAuthMacAddress, bsnRogueAPAirespaceAPEntry=bsnRogueAPAirespaceAPEntry, bsnMobileStationMacAddr=bsnMobileStationMacAddr, bsnAPRadioCardTxFailure=bsnAPRadioCardTxFailure, bsnMobilityGroupMemberMacAddress=bsnMobilityGroupMemberMacAddress, bsnAPSecondaryMwarName=bsnAPSecondaryMwarName, bsnRrmDot11bSetFactoryDefault=bsnRrmDot11bSetFactoryDefault, bsnAPIfDot11NumberofChannels=bsnAPIfDot11NumberofChannels, bsnIkeTotalInitNoResponses=bsnIkeTotalInitNoResponses, bsnCustomSignatureFrameType=bsnCustomSignatureFrameType, bsnAclRuleIndex=bsnAclRuleIndex, bsnAPIfRadarChannelStatisticsTable=bsnAPIfRadarChannelStatisticsTable, bsnAPLoadProfileUpdatedToPass=bsnAPLoadProfileUpdatedToPass, bsnMeshNodeBackhaulRAP=bsnMeshNodeBackhaulRAP, bsnDot11QosAvgRealTimeDataRate=bsnDot11QosAvgRealTimeDataRate, bsnGlobalDot11aBeaconPeriod=bsnGlobalDot11aBeaconPeriod, bsnTrapsGroupRev1=bsnTrapsGroupRev1, bsnRogueClientAirespaceAPSlotId=bsnRogueClientAirespaceAPSlotId, bsnMobileStationPolicyType=bsnMobileStationPolicyType, bsnGlobalDot11bDataRate12Mhz=bsnGlobalDot11bDataRate12Mhz, bsnOverAirProvisionApMode=bsnOverAirProvisionApMode, bsnRrmDot11aSignalMeasurementInterval=bsnRrmDot11aSignalMeasurementInterval, bsnPrimaryMwarForAPs=bsnPrimaryMwarForAPs, bsnAPIfDot11MacRTSThreshold=bsnAPIfDot11MacRTSThreshold, bsnGlobalDot11a=bsnGlobalDot11a, bsnMobilityConfig=bsnMobilityConfig, bsnTemperatureSensorClear=bsnTemperatureSensorClear, bsnGlobalDot11aFragmentationThreshold=bsnGlobalDot11aFragmentationThreshold, bsnMeshNeighMacAddress=bsnMeshNeighMacAddress, bsnCustomSignaturePatternIndex=bsnCustomSignaturePatternIndex, bsnExternalPolicyServerTable=bsnExternalPolicyServerTable, bsnAPContainedAsARogue=bsnAPContainedAsARogue, bsnRadiusAccServerTable=bsnRadiusAccServerTable, bsnDot11EssSessionTimeout=bsnDot11EssSessionTimeout, bsnMobilityGroupDirectoryTable=bsnMobilityGroupDirectoryTable, bsnWrasIpsecCertificateUpdate=bsnWrasIpsecCertificateUpdate, bsnAPIfProfileParamAssignment=bsnAPIfProfileParamAssignment, bsnRogueAPAirespaceAPWpaMode=bsnRogueAPAirespaceAPWpaMode, bsnDot11EssRadiusAcctSecondaryServer=bsnDot11EssRadiusAcctSecondaryServer, bsnGlobalDot11bNetworkStatus=bsnGlobalDot11bNetworkStatus, bsnAPIfMobilesThreshold=bsnAPIfMobilesThreshold, bsnMobilityGroupMemberGroupName=bsnMobilityGroupMemberGroupName, bsnRrmDot11bCoverageMeasurementInterval=bsnRrmDot11bCoverageMeasurementInterval, bsnAPStatsTimer=bsnAPStatsTimer, bsnLocalManagementUserEntry=bsnLocalManagementUserEntry, bsnUserIpAddress=bsnUserIpAddress, bsnWrasIpsecCertificate=bsnWrasIpsecCertificate, bsnRadiusAuthServerKeyWrapFormat=bsnRadiusAuthServerKeyWrapFormat, bsnAPAdminStatus=bsnAPAdminStatus, bsnDot11802Dot1PTag=bsnDot11802Dot1PTag, bsnRrmDot11aAPDefault=bsnRrmDot11aAPDefault, bsnGlobalDot11aCFPPeriod=bsnGlobalDot11aCFPPeriod, bsnVirtualGatewayAddress=bsnVirtualGatewayAddress, bsnAPIfWlanOverrideSsid=bsnAPIfWlanOverrideSsid, bsnAAACurrentLocalDatabaseSize=bsnAAACurrentLocalDatabaseSize, bsnPolicyForMisconfiguredAps=bsnPolicyForMisconfiguredAps, bsnGlobalDot11aDynamicTransmitPowerControl=bsnGlobalDot11aDynamicTransmitPowerControl, bsnExcessive80211AuthFailures=bsnExcessive80211AuthFailures, bsnMobileStationByUserName=bsnMobileStationByUserName, bsnTotalHandoffs=bsnTotalHandoffs, bsnRogueAPTotalDetectingAPs=bsnRogueAPTotalDetectingAPs, bsnAPDot3MacAddress=bsnAPDot3MacAddress, bsnBridgingZeroTouchConfig=bsnBridgingZeroTouchConfig, bsnMeshNodeInsufficientMemory=bsnMeshNodeInsufficientMemory, bsnRadiusAuthServerStatsTable=bsnRadiusAuthServerStatsTable, bsnAPIfPhyChannelNumber=bsnAPIfPhyChannelNumber, bsnAPIfInterferenceProfileState=bsnAPIfInterferenceProfileState, bsnAPCoverageTotalClients=bsnAPCoverageTotalClients, bsnAclNewRuleIndex=bsnAclNewRuleIndex, bsnRrmDot11aNoiseMeasurementInterval=bsnRrmDot11aNoiseMeasurementInterval, bsnDot11EssStaticWEPKeyFormat=bsnDot11EssStaticWEPKeyFormat, bsnTotalExportedClients=bsnTotalExportedClients, bsnAPIfDot11MultiDomainCapabilityImplemented=bsnAPIfDot11MultiDomainCapabilityImplemented, bsnApIpAddress=bsnApIpAddress, bsnMacFilterEntry=bsnMacFilterEntry, bsnDot11EssVpnSharedKeySize=bsnDot11EssVpnSharedKeySize, bsnDot11EssWPAAuthPresharedKey=bsnDot11EssWPAAuthPresharedKey, bsnExcessive8021xAuthFailures=bsnExcessive8021xAuthFailures, bsnTotalClientHandoffAsForeign=bsnTotalClientHandoffAsForeign, bsnTotalPingPongHandoffRequestsDropped=bsnTotalPingPongHandoffRequestsDropped, bsnAPIfPhyAntennaDiversity=bsnAPIfPhyAntennaDiversity, bsnAPGroupsVlanMappingRowStatus=bsnAPGroupsVlanMappingRowStatus, bsnUserPassword=bsnUserPassword, bsnSensorTemperature=bsnSensorTemperature, bsnCustomSignatureConfigType=bsnCustomSignatureConfigType, bsnCustomSignatureTable=bsnCustomSignatureTable, bsnRrmDot11bGroupingDone=bsnRrmDot11bGroupingDone, bsnAPGroupsVlanEntry=bsnAPGroupsVlanEntry, bsnMobileStationApMode=bsnMobileStationApMode, bsnAPGroupsVlanRowStatus=bsnAPGroupsVlanRowStatus, bsnRadiusAccClientBadAuthenticators=bsnRadiusAccClientBadAuthenticators, bsnDot11EssWPAEncryptionType=bsnDot11EssWPAEncryptionType, bsnMobileStationTable=bsnMobileStationTable, bsnPingTestTable=bsnPingTestTable, bsnMobileStationTxExcessiveRetries=bsnMobileStationTxExcessiveRetries, bsnLinkTestId=bsnLinkTestId, bsnApGroupRev1=bsnApGroupRev1, bsnRogueClientAirespaceAPTable=bsnRogueClientAirespaceAPTable, bsnTrap=bsnTrap, bsnMemberTotalCommunicationErrors=bsnMemberTotalCommunicationErrors, bsnMeshNeighUnadjustedEase=bsnMeshNeighUnadjustedEase, bsnDuplicateIpAddressReported=bsnDuplicateIpAddressReported, bsnSyslogEnable=bsnSyslogEnable, bsnAclRowStatus=bsnAclRowStatus, bsnAPPortNumber=bsnAPPortNumber, bsnRadiusAuthServerInetAddress=bsnRadiusAuthServerInetAddress, bsnMobilityProtocolPortNum=bsnMobilityProtocolPortNum, bsnRadiusAuthServerNetworkUserConfig=bsnRadiusAuthServerNetworkUserConfig, bsnPreamblePolicyEnforced=bsnPreamblePolicyEnforced, bsnRogueAPLastReported=bsnRogueAPLastReported, bsnRadiusAuthServerIPSecEncryption=bsnRadiusAuthServerIPSecEncryption, bsnStationUserName=bsnStationUserName, bsnMobileStationPolicyManagerState=bsnMobileStationPolicyManagerState, bsnDot11Ess7920PhoneSupport=bsnDot11Ess7920PhoneSupport, bsnTrapVariable=bsnTrapVariable, bsnAPIPAddressFallback=bsnAPIPAddressFallback, bsnRogueAPChannel=bsnRogueAPChannel, bsnRogueAPOnNetwork=bsnRogueAPOnNetwork, bsnWrasGroups=bsnWrasGroups, bsnRogueClientLastHeard=bsnRogueClientLastHeard, bsnMeshNeighLastUpdate=bsnMeshNeighLastUpdate, bsnDot11StationTrapControlMask=bsnDot11StationTrapControlMask, bsnRadiusAuthClientAccessRetransmissions=bsnRadiusAuthClientAccessRetransmissions, bsnTrustedApHasInvalidPreamble=bsnTrustedApHasInvalidPreamble, bsnTotalImportedClients=bsnTotalImportedClients, bsnWrasDot11aPeerIpAddress=bsnWrasDot11aPeerIpAddress, bsnAclRuleDirection=bsnAclRuleDirection, bsnDot11EssAdminStatus=bsnDot11EssAdminStatus, bsnAutoContainTrustedClientsOnRogueAps=bsnAutoContainTrustedClientsOnRogueAps, bsnWrasIpsecCertPassword=bsnWrasIpsecCertPassword, bsnRogueAPRemoved=bsnRogueAPRemoved, bsnRadiusAuthServerRetransmitTimeout=bsnRadiusAuthServerRetransmitTimeout, bsnMeshNeighPoorSnr=bsnMeshNeighPoorSnr, bsnWrasDot11bPeerMacAddress=bsnWrasDot11bPeerMacAddress, bsnAPIfChannelInterferenceInfoEntry=bsnAPIfChannelInterferenceInfoEntry, bsnDuplicateIpReportedByAP=bsnDuplicateIpReportedByAP, bsnAPIfRecommendedTxPowerLevel=bsnAPIfRecommendedTxPowerLevel, bsnRadiusAuthServerKeyWrapMACKkey=bsnRadiusAuthServerKeyWrapMACKkey, bsnMemberCurrentImportedClients=bsnMemberCurrentImportedClients)
mibBuilder.exportSymbols("AIRESPACE-WIRELESS-MIB", bsnAPIfMobileMinExceptionLevel=bsnAPIfMobileMinExceptionLevel, bsnGlobalDot11bConfig=bsnGlobalDot11bConfig, bsnAPIfDot11DTIMPeriod=bsnAPIfDot11DTIMPeriod, bsnGlobalDot11aInputsForDTP=bsnGlobalDot11aInputsForDTP, bsnRogueAPDot11MacAddr=bsnRogueAPDot11MacAddr, bsnAPRadioCardTxFailureClear=bsnAPRadioCardTxFailureClear, bsnRogueClientAirespaceAPSNR=bsnRogueClientAirespaceAPSNR, bsnAPIfDot11BeaconPeriod=bsnAPIfDot11BeaconPeriod, bsnGlobalDot11aFastRoamingVoipMinRate=bsnGlobalDot11aFastRoamingVoipMinRate, bsnSignatureType=bsnSignatureType, bsnRogueClientFirstReported=bsnRogueClientFirstReported, bsnAPUp=bsnAPUp, bsnAPNeighborAuthStatus=bsnAPNeighborAuthStatus, bsnGlobalDot11aChannelUpdateCmdInvoke=bsnGlobalDot11aChannelUpdateCmdInvoke, bsnAPCoverageFailedClients=bsnAPCoverageFailedClients, bsnAuthFailureUserType=bsnAuthFailureUserType, bsnAPIfCoverageProfileState=bsnAPIfCoverageProfileState, bsnAPIfRadarChannelStatisticsEntry=bsnAPIfRadarChannelStatisticsEntry, bsnInterferenceEnergyAfterChannelUpdate=bsnInterferenceEnergyAfterChannelUpdate, bsnAPIfDot11FirstChannelNumber=bsnAPIfDot11FirstChannelNumber, bsnGlobalDot11aDataRate6Mhz=bsnGlobalDot11aDataRate6Mhz, bsnAPIfDot11TransmittedFrameCount=bsnAPIfDot11TransmittedFrameCount, bsnMeshNeighsTable=bsnMeshNeighsTable, bsnInterferenceAfterChannelUpdate=bsnInterferenceAfterChannelUpdate, bsnRadiusAccServerIPSecAuth=bsnRadiusAccServerIPSecAuth, bsnRadiusAuthClientPacketsDropped=bsnRadiusAuthClientPacketsDropped, bsnAPCoverageThresholdTrapVariable=bsnAPCoverageThresholdTrapVariable, bsnAPIfRxNeighborSlot=bsnAPIfRxNeighborSlot, bsnAPIfDot11TxPowerLevel5=bsnAPIfDot11TxPowerLevel5, bsnResponderCookie=bsnResponderCookie, bsnGlobalDot11bCurrentChannel=bsnGlobalDot11bCurrentChannel, bsnAPIfForeignNoiseThreshold=bsnAPIfForeignNoiseThreshold, bsnAPIfRecommendedChannelNumber=bsnAPIfRecommendedChannelNumber, bsnAutoContainAdhocNetworks=bsnAutoContainAdhocNetworks, bsnGlobalDot11aInputsForDCA=bsnGlobalDot11aInputsForDCA, bsnGlobalDot11h=bsnGlobalDot11h, bsnAPCoverageProfileUpdatedToPass=bsnAPCoverageProfileUpdatedToPass, bsnMeshNeighSnrUp=bsnMeshNeighSnrUp, bsnTagRssiData=bsnTagRssiData, bsnIpsecSPI=bsnIpsecSPI, bsnSensedTemperatureTooHigh=bsnSensedTemperatureTooHigh, bsnLinkTestMacAddress=bsnLinkTestMacAddress, bsnWireless=bsnWireless, bsnRadiusAccServerStatsTable=bsnRadiusAccServerStatsTable, bsnTagStatsEntry=bsnTagStatsEntry, bsnMaxRogueCountClear=bsnMaxRogueCountClear, bsnGlobalDot11aFirstChannelNumber=bsnGlobalDot11aFirstChannelNumber, bsnTagDot11MacAddress=bsnTagDot11MacAddress, bsnWpaMicErrorCounterActivated=bsnWpaMicErrorCounterActivated, bsnIpsecEspAuthFailureTrap=bsnIpsecEspAuthFailureTrap, bsnExternalPolicyServerRowStatus=bsnExternalPolicyServerRowStatus, bsnDot11EssVpnIkeLifetime=bsnDot11EssVpnIkeLifetime, bsnRogueAPDot11MacAddress=bsnRogueAPDot11MacAddress, bsnRrmDot11aGlobalAutomaticGrouping=bsnRrmDot11aGlobalAutomaticGrouping, bsnRrmDot11aLoadMeasurementInterval=bsnRrmDot11aLoadMeasurementInterval, bsnDot11EssDhcpServerIpAddress=bsnDot11EssDhcpServerIpAddress, bsnRogueClientContainmentLevel=bsnRogueClientContainmentLevel, bsnGroupDirectoryMemberMacAddress=bsnGroupDirectoryMemberMacAddress, bsnStandardSignatureFrameType=bsnStandardSignatureFrameType, bsnPingTestStatus=bsnPingTestStatus, bsnPingTestIPAddress=bsnPingTestIPAddress, bsnAllowAuthorizeApAgainstAAA=bsnAllowAuthorizeApAgainstAAA, bsnDot11EssAclName=bsnDot11EssAclName, bsnGlobalDot11aDataRate18Mhz=bsnGlobalDot11aDataRate18Mhz, bsnTagPacketsReceived=bsnTagPacketsReceived, bsnDot11EssNumberOfMobileStations=bsnDot11EssNumberOfMobileStations, ProfileState=ProfileState, bsnMobileStationReasonCode=bsnMobileStationReasonCode, bsnLinkTestStatus=bsnLinkTestStatus, bsnWrasObsGroupRev1=bsnWrasObsGroupRev1, bsnNotifiesSent=bsnNotifiesSent, bsnStandardSignatureName=bsnStandardSignatureName, bsnMeshNeighRxParent=bsnMeshNeighRxParent, bsnNoiseAfterChannelUpdate=bsnNoiseAfterChannelUpdate, bsnAPIfDot11FailedCount=bsnAPIfDot11FailedCount, bsnGlobalDot11aDTPCSupport=bsnGlobalDot11aDTPCSupport, bsnRogueAPDetectingAPMacAddress=bsnRogueAPDetectingAPMacAddress, bsnGlobalDot11hPowerConstraint=bsnGlobalDot11hPowerConstraint, bsnAPName=bsnAPName, bsnAPIfDot11RTSSuccessCount=bsnAPIfDot11RTSSuccessCount, bsnAPIfSniffServerIPAddress=bsnAPIfSniffServerIPAddress, bsnAclRuleProtocol=bsnAclRuleProtocol, bsnEssGroup=bsnEssGroup, bsnMobileStationIpAddress=bsnMobileStationIpAddress, bsnAPClearConfig=bsnAPClearConfig, bsnMobilityAnchorsEntry=bsnMobilityAnchorsEntry, bsnRFMobilityDomainName=bsnRFMobilityDomainName, bsnUserAccessMode=bsnUserAccessMode, bsnRogueAPDetected=bsnRogueAPDetected, bsnAdhocRogueAutoContained=bsnAdhocRogueAutoContained, bsnRrmDot11bSignalMeasurementInterval=bsnRrmDot11bSignalMeasurementInterval, bsnClientRssi=bsnClientRssi, bsnMobileStationRssiDataApName=bsnMobileStationRssiDataApName, bsnAPIfOperStatus=bsnAPIfOperStatus, bsnRadiusAccServerStatsEntry=bsnRadiusAccServerStatsEntry, bsnDot11StationAuthenticateFail=bsnDot11StationAuthenticateFail, bsnSignatureCheckState=bsnSignatureCheckState, bsnApMaxRogueCountClear=bsnApMaxRogueCountClear, bsnAPAuthorizationEntry=bsnAPAuthorizationEntry, bsnLocalManagementUserRowStatus=bsnLocalManagementUserRowStatus, bsnAPIfWlanOverride=bsnAPIfWlanOverride, bsnCurrentExportedClients=bsnCurrentExportedClients, bsnRadiusAuthServerRFC3576=bsnRadiusAuthServerRFC3576, bsnGlobalDot11bDynamicTransmitPowerControl=bsnGlobalDot11bDynamicTransmitPowerControl, bsnIpsecInvalidCookieTrap=bsnIpsecInvalidCookieTrap, bsnTotalReceiveErrors=bsnTotalReceiveErrors, bsnExternalPolicyServerAclName=bsnExternalPolicyServerAclName, bsnRadiusAuthServerStatsEntry=bsnRadiusAuthServerStatsEntry, bsnAPDown=bsnAPDown, bsnAlertIfTrustedApMissing=bsnAlertIfTrustedApMissing, bsnUsersTable=bsnUsersTable, bsnDot11EssRadioPolicy=bsnDot11EssRadioPolicy, bsnGlobalDot11bCurrentTxPowerLevel=bsnGlobalDot11bCurrentTxPowerLevel, bsnSignatureConfig=bsnSignatureConfig, bsnAPIfDot11ACKFailureCount=bsnAPIfDot11ACKFailureCount, bsnMobileStationTxFiltered=bsnMobileStationTxFiltered, bsnMobileStationRssiDataTable=bsnMobileStationRssiDataTable, bsnRogueAPClassType=bsnRogueAPClassType, bsnAPIfPhyAntennaMode=bsnAPIfPhyAntennaMode, bsnWatchListClientTable=bsnWatchListClientTable, bsnAPGroupsVlanName=bsnAPGroupsVlanName, bsnTotalHandoffRequestsDropped=bsnTotalHandoffRequestsDropped, bsnLocalNetUserPassword=bsnLocalNetUserPassword, bsnMobileStationInterface=bsnMobileStationInterface, bsnThirdPartyAPMirrorMode=bsnThirdPartyAPMirrorMode, bsnAclRuleStartDestinationPort=bsnAclRuleStartDestinationPort, bsnMobileStationByUserMacAddress=bsnMobileStationByUserMacAddress, bsnApHasNoRadioCards=bsnApHasNoRadioCards, bsnAPGateway=bsnAPGateway, bsnRrmDot11bCoverageExceptionLevel=bsnRrmDot11bCoverageExceptionLevel, bsnMeshNodeAPType=bsnMeshNodeAPType, bsnGlobalDot11bInputsForDCA=bsnGlobalDot11bInputsForDCA, bsnLocalNetUserLifetime=bsnLocalNetUserLifetime, bsnGlobalDot11bPhy=bsnGlobalDot11bPhy, bsnWrasIpsecCertName=bsnWrasIpsecCertName, bsnRadiosExceedLicenseCount=bsnRadiosExceedLicenseCount, bsnConfigSaved=bsnConfigSaved, bsnPingTestEntry=bsnPingTestEntry, bsnRadiusAccServerKey=bsnRadiusAccServerKey, bsnMobileStationBytesSent=bsnMobileStationBytesSent, bsnAPIfDot11TIThreshold=bsnAPIfDot11TIThreshold, bsnMemberCurrentAnchoredClients=bsnMemberCurrentAnchoredClients, bsnAPRadioCardRxFailure=bsnAPRadioCardRxFailure, bsnCurrentRadiosCount=bsnCurrentRadiosCount, bsnRogueClientRadioType=bsnRogueClientRadioType, bsnWrasTrapRev1=bsnWrasTrapRev1, bsnMaxRogueCount=bsnMaxRogueCount, bsnDot11EssStaticWEPDefaultKey=bsnDot11EssStaticWEPDefaultKey, bsnMobileStationRssiDataEntry=bsnMobileStationRssiDataEntry, bsnExternalPolicyServerAdminStatus=bsnExternalPolicyServerAdminStatus, bsnTagBatteryStatus=bsnTagBatteryStatus, bsnRrmDot11bLoadMeasurementInterval=bsnRrmDot11bLoadMeasurementInterval, bsnAPIfDot11CountryString=bsnAPIfDot11CountryString, bsnAPCurrentChannelChanged=bsnAPCurrentChannelChanged, bsnDot11EssStaticWEPEncryptionType=bsnDot11EssStaticWEPEncryptionType, bsnAPIfDot11TxPowerLevel4=bsnAPIfDot11TxPowerLevel4, bsnExternalPolicyServerKey=bsnExternalPolicyServerKey, bsnDot11EssVpnEncrTransform=bsnDot11EssVpnEncrTransform, bsnDot11Ess80211ePolicySetting=bsnDot11Ess80211ePolicySetting, bsnAPAuthorizationFailure=bsnAPAuthorizationFailure, bsnRadiusAccServerIndex=bsnRadiusAccServerIndex, bsnTotalAnchorRequestsReceived=bsnTotalAnchorRequestsReceived, bsnCustomSignatureFrequency=bsnCustomSignatureFrequency, bsnRadiusAccServerKeyFormat=bsnRadiusAccServerKeyFormat, bsnRrmDot11aGlobalGroupInterval=bsnRrmDot11aGlobalGroupInterval, bsnLinkTestLocalSNR=bsnLinkTestLocalSNR, bsnStandardSignaturePatternString=bsnStandardSignaturePatternString, bsnTotalHandoffRequestsReceived=bsnTotalHandoffRequestsReceived, bsnAPChannelNumberTrapVariable=bsnAPChannelNumberTrapVariable, bsnRogueAPChannelWidth=bsnRogueAPChannelWidth, bsnGlobalDot11bChannelUpdateCmdStatus=bsnGlobalDot11bChannelUpdateCmdStatus, bsnAPPreviousChannelNumberTrapVariable=bsnAPPreviousChannelNumberTrapVariable, bsnTagRssiDataApIfType=bsnTagRssiDataApIfType, bsnGlobalDot11bMaxTransmitMSDULifetime=bsnGlobalDot11bMaxTransmitMSDULifetime, bsnRrmDot11aForeignNoiseThreshold=bsnRrmDot11aForeignNoiseThreshold, bsnRadiusAccClientTimeouts=bsnRadiusAccClientTimeouts, bsnAPCurrentTxPowerChanged=bsnAPCurrentTxPowerChanged, BsnTxtSignatureMacInfo=BsnTxtSignatureMacInfo, bsnRrmDot11bForeignInterferenceThreshold=bsnRrmDot11bForeignInterferenceThreshold, bsnLocalNetUserTable=bsnLocalNetUserTable, bsnDot11EssSecurityAuthType=bsnDot11EssSecurityAuthType, bsnAPIfRadarDetectedChannelNumber=bsnAPIfRadarDetectedChannelNumber, bsnAPIfDot11PhyTxPowerEntry=bsnAPIfDot11PhyTxPowerEntry, bsnAPIfMultiDomainCapabilityTable=bsnAPIfMultiDomainCapabilityTable, bsnBlackListClientDescription=bsnBlackListClientDescription, bsnAPIfPortNumber=bsnAPIfPortNumber, bsnDot11EssBroadcastSsid=bsnDot11EssBroadcastSsid, bsnGlobalDot11aChannelUpdateCmdStatus=bsnGlobalDot11aChannelUpdateCmdStatus, bsnCurrentImportedClients=bsnCurrentImportedClients, bsnRadiusAuthServerMgmtUserConfig=bsnRadiusAuthServerMgmtUserConfig, bsnRogueAPContainmentChannels=bsnRogueAPContainmentChannels, bsnMeshNodeDataRate=bsnMeshNodeDataRate, bsnUpdateSystemTime=bsnUpdateSystemTime, bsnMobileStationVlanId=bsnMobileStationVlanId, bsnAPIfSmtParamTable=bsnAPIfSmtParamTable, bsnGlobalDot11aDataRate9Mhz=bsnGlobalDot11aDataRate9Mhz, bsnDot11EssRSNWPACompatibilityMode=bsnDot11EssRSNWPACompatibilityMode, bsnPingTestMinTimeInterval=bsnPingTestMinTimeInterval, bsnLocalNetUserWlanId=bsnLocalNetUserWlanId, bsnDot11EssRSNAuthPresharedKeyHex=bsnDot11EssRSNAuthPresharedKeyHex, bsnMobileStationRSSI=bsnMobileStationRSSI, bsnAPIfPhyAntennaIndex=bsnAPIfPhyAntennaIndex, bsnDot11Ess8021xSecurity=bsnDot11Ess8021xSecurity, bsnTotalAnchorRequestsDenied=bsnTotalAnchorRequestsDenied, bsnMobileStationMacAddress=bsnMobileStationMacAddress, bsnAPIfThroughputThreshold=bsnAPIfThroughputThreshold, bsnAPIfMacOperationParamEntry=bsnAPIfMacOperationParamEntry, bsnGlobalDot11bChannelUpdateCmdInvoke=bsnGlobalDot11bChannelUpdateCmdInvoke, bsnRrmDot11aCoverageThreshold=bsnRrmDot11aCoverageThreshold, bsnDot11QosProfileTable=bsnDot11QosProfileTable, bsnAPIfDot11PhyChannelEntry=bsnAPIfDot11PhyChannelEntry, bsnRadiusAccServerIPSecEncryption=bsnRadiusAccServerIPSecEncryption, bsnAclApplyMode=bsnAclApplyMode, bsnGlobalDot11=bsnGlobalDot11, bsnLocalNetUserDescription=bsnLocalNetUserDescription, bsnCustomSignatureAction=bsnCustomSignatureAction, bsnApBigNavDosAttack=bsnApBigNavDosAttack, bsnAclEntry=bsnAclEntry, bsnGlobalDot11aDataRate48Mhz=bsnGlobalDot11aDataRate48Mhz, bsnRrmDot11a=bsnRrmDot11a, bsnIsakmpInvalidCookies=bsnIsakmpInvalidCookies, bsnSystemTimezoneDeltaMinutes=bsnSystemTimezoneDeltaMinutes, bsnMobileStationBytesReceived=bsnMobileStationBytesReceived, bsnDot11EssWebPassthru=bsnDot11EssWebPassthru, bsnMobileStationUserName=bsnMobileStationUserName, bsnRadiusAuthServerIndex=bsnRadiusAuthServerIndex, bsnMeshNeighSnr=bsnMeshNeighSnr, bsnAPTable=bsnAPTable, bsnBlackListClientRowStatus=bsnBlackListClientRowStatus, bsnUtilityGroup=bsnUtilityGroup, bsnRadiusAuthServerIPSecIKELifetime=bsnRadiusAuthServerIPSecIKELifetime, bsnCustomSignaturePatternString=bsnCustomSignaturePatternString, bsnMemberCurrentExportedClients=bsnMemberCurrentExportedClients, bsnTraps=bsnTraps, bsnMacFilterInterfaceName=bsnMacFilterInterfaceName, bsnGlobalDot11aMaximumTransmitPowerLevel=bsnGlobalDot11aMaximumTransmitPowerLevel, bsnMobileStationRssiData=bsnMobileStationRssiData, bsnGlobalDot11aDataRate36Mhz=bsnGlobalDot11aDataRate36Mhz, bsnEss=bsnEss, bsnAPIfPhyAntennaType=bsnAPIfPhyAntennaType, bsnLocalNetUserRemainingTime=bsnLocalNetUserRemainingTime, bsnTotalHandoffRequestsDenied=bsnTotalHandoffRequestsDenied, bsnRogueAPEntry=bsnRogueAPEntry, bsnRrmDot11bGlobalAutomaticGrouping=bsnRrmDot11bGlobalAutomaticGrouping, bsnSensedTemperatureTooLow=bsnSensedTemperatureTooLow, bsnAclRuleDestinationIpAddress=bsnAclRuleDestinationIpAddress, bsnAPIfInterferencePower=bsnAPIfInterferencePower, bsnAPIfSlotId=bsnAPIfSlotId, bsnAPIfDot11OperationalRateSet=bsnAPIfDot11OperationalRateSet, bsnRrmDot11bNoiseMeasurementInterval=bsnRrmDot11bNoiseMeasurementInterval, bsnSyslog=bsnSyslog, bsnTagRssiDataLastHeard=bsnTagRssiDataLastHeard, bsnStandardSignatureRowStatus=bsnStandardSignatureRowStatus, bsnMobileStationRssiDataApMacAddress=bsnMobileStationRssiDataApMacAddress)
mibBuilder.exportSymbols("AIRESPACE-WIRELESS-MIB", bsnRogueClientAirespaceAPEntry=bsnRogueClientAirespaceAPEntry, bsnTemperatureAlarmHighLimit=bsnTemperatureAlarmHighLimit, bsnMeshNodeRoutingState=bsnMeshNodeRoutingState, unsupportedAPTrap=unsupportedAPTrap, bsnRogueAPMaxDetectedRSSI=bsnRogueAPMaxDetectedRSSI, bsnRrmDot11bGlobalGroupInterval=bsnRrmDot11bGlobalGroupInterval, bsnRemoteIPv4Address=bsnRemoteIPv4Address, bsnBlackListClientMacAddress=bsnBlackListClientMacAddress, bsnNetworkState=bsnNetworkState, bsnGlobalDot11hChannelSwitchMode=bsnGlobalDot11hChannelSwitchMode, bsnFastSSIDChangeFeature=bsnFastSSIDChangeFeature, bsnGlobalDot11aPhy=bsnGlobalDot11aPhy, bsnMobilityGroupMembersEntry=bsnMobilityGroupMembersEntry, bsnUserRowStatus=bsnUserRowStatus, bsnAPType=bsnAPType, bsnAPInvalidRadioType=bsnAPInvalidRadioType, bsnRadiusAuthServerIPSecAuth=bsnRadiusAuthServerIPSecAuth, bsnGlobalDot11bDynamicChannelUpdateInterval=bsnGlobalDot11bDynamicChannelUpdateInterval, bsnInitiatorCookie=bsnInitiatorCookie, bsnAPIfRxNeighborIpAddress=bsnAPIfRxNeighborIpAddress, bsnAPReasonCodeTrapVariable=bsnAPReasonCodeTrapVariable, bsnMobilityGroup=bsnMobilityGroup, bsnGlobalDot11bFragmentationThreshold=bsnGlobalDot11bFragmentationThreshold, bsnGlobalDot11aDTIMPeriod=bsnGlobalDot11aDTIMPeriod, bsnDot11EssRSNAuthKeyMgmtMode=bsnDot11EssRSNAuthKeyMgmtMode, bsnAPIfAdminStatus=bsnAPIfAdminStatus, bsnAPIfStationCountOnSNR=bsnAPIfStationCountOnSNR, bsnUtilityGroupRev1=bsnUtilityGroupRev1, bsnMobileStationWepState=bsnMobileStationWepState, bsnGlobalDot11bDataRate24Mhz=bsnGlobalDot11bDataRate24Mhz, bsnClearTrapVariable=bsnClearTrapVariable, bsnAclRuleEndSourcePort=bsnAclRuleEndSourcePort, bsnMobileStationAuthenticationAlgorithm=bsnMobileStationAuthenticationAlgorithm, bsnValidateSsidForTrustedAp=bsnValidateSsidForTrustedAp, bsnMacFilterDescription=bsnMacFilterDescription, bsnGlobalDot11aCurrentChannel=bsnGlobalDot11aCurrentChannel, bsnTotalClientHandoffAsLocal=bsnTotalClientHandoffAsLocal, bsnAclTable=bsnAclTable, bsnMobileStationStatusCode=bsnMobileStationStatusCode, bsnGlobalDot11bDynamicTxPowerControlInterval=bsnGlobalDot11bDynamicTxPowerControlInterval, bsnAPAuthRowStatus=bsnAPAuthRowStatus, bsnGroupDirectoryDicoveryType=bsnGroupDirectoryDicoveryType, bsnRrmDot11bCoverageThreshold=bsnRrmDot11bCoverageThreshold, bsnRogueClientPerRogueAPTable=bsnRogueClientPerRogueAPTable, bsnRrmDot11bAPDefault=bsnRrmDot11bAPDefault, bsnAPIfRxNeighborMacAddress=bsnAPIfRxNeighborMacAddress, bsnRogueClientDot11MacAddr=bsnRogueClientDot11MacAddr, bsnRogueClientLastReported=bsnRogueClientLastReported, bsnValidateRogueClientsAgainstAAA=bsnValidateRogueClientsAgainstAAA, bsnTrustedApHasInvalidEncryption=bsnTrustedApHasInvalidEncryption, bsnAPIfDot11SmtParamsConfigType=bsnAPIfDot11SmtParamsConfigType, bsnThirdPartyAPInterface=bsnThirdPartyAPInterface, bsnGlobalDot11AuthenticationResponseTimeOut=bsnGlobalDot11AuthenticationResponseTimeOut, bsnAPIfRSSILevel=bsnAPIfRSSILevel, bsnMobileStationTxRetries=bsnMobileStationTxRetries, bsnAPIfMultiDomainCapabilityEntry=bsnAPIfMultiDomainCapabilityEntry, bsnGlobalDot11LoadBalancing=bsnGlobalDot11LoadBalancing, bsnBridgingSharedSecretKey=bsnBridgingSharedSecretKey, bsnRogueClientPerRogueAPEntry=bsnRogueClientPerRogueAPEntry, bsnMeshNeighSnrDown=bsnMeshNeighSnrDown, bsnMeshNodeBackhaulPAP=bsnMeshNodeBackhaulPAP, bsnDot11StationAssociateFail=bsnDot11StationAssociateFail, bsnDot11EssSsid=bsnDot11EssSsid, bsnTrustedApEntryExpirationTimeout=bsnTrustedApEntryExpirationTimeout, bsnBridgingPolicyConfig=bsnBridgingPolicyConfig, bsnAPIfDot11TxPowerLevel8=bsnAPIfDot11TxPowerLevel8, bsnDot11QosProfileDesc=bsnDot11QosProfileDesc, bsnAAAMacDelimiter=bsnAAAMacDelimiter, bsnStandardSignatureAction=bsnStandardSignatureAction, bsnMeshNeighType=bsnMeshNeighType, bsnWrasCompliances=bsnWrasCompliances, bsnCustomSignatureRowStatus=bsnCustomSignatureRowStatus, bsnWrasIpsecCACertificateUpdate=bsnWrasIpsecCACertificateUpdate, bsnRadiusAccClientRetransmissions=bsnRadiusAccClientRetransmissions, bsnIkeAuthMethod=bsnIkeAuthMethod, bsnLinkTestSendPktCount=bsnLinkTestSendPktCount, bsnGlobalDot11bShortRetryLimit=bsnGlobalDot11bShortRetryLimit, bsnTotalAnchorTransferReceived=bsnTotalAnchorTransferReceived, bsnSignatureDescription=bsnSignatureDescription, bsnMemberTotalImportedClients=bsnMemberTotalImportedClients, bsnAPIfLoadTxUtilization=bsnAPIfLoadTxUtilization, bsnAPIfStationRSSICoverageInfoEntry=bsnAPIfStationRSSICoverageInfoEntry, bsnAutoContainRoguesAdvertisingSsid=bsnAutoContainRoguesAdvertisingSsid, bsnGlobalDot11bDataRate1Mhz=bsnGlobalDot11bDataRate1Mhz, bsnDot11EssExternalPolicyValidation=bsnDot11EssExternalPolicyValidation, bsnRfIdTagAutoTimeoutStatus=bsnRfIdTagAutoTimeoutStatus, bsnStandardSignaturePatternIndex=bsnStandardSignaturePatternIndex, bsnRogueAPFirstReported=bsnRogueAPFirstReported, bsnLicenseRadioCount=bsnLicenseRadioCount, bsnAPIfChannelNoiseInfoTable=bsnAPIfChannelNoiseInfoTable, bsnGlobalDot11aFastRoamingVoipPercentage=bsnGlobalDot11aFastRoamingVoipPercentage, bsnRadiusAuthServerStatus=bsnRadiusAuthServerStatus, bsnTrustedApHasInvalidSsid=bsnTrustedApHasInvalidSsid, bsnDot11EssQualityOfService=bsnDot11EssQualityOfService, bsnGlobalDot11bDataRate11Mhz=bsnGlobalDot11bDataRate11Mhz, bsnMobileStationByUsernameEntry=bsnMobileStationByUsernameEntry, bsnAPIfDot11EDThreshold=bsnAPIfDot11EDThreshold, bsnLocalManagementUserTable=bsnLocalManagementUserTable, bsnRogueAPAirespaceAPSlotId=bsnRogueAPAirespaceAPSlotId, bsnAPIfDot11MediumOccupancyLimit=bsnAPIfDot11MediumOccupancyLimit, bsnExternalPolicyServerConnectionStatus=bsnExternalPolicyServerConnectionStatus, bsnAPIfPoorSNRClients=bsnAPIfPoorSNRClients, bsnMobileStationExtStatsEntry=bsnMobileStationExtStatsEntry, bsnAPMacAddrTrapVariable=bsnAPMacAddrTrapVariable, bsnAPBridgingSupport=bsnAPBridgingSupport, bsnDot11EssRSNAuthPresharedKey=bsnDot11EssRSNAuthPresharedKey, bsnRADIUSServerTrapEnable=bsnRADIUSServerTrapEnable, bsnGlobalDot11bDataRate18Mhz=bsnGlobalDot11bDataRate18Mhz, bsnAPIfSmtParamEntry=bsnAPIfSmtParamEntry, bsnMeshNeighLinkSnr=bsnMeshNeighLinkSnr, bsnTrustedApPreambleUsed=bsnTrustedApPreambleUsed, bsnAPIfRFUtilizationThreshold=bsnAPIfRFUtilizationThreshold, bsnStandardSignatureMacFreq=bsnStandardSignatureMacFreq, bsnGlobalDot11bPBCCOptionImplemented=bsnGlobalDot11bPBCCOptionImplemented, bsnRadiusAccServerIPSecIKELifetime=bsnRadiusAccServerIPSecIKELifetime, bsnAPGroupsVlanDescription=bsnAPGroupsVlanDescription, bsnAPIfRegulatoryDomainSupport=bsnAPIfRegulatoryDomainSupport, bsnAPIfProfileStateTable=bsnAPIfProfileStateTable, bsnMobileStationEntry=bsnMobileStationEntry, bsnAPIfForeignInterferenceThreshold=bsnAPIfForeignInterferenceThreshold, bsnAPProfileTrapControlMask=bsnAPProfileTrapControlMask, bsnDot11StationAssociate=bsnDot11StationAssociate, bsnPingTestAvgTimeInterval=bsnPingTestAvgTimeInterval, bsnAPIfLoadRxUtilization=bsnAPIfLoadRxUtilization, bsnIpsecIkeNegFailure=bsnIpsecIkeNegFailure, bsnLinkTestSendPktLength=bsnLinkTestSendPktLength, bsnStandardSignatureQuietTime=bsnStandardSignatureQuietTime, radioCoreDumpTrap=radioCoreDumpTrap, bsnDot11EssIndex=bsnDot11EssIndex, bsnRrmDot11bThroughputThreshold=bsnRrmDot11bThroughputThreshold, bsnRrmIsDot11bGroupLeader=bsnRrmIsDot11bGroupLeader, bsnAPIfPacketsSniffingFeature=bsnAPIfPacketsSniffingFeature, bsnTotalResponsesRetransmitted=bsnTotalResponsesRetransmitted, bsnWatchListClientRowStatus=bsnWatchListClientRowStatus, bsnAPIfStationRSSICoverageIndex=bsnAPIfStationRSSICoverageIndex, bsnAPIfDot11FrameDuplicateCount=bsnAPIfDot11FrameDuplicateCount, bsnMobileStationEapType=bsnMobileStationEapType, bsnTotalAnchorRequestsGranted=bsnTotalAnchorRequestsGranted, bsnDot11StationDisassociate=bsnDot11StationDisassociate, bsnMeshNodeChannel=bsnMeshNodeChannel, bsnNotifiesReceived=bsnNotifiesReceived, bsnGlobalDot11bDataRate9Mhz=bsnGlobalDot11bDataRate9Mhz, bsnMobilityGroupMembersTable=bsnMobilityGroupMembersTable, bsnSignatureAttackDetected=bsnSignatureAttackDetected, bsnPingTestSendCount=bsnPingTestSendCount, bsnRogueClientChannelNumber=bsnRogueClientChannelNumber, bsnTagRssiDataTable=bsnTagRssiDataTable, bsnRogueAPAirespaceAPMacAddress=bsnRogueAPAirespaceAPMacAddress, bsnRrmDot11aCoverageExceptionLevel=bsnRrmDot11aCoverageExceptionLevel, bsnAPGroupsVlanMappingTable=bsnAPGroupsVlanMappingTable, bsnExternalPolicyServerEntry=bsnExternalPolicyServerEntry, bsnExternalPolicyServerFailures=bsnExternalPolicyServerFailures, bsnAPIfLoadParametersTable=bsnAPIfLoadParametersTable, bsnThirdPartyAPMacAddress=bsnThirdPartyAPMacAddress, bsnMeshNodeGroup=bsnMeshNodeGroup, bsnDot11EssMacFiltering=bsnDot11EssMacFiltering, bsnRogueClientBSSID=bsnRogueClientBSSID, bsnGlobalDot11b80211eMaxBandwidth=bsnGlobalDot11b80211eMaxBandwidth, bsnExcessive80211AssocFailures=bsnExcessive80211AssocFailures, bsnDuplicateIpTrapVariable=bsnDuplicateIpTrapVariable, bsnAPGroupsVlanMappingEntry=bsnAPGroupsVlanMappingEntry, bsnAPIfNoiseChannelNo=bsnAPIfNoiseChannelNo, bsnStandardSignatureEnable=bsnStandardSignatureEnable, bsnStandardSignatureState=bsnStandardSignatureState, bsnGlobalDot11aDataRate54Mhz=bsnGlobalDot11aDataRate54Mhz, bsn80211SecurityTrapControlMask=bsn80211SecurityTrapControlMask, bsnAPNoiseProfileFailed=bsnAPNoiseProfileFailed, bsnMeshNeighAdjustedEase=bsnMeshNeighAdjustedEase, bsnGlobalDot11Group=bsnGlobalDot11Group, bsnTagRssiDataEntry=bsnTagRssiDataEntry, bsnDot11EssRadiusAuthPrimaryServer=bsnDot11EssRadiusAuthPrimaryServer, bsnMobilityAnchorRowStatus=bsnMobilityAnchorRowStatus, bsnRrmDot11aCoverageMeasurementInterval=bsnRrmDot11aCoverageMeasurementInterval, bsnRogueAPRowStatus=bsnRogueAPRowStatus, bsnRFNetworkName=bsnRFNetworkName, bsnGlobalDot11bShortPreambleOptionImplemented=bsnGlobalDot11bShortPreambleOptionImplemented, bsnRadiusAccServerEntry=bsnRadiusAccServerEntry, bsnGlobalDot11aPowerUpdateCmdStatus=bsnGlobalDot11aPowerUpdateCmdStatus, bsnClientMacAddr=bsnClientMacAddr, bsnRadarChannelDetected=bsnRadarChannelDetected, bsnMeshNodeTxNeighRsp=bsnMeshNodeTxNeighRsp, bsnMobileStationCFPollRequest=bsnMobileStationCFPollRequest, bsnStandardSignatureTable=bsnStandardSignatureTable, bsnRadiusAuthClientAccessRequests=bsnRadiusAuthClientAccessRequests, bsnAPIfDot11MultipleRetryCount=bsnAPIfDot11MultipleRetryCount, bsnCustomSignaturePatternEntry=bsnCustomSignaturePatternEntry, bsnGlobalDot11aCFPollable=bsnGlobalDot11aCFPollable, bsnGlobalDot11bChannelAgilityEnabled=bsnGlobalDot11bChannelAgilityEnabled, bsnMobileStationRssiDataLastHeard=bsnMobileStationRssiDataLastHeard, bsnRadiusAccServerAddress=bsnRadiusAccServerAddress, bsnTotalAnchorTransferred=bsnTotalAnchorTransferred, bsnAPPrimaryMwarName=bsnAPPrimaryMwarName, bsnGlobalDot11bRxSopThreshold=bsnGlobalDot11bRxSopThreshold, bsnAAALocalDatabaseSize=bsnAAALocalDatabaseSize, bsnStandardSignaturePatternOffSetStart=bsnStandardSignaturePatternOffSetStart, bsnGlobalDot11bBeaconPeriod=bsnGlobalDot11bBeaconPeriod, bsnAPIfDot11MacMaxReceiveLifetime=bsnAPIfDot11MacMaxReceiveLifetime, bsnGlobalDot11aMediumBandNetwork=bsnGlobalDot11aMediumBandNetwork, bsnAPIfUpDownCause=bsnAPIfUpDownCause, bsnGlobalDot11a80211eMaxBandwidth=bsnGlobalDot11a80211eMaxBandwidth, bsnRogueClientAirespaceAPLastHeard=bsnRogueClientAirespaceAPLastHeard, bsnDot11QosMaxRFUsagePerAP=bsnDot11QosMaxRFUsagePerAP, bsnGlobalDot11GroupRev1=bsnGlobalDot11GroupRev1, bsnDot11EssVpnIkePhase1Mode=bsnDot11EssVpnIkePhase1Mode, bsnTrustedApEncryptionRequired=bsnTrustedApEncryptionRequired, bsnAPIfDot11CountersEntry=bsnAPIfDot11CountersEntry, bsnAPIfWlanOverrideTable=bsnAPIfWlanOverrideTable, bsnAuthFailureUserName=bsnAuthFailureUserName, bsnRadiusAuthClientServerPortNumber=bsnRadiusAuthClientServerPortNumber, bsnAPAssociated=bsnAPAssociated, bsnLinkTest=bsnLinkTest, bsnAclRuleSourceIpNetmask=bsnAclRuleSourceIpNetmask, bsnAPParamUpdateTrapControlMask=bsnAPParamUpdateTrapControlMask, bsnMobileStationSessionTimeout=bsnMobileStationSessionTimeout, bsnAPReset=bsnAPReset, bsnNetworkType=bsnNetworkType, bsnCustomSignatureVersion=bsnCustomSignatureVersion, bsnDot11EssCraniteSecurity=bsnDot11EssCraniteSecurity, bsnAPIfDot11CurrentCCAMode=bsnAPIfDot11CurrentCCAMode)
