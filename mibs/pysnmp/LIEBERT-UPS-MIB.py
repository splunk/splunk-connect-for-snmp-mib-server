#
# PySNMP MIB module LIEBERT-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIEBERT-UPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibIdentifier, NotificationType, enterprises, Integer32, Gauge32, ObjectIdentity, iso, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, ModuleIdentity, Counter32, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "enterprises", "Integer32", "Gauge32", "ObjectIdentity", "iso", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "ModuleIdentity", "Counter32", "Unsigned32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
emerson = MibIdentifier((1, 3, 6, 1, 4, 1, 476))
liebertCorp = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1))
liebertUps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1))
luExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1))
luExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 2))
luPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 3))
luCore = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1))
lcUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1))
lcUpsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentManufacturer.setStatus('optional')
lcUpsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsIdentModel.setStatus('optional')
lcUpsIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSoftwareVersion.setStatus('optional')
lcUpsIdentSpecific = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSpecific.setStatus('optional')
lcUpsIdentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentFirmwareVersion.setStatus('optional')
lcUpsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSerialNumber.setStatus('optional')
lcUpsIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentManufactureDate.setStatus('optional')
lcUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2))
lcUpsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatTimeRemaining.setStatus('optional')
lcUpsBatTemperature = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatTemperature.setStatus('optional')
lcUpsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatVoltage.setStatus('optional')
lcUpsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatCurrent.setStatus('optional')
lcUpsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatCapacity.setStatus('optional')
lcUpsBatTotalDischCounts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatTotalDischCounts.setStatus('optional')
lcUpsBatCycleDurationInSeconds = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatCycleDurationInSeconds.setStatus('optional')
lcUpsBatAmpHours = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatAmpHours.setStatus('optional')
lcUpsBatKWhours = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatKWhours.setStatus('optional')
lcUpsBatWattHours = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatWattHours.setStatus('optional')
lcUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3))
lcUpsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputFrequency.setStatus('optional')
lcUpsInputBrownOuts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputBrownOuts.setStatus('optional')
lcUpsInputBlackOuts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputBlackOuts.setStatus('optional')
lcUpsInputTransients = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputTransients.setStatus('optional')
lcUpsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputNumLines.setStatus('optional')
lcUpsInputTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6), )
if mibBuilder.loadTexts: lcUpsInputTable.setStatus('optional')
lcUpsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1), ).setIndexNames((0, "LIEBERT-UPS-MIB", "lcUpsInputLine"))
if mibBuilder.loadTexts: lcUpsInputEntry.setStatus('optional')
lcUpsInputLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputLine.setStatus('optional')
lcUpsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputVoltage.setStatus('optional')
lcUpsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputCurrent.setStatus('optional')
lcUpsInputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputVA.setStatus('optional')
lcUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4))
lcUpsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputFrequency.setStatus('optional')
lcUpsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputLoad.setStatus('optional')
lcUpsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputNumLines.setStatus('optional')
lcUpsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4), )
if mibBuilder.loadTexts: lcUpsOutputTable.setStatus('optional')
lcUpsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1), ).setIndexNames((0, "LIEBERT-UPS-MIB", "lcUpsOutputLine"))
if mibBuilder.loadTexts: lcUpsOutputEntry.setStatus('optional')
lcUpsOutputLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputLine.setStatus('optional')
lcUpsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputVoltage.setStatus('optional')
lcUpsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputCurrent.setStatus('optional')
lcUpsOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputVA.setStatus('optional')
lcUpsOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputWatts.setStatus('optional')
lcUpsInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5))
lcUpsInverterStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInverterStatus.setStatus('optional')
lcUpsInverterTemp = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInverterTemp.setStatus('optional')
lcUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6))
lcUpsAlarms = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarms.setStatus('optional')
lcUpsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: lcUpsAlarmTable.setStatus('optional')
lcUpsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "LIEBERT-UPS-MIB", "lcUpsAlarmId"))
if mibBuilder.loadTexts: lcUpsAlarmEntry.setStatus('optional')
lcUpsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmId.setStatus('optional')
lcUpsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmDescr.setStatus('optional')
lcUpsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmTime.setStatus('optional')
lcUpsAlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3))
lcUpsAlarmLowBatteryWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 1))
lcUpsAlarmLowBatteryShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 2))
lcUpsAlarmUtilFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 3))
lcUpsAlarmOverTempWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 4))
lcUpsAlarmOverTempShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 5))
lcUpsAlarmOutputOverloadWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 6))
lcUpsAlarmOutputOverloadShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 7))
lcUpsAlarmInputOverVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 8))
lcUpsAlarmBatteryBad = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 9))
lcUpsAlarmOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 10))
lcUpsAlarmStopNoticeIssued = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 11))
lcUpsAlarmUpsOff = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 12))
lcUpsAlarmInputFreqError = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 13))
lcUpsAlarmOutputUnderVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 15))
lcUpsAlarmOutputOverVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 16))
lcUpsBadBypassPower = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 17))
lcUpsAlarmDCOverVoltageShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 18))
lcUpsAlarmHardwareShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 23))
lcUpsAlarmEmergencyXferToBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 24))
lcUpsAlarmInverterFault = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 25))
lcUpsAlarmPhaseRotationError = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 26))
lcUpsAlarmFuseBlown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 28))
lcUpsAlarmAmbientOverTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 29))
lcUpsAlarmEmergencyPowerOff = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 30))
lcUpsAlarmFanFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 31))
lcUpsAlarmControlPowerFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 32))
lcUpsAlarmReversePower = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 33))
lcUpsAlarmDCgroundFault = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 34))
lcUpsAlarmLoadOnBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 35))
lcUpsAlarmBatteryCbOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 37))
lcUpsAlarmInputCbOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 38))
lcUpsAlarmOutputCbOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 39))
lcUpsAlarmOutputFreqError = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 40))
lcUpsAlarmStaticSwUnable = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 41))
lcUpsAlarmManualResetXfer = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 42))
lcUpsAlarmAutoRexferPrimed = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 43))
lcUpsAlarmBattCycleBuffWarn = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 44))
lcUpsAlarmModuleSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 45))
lcUpsLineCorrectionActive = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 46))
lcUpsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7))
lcUpsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("start", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsTestBattery.setStatus('optional')
lcUpsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("sysFailure", 5), ("notSupported", 6), ("inhibited", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsTestBatteryStatus.setStatus('optional')
lcUpsTestDiag = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("start", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsTestDiag.setStatus('optional')
lcUpsTestDiagStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("sysFailure", 5), ("notSupported", 6), ("inhibited", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsTestDiagStatus.setStatus('optional')
lcUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8))
lcUpsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOffDelay.setStatus('optional')
lcUpsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOnDelay.setStatus('optional')
lcUpsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOffTrapDelay.setStatus('optional')
lcUpsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOnTrapDelay.setStatus('optional')
lcUpsControlUnixShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlUnixShutdownDelay.setStatus('optional')
lcUpsControlUnixShutdownTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlUnixShutdownTrapDelay.setStatus('optional')
lcUpsControlCancelCommands = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlCancelCommands.setStatus('optional')
lcUpsControlRebootAgentDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlRebootAgentDelay.setStatus('optional')
lcUpsNominal = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9))
lcUpsNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputVoltage.setStatus('optional')
lcUpsNominalInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalInputVoltage.setStatus('optional')
lcUpsNominalOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputVA.setStatus('optional')
lcUpsNominalOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputWatts.setStatus('optional')
lcUpsNominalOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputFreq.setStatus('optional')
lcUpsNominalInputFreq = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalInputFreq.setStatus('optional')
lcUpsNominalOutputVaRating = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputVaRating.setStatus('optional')
lcUpsNominalOutputWattsRating = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputWattsRating.setStatus('optional')
lcUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13))
lcUpsOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3), ("maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOnBypass.setStatus('optional')
lcUpsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassFrequency.setStatus('optional')
lcUpsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassNumLines.setStatus('optional')
lcUpsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4), )
if mibBuilder.loadTexts: lcUpsBypassTable.setStatus('optional')
lcUpsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4, 1), ).setIndexNames((0, "LIEBERT-UPS-MIB", "lcUpsBypassLine"))
if mibBuilder.loadTexts: lcUpsBypassEntry.setStatus('optional')
lcUpsBypassLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassLine.setStatus('optional')
lcUpsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassVoltage.setStatus('optional')
lcUpsBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassCurrent.setStatus('optional')
lcUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14))
lcUpsConfigType = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("offline", 3), ("lineinteractive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsConfigType.setStatus('optional')
lcUpsConfigBypassInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3), ("dualinput", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsConfigBypassInstalled.setStatus('optional')
lcUpsConfigModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsConfigModuleCount.setStatus('optional')
lcUpsConfigCurrentModule = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsConfigCurrentModule.setStatus('optional')
lcUpsConfigAudibleStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("muted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsConfigAudibleStatus.setStatus('optional')
lcUpsConfigLowBattTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsConfigLowBattTime.setStatus('optional')
lcUpsConfigAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsConfigAutoRestart.setStatus('optional')
lcUpsSwitchedReceptacles = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12))
lcUpsSwitchedReceptMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsSwitchedReceptMaxNum.setStatus('optional')
lcUpsSwitchedReceptTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2), )
if mibBuilder.loadTexts: lcUpsSwitchedReceptTable.setStatus('optional')
lcUpsSwitchedReceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1), ).setIndexNames((0, "LIEBERT-UPS-MIB", "lcUpsSwitchedReceptIndex"))
if mibBuilder.loadTexts: lcUpsSwitchedReceptEntry.setStatus('optional')
lcUpsSwitchedReceptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsSwitchedReceptIndex.setStatus('optional')
lcUpsSwitchedReceptOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOnDelay.setStatus('optional')
lcUpsSwitchedReceptOnTrapDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOnTrapDelay.setStatus('optional')
lcUpsSwitchedReceptOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOffDelay.setStatus('optional')
lcUpsSwitchedReceptOffTrapDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptOffTrapDelay.setStatus('optional')
lcUpsSwitchedReceptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsSwitchedReceptStatus.setStatus('optional')
lcUpsSwitchedReceptLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 12, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsSwitchedReceptLabel.setStatus('optional')
lcUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11))
lcUpsOverloadWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOverloadShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,2)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOnBatteryTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,3)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsLowBatteryWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,4)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsLowBatteryShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,5)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUtilPowerFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,6)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUtilPowerRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,7)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsInputOverVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,8)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOverTempWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,9)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOverTempShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,10)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,11)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,12)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOffWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,13)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,14)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOnWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,15)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUnixShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,16)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUnixShutdownWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,17)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsInputFreqErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,22)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsDCOverVoltageShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,23)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOverVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,24)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsFuseBlownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,25)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsEmergencyPowerOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,26)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsControlPowerFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,27)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsReversePowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,28)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsPhaseRotationErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,29)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsLoadOnBypassTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,30)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsEmergencyXferToBypassTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,31)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsInverterFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,34)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsReceptOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,18)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPS-MIB", "lcUpsSwitchedReceptIndex"))
lcUpsReceptOffWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,19)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPS-MIB", "lcUpsSwitchedReceptIndex"))
lcUpsReceptOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,20)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPS-MIB", "lcUpsSwitchedReceptIndex"))
lcUpsReceptOnWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,21)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("LIEBERT-UPS-MIB", "lcUpsSwitchedReceptIndex"))
luUPStationS = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2))
lsUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 1))
lsUpsIdentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsIdentFirmwareVersion.setStatus('optional')
lsUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 6))
lsUpsAlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 6, 1))
lsUpsAlarmCheckAirFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 6, 1, 1))
lsUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 11))
lsUpsCheckAirFilterTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 11) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lsUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 12))
lsUpsConfigBypassInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsConfigBypassInstalled.setStatus('optional')
lsUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13))
lsUpsOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsOnBypass.setStatus('optional')
lsUpsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassFrequency.setStatus('optional')
lsUpsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassNumLines.setStatus('optional')
lsUpsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4), )
if mibBuilder.loadTexts: lsUpsBypassTable.setStatus('optional')
lsUpsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1), ).setIndexNames((0, "LIEBERT-UPS-MIB", "lsUpsBypassLine"))
if mibBuilder.loadTexts: lsUpsBypassEntry.setStatus('optional')
lsUpsBypassLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassLine.setStatus('optional')
lsUpsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassVoltage.setStatus('optional')
lsUpsBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 2, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsUpsBypassCurrent.setStatus('optional')
luUPStationD = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3))
ldUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6))
ldUpsAlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1))
ldUpsAlarmDCOverVoltageShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 1))
ldUpsAlarmOutputShortShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 2))
ldUpsAlarmLNReversedShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 3))
ldUpsAlarmImminentShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 4))
ldUpsAlarmInputFreqError = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 5))
ldUpsAlarmBoostOn = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 6))
ldUpsAlarmReplaceBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 7))
ldUpsAlarmOutputOverVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 8))
ldUpsAlarmOutputUnderVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 9))
ldUpsAlarmChargerFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 6, 1, 10))
ldUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11))
ldUpsDCOverVoltageShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsOutputShortShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,2)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsLNReversedShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,3)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsImminentShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,4)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsInputFreqErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,5)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsOutputOverVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,6)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsOutputUnderVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,7)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsChargerFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 11) + (0,8)).setObjects(("SNMPv2-MIB", "sysUpTime"))
ldUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 3))
ldUpsInputMaxVoltsSinceLastPoll = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldUpsInputMaxVoltsSinceLastPoll.setStatus('optional')
ldUpsInputMinVoltsSinceLastPoll = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldUpsInputMinVoltsSinceLastPoll.setStatus('optional')
ldUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 4))
ldUpsOutputMaxVoltsSinceLastPoll = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldUpsOutputMaxVoltsSinceLastPoll.setStatus('optional')
ldUpsOutputMinVoltsSinceLastPoll = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldUpsOutputMinVoltsSinceLastPoll.setStatus('optional')
luUPStationG = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4))
lgUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6))
lgUpsAlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6, 1))
lgUpsAlarmDCOverVoltageShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6, 1, 1))
lgUpsAlarmOutputShortShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6, 1, 2))
lgUpsAlarmLNReversedShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6, 1, 3))
lgUpsAlarmRemoteShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6, 1, 4))
lgUpsAlarmInputUVOnStartup = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6, 1, 5))
lgUpsAlarmPFCFailedOnStartup = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 6, 1, 6))
lgUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 11))
lgUpsDCOverVoltageShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 11) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lgUpsOutputShortShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 11) + (0,2)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lgUpsLNReversedShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 11) + (0,3)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lgUpsInputUVOnStartupTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 4, 11) + (0,4)).setObjects(("SNMPv2-MIB", "sysUpTime"))
luSeries200 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8))
luSeries200Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 6))
luSeries200AlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 6, 1))
luSeries200AlarmInputFreqError = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 6, 1, 1))
luSeries200Input = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 3))
luSeries200InputMaxVoltsSinceLastPoll = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSeries200InputMaxVoltsSinceLastPoll.setStatus('optional')
luSeries200InputMinVoltsSinceLastPoll = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSeries200InputMinVoltsSinceLastPoll.setStatus('optional')
luSeries200Config = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 12))
luSeries200ConfigBypassInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSeries200ConfigBypassInstalled.setStatus('optional')
luSeries200ConfigFrequencyChangerModel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSeries200ConfigFrequencyChangerModel.setStatus('optional')
luSeries200Bypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 13))
luSeries200OnBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 8, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luSeries200OnBypass.setStatus('optional')
luSeries4300 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10))
ls43cUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 1))
ls43cUpsIdentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsIdentFirmwareVersion.setStatus('optional')
ls43cUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 12))
ls43cUpsConfigBypassInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsConfigBypassInstalled.setStatus('optional')
ls43cUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13))
ls43cUpsOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsOnBypass.setStatus('optional')
ls43cUpsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsBypassFrequency.setStatus('optional')
ls43cUpsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsBypassNumLines.setStatus('optional')
ls43cUpsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 4), )
if mibBuilder.loadTexts: ls43cUpsBypassTable.setStatus('optional')
ls43cUpsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 4, 1), ).setIndexNames((0, "LIEBERT-UPS-MIB", "ls43cUpsBypassLine"))
if mibBuilder.loadTexts: ls43cUpsBypassEntry.setStatus('optional')
ls43cUpsBypassLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsBypassLine.setStatus('optional')
ls43cUpsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsBypassVoltage.setStatus('optional')
ls43cUpsBypassCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 10, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ls43cUpsBypassCurrent.setStatus('optional')
luSeries300 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 5))
luExternal = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 6))
luUPStationS3 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 7))
luUpsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 11))
luSystemCabinet = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 12))
luUPStationGxt = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 14))
luPowerSure = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 15))
mibBuilder.exportSymbols("LIEBERT-UPS-MIB", lcUpsInputFrequency=lcUpsInputFrequency, liebertCorp=liebertCorp, lcUpsLoadOnBypassTrap=lcUpsLoadOnBypassTrap, lcUpsUnixShutdownWarningTrap=lcUpsUnixShutdownWarningTrap, lcUpsAlarmModuleSummary=lcUpsAlarmModuleSummary, lcUpsReceptOffTrap=lcUpsReceptOffTrap, lsUpsConfigBypassInstalled=lsUpsConfigBypassInstalled, lsUpsBypass=lsUpsBypass, luPrivate=luPrivate, lcUpsAlarmHardwareShutdown=lcUpsAlarmHardwareShutdown, lcUpsBypassLine=lcUpsBypassLine, lcUpsBypassEntry=lcUpsBypassEntry, lcUpsBypassVoltage=lcUpsBypassVoltage, lcUpsBypassCurrent=lcUpsBypassCurrent, luSeries200InputMinVoltsSinceLastPoll=luSeries200InputMinVoltsSinceLastPoll, luExperimental=luExperimental, lcUpsSwitchedReceptMaxNum=lcUpsSwitchedReceptMaxNum, ls43cUpsOnBypass=ls43cUpsOnBypass, lcUpsAlarmStopNoticeIssued=lcUpsAlarmStopNoticeIssued, lcUpsConfigType=lcUpsConfigType, ls43cUpsConfigBypassInstalled=ls43cUpsConfigBypassInstalled, lcUpsInputVoltage=lcUpsInputVoltage, lcUpsAlarmInputFreqError=lcUpsAlarmInputFreqError, lcUpsBypassFrequency=lcUpsBypassFrequency, luUPStationS=luUPStationS, ldUpsInput=ldUpsInput, lcUpsAlarmOutputOverloadWarning=lcUpsAlarmOutputOverloadWarning, lcUpsOutputFrequency=lcUpsOutputFrequency, lcUpsNominalOutputVA=lcUpsNominalOutputVA, lcUpsAlarmInputCbOpen=lcUpsAlarmInputCbOpen, ldUpsImminentShutdownTrap=ldUpsImminentShutdownTrap, lcUpsAlarmBatteryCbOpen=lcUpsAlarmBatteryCbOpen, lcUpsAlarmPhaseRotationError=lcUpsAlarmPhaseRotationError, lcUpsAlarmInputOverVoltage=lcUpsAlarmInputOverVoltage, ldUpsAlarmConditions=ldUpsAlarmConditions, lgUpsAlarmInputUVOnStartup=lgUpsAlarmInputUVOnStartup, lcUpsEmergencyXferToBypassTrap=lcUpsEmergencyXferToBypassTrap, lgUpsAlarmLNReversedShutdown=lgUpsAlarmLNReversedShutdown, ldUpsInputMinVoltsSinceLastPoll=ldUpsInputMinVoltsSinceLastPoll, lcUpsControlPowerFailureTrap=lcUpsControlPowerFailureTrap, lcUpsSwitchedReceptOffDelay=lcUpsSwitchedReceptOffDelay, lcUpsConfigAudibleStatus=lcUpsConfigAudibleStatus, lcUpsSwitchedReceptEntry=lcUpsSwitchedReceptEntry, lcUpsNominalOutputVoltage=lcUpsNominalOutputVoltage, luSeries200Config=luSeries200Config, luSeries200OnBypass=luSeries200OnBypass, lcUpsAlarmDescr=lcUpsAlarmDescr, lcUpsBadBypassPower=lcUpsBadBypassPower, lcUpsNominalOutputWattsRating=lcUpsNominalOutputWattsRating, ldUpsAlarmImminentShutdown=ldUpsAlarmImminentShutdown, lcUpsSwitchedReceptOnTrapDelay=lcUpsSwitchedReceptOnTrapDelay, lcUpsDCOverVoltageShutdownTrap=lcUpsDCOverVoltageShutdownTrap, ldUpsOutput=ldUpsOutput, luUPStationGxt=luUPStationGxt, lcUpsIdentManufacturer=lcUpsIdentManufacturer, lcUpsInverter=lcUpsInverter, ldUpsAlarm=ldUpsAlarm, lgUpsOutputShortShutdownTrap=lgUpsOutputShortShutdownTrap, lsUpsBypassLine=lsUpsBypassLine, ldUpsInputFreqErrorTrap=ldUpsInputFreqErrorTrap, ls43cUpsBypassLine=ls43cUpsBypassLine, lcUpsControl=lcUpsControl, ls43cUpsBypassVoltage=ls43cUpsBypassVoltage, lcUpsAlarmOutputOverVoltage=lcUpsAlarmOutputOverVoltage, lcUpsAlarmReversePower=lcUpsAlarmReversePower, luSeries200Bypass=luSeries200Bypass, lcUpsIdentManufactureDate=lcUpsIdentManufactureDate, ls43cUpsConfig=ls43cUpsConfig, lcUpsAlarmOverTempWarning=lcUpsAlarmOverTempWarning, lcUpsIdentModel=lcUpsIdentModel, lcUpsBatAmpHours=lcUpsBatAmpHours, lcUpsNominal=lcUpsNominal, lcUpsUtilPowerRestoredTrap=lcUpsUtilPowerRestoredTrap, luSeries200AlarmInputFreqError=luSeries200AlarmInputFreqError, ldUpsAlarmReplaceBattery=ldUpsAlarmReplaceBattery, lcUpsSwitchedReceptTable=lcUpsSwitchedReceptTable, lcUpsControlUnixShutdownTrapDelay=lcUpsControlUnixShutdownTrapDelay, lcUpsAlarmDCgroundFault=lcUpsAlarmDCgroundFault, lcUpsBatTemperature=lcUpsBatTemperature, lcUpsAlarmInverterFault=lcUpsAlarmInverterFault, lcUpsControlOutputOffDelay=lcUpsControlOutputOffDelay, lcUpsConfigModuleCount=lcUpsConfigModuleCount, lcUpsOnBatteryTrap=lcUpsOnBatteryTrap, lsUpsOnBypass=lsUpsOnBypass, lsUpsCheckAirFilterTrap=lsUpsCheckAirFilterTrap, luUPStationD=luUPStationD, ldUpsLNReversedShutdownTrap=ldUpsLNReversedShutdownTrap, lcUpsSwitchedReceptOffTrapDelay=lcUpsSwitchedReceptOffTrapDelay, luSeries200Alarm=luSeries200Alarm, lcUpsInputLine=lcUpsInputLine, lcUpsBatWattHours=lcUpsBatWattHours, lcUpsInputFreqErrorTrap=lcUpsInputFreqErrorTrap, lsUpsIdent=lsUpsIdent, lcUpsBatKWhours=lcUpsBatKWhours, lcUpsIdentSoftwareVersion=lcUpsIdentSoftwareVersion, lcUpsIdentSerialNumber=lcUpsIdentSerialNumber, lcUpsReceptOnWarningTrap=lcUpsReceptOnWarningTrap, ldUpsAlarmOutputUnderVoltage=ldUpsAlarmOutputUnderVoltage, lcUpsAlarmControlPowerFailed=lcUpsAlarmControlPowerFailed, lcUpsControlRebootAgentDelay=lcUpsControlRebootAgentDelay, lcUpsLowBatteryWarningTrap=lcUpsLowBatteryWarningTrap, lcUpsFuseBlownTrap=lcUpsFuseBlownTrap, lgUpsAlarm=lgUpsAlarm, lcUpsControlOutputOnDelay=lcUpsControlOutputOnDelay, lcUpsBattery=lcUpsBattery, lcUpsAlarmOnBattery=lcUpsAlarmOnBattery, luSeries200AlarmConditions=luSeries200AlarmConditions, lcUpsAlarmLowBatteryShutdown=lcUpsAlarmLowBatteryShutdown, lcUpsConfig=lcUpsConfig, lcUpsOutputOnWarningTrap=lcUpsOutputOnWarningTrap, lcUpsTestBattery=lcUpsTestBattery, lcUpsEmergencyPowerOffTrap=lcUpsEmergencyPowerOffTrap, ldUpsAlarmOutputShortShutdown=ldUpsAlarmOutputShortShutdown, lcUpsAlarmDCOverVoltageShutdown=lcUpsAlarmDCOverVoltageShutdown, lcUpsConfigCurrentModule=lcUpsConfigCurrentModule, lcUpsInputCurrent=lcUpsInputCurrent, lgUpsAlarmDCOverVoltageShutdown=lgUpsAlarmDCOverVoltageShutdown, lcUpsAlarmStaticSwUnable=lcUpsAlarmStaticSwUnable, lcUpsAlarmAmbientOverTemp=lcUpsAlarmAmbientOverTemp, emerson=emerson, lcUpsInputVA=lcUpsInputVA, lcUpsAlarmOutputOverloadShutdown=lcUpsAlarmOutputOverloadShutdown, lcUpsAlarmLowBatteryWarning=lcUpsAlarmLowBatteryWarning, lcUpsLowBatteryShutdownTrap=lcUpsLowBatteryShutdownTrap, lgUpsInputUVOnStartupTrap=lgUpsInputUVOnStartupTrap, lcUpsSwitchedReceptIndex=lcUpsSwitchedReceptIndex, lcUpsOnBypass=lcUpsOnBypass, lcUpsNominalOutputWatts=lcUpsNominalOutputWatts, lcUpsInverterStatus=lcUpsInverterStatus, lcUpsUtilPowerFailedTrap=lcUpsUtilPowerFailedTrap, lgUpsTraps=lgUpsTraps, lcUpsControlUnixShutdownDelay=lcUpsControlUnixShutdownDelay, lsUpsConfig=lsUpsConfig, ls43cUpsBypassCurrent=ls43cUpsBypassCurrent, lcUpsInputTable=lcUpsInputTable, lcUpsBypassTable=lcUpsBypassTable, lcUpsAlarmAutoRexferPrimed=lcUpsAlarmAutoRexferPrimed, ldUpsAlarmBoostOn=ldUpsAlarmBoostOn, lcUpsOutputTable=lcUpsOutputTable, lcUpsAlarmEmergencyXferToBypass=lcUpsAlarmEmergencyXferToBypass, lcUpsOutputOverVoltageTrap=lcUpsOutputOverVoltageTrap, lgUpsDCOverVoltageShutdownTrap=lgUpsDCOverVoltageShutdownTrap, ls43cUpsBypassFrequency=ls43cUpsBypassFrequency, lcUpsBatVoltage=lcUpsBatVoltage, lcUpsOutputVA=lcUpsOutputVA, ldUpsOutputMinVoltsSinceLastPoll=ldUpsOutputMinVoltsSinceLastPoll, ls43cUpsBypass=ls43cUpsBypass, lcUpsLineCorrectionActive=lcUpsLineCorrectionActive, lcUpsControlCancelCommands=lcUpsControlCancelCommands, lcUpsNominalOutputVaRating=lcUpsNominalOutputVaRating, ldUpsAlarmChargerFailed=ldUpsAlarmChargerFailed, lcUpsBatCycleDurationInSeconds=lcUpsBatCycleDurationInSeconds, ldUpsOutputUnderVoltageTrap=ldUpsOutputUnderVoltageTrap, ldUpsAlarmInputFreqError=ldUpsAlarmInputFreqError, lcUpsAlarmTime=lcUpsAlarmTime, lcUpsTraps=lcUpsTraps, ldUpsAlarmDCOverVoltageShutdown=ldUpsAlarmDCOverVoltageShutdown, lcUpsInputEntry=lcUpsInputEntry, lcUpsInverterTemp=lcUpsInverterTemp, luSeries300=luSeries300, lcUpsAlarmId=lcUpsAlarmId, lcUpsIdentFirmwareVersion=lcUpsIdentFirmwareVersion, liebertUps=liebertUps, lcUpsNominalOutputFreq=lcUpsNominalOutputFreq, luUPStationG=luUPStationG, lcUpsIdentSpecific=lcUpsIdentSpecific, lcUpsOutputLine=lcUpsOutputLine, lcUpsInputBlackOuts=lcUpsInputBlackOuts, lcUpsBypassNumLines=lcUpsBypassNumLines, lsUpsAlarmCheckAirFilter=lsUpsAlarmCheckAirFilter, ls43cUpsBypassEntry=ls43cUpsBypassEntry, luSeries200=luSeries200, lcUpsOutputLoad=lcUpsOutputLoad, lcUpsAlarmEntry=lcUpsAlarmEntry, lcUpsAlarmOutputCbOpen=lcUpsAlarmOutputCbOpen, lcUpsOutputOffTrap=lcUpsOutputOffTrap, lcUpsOutputNumLines=lcUpsOutputNumLines, lcUpsUnixShutdownTrap=lcUpsUnixShutdownTrap, ls43cUpsBypassNumLines=ls43cUpsBypassNumLines, lcUpsSwitchedReceptStatus=lcUpsSwitchedReceptStatus, lgUpsAlarmConditions=lgUpsAlarmConditions, lcUpsInputNumLines=lcUpsInputNumLines, lcUpsOutput=lcUpsOutput, lcUpsAlarmLoadOnBypass=lcUpsAlarmLoadOnBypass, ls43cUpsIdentFirmwareVersion=ls43cUpsIdentFirmwareVersion, lcUpsOutputOnTrap=lcUpsOutputOnTrap, lsUpsBypassFrequency=lsUpsBypassFrequency, lcUpsAlarmUtilFailed=lcUpsAlarmUtilFailed, lcUpsTestDiagStatus=lcUpsTestDiagStatus, lcUpsControlOutputOffTrapDelay=lcUpsControlOutputOffTrapDelay, lcUpsBatTotalDischCounts=lcUpsBatTotalDischCounts, luSeries4300=luSeries4300, lcUpsTest=lcUpsTest, lcUpsControlOutputOnTrapDelay=lcUpsControlOutputOnTrapDelay, ldUpsOutputShortShutdownTrap=ldUpsOutputShortShutdownTrap, lcUpsAlarmBattCycleBuffWarn=lcUpsAlarmBattCycleBuffWarn, lcUpsOutputWatts=lcUpsOutputWatts, ldUpsTraps=ldUpsTraps, lcUpsAlarmConditions=lcUpsAlarmConditions, lcUpsPhaseRotationErrorTrap=lcUpsPhaseRotationErrorTrap, lcUpsAlarm=lcUpsAlarm, lcUpsIdent=lcUpsIdent, luExternal=luExternal, lcUpsAlarmOutputFreqError=lcUpsAlarmOutputFreqError, lcUpsBatTimeRemaining=lcUpsBatTimeRemaining, lcUpsReceptOffWarningTrap=lcUpsReceptOffWarningTrap, lsUpsBypassVoltage=lsUpsBypassVoltage, luCore=luCore, lsUpsAlarmConditions=lsUpsAlarmConditions, lsUpsTraps=lsUpsTraps, lcUpsReversePowerTrap=lcUpsReversePowerTrap, lcUpsBatCurrent=lcUpsBatCurrent, lcUpsOverloadWarningTrap=lcUpsOverloadWarningTrap, lsUpsBypassCurrent=lsUpsBypassCurrent, lsUpsBypassNumLines=lsUpsBypassNumLines, lcUpsOutputEntry=lcUpsOutputEntry, lcUpsBypass=lcUpsBypass, ldUpsInputMaxVoltsSinceLastPoll=ldUpsInputMaxVoltsSinceLastPoll, lcUpsTestDiag=lcUpsTestDiag, lcUpsOverloadShutdownTrap=lcUpsOverloadShutdownTrap, lcUpsAlarms=lcUpsAlarms, lcUpsAlarmTable=lcUpsAlarmTable, lcUpsConfigLowBattTime=lcUpsConfigLowBattTime, lcUpsAlarmBatteryBad=lcUpsAlarmBatteryBad, lcUpsInverterFaultTrap=lcUpsInverterFaultTrap, lcUpsBatCapacity=lcUpsBatCapacity, luSeries200ConfigBypassInstalled=luSeries200ConfigBypassInstalled, luUPStationS3=luUPStationS3, lcUpsAlarmUpsOff=lcUpsAlarmUpsOff, lcUpsNominalInputFreq=lcUpsNominalInputFreq, lcUpsSwitchedReceptOnDelay=lcUpsSwitchedReceptOnDelay, lgUpsAlarmPFCFailedOnStartup=lgUpsAlarmPFCFailedOnStartup, lcUpsAlarmEmergencyPowerOff=lcUpsAlarmEmergencyPowerOff, lcUpsInputOverVoltageTrap=lcUpsInputOverVoltageTrap, lcUpsConfigBypassInstalled=lcUpsConfigBypassInstalled, lcUpsReceptOnTrap=lcUpsReceptOnTrap, lsUpsAlarm=lsUpsAlarm, ldUpsAlarmLNReversedShutdown=ldUpsAlarmLNReversedShutdown, lcUpsSwitchedReceptacles=lcUpsSwitchedReceptacles, luExtensions=luExtensions, lcUpsTestBatteryStatus=lcUpsTestBatteryStatus, lcUpsInputTransients=lcUpsInputTransients, ldUpsDCOverVoltageShutdownTrap=ldUpsDCOverVoltageShutdownTrap, lgUpsLNReversedShutdownTrap=lgUpsLNReversedShutdownTrap, lcUpsOverTempShutdownTrap=lcUpsOverTempShutdownTrap, lcUpsNominalInputVoltage=lcUpsNominalInputVoltage, lcUpsAlarmTrap=lcUpsAlarmTrap, lcUpsConfigAutoRestart=lcUpsConfigAutoRestart, luPowerSure=luPowerSure, lcUpsInput=lcUpsInput, ls43cUpsIdent=ls43cUpsIdent, lcUpsAlarmFanFailed=lcUpsAlarmFanFailed, lsUpsBypassEntry=lsUpsBypassEntry, luSystemCabinet=luSystemCabinet)
mibBuilder.exportSymbols("LIEBERT-UPS-MIB", lsUpsIdentFirmwareVersion=lsUpsIdentFirmwareVersion, ldUpsAlarmOutputOverVoltage=ldUpsAlarmOutputOverVoltage, luSeries200ConfigFrequencyChangerModel=luSeries200ConfigFrequencyChangerModel, luSeries200Input=luSeries200Input, ls43cUpsBypassTable=ls43cUpsBypassTable, lcUpsOverTempWarningTrap=lcUpsOverTempWarningTrap, lcUpsSwitchedReceptLabel=lcUpsSwitchedReceptLabel, ldUpsOutputOverVoltageTrap=ldUpsOutputOverVoltageTrap, ldUpsOutputMaxVoltsSinceLastPoll=ldUpsOutputMaxVoltsSinceLastPoll, lgUpsAlarmRemoteShutdown=lgUpsAlarmRemoteShutdown, luUpsModule=luUpsModule, lcUpsAlarmOutputUnderVoltage=lcUpsAlarmOutputUnderVoltage, lcUpsAlarmFuseBlown=lcUpsAlarmFuseBlown, lcUpsOutputOffWarningTrap=lcUpsOutputOffWarningTrap, lcUpsInputBrownOuts=lcUpsInputBrownOuts, lgUpsAlarmOutputShortShutdown=lgUpsAlarmOutputShortShutdown, lcUpsAlarmManualResetXfer=lcUpsAlarmManualResetXfer, lcUpsOutputCurrent=lcUpsOutputCurrent, ldUpsChargerFailedTrap=ldUpsChargerFailedTrap, lsUpsBypassTable=lsUpsBypassTable, luSeries200InputMaxVoltsSinceLastPoll=luSeries200InputMaxVoltsSinceLastPoll, lcUpsOutputVoltage=lcUpsOutputVoltage, lcUpsAlarmOverTempShutdown=lcUpsAlarmOverTempShutdown)
