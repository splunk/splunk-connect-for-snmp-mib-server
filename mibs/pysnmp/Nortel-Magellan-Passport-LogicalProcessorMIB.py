#
# PySNMP MIB module Nortel-Magellan-Passport-LogicalProcessorMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-LogicalProcessorMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:16:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
DisplayString, RowStatus, Counter32, PassportCounter64, Integer32, InterfaceIndex, Unsigned32, RowPointer, StorageType, Gauge32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "RowStatus", "Counter32", "PassportCounter64", "Integer32", "InterfaceIndex", "Unsigned32", "RowPointer", "StorageType", "Gauge32")
EnterpriseDateAndTime, NonReplicated, Hex, Link, AsciiString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "NonReplicated", "Hex", "Link", "AsciiString")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, Bits, iso, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, ModuleIdentity, MibIdentifier, Counter64, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Bits", "iso", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Counter64", "Gauge32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
logicalProcessorMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11))
lp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12))
lpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 1), )
if mibBuilder.loadTexts: lpRowStatusTable.setStatus('mandatory')
lpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"))
if mibBuilder.loadTexts: lpRowStatusEntry.setStatus('mandatory')
lpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpRowStatus.setStatus('mandatory')
lpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpComponentName.setStatus('mandatory')
lpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpStorageType.setStatus('mandatory')
lpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: lpIndex.setStatus('mandatory')
lpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 100), )
if mibBuilder.loadTexts: lpProvTable.setStatus('mandatory')
lpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"))
if mibBuilder.loadTexts: lpProvEntry.setStatus('mandatory')
lpMainCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 100, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpMainCard.setStatus('mandatory')
lpSpareCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 100, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSpareCard.setStatus('mandatory')
lpLogicalProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 100, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpLogicalProcessorType.setStatus('mandatory')
lpCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 101), )
if mibBuilder.loadTexts: lpCidDataTable.setStatus('mandatory')
lpCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"))
if mibBuilder.loadTexts: lpCidDataEntry.setStatus('mandatory')
lpCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 101, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpCustomerIdentifier.setStatus('mandatory')
lpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102), )
if mibBuilder.loadTexts: lpStateTable.setStatus('mandatory')
lpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"))
if mibBuilder.loadTexts: lpStateEntry.setStatus('mandatory')
lpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpAdminState.setStatus('mandatory')
lpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOperationalState.setStatus('mandatory')
lpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpUsageState.setStatus('mandatory')
lpAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpAvailabilityStatus.setStatus('mandatory')
lpProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpProceduralStatus.setStatus('mandatory')
lpControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpControlStatus.setStatus('mandatory')
lpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpAlarmStatus.setStatus('mandatory')
lpStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpStandbyStatus.setStatus('mandatory')
lpUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 102, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpUnknownStatus.setStatus('mandatory')
lpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 103), )
if mibBuilder.loadTexts: lpOperTable.setStatus('mandatory')
lpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"))
if mibBuilder.loadTexts: lpOperEntry.setStatus('mandatory')
lpActiveCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 103, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpActiveCard.setStatus('mandatory')
lpMainCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("notProvisioned", 0), ("notAvailable", 1), ("available", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMainCardStatus.setStatus('mandatory')
lpSpareCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notProvisioned", 0), ("notAvailable", 1), ("alreadyInUse", 2), ("available", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSpareCardStatus.setStatus('mandatory')
lpRestartOnCpSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 103, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpRestartOnCpSwitch.setStatus('mandatory')
lpScheduledSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 103, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpScheduledSwitchover.setStatus('mandatory')
lpUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104), )
if mibBuilder.loadTexts: lpUtilTable.setStatus('mandatory')
lpUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"))
if mibBuilder.loadTexts: lpUtilEntry.setStatus('mandatory')
lpTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpTimeInterval.setStatus('mandatory')
lpCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpCpuUtil.setStatus('mandatory')
lpCpuUtilAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpCpuUtilAvg.setStatus('mandatory')
lpCpuUtilAvgMin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpCpuUtilAvgMin.setStatus('mandatory')
lpCpuUtilAvgMax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpCpuUtilAvgMax.setStatus('mandatory')
lpMsgBlockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMsgBlockUsage.setStatus('mandatory')
lpMsgBlockUsageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMsgBlockUsageAvg.setStatus('mandatory')
lpMsgBlockUsageAvgMin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMsgBlockUsageAvgMin.setStatus('mandatory')
lpMsgBlockUsageAvgMax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMsgBlockUsageAvgMax.setStatus('mandatory')
lpLocalMsgBlockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpLocalMsgBlockUsage.setStatus('mandatory')
lpLocalMsgBlockUsageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpLocalMsgBlockUsageAvg.setStatus('mandatory')
lpLocalMsgBlockUsageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpLocalMsgBlockUsageMin.setStatus('mandatory')
lpLocalMsgBlockUsageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 104, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpLocalMsgBlockUsageMax.setStatus('mandatory')
lpCapTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 105), )
if mibBuilder.loadTexts: lpCapTable.setStatus('mandatory')
lpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 105, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"))
if mibBuilder.loadTexts: lpCapEntry.setStatus('mandatory')
lpMsgBlockCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 105, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMsgBlockCapacity.setStatus('mandatory')
lpLocalMsgBlockCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 105, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpLocalMsgBlockCapacity.setStatus('mandatory')
lpLinkToApplicationsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 242), )
if mibBuilder.loadTexts: lpLinkToApplicationsTable.setStatus('mandatory')
lpLinkToApplicationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 242, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpLinkToApplicationsValue"))
if mibBuilder.loadTexts: lpLinkToApplicationsEntry.setStatus('mandatory')
lpLinkToApplicationsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 242, 1, 1), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpLinkToApplicationsValue.setStatus('mandatory')
lpMemoryCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 244), )
if mibBuilder.loadTexts: lpMemoryCapacityTable.setStatus('mandatory')
lpMemoryCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 244, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpMemoryCapacityIndex"))
if mibBuilder.loadTexts: lpMemoryCapacityEntry.setStatus('mandatory')
lpMemoryCapacityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 244, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: lpMemoryCapacityIndex.setStatus('mandatory')
lpMemoryCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 244, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMemoryCapacityValue.setStatus('mandatory')
lpMemoryUsageTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 245), )
if mibBuilder.loadTexts: lpMemoryUsageTable.setStatus('mandatory')
lpMemoryUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 245, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpMemoryUsageIndex"))
if mibBuilder.loadTexts: lpMemoryUsageEntry.setStatus('mandatory')
lpMemoryUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 245, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: lpMemoryUsageIndex.setStatus('mandatory')
lpMemoryUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 245, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMemoryUsageValue.setStatus('mandatory')
lpMemoryUsageAvgTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 276), )
if mibBuilder.loadTexts: lpMemoryUsageAvgTable.setStatus('mandatory')
lpMemoryUsageAvgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 276, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpMemoryUsageAvgIndex"))
if mibBuilder.loadTexts: lpMemoryUsageAvgEntry.setStatus('mandatory')
lpMemoryUsageAvgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 276, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: lpMemoryUsageAvgIndex.setStatus('mandatory')
lpMemoryUsageAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 276, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMemoryUsageAvgValue.setStatus('mandatory')
lpMemoryUsageAvgMinTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 277), )
if mibBuilder.loadTexts: lpMemoryUsageAvgMinTable.setStatus('mandatory')
lpMemoryUsageAvgMinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 277, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpMemoryUsageAvgMinIndex"))
if mibBuilder.loadTexts: lpMemoryUsageAvgMinEntry.setStatus('mandatory')
lpMemoryUsageAvgMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 277, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: lpMemoryUsageAvgMinIndex.setStatus('mandatory')
lpMemoryUsageAvgMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 277, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMemoryUsageAvgMinValue.setStatus('mandatory')
lpMemoryUsageAvgMaxTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 278), )
if mibBuilder.loadTexts: lpMemoryUsageAvgMaxTable.setStatus('mandatory')
lpMemoryUsageAvgMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 278, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpMemoryUsageAvgMaxIndex"))
if mibBuilder.loadTexts: lpMemoryUsageAvgMaxEntry.setStatus('mandatory')
lpMemoryUsageAvgMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 278, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: lpMemoryUsageAvgMaxIndex.setStatus('mandatory')
lpMemoryUsageAvgMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 278, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpMemoryUsageAvgMaxValue.setStatus('mandatory')
lpDS3 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5))
lpDS3RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 1), )
if mibBuilder.loadTexts: lpDS3RowStatusTable.setStatus('mandatory')
lpDS3RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3RowStatusEntry.setStatus('mandatory')
lpDS3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3RowStatus.setStatus('mandatory')
lpDS3ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3ComponentName.setStatus('mandatory')
lpDS3StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3StorageType.setStatus('mandatory')
lpDS3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: lpDS3Index.setStatus('mandatory')
lpDS3ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 10), )
if mibBuilder.loadTexts: lpDS3ProvTable.setStatus('mandatory')
lpDS3ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3ProvEntry.setStatus('mandatory')
lpDS3CbitParity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3CbitParity.setStatus('mandatory')
lpDS3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3LineLength.setStatus('mandatory')
lpDS3ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3ClockingSource.setStatus('mandatory')
lpDS3ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3ApplicationFramerName.setStatus('mandatory')
lpDS3Mapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("direct", 0), ("plcp", 1))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3Mapping.setStatus('mandatory')
lpDS3CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 11), )
if mibBuilder.loadTexts: lpDS3CidDataTable.setStatus('mandatory')
lpDS3CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3CidDataEntry.setStatus('mandatory')
lpDS3CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3CustomerIdentifier.setStatus('mandatory')
lpDS3AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 12), )
if mibBuilder.loadTexts: lpDS3AdminInfoTable.setStatus('mandatory')
lpDS3AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3AdminInfoEntry.setStatus('mandatory')
lpDS3Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3Vendor.setStatus('mandatory')
lpDS3CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3CommentText.setStatus('mandatory')
lpDS3IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 13), )
if mibBuilder.loadTexts: lpDS3IfEntryTable.setStatus('mandatory')
lpDS3IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3IfEntryEntry.setStatus('mandatory')
lpDS3IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3IfAdminStatus.setStatus('mandatory')
lpDS3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3IfIndex.setStatus('mandatory')
lpDS3OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 14), )
if mibBuilder.loadTexts: lpDS3OperStatusTable.setStatus('mandatory')
lpDS3OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3OperStatusEntry.setStatus('mandatory')
lpDS3SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3SnmpOperStatus.setStatus('mandatory')
lpDS3StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15), )
if mibBuilder.loadTexts: lpDS3StateTable.setStatus('mandatory')
lpDS3StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3StateEntry.setStatus('mandatory')
lpDS3AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3AdminState.setStatus('mandatory')
lpDS3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3OperationalState.setStatus('mandatory')
lpDS3UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3UsageState.setStatus('mandatory')
lpDS3AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3AvailabilityStatus.setStatus('mandatory')
lpDS3ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3ProceduralStatus.setStatus('mandatory')
lpDS3ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3ControlStatus.setStatus('mandatory')
lpDS3AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3AlarmStatus.setStatus('mandatory')
lpDS3StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3StandbyStatus.setStatus('mandatory')
lpDS3UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3UnknownStatus.setStatus('mandatory')
lpDS3OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16), )
if mibBuilder.loadTexts: lpDS3OperTable.setStatus('mandatory')
lpDS3OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3OperEntry.setStatus('mandatory')
lpDS3LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3LosAlarm.setStatus('mandatory')
lpDS3LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3LofAlarm.setStatus('mandatory')
lpDS3RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3RxAisAlarm.setStatus('mandatory')
lpDS3RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3RxRaiAlarm.setStatus('mandatory')
lpDS3RxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3RxIdle.setStatus('mandatory')
lpDS3TxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TxAis.setStatus('mandatory')
lpDS3TxRai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TxRai.setStatus('mandatory')
lpDS3TxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TxIdle.setStatus('mandatory')
lpDS3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17), )
if mibBuilder.loadTexts: lpDS3StatsTable.setStatus('mandatory')
lpDS3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"))
if mibBuilder.loadTexts: lpDS3StatsEntry.setStatus('mandatory')
lpDS3RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3RunningTime.setStatus('mandatory')
lpDS3ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3ErrorFreeSec.setStatus('mandatory')
lpDS3LineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3LineCodeViolations.setStatus('mandatory')
lpDS3LineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3LineErroredSec.setStatus('mandatory')
lpDS3LineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3LineSevErroredSec.setStatus('mandatory')
lpDS3LineLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3LineLosSec.setStatus('mandatory')
lpDS3LineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3LineFailures.setStatus('mandatory')
lpDS3PathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PathCodeViolations.setStatus('mandatory')
lpDS3PathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PathErroredSec.setStatus('mandatory')
lpDS3PathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PathSevErroredSec.setStatus('mandatory')
lpDS3PathSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PathSefAisSec.setStatus('mandatory')
lpDS3PathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PathUnavailSec.setStatus('mandatory')
lpDS3PathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PathFailures.setStatus('mandatory')
lpDS3Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2))
lpDS3TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 1), )
if mibBuilder.loadTexts: lpDS3TestRowStatusTable.setStatus('mandatory')
lpDS3TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3TestIndex"))
if mibBuilder.loadTexts: lpDS3TestRowStatusEntry.setStatus('mandatory')
lpDS3TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestRowStatus.setStatus('mandatory')
lpDS3TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestComponentName.setStatus('mandatory')
lpDS3TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestStorageType.setStatus('mandatory')
lpDS3TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3TestIndex.setStatus('mandatory')
lpDS3TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 10), )
if mibBuilder.loadTexts: lpDS3TestStateTable.setStatus('mandatory')
lpDS3TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3TestIndex"))
if mibBuilder.loadTexts: lpDS3TestStateEntry.setStatus('mandatory')
lpDS3TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestAdminState.setStatus('mandatory')
lpDS3TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestOperationalState.setStatus('mandatory')
lpDS3TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestUsageState.setStatus('mandatory')
lpDS3TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11), )
if mibBuilder.loadTexts: lpDS3TestSetupTable.setStatus('mandatory')
lpDS3TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3TestIndex"))
if mibBuilder.loadTexts: lpDS3TestSetupEntry.setStatus('mandatory')
lpDS3TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestPurpose.setStatus('mandatory')
lpDS3TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestType.setStatus('mandatory')
lpDS3TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestFrmSize.setStatus('mandatory')
lpDS3TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestFrmPatternType.setStatus('mandatory')
lpDS3TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestCustomizedPattern.setStatus('mandatory')
lpDS3TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestDataStartDelay.setStatus('mandatory')
lpDS3TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestDisplayInterval.setStatus('mandatory')
lpDS3TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3TestDuration.setStatus('mandatory')
lpDS3TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12), )
if mibBuilder.loadTexts: lpDS3TestResultsTable.setStatus('mandatory')
lpDS3TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3TestIndex"))
if mibBuilder.loadTexts: lpDS3TestResultsEntry.setStatus('mandatory')
lpDS3TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestElapsedTime.setStatus('mandatory')
lpDS3TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestTimeRemaining.setStatus('mandatory')
lpDS3TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestCauseOfTermination.setStatus('mandatory')
lpDS3TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestBitsTx.setStatus('mandatory')
lpDS3TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestBytesTx.setStatus('mandatory')
lpDS3TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestFrmTx.setStatus('mandatory')
lpDS3TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestBitsRx.setStatus('mandatory')
lpDS3TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestBytesRx.setStatus('mandatory')
lpDS3TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestFrmRx.setStatus('mandatory')
lpDS3TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestErroredFrmRx.setStatus('mandatory')
lpDS3TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3TestBitErrorRate.setStatus('mandatory')
lpDS3CBit = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3))
lpDS3CBitRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 1), )
if mibBuilder.loadTexts: lpDS3CBitRowStatusTable.setStatus('mandatory')
lpDS3CBitRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3CBitIndex"))
if mibBuilder.loadTexts: lpDS3CBitRowStatusEntry.setStatus('mandatory')
lpDS3CBitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitRowStatus.setStatus('mandatory')
lpDS3CBitComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitComponentName.setStatus('mandatory')
lpDS3CBitStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitStorageType.setStatus('mandatory')
lpDS3CBitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3CBitIndex.setStatus('mandatory')
lpDS3CBitOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 10), )
if mibBuilder.loadTexts: lpDS3CBitOperationalTable.setStatus('mandatory')
lpDS3CBitOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3CBitIndex"))
if mibBuilder.loadTexts: lpDS3CBitOperationalEntry.setStatus('mandatory')
lpDS3CBitFarEndAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("equipmentFailure", 0), ("los", 1), ("sef", 2), ("ais", 3), ("idle", 4), ("none", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndAlarm.setStatus('mandatory')
lpDS3CBitLoopedbackToFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitLoopedbackToFarEnd.setStatus('mandatory')
lpDS3CBitLoopbackAtFarEndRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitLoopbackAtFarEndRequested.setStatus('mandatory')
lpDS3CBitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11), )
if mibBuilder.loadTexts: lpDS3CBitStatsTable.setStatus('mandatory')
lpDS3CBitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3CBitIndex"))
if mibBuilder.loadTexts: lpDS3CBitStatsEntry.setStatus('mandatory')
lpDS3CBitCbitErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitCbitErrorFreeSec.setStatus('mandatory')
lpDS3CBitCbitCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitCbitCodeViolations.setStatus('mandatory')
lpDS3CBitCbitErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitCbitErroredSec.setStatus('mandatory')
lpDS3CBitCbitSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitCbitSevErroredSec.setStatus('mandatory')
lpDS3CBitCbitUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitCbitUnavailSec.setStatus('mandatory')
lpDS3CBitFarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndErrorFreeSec.setStatus('mandatory')
lpDS3CBitFarEndCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndCodeViolations.setStatus('mandatory')
lpDS3CBitFarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndErroredSec.setStatus('mandatory')
lpDS3CBitFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndSevErroredSec.setStatus('mandatory')
lpDS3CBitFarEndSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndSefAisSec.setStatus('mandatory')
lpDS3CBitFarEndUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndUnavailSec.setStatus('mandatory')
lpDS3CBitFarEndFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 3, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CBitFarEndFailures.setStatus('mandatory')
lpDS3Plcp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4))
lpDS3PlcpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 1), )
if mibBuilder.loadTexts: lpDS3PlcpRowStatusTable.setStatus('mandatory')
lpDS3PlcpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3PlcpIndex"))
if mibBuilder.loadTexts: lpDS3PlcpRowStatusEntry.setStatus('mandatory')
lpDS3PlcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpRowStatus.setStatus('mandatory')
lpDS3PlcpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpComponentName.setStatus('mandatory')
lpDS3PlcpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpStorageType.setStatus('mandatory')
lpDS3PlcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3PlcpIndex.setStatus('mandatory')
lpDS3PlcpOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 10), )
if mibBuilder.loadTexts: lpDS3PlcpOperationalTable.setStatus('mandatory')
lpDS3PlcpOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3PlcpIndex"))
if mibBuilder.loadTexts: lpDS3PlcpOperationalEntry.setStatus('mandatory')
lpDS3PlcpLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpLofAlarm.setStatus('mandatory')
lpDS3PlcpRxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpRxRaiAlarm.setStatus('mandatory')
lpDS3PlcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11), )
if mibBuilder.loadTexts: lpDS3PlcpStatsTable.setStatus('mandatory')
lpDS3PlcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3PlcpIndex"))
if mibBuilder.loadTexts: lpDS3PlcpStatsEntry.setStatus('mandatory')
lpDS3PlcpErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpErrorFreeSec.setStatus('mandatory')
lpDS3PlcpCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpCodingViolations.setStatus('mandatory')
lpDS3PlcpErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpErroredSec.setStatus('mandatory')
lpDS3PlcpSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpSevErroredSec.setStatus('mandatory')
lpDS3PlcpSevErroredFramingSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpSevErroredFramingSec.setStatus('mandatory')
lpDS3PlcpUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpUnavailSec.setStatus('mandatory')
lpDS3PlcpFarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpFarEndErrorFreeSec.setStatus('mandatory')
lpDS3PlcpFarEndCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpFarEndCodingViolations.setStatus('mandatory')
lpDS3PlcpFarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpFarEndErroredSec.setStatus('mandatory')
lpDS3PlcpFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpFarEndSevErroredSec.setStatus('mandatory')
lpDS3PlcpFarEndUnavailableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3PlcpFarEndUnavailableSec.setStatus('mandatory')
lpDS3Cell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5))
lpDS3CellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 1), )
if mibBuilder.loadTexts: lpDS3CellRowStatusTable.setStatus('mandatory')
lpDS3CellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3CellIndex"))
if mibBuilder.loadTexts: lpDS3CellRowStatusEntry.setStatus('mandatory')
lpDS3CellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3CellRowStatus.setStatus('mandatory')
lpDS3CellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellComponentName.setStatus('mandatory')
lpDS3CellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellStorageType.setStatus('mandatory')
lpDS3CellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3CellIndex.setStatus('mandatory')
lpDS3CellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 10), )
if mibBuilder.loadTexts: lpDS3CellProvTable.setStatus('mandatory')
lpDS3CellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3CellIndex"))
if mibBuilder.loadTexts: lpDS3CellProvEntry.setStatus('mandatory')
lpDS3CellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3CellAlarmActDelay.setStatus('mandatory')
lpDS3CellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3CellScrambleCellPayload.setStatus('mandatory')
lpDS3CellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3CellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpDS3CellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 11), )
if mibBuilder.loadTexts: lpDS3CellOperTable.setStatus('mandatory')
lpDS3CellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3CellIndex"))
if mibBuilder.loadTexts: lpDS3CellOperEntry.setStatus('mandatory')
lpDS3CellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellLcdAlarm.setStatus('mandatory')
lpDS3CellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 12), )
if mibBuilder.loadTexts: lpDS3CellStatsTable.setStatus('mandatory')
lpDS3CellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3CellIndex"))
if mibBuilder.loadTexts: lpDS3CellStatsEntry.setStatus('mandatory')
lpDS3CellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellUncorrectableHecErrors.setStatus('mandatory')
lpDS3CellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellSevErroredSec.setStatus('mandatory')
lpDS3CellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellReceiveCellUtilization.setStatus('mandatory')
lpDS3CellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellTransmitCellUtilization.setStatus('mandatory')
lpDS3CellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 5, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3CellCorrectableHeaderErrors.setStatus('mandatory')
lpDS3DS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6))
lpDS3DS1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 1), )
if mibBuilder.loadTexts: lpDS3DS1RowStatusTable.setStatus('mandatory')
lpDS3DS1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1RowStatusEntry.setStatus('mandatory')
lpDS3DS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1RowStatus.setStatus('mandatory')
lpDS3DS1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ComponentName.setStatus('mandatory')
lpDS3DS1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1StorageType.setStatus('mandatory')
lpDS3DS1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: lpDS3DS1Index.setStatus('mandatory')
lpDS3DS1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 10), )
if mibBuilder.loadTexts: lpDS3DS1ProvTable.setStatus('mandatory')
lpDS3DS1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1ProvEntry.setStatus('mandatory')
lpDS3DS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("d4", 0), ("esf", 1), ("d4Cas", 4), ("esfCas", 5))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1LineType.setStatus('mandatory')
lpDS3DS1ZeroCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("bit7Stuffing", 0), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ZeroCoding.setStatus('mandatory')
lpDS3DS1ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ClockingSource.setStatus('mandatory')
lpDS3DS1CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 11), )
if mibBuilder.loadTexts: lpDS3DS1CidDataTable.setStatus('mandatory')
lpDS3DS1CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1CidDataEntry.setStatus('mandatory')
lpDS3DS1CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1CustomerIdentifier.setStatus('mandatory')
lpDS3DS1AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 12), )
if mibBuilder.loadTexts: lpDS3DS1AdminInfoTable.setStatus('mandatory')
lpDS3DS1AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1AdminInfoEntry.setStatus('mandatory')
lpDS3DS1Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1Vendor.setStatus('mandatory')
lpDS3DS1CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1CommentText.setStatus('mandatory')
lpDS3DS1IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 13), )
if mibBuilder.loadTexts: lpDS3DS1IfEntryTable.setStatus('mandatory')
lpDS3DS1IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1IfEntryEntry.setStatus('mandatory')
lpDS3DS1IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1IfAdminStatus.setStatus('mandatory')
lpDS3DS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1IfIndex.setStatus('mandatory')
lpDS3DS1OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 14), )
if mibBuilder.loadTexts: lpDS3DS1OperStatusTable.setStatus('mandatory')
lpDS3DS1OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1OperStatusEntry.setStatus('mandatory')
lpDS3DS1SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1SnmpOperStatus.setStatus('mandatory')
lpDS3DS1StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15), )
if mibBuilder.loadTexts: lpDS3DS1StateTable.setStatus('mandatory')
lpDS3DS1StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1StateEntry.setStatus('mandatory')
lpDS3DS1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1AdminState.setStatus('mandatory')
lpDS3DS1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1OperationalState.setStatus('mandatory')
lpDS3DS1UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1UsageState.setStatus('mandatory')
lpDS3DS1AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1AvailabilityStatus.setStatus('mandatory')
lpDS3DS1ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ProceduralStatus.setStatus('mandatory')
lpDS3DS1ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ControlStatus.setStatus('mandatory')
lpDS3DS1AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1AlarmStatus.setStatus('mandatory')
lpDS3DS1StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1StandbyStatus.setStatus('mandatory')
lpDS3DS1UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1UnknownStatus.setStatus('mandatory')
lpDS3DS1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 16), )
if mibBuilder.loadTexts: lpDS3DS1OperTable.setStatus('mandatory')
lpDS3DS1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1OperEntry.setStatus('mandatory')
lpDS3DS1RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1RxAisAlarm.setStatus('mandatory')
lpDS3DS1LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1LofAlarm.setStatus('mandatory')
lpDS3DS1RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1RxRaiAlarm.setStatus('mandatory')
lpDS3DS1TxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TxAisAlarm.setStatus('mandatory')
lpDS3DS1TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TxRaiAlarm.setStatus('mandatory')
lpDS3DS1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17), )
if mibBuilder.loadTexts: lpDS3DS1StatsTable.setStatus('mandatory')
lpDS3DS1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"))
if mibBuilder.loadTexts: lpDS3DS1StatsEntry.setStatus('mandatory')
lpDS3DS1RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1RunningTime.setStatus('mandatory')
lpDS3DS1ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ErrorFreeSec.setStatus('mandatory')
lpDS3DS1ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ErroredSec.setStatus('mandatory')
lpDS3DS1SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1SevErroredSec.setStatus('mandatory')
lpDS3DS1SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1SevErroredFrmSec.setStatus('mandatory')
lpDS3DS1UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1UnavailSec.setStatus('mandatory')
lpDS3DS1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1CrcErrors.setStatus('mandatory')
lpDS3DS1FrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1FrmErrors.setStatus('mandatory')
lpDS3DS1SlipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1SlipErrors.setStatus('mandatory')
lpDS3DS1Chan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2))
lpDS3DS1ChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 1), )
if mibBuilder.loadTexts: lpDS3DS1ChanRowStatusTable.setStatus('mandatory')
lpDS3DS1ChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanRowStatusEntry.setStatus('mandatory')
lpDS3DS1ChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanRowStatus.setStatus('mandatory')
lpDS3DS1ChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanComponentName.setStatus('mandatory')
lpDS3DS1ChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanStorageType.setStatus('mandatory')
lpDS3DS1ChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: lpDS3DS1ChanIndex.setStatus('mandatory')
lpDS3DS1ChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 10), )
if mibBuilder.loadTexts: lpDS3DS1ChanProvTable.setStatus('mandatory')
lpDS3DS1ChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanProvEntry.setStatus('mandatory')
lpDS3DS1ChanTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTimeslots.setStatus('mandatory')
lpDS3DS1ChanTimeslotDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n56k", 0), ("doNotOverride", 1))).clone('doNotOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTimeslotDataRate.setStatus('mandatory')
lpDS3DS1ChanApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanApplicationFramerName.setStatus('mandatory')
lpDS3DS1ChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 11), )
if mibBuilder.loadTexts: lpDS3DS1ChanCidDataTable.setStatus('mandatory')
lpDS3DS1ChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanCidDataEntry.setStatus('mandatory')
lpDS3DS1ChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanCustomerIdentifier.setStatus('mandatory')
lpDS3DS1ChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 12), )
if mibBuilder.loadTexts: lpDS3DS1ChanIfEntryTable.setStatus('mandatory')
lpDS3DS1ChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanIfEntryEntry.setStatus('mandatory')
lpDS3DS1ChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanIfAdminStatus.setStatus('mandatory')
lpDS3DS1ChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanIfIndex.setStatus('mandatory')
lpDS3DS1ChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 13), )
if mibBuilder.loadTexts: lpDS3DS1ChanOperStatusTable.setStatus('mandatory')
lpDS3DS1ChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanOperStatusEntry.setStatus('mandatory')
lpDS3DS1ChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanSnmpOperStatus.setStatus('mandatory')
lpDS3DS1ChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14), )
if mibBuilder.loadTexts: lpDS3DS1ChanStateTable.setStatus('mandatory')
lpDS3DS1ChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanStateEntry.setStatus('mandatory')
lpDS3DS1ChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanAdminState.setStatus('mandatory')
lpDS3DS1ChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanOperationalState.setStatus('mandatory')
lpDS3DS1ChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanUsageState.setStatus('mandatory')
lpDS3DS1ChanAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanAvailabilityStatus.setStatus('mandatory')
lpDS3DS1ChanProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanProceduralStatus.setStatus('mandatory')
lpDS3DS1ChanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanControlStatus.setStatus('mandatory')
lpDS3DS1ChanAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanAlarmStatus.setStatus('mandatory')
lpDS3DS1ChanStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanStandbyStatus.setStatus('mandatory')
lpDS3DS1ChanUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanUnknownStatus.setStatus('mandatory')
lpDS3DS1ChanOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 15), )
if mibBuilder.loadTexts: lpDS3DS1ChanOperTable.setStatus('mandatory')
lpDS3DS1ChanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanOperEntry.setStatus('mandatory')
lpDS3DS1ChanActualChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 15, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanActualChannelSpeed.setStatus('mandatory')
lpDS3DS1ChanAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 16), )
if mibBuilder.loadTexts: lpDS3DS1ChanAdminInfoTable.setStatus('mandatory')
lpDS3DS1ChanAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanAdminInfoEntry.setStatus('mandatory')
lpDS3DS1ChanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 16, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanVendor.setStatus('mandatory')
lpDS3DS1ChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 16, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanCommentText.setStatus('mandatory')
lpDS3DS1ChanTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2))
lpDS3DS1ChanTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 1), )
if mibBuilder.loadTexts: lpDS3DS1ChanTestRowStatusTable.setStatus('mandatory')
lpDS3DS1ChanTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTestRowStatusEntry.setStatus('mandatory')
lpDS3DS1ChanTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestRowStatus.setStatus('mandatory')
lpDS3DS1ChanTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestComponentName.setStatus('mandatory')
lpDS3DS1ChanTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestStorageType.setStatus('mandatory')
lpDS3DS1ChanTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3DS1ChanTestIndex.setStatus('mandatory')
lpDS3DS1ChanTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 10), )
if mibBuilder.loadTexts: lpDS3DS1ChanTestStateTable.setStatus('mandatory')
lpDS3DS1ChanTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTestStateEntry.setStatus('mandatory')
lpDS3DS1ChanTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestAdminState.setStatus('mandatory')
lpDS3DS1ChanTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestOperationalState.setStatus('mandatory')
lpDS3DS1ChanTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestUsageState.setStatus('mandatory')
lpDS3DS1ChanTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11), )
if mibBuilder.loadTexts: lpDS3DS1ChanTestSetupTable.setStatus('mandatory')
lpDS3DS1ChanTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTestSetupEntry.setStatus('mandatory')
lpDS3DS1ChanTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestPurpose.setStatus('mandatory')
lpDS3DS1ChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestType.setStatus('mandatory')
lpDS3DS1ChanTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestFrmSize.setStatus('mandatory')
lpDS3DS1ChanTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestFrmPatternType.setStatus('mandatory')
lpDS3DS1ChanTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestCustomizedPattern.setStatus('mandatory')
lpDS3DS1ChanTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestDataStartDelay.setStatus('mandatory')
lpDS3DS1ChanTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestDisplayInterval.setStatus('mandatory')
lpDS3DS1ChanTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTestDuration.setStatus('mandatory')
lpDS3DS1ChanTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12), )
if mibBuilder.loadTexts: lpDS3DS1ChanTestResultsTable.setStatus('mandatory')
lpDS3DS1ChanTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTestResultsEntry.setStatus('mandatory')
lpDS3DS1ChanTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestElapsedTime.setStatus('mandatory')
lpDS3DS1ChanTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestTimeRemaining.setStatus('mandatory')
lpDS3DS1ChanTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestCauseOfTermination.setStatus('mandatory')
lpDS3DS1ChanTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestBitsTx.setStatus('mandatory')
lpDS3DS1ChanTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestBytesTx.setStatus('mandatory')
lpDS3DS1ChanTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestFrmTx.setStatus('mandatory')
lpDS3DS1ChanTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestBitsRx.setStatus('mandatory')
lpDS3DS1ChanTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestBytesRx.setStatus('mandatory')
lpDS3DS1ChanTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestFrmRx.setStatus('mandatory')
lpDS3DS1ChanTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestErroredFrmRx.setStatus('mandatory')
lpDS3DS1ChanTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTestBitErrorRate.setStatus('mandatory')
lpDS3DS1ChanCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3))
lpDS3DS1ChanCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 1), )
if mibBuilder.loadTexts: lpDS3DS1ChanCellRowStatusTable.setStatus('mandatory')
lpDS3DS1ChanCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanCellRowStatusEntry.setStatus('mandatory')
lpDS3DS1ChanCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanCellRowStatus.setStatus('mandatory')
lpDS3DS1ChanCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellComponentName.setStatus('mandatory')
lpDS3DS1ChanCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellStorageType.setStatus('mandatory')
lpDS3DS1ChanCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3DS1ChanCellIndex.setStatus('mandatory')
lpDS3DS1ChanCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 10), )
if mibBuilder.loadTexts: lpDS3DS1ChanCellProvTable.setStatus('mandatory')
lpDS3DS1ChanCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanCellProvEntry.setStatus('mandatory')
lpDS3DS1ChanCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanCellAlarmActDelay.setStatus('mandatory')
lpDS3DS1ChanCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanCellScrambleCellPayload.setStatus('mandatory')
lpDS3DS1ChanCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpDS3DS1ChanCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 11), )
if mibBuilder.loadTexts: lpDS3DS1ChanCellOperTable.setStatus('mandatory')
lpDS3DS1ChanCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanCellOperEntry.setStatus('mandatory')
lpDS3DS1ChanCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellLcdAlarm.setStatus('mandatory')
lpDS3DS1ChanCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 12), )
if mibBuilder.loadTexts: lpDS3DS1ChanCellStatsTable.setStatus('mandatory')
lpDS3DS1ChanCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanCellStatsEntry.setStatus('mandatory')
lpDS3DS1ChanCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellUncorrectableHecErrors.setStatus('mandatory')
lpDS3DS1ChanCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellSevErroredSec.setStatus('mandatory')
lpDS3DS1ChanCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellReceiveCellUtilization.setStatus('mandatory')
lpDS3DS1ChanCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellTransmitCellUtilization.setStatus('mandatory')
lpDS3DS1ChanCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanCellCorrectableHeaderErrors.setStatus('mandatory')
lpDS3DS1ChanTc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4))
lpDS3DS1ChanTcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 1), )
if mibBuilder.loadTexts: lpDS3DS1ChanTcRowStatusTable.setStatus('mandatory')
lpDS3DS1ChanTcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTcIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTcRowStatusEntry.setStatus('mandatory')
lpDS3DS1ChanTcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTcRowStatus.setStatus('mandatory')
lpDS3DS1ChanTcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTcComponentName.setStatus('mandatory')
lpDS3DS1ChanTcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTcStorageType.setStatus('mandatory')
lpDS3DS1ChanTcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3DS1ChanTcIndex.setStatus('mandatory')
lpDS3DS1ChanTcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 10), )
if mibBuilder.loadTexts: lpDS3DS1ChanTcProvTable.setStatus('mandatory')
lpDS3DS1ChanTcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTcIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTcProvEntry.setStatus('mandatory')
lpDS3DS1ChanTcReplacementData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 10, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTcReplacementData.setStatus('mandatory')
lpDS3DS1ChanTcSignalOneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTcSignalOneDuration.setStatus('mandatory')
lpDS3DS1ChanTcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 11), )
if mibBuilder.loadTexts: lpDS3DS1ChanTcOpTable.setStatus('mandatory')
lpDS3DS1ChanTcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTcIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTcOpEntry.setStatus('mandatory')
lpDS3DS1ChanTcIngressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTcIngressConditioning.setStatus('mandatory')
lpDS3DS1ChanTcEgressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1ChanTcEgressConditioning.setStatus('mandatory')
lpDS3DS1ChanTcSigOneTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 398), )
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigOneTable.setStatus('mandatory')
lpDS3DS1ChanTcSigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 398, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTcIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTcSigOneIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigOneEntry.setStatus('mandatory')
lpDS3DS1ChanTcSigOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 398, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigOneIndex.setStatus('mandatory')
lpDS3DS1ChanTcSigOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 398, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigOneValue.setStatus('mandatory')
lpDS3DS1ChanTcSigTwoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 399), )
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigTwoTable.setStatus('mandatory')
lpDS3DS1ChanTcSigTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 399, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTcIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1ChanTcSigTwoIndex"))
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigTwoEntry.setStatus('mandatory')
lpDS3DS1ChanTcSigTwoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 399, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigTwoIndex.setStatus('mandatory')
lpDS3DS1ChanTcSigTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 2, 4, 399, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1ChanTcSigTwoValue.setStatus('mandatory')
lpDS3DS1Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3))
lpDS3DS1TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 1), )
if mibBuilder.loadTexts: lpDS3DS1TestRowStatusTable.setStatus('mandatory')
lpDS3DS1TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1TestIndex"))
if mibBuilder.loadTexts: lpDS3DS1TestRowStatusEntry.setStatus('mandatory')
lpDS3DS1TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestRowStatus.setStatus('mandatory')
lpDS3DS1TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestComponentName.setStatus('mandatory')
lpDS3DS1TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestStorageType.setStatus('mandatory')
lpDS3DS1TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS3DS1TestIndex.setStatus('mandatory')
lpDS3DS1TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 10), )
if mibBuilder.loadTexts: lpDS3DS1TestStateTable.setStatus('mandatory')
lpDS3DS1TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1TestIndex"))
if mibBuilder.loadTexts: lpDS3DS1TestStateEntry.setStatus('mandatory')
lpDS3DS1TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestAdminState.setStatus('mandatory')
lpDS3DS1TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestOperationalState.setStatus('mandatory')
lpDS3DS1TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestUsageState.setStatus('mandatory')
lpDS3DS1TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11), )
if mibBuilder.loadTexts: lpDS3DS1TestSetupTable.setStatus('mandatory')
lpDS3DS1TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1TestIndex"))
if mibBuilder.loadTexts: lpDS3DS1TestSetupEntry.setStatus('mandatory')
lpDS3DS1TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestPurpose.setStatus('mandatory')
lpDS3DS1TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestType.setStatus('mandatory')
lpDS3DS1TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestFrmSize.setStatus('mandatory')
lpDS3DS1TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestFrmPatternType.setStatus('mandatory')
lpDS3DS1TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestCustomizedPattern.setStatus('mandatory')
lpDS3DS1TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestDataStartDelay.setStatus('mandatory')
lpDS3DS1TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestDisplayInterval.setStatus('mandatory')
lpDS3DS1TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS3DS1TestDuration.setStatus('mandatory')
lpDS3DS1TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12), )
if mibBuilder.loadTexts: lpDS3DS1TestResultsTable.setStatus('mandatory')
lpDS3DS1TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS3DS1TestIndex"))
if mibBuilder.loadTexts: lpDS3DS1TestResultsEntry.setStatus('mandatory')
lpDS3DS1TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestElapsedTime.setStatus('mandatory')
lpDS3DS1TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestTimeRemaining.setStatus('mandatory')
lpDS3DS1TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestCauseOfTermination.setStatus('mandatory')
lpDS3DS1TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestBitsTx.setStatus('mandatory')
lpDS3DS1TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestBytesTx.setStatus('mandatory')
lpDS3DS1TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestFrmTx.setStatus('mandatory')
lpDS3DS1TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestBitsRx.setStatus('mandatory')
lpDS3DS1TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestBytesRx.setStatus('mandatory')
lpDS3DS1TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestFrmRx.setStatus('mandatory')
lpDS3DS1TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestErroredFrmRx.setStatus('mandatory')
lpDS3DS1TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 5, 6, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS3DS1TestBitErrorRate.setStatus('mandatory')
lpE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6))
lpE3RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 1), )
if mibBuilder.loadTexts: lpE3RowStatusTable.setStatus('mandatory')
lpE3RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3RowStatusEntry.setStatus('mandatory')
lpE3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3RowStatus.setStatus('mandatory')
lpE3ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3ComponentName.setStatus('mandatory')
lpE3StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3StorageType.setStatus('mandatory')
lpE3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: lpE3Index.setStatus('mandatory')
lpE3ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10), )
if mibBuilder.loadTexts: lpE3ProvTable.setStatus('mandatory')
lpE3ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3ProvEntry.setStatus('mandatory')
lpE3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3LineLength.setStatus('mandatory')
lpE3ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3ClockingSource.setStatus('mandatory')
lpE3ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3ApplicationFramerName.setStatus('mandatory')
lpE3Mapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("direct", 0), ("plcp", 1))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3Mapping.setStatus('mandatory')
lpE3Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("g751", 0), ("g832", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3Framing.setStatus('mandatory')
lpE3LinkAlarmActivationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 2600)).clone(2200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3LinkAlarmActivationThreshold.setStatus('mandatory')
lpE3LinkAlarmScanInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 250)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3LinkAlarmScanInterval.setStatus('mandatory')
lpE3CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 11), )
if mibBuilder.loadTexts: lpE3CidDataTable.setStatus('mandatory')
lpE3CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3CidDataEntry.setStatus('mandatory')
lpE3CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3CustomerIdentifier.setStatus('mandatory')
lpE3AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 12), )
if mibBuilder.loadTexts: lpE3AdminInfoTable.setStatus('mandatory')
lpE3AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3AdminInfoEntry.setStatus('mandatory')
lpE3Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3Vendor.setStatus('mandatory')
lpE3CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3CommentText.setStatus('mandatory')
lpE3IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 13), )
if mibBuilder.loadTexts: lpE3IfEntryTable.setStatus('mandatory')
lpE3IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3IfEntryEntry.setStatus('mandatory')
lpE3IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3IfAdminStatus.setStatus('mandatory')
lpE3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3IfIndex.setStatus('mandatory')
lpE3OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 14), )
if mibBuilder.loadTexts: lpE3OperStatusTable.setStatus('mandatory')
lpE3OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3OperStatusEntry.setStatus('mandatory')
lpE3SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3SnmpOperStatus.setStatus('mandatory')
lpE3StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15), )
if mibBuilder.loadTexts: lpE3StateTable.setStatus('mandatory')
lpE3StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3StateEntry.setStatus('mandatory')
lpE3AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3AdminState.setStatus('mandatory')
lpE3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3OperationalState.setStatus('mandatory')
lpE3UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3UsageState.setStatus('mandatory')
lpE3AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3AvailabilityStatus.setStatus('mandatory')
lpE3ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3ProceduralStatus.setStatus('mandatory')
lpE3ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3ControlStatus.setStatus('mandatory')
lpE3AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3AlarmStatus.setStatus('mandatory')
lpE3StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3StandbyStatus.setStatus('mandatory')
lpE3UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3UnknownStatus.setStatus('mandatory')
lpE3OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16), )
if mibBuilder.loadTexts: lpE3OperTable.setStatus('mandatory')
lpE3OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3OperEntry.setStatus('mandatory')
lpE3LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3LosAlarm.setStatus('mandatory')
lpE3LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3LofAlarm.setStatus('mandatory')
lpE3RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3RxAisAlarm.setStatus('mandatory')
lpE3RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3RxRaiAlarm.setStatus('mandatory')
lpE3TxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TxAis.setStatus('mandatory')
lpE3TxRai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TxRai.setStatus('mandatory')
lpE3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17), )
if mibBuilder.loadTexts: lpE3StatsTable.setStatus('mandatory')
lpE3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"))
if mibBuilder.loadTexts: lpE3StatsEntry.setStatus('mandatory')
lpE3RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3RunningTime.setStatus('mandatory')
lpE3ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3ErrorFreeSec.setStatus('mandatory')
lpE3LineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3LineCodeViolations.setStatus('mandatory')
lpE3LineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3LineErroredSec.setStatus('mandatory')
lpE3LineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3LineSevErroredSec.setStatus('mandatory')
lpE3LineLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3LineLosSec.setStatus('mandatory')
lpE3LineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3LineFailures.setStatus('mandatory')
lpE3PathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PathCodeViolations.setStatus('mandatory')
lpE3PathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PathErroredSec.setStatus('mandatory')
lpE3PathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PathSevErroredSec.setStatus('mandatory')
lpE3PathSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PathSefAisSec.setStatus('mandatory')
lpE3PathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PathUnavailSec.setStatus('mandatory')
lpE3PathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PathFailures.setStatus('mandatory')
lpE3Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2))
lpE3TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 1), )
if mibBuilder.loadTexts: lpE3TestRowStatusTable.setStatus('mandatory')
lpE3TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3TestIndex"))
if mibBuilder.loadTexts: lpE3TestRowStatusEntry.setStatus('mandatory')
lpE3TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestRowStatus.setStatus('mandatory')
lpE3TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestComponentName.setStatus('mandatory')
lpE3TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestStorageType.setStatus('mandatory')
lpE3TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE3TestIndex.setStatus('mandatory')
lpE3TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 10), )
if mibBuilder.loadTexts: lpE3TestStateTable.setStatus('mandatory')
lpE3TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3TestIndex"))
if mibBuilder.loadTexts: lpE3TestStateEntry.setStatus('mandatory')
lpE3TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestAdminState.setStatus('mandatory')
lpE3TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestOperationalState.setStatus('mandatory')
lpE3TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestUsageState.setStatus('mandatory')
lpE3TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11), )
if mibBuilder.loadTexts: lpE3TestSetupTable.setStatus('mandatory')
lpE3TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3TestIndex"))
if mibBuilder.loadTexts: lpE3TestSetupEntry.setStatus('mandatory')
lpE3TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestPurpose.setStatus('mandatory')
lpE3TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestType.setStatus('mandatory')
lpE3TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestFrmSize.setStatus('mandatory')
lpE3TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestFrmPatternType.setStatus('mandatory')
lpE3TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestCustomizedPattern.setStatus('mandatory')
lpE3TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestDataStartDelay.setStatus('mandatory')
lpE3TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestDisplayInterval.setStatus('mandatory')
lpE3TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3TestDuration.setStatus('mandatory')
lpE3TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12), )
if mibBuilder.loadTexts: lpE3TestResultsTable.setStatus('mandatory')
lpE3TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3TestIndex"))
if mibBuilder.loadTexts: lpE3TestResultsEntry.setStatus('mandatory')
lpE3TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestElapsedTime.setStatus('mandatory')
lpE3TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestTimeRemaining.setStatus('mandatory')
lpE3TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestCauseOfTermination.setStatus('mandatory')
lpE3TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestBitsTx.setStatus('mandatory')
lpE3TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestBytesTx.setStatus('mandatory')
lpE3TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestFrmTx.setStatus('mandatory')
lpE3TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestBitsRx.setStatus('mandatory')
lpE3TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestBytesRx.setStatus('mandatory')
lpE3TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestFrmRx.setStatus('mandatory')
lpE3TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestErroredFrmRx.setStatus('mandatory')
lpE3TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3TestBitErrorRate.setStatus('mandatory')
lpE3G832 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3))
lpE3G832RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 1), )
if mibBuilder.loadTexts: lpE3G832RowStatusTable.setStatus('mandatory')
lpE3G832RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3G832Index"))
if mibBuilder.loadTexts: lpE3G832RowStatusEntry.setStatus('mandatory')
lpE3G832RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3G832RowStatus.setStatus('mandatory')
lpE3G832ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832ComponentName.setStatus('mandatory')
lpE3G832StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832StorageType.setStatus('mandatory')
lpE3G832Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE3G832Index.setStatus('mandatory')
lpE3G832ProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 10), )
if mibBuilder.loadTexts: lpE3G832ProvisionedTable.setStatus('mandatory')
lpE3G832ProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3G832Index"))
if mibBuilder.loadTexts: lpE3G832ProvisionedEntry.setStatus('mandatory')
lpE3G832TrailTraceTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3G832TrailTraceTransmitted.setStatus('mandatory')
lpE3G832TrailTraceExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3G832TrailTraceExpected.setStatus('mandatory')
lpE3G832OperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 11), )
if mibBuilder.loadTexts: lpE3G832OperationalTable.setStatus('mandatory')
lpE3G832OperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3G832Index"))
if mibBuilder.loadTexts: lpE3G832OperationalEntry.setStatus('mandatory')
lpE3G832UnexpectedPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832UnexpectedPayloadType.setStatus('mandatory')
lpE3G832TrailTraceMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832TrailTraceMismatch.setStatus('mandatory')
lpE3G832TimingMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notTraceable", 0), ("traceable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832TimingMarker.setStatus('mandatory')
lpE3G832TrailTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 11, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832TrailTraceReceived.setStatus('mandatory')
lpE3G832StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12), )
if mibBuilder.loadTexts: lpE3G832StatsTable.setStatus('mandatory')
lpE3G832StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3G832Index"))
if mibBuilder.loadTexts: lpE3G832StatsEntry.setStatus('mandatory')
lpE3G832FarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832FarEndErrorFreeSec.setStatus('mandatory')
lpE3G832FarEndCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832FarEndCodeViolations.setStatus('mandatory')
lpE3G832FarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832FarEndErroredSec.setStatus('mandatory')
lpE3G832FarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832FarEndSevErroredSec.setStatus('mandatory')
lpE3G832FarEndSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832FarEndSefAisSec.setStatus('mandatory')
lpE3G832FarEndUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3G832FarEndUnavailSec.setStatus('mandatory')
lpE3Plcp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4))
lpE3PlcpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 1), )
if mibBuilder.loadTexts: lpE3PlcpRowStatusTable.setStatus('mandatory')
lpE3PlcpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3PlcpIndex"))
if mibBuilder.loadTexts: lpE3PlcpRowStatusEntry.setStatus('mandatory')
lpE3PlcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpRowStatus.setStatus('mandatory')
lpE3PlcpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpComponentName.setStatus('mandatory')
lpE3PlcpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpStorageType.setStatus('mandatory')
lpE3PlcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE3PlcpIndex.setStatus('mandatory')
lpE3PlcpOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 10), )
if mibBuilder.loadTexts: lpE3PlcpOperationalTable.setStatus('mandatory')
lpE3PlcpOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3PlcpIndex"))
if mibBuilder.loadTexts: lpE3PlcpOperationalEntry.setStatus('mandatory')
lpE3PlcpLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpLofAlarm.setStatus('mandatory')
lpE3PlcpRxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpRxRaiAlarm.setStatus('mandatory')
lpE3PlcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11), )
if mibBuilder.loadTexts: lpE3PlcpStatsTable.setStatus('mandatory')
lpE3PlcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3PlcpIndex"))
if mibBuilder.loadTexts: lpE3PlcpStatsEntry.setStatus('mandatory')
lpE3PlcpErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpErrorFreeSec.setStatus('mandatory')
lpE3PlcpCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpCodingViolations.setStatus('mandatory')
lpE3PlcpErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpErroredSec.setStatus('mandatory')
lpE3PlcpSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpSevErroredSec.setStatus('mandatory')
lpE3PlcpSevErroredFramingSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpSevErroredFramingSec.setStatus('mandatory')
lpE3PlcpUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpUnavailSec.setStatus('mandatory')
lpE3PlcpFarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpFarEndErrorFreeSec.setStatus('mandatory')
lpE3PlcpFarEndCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpFarEndCodingViolations.setStatus('mandatory')
lpE3PlcpFarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpFarEndErroredSec.setStatus('mandatory')
lpE3PlcpFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpFarEndSevErroredSec.setStatus('mandatory')
lpE3PlcpFarEndUnavailableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3PlcpFarEndUnavailableSec.setStatus('mandatory')
lpE3Cell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5))
lpE3CellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 1), )
if mibBuilder.loadTexts: lpE3CellRowStatusTable.setStatus('mandatory')
lpE3CellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3CellIndex"))
if mibBuilder.loadTexts: lpE3CellRowStatusEntry.setStatus('mandatory')
lpE3CellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3CellRowStatus.setStatus('mandatory')
lpE3CellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellComponentName.setStatus('mandatory')
lpE3CellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellStorageType.setStatus('mandatory')
lpE3CellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE3CellIndex.setStatus('mandatory')
lpE3CellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 10), )
if mibBuilder.loadTexts: lpE3CellProvTable.setStatus('mandatory')
lpE3CellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3CellIndex"))
if mibBuilder.loadTexts: lpE3CellProvEntry.setStatus('mandatory')
lpE3CellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3CellAlarmActDelay.setStatus('mandatory')
lpE3CellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3CellScrambleCellPayload.setStatus('mandatory')
lpE3CellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE3CellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpE3CellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 11), )
if mibBuilder.loadTexts: lpE3CellOperTable.setStatus('mandatory')
lpE3CellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3CellIndex"))
if mibBuilder.loadTexts: lpE3CellOperEntry.setStatus('mandatory')
lpE3CellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellLcdAlarm.setStatus('mandatory')
lpE3CellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 12), )
if mibBuilder.loadTexts: lpE3CellStatsTable.setStatus('mandatory')
lpE3CellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE3CellIndex"))
if mibBuilder.loadTexts: lpE3CellStatsEntry.setStatus('mandatory')
lpE3CellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellUncorrectableHecErrors.setStatus('mandatory')
lpE3CellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellSevErroredSec.setStatus('mandatory')
lpE3CellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellReceiveCellUtilization.setStatus('mandatory')
lpE3CellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellTransmitCellUtilization.setStatus('mandatory')
lpE3CellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 6, 5, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE3CellCorrectableHeaderErrors.setStatus('mandatory')
lpDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7))
lpDS1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 1), )
if mibBuilder.loadTexts: lpDS1RowStatusTable.setStatus('mandatory')
lpDS1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1RowStatusEntry.setStatus('mandatory')
lpDS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1RowStatus.setStatus('mandatory')
lpDS1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ComponentName.setStatus('mandatory')
lpDS1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1StorageType.setStatus('mandatory')
lpDS1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: lpDS1Index.setStatus('mandatory')
lpDS1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 10), )
if mibBuilder.loadTexts: lpDS1ProvTable.setStatus('mandatory')
lpDS1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1ProvEntry.setStatus('mandatory')
lpDS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5, 6))).clone(namedValues=NamedValues(("d4", 0), ("esf", 1), ("d4Cas", 4), ("esfCas", 5), ("unframed", 6))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1LineType.setStatus('mandatory')
lpDS1ZeroCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bit7Stuffing", 0), ("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ZeroCoding.setStatus('mandatory')
lpDS1ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 3), ("srtsMode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ClockingSource.setStatus('mandatory')
lpDS1RaiAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sBit", 0), ("bit2", 1), ("fdl", 2))).clone('fdl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1RaiAlarmType.setStatus('mandatory')
lpDS1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 655))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1LineLength.setStatus('mandatory')
lpDS1CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 11), )
if mibBuilder.loadTexts: lpDS1CidDataTable.setStatus('mandatory')
lpDS1CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1CidDataEntry.setStatus('mandatory')
lpDS1CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1CustomerIdentifier.setStatus('mandatory')
lpDS1AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 12), )
if mibBuilder.loadTexts: lpDS1AdminInfoTable.setStatus('mandatory')
lpDS1AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1AdminInfoEntry.setStatus('mandatory')
lpDS1Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1Vendor.setStatus('mandatory')
lpDS1CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1CommentText.setStatus('mandatory')
lpDS1IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 13), )
if mibBuilder.loadTexts: lpDS1IfEntryTable.setStatus('mandatory')
lpDS1IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1IfEntryEntry.setStatus('mandatory')
lpDS1IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1IfAdminStatus.setStatus('mandatory')
lpDS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1IfIndex.setStatus('mandatory')
lpDS1OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 14), )
if mibBuilder.loadTexts: lpDS1OperStatusTable.setStatus('mandatory')
lpDS1OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1OperStatusEntry.setStatus('mandatory')
lpDS1SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1SnmpOperStatus.setStatus('mandatory')
lpDS1StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15), )
if mibBuilder.loadTexts: lpDS1StateTable.setStatus('mandatory')
lpDS1StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1StateEntry.setStatus('mandatory')
lpDS1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1AdminState.setStatus('mandatory')
lpDS1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1OperationalState.setStatus('mandatory')
lpDS1UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1UsageState.setStatus('mandatory')
lpDS1AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1AvailabilityStatus.setStatus('mandatory')
lpDS1ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ProceduralStatus.setStatus('mandatory')
lpDS1ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ControlStatus.setStatus('mandatory')
lpDS1AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1AlarmStatus.setStatus('mandatory')
lpDS1StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1StandbyStatus.setStatus('mandatory')
lpDS1UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1UnknownStatus.setStatus('mandatory')
lpDS1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16), )
if mibBuilder.loadTexts: lpDS1OperTable.setStatus('mandatory')
lpDS1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1OperEntry.setStatus('mandatory')
lpDS1LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1LosAlarm.setStatus('mandatory')
lpDS1RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1RxAisAlarm.setStatus('mandatory')
lpDS1LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1LofAlarm.setStatus('mandatory')
lpDS1RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1RxRaiAlarm.setStatus('mandatory')
lpDS1TxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TxAisAlarm.setStatus('mandatory')
lpDS1TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TxRaiAlarm.setStatus('mandatory')
lpDS1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17), )
if mibBuilder.loadTexts: lpDS1StatsTable.setStatus('mandatory')
lpDS1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"))
if mibBuilder.loadTexts: lpDS1StatsEntry.setStatus('mandatory')
lpDS1RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1RunningTime.setStatus('mandatory')
lpDS1ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ErrorFreeSec.setStatus('mandatory')
lpDS1ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ErroredSec.setStatus('mandatory')
lpDS1SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1SevErroredSec.setStatus('mandatory')
lpDS1SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1SevErroredFrmSec.setStatus('mandatory')
lpDS1UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1UnavailSec.setStatus('mandatory')
lpDS1BpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1BpvErrors.setStatus('mandatory')
lpDS1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1CrcErrors.setStatus('mandatory')
lpDS1FrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1FrmErrors.setStatus('mandatory')
lpDS1LosStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1LosStateChanges.setStatus('mandatory')
lpDS1SlipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1SlipErrors.setStatus('mandatory')
lpDS1Chan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2))
lpDS1ChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 1), )
if mibBuilder.loadTexts: lpDS1ChanRowStatusTable.setStatus('mandatory')
lpDS1ChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanRowStatusEntry.setStatus('mandatory')
lpDS1ChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanRowStatus.setStatus('mandatory')
lpDS1ChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanComponentName.setStatus('mandatory')
lpDS1ChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanStorageType.setStatus('mandatory')
lpDS1ChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: lpDS1ChanIndex.setStatus('mandatory')
lpDS1ChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 10), )
if mibBuilder.loadTexts: lpDS1ChanProvTable.setStatus('mandatory')
lpDS1ChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanProvEntry.setStatus('mandatory')
lpDS1ChanTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTimeslots.setStatus('mandatory')
lpDS1ChanTimeslotDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n56k", 0), ("doNotOverride", 1))).clone('doNotOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTimeslotDataRate.setStatus('mandatory')
lpDS1ChanApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanApplicationFramerName.setStatus('mandatory')
lpDS1ChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 11), )
if mibBuilder.loadTexts: lpDS1ChanCidDataTable.setStatus('mandatory')
lpDS1ChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanCidDataEntry.setStatus('mandatory')
lpDS1ChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanCustomerIdentifier.setStatus('mandatory')
lpDS1ChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 12), )
if mibBuilder.loadTexts: lpDS1ChanIfEntryTable.setStatus('mandatory')
lpDS1ChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanIfEntryEntry.setStatus('mandatory')
lpDS1ChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanIfAdminStatus.setStatus('mandatory')
lpDS1ChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanIfIndex.setStatus('mandatory')
lpDS1ChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 13), )
if mibBuilder.loadTexts: lpDS1ChanOperStatusTable.setStatus('mandatory')
lpDS1ChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanOperStatusEntry.setStatus('mandatory')
lpDS1ChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanSnmpOperStatus.setStatus('mandatory')
lpDS1ChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14), )
if mibBuilder.loadTexts: lpDS1ChanStateTable.setStatus('mandatory')
lpDS1ChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanStateEntry.setStatus('mandatory')
lpDS1ChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanAdminState.setStatus('mandatory')
lpDS1ChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanOperationalState.setStatus('mandatory')
lpDS1ChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanUsageState.setStatus('mandatory')
lpDS1ChanAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanAvailabilityStatus.setStatus('mandatory')
lpDS1ChanProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanProceduralStatus.setStatus('mandatory')
lpDS1ChanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanControlStatus.setStatus('mandatory')
lpDS1ChanAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanAlarmStatus.setStatus('mandatory')
lpDS1ChanStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanStandbyStatus.setStatus('mandatory')
lpDS1ChanUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanUnknownStatus.setStatus('mandatory')
lpDS1ChanOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 15), )
if mibBuilder.loadTexts: lpDS1ChanOperTable.setStatus('mandatory')
lpDS1ChanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanOperEntry.setStatus('mandatory')
lpDS1ChanActualChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 15, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanActualChannelSpeed.setStatus('mandatory')
lpDS1ChanAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 16), )
if mibBuilder.loadTexts: lpDS1ChanAdminInfoTable.setStatus('mandatory')
lpDS1ChanAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"))
if mibBuilder.loadTexts: lpDS1ChanAdminInfoEntry.setStatus('mandatory')
lpDS1ChanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 16, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanVendor.setStatus('mandatory')
lpDS1ChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 16, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanCommentText.setStatus('mandatory')
lpDS1ChanTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2))
lpDS1ChanTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 1), )
if mibBuilder.loadTexts: lpDS1ChanTestRowStatusTable.setStatus('mandatory')
lpDS1ChanTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS1ChanTestRowStatusEntry.setStatus('mandatory')
lpDS1ChanTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestRowStatus.setStatus('mandatory')
lpDS1ChanTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestComponentName.setStatus('mandatory')
lpDS1ChanTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestStorageType.setStatus('mandatory')
lpDS1ChanTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS1ChanTestIndex.setStatus('mandatory')
lpDS1ChanTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 10), )
if mibBuilder.loadTexts: lpDS1ChanTestStateTable.setStatus('mandatory')
lpDS1ChanTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS1ChanTestStateEntry.setStatus('mandatory')
lpDS1ChanTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestAdminState.setStatus('mandatory')
lpDS1ChanTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestOperationalState.setStatus('mandatory')
lpDS1ChanTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestUsageState.setStatus('mandatory')
lpDS1ChanTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11), )
if mibBuilder.loadTexts: lpDS1ChanTestSetupTable.setStatus('mandatory')
lpDS1ChanTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS1ChanTestSetupEntry.setStatus('mandatory')
lpDS1ChanTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestPurpose.setStatus('mandatory')
lpDS1ChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestType.setStatus('mandatory')
lpDS1ChanTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestFrmSize.setStatus('mandatory')
lpDS1ChanTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestFrmPatternType.setStatus('mandatory')
lpDS1ChanTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestCustomizedPattern.setStatus('mandatory')
lpDS1ChanTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestDataStartDelay.setStatus('mandatory')
lpDS1ChanTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestDisplayInterval.setStatus('mandatory')
lpDS1ChanTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTestDuration.setStatus('mandatory')
lpDS1ChanTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12), )
if mibBuilder.loadTexts: lpDS1ChanTestResultsTable.setStatus('mandatory')
lpDS1ChanTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTestIndex"))
if mibBuilder.loadTexts: lpDS1ChanTestResultsEntry.setStatus('mandatory')
lpDS1ChanTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestElapsedTime.setStatus('mandatory')
lpDS1ChanTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestTimeRemaining.setStatus('mandatory')
lpDS1ChanTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestCauseOfTermination.setStatus('mandatory')
lpDS1ChanTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestBitsTx.setStatus('mandatory')
lpDS1ChanTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestBytesTx.setStatus('mandatory')
lpDS1ChanTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestFrmTx.setStatus('mandatory')
lpDS1ChanTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestBitsRx.setStatus('mandatory')
lpDS1ChanTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestBytesRx.setStatus('mandatory')
lpDS1ChanTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestFrmRx.setStatus('mandatory')
lpDS1ChanTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestErroredFrmRx.setStatus('mandatory')
lpDS1ChanTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTestBitErrorRate.setStatus('mandatory')
lpDS1ChanCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3))
lpDS1ChanCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 1), )
if mibBuilder.loadTexts: lpDS1ChanCellRowStatusTable.setStatus('mandatory')
lpDS1ChanCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS1ChanCellRowStatusEntry.setStatus('mandatory')
lpDS1ChanCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanCellRowStatus.setStatus('mandatory')
lpDS1ChanCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellComponentName.setStatus('mandatory')
lpDS1ChanCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellStorageType.setStatus('mandatory')
lpDS1ChanCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS1ChanCellIndex.setStatus('mandatory')
lpDS1ChanCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 10), )
if mibBuilder.loadTexts: lpDS1ChanCellProvTable.setStatus('mandatory')
lpDS1ChanCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS1ChanCellProvEntry.setStatus('mandatory')
lpDS1ChanCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanCellAlarmActDelay.setStatus('mandatory')
lpDS1ChanCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanCellScrambleCellPayload.setStatus('mandatory')
lpDS1ChanCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpDS1ChanCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 11), )
if mibBuilder.loadTexts: lpDS1ChanCellOperTable.setStatus('mandatory')
lpDS1ChanCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS1ChanCellOperEntry.setStatus('mandatory')
lpDS1ChanCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellLcdAlarm.setStatus('mandatory')
lpDS1ChanCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 12), )
if mibBuilder.loadTexts: lpDS1ChanCellStatsTable.setStatus('mandatory')
lpDS1ChanCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanCellIndex"))
if mibBuilder.loadTexts: lpDS1ChanCellStatsEntry.setStatus('mandatory')
lpDS1ChanCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellUncorrectableHecErrors.setStatus('mandatory')
lpDS1ChanCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellSevErroredSec.setStatus('mandatory')
lpDS1ChanCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellReceiveCellUtilization.setStatus('mandatory')
lpDS1ChanCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellTransmitCellUtilization.setStatus('mandatory')
lpDS1ChanCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanCellCorrectableHeaderErrors.setStatus('mandatory')
lpDS1ChanTc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4))
lpDS1ChanTcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 1), )
if mibBuilder.loadTexts: lpDS1ChanTcRowStatusTable.setStatus('mandatory')
lpDS1ChanTcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTcIndex"))
if mibBuilder.loadTexts: lpDS1ChanTcRowStatusEntry.setStatus('mandatory')
lpDS1ChanTcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTcRowStatus.setStatus('mandatory')
lpDS1ChanTcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTcComponentName.setStatus('mandatory')
lpDS1ChanTcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTcStorageType.setStatus('mandatory')
lpDS1ChanTcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS1ChanTcIndex.setStatus('mandatory')
lpDS1ChanTcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 10), )
if mibBuilder.loadTexts: lpDS1ChanTcProvTable.setStatus('mandatory')
lpDS1ChanTcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTcIndex"))
if mibBuilder.loadTexts: lpDS1ChanTcProvEntry.setStatus('mandatory')
lpDS1ChanTcReplacementData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 10, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTcReplacementData.setStatus('mandatory')
lpDS1ChanTcSignalOneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTcSignalOneDuration.setStatus('mandatory')
lpDS1ChanTcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 11), )
if mibBuilder.loadTexts: lpDS1ChanTcOpTable.setStatus('mandatory')
lpDS1ChanTcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTcIndex"))
if mibBuilder.loadTexts: lpDS1ChanTcOpEntry.setStatus('mandatory')
lpDS1ChanTcIngressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTcIngressConditioning.setStatus('mandatory')
lpDS1ChanTcEgressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1ChanTcEgressConditioning.setStatus('mandatory')
lpDS1ChanTcSigOneTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 398), )
if mibBuilder.loadTexts: lpDS1ChanTcSigOneTable.setStatus('mandatory')
lpDS1ChanTcSigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 398, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTcIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTcSigOneIndex"))
if mibBuilder.loadTexts: lpDS1ChanTcSigOneEntry.setStatus('mandatory')
lpDS1ChanTcSigOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 398, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: lpDS1ChanTcSigOneIndex.setStatus('mandatory')
lpDS1ChanTcSigOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 398, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTcSigOneValue.setStatus('mandatory')
lpDS1ChanTcSigTwoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 399), )
if mibBuilder.loadTexts: lpDS1ChanTcSigTwoTable.setStatus('mandatory')
lpDS1ChanTcSigTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 399, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTcIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1ChanTcSigTwoIndex"))
if mibBuilder.loadTexts: lpDS1ChanTcSigTwoEntry.setStatus('mandatory')
lpDS1ChanTcSigTwoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 399, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: lpDS1ChanTcSigTwoIndex.setStatus('mandatory')
lpDS1ChanTcSigTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 2, 4, 399, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1ChanTcSigTwoValue.setStatus('mandatory')
lpDS1Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3))
lpDS1TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 1), )
if mibBuilder.loadTexts: lpDS1TestRowStatusTable.setStatus('mandatory')
lpDS1TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1TestIndex"))
if mibBuilder.loadTexts: lpDS1TestRowStatusEntry.setStatus('mandatory')
lpDS1TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestRowStatus.setStatus('mandatory')
lpDS1TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestComponentName.setStatus('mandatory')
lpDS1TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestStorageType.setStatus('mandatory')
lpDS1TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS1TestIndex.setStatus('mandatory')
lpDS1TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 10), )
if mibBuilder.loadTexts: lpDS1TestStateTable.setStatus('mandatory')
lpDS1TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1TestIndex"))
if mibBuilder.loadTexts: lpDS1TestStateEntry.setStatus('mandatory')
lpDS1TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestAdminState.setStatus('mandatory')
lpDS1TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestOperationalState.setStatus('mandatory')
lpDS1TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestUsageState.setStatus('mandatory')
lpDS1TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11), )
if mibBuilder.loadTexts: lpDS1TestSetupTable.setStatus('mandatory')
lpDS1TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1TestIndex"))
if mibBuilder.loadTexts: lpDS1TestSetupEntry.setStatus('mandatory')
lpDS1TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestPurpose.setStatus('mandatory')
lpDS1TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestType.setStatus('mandatory')
lpDS1TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestFrmSize.setStatus('mandatory')
lpDS1TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestFrmPatternType.setStatus('mandatory')
lpDS1TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestCustomizedPattern.setStatus('mandatory')
lpDS1TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestDataStartDelay.setStatus('mandatory')
lpDS1TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestDisplayInterval.setStatus('mandatory')
lpDS1TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpDS1TestDuration.setStatus('mandatory')
lpDS1TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12), )
if mibBuilder.loadTexts: lpDS1TestResultsTable.setStatus('mandatory')
lpDS1TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1TestIndex"))
if mibBuilder.loadTexts: lpDS1TestResultsEntry.setStatus('mandatory')
lpDS1TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestElapsedTime.setStatus('mandatory')
lpDS1TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestTimeRemaining.setStatus('mandatory')
lpDS1TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestCauseOfTermination.setStatus('mandatory')
lpDS1TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestBitsTx.setStatus('mandatory')
lpDS1TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestBytesTx.setStatus('mandatory')
lpDS1TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestFrmTx.setStatus('mandatory')
lpDS1TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestBitsRx.setStatus('mandatory')
lpDS1TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestBytesRx.setStatus('mandatory')
lpDS1TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestFrmRx.setStatus('mandatory')
lpDS1TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestErroredFrmRx.setStatus('mandatory')
lpDS1TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1TestBitErrorRate.setStatus('mandatory')
lpDS1Dsp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 4))
lpDS1DspRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 4, 1), )
if mibBuilder.loadTexts: lpDS1DspRowStatusTable.setStatus('mandatory')
lpDS1DspRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1DspIndex"))
if mibBuilder.loadTexts: lpDS1DspRowStatusEntry.setStatus('mandatory')
lpDS1DspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1DspRowStatus.setStatus('mandatory')
lpDS1DspComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1DspComponentName.setStatus('mandatory')
lpDS1DspStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1DspStorageType.setStatus('mandatory')
lpDS1DspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS1DspIndex.setStatus('mandatory')
lpDS1Audio = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 5))
lpDS1AudioRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 5, 1), )
if mibBuilder.loadTexts: lpDS1AudioRowStatusTable.setStatus('mandatory')
lpDS1AudioRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpDS1AudioIndex"))
if mibBuilder.loadTexts: lpDS1AudioRowStatusEntry.setStatus('mandatory')
lpDS1AudioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1AudioRowStatus.setStatus('mandatory')
lpDS1AudioComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1AudioComponentName.setStatus('mandatory')
lpDS1AudioStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpDS1AudioStorageType.setStatus('mandatory')
lpDS1AudioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 7, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpDS1AudioIndex.setStatus('mandatory')
lpE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8))
lpE1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 1), )
if mibBuilder.loadTexts: lpE1RowStatusTable.setStatus('mandatory')
lpE1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1RowStatusEntry.setStatus('mandatory')
lpE1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1RowStatus.setStatus('mandatory')
lpE1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ComponentName.setStatus('mandatory')
lpE1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1StorageType.setStatus('mandatory')
lpE1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: lpE1Index.setStatus('mandatory')
lpE1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10), )
if mibBuilder.loadTexts: lpE1ProvTable.setStatus('mandatory')
lpE1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1ProvEntry.setStatus('mandatory')
lpE1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6))).clone(namedValues=NamedValues(("ccs", 2), ("cas", 3), ("unframed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1LineType.setStatus('mandatory')
lpE1ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 3), ("srtsMode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ClockingSource.setStatus('mandatory')
lpE1Crc4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1Crc4Mode.setStatus('mandatory')
lpE1SendRaiOnAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1SendRaiOnAis.setStatus('mandatory')
lpE1RaiDeclareAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 20000), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1RaiDeclareAlarmTime.setStatus('mandatory')
lpE1RaiClearAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 20000), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1RaiClearAlarmTime.setStatus('mandatory')
lpE1CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 11), )
if mibBuilder.loadTexts: lpE1CidDataTable.setStatus('mandatory')
lpE1CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1CidDataEntry.setStatus('mandatory')
lpE1CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1CustomerIdentifier.setStatus('mandatory')
lpE1AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 12), )
if mibBuilder.loadTexts: lpE1AdminInfoTable.setStatus('mandatory')
lpE1AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1AdminInfoEntry.setStatus('mandatory')
lpE1Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1Vendor.setStatus('mandatory')
lpE1CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1CommentText.setStatus('mandatory')
lpE1IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 13), )
if mibBuilder.loadTexts: lpE1IfEntryTable.setStatus('mandatory')
lpE1IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1IfEntryEntry.setStatus('mandatory')
lpE1IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1IfAdminStatus.setStatus('mandatory')
lpE1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1IfIndex.setStatus('mandatory')
lpE1OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 14), )
if mibBuilder.loadTexts: lpE1OperStatusTable.setStatus('mandatory')
lpE1OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1OperStatusEntry.setStatus('mandatory')
lpE1SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1SnmpOperStatus.setStatus('mandatory')
lpE1StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15), )
if mibBuilder.loadTexts: lpE1StateTable.setStatus('mandatory')
lpE1StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1StateEntry.setStatus('mandatory')
lpE1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1AdminState.setStatus('mandatory')
lpE1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1OperationalState.setStatus('mandatory')
lpE1UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1UsageState.setStatus('mandatory')
lpE1AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1AvailabilityStatus.setStatus('mandatory')
lpE1ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ProceduralStatus.setStatus('mandatory')
lpE1ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ControlStatus.setStatus('mandatory')
lpE1AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1AlarmStatus.setStatus('mandatory')
lpE1StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1StandbyStatus.setStatus('mandatory')
lpE1UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1UnknownStatus.setStatus('mandatory')
lpE1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16), )
if mibBuilder.loadTexts: lpE1OperTable.setStatus('mandatory')
lpE1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1OperEntry.setStatus('mandatory')
lpE1LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1LosAlarm.setStatus('mandatory')
lpE1RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1RxAisAlarm.setStatus('mandatory')
lpE1LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1LofAlarm.setStatus('mandatory')
lpE1RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1RxRaiAlarm.setStatus('mandatory')
lpE1TxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TxAisAlarm.setStatus('mandatory')
lpE1TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TxRaiAlarm.setStatus('mandatory')
lpE1E1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 17), )
if mibBuilder.loadTexts: lpE1E1OperTable.setStatus('mandatory')
lpE1E1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1E1OperEntry.setStatus('mandatory')
lpE1MultifrmLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1MultifrmLofAlarm.setStatus('mandatory')
lpE1RxMultifrmRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1RxMultifrmRaiAlarm.setStatus('mandatory')
lpE1TxMultifrmRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TxMultifrmRaiAlarm.setStatus('mandatory')
lpE1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18), )
if mibBuilder.loadTexts: lpE1StatsTable.setStatus('mandatory')
lpE1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"))
if mibBuilder.loadTexts: lpE1StatsEntry.setStatus('mandatory')
lpE1RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1RunningTime.setStatus('mandatory')
lpE1ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ErrorFreeSec.setStatus('mandatory')
lpE1ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ErroredSec.setStatus('mandatory')
lpE1SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1SevErroredSec.setStatus('mandatory')
lpE1SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1SevErroredFrmSec.setStatus('mandatory')
lpE1UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1UnavailSec.setStatus('mandatory')
lpE1BpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1BpvErrors.setStatus('mandatory')
lpE1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1CrcErrors.setStatus('mandatory')
lpE1FrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1FrmErrors.setStatus('mandatory')
lpE1LosStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1LosStateChanges.setStatus('mandatory')
lpE1SlipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1SlipErrors.setStatus('mandatory')
lpE1Chan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2))
lpE1ChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 1), )
if mibBuilder.loadTexts: lpE1ChanRowStatusTable.setStatus('mandatory')
lpE1ChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanRowStatusEntry.setStatus('mandatory')
lpE1ChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanRowStatus.setStatus('mandatory')
lpE1ChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanComponentName.setStatus('mandatory')
lpE1ChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanStorageType.setStatus('mandatory')
lpE1ChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: lpE1ChanIndex.setStatus('mandatory')
lpE1ChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 10), )
if mibBuilder.loadTexts: lpE1ChanProvTable.setStatus('mandatory')
lpE1ChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanProvEntry.setStatus('mandatory')
lpE1ChanTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTimeslots.setStatus('mandatory')
lpE1ChanTimeslotDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n56k", 0), ("doNotOverride", 1))).clone('doNotOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTimeslotDataRate.setStatus('mandatory')
lpE1ChanApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanApplicationFramerName.setStatus('mandatory')
lpE1ChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 11), )
if mibBuilder.loadTexts: lpE1ChanCidDataTable.setStatus('mandatory')
lpE1ChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanCidDataEntry.setStatus('mandatory')
lpE1ChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanCustomerIdentifier.setStatus('mandatory')
lpE1ChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 12), )
if mibBuilder.loadTexts: lpE1ChanIfEntryTable.setStatus('mandatory')
lpE1ChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanIfEntryEntry.setStatus('mandatory')
lpE1ChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanIfAdminStatus.setStatus('mandatory')
lpE1ChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanIfIndex.setStatus('mandatory')
lpE1ChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 13), )
if mibBuilder.loadTexts: lpE1ChanOperStatusTable.setStatus('mandatory')
lpE1ChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanOperStatusEntry.setStatus('mandatory')
lpE1ChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanSnmpOperStatus.setStatus('mandatory')
lpE1ChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14), )
if mibBuilder.loadTexts: lpE1ChanStateTable.setStatus('mandatory')
lpE1ChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanStateEntry.setStatus('mandatory')
lpE1ChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanAdminState.setStatus('mandatory')
lpE1ChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanOperationalState.setStatus('mandatory')
lpE1ChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanUsageState.setStatus('mandatory')
lpE1ChanAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanAvailabilityStatus.setStatus('mandatory')
lpE1ChanProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanProceduralStatus.setStatus('mandatory')
lpE1ChanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanControlStatus.setStatus('mandatory')
lpE1ChanAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanAlarmStatus.setStatus('mandatory')
lpE1ChanStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanStandbyStatus.setStatus('mandatory')
lpE1ChanUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanUnknownStatus.setStatus('mandatory')
lpE1ChanOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 15), )
if mibBuilder.loadTexts: lpE1ChanOperTable.setStatus('mandatory')
lpE1ChanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanOperEntry.setStatus('mandatory')
lpE1ChanActualChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 15, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanActualChannelSpeed.setStatus('mandatory')
lpE1ChanAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 16), )
if mibBuilder.loadTexts: lpE1ChanAdminInfoTable.setStatus('mandatory')
lpE1ChanAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"))
if mibBuilder.loadTexts: lpE1ChanAdminInfoEntry.setStatus('mandatory')
lpE1ChanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 16, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanVendor.setStatus('mandatory')
lpE1ChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 16, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanCommentText.setStatus('mandatory')
lpE1ChanTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2))
lpE1ChanTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 1), )
if mibBuilder.loadTexts: lpE1ChanTestRowStatusTable.setStatus('mandatory')
lpE1ChanTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTestIndex"))
if mibBuilder.loadTexts: lpE1ChanTestRowStatusEntry.setStatus('mandatory')
lpE1ChanTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestRowStatus.setStatus('mandatory')
lpE1ChanTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestComponentName.setStatus('mandatory')
lpE1ChanTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestStorageType.setStatus('mandatory')
lpE1ChanTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE1ChanTestIndex.setStatus('mandatory')
lpE1ChanTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 10), )
if mibBuilder.loadTexts: lpE1ChanTestStateTable.setStatus('mandatory')
lpE1ChanTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTestIndex"))
if mibBuilder.loadTexts: lpE1ChanTestStateEntry.setStatus('mandatory')
lpE1ChanTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestAdminState.setStatus('mandatory')
lpE1ChanTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestOperationalState.setStatus('mandatory')
lpE1ChanTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestUsageState.setStatus('mandatory')
lpE1ChanTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11), )
if mibBuilder.loadTexts: lpE1ChanTestSetupTable.setStatus('mandatory')
lpE1ChanTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTestIndex"))
if mibBuilder.loadTexts: lpE1ChanTestSetupEntry.setStatus('mandatory')
lpE1ChanTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestPurpose.setStatus('mandatory')
lpE1ChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestType.setStatus('mandatory')
lpE1ChanTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestFrmSize.setStatus('mandatory')
lpE1ChanTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestFrmPatternType.setStatus('mandatory')
lpE1ChanTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestCustomizedPattern.setStatus('mandatory')
lpE1ChanTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestDataStartDelay.setStatus('mandatory')
lpE1ChanTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestDisplayInterval.setStatus('mandatory')
lpE1ChanTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTestDuration.setStatus('mandatory')
lpE1ChanTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12), )
if mibBuilder.loadTexts: lpE1ChanTestResultsTable.setStatus('mandatory')
lpE1ChanTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTestIndex"))
if mibBuilder.loadTexts: lpE1ChanTestResultsEntry.setStatus('mandatory')
lpE1ChanTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestElapsedTime.setStatus('mandatory')
lpE1ChanTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestTimeRemaining.setStatus('mandatory')
lpE1ChanTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestCauseOfTermination.setStatus('mandatory')
lpE1ChanTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestBitsTx.setStatus('mandatory')
lpE1ChanTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestBytesTx.setStatus('mandatory')
lpE1ChanTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestFrmTx.setStatus('mandatory')
lpE1ChanTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestBitsRx.setStatus('mandatory')
lpE1ChanTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestBytesRx.setStatus('mandatory')
lpE1ChanTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestFrmRx.setStatus('mandatory')
lpE1ChanTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestErroredFrmRx.setStatus('mandatory')
lpE1ChanTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTestBitErrorRate.setStatus('mandatory')
lpE1ChanCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3))
lpE1ChanCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 1), )
if mibBuilder.loadTexts: lpE1ChanCellRowStatusTable.setStatus('mandatory')
lpE1ChanCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanCellIndex"))
if mibBuilder.loadTexts: lpE1ChanCellRowStatusEntry.setStatus('mandatory')
lpE1ChanCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanCellRowStatus.setStatus('mandatory')
lpE1ChanCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellComponentName.setStatus('mandatory')
lpE1ChanCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellStorageType.setStatus('mandatory')
lpE1ChanCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE1ChanCellIndex.setStatus('mandatory')
lpE1ChanCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 10), )
if mibBuilder.loadTexts: lpE1ChanCellProvTable.setStatus('mandatory')
lpE1ChanCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanCellIndex"))
if mibBuilder.loadTexts: lpE1ChanCellProvEntry.setStatus('mandatory')
lpE1ChanCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanCellAlarmActDelay.setStatus('mandatory')
lpE1ChanCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanCellScrambleCellPayload.setStatus('mandatory')
lpE1ChanCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpE1ChanCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 11), )
if mibBuilder.loadTexts: lpE1ChanCellOperTable.setStatus('mandatory')
lpE1ChanCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanCellIndex"))
if mibBuilder.loadTexts: lpE1ChanCellOperEntry.setStatus('mandatory')
lpE1ChanCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellLcdAlarm.setStatus('mandatory')
lpE1ChanCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 12), )
if mibBuilder.loadTexts: lpE1ChanCellStatsTable.setStatus('mandatory')
lpE1ChanCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanCellIndex"))
if mibBuilder.loadTexts: lpE1ChanCellStatsEntry.setStatus('mandatory')
lpE1ChanCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellUncorrectableHecErrors.setStatus('mandatory')
lpE1ChanCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellSevErroredSec.setStatus('mandatory')
lpE1ChanCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellReceiveCellUtilization.setStatus('mandatory')
lpE1ChanCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellTransmitCellUtilization.setStatus('mandatory')
lpE1ChanCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanCellCorrectableHeaderErrors.setStatus('mandatory')
lpE1ChanTc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4))
lpE1ChanTcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 1), )
if mibBuilder.loadTexts: lpE1ChanTcRowStatusTable.setStatus('mandatory')
lpE1ChanTcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTcIndex"))
if mibBuilder.loadTexts: lpE1ChanTcRowStatusEntry.setStatus('mandatory')
lpE1ChanTcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTcRowStatus.setStatus('mandatory')
lpE1ChanTcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTcComponentName.setStatus('mandatory')
lpE1ChanTcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTcStorageType.setStatus('mandatory')
lpE1ChanTcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE1ChanTcIndex.setStatus('mandatory')
lpE1ChanTcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 10), )
if mibBuilder.loadTexts: lpE1ChanTcProvTable.setStatus('mandatory')
lpE1ChanTcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTcIndex"))
if mibBuilder.loadTexts: lpE1ChanTcProvEntry.setStatus('mandatory')
lpE1ChanTcReplacementData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 10, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTcReplacementData.setStatus('mandatory')
lpE1ChanTcSignalOneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTcSignalOneDuration.setStatus('mandatory')
lpE1ChanTcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 11), )
if mibBuilder.loadTexts: lpE1ChanTcOpTable.setStatus('mandatory')
lpE1ChanTcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTcIndex"))
if mibBuilder.loadTexts: lpE1ChanTcOpEntry.setStatus('mandatory')
lpE1ChanTcIngressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTcIngressConditioning.setStatus('mandatory')
lpE1ChanTcEgressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1ChanTcEgressConditioning.setStatus('mandatory')
lpE1ChanTcSigOneTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 398), )
if mibBuilder.loadTexts: lpE1ChanTcSigOneTable.setStatus('mandatory')
lpE1ChanTcSigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 398, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTcIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTcSigOneIndex"))
if mibBuilder.loadTexts: lpE1ChanTcSigOneEntry.setStatus('mandatory')
lpE1ChanTcSigOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 398, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: lpE1ChanTcSigOneIndex.setStatus('mandatory')
lpE1ChanTcSigOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 398, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTcSigOneValue.setStatus('mandatory')
lpE1ChanTcSigTwoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 399), )
if mibBuilder.loadTexts: lpE1ChanTcSigTwoTable.setStatus('mandatory')
lpE1ChanTcSigTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 399, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTcIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1ChanTcSigTwoIndex"))
if mibBuilder.loadTexts: lpE1ChanTcSigTwoEntry.setStatus('mandatory')
lpE1ChanTcSigTwoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 399, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: lpE1ChanTcSigTwoIndex.setStatus('mandatory')
lpE1ChanTcSigTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 2, 4, 399, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1ChanTcSigTwoValue.setStatus('mandatory')
lpE1Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3))
lpE1TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 1), )
if mibBuilder.loadTexts: lpE1TestRowStatusTable.setStatus('mandatory')
lpE1TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1TestIndex"))
if mibBuilder.loadTexts: lpE1TestRowStatusEntry.setStatus('mandatory')
lpE1TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestRowStatus.setStatus('mandatory')
lpE1TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestComponentName.setStatus('mandatory')
lpE1TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestStorageType.setStatus('mandatory')
lpE1TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE1TestIndex.setStatus('mandatory')
lpE1TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 10), )
if mibBuilder.loadTexts: lpE1TestStateTable.setStatus('mandatory')
lpE1TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1TestIndex"))
if mibBuilder.loadTexts: lpE1TestStateEntry.setStatus('mandatory')
lpE1TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestAdminState.setStatus('mandatory')
lpE1TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestOperationalState.setStatus('mandatory')
lpE1TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestUsageState.setStatus('mandatory')
lpE1TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11), )
if mibBuilder.loadTexts: lpE1TestSetupTable.setStatus('mandatory')
lpE1TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1TestIndex"))
if mibBuilder.loadTexts: lpE1TestSetupEntry.setStatus('mandatory')
lpE1TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestPurpose.setStatus('mandatory')
lpE1TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestType.setStatus('mandatory')
lpE1TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestFrmSize.setStatus('mandatory')
lpE1TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestFrmPatternType.setStatus('mandatory')
lpE1TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestCustomizedPattern.setStatus('mandatory')
lpE1TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestDataStartDelay.setStatus('mandatory')
lpE1TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestDisplayInterval.setStatus('mandatory')
lpE1TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpE1TestDuration.setStatus('mandatory')
lpE1TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12), )
if mibBuilder.loadTexts: lpE1TestResultsTable.setStatus('mandatory')
lpE1TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1TestIndex"))
if mibBuilder.loadTexts: lpE1TestResultsEntry.setStatus('mandatory')
lpE1TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestElapsedTime.setStatus('mandatory')
lpE1TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestTimeRemaining.setStatus('mandatory')
lpE1TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestCauseOfTermination.setStatus('mandatory')
lpE1TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestBitsTx.setStatus('mandatory')
lpE1TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestBytesTx.setStatus('mandatory')
lpE1TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestFrmTx.setStatus('mandatory')
lpE1TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestBitsRx.setStatus('mandatory')
lpE1TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestBytesRx.setStatus('mandatory')
lpE1TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestFrmRx.setStatus('mandatory')
lpE1TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestErroredFrmRx.setStatus('mandatory')
lpE1TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1TestBitErrorRate.setStatus('mandatory')
lpE1Dsp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 4))
lpE1DspRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 4, 1), )
if mibBuilder.loadTexts: lpE1DspRowStatusTable.setStatus('mandatory')
lpE1DspRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1DspIndex"))
if mibBuilder.loadTexts: lpE1DspRowStatusEntry.setStatus('mandatory')
lpE1DspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1DspRowStatus.setStatus('mandatory')
lpE1DspComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1DspComponentName.setStatus('mandatory')
lpE1DspStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1DspStorageType.setStatus('mandatory')
lpE1DspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE1DspIndex.setStatus('mandatory')
lpE1Audio = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 5))
lpE1AudioRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 5, 1), )
if mibBuilder.loadTexts: lpE1AudioRowStatusTable.setStatus('mandatory')
lpE1AudioRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpE1AudioIndex"))
if mibBuilder.loadTexts: lpE1AudioRowStatusEntry.setStatus('mandatory')
lpE1AudioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1AudioRowStatus.setStatus('mandatory')
lpE1AudioComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1AudioComponentName.setStatus('mandatory')
lpE1AudioStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpE1AudioStorageType.setStatus('mandatory')
lpE1AudioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 8, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpE1AudioIndex.setStatus('mandatory')
lpV35 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9))
lpV35RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 1), )
if mibBuilder.loadTexts: lpV35RowStatusTable.setStatus('mandatory')
lpV35RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35RowStatusEntry.setStatus('mandatory')
lpV35RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35RowStatus.setStatus('mandatory')
lpV35ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35ComponentName.setStatus('mandatory')
lpV35StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35StorageType.setStatus('mandatory')
lpV35Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: lpV35Index.setStatus('mandatory')
lpV35ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10), )
if mibBuilder.loadTexts: lpV35ProvTable.setStatus('mandatory')
lpV35ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35ProvEntry.setStatus('mandatory')
lpV35LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35LinkMode.setStatus('mandatory')
lpV35ReadyLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35ReadyLineState.setStatus('mandatory')
lpV35DataTransferLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35DataTransferLineState.setStatus('mandatory')
lpV35LineStatusTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 20000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35LineStatusTimeOut.setStatus('mandatory')
lpV35LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(9600, 3840000)).clone(192000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35LineSpeed.setStatus('mandatory')
lpV35ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("module", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35ClockingSource.setStatus('mandatory')
lpV35DteDataClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("fromDce", 0), ("fromDte", 2))).clone('fromDce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35DteDataClockSource.setStatus('mandatory')
lpV35ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 8), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35ApplicationFramerName.setStatus('mandatory')
lpV35EnableDynamicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35EnableDynamicSpeed.setStatus('mandatory')
lpV35CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 11), )
if mibBuilder.loadTexts: lpV35CidDataTable.setStatus('mandatory')
lpV35CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35CidDataEntry.setStatus('mandatory')
lpV35CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35CustomerIdentifier.setStatus('mandatory')
lpV35AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 12), )
if mibBuilder.loadTexts: lpV35AdminInfoTable.setStatus('mandatory')
lpV35AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35AdminInfoEntry.setStatus('mandatory')
lpV35Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35Vendor.setStatus('mandatory')
lpV35CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35CommentText.setStatus('mandatory')
lpV35IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 13), )
if mibBuilder.loadTexts: lpV35IfEntryTable.setStatus('mandatory')
lpV35IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35IfEntryEntry.setStatus('mandatory')
lpV35IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35IfAdminStatus.setStatus('mandatory')
lpV35IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35IfIndex.setStatus('mandatory')
lpV35OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 14), )
if mibBuilder.loadTexts: lpV35OperStatusTable.setStatus('mandatory')
lpV35OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35OperStatusEntry.setStatus('mandatory')
lpV35SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35SnmpOperStatus.setStatus('mandatory')
lpV35StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15), )
if mibBuilder.loadTexts: lpV35StateTable.setStatus('mandatory')
lpV35StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35StateEntry.setStatus('mandatory')
lpV35AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35AdminState.setStatus('mandatory')
lpV35OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35OperationalState.setStatus('mandatory')
lpV35UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35UsageState.setStatus('mandatory')
lpV35AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35AvailabilityStatus.setStatus('mandatory')
lpV35ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35ProceduralStatus.setStatus('mandatory')
lpV35ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35ControlStatus.setStatus('mandatory')
lpV35AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35AlarmStatus.setStatus('mandatory')
lpV35StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35StandbyStatus.setStatus('mandatory')
lpV35UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35UnknownStatus.setStatus('mandatory')
lpV35OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 16), )
if mibBuilder.loadTexts: lpV35OperTable.setStatus('mandatory')
lpV35OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"))
if mibBuilder.loadTexts: lpV35OperEntry.setStatus('mandatory')
lpV35ActualLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35ActualLinkMode.setStatus('mandatory')
lpV35LineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35LineState.setStatus('mandatory')
lpV35ActualTxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 16, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35ActualTxLineSpeed.setStatus('mandatory')
lpV35ActualRxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 16, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35ActualRxLineSpeed.setStatus('mandatory')
lpV35DataXferStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35DataXferStateChanges.setStatus('mandatory')
lpV35Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2))
lpV35TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 1), )
if mibBuilder.loadTexts: lpV35TestRowStatusTable.setStatus('mandatory')
lpV35TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35TestIndex"))
if mibBuilder.loadTexts: lpV35TestRowStatusEntry.setStatus('mandatory')
lpV35TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestRowStatus.setStatus('mandatory')
lpV35TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestComponentName.setStatus('mandatory')
lpV35TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestStorageType.setStatus('mandatory')
lpV35TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpV35TestIndex.setStatus('mandatory')
lpV35TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 10), )
if mibBuilder.loadTexts: lpV35TestStateTable.setStatus('mandatory')
lpV35TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35TestIndex"))
if mibBuilder.loadTexts: lpV35TestStateEntry.setStatus('mandatory')
lpV35TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestAdminState.setStatus('mandatory')
lpV35TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestOperationalState.setStatus('mandatory')
lpV35TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestUsageState.setStatus('mandatory')
lpV35TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11), )
if mibBuilder.loadTexts: lpV35TestSetupTable.setStatus('mandatory')
lpV35TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35TestIndex"))
if mibBuilder.loadTexts: lpV35TestSetupEntry.setStatus('mandatory')
lpV35TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestPurpose.setStatus('mandatory')
lpV35TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestType.setStatus('mandatory')
lpV35TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestFrmSize.setStatus('mandatory')
lpV35TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestFrmPatternType.setStatus('mandatory')
lpV35TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestCustomizedPattern.setStatus('mandatory')
lpV35TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestDataStartDelay.setStatus('mandatory')
lpV35TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestDisplayInterval.setStatus('mandatory')
lpV35TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpV35TestDuration.setStatus('mandatory')
lpV35TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12), )
if mibBuilder.loadTexts: lpV35TestResultsTable.setStatus('mandatory')
lpV35TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpV35TestIndex"))
if mibBuilder.loadTexts: lpV35TestResultsEntry.setStatus('mandatory')
lpV35TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestElapsedTime.setStatus('mandatory')
lpV35TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestTimeRemaining.setStatus('mandatory')
lpV35TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestCauseOfTermination.setStatus('mandatory')
lpV35TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestBitsTx.setStatus('mandatory')
lpV35TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestBytesTx.setStatus('mandatory')
lpV35TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestFrmTx.setStatus('mandatory')
lpV35TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestBitsRx.setStatus('mandatory')
lpV35TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestBytesRx.setStatus('mandatory')
lpV35TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestFrmRx.setStatus('mandatory')
lpV35TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestErroredFrmRx.setStatus('mandatory')
lpV35TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 9, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpV35TestBitErrorRate.setStatus('mandatory')
lpX21 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10))
lpX21RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 1), )
if mibBuilder.loadTexts: lpX21RowStatusTable.setStatus('mandatory')
lpX21RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21RowStatusEntry.setStatus('mandatory')
lpX21RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21RowStatus.setStatus('mandatory')
lpX21ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21ComponentName.setStatus('mandatory')
lpX21StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21StorageType.setStatus('mandatory')
lpX21Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: lpX21Index.setStatus('mandatory')
lpX21ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10), )
if mibBuilder.loadTexts: lpX21ProvTable.setStatus('mandatory')
lpX21ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21ProvEntry.setStatus('mandatory')
lpX21LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21LinkMode.setStatus('mandatory')
lpX21ReadyLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21ReadyLineState.setStatus('mandatory')
lpX21DataTransferLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21DataTransferLineState.setStatus('mandatory')
lpX21LineStatusTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 20000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21LineStatusTimeOut.setStatus('mandatory')
lpX21LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(9600, 7680000)).clone(192000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21LineSpeed.setStatus('mandatory')
lpX21ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("module", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21ClockingSource.setStatus('mandatory')
lpX21DteDataClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("fromDce", 0), ("fromDte", 2))).clone('fromDce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21DteDataClockSource.setStatus('mandatory')
lpX21LineTerminationRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21LineTerminationRequired.setStatus('mandatory')
lpX21ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 9), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21ApplicationFramerName.setStatus('mandatory')
lpX21EnableDynamicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21EnableDynamicSpeed.setStatus('mandatory')
lpX21CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 11), )
if mibBuilder.loadTexts: lpX21CidDataTable.setStatus('mandatory')
lpX21CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21CidDataEntry.setStatus('mandatory')
lpX21CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21CustomerIdentifier.setStatus('mandatory')
lpX21AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 12), )
if mibBuilder.loadTexts: lpX21AdminInfoTable.setStatus('mandatory')
lpX21AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21AdminInfoEntry.setStatus('mandatory')
lpX21Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21Vendor.setStatus('mandatory')
lpX21CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21CommentText.setStatus('mandatory')
lpX21IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 13), )
if mibBuilder.loadTexts: lpX21IfEntryTable.setStatus('mandatory')
lpX21IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21IfEntryEntry.setStatus('mandatory')
lpX21IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21IfAdminStatus.setStatus('mandatory')
lpX21IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21IfIndex.setStatus('mandatory')
lpX21OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 14), )
if mibBuilder.loadTexts: lpX21OperStatusTable.setStatus('mandatory')
lpX21OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21OperStatusEntry.setStatus('mandatory')
lpX21SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21SnmpOperStatus.setStatus('mandatory')
lpX21StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15), )
if mibBuilder.loadTexts: lpX21StateTable.setStatus('mandatory')
lpX21StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21StateEntry.setStatus('mandatory')
lpX21AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21AdminState.setStatus('mandatory')
lpX21OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21OperationalState.setStatus('mandatory')
lpX21UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21UsageState.setStatus('mandatory')
lpX21AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21AvailabilityStatus.setStatus('mandatory')
lpX21ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21ProceduralStatus.setStatus('mandatory')
lpX21ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21ControlStatus.setStatus('mandatory')
lpX21AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21AlarmStatus.setStatus('mandatory')
lpX21StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21StandbyStatus.setStatus('mandatory')
lpX21UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21UnknownStatus.setStatus('mandatory')
lpX21OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 16), )
if mibBuilder.loadTexts: lpX21OperTable.setStatus('mandatory')
lpX21OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"))
if mibBuilder.loadTexts: lpX21OperEntry.setStatus('mandatory')
lpX21ActualLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21ActualLinkMode.setStatus('mandatory')
lpX21LineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21LineState.setStatus('mandatory')
lpX21ActualTxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 16, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21ActualTxLineSpeed.setStatus('mandatory')
lpX21ActualRxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 16, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21ActualRxLineSpeed.setStatus('mandatory')
lpX21DataXferStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21DataXferStateChanges.setStatus('mandatory')
lpX21Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2))
lpX21TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 1), )
if mibBuilder.loadTexts: lpX21TestRowStatusTable.setStatus('mandatory')
lpX21TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21TestIndex"))
if mibBuilder.loadTexts: lpX21TestRowStatusEntry.setStatus('mandatory')
lpX21TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestRowStatus.setStatus('mandatory')
lpX21TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestComponentName.setStatus('mandatory')
lpX21TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestStorageType.setStatus('mandatory')
lpX21TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpX21TestIndex.setStatus('mandatory')
lpX21TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 10), )
if mibBuilder.loadTexts: lpX21TestStateTable.setStatus('mandatory')
lpX21TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21TestIndex"))
if mibBuilder.loadTexts: lpX21TestStateEntry.setStatus('mandatory')
lpX21TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestAdminState.setStatus('mandatory')
lpX21TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestOperationalState.setStatus('mandatory')
lpX21TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestUsageState.setStatus('mandatory')
lpX21TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11), )
if mibBuilder.loadTexts: lpX21TestSetupTable.setStatus('mandatory')
lpX21TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21TestIndex"))
if mibBuilder.loadTexts: lpX21TestSetupEntry.setStatus('mandatory')
lpX21TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestPurpose.setStatus('mandatory')
lpX21TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestType.setStatus('mandatory')
lpX21TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestFrmSize.setStatus('mandatory')
lpX21TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestFrmPatternType.setStatus('mandatory')
lpX21TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestCustomizedPattern.setStatus('mandatory')
lpX21TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestDataStartDelay.setStatus('mandatory')
lpX21TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestDisplayInterval.setStatus('mandatory')
lpX21TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpX21TestDuration.setStatus('mandatory')
lpX21TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12), )
if mibBuilder.loadTexts: lpX21TestResultsTable.setStatus('mandatory')
lpX21TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpX21TestIndex"))
if mibBuilder.loadTexts: lpX21TestResultsEntry.setStatus('mandatory')
lpX21TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestElapsedTime.setStatus('mandatory')
lpX21TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestTimeRemaining.setStatus('mandatory')
lpX21TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestCauseOfTermination.setStatus('mandatory')
lpX21TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestBitsTx.setStatus('mandatory')
lpX21TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestBytesTx.setStatus('mandatory')
lpX21TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestFrmTx.setStatus('mandatory')
lpX21TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestBitsRx.setStatus('mandatory')
lpX21TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestBytesRx.setStatus('mandatory')
lpX21TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestFrmRx.setStatus('mandatory')
lpX21TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestErroredFrmRx.setStatus('mandatory')
lpX21TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 10, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpX21TestBitErrorRate.setStatus('mandatory')
lpSonet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14))
lpSonetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 1), )
if mibBuilder.loadTexts: lpSonetRowStatusTable.setStatus('mandatory')
lpSonetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetRowStatusEntry.setStatus('mandatory')
lpSonetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetRowStatus.setStatus('mandatory')
lpSonetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetComponentName.setStatus('mandatory')
lpSonetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetStorageType.setStatus('mandatory')
lpSonetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: lpSonetIndex.setStatus('mandatory')
lpSonetProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 10), )
if mibBuilder.loadTexts: lpSonetProvTable.setStatus('mandatory')
lpSonetProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetProvEntry.setStatus('mandatory')
lpSonetClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetClockingSource.setStatus('mandatory')
lpSonetCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 11), )
if mibBuilder.loadTexts: lpSonetCidDataTable.setStatus('mandatory')
lpSonetCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetCidDataEntry.setStatus('mandatory')
lpSonetCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetCustomerIdentifier.setStatus('mandatory')
lpSonetAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 12), )
if mibBuilder.loadTexts: lpSonetAdminInfoTable.setStatus('mandatory')
lpSonetAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetAdminInfoEntry.setStatus('mandatory')
lpSonetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetVendor.setStatus('mandatory')
lpSonetCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetCommentText.setStatus('mandatory')
lpSonetIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 13), )
if mibBuilder.loadTexts: lpSonetIfEntryTable.setStatus('mandatory')
lpSonetIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetIfEntryEntry.setStatus('mandatory')
lpSonetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetIfAdminStatus.setStatus('mandatory')
lpSonetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetIfIndex.setStatus('mandatory')
lpSonetOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 14), )
if mibBuilder.loadTexts: lpSonetOperStatusTable.setStatus('mandatory')
lpSonetOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetOperStatusEntry.setStatus('mandatory')
lpSonetSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetSnmpOperStatus.setStatus('mandatory')
lpSonetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15), )
if mibBuilder.loadTexts: lpSonetStateTable.setStatus('mandatory')
lpSonetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetStateEntry.setStatus('mandatory')
lpSonetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetAdminState.setStatus('mandatory')
lpSonetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetOperationalState.setStatus('mandatory')
lpSonetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetUsageState.setStatus('mandatory')
lpSonetAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetAvailabilityStatus.setStatus('mandatory')
lpSonetProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetProceduralStatus.setStatus('mandatory')
lpSonetControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetControlStatus.setStatus('mandatory')
lpSonetAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetAlarmStatus.setStatus('mandatory')
lpSonetStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetStandbyStatus.setStatus('mandatory')
lpSonetUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetUnknownStatus.setStatus('mandatory')
lpSonetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16), )
if mibBuilder.loadTexts: lpSonetOperTable.setStatus('mandatory')
lpSonetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetOperEntry.setStatus('mandatory')
lpSonetLosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLosAlarm.setStatus('mandatory')
lpSonetLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLofAlarm.setStatus('mandatory')
lpSonetRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetRxAisAlarm.setStatus('mandatory')
lpSonetRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetRxRfiAlarm.setStatus('mandatory')
lpSonetTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTxAis.setStatus('mandatory')
lpSonetTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTxRdi.setStatus('mandatory')
lpSonetUnusableTxClockRefAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetUnusableTxClockRefAlarm.setStatus('mandatory')
lpSonetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17), )
if mibBuilder.loadTexts: lpSonetStatsTable.setStatus('mandatory')
lpSonetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"))
if mibBuilder.loadTexts: lpSonetStatsEntry.setStatus('mandatory')
lpSonetRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetRunningTime.setStatus('mandatory')
lpSonetErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetErrorFreeSec.setStatus('mandatory')
lpSonetSectCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetSectCodeViolations.setStatus('mandatory')
lpSonetSectErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetSectErroredSec.setStatus('mandatory')
lpSonetSectSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetSectSevErroredSec.setStatus('mandatory')
lpSonetSectLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetSectLosSec.setStatus('mandatory')
lpSonetSectSevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetSectSevErroredFrmSec.setStatus('mandatory')
lpSonetSectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetSectFailures.setStatus('mandatory')
lpSonetLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLineCodeViolations.setStatus('mandatory')
lpSonetLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLineErroredSec.setStatus('mandatory')
lpSonetLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLineSevErroredSec.setStatus('mandatory')
lpSonetLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLineAisSec.setStatus('mandatory')
lpSonetLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLineUnavailSec.setStatus('mandatory')
lpSonetLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetLineFailures.setStatus('mandatory')
lpSonetFarEndLineErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetFarEndLineErrorFreeSec.setStatus('mandatory')
lpSonetFarEndLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetFarEndLineCodeViolations.setStatus('mandatory')
lpSonetFarEndLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetFarEndLineErroredSec.setStatus('mandatory')
lpSonetFarEndLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetFarEndLineSevErroredSec.setStatus('mandatory')
lpSonetFarEndLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetFarEndLineAisSec.setStatus('mandatory')
lpSonetFarEndLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetFarEndLineUnavailSec.setStatus('mandatory')
lpSonetFarEndLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetFarEndLineFailures.setStatus('mandatory')
lpSonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2))
lpSonetPathRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 1), )
if mibBuilder.loadTexts: lpSonetPathRowStatusTable.setStatus('mandatory')
lpSonetPathRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathRowStatusEntry.setStatus('mandatory')
lpSonetPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetPathRowStatus.setStatus('mandatory')
lpSonetPathComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathComponentName.setStatus('mandatory')
lpSonetPathStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathStorageType.setStatus('mandatory')
lpSonetPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: lpSonetPathIndex.setStatus('mandatory')
lpSonetPathProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 10), )
if mibBuilder.loadTexts: lpSonetPathProvTable.setStatus('mandatory')
lpSonetPathProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathProvEntry.setStatus('mandatory')
lpSonetPathApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetPathApplicationFramerName.setStatus('mandatory')
lpSonetPathCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 11), )
if mibBuilder.loadTexts: lpSonetPathCidDataTable.setStatus('mandatory')
lpSonetPathCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathCidDataEntry.setStatus('mandatory')
lpSonetPathCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetPathCustomerIdentifier.setStatus('mandatory')
lpSonetPathStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12), )
if mibBuilder.loadTexts: lpSonetPathStateTable.setStatus('mandatory')
lpSonetPathStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathStateEntry.setStatus('mandatory')
lpSonetPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathAdminState.setStatus('mandatory')
lpSonetPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathOperationalState.setStatus('mandatory')
lpSonetPathUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathUsageState.setStatus('mandatory')
lpSonetPathAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathAvailabilityStatus.setStatus('mandatory')
lpSonetPathProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathProceduralStatus.setStatus('mandatory')
lpSonetPathControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathControlStatus.setStatus('mandatory')
lpSonetPathAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathAlarmStatus.setStatus('mandatory')
lpSonetPathStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathStandbyStatus.setStatus('mandatory')
lpSonetPathUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathUnknownStatus.setStatus('mandatory')
lpSonetPathIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 13), )
if mibBuilder.loadTexts: lpSonetPathIfEntryTable.setStatus('mandatory')
lpSonetPathIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathIfEntryEntry.setStatus('mandatory')
lpSonetPathIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetPathIfAdminStatus.setStatus('mandatory')
lpSonetPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathIfIndex.setStatus('mandatory')
lpSonetPathOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 14), )
if mibBuilder.loadTexts: lpSonetPathOperStatusTable.setStatus('mandatory')
lpSonetPathOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathOperStatusEntry.setStatus('mandatory')
lpSonetPathSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathSnmpOperStatus.setStatus('mandatory')
lpSonetPathOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15), )
if mibBuilder.loadTexts: lpSonetPathOperTable.setStatus('mandatory')
lpSonetPathOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathOperEntry.setStatus('mandatory')
lpSonetPathLopAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathLopAlarm.setStatus('mandatory')
lpSonetPathRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathRxAisAlarm.setStatus('mandatory')
lpSonetPathRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathRxRfiAlarm.setStatus('mandatory')
lpSonetPathSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathSignalLabelMismatch.setStatus('mandatory')
lpSonetPathTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathTxAis.setStatus('mandatory')
lpSonetPathTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathTxRdi.setStatus('mandatory')
lpSonetPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16), )
if mibBuilder.loadTexts: lpSonetPathStatsTable.setStatus('mandatory')
lpSonetPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"))
if mibBuilder.loadTexts: lpSonetPathStatsEntry.setStatus('mandatory')
lpSonetPathPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathPathErrorFreeSec.setStatus('mandatory')
lpSonetPathPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathPathCodeViolations.setStatus('mandatory')
lpSonetPathPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathPathErroredSec.setStatus('mandatory')
lpSonetPathPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathPathSevErroredSec.setStatus('mandatory')
lpSonetPathPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathPathAisLopSec.setStatus('mandatory')
lpSonetPathPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathPathUnavailSec.setStatus('mandatory')
lpSonetPathPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathPathFailures.setStatus('mandatory')
lpSonetPathFarEndPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathFarEndPathErrorFreeSec.setStatus('mandatory')
lpSonetPathFarEndPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathFarEndPathCodeViolations.setStatus('mandatory')
lpSonetPathFarEndPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathFarEndPathErroredSec.setStatus('mandatory')
lpSonetPathFarEndPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathFarEndPathSevErroredSec.setStatus('mandatory')
lpSonetPathFarEndPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathFarEndPathAisLopSec.setStatus('mandatory')
lpSonetPathFarEndPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathFarEndPathUnavailSec.setStatus('mandatory')
lpSonetPathFarEndPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathFarEndPathFailures.setStatus('mandatory')
lpSonetPathCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2))
lpSonetPathCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 1), )
if mibBuilder.loadTexts: lpSonetPathCellRowStatusTable.setStatus('mandatory')
lpSonetPathCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathCellIndex"))
if mibBuilder.loadTexts: lpSonetPathCellRowStatusEntry.setStatus('mandatory')
lpSonetPathCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellRowStatus.setStatus('mandatory')
lpSonetPathCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellComponentName.setStatus('mandatory')
lpSonetPathCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellStorageType.setStatus('mandatory')
lpSonetPathCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpSonetPathCellIndex.setStatus('mandatory')
lpSonetPathCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 10), )
if mibBuilder.loadTexts: lpSonetPathCellProvTable.setStatus('mandatory')
lpSonetPathCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathCellIndex"))
if mibBuilder.loadTexts: lpSonetPathCellProvEntry.setStatus('mandatory')
lpSonetPathCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetPathCellAlarmActDelay.setStatus('mandatory')
lpSonetPathCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetPathCellScrambleCellPayload.setStatus('mandatory')
lpSonetPathCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetPathCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpSonetPathCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 11), )
if mibBuilder.loadTexts: lpSonetPathCellOperTable.setStatus('mandatory')
lpSonetPathCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathCellIndex"))
if mibBuilder.loadTexts: lpSonetPathCellOperEntry.setStatus('mandatory')
lpSonetPathCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellLcdAlarm.setStatus('mandatory')
lpSonetPathCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 12), )
if mibBuilder.loadTexts: lpSonetPathCellStatsTable.setStatus('mandatory')
lpSonetPathCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetPathCellIndex"))
if mibBuilder.loadTexts: lpSonetPathCellStatsEntry.setStatus('mandatory')
lpSonetPathCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellUncorrectableHecErrors.setStatus('mandatory')
lpSonetPathCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellSevErroredSec.setStatus('mandatory')
lpSonetPathCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellReceiveCellUtilization.setStatus('mandatory')
lpSonetPathCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellTransmitCellUtilization.setStatus('mandatory')
lpSonetPathCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 2, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetPathCellCorrectableHeaderErrors.setStatus('mandatory')
lpSonetTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3))
lpSonetTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 1), )
if mibBuilder.loadTexts: lpSonetTestRowStatusTable.setStatus('mandatory')
lpSonetTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetTestIndex"))
if mibBuilder.loadTexts: lpSonetTestRowStatusEntry.setStatus('mandatory')
lpSonetTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestRowStatus.setStatus('mandatory')
lpSonetTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestComponentName.setStatus('mandatory')
lpSonetTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestStorageType.setStatus('mandatory')
lpSonetTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpSonetTestIndex.setStatus('mandatory')
lpSonetTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 10), )
if mibBuilder.loadTexts: lpSonetTestStateTable.setStatus('mandatory')
lpSonetTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetTestIndex"))
if mibBuilder.loadTexts: lpSonetTestStateEntry.setStatus('mandatory')
lpSonetTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestAdminState.setStatus('mandatory')
lpSonetTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestOperationalState.setStatus('mandatory')
lpSonetTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestUsageState.setStatus('mandatory')
lpSonetTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11), )
if mibBuilder.loadTexts: lpSonetTestSetupTable.setStatus('mandatory')
lpSonetTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetTestIndex"))
if mibBuilder.loadTexts: lpSonetTestSetupEntry.setStatus('mandatory')
lpSonetTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestPurpose.setStatus('mandatory')
lpSonetTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestType.setStatus('mandatory')
lpSonetTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestFrmSize.setStatus('mandatory')
lpSonetTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestFrmPatternType.setStatus('mandatory')
lpSonetTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestCustomizedPattern.setStatus('mandatory')
lpSonetTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestDataStartDelay.setStatus('mandatory')
lpSonetTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestDisplayInterval.setStatus('mandatory')
lpSonetTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSonetTestDuration.setStatus('mandatory')
lpSonetTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12), )
if mibBuilder.loadTexts: lpSonetTestResultsTable.setStatus('mandatory')
lpSonetTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSonetTestIndex"))
if mibBuilder.loadTexts: lpSonetTestResultsEntry.setStatus('mandatory')
lpSonetTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestElapsedTime.setStatus('mandatory')
lpSonetTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestTimeRemaining.setStatus('mandatory')
lpSonetTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestCauseOfTermination.setStatus('mandatory')
lpSonetTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestBitsTx.setStatus('mandatory')
lpSonetTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestBytesTx.setStatus('mandatory')
lpSonetTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestFrmTx.setStatus('mandatory')
lpSonetTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestBitsRx.setStatus('mandatory')
lpSonetTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestBytesRx.setStatus('mandatory')
lpSonetTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestFrmRx.setStatus('mandatory')
lpSonetTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestErroredFrmRx.setStatus('mandatory')
lpSonetTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 14, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSonetTestBitErrorRate.setStatus('mandatory')
lpSdh = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15))
lpSdhRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 1), )
if mibBuilder.loadTexts: lpSdhRowStatusTable.setStatus('mandatory')
lpSdhRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhRowStatusEntry.setStatus('mandatory')
lpSdhRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhRowStatus.setStatus('mandatory')
lpSdhComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhComponentName.setStatus('mandatory')
lpSdhStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhStorageType.setStatus('mandatory')
lpSdhIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: lpSdhIndex.setStatus('mandatory')
lpSdhProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 10), )
if mibBuilder.loadTexts: lpSdhProvTable.setStatus('mandatory')
lpSdhProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhProvEntry.setStatus('mandatory')
lpSdhClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhClockingSource.setStatus('mandatory')
lpSdhCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 11), )
if mibBuilder.loadTexts: lpSdhCidDataTable.setStatus('mandatory')
lpSdhCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhCidDataEntry.setStatus('mandatory')
lpSdhCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhCustomerIdentifier.setStatus('mandatory')
lpSdhAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 12), )
if mibBuilder.loadTexts: lpSdhAdminInfoTable.setStatus('mandatory')
lpSdhAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhAdminInfoEntry.setStatus('mandatory')
lpSdhVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhVendor.setStatus('mandatory')
lpSdhCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhCommentText.setStatus('mandatory')
lpSdhIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 13), )
if mibBuilder.loadTexts: lpSdhIfEntryTable.setStatus('mandatory')
lpSdhIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhIfEntryEntry.setStatus('mandatory')
lpSdhIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhIfAdminStatus.setStatus('mandatory')
lpSdhIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhIfIndex.setStatus('mandatory')
lpSdhOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 14), )
if mibBuilder.loadTexts: lpSdhOperStatusTable.setStatus('mandatory')
lpSdhOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhOperStatusEntry.setStatus('mandatory')
lpSdhSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhSnmpOperStatus.setStatus('mandatory')
lpSdhStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15), )
if mibBuilder.loadTexts: lpSdhStateTable.setStatus('mandatory')
lpSdhStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhStateEntry.setStatus('mandatory')
lpSdhAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhAdminState.setStatus('mandatory')
lpSdhOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhOperationalState.setStatus('mandatory')
lpSdhUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhUsageState.setStatus('mandatory')
lpSdhAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhAvailabilityStatus.setStatus('mandatory')
lpSdhProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhProceduralStatus.setStatus('mandatory')
lpSdhControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhControlStatus.setStatus('mandatory')
lpSdhAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhAlarmStatus.setStatus('mandatory')
lpSdhStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhStandbyStatus.setStatus('mandatory')
lpSdhUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhUnknownStatus.setStatus('mandatory')
lpSdhOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16), )
if mibBuilder.loadTexts: lpSdhOperTable.setStatus('mandatory')
lpSdhOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhOperEntry.setStatus('mandatory')
lpSdhLosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLosAlarm.setStatus('mandatory')
lpSdhLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLofAlarm.setStatus('mandatory')
lpSdhRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhRxAisAlarm.setStatus('mandatory')
lpSdhRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhRxRfiAlarm.setStatus('mandatory')
lpSdhTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTxAis.setStatus('mandatory')
lpSdhTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTxRdi.setStatus('mandatory')
lpSdhUnusableTxClockRefAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhUnusableTxClockRefAlarm.setStatus('mandatory')
lpSdhStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17), )
if mibBuilder.loadTexts: lpSdhStatsTable.setStatus('mandatory')
lpSdhStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"))
if mibBuilder.loadTexts: lpSdhStatsEntry.setStatus('mandatory')
lpSdhRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhRunningTime.setStatus('mandatory')
lpSdhErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhErrorFreeSec.setStatus('mandatory')
lpSdhSectCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhSectCodeViolations.setStatus('mandatory')
lpSdhSectErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhSectErroredSec.setStatus('mandatory')
lpSdhSectSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhSectSevErroredSec.setStatus('mandatory')
lpSdhSectLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhSectLosSec.setStatus('mandatory')
lpSdhSectSevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhSectSevErroredFrmSec.setStatus('mandatory')
lpSdhSectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhSectFailures.setStatus('mandatory')
lpSdhLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLineCodeViolations.setStatus('mandatory')
lpSdhLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLineErroredSec.setStatus('mandatory')
lpSdhLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLineSevErroredSec.setStatus('mandatory')
lpSdhLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLineAisSec.setStatus('mandatory')
lpSdhLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLineUnavailSec.setStatus('mandatory')
lpSdhLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhLineFailures.setStatus('mandatory')
lpSdhFarEndLineErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhFarEndLineErrorFreeSec.setStatus('mandatory')
lpSdhFarEndLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhFarEndLineCodeViolations.setStatus('mandatory')
lpSdhFarEndLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhFarEndLineErroredSec.setStatus('mandatory')
lpSdhFarEndLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhFarEndLineSevErroredSec.setStatus('mandatory')
lpSdhFarEndLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhFarEndLineAisSec.setStatus('mandatory')
lpSdhFarEndLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhFarEndLineUnavailSec.setStatus('mandatory')
lpSdhFarEndLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhFarEndLineFailures.setStatus('mandatory')
lpSdhPath = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2))
lpSdhPathRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 1), )
if mibBuilder.loadTexts: lpSdhPathRowStatusTable.setStatus('mandatory')
lpSdhPathRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathRowStatusEntry.setStatus('mandatory')
lpSdhPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhPathRowStatus.setStatus('mandatory')
lpSdhPathComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathComponentName.setStatus('mandatory')
lpSdhPathStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathStorageType.setStatus('mandatory')
lpSdhPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: lpSdhPathIndex.setStatus('mandatory')
lpSdhPathProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 10), )
if mibBuilder.loadTexts: lpSdhPathProvTable.setStatus('mandatory')
lpSdhPathProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathProvEntry.setStatus('mandatory')
lpSdhPathApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhPathApplicationFramerName.setStatus('mandatory')
lpSdhPathCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 11), )
if mibBuilder.loadTexts: lpSdhPathCidDataTable.setStatus('mandatory')
lpSdhPathCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathCidDataEntry.setStatus('mandatory')
lpSdhPathCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhPathCustomerIdentifier.setStatus('mandatory')
lpSdhPathStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12), )
if mibBuilder.loadTexts: lpSdhPathStateTable.setStatus('mandatory')
lpSdhPathStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathStateEntry.setStatus('mandatory')
lpSdhPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathAdminState.setStatus('mandatory')
lpSdhPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathOperationalState.setStatus('mandatory')
lpSdhPathUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathUsageState.setStatus('mandatory')
lpSdhPathAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathAvailabilityStatus.setStatus('mandatory')
lpSdhPathProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathProceduralStatus.setStatus('mandatory')
lpSdhPathControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathControlStatus.setStatus('mandatory')
lpSdhPathAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathAlarmStatus.setStatus('mandatory')
lpSdhPathStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathStandbyStatus.setStatus('mandatory')
lpSdhPathUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathUnknownStatus.setStatus('mandatory')
lpSdhPathIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 13), )
if mibBuilder.loadTexts: lpSdhPathIfEntryTable.setStatus('mandatory')
lpSdhPathIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathIfEntryEntry.setStatus('mandatory')
lpSdhPathIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhPathIfAdminStatus.setStatus('mandatory')
lpSdhPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathIfIndex.setStatus('mandatory')
lpSdhPathOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 14), )
if mibBuilder.loadTexts: lpSdhPathOperStatusTable.setStatus('mandatory')
lpSdhPathOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathOperStatusEntry.setStatus('mandatory')
lpSdhPathSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathSnmpOperStatus.setStatus('mandatory')
lpSdhPathOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15), )
if mibBuilder.loadTexts: lpSdhPathOperTable.setStatus('mandatory')
lpSdhPathOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathOperEntry.setStatus('mandatory')
lpSdhPathLopAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathLopAlarm.setStatus('mandatory')
lpSdhPathRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathRxAisAlarm.setStatus('mandatory')
lpSdhPathRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathRxRfiAlarm.setStatus('mandatory')
lpSdhPathSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathSignalLabelMismatch.setStatus('mandatory')
lpSdhPathTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathTxAis.setStatus('mandatory')
lpSdhPathTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathTxRdi.setStatus('mandatory')
lpSdhPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16), )
if mibBuilder.loadTexts: lpSdhPathStatsTable.setStatus('mandatory')
lpSdhPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"))
if mibBuilder.loadTexts: lpSdhPathStatsEntry.setStatus('mandatory')
lpSdhPathPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathPathErrorFreeSec.setStatus('mandatory')
lpSdhPathPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathPathCodeViolations.setStatus('mandatory')
lpSdhPathPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathPathErroredSec.setStatus('mandatory')
lpSdhPathPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathPathSevErroredSec.setStatus('mandatory')
lpSdhPathPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathPathAisLopSec.setStatus('mandatory')
lpSdhPathPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathPathUnavailSec.setStatus('mandatory')
lpSdhPathPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathPathFailures.setStatus('mandatory')
lpSdhPathFarEndPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathFarEndPathErrorFreeSec.setStatus('mandatory')
lpSdhPathFarEndPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathFarEndPathCodeViolations.setStatus('mandatory')
lpSdhPathFarEndPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathFarEndPathErroredSec.setStatus('mandatory')
lpSdhPathFarEndPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathFarEndPathSevErroredSec.setStatus('mandatory')
lpSdhPathFarEndPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathFarEndPathAisLopSec.setStatus('mandatory')
lpSdhPathFarEndPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathFarEndPathUnavailSec.setStatus('mandatory')
lpSdhPathFarEndPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathFarEndPathFailures.setStatus('mandatory')
lpSdhPathCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2))
lpSdhPathCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 1), )
if mibBuilder.loadTexts: lpSdhPathCellRowStatusTable.setStatus('mandatory')
lpSdhPathCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathCellIndex"))
if mibBuilder.loadTexts: lpSdhPathCellRowStatusEntry.setStatus('mandatory')
lpSdhPathCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellRowStatus.setStatus('mandatory')
lpSdhPathCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellComponentName.setStatus('mandatory')
lpSdhPathCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellStorageType.setStatus('mandatory')
lpSdhPathCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpSdhPathCellIndex.setStatus('mandatory')
lpSdhPathCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 10), )
if mibBuilder.loadTexts: lpSdhPathCellProvTable.setStatus('mandatory')
lpSdhPathCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathCellIndex"))
if mibBuilder.loadTexts: lpSdhPathCellProvEntry.setStatus('mandatory')
lpSdhPathCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhPathCellAlarmActDelay.setStatus('mandatory')
lpSdhPathCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhPathCellScrambleCellPayload.setStatus('mandatory')
lpSdhPathCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhPathCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpSdhPathCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 11), )
if mibBuilder.loadTexts: lpSdhPathCellOperTable.setStatus('mandatory')
lpSdhPathCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathCellIndex"))
if mibBuilder.loadTexts: lpSdhPathCellOperEntry.setStatus('mandatory')
lpSdhPathCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellLcdAlarm.setStatus('mandatory')
lpSdhPathCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 12), )
if mibBuilder.loadTexts: lpSdhPathCellStatsTable.setStatus('mandatory')
lpSdhPathCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhPathCellIndex"))
if mibBuilder.loadTexts: lpSdhPathCellStatsEntry.setStatus('mandatory')
lpSdhPathCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellUncorrectableHecErrors.setStatus('mandatory')
lpSdhPathCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellSevErroredSec.setStatus('mandatory')
lpSdhPathCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellReceiveCellUtilization.setStatus('mandatory')
lpSdhPathCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellTransmitCellUtilization.setStatus('mandatory')
lpSdhPathCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 2, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhPathCellCorrectableHeaderErrors.setStatus('mandatory')
lpSdhTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3))
lpSdhTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 1), )
if mibBuilder.loadTexts: lpSdhTestRowStatusTable.setStatus('mandatory')
lpSdhTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhTestIndex"))
if mibBuilder.loadTexts: lpSdhTestRowStatusEntry.setStatus('mandatory')
lpSdhTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestRowStatus.setStatus('mandatory')
lpSdhTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestComponentName.setStatus('mandatory')
lpSdhTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestStorageType.setStatus('mandatory')
lpSdhTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpSdhTestIndex.setStatus('mandatory')
lpSdhTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 10), )
if mibBuilder.loadTexts: lpSdhTestStateTable.setStatus('mandatory')
lpSdhTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhTestIndex"))
if mibBuilder.loadTexts: lpSdhTestStateEntry.setStatus('mandatory')
lpSdhTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestAdminState.setStatus('mandatory')
lpSdhTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestOperationalState.setStatus('mandatory')
lpSdhTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestUsageState.setStatus('mandatory')
lpSdhTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11), )
if mibBuilder.loadTexts: lpSdhTestSetupTable.setStatus('mandatory')
lpSdhTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhTestIndex"))
if mibBuilder.loadTexts: lpSdhTestSetupEntry.setStatus('mandatory')
lpSdhTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestPurpose.setStatus('mandatory')
lpSdhTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestType.setStatus('mandatory')
lpSdhTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestFrmSize.setStatus('mandatory')
lpSdhTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestFrmPatternType.setStatus('mandatory')
lpSdhTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestCustomizedPattern.setStatus('mandatory')
lpSdhTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestDataStartDelay.setStatus('mandatory')
lpSdhTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestDisplayInterval.setStatus('mandatory')
lpSdhTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpSdhTestDuration.setStatus('mandatory')
lpSdhTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12), )
if mibBuilder.loadTexts: lpSdhTestResultsTable.setStatus('mandatory')
lpSdhTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpSdhTestIndex"))
if mibBuilder.loadTexts: lpSdhTestResultsEntry.setStatus('mandatory')
lpSdhTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestElapsedTime.setStatus('mandatory')
lpSdhTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestTimeRemaining.setStatus('mandatory')
lpSdhTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestCauseOfTermination.setStatus('mandatory')
lpSdhTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestBitsTx.setStatus('mandatory')
lpSdhTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestBytesTx.setStatus('mandatory')
lpSdhTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestFrmTx.setStatus('mandatory')
lpSdhTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestBitsRx.setStatus('mandatory')
lpSdhTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestBytesRx.setStatus('mandatory')
lpSdhTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestFrmRx.setStatus('mandatory')
lpSdhTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestErroredFrmRx.setStatus('mandatory')
lpSdhTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 15, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpSdhTestBitErrorRate.setStatus('mandatory')
lpJT2 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16))
lpJT2RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 1), )
if mibBuilder.loadTexts: lpJT2RowStatusTable.setStatus('mandatory')
lpJT2RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2RowStatusEntry.setStatus('mandatory')
lpJT2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2RowStatus.setStatus('mandatory')
lpJT2ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2ComponentName.setStatus('mandatory')
lpJT2StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2StorageType.setStatus('mandatory')
lpJT2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: lpJT2Index.setStatus('mandatory')
lpJT2CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 10), )
if mibBuilder.loadTexts: lpJT2CidDataTable.setStatus('mandatory')
lpJT2CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2CidDataEntry.setStatus('mandatory')
lpJT2CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2CustomerIdentifier.setStatus('mandatory')
lpJT2ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 11), )
if mibBuilder.loadTexts: lpJT2ProvTable.setStatus('mandatory')
lpJT2ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2ProvEntry.setStatus('mandatory')
lpJT2ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2ClockingSource.setStatus('mandatory')
lpJT2LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2LineLength.setStatus('mandatory')
lpJT2ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 11, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2ApplicationFramerName.setStatus('mandatory')
lpJT2IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 12), )
if mibBuilder.loadTexts: lpJT2IfEntryTable.setStatus('mandatory')
lpJT2IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2IfEntryEntry.setStatus('mandatory')
lpJT2IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2IfAdminStatus.setStatus('mandatory')
lpJT2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2IfIndex.setStatus('mandatory')
lpJT2OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 13), )
if mibBuilder.loadTexts: lpJT2OperStatusTable.setStatus('mandatory')
lpJT2OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2OperStatusEntry.setStatus('mandatory')
lpJT2SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2SnmpOperStatus.setStatus('mandatory')
lpJT2StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14), )
if mibBuilder.loadTexts: lpJT2StateTable.setStatus('mandatory')
lpJT2StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2StateEntry.setStatus('mandatory')
lpJT2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2AdminState.setStatus('mandatory')
lpJT2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2OperationalState.setStatus('mandatory')
lpJT2UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2UsageState.setStatus('mandatory')
lpJT2AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2AvailabilityStatus.setStatus('mandatory')
lpJT2ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2ProceduralStatus.setStatus('mandatory')
lpJT2ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2ControlStatus.setStatus('mandatory')
lpJT2AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2AlarmStatus.setStatus('mandatory')
lpJT2StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2StandbyStatus.setStatus('mandatory')
lpJT2UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2UnknownStatus.setStatus('mandatory')
lpJT2OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15), )
if mibBuilder.loadTexts: lpJT2OperTable.setStatus('mandatory')
lpJT2OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2OperEntry.setStatus('mandatory')
lpJT2LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2LosAlarm.setStatus('mandatory')
lpJT2LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2LofAlarm.setStatus('mandatory')
lpJT2RxAisPhysicalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2RxAisPhysicalAlarm.setStatus('mandatory')
lpJT2RxAisPayloadAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2RxAisPayloadAlarm.setStatus('mandatory')
lpJT2RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2RxRaiAlarm.setStatus('mandatory')
lpJT2TxAisPhysicalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TxAisPhysicalAlarm.setStatus('mandatory')
lpJT2TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TxRaiAlarm.setStatus('mandatory')
lpJT2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16), )
if mibBuilder.loadTexts: lpJT2StatsTable.setStatus('mandatory')
lpJT2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2StatsEntry.setStatus('mandatory')
lpJT2RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2RunningTime.setStatus('mandatory')
lpJT2ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2ErrorFreeSec.setStatus('mandatory')
lpJT2ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2ErroredSec.setStatus('mandatory')
lpJT2SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2SevErroredSec.setStatus('mandatory')
lpJT2SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2SevErroredFrmSec.setStatus('mandatory')
lpJT2UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2UnavailSec.setStatus('mandatory')
lpJT2BpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2BpvErrors.setStatus('mandatory')
lpJT2CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CrcErrors.setStatus('mandatory')
lpJT2FrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2FrameErrors.setStatus('mandatory')
lpJT2LosStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2LosStateChanges.setStatus('mandatory')
lpJT2AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 17), )
if mibBuilder.loadTexts: lpJT2AdminInfoTable.setStatus('mandatory')
lpJT2AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"))
if mibBuilder.loadTexts: lpJT2AdminInfoEntry.setStatus('mandatory')
lpJT2Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 17, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2Vendor.setStatus('mandatory')
lpJT2CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 17, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2CommentText.setStatus('mandatory')
lpJT2Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2))
lpJT2TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 1), )
if mibBuilder.loadTexts: lpJT2TestRowStatusTable.setStatus('mandatory')
lpJT2TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2TestIndex"))
if mibBuilder.loadTexts: lpJT2TestRowStatusEntry.setStatus('mandatory')
lpJT2TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestRowStatus.setStatus('mandatory')
lpJT2TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestComponentName.setStatus('mandatory')
lpJT2TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestStorageType.setStatus('mandatory')
lpJT2TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpJT2TestIndex.setStatus('mandatory')
lpJT2TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 10), )
if mibBuilder.loadTexts: lpJT2TestStateTable.setStatus('mandatory')
lpJT2TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2TestIndex"))
if mibBuilder.loadTexts: lpJT2TestStateEntry.setStatus('mandatory')
lpJT2TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestAdminState.setStatus('mandatory')
lpJT2TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestOperationalState.setStatus('mandatory')
lpJT2TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestUsageState.setStatus('mandatory')
lpJT2TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11), )
if mibBuilder.loadTexts: lpJT2TestSetupTable.setStatus('mandatory')
lpJT2TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2TestIndex"))
if mibBuilder.loadTexts: lpJT2TestSetupEntry.setStatus('mandatory')
lpJT2TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestPurpose.setStatus('mandatory')
lpJT2TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestType.setStatus('mandatory')
lpJT2TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestFrmSize.setStatus('mandatory')
lpJT2TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestFrmPatternType.setStatus('mandatory')
lpJT2TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestCustomizedPattern.setStatus('mandatory')
lpJT2TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestDataStartDelay.setStatus('mandatory')
lpJT2TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestDisplayInterval.setStatus('mandatory')
lpJT2TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2TestDuration.setStatus('mandatory')
lpJT2TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12), )
if mibBuilder.loadTexts: lpJT2TestResultsTable.setStatus('mandatory')
lpJT2TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2TestIndex"))
if mibBuilder.loadTexts: lpJT2TestResultsEntry.setStatus('mandatory')
lpJT2TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestElapsedTime.setStatus('mandatory')
lpJT2TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestTimeRemaining.setStatus('mandatory')
lpJT2TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestCauseOfTermination.setStatus('mandatory')
lpJT2TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestBitsTx.setStatus('mandatory')
lpJT2TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestBytesTx.setStatus('mandatory')
lpJT2TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestFrmTx.setStatus('mandatory')
lpJT2TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestBitsRx.setStatus('mandatory')
lpJT2TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestBytesRx.setStatus('mandatory')
lpJT2TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestFrmRx.setStatus('mandatory')
lpJT2TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestErroredFrmRx.setStatus('mandatory')
lpJT2TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2TestBitErrorRate.setStatus('mandatory')
lpJT2Cell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3))
lpJT2CellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 1), )
if mibBuilder.loadTexts: lpJT2CellRowStatusTable.setStatus('mandatory')
lpJT2CellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2CellIndex"))
if mibBuilder.loadTexts: lpJT2CellRowStatusEntry.setStatus('mandatory')
lpJT2CellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellRowStatus.setStatus('mandatory')
lpJT2CellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellComponentName.setStatus('mandatory')
lpJT2CellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellStorageType.setStatus('mandatory')
lpJT2CellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpJT2CellIndex.setStatus('mandatory')
lpJT2CellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 10), )
if mibBuilder.loadTexts: lpJT2CellProvTable.setStatus('mandatory')
lpJT2CellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2CellIndex"))
if mibBuilder.loadTexts: lpJT2CellProvEntry.setStatus('mandatory')
lpJT2CellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2CellAlarmActDelay.setStatus('mandatory')
lpJT2CellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2CellScrambleCellPayload.setStatus('mandatory')
lpJT2CellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpJT2CellCorrectSingleBitHeaderErrors.setStatus('mandatory')
lpJT2CellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 11), )
if mibBuilder.loadTexts: lpJT2CellOperTable.setStatus('mandatory')
lpJT2CellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2CellIndex"))
if mibBuilder.loadTexts: lpJT2CellOperEntry.setStatus('mandatory')
lpJT2CellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellLcdAlarm.setStatus('mandatory')
lpJT2CellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 12), )
if mibBuilder.loadTexts: lpJT2CellStatsTable.setStatus('mandatory')
lpJT2CellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2Index"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpJT2CellIndex"))
if mibBuilder.loadTexts: lpJT2CellStatsEntry.setStatus('mandatory')
lpJT2CellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellUncorrectableHecErrors.setStatus('mandatory')
lpJT2CellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellSevErroredSec.setStatus('mandatory')
lpJT2CellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellReceiveCellUtilization.setStatus('mandatory')
lpJT2CellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellTransmitCellUtilization.setStatus('mandatory')
lpJT2CellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 16, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpJT2CellCorrectableHeaderErrors.setStatus('mandatory')
lpHssi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17))
lpHssiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 1), )
if mibBuilder.loadTexts: lpHssiRowStatusTable.setStatus('mandatory')
lpHssiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiRowStatusEntry.setStatus('mandatory')
lpHssiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiRowStatus.setStatus('mandatory')
lpHssiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiComponentName.setStatus('mandatory')
lpHssiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiStorageType.setStatus('mandatory')
lpHssiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: lpHssiIndex.setStatus('mandatory')
lpHssiProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 10), )
if mibBuilder.loadTexts: lpHssiProvTable.setStatus('mandatory')
lpHssiProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiProvEntry.setStatus('mandatory')
lpHssiLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiLinkMode.setStatus('mandatory')
lpHssiReadyLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiReadyLineState.setStatus('mandatory')
lpHssiDataTransferLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiDataTransferLineState.setStatus('mandatory')
lpHssiLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000000, 50000000)).clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiLineSpeed.setStatus('mandatory')
lpHssiApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 10, 1, 7), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiApplicationFramerName.setStatus('mandatory')
lpHssiCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 11), )
if mibBuilder.loadTexts: lpHssiCidDataTable.setStatus('mandatory')
lpHssiCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiCidDataEntry.setStatus('mandatory')
lpHssiCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiCustomerIdentifier.setStatus('mandatory')
lpHssiAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 12), )
if mibBuilder.loadTexts: lpHssiAdminInfoTable.setStatus('mandatory')
lpHssiAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiAdminInfoEntry.setStatus('mandatory')
lpHssiVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiVendor.setStatus('mandatory')
lpHssiCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiCommentText.setStatus('mandatory')
lpHssiIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 13), )
if mibBuilder.loadTexts: lpHssiIfEntryTable.setStatus('mandatory')
lpHssiIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiIfEntryEntry.setStatus('mandatory')
lpHssiIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiIfAdminStatus.setStatus('mandatory')
lpHssiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiIfIndex.setStatus('mandatory')
lpHssiOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 14), )
if mibBuilder.loadTexts: lpHssiOperStatusTable.setStatus('mandatory')
lpHssiOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiOperStatusEntry.setStatus('mandatory')
lpHssiSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiSnmpOperStatus.setStatus('mandatory')
lpHssiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15), )
if mibBuilder.loadTexts: lpHssiStateTable.setStatus('mandatory')
lpHssiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiStateEntry.setStatus('mandatory')
lpHssiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiAdminState.setStatus('mandatory')
lpHssiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiOperationalState.setStatus('mandatory')
lpHssiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiUsageState.setStatus('mandatory')
lpHssiAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiAvailabilityStatus.setStatus('mandatory')
lpHssiProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiProceduralStatus.setStatus('mandatory')
lpHssiControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiControlStatus.setStatus('mandatory')
lpHssiAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiAlarmStatus.setStatus('mandatory')
lpHssiStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiStandbyStatus.setStatus('mandatory')
lpHssiUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiUnknownStatus.setStatus('mandatory')
lpHssiOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 16), )
if mibBuilder.loadTexts: lpHssiOperTable.setStatus('mandatory')
lpHssiOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"))
if mibBuilder.loadTexts: lpHssiOperEntry.setStatus('mandatory')
lpHssiActualLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiActualLinkMode.setStatus('mandatory')
lpHssiLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiLineState.setStatus('mandatory')
lpHssiActualTxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 16, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiActualTxLineSpeed.setStatus('mandatory')
lpHssiActualRxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 16, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiActualRxLineSpeed.setStatus('mandatory')
lpHssiDataXferStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiDataXferStateChanges.setStatus('mandatory')
lpHssiTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2))
lpHssiTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 1), )
if mibBuilder.loadTexts: lpHssiTestRowStatusTable.setStatus('mandatory')
lpHssiTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiTestIndex"))
if mibBuilder.loadTexts: lpHssiTestRowStatusEntry.setStatus('mandatory')
lpHssiTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestRowStatus.setStatus('mandatory')
lpHssiTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestComponentName.setStatus('mandatory')
lpHssiTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestStorageType.setStatus('mandatory')
lpHssiTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpHssiTestIndex.setStatus('mandatory')
lpHssiTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 10), )
if mibBuilder.loadTexts: lpHssiTestStateTable.setStatus('mandatory')
lpHssiTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiTestIndex"))
if mibBuilder.loadTexts: lpHssiTestStateEntry.setStatus('mandatory')
lpHssiTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestAdminState.setStatus('mandatory')
lpHssiTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestOperationalState.setStatus('mandatory')
lpHssiTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestUsageState.setStatus('mandatory')
lpHssiTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11), )
if mibBuilder.loadTexts: lpHssiTestSetupTable.setStatus('mandatory')
lpHssiTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiTestIndex"))
if mibBuilder.loadTexts: lpHssiTestSetupEntry.setStatus('mandatory')
lpHssiTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestPurpose.setStatus('mandatory')
lpHssiTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestType.setStatus('mandatory')
lpHssiTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestFrmSize.setStatus('mandatory')
lpHssiTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestFrmPatternType.setStatus('mandatory')
lpHssiTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestCustomizedPattern.setStatus('mandatory')
lpHssiTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestDataStartDelay.setStatus('mandatory')
lpHssiTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestDisplayInterval.setStatus('mandatory')
lpHssiTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpHssiTestDuration.setStatus('mandatory')
lpHssiTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12), )
if mibBuilder.loadTexts: lpHssiTestResultsTable.setStatus('mandatory')
lpHssiTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpHssiTestIndex"))
if mibBuilder.loadTexts: lpHssiTestResultsEntry.setStatus('mandatory')
lpHssiTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestElapsedTime.setStatus('mandatory')
lpHssiTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestTimeRemaining.setStatus('mandatory')
lpHssiTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestCauseOfTermination.setStatus('mandatory')
lpHssiTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestBitsTx.setStatus('mandatory')
lpHssiTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestBytesTx.setStatus('mandatory')
lpHssiTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestFrmTx.setStatus('mandatory')
lpHssiTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestBitsRx.setStatus('mandatory')
lpHssiTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestBytesRx.setStatus('mandatory')
lpHssiTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestFrmRx.setStatus('mandatory')
lpHssiTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestErroredFrmRx.setStatus('mandatory')
lpHssiTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 17, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpHssiTestBitErrorRate.setStatus('mandatory')
lpEng = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23))
lpEngRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 1), )
if mibBuilder.loadTexts: lpEngRowStatusTable.setStatus('mandatory')
lpEngRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngIndex"))
if mibBuilder.loadTexts: lpEngRowStatusEntry.setStatus('mandatory')
lpEngRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngRowStatus.setStatus('mandatory')
lpEngComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngComponentName.setStatus('mandatory')
lpEngStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngStorageType.setStatus('mandatory')
lpEngIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEngIndex.setStatus('mandatory')
lpEngDs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2))
lpEngDsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 1), )
if mibBuilder.loadTexts: lpEngDsRowStatusTable.setStatus('mandatory')
lpEngDsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngDsIndex"))
if mibBuilder.loadTexts: lpEngDsRowStatusEntry.setStatus('mandatory')
lpEngDsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEngDsRowStatus.setStatus('mandatory')
lpEngDsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngDsComponentName.setStatus('mandatory')
lpEngDsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngDsStorageType.setStatus('mandatory')
lpEngDsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accounting", 0), ("alarm", 1), ("log", 2), ("debug", 3), ("scn", 4), ("trap", 5), ("stats", 6))))
if mibBuilder.loadTexts: lpEngDsIndex.setStatus('mandatory')
lpEngDsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 10), )
if mibBuilder.loadTexts: lpEngDsOperTable.setStatus('mandatory')
lpEngDsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngDsIndex"))
if mibBuilder.loadTexts: lpEngDsOperEntry.setStatus('mandatory')
lpEngDsAgentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngDsAgentQueueSize.setStatus('mandatory')
lpEngDsOv = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2))
lpEngDsOvRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 1), )
if mibBuilder.loadTexts: lpEngDsOvRowStatusTable.setStatus('mandatory')
lpEngDsOvRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngDsIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngDsOvIndex"))
if mibBuilder.loadTexts: lpEngDsOvRowStatusEntry.setStatus('mandatory')
lpEngDsOvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEngDsOvRowStatus.setStatus('mandatory')
lpEngDsOvComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngDsOvComponentName.setStatus('mandatory')
lpEngDsOvStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpEngDsOvStorageType.setStatus('mandatory')
lpEngDsOvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpEngDsOvIndex.setStatus('mandatory')
lpEngDsOvProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 10), )
if mibBuilder.loadTexts: lpEngDsOvProvTable.setStatus('mandatory')
lpEngDsOvProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngDsIndex"), (0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpEngDsOvIndex"))
if mibBuilder.loadTexts: lpEngDsOvProvEntry.setStatus('mandatory')
lpEngDsOvAgentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 23, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpEngDsOvAgentQueueSize.setStatus('mandatory')
logicalProcessorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 1))
logicalProcessorGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 1, 5))
logicalProcessorGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 1, 5, 2))
logicalProcessorGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 1, 5, 2, 2))
logicalProcessorCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 3))
logicalProcessorCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 3, 5))
logicalProcessorCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 3, 5, 2))
logicalProcessorCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 11, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpDS3DS1OperTable=lpDS3DS1OperTable, lpE3CustomerIdentifier=lpE3CustomerIdentifier, lpV35TestStateEntry=lpV35TestStateEntry, lpSdhSectSevErroredFrmSec=lpSdhSectSevErroredFrmSec, lpDS1ChanTestRowStatusTable=lpDS1ChanTestRowStatusTable, lpE1SendRaiOnAis=lpE1SendRaiOnAis, lpJT2StatsEntry=lpJT2StatsEntry, lpE1AudioRowStatusTable=lpE1AudioRowStatusTable, lpDS3UsageState=lpDS3UsageState, lpX21StateTable=lpX21StateTable, lpE3G832TrailTraceTransmitted=lpE3G832TrailTraceTransmitted, lpSdhProvEntry=lpSdhProvEntry, lpCidDataTable=lpCidDataTable, lpSonetTestStateEntry=lpSonetTestStateEntry, lpSdhPathOperationalState=lpSdhPathOperationalState, lpV35StorageType=lpV35StorageType, lpSonetComponentName=lpSonetComponentName, lpSdhLineErroredSec=lpSdhLineErroredSec, lpJT2CidDataTable=lpJT2CidDataTable, lpDS3DS1TestBytesTx=lpDS3DS1TestBytesTx, lpV35TestStorageType=lpV35TestStorageType, lpDS1StandbyStatus=lpDS1StandbyStatus, lpDS1IfIndex=lpDS1IfIndex, lpSdhTestStateTable=lpSdhTestStateTable, lpSdhStateEntry=lpSdhStateEntry, lpE1ChanTcRowStatus=lpE1ChanTcRowStatus, lpDS1UnknownStatus=lpDS1UnknownStatus, lpDS3LineLosSec=lpDS3LineLosSec, lpSonetPathControlStatus=lpSonetPathControlStatus, lpE3PlcpFarEndErrorFreeSec=lpE3PlcpFarEndErrorFreeSec, lpE3G832StatsEntry=lpE3G832StatsEntry, lpX21ActualRxLineSpeed=lpX21ActualRxLineSpeed, lpX21Vendor=lpX21Vendor, lpDS1IfEntryEntry=lpDS1IfEntryEntry, lpDS3CBitStatsTable=lpDS3CBitStatsTable, lpDS1ChanCellAlarmActDelay=lpDS1ChanCellAlarmActDelay, lpSonetOperEntry=lpSonetOperEntry, lpDS3DS1ZeroCoding=lpDS3DS1ZeroCoding, lpE1ChanAdminInfoTable=lpE1ChanAdminInfoTable, lpV35TestSetupEntry=lpV35TestSetupEntry, lpE3CellRowStatus=lpE3CellRowStatus, lpDS1StatsTable=lpDS1StatsTable, lpDS1TestRowStatusTable=lpDS1TestRowStatusTable, lpX21OperStatusTable=lpX21OperStatusTable, lpV35LineState=lpV35LineState, lpDS3CBitRowStatus=lpDS3CBitRowStatus, lpDS1ChanTcComponentName=lpDS1ChanTcComponentName, lpDS3PlcpSevErroredSec=lpDS3PlcpSevErroredSec, lpDS1ChanTimeslots=lpDS1ChanTimeslots, lpSdhPathCellLcdAlarm=lpSdhPathCellLcdAlarm, lpE1AudioRowStatus=lpE1AudioRowStatus, lpE3TxAis=lpE3TxAis, lpE3TestDuration=lpE3TestDuration, lpDS1ChanCellProvTable=lpDS1ChanCellProvTable, lpDS3PathUnavailSec=lpDS3PathUnavailSec, lpE1TestFrmTx=lpE1TestFrmTx, lpSdhTestSetupTable=lpSdhTestSetupTable, lpMemoryCapacityEntry=lpMemoryCapacityEntry, lpE1TestRowStatusEntry=lpE1TestRowStatusEntry, lpJT2ErrorFreeSec=lpJT2ErrorFreeSec, lpE3TestComponentName=lpE3TestComponentName, lpSonetPathUsageState=lpSonetPathUsageState, lpSpareCardStatus=lpSpareCardStatus, lpDS3DS1ChanTcSigTwoTable=lpDS3DS1ChanTcSigTwoTable, lpE3G832RowStatus=lpE3G832RowStatus, lpSdhIndex=lpSdhIndex, lpE1ErrorFreeSec=lpE1ErrorFreeSec, lpDS1TestDisplayInterval=lpDS1TestDisplayInterval, lpSdhComponentName=lpSdhComponentName, lpDS3DS1TestSetupEntry=lpDS3DS1TestSetupEntry, lpX21OperEntry=lpX21OperEntry, lpDS1AdminInfoEntry=lpDS1AdminInfoEntry, lpDS1ChanRowStatus=lpDS1ChanRowStatus, lpE1E1OperEntry=lpE1E1OperEntry, lpJT2CellScrambleCellPayload=lpJT2CellScrambleCellPayload, lpDS3DS1TestBytesRx=lpDS3DS1TestBytesRx, lpDS1ChanTcSigOneIndex=lpDS1ChanTcSigOneIndex, lpV35ProceduralStatus=lpV35ProceduralStatus, lpE1SlipErrors=lpE1SlipErrors, lpX21TestComponentName=lpX21TestComponentName, lpE1Crc4Mode=lpE1Crc4Mode, lpSdhPathFarEndPathErroredSec=lpSdhPathFarEndPathErroredSec, lpSdh=lpSdh, lpSonetPathOperEntry=lpSonetPathOperEntry, lpJT2SevErroredSec=lpJT2SevErroredSec, lpLinkToApplicationsValue=lpLinkToApplicationsValue, lpDS3DS1ChanTestDisplayInterval=lpDS3DS1ChanTestDisplayInterval, lpDS3DS1ChanTcSigOneTable=lpDS3DS1ChanTcSigOneTable, lpDS1ChanStateTable=lpDS1ChanStateTable, lpSdhCustomerIdentifier=lpSdhCustomerIdentifier, lpDS3DS1ChanTcSigTwoValue=lpDS3DS1ChanTcSigTwoValue, lpSonetTestBitErrorRate=lpSonetTestBitErrorRate, lpDS1ChanTestDisplayInterval=lpDS1ChanTestDisplayInterval, lpE3G832TrailTraceExpected=lpE3G832TrailTraceExpected, lpEngDsStorageType=lpEngDsStorageType, lpX21TestBitErrorRate=lpX21TestBitErrorRate, lpJT2ProceduralStatus=lpJT2ProceduralStatus, lpDS3CellUncorrectableHecErrors=lpDS3CellUncorrectableHecErrors, lpE3Index=lpE3Index, lpE3LinkAlarmActivationThreshold=lpE3LinkAlarmActivationThreshold, lpX21TestDuration=lpX21TestDuration, lpDS3DS1ChanTestOperationalState=lpDS3DS1ChanTestOperationalState, lpE1ChanUnknownStatus=lpE1ChanUnknownStatus, lpDS3TestResultsTable=lpDS3TestResultsTable, lpDS3CellProvTable=lpDS3CellProvTable, lpSonetIfEntryEntry=lpSonetIfEntryEntry, lpX21AdminInfoEntry=lpX21AdminInfoEntry, lpDS1DspRowStatusTable=lpDS1DspRowStatusTable, lpV35TestElapsedTime=lpV35TestElapsedTime, lpE1BpvErrors=lpE1BpvErrors, lpX21SnmpOperStatus=lpX21SnmpOperStatus, lpDS1ChanIfEntryEntry=lpDS1ChanIfEntryEntry, lpSonetIfAdminStatus=lpSonetIfAdminStatus, lpSdhAdminInfoTable=lpSdhAdminInfoTable, lpDS3DS1RxAisAlarm=lpDS3DS1RxAisAlarm, lpSonetTestUsageState=lpSonetTestUsageState, lpV35UnknownStatus=lpV35UnknownStatus, lpX21IfEntryTable=lpX21IfEntryTable, lpSonetStatsTable=lpSonetStatsTable, lpSdhPathCellTransmitCellUtilization=lpSdhPathCellTransmitCellUtilization, lpSdhIfIndex=lpSdhIfIndex, lpDS1ChanCellScrambleCellPayload=lpDS1ChanCellScrambleCellPayload, lpSdhPathOperEntry=lpSdhPathOperEntry, lpProvTable=lpProvTable, lpRowStatusTable=lpRowStatusTable, lpJT2StandbyStatus=lpJT2StandbyStatus, lpJT2CellOperTable=lpJT2CellOperTable, lpE3UsageState=lpE3UsageState, logicalProcessorGroup=logicalProcessorGroup, lpHssiIfEntryEntry=lpHssiIfEntryEntry, lpE1ChanCellAlarmActDelay=lpE1ChanCellAlarmActDelay, lpDS1ChanTestBitErrorRate=lpDS1ChanTestBitErrorRate, lpJT2TxRaiAlarm=lpJT2TxRaiAlarm, lpE1ChanTestUsageState=lpE1ChanTestUsageState, lpE1StandbyStatus=lpE1StandbyStatus, lpE1TestType=lpE1TestType, lpDS1ChanCellOperEntry=lpDS1ChanCellOperEntry, lpDS1AdminState=lpDS1AdminState, lpSdhTestDuration=lpSdhTestDuration, lpHssiTestBitsRx=lpHssiTestBitsRx, lpE1ChanIfEntryTable=lpE1ChanIfEntryTable, lpDS3DS1TestRowStatus=lpDS3DS1TestRowStatus, lpE1ChanCellTransmitCellUtilization=lpE1ChanCellTransmitCellUtilization, lpDS1ChanCellStatsTable=lpDS1ChanCellStatsTable, lpDS3DS1ChanTc=lpDS3DS1ChanTc, lpX21TestFrmTx=lpX21TestFrmTx, lpV35TestDataStartDelay=lpV35TestDataStartDelay, lpSdhOperStatusEntry=lpSdhOperStatusEntry, lpDS3DS1LofAlarm=lpDS3DS1LofAlarm, lpSonetTestDisplayInterval=lpSonetTestDisplayInterval, lpE3G832FarEndSevErroredSec=lpE3G832FarEndSevErroredSec, lpV35TestFrmPatternType=lpV35TestFrmPatternType, lpE3PlcpFarEndUnavailableSec=lpE3PlcpFarEndUnavailableSec, lpDS1ChanTestBytesTx=lpDS1ChanTestBytesTx, lpSonetTestSetupEntry=lpSonetTestSetupEntry, lpE1RowStatus=lpE1RowStatus, lpStorageType=lpStorageType, lpDS1ChanOperStatusTable=lpDS1ChanOperStatusTable, lpDS1TestRowStatusEntry=lpDS1TestRowStatusEntry, lpDS3PlcpOperationalEntry=lpDS3PlcpOperationalEntry, lpJT2OperStatusTable=lpJT2OperStatusTable, lpV35ClockingSource=lpV35ClockingSource, lpDS3DS1OperationalState=lpDS3DS1OperationalState, lpSdhPathRxAisAlarm=lpSdhPathRxAisAlarm, lpDS3RowStatusTable=lpDS3RowStatusTable, lpSonetTestIndex=lpSonetTestIndex, logicalProcessorGroupBE=logicalProcessorGroupBE, lpJT2IfAdminStatus=lpJT2IfAdminStatus, lpE3RxRaiAlarm=lpE3RxRaiAlarm, lpE1TestBytesTx=lpE1TestBytesTx, lpSdhPathCellIndex=lpSdhPathCellIndex, lpDS3DS1TestDisplayInterval=lpDS3DS1TestDisplayInterval, lpSonetPathOperStatusTable=lpSonetPathOperStatusTable, lpDS3DS1AlarmStatus=lpDS3DS1AlarmStatus, lpE1ChanOperationalState=lpE1ChanOperationalState, lpSonetPathUnknownStatus=lpSonetPathUnknownStatus, lpDS1ChanTestSetupTable=lpDS1ChanTestSetupTable, lpJT2TestRowStatusTable=lpJT2TestRowStatusTable, lpE1SnmpOperStatus=lpE1SnmpOperStatus, lpSonetPathCellProvTable=lpSonetPathCellProvTable, lpEngDsRowStatusEntry=lpEngDsRowStatusEntry, lpE3RunningTime=lpE3RunningTime, lpDS3CellStorageType=lpDS3CellStorageType, lpHssiCustomerIdentifier=lpHssiCustomerIdentifier, lpDS1TestElapsedTime=lpDS1TestElapsedTime, lpDS1SevErroredSec=lpDS1SevErroredSec, lpE3TestRowStatus=lpE3TestRowStatus, lpDS3RunningTime=lpDS3RunningTime, lpDS3CBitFarEndSefAisSec=lpDS3CBitFarEndSefAisSec, lpE1ChanTestDuration=lpE1ChanTestDuration, lpE1TestElapsedTime=lpE1TestElapsedTime, lpSdhPathUsageState=lpSdhPathUsageState, lpE1ChanTestBytesRx=lpE1ChanTestBytesRx, lpV35OperStatusEntry=lpV35OperStatusEntry, lpDS3DS1ChanCellOperEntry=lpDS3DS1ChanCellOperEntry, lpE1StorageType=lpE1StorageType, lpSdhSectFailures=lpSdhSectFailures, lpDS3TestBitsTx=lpDS3TestBitsTx, lpSdhTestType=lpSdhTestType, lpX21TestFrmPatternType=lpX21TestFrmPatternType, lpDS3CidDataTable=lpDS3CidDataTable, lpX21TestStateTable=lpX21TestStateTable, lpSdhPathOperStatusEntry=lpSdhPathOperStatusEntry, lpStandbyStatus=lpStandbyStatus, lpSdhFarEndLineUnavailSec=lpSdhFarEndLineUnavailSec, lpE1TestOperationalState=lpE1TestOperationalState, lpDS1ChanCellProvEntry=lpDS1ChanCellProvEntry, lpSdhTestRowStatus=lpSdhTestRowStatus, lpSdhPathCellProvEntry=lpSdhPathCellProvEntry, lpSdhTestErroredFrmRx=lpSdhTestErroredFrmRx, lpE3CellCorrectSingleBitHeaderErrors=lpE3CellCorrectSingleBitHeaderErrors, lpE1ProvEntry=lpE1ProvEntry, lpHssiOperEntry=lpHssiOperEntry, lpE1ChanVendor=lpE1ChanVendor, lpSonetFarEndLineFailures=lpSonetFarEndLineFailures, lpX21TestCauseOfTermination=lpX21TestCauseOfTermination, lpX21TestUsageState=lpX21TestUsageState, lpDS3Cell=lpDS3Cell, lpSdhLineUnavailSec=lpSdhLineUnavailSec, lpDS3DS1ChanTestFrmPatternType=lpDS3DS1ChanTestFrmPatternType, lpSdhVendor=lpSdhVendor, lpDS1LofAlarm=lpDS1LofAlarm, lpJT2OperationalState=lpJT2OperationalState, lpE1IfAdminStatus=lpE1IfAdminStatus, lpSdhRowStatus=lpSdhRowStatus, lpDS3DS1SnmpOperStatus=lpDS3DS1SnmpOperStatus, lpDS1DspRowStatusEntry=lpDS1DspRowStatusEntry, lpDS1DspRowStatus=lpDS1DspRowStatus, lpE1ChanIfEntryEntry=lpE1ChanIfEntryEntry, lpDS1ChanCellOperTable=lpDS1ChanCellOperTable, lpSdhPathCidDataTable=lpSdhPathCidDataTable, lpE3G832=lpE3G832, lpDS3DS1ChanTcOpTable=lpDS3DS1ChanTcOpTable, lpDS3CBitFarEndErrorFreeSec=lpDS3CBitFarEndErrorFreeSec, lpHssiOperTable=lpHssiOperTable, lpJT2TestResultsEntry=lpJT2TestResultsEntry, lpE3TestStateTable=lpE3TestStateTable, lpX21OperTable=lpX21OperTable, lpDS3LofAlarm=lpDS3LofAlarm, lpE1ChanTestCauseOfTermination=lpE1ChanTestCauseOfTermination, lpV35AdminState=lpV35AdminState, lpLocalMsgBlockUsageMax=lpLocalMsgBlockUsageMax, lpHssiTestIndex=lpHssiTestIndex, lpComponentName=lpComponentName, lpHssiTestErroredFrmRx=lpHssiTestErroredFrmRx, lpE1StateTable=lpE1StateTable, lpJT2TestFrmPatternType=lpJT2TestFrmPatternType, lpDS3DS1ChanVendor=lpDS3DS1ChanVendor, lpDS3TestIndex=lpDS3TestIndex, lpDS3DS1ChanComponentName=lpDS3DS1ChanComponentName, lpE3TestStateEntry=lpE3TestStateEntry, lpSonetPathCellTransmitCellUtilization=lpSonetPathCellTransmitCellUtilization, lpDS3TestBytesTx=lpDS3TestBytesTx, lpJT2CellRowStatus=lpJT2CellRowStatus)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpDS3DS1ChanTestSetupEntry=lpDS3DS1ChanTestSetupEntry, lpHssiTestPurpose=lpHssiTestPurpose, lpDS1LosStateChanges=lpDS1LosStateChanges, lpDS1ChanIfEntryTable=lpDS1ChanIfEntryTable, lpSonetSnmpOperStatus=lpSonetSnmpOperStatus, lpDS3DS1ChanTestBytesTx=lpDS3DS1ChanTestBytesTx, lpHssiControlStatus=lpHssiControlStatus, lpAlarmStatus=lpAlarmStatus, lpDS3OperStatusTable=lpDS3OperStatusTable, lpDS3CBitFarEndSevErroredSec=lpDS3CBitFarEndSevErroredSec, lpE1ChanTestRowStatusEntry=lpE1ChanTestRowStatusEntry, lpE1TestStateTable=lpE1TestStateTable, lpSdhPathStorageType=lpSdhPathStorageType, lpEngDsOvAgentQueueSize=lpEngDsOvAgentQueueSize, lpSdhPathCellProvTable=lpSdhPathCellProvTable, lpEngComponentName=lpEngComponentName, lpDS1ChanTestSetupEntry=lpDS1ChanTestSetupEntry, lpDS1ChanProceduralStatus=lpDS1ChanProceduralStatus, lpSonetPathCellOperEntry=lpSonetPathCellOperEntry, lpSdhPathCellCorrectableHeaderErrors=lpSdhPathCellCorrectableHeaderErrors, lpV35RowStatusEntry=lpV35RowStatusEntry, lpDS3CellCorrectableHeaderErrors=lpDS3CellCorrectableHeaderErrors, lpE1ChanCellStatsEntry=lpE1ChanCellStatsEntry, lpE1ChanTestRowStatus=lpE1ChanTestRowStatus, lpDS3DS1FrmErrors=lpDS3DS1FrmErrors, lpMemoryUsageAvgMaxEntry=lpMemoryUsageAvgMaxEntry, lpSdhFarEndLineErroredSec=lpSdhFarEndLineErroredSec, lpE3AlarmStatus=lpE3AlarmStatus, lpDS1ChanCustomerIdentifier=lpDS1ChanCustomerIdentifier, lpJT2AdminState=lpJT2AdminState, lpSdhTestUsageState=lpSdhTestUsageState, lpEngDs=lpEngDs, lpLocalMsgBlockUsage=lpLocalMsgBlockUsage, lpEngRowStatusEntry=lpEngRowStatusEntry, lpDS3DS1ChanTestPurpose=lpDS3DS1ChanTestPurpose, lpDS3PlcpSevErroredFramingSec=lpDS3PlcpSevErroredFramingSec, lpDS1ChanCellStatsEntry=lpDS1ChanCellStatsEntry, lpE1RxRaiAlarm=lpE1RxRaiAlarm, lpE1ChanTcReplacementData=lpE1ChanTcReplacementData, lpE3OperStatusTable=lpE3OperStatusTable, lpE3ControlStatus=lpE3ControlStatus, lpE1TestResultsEntry=lpE1TestResultsEntry, lpV35TestBytesTx=lpV35TestBytesTx, lpDS3DS1ChanTestBitErrorRate=lpDS3DS1ChanTestBitErrorRate, lpSonetOperStatusTable=lpSonetOperStatusTable, lpSdhPathOperStatusTable=lpSdhPathOperStatusTable, lpDS3DS1ControlStatus=lpDS3DS1ControlStatus, lpDS3CBitFarEndAlarm=lpDS3CBitFarEndAlarm, lpV35ActualLinkMode=lpV35ActualLinkMode, lpV35TestDisplayInterval=lpV35TestDisplayInterval, lpE3PlcpSevErroredFramingSec=lpE3PlcpSevErroredFramingSec, lpDS1ControlStatus=lpDS1ControlStatus, lpSonetTestDataStartDelay=lpSonetTestDataStartDelay, lpSonetTestPurpose=lpSonetTestPurpose, lpSdhPathFarEndPathUnavailSec=lpSdhPathFarEndPathUnavailSec, lpSonetOperTable=lpSonetOperTable, lpSdhRxRfiAlarm=lpSdhRxRfiAlarm, lpDS3CBitCbitUnavailSec=lpDS3CBitCbitUnavailSec, lpSonetPathFarEndPathErrorFreeSec=lpSonetPathFarEndPathErrorFreeSec, lpDS1ChanTcOpEntry=lpDS1ChanTcOpEntry, lpE3G832TrailTraceMismatch=lpE3G832TrailTraceMismatch, lpDS1ChanSnmpOperStatus=lpDS1ChanSnmpOperStatus, lpE3G832StorageType=lpE3G832StorageType, lpDS3DS1ChanTestStateTable=lpDS3DS1ChanTestStateTable, lpE1TestBitsTx=lpE1TestBitsTx, lpV35TestResultsTable=lpV35TestResultsTable, lpDS3DS1ChanCellCorrectSingleBitHeaderErrors=lpDS3DS1ChanCellCorrectSingleBitHeaderErrors, lpV35LineSpeed=lpV35LineSpeed, lpDS3PlcpRowStatusTable=lpDS3PlcpRowStatusTable, lpSdhRxAisAlarm=lpSdhRxAisAlarm, lpSdhCommentText=lpSdhCommentText, lpV35OperStatusTable=lpV35OperStatusTable, lpJT2Test=lpJT2Test, lpJT2CellIndex=lpJT2CellIndex, lpSonetPathOperStatusEntry=lpSonetPathOperStatusEntry, lpE3OperTable=lpE3OperTable, lpSdhTest=lpSdhTest, lpX21ComponentName=lpX21ComponentName, lpE1DspRowStatus=lpE1DspRowStatus, lpV35ActualRxLineSpeed=lpV35ActualRxLineSpeed, lpSonetLineFailures=lpSonetLineFailures, lpDS1SevErroredFrmSec=lpDS1SevErroredFrmSec, lpDS1ErroredSec=lpDS1ErroredSec, lpE3PlcpRowStatusTable=lpE3PlcpRowStatusTable, lpV35DteDataClockSource=lpV35DteDataClockSource, lpDS3PlcpErroredSec=lpDS3PlcpErroredSec, lpDS1TestFrmRx=lpDS1TestFrmRx, lpSonetRowStatusTable=lpSonetRowStatusTable, lpSonetStateEntry=lpSonetStateEntry, lpDS1AudioIndex=lpDS1AudioIndex, lpE3PlcpErroredSec=lpE3PlcpErroredSec, lpDS1ComponentName=lpDS1ComponentName, lpEngIndex=lpEngIndex, lpSonetPathFarEndPathUnavailSec=lpSonetPathFarEndPathUnavailSec, lpDS1TestBitErrorRate=lpDS1TestBitErrorRate, lpSonetLineUnavailSec=lpSonetLineUnavailSec, lpRowStatus=lpRowStatus, lpSdhPathCellRowStatus=lpSdhPathCellRowStatus, lpDS1ChanApplicationFramerName=lpDS1ChanApplicationFramerName, lpDS3DS1StatsTable=lpDS3DS1StatsTable, lpProvEntry=lpProvEntry, lpE1ChanTestAdminState=lpE1ChanTestAdminState, lpSonetPathCellRowStatus=lpSonetPathCellRowStatus, lpE1ChanTestStateEntry=lpE1ChanTestStateEntry, lpSdhPathPathFailures=lpSdhPathPathFailures, lpE3Vendor=lpE3Vendor, lpDS1ChanCellStorageType=lpDS1ChanCellStorageType, lpDS3DS1ChanTestRowStatusEntry=lpDS3DS1ChanTestRowStatusEntry, lpE1RxAisAlarm=lpE1RxAisAlarm, lpDS1ChanTcOpTable=lpDS1ChanTcOpTable, lpX21OperStatusEntry=lpX21OperStatusEntry, lpDS3CellSevErroredSec=lpDS3CellSevErroredSec, lpE1FrmErrors=lpE1FrmErrors, lpDS3DS1TestStorageType=lpDS3DS1TestStorageType, lpLocalMsgBlockUsageMin=lpLocalMsgBlockUsageMin, lpDS1ChanTcProvTable=lpDS1ChanTcProvTable, lpJT2CustomerIdentifier=lpJT2CustomerIdentifier, lpDS3IfEntryTable=lpDS3IfEntryTable, lpE3PathFailures=lpE3PathFailures, lpScheduledSwitchover=lpScheduledSwitchover, lpJT2TestDataStartDelay=lpJT2TestDataStartDelay, lpSdhPathRowStatus=lpSdhPathRowStatus, lpDS1RowStatus=lpDS1RowStatus, lpDS3TestRowStatus=lpDS3TestRowStatus, lpDS3CBitStorageType=lpDS3CBitStorageType, lpV35UsageState=lpV35UsageState, lpDS3ProceduralStatus=lpDS3ProceduralStatus, lpE3PlcpRowStatus=lpE3PlcpRowStatus, lpDS3DS1ChanCidDataTable=lpDS3DS1ChanCidDataTable, lpSdhTestRowStatusEntry=lpSdhTestRowStatusEntry, lpHssiStateTable=lpHssiStateTable, lpV35TestComponentName=lpV35TestComponentName, lpX21ProceduralStatus=lpX21ProceduralStatus, lpDS3DS1AdminState=lpDS3DS1AdminState, logicalProcessorCapabilitiesBE01=logicalProcessorCapabilitiesBE01, lpE3CellCorrectableHeaderErrors=lpE3CellCorrectableHeaderErrors, lpSonetTestFrmRx=lpSonetTestFrmRx, lpSonetTestRowStatus=lpSonetTestRowStatus, lpSonetPathCellReceiveCellUtilization=lpSonetPathCellReceiveCellUtilization, lpE1ChanTcComponentName=lpE1ChanTcComponentName, lpE1ChanProceduralStatus=lpE1ChanProceduralStatus, lpDS3RowStatus=lpDS3RowStatus, lpE3G832TrailTraceReceived=lpE3G832TrailTraceReceived, lpDS3DS1ChanTcSigOneIndex=lpDS3DS1ChanTcSigOneIndex, lpV35ProvEntry=lpV35ProvEntry, lpDS3DS1ChanTestElapsedTime=lpDS3DS1ChanTestElapsedTime, lpJT2AvailabilityStatus=lpJT2AvailabilityStatus, lpEngRowStatusTable=lpEngRowStatusTable, lpSonetTestTimeRemaining=lpSonetTestTimeRemaining, lpSonetTestResultsEntry=lpSonetTestResultsEntry, lpX21RowStatusTable=lpX21RowStatusTable, lpE1ChanCellOperTable=lpE1ChanCellOperTable, lpJT2TestCustomizedPattern=lpJT2TestCustomizedPattern, lpDS3DS1ChanCellRowStatus=lpDS3DS1ChanCellRowStatus, lpSdhStatsTable=lpSdhStatsTable, lpHssiTestDuration=lpHssiTestDuration, lpSonetPathPathUnavailSec=lpSonetPathPathUnavailSec, lpV35ReadyLineState=lpV35ReadyLineState, lpE1TestFrmSize=lpE1TestFrmSize, lpDS3CustomerIdentifier=lpDS3CustomerIdentifier, lpE1CustomerIdentifier=lpE1CustomerIdentifier, lpJT2AdminInfoTable=lpJT2AdminInfoTable, lpDS3DS1CrcErrors=lpDS3DS1CrcErrors, lpJT2CellLcdAlarm=lpJT2CellLcdAlarm, lpDS1ChanTcSigOneValue=lpDS1ChanTcSigOneValue, lpUtilTable=lpUtilTable, lpSonetPathAdminState=lpSonetPathAdminState, lpDS3DS1LineType=lpDS3DS1LineType, lpSonetPathFarEndPathFailures=lpSonetPathFarEndPathFailures, lpE1TestBytesRx=lpE1TestBytesRx, lpDS1ProvTable=lpDS1ProvTable, lpSdhTestCauseOfTermination=lpSdhTestCauseOfTermination, lpDS3CellIndex=lpDS3CellIndex, lpSdhSectSevErroredSec=lpSdhSectSevErroredSec, lpDS1ChanTestRowStatusEntry=lpDS1ChanTestRowStatusEntry, lpSdhPathCidDataEntry=lpSdhPathCidDataEntry, lpE3PathUnavailSec=lpE3PathUnavailSec, lpSdhPathPathSevErroredSec=lpSdhPathPathSevErroredSec, lpDS3DS1ChanAdminInfoEntry=lpDS3DS1ChanAdminInfoEntry, lpDS3DS1TestPurpose=lpDS3DS1TestPurpose, lpMemoryUsageIndex=lpMemoryUsageIndex, lpDS3TestCauseOfTermination=lpDS3TestCauseOfTermination, lpDS1TestCustomizedPattern=lpDS1TestCustomizedPattern, lpHssiTestDisplayInterval=lpHssiTestDisplayInterval, lpDS1AvailabilityStatus=lpDS1AvailabilityStatus, lpJT2ProvEntry=lpJT2ProvEntry, lpE3RowStatusEntry=lpE3RowStatusEntry, lpDS3DS1TestStateEntry=lpDS3DS1TestStateEntry, lpDS3DS1ChanCustomerIdentifier=lpDS3DS1ChanCustomerIdentifier, lpJT2LineLength=lpJT2LineLength, lpDS3LineCodeViolations=lpDS3LineCodeViolations, lpMemoryUsageAvgIndex=lpMemoryUsageAvgIndex, lpDS1AlarmStatus=lpDS1AlarmStatus, lpDS1ChanComponentName=lpDS1ChanComponentName, lpE1OperEntry=lpE1OperEntry, lpSonetPathAvailabilityStatus=lpSonetPathAvailabilityStatus, lpLocalMsgBlockCapacity=lpLocalMsgBlockCapacity, lpDS1ChanStandbyStatus=lpDS1ChanStandbyStatus, lpSdhTestBitsTx=lpSdhTestBitsTx, lpSdhPathStatsEntry=lpSdhPathStatsEntry, lpDS3DS1StateEntry=lpDS3DS1StateEntry, lpE1ChanTcSigTwoValue=lpE1ChanTcSigTwoValue, lpSonetPathCellStorageType=lpSonetPathCellStorageType, lpX21TestRowStatus=lpX21TestRowStatus, lpX21TestResultsEntry=lpX21TestResultsEntry, lpDS3DS1ChanCellStatsTable=lpDS3DS1ChanCellStatsTable, lpDS1ChanIndex=lpDS1ChanIndex, lpDS3StatsTable=lpDS3StatsTable, lpDS3DS1ChanTestResultsTable=lpDS3DS1ChanTestResultsTable, lpDS3=lpDS3, lpEngStorageType=lpEngStorageType, lpDS3ApplicationFramerName=lpDS3ApplicationFramerName, lpE1ChanTestPurpose=lpE1ChanTestPurpose, lpE1ChanTcProvEntry=lpE1ChanTcProvEntry, lpSdhTestTimeRemaining=lpSdhTestTimeRemaining, lpE1ChanTestBitsRx=lpE1ChanTestBitsRx, lpDS1ChanCellSevErroredSec=lpDS1ChanCellSevErroredSec, lpJT2TestRowStatus=lpJT2TestRowStatus, lpDS3Mapping=lpDS3Mapping, lpDS3TestFrmTx=lpDS3TestFrmTx, lpDS1AudioComponentName=lpDS1AudioComponentName, lpSonetSectCodeViolations=lpSonetSectCodeViolations, lpE3CellProvEntry=lpE3CellProvEntry, lpV35OperTable=lpV35OperTable, lpE1LineType=lpE1LineType, lpMemoryUsageAvgMaxTable=lpMemoryUsageAvgMaxTable, lpDS3CellOperTable=lpDS3CellOperTable, lpDS1TestCauseOfTermination=lpDS1TestCauseOfTermination, lpDS3DS1TestFrmPatternType=lpDS3DS1TestFrmPatternType, lpE1ChanActualChannelSpeed=lpE1ChanActualChannelSpeed, lpDS3DS1TestElapsedTime=lpDS3DS1TestElapsedTime, lpDS3DS1TestCauseOfTermination=lpDS3DS1TestCauseOfTermination, lpJT2CommentText=lpJT2CommentText, lpE3LineCodeViolations=lpE3LineCodeViolations, lpJT2TestFrmSize=lpJT2TestFrmSize, lpDS3DS1TestFrmSize=lpDS3DS1TestFrmSize, lpDS1ChanTestBytesRx=lpDS1ChanTestBytesRx, lpE1ChanTcSigTwoIndex=lpE1ChanTcSigTwoIndex, lpSdhPathFarEndPathSevErroredSec=lpSdhPathFarEndPathSevErroredSec, lpDS1ChanTcStorageType=lpDS1ChanTcStorageType, lpDS1AudioRowStatusEntry=lpDS1AudioRowStatusEntry, lpDS3DS1ChanCellRowStatusTable=lpDS3DS1ChanCellRowStatusTable, lpE3LineFailures=lpE3LineFailures, lpDS1ChanTcSigOneEntry=lpDS1ChanTcSigOneEntry, lpSdhTestOperationalState=lpSdhTestOperationalState, lpJT2TestIndex=lpJT2TestIndex, lpDS3TestErroredFrmRx=lpDS3TestErroredFrmRx, lpSonetPathCustomerIdentifier=lpSonetPathCustomerIdentifier, lpE1CidDataEntry=lpE1CidDataEntry, lpDS1Dsp=lpDS1Dsp, lpMemoryUsageEntry=lpMemoryUsageEntry, lpDS3DS1ChanTestType=lpDS3DS1ChanTestType, lpDS3DS1ChanCellProvEntry=lpDS3DS1ChanCellProvEntry, lpE1ChanTestComponentName=lpE1ChanTestComponentName)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpDS1ChanTestFrmPatternType=lpDS1ChanTestFrmPatternType, lpE3OperStatusEntry=lpE3OperStatusEntry, lpE1RunningTime=lpE1RunningTime, lpE1UsageState=lpE1UsageState, lpDS3CBitCbitErrorFreeSec=lpDS3CBitCbitErrorFreeSec, lpJT2ClockingSource=lpJT2ClockingSource, lpDS3DS1ChanTestBytesRx=lpDS3DS1ChanTestBytesRx, lpRestartOnCpSwitch=lpRestartOnCpSwitch, lpDS3DS1AdminInfoEntry=lpDS3DS1AdminInfoEntry, lpSdhPathStatsTable=lpSdhPathStatsTable, lpE1ChanTestStateTable=lpE1ChanTestStateTable, lpDS3CellRowStatusEntry=lpDS3CellRowStatusEntry, lpLinkToApplicationsEntry=lpLinkToApplicationsEntry, lpX21UnknownStatus=lpX21UnknownStatus, lpSonetIfIndex=lpSonetIfIndex, lpEngDsOvRowStatusTable=lpEngDsOvRowStatusTable, logicalProcessorCapabilitiesBE01A=logicalProcessorCapabilitiesBE01A, lpDS3DS1ErrorFreeSec=lpDS3DS1ErrorFreeSec, lpE1ChanCellCorrectSingleBitHeaderErrors=lpE1ChanCellCorrectSingleBitHeaderErrors, lpSonetPathRowStatus=lpSonetPathRowStatus, lpDS3PlcpRowStatus=lpDS3PlcpRowStatus, lpE3PlcpComponentName=lpE3PlcpComponentName, lpSonetPathPathAisLopSec=lpSonetPathPathAisLopSec, lpLinkToApplicationsTable=lpLinkToApplicationsTable, lpE3RowStatus=lpE3RowStatus, lpSonetPathStateEntry=lpSonetPathStateEntry, lpSonetTestComponentName=lpSonetTestComponentName, lpJT2ProvTable=lpJT2ProvTable, lpDS3DS1ChanTcSignalOneDuration=lpDS3DS1ChanTcSignalOneDuration, lpDS1StorageType=lpDS1StorageType, lpHssiIndex=lpHssiIndex, lpE1ChanCellCorrectableHeaderErrors=lpE1ChanCellCorrectableHeaderErrors, lpHssiTestFrmSize=lpHssiTestFrmSize, lpDS3TestBitsRx=lpDS3TestBitsRx, lpHssiLineState=lpHssiLineState, lpDS3DS1ChanTestResultsEntry=lpDS3DS1ChanTestResultsEntry, lpE1ChanCellLcdAlarm=lpE1ChanCellLcdAlarm, lpDS3DS1ChanTestFrmRx=lpDS3DS1ChanTestFrmRx, lpMemoryUsageAvgMinValue=lpMemoryUsageAvgMinValue, lpDS3DS1ChanRowStatusEntry=lpDS3DS1ChanRowStatusEntry, lpE1ChanIndex=lpE1ChanIndex, lpDS3CBitCbitCodeViolations=lpDS3CBitCbitCodeViolations, lpDS3ProvEntry=lpDS3ProvEntry, lpDS3DS1ChanTcReplacementData=lpDS3DS1ChanTcReplacementData, lpDS1ChanTestIndex=lpDS1ChanTestIndex, lpSdhClockingSource=lpSdhClockingSource, lpE3RowStatusTable=lpE3RowStatusTable, lpHssiStandbyStatus=lpHssiStandbyStatus, lpDS3PlcpErrorFreeSec=lpDS3PlcpErrorFreeSec, lpDS3DS1ChanTestBitsRx=lpDS3DS1ChanTestBitsRx, lpE3TestBytesRx=lpE3TestBytesRx, lpSdhTestDisplayInterval=lpSdhTestDisplayInterval, lpHssiLineSpeed=lpHssiLineSpeed, lpE3TestCauseOfTermination=lpE3TestCauseOfTermination, lpE1TestResultsTable=lpE1TestResultsTable, lpE1ChanProvTable=lpE1ChanProvTable, lpDS1ChanCellRowStatus=lpDS1ChanCellRowStatus, lpX21LineSpeed=lpX21LineSpeed, lpSdhRowStatusTable=lpSdhRowStatusTable, lpSonetPathFarEndPathAisLopSec=lpSonetPathFarEndPathAisLopSec, lpDS3DS1ChanUnknownStatus=lpDS3DS1ChanUnknownStatus, lpDS3CBitCbitErroredSec=lpDS3CBitCbitErroredSec, lpE3StateEntry=lpE3StateEntry, lpEngDsOv=lpEngDsOv, lpE3TestErroredFrmRx=lpE3TestErroredFrmRx, lpSonetPathCellLcdAlarm=lpSonetPathCellLcdAlarm, lpSdhTxRdi=lpSdhTxRdi, lpJT2CellProvTable=lpJT2CellProvTable, lpV35TestBitErrorRate=lpV35TestBitErrorRate, lpDS1AdminInfoTable=lpDS1AdminInfoTable, lpDS3CellComponentName=lpDS3CellComponentName, lpDS1ChanTestDataStartDelay=lpDS1ChanTestDataStartDelay, lpV35StateTable=lpV35StateTable, lpE1ChanRowStatus=lpE1ChanRowStatus, lpSonetTestDuration=lpSonetTestDuration, lpSonetPathRowStatusTable=lpSonetPathRowStatusTable, lpSonetPathProvEntry=lpSonetPathProvEntry, lpSonetTestRowStatusEntry=lpSonetTestRowStatusEntry, lpJT2TestBitErrorRate=lpJT2TestBitErrorRate, lpIndex=lpIndex, lpE1TestStorageType=lpE1TestStorageType, lpMemoryCapacityIndex=lpMemoryCapacityIndex, lpDS3DS1RowStatus=lpDS3DS1RowStatus, lpE3TestSetupTable=lpE3TestSetupTable, lpDS3DS1CommentText=lpDS3DS1CommentText, lpE1ChanProvEntry=lpE1ChanProvEntry, lpV35CommentText=lpV35CommentText, lpE1ChanTcIndex=lpE1ChanTcIndex, lpE3CellComponentName=lpE3CellComponentName, lpDS1AudioRowStatus=lpDS1AudioRowStatus, lpJT2LosStateChanges=lpJT2LosStateChanges, lpSonetRowStatusEntry=lpSonetRowStatusEntry, lpDS1TestTimeRemaining=lpDS1TestTimeRemaining, lpE1ChanTestIndex=lpE1ChanTestIndex, lpE3PathSevErroredSec=lpE3PathSevErroredSec, lpMainCardStatus=lpMainCardStatus, lpE1ChanCellStatsTable=lpE1ChanCellStatsTable, lpDS3AvailabilityStatus=lpDS3AvailabilityStatus, lpDS3DS1TestDataStartDelay=lpDS3DS1TestDataStartDelay, lpDS3DS1ChanTestCustomizedPattern=lpDS3DS1ChanTestCustomizedPattern, lpSdhTestBytesRx=lpSdhTestBytesRx, lpDS1ChanProvEntry=lpDS1ChanProvEntry, lpHssiStorageType=lpHssiStorageType, lpE1ChanTcSigOneValue=lpE1ChanTcSigOneValue, lpE1ChanIfAdminStatus=lpE1ChanIfAdminStatus, lpSdhPathApplicationFramerName=lpSdhPathApplicationFramerName, lpDS3DS1ChanCellAlarmActDelay=lpDS3DS1ChanCellAlarmActDelay, lpDS3TestType=lpDS3TestType, lpDS3CBitOperationalTable=lpDS3CBitOperationalTable, lpE1OperStatusTable=lpE1OperStatusTable, lp=lp, lpDS1TestRowStatus=lpDS1TestRowStatus, logicalProcessorMIB=logicalProcessorMIB, lpDS1ZeroCoding=lpDS1ZeroCoding, lpDS3DS1ChanUsageState=lpDS3DS1ChanUsageState, lpE1TestDataStartDelay=lpE1TestDataStartDelay, lpDS3DS1ChanOperStatusTable=lpDS3DS1ChanOperStatusTable, lpMemoryUsageAvgValue=lpMemoryUsageAvgValue, lpDS3DS1ChanCellUncorrectableHecErrors=lpDS3DS1ChanCellUncorrectableHecErrors, lpDS3DS1ChanTestIndex=lpDS3DS1ChanTestIndex, lpDS1ChanTestStorageType=lpDS1ChanTestStorageType, lpE3CellUncorrectableHecErrors=lpE3CellUncorrectableHecErrors, lpSdhTestStorageType=lpSdhTestStorageType, lpV35TestResultsEntry=lpV35TestResultsEntry, lpX21ReadyLineState=lpX21ReadyLineState, lpDS3TestAdminState=lpDS3TestAdminState, lpSdhPathTxRdi=lpSdhPathTxRdi, lpSdhLineSevErroredSec=lpSdhLineSevErroredSec, lpE1MultifrmLofAlarm=lpE1MultifrmLofAlarm, lpV35StandbyStatus=lpV35StandbyStatus, lpDS3TestBitErrorRate=lpDS3TestBitErrorRate, lpSdhOperTable=lpSdhOperTable, lpTimeInterval=lpTimeInterval, lpDS1IfEntryTable=lpDS1IfEntryTable, lpE3G832FarEndSefAisSec=lpE3G832FarEndSefAisSec, lpJT2=lpJT2, lpMemoryUsageTable=lpMemoryUsageTable, lpDS3ControlStatus=lpDS3ControlStatus, lpV35DataTransferLineState=lpV35DataTransferLineState, lpDS1ChanStateEntry=lpDS1ChanStateEntry, lpDS3DS1CidDataEntry=lpDS3DS1CidDataEntry, lpDS3DS1ChanAdminInfoTable=lpDS3DS1ChanAdminInfoTable, lpDS3DS1RowStatusTable=lpDS3DS1RowStatusTable, lpSdhPathCellOperTable=lpSdhPathCellOperTable, lpJT2TestComponentName=lpJT2TestComponentName, lpX21RowStatus=lpX21RowStatus, lpE3TestTimeRemaining=lpE3TestTimeRemaining, lpSdhLineCodeViolations=lpSdhLineCodeViolations, lpJT2TestPurpose=lpJT2TestPurpose, lpDS1RowStatusEntry=lpDS1RowStatusEntry, lpDS3CellCorrectSingleBitHeaderErrors=lpDS3CellCorrectSingleBitHeaderErrors, lpDS3CellStatsEntry=lpDS3CellStatsEntry, lpE1ChanCellSevErroredSec=lpE1ChanCellSevErroredSec, lpV35AdminInfoTable=lpV35AdminInfoTable, lpE3ProceduralStatus=lpE3ProceduralStatus, lpDS1ChanTcIndex=lpDS1ChanTcIndex, lpDS3TestStateEntry=lpDS3TestStateEntry, lpX21TestIndex=lpX21TestIndex, lpSdhPathProvTable=lpSdhPathProvTable, lpDS3PlcpFarEndErrorFreeSec=lpDS3PlcpFarEndErrorFreeSec, lpDS3DS1=lpDS3DS1, lpSdhPathCellReceiveCellUtilization=lpSdhPathCellReceiveCellUtilization, lpSdhTestAdminState=lpSdhTestAdminState, lpDS1TestBitsTx=lpDS1TestBitsTx, lpSonetPathIfEntryEntry=lpSonetPathIfEntryEntry, lpDS3PlcpRowStatusEntry=lpDS3PlcpRowStatusEntry, lpX21TestBytesTx=lpX21TestBytesTx, lpJT2IfEntryEntry=lpJT2IfEntryEntry, lpDS1TestUsageState=lpDS1TestUsageState, lpSonetAdminInfoEntry=lpSonetAdminInfoEntry, lpSonetTestType=lpSonetTestType, lpE3TestBitErrorRate=lpE3TestBitErrorRate, lpSonetSectErroredSec=lpSonetSectErroredSec, lpCpuUtilAvgMax=lpCpuUtilAvgMax, lpSonetFarEndLineAisSec=lpSonetFarEndLineAisSec, logicalProcessorGroupBE01=logicalProcessorGroupBE01, lpE1ChanOperTable=lpE1ChanOperTable, lpDS3CidDataEntry=lpDS3CidDataEntry, lpDS3ProvTable=lpDS3ProvTable, lpSdhTestPurpose=lpSdhTestPurpose, lpDS3CBit=lpDS3CBit, lpE3Plcp=lpE3Plcp, lpE3PlcpSevErroredSec=lpE3PlcpSevErroredSec, lpE1ChanTestFrmTx=lpE1ChanTestFrmTx, lpDS3CBitComponentName=lpDS3CBitComponentName, lpE3TxRai=lpE3TxRai, lpDS3DS1StatsEntry=lpDS3DS1StatsEntry, lpSonetLineAisSec=lpSonetLineAisSec, lpE1ChanTest=lpE1ChanTest, lpSdhPathRxRfiAlarm=lpSdhPathRxRfiAlarm, lpDS3PathFailures=lpDS3PathFailures, lpX21TestErroredFrmRx=lpX21TestErroredFrmRx, lpE1TxAisAlarm=lpE1TxAisAlarm, lpE3CellAlarmActDelay=lpE3CellAlarmActDelay, lpJT2Vendor=lpJT2Vendor, lpHssiAdminInfoTable=lpHssiAdminInfoTable, lpE1AvailabilityStatus=lpE1AvailabilityStatus, lpDS1ChanTc=lpDS1ChanTc, lpV35AvailabilityStatus=lpV35AvailabilityStatus, lpSdhLosAlarm=lpSdhLosAlarm, lpSdhPathCellRowStatusTable=lpSdhPathCellRowStatusTable, lpJT2TxAisPhysicalAlarm=lpJT2TxAisPhysicalAlarm, lpHssiTestAdminState=lpHssiTestAdminState, lpDS3PlcpFarEndSevErroredSec=lpDS3PlcpFarEndSevErroredSec, lpE3G832ProvisionedTable=lpE3G832ProvisionedTable, lpDS1DspComponentName=lpDS1DspComponentName, lpHssiStateEntry=lpHssiStateEntry, lpE3AvailabilityStatus=lpE3AvailabilityStatus, lpJT2OperStatusEntry=lpJT2OperStatusEntry, lpDS3DS1ChanCellIndex=lpDS3DS1ChanCellIndex, lpHssiRowStatusEntry=lpHssiRowStatusEntry, lpDS3OperationalState=lpDS3OperationalState, lpSdhPathAlarmStatus=lpSdhPathAlarmStatus, lpV35ActualTxLineSpeed=lpV35ActualTxLineSpeed, lpE1ChanCellUncorrectableHecErrors=lpE1ChanCellUncorrectableHecErrors, lpSdhPathIndex=lpSdhPathIndex, lpE3CellOperTable=lpE3CellOperTable, lpDS3LineSevErroredSec=lpDS3LineSevErroredSec, lpJT2StateTable=lpJT2StateTable, lpSonet=lpSonet, lpDS3DS1ProceduralStatus=lpDS3DS1ProceduralStatus, lpDS1ErrorFreeSec=lpDS1ErrorFreeSec, lpDS1TestType=lpDS1TestType, lpE1RaiDeclareAlarmTime=lpE1RaiDeclareAlarmTime, lpE1UnavailSec=lpE1UnavailSec, lpSonetPathIfEntryTable=lpSonetPathIfEntryTable, lpSdhPathOperTable=lpSdhPathOperTable, lpDS3StateEntry=lpDS3StateEntry, lpDS1ChanTestElapsedTime=lpDS1ChanTestElapsedTime, lpJT2TestErroredFrmRx=lpJT2TestErroredFrmRx, lpE1LofAlarm=lpE1LofAlarm, lpSonetTestRowStatusTable=lpSonetTestRowStatusTable, lpSonetFarEndLineErrorFreeSec=lpSonetFarEndLineErrorFreeSec, lpDS1ChanCellComponentName=lpDS1ChanCellComponentName, lpE3PlcpStatsTable=lpE3PlcpStatsTable, lpE3PlcpUnavailSec=lpE3PlcpUnavailSec, lpSonetPathSignalLabelMismatch=lpSonetPathSignalLabelMismatch, lpDS1ChanTestTimeRemaining=lpDS1ChanTestTimeRemaining, lpDS3DS1ChanIfEntryTable=lpDS3DS1ChanIfEntryTable, lpHssiTestUsageState=lpHssiTestUsageState, lpE1ChanTestFrmRx=lpE1ChanTestFrmRx, lpSonetProvTable=lpSonetProvTable, lpDS1TestStorageType=lpDS1TestStorageType, lpX21IfAdminStatus=lpX21IfAdminStatus, lpE3TestResultsEntry=lpE3TestResultsEntry, lpE1ChanTestErroredFrmRx=lpE1ChanTestErroredFrmRx, lpE3=lpE3, lpE3Test=lpE3Test, lpDS1StateTable=lpDS1StateTable, lpSonetSectSevErroredFrmSec=lpSonetSectSevErroredFrmSec, lpDS3DS1ChanTestUsageState=lpDS3DS1ChanTestUsageState, lpE1ChanCidDataTable=lpE1ChanCidDataTable, lpHssiTestCustomizedPattern=lpHssiTestCustomizedPattern, lpDS1ChanTestPurpose=lpDS1ChanTestPurpose)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpDS3TxRai=lpDS3TxRai, lpDS3AdminInfoEntry=lpDS3AdminInfoEntry, lpDS1ChanTestStateEntry=lpDS1ChanTestStateEntry, lpE1ChanTestCustomizedPattern=lpE1ChanTestCustomizedPattern, lpDS3PlcpStatsTable=lpDS3PlcpStatsTable, lpE3TestFrmTx=lpE3TestFrmTx, lpV35TestRowStatusEntry=lpV35TestRowStatusEntry, lpJT2TestFrmRx=lpJT2TestFrmRx, lpDS3TestSetupEntry=lpDS3TestSetupEntry, lpDS3CbitParity=lpDS3CbitParity, lpX21TestSetupTable=lpX21TestSetupTable, lpDS3DS1StorageType=lpDS3DS1StorageType, lpHssiTest=lpHssiTest, lpDS3DS1ChanOperationalState=lpDS3DS1ChanOperationalState, lpE3TestPurpose=lpE3TestPurpose, lpHssiCidDataTable=lpHssiCidDataTable, lpDS1AudioRowStatusTable=lpDS1AudioRowStatusTable, lpDS1Audio=lpDS1Audio, lpJT2RxAisPayloadAlarm=lpJT2RxAisPayloadAlarm, lpDS3DS1ChanTcEgressConditioning=lpDS3DS1ChanTcEgressConditioning, lpSdhPathSignalLabelMismatch=lpSdhPathSignalLabelMismatch, lpDS3DS1Test=lpDS3DS1Test, lpX21CustomerIdentifier=lpX21CustomerIdentifier, lpDS3DS1ChanAdminState=lpDS3DS1ChanAdminState, lpDS3StandbyStatus=lpDS3StandbyStatus, lpE3SnmpOperStatus=lpE3SnmpOperStatus, lpE1Index=lpE1Index, lpJT2TestSetupEntry=lpJT2TestSetupEntry, lpJT2IfIndex=lpJT2IfIndex, lpX21Index=lpX21Index, lpDS1ChanTcRowStatusTable=lpDS1ChanTcRowStatusTable, lpE1ChanTestElapsedTime=lpE1ChanTestElapsedTime, lpHssiDataXferStateChanges=lpHssiDataXferStateChanges, lpSonetPathPathFailures=lpSonetPathPathFailures, lpJT2ApplicationFramerName=lpJT2ApplicationFramerName, lpMemoryUsageAvgMinEntry=lpMemoryUsageAvgMinEntry, lpDS3DS1Index=lpDS3DS1Index, lpDS3PathSevErroredSec=lpDS3PathSevErroredSec, lpSonetTestStorageType=lpSonetTestStorageType, lpDS1LineLength=lpDS1LineLength, lpX21DteDataClockSource=lpX21DteDataClockSource, lpSdhOperStatusTable=lpSdhOperStatusTable, lpSonetTestFrmSize=lpSonetTestFrmSize, lpDS1TestComponentName=lpDS1TestComponentName, lpE1ProceduralStatus=lpE1ProceduralStatus, lpHssiApplicationFramerName=lpHssiApplicationFramerName, lpDS3DS1ChanTestFrmTx=lpDS3DS1ChanTestFrmTx, lpSonetPathCellStatsTable=lpSonetPathCellStatsTable, lpV35TestIndex=lpV35TestIndex, lpDS1BpvErrors=lpDS1BpvErrors, lpSonetRowStatus=lpSonetRowStatus, lpDS3PlcpComponentName=lpDS3PlcpComponentName, lpDS3DS1RunningTime=lpDS3DS1RunningTime, lpDS3PathSefAisSec=lpDS3PathSefAisSec, lpDS3DS1ChanCellTransmitCellUtilization=lpDS3DS1ChanCellTransmitCellUtilization, lpV35IfAdminStatus=lpV35IfAdminStatus, lpDS1ChanCellIndex=lpDS1ChanCellIndex, lpE1ChanTcSigOneEntry=lpE1ChanTcSigOneEntry, lpDS1ChanCellReceiveCellUtilization=lpDS1ChanCellReceiveCellUtilization, lpX21AvailabilityStatus=lpX21AvailabilityStatus, lpMsgBlockUsageAvg=lpMsgBlockUsageAvg, lpV35AlarmStatus=lpV35AlarmStatus, lpSdhTestResultsEntry=lpSdhTestResultsEntry, lpJT2CellSevErroredSec=lpJT2CellSevErroredSec, lpE1DspComponentName=lpE1DspComponentName, lpE1ChanIfIndex=lpE1ChanIfIndex, lpHssiAlarmStatus=lpHssiAlarmStatus, lpDS1ChanIfIndex=lpDS1ChanIfIndex, lpX21IfEntryEntry=lpX21IfEntryEntry, lpE1CidDataTable=lpE1CidDataTable, lpJT2CellTransmitCellUtilization=lpJT2CellTransmitCellUtilization, lpX21AlarmStatus=lpX21AlarmStatus, lpCpuUtilAvgMin=lpCpuUtilAvgMin, lpE1TestCustomizedPattern=lpE1TestCustomizedPattern, lpE3PlcpRxRaiAlarm=lpE3PlcpRxRaiAlarm, lpSonetPathPathCodeViolations=lpSonetPathPathCodeViolations, lpSdhIfAdminStatus=lpSdhIfAdminStatus, lpSdhFarEndLineAisSec=lpSdhFarEndLineAisSec, lpDS1ChanTestUsageState=lpDS1ChanTestUsageState, lpE1ChanAdminState=lpE1ChanAdminState, lpHssi=lpHssi, lpEngDsOvStorageType=lpEngDsOvStorageType, lpE3IfAdminStatus=lpE3IfAdminStatus, lpSonetPathOperTable=lpSonetPathOperTable, lpE3PlcpOperationalTable=lpE3PlcpOperationalTable, lpSdhStorageType=lpSdhStorageType, lpHssiTestDataStartDelay=lpHssiTestDataStartDelay, lpCustomerIdentifier=lpCustomerIdentifier, lpSdhPath=lpSdhPath, lpDS1ChanControlStatus=lpDS1ChanControlStatus, lpHssiTestBytesTx=lpHssiTestBytesTx, lpE1TestIndex=lpE1TestIndex, lpDS3DS1ChanOperTable=lpDS3DS1ChanOperTable, lpSdhPathProceduralStatus=lpSdhPathProceduralStatus, lpDS3CBitStatsEntry=lpDS3CBitStatsEntry, lpE3LosAlarm=lpE3LosAlarm, lpHssiVendor=lpHssiVendor, lpDS3DS1ChanCellOperTable=lpDS3DS1ChanCellOperTable, lpE3TestDisplayInterval=lpE3TestDisplayInterval, lpDS1DspIndex=lpDS1DspIndex, lpDS3DS1ChanApplicationFramerName=lpDS3DS1ChanApplicationFramerName, lpE1TestSetupEntry=lpE1TestSetupEntry, lpDS3AdminInfoTable=lpDS3AdminInfoTable, lpDS3DS1TestFrmRx=lpDS3DS1TestFrmRx, lpSdhPathCellStatsTable=lpSdhPathCellStatsTable, lpDS1ChanAlarmStatus=lpDS1ChanAlarmStatus, lpV35StateEntry=lpV35StateEntry, lpDS1TestOperationalState=lpDS1TestOperationalState, lpE1ChanStorageType=lpE1ChanStorageType, lpSdhFarEndLineCodeViolations=lpSdhFarEndLineCodeViolations, lpDS3DS1ChanTimeslots=lpDS3DS1ChanTimeslots, lpDS1ChanTestBitsRx=lpDS1ChanTestBitsRx, lpDS3StorageType=lpDS3StorageType, lpSonetPathCellIndex=lpSonetPathCellIndex, lpHssiIfIndex=lpHssiIfIndex, lpSdhPathIfEntryEntry=lpSdhPathIfEntryEntry, lpDS3DS1ChanRowStatus=lpDS3DS1ChanRowStatus, lpRowStatusEntry=lpRowStatusEntry, lpE1StatsEntry=lpE1StatsEntry, lpSonetVendor=lpSonetVendor, lpDS1FrmErrors=lpDS1FrmErrors, lpDS1ChanTestResultsEntry=lpDS1ChanTestResultsEntry, lpLogicalProcessorType=lpLogicalProcessorType, lpSonetAvailabilityStatus=lpSonetAvailabilityStatus, lpHssiTestElapsedTime=lpHssiTestElapsedTime, lpV35ControlStatus=lpV35ControlStatus, lpAdminState=lpAdminState, lpSdhAdminInfoEntry=lpSdhAdminInfoEntry, lpSonetTestBitsTx=lpSonetTestBitsTx, lpE3TestSetupEntry=lpE3TestSetupEntry, lpSonetStandbyStatus=lpSonetStandbyStatus, lpSonetTestSetupTable=lpSonetTestSetupTable, lpX21TestBitsTx=lpX21TestBitsTx, lpMsgBlockCapacity=lpMsgBlockCapacity, lpV35TestRowStatus=lpV35TestRowStatus, lpV35TestBytesRx=lpV35TestBytesRx, lpE3G832ComponentName=lpE3G832ComponentName, lpV35TestOperationalState=lpV35TestOperationalState, lpDS3IfIndex=lpDS3IfIndex, lpSonetLineSevErroredSec=lpSonetLineSevErroredSec, lpSonetPathIndex=lpSonetPathIndex, lpDS1LosAlarm=lpDS1LosAlarm, lpDS3DS1ChanTestStateEntry=lpDS3DS1ChanTestStateEntry, lpSonetUnusableTxClockRefAlarm=lpSonetUnusableTxClockRefAlarm, lpV35CidDataEntry=lpV35CidDataEntry, lpJT2CellStorageType=lpJT2CellStorageType, lpJT2AlarmStatus=lpJT2AlarmStatus, lpSdhAvailabilityStatus=lpSdhAvailabilityStatus, lpE1AlarmStatus=lpE1AlarmStatus, lpDS1ChanCellCorrectSingleBitHeaderErrors=lpDS1ChanCellCorrectSingleBitHeaderErrors, lpSdhRunningTime=lpSdhRunningTime, lpE3StateTable=lpE3StateTable, lpHssiTestCauseOfTermination=lpHssiTestCauseOfTermination, lpE3TestFrmSize=lpE3TestFrmSize, lpSdhTestBytesTx=lpSdhTestBytesTx, lpSonetRunningTime=lpSonetRunningTime, lpJT2RunningTime=lpJT2RunningTime, lpDS3DS1ChanIndex=lpDS3DS1ChanIndex, lpE3G832RowStatusEntry=lpE3G832RowStatusEntry, lpMsgBlockUsageAvgMin=lpMsgBlockUsageAvgMin, lpDS3TestFrmRx=lpDS3TestFrmRx, lpE1ChanTestFrmPatternType=lpE1ChanTestFrmPatternType, lpDS3DS1ChanCellStorageType=lpDS3DS1ChanCellStorageType, lpDS3DS1ChanTcIngressConditioning=lpDS3DS1ChanTcIngressConditioning, lpX21TestElapsedTime=lpX21TestElapsedTime, lpDS1ChanCellRowStatusTable=lpDS1ChanCellRowStatusTable, lpDS3DS1ChanTcSigTwoEntry=lpDS3DS1ChanTcSigTwoEntry, lpDS3DS1ChanProvEntry=lpDS3DS1ChanProvEntry, lpDS3DS1ChanTcSigTwoIndex=lpDS3DS1ChanTcSigTwoIndex, lpDS1OperStatusTable=lpDS1OperStatusTable, lpSonetLosAlarm=lpSonetLosAlarm, lpE1Audio=lpE1Audio, lpDS1ProceduralStatus=lpDS1ProceduralStatus, lpX21ApplicationFramerName=lpX21ApplicationFramerName, lpMemoryUsageAvgTable=lpMemoryUsageAvgTable, lpDS3TestDataStartDelay=lpDS3TestDataStartDelay, lpE1ChanStandbyStatus=lpE1ChanStandbyStatus, lpSonetTxRdi=lpSonetTxRdi, lpDS3Vendor=lpDS3Vendor, lpDS3DS1ChanOperEntry=lpDS3DS1ChanOperEntry, lpDS1ChanTestCustomizedPattern=lpDS1ChanTestCustomizedPattern, lpE1ChanCell=lpE1ChanCell, lpDS1ChanActualChannelSpeed=lpDS1ChanActualChannelSpeed, lpUtilEntry=lpUtilEntry, lpMemoryCapacityValue=lpMemoryCapacityValue, lpE1TestDisplayInterval=lpE1TestDisplayInterval, lpJT2TestBytesTx=lpJT2TestBytesTx, lpSdhPathCellSevErroredSec=lpSdhPathCellSevErroredSec, lpE1ChanCellScrambleCellPayload=lpE1ChanCellScrambleCellPayload, logicalProcessorCapabilities=logicalProcessorCapabilities, lpHssiRowStatus=lpHssiRowStatus, lpDS1LineType=lpDS1LineType, lpDS3TestRowStatusEntry=lpDS3TestRowStatusEntry, lpE1ChanCellProvEntry=lpE1ChanCellProvEntry, lpJT2AdminInfoEntry=lpJT2AdminInfoEntry, lpV35CidDataTable=lpV35CidDataTable, lpE3Mapping=lpE3Mapping, lpDS1ChanTcSignalOneDuration=lpDS1ChanTcSignalOneDuration, lpV35SnmpOperStatus=lpV35SnmpOperStatus, lpSonetTestFrmPatternType=lpSonetTestFrmPatternType, lpDS3DS1TestSetupTable=lpDS3DS1TestSetupTable, lpHssiTestStateEntry=lpHssiTestStateEntry, lpE3TestResultsTable=lpE3TestResultsTable, lpE1ChanTcSigOneIndex=lpE1ChanTcSigOneIndex, lpDS3DS1TestAdminState=lpDS3DS1TestAdminState, lpDS1ChanTestType=lpDS1ChanTestType, lpE3G832FarEndErroredSec=lpE3G832FarEndErroredSec, lpSonetPathPathErrorFreeSec=lpSonetPathPathErrorFreeSec, lpDS1ChanTcProvEntry=lpDS1ChanTcProvEntry, lpDS1ChanCidDataTable=lpDS1ChanCidDataTable, lpE1ChanCellRowStatusEntry=lpE1ChanCellRowStatusEntry, lpDS3DS1ChanControlStatus=lpDS3DS1ChanControlStatus, lpSonetOperStatusEntry=lpSonetOperStatusEntry, lpSdhPathStandbyStatus=lpSdhPathStandbyStatus, lpDS3DS1StateTable=lpDS3DS1StateTable, lpSdhPathRowStatusEntry=lpSdhPathRowStatusEntry, lpE3G832UnexpectedPayloadType=lpE3G832UnexpectedPayloadType, lpE1ChanTcStorageType=lpE1ChanTcStorageType, lpSonetPathCellProvEntry=lpSonetPathCellProvEntry, lpDS3DS1ClockingSource=lpDS3DS1ClockingSource, lpDS3DS1ChanAlarmStatus=lpDS3DS1ChanAlarmStatus, lpE3LineLength=lpE3LineLength, lpDS3TestResultsEntry=lpDS3TestResultsEntry, lpSonetPathFarEndPathCodeViolations=lpSonetPathFarEndPathCodeViolations, lpSonetPathStateTable=lpSonetPathStateTable, lpJT2OperTable=lpJT2OperTable, lpX21LineState=lpX21LineState, lpE3ComponentName=lpE3ComponentName, lpDS1ProvEntry=lpDS1ProvEntry, lpE1DspRowStatusTable=lpE1DspRowStatusTable, lpDS3TestBytesRx=lpDS3TestBytesRx, lpJT2TestBitsRx=lpJT2TestBitsRx, lpE1ChanApplicationFramerName=lpE1ChanApplicationFramerName, lpJT2OperEntry=lpJT2OperEntry, lpHssiTestStateTable=lpHssiTestStateTable, lpE1ChanTcIngressConditioning=lpE1ChanTcIngressConditioning, lpX21TestSetupEntry=lpX21TestSetupEntry, lpSdhLineFailures=lpSdhLineFailures, lpDS1TestSetupTable=lpDS1TestSetupTable, lpE1ChanComponentName=lpE1ChanComponentName, lpSdhTestFrmPatternType=lpSdhTestFrmPatternType, lpDS3PlcpIndex=lpDS3PlcpIndex, lpX21ClockingSource=lpX21ClockingSource, lpJT2CellRowStatusTable=lpJT2CellRowStatusTable, lpDS3CBitFarEndUnavailSec=lpDS3CBitFarEndUnavailSec, lpDS3TestDuration=lpDS3TestDuration, lpV35TestErroredFrmRx=lpV35TestErroredFrmRx, lpV35LineStatusTimeOut=lpV35LineStatusTimeOut, lpE3CellOperEntry=lpE3CellOperEntry, lpDS3TxAis=lpDS3TxAis, lpE3CellStatsEntry=lpE3CellStatsEntry, lpX21AdminInfoTable=lpX21AdminInfoTable, lpDS3RowStatusEntry=lpDS3RowStatusEntry, lpSdhOperEntry=lpSdhOperEntry)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpHssiCidDataEntry=lpHssiCidDataEntry, lpDS3DS1TestFrmTx=lpDS3DS1TestFrmTx, lpSonetTestErroredFrmRx=lpSonetTestErroredFrmRx, lpDS3DS1AdminInfoTable=lpDS3DS1AdminInfoTable, lpDS3DS1Chan=lpDS3DS1Chan, lpDS3DS1ChanCellScrambleCellPayload=lpDS3DS1ChanCellScrambleCellPayload, lpE3TestBitsTx=lpE3TestBitsTx, lpDS3DS1ChanTestRowStatus=lpDS3DS1ChanTestRowStatus, lpE3StatsEntry=lpE3StatsEntry, lpHssiTestRowStatus=lpHssiTestRowStatus, lpDS1ChanCommentText=lpDS1ChanCommentText, lpDS3Plcp=lpDS3Plcp, lpE1IfIndex=lpE1IfIndex, lpMsgBlockUsage=lpMsgBlockUsage, lpE3TestCustomizedPattern=lpE3TestCustomizedPattern, lpV35TestBitsRx=lpV35TestBitsRx, lpSdhProceduralStatus=lpSdhProceduralStatus, lpV35TestFrmSize=lpV35TestFrmSize, lpSonetPathOperationalState=lpSonetPathOperationalState, lpDS1ChanTestBitsTx=lpDS1ChanTestBitsTx, lpDS1CustomerIdentifier=lpDS1CustomerIdentifier, lpSdhPathIfEntryTable=lpSdhPathIfEntryTable, lpJT2CellStatsEntry=lpJT2CellStatsEntry, lpDS3DS1TestStateTable=lpDS3DS1TestStateTable, lpE1ChanTcSigTwoEntry=lpE1ChanTcSigTwoEntry, lpDS3DS1ChanIfEntryEntry=lpDS3DS1ChanIfEntryEntry, lpE3G832StatsTable=lpE3G832StatsTable, lpDS1ChanTcSigTwoEntry=lpDS1ChanTcSigTwoEntry, lpDS1ChanOperStatusEntry=lpDS1ChanOperStatusEntry, lpHssiOperStatusTable=lpHssiOperStatusTable, lpDS3DS1ChanIfAdminStatus=lpDS3DS1ChanIfAdminStatus, lpDS3PlcpFarEndErroredSec=lpDS3PlcpFarEndErroredSec, lpDS3TestComponentName=lpDS3TestComponentName, lpX21LineStatusTimeOut=lpX21LineStatusTimeOut, lpE3PlcpOperationalEntry=lpE3PlcpOperationalEntry, lpDS3CBitLoopedbackToFarEnd=lpDS3CBitLoopedbackToFarEnd, lpSonetAlarmStatus=lpSonetAlarmStatus, lpE1UnknownStatus=lpE1UnknownStatus, lpDS1TestStateTable=lpDS1TestStateTable, lpSdhStateTable=lpSdhStateTable, lpDS3RxRaiAlarm=lpDS3RxRaiAlarm, lpE1SevErroredFrmSec=lpE1SevErroredFrmSec, lpE3G832TimingMarker=lpE3G832TimingMarker, lpSonetPathCellCorrectableHeaderErrors=lpSonetPathCellCorrectableHeaderErrors, lpX21StorageType=lpX21StorageType, lpDS3DS1ChanTcSigOneValue=lpDS3DS1ChanTcSigOneValue, lpDS3DS1ChanCellComponentName=lpDS3DS1ChanCellComponentName, lpV35DataXferStateChanges=lpV35DataXferStateChanges, lpDS1ChanCell=lpDS1ChanCell, lpSdhPathProvEntry=lpSdhPathProvEntry, lpEngDsOperEntry=lpEngDsOperEntry, lpDS3PlcpUnavailSec=lpDS3PlcpUnavailSec, lpE1ChanTestType=lpE1ChanTestType, lpSonetPathStatsTable=lpSonetPathStatsTable, lpE3CellScrambleCellPayload=lpE3CellScrambleCellPayload, lpE1TestFrmRx=lpE1TestFrmRx, lpDS3TestCustomizedPattern=lpDS3TestCustomizedPattern, lpX21CommentText=lpX21CommentText, lpE3ApplicationFramerName=lpE3ApplicationFramerName, lpDS1TestIndex=lpDS1TestIndex, lpSdhPathPathUnavailSec=lpSdhPathPathUnavailSec, lpE1ChanTestResultsTable=lpE1ChanTestResultsTable, lpV35CustomerIdentifier=lpV35CustomerIdentifier, lpJT2TestElapsedTime=lpJT2TestElapsedTime, lpDS1ChanAdminInfoTable=lpDS1ChanAdminInfoTable, lpDS1RunningTime=lpDS1RunningTime, lpSdhIfEntryTable=lpSdhIfEntryTable, lpSdhFarEndLineFailures=lpSdhFarEndLineFailures, lpE3ProvEntry=lpE3ProvEntry, lpX21TestStateEntry=lpX21TestStateEntry, lpDS3DS1ChanStateTable=lpDS3DS1ChanStateTable, lpDS3PlcpFarEndCodingViolations=lpDS3PlcpFarEndCodingViolations, lpX21TestOperationalState=lpX21TestOperationalState, lpDS3DS1ChanProvTable=lpDS3DS1ChanProvTable, lpDS1ChanUnknownStatus=lpDS1ChanUnknownStatus, lpX21Test=lpX21Test, lpDS1ChanTcEgressConditioning=lpDS1ChanTcEgressConditioning, lpHssiTestBitsTx=lpHssiTestBitsTx, lpE1CrcErrors=lpE1CrcErrors, lpDS3ComponentName=lpDS3ComponentName, lpE1ChanCellProvTable=lpE1ChanCellProvTable, lpDS1TestBitsRx=lpDS1TestBitsRx, lpDS3DS1ChanTcRowStatus=lpDS3DS1ChanTcRowStatus, lpE1AudioRowStatusEntry=lpE1AudioRowStatusEntry, lpDS3DS1ChanCellSevErroredSec=lpDS3DS1ChanCellSevErroredSec, lpHssiTestTimeRemaining=lpHssiTestTimeRemaining, lpDS1TestDuration=lpDS1TestDuration, lpJT2Cell=lpJT2Cell, lpDS1ChanTestComponentName=lpDS1ChanTestComponentName, lpProceduralStatus=lpProceduralStatus, lpUnknownStatus=lpUnknownStatus, lpMemoryUsageValue=lpMemoryUsageValue, lpSonetIndex=lpSonetIndex, lpDS3CBitLoopbackAtFarEndRequested=lpDS3CBitLoopbackAtFarEndRequested, lpDS3DS1ComponentName=lpDS3DS1ComponentName, lpSdhTestComponentName=lpSdhTestComponentName, lpE1ChanTcOpEntry=lpE1ChanTcOpEntry, lpJT2CidDataEntry=lpJT2CidDataEntry, lpE3PathCodeViolations=lpE3PathCodeViolations, lpE1TestAdminState=lpE1TestAdminState, lpSdhOperationalState=lpSdhOperationalState, lpE1OperStatusEntry=lpE1OperStatusEntry, lpE1TestTimeRemaining=lpE1TestTimeRemaining, lpJT2CellComponentName=lpJT2CellComponentName, lpE3AdminInfoEntry=lpE3AdminInfoEntry, lpHssiTestBytesRx=lpHssiTestBytesRx, lpHssiAdminInfoEntry=lpHssiAdminInfoEntry, lpDS1TestDataStartDelay=lpDS1TestDataStartDelay, lpV35ComponentName=lpV35ComponentName, lpE1ChanCommentText=lpE1ChanCommentText, lpEngDsOvRowStatus=lpEngDsOvRowStatus, lpDS3CBitFarEndCodeViolations=lpDS3CBitFarEndCodeViolations, lpJT2RowStatusTable=lpJT2RowStatusTable, lpE1AudioStorageType=lpE1AudioStorageType, lpSdhTestResultsTable=lpSdhTestResultsTable, lpHssiUsageState=lpHssiUsageState, lpDS3DS1SevErroredSec=lpDS3DS1SevErroredSec, lpX21LinkMode=lpX21LinkMode, lpDS3Index=lpDS3Index, lpDS3DS1ChanTestTimeRemaining=lpDS3DS1ChanTestTimeRemaining, lpV35EnableDynamicSpeed=lpV35EnableDynamicSpeed, lpE1ChanCellRowStatus=lpE1ChanCellRowStatus, lpSonetSectFailures=lpSonetSectFailures, lpDS1ChanTcSigTwoTable=lpDS1ChanTcSigTwoTable, lpDS3DS1TestComponentName=lpDS3DS1TestComponentName, lpX21TestType=lpX21TestType, lpE1ChanTestBitsTx=lpE1ChanTestBitsTx, lpJT2StorageType=lpJT2StorageType, lpDS3SnmpOperStatus=lpDS3SnmpOperStatus, lpSonetPathCidDataTable=lpSonetPathCidDataTable, lpDS3RxIdle=lpDS3RxIdle, lpX21UsageState=lpX21UsageState, lpDS1TxRaiAlarm=lpDS1TxRaiAlarm, lpDS3CBitCbitSevErroredSec=lpDS3CBitCbitSevErroredSec, lpSdhPathComponentName=lpSdhPathComponentName, lpDS1ChanTestFrmTx=lpDS1ChanTestFrmTx, lpSdhCidDataTable=lpSdhCidDataTable, lpDS3DS1UnavailSec=lpDS3DS1UnavailSec, lpSdhPathStateEntry=lpSdhPathStateEntry, lpE3G832OperationalEntry=lpE3G832OperationalEntry, lpDS3DS1TestErroredFrmRx=lpDS3DS1TestErroredFrmRx, lpE1StatsTable=lpE1StatsTable, lpV35RowStatusTable=lpV35RowStatusTable, lpE3CellReceiveCellUtilization=lpE3CellReceiveCellUtilization, lpDS3DS1ChanTcSigOneEntry=lpDS3DS1ChanTcSigOneEntry, lpX21CidDataEntry=lpX21CidDataEntry, lpDS3LineLength=lpDS3LineLength, lpE3TestRowStatusEntry=lpE3TestRowStatusEntry, lpSonetPathCellStatsEntry=lpSonetPathCellStatsEntry, lpDS3OperTable=lpDS3OperTable, lpDS1TestFrmPatternType=lpDS1TestFrmPatternType, lpE1SevErroredSec=lpE1SevErroredSec, lpDS1ChanCellRowStatusEntry=lpDS1ChanCellRowStatusEntry, lpDS3TestStorageType=lpDS3TestStorageType, lpV35TestFrmTx=lpV35TestFrmTx, lpDS3CellScrambleCellPayload=lpDS3CellScrambleCellPayload, lpJT2TestType=lpJT2TestType, lpOperEntry=lpOperEntry, lpSdhTestIndex=lpSdhTestIndex, lpDS3DS1RowStatusEntry=lpDS3DS1RowStatusEntry, lpSonetTestResultsTable=lpSonetTestResultsTable, lpSonetCommentText=lpSonetCommentText, lpDS3PlcpOperationalTable=lpDS3PlcpOperationalTable, lpE1ChanTcEgressConditioning=lpE1ChanTcEgressConditioning, lpDS3CommentText=lpDS3CommentText, lpDS3DS1TxRaiAlarm=lpDS3DS1TxRaiAlarm, lpMemoryUsageAvgMaxIndex=lpMemoryUsageAvgMaxIndex, lpSdhStandbyStatus=lpSdhStandbyStatus, lpMainCard=lpMainCard, lpV35TestCustomizedPattern=lpV35TestCustomizedPattern, lpE1Dsp=lpE1Dsp, lpJT2CellStatsTable=lpJT2CellStatsTable, lpDS3DS1OperStatusTable=lpDS3DS1OperStatusTable, lpSonetPathRxAisAlarm=lpSonetPathRxAisAlarm, lpE3RxAisAlarm=lpE3RxAisAlarm, lpE1TestSetupTable=lpE1TestSetupTable, lpJT2ErroredSec=lpJT2ErroredSec, lpDS3UnknownStatus=lpDS3UnknownStatus, lpDS3DS1ChanAvailabilityStatus=lpDS3DS1ChanAvailabilityStatus, lpE1ChanTcSigOneTable=lpE1ChanTcSigOneTable, lpE3PlcpStorageType=lpE3PlcpStorageType, lpDS3LosAlarm=lpDS3LosAlarm, lpCpuUtil=lpCpuUtil, lpCpuUtilAvg=lpCpuUtilAvg, lpSdhPathCellRowStatusEntry=lpSdhPathCellRowStatusEntry, lpX21OperationalState=lpX21OperationalState, lpHssiTestFrmTx=lpHssiTestFrmTx, lpE3PlcpStatsEntry=lpE3PlcpStatsEntry, lpDS3DS1ChanCellReceiveCellUtilization=lpDS3DS1ChanCellReceiveCellUtilization, lpDS3LineFailures=lpDS3LineFailures, lpSdhSnmpOperStatus=lpSdhSnmpOperStatus, lpDS3PathErroredSec=lpDS3PathErroredSec, lpHssiProvTable=lpHssiProvTable, lpSonetFarEndLineUnavailSec=lpSonetFarEndLineUnavailSec, lpE3StorageType=lpE3StorageType, lpE1TestBitErrorRate=lpE1TestBitErrorRate, lpE1ChanTcSignalOneDuration=lpE1ChanTcSignalOneDuration, lpHssiTestSetupTable=lpHssiTestSetupTable, lpJT2TestStorageType=lpJT2TestStorageType, lpDS3DS1ChanTimeslotDataRate=lpDS3DS1ChanTimeslotDataRate, lpE1ChanCellOperEntry=lpE1ChanCellOperEntry, lpV35=lpV35, lpE1TestCauseOfTermination=lpE1TestCauseOfTermination, lpEngDsOperTable=lpEngDsOperTable, lpSonetPathFarEndPathErroredSec=lpSonetPathFarEndPathErroredSec, lpDS3DS1ChanCellProvTable=lpDS3DS1ChanCellProvTable, lpE1DspIndex=lpE1DspIndex, lpSdhPathCellStorageType=lpSdhPathCellStorageType, lpX21ProvTable=lpX21ProvTable, lpSdhPathFarEndPathAisLopSec=lpSdhPathFarEndPathAisLopSec, lpDS1ChanOperationalState=lpDS1ChanOperationalState, lpAvailabilityStatus=lpAvailabilityStatus, lpE3TestFrmRx=lpE3TestFrmRx, lpDS3DS1ChanCidDataEntry=lpDS3DS1ChanCidDataEntry, lpE1AdminInfoEntry=lpE1AdminInfoEntry, lpJT2CellUncorrectableHecErrors=lpJT2CellUncorrectableHecErrors, lpE3CellRowStatusEntry=lpE3CellRowStatusEntry, lpSdhUsageState=lpSdhUsageState, lpV35TestCauseOfTermination=lpV35TestCauseOfTermination, lpDS3Test=lpDS3Test, lpV35IfEntryEntry=lpV35IfEntryEntry, lpJT2TestRowStatusEntry=lpJT2TestRowStatusEntry, lpDS3DS1IfEntryTable=lpDS3DS1IfEntryTable, lpDS3CellProvEntry=lpDS3CellProvEntry, lpJT2StatsTable=lpJT2StatsTable, lpDS3CellAlarmActDelay=lpDS3CellAlarmActDelay, lpE1TxMultifrmRaiAlarm=lpE1TxMultifrmRaiAlarm, lpE1ChanTimeslots=lpE1ChanTimeslots, lpDS3CBitRowStatusEntry=lpDS3CBitRowStatusEntry, lpE1ChanTestBytesTx=lpE1ChanTestBytesTx, lpDS1OperStatusEntry=lpDS1OperStatusEntry, lpDS3TestOperationalState=lpDS3TestOperationalState, lpDS1TestBytesRx=lpDS1TestBytesRx, lpSdhPathFarEndPathCodeViolations=lpSdhPathFarEndPathCodeViolations, lpDS3DS1TestResultsTable=lpDS3DS1TestResultsTable, lpJT2Index=lpJT2Index, lpEngDsComponentName=lpEngDsComponentName, lpSdhPathIfIndex=lpSdhPathIfIndex, lpDS3PlcpLofAlarm=lpDS3PlcpLofAlarm, lpE1E1OperTable=lpE1E1OperTable, lpSdhPathIfAdminStatus=lpSdhPathIfAdminStatus, lpDS3StatsEntry=lpDS3StatsEntry, lpDS1ClockingSource=lpDS1ClockingSource, lpE1RxMultifrmRaiAlarm=lpE1RxMultifrmRaiAlarm, lpE3LineSevErroredSec=lpE3LineSevErroredSec, lpE1ChanTestSetupEntry=lpE1ChanTestSetupEntry, lpE1ChanTestDataStartDelay=lpE1ChanTestDataStartDelay, lpDS3CellOperEntry=lpDS3CellOperEntry, lpSonetTestBitsRx=lpSonetTestBitsRx, lpDS3IfAdminStatus=lpDS3IfAdminStatus, lpX21TestFrmRx=lpX21TestFrmRx, lpSdhFarEndLineErrorFreeSec=lpSdhFarEndLineErrorFreeSec, lpE3ErrorFreeSec=lpE3ErrorFreeSec, lpE1OperTable=lpE1OperTable)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpDS3ClockingSource=lpDS3ClockingSource, lpSdhTxAis=lpSdhTxAis, lpSdhPathCellScrambleCellPayload=lpSdhPathCellScrambleCellPayload, lpHssiIfAdminStatus=lpHssiIfAdminStatus, lpJT2CellCorrectSingleBitHeaderErrors=lpJT2CellCorrectSingleBitHeaderErrors, lpE3OperEntry=lpE3OperEntry, lpE3PathSefAisSec=lpE3PathSefAisSec, lpUsageState=lpUsageState, lpE1ChanControlStatus=lpE1ChanControlStatus, lpSonetStateTable=lpSonetStateTable, lpE3CellSevErroredSec=lpE3CellSevErroredSec, lpJT2SnmpOperStatus=lpJT2SnmpOperStatus, lpSonetTestStateTable=lpSonetTestStateTable, lpE1TestRowStatusTable=lpE1TestRowStatusTable, lpE1OperationalState=lpE1OperationalState, lpHssiTestType=lpHssiTestType, lpDS1CrcErrors=lpDS1CrcErrors, lpE1ControlStatus=lpE1ControlStatus, lpE1ChanTcRowStatusTable=lpE1ChanTcRowStatusTable, lpJT2TestStateEntry=lpJT2TestStateEntry, lpE1ChanUsageState=lpE1ChanUsageState, lpDS3DS1ChanIfIndex=lpDS3DS1ChanIfIndex, lpSdhSectErroredSec=lpSdhSectErroredSec, lpDS1ChanStorageType=lpDS1ChanStorageType, lpE3CellLcdAlarm=lpE3CellLcdAlarm, lpSonetTestFrmTx=lpSonetTestFrmTx, lpMemoryCapacityTable=lpMemoryCapacityTable, lpDS1ChanTestErroredFrmRx=lpDS1ChanTestErroredFrmRx, lpSonetProceduralStatus=lpSonetProceduralStatus, lpDS3CellReceiveCellUtilization=lpDS3CellReceiveCellUtilization, lpDS3DS1SevErroredFrmSec=lpDS3DS1SevErroredFrmSec, lpX21StateEntry=lpX21StateEntry, lpSonetPathFarEndPathSevErroredSec=lpSonetPathFarEndPathSevErroredSec, lpSdhPathFarEndPathFailures=lpSdhPathFarEndPathFailures, lpSonetLineCodeViolations=lpSonetLineCodeViolations, lpE3LofAlarm=lpE3LofAlarm, lpHssiUnknownStatus=lpHssiUnknownStatus, lpDS3DS1RxRaiAlarm=lpDS3DS1RxRaiAlarm, lpDS1ChanCellUncorrectableHecErrors=lpDS1ChanCellUncorrectableHecErrors, lpDS1ChanProvTable=lpDS1ChanProvTable, lpJT2CellCorrectableHeaderErrors=lpJT2CellCorrectableHeaderErrors, lpDS3CBitFarEndErroredSec=lpDS3CBitFarEndErroredSec, lpDS3DS1AvailabilityStatus=lpDS3DS1AvailabilityStatus, lpJT2CellOperEntry=lpJT2CellOperEntry, lpE1Chan=lpE1Chan, lpSonetStatsEntry=lpSonetStatsEntry, lpMemoryUsageAvgMaxValue=lpMemoryUsageAvgMaxValue, lpDS3OperStatusEntry=lpDS3OperStatusEntry, lpSdhPathCellUncorrectableHecErrors=lpSdhPathCellUncorrectableHecErrors, lpDS3TestDisplayInterval=lpDS3TestDisplayInterval, lpJT2FrameErrors=lpJT2FrameErrors, lpX21ActualTxLineSpeed=lpX21ActualTxLineSpeed, lpSdhTestSetupEntry=lpSdhTestSetupEntry, lpDS3TxIdle=lpDS3TxIdle, lpDS3DS1ChanTestSetupTable=lpDS3DS1ChanTestSetupTable, lpE3G832FarEndUnavailSec=lpE3G832FarEndUnavailSec, lpE1ChanCellIndex=lpE1ChanCellIndex, lpX21TestPurpose=lpX21TestPurpose, lpJT2RxRaiAlarm=lpJT2RxRaiAlarm, lpDS3IfEntryEntry=lpDS3IfEntryEntry, lpE1ChanAvailabilityStatus=lpE1ChanAvailabilityStatus, lpDS3TestFrmSize=lpDS3TestFrmSize, lpJT2IfEntryTable=lpJT2IfEntryTable, lpSonetCustomerIdentifier=lpSonetCustomerIdentifier, lpJT2TestStateTable=lpJT2TestStateTable, lpE1ChanTcRowStatusEntry=lpE1ChanTcRowStatusEntry, lpDS3DS1ChanCellRowStatusEntry=lpDS3DS1ChanCellRowStatusEntry, lpDS1ChanTestStateTable=lpDS1ChanTestStateTable, lpHssiProvEntry=lpHssiProvEntry, lpE1ProvTable=lpE1ProvTable, lpSonetPathTxAis=lpSonetPathTxAis, lpJT2CellRowStatusEntry=lpJT2CellRowStatusEntry, lpE3TestIndex=lpE3TestIndex, lpDS3DS1OperEntry=lpDS3DS1OperEntry, lpDS3DS1ChanTestDuration=lpDS3DS1ChanTestDuration, lpE3PlcpFarEndCodingViolations=lpE3PlcpFarEndCodingViolations, lpX21StandbyStatus=lpX21StandbyStatus, lpE1TestRowStatus=lpE1TestRowStatus, lpDS1ChanTcRowStatus=lpDS1ChanTcRowStatus, lpV35TestType=lpV35TestType, lpDS1Index=lpDS1Index, lpDS1CidDataEntry=lpDS1CidDataEntry, lpDS1ChanTcSigOneTable=lpDS1ChanTcSigOneTable, lpSdhAlarmStatus=lpSdhAlarmStatus, lpJT2TestResultsTable=lpJT2TestResultsTable, lpSonetTestElapsedTime=lpSonetTestElapsedTime, lpSdhTestBitErrorRate=lpSdhTestBitErrorRate, lpHssiDataTransferLineState=lpHssiDataTransferLineState, lpDS3TestFrmPatternType=lpDS3TestFrmPatternType, lpSonetPathRxRfiAlarm=lpSonetPathRxRfiAlarm, lpSdhIfEntryEntry=lpSdhIfEntryEntry, lpSdhFarEndLineSevErroredSec=lpSdhFarEndLineSevErroredSec, lpJT2TestTimeRemaining=lpJT2TestTimeRemaining, lpE3StandbyStatus=lpE3StandbyStatus, lpDS3DS1OperStatusEntry=lpDS3DS1OperStatusEntry, lpE1ClockingSource=lpE1ClockingSource, lpSdhTestFrmRx=lpSdhTestFrmRx, lpJT2LosAlarm=lpJT2LosAlarm, lpDS3DS1TestRowStatusTable=lpDS3DS1TestRowStatusTable, lpSdhPathCellComponentName=lpSdhPathCellComponentName, lpE1TestUsageState=lpE1TestUsageState, lpSdhSectCodeViolations=lpSdhSectCodeViolations, lpDS3DS1TestBitsTx=lpDS3DS1TestBitsTx, lpHssiTestComponentName=lpHssiTestComponentName, lpJT2UnavailSec=lpJT2UnavailSec, lpEngDsIndex=lpEngDsIndex, lpE1ChanTestSetupTable=lpE1ChanTestSetupTable, lpDS3DS1ChanSnmpOperStatus=lpDS3DS1ChanSnmpOperStatus, lpE3IfEntryEntry=lpE3IfEntryEntry, lpX21ActualLinkMode=lpX21ActualLinkMode, lpSdhPathRowStatusTable=lpSdhPathRowStatusTable, lpE3IfIndex=lpE3IfIndex, lpEngDsOvIndex=lpEngDsOvIndex, lpSonetUsageState=lpSonetUsageState, lpControlStatus=lpControlStatus, lpDS3DS1ChanCommentText=lpDS3DS1ChanCommentText, lpE3TestRowStatusTable=lpE3TestRowStatusTable, lpX21TestBitsRx=lpX21TestBitsRx, lpE1TestComponentName=lpE1TestComponentName, lpDS1ChanTestFrmSize=lpDS1ChanTestFrmSize, lpDS1TestResultsEntry=lpDS1TestResultsEntry, lpDS3DS1ChanProceduralStatus=lpDS3DS1ChanProceduralStatus, lpCapEntry=lpCapEntry, lpE1ChanCidDataEntry=lpE1ChanCidDataEntry, lpDS1TestAdminState=lpDS1TestAdminState, lpX21TestDataStartDelay=lpX21TestDataStartDelay, lpSonetPathStatsEntry=lpSonetPathStatsEntry, lpE3PlcpLofAlarm=lpE3PlcpLofAlarm, lpV35TestDuration=lpV35TestDuration, lpDS1ChanTestDuration=lpDS1ChanTestDuration, lpDS1AudioStorageType=lpDS1AudioStorageType, lpE1ChanTcOpTable=lpE1ChanTcOpTable, lpDS1ChanTestResultsTable=lpDS1ChanTestResultsTable, lpDS1ChanRowStatusEntry=lpDS1ChanRowStatusEntry, lpV35TestFrmRx=lpV35TestFrmRx, lpSonetRxRfiAlarm=lpSonetRxRfiAlarm, lpE3StatsTable=lpE3StatsTable, lpHssiAvailabilityStatus=lpHssiAvailabilityStatus, lpDS3DS1ChanOperStatusEntry=lpDS3DS1ChanOperStatusEntry, lpE3TestType=lpE3TestType, lpJT2CellProvEntry=lpJT2CellProvEntry, lpE3PathErroredSec=lpE3PathErroredSec, lpJT2TestAdminState=lpJT2TestAdminState, lpSdhAdminState=lpSdhAdminState, lpDS3DS1TestBitErrorRate=lpDS3DS1TestBitErrorRate, lpE3G832FarEndErrorFreeSec=lpE3G832FarEndErrorFreeSec, lpSonetSectSevErroredSec=lpSonetSectSevErroredSec, lpE3CellStorageType=lpE3CellStorageType, lpHssiTestResultsTable=lpHssiTestResultsTable, lpDS1=lpDS1, lpDS3DS1IfAdminStatus=lpDS3DS1IfAdminStatus, lpE1RaiClearAlarmTime=lpE1RaiClearAlarmTime, lpDS1ChanTcSigTwoIndex=lpDS1ChanTcSigTwoIndex, lpSonetPathCidDataEntry=lpSonetPathCidDataEntry, lpSonetPathCellAlarmActDelay=lpSonetPathCellAlarmActDelay, lpDS3TestElapsedTime=lpDS3TestElapsedTime, lpE1ChanTestResultsEntry=lpE1ChanTestResultsEntry, lpX21LineTerminationRequired=lpX21LineTerminationRequired, lpHssiTestRowStatusEntry=lpHssiTestRowStatusEntry, lpDS1TestErroredFrmRx=lpDS1TestErroredFrmRx, logicalProcessorGroupBE01A=logicalProcessorGroupBE01A, lpX21EnableDynamicSpeed=lpX21EnableDynamicSpeed, lpE3PlcpCodingViolations=lpE3PlcpCodingViolations, lpE3UnknownStatus=lpE3UnknownStatus, lpE3LinkAlarmScanInterval=lpE3LinkAlarmScanInterval, lpDS1ChanCellCorrectableHeaderErrors=lpDS1ChanCellCorrectableHeaderErrors, lpE1TxRaiAlarm=lpE1TxRaiAlarm, lpDS1SlipErrors=lpDS1SlipErrors, lpX21TestDisplayInterval=lpX21TestDisplayInterval, lpX21ProvEntry=lpX21ProvEntry, lpSdhErrorFreeSec=lpSdhErrorFreeSec, lpE1ChanRowStatusTable=lpE1ChanRowStatusTable, lpDS1Chan=lpDS1Chan, lpSonetPathApplicationFramerName=lpSonetPathApplicationFramerName, lpDS3PlcpCodingViolations=lpDS3PlcpCodingViolations, lpE3TestStorageType=lpE3TestStorageType, lpDS1Vendor=lpDS1Vendor, lpDS1ChanOperTable=lpDS1ChanOperTable, lpDS3DS1ChanCellStatsEntry=lpDS3DS1ChanCellStatsEntry, lpSdhPathSnmpOperStatus=lpSdhPathSnmpOperStatus, lpSonetPathCellSevErroredSec=lpSonetPathCellSevErroredSec, lpSdhPathPathErrorFreeSec=lpSdhPathPathErrorFreeSec, lpDS3CBitOperationalEntry=lpDS3CBitOperationalEntry, lpDS1ChanUsageState=lpDS1ChanUsageState, lpSonetFarEndLineErroredSec=lpSonetFarEndLineErroredSec, lpSonetPathCellCorrectSingleBitHeaderErrors=lpSonetPathCellCorrectSingleBitHeaderErrors, lpHssiTestBitErrorRate=lpHssiTestBitErrorRate, lpSonetPathStandbyStatus=lpSonetPathStandbyStatus, lpV35Index=lpV35Index, lpSonetSectLosSec=lpSonetSectLosSec, lpSonetPathStorageType=lpSonetPathStorageType, lpE1AudioComponentName=lpE1AudioComponentName, lpE1Vendor=lpE1Vendor, lpDS1ChanTestOperationalState=lpDS1ChanTestOperationalState, lpDS3DS1TestOperationalState=lpDS3DS1TestOperationalState, lpX21TestBytesRx=lpX21TestBytesRx, lpE1ChanAdminInfoEntry=lpE1ChanAdminInfoEntry, lpDS3DS1ChanTcStorageType=lpDS3DS1ChanTcStorageType, lpJT2SevErroredFrmSec=lpJT2SevErroredFrmSec, lpV35IfIndex=lpV35IfIndex, lpJT2TestDisplayInterval=lpJT2TestDisplayInterval, lpJT2RxAisPhysicalAlarm=lpJT2RxAisPhysicalAlarm, lpE1ChanCellComponentName=lpE1ChanCellComponentName, lpHssiActualRxLineSpeed=lpHssiActualRxLineSpeed, lpLocalMsgBlockUsageAvg=lpLocalMsgBlockUsageAvg, lpMsgBlockUsageAvgMax=lpMsgBlockUsageAvgMax, lpE1ChanOperStatusTable=lpE1ChanOperStatusTable, lpE3PlcpFarEndSevErroredSec=lpE3PlcpFarEndSevErroredSec, lpDS3DS1ChanTestErroredFrmRx=lpDS3DS1ChanTestErroredFrmRx, lpSpareCard=lpSpareCard, lpDS1ChanTcReplacementData=lpDS1ChanTcReplacementData, lpJT2TestCauseOfTermination=lpJT2TestCauseOfTermination, lpSonetOperationalState=lpSonetOperationalState, lpE1IfEntryEntry=lpE1IfEntryEntry, lpSonetCidDataEntry=lpSonetCidDataEntry, lpDS1TxAisAlarm=lpDS1TxAisAlarm, lpE1ChanCellStorageType=lpE1ChanCellStorageType, lpE1TestDuration=lpE1TestDuration, lpE1AudioIndex=lpE1AudioIndex, lpE3CidDataTable=lpE3CidDataTable, lpDS3DS1IfEntryEntry=lpDS3DS1IfEntryEntry, lpDS3DS1TestResultsEntry=lpDS3DS1TestResultsEntry, lpV35TestPurpose=lpV35TestPurpose, lpJT2ControlStatus=lpJT2ControlStatus, lpE1TestFrmPatternType=lpE1TestFrmPatternType, lpE3TestDataStartDelay=lpE3TestDataStartDelay, lpE1LosStateChanges=lpE1LosStateChanges, lpDS3CellRowStatus=lpDS3CellRowStatus, lpJT2TestSetupTable=lpJT2TestSetupTable, lpJT2TestOperationalState=lpJT2TestOperationalState, lpE1IfEntryTable=lpE1IfEntryTable, lpSonetPathTxRdi=lpSonetPathTxRdi, lpE3TestFrmPatternType=lpE3TestFrmPatternType, lpSonetPathProceduralStatus=lpSonetPathProceduralStatus, lpDS1ChanTimeslotDataRate=lpDS1ChanTimeslotDataRate, lpSdhPathStateTable=lpSdhPathStateTable, lpE1RowStatusEntry=lpE1RowStatusEntry, lpV35OperationalState=lpV35OperationalState, lpE1ChanStateTable=lpE1ChanStateTable, lpDS3DS1TestCustomizedPattern=lpDS3DS1TestCustomizedPattern, lpSonetTxAis=lpSonetTxAis, lpDS3DS1UnknownStatus=lpDS3DS1UnknownStatus, lpSonetLofAlarm=lpSonetLofAlarm, lpDS1ChanAvailabilityStatus=lpDS1ChanAvailabilityStatus, lpDS3DS1ChanTcRowStatusEntry=lpDS3DS1ChanTcRowStatusEntry, lpHssiTestFrmRx=lpHssiTestFrmRx, lpSdhPathCustomerIdentifier=lpSdhPathCustomerIdentifier, lpE3AdminState=lpE3AdminState, lpJT2StateEntry=lpJT2StateEntry, lpSonetErrorFreeSec=lpSonetErrorFreeSec, lpJT2LofAlarm=lpJT2LofAlarm, lpE3G832Index=lpE3G832Index, lpJT2CrcErrors=lpJT2CrcErrors, lpX21TestTimeRemaining=lpX21TestTimeRemaining)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpSonetPathCellScrambleCellPayload=lpSonetPathCellScrambleCellPayload, lpDS1ChanCidDataEntry=lpDS1ChanCidDataEntry, lpDS1RxRaiAlarm=lpDS1RxRaiAlarm, lpSonetPathCellRowStatusTable=lpSonetPathCellRowStatusTable, lpDS3DS1ChanCellCorrectableHeaderErrors=lpDS3DS1ChanCellCorrectableHeaderErrors, lpV35TestAdminState=lpV35TestAdminState, lpHssiProceduralStatus=lpHssiProceduralStatus, lpSonetPathCellUncorrectableHecErrors=lpSonetPathCellUncorrectableHecErrors, lpHssiTestSetupEntry=lpHssiTestSetupEntry, lpV35TestStateTable=lpV35TestStateTable, lpDS3DS1ChanTestRowStatusTable=lpDS3DS1ChanTestRowStatusTable, lpDS3CBitIndex=lpDS3CBitIndex, lpSonetPathIfIndex=lpSonetPathIfIndex, lpHssiActualLinkMode=lpHssiActualLinkMode, lpDS3DS1ChanTestDataStartDelay=lpDS3DS1ChanTestDataStartDelay, lpSonetAdminState=lpSonetAdminState, lpE1ChanTcProvTable=lpE1ChanTcProvTable, lpSonetAdminInfoTable=lpSonetAdminInfoTable, lpDS1ChanTestFrmRx=lpDS1ChanTestFrmRx, lpSonetUnknownStatus=lpSonetUnknownStatus, lpE1ChanTestRowStatusTable=lpE1ChanTestRowStatusTable, lpE1ChanOperEntry=lpE1ChanOperEntry, lpDS1CommentText=lpDS1CommentText, lpHssiActualTxLineSpeed=lpHssiActualTxLineSpeed, lpE1ChanTcSigTwoTable=lpE1ChanTcSigTwoTable, lpJT2UsageState=lpJT2UsageState, lpE1ChanTestStorageType=lpE1ChanTestStorageType, lpE1TestBitsRx=lpE1TestBitsRx, lpX21TestRowStatusEntry=lpX21TestRowStatusEntry, lpE3Framing=lpE3Framing, lpE1CommentText=lpE1CommentText, lpDS3DS1TestTimeRemaining=lpDS3DS1TestTimeRemaining, lpV35TestBitsTx=lpV35TestBitsTx, lpX21DataTransferLineState=lpX21DataTransferLineState, lpSonetPathPathErroredSec=lpSonetPathPathErroredSec, lpEngDsRowStatus=lpEngDsRowStatus, lpDS3ErrorFreeSec=lpDS3ErrorFreeSec, lpSdhPathCellStatsEntry=lpSdhPathCellStatsEntry, lpDS1StatsEntry=lpDS1StatsEntry, lpV35Vendor=lpV35Vendor, lpDS3DS1ChanCellLcdAlarm=lpDS3DS1ChanCellLcdAlarm, lpDS1ChanTcIngressConditioning=lpDS1ChanTcIngressConditioning, logicalProcessorCapabilitiesBE=logicalProcessorCapabilitiesBE, lpDS3DS1ChanRowStatusTable=lpDS3DS1ChanRowStatusTable, lpJT2ComponentName=lpJT2ComponentName, lpE1ChanCustomerIdentifier=lpE1ChanCustomerIdentifier, lpDS3DS1ChanStorageType=lpDS3DS1ChanStorageType, lpSonetPathPathSevErroredSec=lpSonetPathPathSevErroredSec, lpE1ChanTestFrmSize=lpE1ChanTestFrmSize, lpSonetIfEntryTable=lpSonetIfEntryTable, lpX21DataXferStateChanges=lpX21DataXferStateChanges, lpDS3CBitRowStatusTable=lpDS3CBitRowStatusTable, lpEngDsAgentQueueSize=lpEngDsAgentQueueSize, lpDS1TestStateEntry=lpDS1TestStateEntry, lpDS3DS1ChanTest=lpDS3DS1ChanTest, lpV35TestUsageState=lpV35TestUsageState, lpSonetPathSnmpOperStatus=lpSonetPathSnmpOperStatus, lpSdhSectLosSec=lpSdhSectLosSec, lpX21IfIndex=lpX21IfIndex, lpEngDsRowStatusTable=lpEngDsRowStatusTable, lpJT2BpvErrors=lpJT2BpvErrors, lpMemoryUsageAvgMinIndex=lpMemoryUsageAvgMinIndex, lpSonetClockingSource=lpSonetClockingSource, lpSdhLineAisSec=lpSdhLineAisSec, lpSdhTestRowStatusTable=lpSdhTestRowStatusTable, lpDS3DS1ChanTestStorageType=lpDS3DS1ChanTestStorageType, lpDS1TestResultsTable=lpDS1TestResultsTable, lpHssiAdminState=lpHssiAdminState, lpDS3DS1ChanStateEntry=lpDS3DS1ChanStateEntry, lpDS3CellTransmitCellUtilization=lpDS3CellTransmitCellUtilization, lpMemoryUsageAvgEntry=lpMemoryUsageAvgEntry, lpSonetStorageType=lpSonetStorageType, lpE1ChanTc=lpE1ChanTc, lpHssiRowStatusTable=lpHssiRowStatusTable, lpMemoryUsageAvgMinTable=lpMemoryUsageAvgMinTable, lpSdhStatsEntry=lpSdhStatsEntry, lpE1TestErroredFrmRx=lpE1TestErroredFrmRx, lpX21TestFrmSize=lpX21TestFrmSize, lpSonetRxAisAlarm=lpSonetRxAisAlarm, lpDS3RxAisAlarm=lpDS3RxAisAlarm, lpE3TestBytesTx=lpE3TestBytesTx, lpE3CellRowStatusTable=lpE3CellRowStatusTable, lpDS1TestFrmSize=lpDS1TestFrmSize, lpActiveCard=lpActiveCard, lpDS1Test=lpDS1Test, lpDS3TestSetupTable=lpDS3TestSetupTable, lpJT2RowStatus=lpJT2RowStatus, lpSdhPathCellAlarmActDelay=lpSdhPathCellAlarmActDelay, lpE1ChanTestDisplayInterval=lpE1ChanTestDisplayInterval, lpJT2TestDuration=lpJT2TestDuration, lpSonetTestCauseOfTermination=lpSonetTestCauseOfTermination, lpJT2TestUsageState=lpJT2TestUsageState, lpE1ChanSnmpOperStatus=lpE1ChanSnmpOperStatus, lpDS3AlarmStatus=lpDS3AlarmStatus, lpSdhPathCell=lpSdhPathCell, lpE3G832OperationalTable=lpE3G832OperationalTable, lpE1ErroredSec=lpE1ErroredSec, lpE1ChanAlarmStatus=lpE1ChanAlarmStatus, lpDS1ChanIfAdminStatus=lpDS1ChanIfAdminStatus, lpDS1UnavailSec=lpDS1UnavailSec, lpDS3CellLcdAlarm=lpDS3CellLcdAlarm, lpHssiCommentText=lpHssiCommentText, lpDS3TestTimeRemaining=lpDS3TestTimeRemaining, lpDS3DS1TestIndex=lpDS3DS1TestIndex, lpDS3DS1ChanCell=lpDS3DS1ChanCell, lpE3PlcpIndex=lpE3PlcpIndex, lpStateTable=lpStateTable, lpE3G832FarEndCodeViolations=lpE3G832FarEndCodeViolations, lpHssiOperStatusEntry=lpHssiOperStatusEntry, lpE1ChanTimeslotDataRate=lpE1ChanTimeslotDataRate, lpDS1ChanAdminState=lpDS1ChanAdminState, lpE3LineErroredSec=lpE3LineErroredSec, lpSonetPathAlarmStatus=lpSonetPathAlarmStatus, lpSonetTest=lpSonetTest, lpE1AdminInfoTable=lpE1AdminInfoTable, lpE3CellTransmitCellUtilization=lpE3CellTransmitCellUtilization, lpDS1ChanOperEntry=lpDS1ChanOperEntry, lpDS1OperEntry=lpDS1OperEntry, lpSdhControlStatus=lpSdhControlStatus, lpOperTable=lpOperTable, lpE3TestAdminState=lpE3TestAdminState, lpDS1UsageState=lpDS1UsageState, lpDS3DS1UsageState=lpDS3DS1UsageState, lpDS3DS1ChanTcRowStatusTable=lpDS3DS1ChanTcRowStatusTable, lpJT2RowStatusEntry=lpJT2RowStatusEntry, lpE3CidDataEntry=lpE3CidDataEntry, lpDS1DspStorageType=lpDS1DspStorageType, lpE3ClockingSource=lpE3ClockingSource, lpEngDsOvProvTable=lpEngDsOvProvTable, lpSdhTestFrmTx=lpSdhTestFrmTx, lpE3LineLosSec=lpE3LineLosSec, lpDS1SnmpOperStatus=lpDS1SnmpOperStatus, lpX21TestAdminState=lpX21TestAdminState, lpSdhTestStateEntry=lpSdhTestStateEntry, lpDS1ChanTcRowStatusEntry=lpDS1ChanTcRowStatusEntry, lpE3PlcpErrorFreeSec=lpE3PlcpErrorFreeSec, lpE3CellStatsTable=lpE3CellStatsTable, lpV35OperEntry=lpV35OperEntry, lpJT2CellReceiveCellUtilization=lpJT2CellReceiveCellUtilization, lpV35RowStatus=lpV35RowStatus, lpDS3DS1TxAisAlarm=lpDS3DS1TxAisAlarm, lpSonetTestCustomizedPattern=lpSonetTestCustomizedPattern, lpSdhPathCellOperEntry=lpSdhPathCellOperEntry, lpX21AdminState=lpX21AdminState, lpSonetPathCell=lpSonetPathCell, lpSonetPathCellComponentName=lpSonetPathCellComponentName, lpHssiSnmpOperStatus=lpHssiSnmpOperStatus, lpDS1OperationalState=lpDS1OperationalState, lpX21RowStatusEntry=lpX21RowStatusEntry, lpEngDsOvComponentName=lpEngDsOvComponentName, lpSdhCidDataEntry=lpSdhCidDataEntry, lpSonetPathIfAdminStatus=lpSonetPathIfAdminStatus, lpSdhRowStatusEntry=lpSdhRowStatusEntry, lpX21CidDataTable=lpX21CidDataTable, lpJT2TestBytesRx=lpJT2TestBytesRx, lpSdhProvTable=lpSdhProvTable, lpDS3DS1ChanTestComponentName=lpDS3DS1ChanTestComponentName, lpX21ControlStatus=lpX21ControlStatus, lpDS3DS1ChanTestAdminState=lpDS3DS1ChanTestAdminState, lpDS3OperEntry=lpDS3OperEntry, lpV35IfEntryTable=lpV35IfEntryTable, lpSonetCidDataTable=lpSonetCidDataTable, lpE1ChanOperStatusEntry=lpE1ChanOperStatusEntry, lpSonetTestOperationalState=lpSonetTestOperationalState, lpSonetPath=lpSonetPath, lpSdhTestFrmSize=lpSdhTestFrmSize, lpE3TestOperationalState=lpE3TestOperationalState, lpSdhTestElapsedTime=lpSdhTestElapsedTime, lpE1ChanTestTimeRemaining=lpE1ChanTestTimeRemaining, lpE1DspStorageType=lpE1DspStorageType, lpSdhPathUnknownStatus=lpSdhPathUnknownStatus, lpSdhTestDataStartDelay=lpSdhTestDataStartDelay, lpE1=lpE1, lpDS1ChanTcSigTwoValue=lpDS1ChanTcSigTwoValue, lpSonetProvEntry=lpSonetProvEntry, lpDS1CidDataTable=lpDS1CidDataTable, lpSonetPathCellRowStatusEntry=lpSonetPathCellRowStatusEntry, lpHssiTestRowStatusTable=lpHssiTestRowStatusTable, lpDS3LineErroredSec=lpDS3LineErroredSec, lpDS3PlcpStorageType=lpDS3PlcpStorageType, lpDS1TestPurpose=lpDS1TestPurpose, lpE3OperationalState=lpE3OperationalState, lpSdhPathFarEndPathErrorFreeSec=lpSdhPathFarEndPathErrorFreeSec, lpDS1TestSetupEntry=lpDS1TestSetupEntry, lpJT2TestBitsTx=lpJT2TestBitsTx, lpV35TestSetupTable=lpV35TestSetupTable, lpDS3DS1ProvEntry=lpDS3DS1ProvEntry, lpE1TestPurpose=lpE1TestPurpose, lpSonetFarEndLineSevErroredSec=lpSonetFarEndLineSevErroredSec, lpDS3TestUsageState=lpDS3TestUsageState, lpSdhUnusableTxClockRefAlarm=lpSdhUnusableTxClockRefAlarm, lpJT2TestFrmTx=lpJT2TestFrmTx, lpDS1OperTable=lpDS1OperTable, lpV35ApplicationFramerName=lpV35ApplicationFramerName, lpE1AdminState=lpE1AdminState, lpE1ChanRowStatusEntry=lpE1ChanRowStatusEntry, lpX21TestStorageType=lpX21TestStorageType, lpDS1IfAdminStatus=lpDS1IfAdminStatus, lpDS1ChanRowStatusTable=lpDS1ChanRowStatusTable, lpHssiTestResultsEntry=lpHssiTestResultsEntry, lpE1TestStateEntry=lpE1TestStateEntry, lpSdhPathAvailabilityStatus=lpSdhPathAvailabilityStatus, lpEngDsOvRowStatusEntry=lpEngDsOvRowStatusEntry, lpX21TestCustomizedPattern=lpX21TestCustomizedPattern, lpDS3DS1ChanStandbyStatus=lpDS3DS1ChanStandbyStatus, lpE3AdminInfoTable=lpE3AdminInfoTable, lpCapTable=lpCapTable, lpOperationalState=lpOperationalState, lpSdhPathPathCodeViolations=lpSdhPathPathCodeViolations, lpDS1ChanCellTransmitCellUtilization=lpDS1ChanCellTransmitCellUtilization, lpE1RowStatusTable=lpE1RowStatusTable, lpE3IfEntryTable=lpE3IfEntryTable, lpDS3DS1CidDataTable=lpDS3DS1CidDataTable, lpX21TestRowStatusTable=lpX21TestRowStatusTable, lpDS3DS1ChanTestCauseOfTermination=lpDS3DS1ChanTestCauseOfTermination, lpE1Test=lpE1Test, lpSonetPathProvTable=lpSonetPathProvTable, lpDS3DS1ChanTestFrmSize=lpDS3DS1ChanTestFrmSize, lpDS3DS1ChanTcOpEntry=lpDS3DS1ChanTcOpEntry, lpDS1TestBytesTx=lpDS1TestBytesTx, lpHssiIfEntryTable=lpHssiIfEntryTable, lpDS1ChanTest=lpDS1ChanTest, lpE1ChanTestOperationalState=lpE1ChanTestOperationalState, lpDS1ChanCellLcdAlarm=lpDS1ChanCellLcdAlarm, lpSdhPathPathErroredSec=lpSdhPathPathErroredSec, lpSdhTestCustomizedPattern=lpSdhTestCustomizedPattern, lpDS3DS1TestBitsRx=lpDS3DS1TestBitsRx, lpV35TestTimeRemaining=lpV35TestTimeRemaining, lpDS3DS1ChanActualChannelSpeed=lpDS3DS1ChanActualChannelSpeed, lpDS3DS1ChanTestBitsTx=lpDS3DS1ChanTestBitsTx, lpDS3DS1TestType=lpDS3DS1TestType, lpDS3DS1TestUsageState=lpDS3DS1TestUsageState, lpE3TestElapsedTime=lpE3TestElapsedTime, lpJT2CellAlarmActDelay=lpJT2CellAlarmActDelay, lpDS3PathCodeViolations=lpDS3PathCodeViolations, lpHssiTestFrmPatternType=lpHssiTestFrmPatternType, lpDS3TestRowStatusTable=lpDS3TestRowStatusTable, lpDS1RxAisAlarm=lpDS1RxAisAlarm, lpDS3DS1IfIndex=lpDS3DS1IfIndex, lpE1ChanCellReceiveCellUtilization=lpE1ChanCellReceiveCellUtilization, lpDS3DS1TestDuration=lpDS3DS1TestDuration, lpV35Test=lpV35Test, lpDS3DS1ChanTcComponentName=lpDS3DS1ChanTcComponentName, lpDS3DS1TestRowStatusEntry=lpDS3DS1TestRowStatusEntry, lpEngRowStatus=lpEngRowStatus, lpE3PlcpFarEndErroredSec=lpE3PlcpFarEndErroredSec, lpDS3DS1ChanTcIndex=lpDS3DS1ChanTcIndex, lpSdhUnknownStatus=lpSdhUnknownStatus, lpDS3DS1SlipErrors=lpDS3DS1SlipErrors, lpE3TestBitsRx=lpE3TestBitsRx, lpV35LinkMode=lpV35LinkMode, lpSonetFarEndLineCodeViolations=lpSonetFarEndLineCodeViolations, lpX21=lpX21, lpDS3PlcpStatsEntry=lpDS3PlcpStatsEntry)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", lpDS1TestFrmTx=lpDS1TestFrmTx, lpDS3CBitFarEndFailures=lpDS3CBitFarEndFailures, lpSdhTestBitsRx=lpSdhTestBitsRx, lpDS3CellRowStatusTable=lpDS3CellRowStatusTable, lpE3CellIndex=lpE3CellIndex, lpE1LosAlarm=lpE1LosAlarm, lpDS1ChanTestAdminState=lpDS1ChanTestAdminState, lpDS3AdminState=lpDS3AdminState, lpE1ChanCellRowStatusTable=lpE1ChanCellRowStatusTable, lpCidDataEntry=lpCidDataEntry, lpDS3PlcpFarEndUnavailableSec=lpDS3PlcpFarEndUnavailableSec, lpE3CellProvTable=lpE3CellProvTable, lpSdhPathLopAlarm=lpSdhPathLopAlarm, lpV35ProvTable=lpV35ProvTable, lpHssiTestStorageType=lpHssiTestStorageType, lpDS3DS1StandbyStatus=lpDS3DS1StandbyStatus, lpSonetPathComponentName=lpSonetPathComponentName, lpSonetPathRowStatusEntry=lpSonetPathRowStatusEntry, lpSonetPathLopAlarm=lpSonetPathLopAlarm, lpE3Cell=lpE3Cell, lpDS3DS1ChanTcProvTable=lpDS3DS1ChanTcProvTable, lpDS3StateTable=lpDS3StateTable, lpSdhPathTxAis=lpSdhPathTxAis, lpSdhLofAlarm=lpSdhLofAlarm, lpHssiReadyLineState=lpHssiReadyLineState, lpDS3CellStatsTable=lpDS3CellStatsTable, lpE3CommentText=lpE3CommentText, lpJT2UnknownStatus=lpJT2UnknownStatus, lpDS1ChanVendor=lpDS1ChanVendor, lpE1ComponentName=lpE1ComponentName, lpSonetTestAdminState=lpSonetTestAdminState, lpHssiOperationalState=lpHssiOperationalState, lpSonetTestBytesRx=lpSonetTestBytesRx, lpDS3DS1CustomerIdentifier=lpDS3DS1CustomerIdentifier, lpDS1RaiAlarmType=lpDS1RaiAlarmType, lpEngDsOvProvEntry=lpEngDsOvProvEntry, lpDS1ChanTestRowStatus=lpDS1ChanTestRowStatus, lpDS3PlcpRxRaiAlarm=lpDS3PlcpRxRaiAlarm, lpDS1ChanTestCauseOfTermination=lpDS1ChanTestCauseOfTermination, lpDS3DS1ChanTcProvEntry=lpDS3DS1ChanTcProvEntry, lpV35AdminInfoEntry=lpV35AdminInfoEntry, lpX21TestResultsTable=lpX21TestResultsTable, lpEng=lpEng, lpV35TestRowStatusTable=lpV35TestRowStatusTable, lpE1StateEntry=lpE1StateEntry, lpDS3DS1ProvTable=lpDS3DS1ProvTable, lpDS3TestStateTable=lpDS3TestStateTable, lpE3ProvTable=lpE3ProvTable, lpE3PlcpRowStatusEntry=lpE3PlcpRowStatusEntry, lpDS3TestPurpose=lpDS3TestPurpose, lpE1ChanTestBitErrorRate=lpE1ChanTestBitErrorRate, lpSonetPathCellOperTable=lpSonetPathCellOperTable, lpSdhPathControlStatus=lpSdhPathControlStatus, lpE3G832RowStatusTable=lpE3G832RowStatusTable, lpSdhPathPathAisLopSec=lpSdhPathPathAisLopSec, lpDS1StateEntry=lpDS1StateEntry, lpDS3DS1ErroredSec=lpDS3DS1ErroredSec, lpSonetControlStatus=lpSonetControlStatus, lpHssiLinkMode=lpHssiLinkMode, lpDS3DS1Vendor=lpDS3DS1Vendor, lpSonetLineErroredSec=lpSonetLineErroredSec, lpStateEntry=lpStateEntry, lpE1ChanStateEntry=lpE1ChanStateEntry, lpSonetTestBytesTx=lpSonetTestBytesTx, lpSdhPathAdminState=lpSdhPathAdminState, lpE1DspRowStatusEntry=lpE1DspRowStatusEntry, lpSdhPathCellCorrectSingleBitHeaderErrors=lpSdhPathCellCorrectSingleBitHeaderErrors, lpDS1RowStatusTable=lpDS1RowStatusTable, lpDS1ChanAdminInfoEntry=lpDS1ChanAdminInfoEntry, lpHssiTestOperationalState=lpHssiTestOperationalState, lpHssiComponentName=lpHssiComponentName, lpE3TestUsageState=lpE3TestUsageState, lpE3G832ProvisionedEntry=lpE3G832ProvisionedEntry)
