#
# PySNMP MIB module Intel-6000-Switch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Intel-6000-Switch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
switch_products, = mibBuilder.importSymbols("Intel-Common-MIB", "switch-products")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Gauge32, Counter64, ObjectIdentity, MibIdentifier, Bits, NotificationType, TimeTicks, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Gauge32", "Counter64", "ObjectIdentity", "MibIdentifier", "Bits", "NotificationType", "TimeTicks", "ModuleIdentity", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
intel6000Switch = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1))
express6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 1))
switchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2))
switchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1))
monitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 2))
commGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3))
hostGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4))
serialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 5))
spanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9))
fanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 10))
psGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 11))
tempGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 13))
gigabitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 14))
tenHundredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 15))
vlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16))
routingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17))
errorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18))
linkStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 19))
carrierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 20))
moduleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21))
pingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 22))
dnsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 23))
stormControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24))
igmpSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25))
pvstpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26))
relayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 27))
portMirrorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 29))
ipAccessCtlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30))
fdbGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 31))
class TimeInterval(Integer32):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 96)

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

class EnableStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddress.setStatus('mandatory')
netMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMask.setStatus('mandatory')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGateway.setStatus('mandatory')
broadcastAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastAddress.setStatus('mandatory')
maxMacAddresses = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxMacAddresses.setStatus('mandatory')
clearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearStatistics.setStatus('mandatory')
ageFilterDatabase = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ageFilterDatabase.setStatus('mandatory')
entMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entMibVersion.setStatus('mandatory')
telnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetEnable.setStatus('mandatory')
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('mandatory')
syslogIp = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogIp.setStatus('mandatory')
syslogCmds = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogCmds.setStatus('mandatory')
syslogOut = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogOut.setStatus('mandatory')
nvramLoadSave = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("load", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvramLoadSave.setStatus('mandatory')
nvramLastOpStat = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("loadFailed", 2), ("saveFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramLastOpStat.setStatus('mandatory')
nvramRemoteIp = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvramRemoteIp.setStatus('mandatory')
nvramRemotePath = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvramRemotePath.setStatus('mandatory')
diagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warnings", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagnosticsResults.setStatus('mandatory')
diagnosticsTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagnosticsTime.setStatus('mandatory')
lastDiagnosticsTest = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("memoryTest", 1), ("flashTest", 2), ("camTest", 3), ("nvramTest", 4), ("asicRandomFrameTest", 5), ("asicLoopbackTest", 6), ("asicBusRegistersTest", 7), ("asicRamRegistersTest", 8), ("serialEepromTest", 9), ("duartTest", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastDiagnosticsTest.setStatus('mandatory')
commNumComms = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commNumComms.setStatus('mandatory')
commInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 2), )
if mibBuilder.loadTexts: commInfoTable.setStatus('mandatory')
commInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "commInfoIndex"))
if mibBuilder.loadTexts: commInfoEntry.setStatus('mandatory')
commInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoIndex.setStatus('mandatory')
commInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoName.setStatus('mandatory')
commInfoGet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoGet.setStatus('mandatory')
commInfoSet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoSet.setStatus('mandatory')
commInfoTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoTrap.setStatus('mandatory')
commAltTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 9000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commAltTrapPort.setStatus('mandatory')
commSnmpSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSnmpSecurityLevel.setStatus('mandatory')
hostNumHosts = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostNumHosts.setStatus('mandatory')
hostInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4, 2), )
if mibBuilder.loadTexts: hostInfoTable.setStatus('mandatory')
hostInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "hostInfoIndex"))
if mibBuilder.loadTexts: hostInfoEntry.setStatus('mandatory')
hostInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoIndex.setStatus('mandatory')
hostInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoName.setStatus('mandatory')
hostInfoIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoIp.setStatus('mandatory')
hostInfoComm = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoComm.setStatus('mandatory')
serialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud600", 1), ("baud1200", 2), ("baud2400", 3), ("baud4800", 4), ("baud9600", 5), ("baud19200", 6), ("baud38400", 7))).clone('baud9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialBaudRate.setStatus('mandatory')
modemControlLines = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemControlLines.setStatus('mandatory')
spanOnOff = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanOnOff.setStatus('mandatory')
spanType = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("pvstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanType.setStatus('mandatory')
spanResetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanResetDefaults.setStatus('mandatory')
spanRapid = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanRapid.setStatus('mandatory')
spanPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 6), )
if mibBuilder.loadTexts: spanPortTable.setStatus('mandatory')
spanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 6, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "spanPortPort"))
if mibBuilder.loadTexts: spanPortEntry.setStatus('mandatory')
spanPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 6, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanPortPort.setStatus('mandatory')
spanPortQuickStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 6, 1, 2), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanPortQuickStatus.setStatus('mandatory')
spanPortAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanPortAuto.setStatus('mandatory')
fanNumFans = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumFans.setStatus('mandatory')
fanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 10, 2), )
if mibBuilder.loadTexts: fanInfoTable.setStatus('mandatory')
fanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 10, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanInfoEntry.setStatus('mandatory')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanIndex.setStatus('mandatory')
fanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("nok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanStatus.setStatus('mandatory')
psNumber = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psNumber.setStatus('mandatory')
psInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 11, 2), )
if mibBuilder.loadTexts: psInfoTable.setStatus('mandatory')
psInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 11, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "psIndex"))
if mibBuilder.loadTexts: psInfoEntry.setStatus('mandatory')
psIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("c", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIndex.setStatus('mandatory')
psPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("uninstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPresent.setStatus('mandatory')
psStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("nok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStatus.setStatus('mandatory')
tempCurrent = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempCurrent.setStatus('mandatory')
tempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempAlarm.setStatus('mandatory')
tempHighest = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHighest.setStatus('mandatory')
tempHigh = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHigh.setStatus('mandatory')
tempLow = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLow.setStatus('mandatory')
gigabitPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 14, 2), )
if mibBuilder.loadTexts: gigabitPortTable.setStatus('mandatory')
gigabitPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 14, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "gigabitPortTableSlot"), (0, "Intel-6000-Switch-MIB", "gigabitPortTablePort"))
if mibBuilder.loadTexts: gigabitPortTableEntry.setStatus('mandatory')
gigabitPortTableSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigabitPortTableSlot.setStatus('mandatory')
gigabitPortTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigabitPortTablePort.setStatus('mandatory')
gigabitPortTableLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigabitPortTableLinkState.setStatus('mandatory')
gigabitPortTablePortAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigabitPortTablePortAutoNeg.setStatus('mandatory')
tenHundredPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 15, 1), )
if mibBuilder.loadTexts: tenHundredPortTable.setStatus('mandatory')
tenHundredPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 15, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "tenHundredPortTableSlot"), (0, "Intel-6000-Switch-MIB", "tenHundredPortTablePort"))
if mibBuilder.loadTexts: tenHundredPortTableEntry.setStatus('mandatory')
tenHundredPortTableSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tenHundredPortTableSlot.setStatus('mandatory')
tenHundredPortTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tenHundredPortTablePort.setStatus('mandatory')
tenHundredPortTableLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tenHundredPortTableLinkState.setStatus('mandatory')
tenHundredPortTableConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20))).clone(namedValues=NamedValues(("autoTenHalf", 1), ("autoHundredHalf", 2), ("autoTenHundredHalf", 3), ("autoTenFull", 4), ("autoHundredFull", 5), ("autoTenHundredFull", 6), ("autoTenHalfFull", 7), ("autoHundredHalfFull", 8), ("autoTenHundredHalfFull", 9), ("tenHalf", 10), ("hundredHalf", 11), ("tenFull", 12), ("hundredFull", 13), ("unknown", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tenHundredPortTableConfig.setStatus('mandatory')
vlanValid = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanValid.setStatus('mandatory')
vlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2), )
if mibBuilder.loadTexts: vlanConfigTable.setStatus('mandatory')
vlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "vlanConfigVID"))
if mibBuilder.loadTexts: vlanConfigEntry.setStatus('mandatory')
vlanConfigVID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanConfigVID.setStatus('mandatory')
vlanConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanConfigName.setStatus('mandatory')
vlanConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanConfigIpAddr.setStatus('mandatory')
vlanConfigNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanConfigNetmask.setStatus('mandatory')
vlanConfigBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanConfigBroadcast.setStatus('mandatory')
vlanConfigRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 2, 1, 6), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanConfigRouting.setStatus('mandatory')
vlanReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanReset.setStatus('mandatory')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 4), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('mandatory')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 4, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "vlanPortNumber"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('mandatory')
vlanPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortNumber.setStatus('mandatory')
vlanPortTrustedVid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 4, 1, 2), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortTrustedVid.setStatus('mandatory')
vlanPortTrustedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 16, 4, 1, 3), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortTrustedPriority.setStatus('mandatory')
routingRouterId = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingRouterId.setStatus('mandatory')
routingScanInterval = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingScanInterval.setStatus('mandatory')
routingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 3))
routingEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enableInit", 3), ("enableRestore", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingEnable.setStatus('mandatory')
routingRipConf = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingRipConf.setStatus('mandatory')
routingOspfConf = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingOspfConf.setStatus('mandatory')
routingPreferencesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 4))
routingOspfPref = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingOspfPref.setStatus('mandatory')
routingStaticConfigPref = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingStaticConfigPref.setStatus('mandatory')
routingRipPref = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingRipPref.setStatus('mandatory')
routingOspfAsExtPref = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingOspfAsExtPref.setStatus('mandatory')
routingIfPrefTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 5), )
if mibBuilder.loadTexts: routingIfPrefTable.setStatus('mandatory')
routingIfPrefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 5, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "routingIfPrefAddress"))
if mibBuilder.loadTexts: routingIfPrefEntry.setStatus('mandatory')
routingIfPrefAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routingIfPrefAddress.setStatus('mandatory')
routingIfPref = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingIfPref.setStatus('mandatory')
staticRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteNumber.setStatus('mandatory')
staticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7), )
if mibBuilder.loadTexts: staticRouteTable.setStatus('mandatory')
staticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "staticRouteDest"), (0, "Intel-6000-Switch-MIB", "staticRouteMask"), (0, "Intel-6000-Switch-MIB", "staticRouteNextHop"))
if mibBuilder.loadTexts: staticRouteEntry.setStatus('mandatory')
staticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteDest.setStatus('mandatory')
staticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteMask.setStatus('mandatory')
staticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteNextHop.setStatus('mandatory')
staticRouteIf = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteIf.setStatus('mandatory')
staticRoutePref = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutePref.setStatus('mandatory')
staticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("retain", 1), ("reject", 2), ("blackhole", 3), ("notinstall", 4), ("normal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteType.setStatus('mandatory')
staticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteStatus.setStatus('mandatory')
routingSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingSaveConfig.setStatus('mandatory')
errorTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18, 1), )
if mibBuilder.loadTexts: errorTable.setStatus('mandatory')
errorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "errorIndex"))
if mibBuilder.loadTexts: errorEntry.setStatus('mandatory')
errorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorIndex.setStatus('mandatory')
errorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorMsg.setStatus('mandatory')
errorOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorOid.setStatus('mandatory')
errorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorTime.setStatus('mandatory')
clearErrorTable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearErrorTable.setStatus('mandatory')
linkStateTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 19, 1), )
if mibBuilder.loadTexts: linkStateTable.setStatus('mandatory')
linkStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 19, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "linkStateSlot"), (0, "Intel-6000-Switch-MIB", "linkStatePort"))
if mibBuilder.loadTexts: linkStateEntry.setStatus('mandatory')
linkStateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStateSlot.setStatus('mandatory')
linkStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatePort.setStatus('mandatory')
linkStateState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fddi-disabled", 1), ("fddi-connecting", 2), ("fddi-standby", 3), ("fddi-active", 4), ("reserved1", 5), ("reserved2", 6), ("ethernet-up", 7), ("ethernet-down", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStateState.setStatus('mandatory')
linkStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 19, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStateTime.setStatus('mandatory')
carrierCPSlotID = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpA", 1), ("cpB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierCPSlotID.setStatus('mandatory')
carrierStatusA = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInserted", 1), ("insertedNotRunning", 2), ("insertedRunning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierStatusA.setStatus('mandatory')
carrierStatusB = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInserted", 1), ("insertedNotRunning", 2), ("insertedRunning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carrierStatusB.setStatus('mandatory')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('mandatory')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "moduleSlotNum"), (0, "Intel-6000-Switch-MIB", "moduleCard"), (0, "Intel-6000-Switch-MIB", "moduleContent"))
if mibBuilder.loadTexts: moduleEntry.setStatus('mandatory')
moduleSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSlotNum.setStatus('mandatory')
moduleCard = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("carrier", 3), ("cpA", 4), ("cpB", 5), ("gigSwitch8", 6), ("tenHundred24", 7), ("hundredFX12", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCard.setStatus('mandatory')
moduleContent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("sysVersion", 1), ("bootVersion", 2), ("xilinxVclue", 3), ("bctXilinx", 4), ("ccXilinx", 5), ("i8051", 6), ("sysImage", 7), ("carrierLue", 8), ("webImage", 9), ("cpSCtrlXilinx", 10), ("cpCtrlXilinx", 11), ("cfgPld", 12), ("upIf", 13), ("rqm", 14), ("xpt", 15), ("lxa", 16), ("xBar", 17), ("imp", 18), ("tqmPl", 19), ("tqmCtl", 20), ("tqmFbc", 21), ("serialNum", 22), ("mac", 23), ("hwRev", 24), ("model", 25), ("mfgDate", 26), ("variance", 27), ("feature", 28), ("moduleStatus", 29), ("moduleName", 30), ("mediaType", 31), ("connectorType", 32), ("tsunami", 33), ("twister", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleContent.setStatus('mandatory')
moduleDataValid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDataValid.setStatus('mandatory')
moduleText = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 21, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleText.setStatus('mandatory')
pingHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 22, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingHostAddress.setStatus('mandatory')
pingRequest = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 22, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingRequest.setStatus('mandatory')
pingTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 22, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingTime.setStatus('mandatory')
pingStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noData", 1), ("waitingForReply", 2), ("timedOut", 3), ("success", 4), ("error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingStatus.setStatus('mandatory')
dnsEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnable.setStatus('mandatory')
dnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 23, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainName.setStatus('mandatory')
dnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 23, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPrimaryServer.setStatus('mandatory')
dnsBackupServer = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 23, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsBackupServer.setStatus('mandatory')
stormBcastControlTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1), )
if mibBuilder.loadTexts: stormBcastControlTable.setStatus('mandatory')
stormBcastControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "stormBcastControlPort"))
if mibBuilder.loadTexts: stormBcastControlEntry.setStatus('mandatory')
stormBcastControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormBcastControlPort.setStatus('mandatory')
stormBcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormBcastControlThreshold.setStatus('mandatory')
stormBcastControlDiscardPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormBcastControlDiscardPeriod.setStatus('mandatory')
stormBcastControlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormBcastControlRate.setStatus('mandatory')
stormBcastControlDisables = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormBcastControlDisables.setStatus('mandatory')
stormBcastControlEnables = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormBcastControlEnables.setStatus('mandatory')
stormBcastControlTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormBcastControlTimeLeft.setStatus('mandatory')
stormBcastControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("monitorBroadcast", 2), ("monitorMulticast", 3), ("monitorBoth", 4), ("discardingBroadcast", 5), ("discardingMulticast", 6), ("exitDiscardState", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormBcastControlStatus.setStatus('mandatory')
stormMcastControlTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2), )
if mibBuilder.loadTexts: stormMcastControlTable.setStatus('mandatory')
stormMcastControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "stormMcastControlPort"))
if mibBuilder.loadTexts: stormMcastControlEntry.setStatus('mandatory')
stormMcastControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormMcastControlPort.setStatus('mandatory')
stormMcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormMcastControlThreshold.setStatus('mandatory')
stormMcastControlDiscardPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormMcastControlDiscardPeriod.setStatus('mandatory')
stormMcastControlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormMcastControlRate.setStatus('mandatory')
stormMcastControlDisables = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormMcastControlDisables.setStatus('mandatory')
stormMcastControlEnables = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormMcastControlEnables.setStatus('mandatory')
stormMcastControlTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormMcastControlTimeLeft.setStatus('mandatory')
stormMcastControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 24, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("monitorBroadcast", 2), ("monitorMulticast", 3), ("monitorBoth", 4), ("discardingBroadcast", 5), ("discardingMulticast", 6), ("exitDiscardState", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormMcastControlStatus.setStatus('mandatory')
igmpSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingEnable.setStatus('mandatory')
igmpSnoopingResetControl = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingResetControl.setStatus('mandatory')
igmpSnoopingResetData = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingResetData.setStatus('mandatory')
igmpSnoopingAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 4), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(330, 550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingAgeTime.setStatus('mandatory')
igmpSnoopingVlanResetTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 5), )
if mibBuilder.loadTexts: igmpSnoopingVlanResetTable.setStatus('mandatory')
igmpSnoopingVlanResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 5, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "igmpSnoopingVlanResetVlanId"))
if mibBuilder.loadTexts: igmpSnoopingVlanResetEntry.setStatus('mandatory')
igmpSnoopingVlanResetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 5, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingVlanResetVlanId.setStatus('mandatory')
igmpSnoopingVlanResetData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingVlanResetData.setStatus('mandatory')
igmpSnoopingVlanResetControl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingVlanResetControl.setStatus('mandatory')
igmpSnoopingDataPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 6), )
if mibBuilder.loadTexts: igmpSnoopingDataPortTable.setStatus('mandatory')
igmpSnoopingDataPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 6, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "igmpSnoopingDataPortVlanId"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingDataPortNumber"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingDataPortGroup"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingDataPortIpAddr"))
if mibBuilder.loadTexts: igmpSnoopingDataPortEntry.setStatus('mandatory')
igmpSnoopingDataPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 6, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingDataPortVlanId.setStatus('mandatory')
igmpSnoopingDataPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 6, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingDataPortNumber.setStatus('mandatory')
igmpSnoopingDataPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("ip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingDataPortGroup.setStatus('mandatory')
igmpSnoopingDataPortIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingDataPortIpAddr.setStatus('mandatory')
igmpSnoopingDataPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("normal", 3), ("fixed", 4), ("forbid", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingDataPortState.setStatus('mandatory')
igmpSnoopingControlPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 7), )
if mibBuilder.loadTexts: igmpSnoopingControlPortTable.setStatus('mandatory')
igmpSnoopingControlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 7, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "igmpSnoopingControlPortVlanId"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingControlPortNumber"))
if mibBuilder.loadTexts: igmpSnoopingControlPortEntry.setStatus('mandatory')
igmpSnoopingControlPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 7, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingControlPortVlanId.setStatus('mandatory')
igmpSnoopingControlPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 7, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingControlPortNumber.setStatus('mandatory')
igmpSnoopingControlPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fixed", 2), ("forbid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingControlPortState.setStatus('mandatory')
igmpSnoopingControlPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 7, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopingControlPortRowStatus.setStatus('mandatory')
igmpSnoopingStatusTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 8), )
if mibBuilder.loadTexts: igmpSnoopingStatusTable.setStatus('mandatory')
igmpSnoopingStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 8, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "igmpSnoopingVlanId"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingMcastMacAddr"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingPort"))
if mibBuilder.loadTexts: igmpSnoopingStatusEntry.setStatus('mandatory')
igmpSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 8, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingVlanId.setStatus('mandatory')
igmpSnoopingMcastMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingMcastMacAddr.setStatus('mandatory')
igmpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 8, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingPort.setStatus('mandatory')
igmpSnoopingIpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 9), )
if mibBuilder.loadTexts: igmpSnoopingIpStatusTable.setStatus('mandatory')
igmpSnoopingIpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 9, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "igmpSnoopingVlanId"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingMcastMacAddr"), (0, "Intel-6000-Switch-MIB", "igmpSnoopingIpAddress"))
if mibBuilder.loadTexts: igmpSnoopingIpStatusEntry.setStatus('mandatory')
igmpSnoopingIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 9, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingIpVlanId.setStatus('mandatory')
igmpSnoopingIpMcastMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingIpMcastMacAddr.setStatus('mandatory')
igmpSnoopingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 25, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopingIpAddress.setStatus('mandatory')
pvstpTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1), )
if mibBuilder.loadTexts: pvstpTable.setStatus('mandatory')
pvstpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "pvstpVlanId"))
if mibBuilder.loadTexts: pvstpEntry.setStatus('mandatory')
pvstpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpVlanId.setStatus('mandatory')
pvstpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3), ("ieee8021w1s1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpProtocolSpecification.setStatus('mandatory')
pvstpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstpPriority.setStatus('mandatory')
pvstpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpTimeSinceTopologyChange.setStatus('mandatory')
pvstpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpTopChanges.setStatus('mandatory')
pvstpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpDesignatedRoot.setStatus('mandatory')
pvstpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpRootCost.setStatus('mandatory')
pvstpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpRootPort.setStatus('mandatory')
pvstpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpMaxAge.setStatus('mandatory')
pvstpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpHelloTime.setStatus('mandatory')
pvstpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpHoldTime.setStatus('mandatory')
pvstpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpForwardDelay.setStatus('mandatory')
pvstpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstpBridgeMaxAge.setStatus('mandatory')
pvstpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpBridgeHelloTime.setStatus('mandatory')
pvstpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpBridgeForwardDelay.setStatus('mandatory')
pvstpBridgeRapid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstpBridgeRapid.setStatus('mandatory')
pvstpBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 1, 1, 17), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpBridgeId.setStatus('mandatory')
pvstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2), )
if mibBuilder.loadTexts: pvstpPortTable.setStatus('mandatory')
pvstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "pvstpPortVlanId"), (0, "Intel-6000-Switch-MIB", "pvstpPort"))
if mibBuilder.loadTexts: pvstpPortEntry.setStatus('mandatory')
pvstpPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortVlanId.setStatus('mandatory')
pvstpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPort.setStatus('mandatory')
pvstpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstpPortPriority.setStatus('mandatory')
pvstpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortState.setStatus('mandatory')
pvstpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstpPortEnable.setStatus('mandatory')
pvstpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstpPortPathCost.setStatus('mandatory')
pvstpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortDesignatedRoot.setStatus('mandatory')
pvstpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortDesignatedCost.setStatus('mandatory')
pvstpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortDesignatedBridge.setStatus('mandatory')
pvstpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortDesignatedPort.setStatus('mandatory')
pvstpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortForwardTransitions.setStatus('mandatory')
pvstpPortQuick = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstpPortQuick.setStatus('mandatory')
pvstpPortAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 26, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstpPortAuto.setStatus('mandatory')
relayEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 27, 1), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayEnable.setStatus('mandatory')
relayMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 27, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayMaxHops.setStatus('mandatory')
relayServerTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 27, 3), )
if mibBuilder.loadTexts: relayServerTable.setStatus('mandatory')
relayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 27, 3, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "relayServerIndex"))
if mibBuilder.loadTexts: relayServerEntry.setStatus('mandatory')
relayServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayServerIndex.setStatus('mandatory')
relayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 27, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayServerAddress.setStatus('mandatory')
portMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 29, 1), )
if mibBuilder.loadTexts: portMirrorTable.setStatus('mandatory')
portMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 29, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "portMirrorSourcePort"), (0, "Intel-6000-Switch-MIB", "portMirrorMonitorPort"))
if mibBuilder.loadTexts: portMirrorEntry.setStatus('mandatory')
portMirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 29, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorSourcePort.setStatus('mandatory')
portMirrorMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 29, 1, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorMonitorPort.setStatus('mandatory')
portMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 29, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMirrorRowStatus.setStatus('mandatory')
ipAccessCtlTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1), )
if mibBuilder.loadTexts: ipAccessCtlTable.setStatus('mandatory')
ipAccessCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "ipAccessCtlRuleNumber"))
if mibBuilder.loadTexts: ipAccessCtlEntry.setStatus('mandatory')
ipAccessCtlRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAccessCtlRuleNumber.setStatus('mandatory')
ipAccessCtlSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessCtlSourceAddress.setStatus('mandatory')
ipAccessCtlSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessCtlSourceMask.setStatus('mandatory')
ipAccessCtlDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessCtlDestinationAddress.setStatus('mandatory')
ipAccessCtlDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessCtlDestinationMask.setStatus('mandatory')
ipAccessCtlType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessCtlType.setStatus('mandatory')
ipAccessCtlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessCtlRowStatus.setStatus('mandatory')
ipAccessCtlEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 30, 2), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessCtlEnable.setStatus('mandatory')
fdbLearningMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ivl", 1), ("svl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbLearningMode.setStatus('mandatory')
fdbAgeTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 31, 2), )
if mibBuilder.loadTexts: fdbAgeTable.setStatus('mandatory')
fdbAgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 31, 2, 1), ).setIndexNames((0, "Intel-6000-Switch-MIB", "fdbAgeId"))
if mibBuilder.loadTexts: fdbAgeEntry.setStatus('mandatory')
fdbAgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 31, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbAgeId.setStatus('mandatory')
fdbAgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 31, 2, 1, 2), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbAgeStatus.setStatus('mandatory')
fdbAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbAgeTime.setStatus('mandatory')
carrierCPSlotChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,1)).setObjects(("Intel-6000-Switch-MIB", "carrierCPSlotID"))
carrierStatusAChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,2)).setObjects(("Intel-6000-Switch-MIB", "carrierStatusA"))
carrierStatusBChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,3)).setObjects(("Intel-6000-Switch-MIB", "carrierStatusB"))
mediaCardChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,4))
fanFailEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,5))
powerSupplyFailEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,6))
highTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,7))
risingTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,8)).setObjects(("Intel-6000-Switch-MIB", "tempCurrent"))
fallingTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,9)).setObjects(("Intel-6000-Switch-MIB", "tempCurrent"))
stormBcastControlDiscardEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,10)).setObjects(("Intel-6000-Switch-MIB", "stormBcastControlPort"))
stormMcastControlDiscardEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 11, 1, 2) + (0,11)).setObjects(("Intel-6000-Switch-MIB", "stormMcastControlPort"))
mibBuilder.exportSymbols("Intel-6000-Switch-MIB", pvstpTopChanges=pvstpTopChanges, pvstpForwardDelay=pvstpForwardDelay, fanGroup=fanGroup, routingGroup=routingGroup, stormBcastControlRate=stormBcastControlRate, fdbAgeTime=fdbAgeTime, spanType=spanType, igmpSnoopingDataPortState=igmpSnoopingDataPortState, igmpSnoopingControlPortVlanId=igmpSnoopingControlPortVlanId, igmpSnoopingDataPortGroup=igmpSnoopingDataPortGroup, moduleEntry=moduleEntry, psInfoEntry=psInfoEntry, igmpSnoopingIpMcastMacAddr=igmpSnoopingIpMcastMacAddr, nvramRemotePath=nvramRemotePath, igmpSnoopingDataPortTable=igmpSnoopingDataPortTable, pvstpBridgeRapid=pvstpBridgeRapid, routingPreferencesGroup=routingPreferencesGroup, tempHighest=tempHighest, relayServerAddress=relayServerAddress, ipAccessCtlGroup=ipAccessCtlGroup, pvstpPortPriority=pvstpPortPriority, igmpSnoopingVlanResetEntry=igmpSnoopingVlanResetEntry, commGroup=commGroup, routingRipConf=routingRipConf, telnetEnable=telnetEnable, nvramRemoteIp=nvramRemoteIp, tempAlarm=tempAlarm, dnsPrimaryServer=dnsPrimaryServer, monitorGroup=monitorGroup, syslogIp=syslogIp, tempCurrent=tempCurrent, igmpSnoopingVlanResetVlanId=igmpSnoopingVlanResetVlanId, fdbAgeId=fdbAgeId, dnsGroup=dnsGroup, carrierCPSlotChangeEvent=carrierCPSlotChangeEvent, igmpSnoopingDataPortEntry=igmpSnoopingDataPortEntry, moduleSlotNum=moduleSlotNum, vlanPortTrustedVid=vlanPortTrustedVid, carrierCPSlotID=carrierCPSlotID, carrierGroup=carrierGroup, pingHostAddress=pingHostAddress, staticRouteDest=staticRouteDest, routingOspfConf=routingOspfConf, carrierStatusA=carrierStatusA, igmpSnoopingIpAddress=igmpSnoopingIpAddress, broadcastAddress=broadcastAddress, fanNumFans=fanNumFans, vlanPortEntry=vlanPortEntry, pvstpGroup=pvstpGroup, gigabitGroup=gigabitGroup, linkStateTime=linkStateTime, entMibVersion=entMibVersion, pvstpRootPort=pvstpRootPort, staticRouteStatus=staticRouteStatus, fdbGroup=fdbGroup, vlanConfigVID=vlanConfigVID, pvstpHelloTime=pvstpHelloTime, psStatus=psStatus, vlanConfigNetmask=vlanConfigNetmask, stormBcastControlThreshold=stormBcastControlThreshold, routingRipPref=routingRipPref, igmpSnoopingVlanResetData=igmpSnoopingVlanResetData, spanOnOff=spanOnOff, commInfoName=commInfoName, gigabitPortTable=gigabitPortTable, lastDiagnosticsTest=lastDiagnosticsTest, vlanConfigRouting=vlanConfigRouting, maxMacAddresses=maxMacAddresses, commInfoTable=commInfoTable, igmpSnoopingPort=igmpSnoopingPort, pvstpPortQuick=pvstpPortQuick, stormControlGroup=stormControlGroup, moduleGroup=moduleGroup, EnableStatus=EnableStatus, ageFilterDatabase=ageFilterDatabase, tempHigh=tempHigh, staticRoutePref=staticRoutePref, netMask=netMask, igmpSnoopingVlanResetControl=igmpSnoopingVlanResetControl, pvstpDesignatedRoot=pvstpDesignatedRoot, fanInfoEntry=fanInfoEntry, stormMcastControlDiscardPeriod=stormMcastControlDiscardPeriod, commInfoEntry=commInfoEntry, commAltTrapPort=commAltTrapPort, fdbAgeEntry=fdbAgeEntry, pvstpPortAuto=pvstpPortAuto, clearErrorTable=clearErrorTable, staticRouteNextHop=staticRouteNextHop, ipAccessCtlRuleNumber=ipAccessCtlRuleNumber, tenHundredGroup=tenHundredGroup, vlanConfigTable=vlanConfigTable, linkStatePort=linkStatePort, errorTable=errorTable, carrierStatusBChangeEvent=carrierStatusBChangeEvent, pingTime=pingTime, relayServerEntry=relayServerEntry, gigabitPortTableSlot=gigabitPortTableSlot, switchMIB=switchMIB, relayServerIndex=relayServerIndex, stormBcastControlTable=stormBcastControlTable, stormMcastControlDiscardEvent=stormMcastControlDiscardEvent, VlanId=VlanId, fdbAgeStatus=fdbAgeStatus, pvstpEntry=pvstpEntry, igmpSnoopingControlPortTable=igmpSnoopingControlPortTable, commInfoTrap=commInfoTrap, vlanConfigEntry=vlanConfigEntry, TimeInterval=TimeInterval, tenHundredPortTableSlot=tenHundredPortTableSlot, routingEnable=routingEnable, igmpSnoopingResetData=igmpSnoopingResetData, igmpSnoopingStatusTable=igmpSnoopingStatusTable, ipAccessCtlRowStatus=ipAccessCtlRowStatus, pvstpPortDesignatedRoot=pvstpPortDesignatedRoot, portMirrorEntry=portMirrorEntry, gigabitPortTableEntry=gigabitPortTableEntry, portMirrorSourcePort=portMirrorSourcePort, portMirrorGroup=portMirrorGroup, spanResetDefaults=spanResetDefaults, ipAccessCtlSourceAddress=ipAccessCtlSourceAddress, moduleTable=moduleTable, errorEntry=errorEntry, routingSaveConfig=routingSaveConfig, risingTemperatureEvent=risingTemperatureEvent, stormMcastControlPort=stormMcastControlPort, serialBaudRate=serialBaudRate, relayServerTable=relayServerTable, fanFailEvent=fanFailEvent, BridgeId=BridgeId, commInfoIndex=commInfoIndex, errorOid=errorOid, fdbAgeTable=fdbAgeTable, relayMaxHops=relayMaxHops, routingStaticConfigPref=routingStaticConfigPref, pvstpPortTable=pvstpPortTable, igmpSnoopingIpVlanId=igmpSnoopingIpVlanId, stormMcastControlTable=stormMcastControlTable, hostInfoComm=hostInfoComm, vlanPortTable=vlanPortTable, ipAccessCtlEntry=ipAccessCtlEntry, pvstpBridgeHelloTime=pvstpBridgeHelloTime, linkStateTable=linkStateTable, spanPortPort=spanPortPort, igmpSnoopingVlanId=igmpSnoopingVlanId, spanPortAuto=spanPortAuto, igmpSnoopingIpStatusTable=igmpSnoopingIpStatusTable, errorMsg=errorMsg, pvstpBridgeMaxAge=pvstpBridgeMaxAge, ipAccessCtlEnable=ipAccessCtlEnable, vlanPortTrustedPriority=vlanPortTrustedPriority, igmpSnoopingDataPortVlanId=igmpSnoopingDataPortVlanId, fdbLearningMode=fdbLearningMode, Timeout=Timeout, commNumComms=commNumComms, spanPortTable=spanPortTable, stormBcastControlDisables=stormBcastControlDisables, stormBcastControlStatus=stormBcastControlStatus, express6000=express6000, pvstpPortEntry=pvstpPortEntry, tenHundredPortTablePort=tenHundredPortTablePort, staticRouteType=staticRouteType, stormBcastControlTimeLeft=stormBcastControlTimeLeft, dnsEnable=dnsEnable, igmpSnoopingControlPortEntry=igmpSnoopingControlPortEntry, ipAccessCtlTable=ipAccessCtlTable, stormMcastControlRate=stormMcastControlRate, stormMcastControlStatus=stormMcastControlStatus, igmpSnoopingControlPortRowStatus=igmpSnoopingControlPortRowStatus, tenHundredPortTableLinkState=tenHundredPortTableLinkState, pvstpPortDesignatedCost=pvstpPortDesignatedCost, vlanValid=vlanValid, hostInfoTable=hostInfoTable, igmpSnoopingControlPortState=igmpSnoopingControlPortState, psPresent=psPresent, fanIndex=fanIndex, tempLow=tempLow, routingIfPrefTable=routingIfPrefTable, moduleDataValid=moduleDataValid, hostNumHosts=hostNumHosts, portMirrorMonitorPort=portMirrorMonitorPort, stormBcastControlEntry=stormBcastControlEntry, moduleContent=moduleContent, vlanReset=vlanReset, linkStateGroup=linkStateGroup, syslogEnable=syslogEnable, stormMcastControlDisables=stormMcastControlDisables, routingIfPrefEntry=routingIfPrefEntry, staticRouteMask=staticRouteMask, Boolean=Boolean, mediaCardChangeEvent=mediaCardChangeEvent, igmpSnoopingVlanResetTable=igmpSnoopingVlanResetTable, commInfoGet=commInfoGet, pvstpProtocolSpecification=pvstpProtocolSpecification, nvramLoadSave=nvramLoadSave, highTemperatureEvent=highTemperatureEvent, ipAccessCtlDestinationAddress=ipAccessCtlDestinationAddress, pingStatus=pingStatus, spanPortEntry=spanPortEntry, stormMcastControlThreshold=stormMcastControlThreshold, tenHundredPortTable=tenHundredPortTable, pvstpPortState=pvstpPortState, pvstpPortDesignatedPort=pvstpPortDesignatedPort, stormBcastControlEnables=stormBcastControlEnables, pvstpTable=pvstpTable, psGroup=psGroup, hostInfoIp=hostInfoIp, ipAccessCtlSourceMask=ipAccessCtlSourceMask, switchConfigGroup=switchConfigGroup, fallingTemperatureEvent=fallingTemperatureEvent, errorIndex=errorIndex, hostInfoEntry=hostInfoEntry, igmpSnoopingControlPortNumber=igmpSnoopingControlPortNumber, pingGroup=pingGroup, igmpSnoopingStatusEntry=igmpSnoopingStatusEntry, gigabitPortTablePortAutoNeg=gigabitPortTablePortAutoNeg, pvstpPort=pvstpPort, psIndex=psIndex, nvramLastOpStat=nvramLastOpStat, routingOspfPref=routingOspfPref, moduleCard=moduleCard, portMirrorRowStatus=portMirrorRowStatus, stormBcastControlPort=stormBcastControlPort, pvstpPortDesignatedBridge=pvstpPortDesignatedBridge, pvstpPortVlanId=pvstpPortVlanId, hostInfoIndex=hostInfoIndex, vlanConfigName=vlanConfigName, fanInfoTable=fanInfoTable, defaultGateway=defaultGateway, modemControlLines=modemControlLines, staticRouteTable=staticRouteTable, igmpSnoopingIpStatusEntry=igmpSnoopingIpStatusEntry, powerSupplyFailEvent=powerSupplyFailEvent, gigabitPortTablePort=gigabitPortTablePort, syslogCmds=syslogCmds, gigabitPortTableLinkState=gigabitPortTableLinkState, PortNumber=PortNumber, spanGroup=spanGroup, igmpSnoopingAgeTime=igmpSnoopingAgeTime, dnsDomainName=dnsDomainName, pvstpHoldTime=pvstpHoldTime, hostGroup=hostGroup, staticRouteIf=staticRouteIf, routingConfigGroup=routingConfigGroup, tenHundredPortTableEntry=tenHundredPortTableEntry, clearStatistics=clearStatistics, igmpSnoopingMcastMacAddr=igmpSnoopingMcastMacAddr, vlanConfigIpAddr=vlanConfigIpAddr, moduleText=moduleText, syslogOut=syslogOut, routingScanInterval=routingScanInterval, pvstpPortPathCost=pvstpPortPathCost, psNumber=psNumber, vlanConfigBroadcast=vlanConfigBroadcast, stormMcastControlEnables=stormMcastControlEnables)
mibBuilder.exportSymbols("Intel-6000-Switch-MIB", MacAddress=MacAddress, RowStatus=RowStatus, relayGroup=relayGroup, dnsBackupServer=dnsBackupServer, diagnosticsTime=diagnosticsTime, spanPortQuickStatus=spanPortQuickStatus, igmpSnoopingDataPortIpAddr=igmpSnoopingDataPortIpAddr, pingRequest=pingRequest, ipAccessCtlType=ipAccessCtlType, stormMcastControlEntry=stormMcastControlEntry, pvstpBridgeForwardDelay=pvstpBridgeForwardDelay, intel6000Switch=intel6000Switch, pvstpRootCost=pvstpRootCost, pvstpMaxAge=pvstpMaxAge, pvstpPortEnable=pvstpPortEnable, serialGroup=serialGroup, stormMcastControlTimeLeft=stormMcastControlTimeLeft, commInfoSet=commInfoSet, pvstpVlanId=pvstpVlanId, commSnmpSecurityLevel=commSnmpSecurityLevel, errorGroup=errorGroup, igmpSnoopingGroup=igmpSnoopingGroup, linkStateSlot=linkStateSlot, fanStatus=fanStatus, diagnosticsResults=diagnosticsResults, igmpSnoopingDataPortNumber=igmpSnoopingDataPortNumber, vlanPortNumber=vlanPortNumber, linkStateState=linkStateState, carrierStatusB=carrierStatusB, relayEnable=relayEnable, routingOspfAsExtPref=routingOspfAsExtPref, psInfoTable=psInfoTable, stormBcastControlDiscardEvent=stormBcastControlDiscardEvent, linkStateEntry=linkStateEntry, pvstpTimeSinceTopologyChange=pvstpTimeSinceTopologyChange, staticRouteEntry=staticRouteEntry, carrierStatusAChangeEvent=carrierStatusAChangeEvent, routingRouterId=routingRouterId, staticRouteNumber=staticRouteNumber, ipAccessCtlDestinationMask=ipAccessCtlDestinationMask, stormBcastControlDiscardPeriod=stormBcastControlDiscardPeriod, igmpSnoopingEnable=igmpSnoopingEnable, pvstpBridgeId=pvstpBridgeId, igmpSnoopingResetControl=igmpSnoopingResetControl, vlanGroup=vlanGroup, spanRapid=spanRapid, routingIfPref=routingIfPref, errorTime=errorTime, hostInfoName=hostInfoName, pvstpPriority=pvstpPriority, tenHundredPortTableConfig=tenHundredPortTableConfig, tempGroup=tempGroup, portMirrorTable=portMirrorTable, pvstpPortForwardTransitions=pvstpPortForwardTransitions, ipAddress=ipAddress, routingIfPrefAddress=routingIfPrefAddress)
