#
# PySNMP MIB module PACKETEER-RTM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETEER-RTM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:27:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
psCommonMib, classIndex = mibBuilder.importSymbols("PACKETEER-MIB", "psCommonMib", "classIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, ModuleIdentity, Counter32, Gauge32, Integer32, IpAddress, Unsigned32, iso, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ModuleIdentity", "Counter32", "Gauge32", "Integer32", "IpAddress", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
psClassResponseTimes = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7))
classRTMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 1), )
if mibBuilder.loadTexts: classRTMConfigTable.setStatus('mandatory')
classRTMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 1, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"))
if mibBuilder.loadTexts: classRTMConfigEntry.setStatus('mandatory')
classTotalDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTotalDelayThreshold.setStatus('mandatory')
classServiceLevelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServiceLevelThreshold.setStatus('mandatory')
classTotalDelayTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 2), )
if mibBuilder.loadTexts: classTotalDelayTable.setStatus('mandatory')
classTotalDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 2, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"), (0, "PACKETEER-RTM-MIB", "classTotalDelayBucketLimit"))
if mibBuilder.loadTexts: classTotalDelayEntry.setStatus('mandatory')
classTotalDelayBucketLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTotalDelayBucketLimit.setStatus('mandatory')
classTotalDelayBucketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTotalDelayBucketCount.setStatus('mandatory')
classNetworkDelayTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 3), )
if mibBuilder.loadTexts: classNetworkDelayTable.setStatus('mandatory')
classNetworkDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 3, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"), (0, "PACKETEER-RTM-MIB", "classNetworkDelayBucketLimit"))
if mibBuilder.loadTexts: classNetworkDelayEntry.setStatus('mandatory')
classNetworkDelayBucketLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNetworkDelayBucketLimit.setStatus('mandatory')
classNetworkDelayBucketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNetworkDelayBucketCount.setStatus('mandatory')
classServerDelayTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 4), )
if mibBuilder.loadTexts: classServerDelayTable.setStatus('mandatory')
classServerDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 4, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"), (0, "PACKETEER-RTM-MIB", "classServerDelayBucketLimit"))
if mibBuilder.loadTexts: classServerDelayEntry.setStatus('mandatory')
classServerDelayBucketLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerDelayBucketLimit.setStatus('mandatory')
classServerDelayBucketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerDelayBucketCount.setStatus('mandatory')
classRTMTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5), )
if mibBuilder.loadTexts: classRTMTable.setStatus('mandatory')
classRTMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"))
if mibBuilder.loadTexts: classRTMEntry.setStatus('mandatory')
classTotalDelayMedian = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTotalDelayMedian.setStatus('mandatory')
classTotalDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTotalDelayAverage.setStatus('mandatory')
classTransactionsAboveTotalDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTransactionsAboveTotalDelayThreshold.setStatus('mandatory')
classIntervalsAboveServiceLevelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classIntervalsAboveServiceLevelThreshold.setStatus('mandatory')
classLastIntervalAboveServiceLevelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classLastIntervalAboveServiceLevelThreshold.setStatus('mandatory')
classServerDelayMedian = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerDelayMedian.setStatus('mandatory')
classServerDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerDelayAverage.setStatus('mandatory')
classNetworkDelayMedian = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNetworkDelayMedian.setStatus('mandatory')
classNetworkDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNetworkDelayAverage.setStatus('mandatory')
classTransactionBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTransactionBytes.setStatus('mandatory')
classTransactionBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTransactionBytesHi.setStatus('mandatory')
classRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classRoundTripTime.setStatus('mandatory')
classRoundTripTimeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classRoundTripTimeHi.setStatus('mandatory')
classTransactionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTransactionsTotal.setStatus('mandatory')
classTotalDelayMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTotalDelayMsec.setStatus('mandatory')
classTotalDelayMsecHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTotalDelayMsecHi.setStatus('mandatory')
classServerDelayMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerDelayMsec.setStatus('mandatory')
classServerDelayMsecHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerDelayMsecHi.setStatus('mandatory')
classNetworkDelayMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNetworkDelayMsec.setStatus('mandatory')
classNetworkDelayMsecHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNetworkDelayMsecHi.setStatus('mandatory')
classWorstServerTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 6), )
if mibBuilder.loadTexts: classWorstServerTable.setStatus('mandatory')
classWorstServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 6, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"), (0, "PACKETEER-RTM-MIB", "classWorstServerIndex"))
if mibBuilder.loadTexts: classWorstServerEntry.setStatus('mandatory')
classWorstServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWorstServerIndex.setStatus('mandatory')
classWorstServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWorstServerAddress.setStatus('mandatory')
classWorstServerTransactionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWorstServerTransactionCount.setStatus('mandatory')
classWorstClientTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 7), )
if mibBuilder.loadTexts: classWorstClientTable.setStatus('mandatory')
classWorstClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 7, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"), (0, "PACKETEER-RTM-MIB", "classWorstClientIndex"))
if mibBuilder.loadTexts: classWorstClientEntry.setStatus('mandatory')
classWorstClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWorstClientIndex.setStatus('mandatory')
classWorstClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWorstClientAddress.setStatus('mandatory')
classWorstClientTransactionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 7, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWorstClientTransactionCount.setStatus('mandatory')
mibBuilder.exportSymbols("PACKETEER-RTM-MIB", classRTMConfigTable=classRTMConfigTable, classServerDelayEntry=classServerDelayEntry, classWorstServerAddress=classWorstServerAddress, classServerDelayAverage=classServerDelayAverage, classTransactionBytesHi=classTransactionBytesHi, classTransactionsAboveTotalDelayThreshold=classTransactionsAboveTotalDelayThreshold, classTotalDelayBucketLimit=classTotalDelayBucketLimit, classWorstServerTransactionCount=classWorstServerTransactionCount, classLastIntervalAboveServiceLevelThreshold=classLastIntervalAboveServiceLevelThreshold, classServerDelayBucketLimit=classServerDelayBucketLimit, classServerDelayBucketCount=classServerDelayBucketCount, classWorstServerTable=classWorstServerTable, classTotalDelayAverage=classTotalDelayAverage, classTotalDelayMsec=classTotalDelayMsec, classServerDelayMsec=classServerDelayMsec, classServerDelayTable=classServerDelayTable, psClassResponseTimes=psClassResponseTimes, classServiceLevelThreshold=classServiceLevelThreshold, classNetworkDelayMedian=classNetworkDelayMedian, classNetworkDelayMsec=classNetworkDelayMsec, classWorstClientAddress=classWorstClientAddress, classTotalDelayBucketCount=classTotalDelayBucketCount, classRoundTripTime=classRoundTripTime, classNetworkDelayMsecHi=classNetworkDelayMsecHi, classRTMConfigEntry=classRTMConfigEntry, classNetworkDelayAverage=classNetworkDelayAverage, classNetworkDelayTable=classNetworkDelayTable, classTotalDelayEntry=classTotalDelayEntry, classServerDelayMedian=classServerDelayMedian, classWorstClientTable=classWorstClientTable, classWorstServerEntry=classWorstServerEntry, classTotalDelayTable=classTotalDelayTable, classWorstServerIndex=classWorstServerIndex, classServerDelayMsecHi=classServerDelayMsecHi, classRTMEntry=classRTMEntry, classNetworkDelayBucketCount=classNetworkDelayBucketCount, classTransactionsTotal=classTransactionsTotal, classWorstClientIndex=classWorstClientIndex, classTotalDelayThreshold=classTotalDelayThreshold, classIntervalsAboveServiceLevelThreshold=classIntervalsAboveServiceLevelThreshold, classTransactionBytes=classTransactionBytes, classWorstClientTransactionCount=classWorstClientTransactionCount, classTotalDelayMedian=classTotalDelayMedian, classRoundTripTimeHi=classRoundTripTimeHi, classTotalDelayMsecHi=classTotalDelayMsecHi, classNetworkDelayEntry=classNetworkDelayEntry, classNetworkDelayBucketLimit=classNetworkDelayBucketLimit, classRTMTable=classRTMTable, classWorstClientEntry=classWorstClientEntry)
