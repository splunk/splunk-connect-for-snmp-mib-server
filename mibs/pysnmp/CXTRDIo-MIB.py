#
# PySNMP MIB module CXTRDIo-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXTRDIo-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
Alias, cxTrdIo = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxTrdIo")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, Unsigned32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, ObjectIdentity, IpAddress, MibIdentifier, TimeTicks, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Unsigned32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "MibIdentifier", "TimeTicks", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
trdSapOprTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1), )
if mibBuilder.loadTexts: trdSapOprTable.setStatus('mandatory')
trdSapOprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1), ).setIndexNames((0, "CXTRDIo-MIB", "trdSapOprNumber"))
if mibBuilder.loadTexts: trdSapOprEntry.setStatus('mandatory')
trdSapOprNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trdSapOprNumber.setStatus('mandatory')
trdSapOprAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 2), Alias()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trdSapOprAlias.setStatus('mandatory')
trdSapOprPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-4-mbps", 1), ("speed-16-mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trdSapOprPortSpeed.setStatus('mandatory')
trdSapOprTxBufferQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trdSapOprTxBufferQueue.setStatus('mandatory')
trdSapOprRxBufferQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trdSapOprRxBufferQueue.setStatus('mandatory')
trdSapOprDataGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabled-verify", 3), ("retrigger", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapOprDataGenerator.setStatus('mandatory')
trdSapOprGenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapOprGenFrames.setStatus('mandatory')
trdSapOprGenFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapOprGenFrameSize.setStatus('mandatory')
trdOprControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearSapStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trdOprControlStats.setStatus('mandatory')
trdStatOprRxGenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trdStatOprRxGenErrors.setStatus('mandatory')
trdSapAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2), )
if mibBuilder.loadTexts: trdSapAdmTable.setStatus('mandatory')
trdSapAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1), ).setIndexNames((0, "CXTRDIo-MIB", "trdSapAdmNumber"))
if mibBuilder.loadTexts: trdSapAdmEntry.setStatus('mandatory')
trdSapAdmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trdSapAdmNumber.setStatus('mandatory')
trdSapAdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapAdmAlias.setStatus('mandatory')
trdSapAdmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-4-mbps", 1), ("speed-16-mbps", 2))).clone('speed-16-mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapAdmPortSpeed.setStatus('mandatory')
trdSapAdmTxBufferQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 240)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapAdmTxBufferQueue.setStatus('mandatory')
trdSapAdmRxBufferQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 240)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapAdmRxBufferQueue.setStatus('mandatory')
trdSapAdmDataGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabled-verify", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapAdmDataGenerator.setStatus('mandatory')
trdSapAdmGenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapAdmGenFrames.setStatus('mandatory')
trdSapAdmGenFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 51, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 2100)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trdSapAdmGenFrameSize.setStatus('mandatory')
mibBuilder.exportSymbols("CXTRDIo-MIB", trdSapOprAlias=trdSapOprAlias, trdOprControlStats=trdOprControlStats, trdSapAdmDataGenerator=trdSapAdmDataGenerator, trdSapOprRxBufferQueue=trdSapOprRxBufferQueue, trdSapAdmGenFrameSize=trdSapAdmGenFrameSize, trdSapAdmGenFrames=trdSapAdmGenFrames, trdSapAdmAlias=trdSapAdmAlias, trdSapAdmRxBufferQueue=trdSapAdmRxBufferQueue, trdSapOprEntry=trdSapOprEntry, trdSapOprGenFrames=trdSapOprGenFrames, trdSapAdmTxBufferQueue=trdSapAdmTxBufferQueue, trdSapAdmPortSpeed=trdSapAdmPortSpeed, trdSapOprDataGenerator=trdSapOprDataGenerator, trdSapOprNumber=trdSapOprNumber, trdSapAdmNumber=trdSapAdmNumber, trdSapOprTxBufferQueue=trdSapOprTxBufferQueue, trdSapAdmEntry=trdSapAdmEntry, trdSapOprPortSpeed=trdSapOprPortSpeed, trdStatOprRxGenErrors=trdStatOprRxGenErrors, trdSapOprGenFrameSize=trdSapOprGenFrameSize, trdSapOprTable=trdSapOprTable, trdSapAdmTable=trdSapAdmTable)
