#
# PySNMP MIB module IRM3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IRM3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
repeaterRev1, repeaterRev2, subSysMMAC = mibBuilder.importSymbols("IRM-OIDS", "repeaterRev1", "repeaterRev2", "subSysMMAC")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, Counter32, Gauge32, Counter64, TimeTicks, Integer32, NotificationType, Unsigned32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Counter32", "Gauge32", "Counter64", "TimeTicks", "Integer32", "NotificationType", "Unsigned32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
device = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 2))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 3))
sourceAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 7))
redundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9))
deviceMMACType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 1), ("mMAC8", 2), ("mMAC5", 3), ("mMAC3", 4), ("mINIMMAC", 5), ("mRXI", 6), ("m3Shunt", 7), ("m5Shunt", 8), ("m8FNB", 9), ("nonFNB", 10), ("mMAC3Shunting", 11), ("mMAC5Shunting", 12), ("mMAC8Shunting", 13), ("m8Shunting", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMMACType.setStatus('mandatory')
deviceSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSlots.setStatus('mandatory')
deviceOccupiedSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOccupiedSlots.setStatus('mandatory')
devicePortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePortsOn.setStatus('mandatory')
deviceTotalPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalPorts.setStatus('mandatory')
deviceTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalPkts.setStatus('mandatory')
deviceTotalErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalErrors.setStatus('mandatory')
deviceTransmitColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTransmitColls.setStatus('mandatory')
deviceRecColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceRecColls.setStatus('mandatory')
deviceAlignErrs = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAlignErrs.setStatus('mandatory')
deviceCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCRCErrs.setStatus('mandatory')
deviceRunts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceRunts.setStatus('mandatory')
deviceOOWColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOOWColls.setStatus('mandatory')
deviceNoResources = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNoResources.setStatus('mandatory')
deviceRecBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceRecBytes.setStatus('mandatory')
deviceGiantFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceGiantFrames.setStatus('mandatory')
deviceRestart = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceRestart.setStatus('mandatory')
deviceResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceResetCounters.setStatus('mandatory')
deviceRedundantCts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceRedundantCts.setStatus('mandatory')
deviceDiscover = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceDiscover.setStatus('deprecated')
deviceTimeBase = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceTimeBase.setStatus('mandatory')
deviceResetRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceResetRedundancy.setStatus('mandatory')
deviceSrcAddrAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceSrcAddrAgingTime.setStatus('mandatory')
deviceSrcAddrTraps = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapsOff", 1), ("trapsOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceSrcAddrTraps.setStatus('mandatory')
deviceSrcAddrLocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockOff", 1), ("lockOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceSrcAddrLocked.setStatus('mandatory')
deviceEtherOccupiedSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceEtherOccupiedSlots.setStatus('mandatory')
deviceTROccupiedSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTROccupiedSlots.setStatus('mandatory')
deviceFDDIOccupiedSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFDDIOccupiedSlots.setStatus('mandatory')
deviceRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceRestoreDefaults.setStatus('mandatory')
deviceActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceActiveUsers.setStatus('mandatory')
deviceOSIFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOSIFrames.setStatus('mandatory')
deviceNovellFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNovellFrames.setStatus('mandatory')
deviceBanyanFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBanyanFrames.setStatus('mandatory')
deviceDECNetFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDECNetFrames.setStatus('mandatory')
deviceXNSFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceXNSFrames.setStatus('mandatory')
deviceIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIPFrames.setStatus('mandatory')
deviceCtronFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCtronFrames.setStatus('mandatory')
deviceAppletalkFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAppletalkFrames.setStatus('mandatory')
deviceOtherFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOtherFrames.setStatus('mandatory')
device64To127Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: device64To127Frames.setStatus('mandatory')
device128To255Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: device128To255Frames.setStatus('mandatory')
device256To511Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: device256To511Frames.setStatus('mandatory')
device512To1023Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: device512To1023Frames.setStatus('mandatory')
device1024To1518Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: device1024To1518Frames.setStatus('mandatory')
deviceBroadPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBroadPkts.setStatus('mandatory')
deviceMultPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMultPkts.setStatus('mandatory')
deviceThdPartyOccupiedSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceThdPartyOccupiedSlots.setStatus('mandatory')
deviceImimOccupiedSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceImimOccupiedSlots.setStatus('mandatory')
deviceLinkTraps = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapsOff", 1), ("trapsOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceLinkTraps.setStatus('mandatory')
ctIPDefaultFrameType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("snap8022", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctIPDefaultFrameType.setStatus('mandatory')
deviceSrcAddrType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipHash", 1), ("decHash", 2))).clone('ipHash')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceSrcAddrType.setStatus('mandatory')
sourceAddrBoard = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceAddrBoard.setStatus('mandatory')
sourceAddrPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceAddrPort.setStatus('mandatory')
redundancyPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyPollInterval.setStatus('mandatory')
redundancyTestTod = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyTestTod.setStatus('mandatory')
redundancyPerformTest = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("performTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyPerformTest.setStatus('mandatory')
redundancyCircuitName = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyCircuitName.setStatus('mandatory')
redundancyRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyRetryCount.setStatus('mandatory')
redundancyNumBPs = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyNumBPs.setStatus('mandatory')
redundancyCircuitBoard = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyCircuitBoard.setStatus('mandatory')
redundancyCircuitPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyCircuitPort.setStatus('mandatory')
redundancyCircuitTypes = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyCircuitTypes.setStatus('mandatory')
redundancyCircuitNumAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyCircuitNumAddr.setStatus('mandatory')
redundancyCircuitMACAddrAdd = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyCircuitMACAddrAdd.setStatus('mandatory')
redundancyCircuitMACAddrDel = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyCircuitMACAddrDel.setStatus('mandatory')
redundancyCircuitMACAddrDisp = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyCircuitMACAddrDisp.setStatus('mandatory')
redundancyCircuitEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyCircuitEnable.setStatus('mandatory')
redundancyCircuitReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyCircuitReset.setStatus('mandatory')
devAlrm = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1))
bdAlrm = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2))
portAlrm = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3))
devTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 1))
devColls = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 2))
devError = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 3))
devBroad = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 4))
devTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devTrafficEnable.setStatus('mandatory')
devTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devTrafficThreshold.setStatus('mandatory')
devCollsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devCollsEnable.setStatus('mandatory')
devCollsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devCollsThreshold.setStatus('mandatory')
devErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devErrorEnable.setStatus('mandatory')
devErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devErrorThreshold.setStatus('mandatory')
devErrorSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devErrorSource.setStatus('mandatory')
devBroadEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devBroadEnable.setStatus('mandatory')
devBroadThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devBroadThreshold.setStatus('mandatory')
bdTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 1))
bdColls = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 2))
bdError = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 3))
bdBroad = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 4))
bdTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdTrafficEnable.setStatus('mandatory')
bdTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdTrafficThreshold.setStatus('mandatory')
bdTrafficBdDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdTrafficBdDisable.setStatus('mandatory')
bdCollsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdCollsEnable.setStatus('mandatory')
bdCollsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdCollsThreshold.setStatus('mandatory')
bdCollsBdDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdCollsBdDisable.setStatus('mandatory')
bdErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdErrorEnable.setStatus('mandatory')
bdErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdErrorThreshold.setStatus('mandatory')
bdErrorSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdErrorSource.setStatus('mandatory')
bdErrorBdDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdErrorBdDisable.setStatus('mandatory')
bdBroadEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdBroadEnable.setStatus('mandatory')
bdBroadThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdBroadThreshold.setStatus('mandatory')
bdBroadDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdBroadDisable.setStatus('mandatory')
portTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 1))
portColls = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 2))
portError = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 3))
portBroad = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 4))
portTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrafficEnable.setStatus('mandatory')
portTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrafficThreshold.setStatus('mandatory')
portTrafficPortDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrafficPortDisable.setStatus('mandatory')
portCollsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCollsEnable.setStatus('mandatory')
portCollsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCollsThreshold.setStatus('mandatory')
portCollsPortDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCollsPortDisable.setStatus('mandatory')
portErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portErrorEnable.setStatus('mandatory')
portErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portErrorThreshold.setStatus('mandatory')
portErrorSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portErrorSource.setStatus('mandatory')
portErrorPortDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portErrorPortDisable.setStatus('mandatory')
portBroadEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBroadEnable.setStatus('mandatory')
portBroadThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBroadThreshold.setStatus('mandatory')
portBroadDisable = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 1, 9, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBroadDisable.setStatus('mandatory')
deviceR2 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1))
networkR2 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 2))
boardR2 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3))
portR2 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4))
tokenRingD = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3))
deviceTRPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTRPortsOn.setStatus('mandatory')
deviceTRPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTRPorts.setStatus('mandatory')
deviceTRRingPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTRRingPortsOn.setStatus('mandatory')
deviceTRRingPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTRRingPorts.setStatus('mandatory')
deviceTRLans = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTRLans.setStatus('mandatory')
deviceTRBoards = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTRBoards.setStatus('mandatory')
deviceTRBoardMap = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTRBoardMap.setStatus('mandatory')
commonB = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1))
ethernetB = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2))
tokenRingB = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3))
fDDIB = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 4))
boardIndex = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardIndex.setStatus('mandatory')
boardName = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardName.setStatus('mandatory')
boardType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardType.setStatus('mandatory')
boardTotalPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTotalPorts.setStatus('mandatory')
boardStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardStatus.setStatus('deprecated')
boardPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardPortsOn.setStatus('mandatory')
boardOper = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardOper.setStatus('deprecated')
boardActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardActiveUsers.setStatus('mandatory')
boardTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTotalPkts.setStatus('mandatory')
boardErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardErrorPkts.setStatus('mandatory')
boardTransColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTransColls.setStatus('mandatory')
boardRecColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardRecColls.setStatus('mandatory')
boardAlignErrs = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardAlignErrs.setStatus('mandatory')
boardCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardCRCErrs.setStatus('mandatory')
boardRunts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardRunts.setStatus('mandatory')
boardOOWColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardOOWColls.setStatus('mandatory')
boardNoResources = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardNoResources.setStatus('mandatory')
boardRecBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardRecBytes.setStatus('mandatory')
boardGiants = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardGiants.setStatus('mandatory')
boardOSIFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardOSIFrames.setStatus('mandatory')
boardNovellFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardNovellFrames.setStatus('mandatory')
boardBanyanFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardBanyanFrames.setStatus('mandatory')
boardDECNetFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardDECNetFrames.setStatus('mandatory')
boardXNSFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardXNSFrames.setStatus('mandatory')
boardIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardIPFrames.setStatus('mandatory')
boardCtronFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardCtronFrames.setStatus('mandatory')
boardAppletalkFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardAppletalkFrames.setStatus('mandatory')
boardOtherFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardOtherFrames.setStatus('mandatory')
board64To127Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: board64To127Frames.setStatus('mandatory')
board128To255Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: board128To255Frames.setStatus('mandatory')
board256To511Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: board256To511Frames.setStatus('mandatory')
board512To1023Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: board512To1023Frames.setStatus('mandatory')
board1024To1518Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: board1024To1518Frames.setStatus('mandatory')
boardBroadPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardBroadPkts.setStatus('mandatory')
boardMultPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardMultPkts.setStatus('mandatory')
boardSrcAddrLocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockOff", 1), ("lockOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSrcAddrLocked.setStatus('mandatory')
boardTotalRingPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTotalRingPorts.setStatus('mandatory')
boardTotalStationPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTotalStationPorts.setStatus('mandatory')
boardModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mgmtMode", 1), ("autoMOde", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardModeStatus.setStatus('mandatory')
boardTotalRingPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTotalRingPortsOn.setStatus('mandatory')
boardTotalStationPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardTotalStationPortsOn.setStatus('mandatory')
boardSpeed = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16))).clone(namedValues=NamedValues(("fourMHz", 4), ("sixteenMhz", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardSpeed.setStatus('mandatory')
ringSpeedFault = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFaultDetected", 1), ("faultDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringSpeedFault.setStatus('mandatory')
boardSpeedFaultPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSpeedFaultPort.setStatus('mandatory')
boardFirstRingPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirstRingPort.setStatus('mandatory')
boardBypassRingPortState = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 3, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("illegal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardBypassRingPortState.setStatus('mandatory')
commonP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1))
ethernetP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2))
tokenRingP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3))
fDDIP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 4))
portIndex = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portMediaType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("bnc", 1), ("aui", 2), ("tp", 3), ("tenbt", 4), ("fot", 5), ("laser", 6), ("stp", 7), ("utp", 8), ("fo", 9), ("otherMedia", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaType.setStatus('mandatory')
portAdminState = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminState.setStatus('mandatory')
portSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSourceAddr.setStatus('mandatory')
portOper = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOperational", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOper.setStatus('mandatory')
portActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portActiveUsers.setStatus('mandatory')
portName = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('mandatory')
portTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stations", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopologyType.setStatus('mandatory')
portLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linkSignalInactive", 1), ("linkSignalActive", 2), ("linkSignalNotSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkStatus.setStatus('mandatory')
portStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("segmented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatus.setStatus('mandatory')
portTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTotalPkts.setStatus('mandatory')
portErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrorPkts.setStatus('mandatory')
portXmitColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portXmitColls.setStatus('mandatory')
portRecColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRecColls.setStatus('mandatory')
portAlignErrs = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAlignErrs.setStatus('mandatory')
portCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCRCErrs.setStatus('mandatory')
portRunts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRunts.setStatus('mandatory')
portOOWColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOOWColls.setStatus('mandatory')
portNoResorces = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNoResorces.setStatus('mandatory')
portRecBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRecBytes.setStatus('mandatory')
portGiants = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGiants.setStatus('mandatory')
portRedundCrt = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRedundCrt.setStatus('mandatory')
portRedundType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRedundType.setStatus('mandatory')
portRedundStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRedundStatus.setStatus('mandatory')
portForceTrunkType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notForced", 1), ("forced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForceTrunkType.setStatus('mandatory')
portOSIFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOSIFrames.setStatus('mandatory')
portNovellFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNovellFrames.setStatus('mandatory')
portBanyanFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBanyanFrames.setStatus('mandatory')
portDECNetFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDECNetFrames.setStatus('mandatory')
portXNSFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portXNSFrames.setStatus('mandatory')
portIPFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIPFrames.setStatus('mandatory')
portCtronFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCtronFrames.setStatus('mandatory')
portAppletalkFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAppletalkFrames.setStatus('mandatory')
portOtherFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOtherFrames.setStatus('mandatory')
port64To127Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port64To127Frames.setStatus('mandatory')
port128To255Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port128To255Frames.setStatus('mandatory')
port256To511Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port256To511Frames.setStatus('mandatory')
port512To1023Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port512To1023Frames.setStatus('mandatory')
port1024To1518Frames = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port1024To1518Frames.setStatus('mandatory')
portBroadPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBroadPkts.setStatus('mandatory')
portMultPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMultPkts.setStatus('mandatory')
portSrcAddrLocked = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockOff", 1), ("lockOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSrcAddrLocked.setStatus('mandatory')
stationP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 1))
ringP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 2))
ringPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3))
commonRP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3, 1))
autowrapRP = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3, 2))
stationPortLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkSignalInactive", 1), ("linkSignalActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationPortLinkStatus.setStatus('mandatory')
stationPortLinkStateTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationPortLinkStateTime.setStatus('mandatory')
ringPortLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPortLinkStatus.setStatus('obsolete')
ringPortLinkStateTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortLinkStateTime.setStatus('obsolete')
commonRPcapabilities = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonAutowrap", 1), ("autowrap", 2), ("selectable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonRPcapabilities.setStatus('mandatory')
autowrapRPFaultStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("faultUndetectable", 1), ("noFaultDetected", 2), ("faultDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autowrapRPFaultStatus.setStatus('mandatory')
autowrapRPFaultStateTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autowrapRPFaultStateTime.setStatus('mandatory')
autowrapRPSelectedType = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unselectable", 1), ("stp", 2), ("fo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autowrapRPSelectedType.setStatus('mandatory')
autowrapRPPhantomCurrent = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 2, 2, 4, 3, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPhantomAvailable", 1), ("activatePhantom", 2), ("deactivatePhantom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autowrapRPPhantomCurrent.setStatus('mandatory')
fNB = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 1, 6, 1, 1))
connectedLeft = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detached", 1), ("attached", 2), ("faulted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectedLeft.setStatus('mandatory')
connectedRight = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detached", 1), ("attached", 2), ("faulted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectedRight.setStatus('mandatory')
boardBypassState = MibScalar((1, 3, 6, 1, 4, 1, 52, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardBypassState.setStatus('mandatory')
mibBuilder.exportSymbols("IRM3-MIB", boardType=boardType, redundancy=redundancy, boardIndex=boardIndex, portErrorSource=portErrorSource, portTraffic=portTraffic, deviceNoResources=deviceNoResources, portIPFrames=portIPFrames, devErrorEnable=devErrorEnable, portTrafficThreshold=portTrafficThreshold, bdAlrm=bdAlrm, portBroad=portBroad, port=port, port64To127Frames=port64To127Frames, deviceTotalPorts=deviceTotalPorts, boardTotalRingPortsOn=boardTotalRingPortsOn, portR2=portR2, boardOtherFrames=boardOtherFrames, bdCollsThreshold=bdCollsThreshold, connectedRight=connectedRight, boardAppletalkFrames=boardAppletalkFrames, portErrorPkts=portErrorPkts, deviceOSIFrames=deviceOSIFrames, deviceOtherFrames=deviceOtherFrames, portBroadPkts=portBroadPkts, device512To1023Frames=device512To1023Frames, boardStatus=boardStatus, boardAlignErrs=boardAlignErrs, portBanyanFrames=portBanyanFrames, devError=devError, deviceTimeBase=deviceTimeBase, redundancyCircuitEnable=redundancyCircuitEnable, portCollsThreshold=portCollsThreshold, portCollsPortDisable=portCollsPortDisable, boardPortsOn=boardPortsOn, redundancyCircuitMACAddrAdd=redundancyCircuitMACAddrAdd, fDDIB=fDDIB, bdTraffic=bdTraffic, deviceBanyanFrames=deviceBanyanFrames, connectedLeft=connectedLeft, autowrapRPPhantomCurrent=autowrapRPPhantomCurrent, deviceAppletalkFrames=deviceAppletalkFrames, deviceSlots=deviceSlots, deviceSrcAddrAgingTime=deviceSrcAddrAgingTime, redundancyCircuitBoard=redundancyCircuitBoard, device256To511Frames=device256To511Frames, deviceActiveUsers=deviceActiveUsers, devTrafficEnable=devTrafficEnable, bdTrafficThreshold=bdTrafficThreshold, bdBroadDisable=bdBroadDisable, board128To255Frames=board128To255Frames, ringPortLinkStateTime=ringPortLinkStateTime, boardNovellFrames=boardNovellFrames, boardFirstRingPort=boardFirstRingPort, portErrorThreshold=portErrorThreshold, bdCollsEnable=bdCollsEnable, redundancyCircuitPort=redundancyCircuitPort, deviceGiantFrames=deviceGiantFrames, deviceResetRedundancy=deviceResetRedundancy, portTopologyType=portTopologyType, tokenRingB=tokenRingB, deviceMultPkts=deviceMultPkts, sourceAddrBoard=sourceAddrBoard, portGiants=portGiants, portBroadThreshold=portBroadThreshold, portColls=portColls, boardRecBytes=boardRecBytes, deviceTROccupiedSlots=deviceTROccupiedSlots, port512To1023Frames=port512To1023Frames, portDECNetFrames=portDECNetFrames, commonRPcapabilities=commonRPcapabilities, deviceRecColls=deviceRecColls, bdBroadThreshold=bdBroadThreshold, deviceTRRingPorts=deviceTRRingPorts, boardRunts=boardRunts, boardXNSFrames=boardXNSFrames, commonP=commonP, portForceTrunkType=portForceTrunkType, portTrafficEnable=portTrafficEnable, boardCtronFrames=boardCtronFrames, portRunts=portRunts, tokenRingD=tokenRingD, sourceAddrPort=sourceAddrPort, boardBroadPkts=boardBroadPkts, deviceRunts=deviceRunts, boardTotalRingPorts=boardTotalRingPorts, deviceTransmitColls=deviceTransmitColls, device1024To1518Frames=device1024To1518Frames, portCtronFrames=portCtronFrames, fDDIP=fDDIP, deviceRestoreDefaults=deviceRestoreDefaults, device64To127Frames=device64To127Frames, deviceRedundantCts=deviceRedundantCts, redundancyCircuitName=redundancyCircuitName, boardR2=boardR2, port1024To1518Frames=port1024To1518Frames, devicePortsOn=devicePortsOn, bdErrorBdDisable=bdErrorBdDisable, deviceIPFrames=deviceIPFrames, ethernetP=ethernetP, bdTrafficBdDisable=bdTrafficBdDisable, portXmitColls=portXmitColls, deviceSrcAddrType=deviceSrcAddrType, portAlrm=portAlrm, ctIPDefaultFrameType=ctIPDefaultFrameType, boardName=boardName, ringP=ringP, portOOWColls=portOOWColls, redundancyCircuitTypes=redundancyCircuitTypes, deviceBroadPkts=deviceBroadPkts, devBroad=devBroad, deviceRestart=deviceRestart, boardModeStatus=boardModeStatus, portRecBytes=portRecBytes, portStatus=portStatus, stationPortLinkStatus=stationPortLinkStatus, devTraffic=devTraffic, deviceFDDIOccupiedSlots=deviceFDDIOccupiedSlots, portAdminState=portAdminState, devBroadEnable=devBroadEnable, redundancyPollInterval=redundancyPollInterval, devCollsThreshold=devCollsThreshold, alarm=alarm, boardSrcAddrLocked=boardSrcAddrLocked, boardTotalStationPorts=boardTotalStationPorts, boardSpeedFaultPort=boardSpeedFaultPort, port128To255Frames=port128To255Frames, portNovellFrames=portNovellFrames, boardBypassState=boardBypassState, portLinkStatus=portLinkStatus, deviceEtherOccupiedSlots=deviceEtherOccupiedSlots, devTrafficThreshold=devTrafficThreshold, portNoResorces=portNoResorces, devAlrm=devAlrm, redundancyPerformTest=redundancyPerformTest, bdTrafficEnable=bdTrafficEnable, redundancyTestTod=redundancyTestTod, deviceTRBoardMap=deviceTRBoardMap, board512To1023Frames=board512To1023Frames, ringPort2=ringPort2, redundancyRetryCount=redundancyRetryCount, portOtherFrames=portOtherFrames, boardOOWColls=boardOOWColls, bdErrorSource=bdErrorSource, bdColls=bdColls, autowrapRPFaultStateTime=autowrapRPFaultStateTime, portMultPkts=portMultPkts, portXNSFrames=portXNSFrames, boardOper=boardOper, boardBanyanFrames=boardBanyanFrames, deviceR2=deviceR2, boardTotalPkts=boardTotalPkts, autowrapRPSelectedType=autowrapRPSelectedType, deviceOOWColls=deviceOOWColls, redundancyCircuitMACAddrDel=redundancyCircuitMACAddrDel, deviceCRCErrs=deviceCRCErrs, boardSpeed=boardSpeed, portOSIFrames=portOSIFrames, fNB=fNB, portTotalPkts=portTotalPkts, boardErrorPkts=boardErrorPkts, deviceTotalErrors=deviceTotalErrors, portBroadDisable=portBroadDisable, devBroadThreshold=devBroadThreshold, bdError=bdError, portCollsEnable=portCollsEnable, boardOSIFrames=boardOSIFrames, deviceResetCounters=deviceResetCounters, deviceThdPartyOccupiedSlots=deviceThdPartyOccupiedSlots, portCRCErrs=portCRCErrs, portRedundStatus=portRedundStatus, commonRP=commonRP, devErrorSource=devErrorSource, boardTransColls=boardTransColls, deviceDECNetFrames=deviceDECNetFrames, ringSpeedFault=ringSpeedFault, portRedundType=portRedundType, board256To511Frames=board256To511Frames, bdErrorEnable=bdErrorEnable, deviceAlignErrs=deviceAlignErrs, tokenRingP=tokenRingP, portName=portName, ringPortLinkStatus=ringPortLinkStatus, portError=portError, portErrorEnable=portErrorEnable, device=device, networkR2=networkR2, deviceTRBoards=deviceTRBoards, deviceCtronFrames=deviceCtronFrames, portAlignErrs=portAlignErrs, stationPortLinkStateTime=stationPortLinkStateTime, deviceRecBytes=deviceRecBytes, deviceLinkTraps=deviceLinkTraps, portRedundCrt=portRedundCrt, deviceDiscover=deviceDiscover, deviceTRLans=deviceTRLans, ethernetB=ethernetB, portErrorPortDisable=portErrorPortDisable, boardGiants=boardGiants, portIndex=portIndex, boardNoResources=boardNoResources, autowrapRPFaultStatus=autowrapRPFaultStatus, redundancyCircuitReset=redundancyCircuitReset, deviceSrcAddrLocked=deviceSrcAddrLocked, portSrcAddrLocked=portSrcAddrLocked, board1024To1518Frames=board1024To1518Frames, deviceXNSFrames=deviceXNSFrames, board64To127Frames=board64To127Frames, stationP=stationP, bdBroadEnable=bdBroadEnable, boardCRCErrs=boardCRCErrs, redundancyNumBPs=redundancyNumBPs, bdBroad=bdBroad, deviceTRPorts=deviceTRPorts, commonB=commonB, deviceNovellFrames=deviceNovellFrames, boardDECNetFrames=boardDECNetFrames, boardIPFrames=boardIPFrames, port256To511Frames=port256To511Frames, deviceTotalPkts=deviceTotalPkts, autowrapRP=autowrapRP, boardBypassRingPortState=boardBypassRingPortState, deviceTRRingPortsOn=deviceTRRingPortsOn, board=board, boardRecColls=boardRecColls, deviceSrcAddrTraps=deviceSrcAddrTraps, devErrorThreshold=devErrorThreshold, devCollsEnable=devCollsEnable, boardTotalPorts=boardTotalPorts, devColls=devColls, portBroadEnable=portBroadEnable, deviceMMACType=deviceMMACType, boardMultPkts=boardMultPkts, boardTotalStationPortsOn=boardTotalStationPortsOn, bdCollsBdDisable=bdCollsBdDisable, portSourceAddr=portSourceAddr, portTrafficPortDisable=portTrafficPortDisable, deviceImimOccupiedSlots=deviceImimOccupiedSlots, boardActiveUsers=boardActiveUsers, deviceTRPortsOn=deviceTRPortsOn, redundancyCircuitNumAddr=redundancyCircuitNumAddr, portRecColls=portRecColls, portAppletalkFrames=portAppletalkFrames, portActiveUsers=portActiveUsers, bdErrorThreshold=bdErrorThreshold, portOper=portOper, portMediaType=portMediaType, sourceAddr=sourceAddr, deviceOccupiedSlots=deviceOccupiedSlots, redundancyCircuitMACAddrDisp=redundancyCircuitMACAddrDisp, device128To255Frames=device128To255Frames)
