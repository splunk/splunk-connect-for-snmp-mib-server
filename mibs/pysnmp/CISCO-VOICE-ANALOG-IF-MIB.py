#
# PySNMP MIB module CISCO-VOICE-ANALOG-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VOICE-ANALOG-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:02:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Counter64, ModuleIdentity, Integer32, TimeTicks, ObjectIdentity, iso, NotificationType, Counter32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Counter64", "ModuleIdentity", "Integer32", "TimeTicks", "ObjectIdentity", "iso", "NotificationType", "Counter32", "IpAddress", "Gauge32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoVoiceAnalogIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 62))
ciscoVoiceAnalogIfMIB.setRevisions(('2005-10-03 00:00', '2004-10-14 00:00', '2004-01-15 00:00', '2002-08-03 00:00', '2002-07-29 00:00', '2002-01-21 00:00',))
if mibBuilder.loadTexts: ciscoVoiceAnalogIfMIB.setLastUpdated('200510030000Z')
if mibBuilder.loadTexts: ciscoVoiceAnalogIfMIB.setOrganization('Cisco Systems, Inc.')
cvaIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 1))
cvaIfGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1))
cvaIfEMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2))
cvaIfFXOObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3))
cvaIfFXSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4))
class InterfaceDialType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("dtmf", 1), ("pulse", 2), ("mf", 3))

cvaIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 1), )
if mibBuilder.loadTexts: cvaIfCfgTable.setStatus('current')
cvaIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvaIfCfgEntry.setStatus('current')
cvaIfCfgImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ohms600Real", 2), ("ohms600Complex", 3), ("ohms900Complex", 4), ("ohmsComplex1", 5), ("ohmsComplex2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfCfgImpedance.setStatus('current')
cvaIfCfgIntegratedDSP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfCfgIntegratedDSP.setStatus('current')
cvaIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 2), )
if mibBuilder.loadTexts: cvaIfStatusTable.setStatus('current')
cvaIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 2, 1), )
cvaIfCfgEntry.registerAugmentions(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfStatusEntry"))
cvaIfStatusEntry.setIndexNames(*cvaIfCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvaIfStatusEntry.setStatus('current')
cvaIfStatusInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("voice", 2), ("g3Fax", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfStatusInfoType.setStatus('current')
cvaIfMaintenanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("hostCompressedLoopback", 2), ("hostUncompressedLoopback", 3), ("ifCompressedLoopback", 4), ("ifUncompressedLoopback", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfMaintenanceMode.setStatus('current')
cvaIfStatusSignalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfStatusSignalErrors.setStatus('current')
cvaIfEMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1), )
if mibBuilder.loadTexts: cvaIfEMCfgTable.setStatus('current')
cvaIfEMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvaIfEMCfgEntry.setStatus('current')
cvaIfEMCfgSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("winkStart", 1), ("immediateDial", 2), ("delayDial", 3), ("lmr", 4), ("fgd", 5), ("fgd-eana", 6))).clone('winkStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMCfgSignalType.setStatus('current')
cvaIfEMCfgOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoWires", 1), ("fourWires", 2))).clone('twoWires')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMCfgOperation.setStatus('current')
cvaIfEMCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("typeI", 1), ("typeII", 2), ("typeIII", 3), ("typeIV", 4), ("typeV", 5))).clone('typeI')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMCfgType.setStatus('current')
cvaIfEMCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1, 4), InterfaceDialType().clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMCfgDialType.setStatus('current')
cvaIfEMCfgLmrMCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inact", 1), ("audio", 2), ("dial", 3))).clone('inact')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMCfgLmrMCap.setStatus('current')
cvaIfEMCfgLmrECap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("seize", 4), ("voice", 5), ("inactive", 6))).clone('seize')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMCfgLmrECap.setStatus('current')
cvaIfEMCfgAutoGainControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMCfgAutoGainControl.setStatus('current')
cvaIfEMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 2), )
if mibBuilder.loadTexts: cvaIfEMStatusTable.setStatus('current')
cvaIfEMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 2, 1), )
cvaIfEMCfgEntry.registerAugmentions(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMStatusEntry"))
cvaIfEMStatusEntry.setIndexNames(*cvaIfEMCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvaIfEMStatusEntry.setStatus('current')
cvaIfEMInSeizureActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfEMInSeizureActive.setStatus('current')
cvaIfEMOutSeizureActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfEMOutSeizureActive.setStatus('current')
cvaIfEMTimingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3), )
if mibBuilder.loadTexts: cvaIfEMTimingTable.setStatus('current')
cvaIfEMTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1), )
cvaIfEMCfgEntry.registerAugmentions(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingEntry"))
cvaIfEMTimingEntry.setIndexNames(*cvaIfEMCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvaIfEMTimingEntry.setStatus('current')
cvaIfEMTimingDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingDigitDuration.setStatus('current')
cvaIfEMTimingInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingInterDigitDuration.setStatus('current')
cvaIfEMTimingPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20)).clone(10)).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingPulseRate.setStatus('current')
cvaIfEMTimingPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(750)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingPulseInterDigitDuration.setStatus('current')
cvaIfEMTimingClearWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 2000)).clone(400)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingClearWaitDuration.setStatus('current')
cvaIfEMTimingMaxWinkWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(200)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingMaxWinkWaitDuration.setStatus('current')
cvaIfEMTimingMaxWinkDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000)).clone(200)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingMaxWinkDuration.setStatus('current')
cvaIfEMTimingDelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000)).clone(300)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingDelayStart.setStatus('current')
cvaIfEMTimingMaxDelayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingMaxDelayDuration.setStatus('current')
cvaIfEMTimingMinDelayPulseWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(140, 5000), )).clone(140)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingMinDelayPulseWidth.setStatus('current')
cvaIfEMTimingVoiceHangover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(250)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingVoiceHangover.setStatus('current')
cvaIfEMTimeoutLmrTeardown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(5, 60000), )).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimeoutLmrTeardown.setStatus('current')
cvaIfEMTimeoutPttXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimeoutPttXmt.setStatus('current')
cvaIfEMTimeoutPttRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimeoutPttRcv.setStatus('current')
cvaIfEMTimingDelayVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfEMTimingDelayVoice.setStatus('current')
cvaIfFXOCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 1), )
if mibBuilder.loadTexts: cvaIfFXOCfgTable.setStatus('current')
cvaIfFXOCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvaIfFXOCfgEntry.setStatus('current')
cvaIfFXOCfgSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fxoLoopStart", 1), ("fxoGroundStart", 2), ("fxoCama", 3))).clone('fxoLoopStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOCfgSignalType.setStatus('current')
cvaIfFXOCfgNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('rings').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOCfgNumberRings.setStatus('current')
cvaIfFXOCfgSupDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOCfgSupDisconnect.setStatus('deprecated')
cvaIfFXOCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 1, 1, 4), InterfaceDialType().clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOCfgDialType.setStatus('current')
cvaIfFXOCfgSupDisconnect2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("signal", 0), ("anytone", 1), ("dualtoneMidcall", 2), ("dualtonePreconnect", 3))).clone('signal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOCfgSupDisconnect2.setStatus('current')
cvaIfFXOStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 2), )
if mibBuilder.loadTexts: cvaIfFXOStatusTable.setStatus('current')
cvaIfFXOStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 2, 1), )
cvaIfFXOCfgEntry.registerAugmentions(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOStatusEntry"))
cvaIfFXOStatusEntry.setIndexNames(*cvaIfFXOCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvaIfFXOStatusEntry.setStatus('current')
cvaIfFXOHookStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onHook", 1), ("offHook", 2), ("trunked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXOHookStatus.setStatus('current')
cvaIfFXORingDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXORingDetect.setStatus('current')
cvaIfFXORingGround = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXORingGround.setStatus('current')
cvaIfFXOTipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXOTipGround.setStatus('current')
cvaIfFXOTimingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 3), )
if mibBuilder.loadTexts: cvaIfFXOTimingTable.setStatus('current')
cvaIfFXOTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 3, 1), )
cvaIfFXOCfgEntry.registerAugmentions(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingEntry"))
cvaIfFXOTimingEntry.setIndexNames(*cvaIfFXOCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvaIfFXOTimingEntry.setStatus('current')
cvaIfFXOTimingDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOTimingDigitDuration.setStatus('current')
cvaIfFXOTimingInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOTimingInterDigitDuration.setStatus('current')
cvaIfFXOTimingPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20)).clone(10)).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOTimingPulseRate.setStatus('current')
cvaIfFXOTimingPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXOTimingPulseInterDigitDuration.setStatus('current')
cvaIfFXSCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 1), )
if mibBuilder.loadTexts: cvaIfFXSCfgTable.setStatus('current')
cvaIfFXSCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvaIfFXSCfgEntry.setStatus('current')
cvaIfFXSCfgSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fxsLoopStart", 1), ("fxsGroundStart", 2))).clone('fxsLoopStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXSCfgSignalType.setStatus('current')
cvaIfFXSRingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ringFrequency25", 1), ("ringFrequency50", 2), ("ringFrequency20", 3), ("ringFrequency30", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXSRingFrequency.setStatus('current')
cvaIfFXSStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 2), )
if mibBuilder.loadTexts: cvaIfFXSStatusTable.setStatus('current')
cvaIfFXSStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 2, 1), )
cvaIfFXSCfgEntry.registerAugmentions(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSStatusEntry"))
cvaIfFXSStatusEntry.setIndexNames(*cvaIfFXSCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvaIfFXSStatusEntry.setStatus('current')
cvaIfFXSHookStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onHook", 1), ("offHook", 2), ("trunked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXSHookStatus.setStatus('current')
cvaIfFXSRingActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXSRingActive.setStatus('current')
cvaIfFXSRingGround = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXSRingGround.setStatus('current')
cvaIfFXSTipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvaIfFXSTipGround.setStatus('current')
cvaIfFXSTimingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 3), )
if mibBuilder.loadTexts: cvaIfFXSTimingTable.setStatus('current')
cvaIfFXSTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 3, 1), )
cvaIfFXSCfgEntry.registerAugmentions(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSTimingEntry"))
cvaIfFXSTimingEntry.setIndexNames(*cvaIfFXSCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvaIfFXSTimingEntry.setStatus('current')
cvaIfFXSTimingDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXSTimingDigitDuration.setStatus('current')
cvaIfFXSTimingInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 62, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvaIfFXSTimingInterDigitDuration.setStatus('current')
cvaIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 3))
cvaIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 1))
cvaIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2))
cvaIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 1, 1)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfGeneralGroup"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMGroup"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOGroup"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfMIBCompliance = cvaIfMIBCompliance.setStatus('deprecated')
cvaIfMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 1, 2)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfGeneralGroup"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMGroupRev1"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOGroup2"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfMIBCompliance2 = cvaIfMIBCompliance2.setStatus('deprecated')
cvaIfMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 1, 3)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfGeneralGroup"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMGroupRev2"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOGroup2"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfMIBCompliance3 = cvaIfMIBCompliance3.setStatus('current')
cvaIfGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2, 1)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfCfgIntegratedDSP"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfCfgImpedance"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfStatusInfoType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfMaintenanceMode"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfStatusSignalErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfGeneralGroup = cvaIfGeneralGroup.setStatus('current')
cvaIfEMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2, 2)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMInSeizureActive"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMOutSeizureActive"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgSignalType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgOperation"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgDialType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingPulseRate"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingPulseInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingClearWaitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxWinkWaitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxWinkDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingDelayStart"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxDelayDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMinDelayPulseWidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfEMGroup = cvaIfEMGroup.setStatus('deprecated')
cvaIfFXOGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2, 3)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOHookStatus"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXORingDetect"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXORingGround"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTipGround"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgSignalType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgNumberRings"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgSupDisconnect"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgDialType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingPulseRate"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfFXOGroup = cvaIfFXOGroup.setStatus('deprecated')
cvaIfFXSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2, 4)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSHookStatus"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSRingActive"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSRingGround"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSTipGround"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSCfgSignalType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSRingFrequency"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSTimingDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXSTimingInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfFXSGroup = cvaIfFXSGroup.setStatus('current')
cvaIfFXOGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2, 5)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOHookStatus"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXORingDetect"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXORingGround"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTipGround"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgSignalType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgNumberRings"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgSupDisconnect2"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOCfgDialType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingPulseRate"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfFXOTimingPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfFXOGroup2 = cvaIfFXOGroup2.setStatus('current')
cvaIfEMGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2, 6)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMInSeizureActive"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMOutSeizureActive"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgSignalType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgOperation"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgDialType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingPulseRate"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingPulseInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingClearWaitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxWinkWaitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxWinkDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingDelayStart"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxDelayDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMinDelayPulseWidth"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgLmrMCap"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgLmrECap"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingVoiceHangover"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimeoutLmrTeardown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfEMGroupRev1 = cvaIfEMGroupRev1.setStatus('deprecated')
cvaIfEMGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 62, 3, 2, 7)).setObjects(("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMInSeizureActive"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMOutSeizureActive"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgSignalType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgOperation"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgDialType"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingPulseRate"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingPulseInterDigitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingClearWaitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxWinkWaitDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxWinkDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingDelayStart"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMaxDelayDuration"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingMinDelayPulseWidth"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgLmrMCap"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgLmrECap"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingVoiceHangover"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimeoutLmrTeardown"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMCfgAutoGainControl"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimeoutPttXmt"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimeoutPttRcv"), ("CISCO-VOICE-ANALOG-IF-MIB", "cvaIfEMTimingDelayVoice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaIfEMGroupRev2 = cvaIfEMGroupRev2.setStatus('current')
mibBuilder.exportSymbols("CISCO-VOICE-ANALOG-IF-MIB", cvaIfFXORingDetect=cvaIfFXORingDetect, cvaIfFXOObjects=cvaIfFXOObjects, cvaIfEMCfgEntry=cvaIfEMCfgEntry, cvaIfCfgIntegratedDSP=cvaIfCfgIntegratedDSP, cvaIfStatusSignalErrors=cvaIfStatusSignalErrors, cvaIfMIBCompliance2=cvaIfMIBCompliance2, cvaIfFXSTimingDigitDuration=cvaIfFXSTimingDigitDuration, cvaIfFXSTimingInterDigitDuration=cvaIfFXSTimingInterDigitDuration, cvaIfFXOCfgNumberRings=cvaIfFXOCfgNumberRings, cvaIfFXSStatusEntry=cvaIfFXSStatusEntry, cvaIfFXOCfgSupDisconnect2=cvaIfFXOCfgSupDisconnect2, cvaIfFXOStatusTable=cvaIfFXOStatusTable, cvaIfEMTimingEntry=cvaIfEMTimingEntry, ciscoVoiceAnalogIfMIB=ciscoVoiceAnalogIfMIB, cvaIfEMTimingDelayVoice=cvaIfEMTimingDelayVoice, cvaIfMIBCompliance3=cvaIfMIBCompliance3, cvaIfEMTimingDelayStart=cvaIfEMTimingDelayStart, cvaIfEMTimeoutPttXmt=cvaIfEMTimeoutPttXmt, cvaIfFXOCfgEntry=cvaIfFXOCfgEntry, cvaIfFXSRingActive=cvaIfFXSRingActive, cvaIfEMCfgOperation=cvaIfEMCfgOperation, cvaIfEMGroupRev2=cvaIfEMGroupRev2, cvaIfFXOTimingEntry=cvaIfFXOTimingEntry, cvaIfEMStatusEntry=cvaIfEMStatusEntry, cvaIfEMCfgType=cvaIfEMCfgType, cvaIfFXOCfgSupDisconnect=cvaIfFXOCfgSupDisconnect, cvaIfStatusInfoType=cvaIfStatusInfoType, cvaIfEMTimingDigitDuration=cvaIfEMTimingDigitDuration, cvaIfEMTimingMinDelayPulseWidth=cvaIfEMTimingMinDelayPulseWidth, cvaIfCfgTable=cvaIfCfgTable, cvaIfMIBCompliances=cvaIfMIBCompliances, cvaIfMIBGroups=cvaIfMIBGroups, PYSNMP_MODULE_ID=ciscoVoiceAnalogIfMIB, cvaIfFXOTimingPulseRate=cvaIfFXOTimingPulseRate, cvaIfFXSRingGround=cvaIfFXSRingGround, cvaIfFXOStatusEntry=cvaIfFXOStatusEntry, cvaIfEMTimingClearWaitDuration=cvaIfEMTimingClearWaitDuration, cvaIfGeneralObjects=cvaIfGeneralObjects, cvaIfEMCfgDialType=cvaIfEMCfgDialType, cvaIfFXOTipGround=cvaIfFXOTipGround, cvaIfFXSStatusTable=cvaIfFXSStatusTable, cvaIfMIBConformance=cvaIfMIBConformance, cvaIfEMTimingMaxWinkWaitDuration=cvaIfEMTimingMaxWinkWaitDuration, cvaIfFXORingGround=cvaIfFXORingGround, cvaIfMIBCompliance=cvaIfMIBCompliance, cvaIfEMTimeoutLmrTeardown=cvaIfEMTimeoutLmrTeardown, cvaIfEMGroupRev1=cvaIfEMGroupRev1, InterfaceDialType=InterfaceDialType, cvaIfFXOTimingTable=cvaIfFXOTimingTable, cvaIfEMCfgLmrMCap=cvaIfEMCfgLmrMCap, cvaIfEMTimingVoiceHangover=cvaIfEMTimingVoiceHangover, cvaIfFXOGroup2=cvaIfFXOGroup2, cvaIfEMTimingPulseInterDigitDuration=cvaIfEMTimingPulseInterDigitDuration, cvaIfFXSCfgTable=cvaIfFXSCfgTable, cvaIfFXSHookStatus=cvaIfFXSHookStatus, cvaIfFXSRingFrequency=cvaIfFXSRingFrequency, cvaIfEMStatusTable=cvaIfEMStatusTable, cvaIfEMTimeoutPttRcv=cvaIfEMTimeoutPttRcv, cvaIfFXSCfgSignalType=cvaIfFXSCfgSignalType, cvaIfStatusEntry=cvaIfStatusEntry, cvaIfEMTimingInterDigitDuration=cvaIfEMTimingInterDigitDuration, cvaIfGeneralGroup=cvaIfGeneralGroup, cvaIfFXSGroup=cvaIfFXSGroup, cvaIfEMTimingMaxDelayDuration=cvaIfEMTimingMaxDelayDuration, cvaIfCfgImpedance=cvaIfCfgImpedance, cvaIfFXOCfgDialType=cvaIfFXOCfgDialType, cvaIfFXOGroup=cvaIfFXOGroup, cvaIfEMObjects=cvaIfEMObjects, cvaIfFXOHookStatus=cvaIfFXOHookStatus, cvaIfEMInSeizureActive=cvaIfEMInSeizureActive, cvaIfFXSTimingTable=cvaIfFXSTimingTable, cvaIfFXOTimingPulseInterDigitDuration=cvaIfFXOTimingPulseInterDigitDuration, cvaIfCfgEntry=cvaIfCfgEntry, cvaIfFXOTimingInterDigitDuration=cvaIfFXOTimingInterDigitDuration, cvaIfFXOTimingDigitDuration=cvaIfFXOTimingDigitDuration, cvaIfEMTimingMaxWinkDuration=cvaIfEMTimingMaxWinkDuration, cvaIfEMTimingPulseRate=cvaIfEMTimingPulseRate, cvaIfMaintenanceMode=cvaIfMaintenanceMode, cvaIfEMCfgLmrECap=cvaIfEMCfgLmrECap, cvaIfStatusTable=cvaIfStatusTable, cvaIfEMCfgSignalType=cvaIfEMCfgSignalType, cvaIfEMGroup=cvaIfEMGroup, cvaIfEMCfgAutoGainControl=cvaIfEMCfgAutoGainControl, cvaIfEMOutSeizureActive=cvaIfEMOutSeizureActive, cvaIfFXOCfgTable=cvaIfFXOCfgTable, cvaIfFXSCfgEntry=cvaIfFXSCfgEntry, cvaIfEMCfgTable=cvaIfEMCfgTable, cvaIfFXOCfgSignalType=cvaIfFXOCfgSignalType, cvaIfFXSTimingEntry=cvaIfFXSTimingEntry, cvaIfObjects=cvaIfObjects, cvaIfEMTimingTable=cvaIfEMTimingTable, cvaIfFXSTipGround=cvaIfFXSTipGround, cvaIfFXSObjects=cvaIfFXSObjects)
