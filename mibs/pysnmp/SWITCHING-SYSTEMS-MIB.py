#
# PySNMP MIB module SWITCHING-SYSTEMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCHING-SYSTEMS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, Bits, Unsigned32, NotificationType, ModuleIdentity, enterprises, Counter64, NotificationType, ObjectIdentity, Integer32, Counter32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Bits", "Unsigned32", "NotificationType", "ModuleIdentity", "enterprises", "Counter64", "NotificationType", "ObjectIdentity", "Integer32", "Counter32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
class SwSysStorageType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3)

class SwSysAddressType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2)

class SwSysResourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3)

class SwSysResourceBitMask(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class IpxNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class ATNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class ATName(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class DdpNodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

synernetics = MibIdentifier((1, 3, 6, 1, 4, 1, 114))
switchingSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1))
switchingSystemsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 2))
corebuilderProductsI = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3))
switchingSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4))
corebuilderSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 5))
superstackSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 6))
switchingSystemsFddiMib = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10))
corebuilderProductsII = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 2, 1))
superstackProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 2, 2))
swSysSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 1))
swSysSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 2))
swSysControlPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 3))
swSysPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 4))
swSysSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 5))
swSysAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 6))
swSysInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 7))
swSysEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 8))
swSysSmt = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 9))
swSysBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 10))
swSysIpRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 11))
swSysNetworkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 12))
swSysTokenRingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 13))
swSysFtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14))
swSysIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 15))
swSysIpxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 16))
swSysAppleTalkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 17))
swSysModuleCardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 18))
swSysDiagnosticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 19))
swSysSystemId = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemId.setStatus('mandatory')
swSysSystemType = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("lanplex6000", 2), ("lanplex2000", 3), ("coreBuilder3500", 4), ("coreBuilder9400", 5), ("superStack3900", 6), ("superStack9300", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemType.setStatus('mandatory')
swSysSystemName = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemName.setStatus('mandatory')
swSysSystemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemManufacturer.setStatus('mandatory')
swSysSystemHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemHardwareRevision.setStatus('mandatory')
swSysSystemMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemMemorySize.setStatus('mandatory')
swSysSystemFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemFlashMemorySize.setStatus('mandatory')
swSysSystemNvMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemNvMemorySize.setStatus('mandatory')
swSysSystemSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemSoftwareRevision.setStatus('mandatory')
swSysSystemBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemBuildTime.setStatus('mandatory')
swSysSystemSnmpRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemSnmpRevision.setStatus('mandatory')
swSysSystemRequestedSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemRequestedSnmpMode.setStatus('mandatory')
swSysSystemCurrentSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemCurrentSnmpMode.setStatus('mandatory')
swSysSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("nvReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemAction.setStatus('mandatory')
swSysSystemOvertemperature = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemOvertemperature.setStatus('mandatory')
swSysSystemFanFailure = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemFanFailure.setStatus('mandatory')
swSysSystemProtocolMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemProtocolMask.setStatus('mandatory')
swSysSystemConsoleAccess = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemConsoleAccess.setStatus('mandatory')
swSysSystemConsoleReadPwd = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemConsoleReadPwd.setStatus('mandatory')
swSysSystemConsoleWritePwd = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemConsoleWritePwd.setStatus('mandatory')
swSysSystemConsoleAdminPwd = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemConsoleAdminPwd.setStatus('mandatory')
swSysSystemDateTime = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemDateTime.setStatus('mandatory')
swSysSystemDSTime = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemDSTime.setStatus('mandatory')
swSysSystemTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemTimeZone.setStatus('mandatory')
swSysSystemCurrentFddiStationMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleStationMode", 1), ("multiStationMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemCurrentFddiStationMode.setStatus('mandatory')
swSysSystemRequestedFddiStationMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleStationMode", 1), ("multiStationMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemRequestedFddiStationMode.setStatus('mandatory')
swSysSystemLog = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27))
swSysSystemLogEntryCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemLogEntryCurrentCount.setStatus('mandatory')
swSysSystemLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemLogMaxSize.setStatus('mandatory')
swSysSystemLogSeverityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("error", 3), ("fatal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSystemLogSeverityThreshold.setStatus('mandatory')
swSysSystemLogTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 4), )
if mibBuilder.loadTexts: swSysSystemLogTable.setStatus('mandatory')
swSysSystemLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 4, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSystemLogIndex"))
if mibBuilder.loadTexts: swSysSystemLogEntry.setStatus('mandatory')
swSysSystemLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemLogIndex.setStatus('mandatory')
swSysSystemLogSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("error", 3), ("fatal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemLogSeverityLevel.setStatus('mandatory')
swSysSystemLogDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemLogDateTime.setStatus('mandatory')
swSysSystemLogFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exception", 1), ("operatingSystem", 2), ("assertion", 3), ("spanningTree", 4), ("fcmlmm", 5), ("lmmfddi", 6), ("lmmboard", 7), ("esm", 8), ("trsm", 9), ("efsm", 10), ("fsm", 11), ("hsi", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemLogFacility.setStatus('mandatory')
swSysSystemLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 27, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemLogMessage.setStatus('mandatory')
swSysSystemBaseMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 28), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemBaseMACAddress.setStatus('mandatory')
swSysSystemMACAddressCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemMACAddressCount.setStatus('mandatory')
swSysSystemChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemChassisSerialNumber.setStatus('mandatory')
swSysSystemFPMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemFPMemorySize.setStatus('mandatory')
swSysSystemBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSystemBufferSize.setStatus('mandatory')
swSysSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotCount.setStatus('mandatory')
swSysSlotTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2), )
if mibBuilder.loadTexts: swSysSlotTable.setStatus('mandatory')
swSysSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSlotIndex"))
if mibBuilder.loadTexts: swSysSlotEntry.setStatus('mandatory')
swSysSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotIndex.setStatus('mandatory')
swSysSlotBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("emptyLocation", 2), ("esmBoard", 7), ("fcmBoard", 8), ("lmmBoard", 9), ("efsmBoard", 10), ("trsmBoard", 11), ("tmmBoard", 12), ("fsmBoard", 13), ("fesmBoard", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotBoardType.setStatus('mandatory')
swSysSlotBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotBoardRevision.setStatus('mandatory')
swSysSlotBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("testing", 2), ("offline", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotBoardStatus.setStatus('mandatory')
swSysSlotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotBoardName.setStatus('mandatory')
swSysSlotBoardNameAbbrev = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotBoardNameAbbrev.setStatus('mandatory')
swSysSlotEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotEthernetPortCount.setStatus('mandatory')
swSysSlotFddiMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotFddiMacCount.setStatus('mandatory')
swSysSlotFddiPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotFddiPortCount.setStatus('mandatory')
swSysSlotOvertemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotOvertemperature.setStatus('mandatory')
swSysSlotTokenRingPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotTokenRingPortCount.setStatus('mandatory')
swSysSlotBoardRevStr = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotBoardRevStr.setStatus('mandatory')
swSysSlotConverterBad = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSlotConverterBad.setStatus('mandatory')
swSysControlPanelHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysControlPanelHardwareRevision.setStatus('mandatory')
swSysControlPanelSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysControlPanelSoftwareRevision.setStatus('mandatory')
swSysControlPanelLines = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysControlPanelLines.setStatus('mandatory')
swSysControlPanelColumns = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysControlPanelColumns.setStatus('mandatory')
swSysControlPanelText = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysControlPanelText.setStatus('mandatory')
swSysControlPanelAccess = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysControlPanelAccess.setStatus('mandatory')
swSysPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysPowerSupplyCount.setStatus('mandatory')
swSysPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2), )
if mibBuilder.loadTexts: swSysPowerSupplyStatusTable.setStatus('mandatory')
swSysPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysPowerSupplyStatusIndex"))
if mibBuilder.loadTexts: swSysPowerSupplyStatusEntry.setStatus('mandatory')
swSysPowerSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysPowerSupplyStatusIndex.setStatus('mandatory')
swSysPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysPowerSupplyStatus.setStatus('mandatory')
swSysPowerSupplyStatusSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysPowerSupplyStatusSupported.setStatus('mandatory')
swSysSnmpAgentId = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSnmpAgentId.setStatus('mandatory')
swSysSnmpInternalAgentTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSnmpInternalAgentTrapMask.setStatus('mandatory')
swSysSnmpInternalAgentTrapDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSnmpInternalAgentTrapDestinationMask.setStatus('mandatory')
swSysSnmpProxyInternalRequests = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSnmpProxyInternalRequests.setStatus('deprecated')
swSysSnmpInternalProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSnmpInternalProxyRequestMaxAge.setStatus('mandatory')
swSysSnmpProxyInternalTraps = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSnmpProxyInternalTraps.setStatus('deprecated')
swSysSnmpInternalProxyTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7), )
if mibBuilder.loadTexts: swSysSnmpInternalProxyTable.setStatus('mandatory')
swSysSnmpInternalProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSnmpInternalProxyAgentId"), (0, "SWITCHING-SYSTEMS-MIB", "swSysSnmpInternalProxyAccessClass"))
if mibBuilder.loadTexts: swSysSnmpInternalProxyEntry.setStatus('mandatory')
swSysSnmpInternalProxyAgentId = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSnmpInternalProxyAgentId.setStatus('mandatory')
swSysSnmpInternalProxyAccessClass = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSnmpInternalProxyAccessClass.setStatus('mandatory')
swSysSnmpInternalProxyCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSnmpInternalProxyCommunity.setStatus('mandatory')
swSysAgentRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentRequestMaxAge.setStatus('mandatory')
swSysAgentProxyRemoteSmtRequests = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentProxyRemoteSmtRequests.setStatus('deprecated')
swSysAgentRemoteSmtProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentRemoteSmtProxyRequestMaxAge.setStatus('mandatory')
swSysAgentProxyRemoteSmtEvents = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentProxyRemoteSmtEvents.setStatus('mandatory')
swSysAgentTrapDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5), )
if mibBuilder.loadTexts: swSysAgentTrapDescriptionTable.setStatus('mandatory')
swSysAgentTrapDescriptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysAgentTrapDescriptionIndex"))
if mibBuilder.loadTexts: swSysAgentTrapDescriptionTableEntry.setStatus('mandatory')
swSysAgentTrapDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAgentTrapDescriptionIndex.setStatus('mandatory')
swSysAgentTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAgentTrapEnterprise.setStatus('mandatory')
swSysAgentTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAgentTrapNumber.setStatus('mandatory')
swSysAgentTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6), )
if mibBuilder.loadTexts: swSysAgentTrapDestinationTable.setStatus('mandatory')
swSysAgentTrapDestinationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysAgentTrapDestinationAddressType"), (0, "SWITCHING-SYSTEMS-MIB", "swSysAgentTrapDestinationAddress"))
if mibBuilder.loadTexts: swSysAgentTrapDestinationTableEntry.setStatus('mandatory')
swSysAgentTrapDestinationAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAgentTrapDestinationAddressType.setStatus('mandatory')
swSysAgentTrapDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAgentTrapDestinationAddress.setStatus('mandatory')
swSysAgentTrapDestinationTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentTrapDestinationTrapMask.setStatus('mandatory')
swSysAgentTrapDestinationEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentTrapDestinationEntryStatus.setStatus('mandatory')
swSysAgentReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentReadCommunity.setStatus('mandatory')
swSysAgentReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAgentReadWriteCommunity.setStatus('mandatory')
swSysInterfaceLocationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1), )
if mibBuilder.loadTexts: swSysInterfaceLocationTable.setStatus('mandatory')
swSysInterfaceLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysInterfaceLocationIfIndex"))
if mibBuilder.loadTexts: swSysInterfaceLocationEntry.setStatus('mandatory')
swSysInterfaceLocationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysInterfaceLocationIfIndex.setStatus('mandatory')
swSysInterfaceLocationInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ethernetPort", 2), ("fddiMac", 3), ("tokenringPort", 4), ("atmPort", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysInterfaceLocationInterfaceType.setStatus('mandatory')
swSysInterfaceLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysInterfaceLocationType.setStatus('mandatory')
swSysInterfaceLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysInterfaceLocationTypeIndex.setStatus('mandatory')
swSysInterfaceLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysInterfaceLocationLocalIndex.setStatus('mandatory')
swSysInterfaceLocationSystemModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysInterfaceLocationSystemModuleIndex.setStatus('mandatory')
swSysEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortCount.setStatus('mandatory')
swSysEthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2), )
if mibBuilder.loadTexts: swSysEthernetPortTable.setStatus('mandatory')
swSysEthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysEthernetPortIndex"))
if mibBuilder.loadTexts: swSysEthernetPortEntry.setStatus('mandatory')
swSysEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortIndex.setStatus('mandatory')
swSysEthernetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortIfIndex.setStatus('mandatory')
swSysEthernetPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysEthernetPortLabel.setStatus('mandatory')
swSysEthernetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortLinkStatus.setStatus('mandatory')
swSysEthernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("rj2110BaseT", 1), ("rj4510BaseT", 2), ("st10BaseFL", 3), ("aui", 4), ("bnc10Base2", 5), ("other", 6), ("rj45100BaseT", 7), ("sc100BaseFx", 8), ("untermBnc10Base2", 9), ("sc1000BaseLxSm", 10), ("sc1000BaseLxMm", 11), ("sc1000BaseLxSmMm", 12), ("sc1000BaseLx10km", 13), ("sc1000BaseSx", 14), ("hssdc1000BaseCx", 15), ("db91000BaseCx", 16), ("gbicNotPresent", 17), ("gbic1000BaseCxDb9", 18), ("gbic1000BaseCxHssdc", 19), ("gbic1000BaseLx10Km", 20), ("gbic1000BaseLx", 21), ("gbic1000BaseSx", 22), ("rj451000BaseT", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortType.setStatus('mandatory')
swSysEthernetPortRateTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3), )
if mibBuilder.loadTexts: swSysEthernetPortRateTable.setStatus('mandatory')
swSysEthernetPortRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysEthernetPortRateIndex"))
if mibBuilder.loadTexts: swSysEthernetPortRateEntry.setStatus('mandatory')
swSysEthernetPortRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRateIndex.setStatus('mandatory')
swSysEthernetPortRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRateByteReceiveRate.setStatus('mandatory')
swSysEthernetPortRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRatePeakByteReceiveRate.setStatus('mandatory')
swSysEthernetPortRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRateFrameReceiveRate.setStatus('mandatory')
swSysEthernetPortRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRatePeakFrameReceiveRate.setStatus('mandatory')
swSysEthernetPortRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRateByteTransmitRate.setStatus('mandatory')
swSysEthernetPortRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRatePeakByteTransmitRate.setStatus('mandatory')
swSysEthernetPortRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRateFrameTransmitRate.setStatus('mandatory')
swSysEthernetPortRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysEthernetPortRatePeakFrameTransmitRate.setStatus('mandatory')
swSysSmtCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtCount.setStatus('mandatory')
swSysSmtFddiMacBeaconTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4), )
if mibBuilder.loadTexts: swSysSmtFddiMacBeaconTable.setStatus('mandatory')
swSysSmtFddiMacBeaconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacBeaconSmtIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacBeaconIndex"))
if mibBuilder.loadTexts: swSysSmtFddiMacBeaconEntry.setStatus('mandatory')
swSysSmtFddiMacBeaconSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacBeaconSmtIndex.setStatus('mandatory')
swSysSmtFddiMacBeaconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacBeaconIndex.setStatus('mandatory')
swSysSmtFddiMacBeaconHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacBeaconHistory.setStatus('mandatory')
swSysSmtFddiMacRateTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5), )
if mibBuilder.loadTexts: swSysSmtFddiMacRateTable.setStatus('mandatory')
swSysSmtFddiMacRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacRateSmtIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacRateIndex"))
if mibBuilder.loadTexts: swSysSmtFddiMacRateEntry.setStatus('mandatory')
swSysSmtFddiMacRateSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRateSmtIndex.setStatus('mandatory')
swSysSmtFddiMacRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRateIndex.setStatus('mandatory')
swSysSmtFddiMacRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRateByteReceiveRate.setStatus('mandatory')
swSysSmtFddiMacRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRatePeakByteReceiveRate.setStatus('mandatory')
swSysSmtFddiMacRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRateFrameReceiveRate.setStatus('mandatory')
swSysSmtFddiMacRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRatePeakFrameReceiveRate.setStatus('mandatory')
swSysSmtFddiMacRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRateByteTransmitRate.setStatus('mandatory')
swSysSmtFddiMacRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRatePeakByteTransmitRate.setStatus('mandatory')
swSysSmtFddiMacRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRateFrameTransmitRate.setStatus('mandatory')
swSysSmtFddiMacRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacRatePeakFrameTransmitRate.setStatus('mandatory')
swSysSmtFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6), )
if mibBuilder.loadTexts: swSysSmtFddiPortTable.setStatus('mandatory')
swSysSmtFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiPortSmtIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiPortIndex"))
if mibBuilder.loadTexts: swSysSmtFddiPortEntry.setStatus('mandatory')
swSysSmtFddiPortSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortSmtIndex.setStatus('mandatory')
swSysSmtFddiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortIndex.setStatus('mandatory')
swSysSmtFddiPortLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortLocationType.setStatus('mandatory')
swSysSmtFddiPortLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortLocationTypeIndex.setStatus('mandatory')
swSysSmtFddiPortLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortLocationLocalIndex.setStatus('mandatory')
swSysSmtFddiPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSmtFddiPortLabel.setStatus('mandatory')
swSysSmtFddiMacLocationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 7), )
if mibBuilder.loadTexts: swSysSmtFddiMacLocationTable.setStatus('mandatory')
swSysSmtFddiMacLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 7, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacLocationSmtIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacLocationIndex"))
if mibBuilder.loadTexts: swSysSmtFddiMacLocationEntry.setStatus('mandatory')
swSysSmtFddiMacLocationSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacLocationSmtIndex.setStatus('mandatory')
swSysSmtFddiMacLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacLocationIndex.setStatus('mandatory')
swSysSmtFddiMacCurrentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalBackplane", 1), ("externalFddiPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacCurrentLocation.setStatus('mandatory')
swSysSmtFddiMacRequestedLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalBackplane", 1), ("externalFddiPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSmtFddiMacRequestedLocation.setStatus('mandatory')
swSysSmtFddiMacAvailableLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalBackplane", 1), ("externalFddiPort", 2), ("internalOrExternal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacAvailableLocation.setStatus('mandatory')
swSysSmtFddiMacStationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 8), )
if mibBuilder.loadTexts: swSysSmtFddiMacStationTable.setStatus('mandatory')
swSysSmtFddiMacStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 8, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacStationSmtIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiMacStationIndex"))
if mibBuilder.loadTexts: swSysSmtFddiMacStationEntry.setStatus('mandatory')
swSysSmtFddiMacStationSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacStationSmtIndex.setStatus('mandatory')
swSysSmtFddiMacStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacStationIndex.setStatus('mandatory')
swSysSmtFddiMacCurrentStation = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacCurrentStation.setStatus('mandatory')
swSysSmtFddiMacRequestedStation = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSmtFddiMacRequestedStation.setStatus('mandatory')
swSysSmtFddiMacAvailableStations = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiMacAvailableStations.setStatus('mandatory')
swSysSmtFddiPortStationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 9), )
if mibBuilder.loadTexts: swSysSmtFddiPortStationTable.setStatus('mandatory')
swSysSmtFddiPortStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 9, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiPortStationSmtIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysSmtFddiPortStationIndex"))
if mibBuilder.loadTexts: swSysSmtFddiPortStationEntry.setStatus('mandatory')
swSysSmtFddiPortStationSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortStationSmtIndex.setStatus('mandatory')
swSysSmtFddiPortStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortStationIndex.setStatus('mandatory')
swSysSmtFddiPortCurrentStation = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortCurrentStation.setStatus('mandatory')
swSysSmtFddiPortRequestedStation = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysSmtFddiPortRequestedStation.setStatus('mandatory')
swSysSmtFddiPortAvailableStations = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysSmtFddiPortAvailableStations.setStatus('mandatory')
swSysBridgeCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgeCount.setStatus('mandatory')
swSysBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2), )
if mibBuilder.loadTexts: swSysBridgeTable.setStatus('mandatory')
swSysBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysBridgeIndex"))
if mibBuilder.loadTexts: swSysBridgeEntry.setStatus('mandatory')
swSysBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgeIndex.setStatus('mandatory')
swSysBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortCount.setStatus('mandatory')
swSysBridgeAddressTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgeAddressTableSize.setStatus('mandatory')
swSysBridgeAddressTableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgeAddressTableCount.setStatus('mandatory')
swSysBridgeAddressTablePeakCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgeAddressTablePeakCount.setStatus('mandatory')
swSysBridgeAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeAddressThreshold.setStatus('mandatory')
swSysBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("expressMode", 1), ("ieee8021dBridgeMode", 2), ("notSupported", 3), ("ieee8021dSRTBridgeMode", 4), ("ieee8021dSRBridgeMode", 5), ("ibmSRBridgeMode", 6), ("srtBBridgeMode", 7), ("srExpressBridgeMode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeMode.setStatus('mandatory')
swSysBridgeBackbonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeBackbonePort.setStatus('mandatory')
swSysBridgeIpFragmentationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeIpFragmentationEnabled.setStatus('mandatory')
swSysBridgeTrFddiTranslationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("native", 1), ("backbone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeTrFddiTranslationMode.setStatus('mandatory')
swSysBridgeSTPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeSTPGroupAddress.setStatus('mandatory')
swSysBridgeSTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeSTPEnable.setStatus('mandatory')
swSysBridgeIpxSnapTranslationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeIpxSnapTranslationEnable.setStatus('mandatory')
swSysBridgeLowLatencyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeLowLatencyEnable.setStatus('mandatory')
swSysBridgeVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("mixed", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeVlanMode.setStatus('mandatory')
swSysBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3), )
if mibBuilder.loadTexts: swSysBridgePortTable.setStatus('mandatory')
swSysBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysBridgePortBridgeIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysBridgePortIndex"))
if mibBuilder.loadTexts: swSysBridgePortEntry.setStatus('mandatory')
swSysBridgePortBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortBridgeIndex.setStatus('mandatory')
swSysBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortIndex.setStatus('mandatory')
swSysBridgePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortIfIndex.setStatus('mandatory')
swSysBridgePortReceiveMulticastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgePortReceiveMulticastLimit.setStatus('mandatory')
swSysBridgePortAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgePortAddressAction.setStatus('mandatory')
swSysBridgePortSpanningTreeFrameReceivedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortSpanningTreeFrameReceivedCounts.setStatus('mandatory')
swSysBridgePortReceiveBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveBlockedDiscards.setStatus('mandatory')
swSysBridgePortReceiveMulticastLimitExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveMulticastLimitExceededs.setStatus('mandatory')
swSysBridgePortReceiveMulticastLimitExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveMulticastLimitExceededDiscards.setStatus('mandatory')
swSysBridgePortReceiveSecurityDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveSecurityDiscards.setStatus('mandatory')
swSysBridgePortReceiveUnknownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveUnknownDiscards.setStatus('mandatory')
swSysBridgePortReceiveOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveOtherDiscards.setStatus('mandatory')
swSysBridgePortReceiveErrorDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveErrorDiscards.setStatus('mandatory')
swSysBridgePortSameSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortSameSegmentDiscards.setStatus('mandatory')
swSysBridgePortTransmitBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortTransmitBlockedDiscards.setStatus('mandatory')
swSysBridgePortReceiveAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveAllPathFilteredFrames.setStatus('mandatory')
swSysBridgePortReceiveMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortReceiveMulticastPathFilteredFrames.setStatus('mandatory')
swSysBridgePortTransmitAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortTransmitAllPathFilteredFrames.setStatus('mandatory')
swSysBridgePortTransmitMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortTransmitMulticastPathFilteredFrames.setStatus('mandatory')
swSysBridgePortForwardedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortForwardedUnicastFrames.setStatus('mandatory')
swSysBridgePortForwardedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortForwardedUnicastOctets.setStatus('mandatory')
swSysBridgePortForwardedMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortForwardedMulticastFrames.setStatus('mandatory')
swSysBridgePortForwardedMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortForwardedMulticastOctets.setStatus('mandatory')
swSysBridgePortFloodedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortFloodedUnicastFrames.setStatus('mandatory')
swSysBridgePortFloodedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortFloodedUnicastOctets.setStatus('mandatory')
swSysBridgePortStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgePortStpMode.setStatus('mandatory')
swSysBridgePortReceiveMulticastLimitFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcastAndMulticast", 1), ("broadcastOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgePortReceiveMulticastLimitFrameType.setStatus('mandatory')
swSysBridgePortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5), )
if mibBuilder.loadTexts: swSysBridgePortAddressTable.setStatus('mandatory')
swSysBridgePortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysBridgePortAddressBridgeIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysBridgePortAddressPortIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysBridgePortAddressIndex"))
if mibBuilder.loadTexts: swSysBridgePortAddressEntry.setStatus('mandatory')
swSysBridgePortAddressBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortAddressBridgeIndex.setStatus('mandatory')
swSysBridgePortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortAddressPortIndex.setStatus('mandatory')
swSysBridgePortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortAddressIndex.setStatus('mandatory')
swSysBridgePortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgePortAddressRemoteAddress.setStatus('mandatory')
swSysBridgePortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgePortAddressType.setStatus('mandatory')
swSysBridgePortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgePortAddressIsStatic.setStatus('mandatory')
swSysBridgePortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortAddressStaticPort.setStatus('mandatory')
swSysBridgePortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysBridgePortAddressAge.setStatus('mandatory')
swSysBridgeStpGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeStpGroupAddress.setStatus('obsolete')
swSysBridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysBridgeStpEnable.setStatus('obsolete')
swSysNetworkAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1), )
if mibBuilder.loadTexts: swSysNetworkAnalyzerTable.setStatus('mandatory')
swSysNetworkAnalyzerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysNetworkAnalyzerBridgeIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysNetworkAnalyzerBridgePortIndex"))
if mibBuilder.loadTexts: swSysNetworkAnalyzerTableEntry.setStatus('mandatory')
swSysNetworkAnalyzerBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysNetworkAnalyzerBridgeIndex.setStatus('mandatory')
swSysNetworkAnalyzerBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysNetworkAnalyzerBridgePortIndex.setStatus('mandatory')
swSysNetworkAnalyzerPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysNetworkAnalyzerPhysicalAddress.setStatus('mandatory')
swSysNetworkAnalyzerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysNetworkAnalyzerStatus.setStatus('mandatory')
swSysNetworkPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2), )
if mibBuilder.loadTexts: swSysNetworkPortMonitorTable.setStatus('mandatory')
swSysNetworkPortMonitorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysNetworkPortMonitorBridgeIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysNetworkPortMonitorBridgePortIndex"))
if mibBuilder.loadTexts: swSysNetworkPortMonitorTableEntry.setStatus('mandatory')
swSysNetworkPortMonitorBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysNetworkPortMonitorBridgeIndex.setStatus('mandatory')
swSysNetworkPortMonitorBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysNetworkPortMonitorBridgePortIndex.setStatus('mandatory')
swSysNetworkPortMonitorAnalyzerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysNetworkPortMonitorAnalyzerAddress.setStatus('mandatory')
swSysNetworkPortMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysNetworkPortMonitorStatus.setStatus('mandatory')
swSysTokenRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortCount.setStatus('mandatory')
swSysTokenRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2), )
if mibBuilder.loadTexts: swSysTokenRingPortTable.setStatus('mandatory')
swSysTokenRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysTokenRingPortIndex"))
if mibBuilder.loadTexts: swSysTokenRingPortEntry.setStatus('mandatory')
swSysTokenRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortIndex.setStatus('mandatory')
swSysTokenRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortIfIndex.setStatus('mandatory')
swSysTokenRingPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysTokenRingPortLabel.setStatus('mandatory')
swSysTokenRingPortInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("deinserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortInsertStatus.setStatus('mandatory')
swSysTokenRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortType.setStatus('mandatory')
swSysTokenRingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("lobe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysTokenRingPortMode.setStatus('mandatory')
swSysTokenRingPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2), ("sixteenMegabitETR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysTokenRingPortSpeed.setStatus('mandatory')
swSysTokenRingPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortLineErrors.setStatus('mandatory')
swSysTokenRingPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortBurstErrors.setStatus('mandatory')
swSysTokenRingPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortACErrors.setStatus('mandatory')
swSysTokenRingPortAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortAbortTransErrors.setStatus('mandatory')
swSysTokenRingPortInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortInternalErrors.setStatus('mandatory')
swSysTokenRingPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortLostFrameErrors.setStatus('mandatory')
swSysTokenRingPortReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortReceiveCongestionErrors.setStatus('mandatory')
swSysTokenRingPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortFrameCopiedErrors.setStatus('mandatory')
swSysTokenRingPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortTokenErrors.setStatus('mandatory')
swSysTokenRingPortSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortSoftErrors.setStatus('mandatory')
swSysTokenRingPortHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortHardErrors.setStatus('mandatory')
swSysTokenRingPortTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortTransmitBeacons.setStatus('mandatory')
swSysTokenRingPortLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortLobeWires.setStatus('mandatory')
swSysTokenRingPortRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortRemoves.setStatus('mandatory')
swSysTokenRingPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortSingles.setStatus('mandatory')
swSysTokenRingPortFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortFreqErrors.setStatus('optional')
swSysTokenRingPortRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysTokenRingPortRingStatus.setStatus('mandatory')
swSysFtTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1), )
if mibBuilder.loadTexts: swSysFtTable.setStatus('mandatory')
swSysFtTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysFtIndex"))
if mibBuilder.loadTexts: swSysFtTableEntry.setStatus('mandatory')
swSysFtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysFtIndex.setStatus('mandatory')
swSysFtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localToRemote", 1), ("remoteToLocal", 2))).clone('remoteToLocal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtDirection.setStatus('mandatory')
swSysFtLocalStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 3), SwSysStorageType().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtLocalStorageType.setStatus('mandatory')
swSysFtLocalResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 4), SwSysResourceType().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtLocalResourceType.setStatus('mandatory')
swSysFtLocalResourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 5), SwSysResourceBitMask().clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtLocalResourceMask.setStatus('mandatory')
swSysFtLocalResourceAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 6), ObjectIdentifier().clone((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 2, 1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtLocalResourceAttribute.setStatus('mandatory')
swSysFtRemoteAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 7), SwSysAddressType().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtRemoteAddressType.setStatus('mandatory')
swSysFtRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtRemoteAddress.setStatus('mandatory')
swSysFtRemoteFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtRemoteFileName.setStatus('mandatory')
swSysFtRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtRemoteUserName.setStatus('mandatory')
swSysFtRemoteUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtRemoteUserPassword.setStatus('mandatory')
swSysFtForceTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtForceTransfer.setStatus('mandatory')
swSysFtBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysFtBytesTransferred.setStatus('mandatory')
swSysFtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("statusSuccessfulCompletion", 1), ("statusInProgress", 2), ("statusLocalInvalid", 3), ("statusRemoteInvalid", 4), ("statusRemoteUnreachable", 5), ("statusUserAuthFailed", 6), ("statusFileNotFound", 7), ("statusFileTooBig", 8), ("statusFileIncompatible", 9), ("statusError", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysFtStatus.setStatus('mandatory')
swSysFtDetailedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 15), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysFtDetailedStatus.setStatus('mandatory')
swSysFtDetailedStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysFtDetailedStatusString.setStatus('mandatory')
swSysFtOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtOwnerString.setStatus('mandatory')
swSysFtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 1, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysFtRowStatus.setStatus('mandatory')
swSysFtResourceAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 2))
swSysFtSystemAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 2, 1))
swSysFtSystemOperationalCode = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 2, 1, 1))
swSysFtSystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 2, 1, 2))
swSysFtSystemBridgeFilterCode = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 2, 1, 3))
swSysFtDetailedResourceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3))
swSysFtSystemDetailedStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1))
swSysFtSysStatusNotApplicable = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 1))
swSysFtSysStatusNoImageLabel = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 2))
swSysFtSysStatusConfigIdMismatch = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 3))
swSysFtSysStatusChecksumError = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 4))
swSysFtSysStatusNvRamError = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 5))
swSysFtSysStatusFlashError = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 6))
swSysFtSysStatusNoRoom = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 7))
swSysFtSysBridgeFilterNotApplicable = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 8))
swSysFtSysBridgeFilterSyntaxError = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 9))
swSysFtSysBridgeFilterdownloadError = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 10))
swSysFtSysBridgeFilterNoRoom = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 14, 3, 1, 11))
swSysIpBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 1))
swSysIpInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2))
swSysIpInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysIpInterfaceCount.setStatus('mandatory')
swSysIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2), )
if mibBuilder.loadTexts: swSysIpInterfaceTable.setStatus('mandatory')
swSysIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysIpInterfaceIpStackIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysIpInterfaceAddr"), (0, "SWITCHING-SYSTEMS-MIB", "swSysIpInterfaceNetMask"))
if mibBuilder.loadTexts: swSysIpInterfaceEntry.setStatus('mandatory')
swSysIpInterfaceIpStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysIpInterfaceIpStackIndex.setStatus('mandatory')
swSysIpInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysIpInterfaceAddr.setStatus('mandatory')
swSysIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysIpInterfaceNetMask.setStatus('mandatory')
swSysIpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpInterfaceIndex.setStatus('mandatory')
swSysIpInterfaceBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpInterfaceBcastAddr.setStatus('mandatory')
swSysIpInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpInterfaceCost.setStatus('mandatory')
swSysIpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 15, 2, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpInterfaceStatus.setStatus('mandatory')
swSysIpxBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 1))
swSysIpxInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2))
swSysIpxInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysIpxInterfaceCount.setStatus('mandatory')
swSysIpxInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2), )
if mibBuilder.loadTexts: swSysIpxInterfaceTable.setStatus('mandatory')
swSysIpxInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysIpxInterfaceIpxStackIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysIpxInterfaceNetNumber"))
if mibBuilder.loadTexts: swSysIpxInterfaceEntry.setStatus('mandatory')
swSysIpxInterfaceIpxStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysIpxInterfaceIpxStackIndex.setStatus('mandatory')
swSysIpxInterfaceNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2, 1, 2), IpxNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysIpxInterfaceNetNumber.setStatus('mandatory')
swSysIpxInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpxInterfaceIfIndex.setStatus('mandatory')
swSysIpxInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2, 1, 4), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpxInterfaceCost.setStatus('mandatory')
swSysIpxInterfaceFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frame-ethernetII", 1), ("frame-802-2", 2), ("frame-802-3-Raw", 3), ("frame-SNAP", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpxInterfaceFrameType.setStatus('mandatory')
swSysIpxInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 16, 2, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysIpxInterfaceStatus.setStatus('mandatory')
swSysAppleTalkBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 1))
swSysAppleTalkInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2))
swSysAtInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAtInterfaceCount.setStatus('mandatory')
swSysAtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2), )
if mibBuilder.loadTexts: swSysAtInterfaceTable.setStatus('mandatory')
swSysAtInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysAtInterfaceAtStackIndex"), (0, "SWITCHING-SYSTEMS-MIB", "swSysAtInterfaceIfIndex"))
if mibBuilder.loadTexts: swSysAtInterfaceEntry.setStatus('mandatory')
swSysAtInterfaceAtStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceAtStackIndex.setStatus('mandatory')
swSysAtInterfaceNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 2), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAtInterfaceNetAddress.setStatus('mandatory')
swSysAtInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seedInterface", 1), ("nonseedInterface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceType.setStatus('mandatory')
swSysAtInterfaceNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 4), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceNetStart.setStatus('mandatory')
swSysAtInterfaceNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 5), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceNetEnd.setStatus('mandatory')
swSysAtInterfaceZoneDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 6), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZoneDefault.setStatus('mandatory')
swSysAtInterfaceZone1 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 7), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone1.setStatus('mandatory')
swSysAtInterfaceZone2 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 8), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone2.setStatus('mandatory')
swSysAtInterfaceZone3 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 9), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone3.setStatus('mandatory')
swSysAtInterfaceZone4 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 10), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone4.setStatus('mandatory')
swSysAtInterfaceZone5 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 11), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone5.setStatus('mandatory')
swSysAtInterfaceZone6 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 12), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone6.setStatus('mandatory')
swSysAtInterfaceZone7 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 13), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone7.setStatus('mandatory')
swSysAtInterfaceZone8 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 14), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone8.setStatus('mandatory')
swSysAtInterfaceZone9 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 15), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone9.setStatus('mandatory')
swSysAtInterfaceZone10 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 16), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone10.setStatus('mandatory')
swSysAtInterfaceZone11 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 17), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone11.setStatus('mandatory')
swSysAtInterfaceZone12 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 18), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone12.setStatus('mandatory')
swSysAtInterfaceZone13 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 19), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone13.setStatus('mandatory')
swSysAtInterfaceZone14 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 20), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone14.setStatus('mandatory')
swSysAtInterfaceZone15 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 21), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceZone15.setStatus('mandatory')
swSysAtInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceIfIndex.setStatus('mandatory')
swSysAtInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unused", 1), ("initialize", 2), ("terminate", 3), ("failed", 4), ("down", 5), ("validate", 6), ("discover", 7), ("waiting", 8), ("enabled", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysAtInterfaceState.setStatus('mandatory')
swSysAtInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 17, 2, 2, 1, 24), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSysAtInterfaceStatus.setStatus('mandatory')
swSysModuleCardCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardCount.setStatus('mandatory')
swSysModuleCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2), )
if mibBuilder.loadTexts: swSysModuleCardInfoTable.setStatus('mandatory')
swSysModuleCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoIndex"))
if mibBuilder.loadTexts: swSysModuleCardInfoEntry.setStatus('mandatory')
swSysModuleCardInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoIndex.setStatus('mandatory')
swSysModuleCardInfoFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("coreBuilder3500", 1), ("superStack7000", 2), ("superStack9000", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoFamily.setStatus('mandatory')
swSysModuleCardInfoGenericType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("backplaneOrMotherboard", 1), ("processorBoard", 2), ("enet10MbAnd100MbAdaptor", 3), ("enet1GbAdaptor", 4), ("fddiAdaptor", 5), ("atmAdaptor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoGenericType.setStatus('mandatory')
swSysModuleCardInfoSpecificType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 161, 162, 163, 164, 177, 178, 179, 180, 225, 226, 227, 228, 229, 241, 242, 243, 244))).clone(namedValues=NamedValues(("notApplicable", 1), ("atmSonetOC3Fiber", 161), ("atmSonetOC12Fiber", 162), ("atmSonetOC3Copper", 163), ("atmSonetOC12Copper", 164), ("enet1Gb850nMMultimodeFiber", 177), ("enet1Gb1300nMFiber", 178), ("enet1GbCoax", 179), ("enet1Gb1000BaseTx", 180), ("enet100Mb100BaseTx", 225), ("enet100Mb100BaseT2", 226), ("enet100Mb100BaseFx", 227), ("enet100Mb100BaseT4", 228), ("enet100Mb100BaseTxSTP", 229), ("fddiMultimodeSC", 241), ("fddiSingleModeSC", 242), ("fddiCopperUTP", 243), ("fddiCopperSTP", 244)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoSpecificType.setStatus('mandatory')
swSysModuleCardInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoPartNumber.setStatus('mandatory')
swSysModuleCardInfoManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoManufacturingDate.setStatus('mandatory')
swSysModuleCardInfoModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoModuleSerialNumber.setStatus('mandatory')
swSysModuleCardInfoTLASerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoTLASerialNumber.setStatus('mandatory')
swSysModuleCardInfo3CNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfo3CNumber.setStatus('mandatory')
swSysModuleCardInfoICTTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoICTTestStatus.setStatus('mandatory')
swSysModuleCardInfoICTTestRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoICTTestRevision.setStatus('mandatory')
swSysModuleCardInfoSystemTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoSystemTestStatus.setStatus('mandatory')
swSysModuleCardInfoFunctionalTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoFunctionalTestStatus.setStatus('mandatory')
swSysModuleCardInfoFunctionalTestRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoFunctionalTestRevision.setStatus('mandatory')
swSysModuleCardInfoBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoBoardRevision.setStatus('mandatory')
swSysModuleCardInfoRuntimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 18, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysModuleCardInfoRuntimeHours.setStatus('mandatory')
swSysDiagnosticsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1), )
if mibBuilder.loadTexts: swSysDiagnosticsInfoTable.setStatus('mandatory')
swSysDiagnosticsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1), ).setIndexNames((0, "SWITCHING-SYSTEMS-MIB", "swSysDiagnosticsInfoIndex"))
if mibBuilder.loadTexts: swSysDiagnosticsInfoEntry.setStatus('mandatory')
swSysDiagnosticsInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoIndex.setStatus('mandatory')
swSysDiagnosticsInfoPOVDiagnosticsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoPOVDiagnosticsRevision.setStatus('mandatory')
swSysDiagnosticsInfoExtendedDiagnosticsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoExtendedDiagnosticsRevision.setStatus('mandatory')
swSysDiagnosticsInfoDiagnosticFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoDiagnosticFailureCode.setStatus('mandatory')
swSysDiagnosticsInfoDiagnosticFailureDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoDiagnosticFailureDateTime.setStatus('mandatory')
swSysDiagnosticsInfoDiagnosticFailureSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoDiagnosticFailureSlotNumber.setStatus('mandatory')
swSysDiagnosticsInfoDiagnosticFailureCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoDiagnosticFailureCounter.setStatus('mandatory')
swSysDiagnosticsInfoDiagnosticFieldDOACounter = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 19, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSysDiagnosticsInfoDiagnosticFieldDOACounter.setStatus('mandatory')
swSysSystemOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,1)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysSystemOvertemperature"))
swSysPowerSupplyFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,2)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysPowerSupplyStatusIndex"), ("SWITCHING-SYSTEMS-MIB", "swSysPowerSupplyStatus"), ("SWITCHING-SYSTEMS-MIB", "swSysPowerSupplyStatusSupported"))
swSysChassisSlotOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,3)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysSlotIndex"), ("SWITCHING-SYSTEMS-MIB", "swSysSlotBoardType"), ("SWITCHING-SYSTEMS-MIB", "swSysSlotBoardRevision"), ("SWITCHING-SYSTEMS-MIB", "swSysSlotBoardStatus"), ("SWITCHING-SYSTEMS-MIB", "swSysSlotOvertemperature"), ("SWITCHING-SYSTEMS-MIB", "swSysSlotConverterBad"))
swSysChassisSlotInsertEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,4)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysSlotIndex"), ("SWITCHING-SYSTEMS-MIB", "swSysSlotBoardType"), ("SWITCHING-SYSTEMS-MIB", "swSysSlotBoardRevision"))
swSysChassisSlotExtractEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,5)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysSlotIndex"))
swSysBridgeAddressThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,6)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysBridgeIndex"))
swSysSystemFanFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,7)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysSystemFanFailure"))
swModuleCardSysOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,8)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoIndex"), ("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoFamily"), ("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoGenericType"))
swModuleCardInsertEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,9)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoIndex"), ("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoFamily"), ("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoGenericType"), ("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoSpecificType"))
swModuleCardExtractEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,10)).setObjects(("SWITCHING-SYSTEMS-MIB", "swSysModuleCardInfoIndex"))
mibBuilder.exportSymbols("SWITCHING-SYSTEMS-MIB", swSysSmtFddiPortLocationTypeIndex=swSysSmtFddiPortLocationTypeIndex, swSysBridgePortForwardedMulticastFrames=swSysBridgePortForwardedMulticastFrames, swSysIpxInterfaceGroup=swSysIpxInterfaceGroup, swSysBridgePortAddressIndex=swSysBridgePortAddressIndex, swSysTokenRingPortRingStatus=swSysTokenRingPortRingStatus, swSysTokenRingPortTransmitBeacons=swSysTokenRingPortTransmitBeacons, swSysAgentRemoteSmtProxyRequestMaxAge=swSysAgentRemoteSmtProxyRequestMaxAge, swSysNetworkAnalyzerPhysicalAddress=swSysNetworkAnalyzerPhysicalAddress, swSysSmtCount=swSysSmtCount, swSysAtInterfaceZone11=swSysAtInterfaceZone11, swSysSmtFddiMacAvailableStations=swSysSmtFddiMacAvailableStations, swSysChassisSlotExtractEvent=swSysChassisSlotExtractEvent, swSysNetworkPortMonitorTable=swSysNetworkPortMonitorTable, swSysSystemFanFailure=swSysSystemFanFailure, swSysTokenRingPortReceiveCongestionErrors=swSysTokenRingPortReceiveCongestionErrors, swSysSnmpAgentId=swSysSnmpAgentId, swSysSmtFddiPortStationEntry=swSysSmtFddiPortStationEntry, swSysSystemMACAddressCount=swSysSystemMACAddressCount, swSysDiagnosticsGroup=swSysDiagnosticsGroup, swSysIpxBaseGroup=swSysIpxBaseGroup, swSysSlotCount=swSysSlotCount, swSysBridgePortSameSegmentDiscards=swSysBridgePortSameSegmentDiscards, swSysNetworkAnalyzerTable=swSysNetworkAnalyzerTable, swSysFtSysBridgeFilterSyntaxError=swSysFtSysBridgeFilterSyntaxError, swSysSlotOvertemperature=swSysSlotOvertemperature, swSysDiagnosticsInfoDiagnosticFailureSlotNumber=swSysDiagnosticsInfoDiagnosticFailureSlotNumber, swSysChassisSlotOverTemperatureEvent=swSysChassisSlotOverTemperatureEvent, SwSysStorageType=SwSysStorageType, corebuilderSystemsMib=corebuilderSystemsMib, swSysSmtFddiMacRateFrameReceiveRate=swSysSmtFddiMacRateFrameReceiveRate, swSysIpInterfaceEntry=swSysIpInterfaceEntry, swSysSmtFddiPortLocationLocalIndex=swSysSmtFddiPortLocationLocalIndex, swSysSystemName=swSysSystemName, swSysAtInterfaceStatus=swSysAtInterfaceStatus, swSysBridgePortEntry=swSysBridgePortEntry, swSysModuleCardInfo3CNumber=swSysModuleCardInfo3CNumber, swSysBridge=swSysBridge, swSysBridgeIpxSnapTranslationEnable=swSysBridgeIpxSnapTranslationEnable, swSysSystemFPMemorySize=swSysSystemFPMemorySize, swSysTokenRingPortIndex=swSysTokenRingPortIndex, swSysFtRemoteAddressType=swSysFtRemoteAddressType, swSysEthernetPortRateFrameTransmitRate=swSysEthernetPortRateFrameTransmitRate, swSysIpxGroup=swSysIpxGroup, swSysBridgePortAddressPortIndex=swSysBridgePortAddressPortIndex, swSysSystemLogSeverityLevel=swSysSystemLogSeverityLevel, swSysBridgeTrFddiTranslationMode=swSysBridgeTrFddiTranslationMode, swSysSlotBoardType=swSysSlotBoardType, swSysIpxInterfaceTable=swSysIpxInterfaceTable, swSysSnmpInternalProxyCommunity=swSysSnmpInternalProxyCommunity, swSysEthernetPortCount=swSysEthernetPortCount, swSysModuleCardInfoManufacturingDate=swSysModuleCardInfoManufacturingDate, swSysBridgePortReceiveMulticastLimitExceededDiscards=swSysBridgePortReceiveMulticastLimitExceededDiscards, swSysSmtFddiPortAvailableStations=swSysSmtFddiPortAvailableStations, swSysAtInterfaceTable=swSysAtInterfaceTable, SwSysResourceType=SwSysResourceType, superstackSystemsMib=superstackSystemsMib, swSysDiagnosticsInfoIndex=swSysDiagnosticsInfoIndex, swSysSlotFddiMacCount=swSysSlotFddiMacCount, swSysSlotBoardNameAbbrev=swSysSlotBoardNameAbbrev, swSysAtInterfaceZone5=swSysAtInterfaceZone5, swSysSnmpInternalAgentTrapMask=swSysSnmpInternalAgentTrapMask, swSysSmtFddiMacCurrentStation=swSysSmtFddiMacCurrentStation, swSysFtSysStatusChecksumError=swSysFtSysStatusChecksumError, swSysSlotEthernetPortCount=swSysSlotEthernetPortCount, swSysSnmpInternalAgentTrapDestinationMask=swSysSnmpInternalAgentTrapDestinationMask, swSysNetworkAnalyzerTableEntry=swSysNetworkAnalyzerTableEntry, swSysAtInterfaceNetEnd=swSysAtInterfaceNetEnd, swSysSystemLogEntryCurrentCount=swSysSystemLogEntryCurrentCount, swSysBridgeAddressTableCount=swSysBridgeAddressTableCount, swSysFtResourceAttributes=swSysFtResourceAttributes, swSysEthernetPortRateTable=swSysEthernetPortRateTable, swSysDiagnosticsInfoDiagnosticFailureDateTime=swSysDiagnosticsInfoDiagnosticFailureDateTime, swSysInterfaceLocationSystemModuleIndex=swSysInterfaceLocationSystemModuleIndex, swSysTokenRingPortSingles=swSysTokenRingPortSingles, swSysIpInterfaceIndex=swSysIpInterfaceIndex, swSysSlotBoardRevStr=swSysSlotBoardRevStr, IpxNetworkNumber=IpxNetworkNumber, swSysFtTableEntry=swSysFtTableEntry, swSysSmtFddiPortStationIndex=swSysSmtFddiPortStationIndex, corebuilderProductsII=corebuilderProductsII, switchingSystemsMib=switchingSystemsMib, swSysEthernetPortRatePeakFrameReceiveRate=swSysEthernetPortRatePeakFrameReceiveRate, swSysNetworkAnalyzerBridgePortIndex=swSysNetworkAnalyzerBridgePortIndex, swSysSmtFddiMacRateIndex=swSysSmtFddiMacRateIndex, swSysFtDetailedStatus=swSysFtDetailedStatus, swSysSnmpInternalProxyAgentId=swSysSnmpInternalProxyAgentId, swSysAtInterfaceZone12=swSysAtInterfaceZone12, swSysInterfaceLocationEntry=swSysInterfaceLocationEntry, swSysModuleCardInfoModuleSerialNumber=swSysModuleCardInfoModuleSerialNumber, swSysBridgeMode=swSysBridgeMode, swSysFtRemoteUserPassword=swSysFtRemoteUserPassword, swSysSnmpProxyInternalRequests=swSysSnmpProxyInternalRequests, swSysAgentTrapDestinationEntryStatus=swSysAgentTrapDestinationEntryStatus, swSysDiagnosticsInfoEntry=swSysDiagnosticsInfoEntry, swSysIpxInterfaceCount=swSysIpxInterfaceCount, swSysPowerSupplyStatusIndex=swSysPowerSupplyStatusIndex, swSysBridgePortReceiveMulticastLimitExceededs=swSysBridgePortReceiveMulticastLimitExceededs, swSysFtDirection=swSysFtDirection, swSysSmtFddiMacLocationEntry=swSysSmtFddiMacLocationEntry, swSysIpInterfaceBcastAddr=swSysIpInterfaceBcastAddr, swSysSmtFddiMacRateSmtIndex=swSysSmtFddiMacRateSmtIndex, swSysSmtFddiPortIndex=swSysSmtFddiPortIndex, swSysEthernetPortIndex=swSysEthernetPortIndex, swSysInterfaceLocationTable=swSysInterfaceLocationTable, swSysBridgePortForwardedUnicastFrames=swSysBridgePortForwardedUnicastFrames, swSysSystemId=swSysSystemId, swSysFtLocalResourceType=swSysFtLocalResourceType, swSysFtRemoteAddress=swSysFtRemoteAddress, swSysBridgePortReceiveAllPathFilteredFrames=swSysBridgePortReceiveAllPathFilteredFrames, swSysIpInterfaceStatus=swSysIpInterfaceStatus, swSysModuleCardInfoIndex=swSysModuleCardInfoIndex, swSysSlot=swSysSlot, swSysSlotConverterBad=swSysSlotConverterBad, swSysTokenRingPortFreqErrors=swSysTokenRingPortFreqErrors, swSysInterfaceLocationType=swSysInterfaceLocationType, swSysSlotTokenRingPortCount=swSysSlotTokenRingPortCount, swSysControlPanelHardwareRevision=swSysControlPanelHardwareRevision, swSysBridgeLowLatencyEnable=swSysBridgeLowLatencyEnable, swSysAtInterfaceState=swSysAtInterfaceState, swSysSlotTable=swSysSlotTable, swSysBridgePortAddressIsStatic=swSysBridgePortAddressIsStatic, swSysNetworkPortMonitorBridgePortIndex=swSysNetworkPortMonitorBridgePortIndex, swSysModuleCardInfoFunctionalTestStatus=swSysModuleCardInfoFunctionalTestStatus, swSysEthernetPortType=swSysEthernetPortType, swSysAtInterfaceZone9=swSysAtInterfaceZone9, swSysSystemConsoleReadPwd=swSysSystemConsoleReadPwd, swSysFtOwnerString=swSysFtOwnerString, swSysBridgePortFloodedUnicastOctets=swSysBridgePortFloodedUnicastOctets, swSysBridgeStpGroupAddress=swSysBridgeStpGroupAddress, swSysTokenRingPortLabel=swSysTokenRingPortLabel, swSysBridgeEntry=swSysBridgeEntry, swSysAtInterfaceZone2=swSysAtInterfaceZone2, swSysAgentTrapDescriptionTableEntry=swSysAgentTrapDescriptionTableEntry, swSysAtInterfaceCount=swSysAtInterfaceCount, swSysBridgePortForwardedMulticastOctets=swSysBridgePortForwardedMulticastOctets, swSysSystemLogIndex=swSysSystemLogIndex, swSysFtForceTransfer=swSysFtForceTransfer, swSysSmtFddiMacLocationSmtIndex=swSysSmtFddiMacLocationSmtIndex, swSysSystemLogDateTime=swSysSystemLogDateTime, swSysBridgeSTPGroupAddress=swSysBridgeSTPGroupAddress, swSysAgentTrapDescriptionTable=swSysAgentTrapDescriptionTable, swSysBridgePortSpanningTreeFrameReceivedCounts=swSysBridgePortSpanningTreeFrameReceivedCounts, swSysSystemSoftwareRevision=swSysSystemSoftwareRevision, swSysModuleCardInfoTLASerialNumber=swSysModuleCardInfoTLASerialNumber, swSysSmtFddiMacRatePeakFrameReceiveRate=swSysSmtFddiMacRatePeakFrameReceiveRate, swSysBridgeStpEnable=swSysBridgeStpEnable, swSysFtSysBridgeFilterNotApplicable=swSysFtSysBridgeFilterNotApplicable, swSysAtInterfaceEntry=swSysAtInterfaceEntry, swSysEthernetPortLabel=swSysEthernetPortLabel, swSysIpxInterfaceIpxStackIndex=swSysIpxInterfaceIpxStackIndex, swSysModuleCardInfoICTTestRevision=swSysModuleCardInfoICTTestRevision, swSysSmtFddiMacRateFrameTransmitRate=swSysSmtFddiMacRateFrameTransmitRate, swSysFtRemoteUserName=swSysFtRemoteUserName, swSysSystemDateTime=swSysSystemDateTime, swSysIpxInterfaceCost=swSysIpxInterfaceCost, swSysBridgePortReceiveMulticastLimit=swSysBridgePortReceiveMulticastLimit, swSysTokenRingPortTable=swSysTokenRingPortTable, swSysSmtFddiMacRatePeakFrameTransmitRate=swSysSmtFddiMacRatePeakFrameTransmitRate, swSysEthernetPortRateFrameReceiveRate=swSysEthernetPortRateFrameReceiveRate, SwSysResourceBitMask=SwSysResourceBitMask, corebuilderProductsI=corebuilderProductsI, DdpNodeAddress=DdpNodeAddress, swSysBridgePortTransmitAllPathFilteredFrames=swSysBridgePortTransmitAllPathFilteredFrames, swSysFtStatus=swSysFtStatus, swSysBridgeCount=swSysBridgeCount, swSysAgentTrapDestinationAddress=swSysAgentTrapDestinationAddress, swSysAtInterfaceAtStackIndex=swSysAtInterfaceAtStackIndex, swSysBridgePortReceiveOtherDiscards=swSysBridgePortReceiveOtherDiscards, swSysAgentTrapDestinationTable=swSysAgentTrapDestinationTable, swSysTokenRingPortHardErrors=swSysTokenRingPortHardErrors, swSysAgentReadCommunity=swSysAgentReadCommunity, switchingSystemsProducts=switchingSystemsProducts, swSysAgent=swSysAgent, swSysSnmpInternalProxyTable=swSysSnmpInternalProxyTable, swSysBridgePortAddressEntry=swSysBridgePortAddressEntry, swSysSystemChassisSerialNumber=swSysSystemChassisSerialNumber, swSysPowerSupplyFailureEvent=swSysPowerSupplyFailureEvent, swSysSystemType=swSysSystemType, swSysControlPanelLines=swSysControlPanelLines, swSysControlPanelColumns=swSysControlPanelColumns, swSysEthernetPortRateByteTransmitRate=swSysEthernetPortRateByteTransmitRate, swSysSystemHardwareRevision=swSysSystemHardwareRevision, swSysSystemRequestedSnmpMode=swSysSystemRequestedSnmpMode, swSysBridgePortCount=swSysBridgePortCount, swSysBridgeAddressThresholdEvent=swSysBridgeAddressThresholdEvent, switchingSystems=switchingSystems, swSysEthernetPortRateByteReceiveRate=swSysEthernetPortRateByteReceiveRate, swSysEthernetPortRateIndex=swSysEthernetPortRateIndex, swSysAtInterfaceZone7=swSysAtInterfaceZone7, swSysIpInterfaceCount=swSysIpInterfaceCount, swSysSlotEntry=swSysSlotEntry, swSysSmtFddiPortStationTable=swSysSmtFddiPortStationTable, swSysFtSystemOperationalCode=swSysFtSystemOperationalCode, swSysModuleCardInfoPartNumber=swSysModuleCardInfoPartNumber, swSysIpxInterfaceNetNumber=swSysIpxInterfaceNetNumber, swSysModuleCardInfoGenericType=swSysModuleCardInfoGenericType, swModuleCardExtractEvent=swModuleCardExtractEvent, swSysSystem=swSysSystem, swSysDiagnosticsInfoDiagnosticFailureCounter=swSysDiagnosticsInfoDiagnosticFailureCounter, swSysSystemCurrentSnmpMode=swSysSystemCurrentSnmpMode, swSysBridgePortReceiveMulticastLimitFrameType=swSysBridgePortReceiveMulticastLimitFrameType, swSysFtLocalResourceAttribute=swSysFtLocalResourceAttribute, swSysFtRemoteFileName=swSysFtRemoteFileName, swSysFtRowStatus=swSysFtRowStatus, swSysBridgeIndex=swSysBridgeIndex, swSysSystemBaseMACAddress=swSysSystemBaseMACAddress, swSysEthernetPortRateEntry=swSysEthernetPortRateEntry, MacAddress=MacAddress, superstackProducts=superstackProducts, swSysAtInterfaceZone3=swSysAtInterfaceZone3, swSysFtIndex=swSysFtIndex, swSysFtGroup=swSysFtGroup, swSysTokenRingPortInsertStatus=swSysTokenRingPortInsertStatus, swSysSmtFddiPortEntry=swSysSmtFddiPortEntry, swSysSlotIndex=swSysSlotIndex, swSysAtInterfaceZoneDefault=swSysAtInterfaceZoneDefault, swSysAppleTalkGroup=swSysAppleTalkGroup, swSysBridgePortIndex=swSysBridgePortIndex, swSysFtTable=swSysFtTable, ATName=ATName, swSysSmtFddiMacStationIndex=swSysSmtFddiMacStationIndex, swSysEthernetPortRatePeakFrameTransmitRate=swSysEthernetPortRatePeakFrameTransmitRate, swSysFtSysStatusNoImageLabel=swSysFtSysStatusNoImageLabel, swSysModuleCardCount=swSysModuleCardCount, swSysInterfaceLocationLocalIndex=swSysInterfaceLocationLocalIndex, swSysInterfaceLocationTypeIndex=swSysInterfaceLocationTypeIndex, swSysAtInterfaceZone14=swSysAtInterfaceZone14, swSysDiagnosticsInfoDiagnosticFailureCode=swSysDiagnosticsInfoDiagnosticFailureCode, swSysSystemFlashMemorySize=swSysSystemFlashMemorySize, swSysControlPanelAccess=swSysControlPanelAccess, swSysSystemBufferSize=swSysSystemBufferSize, swSysNetworkAnalyzerStatus=swSysNetworkAnalyzerStatus, swSysAgentReadWriteCommunity=swSysAgentReadWriteCommunity, swSysFtSysStatusNotApplicable=swSysFtSysStatusNotApplicable, swSysTokenRingPortType=swSysTokenRingPortType, swSysSmtFddiMacAvailableLocation=swSysSmtFddiMacAvailableLocation, swSysSystemConsoleWritePwd=swSysSystemConsoleWritePwd, swSysTokenRingPort=swSysTokenRingPort, swSysSmtFddiMacRatePeakByteReceiveRate=swSysSmtFddiMacRatePeakByteReceiveRate, swSysSmtFddiMacStationTable=swSysSmtFddiMacStationTable, swSysSmtFddiMacStationEntry=swSysSmtFddiMacStationEntry, swSysSmtFddiPortCurrentStation=swSysSmtFddiPortCurrentStation, swSysModuleCardInfoTable=swSysModuleCardInfoTable, swSysSnmpInternalProxyRequestMaxAge=swSysSnmpInternalProxyRequestMaxAge, swSysSmtFddiMacBeaconHistory=swSysSmtFddiMacBeaconHistory, swSysPowerSupplyStatusSupported=swSysPowerSupplyStatusSupported, swSysTokenRingPortLineErrors=swSysTokenRingPortLineErrors, swSysSystemCurrentFddiStationMode=swSysSystemCurrentFddiStationMode, swSysSmtFddiMacRequestedLocation=swSysSmtFddiMacRequestedLocation, swSysSystemLogEntry=swSysSystemLogEntry, swSysIpBaseGroup=swSysIpBaseGroup, swSysIpxInterfaceFrameType=swSysIpxInterfaceFrameType, ATNetworkNumber=ATNetworkNumber, swSysEthernetPortEntry=swSysEthernetPortEntry)
mibBuilder.exportSymbols("SWITCHING-SYSTEMS-MIB", swSysSystemLogTable=swSysSystemLogTable, swSysFtSystemAttributes=swSysFtSystemAttributes, swSysFtDetailedResourceStatus=swSysFtDetailedResourceStatus, synernetics=synernetics, swSysBridgePortAddressAction=swSysBridgePortAddressAction, swSysBridgePortFloodedUnicastFrames=swSysBridgePortFloodedUnicastFrames, SwSysAddressType=SwSysAddressType, swSysBridgePortReceiveBlockedDiscards=swSysBridgePortReceiveBlockedDiscards, swSysControlPanel=swSysControlPanel, swSysSmtFddiMacBeaconTable=swSysSmtFddiMacBeaconTable, swSysAgentTrapNumber=swSysAgentTrapNumber, swSysBridgePortReceiveUnknownDiscards=swSysBridgePortReceiveUnknownDiscards, swSysBridgePortAddressStaticPort=swSysBridgePortAddressStaticPort, swSysTokenRingPortTokenErrors=swSysTokenRingPortTokenErrors, swSysIpInterfaceTable=swSysIpInterfaceTable, swSysAtInterfaceZone1=swSysAtInterfaceZone1, swSysFtSysStatusNvRamError=swSysFtSysStatusNvRamError, swSysSystemSnmpRevision=swSysSystemSnmpRevision, swSysSystemLogSeverityThreshold=swSysSystemLogSeverityThreshold, swSysBridgeTable=swSysBridgeTable, swSysModuleCardInfoSpecificType=swSysModuleCardInfoSpecificType, swSysIpxInterfaceStatus=swSysIpxInterfaceStatus, swSysAtInterfaceZone8=swSysAtInterfaceZone8, swSysSystemLog=swSysSystemLog, swSysSmtFddiPortStationSmtIndex=swSysSmtFddiPortStationSmtIndex, swSysSystemMemorySize=swSysSystemMemorySize, swSysIpGroup=swSysIpGroup, swSysSmtFddiPortTable=swSysSmtFddiPortTable, swSysBridgeBackbonePort=swSysBridgeBackbonePort, swSysIpInterfaceGroup=swSysIpInterfaceGroup, swSysChassisSlotInsertEvent=swSysChassisSlotInsertEvent, swSysTokenRingPortInternalErrors=swSysTokenRingPortInternalErrors, swSysSmtFddiMacBeaconIndex=swSysSmtFddiMacBeaconIndex, swSysAtInterfaceZone15=swSysAtInterfaceZone15, swSysSystemProtocolMask=swSysSystemProtocolMask, swSysSmtFddiMacRequestedStation=swSysSmtFddiMacRequestedStation, swSysBridgeAddressTableSize=swSysBridgeAddressTableSize, swSysSnmpProxyInternalTraps=swSysSnmpProxyInternalTraps, swSysTokenRingPortMode=swSysTokenRingPortMode, swSysModuleCardInfoEntry=swSysModuleCardInfoEntry, swSysTokenRingPortACErrors=swSysTokenRingPortACErrors, swSysTokenRingPortSoftErrors=swSysTokenRingPortSoftErrors, swSysBridgePortReceiveSecurityDiscards=swSysBridgePortReceiveSecurityDiscards, swSysSmtFddiPortLabel=swSysSmtFddiPortLabel, swSysAgentProxyRemoteSmtRequests=swSysAgentProxyRemoteSmtRequests, swSysIpRouter=swSysIpRouter, swSysSlotBoardName=swSysSlotBoardName, swSysSystemLogMaxSize=swSysSystemLogMaxSize, swSysFtSysStatusNoRoom=swSysFtSysStatusNoRoom, swSysBridgePortStpMode=swSysBridgePortStpMode, swSysFtLocalStorageType=swSysFtLocalStorageType, swSysSystemDSTime=swSysSystemDSTime, swSysBridgePortAddressTable=swSysBridgePortAddressTable, swSysModuleCardInfoRuntimeHours=swSysModuleCardInfoRuntimeHours, swSysModuleCardInfoFamily=swSysModuleCardInfoFamily, swSysAtInterfaceNetStart=swSysAtInterfaceNetStart, swSysSnmpInternalProxyAccessClass=swSysSnmpInternalProxyAccessClass, swSysSystemConsoleAdminPwd=swSysSystemConsoleAdminPwd, swSysSmtFddiMacCurrentLocation=swSysSmtFddiMacCurrentLocation, swSysAtInterfaceZone6=swSysAtInterfaceZone6, swSysFtSysStatusConfigIdMismatch=swSysFtSysStatusConfigIdMismatch, swSysIpInterfaceAddr=swSysIpInterfaceAddr, swSysAgentTrapDestinationTableEntry=swSysAgentTrapDestinationTableEntry, swSysBridgePortReceiveErrorDiscards=swSysBridgePortReceiveErrorDiscards, swSysTokenRingPortRemoves=swSysTokenRingPortRemoves, swSysSmtFddiPortLocationType=swSysSmtFddiPortLocationType, swSysBridgeIpFragmentationEnabled=swSysBridgeIpFragmentationEnabled, swSysTokenRingPortCount=swSysTokenRingPortCount, swSysSystemLogFacility=swSysSystemLogFacility, swSysSmtFddiMacLocationIndex=swSysSmtFddiMacLocationIndex, swSysDiagnosticsInfoTable=swSysDiagnosticsInfoTable, swSysFtSystemDetailedStatus=swSysFtSystemDetailedStatus, swSysBridgeSTPEnable=swSysBridgeSTPEnable, swSysBridgePortIfIndex=swSysBridgePortIfIndex, swSysSystemRequestedFddiStationMode=swSysSystemRequestedFddiStationMode, swSysFtBytesTransferred=swSysFtBytesTransferred, swModuleCardSysOverTemperatureEvent=swModuleCardSysOverTemperatureEvent, swSysEthernetPortIfIndex=swSysEthernetPortIfIndex, swSysSystemManufacturer=swSysSystemManufacturer, swSysFtSysBridgeFilterdownloadError=swSysFtSysBridgeFilterdownloadError, swSysSmtFddiMacBeaconEntry=swSysSmtFddiMacBeaconEntry, swSysSmtFddiMacRateByteReceiveRate=swSysSmtFddiMacRateByteReceiveRate, swSysTokenRingPortFrameCopiedErrors=swSysTokenRingPortFrameCopiedErrors, swSysNetworkAnalyzerBridgeIndex=swSysNetworkAnalyzerBridgeIndex, swSysSmtFddiMacRateEntry=swSysSmtFddiMacRateEntry, swSysEthernetPort=swSysEthernetPort, swSysIpInterfaceIpStackIndex=swSysIpInterfaceIpStackIndex, swSysSystemAction=swSysSystemAction, swSysSystemNvMemorySize=swSysSystemNvMemorySize, swSysTokenRingPortBurstErrors=swSysTokenRingPortBurstErrors, swSysAtInterfaceZone13=swSysAtInterfaceZone13, swSysFtLocalResourceMask=swSysFtLocalResourceMask, swSysModuleCardInfoFunctionalTestRevision=swSysModuleCardInfoFunctionalTestRevision, swSysBridgePortReceiveMulticastPathFilteredFrames=swSysBridgePortReceiveMulticastPathFilteredFrames, swSysAppleTalkBaseGroup=swSysAppleTalkBaseGroup, swSysSmtFddiMacStationSmtIndex=swSysSmtFddiMacStationSmtIndex, swSysAppleTalkInterfaceGroup=swSysAppleTalkInterfaceGroup, swSysControlPanelSoftwareRevision=swSysControlPanelSoftwareRevision, swSysSmt=swSysSmt, swSysNetworkPortMonitorAnalyzerAddress=swSysNetworkPortMonitorAnalyzerAddress, swSysAgentTrapDestinationAddressType=swSysAgentTrapDestinationAddressType, swSysNetworkPortMonitorTableEntry=swSysNetworkPortMonitorTableEntry, swSysBridgePortTransmitBlockedDiscards=swSysBridgePortTransmitBlockedDiscards, swSysPowerSupplyCount=swSysPowerSupplyCount, swSysAgentTrapDescriptionIndex=swSysAgentTrapDescriptionIndex, swSysInterfaceLocationInterfaceType=swSysInterfaceLocationInterfaceType, swSysDiagnosticsInfoExtendedDiagnosticsRevision=swSysDiagnosticsInfoExtendedDiagnosticsRevision, swSysNetworkMonitor=swSysNetworkMonitor, swSysAtInterfaceNetAddress=swSysAtInterfaceNetAddress, swSysSlotFddiPortCount=swSysSlotFddiPortCount, swSysTokenRingPortSpeed=swSysTokenRingPortSpeed, swSysDiagnosticsInfoDiagnosticFieldDOACounter=swSysDiagnosticsInfoDiagnosticFieldDOACounter, swSysSystemLogMessage=swSysSystemLogMessage, switchingSystemsFddiMib=switchingSystemsFddiMib, swSysSystemOverTemperatureEvent=swSysSystemOverTemperatureEvent, swSysBridgeVlanMode=swSysBridgeVlanMode, swSysEthernetPortTable=swSysEthernetPortTable, swSysBridgePortAddressBridgeIndex=swSysBridgePortAddressBridgeIndex, swSysBridgePortAddressAge=swSysBridgePortAddressAge, swSysEthernetPortRatePeakByteReceiveRate=swSysEthernetPortRatePeakByteReceiveRate, swSysSmtFddiMacRateTable=swSysSmtFddiMacRateTable, swSysAtInterfaceZone10=swSysAtInterfaceZone10, swSysSnmpInternalProxyEntry=swSysSnmpInternalProxyEntry, swSysAgentRequestMaxAge=swSysAgentRequestMaxAge, swSysBridgeAddressTablePeakCount=swSysBridgeAddressTablePeakCount, swSysSnmp=swSysSnmp, swSysBridgePortBridgeIndex=swSysBridgePortBridgeIndex, swSysNetworkPortMonitorBridgeIndex=swSysNetworkPortMonitorBridgeIndex, swSysAtInterfaceIfIndex=swSysAtInterfaceIfIndex, swSysSmtFddiMacLocationTable=swSysSmtFddiMacLocationTable, swSysSlotBoardStatus=swSysSlotBoardStatus, swSysModuleCardInfoICTTestStatus=swSysModuleCardInfoICTTestStatus, swSysTokenRingPortLostFrameErrors=swSysTokenRingPortLostFrameErrors, swSysAgentTrapDestinationTrapMask=swSysAgentTrapDestinationTrapMask, swSysSmtFddiPortSmtIndex=swSysSmtFddiPortSmtIndex, swSysModuleCardGroup=swSysModuleCardGroup, swSysNetworkPortMonitorStatus=swSysNetworkPortMonitorStatus, swSysDiagnosticsInfoPOVDiagnosticsRevision=swSysDiagnosticsInfoPOVDiagnosticsRevision, swSysBridgePortTable=swSysBridgePortTable, swSysInterfaceLocationIfIndex=swSysInterfaceLocationIfIndex, swSysSmtFddiMacRatePeakByteTransmitRate=swSysSmtFddiMacRatePeakByteTransmitRate, swModuleCardInsertEvent=swModuleCardInsertEvent, swSysBridgePortTransmitMulticastPathFilteredFrames=swSysBridgePortTransmitMulticastPathFilteredFrames, swSysTokenRingPortIfIndex=swSysTokenRingPortIfIndex, swSysIpInterfaceNetMask=swSysIpInterfaceNetMask, swSysTokenRingPortLobeWires=swSysTokenRingPortLobeWires, swSysFtSysStatusFlashError=swSysFtSysStatusFlashError, swSysControlPanelText=swSysControlPanelText, swSysPowerSupplyStatusEntry=swSysPowerSupplyStatusEntry, swSysPowerSupplyStatus=swSysPowerSupplyStatus, swSysIpxInterfaceEntry=swSysIpxInterfaceEntry, swSysSmtFddiMacBeaconSmtIndex=swSysSmtFddiMacBeaconSmtIndex, swSysBridgeAddressThreshold=swSysBridgeAddressThreshold, swSysSmtFddiMacRateByteTransmitRate=swSysSmtFddiMacRateByteTransmitRate, swSysFtDetailedStatusString=swSysFtDetailedStatusString, swSysIpxInterfaceIfIndex=swSysIpxInterfaceIfIndex, swSysEthernetPortRatePeakByteTransmitRate=swSysEthernetPortRatePeakByteTransmitRate, swSysSmtFddiPortRequestedStation=swSysSmtFddiPortRequestedStation, swSysEthernetPortLinkStatus=swSysEthernetPortLinkStatus, swSysInterface=swSysInterface, swSysBridgePortForwardedUnicastOctets=swSysBridgePortForwardedUnicastOctets, swSysBridgePortAddressRemoteAddress=swSysBridgePortAddressRemoteAddress, swSysBridgePortAddressType=swSysBridgePortAddressType, swSysSystemConsoleAccess=swSysSystemConsoleAccess, swSysAgentProxyRemoteSmtEvents=swSysAgentProxyRemoteSmtEvents, swSysSystemOvertemperature=swSysSystemOvertemperature, swSysIpInterfaceCost=swSysIpInterfaceCost, swSysAtInterfaceType=swSysAtInterfaceType, swSysSystemTimeZone=swSysSystemTimeZone, swSysSystemBuildTime=swSysSystemBuildTime, swSysSlotBoardRevision=swSysSlotBoardRevision, swSysPowerSupply=swSysPowerSupply, swSysModuleCardInfoSystemTestStatus=swSysModuleCardInfoSystemTestStatus, swSysSystemFanFailureEvent=swSysSystemFanFailureEvent, swSysAgentTrapEnterprise=swSysAgentTrapEnterprise, swSysFtSystemBridgeFilterCode=swSysFtSystemBridgeFilterCode, swSysAtInterfaceZone4=swSysAtInterfaceZone4, swSysFtSystemConfiguration=swSysFtSystemConfiguration, swSysPowerSupplyStatusTable=swSysPowerSupplyStatusTable, swSysFtSysBridgeFilterNoRoom=swSysFtSysBridgeFilterNoRoom, swSysModuleCardInfoBoardRevision=swSysModuleCardInfoBoardRevision, swSysTokenRingPortEntry=swSysTokenRingPortEntry, swSysTokenRingPortAbortTransErrors=swSysTokenRingPortAbortTransErrors)
