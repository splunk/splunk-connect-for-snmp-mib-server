#
# PySNMP MIB module TY3250I-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TY3250I-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, enterprises, NotificationType, MibIdentifier, NotificationType, iso, ModuleIdentity, Unsigned32, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "enterprises", "NotificationType", "MibIdentifier", "NotificationType", "iso", "ModuleIdentity", "Unsigned32", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tylink = MibIdentifier((1, 3, 6, 1, 4, 1, 466))
ty3250 = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4))
ty3250SysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 1))
ty3250SysType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysType.setStatus('mandatory')
ty3250SysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysSoftRev.setStatus('mandatory')
ty3250SysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysHardRev.setStatus('mandatory')
ty3250SysNumT1Installed = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysNumT1Installed.setStatus('mandatory')
ty3250SysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysNumDteInstalled.setStatus('mandatory')
ty3250SysNumCommInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysNumCommInstalled.setStatus('mandatory')
ty3250SysName = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250SysName.setStatus('mandatory')
ty3250SysResetNode = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(321))).clone(namedValues=NamedValues(("reset-node", 321)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250SysResetNode.setStatus('mandatory')
ty3250CfgT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 3))
ty3250CfgT1Framing = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("d4", 1), ("esf-54016", 2), ("esf-ansi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Framing.setStatus('mandatory')
ty3250CfgT1LineEncoding = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1LineEncoding.setStatus('mandatory')
ty3250CfgT1Density = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-density", 1), ("twelve-half-percent", 2), ("one-in-16", 3), ("one-in-64", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Density.setStatus('mandatory')
ty3250CfgT1Interface = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx-1", 1), ("csu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Interface.setStatus('mandatory')
ty3250CfgT1LboSetting = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1))).clone(namedValues=NamedValues(("zero-db", 2), ("n7-5-db", 3), ("n15-db", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1LboSetting.setStatus('mandatory')
ty3250CfgT1Timing = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("loop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Timing.setStatus('mandatory')
ty3250CfgT1CicuitID = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1CicuitID.setStatus('mandatory')
ty3250CfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 4))
ty3250CfgDteLineRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteLineRate.setStatus('mandatory')
ty3250CfgDteChannelDensity = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteChannelDensity.setStatus('mandatory')
ty3250CfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop-1", 1), ("loop-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteTiming.setStatus('mandatory')
ty3250CfgDteClockMode = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteClockMode.setStatus('mandatory')
ty3250CfgDteDataMode = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-normal", 1), ("data-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteDataMode.setStatus('mandatory')
ty3250CfgDteIntfType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("intf-v35", 3), ("intf-rs449", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteIntfType.setStatus('mandatory')
ty3250CfgConnectTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5))
ty3250CfgConnAutoAssign = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5, 1))
ty3250ConnAutoT1Index = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnAutoT1Index.setStatus('mandatory')
ty3250ConnStartDS0 = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnStartDS0.setStatus('mandatory')
ty3250ConnAutoPort = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 33))).clone(namedValues=NamedValues(("port1-t1", 1), ("port2-dte", 2), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnAutoPort.setStatus('mandatory')
ty3250ConnAutoType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnAutoType.setStatus('mandatory')
ty3250ConnDteRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDteRate.setStatus('mandatory')
ty3250ConnDteDensity = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDteDensity.setStatus('mandatory')
ty3250ConnDs0Required = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDs0Required.setStatus('mandatory')
ty3250ConnAutoStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connections-valid", 1), ("incorrect-bandwidth", 2), ("bandwidth-conflict", 3), ("no-current-connections", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnAutoStatus.setStatus('mandatory')
ty3250CfgCurrentConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 5, 2), )
if mibBuilder.loadTexts: ty3250CfgCurrentConnTable.setStatus('mandatory')
ty3250CfgCurrentConnections = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1Index"), (0, "TY3250I-MIB", "ty3250Ds0"))
if mibBuilder.loadTexts: ty3250CfgCurrentConnections.setStatus('mandatory')
ty3250T1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1Index.setStatus('mandatory')
ty3250Ds0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250Ds0.setStatus('mandatory')
ty3250DtePort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 33))).clone(namedValues=NamedValues(("port1-t1", 1), ("port2-dte", 2), ("not-connected", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DtePort.setStatus('mandatory')
ty3250Type = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250Type.setStatus('mandatory')
ty3250CfgEditConnMenu = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5, 3))
ty3250CfgEditConnCopyCurrtoEdit = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("copy-current", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250CfgEditConnCopyCurrtoEdit.setStatus('mandatory')
ty3250CfgEditConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2), )
if mibBuilder.loadTexts: ty3250CfgEditConnTable.setStatus('mandatory')
ty3250CfgEditConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250ConnT1Index"), (0, "TY3250I-MIB", "ty3250ConnDS0"))
if mibBuilder.loadTexts: ty3250CfgEditConnEntry.setStatus('mandatory')
ty3250ConnT1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnT1Index.setStatus('mandatory')
ty3250ConnDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDS0.setStatus('mandatory')
ty3250ConnDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 33))).clone(namedValues=NamedValues(("port1-t1", 1), ("port2-dte", 2), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnDTE.setStatus('mandatory')
ty3250ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnType.setStatus('mandatory')
ty3250CfgConnUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 3))
ty3250CfgConnUpdateCmd = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250CfgConnUpdateCmd.setStatus('mandatory')
ty3250CfgConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connections-valid", 1), ("incorrect-bandwidth", 2), ("bandwidth-conflict", 3), ("no-current-connections", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250CfgConnStatus.setStatus('mandatory')
ty3250CfgEditConnClearEditBuff = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-edit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250CfgEditConnClearEditBuff.setStatus('mandatory')
ty3250CfgCommTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 6))
ty3250CfgCommFormat = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 6, 1), )
if mibBuilder.loadTexts: ty3250CfgCommFormat.setStatus('mandatory')
ty3250CfgCommIntf = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250CfgCommIndex"))
if mibBuilder.loadTexts: ty3250CfgCommIntf.setStatus('mandatory')
ty3250CfgCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("comm", 1), ("maint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250CfgCommIndex.setStatus('mandatory')
ty3250CfgCommBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommBaud.setStatus('mandatory')
ty3250CfgCommDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommDataBits.setStatus('mandatory')
ty3250CfgCommStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommStopBits.setStatus('mandatory')
ty3250CfgCommParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommParity.setStatus('mandatory')
ty3250CfgCommFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-flow-control", 1), ("software-flow-control", 2), ("hardware-flow-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommFlowCtrl.setStatus('mandatory')
ty3250CfgCommModeTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 6, 2), )
if mibBuilder.loadTexts: ty3250CfgCommModeTable.setStatus('mandatory')
ty3250CfgCommModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250CfgCommModeIndex"))
if mibBuilder.loadTexts: ty3250CfgCommModeEntry.setStatus('mandatory')
ty3250CfgCommModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("comm", 1), ("maint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommModeIndex.setStatus('mandatory')
ty3250CfgCommMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("user-interface-vt100", 1), ("slip", 2), ("ethernet", 3), ("token-ring", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMode.setStatus('mandatory')
ty3250CfgCommMyIP = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMyIP.setStatus('mandatory')
ty3250CfgCommPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommPeerIP.setStatus('mandatory')
ty3250CfgCommMask = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMask.setStatus('mandatory')
ty3250CfgCommMaxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMaxMTU.setStatus('mandatory')
ty3250CfgSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 7), )
if mibBuilder.loadTexts: ty3250CfgSnmpTable.setStatus('mandatory')
ty3250SnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 7, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250SnmpIndex"))
if mibBuilder.loadTexts: ty3250SnmpEntry.setStatus('mandatory')
ty3250SnmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250SnmpIndex.setStatus('mandatory')
ty3250SnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250SnmpManagerIP.setStatus('mandatory')
ty3250DiagT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 10))
ty3250DiagT1LocLineLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-lpbk-disable", 1), ("line-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagT1LocLineLpbk.setStatus('mandatory')
ty3250DiagT1LocPylLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pyl-lpbk-disable", 1), ("pyl-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagT1LocPylLpbk.setStatus('mandatory')
ty3250DiagT1LocAggrLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggr-lpbk-disable", 1), ("aggr-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagT1LocAggrLpbk.setStatus('mandatory')
ty3250DiagT1RmtLpbkStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-remote-lpbks", 1), ("csu-lpbk-from-remote", 2), ("dsu-lpbk-from-remote", 3), ("pyl-lpbk-from-remote", 4), ("csu-lpbk-sent-to-remote", 5), ("dsu-lpbk-sent-to-remote", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagT1RmtLpbkStatus.setStatus('mandatory')
ty3250DiagT1RmtLpbkCmd = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rmt-csu-lpbk-loopup", 1), ("rmt-csu-lpbk-loopdown", 2), ("rmt-dsu-lpbk-loopup", 3), ("rmt-dsu-lpbk-loopdown", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250DiagT1RmtLpbkCmd.setStatus('mandatory')
ty3250DiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 11))
ty3250DiagDteLocBidirLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidir-lpbk-disable", 1), ("bidir-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagDteLocBidirLpbk.setStatus('mandatory')
ty3250DiagDteRmtLpbkStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-remote-lpbks", 1), ("bidir-lpbk-from-remote", 2), ("bidir-lpbk-sent-to-remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagDteRmtLpbkStatus.setStatus('mandatory')
ty3250DiagDteRmtLpbkCmd = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rmt-bidir-lpbk-loopup-tyl", 1), ("rmt-bidir-lpbk-loopdown-tyl", 2), ("rmt-bidir-lpbk-loopup-v54", 3), ("rmt-bidir-lpbk-loopdown-v54", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250DiagDteRmtLpbkCmd.setStatus('mandatory')
ty3250DiagBerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 12))
ty3250DiagBerPattrn = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pattrn-511", 1), ("pattrn-qrss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagBerPattrn.setStatus('mandatory')
ty3250DiagBerState = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable-t1-bert-on-full-bw", 1), ("enable-t1-bert-on-DTE-bw", 2), ("disable-bert-test", 3), ("inject-error-bert-test", 4), ("clear-error-bert-test", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250DiagBerState.setStatus('mandatory')
ty3250DiagBerStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-full-bw-out-of-sync", 2), ("bert-DTE-bw-out-of-sync", 3), ("bert-full-bw-in-sync", 4), ("bert-DTE-bw-in-sync", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagBerStatus.setStatus('mandatory')
ty3250DiagBerErrors = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagBerErrors.setStatus('mandatory')
ty3250DiagBerTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagBerTimeElaps.setStatus('mandatory')
ty3250PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 13), )
if mibBuilder.loadTexts: ty3250PortStatusTable.setStatus('mandatory')
ty3250PortStatus = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 13, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250IntfIndex"))
if mibBuilder.loadTexts: ty3250PortStatus.setStatus('mandatory')
ty3250IntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfIndex.setStatus('mandatory')
ty3250IntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1-port", 1), ("dte-port", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfType.setStatus('mandatory')
ty3250IntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfMode.setStatus('mandatory')
ty3250IntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1-frame-sync-okay", 1), ("t1-frame-sync-with-errors", 2), ("signal-present-without-frame-sync", 3), ("signal-not-present", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfStatus.setStatus('mandatory')
ty3250IntfAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-alarms", 1), ("red-alarm-declared", 2), ("yellow-alarm-detected", 3), ("unframed-all-ones-detected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfAlarms.setStatus('mandatory')
ty3250PerfT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 14), )
if mibBuilder.loadTexts: ty3250PerfT1CurrentTable.setStatus('mandatory')
ty3250T1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 14, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1CurrentIndex"))
if mibBuilder.loadTexts: ty3250T1CurrentEntry.setStatus('mandatory')
ty3250T1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentIndex.setStatus('mandatory')
ty3250T1CurrentCrc6Events = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentCrc6Events.setStatus('mandatory')
ty3250T1CurrentOofEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentOofEvents.setStatus('mandatory')
ty3250T1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentESs.setStatus('mandatory')
ty3250T1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentSESs.setStatus('mandatory')
ty3250T1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentSEFSs.setStatus('mandatory')
ty3250T1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentUASs.setStatus('mandatory')
ty3250T1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentCSSs.setStatus('mandatory')
ty3250T1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentBESs.setStatus('mandatory')
ty3250T1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentLCVs.setStatus('mandatory')
ty3250PerfT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 15), )
if mibBuilder.loadTexts: ty3250PerfT1IntervalTable.setStatus('mandatory')
ty3250T1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 15, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1IntervalIndex"), (0, "TY3250I-MIB", "ty3250T1IntervalNumber"))
if mibBuilder.loadTexts: ty3250T1IntervalEntry.setStatus('mandatory')
ty3250T1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalIndex.setStatus('mandatory')
ty3250T1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalNumber.setStatus('mandatory')
ty3250T1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalESs.setStatus('mandatory')
ty3250T1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalSESs.setStatus('mandatory')
ty3250T1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalSEFSs.setStatus('mandatory')
ty3250T1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalUASs.setStatus('mandatory')
ty3250T1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalCSSs.setStatus('mandatory')
ty3250T1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalBESs.setStatus('mandatory')
ty3250T1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalLCVs.setStatus('mandatory')
ty3250PerfT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 16), )
if mibBuilder.loadTexts: ty3250PerfT1TotalTable.setStatus('mandatory')
ty3250T1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 16, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1TotalIndex"))
if mibBuilder.loadTexts: ty3250T1TotalEntry.setStatus('mandatory')
ty3250T1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalIndex.setStatus('mandatory')
ty3250T1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalESs.setStatus('mandatory')
ty3250T1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalSESs.setStatus('mandatory')
ty3250T1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalSEFSs.setStatus('mandatory')
ty3250T1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalUASs.setStatus('mandatory')
ty3250T1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalCSSs.setStatus('mandatory')
ty3250T1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalBESs.setStatus('mandatory')
ty3250T1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalLCVs.setStatus('mandatory')
ty3250T1PerfCmdTypeTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 17), )
if mibBuilder.loadTexts: ty3250T1PerfCmdTypeTable.setStatus('mandatory')
ty3250T1PerfCmdType = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 17, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1CommandIndex"))
if mibBuilder.loadTexts: ty3250T1PerfCmdType.setStatus('mandatory')
ty3250T1CommandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250T1CommandIndex.setStatus('mandatory')
ty3250T1PerfFreezeState = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze-reg", 1), ("unfreeze-reg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250T1PerfFreezeState.setStatus('mandatory')
ty3250T1PerfClearEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-events", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250T1PerfClearEvents.setStatus('mandatory')
ty3250T1PerfClearAll = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-all", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250T1PerfClearAll.setStatus('mandatory')
ty3250AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("cold-start", 1), ("authentication", 2), ("t1-netw-carrier-loss", 3), ("t1-netw-carrier-detect", 4), ("t1-netw-sync-loss-declare", 5), ("t1-netw-sync-acquire", 6), ("t1-netw-red-alarm-declare", 7), ("t1-netw-red-alarm-clear", 8), ("t1-netw-yellow-alarm-detect", 9), ("t1-netw-yellow-alarm-clear", 10), ("t1-netw-ais-detect", 11), ("t1-netw-ais-clear", 12), ("t1-controlled-slip", 13), ("configuration-update", 14), ("diagnostic-state", 15), ("diagnostic-clear", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250AlarmType.setStatus('mandatory')
ty3250Trap = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,0)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250coldstart = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,1)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250authentication = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,2)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwcarrierloss = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,3)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwcarrierdetect = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,4)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwsynclossdeclare = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,5)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwsyncacquire = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,6)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwredalarmdeclare = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,7)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwredalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,8)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwyellowalarmdetect = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,9)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwyellowalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,10)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwaisdetect = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,11)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1netwaisclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,12)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250t1controlledslip = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,13)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250configurationupdate = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,14)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250diagnosticstate = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,15)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
ty3250diagnosticclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,16)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
mibBuilder.exportSymbols("TY3250I-MIB", ty3250T1IntervalEntry=ty3250T1IntervalEntry, ty3250CfgDteClockMode=ty3250CfgDteClockMode, ty3250T1TotalCSSs=ty3250T1TotalCSSs, ty3250DiagT1LocLineLpbk=ty3250DiagT1LocLineLpbk, ty3250CfgT1LboSetting=ty3250CfgT1LboSetting, ty3250t1netwaisclear=ty3250t1netwaisclear, ty3250T1PerfCmdTypeTable=ty3250T1PerfCmdTypeTable, ty3250CfgT1Interface=ty3250CfgT1Interface, ty3250T1CurrentSEFSs=ty3250T1CurrentSEFSs, ty3250T1IntervalCSSs=ty3250T1IntervalCSSs, ty3250SysNumT1Installed=ty3250SysNumT1Installed, ty3250DiagBerTimeElaps=ty3250DiagBerTimeElaps, ty3250ConnDteRate=ty3250ConnDteRate, ty3250T1IntervalSESs=ty3250T1IntervalSESs, ty3250CfgEditConnClearEditBuff=ty3250CfgEditConnClearEditBuff, ty3250T1TotalIndex=ty3250T1TotalIndex, ty3250T1TotalLCVs=ty3250T1TotalLCVs, ty3250CfgDteTable=ty3250CfgDteTable, ty3250diagnosticclear=ty3250diagnosticclear, ty3250T1TotalEntry=ty3250T1TotalEntry, ty3250T1IntervalBESs=ty3250T1IntervalBESs, ty3250ConnT1Index=ty3250ConnT1Index, ty3250CfgSnmpTable=ty3250CfgSnmpTable, ty3250DiagT1LocPylLpbk=ty3250DiagT1LocPylLpbk, ty3250CfgCommMyIP=ty3250CfgCommMyIP, ty3250PortStatusTable=ty3250PortStatusTable, ty3250ConnAutoStatus=ty3250ConnAutoStatus, ty3250coldstart=ty3250coldstart, ty3250SysTable=ty3250SysTable, ty3250t1netwredalarmdeclare=ty3250t1netwredalarmdeclare, ty3250SysName=ty3250SysName, ty3250CfgCommParity=ty3250CfgCommParity, ty3250T1TotalSESs=ty3250T1TotalSESs, ty3250authentication=ty3250authentication, ty3250CfgDteLineRate=ty3250CfgDteLineRate, ty3250T1IntervalLCVs=ty3250T1IntervalLCVs, ty3250t1netwcarrierdetect=ty3250t1netwcarrierdetect, ty3250CfgT1Framing=ty3250CfgT1Framing, ty3250DiagT1LocAggrLpbk=ty3250DiagT1LocAggrLpbk, ty3250T1IntervalSEFSs=ty3250T1IntervalSEFSs, ty3250T1CommandIndex=ty3250T1CommandIndex, ty3250ConnType=ty3250ConnType, ty3250CfgCurrentConnTable=ty3250CfgCurrentConnTable, ty3250IntfMode=ty3250IntfMode, ty3250T1TotalUASs=ty3250T1TotalUASs, ty3250t1netwyellowalarmdetect=ty3250t1netwyellowalarmdetect, ty3250CfgConnStatus=ty3250CfgConnStatus, ty3250DiagBerPattrn=ty3250DiagBerPattrn, ty3250IntfIndex=ty3250IntfIndex, ty3250DiagT1RmtLpbkStatus=ty3250DiagT1RmtLpbkStatus, ty3250CfgConnUpdateCmd=ty3250CfgConnUpdateCmd, ty3250CfgCommBaud=ty3250CfgCommBaud, ty3250ConnAutoT1Index=ty3250ConnAutoT1Index, ty3250ConnDs0Required=ty3250ConnDs0Required, ty3250DiagBerErrors=ty3250DiagBerErrors, ty3250T1IntervalESs=ty3250T1IntervalESs, ty3250CfgT1CicuitID=ty3250CfgT1CicuitID, ty3250T1IntervalUASs=ty3250T1IntervalUASs, ty3250=ty3250, ty3250CfgCommTable=ty3250CfgCommTable, ty3250CfgEditConnTable=ty3250CfgEditConnTable, tylink=tylink, ty3250CfgDteTiming=ty3250CfgDteTiming, ty3250T1IntervalIndex=ty3250T1IntervalIndex, ty3250SnmpManagerIP=ty3250SnmpManagerIP, ty3250SysType=ty3250SysType, ty3250CfgCommModeTable=ty3250CfgCommModeTable, ty3250SnmpEntry=ty3250SnmpEntry, ty3250DiagBerState=ty3250DiagBerState, ty3250T1Index=ty3250T1Index, ty3250T1PerfClearAll=ty3250T1PerfClearAll, ty3250SysSoftRev=ty3250SysSoftRev, ty3250CfgCommModeEntry=ty3250CfgCommModeEntry, ty3250DiagDteRmtLpbkStatus=ty3250DiagDteRmtLpbkStatus, ty3250PortStatus=ty3250PortStatus, ty3250ConnAutoPort=ty3250ConnAutoPort, ty3250Type=ty3250Type, ty3250ConnDS0=ty3250ConnDS0, ty3250ConnDTE=ty3250ConnDTE, ty3250SysHardRev=ty3250SysHardRev, ty3250DiagBerStatus=ty3250DiagBerStatus, ty3250CfgCommIntf=ty3250CfgCommIntf, ty3250CfgCommIndex=ty3250CfgCommIndex, ty3250T1CurrentCSSs=ty3250T1CurrentCSSs, ty3250DiagT1Table=ty3250DiagT1Table, ty3250ConnStartDS0=ty3250ConnStartDS0, ty3250T1IntervalNumber=ty3250T1IntervalNumber, ty3250T1PerfClearEvents=ty3250T1PerfClearEvents, ty3250SysNumDteInstalled=ty3250SysNumDteInstalled, ty3250DiagT1RmtLpbkCmd=ty3250DiagT1RmtLpbkCmd, ty3250CfgT1LineEncoding=ty3250CfgT1LineEncoding, ty3250T1CurrentCrc6Events=ty3250T1CurrentCrc6Events, ty3250CfgConnAutoAssign=ty3250CfgConnAutoAssign, ty3250SnmpIndex=ty3250SnmpIndex, ty3250CfgCommMaxMTU=ty3250CfgCommMaxMTU, ty3250CfgCommDataBits=ty3250CfgCommDataBits, ty3250CfgDteIntfType=ty3250CfgDteIntfType, ty3250configurationupdate=ty3250configurationupdate, ty3250CfgCommFormat=ty3250CfgCommFormat, ty3250T1CurrentUASs=ty3250T1CurrentUASs, ty3250CfgConnectTable=ty3250CfgConnectTable, ty3250T1CurrentSESs=ty3250T1CurrentSESs, ty3250t1netwaisdetect=ty3250t1netwaisdetect, ty3250CfgCurrentConnections=ty3250CfgCurrentConnections, ty3250AlarmType=ty3250AlarmType, ty3250CfgEditConnMenu=ty3250CfgEditConnMenu, ty3250CfgDteChannelDensity=ty3250CfgDteChannelDensity, ty3250CfgCommMode=ty3250CfgCommMode, ty3250CfgEditConnEntry=ty3250CfgEditConnEntry, ty3250PerfT1CurrentTable=ty3250PerfT1CurrentTable, ty3250t1netwcarrierloss=ty3250t1netwcarrierloss, ty3250t1netwsynclossdeclare=ty3250t1netwsynclossdeclare, ty3250T1CurrentESs=ty3250T1CurrentESs, ty3250T1TotalESs=ty3250T1TotalESs, ty3250T1CurrentOofEvents=ty3250T1CurrentOofEvents, ty3250Trap=ty3250Trap, ty3250Ds0=ty3250Ds0, ty3250CfgCommFlowCtrl=ty3250CfgCommFlowCtrl, ty3250T1PerfFreezeState=ty3250T1PerfFreezeState, ty3250DtePort=ty3250DtePort, ty3250t1netwyellowalarmclear=ty3250t1netwyellowalarmclear, ty3250CfgCommStopBits=ty3250CfgCommStopBits, ty3250T1TotalSEFSs=ty3250T1TotalSEFSs, ty3250T1PerfCmdType=ty3250T1PerfCmdType, ty3250t1controlledslip=ty3250t1controlledslip, ty3250IntfType=ty3250IntfType, ty3250CfgEditConnCopyCurrtoEdit=ty3250CfgEditConnCopyCurrtoEdit, ty3250CfgConnUpdate=ty3250CfgConnUpdate, ty3250CfgCommModeIndex=ty3250CfgCommModeIndex, ty3250T1CurrentEntry=ty3250T1CurrentEntry, ty3250ConnDteDensity=ty3250ConnDteDensity, ty3250DiagDteRmtLpbkCmd=ty3250DiagDteRmtLpbkCmd, ty3250CfgDteDataMode=ty3250CfgDteDataMode, ty3250t1netwsyncacquire=ty3250t1netwsyncacquire, ty3250IntfAlarms=ty3250IntfAlarms, ty3250T1CurrentBESs=ty3250T1CurrentBESs, ty3250ConnAutoType=ty3250ConnAutoType, ty3250CfgCommPeerIP=ty3250CfgCommPeerIP, ty3250T1TotalBESs=ty3250T1TotalBESs, ty3250CfgT1Table=ty3250CfgT1Table, ty3250T1CurrentLCVs=ty3250T1CurrentLCVs, ty3250SysNumCommInstalled=ty3250SysNumCommInstalled, ty3250DiagDteTable=ty3250DiagDteTable, ty3250T1CurrentIndex=ty3250T1CurrentIndex, ty3250DiagBerTable=ty3250DiagBerTable, ty3250CfgT1Density=ty3250CfgT1Density, ty3250diagnosticstate=ty3250diagnosticstate, ty3250PerfT1TotalTable=ty3250PerfT1TotalTable, ty3250PerfT1IntervalTable=ty3250PerfT1IntervalTable, ty3250CfgT1Timing=ty3250CfgT1Timing, ty3250DiagDteLocBidirLpbk=ty3250DiagDteLocBidirLpbk, ty3250SysResetNode=ty3250SysResetNode, ty3250t1netwredalarmclear=ty3250t1netwredalarmclear, ty3250IntfStatus=ty3250IntfStatus, ty3250CfgCommMask=ty3250CfgCommMask)
