#
# PySNMP MIB module ASCEND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter64, NotificationType, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Bits, Integer32, Counter32, MibIdentifier, Gauge32, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "NotificationType", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Bits", "Integer32", "Counter32", "MibIdentifier", "Gauge32", "Unsigned32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

ascend = MibIdentifier((1, 3, 6, 1, 4, 1, 529))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1))
slots = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 2))
hostTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 3))
advancedAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 4))
lanTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 5))
doGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 6))
hostStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 7))
console = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 8))
systemStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 9))
eventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 10))
callStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 11))
sessionStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 12))
radiusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 13))
mCastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 14))
lanModemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 15))
firewallGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 16))
wanDialoutPkt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 17))
powerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 18))
multiShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 19))
miscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 20))
asgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 21))
flashGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 22))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23))
atmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 24))
callLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 25))
srvcMgmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 26))
resourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 27))
voipGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 28))
mgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 29))
sparingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 30))
cltmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 31))
multiband = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 1))
max = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2))
pipeline = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3))
max_tnt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 4)).setLabel("max-tnt")
dslTnt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 5))
aqueduct = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 6))
stinger_10 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 7)).setLabel("stinger-10")
apx_8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 8)).setLabel("apx-8000")
max200 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 1))
max1800 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 2))
max2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 3))
max4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 4))
max4002 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 5))
max4004 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 6))
max6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 7))
max800 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 8))
max3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 9))
dslmax20 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 10))
terminator = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 11))
cvmax100 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 2, 12))
pipe15 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 1))
pipe25 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 2))
pipe25Px = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 3))
pipe25Fx = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 4))
pipe50 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 5))
pipe75 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 6))
pipe130T1 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 7))
pipe400 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 8))
pipe220 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 9))
dslPipeAcap = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 10))
dslPipeS = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 11))
dslPipe2S = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 12))
dslPipeAdmt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 21))
dslPipeAlctlDmt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 22))
dslPipeAdslCoeC = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 13))
dslPipeSdslCoe = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 14))
dslPipeSdslCoe2S = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 15))
dslPipeAdslCoeD = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 20))
pipe85 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 16))
pipe50LS56 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 17))
pipe130V35 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 18))
pipe130N56 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 19))
spipe95 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 23))
spipe155T1 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 24))
dslPipe50SdslCell = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 25))
dslPipeSdslHs = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 3, 26))
aq300 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 1, 6, 1))
hostTypeAny = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 3, 1))
hostTypeDual = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 3, 2))
hostTypeQuad = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 3, 3))
hostTypeAim2 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 3, 4))
hostTypeAim6 = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 3, 5))
lanTypeAny = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 5, 1))
lanTypeEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 5, 2))
lanTypeEtherData = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 5, 3))
doTable = MibTable((1, 3, 6, 1, 4, 1, 529, 6, 1), )
if mibBuilder.loadTexts: doTable.setStatus('mandatory')
doEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 6, 1, 1), ).setIndexNames((0, "ASCEND-MIB", "doSlotIndex"), (0, "ASCEND-MIB", "doItemIndex"))
if mibBuilder.loadTexts: doEntry.setStatus('mandatory')
doSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSlotIndex.setStatus('mandatory')
doItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doItemIndex.setStatus('mandatory')
doDial = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doDial.setStatus('mandatory')
doHangUp = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doHangUp.setStatus('mandatory')
doAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doAnswer.setStatus('mandatory')
doExtendBW = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doExtendBW.setStatus('mandatory')
doContractBW = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doContractBW.setStatus('mandatory')
doBegEndRemoteLB = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doBegEndRemoteLB.setStatus('mandatory')
doBegEndBERT = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doBegEndBERT.setStatus('mandatory')
doResynchronize = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("notValid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doResynchronize.setStatus('mandatory')
hostStatusTable = MibTable((1, 3, 6, 1, 4, 1, 529, 7, 1), )
if mibBuilder.loadTexts: hostStatusTable.setStatus('mandatory')
hostStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 7, 1, 1), ).setIndexNames((0, "ASCEND-MIB", "hostStatusSlotIndex"), (0, "ASCEND-MIB", "hostStatusItemIndex"))
if mibBuilder.loadTexts: hostStatusEntry.setStatus('mandatory')
hostStatusSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusSlotIndex.setStatus('mandatory')
hostStatusItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusItemIndex.setStatus('mandatory')
hostStatusLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusLocalName.setStatus('mandatory')
hostStatusDialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusDialNum.setStatus('mandatory')
hostStatusCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("aim", 1), ("bonding", 2), ("one-channel", 3), ("two-channel", 4), ("ft1", 5), ("ft1Aim", 6), ("ft1BandO", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusCallType.setStatus('mandatory')
hostStatusCallMgm = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("manual", 2), ("static", 3), ("dynamic", 4), ("delta", 5), ("one-of-8", 6), ("one-of-40", 7), ("mode1", 8), ("mode2", 9), ("mode3", 10), ("mode0", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusCallMgm.setStatus('mandatory')
hostStatusDataSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("serviceVoice", 1), ("service56KR", 2), ("service56K", 3), ("service64K", 4), ("service384KR", 5), ("service384K-H0", 6), ("service1536K", 7), ("service1536KR", 8), ("service128K", 9), ("service192K", 10), ("service256K", 11), ("service320K", 12), ("service384K", 13), ("service448K", 14), ("service512K", 15), ("service576K", 16), ("service640K", 17), ("service704K", 18), ("service768K", 19), ("service832K", 20), ("service896K", 21), ("service960K", 22), ("service1024K", 23), ("service1088K", 24), ("service1152K", 25), ("service1216K", 26), ("service1280K", 27), ("service1344K", 28), ("service1408K", 29), ("service1472K", 30), ("service1600K", 31), ("service1664K", 32), ("service1728K", 33), ("service1792K", 34), ("service1856K", 35), ("service1920K", 36), ("serviceModem", 37), ("serviceV110-24-56K", 38), ("serviceV110-48-56K", 39), ("serviceV110-96-56K", 40), ("serviceV110-192-56K", 41), ("serviceV110-384-56K", 42), ("serviceV110-24-56KR", 43), ("serviceV110-48-56KR", 44), ("serviceV110-96-56KR", 45), ("serviceV110-192-56KR", 46), ("serviceV110-384-56KR", 47), ("serviceV110-24-64K", 48), ("serviceV110-48-64K", 49), ("serviceV110-96-64K", 50), ("serviceV110-192-64K", 51), ("serviceV110-384-64K", 52), ("serviceV110-24-64KR", 53), ("serviceV110-48-64KR", 54), ("serviceV110-96-64KR", 55), ("serviceV110-192-64KR", 56), ("serviceV110-384-64KR", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusDataSvc.setStatus('mandatory')
hostStatusCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("answering", 2), ("calling", 3), ("clearing", 4), ("localLoop", 5), ("handshake", 6), ("idle", 7), ("online", 8), ("loopMast", 9), ("loopSlav", 10), ("bertMast", 11), ("bertSlav", 12), ("remoteMg", 13), ("ringing", 14), ("setupAdd", 15), ("setupHnd", 16), ("setupRem", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusCallState.setStatus('mandatory')
hostStatusRemName = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusRemName.setStatus('mandatory')
hostStatusChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusChannels.setStatus('mandatory')
hostStatusDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatusDuration.setStatus('mandatory')
consoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleNumber.setStatus('mandatory')
consoleTable = MibTable((1, 3, 6, 1, 4, 1, 529, 8, 2), )
if mibBuilder.loadTexts: consoleTable.setStatus('mandatory')
consoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 8, 2, 1), ).setIndexNames((0, "ASCEND-MIB", "consoleIndex"))
if mibBuilder.loadTexts: consoleEntry.setStatus('mandatory')
consoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleIndex.setStatus('mandatory')
consoleIf = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleIf.setStatus('mandatory')
consoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("secondary", 3), ("palmtop", 4), ("inactive", 5), ("remote", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleType.setStatus('mandatory')
consoleSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleSecurity.setStatus('mandatory')
consoleSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 8, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleSpecific.setStatus('mandatory')
sysAbsoluteStartupTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAbsoluteStartupTime.setStatus('mandatory')
sysSecsSinceStartup = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSecsSinceStartup.setStatus('mandatory')
sysMibVersionNum = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMibVersionNum.setStatus('mandatory')
sysMibMinorRevNum = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMibMinorRevNum.setStatus('mandatory')
sysConfigTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 9, 5))
sysConfigTftpCmd = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("save", 1), ("restore", 2), ("saveAll", 3), ("saveMib", 4), ("saveAllMib", 5), ("loadCode", 6), ("saveIncProf", 7), ("saveExcProf", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigTftpCmd.setStatus('mandatory')
sysConfigTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("ok", 1), ("notFound", 2), ("access", 3), ("noSpace", 4), ("badOp", 5), ("badTid", 6), ("exists", 7), ("noSuchUser", 8), ("parameter", 9), ("busy", 10), ("noResources", 11), ("timeout", 12), ("unrecoverable", 13), ("tooManyRetries", 14), ("createFile", 15), ("openFile", 16), ("inProgress", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigTftpStatus.setStatus('mandatory')
sysConfigTftpHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigTftpHostAddr.setStatus('mandatory')
sysConfigTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigTftpFilename.setStatus('mandatory')
sysConfigTftpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigTftpPort.setStatus('mandatory')
sysConfigTftpParameter = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigTftpParameter.setStatus('mandatory')
sysConfigRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 9, 6))
sysConfigRadiusCmd = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 1), ("routes", 2), ("pools", 3), ("nailed", 4), ("termsrv", 5), ("source", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigRadiusCmd.setStatus('mandatory')
sysConfigRadiusStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("processing", 2), ("timeout", 3), ("error", 4), ("complete", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigRadiusStatus.setStatus('mandatory')
sysAbsoluteCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAbsoluteCurrentTime.setStatus('mandatory')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-op", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysLoadName = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoadName.setStatus('mandatory')
sysAuthPreference = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-op", 1), ("local-first", 2), ("remote-first", 3), ("remote-no", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuthPreference.setStatus('mandatory')
sysSPROM = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 9, 11))
sysSPROMSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSPROMSerialNumber.setStatus('mandatory')
sysSPROMOptions1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSPROMOptions1.setStatus('mandatory')
sysSPROMOptions2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSPROMOptions2.setStatus('mandatory')
sysSPROMCountries1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSPROMCountries1.setStatus('mandatory')
resetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 9, 12))
resetStatEther = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStatEther.setStatus('mandatory')
resetStatWAN = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStatWAN.setStatus('mandatory')
resetStatAll = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStatAll.setStatus('mandatory')
sysLastRestartReason = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 60, 61, 62, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 129, 130, 131, 135, 136, 140, 145, 146, 150, 151, 152, 153, 154, 160, 161, 165, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 210, 211, 220, 221, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 320, 321, 330, 381, 382, 383, 384, 385, 400, 550, 512, 767, 768, 800, 801, 999, 1001, 1002, 1003, 1005, 1006, 1007, 2001, 2002, 2010, 2022, 2100, 2101, 3001, 3002, 3003, 4000, 4100, 9998, 9999))).clone(namedValues=NamedValues(("fatalAssert", 1), ("fatalPoolsNoBuffer", 2), ("fatalProfileBad", 3), ("fatalSwitchTypeBad", 4), ("fatalLif", 5), ("fatalLcdError", 6), ("fatalIsacTimeout", 7), ("fatalSCCSpuriousInterrupt", 8), ("fatalExecInvalidSwitch", 9), ("fatalExecNoMailDesc", 10), ("fatalExecNoMailPoll", 11), ("fatalExecNoTask", 12), ("fatalExecNoTimer", 13), ("fataExecNoTimerPool", 14), ("fatalExecWaitInCtricalSection", 15), ("fatalDspDead", 16), ("fatalDspProtocolError", 17), ("fatalDspInternalError", 18), ("fatalDspLossOfSync", 19), ("fatalDspUnUsed", 20), ("fatalDDDDead", 21), ("fatalDDDProtocolError", 22), ("fatalX25Buffers", 23), ("fatalX25Init", 24), ("fatalX25Stack", 25), ("fatalZeroMemoryAlloc", 27), ("fatalNegativeMemoryAllocate", 28), ("fatalTaskLoop", 29), ("fatalMemcpyTooLarge", 30), ("fatalMemcpyNoMagic", 31), ("fatalMemcpyWrongMagic", 32), ("fatalMemcoyBadStart", 33), ("fatalIDECTimeout", 34), ("fatalExecRestricted", 35), ("fatalStackOverflow", 36), ("fatalDRAMCard", 37), ("fatalMbufPanic", 38), ("fatalNoPriority2Task", 39), ("fatalProtectionFault", 40), ("fatalClipping", 41), ("fatalReadyHangFault", 42), ("fatalExcessPostCompl", 43), ("fatalWriteProtect", 44), ("fatalPureVirtual", 45), ("fatalATMSVC", 46), ("fatalFRSVC", 47), ("fatalInterruptCode", 48), ("fatalLinkedListCorruption", 55), ("fatalBadPower", 60), ("fatalWatchdogTimeout", 61), ("fatalUnexplainedNMI", 62), ("fatalPrimarySelected", 98), ("fatalOperatorReset", 99), ("fatalSystemUp", 100), ("warningBufferInUse", 101), ("warningBufferWrongPool", 102), ("warningBufferWrongHeap", 103), ("warningBufferNotMemAlloc", 104), ("warningBufferBadMemAlloc", 105), ("warningBufferBogusPool", 106), ("warningBufferBogusHeap", 107), ("warningBufferNegativeMemalloc", 108), ("warningBufferZeroMemalloc", 109), ("warningBufferBoundary", 110), ("warningBufferTooBig", 111), ("warningBufferNull", 112), ("warningBufferSegmentCountZero", 113), ("warningBufferTrailerMagic", 114), ("warningBufferTrailerBuffer", 115), ("warningBufferTrailerLength", 116), ("warningBufferTrailerUserMagic", 117), ("warningBufferWriteAfterFree", 118), ("warningBufferNotInUse", 119), ("warningBufferMemcpyMagic", 120), ("warningBufferMemcpyMagicNext", 121), ("warningBufferNoExtraDRAM", 129), ("errprPPPAsuncBufferInUse", 130), ("warningIpcpIpLookup", 131), ("warningBadChunk", 135), ("warningUnexpectedIF", 136), ("warningNoTimers", 140), ("warningLCDAllocFailure", 145), ("warningLCDNonSense", 146), ("warningMemcpyTooLarge", 150), ("warningMemcpyNoMagic", 151), ("warningMemcpyWrongMagic", 152), ("warningMemcpyBadStart", 153), ("warningWANBufferLeak", 154), ("warningTermSrvState", 160), ("warningTermSrvSemaphore", 161), ("warningTelnetFreeDrv", 165), ("warningSTACTimeout", 170), ("warningSTACDataNotOwned", 171), ("warningExecFailure", 175), ("warningExecNoMailbox", 177), ("warningExecNoResources", 178), ("warningUnexpected", 179), ("warningChannelMapStuck", 180), ("warningChannelDisplayStuck", 181), ("warningNewCallNoDiscRequest", 182), ("warningNewCallNoDiscResp", 183), ("warningDisconnectRequestDropped", 184), ("warningSpyderBuffer", 185), ("warningSpyderDesc", 186), ("warningSpyderLoseChannel", 187), ("warningHscxSlowRelay", 188), ("warningTcpSbcontTooBig", 190), ("warningTcpSequenceGap", 191), ("warningTcpTooMuchData", 192), ("warningTcpTooMuchWrite", 193), ("warningTcpBadOptions", 194), ("warningLmodSlotDown", 195), ("warningLmodDspDown", 196), ("warningLmodDspmodemDown", 197), ("warningTcpXmitLooping", 198), ("warningOspfFatal", 200), ("warningOspfWarn", 201), ("warningBriJumperNotPresent", 210), ("warningBriJumperConfiguration", 211), ("infoCardBounced", 220), ("infoCardDown", 221), ("warningTacacsplusBase", 300), ("warningTacacsplusPointerInconsistency", 301), ("warningTacacsplusIndexInconsistency", 302), ("warningTacacsplusTcpInconsistency", 303), ("warningTacacsplusTcpOutofrangesocket", 304), ("warningTacacsplusSocketMismatch", 305), ("warningTacacsplusUnexpectedAuthState", 306), ("warningTacacsplusMax", 309), ("warningCidrWrongTree", 310), ("warningCidrNoMem", 311), ("warningCidrBusy", 312), ("warningCidrNonempty", 313), ("warningCidrDupDelete", 314), ("warningSauthWrongInfo", 320), ("warningSauthBadAddr", 321), ("warningGdbProtectionFault", 330), ("warningInFilterList", 381), ("warningNoCountInFilterList", 382), ("warningMismatchCountFilterList", 383), ("warningCdtUnprotectedAccess", 384), ("infoSystemResetOccurred", 385), ("warningBadPowerSupply", 400), ("warningEthernetNoTxBuf", 550), ("warningDspCrashMin", 512), ("warningDspCrashMax", 767), ("warningDspWrongSlot", 768), ("warningUnalignedAccess", 800), ("warningH323NoResources", 801), ("warningExecRestricted", 999), ("warningEthernetCuBusy", 1001), ("warningEthernetAckFailure", 1002), ("warningEthernetReset", 1003), ("warningEthernetCuActive", 1005), ("warningEthernetWaitScb", 1006), ("warningEthernetNoMACAddress", 1007), ("warningBaeepromChange", 2001), ("warningBaeepromImageMismatch", 2002), ("warningFlashTypeBad", 2010), ("warningMaxiopLoadFailure", 2022), ("warningPrimaryHWsetupFailed", 2100), ("warningSecondaryHWsetupFailed", 2101), ("warningIpxsapFilterMagic", 3001), ("warningIpxsapFilterCountZero", 3002), ("warningIpxsapFilterCountMismatch", 3003), ("warningModemTxChannelStuck", 4000), ("warningModemTxChannelRecovered", 4100), ("notApplicable", 9998), ("unknown", 9999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastRestartReason.setStatus('mandatory')
sysConfigChange = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigChange.setStatus('mandatory')
sysConfigFlash = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 9, 15))
fatalLogTable = MibTable((1, 3, 6, 1, 4, 1, 529, 9, 16), )
if mibBuilder.loadTexts: fatalLogTable.setStatus('mandatory')
fatalLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 9, 16, 1), ).setIndexNames((0, "ASCEND-MIB", "fatalLogIndex"))
if mibBuilder.loadTexts: fatalLogTableEntry.setStatus('mandatory')
fatalLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogIndex.setStatus('mandatory')
fatalLogSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogSlotIndex.setStatus('mandatory')
fatalLogSoftwareVerion = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogSoftwareVerion.setStatus('mandatory')
fatalLogUserprofile = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogUserprofile.setStatus('mandatory')
fatalLogLoadName = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogLoadName.setStatus('mandatory')
fatalLogLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogLocation.setStatus('mandatory')
fatalLogReason = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 60, 61, 62, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 129, 130, 131, 135, 136, 140, 145, 146, 150, 151, 152, 153, 154, 160, 161, 165, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 210, 211, 220, 221, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 320, 321, 330, 381, 382, 383, 384, 385, 400, 550, 512, 767, 768, 800, 801, 999, 1001, 1002, 1003, 1005, 1006, 1007, 2001, 2002, 2010, 2022, 2100, 2101, 3001, 3002, 3003, 4000, 4100, 9998, 9999))).clone(namedValues=NamedValues(("fatalAssert", 1), ("fatalPoolsNoBuffer", 2), ("fatalProfileBad", 3), ("fatalSwitchTypeBad", 4), ("fatalLif", 5), ("fatalLcdError", 6), ("fatalIsacTimeout", 7), ("fatalSCCSpuriousInterrupt", 8), ("fatalExecInvalidSwitch", 9), ("fatalExecNoMailDesc", 10), ("fatalExecNoMailPoll", 11), ("fatalExecNoTask", 12), ("fatalExecNoTimer", 13), ("fataExecNoTimerPool", 14), ("fatalExecWaitInCtricalSection", 15), ("fatalDspDead", 16), ("fatalDspProtocolError", 17), ("fatalDspInternalError", 18), ("fatalDspLossOfSync", 19), ("fatalDspUnUsed", 20), ("fatalDDDDead", 21), ("fatalDDDProtocolError", 22), ("fatalX25Buffers", 23), ("fatalX25Init", 24), ("fatalX25Stack", 25), ("fatalZeroMemoryAlloc", 27), ("fatalNegativeMemoryAllocate", 28), ("fatalTaskLoop", 29), ("fatalMemcpyTooLarge", 30), ("fatalMemcpyNoMagic", 31), ("fatalMemcpyWrongMagic", 32), ("fatalMemcoyBadStart", 33), ("fatalIDECTimeout", 34), ("fatalExecRestricted", 35), ("fatalStackOverflow", 36), ("fatalDRAMCard", 37), ("fatalMbufPanic", 38), ("fatalNoPriority2Task", 39), ("fatalProtectionFault", 40), ("fatalClipping", 41), ("fatalReadyHangFault", 42), ("fatalExcessPostCompl", 43), ("fatalWriteProtect", 44), ("fatalPureVirtual", 45), ("fatalATMSVC", 46), ("fatalFRSVC", 47), ("fatalInterruptCode", 48), ("fatalLinkedListCorruption", 55), ("fatalBadPower", 60), ("fatalWatchdogTimeout", 61), ("fatalUnexplainedNMI", 62), ("fatalPrimarySelected", 98), ("fatalOperatorReset", 99), ("fatalSystemUp", 100), ("warningBufferInUse", 101), ("warningBufferWrongPool", 102), ("warningBufferWrongHeap", 103), ("warningBufferNotMemAlloc", 104), ("warningBufferBadMemAlloc", 105), ("warningBufferBogusPool", 106), ("warningBufferBogusHeap", 107), ("warningBufferNegativeMemalloc", 108), ("warningBufferZeroMemalloc", 109), ("warningBufferBoundary", 110), ("warningBufferTooBig", 111), ("warningBufferNull", 112), ("warningBufferSegmentCountZero", 113), ("warningBufferTrailerMagic", 114), ("warningBufferTrailerBuffer", 115), ("warningBufferTrailerLength", 116), ("warningBufferTrailerUserMagic", 117), ("warningBufferWriteAfterFree", 118), ("warningBufferNotInUse", 119), ("warningBufferMemcpyMagic", 120), ("warningBufferMemcpyMagicNext", 121), ("warningBufferNoExtraDRAM", 129), ("errprPPPAsuncBufferInUse", 130), ("warningIpcpIpLookup", 131), ("warningBadChunk", 135), ("warningUnexpectedIF", 136), ("warningNoTimers", 140), ("warningLCDAllocFailure", 145), ("warningLCDNonSense", 146), ("warningMemcpyTooLarge", 150), ("warningMemcpyNoMagic", 151), ("warningMemcpyWrongMagic", 152), ("warningMemcpyBadStart", 153), ("warningWANBufferLeak", 154), ("warningTermSrvState", 160), ("warningTermSrvSemaphore", 161), ("warningTelnetFreeDrv", 165), ("warningSTACTimeout", 170), ("warningSTACDataNotOwned", 171), ("warningExecFailure", 175), ("warningExecNoMailbox", 177), ("warningExecNoResources", 178), ("warningUnexpected", 179), ("warningChannelMapStuck", 180), ("warningChannelDisplayStuck", 181), ("warningNewCallNoDiscRequest", 182), ("warningNewCallNoDiscResp", 183), ("warningDisconnectRequestDropped", 184), ("warningSpyderBuffer", 185), ("warningSpyderDesc", 186), ("warningSpyderLoseChannel", 187), ("warningHscxSlowRelay", 188), ("warningTcpSbcontTooBig", 190), ("warningTcpSequenceGap", 191), ("warningTcpTooMuchData", 192), ("warningTcpTooMuchWrite", 193), ("warningTcpBadOptions", 194), ("warningLmodSlotDown", 195), ("warningLmodDspDown", 196), ("warningLmodDspmodemDown", 197), ("warningTcpXmitLooping", 198), ("warningOspfFatal", 200), ("warningOspfWarn", 201), ("warningBriJumperNotPresent", 210), ("warningBriJumperConfiguration", 211), ("infoCardBounced", 220), ("infoCardDown", 221), ("warningTacacsplusBase", 300), ("warningTacacsplusPointerInconsistency", 301), ("warningTacacsplusIndexInconsistency", 302), ("warningTacacsplusTcpInconsistency", 303), ("warningTacacsplusTcpOutofrangesocket", 304), ("warningTacacsplusSocketMismatch", 305), ("warningTacacsplusUnexpectedAuthState", 306), ("warningTacacsplusMax", 309), ("warningCidrWrongTree", 310), ("warningCidrNoMem", 311), ("warningCidrBusy", 312), ("warningCidrNonempty", 313), ("warningCidrDupDelete", 314), ("warningSauthWrongInfo", 320), ("warningSauthBadAddr", 321), ("warningGdbProtectionFault", 330), ("warningInFilterList", 381), ("warningNoCountInFilterList", 382), ("warningMismatchCountFilterList", 383), ("warningCdtUnprotectedAccess", 384), ("infoSystemResetOccurred", 385), ("warningBadPowerSupply", 400), ("warningEthernetNoTxBuf", 550), ("warningDspCrashMin", 512), ("warningDspCrashMax", 767), ("warningDspWrongSlot", 768), ("warningUnalignedAccess", 800), ("warningH323NoResources", 801), ("warningExecRestricted", 999), ("warningEthernetCuBusy", 1001), ("warningEthernetAckFailure", 1002), ("warningEthernetReset", 1003), ("warningEthernetCuActive", 1005), ("warningEthernetWaitScb", 1006), ("warningEthernetNoMACAddress", 1007), ("warningBaeepromChange", 2001), ("warningBaeepromImageMismatch", 2002), ("warningFlashTypeBad", 2010), ("warningMaxiopLoadFailure", 2022), ("warningPrimaryHWsetupFailed", 2100), ("warningSecondaryHWsetupFailed", 2101), ("warningIpxsapFilterMagic", 3001), ("warningIpxsapFilterCountZero", 3002), ("warningIpxsapFilterCountMismatch", 3003), ("warningModemTxChannelStuck", 4000), ("warningModemTxChannelRecovered", 4100), ("notApplicable", 9998), ("unknown", 9999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogReason.setStatus('mandatory')
fatalLogAbsoluteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 9, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalLogAbsoluteTime.setStatus('mandatory')
sysConfigFlashCmd = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copyPCMCIAtoInternal", 1), ("copyInternalToPCMCIA", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigFlashCmd.setStatus('mandatory')
sysConfigFlashCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("inProgress", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigFlashCopyStatus.setStatus('mandatory')
sysConfigInternalFlashImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 15, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigInternalFlashImageVersion.setStatus('mandatory')
sysConfigPCMCIAFlashImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 529, 9, 15, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigPCMCIAFlashImageVersion.setStatus('mandatory')
mibinternetProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 1))
mibframeRelayProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 2))
mibanswerProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 3))
mibdS3NetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 4))
mibuds3NetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 5))
mibcadslNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 6))
mibdadslNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 7))
mibsdslNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 8))
mibvdslNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 9))
mibdmtAlDslNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 10))
miboc3AtmNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 11))
miblimSparingConfigProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 12))
mibds3AtmNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 13))
mibhdsl2NetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 14))
mibe3AtmNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 15))
mibredundancyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 16))
mibredundancyStatsProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 17))
mibBuilder.exportSymbols("ASCEND-MIB", mibe3AtmNetworkProfile=mibe3AtmNetworkProfile, atmpGroup=atmpGroup, hostTypeQuad=hostTypeQuad, dslPipeSdslCoe=dslPipeSdslCoe, consoleType=consoleType, mibdS3NetworkProfile=mibdS3NetworkProfile, callStatusGroup=callStatusGroup, doBegEndRemoteLB=doBegEndRemoteLB, sysSPROMCountries1=sysSPROMCountries1, consoleEntry=consoleEntry, doEntry=doEntry, max=max, pipe50LS56=pipe50LS56, consoleNumber=consoleNumber, sysSecsSinceStartup=sysSecsSinceStartup, sysConfigTftp=sysConfigTftp, sysConfigTftpFilename=sysConfigTftpFilename, dslPipe2S=dslPipe2S, max200=max200, hostStatusChannels=hostStatusChannels, max4002=max4002, voipGroup=voipGroup, max4004=max4004, mibds3AtmNetworkProfile=mibds3AtmNetworkProfile, resetStatWAN=resetStatWAN, sysConfigFlash=sysConfigFlash, fatalLogTable=fatalLogTable, hostTypeAim6=hostTypeAim6, fatalLogTableEntry=fatalLogTableEntry, pipe130T1=pipe130T1, miboc3AtmNetworkProfile=miboc3AtmNetworkProfile, console=console, pipe130N56=pipe130N56, sparingGroup=sparingGroup, doSlotIndex=doSlotIndex, fatalLogAbsoluteTime=fatalLogAbsoluteTime, mibanswerProfile=mibanswerProfile, mibdadslNetworkProfile=mibdadslNetworkProfile, consoleTable=consoleTable, hostStatusDialNum=hostStatusDialNum, slots=slots, mibvdslNetworkProfile=mibvdslNetworkProfile, flashGroup=flashGroup, lanTypeAny=lanTypeAny, consoleIndex=consoleIndex, sysReset=sysReset, fatalLogIndex=fatalLogIndex, configuration=configuration, max_tnt=max_tnt, lanTypeEtherData=lanTypeEtherData, consoleIf=consoleIf, hostStatus=hostStatus, multiShelf=multiShelf, sysConfigFlashCmd=sysConfigFlashCmd, max3000=max3000, doExtendBW=doExtendBW, pipe400=pipe400, mgGroup=mgGroup, sysSPROMOptions2=sysSPROMOptions2, sysLastRestartReason=sysLastRestartReason, fatalLogSoftwareVerion=fatalLogSoftwareVerion, advancedAgent=advancedAgent, apx_8000=apx_8000, pipeline=pipeline, hostStatusCallMgm=hostStatusCallMgm, cltmGroup=cltmGroup, DisplayString=DisplayString, fatalLogReason=fatalLogReason, dslPipeS=dslPipeS, systemStatusGroup=systemStatusGroup, hostStatusSlotIndex=hostStatusSlotIndex, hostStatusItemIndex=hostStatusItemIndex, lanModemGroup=lanModemGroup, doResynchronize=doResynchronize, hostStatusDataSvc=hostStatusDataSvc, sysConfigTftpStatus=sysConfigTftpStatus, pipe85=pipe85, cvmax100=cvmax100, dslPipeAdslCoeC=dslPipeAdslCoeC, hostTypeAim2=hostTypeAim2, hostStatusLocalName=hostStatusLocalName, mibredundancyStatsProfile=mibredundancyStatsProfile, products=products, asgGroup=asgGroup, dslTnt=dslTnt, firewallGroup=firewallGroup, doItemIndex=doItemIndex, hostStatusTable=hostStatusTable, sysAuthPreference=sysAuthPreference, sysConfigInternalFlashImageVersion=sysConfigInternalFlashImageVersion, sysSPROMSerialNumber=sysSPROMSerialNumber, dslmax20=dslmax20, mibsdslNetworkProfile=mibsdslNetworkProfile, stinger_10=stinger_10, sysConfigTftpParameter=sysConfigTftpParameter, terminator=terminator, hostStatusDuration=hostStatusDuration, max1800=max1800, doContractBW=doContractBW, wanDialoutPkt=wanDialoutPkt, powerSupply=powerSupply, resetStatEther=resetStatEther, pipe25Fx=pipe25Fx, lanTypeEthernet=lanTypeEthernet, aqueduct=aqueduct, miblimSparingConfigProfile=miblimSparingConfigProfile, doHangUp=doHangUp, consoleSecurity=consoleSecurity, dslPipeAdmt=dslPipeAdmt, sessionStatusGroup=sessionStatusGroup, sysConfigPCMCIAFlashImageVersion=sysConfigPCMCIAFlashImageVersion, sysLoadName=sysLoadName, max4000=max4000, pipe220=pipe220, resetStatAll=resetStatAll, doBegEndBERT=doBegEndBERT, miscGroup=miscGroup, pipe130V35=pipe130V35, pipe25=pipe25, dslPipeAdslCoeD=dslPipeAdslCoeD, ascend=ascend, spipe155T1=spipe155T1, pipe25Px=pipe25Px, multiband=multiband, mibhdsl2NetworkProfile=mibhdsl2NetworkProfile, mibdmtAlDslNetworkProfile=mibdmtAlDslNetworkProfile, spipe95=spipe95, resetStat=resetStat, dslPipeAlctlDmt=dslPipeAlctlDmt, sysConfigRadiusCmd=sysConfigRadiusCmd, lanTypes=lanTypes, hostStatusCallState=hostStatusCallState, sysConfigTftpPort=sysConfigTftpPort, sysConfigTftpCmd=sysConfigTftpCmd, sysConfigRadiusStatus=sysConfigRadiusStatus, sysAbsoluteStartupTime=sysAbsoluteStartupTime, fatalLogUserprofile=fatalLogUserprofile, fatalLogSlotIndex=fatalLogSlotIndex, mCastGroup=mCastGroup, max800=max800, aq300=aq300, eventGroup=eventGroup, hostTypeAny=hostTypeAny, sysMibMinorRevNum=sysMibMinorRevNum, consoleSpecific=consoleSpecific, doDial=doDial, mibinternetProfile=mibinternetProfile, mibredundancyProfile=mibredundancyProfile, dslPipeSdslCoe2S=dslPipeSdslCoe2S, fatalLogLoadName=fatalLogLoadName, sysConfigChange=sysConfigChange, srvcMgmtGroup=srvcMgmtGroup, max6000=max6000, hostStatusEntry=hostStatusEntry, sysConfigRadius=sysConfigRadius, mibuds3NetworkProfile=mibuds3NetworkProfile, max2000=max2000, pipe15=pipe15, sysSPROMOptions1=sysSPROMOptions1, radiusGroup=radiusGroup, sysSPROM=sysSPROM, hostTypes=hostTypes, sysAbsoluteCurrentTime=sysAbsoluteCurrentTime, mibcadslNetworkProfile=mibcadslNetworkProfile, doAnswer=doAnswer, sysMibVersionNum=sysMibVersionNum, hostStatusCallType=hostStatusCallType, resourcesGroup=resourcesGroup, dslPipe50SdslCell=dslPipe50SdslCell, sysConfigTftpHostAddr=sysConfigTftpHostAddr, dslPipeSdslHs=dslPipeSdslHs, fatalLogLocation=fatalLogLocation, hostStatusRemName=hostStatusRemName, doGroup=doGroup, doTable=doTable, hostTypeDual=hostTypeDual, dslPipeAcap=dslPipeAcap, mibframeRelayProfile=mibframeRelayProfile, pipe50=pipe50, callLoggingGroup=callLoggingGroup, pipe75=pipe75, sysConfigFlashCopyStatus=sysConfigFlashCopyStatus)
