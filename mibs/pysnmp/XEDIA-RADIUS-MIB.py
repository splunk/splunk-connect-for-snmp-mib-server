#
# PySNMP MIB module XEDIA-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-RADIUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:36:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
radiusAccServerEntry, = mibBuilder.importSymbols("RADIUS-ACC-CLIENT-MIB", "radiusAccServerEntry")
radiusAuthServerEntry, = mibBuilder.importSymbols("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Gauge32, MibIdentifier, Counter64, IpAddress, ObjectIdentity, Counter32, Bits, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "MibIdentifier", "Counter64", "IpAddress", "ObjectIdentity", "Counter32", "Bits", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Integer32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaRadiusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 16))
if mibBuilder.loadTexts: xediaRadiusMIB.setLastUpdated('9804142200Z')
if mibBuilder.loadTexts: xediaRadiusMIB.setOrganization('Xedia Corp.')
xRadiusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1))
xRadiusConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 2))
xRadiuscObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1))
xRadiuscGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1))
xRadiuscAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2))
xRadiuscAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3))
xRadiuscGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1))
xRadiuscGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2))
xradiuscAdminAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscAdminAuthStatus.setStatus('current')
xradiuscAdminActgStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscAdminActgStatus.setStatus('current')
xradiuscDebugCmd = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 3), DisplayString().clone('rx-pkt-dump:off; tx-pkt-dump:off; error-print:off; trace-print:off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscDebugCmd.setStatus('current')
xradiuscNasId = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscNasId.setStatus('current')
xradiuscNasIP = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscNasIP.setStatus('current')
xradiuscBackgroundTimer = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(90, 86400)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscBackgroundTimer.setStatus('current')
xradiuscMaxOutstanding = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xradiuscMaxOutstanding.setStatus('current')
xradiuscOperAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthStatus.setStatus('current')
xradiuscOperActgStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgStatus.setStatus('current')
xradiuscOperNasId = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperNasId.setStatus('current')
xradiuscOperNasIP = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperNasIP.setStatus('current')
xradiuscOperGenErrors = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperGenErrors.setStatus('current')
xradiuscOperAuthQCurr = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthQCurr.setStatus('current')
xradiuscOperAuthQMax = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthQMax.setStatus('current')
xradiuscOperAuthExpected = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthExpected.setStatus('current')
xradiuscOperAuthEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthEnqueued.setStatus('current')
xradiuscOperAuthDequeued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperAuthDequeued.setStatus('current')
xradiuscOperActgQCurr = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgQCurr.setStatus('current')
xradiuscOperActgQMax = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgQMax.setStatus('current')
xradiuscOperActgExpected = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgExpected.setStatus('current')
xradiuscOperActgEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgEnqueued.setStatus('current')
xradiuscOperActgDequeued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperActgDequeued.setStatus('current')
xradiuscOperPendingListCurr = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingListCurr.setStatus('current')
xradiuscOperPendingListMax = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingListMax.setStatus('current')
xradiuscOperPendingExpected = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingExpected.setStatus('current')
xradiuscOperPendingEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingEnqueued.setStatus('current')
xradiuscOperPendingDequeued = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperPendingDequeued.setStatus('current')
xradiuscOperLastPktID = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperLastPktID.setStatus('current')
xradiuscOperNextPktID = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperNextPktID.setStatus('current')
xradiuscOperLastAuthIndex = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperLastAuthIndex.setStatus('current')
xradiuscOperLastActgIndex = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscOperLastActgIndex.setStatus('current')
xRadiuscAuthSvrTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1), )
if mibBuilder.loadTexts: xRadiuscAuthSvrTable.setStatus('current')
xRadiuscAuthSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1), )
radiusAuthServerEntry.registerAugmentions(("XEDIA-RADIUS-MIB", "xRadiuscAuthSvrEntry"))
xRadiuscAuthSvrEntry.setIndexNames(*radiusAuthServerEntry.getIndexNames())
if mibBuilder.loadTexts: xRadiuscAuthSvrEntry.setStatus('current')
xradiuscAuthSvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrIpAddress.setStatus('current')
xradiuscAuthSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrName.setStatus('current')
xradiuscAuthSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrPort.setStatus('current')
xradiuscAuthSvrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrTimeout.setStatus('current')
xradiuscAuthSvrRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrRetries.setStatus('current')
xradiuscAuthSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrPriority.setStatus('current')
xradiuscAuthSvrSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrSecretKey.setStatus('current')
xradiuscAuthSvrVendorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrVendorOffset.setStatus('current')
xradiuscAuthSvrOperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperIpAddress.setStatus('current')
xradiuscAuthSvrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("responding", 2), ("notResponding", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperState.setStatus('current')
xradiuscAuthSvrOperStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperStateChange.setStatus('current')
xradiuscAuthSvrOperBadPktIds = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperBadPktIds.setStatus('current')
xradiuscAuthSvrOperRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperRxErrors.setStatus('current')
xradiuscAuthSvrOperTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscAuthSvrOperTxErrors.setStatus('current')
xradiuscAuthSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 2, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscAuthSvrRowStatus.setStatus('current')
xRadiuscActgSvrTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1), )
if mibBuilder.loadTexts: xRadiuscActgSvrTable.setStatus('current')
xRadiuscActgSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1), )
radiusAccServerEntry.registerAugmentions(("XEDIA-RADIUS-MIB", "xRadiuscActgSvrEntry"))
xRadiuscActgSvrEntry.setIndexNames(*radiusAccServerEntry.getIndexNames())
if mibBuilder.loadTexts: xRadiuscActgSvrEntry.setStatus('current')
xradiuscActgSvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrIpAddress.setStatus('current')
xradiuscActgSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrName.setStatus('current')
xradiuscActgSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrPort.setStatus('current')
xradiuscActgSvrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrTimeout.setStatus('current')
xradiuscActgSvrRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrRetries.setStatus('current')
xradiuscActgSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrPriority.setStatus('current')
xradiuscActgSvrSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrSecretKey.setStatus('current')
xradiuscActgSvrVendorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrVendorOffset.setStatus('current')
xradiuscActgSvrOperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperIpAddress.setStatus('current')
xradiuscActgSvrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("responding", 2), ("notResponding", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperState.setStatus('current')
xradiuscActgSvrOperStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperStateChange.setStatus('current')
xradiuscActgSvrOperBadPktIds = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperBadPktIds.setStatus('current')
xradiuscActgSvrOperRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperRxErrors.setStatus('current')
xradiuscActgSvrOperTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xradiuscActgSvrOperTxErrors.setStatus('current')
xradiuscActgSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 16, 1, 1, 3, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xradiuscActgSvrRowStatus.setStatus('current')
xradiusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 1))
xradiusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 2))
xradiusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 1, 1)).setObjects(("XEDIA-RADIUS-MIB", "xradiusAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xradiusCompliance = xradiusCompliance.setStatus('current')
xradiusAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 16, 2, 2, 1)).setObjects(("XEDIA-RADIUS-MIB", "xradiuscAdminAuthStatus"), ("XEDIA-RADIUS-MIB", "xradiuscAdminActgStatus"), ("XEDIA-RADIUS-MIB", "xradiuscDebugCmd"), ("XEDIA-RADIUS-MIB", "xradiuscNasId"), ("XEDIA-RADIUS-MIB", "xradiuscNasIP"), ("XEDIA-RADIUS-MIB", "xradiuscBackgroundTimer"), ("XEDIA-RADIUS-MIB", "xradiuscMaxOutstanding"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthStatus"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgStatus"), ("XEDIA-RADIUS-MIB", "xradiuscOperNasId"), ("XEDIA-RADIUS-MIB", "xradiuscOperNasIP"), ("XEDIA-RADIUS-MIB", "xradiuscOperGenErrors"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthQCurr"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthQMax"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthExpected"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthEnqueued"), ("XEDIA-RADIUS-MIB", "xradiuscOperAuthDequeued"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgQCurr"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgQMax"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgExpected"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgEnqueued"), ("XEDIA-RADIUS-MIB", "xradiuscOperActgDequeued"), ("XEDIA-RADIUS-MIB", "xradiuscOperLastPktID"), ("XEDIA-RADIUS-MIB", "xradiuscOperNextPktID"), ("XEDIA-RADIUS-MIB", "xradiuscOperLastAuthIndex"), ("XEDIA-RADIUS-MIB", "xradiuscOperLastActgIndex"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingListCurr"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingListMax"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingExpected"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingEnqueued"), ("XEDIA-RADIUS-MIB", "xradiuscOperPendingDequeued"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrName"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrPort"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrTimeout"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrRetries"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrPriority"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrSecretKey"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrVendorOffset"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrRowStatus"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperState"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperStateChange"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperBadPktIds"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperRxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscAuthSvrOperTxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrName"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrPort"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrTimeout"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrRetries"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrPriority"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrSecretKey"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrVendorOffset"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperIpAddress"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperState"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperStateChange"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperBadPktIds"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperRxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrOperTxErrors"), ("XEDIA-RADIUS-MIB", "xradiuscActgSvrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xradiusAllGroup = xradiusAllGroup.setStatus('current')
mibBuilder.exportSymbols("XEDIA-RADIUS-MIB", xradiuscOperActgQMax=xradiuscOperActgQMax, xradiuscAuthSvrOperTxErrors=xradiuscAuthSvrOperTxErrors, xRadiusObjects=xRadiusObjects, xradiuscAuthSvrOperStateChange=xradiuscAuthSvrOperStateChange, xradiuscOperNasIP=xradiuscOperNasIP, xradiuscActgSvrTimeout=xradiuscActgSvrTimeout, xradiuscOperPendingListMax=xradiuscOperPendingListMax, xradiuscOperLastAuthIndex=xradiuscOperLastAuthIndex, xradiuscAuthSvrPriority=xradiuscAuthSvrPriority, xradiuscActgSvrOperState=xradiuscActgSvrOperState, xradiuscActgSvrVendorOffset=xradiuscActgSvrVendorOffset, xradiuscOperActgExpected=xradiuscOperActgExpected, xradiuscOperActgQCurr=xradiuscOperActgQCurr, xradiuscOperAuthQCurr=xradiuscOperAuthQCurr, xradiuscOperActgDequeued=xradiuscOperActgDequeued, xRadiuscActgSvrEntry=xRadiuscActgSvrEntry, xradiuscAuthSvrIpAddress=xradiuscAuthSvrIpAddress, xradiuscActgSvrSecretKey=xradiuscActgSvrSecretKey, xradiusCompliance=xradiusCompliance, xradiuscNasIP=xradiuscNasIP, xradiuscActgSvrPort=xradiuscActgSvrPort, xradiuscOperActgEnqueued=xradiuscOperActgEnqueued, xradiuscActgSvrOperBadPktIds=xradiuscActgSvrOperBadPktIds, xradiusAllGroup=xradiusAllGroup, xradiuscActgSvrRowStatus=xradiuscActgSvrRowStatus, xradiuscActgSvrName=xradiuscActgSvrName, xradiuscAuthSvrOperBadPktIds=xradiuscAuthSvrOperBadPktIds, xRadiuscGlobalCfg=xRadiuscGlobalCfg, xradiuscActgSvrOperRxErrors=xradiuscActgSvrOperRxErrors, xradiuscActgSvrOperIpAddress=xradiuscActgSvrOperIpAddress, xradiuscOperPendingDequeued=xradiuscOperPendingDequeued, xradiuscOperLastActgIndex=xradiuscOperLastActgIndex, xRadiuscGlobalStat=xRadiuscGlobalStat, xradiuscOperLastPktID=xradiuscOperLastPktID, xradiuscAuthSvrOperState=xradiuscAuthSvrOperState, xradiuscActgSvrOperStateChange=xradiuscActgSvrOperStateChange, xradiuscOperPendingListCurr=xradiuscOperPendingListCurr, xRadiuscAuthSvrEntry=xRadiuscAuthSvrEntry, xradiuscOperAuthExpected=xradiuscOperAuthExpected, xradiuscActgSvrOperTxErrors=xradiuscActgSvrOperTxErrors, xradiuscAuthSvrOperIpAddress=xradiuscAuthSvrOperIpAddress, xRadiuscActgSvrTable=xRadiuscActgSvrTable, xradiuscAuthSvrTimeout=xradiuscAuthSvrTimeout, xradiuscNasId=xradiuscNasId, xradiuscAdminActgStatus=xradiuscAdminActgStatus, xradiuscOperGenErrors=xradiuscOperGenErrors, xradiuscOperNextPktID=xradiuscOperNextPktID, xradiuscMaxOutstanding=xradiuscMaxOutstanding, xradiuscOperActgStatus=xradiuscOperActgStatus, xradiuscAuthSvrVendorOffset=xradiuscAuthSvrVendorOffset, xRadiuscObjects=xRadiuscObjects, xradiuscAuthSvrName=xradiuscAuthSvrName, xradiuscAuthSvrPort=xradiuscAuthSvrPort, xradiuscOperNasId=xradiuscOperNasId, xRadiuscGlobal=xRadiuscGlobal, xradiuscAdminAuthStatus=xradiuscAdminAuthStatus, xRadiuscAuthentication=xRadiuscAuthentication, xradiuscAuthSvrRetries=xradiuscAuthSvrRetries, xradiuscOperPendingExpected=xradiuscOperPendingExpected, xradiuscActgSvrPriority=xradiuscActgSvrPriority, xRadiuscAccounting=xRadiuscAccounting, xradiuscAuthSvrRowStatus=xradiuscAuthSvrRowStatus, xradiuscOperAuthQMax=xradiuscOperAuthQMax, xradiuscOperPendingEnqueued=xradiuscOperPendingEnqueued, xradiuscOperAuthStatus=xradiuscOperAuthStatus, xradiuscAuthSvrOperRxErrors=xradiuscAuthSvrOperRxErrors, xradiuscActgSvrIpAddress=xradiuscActgSvrIpAddress, xradiuscAuthSvrSecretKey=xradiuscAuthSvrSecretKey, xradiuscOperAuthEnqueued=xradiuscOperAuthEnqueued, xradiusGroups=xradiusGroups, xRadiuscAuthSvrTable=xRadiuscAuthSvrTable, PYSNMP_MODULE_ID=xediaRadiusMIB, xradiuscOperAuthDequeued=xradiuscOperAuthDequeued, xradiuscActgSvrRetries=xradiuscActgSvrRetries, xradiusCompliances=xradiusCompliances, xediaRadiusMIB=xediaRadiusMIB, xradiuscBackgroundTimer=xradiuscBackgroundTimer, xRadiusConformance=xRadiusConformance, xradiuscDebugCmd=xradiuscDebugCmd)
