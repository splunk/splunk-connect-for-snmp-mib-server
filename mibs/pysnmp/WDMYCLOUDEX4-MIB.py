#
# PySNMP MIB module WDMYCLOUDEX4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WDMYCLOUDEX4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, Counter64, NotificationType, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, enterprises, ModuleIdentity, IpAddress, MibIdentifier, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Counter64", "NotificationType", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "enterprises", "ModuleIdentity", "IpAddress", "MibIdentifier", "Bits", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wd = MibIdentifier((1, 3, 6, 1, 4, 1, 5127))
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1))
projectID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1))
modelID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1))
submodelID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1))
nasAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1))
wdmycloudex4AgentVer = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4AgentVer.setStatus('current')
wdmycloudex4SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4SoftwareVersion.setStatus('current')
wdmycloudex4HostName = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4HostName.setStatus('current')
wdmycloudex4FTPServer = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4FTPServer.setStatus('current')
wdmycloudex4NetType = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4NetType.setStatus('current')
wdmycloudex4Temperature = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4Temperature.setStatus('current')
wdmycloudex4FanStatus = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4FanStatus.setStatus('current')
wdmycloudex4VolumeTable = MibTable((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9), )
if mibBuilder.loadTexts: wdmycloudex4VolumeTable.setStatus('current')
wdmycloudex4VolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1), ).setIndexNames((0, "WDMYCLOUDEX4-MIB", "wdmycloudex4VolumeNum"))
if mibBuilder.loadTexts: wdmycloudex4VolumeEntry.setStatus('current')
wdmycloudex4VolumeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeNum.setStatus('current')
wdmycloudex4VolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeName.setStatus('current')
wdmycloudex4VolumeFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeFsType.setStatus('current')
wdmycloudex4VolumeRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeRaidLevel.setStatus('current')
wdmycloudex4VolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeSize.setStatus('current')
wdmycloudex4VolumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeFreeSpace.setStatus('current')
wdmycloudex4DiskTable = MibTable((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10), )
if mibBuilder.loadTexts: wdmycloudex4DiskTable.setStatus('current')
wdmycloudex4DiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1), ).setIndexNames((0, "WDMYCLOUDEX4-MIB", "wdmycloudex4DiskNum"))
if mibBuilder.loadTexts: wdmycloudex4DiskEntry.setStatus('current')
wdmycloudex4DiskNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskNum.setStatus('current')
wdmycloudex4DiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskVendor.setStatus('current')
wdmycloudex4DiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskModel.setStatus('current')
wdmycloudex4DiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskSerialNumber.setStatus('current')
wdmycloudex4DiskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskTemperature.setStatus('current')
wdmycloudex4DiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskCapacity.setStatus('current')
wdmycloudex4UPSTable = MibTable((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11), )
if mibBuilder.loadTexts: wdmycloudex4UPSTable.setStatus('current')
wdmycloudex4UPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1), ).setIndexNames((0, "WDMYCLOUDEX4-MIB", "wdmycloudex4UPSNum"))
if mibBuilder.loadTexts: wdmycloudex4UPSEntry.setStatus('current')
wdmycloudex4UPSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSNum.setStatus('current')
wdmycloudex4UPSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSMode.setStatus('current')
wdmycloudex4UPSManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSManufacturer.setStatus('current')
wdmycloudex4UPSProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSProduct.setStatus('current')
wdmycloudex4UPSBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSBatteryCharge.setStatus('current')
wdmycloudex4UPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSStatus.setStatus('current')
notifyEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200))
notifyPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 1))
if mibBuilder.loadTexts: notifyPasswdChanged.setStatus('current')
notifyFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 2))
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setStatus('current')
notifyNetworkChanged = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 3))
if mibBuilder.loadTexts: notifyNetworkChanged.setStatus('current')
notifyTemperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 4))
if mibBuilder.loadTexts: notifyTemperatureExceeded.setStatus('current')
mibBuilder.exportSymbols("WDMYCLOUDEX4-MIB", wdmycloudex4UPSStatus=wdmycloudex4UPSStatus, wdmycloudex4HostName=wdmycloudex4HostName, submodelID=submodelID, notifyPasswdChanged=notifyPasswdChanged, wdmycloudex4UPSNum=wdmycloudex4UPSNum, wdmycloudex4VolumeFsType=wdmycloudex4VolumeFsType, wdmycloudex4VolumeName=wdmycloudex4VolumeName, wdmycloudex4VolumeNum=wdmycloudex4VolumeNum, wdmycloudex4VolumeSize=wdmycloudex4VolumeSize, wdmycloudex4DiskSerialNumber=wdmycloudex4DiskSerialNumber, wdmycloudex4DiskCapacity=wdmycloudex4DiskCapacity, notifyTemperatureExceeded=notifyTemperatureExceeded, wdmycloudex4UPSManufacturer=wdmycloudex4UPSManufacturer, wdmycloudex4UPSBatteryCharge=wdmycloudex4UPSBatteryCharge, wdmycloudex4DiskModel=wdmycloudex4DiskModel, wd=wd, wdmycloudex4NetType=wdmycloudex4NetType, projectID=projectID, notifyNetworkChanged=notifyNetworkChanged, wdmycloudex4UPSTable=wdmycloudex4UPSTable, wdmycloudex4VolumeFreeSpace=wdmycloudex4VolumeFreeSpace, wdmycloudex4UPSEntry=wdmycloudex4UPSEntry, wdmycloudex4DiskEntry=wdmycloudex4DiskEntry, wdmycloudex4DiskNum=wdmycloudex4DiskNum, wdmycloudex4FanStatus=wdmycloudex4FanStatus, wdmycloudex4VolumeEntry=wdmycloudex4VolumeEntry, wdmycloudex4UPSProduct=wdmycloudex4UPSProduct, wdmycloudex4UPSMode=wdmycloudex4UPSMode, wdmycloudex4AgentVer=wdmycloudex4AgentVer, wdmycloudex4FTPServer=wdmycloudex4FTPServer, notifyFirmwareUpgraded=notifyFirmwareUpgraded, notifyEvts=notifyEvts, wdmycloudex4Temperature=wdmycloudex4Temperature, productID=productID, wdmycloudex4SoftwareVersion=wdmycloudex4SoftwareVersion, wdmycloudex4DiskTable=wdmycloudex4DiskTable, nasAgent=nasAgent, modelID=modelID, wdmycloudex4DiskVendor=wdmycloudex4DiskVendor, wdmycloudex4DiskTemperature=wdmycloudex4DiskTemperature, wdmycloudex4VolumeTable=wdmycloudex4VolumeTable, wdmycloudex4VolumeRaidLevel=wdmycloudex4VolumeRaidLevel)
