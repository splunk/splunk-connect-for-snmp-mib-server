#
# PySNMP MIB module GDSFrameRelay-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDSFrameRelay-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, NotificationType, ModuleIdentity, iso, Integer32, TimeTicks, Gauge32, Unsigned32, Counter64, IpAddress, MibIdentifier, enterprises, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "NotificationType", "ModuleIdentity", "iso", "Integer32", "TimeTicks", "Gauge32", "Unsigned32", "Counter64", "IpAddress", "MibIdentifier", "enterprises", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gds = MibIdentifier((1, 3, 6, 1, 4, 1, 1955))
seriesfr = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5))
is_GDS_frame_relay_device5 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5)).setLabel("is-GDS-frame-relay-device5")
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1))
frame_relay = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2)).setLabel("frame-relay")
configure = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3))
uVersion_Strings = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1)).setLabel("uVersion-Strings")
uMain_HW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uMain-HW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uMain_HW_Version.setStatus('mandatory')
uComm_HW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uComm-HW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uComm_HW_Version.setStatus('mandatory')
uMain_SW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uMain-SW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uMain_SW_Version.setStatus('mandatory')
uComm_SW_Version = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uComm-SW-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: uComm_SW_Version.setStatus('mandatory')
uAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uAlgorithm.setStatus('mandatory')
uAccess_Table = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uAccess-Table").setMaxAccess("readonly")
if mibBuilder.loadTexts: uAccess_Table.setStatus('mandatory')
uConfigured = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 2))
uOwn_SID = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setLabel("uOwn-SID").setMaxAccess("readonly")
if mibBuilder.loadTexts: uOwn_SID.setStatus('mandatory')
uDynamic = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3))
uCurrent_Date = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setLabel("uCurrent-Date").setMaxAccess("readwrite")
if mibBuilder.loadTexts: uCurrent_Date.setStatus('mandatory')
uCurrent_Time = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setLabel("uCurrent-Time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: uCurrent_Time.setStatus('mandatory')
uDevice_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("test-empty", 2), ("test-loaded", 3), ("failure", 4), ("fail-cipher-chip", 5), ("fail-lock-open", 6), ("fail-lock-open-and-cipher-chip", 7)))).setLabel("uDevice-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uDevice_State.setStatus('mandatory')
uComms_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("booting", 1), ("encrypting", 2), ("not-encrypting", 3), ("failure", 4)))).setLabel("uComms-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uComms_State.setStatus('mandatory')
uNMS_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("read-only", 2), ("read-write", 3)))).setLabel("uNMS-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uNMS_State.setStatus('mandatory')
uSM_State = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("removed", 2), ("failure", 3)))).setLabel("uSM-State").setMaxAccess("readonly")
if mibBuilder.loadTexts: uSM_State.setStatus('mandatory')
uReady_Alarm_Led = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 11))).clone(namedValues=NamedValues(("red-test-mode", 1), ("green-normal", 2), ("yellow-self-testing", 3), ("flashing-red-alarm", 9), ("flashing-yellow-user-logged-in", 11)))).setLabel("uReady-Alarm-Led").setMaxAccess("readonly")
if mibBuilder.loadTexts: uReady_Alarm_Led.setStatus('mandatory')
uBackground = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4))
uRAG_tests = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4, 1), Counter32()).setLabel("uRAG-tests").setMaxAccess("readonly")
if mibBuilder.loadTexts: uRAG_tests.setStatus('mandatory')
uRAG_fails = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4, 2), Counter32()).setLabel("uRAG-fails").setMaxAccess("readonly")
if mibBuilder.loadTexts: uRAG_fails.setStatus('mandatory')
uRAG_threshold = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 1, 4, 3), Counter32()).setLabel("uRAG-threshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: uRAG_threshold.setStatus('mandatory')
reset_FR_statistic_counters = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("reset-FR-statistic-counters").setMaxAccess("readwrite")
if mibBuilder.loadTexts: reset_FR_statistic_counters.setStatus('mandatory')
fR_Traffic_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2), ).setLabel("fR-Traffic-Table")
if mibBuilder.loadTexts: fR_Traffic_Table.setStatus('mandatory')
fR_Traffic_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1), ).setLabel("fR-Traffic-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "frPort-Index"))
if mibBuilder.loadTexts: fR_Traffic_Entry.setStatus('mandatory')
frPort_Index = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 1), Integer32()).setLabel("frPort-Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: frPort_Index.setStatus('mandatory')
frPort_Type = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plain-port", 1), ("cipher-port", 2)))).setLabel("frPort-Type").setMaxAccess("readonly")
if mibBuilder.loadTexts: frPort_Type.setStatus('mandatory')
frGood_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 3), Counter32()).setLabel("frGood-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frGood_Frames.setStatus('mandatory')
frBad_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 4), Counter32()).setLabel("frBad-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frBad_Frames.setStatus('mandatory')
frInactive_DLCI = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 5), Counter32()).setLabel("frInactive-DLCI").setMaxAccess("readonly")
if mibBuilder.loadTexts: frInactive_DLCI.setStatus('mandatory')
frReceived_FECN = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 6), Counter32()).setLabel("frReceived-FECN").setMaxAccess("readonly")
if mibBuilder.loadTexts: frReceived_FECN.setStatus('mandatory')
frReceived_BECN = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 7), Counter32()).setLabel("frReceived-BECN").setMaxAccess("readonly")
if mibBuilder.loadTexts: frReceived_BECN.setStatus('mandatory')
frSent_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 8), Counter32()).setLabel("frSent-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frSent_Frames.setStatus('mandatory')
frDropped_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 2, 1, 9), Counter32()).setLabel("frDropped-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frDropped_Frames.setStatus('mandatory')
fR_RX_Err_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3), ).setLabel("fR-RX-Err-Table")
if mibBuilder.loadTexts: fR_RX_Err_Table.setStatus('mandatory')
fR_RX_Err_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1), ).setLabel("fR-RX-Err-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "frRxErrIndex"))
if mibBuilder.loadTexts: fR_RX_Err_Entry.setStatus('mandatory')
frRxErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrIndex.setStatus('mandatory')
frRxErrShort_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 2), Counter32()).setLabel("frRxErrShort-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrShort_Frames.setStatus('mandatory')
frRxErrAborted_Frames = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 3), Counter32()).setLabel("frRxErrAborted-Frames").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrAborted_Frames.setStatus('mandatory')
frRxErrResidual_Bits = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 4), Counter32()).setLabel("frRxErrResidual-Bits").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrResidual_Bits.setStatus('mandatory')
frRxErrOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrOverruns.setStatus('mandatory')
frRxErrCRC_Errors = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 2, 3, 1, 6), Counter32()).setLabel("frRxErrCRC-Errors").setMaxAccess("readonly")
if mibBuilder.loadTexts: frRxErrCRC_Errors.setStatus('mandatory')
pi_FR_Layer1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1)).setLabel("pi-FR-Layer1")
piFRInterface_Installed = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("is-RS422", 1), ("is-V35", 2), ("is-T1", 3), ("is-E1", 4), ("is-X21", 5), ("is-undefined", 6)))).setLabel("piFRInterface-Installed").setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRInterface_Installed.setStatus('mandatory')
piFRTX_Clock_Source = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-DCE", 1), ("is-DTE", 2)))).setLabel("piFRTX-Clock-Source").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRTX_Clock_Source.setStatus('mandatory')
piFRE1_Plain_Port_Impedance = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-75-OHMS-BNC", 1), ("is-120-OHMS-D-SUB", 2)))).setLabel("piFRE1-Plain-Port-Impedance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Plain_Port_Impedance.setStatus('mandatory')
piFRE1_Cipher_Port_Impedance = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-75-OHMS-BNC", 1), ("is-120-OHMS-D-SUB", 2)))).setLabel("piFRE1-Cipher-Port-Impedance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Cipher_Port_Impedance.setStatus('mandatory')
piFRE1_Framing_Mode = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("is-unframed", 1), ("is-G704", 2)))).setLabel("piFRE1-Framing-Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Framing_Mode.setStatus('mandatory')
piFRE1_Time_Slot_Options = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all-slots-except-TS0", 1), ("all-slots-except-TS0-and-TS16", 2)))).setLabel("piFRE1-Time-Slot-Options").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRE1_Time_Slot_Options.setStatus('mandatory')
piFRE1_Time_Slots = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setLabel("piFRE1-Time-Slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRE1_Time_Slots.setStatus('mandatory')
piFRT1_Plain_Port_Pulse = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("is-CSU", 1), ("is-CSU-T1C1", 2), ("is-DSX-1-0-40m", 3), ("is-DSX-1-40-80m", 4), ("is-DSX-1-80-120m", 5), ("is-DSX-1-120-160m", 6), ("is-DSX-1-160-200m", 7)))).setLabel("piFRT1-Plain-Port-Pulse").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Plain_Port_Pulse.setStatus('mandatory')
piFRT1_Cipher_Port_Pulse = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("is-CSU", 1), ("is-CSU-T1C1", 2), ("is-DSX-1-0-40m", 3), ("is-DSX-1-40-80m", 4), ("is-DSX-1-80-120m", 5), ("is-DSX-1-120-160m", 6), ("is-DSX-1-160-200m", 7)))).setLabel("piFRT1-Cipher-Port-Pulse").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Cipher_Port_Pulse.setStatus('mandatory')
piFRT1_Framing_Mode = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("is-unframed", 1), ("is-ESF", 3), ("is-D4", 4)))).setLabel("piFRT1-Framing-Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Framing_Mode.setStatus('mandatory')
piFRT1_Time_Slot_Options = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("all-slots", 1)))).setLabel("piFRT1-Time-Slot-Options").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRT1_Time_Slot_Options.setStatus('mandatory')
piFRT1_Time_Slots = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setLabel("piFRT1-Time-Slots").setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRT1_Time_Slots.setStatus('mandatory')
pi_FR_Layer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2)).setLabel("pi-FR-Layer2")
pi_FR_Logical_Interface_Type = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setLabel("pi-FR-Logical-Interface-Type").setMaxAccess("readonly")
if mibBuilder.loadTexts: pi_FR_Logical_Interface_Type.setStatus('mandatory')
pi_FR_Max_RX_Frame = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1600, 2048, 4096))).clone(namedValues=NamedValues(("size-256-bytes", 256), ("size-512-bytes", 512), ("size-1024-bytes", 1024), ("size-1600-bytes", 1600), ("size-2048-bytes", 2048), ("size-4096-bytes", 4096)))).setLabel("pi-FR-Max-RX-Frame").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_FR_Max_RX_Frame.setStatus('mandatory')
pi_FR_Max_TX_Frame = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 1024, 1600, 2048, 4096))).clone(namedValues=NamedValues(("size-256-bytes", 256), ("size-512-bytes", 512), ("size-1024-bytes", 1024), ("size-1600-bytes", 1600), ("size-2048-bytes", 2048), ("size-4096-bytes", 4096)))).setLabel("pi-FR-Max-TX-Frame").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_FR_Max_TX_Frame.setStatus('mandatory')
pi_FR_LMI_support = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("standard-LMI", 2), ("is-ANSI-T1-617", 3), ("is-ITU-T-Q933", 4)))).setLabel("pi-FR-LMI-support").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_FR_LMI_support.setStatus('mandatory')
pi_FR_DLC_Ranges_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3), ).setLabel("pi-FR-DLC-Ranges-Table")
if mibBuilder.loadTexts: pi_FR_DLC_Ranges_Table.setStatus('mandatory')
pi_FR_DLC_Ranges_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1), ).setLabel("pi-FR-DLC-Ranges-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "piFRDLcRangeBand"))
if mibBuilder.loadTexts: pi_FR_DLC_Ranges_Entry.setStatus('mandatory')
piFRDLcRangeBand = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRDLcRangeBand.setStatus('mandatory')
piFRDLcRangeUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("pvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRDLcRangeUse.setStatus('mandatory')
piFRDLcRangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("bidirectional", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: piFRDLcRangeMode.setStatus('mandatory')
piFRDLcRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRDLcRangeStart.setStatus('mandatory')
piFRDLcRangeEnd_set_to_activate_changes = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setLabel("piFRDLcRangeEnd-set-to-activate-changes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piFRDLcRangeEnd_set_to_activate_changes.setStatus('mandatory')
piRemotePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5))
pi_Remote_Port1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1)).setLabel("pi-Remote-Port1")
pi_Remote_Port1IP_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1, 1), IpAddress()).setLabel("pi-Remote-Port1IP-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port1IP_Address.setStatus('mandatory')
pi_Remote_Port1Subnet_mask = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1, 2), IpAddress()).setLabel("pi-Remote-Port1Subnet-mask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port1Subnet_mask.setStatus('mandatory')
pi_Remote_Port1Gateway_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 1, 3), IpAddress()).setLabel("pi-Remote-Port1Gateway-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port1Gateway_Address.setStatus('mandatory')
piRemotePort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 2))
pi_Remote_Port3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3)).setLabel("pi-Remote-Port3")
pi_Remote_Port3IP_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 1), IpAddress()).setLabel("pi-Remote-Port3IP-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3IP_Address.setStatus('mandatory')
pi_Remote_Port3Subnet_mask = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 2), IpAddress()).setLabel("pi-Remote-Port3Subnet-mask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3Subnet_mask.setStatus('mandatory')
pi_Remote_Port3Gateway_Address = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 3), IpAddress()).setLabel("pi-Remote-Port3Gateway-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3Gateway_Address.setStatus('mandatory')
pi_Remote_Port3Data_link_protocol = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(28))).clone(namedValues=NamedValues(("slip", 28)))).setLabel("pi-Remote-Port3Data-link-protocol").setMaxAccess("readonly")
if mibBuilder.loadTexts: pi_Remote_Port3Data_link_protocol.setStatus('mandatory')
pi_Remote_Port3Baudrate = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud-2400", 1), ("baud-4800", 2), ("baud-9600", 3), ("baud-19200", 4), ("baud-38400", 5)))).setLabel("pi-Remote-Port3Baudrate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pi_Remote_Port3Baudrate.setStatus('mandatory')
piApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6))
pi_App_DLC_Cipher_Table = MibTable((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1), ).setLabel("pi-App-DLC-Cipher-Table")
if mibBuilder.loadTexts: pi_App_DLC_Cipher_Table.setStatus('mandatory')
pi_App_DLC_Cipher_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1), ).setLabel("pi-App-DLC-Cipher-Entry").setIndexNames((0, "GDSFrameRelay-MIB", "piAppDLcCipherBand"))
if mibBuilder.loadTexts: pi_App_DLC_Cipher_Entry.setStatus('mandatory')
piAppDLcCipherBand = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: piAppDLcCipherBand.setStatus('mandatory')
piAppDLcCipherUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plain", 1), ("cipher", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piAppDLcCipherUse.setStatus('mandatory')
piAppDLcCipherStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: piAppDLcCipherStart.setStatus('mandatory')
piAppDLcCipherEnd_set_to_activate_changes = MibScalar((1, 3, 6, 1, 4, 1, 1955, 5, 5, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setLabel("piAppDLcCipherEnd-set-to-activate-changes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: piAppDLcCipherEnd_set_to_activate_changes.setStatus('mandatory')
mibBuilder.exportSymbols("GDSFrameRelay-MIB", unit=unit, pi_Remote_Port1=pi_Remote_Port1, pi_Remote_Port1Subnet_mask=pi_Remote_Port1Subnet_mask, pi_Remote_Port3IP_Address=pi_Remote_Port3IP_Address, uAccess_Table=uAccess_Table, uCurrent_Date=uCurrent_Date, uReady_Alarm_Led=uReady_Alarm_Led, reset_FR_statistic_counters=reset_FR_statistic_counters, piAppDLcCipherStart=piAppDLcCipherStart, frRxErrAborted_Frames=frRxErrAborted_Frames, uComm_SW_Version=uComm_SW_Version, uDevice_State=uDevice_State, uComms_State=uComms_State, frSent_Frames=frSent_Frames, piFRDLcRangeEnd_set_to_activate_changes=piFRDLcRangeEnd_set_to_activate_changes, pi_FR_DLC_Ranges_Entry=pi_FR_DLC_Ranges_Entry, piAppDLcCipherEnd_set_to_activate_changes=piAppDLcCipherEnd_set_to_activate_changes, uMain_SW_Version=uMain_SW_Version, piFRT1_Time_Slots=piFRT1_Time_Slots, uOwn_SID=uOwn_SID, gds=gds, piAppDLcCipherBand=piAppDLcCipherBand, piFRInterface_Installed=piFRInterface_Installed, frRxErrCRC_Errors=frRxErrCRC_Errors, piFRE1_Time_Slot_Options=piFRE1_Time_Slot_Options, pi_Remote_Port1IP_Address=pi_Remote_Port1IP_Address, frBad_Frames=frBad_Frames, piFRDLcRangeUse=piFRDLcRangeUse, pi_FR_LMI_support=pi_FR_LMI_support, pi_FR_DLC_Ranges_Table=pi_FR_DLC_Ranges_Table, pi_Remote_Port3Baudrate=pi_Remote_Port3Baudrate, piFRE1_Framing_Mode=piFRE1_Framing_Mode, frRxErrShort_Frames=frRxErrShort_Frames, pi_FR_Logical_Interface_Type=pi_FR_Logical_Interface_Type, piFRDLcRangeMode=piFRDLcRangeMode, frRxErrOverruns=frRxErrOverruns, pi_FR_Max_TX_Frame=pi_FR_Max_TX_Frame, frInactive_DLCI=frInactive_DLCI, frReceived_FECN=frReceived_FECN, piFRTX_Clock_Source=piFRTX_Clock_Source, uVersion_Strings=uVersion_Strings, uConfigured=uConfigured, piFRDLcRangeBand=piFRDLcRangeBand, frGood_Frames=frGood_Frames, piFRE1_Time_Slots=piFRE1_Time_Slots, piRemotePort2=piRemotePort2, piFRT1_Time_Slot_Options=piFRT1_Time_Slot_Options, fR_Traffic_Table=fR_Traffic_Table, frPort_Index=frPort_Index, configure=configure, fR_RX_Err_Table=fR_RX_Err_Table, pi_Remote_Port3=pi_Remote_Port3, fR_RX_Err_Entry=fR_RX_Err_Entry, uRAG_tests=uRAG_tests, pi_FR_Layer1=pi_FR_Layer1, fR_Traffic_Entry=fR_Traffic_Entry, piFRT1_Plain_Port_Pulse=piFRT1_Plain_Port_Pulse, frRxErrResidual_Bits=frRxErrResidual_Bits, frRxErrIndex=frRxErrIndex, uComm_HW_Version=uComm_HW_Version, uMain_HW_Version=uMain_HW_Version, piAppDLcCipherUse=piAppDLcCipherUse, piFRT1_Framing_Mode=piFRT1_Framing_Mode, uDynamic=uDynamic, uBackground=uBackground, uCurrent_Time=uCurrent_Time, frPort_Type=frPort_Type, piFRT1_Cipher_Port_Pulse=piFRT1_Cipher_Port_Pulse, pi_Remote_Port3Data_link_protocol=pi_Remote_Port3Data_link_protocol, piFRE1_Plain_Port_Impedance=piFRE1_Plain_Port_Impedance, pi_Remote_Port1Gateway_Address=pi_Remote_Port1Gateway_Address, frDropped_Frames=frDropped_Frames, pi_Remote_Port3Gateway_Address=pi_Remote_Port3Gateway_Address, piApplication=piApplication, pi_App_DLC_Cipher_Table=pi_App_DLC_Cipher_Table, uAlgorithm=uAlgorithm, seriesfr=seriesfr, uRAG_threshold=uRAG_threshold, pi_FR_Layer2=pi_FR_Layer2, uNMS_State=uNMS_State, uSM_State=uSM_State, frReceived_BECN=frReceived_BECN, pi_App_DLC_Cipher_Entry=pi_App_DLC_Cipher_Entry, pi_Remote_Port3Subnet_mask=pi_Remote_Port3Subnet_mask, frame_relay=frame_relay, is_GDS_frame_relay_device5=is_GDS_frame_relay_device5, piFRE1_Cipher_Port_Impedance=piFRE1_Cipher_Port_Impedance, uRAG_fails=uRAG_fails, pi_FR_Max_RX_Frame=pi_FR_Max_RX_Frame, piRemotePorts=piRemotePorts, piFRDLcRangeStart=piFRDLcRangeStart)
