#
# PySNMP MIB module BAYSTACK-IPV6-FIRST-HOP-SEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAYSTACK-IPV6-FIRST-HOP-SEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, iso, Unsigned32, IpAddress, ObjectIdentity, Counter64, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "iso", "Unsigned32", "IpAddress", "ObjectIdentity", "Counter64", "ModuleIdentity", "Gauge32")
TruthValue, TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackIpv6FirstHopSecMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 45))
bayStackIpv6FirstHopSecMib.setRevisions(('2015-04-08 00:00', '2014-03-20 00:00', '2014-01-17 00:00', '2013-11-18 00:00', '2013-10-11 00:00', '2013-08-20 00:00', '2013-05-27 00:00',))
if mibBuilder.loadTexts: bayStackIpv6FirstHopSecMib.setLastUpdated('201504080000Z')
if mibBuilder.loadTexts: bayStackIpv6FirstHopSecMib.setOrganization('Avaya')
bsIpv6FirstHopSecNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 45, 0))
bsIpv6FirstHopSecObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 45, 1))
class FhsRaGuardDeviceRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("router", 1), ("host", 2))

class FhsRaManagedConfigFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("on", 2), ("off", 3))

class FhsRaRouterPrefMax(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("high", 2), ("medium", 3), ("low", 4))

class FhsDhcpv6GuardDeviceRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("server", 1), ("client", 2))

class FhsListName(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 64)

class FhsAccessType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("allow", 1), ("deny", 2))

class FhsSbtState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("incomplete", 1), ("reachable", 2), ("stale", 3), ("down", 4))

class FhsSbtType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("static", 1), ("nd", 2), ("dhcp", 3))

bsIpv6FHSScalVar = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1))
bsIpv6FHSAdmin = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSAdmin.setStatus('current')
bsIpv6FHSRagAdmin = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagAdmin.setStatus('current')
bsIpv6FHSDhcpv6gAdmin = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gAdmin.setStatus('current')
bsIpv6FHSNdInspectAdmin = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSNdInspectAdmin.setStatus('current')
bsIpv6FHSMaxDynSbtEntries = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSMaxDynSbtEntries.setStatus('current')
bsIpv6FHSSbtReachLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 864000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSbtReachLifeTime.setStatus('current')
bsIpv6FHSSbtStaleLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(86400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSbtStaleLifeTime.setStatus('current')
bsIpv6FHSSbtDownLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(86400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSbtDownLifeTime.setStatus('current')
bsIpv6FHSSbtTblOverFlow = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSSbtTblOverFlow.setStatus('current')
bsIpv6FHSIpv6AccessListTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2), )
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListTable.setStatus('current')
bsIpv6FHSIpv6AccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSIpv6AccessListName"), (0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSIpv6AccessListPrefix"), (0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSIpv6AccessListPrefixMaskLen"))
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListEntry.setStatus('current')
bsIpv6FHSIpv6AccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1, 1), FhsListName())
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListName.setStatus('current')
bsIpv6FHSIpv6AccessListPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListPrefix.setStatus('current')
bsIpv6FHSIpv6AccessListPrefixMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListPrefixMaskLen.setStatus('current')
bsIpv6FHSIpv6AccessListMaskLenFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListMaskLenFrom.setStatus('current')
bsIpv6FHSIpv6AccessListMaskLenTo = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListMaskLenTo.setStatus('current')
bsIpv6FHSIpv6AccessListAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1, 6), FhsAccessType().clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListAccessType.setStatus('current')
bsIpv6FHSIpv6AccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSIpv6AccessListRowStatus.setStatus('current')
bsIpv6FHSMacAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 3), )
if mibBuilder.loadTexts: bsIpv6FHSMacAccessListTable.setStatus('current')
bsIpv6FHSMacAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 3, 3), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSMacAccessListName"), (0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSMacAccessListMac"))
if mibBuilder.loadTexts: bsIpv6FHSMacAccessListEntry.setStatus('current')
bsIpv6FHSMacAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 3, 3, 1), FhsListName())
if mibBuilder.loadTexts: bsIpv6FHSMacAccessListName.setStatus('current')
bsIpv6FHSMacAccessListMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 3, 3, 2), MacAddress())
if mibBuilder.loadTexts: bsIpv6FHSMacAccessListMac.setStatus('current')
bsIpv6FHSMacAccessListAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 3, 3, 3), FhsAccessType().clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSMacAccessListAccessType.setStatus('current')
bsIpv6FHSMacAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 3, 3, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSMacAccessListRowStatus.setStatus('current')
bsIpv6FHSPolicyPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4), )
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapTable.setStatus('current')
bsIpv6FHSPolicyPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSPolicyPortMapIfIndex"))
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapEntry.setStatus('current')
bsIpv6FHSPolicyPortMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapIfIndex.setStatus('current')
bsIpv6FHSPolicyPortMapDhcpv6gPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 2), FhsListName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapDhcpv6gPolicyName.setStatus('current')
bsIpv6FHSPolicyPortMapRagPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 3), FhsListName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapRagPolicyName.setStatus('current')
bsIpv6FHSPolicyPortMapNDAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapNDAdmin.setStatus('current')
bsIpv6FHSPolicyPortMapSbtDynLearnAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapSbtDynLearnAdmin.setStatus('current')
bsIpv6FHSPolicyPortMapTotDhcpv6PktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapTotDhcpv6PktRcv.setStatus('current')
bsIpv6FHSPolicyPortMapTotDhcpv6PktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapTotDhcpv6PktDropped.setStatus('current')
bsIpv6FHSPolicyPortMapTotRaPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapTotRaPktRcv.setStatus('current')
bsIpv6FHSPolicyPortMapTotRaPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapTotRaPktDropped.setStatus('current')
bsIpv6FHSPolicyPortMapTotNdPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapTotNdPktRcv.setStatus('current')
bsIpv6FHSPolicyPortMapTotNdPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapTotNdPktDropped.setStatus('current')
bsIpv6FHSPolicyPortMapClearDhcpGuardStats = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapClearDhcpGuardStats.setStatus('current')
bsIpv6FHSPolicyPortMapClearRaGuardStats = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapClearRaGuardStats.setStatus('current')
bsIpv6FHSPolicyPortMapClearNDInspectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapClearNDInspectStats.setStatus('current')
bsIpv6FHSPolicyPortMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 4, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSPolicyPortMapRowStatus.setStatus('current')
bsIpv6FHSDhcpv6gPolicyListTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5), )
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gPolicyListTable.setStatus('current')
bsIpv6FHSDhcpv6gPolicyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSDhcpv6gPolicyName"))
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gPolicyListEntry.setStatus('current')
bsIpv6FHSDhcpv6gPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1, 1), FhsListName())
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gPolicyName.setStatus('current')
bsIpv6FHSDhcpv6gDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1, 2), FhsDhcpv6GuardDeviceRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gDeviceRole.setStatus('current')
bsIpv6FHSDhcpv6gServerAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1, 3), FhsListName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gServerAccessListName.setStatus('current')
bsIpv6FHSDhcpv6gReplyPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1, 4), FhsListName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gReplyPrefixListName.setStatus('current')
bsIpv6FHSDhcpv6gPrefLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gPrefLimitMin.setStatus('current')
bsIpv6FHSDhcpv6gPrefLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gPrefLimitMax.setStatus('current')
bsIpv6FHSDhcpv6gPolicyListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 5, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSDhcpv6gPolicyListRowStatus.setStatus('current')
bsIpv6FHSRagPolicyListTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6), )
if mibBuilder.loadTexts: bsIpv6FHSRagPolicyListTable.setStatus('current')
bsIpv6FHSRagPolicyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSRagPolicyName"))
if mibBuilder.loadTexts: bsIpv6FHSRagPolicyListEntry.setStatus('current')
bsIpv6FHSRagPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 1), FhsListName())
if mibBuilder.loadTexts: bsIpv6FHSRagPolicyName.setStatus('current')
bsIpv6FHSRagDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 2), FhsRaGuardDeviceRole().clone('router')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagDeviceRole.setStatus('current')
bsIpv6FHSRagIpv6AccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 3), FhsListName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagIpv6AccessListName.setStatus('current')
bsIpv6FHSRagIpv6PrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 4), FhsListName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagIpv6PrefixListName.setStatus('current')
bsIpv6FHSRagMacListName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 5), FhsListName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagMacListName.setStatus('current')
bsIpv6FHSRagManagedConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 6), FhsRaManagedConfigFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagManagedConfigFlag.setStatus('current')
bsIpv6FHSRagRouterPrefMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 7), FhsRaRouterPrefMax().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagRouterPrefMax.setStatus('current')
bsIpv6FHSRagHopLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagHopLimitMin.setStatus('current')
bsIpv6FHSRagHopLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagHopLimitMax.setStatus('current')
bsIpv6FHSRagPolicyListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 6, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSRagPolicyListRowStatus.setStatus('current')
bsIpv6FHSSbtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7), )
if mibBuilder.loadTexts: bsIpv6FHSSbtTable.setStatus('current')
bsIpv6FHSSbtListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSSbtInterfaceIndex"), (0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSSbtVlan"), (0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSSbtSrcIp"))
if mibBuilder.loadTexts: bsIpv6FHSSbtListEntry.setStatus('current')
bsIpv6FHSSbtInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsIpv6FHSSbtInterfaceIndex.setStatus('current')
bsIpv6FHSSbtVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: bsIpv6FHSSbtVlan.setStatus('current')
bsIpv6FHSSbtSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: bsIpv6FHSSbtSrcIp.setStatus('current')
bsIpv6FHSSbtLinkLayerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSbtLinkLayerAddress.setStatus('current')
bsIpv6FHSSbtLearnType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 5), FhsSbtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSSbtLearnType.setStatus('current')
bsIpv6FHSSbtLearnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSSbtLearnPriority.setStatus('current')
bsIpv6FHSSbtLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 7), FhsSbtState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSSbtLearnState.setStatus('current')
bsIpv6FHSSbtLearnAge = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSSbtLearnAge.setStatus('current')
bsIpv6FHSSbtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 7, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSbtRowStatus.setStatus('current')
bsIpv6FHSSourceGuardInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 9), )
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardInterfaceConfigTable.setStatus('current')
bsIpv6FHSSourceGuardInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 9, 1), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSSourceGuardIfIndex"))
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardInterfaceConfigEntry.setStatus('current')
bsIpv6FHSSourceGuardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardIfIndex.setStatus('current')
bsIpv6FHSSourceGuardInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 9, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardInterfaceState.setStatus('current')
bsIpv6FHSSourceGuardMaxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardMaxAddr.setStatus('current')
bsIpv6FHSSourceGuardOverflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardOverflowCount.setStatus('current')
bsIpv6FHSSourceGuardClearOverflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 9, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardClearOverflowCount.setStatus('current')
bsIpv6FHSSourceGuardBindingTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 10), )
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardBindingTable.setStatus('current')
bsIpv6FHSSourceGuardBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 10, 1), ).setIndexNames((0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSSourceGuardEntryIfIndex"), (0, "BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSSourceGuardEntryIpv6Addr"))
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardBindingEntry.setStatus('current')
bsIpv6FHSSourceGuardEntryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardEntryIfIndex.setStatus('current')
bsIpv6FHSSourceGuardEntryIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 10, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIpv6FHSSourceGuardEntryIpv6Addr.setStatus('current')
bsIpv6NDTrapNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 8))
bsIpv6NDInspectionNotificationClientMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 8, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsIpv6NDInspectionNotificationClientMACAddr.setStatus('current')
bsIpv6NDInspectionNotificationMsgType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ipv6NDNS", 1), ("ipv6NDNA", 2), ("ipv6NDRS", 3), ("ipv6NDRA", 4), ("ipv6NDRedir", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsIpv6NDInspectionNotificationMsgType.setStatus('current')
bsIpv6FHSNDInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 8, 3), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsIpv6FHSNDInterfaceIndex.setStatus('current')
bsIpv6FHSNDIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 8, 4), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsIpv6FHSNDIpv6Address.setStatus('current')
bsIpv6FHSNDVlanID = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 45, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsIpv6FHSNDVlanID.setStatus('current')
bsIpv6NDSBTTableFull = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 45, 0, 1)).setObjects(("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6NDInspectionNotificationClientMACAddr"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6NDInspectionNotificationMsgType"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSNDInterfaceIndex"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSNDIpv6Address"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSNDVlanID"))
if mibBuilder.loadTexts: bsIpv6NDSBTTableFull.setStatus('current')
bsIpv6NDNotificationsUntrustedPort = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 45, 0, 2)).setObjects(("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6NDInspectionNotificationClientMACAddr"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6NDInspectionNotificationMsgType"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSNDInterfaceIndex"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSNDIpv6Address"), ("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", "bsIpv6FHSNDVlanID"))
if mibBuilder.loadTexts: bsIpv6NDNotificationsUntrustedPort.setStatus('current')
mibBuilder.exportSymbols("BAYSTACK-IPV6-FIRST-HOP-SEC-MIB", bsIpv6FHSPolicyPortMapDhcpv6gPolicyName=bsIpv6FHSPolicyPortMapDhcpv6gPolicyName, FhsSbtState=FhsSbtState, bsIpv6FHSPolicyPortMapClearDhcpGuardStats=bsIpv6FHSPolicyPortMapClearDhcpGuardStats, bsIpv6FHSMacAccessListName=bsIpv6FHSMacAccessListName, bsIpv6FHSRagPolicyName=bsIpv6FHSRagPolicyName, FhsAccessType=FhsAccessType, bsIpv6FHSRagPolicyListEntry=bsIpv6FHSRagPolicyListEntry, bsIpv6FHSSbtInterfaceIndex=bsIpv6FHSSbtInterfaceIndex, bsIpv6FHSMaxDynSbtEntries=bsIpv6FHSMaxDynSbtEntries, bsIpv6FHSMacAccessListRowStatus=bsIpv6FHSMacAccessListRowStatus, bsIpv6FHSRagDeviceRole=bsIpv6FHSRagDeviceRole, FhsListName=FhsListName, bsIpv6FHSPolicyPortMapRowStatus=bsIpv6FHSPolicyPortMapRowStatus, bsIpv6FHSSbtLearnAge=bsIpv6FHSSbtLearnAge, bsIpv6FHSMacAccessListTable=bsIpv6FHSMacAccessListTable, bsIpv6FHSRagManagedConfigFlag=bsIpv6FHSRagManagedConfigFlag, bsIpv6FHSPolicyPortMapTotDhcpv6PktRcv=bsIpv6FHSPolicyPortMapTotDhcpv6PktRcv, bsIpv6NDTrapNotificationObjects=bsIpv6NDTrapNotificationObjects, bsIpv6FHSIpv6AccessListTable=bsIpv6FHSIpv6AccessListTable, bsIpv6FHSPolicyPortMapTotDhcpv6PktDropped=bsIpv6FHSPolicyPortMapTotDhcpv6PktDropped, bsIpv6FHSPolicyPortMapClearRaGuardStats=bsIpv6FHSPolicyPortMapClearRaGuardStats, bsIpv6FHSSbtSrcIp=bsIpv6FHSSbtSrcIp, bsIpv6FHSSourceGuardMaxAddr=bsIpv6FHSSourceGuardMaxAddr, bsIpv6FHSDhcpv6gPrefLimitMin=bsIpv6FHSDhcpv6gPrefLimitMin, bsIpv6FHSDhcpv6gPolicyName=bsIpv6FHSDhcpv6gPolicyName, bsIpv6FHSSbtTable=bsIpv6FHSSbtTable, bsIpv6FHSSbtRowStatus=bsIpv6FHSSbtRowStatus, bsIpv6FHSRagPolicyListRowStatus=bsIpv6FHSRagPolicyListRowStatus, bsIpv6FHSPolicyPortMapSbtDynLearnAdmin=bsIpv6FHSPolicyPortMapSbtDynLearnAdmin, FhsRaGuardDeviceRole=FhsRaGuardDeviceRole, bsIpv6FHSSbtTblOverFlow=bsIpv6FHSSbtTblOverFlow, bsIpv6FHSPolicyPortMapRagPolicyName=bsIpv6FHSPolicyPortMapRagPolicyName, FhsDhcpv6GuardDeviceRole=FhsDhcpv6GuardDeviceRole, bsIpv6FHSSourceGuardEntryIpv6Addr=bsIpv6FHSSourceGuardEntryIpv6Addr, bsIpv6FHSPolicyPortMapTotRaPktDropped=bsIpv6FHSPolicyPortMapTotRaPktDropped, bsIpv6FHSRagIpv6PrefixListName=bsIpv6FHSRagIpv6PrefixListName, bsIpv6FHSDhcpv6gPolicyListTable=bsIpv6FHSDhcpv6gPolicyListTable, bsIpv6FHSIpv6AccessListRowStatus=bsIpv6FHSIpv6AccessListRowStatus, bsIpv6FHSSourceGuardInterfaceConfigTable=bsIpv6FHSSourceGuardInterfaceConfigTable, FhsRaManagedConfigFlag=FhsRaManagedConfigFlag, PYSNMP_MODULE_ID=bayStackIpv6FirstHopSecMib, bsIpv6FHSNDVlanID=bsIpv6FHSNDVlanID, bsIpv6FHSRagHopLimitMax=bsIpv6FHSRagHopLimitMax, bsIpv6FHSPolicyPortMapEntry=bsIpv6FHSPolicyPortMapEntry, bsIpv6FHSSourceGuardInterfaceState=bsIpv6FHSSourceGuardInterfaceState, bsIpv6NDInspectionNotificationMsgType=bsIpv6NDInspectionNotificationMsgType, bsIpv6FHSRagMacListName=bsIpv6FHSRagMacListName, bsIpv6FHSSbtLinkLayerAddress=bsIpv6FHSSbtLinkLayerAddress, bsIpv6NDNotificationsUntrustedPort=bsIpv6NDNotificationsUntrustedPort, bsIpv6FHSSbtLearnState=bsIpv6FHSSbtLearnState, bsIpv6FHSSourceGuardBindingEntry=bsIpv6FHSSourceGuardBindingEntry, bsIpv6FHSDhcpv6gAdmin=bsIpv6FHSDhcpv6gAdmin, bsIpv6FHSIpv6AccessListPrefix=bsIpv6FHSIpv6AccessListPrefix, bsIpv6FHSIpv6AccessListMaskLenFrom=bsIpv6FHSIpv6AccessListMaskLenFrom, bsIpv6FHSSbtLearnPriority=bsIpv6FHSSbtLearnPriority, bsIpv6FHSIpv6AccessListPrefixMaskLen=bsIpv6FHSIpv6AccessListPrefixMaskLen, bsIpv6FHSDhcpv6gReplyPrefixListName=bsIpv6FHSDhcpv6gReplyPrefixListName, bsIpv6FHSSourceGuardIfIndex=bsIpv6FHSSourceGuardIfIndex, FhsRaRouterPrefMax=FhsRaRouterPrefMax, bsIpv6FHSSourceGuardBindingTable=bsIpv6FHSSourceGuardBindingTable, bsIpv6FHSRagIpv6AccessListName=bsIpv6FHSRagIpv6AccessListName, bsIpv6FHSPolicyPortMapTable=bsIpv6FHSPolicyPortMapTable, bsIpv6FHSIpv6AccessListEntry=bsIpv6FHSIpv6AccessListEntry, bsIpv6FHSRagHopLimitMin=bsIpv6FHSRagHopLimitMin, bsIpv6FHSNDIpv6Address=bsIpv6FHSNDIpv6Address, bsIpv6FHSMacAccessListMac=bsIpv6FHSMacAccessListMac, bsIpv6FHSDhcpv6gPolicyListRowStatus=bsIpv6FHSDhcpv6gPolicyListRowStatus, bsIpv6FHSSourceGuardClearOverflowCount=bsIpv6FHSSourceGuardClearOverflowCount, bsIpv6FHSDhcpv6gServerAccessListName=bsIpv6FHSDhcpv6gServerAccessListName, bsIpv6FHSRagRouterPrefMax=bsIpv6FHSRagRouterPrefMax, bsIpv6FHSSbtListEntry=bsIpv6FHSSbtListEntry, bsIpv6FHSPolicyPortMapIfIndex=bsIpv6FHSPolicyPortMapIfIndex, bsIpv6FHSRagPolicyListTable=bsIpv6FHSRagPolicyListTable, bsIpv6FHSPolicyPortMapTotNdPktRcv=bsIpv6FHSPolicyPortMapTotNdPktRcv, bsIpv6FHSIpv6AccessListName=bsIpv6FHSIpv6AccessListName, bsIpv6FHSPolicyPortMapTotNdPktDropped=bsIpv6FHSPolicyPortMapTotNdPktDropped, bsIpv6FHSSbtLearnType=bsIpv6FHSSbtLearnType, bsIpv6FHSSourceGuardEntryIfIndex=bsIpv6FHSSourceGuardEntryIfIndex, bsIpv6FHSSourceGuardOverflowCount=bsIpv6FHSSourceGuardOverflowCount, bsIpv6FHSIpv6AccessListAccessType=bsIpv6FHSIpv6AccessListAccessType, bsIpv6FHSSourceGuardInterfaceConfigEntry=bsIpv6FHSSourceGuardInterfaceConfigEntry, bayStackIpv6FirstHopSecMib=bayStackIpv6FirstHopSecMib, bsIpv6FHSSbtVlan=bsIpv6FHSSbtVlan, bsIpv6FirstHopSecNotifications=bsIpv6FirstHopSecNotifications, bsIpv6FHSScalVar=bsIpv6FHSScalVar, bsIpv6FHSDhcpv6gDeviceRole=bsIpv6FHSDhcpv6gDeviceRole, bsIpv6NDInspectionNotificationClientMACAddr=bsIpv6NDInspectionNotificationClientMACAddr, bsIpv6FHSDhcpv6gPrefLimitMax=bsIpv6FHSDhcpv6gPrefLimitMax, bsIpv6FHSPolicyPortMapClearNDInspectStats=bsIpv6FHSPolicyPortMapClearNDInspectStats, bsIpv6FHSSbtReachLifeTime=bsIpv6FHSSbtReachLifeTime, bsIpv6NDSBTTableFull=bsIpv6NDSBTTableFull, bsIpv6FHSSbtStaleLifeTime=bsIpv6FHSSbtStaleLifeTime, bsIpv6FHSMacAccessListAccessType=bsIpv6FHSMacAccessListAccessType, bsIpv6FHSPolicyPortMapNDAdmin=bsIpv6FHSPolicyPortMapNDAdmin, bsIpv6FHSRagAdmin=bsIpv6FHSRagAdmin, FhsSbtType=FhsSbtType, bsIpv6FHSNdInspectAdmin=bsIpv6FHSNdInspectAdmin, bsIpv6FHSPolicyPortMapTotRaPktRcv=bsIpv6FHSPolicyPortMapTotRaPktRcv, bsIpv6FHSIpv6AccessListMaskLenTo=bsIpv6FHSIpv6AccessListMaskLenTo, bsIpv6FHSAdmin=bsIpv6FHSAdmin, bsIpv6FHSNDInterfaceIndex=bsIpv6FHSNDInterfaceIndex, bsIpv6FirstHopSecObjects=bsIpv6FirstHopSecObjects, bsIpv6FHSMacAccessListEntry=bsIpv6FHSMacAccessListEntry, bsIpv6FHSDhcpv6gPolicyListEntry=bsIpv6FHSDhcpv6gPolicyListEntry, bsIpv6FHSSbtDownLifeTime=bsIpv6FHSSbtDownLifeTime)
