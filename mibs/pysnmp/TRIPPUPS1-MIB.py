#
# PySNMP MIB module TRIPPUPS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIPPUPS1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, NotificationType, ObjectIdentity, Integer32, enterprises, Counter32, MibIdentifier, TimeTicks, NotificationType, IpAddress, iso, Bits, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Integer32", "enterprises", "Counter32", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "iso", "Bits", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tripplite = MibIdentifier((1, 3, 6, 1, 4, 1, 850))
trippUPS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 4))
upsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 6))
upsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 7))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 8))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 9))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 10))
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentManufacturer.setStatus('mandatory')
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentModel.setStatus('mandatory')
upsIdentUPSSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUPSSoftwareVersion.setStatus('mandatory')
upsIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentAgentSoftwareVersion.setStatus('mandatory')
upsIdentName = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentName.setStatus('mandatory')
upsIdentAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentAttachedDevices.setStatus('mandatory')
upsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatus.setStatus('mandatory')
upsSecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSecondsOnBattery.setStatus('mandatory')
upsEstimatedMinutesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEstimatedMinutesRemaining.setStatus('mandatory')
upsBatteryChargeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeRemaining.setStatus('mandatory')
upsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltage.setStatus('mandatory')
upsBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTemperature.setStatus('mandatory')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
upsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLineBads.setStatus('mandatory')
upsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputNumLines.setStatus('mandatory')
upsInputVolt = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVolt.setStatus('mandatory')
upsInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5), )
if mibBuilder.loadTexts: upsInputTable.setStatus('mandatory')
upsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1), ).setIndexNames((0, "TRIPPUPS1-MIB", "upsInputLineIndex"))
if mibBuilder.loadTexts: upsInputEntry.setStatus('mandatory')
upsInputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLineIndex.setStatus('mandatory')
upsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage.setStatus('mandatory')
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputSource.setStatus('mandatory')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
upsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputNumLines.setStatus('mandatory')
upsOutputPercLoad = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPercLoad.setStatus('mandatory')
upsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5), )
if mibBuilder.loadTexts: upsOutputTable.setStatus('mandatory')
upsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1), ).setIndexNames((0, "TRIPPUPS1-MIB", "upsOutputLineIndex"))
if mibBuilder.loadTexts: upsOutputEntry.setStatus('mandatory')
upsOutputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLineIndex.setStatus('mandatory')
upsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage.setStatus('mandatory')
upsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent.setStatus('mandatory')
upsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPower.setStatus('mandatory')
upsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPercentLoad.setStatus('mandatory')
upsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmsPresent.setStatus('mandatory')
upsAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("upsAlarmBatteryBad", 1), ("upsAlarmOnBattery", 2), ("upsAlarmLowBattery", 3), ("upsAlarmDepletedBattery", 4), ("upsAlarmTempBad", 5), ("upsAlarmOutputOverload", 6), ("upsAlarmOutputOffAsRequested", 7), ("upsAlarmOutputOff", 8), ("upsAlarmDiagnosticTestFailed", 9), ("upsAlarmCommunicationsLost", 10), ("upsAlarmShutdownPending", 11), ("upsAlarmShutdownImminent", 12), ("upsAlarmTestInProgress", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmID.setStatus('mandatory')
upsAlarmDESCR = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDESCR.setStatus('mandatory')
upsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4), )
if mibBuilder.loadTexts: upsAlarmTable.setStatus('mandatory')
upsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1), ).setIndexNames((0, "TRIPPUPS1-MIB", "upsAlarmId"))
if mibBuilder.loadTexts: upsAlarmEntry.setStatus('mandatory')
upsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmId.setStatus('mandatory')
upsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDescr.setStatus('mandatory')
upsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTime.setStatus('mandatory')
upsAlarmBatteryBad = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryBad.setStatus('mandatory')
upsAlarmOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBattery.setStatus('mandatory')
upsAlarmLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowBattery.setStatus('mandatory')
upsAlarmDepletedBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDepletedBattery.setStatus('mandatory')
upsAlarmTempBad = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTempBad.setStatus('mandatory')
upsAlarmOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOverload.setStatus('mandatory')
upsAlarmOutputOffAsRequested = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOffAsRequested.setStatus('mandatory')
upsAlarmUpsOutputOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUpsOutputOff.setStatus('mandatory')
upsAlarmDiagnosticTestFailed = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDiagnosticTestFailed.setStatus('mandatory')
upsAlarmCommunicationsLost = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCommunicationsLost.setStatus('mandatory')
upsAlarmShutdownPending = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmShutdownPending.setStatus('mandatory')
upsAlarmShutdownImminent = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmShutdownImminent.setStatus('mandatory')
upsAlarmTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTestInProgress.setStatus('mandatory')
upsTestId = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTestsInitiated", 1), ("abortTestInProgress", 2), ("generalSystemsTest", 3), ("checkBatteryTest", 4), ("deepBatteryCalibration", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestId.setStatus('mandatory')
upsTestResultsSummary = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("donePass", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestsInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestResultsSummary.setStatus('mandatory')
upsShutdownType = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("system", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsShutdownType.setStatus('mandatory')
upsShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsShutdownAfterDelay.setStatus('mandatory')
upsStartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsStartupAfterDelay.setStatus('mandatory')
upsRebootDuration = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRebootDuration.setStatus('mandatory')
upsAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAutoRestart.setStatus('mandatory')
upsConfigInputVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigInputVoltageHigh.setStatus('mandatory')
upsConfigInputVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigInputVoltageLow.setStatus('mandatory')
upsConfigOutputPercLoadHigh = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigOutputPercLoadHigh.setStatus('mandatory')
upsConfigBatteryPercLow = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryPercLow.setStatus('mandatory')
upsConfigBatteryTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryTemperatureHigh.setStatus('mandatory')
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,5)).setObjects(("TRIPPUPS1-MIB", "upsIdentAttachedDevices"), ("TRIPPUPS1-MIB", "upsEstimatedMinutesRemaining"))
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,6))
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,7))
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,8))
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,9))
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,10))
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,11))
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,12))
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,13))
utilityVoltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,14))
utilityVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,15))
utilityVoltageReturnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,16))
batteryTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,17))
shutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,18))
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,19))
upsWokeup = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,20))
upsBatteryNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,21))
mibBuilder.exportSymbols("TRIPPUPS1-MIB", upsInputVoltage=upsInputVoltage, upsInputLineIndex=upsInputLineIndex, upsAlarm=upsAlarm, upsShutdownAfterDelay=upsShutdownAfterDelay, upsBattery=upsBattery, upsRebootDuration=upsRebootDuration, powerRestored=powerRestored, upsSecondsOnBattery=upsSecondsOnBattery, upsIdentUPSSoftwareVersion=upsIdentUPSSoftwareVersion, lowBattery=lowBattery, upsConfigInputVoltageHigh=upsConfigInputVoltageHigh, upsShutdownType=upsShutdownType, upsInputNumLines=upsInputNumLines, upsOutput=upsOutput, upsOutputPercLoad=upsOutputPercLoad, communicationEstablished=communicationEstablished, upsIdent=upsIdent, upsAlarmTestInProgress=upsAlarmTestInProgress, upsOutputPercentLoad=upsOutputPercentLoad, upsBatteryStatus=upsBatteryStatus, upsAlarmDiagnosticTestFailed=upsAlarmDiagnosticTestFailed, ups=ups, upsAlarmTable=upsAlarmTable, upsInputTable=upsInputTable, upsAlarmDESCR=upsAlarmDESCR, upsConfigBatteryTemperatureHigh=upsConfigBatteryTemperatureHigh, utilityVoltageLow=utilityVoltageLow, upsAlarmDescr=upsAlarmDescr, upsOnBattery=upsOnBattery, upsAlarmShutdownImminent=upsAlarmShutdownImminent, upsBatteryNeedsReplacement=upsBatteryNeedsReplacement, upsAlarmOutputOffAsRequested=upsAlarmOutputOffAsRequested, upsStartupAfterDelay=upsStartupAfterDelay, upsIdentAttachedDevices=upsIdentAttachedDevices, returnFromLowBattery=returnFromLowBattery, upsAlarmOnBattery=upsAlarmOnBattery, tripplite=tripplite, upsWellKnownAlarms=upsWellKnownAlarms, upsControl=upsControl, upsAlarmBatteryBad=upsAlarmBatteryBad, upsIdentName=upsIdentName, upsOutputPower=upsOutputPower, upsAlarmTempBad=upsAlarmTempBad, communicationLost=communicationLost, upsOutputLineIndex=upsOutputLineIndex, upsDiagnosticsFailed=upsDiagnosticsFailed, upsConfig=upsConfig, upsIdentManufacturer=upsIdentManufacturer, utilityVoltageHigh=utilityVoltageHigh, upsOverload=upsOverload, upsConfigInputVoltageLow=upsConfigInputVoltageLow, upsOutputTable=upsOutputTable, upsConfigOutputPercLoadHigh=upsConfigOutputPercLoadHigh, upsDiagnosticsPassed=upsDiagnosticsPassed, upsOutputNumLines=upsOutputNumLines, upsTest=upsTest, upsOutputFrequency=upsOutputFrequency, upsAlarmLowBattery=upsAlarmLowBattery, upsOutputVoltage=upsOutputVoltage, upsInputEntry=upsInputEntry, upsAlarmDepletedBattery=upsAlarmDepletedBattery, shutdownPending=shutdownPending, upsBatteryVoltage=upsBatteryVoltage, upsAlarmTime=upsAlarmTime, upsOutputEntry=upsOutputEntry, upsOutputCurrent=upsOutputCurrent, upsAlarmUpsOutputOff=upsAlarmUpsOutputOff, upsIdentModel=upsIdentModel, upsAlarmOutputOverload=upsAlarmOutputOverload, upsInputVolt=upsInputVolt, upsAlarmId=upsAlarmId, upsEstimatedMinutesRemaining=upsEstimatedMinutesRemaining, upsWokeup=upsWokeup, trippUPS1=trippUPS1, upsAlarmsPresent=upsAlarmsPresent, upsAlarmShutdownPending=upsAlarmShutdownPending, upsBatteryChargeRemaining=upsBatteryChargeRemaining, upsInputFrequency=upsInputFrequency, upsBatteryTemperature=upsBatteryTemperature, upsAlarmEntry=upsAlarmEntry, upsInput=upsInput, upsAlarmCommunicationsLost=upsAlarmCommunicationsLost, upsConfigBatteryPercLow=upsConfigBatteryPercLow, batteryTemperatureHigh=batteryTemperatureHigh, upsIdentAgentSoftwareVersion=upsIdentAgentSoftwareVersion, upsInputLineBads=upsInputLineBads, upsOutputSource=upsOutputSource, upsSleeping=upsSleeping, upsTestResultsSummary=upsTestResultsSummary, utilityVoltageReturnToNormal=utilityVoltageReturnToNormal, upsAlarmID=upsAlarmID, upsTestId=upsTestId, upsAutoRestart=upsAutoRestart)
