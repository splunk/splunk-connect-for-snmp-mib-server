#
# PySNMP MIB module ETH-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ETH-SWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, NotificationType, iso, Gauge32, Counter32, TimeTicks, MibIdentifier, ModuleIdentity, IpAddress, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "NotificationType", "iso", "Gauge32", "Counter32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "IpAddress", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ethSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 1))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 2))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 3))
statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 4))
adaptiveForwardMode = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 5))
chipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 6))
cards = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 7))
class ProductIds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 1163072800, 1163072816, 1163073552, 1163073568, 1163073584, 1163073585, 1163073586, 1163073600, 1163073616, 1163073617, 1163076624, 1163076640, 1163076656, 1163076657, 1163067410, 1163067456, 1163067648, 1163067649, 1163067650, 1163067651, 1163067664, 1163067665, 1163067732, 1163067733, 1280323585, 1280323586, 1280323587, 1280323588, 1280323589, 1280323590, 1280323604, 1280323605))
    namedValues = NamedValues(("notAvailable", 1), ("es-1520", 1163072800), ("es-1530", 1163072816), ("es-1810", 1163073552), ("es-1820", 1163073568), ("es-1830", 1163073584), ("es-1831", 1163073585), ("es-1832", 1163073586), ("es-1840", 1163073600), ("es-1850", 1163073616), ("es100fx", 1163073617), ("es10t24", 1163076624), ("es10t24plus", 1163076640), ("es10mmt12", 1163076656), ("es10mmfl", 1163076657), ("es-0012", 1163067410), ("es-0040", 1163067456), ("es-0100", 1163067648), ("es-0101", 1163067649), ("es100mmfx", 1163067650), ("es-0103", 1163067651), ("es100mmtx", 1163067664), ("es-0111", 1163067665), ("es-0154", 1163067732), ("es-0155", 1163067733), ("lp-3001", 1280323585), ("lp-3002", 1280323586), ("lp-3003", 1280323587), ("lp-3004", 1280323588), ("lp-3005", 1280323589), ("lp-3006", 1280323590), ("lp-3014", 1280323604), ("lp-3015", 1280323605))

scSegments = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("segmentA", 1), ("segmentB", 2), ("segmentAandB", 3), ("segmentC", 4), ("segmentAandC", 5), ("segmentBandC", 6), ("segmentAandBandC", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSegments.setStatus('mandatory')
defaultSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("cutThrough", 2), ("fragmentFree", 3), ("storeAndForward", 4), ("adaptive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultSwitchMode.setStatus('mandatory')
defaultThrottleBackMode = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultThrottleBackMode.setStatus('mandatory')
networkPort = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPort.setStatus('mandatory')
expansionModule = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 2, 1), ProductIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expansionModule.setStatus('mandatory')
portLastChange = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastChange.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 3, 2), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "portNumber"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
portInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInterfaceIndex.setStatus('mandatory')
portLED = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLED.setStatus('mandatory')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('mandatory')
portCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardNumber.setStatus('mandatory')
portPimNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPimNumber.setStatus('mandatory')
portPimPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPimPortNumber.setStatus('mandatory')
portIfTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 3, 3), )
if mibBuilder.loadTexts: portIfTable.setStatus('mandatory')
portIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "portIfIndex"))
if mibBuilder.loadTexts: portIfEntry.setStatus('mandatory')
portIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfIndex.setStatus('mandatory')
portIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfDescr.setStatus('mandatory')
portIfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfLocation.setStatus('mandatory')
portIfSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("default", 1), ("cutThrough", 2), ("fragmentFree", 3), ("storeAndForward", 4), ("adaptive", 5), ("notAvailable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfSwitchMode.setStatus('mandatory')
portIfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("autoDetect", 1), ("half", 2), ("full", 3), ("autoDetectedHalf", 4), ("autoDetectedFull", 5), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfDuplex.setStatus('mandatory')
portIfThrottleBack = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("default", 1), ("enable", 2), ("disable", 3), ("notAvailable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfThrottleBack.setStatus('mandatory')
portIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 14, 15, 51, 54, 100, 101, 102, 110))).clone(namedValues=NamedValues(("absent", 1), ("tenbase2", 2), ("aui", 3), ("tenbasetutp", 4), ("tenbasetstp", 5), ("tenbasefl", 6), ("tenbaseflfullduplex", 7), ("tenbasetxutp", 14), ("tenbasetxstp", 15), ("hundredbasetx", 51), ("hundredbasefx", 54), ("backplane", 100), ("hsb", 101), ("internal", 102), ("layer3link", 110)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfType.setStatus('mandatory')
portIfDuplexSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7, 99))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("halfAndFull", 3), ("auto", 4), ("autoAndHalfAndFull", 7), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfDuplexSupported.setStatus('mandatory')
portIfSpeedSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("speed10Mbit", 1), ("speed100Mbit", 2), ("speed10And100Mbit", 3), ("speedAutoAnd10And100Mbit", 4), ("speed155Mbit", 5), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfSpeedSupported.setStatus('mandatory')
portIfSpeedAndDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 3, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIfSpeedAndDuplex.setStatus('mandatory')
txStatTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 4, 1), )
if mibBuilder.loadTexts: txStatTable.setStatus('mandatory')
txStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "txStatIndex"))
if mibBuilder.loadTexts: txStatEntry.setStatus('mandatory')
txStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txStatIndex.setStatus('mandatory')
txUCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts64Octets.setStatus('mandatory')
txUCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts65To127Octets.setStatus('mandatory')
txUCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts128To255Octets.setStatus('mandatory')
txUCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts256To511Octets.setStatus('mandatory')
txUCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts512To1023Octets.setStatus('mandatory')
txUCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts1024To1518Octets.setStatus('mandatory')
txMCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts64Octets.setStatus('mandatory')
txMCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts65To127Octets.setStatus('mandatory')
txMCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts128To255Octets.setStatus('mandatory')
txMCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts256To511Octets.setStatus('mandatory')
txMCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts512To1023Octets.setStatus('mandatory')
txMCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts1024To1518Octets.setStatus('mandatory')
txBCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts64Octets.setStatus('mandatory')
txBCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts65To127Octets.setStatus('mandatory')
txBCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts128To255Octets.setStatus('mandatory')
txBCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts256To511Octets.setStatus('mandatory')
txBCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts512To1023Octets.setStatus('mandatory')
txBCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts1024To1518Octets.setStatus('mandatory')
txDeffereds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDeffereds.setStatus('mandatory')
txOctetsHis = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsHis.setStatus('mandatory')
txOctetsLos = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsLos.setStatus('mandatory')
txExcessiveDefferalsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessiveDefferalsErrors.setStatus('mandatory')
txForwardedRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txForwardedRxError.setStatus('mandatory')
txNiaUnderRunDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txNiaUnderRunDrops.setStatus('mandatory')
txLinkDownEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLinkDownEvents.setStatus('mandatory')
txAllCounterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAllCounterPackets.setStatus('mandatory')
txAllCounterOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAllCounterOthers.setStatus('mandatory')
rxStatTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 4, 2), )
if mibBuilder.loadTexts: rxStatTable.setStatus('mandatory')
rxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "rxStatIndex"))
if mibBuilder.loadTexts: rxStatEntry.setStatus('mandatory')
rxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxStatIndex.setStatus('mandatory')
rxUCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts64OctetsLocals.setStatus('mandatory')
rxUCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts64OctetsForwardeds.setStatus('mandatory')
rxUCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts65To127OctetsLocals.setStatus('mandatory')
rxUCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts65To127OctetsForwardeds.setStatus('mandatory')
rxUCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts128To255OctetsLocals.setStatus('mandatory')
rxUCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts128To255OctetsForwardeds.setStatus('mandatory')
rxUCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts256To511OctetsLocals.setStatus('mandatory')
rxUCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts256To511OctetsForwardeds.setStatus('mandatory')
rxUCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsLocals.setStatus('mandatory')
rxUCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsForwardeds.setStatus('mandatory')
rxUCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsLocals.setStatus('mandatory')
rxUCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
rxShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxShortErrors.setStatus('mandatory')
rxRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRuntErrors.setStatus('mandatory')
rxDataRateMMErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDataRateMMErrors.setStatus('mandatory')
rxMCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts64OctetsLocals.setStatus('mandatory')
rxMCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts64OctetsForwardeds.setStatus('mandatory')
rxMCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts65To127OctetsLocals.setStatus('mandatory')
rxMCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts65To127OctetsForwardeds.setStatus('mandatory')
rxMCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts128To255OctetsLocals.setStatus('mandatory')
rxMCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts128To255OctetsForwardeds.setStatus('mandatory')
rxMCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts256To511OctetsLocals.setStatus('mandatory')
rxMCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts256To511OctetsForwardeds.setStatus('mandatory')
rxMCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsLocals.setStatus('mandatory')
rxMCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsForwardeds.setStatus('mandatory')
rxMCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsLocals.setStatus('mandatory')
rxMCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
rxOctetsLocalHis = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsLocalHis.setStatus('mandatory')
rxOctetsLocalLos = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsLocalLos.setStatus('mandatory')
rxOctetsForwardedHis = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsForwardedHis.setStatus('mandatory')
rxOctetsForwardedLos = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsForwardedLos.setStatus('mandatory')
rxBCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts64OctetsLocals.setStatus('mandatory')
rxBCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts64OctetsForwardeds.setStatus('mandatory')
rxBCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts65To127OctetsLocals.setStatus('mandatory')
rxBCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts65To127OctetsForwardeds.setStatus('mandatory')
rxBCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts128To255OctetsLocals.setStatus('mandatory')
rxBCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts128To255OctetsForwardeds.setStatus('mandatory')
rxBCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts256To511OctetsLocals.setStatus('mandatory')
rxBCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts256To511OctetsForwardeds.setStatus('mandatory')
rxBCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsLocals.setStatus('mandatory')
rxBCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsForwardeds.setStatus('mandatory')
rxBCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsLocals.setStatus('mandatory')
rxBCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
rxFilterMACUnexp2ndPortDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFilterMACUnexp2ndPortDrops.setStatus('mandatory')
rxFilterIllegalMACDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFilterIllegalMACDrops.setStatus('mandatory')
rxFlowCtrlCollCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFlowCtrlCollCounter.setStatus('mandatory')
rxVeryLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxVeryLongErrors.setStatus('mandatory')
rxLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxLongErrors.setStatus('mandatory')
rxPiaOutOfPoolsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPiaOutOfPoolsDrop.setStatus('mandatory')
rxManchesterCodeViolationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxManchesterCodeViolationErrors.setStatus('mandatory')
rxRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRxJabbers.setStatus('mandatory')
rxNiaOverRunDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxNiaOverRunDrops.setStatus('mandatory')
rxAllCounterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(164, 164)).setFixedLength(164)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAllCounterPackets.setStatus('mandatory')
rxAllCounterOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 4, 2, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAllCounterOthers.setStatus('mandatory')
totalRxTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRxTxPackets.setStatus('mandatory')
totalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCollisions.setStatus('mandatory')
adaptiveForwardModeSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeSampleTime.setStatus('mandatory')
adaptiveForwardModeRuntsOffset = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeRuntsOffset.setStatus('mandatory')
adaptiveForwardModeRuntsRange = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeRuntsRange.setStatus('mandatory')
adaptiveForwardModeCrcsOffset = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeCrcsOffset.setStatus('mandatory')
adaptiveForwardModeCrcsRange = MibScalar((1, 3, 6, 1, 4, 1, 208, 39, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeCrcsRange.setStatus('mandatory')
chipSetNIA10 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 6, 1))
chipSetNIA100 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 39, 6, 2))
cardTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 7, 1), )
if mibBuilder.loadTexts: cardTable.setStatus('mandatory')
cardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardEntry.setStatus('mandatory')
cardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNumber.setStatus('mandatory')
cardId = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 2), ProductIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardId.setStatus('mandatory')
cardFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFirstPort.setStatus('mandatory')
cardMaxPims = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMaxPims.setStatus('mandatory')
pimTable = MibTable((1, 3, 6, 1, 4, 1, 208, 39, 7, 2), )
if mibBuilder.loadTexts: pimTable.setStatus('mandatory')
pimEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1), ).setIndexNames((0, "ETH-SWITCH-MIB", "pimCardNumber"), (0, "ETH-SWITCH-MIB", "pimNumber"))
if mibBuilder.loadTexts: pimEntry.setStatus('mandatory')
pimCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimCardNumber.setStatus('mandatory')
pimNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNumber.setStatus('mandatory')
pimId = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 3), ProductIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimId.setStatus('mandatory')
pimFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimFirstPort.setStatus('mandatory')
pimNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 39, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNumberOfPorts.setStatus('mandatory')
ethSwitchPermVioEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,1)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
ethSwitchOnlyOneMACEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,2)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
ethSwitchMACVioEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,3)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
ethSwitchAdaptiveForwEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,4)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"), ("ETH-SWITCH-MIB", "portIfSwitchMode"), ("ETH-SWITCH-MIB", "portIfSwitchMode"))
ethSwitchMACFilterVioEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 39) + (0,5)).setObjects(("ETH-SWITCH-MIB", "portIfIndex"))
mibBuilder.exportSymbols("ETH-SWITCH-MIB", rxRuntErrors=rxRuntErrors, txUCPkts65To127Octets=txUCPkts65To127Octets, txExcessiveDefferalsErrors=txExcessiveDefferalsErrors, rxVeryLongErrors=rxVeryLongErrors, rxPiaOutOfPoolsDrop=rxPiaOutOfPoolsDrop, txDeffereds=txDeffereds, chipSets=chipSets, portIfTable=portIfTable, txMCPkts128To255Octets=txMCPkts128To255Octets, rxUCPkts1024To1518OctetsLocals=rxUCPkts1024To1518OctetsLocals, rxNiaOverRunDrops=rxNiaOverRunDrops, portIfSpeedAndDuplex=portIfSpeedAndDuplex, portIfType=portIfType, scSegments=scSegments, txBCPkts128To255Octets=txBCPkts128To255Octets, rxUCPkts256To511OctetsForwardeds=rxUCPkts256To511OctetsForwardeds, rxUCPkts512To1023OctetsLocals=rxUCPkts512To1023OctetsLocals, rxUCPkts64OctetsForwardeds=rxUCPkts64OctetsForwardeds, txBCPkts64Octets=txBCPkts64Octets, rxBCPkts65To127OctetsLocals=rxBCPkts65To127OctetsLocals, rxMCPkts65To127OctetsForwardeds=rxMCPkts65To127OctetsForwardeds, rxUCPkts128To255OctetsLocals=rxUCPkts128To255OctetsLocals, rxBCPkts512To1023OctetsLocals=rxBCPkts512To1023OctetsLocals, rxOctetsForwardedLos=rxOctetsForwardedLos, rxStatIndex=rxStatIndex, txBCPkts512To1023Octets=txBCPkts512To1023Octets, cardEntry=cardEntry, rxUCPkts64OctetsLocals=rxUCPkts64OctetsLocals, pimId=pimId, rxBCPkts64OctetsLocals=rxBCPkts64OctetsLocals, txMCPkts64Octets=txMCPkts64Octets, txBCPkts65To127Octets=txBCPkts65To127Octets, txStatIndex=txStatIndex, portCardNumber=portCardNumber, rxBCPkts128To255OctetsForwardeds=rxBCPkts128To255OctetsForwardeds, rxFlowCtrlCollCounter=rxFlowCtrlCollCounter, cardMaxPims=cardMaxPims, txBCPkts1024To1518Octets=txBCPkts1024To1518Octets, txOctetsLos=txOctetsLos, adaptiveForwardModeRuntsOffset=adaptiveForwardModeRuntsOffset, adaptiveForwardModeSampleTime=adaptiveForwardModeSampleTime, txMCPkts65To127Octets=txMCPkts65To127Octets, portTable=portTable, ethSwitchOnlyOneMACEvent=ethSwitchOnlyOneMACEvent, rxMCPkts512To1023OctetsForwardeds=rxMCPkts512To1023OctetsForwardeds, rxBCPkts512To1023OctetsForwardeds=rxBCPkts512To1023OctetsForwardeds, networkPort=networkPort, portIfDuplex=portIfDuplex, portEntry=portEntry, portIfSpeedSupported=portIfSpeedSupported, rxOctetsLocalLos=rxOctetsLocalLos, ethSwitchMACFilterVioEvent=ethSwitchMACFilterVioEvent, rxMCPkts64OctetsForwardeds=rxMCPkts64OctetsForwardeds, portNumber=portNumber, portLastChange=portLastChange, txMCPkts512To1023Octets=txMCPkts512To1023Octets, pimNumberOfPorts=pimNumberOfPorts, txForwardedRxError=txForwardedRxError, rxMCPkts64OctetsLocals=rxMCPkts64OctetsLocals, rxOctetsLocalHis=rxOctetsLocalHis, portPimPortNumber=portPimPortNumber, txStatTable=txStatTable, defaultSwitchMode=defaultSwitchMode, rxMCPkts512To1023OctetsLocals=rxMCPkts512To1023OctetsLocals, rxBCPkts1024To1518OctetsLocals=rxBCPkts1024To1518OctetsLocals, portIfLocation=portIfLocation, chipSetNIA100=chipSetNIA100, pimNumber=pimNumber, chipSetNIA10=chipSetNIA10, portIfThrottleBack=portIfThrottleBack, portPimNumber=portPimNumber, rxUCPkts128To255OctetsForwardeds=rxUCPkts128To255OctetsForwardeds, rxManchesterCodeViolationErrors=rxManchesterCodeViolationErrors, ethSwitchAdaptiveForwEvent=ethSwitchAdaptiveForwEvent, portIfIndex=portIfIndex, rxMCPkts1024To1518OctetsLocals=rxMCPkts1024To1518OctetsLocals, rxAllCounterOthers=rxAllCounterOthers, statistic=statistic, adaptiveForwardModeCrcsOffset=adaptiveForwardModeCrcsOffset, rxUCPkts256To511OctetsLocals=rxUCPkts256To511OctetsLocals, cardNumber=cardNumber, portIfDescr=portIfDescr, pimFirstPort=pimFirstPort, ethSwitch=ethSwitch, rxUCPkts65To127OctetsForwardeds=rxUCPkts65To127OctetsForwardeds, rxAllCounterPackets=rxAllCounterPackets, cardTable=cardTable, totalRxTxPackets=totalRxTxPackets, txNiaUnderRunDrops=txNiaUnderRunDrops, txUCPkts64Octets=txUCPkts64Octets, portState=portState, totalCollisions=totalCollisions, adaptiveForwardModeRuntsRange=adaptiveForwardModeRuntsRange, rxMCPkts256To511OctetsLocals=rxMCPkts256To511OctetsLocals, rxBCPkts64OctetsForwardeds=rxBCPkts64OctetsForwardeds, txUCPkts1024To1518Octets=txUCPkts1024To1518Octets, txOctetsHis=txOctetsHis, rxBCPkts256To511OctetsForwardeds=rxBCPkts256To511OctetsForwardeds, rxMCPkts65To127OctetsLocals=rxMCPkts65To127OctetsLocals, rxRxJabbers=rxRxJabbers, ports=ports, cards=cards, txBCPkts256To511Octets=txBCPkts256To511Octets, rxBCPkts128To255OctetsLocals=rxBCPkts128To255OctetsLocals, pimCardNumber=pimCardNumber, defaultThrottleBackMode=defaultThrottleBackMode, portLED=portLED, rxUCPkts512To1023OctetsForwardeds=rxUCPkts512To1023OctetsForwardeds, rxShortErrors=rxShortErrors, txAllCounterPackets=txAllCounterPackets, txStatEntry=txStatEntry, pimTable=pimTable, portIfDuplexSupported=portIfDuplexSupported, rxLongErrors=rxLongErrors, rxUCPkts65To127OctetsLocals=rxUCPkts65To127OctetsLocals, rxFilterMACUnexp2ndPortDrops=rxFilterMACUnexp2ndPortDrops, pimEntry=pimEntry, txUCPkts256To511Octets=txUCPkts256To511Octets, cardFirstPort=cardFirstPort, module=module, expansionModule=expansionModule, txUCPkts512To1023Octets=txUCPkts512To1023Octets, adaptiveForwardModeCrcsRange=adaptiveForwardModeCrcsRange, rxMCPkts1024To1518OctetsForwardeds=rxMCPkts1024To1518OctetsForwardeds, txMCPkts256To511Octets=txMCPkts256To511Octets, rxMCPkts128To255OctetsForwardeds=rxMCPkts128To255OctetsForwardeds, rxMCPkts256To511OctetsForwardeds=rxMCPkts256To511OctetsForwardeds, rxMCPkts128To255OctetsLocals=rxMCPkts128To255OctetsLocals, ProductIds=ProductIds, rxBCPkts1024To1518OctetsForwardeds=rxBCPkts1024To1518OctetsForwardeds, rxBCPkts65To127OctetsForwardeds=rxBCPkts65To127OctetsForwardeds, portIfSwitchMode=portIfSwitchMode, rxUCPkts1024To1518OctetsForwardeds=rxUCPkts1024To1518OctetsForwardeds, cardId=cardId, ethSwitchPermVioEvent=ethSwitchPermVioEvent, ethSwitchMACVioEvent=ethSwitchMACVioEvent, txAllCounterOthers=txAllCounterOthers, rxFilterIllegalMACDrops=rxFilterIllegalMACDrops, rxStatEntry=rxStatEntry, control=control, portIfEntry=portIfEntry, txMCPkts1024To1518Octets=txMCPkts1024To1518Octets, rxOctetsForwardedHis=rxOctetsForwardedHis, txUCPkts128To255Octets=txUCPkts128To255Octets, rxStatTable=rxStatTable, rxBCPkts256To511OctetsLocals=rxBCPkts256To511OctetsLocals, txLinkDownEvents=txLinkDownEvents, rxDataRateMMErrors=rxDataRateMMErrors, adaptiveForwardMode=adaptiveForwardMode, portInterfaceIndex=portInterfaceIndex)
