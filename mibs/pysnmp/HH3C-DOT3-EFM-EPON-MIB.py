#
# PySNMP MIB module HH3C-DOT3-EFM-EPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DOT3-EFM-EPON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
hh3cEpon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cEpon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
mib_2, ModuleIdentity, iso, TimeTicks, Gauge32, Bits, MibIdentifier, Counter64, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "ModuleIdentity", "iso", "TimeTicks", "Gauge32", "Bits", "MibIdentifier", "Counter64", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "IpAddress", "Integer32")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
hh3cDot3EfmeponMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2))
hh3cDot3EfmeponMIB.setRevisions(('2004-09-21 00:00',))
if mibBuilder.loadTexts: hh3cDot3EfmeponMIB.setLastUpdated('200409210000Z')
if mibBuilder.loadTexts: hh3cDot3EfmeponMIB.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cDot3MpcpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1))
hh3cDot3MpcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1))
hh3cDot3MpcpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 2))
hh3cDot3MpcpTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cDot3MpcpTable.setStatus('current')
hh3cDot3MpcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDot3MpcpEntry.setStatus('current')
hh3cDot3MpcpID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpID.setStatus('current')
hh3cDot3MpcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpOperStatus.setStatus('current')
hh3cDot3MpcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("olt", 1), ("onu", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot3MpcpMode.setStatus('current')
hh3cDot3MpcpLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpLinkID.setStatus('current')
hh3cDot3MpcpRemoteMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRemoteMACAddress.setStatus('current')
hh3cDot3MpcpRegistrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unregistered", 1), ("registering", 2), ("registered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRegistrationState.setStatus('current')
hh3cDot3MpcpTransmitElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 7), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpTransmitElapsed.setStatus('current')
hh3cDot3MpcpReceiveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 8), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpReceiveElapsed.setStatus('current')
hh3cDot3MpcpRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 9), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRoundTripTime.setStatus('current')
hh3cDot3MpcpMaximumPendingGrants = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpMaximumPendingGrants.setStatus('current')
hh3cDot3MpcpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot3MpcpAdminState.setStatus('current')
hh3cDot3MpcpOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 12), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpOnTime.setStatus('current')
hh3cDot3MpcpOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 13), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpOffTime.setStatus('current')
hh3cDot3MpcpSyncTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 1, 1, 14), Integer32()).setUnits('TQ (16nsec)').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpSyncTime.setStatus('current')
hh3cDot3MpcpStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cDot3MpcpStatTable.setStatus('current')
hh3cDot3MpcpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDot3MpcpStatEntry.setStatus('current')
hh3cDot3MpcpMACCtrlFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpMACCtrlFramesTransmitted.setStatus('current')
hh3cDot3MpcpMACCtrlFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpMACCtrlFramesReceived.setStatus('current')
hh3cDot3MpcpDiscoveryWindowsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpDiscoveryWindowsSent.setStatus('current')
hh3cDot3MpcpDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpDiscoveryTimeout.setStatus('current')
hh3cDot3MpcpTxRegRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpTxRegRequest.setStatus('current')
hh3cDot3MpcpRxRegRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRxRegRequest.setStatus('current')
hh3cDot3MpcpTxRegAck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpTxRegAck.setStatus('current')
hh3cDot3MpcpRxRegAck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRxRegAck.setStatus('current')
hh3cDot3MpcpTxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpTxReport.setStatus('current')
hh3cDot3MpcpRxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRxReport.setStatus('current')
hh3cDot3MpcpTxGate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpTxGate.setStatus('current')
hh3cDot3MpcpRxGate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRxGate.setStatus('current')
hh3cDot3MpcpTxRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpTxRegister.setStatus('current')
hh3cDot3MpcpRxRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRxRegister.setStatus('current')
hh3cDot3MpcpRxNotSupportedMPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 1, 2, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3MpcpRxNotSupportedMPCP.setStatus('current')
hh3cDot3MpcpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 2, 1))
hh3cDot3MpcpGroupBase = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 2, 1, 1)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpOperStatus"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpMode"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpLinkID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRemoteMACAddress"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRegistrationState"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpMaximumPendingGrants"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3MpcpGroupBase = hh3cDot3MpcpGroupBase.setStatus('current')
hh3cDot3MpcpGroupParam = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 2, 1, 2)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpTransmitElapsed"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpReceiveElapsed"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRoundTripTime"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpOnTime"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpOffTime"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpSyncTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3MpcpGroupParam = hh3cDot3MpcpGroupParam.setStatus('current')
hh3cDot3MpcpGroupStat = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 2, 1, 3)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpMACCtrlFramesTransmitted"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpMACCtrlFramesReceived"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpDiscoveryWindowsSent"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpDiscoveryTimeout"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpTxRegRequest"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRxRegRequest"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpTxRegAck"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRxRegAck"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpTxReport"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRxReport"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpTxGate"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRxGate"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpTxRegister"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRxRegister"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpRxNotSupportedMPCP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3MpcpGroupStat = hh3cDot3MpcpGroupStat.setStatus('current')
hh3cDot3MpcpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 2, 2))
hh3cDot3MpcpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 1, 2, 2, 1)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpGroupBase"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpGroupParam"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3MpcpGroupStat"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3MpcpCompliance = hh3cDot3MpcpCompliance.setStatus('current')
hh3cDot3OmpEmulationMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2))
hh3cDot3OmpEmulationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1))
hh3cDot3OmpeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 2))
hh3cDot3OmpEmulationTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cDot3OmpEmulationTable.setStatus('current')
hh3cDot3OmpEmulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDot3OmpEmulationEntry.setStatus('current')
hh3cDot3OmpEmulationID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationID.setStatus('current')
hh3cDot3OmpEmulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("olt", 2), ("onu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationType.setStatus('current')
hh3cDot3OmpEmulationStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cDot3OmpEmulationStatTable.setStatus('current')
hh3cDot3OmpEmulationStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDot3OmpEmulationStatEntry.setStatus('current')
hh3cDot3OmpEmulationSLDErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationSLDErrors.setStatus('current')
hh3cDot3OmpEmulationCRC8Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationCRC8Errors.setStatus('current')
hh3cDot3OmpEmulationBadLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationBadLLID.setStatus('current')
hh3cDot3OmpEmulationGoodLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationGoodLLID.setStatus('current')
hh3cDot3OmpEmulationOnuPonCastLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationOnuPonCastLLID.setStatus('current')
hh3cDot3OmpEmulationOltPonCastLLID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationOltPonCastLLID.setStatus('current')
hh3cDot3OmpEmulationBroadcastLLIDNotOnuID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationBroadcastLLIDNotOnuID.setStatus('current')
hh3cDot3OmpEmulationOnuLLIDNotBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationOnuLLIDNotBroadcast.setStatus('current')
hh3cDot3OmpEmulationBroadcastLLIDPlusOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationBroadcastLLIDPlusOnuId.setStatus('current')
hh3cDot3OmpEmulationNotBroadcastLLIDNotOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 1, 2, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3OmpEmulationNotBroadcastLLIDNotOnuId.setStatus('current')
hh3cDot3OmpeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 2, 1))
hh3cDot3OmpeGroupID = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 2, 1, 1)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3OmpeGroupID = hh3cDot3OmpeGroupID.setStatus('current')
hh3cDot3OmpeGroupStat = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 2, 1, 2)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationSLDErrors"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationCRC8Errors"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationBadLLID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationGoodLLID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationOnuPonCastLLID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationOltPonCastLLID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationBroadcastLLIDNotOnuID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationOnuLLIDNotBroadcast"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationBroadcastLLIDPlusOnuId"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpEmulationNotBroadcastLLIDNotOnuId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3OmpeGroupStat = hh3cDot3OmpeGroupStat.setStatus('current')
hh3cDot3OmpeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 2, 2))
hh3cDot3OmpeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 2, 2, 2, 1)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpeGroupID"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3OmpeGroupStat"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3OmpeCompliance = hh3cDot3OmpeCompliance.setStatus('current')
hh3cDot3EponMauMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3))
hh3cDot3EponMauObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1))
hh3cDot3EponMauConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 2))
hh3cDot3EponMauTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1), )
if mibBuilder.loadTexts: hh3cDot3EponMauTable.setStatus('current')
hh3cDot3EponMauEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDot3EponMauEntry.setStatus('current')
hh3cDot3EponMauPCSCodingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1, 1, 1), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3EponMauPCSCodingViolation.setStatus('current')
hh3cDot3EponMauFecAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("nonsupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3EponMauFecAbility.setStatus('current')
hh3cDot3EponMauFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot3EponMauFecMode.setStatus('current')
hh3cDot3EponMauFECCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3EponMauFECCorrectedBlocks.setStatus('current')
hh3cDot3EponMauFECUncorrectableBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3EponMauFECUncorrectableBlocks.setStatus('current')
hh3cDot3EponMauBufferHeadCodingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 1, 1, 1, 6), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot3EponMauBufferHeadCodingViolation.setStatus('current')
hh3cDot3EponMauType = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3))
hh3cEponMauType1000BasePXOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 1))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePXOLT.setStatus('current')
hh3cEponMauType1000BasePXONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 2))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePXONU.setStatus('current')
hh3cEponMauType1000BasePX10DOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 3))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX10DOLT.setStatus('current')
hh3cEponMauType1000BasePX10DONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 4))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX10DONU.setStatus('current')
hh3cEponMauType1000BasePX10UOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 5))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX10UOLT.setStatus('current')
hh3cEponMauType1000BasePX10UONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 6))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX10UONU.setStatus('current')
hh3cEponMauType1000BasePX20DOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 7))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX20DOLT.setStatus('current')
hh3cEponMauType1000BasePX20DONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 8))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX20DONU.setStatus('current')
hh3cEponMauType1000BasePX20UOLT = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 9))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX20UOLT.setStatus('current')
hh3cEponMauType1000BasePX20UONU = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 3, 10))
if mibBuilder.loadTexts: hh3cEponMauType1000BasePX20UONU.setStatus('current')
hh3cDot3EponMauGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 2, 1))
hh3cDot3EponMauGroupAll = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 2, 1, 1)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauPCSCodingViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3EponMauGroupAll = hh3cDot3EponMauGroupAll.setStatus('current')
hh3cDot3EponMauGroupFEC = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 2, 1, 2)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauFecAbility"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauFecMode"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauFECCorrectedBlocks"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauFECUncorrectableBlocks"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauBufferHeadCodingViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3EponMauGroupFEC = hh3cDot3EponMauGroupFEC.setStatus('current')
hh3cDot3EponMauCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 2, 2))
hh3cDot3EponMauCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 42, 2, 3, 2, 2, 1)).setObjects(("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauGroupAll"), ("HH3C-DOT3-EFM-EPON-MIB", "hh3cDot3EponMauGroupFEC"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDot3EponMauCompliance = hh3cDot3EponMauCompliance.setStatus('current')
mibBuilder.exportSymbols("HH3C-DOT3-EFM-EPON-MIB", hh3cDot3MpcpRxRegister=hh3cDot3MpcpRxRegister, hh3cDot3EponMauType=hh3cDot3EponMauType, hh3cEponMauType1000BasePXOLT=hh3cEponMauType1000BasePXOLT, hh3cDot3MpcpTxRegAck=hh3cDot3MpcpTxRegAck, hh3cDot3MpcpMACCtrlFramesReceived=hh3cDot3MpcpMACCtrlFramesReceived, hh3cDot3OmpEmulationNotBroadcastLLIDNotOnuId=hh3cDot3OmpEmulationNotBroadcastLLIDNotOnuId, hh3cDot3OmpEmulationBroadcastLLIDPlusOnuId=hh3cDot3OmpEmulationBroadcastLLIDPlusOnuId, hh3cDot3MpcpStatTable=hh3cDot3MpcpStatTable, hh3cDot3EponMauFecMode=hh3cDot3EponMauFecMode, hh3cDot3OmpEmulationSLDErrors=hh3cDot3OmpEmulationSLDErrors, hh3cDot3MpcpTxGate=hh3cDot3MpcpTxGate, hh3cDot3OmpEmulationObjects=hh3cDot3OmpEmulationObjects, hh3cEponMauType1000BasePX20UONU=hh3cEponMauType1000BasePX20UONU, hh3cDot3OmpeCompliances=hh3cDot3OmpeCompliances, hh3cDot3EponMauGroups=hh3cDot3EponMauGroups, hh3cDot3OmpEmulationOnuPonCastLLID=hh3cDot3OmpEmulationOnuPonCastLLID, hh3cDot3MpcpMACCtrlFramesTransmitted=hh3cDot3MpcpMACCtrlFramesTransmitted, hh3cDot3MpcpRoundTripTime=hh3cDot3MpcpRoundTripTime, hh3cDot3OmpEmulationGoodLLID=hh3cDot3OmpEmulationGoodLLID, hh3cDot3EponMauCompliances=hh3cDot3EponMauCompliances, hh3cEponMauType1000BasePX20UOLT=hh3cEponMauType1000BasePX20UOLT, hh3cDot3MpcpRegistrationState=hh3cDot3MpcpRegistrationState, hh3cDot3EponMauTable=hh3cDot3EponMauTable, hh3cDot3MpcpGroupStat=hh3cDot3MpcpGroupStat, hh3cDot3EponMauEntry=hh3cDot3EponMauEntry, hh3cDot3MpcpMIB=hh3cDot3MpcpMIB, hh3cDot3MpcpDiscoveryWindowsSent=hh3cDot3MpcpDiscoveryWindowsSent, hh3cDot3OmpEmulationType=hh3cDot3OmpEmulationType, hh3cDot3EponMauConformance=hh3cDot3EponMauConformance, hh3cDot3MpcpTable=hh3cDot3MpcpTable, hh3cDot3EponMauFECUncorrectableBlocks=hh3cDot3EponMauFECUncorrectableBlocks, hh3cDot3OmpEmulationTable=hh3cDot3OmpEmulationTable, hh3cDot3MpcpOffTime=hh3cDot3MpcpOffTime, hh3cDot3MpcpTxRegister=hh3cDot3MpcpTxRegister, hh3cDot3MpcpRxNotSupportedMPCP=hh3cDot3MpcpRxNotSupportedMPCP, hh3cDot3EfmeponMIB=hh3cDot3EfmeponMIB, hh3cDot3MpcpGroups=hh3cDot3MpcpGroups, hh3cDot3EponMauFECCorrectedBlocks=hh3cDot3EponMauFECCorrectedBlocks, hh3cDot3OmpEmulationStatEntry=hh3cDot3OmpEmulationStatEntry, hh3cEponMauType1000BasePX10UONU=hh3cEponMauType1000BasePX10UONU, PYSNMP_MODULE_ID=hh3cDot3EfmeponMIB, hh3cEponMauType1000BasePX20DONU=hh3cEponMauType1000BasePX20DONU, hh3cEponMauType1000BasePX10DOLT=hh3cEponMauType1000BasePX10DOLT, hh3cDot3OmpEmulationCRC8Errors=hh3cDot3OmpEmulationCRC8Errors, hh3cDot3MpcpRxReport=hh3cDot3MpcpRxReport, hh3cDot3MpcpConformance=hh3cDot3MpcpConformance, hh3cDot3MpcpOnTime=hh3cDot3MpcpOnTime, hh3cDot3MpcpDiscoveryTimeout=hh3cDot3MpcpDiscoveryTimeout, hh3cDot3MpcpRemoteMACAddress=hh3cDot3MpcpRemoteMACAddress, hh3cDot3OmpeCompliance=hh3cDot3OmpeCompliance, hh3cDot3OmpEmulationOnuLLIDNotBroadcast=hh3cDot3OmpEmulationOnuLLIDNotBroadcast, hh3cDot3OmpEmulationBadLLID=hh3cDot3OmpEmulationBadLLID, hh3cDot3MpcpTransmitElapsed=hh3cDot3MpcpTransmitElapsed, hh3cDot3EponMauGroupAll=hh3cDot3EponMauGroupAll, hh3cDot3OmpEmulationOltPonCastLLID=hh3cDot3OmpEmulationOltPonCastLLID, hh3cDot3MpcpAdminState=hh3cDot3MpcpAdminState, hh3cDot3MpcpReceiveElapsed=hh3cDot3MpcpReceiveElapsed, hh3cDot3MpcpOperStatus=hh3cDot3MpcpOperStatus, hh3cDot3OmpeConformance=hh3cDot3OmpeConformance, hh3cDot3MpcpLinkID=hh3cDot3MpcpLinkID, hh3cDot3OmpeGroupID=hh3cDot3OmpeGroupID, hh3cDot3EponMauCompliance=hh3cDot3EponMauCompliance, hh3cDot3EponMauObjects=hh3cDot3EponMauObjects, hh3cEponMauType1000BasePXONU=hh3cEponMauType1000BasePXONU, hh3cDot3MpcpCompliance=hh3cDot3MpcpCompliance, hh3cDot3MpcpTxRegRequest=hh3cDot3MpcpTxRegRequest, hh3cDot3MpcpID=hh3cDot3MpcpID, hh3cDot3MpcpStatEntry=hh3cDot3MpcpStatEntry, hh3cDot3OmpEmulationBroadcastLLIDNotOnuID=hh3cDot3OmpEmulationBroadcastLLIDNotOnuID, hh3cDot3MpcpGroupParam=hh3cDot3MpcpGroupParam, hh3cDot3MpcpGroupBase=hh3cDot3MpcpGroupBase, hh3cDot3MpcpEntry=hh3cDot3MpcpEntry, hh3cDot3OmpeGroupStat=hh3cDot3OmpeGroupStat, hh3cDot3EponMauPCSCodingViolation=hh3cDot3EponMauPCSCodingViolation, hh3cEponMauType1000BasePX10DONU=hh3cEponMauType1000BasePX10DONU, hh3cDot3MpcpRxRegAck=hh3cDot3MpcpRxRegAck, hh3cDot3MpcpCompliances=hh3cDot3MpcpCompliances, hh3cDot3EponMauMIB=hh3cDot3EponMauMIB, hh3cDot3MpcpMode=hh3cDot3MpcpMode, hh3cDot3OmpEmulationMIB=hh3cDot3OmpEmulationMIB, hh3cEponMauType1000BasePX20DOLT=hh3cEponMauType1000BasePX20DOLT, hh3cDot3MpcpRxRegRequest=hh3cDot3MpcpRxRegRequest, hh3cDot3MpcpSyncTime=hh3cDot3MpcpSyncTime, hh3cDot3EponMauBufferHeadCodingViolation=hh3cDot3EponMauBufferHeadCodingViolation, hh3cDot3MpcpRxGate=hh3cDot3MpcpRxGate, hh3cEponMauType1000BasePX10UOLT=hh3cEponMauType1000BasePX10UOLT, hh3cDot3OmpEmulationEntry=hh3cDot3OmpEmulationEntry, hh3cDot3OmpeGroups=hh3cDot3OmpeGroups, hh3cDot3EponMauFecAbility=hh3cDot3EponMauFecAbility, hh3cDot3OmpEmulationID=hh3cDot3OmpEmulationID, hh3cDot3MpcpObjects=hh3cDot3MpcpObjects, hh3cDot3OmpEmulationStatTable=hh3cDot3OmpEmulationStatTable, hh3cDot3MpcpMaximumPendingGrants=hh3cDot3MpcpMaximumPendingGrants, hh3cDot3MpcpTxReport=hh3cDot3MpcpTxReport, hh3cDot3EponMauGroupFEC=hh3cDot3EponMauGroupFEC)
