#
# PySNMP MIB module VISINET2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VISINET2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:27:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, Counter32, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Counter64, TimeTicks, ModuleIdentity, IpAddress, ObjectIdentity, MibIdentifier, enterprises, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Counter32", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Counter64", "TimeTicks", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibIdentifier", "enterprises", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
unisys = MibIdentifier((1, 3, 6, 1, 4, 1, 223))
unisysOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10))
unisysEnvMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 6))
uemAgentRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemAgentRevMajor.setStatus('mandatory')
uemAgentRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemAgentRevMinor.setStatus('mandatory')
uemMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemMibRevMajor.setStatus('mandatory')
uemMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemMibRevMinor.setStatus('mandatory')
uemSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSystemDescription.setStatus('mandatory')
uemTrapsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemTrapsEnabled.setStatus('mandatory')
uemTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemTrapSeverity.setStatus('mandatory')
uemEnvMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 6, 16), )
if mibBuilder.loadTexts: uemEnvMonitorTable.setStatus('mandatory')
uemEnvMonitorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1), ).setIndexNames((0, "VISINET2-MIB", "uemEnvMonIndex"))
if mibBuilder.loadTexts: uemEnvMonitorTableEntry.setStatus('mandatory')
uemEnvMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonIndex.setStatus('mandatory')
uemEnvMonLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonLocation.setStatus('mandatory')
uemEnvMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("alrSHM", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonType.setStatus('mandatory')
uemEnvMonFwRevMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonFwRevMajor.setStatus('mandatory')
uemEnvMonFwRevMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonFwRevMinor.setStatus('mandatory')
uemEnvMonFwRelDate = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonFwRelDate.setStatus('mandatory')
uemEnvMonUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 16, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemEnvMonUpTime.setStatus('mandatory')
uemSensorTable = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 6, 17), )
if mibBuilder.loadTexts: uemSensorTable.setStatus('mandatory')
uemSensorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1), ).setIndexNames((0, "VISINET2-MIB", "uemSensorIndex"))
if mibBuilder.loadTexts: uemSensorTableEntry.setStatus('mandatory')
uemSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorIndex.setStatus('mandatory')
uemSensorEnvMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorEnvMonIndex.setStatus('mandatory')
uemSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fan", 2), ("voltage", 3), ("temperature", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorType.setStatus('mandatory')
uemSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorDescription.setStatus('mandatory')
uemSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorStatus.setStatus('mandatory')
uemSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorValue.setStatus('mandatory')
uemSensorNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorNominalValue.setStatus('mandatory')
uemSensorHighCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorHighCriticalValue.setStatus('mandatory')
uemSensorHighCriticalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorHighCriticalLabel.setStatus('mandatory')
uemSensorHighWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorHighWarningValue.setStatus('mandatory')
uemSensorHighWarningLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorHighWarningLabel.setStatus('mandatory')
uemSensorLowWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorLowWarningValue.setStatus('mandatory')
uemSensorLowWarningLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorLowWarningLabel.setStatus('mandatory')
uemSensorLowCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uemSensorLowCriticalValue.setStatus('mandatory')
uemSensorLowCriticalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorLowCriticalLabel.setStatus('mandatory')
uemSensorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSensorEnabled.setStatus('mandatory')
uemSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 6, 18), )
if mibBuilder.loadTexts: uemSwitchTable.setStatus('mandatory')
uemSwitchTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1), ).setIndexNames((0, "VISINET2-MIB", "uemSwitchIndex"))
if mibBuilder.loadTexts: uemSwitchTableEntry.setStatus('mandatory')
uemSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchIndex.setStatus('mandatory')
uemSwitchEnvMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchEnvMonIndex.setStatus('mandatory')
uemSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchDescription.setStatus('mandatory')
uemSwitchContext = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchContext.setStatus('mandatory')
uemSwitchCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchCurrentState.setStatus('mandatory')
uemSwitchExpectedState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchExpectedState.setStatus('mandatory')
uemSwitchEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 6, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uemSwitchEnabled.setStatus('mandatory')
uemTrapConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,1))
uemTrapSensorCritical = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,2)).setObjects(("VISINET2-MIB", "uemSensorIndex"), ("VISINET2-MIB", "uemSensorType"), ("VISINET2-MIB", "uemSensorDescription"), ("VISINET2-MIB", "uemSensorStatus"), ("VISINET2-MIB", "uemSensorValue"), ("VISINET2-MIB", "uemSensorNominalValue"), ("VISINET2-MIB", "uemTrapSeverity"))
uemTrapSensorWarning = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,3)).setObjects(("VISINET2-MIB", "uemSensorIndex"), ("VISINET2-MIB", "uemSensorType"), ("VISINET2-MIB", "uemSensorDescription"), ("VISINET2-MIB", "uemSensorStatus"), ("VISINET2-MIB", "uemSensorValue"), ("VISINET2-MIB", "uemSensorNominalValue"), ("VISINET2-MIB", "uemTrapSeverity"))
uemTrapSensorNormal = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,4)).setObjects(("VISINET2-MIB", "uemSensorIndex"), ("VISINET2-MIB", "uemSensorType"), ("VISINET2-MIB", "uemSensorDescription"), ("VISINET2-MIB", "uemSensorStatus"), ("VISINET2-MIB", "uemSensorValue"), ("VISINET2-MIB", "uemSensorNominalValue"), ("VISINET2-MIB", "uemTrapSeverity"))
uemTrapSwitchAlert = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,5)).setObjects(("VISINET2-MIB", "uemSwitchIndex"), ("VISINET2-MIB", "uemSwitchDescription"), ("VISINET2-MIB", "uemSwitchContext"), ("VISINET2-MIB", "uemTrapSeverity"))
uemTrapSwitchNormal = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 6) + (0,6)).setObjects(("VISINET2-MIB", "uemSwitchIndex"), ("VISINET2-MIB", "uemSwitchDescription"), ("VISINET2-MIB", "uemSwitchContext"), ("VISINET2-MIB", "uemTrapSeverity"))
cfgAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 7))
cfgAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentVersion.setStatus('mandatory')
cfgAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentRevision.setStatus('mandatory')
cfgAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBVersion.setStatus('mandatory')
cfgAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBRevision.setStatus('mandatory')
cfgAgentBIOSVendor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVendor.setStatus('mandatory')
cfgAgentBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVersion.setStatus('mandatory')
cfgAgentBIOSDate = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSDate.setStatus('mandatory')
cfgAgentBIOSsROMInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSsROMInKb.setStatus('mandatory')
cfgAgentBIOSBusSupport = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSBusSupport.setStatus('mandatory')
cfgAgentBIOSAddress = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSAddress.setStatus('mandatory')
cfgAgentBIOSInterruptId = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSInterruptId.setStatus('mandatory')
cfgAgentnCPUs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnCPUs.setStatus('mandatory')
cfgAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 13), )
if mibBuilder.loadTexts: cfgAgentCPUsTbl.setStatus('mandatory')
cfgAgentCPUsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1), )
if mibBuilder.loadTexts: cfgAgentCPUsTblEntry.setStatus('mandatory')
cfgAgentCPUClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUClass.setStatus('mandatory')
cfgAgentCPUName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUName.setStatus('mandatory')
cfgAgentCPUVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUVendor.setStatus('mandatory')
cfgAgentCPUSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUSpeed.setStatus('mandatory')
cfgAgentCPUsCacheInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUsCacheInKb.setStatus('mandatory')
cfgAgentCPUState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUState.setStatus('mandatory')
cfgAgentSysName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysName.setStatus('mandatory')
cfgAgentSysBoardVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysBoardVersion.setStatus('mandatory')
cfgAgentSysUptimeMilSec = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysUptimeMilSec.setStatus('mandatory')
cfgAgentSysOS = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysOS.setStatus('mandatory')
cfgAgentSysnDMAs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysnDMAs.setStatus('mandatory')
cfgAgentnIRQs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnIRQs.setStatus('mandatory')
cfgAgentIRQsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 20), )
if mibBuilder.loadTexts: cfgAgentIRQsTbl.setStatus('mandatory')
cfgAgentIRQsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1), )
if mibBuilder.loadTexts: cfgAgentIRQsTblEntry.setStatus('mandatory')
cfgAgentIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQ.setStatus('mandatory')
cfgAgentIRQOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQOwner.setStatus('mandatory')
cfgAgentIRQBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQBus.setStatus('mandatory')
cfgAgentIRQClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQClass.setStatus('mandatory')
cfgAgentMemSizeInMb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSizeInMb.setStatus('mandatory')
cfgAgentMemType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemType.setStatus('mandatory')
cfgAgentMemSpeed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeed.setStatus('mandatory')
cfgAgentMemCacheInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemCacheInKb.setStatus('mandatory')
cfgAgentMemBanks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemBanks.setStatus('mandatory')
cfgAgentMemSpeedSupported = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeedSupported.setStatus('mandatory')
cfgAgentIOKbdType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOKbdType.setStatus('mandatory')
cfgAgentIOMouseType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOMouseType.setStatus('mandatory')
cfgAgentIOVidType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOVidType.setStatus('mandatory')
cfgAgentnSerials = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnSerials.setStatus('mandatory')
cfgAgentSerialsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 31), )
if mibBuilder.loadTexts: cfgAgentSerialsTbl.setStatus('mandatory')
cfgAgentSerialsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1), )
if mibBuilder.loadTexts: cfgAgentSerialsTblEntry.setStatus('mandatory')
cfgAgentSerialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSerialPort.setStatus('mandatory')
cfgAgentnParallels = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnParallels.setStatus('mandatory')
cfgAgentParallelsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 33), )
if mibBuilder.loadTexts: cfgAgentParallelsTbl.setStatus('mandatory')
cfgAgentParallelsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1), )
if mibBuilder.loadTexts: cfgAgentParallelsTblEntry.setStatus('mandatory')
cfgAgentParallelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentParallelPort.setStatus('mandatory')
cfgAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnControllers.setStatus('mandatory')
cfgAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 35), )
if mibBuilder.loadTexts: cfgAgentControllersTbl.setStatus('mandatory')
cfgAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1), )
if mibBuilder.loadTexts: cfgAgentControllersTblEntry.setStatus('mandatory')
cfgAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerType.setStatus('mandatory')
cfgAgentControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerName.setStatus('mandatory')
cfgAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerIRQ.setStatus('mandatory')
cfgAgentnTrapDests = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnTrapDests.setStatus('mandatory')
cfgAgentTrapDestsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 37), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTbl.setStatus('mandatory')
cfgAgentTrapDestsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTblEntry.setStatus('mandatory')
cfgAgentTrapDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentTrapDestId.setStatus('mandatory')
cfgAgentTrapDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAgentTrapDestIPAddr.setStatus('mandatory')
netAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 8))
netAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVersion.setStatus('mandatory')
netAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentRevision.setStatus('mandatory')
netAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBVersion.setStatus('mandatory')
netAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBRevision.setStatus('mandatory')
netAgentMachineName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMachineName.setStatus('mandatory')
netAgentLogonServer = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentLogonServer.setStatus('mandatory')
netAgentnNICs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentnNICs.setStatus('mandatory')
netAgentNICsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 8, 8), )
if mibBuilder.loadTexts: netAgentNICsTbl.setStatus('mandatory')
netAgentNICTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1), )
if mibBuilder.loadTexts: netAgentNICTblEntry.setStatus('mandatory')
netAgentVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVendorID.setStatus('mandatory')
netAgentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMACAddress.setStatus('mandatory')
netAgentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareVersion.setStatus('mandatory')
netAgentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareRevision.setStatus('mandatory')
netAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerType.setStatus('mandatory')
netAgentControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerPort.setStatus('mandatory')
netAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerIRQ.setStatus('mandatory')
netAgentControllerBaseIO = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerBaseIO.setStatus('mandatory')
netAgentDataSent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataSent.setStatus('mandatory')
netAgentDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataReceived.setStatus('mandatory')
netAgentNICDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentNICDriver.setStatus('mandatory')
netAgentDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDriverName.setStatus('mandatory')
sftAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 9))
sftAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentVersion.setStatus('mandatory')
sftAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentRevision.setStatus('mandatory')
sftAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBVersion.setStatus('mandatory')
sftAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBRevision.setStatus('mandatory')
sftAgentnPackages = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnPackages.setStatus('mandatory')
sftAgentPackagesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 6), )
if mibBuilder.loadTexts: sftAgentPackagesTbl.setStatus('mandatory')
sftAgentPackagesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1), )
if mibBuilder.loadTexts: sftAgentPackagesTblEntry.setStatus('mandatory')
sftAgentPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentPackage.setStatus('mandatory')
sftAgentnServices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnServices.setStatus('mandatory')
sftAgentServicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 8), )
if mibBuilder.loadTexts: sftAgentServicesTbl.setStatus('mandatory')
sftAgentServicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1), )
if mibBuilder.loadTexts: sftAgentServicesTblEntry.setStatus('mandatory')
sftAgentService = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentService.setStatus('mandatory')
sftAgentServiceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentServiceStartup.setStatus('mandatory')
sftAgentnDevices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnDevices.setStatus('mandatory')
sftAgentDevicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 10), )
if mibBuilder.loadTexts: sftAgentDevicesTbl.setStatus('mandatory')
sftAgentDevicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1), )
if mibBuilder.loadTexts: sftAgentDevicesTblEntry.setStatus('mandatory')
sftAgentDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDevice.setStatus('mandatory')
sftAgentDeviceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDeviceStartup.setStatus('mandatory')
strAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 10))
strAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVersion.setStatus('mandatory')
strAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentRevision.setStatus('mandatory')
strAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBVersion.setStatus('mandatory')
strAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBRevision.setStatus('mandatory')
strAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnControllers.setStatus('mandatory')
strAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 6), )
if mibBuilder.loadTexts: strAgentControllersTbl.setStatus('mandatory')
strAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1), )
if mibBuilder.loadTexts: strAgentControllersTblEntry.setStatus('mandatory')
strAgentCtlrType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrType.setStatus('mandatory')
strAgentCtlrVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrVendor.setStatus('mandatory')
strAgentCtlrFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrFirmware.setStatus('mandatory')
strAgentCtlrSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrSerialNo.setStatus('mandatory')
strAgentCtlrDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrDMA.setStatus('mandatory')
strAgentCtlrIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIRQ.setStatus('mandatory')
strAgentCtlrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrAddress.setStatus('mandatory')
strAgentCtlrIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIOPort.setStatus('mandatory')
strAgentnDisks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnDisks.setStatus('mandatory')
strAgentDisksTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 8), )
if mibBuilder.loadTexts: strAgentDisksTbl.setStatus('mandatory')
strAgentDisksTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1), )
if mibBuilder.loadTexts: strAgentDisksTblEntry.setStatus('mandatory')
strAgentDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskVendor.setStatus('mandatory')
strAgentDiskDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDescription.setStatus('mandatory')
strAgentDiskFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskFirmware.setStatus('mandatory')
strAgentDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskPort.setStatus('mandatory')
strAgentDiskBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskBus.setStatus('mandatory')
strAgentDiskLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskLUN.setStatus('mandatory')
strAgentDiskID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskID.setStatus('mandatory')
strAgentDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSerialNo.setStatus('mandatory')
strAgentDisknSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDisknSectors.setStatus('mandatory')
strAgentDiskDriveLetters = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDriveLetters.setStatus('mandatory')
strAgentDiskSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSizeInMb.setStatus('mandatory')
strAgentDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessable", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskState.setStatus('mandatory')
strAgentDiskXfersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskXfersPerSec.setStatus('mandatory')
strAgentDiskSmartCond = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("safe", 1), ("degraded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSmartCond.setStatus('mandatory')
strAgentnFloppies = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnFloppies.setStatus('mandatory')
strAgentFloppyTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 10), )
if mibBuilder.loadTexts: strAgentFloppyTbl.setStatus('mandatory')
strAgentFloppyTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1), )
if mibBuilder.loadTexts: strAgentFloppyTblEntry.setStatus('mandatory')
strAgentFlopVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopVendor.setStatus('mandatory')
strAgentFlopDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopDescription.setStatus('mandatory')
strAgentFlopFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopFirmware.setStatus('mandatory')
strAgentFlopSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopSerialNo.setStatus('mandatory')
strAgentnVolumes = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnVolumes.setStatus('mandatory')
strAgentVolumesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 12), )
if mibBuilder.loadTexts: strAgentVolumesTbl.setStatus('mandatory')
strAgentVolumesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1), )
if mibBuilder.loadTexts: strAgentVolumesTblEntry.setStatus('mandatory')
strAgentVolDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLetter.setStatus('mandatory')
strAgentVolDriveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLabel.setStatus('mandatory')
strAgentVolFileSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolFileSystemType.setStatus('mandatory')
strAgentVolCapacityInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolCapacityInMb.setStatus('mandatory')
strAgentVolClusterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolClusterSize.setStatus('mandatory')
strAgentVolPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolPercentUsed.setStatus('mandatory')
strAgentStateThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentStateThreshhold.setStatus('mandatory')
strAgentSpaceThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentSpaceThreshhold.setStatus('mandatory')
strAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 99), Integer32())
if mibBuilder.loadTexts: strAgentIndex.setStatus('mandatory')
strAgentStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,1)).setObjects(("VISINET2-MIB", "strAgentDiskState"), ("VISINET2-MIB", "strAgentIndex"))
strAgentSpaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,2)).setObjects(("VISINET2-MIB", "strAgentVolPercentUsed"), ("VISINET2-MIB", "strAgentIndex"))
strAgentSmartTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,3)).setObjects(("VISINET2-MIB", "strAgentDiskSmartCond"), ("VISINET2-MIB", "strAgentIndex"))
strAgentStateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,11)).setObjects(("VISINET2-MIB", "strAgentDiskState"), ("VISINET2-MIB", "strAgentIndex"))
strAgentSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,12)).setObjects(("VISINET2-MIB", "strAgentVolPercentUsed"), ("VISINET2-MIB", "strAgentIndex"))
strAgentSmartOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,13)).setObjects(("VISINET2-MIB", "strAgentDiskSmartCond"), ("VISINET2-MIB", "strAgentIndex"))
sysAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 11))
sysAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentVersion.setStatus('mandatory')
sysAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentRevision.setStatus('mandatory')
sysAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBVersion.setStatus('mandatory')
sysAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBRevision.setStatus('mandatory')
sysAgentCPUCyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUCyclesUsed.setStatus('mandatory')
sysAgentPCICyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPCICyclesUsed.setStatus('mandatory')
sysAgentInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentInterrupts.setStatus('mandatory')
sysAgentMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemorySize.setStatus('mandatory')
sysAgentMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemoryUsed.setStatus('mandatory')
sysAgentPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPageFaults.setStatus('mandatory')
sysAgentPageFaultThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentPageFaultThreshhold.setStatus('mandatory')
sysAgentMemoryThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentMemoryThreshhold.setStatus('mandatory')
sysAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 99), Integer32())
if mibBuilder.loadTexts: sysAgentIndex.setStatus('mandatory')
sysAgentMemTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,1)).setObjects(("VISINET2-MIB", "sysAgentMemoryUsed"), ("VISINET2-MIB", "sysAgentIndex"))
sysAgentPageTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,2)).setObjects(("VISINET2-MIB", "sysAgentPageFaults"), ("VISINET2-MIB", "sysAgentIndex"))
sysAgentMemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,11)).setObjects(("VISINET2-MIB", "sysAgentMemoryUsed"), ("VISINET2-MIB", "sysAgentIndex"))
sysAgentPageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,12)).setObjects(("VISINET2-MIB", "sysAgentPageFaults"), ("VISINET2-MIB", "sysAgentIndex"))
ecmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 12))
ecmAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVersion.setStatus('mandatory')
ecmAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentRevision.setStatus('mandatory')
ecmAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentMIBVersion.setStatus('mandatory')
ecmAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentMIBRevision.setStatus('mandatory')
ecmAgentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentFirmwareVersion.setStatus('mandatory')
ecmAgentnFans = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnFans.setStatus('mandatory')
ecmAgentFansTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 7), )
if mibBuilder.loadTexts: ecmAgentFansTbl.setStatus('mandatory')
ecmAgentFanTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 7, 1), )
if mibBuilder.loadTexts: ecmAgentFanTblEntry.setStatus('mandatory')
ecmAgentFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentFanPresent.setStatus('mandatory')
ecmAgentFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentFanState.setStatus('mandatory')
ecmAgentnPowers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnPowers.setStatus('mandatory')
ecmAgentPowersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 9), )
if mibBuilder.loadTexts: ecmAgentPowersTbl.setStatus('mandatory')
ecmAgentPowerTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 9, 1), )
if mibBuilder.loadTexts: ecmAgentPowerTblEntry.setStatus('mandatory')
ecmAgentPowerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentPowerPresent.setStatus('mandatory')
ecmAgentPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentPowerState.setStatus('mandatory')
ecmAgentnVolts = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnVolts.setStatus('mandatory')
ecmAgentVoltsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 11), )
if mibBuilder.loadTexts: ecmAgentVoltsTbl.setStatus('mandatory')
ecmAgentVoltTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1), )
if mibBuilder.loadTexts: ecmAgentVoltTblEntry.setStatus('mandatory')
ecmAgentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltage.setStatus('mandatory')
ecmAgentVoltLowFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltLowFail.setStatus('mandatory')
ecmAgentVoltLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltLowWarn.setStatus('mandatory')
ecmAgentVoltHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltHighWarn.setStatus('mandatory')
ecmAgentVoltHighFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltHighFail.setStatus('mandatory')
ecmAgentVoltState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentVoltState.setStatus('mandatory')
ecmAgentnTemps = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnTemps.setStatus('mandatory')
ecmAgentTempsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 13), )
if mibBuilder.loadTexts: ecmAgentTempsTbl.setStatus('mandatory')
ecmAgentTempTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1), )
if mibBuilder.loadTexts: ecmAgentTempTblEntry.setStatus('mandatory')
ecmAgentTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTemperature.setStatus('mandatory')
ecmAgentTempLowFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempLowFail.setStatus('mandatory')
ecmAgentTempLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempLowWarn.setStatus('mandatory')
ecmAgentTempHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempHighWarn.setStatus('mandatory')
ecmAgentTempHighFail = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempHighFail.setStatus('mandatory')
ecmAgentTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentTempState.setStatus('mandatory')
ecmAgentnCPUs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentnCPUs.setStatus('mandatory')
ecmAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 12, 15), )
if mibBuilder.loadTexts: ecmAgentCPUsTbl.setStatus('mandatory')
ecmAgentCPUTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 12, 15, 1), )
if mibBuilder.loadTexts: ecmAgentCPUTblEntry.setStatus('mandatory')
ecmAgentCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 12, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecmAgentCPUUsage.setStatus('mandatory')
ecmAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 12, 99), Integer32())
if mibBuilder.loadTexts: ecmAgentIndex.setStatus('mandatory')
ecmAgentFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,1)).setObjects(("VISINET2-MIB", "ecmAgentFanState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,2)).setObjects(("VISINET2-MIB", "ecmAgentPowerState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentFanOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,11)).setObjects(("VISINET2-MIB", "ecmAgentFanState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentPowerOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,12)).setObjects(("VISINET2-MIB", "ecmAgentPowerState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentVoltCritTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,3)).setObjects(("VISINET2-MIB", "ecmAgentVoltState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentVoltWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,4)).setObjects(("VISINET2-MIB", "ecmAgentVoltState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentVoltNormTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,5)).setObjects(("VISINET2-MIB", "ecmAgentVoltState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentTempCritTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,6)).setObjects(("VISINET2-MIB", "ecmAgentTempState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentTempWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,7)).setObjects(("VISINET2-MIB", "ecmAgentTempState"), ("VISINET2-MIB", "ecmAgentIndex"))
ecmAgentTempNormTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 12) + (0,8)).setObjects(("VISINET2-MIB", "ecmAgentTempState"), ("VISINET2-MIB", "ecmAgentIndex"))
evtAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999))
evtAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentVersion.setStatus('mandatory')
evtAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentRevision.setStatus('mandatory')
evtAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentMIBVersion.setStatus('mandatory')
evtAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentMIBRevision.setStatus('mandatory')
evtAgentnEventsQueued = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentnEventsQueued.setStatus('mandatory')
evtAgentnEventsReceived = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtAgentnEventsReceived.setStatus('mandatory')
evtAgentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1000), Integer32())
if mibBuilder.loadTexts: evtAgentIPAddress.setStatus('mandatory')
evtAgentSeverity = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1001), Integer32())
if mibBuilder.loadTexts: evtAgentSeverity.setStatus('mandatory')
evtAgentClass = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 999, 1002), Integer32())
if mibBuilder.loadTexts: evtAgentClass.setStatus('mandatory')
dmiVirusAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2001))
dmiMemoryAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003))
dmiGDIAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005))
dmiDiskAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007))
dmiSMARTAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2009))
dmiParityAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2015))
dmiPOSTAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 999, 2017))
dmiVirusDetected = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2001) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiVirtualMemoryOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003) + (0,0)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiVirtualMemoryLow = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiVirtualMemoryOut = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2003) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiGDIResourceOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005) + (0,0)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiGDIResourceLow = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiGDIResourceOut = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2005) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiDiskSpaceOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007) + (0,0)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiDiskSpaceLow = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiDiskSpaceOut = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2007) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiSMARTFailing = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2009) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiSMARTNowOK = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2009) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiParityCorrection = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2015) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiParityFailure = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2015) + (0,2)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
dmiPOSTError = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 999, 2017) + (0,1)).setObjects(("VISINET2-MIB", "evtAgentIPAddress"), ("VISINET2-MIB", "evtAgentSeverity"), ("VISINET2-MIB", "evtAgentClass"))
mibBuilder.exportSymbols("VISINET2-MIB", dmiDiskSpaceOut=dmiDiskSpaceOut, strAgentnControllers=strAgentnControllers, strAgentDiskSerialNo=strAgentDiskSerialNo, cfgAgentnParallels=cfgAgentnParallels, strAgentCtlrDMA=strAgentCtlrDMA, strAgentCtlrAddress=strAgentCtlrAddress, strAgentDiskState=strAgentDiskState, uemEnvMonUpTime=uemEnvMonUpTime, strAgentStateTrap=strAgentStateTrap, uemSensorLowCriticalLabel=uemSensorLowCriticalLabel, netAgentNICsTbl=netAgentNICsTbl, evtAgentVersion=evtAgentVersion, strAgentFloppyTbl=strAgentFloppyTbl, cfgAgentTrapDestsTblEntry=cfgAgentTrapDestsTblEntry, netAgent=netAgent, sftAgentnDevices=sftAgentnDevices, uemSensorHighWarningValue=uemSensorHighWarningValue, ecmAgentVoltLowFail=ecmAgentVoltLowFail, sysAgentMIBVersion=sysAgentMIBVersion, sftAgentVersion=sftAgentVersion, ecmAgentMIBRevision=ecmAgentMIBRevision, dmiGDIResourceOK=dmiGDIResourceOK, ecmAgent=ecmAgent, uemSwitchCurrentState=uemSwitchCurrentState, ecmAgentPowerOKTrap=ecmAgentPowerOKTrap, uemSwitchDescription=uemSwitchDescription, strAgentDiskPort=strAgentDiskPort, uemSensorLowWarningLabel=uemSensorLowWarningLabel, cfgAgentBIOSInterruptId=cfgAgentBIOSInterruptId, sftAgentMIBRevision=sftAgentMIBRevision, strAgentVolCapacityInMb=strAgentVolCapacityInMb, netAgentControllerBaseIO=netAgentControllerBaseIO, sftAgentRevision=sftAgentRevision, uemSensorHighCriticalLabel=uemSensorHighCriticalLabel, cfgAgentParallelsTbl=cfgAgentParallelsTbl, uemSensorIndex=uemSensorIndex, uemSensorHighWarningLabel=uemSensorHighWarningLabel, strAgentDiskDriveLetters=strAgentDiskDriveLetters, strAgentVolFileSystemType=strAgentVolFileSystemType, sysAgentPageFaults=sysAgentPageFaults, ecmAgentTempHighWarn=ecmAgentTempHighWarn, netAgentDataSent=netAgentDataSent, cfgAgentBIOSVendor=cfgAgentBIOSVendor, cfgAgentIOMouseType=cfgAgentIOMouseType, sysAgentInterrupts=sysAgentInterrupts, ecmAgentTempLowFail=ecmAgentTempLowFail, sftAgentDevice=sftAgentDevice, strAgentSpaceOkTrap=strAgentSpaceOkTrap, netAgentDataReceived=netAgentDataReceived, strAgentFlopVendor=strAgentFlopVendor, dmiParityCorrection=dmiParityCorrection, uemTrapSwitchAlert=uemTrapSwitchAlert, sftAgentDevicesTbl=sftAgentDevicesTbl, ecmAgentVoltage=ecmAgentVoltage, strAgentCtlrType=strAgentCtlrType, evtAgentMIBRevision=evtAgentMIBRevision, ecmAgentVoltCritTrap=ecmAgentVoltCritTrap, strAgentDiskDescription=strAgentDiskDescription, strAgentCtlrFirmware=strAgentCtlrFirmware, evtAgentMIBVersion=evtAgentMIBVersion, cfgAgentSerialsTbl=cfgAgentSerialsTbl, strAgentDiskSizeInMb=strAgentDiskSizeInMb, strAgentDiskVendor=strAgentDiskVendor, cfgAgentControllerType=cfgAgentControllerType, cfgAgentParallelsTblEntry=cfgAgentParallelsTblEntry, cfgAgentMIBVersion=cfgAgentMIBVersion, cfgAgentControllerIRQ=cfgAgentControllerIRQ, ecmAgentTempNormTrap=ecmAgentTempNormTrap, cfgAgentTrapDestIPAddr=cfgAgentTrapDestIPAddr, ecmAgentFirmwareVersion=ecmAgentFirmwareVersion, ecmAgentCPUUsage=ecmAgentCPUUsage, uemSensorValue=uemSensorValue, netAgentMACAddress=netAgentMACAddress, sysAgentIndex=sysAgentIndex, ecmAgentVoltState=ecmAgentVoltState, uemSwitchEnvMonIndex=uemSwitchEnvMonIndex, uemEnvMonitorTableEntry=uemEnvMonitorTableEntry, ecmAgentPowerState=ecmAgentPowerState, ecmAgentTempWarnTrap=ecmAgentTempWarnTrap, strAgentVolDriveLetter=strAgentVolDriveLetter, cfgAgentnSerials=cfgAgentnSerials, ecmAgentVoltNormTrap=ecmAgentVoltNormTrap, dmiDiskSpaceLow=dmiDiskSpaceLow, strAgentFlopFirmware=strAgentFlopFirmware, cfgAgentBIOSVersion=cfgAgentBIOSVersion, uemTrapSensorCritical=uemTrapSensorCritical, sysAgentPageTrap=sysAgentPageTrap, ecmAgentPowerPresent=ecmAgentPowerPresent, unisysOpen=unisysOpen, strAgentVolClusterSize=strAgentVolClusterSize, ecmAgentTempTblEntry=ecmAgentTempTblEntry, cfgAgentMemSpeed=cfgAgentMemSpeed, strAgentSmartOKTrap=strAgentSmartOKTrap, uemTrapSensorNormal=uemTrapSensorNormal, evtAgentSeverity=evtAgentSeverity, strAgentDiskLUN=strAgentDiskLUN, evtAgentClass=evtAgentClass, cfgAgentnCPUs=cfgAgentnCPUs, cfgAgentMemSpeedSupported=cfgAgentMemSpeedSupported, ecmAgentTempState=ecmAgentTempState, ecmAgentCPUsTbl=ecmAgentCPUsTbl, cfgAgentSysBoardVersion=cfgAgentSysBoardVersion, strAgentDiskXfersPerSec=strAgentDiskXfersPerSec, netAgentNICTblEntry=netAgentNICTblEntry, strAgentSpaceThreshhold=strAgentSpaceThreshhold, cfgAgentRevision=cfgAgentRevision, sftAgentDeviceStartup=sftAgentDeviceStartup, uemSensorType=uemSensorType, netAgentVersion=netAgentVersion, dmiSMARTNowOK=dmiSMARTNowOK, strAgentControllersTblEntry=strAgentControllersTblEntry, cfgAgentSysUptimeMilSec=cfgAgentSysUptimeMilSec, strAgentDisknSectors=strAgentDisknSectors, uemSensorEnvMonIndex=uemSensorEnvMonIndex, ecmAgentPowersTbl=ecmAgentPowersTbl, ecmAgentnFans=ecmAgentnFans, uemEnvMonitorTable=uemEnvMonitorTable, sftAgentServicesTblEntry=sftAgentServicesTblEntry, strAgentVolumesTblEntry=strAgentVolumesTblEntry, sftAgent=sftAgent, cfgAgentCPUClass=cfgAgentCPUClass, strAgentFlopDescription=strAgentFlopDescription, cfgAgentCPUsTblEntry=cfgAgentCPUsTblEntry, strAgentVolPercentUsed=strAgentVolPercentUsed, sysAgent=sysAgent, cfgAgentControllersTbl=cfgAgentControllersTbl, strAgentControllersTbl=strAgentControllersTbl, ecmAgentPowerTblEntry=ecmAgentPowerTblEntry, cfgAgentCPUState=cfgAgentCPUState, uemTrapSwitchNormal=uemTrapSwitchNormal, cfgAgentControllersTblEntry=cfgAgentControllersTblEntry, netAgentMIBVersion=netAgentMIBVersion, cfgAgentIOVidType=cfgAgentIOVidType, cfgAgentIRQ=cfgAgentIRQ, cfgAgentCPUVendor=cfgAgentCPUVendor, cfgAgentSysName=cfgAgentSysName, uemEnvMonFwRelDate=uemEnvMonFwRelDate, sftAgentPackagesTblEntry=sftAgentPackagesTblEntry, cfgAgentVersion=cfgAgentVersion, uemSwitchTable=uemSwitchTable, sysAgentPageFaultThreshhold=sysAgentPageFaultThreshhold, ecmAgentVoltHighFail=ecmAgentVoltHighFail, uemEnvMonIndex=uemEnvMonIndex, strAgentnFloppies=strAgentnFloppies, unisysEnvMonitor=unisysEnvMonitor, cfgAgentnTrapDests=cfgAgentnTrapDests, strAgentDiskBus=strAgentDiskBus, cfgAgentnIRQs=cfgAgentnIRQs, dmiMemoryAgent=dmiMemoryAgent, netAgentMachineName=netAgentMachineName, uemSensorNominalValue=uemSensorNominalValue, strAgentCtlrIOPort=strAgentCtlrIOPort, cfgAgentMemBanks=cfgAgentMemBanks, cfgAgentSerialPort=cfgAgentSerialPort, ecmAgentVersion=ecmAgentVersion, dmiDiskAgent=dmiDiskAgent, cfgAgentnControllers=cfgAgentnControllers, cfgAgentCPUsTbl=cfgAgentCPUsTbl, netAgentControllerIRQ=netAgentControllerIRQ, dmiGDIResourceLow=dmiGDIResourceLow, strAgentnVolumes=strAgentnVolumes, netAgentControllerType=netAgentControllerType, ecmAgentVoltsTbl=ecmAgentVoltsTbl, uemAgentRevMinor=uemAgentRevMinor, netAgentFirmwareVersion=netAgentFirmwareVersion, strAgentDisksTblEntry=strAgentDisksTblEntry, cfgAgent=cfgAgent, netAgentVendorID=netAgentVendorID, evtAgent=evtAgent, sysAgentMemorySize=sysAgentMemorySize, ecmAgentIndex=ecmAgentIndex, dmiVirusDetected=dmiVirusDetected, strAgentSpaceTrap=strAgentSpaceTrap, netAgentFirmwareRevision=netAgentFirmwareRevision, dmiDiskSpaceOK=dmiDiskSpaceOK, sftAgentnPackages=sftAgentnPackages, strAgentCtlrVendor=strAgentCtlrVendor, ecmAgentTempCritTrap=ecmAgentTempCritTrap, cfgAgentBIOSBusSupport=cfgAgentBIOSBusSupport, uemMibRevMinor=uemMibRevMinor, sftAgentPackage=sftAgentPackage, ecmAgentFansTbl=ecmAgentFansTbl, ecmAgentTempsTbl=ecmAgentTempsTbl, sftAgentServiceStartup=sftAgentServiceStartup, ecmAgentCPUTblEntry=ecmAgentCPUTblEntry, ecmAgentFanPresent=ecmAgentFanPresent, cfgAgentParallelPort=cfgAgentParallelPort, ecmAgentPowerTrap=ecmAgentPowerTrap, sftAgentnServices=sftAgentnServices, strAgentDiskSmartCond=strAgentDiskSmartCond, ecmAgentRevision=ecmAgentRevision, uemSensorTableEntry=uemSensorTableEntry, ecmAgentTempLowWarn=ecmAgentTempLowWarn, unisys=unisys, ecmAgentVoltWarnTrap=ecmAgentVoltWarnTrap, sftAgentDevicesTblEntry=sftAgentDevicesTblEntry, uemTrapsEnabled=uemTrapsEnabled, cfgAgentCPUName=cfgAgentCPUName, sysAgentPageOkTrap=sysAgentPageOkTrap, sysAgentMIBRevision=sysAgentMIBRevision, strAgentIndex=strAgentIndex, netAgentLogonServer=netAgentLogonServer, uemEnvMonLocation=uemEnvMonLocation, dmiVirtualMemoryOK=dmiVirtualMemoryOK, strAgent=strAgent, netAgentNICDriver=netAgentNICDriver, uemTrapSeverity=uemTrapSeverity, strAgentSmartTrap=strAgentSmartTrap, netAgentnNICs=netAgentnNICs, cfgAgentIRQsTblEntry=cfgAgentIRQsTblEntry, sysAgentMemOkTrap=sysAgentMemOkTrap, sysAgentPCICyclesUsed=sysAgentPCICyclesUsed, uemSensorHighCriticalValue=uemSensorHighCriticalValue, uemAgentRevMajor=uemAgentRevMajor, uemSensorLowCriticalValue=uemSensorLowCriticalValue, netAgentMIBRevision=netAgentMIBRevision, netAgentControllerPort=netAgentControllerPort, cfgAgentCPUsCacheInKb=cfgAgentCPUsCacheInKb, strAgentRevision=strAgentRevision, cfgAgentIRQOwner=cfgAgentIRQOwner, cfgAgentTrapDestsTbl=cfgAgentTrapDestsTbl, strAgentVolDriveLabel=strAgentVolDriveLabel, ecmAgentTempHighFail=ecmAgentTempHighFail, cfgAgentSysnDMAs=cfgAgentSysnDMAs, uemSensorStatus=uemSensorStatus, sysAgentVersion=sysAgentVersion, ecmAgentVoltLowWarn=ecmAgentVoltLowWarn, uemSensorTable=uemSensorTable, uemSwitchIndex=uemSwitchIndex, uemEnvMonType=uemEnvMonType, cfgAgentMemCacheInKb=cfgAgentMemCacheInKb, sftAgentService=sftAgentService, cfgAgentSerialsTblEntry=cfgAgentSerialsTblEntry, strAgentDiskID=strAgentDiskID, cfgAgentMemType=cfgAgentMemType, dmiGDIAgent=dmiGDIAgent, dmiPOSTError=dmiPOSTError, netAgentRevision=netAgentRevision, cfgAgentMemSizeInMb=cfgAgentMemSizeInMb, uemSensorLowWarningValue=uemSensorLowWarningValue, ecmAgentnCPUs=ecmAgentnCPUs, sysAgentRevision=sysAgentRevision, uemEnvMonFwRevMinor=uemEnvMonFwRevMinor, evtAgentnEventsQueued=evtAgentnEventsQueued, dmiVirtualMemoryOut=dmiVirtualMemoryOut, cfgAgentTrapDestId=cfgAgentTrapDestId, cfgAgentCPUSpeed=cfgAgentCPUSpeed, strAgentStateThreshhold=strAgentStateThreshhold, cfgAgentBIOSsROMInKb=cfgAgentBIOSsROMInKb, dmiGDIResourceOut=dmiGDIResourceOut, sysAgentMemTrap=sysAgentMemTrap, uemSwitchTableEntry=uemSwitchTableEntry, dmiVirtualMemoryLow=dmiVirtualMemoryLow, dmiSMARTAgent=dmiSMARTAgent)
mibBuilder.exportSymbols("VISINET2-MIB", cfgAgentBIOSDate=cfgAgentBIOSDate, uemEnvMonFwRevMajor=uemEnvMonFwRevMajor, uemTrapSensorWarning=uemTrapSensorWarning, cfgAgentIOKbdType=cfgAgentIOKbdType, cfgAgentSysOS=cfgAgentSysOS, ecmAgentFanOKTrap=ecmAgentFanOKTrap, cfgAgentIRQClass=cfgAgentIRQClass, strAgentnDisks=strAgentnDisks, sftAgentMIBVersion=sftAgentMIBVersion, uemMibRevMajor=uemMibRevMajor, uemSensorDescription=uemSensorDescription, ecmAgentMIBVersion=ecmAgentMIBVersion, strAgentMIBRevision=strAgentMIBRevision, evtAgentRevision=evtAgentRevision, strAgentCtlrIRQ=strAgentCtlrIRQ, ecmAgentFanState=ecmAgentFanState, cfgAgentControllerName=cfgAgentControllerName, dmiParityFailure=dmiParityFailure, ecmAgentVoltHighWarn=ecmAgentVoltHighWarn, cfgAgentBIOSAddress=cfgAgentBIOSAddress, uemSwitchEnabled=uemSwitchEnabled, strAgentDisksTbl=strAgentDisksTbl, ecmAgentnVolts=ecmAgentnVolts, ecmAgentTemperature=ecmAgentTemperature, sysAgentMemoryThreshhold=sysAgentMemoryThreshhold, strAgentVersion=strAgentVersion, evtAgentnEventsReceived=evtAgentnEventsReceived, dmiParityAgent=dmiParityAgent, ecmAgentnTemps=ecmAgentnTemps, ecmAgentFanTrap=ecmAgentFanTrap, uemTrapConfigurationChange=uemTrapConfigurationChange, ecmAgentnPowers=ecmAgentnPowers, netAgentDriverName=netAgentDriverName, strAgentVolumesTbl=strAgentVolumesTbl, strAgentStateOkTrap=strAgentStateOkTrap, sftAgentPackagesTbl=sftAgentPackagesTbl, strAgentCtlrSerialNo=strAgentCtlrSerialNo, strAgentFlopSerialNo=strAgentFlopSerialNo, strAgentFloppyTblEntry=strAgentFloppyTblEntry, sysAgentMemoryUsed=sysAgentMemoryUsed, strAgentDiskFirmware=strAgentDiskFirmware, ecmAgentVoltTblEntry=ecmAgentVoltTblEntry, evtAgentIPAddress=evtAgentIPAddress, dmiSMARTFailing=dmiSMARTFailing, strAgentMIBVersion=strAgentMIBVersion, cfgAgentIRQsTbl=cfgAgentIRQsTbl, sysAgentCPUCyclesUsed=sysAgentCPUCyclesUsed, sftAgentServicesTbl=sftAgentServicesTbl, uemSwitchExpectedState=uemSwitchExpectedState, uemSensorEnabled=uemSensorEnabled, cfgAgentIRQBus=cfgAgentIRQBus, cfgAgentMIBRevision=cfgAgentMIBRevision, uemSwitchContext=uemSwitchContext, uemSystemDescription=uemSystemDescription, ecmAgentFanTblEntry=ecmAgentFanTblEntry, dmiPOSTAgent=dmiPOSTAgent, dmiVirusAgent=dmiVirusAgent)
