#
# PySNMP MIB module ASANTE-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASANTE-SWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, Unsigned32, ObjectIdentity, MibIdentifier, iso, Integer32, Counter64, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, Gauge32, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "Unsigned32", "ObjectIdentity", "MibIdentifier", "iso", "Integer32", "Counter64", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "Gauge32", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

asante = MibIdentifier((1, 3, 6, 1, 4, 1, 298))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1))
agentSw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 1))
agentFw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 2))
agentHw = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 3))
agentNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5))
ipagentProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1))
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5))
eAsntSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1))
eSWAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1))
eSWAgentSW = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1))
eSWAgentHW = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2))
eSWAgentFW = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 3))
eSWBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2))
eSWCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3))
eSWMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2))
concProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2))
intraswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 11))
intrastack = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 12))
friendlyswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 13))
intraSwitch6216M = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 16))
intraSwitch6224 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 17))
intraCore8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 22))
intraCore9000 = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 2, 2, 23))
agentRunTimeImageMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMajorVer.setStatus('mandatory')
agentRunTimeImageMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRunTimeImageMinorVer.setStatus('mandatory')
agentImageLoadMode = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("localBoot", 2), ("netBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentImageLoadMode.setStatus('mandatory')
agentRemoteBootInfo = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("eepromBootInfo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRemoteBootInfo.setStatus('mandatory')
agentRemoteBootProtocol = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bootp-tftp", 2), ("tftp-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootProtocol.setStatus('mandatory')
agentRemoteBootFile = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteBootFile.setStatus('mandatory')
agentOutBandDialString = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandDialString.setStatus('mandatory')
agentOutBandBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("b1200", 2), ("b2400", 3), ("b4800", 4), ("b9600", 5), ("b19200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutBandBaudRate.setStatus('mandatory')
agentReset = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("not-reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReset.setStatus('mandatory')
agentHwReVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwReVer.setStatus('mandatory')
agentHwVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwVer.setStatus('mandatory')
agentFwMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMajorVer.setStatus('mandatory')
agentFwMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFwMinorVer.setStatus('mandatory')
agentNetProtoStkCapMap = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetProtoStkCapMap.setStatus('mandatory')
ipagentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpAddr.setStatus('mandatory')
ipagentIpNetMask = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentIpNetMask.setStatus('mandatory')
ipagentDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentDefaultGateway.setStatus('mandatory')
ipagentBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentBootServerAddr.setStatus('mandatory')
ipagentUnAuthIP = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthIP.setStatus('mandatory')
ipagentUnAuthComm = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentUnAuthComm.setStatus('mandatory')
ipagentTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2), )
if mibBuilder.loadTexts: ipagentTrapRcvrTable.setStatus('mandatory')
ipagentTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "ipagentTrapRcvrIpAddr"))
if mibBuilder.loadTexts: ipagentTrapRcvrEntry.setStatus('mandatory')
ipagentTrapRcvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipagentTrapRcvrIpAddr.setStatus('mandatory')
ipagentTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrStatus.setStatus('mandatory')
ipagentTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 1, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipagentTrapRcvrComm.setStatus('mandatory')
eSWUpDownloadAction = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("download", 3), ("upload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWUpDownloadAction.setStatus('mandatory')
eSWUpDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("action-Success", 2), ("action-Failure", 3), ("in-Progress", 4), ("no-Action", 5), ("configError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWUpDownloadStatus.setStatus('mandatory')
eSWRemoteDownloadFile = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("config-File", 2), ("image-File", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteDownloadFile.setStatus('mandatory')
eSWRemoteConfigServer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteConfigServer.setStatus('mandatory')
eSWRemoteConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteConfigFileName.setStatus('mandatory')
eSWConfigRetryCounter = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWConfigRetryCounter.setStatus('mandatory')
eSWRemoteImageServer = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteImageServer.setStatus('mandatory')
eSWRemoteImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteImageFileName.setStatus('mandatory')
eSWImageRetryCounter = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWImageRetryCounter.setStatus('mandatory')
eSWActiveImageBank = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bank1", 2), ("bank2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWActiveImageBank.setStatus('mandatory')
eSWRemoteDownloadImageBank = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bank1", 2), ("bank2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWRemoteDownloadImageBank.setStatus('mandatory')
eSWResetWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWResetWaitTime.setStatus('mandatory')
eSWResetLeftTime = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWResetLeftTime.setStatus('mandatory')
eSWBankImageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14), )
if mibBuilder.loadTexts: eSWBankImageInfoTable.setStatus('mandatory')
eSWBankImageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWBankIndex"))
if mibBuilder.loadTexts: eSWBankImageInfoEntry.setStatus('mandatory')
eSWBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWBankIndex.setStatus('mandatory')
eSWMajorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMajorVer.setStatus('mandatory')
eSWMinorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMinorVer.setStatus('mandatory')
eSWDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWDateTime.setStatus('mandatory')
eSWTelnetSessions = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTelnetSessions.setStatus('mandatory')
eSWTelnetSessionActive = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTelnetSessionActive.setStatus('mandatory')
eSWTelnetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWTelnetTimeOut.setStatus('mandatory')
eSWSTP = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSTP.setStatus('mandatory')
eSWUserInterfaceTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWUserInterfaceTimeOut.setStatus('mandatory')
eSWBCastMcastThreshold = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWBCastMcastThreshold.setStatus('mandatory')
eSWBCastMcastDuration = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWBCastMcastDuration.setStatus('mandatory')
eSWCfgFileErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWCfgFileErrStatus.setStatus('mandatory')
eSWDRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWDRAMSize.setStatus('mandatory')
eSWFlashRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWFlashRAMSize.setStatus('mandatory')
eSWEEPROMSize = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWEEPROMSize.setStatus('mandatory')
eSWType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("thunderBird", 2), ("intraStack", 3), ("intraSwitch", 4), ("intraCore8000", 5), ("intraCore9000", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWType.setStatus('mandatory')
eSWBkpType = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("no-Bkp", 2), ("intraStack", 3), ("intraSwitch6216M", 4), ("intraSwitch6224", 5), ("intraSwitch6224M", 6), ("intraCore8000", 7), ("intraCore9000", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWBkpType.setStatus('mandatory')
eSWGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGroupCapacity.setStatus('mandatory')
eSWStackLastChange = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWStackLastChange.setStatus('mandatory')
eSWGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5), )
if mibBuilder.loadTexts: eSWGroupInfoTable.setStatus('mandatory')
eSWGroupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGrpIndex"))
if mibBuilder.loadTexts: eSWGroupInfoEntry.setStatus('mandatory')
eSWGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpIndex.setStatus('mandatory')
eSWGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpID.setStatus('mandatory')
eSWGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGrpState.setStatus('mandatory')
eSWGrpNumofPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpNumofPorts.setStatus('mandatory')
eSWGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("intraSwitch", 3), ("intraStack-Base", 4), ("intraStack-FX8", 5), ("intraStack-TX16", 6), ("enterprise6216M-TX16", 7), ("enterprise6224M-TX24", 8), ("intraCore8000", 9), ("intraCore-RJ45", 10), ("intraCore-RJ21", 11), ("intraCore-GIGA", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpType.setStatus('mandatory')
eSWGrpDescrption = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpDescrption.setStatus('mandatory')
eSWGrpLED = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpLED.setStatus('mandatory')
eSWGrpFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("no-fan", 2), ("normal", 3), ("fail", 4), ("fan-1-bad", 5), ("fan-2-bad", 6), ("fan-1-2-bad", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpFanStatus.setStatus('mandatory')
eSWGrpNumofExpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpNumofExpPorts.setStatus('mandatory')
eSWGrpLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpLastChange.setStatus('mandatory')
eSWGrpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noReset", 2), ("reset", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpReset.setStatus('mandatory')
eSWPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6), )
if mibBuilder.loadTexts: eSWPortInfoTable.setStatus('mandatory')
eSWPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWPortGrpIndex"), (0, "ASANTE-SWITCH-MIB", "eSWPortIndex"))
if mibBuilder.loadTexts: eSWPortInfoEntry.setStatus('mandatory')
eSWPortGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortGrpIndex.setStatus('mandatory')
eSWPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortIndex.setStatus('mandatory')
eSWPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mii-Empty", 2), ("mii-FL", 3), ("mii-RJ45", 4), ("mii-FX", 5), ("rj45", 6), ("foil", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortType.setStatus('mandatory')
eSWPortAutoNegAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("with", 2), ("without", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortAutoNegAbility.setStatus('mandatory')
eSWPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortLink.setStatus('mandatory')
eSWPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("m10-Mbps", 2), ("m100-Mbps", 3), ("g1-Gbps", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortSpeed.setStatus('mandatory')
eSWPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("half-Duplex", 2), ("full-Duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortDuplex.setStatus('mandatory')
eSWGpPtInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7), )
if mibBuilder.loadTexts: eSWGpPtInfoTable.setStatus('mandatory')
eSWGpPtInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGpPtInfoIndex"))
if mibBuilder.loadTexts: eSWGpPtInfoEntry.setStatus('mandatory')
eSWGpPtInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoIndex.setStatus('mandatory')
eSWGpPtInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoType.setStatus('mandatory')
eSWGpPtInfoAutoNegAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoAutoNegAbility.setStatus('mandatory')
eSWGpPtInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoLink.setStatus('mandatory')
eSWGpPtInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoSpeed.setStatus('mandatory')
eSWGpPtInfoDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtInfoDuplex.setStatus('mandatory')
eSWPtMacInfoTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8), )
if mibBuilder.loadTexts: eSWPtMacInfoTable.setStatus('mandatory')
eSWPtMacInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWPtMacPort"), (0, "ASANTE-SWITCH-MIB", "eSWPtMacMACADDR"))
if mibBuilder.loadTexts: eSWPtMacInfoEntry.setStatus('mandatory')
eSWPtMacPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPtMacPort.setStatus('mandatory')
eSWPtMacMACADDR = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPtMacMACADDR.setStatus('mandatory')
eSWVlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9))
eSWVlanVersion = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanVersion.setStatus('mandatory')
eSWVlanMaxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanMaxCapacity.setStatus('mandatory')
eSWVlanTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanTypesSupported.setStatus('mandatory')
eSWVlanTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4), )
if mibBuilder.loadTexts: eSWVlanTable.setStatus('mandatory')
eSWVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWVLANIndex"))
if mibBuilder.loadTexts: eSWVlanEntry.setStatus('mandatory')
eSWVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVLANIndex.setStatus('mandatory')
eSWVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWVlanName.setStatus('mandatory')
eSWVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWVlanID.setStatus('mandatory')
eSWVlanMemberSet = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVlanMemberSet.setStatus('mandatory')
eSWVlanMgmAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWVlanMgmAccess.setStatus('mandatory')
eSWTrunkBundleCapacity = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundleCapacity.setStatus('mandatory')
eSWTrunkBundleTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11), )
if mibBuilder.loadTexts: eSWTrunkBundleTable.setStatus('mandatory')
eSWTrunkBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWTrunkBundleIndex"))
if mibBuilder.loadTexts: eSWTrunkBundleEntry.setStatus('mandatory')
eSWTrunkBundleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundleIndex.setStatus('mandatory')
eSWTrunkBundlePortA = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundlePortA.setStatus('mandatory')
eSWTrunkBundlePortB = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWTrunkBundlePortB.setStatus('mandatory')
eSWTrunkBundleState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWTrunkBundleState.setStatus('mandatory')
eSWNetSecurityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13))
eSWNetworkSecurityVersion = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWNetworkSecurityVersion.setStatus('mandatory')
eSWNetworkSecurityMAXLevels = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWNetworkSecurityMAXLevels.setStatus('mandatory')
eSWSecurityTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWSecurityTypesSupported.setStatus('mandatory')
eSWSecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4), )
if mibBuilder.loadTexts: eSWSecConfigTable.setStatus('mandatory')
eSWSecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWSecPortIndex"))
if mibBuilder.loadTexts: eSWSecConfigEntry.setStatus('mandatory')
eSWSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWSecPortIndex.setStatus('mandatory')
eSWSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("newNodeDetection", 1), ("knownMACAddressForwarding", 2), ("restrictedKnownMACAddressForwarding", 3), ("knownMACAddressForwardingWithIntruderLock", 4), ("normalPort", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSecurityLevel.setStatus('mandatory')
eSWSecMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSecMonitorPort.setStatus('mandatory')
eSWSecurityTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWSecurityTrapEnable.setStatus('mandatory')
eSWSecIncSetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7), )
if mibBuilder.loadTexts: eSWSecIncSetConfigTable.setStatus('mandatory')
eSWSecIncSetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWIncSetPort"), (0, "ASANTE-SWITCH-MIB", "eSWIncSetMACAddr"))
if mibBuilder.loadTexts: eSWSecIncSetConfigEntry.setStatus('mandatory')
eSWIncSetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIncSetPort.setStatus('mandatory')
eSWIncSetMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIncSetMACAddr.setStatus('mandatory')
eSWIncSetMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWIncSetMACStatus.setStatus('mandatory')
eSWSecIntMACAddrTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8), )
if mibBuilder.loadTexts: eSWSecIntMACAddrTable.setStatus('mandatory')
eSWSecIntMACAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWIntMACAddrPort"), (0, "ASANTE-SWITCH-MIB", "eSWIntMACAddr"))
if mibBuilder.loadTexts: eSWSecIntMACAddrEntry.setStatus('mandatory')
eSWIntMACAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIntMACAddrPort.setStatus('mandatory')
eSWIntMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 13, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWIntMACAddr.setStatus('mandatory')
eSWFilteringInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14))
eSWFilteringTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWFilteringTypesSupported.setStatus('mandatory')
eSWFiltMACVLANBasedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2), )
if mibBuilder.loadTexts: eSWFiltMACVLANBasedConfigTable.setStatus('mandatory')
eSWFiltMACVLANBasedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWVLANIndex"), (0, "ASANTE-SWITCH-MIB", "eSWFiltMACAddr"))
if mibBuilder.loadTexts: eSWFiltMACVLANBasedConfigEntry.setStatus('mandatory')
eSWVIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWVIDIndex.setStatus('mandatory')
eSWFiltMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWFiltMACAddr.setStatus('mandatory')
eSWFiltMACSts = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltMACSts.setStatus('mandatory')
eSWFiltMACPortBasedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3), )
if mibBuilder.loadTexts: eSWFiltMACPortBasedConfigTable.setStatus('mandatory')
eSWFiltMACPortBasedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWFiltPortIndex"), (0, "ASANTE-SWITCH-MIB", "eSWFiltPMACAddr"))
if mibBuilder.loadTexts: eSWFiltMACPortBasedConfigEntry.setStatus('mandatory')
eSWFiltPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltPortIndex.setStatus('mandatory')
eSWFiltPMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltPMACAddr.setStatus('mandatory')
eSWFiltPMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltPMACStatus.setStatus('mandatory')
eSWFiltProtVLANBasedCFGTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4), )
if mibBuilder.loadTexts: eSWFiltProtVLANBasedCFGTable.setStatus('mandatory')
eSWFiltProtVLANBasedCFGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWVLANIndex"))
if mibBuilder.loadTexts: eSWFiltProtVLANBasedCFGEntry.setStatus('mandatory')
eSWFiltProtocolVID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltProtocolVID.setStatus('mandatory')
eSWFiltVLANProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltVLANProtocolType.setStatus('mandatory')
eSWFiltProtPortBasedCFGTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5), )
if mibBuilder.loadTexts: eSWFiltProtPortBasedCFGTable.setStatus('mandatory')
eSWFiltProtPortBasedCFGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWPortIndex"))
if mibBuilder.loadTexts: eSWFiltProtPortBasedCFGEntry.setStatus('mandatory')
eSWFiltProtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltProtPort.setStatus('mandatory')
eSWFiltProtcolType = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 2, 14, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWFiltProtcolType.setStatus('mandatory')
eSWPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: eSWPortCtrlTable.setStatus('mandatory')
eSWPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGrpPtCtrlIndex"), (0, "ASANTE-SWITCH-MIB", "eSWPortCtrlIndex"))
if mibBuilder.loadTexts: eSWPortCtrlEntry.setStatus('mandatory')
eSWGrpPtCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGrpPtCtrlIndex.setStatus('mandatory')
eSWPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortCtrlIndex.setStatus('mandatory')
eSWPortCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlState.setStatus('mandatory')
eSWPortCtrlBcastFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlBcastFilter.setStatus('mandatory')
eSWPortCtrlStNFw = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlStNFw.setStatus('mandatory')
eSWPortCtrlSTP = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortCtrlSTP.setStatus('mandatory')
eSWPortCtrlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlVlanID.setStatus('mandatory')
eSWPortCtrlVlanTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("enable8021Q", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlVlanTagging.setStatus('mandatory')
eSWPortCtrlVlanGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlVlanGroups.setStatus('mandatory')
eSWPortCtrlTrunkBundleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWPortCtrlTrunkBundleIndex.setStatus('mandatory')
eSWPortCtrlGVRPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlGVRPEnable.setStatus('mandatory')
eSWPortCtrlSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("newNodeDetection", 1), ("knownMACAddressForwarding", 2), ("restrictedKnownMACAddressForwarding", 3), ("knownMACAddressForwardingWithIntruderLock", 4), ("normalPort", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortCtrlSecurityLevel.setStatus('mandatory')
eSWPortProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWPortProtocolFilter.setStatus('mandatory')
eSWGpPtCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: eSWGpPtCtrlTable.setStatus('mandatory')
eSWGpPtCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWGpPtCtrlIndex"))
if mibBuilder.loadTexts: eSWGpPtCtrlEntry.setStatus('mandatory')
eSWGpPtCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtCtrlIndex.setStatus('mandatory')
eSWGpPtCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtCtrlState.setStatus('mandatory')
eSWGpPtCtrlBcastFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtCtrlBcastFilter.setStatus('mandatory')
eSWGpPtCtrlStNFw = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtCtrlStNFw.setStatus('mandatory')
eSWGpPtCtrlSTP = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWGpPtCtrlSTP.setStatus('mandatory')
eSWGpPtCtrlSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtCtrlSecurityLevel.setStatus('mandatory')
eSWGpPtProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWGpPtProtocolFilter.setStatus('mandatory')
eSWAutoPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: eSWAutoPortCtrlTable.setStatus('mandatory')
eSWAutoPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWAutoNegGrpIndex"), (0, "ASANTE-SWITCH-MIB", "eSWAutoNegPortIndex"))
if mibBuilder.loadTexts: eSWAutoPortCtrlEntry.setStatus('mandatory')
eSWAutoNegGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegGrpIndex.setStatus('mandatory')
eSWAutoNegPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegPortIndex.setStatus('mandatory')
eSWAutoNegAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWAutoNegAdminState.setStatus('mandatory')
eSWAutoNegRemoteAble = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("able", 2), ("not-able", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegRemoteAble.setStatus('mandatory')
eSWAutoNegAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("configuring", 2), ("complete", 3), ("disable", 4), ("parallel-detect-fail", 5), ("remote-fault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegAutoConfig.setStatus('mandatory')
eSWAutoNegLocalAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegLocalAbility.setStatus('mandatory')
eSWAutoNegAdvertisedAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWAutoNegAdvertisedAbility.setStatus('mandatory')
eSWAutoNegReceivedAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWAutoNegReceivedAbility.setStatus('mandatory')
eSWAutoNegRestartAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reStart", 2), ("noRestart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eSWAutoNegRestartAutoConfig.setStatus('mandatory')
eSWMonIPTable = MibTable((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1), )
if mibBuilder.loadTexts: eSWMonIPTable.setStatus('mandatory')
eSWMonIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1), ).setIndexNames((0, "ASANTE-SWITCH-MIB", "eSWMonIP"))
if mibBuilder.loadTexts: eSWMonIPEntry.setStatus('mandatory')
eSWMonIP = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonIP.setStatus('mandatory')
eSWMonMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonMAC.setStatus('mandatory')
eSWMonVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonVLANID.setStatus('mandatory')
eSWMonGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonGrp.setStatus('mandatory')
eSWMonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 298, 1, 5, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSWMonPort.setStatus('mandatory')
eSWFanFail = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,3)).setObjects(("ASANTE-SWITCH-MIB", "eSWGrpIndex"))
eSWExpPortConnectStateChange = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,4)).setObjects(("ASANTE-SWITCH-MIB", "eSWGrpIndex"), ("ASANTE-SWITCH-MIB", "eSWPortIndex"))
eSWIPSpoofing = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,5)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
eSWStationMove = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,6)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
eSWNewNodeDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,7)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
eSWIntruderDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,8)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWSecurityLevel"))
eSWIntruderPortDisable = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,9)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
eSWEnhIPSpoofing = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,10)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
eSWEnhStationMove = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,11)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonIP"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"))
eSWEnhNewNodeDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,12)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
eSWEnhIntruderDetected = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,13)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
eSWEnhIntruderPortDisable = NotificationType((1, 3, 6, 1, 4, 1, 298) + (0,14)).setObjects(("ASANTE-SWITCH-MIB", "eSWMonGrp"), ("ASANTE-SWITCH-MIB", "eSWMonPort"), ("ASANTE-SWITCH-MIB", "eSWMonMAC"), ("ASANTE-SWITCH-MIB", "eSWMonVLANID"), ("ASANTE-SWITCH-MIB", "eSWMonIP"))
mibBuilder.exportSymbols("ASANTE-SWITCH-MIB", eSWUpDownloadStatus=eSWUpDownloadStatus, eSWGroupInfoTable=eSWGroupInfoTable, eSWCtrl=eSWCtrl, agentFwMinorVer=agentFwMinorVer, intraswitch=intraswitch, eSWResetWaitTime=eSWResetWaitTime, eSWFiltProtcolType=eSWFiltProtcolType, snmpAgent=snmpAgent, eSWFiltMACAddr=eSWFiltMACAddr, eSWRemoteConfigServer=eSWRemoteConfigServer, eSWPortInfoTable=eSWPortInfoTable, eSWTrunkBundleEntry=eSWTrunkBundleEntry, eSWMonMAC=eSWMonMAC, eSWGpPtInfoEntry=eSWGpPtInfoEntry, eSWNetSecurityInfo=eSWNetSecurityInfo, eSWGpPtInfoType=eSWGpPtInfoType, eSWTrunkBundleIndex=eSWTrunkBundleIndex, eSWAutoNegLocalAbility=eSWAutoNegLocalAbility, eSWBankImageInfoTable=eSWBankImageInfoTable, eSWSecurityTrapEnable=eSWSecurityTrapEnable, eSWMonIP=eSWMonIP, eSWTelnetSessionActive=eSWTelnetSessionActive, eSWStackLastChange=eSWStackLastChange, eSWFanFail=eSWFanFail, eSWPortCtrlState=eSWPortCtrlState, eSWResetLeftTime=eSWResetLeftTime, eAsntSwitch=eAsntSwitch, ipagentTrapRcvrEntry=ipagentTrapRcvrEntry, friendlyswitch=friendlyswitch, eSWAgentFW=eSWAgentFW, agentFwMajorVer=agentFwMajorVer, eSWBankIndex=eSWBankIndex, eSWTrunkBundlePortB=eSWTrunkBundlePortB, agentRemoteBootInfo=agentRemoteBootInfo, eSWSecurityTypesSupported=eSWSecurityTypesSupported, eSWPtMacMACADDR=eSWPtMacMACADDR, eSWFiltProtocolVID=eSWFiltProtocolVID, eSWFiltVLANProtocolType=eSWFiltVLANProtocolType, eSWRemoteConfigFileName=eSWRemoteConfigFileName, eSWAutoNegAutoConfig=eSWAutoNegAutoConfig, ipagentDefaultGateway=ipagentDefaultGateway, eSWVlanMemberSet=eSWVlanMemberSet, eSWSecPortIndex=eSWSecPortIndex, eSWPortCtrlGVRPEnable=eSWPortCtrlGVRPEnable, eSWAutoNegAdvertisedAbility=eSWAutoNegAdvertisedAbility, agentFw=agentFw, eSWVlanInfo=eSWVlanInfo, eSWFiltPMACAddr=eSWFiltPMACAddr, asante=asante, eSWEEPROMSize=eSWEEPROMSize, eSWUpDownloadAction=eSWUpDownloadAction, eSWTrunkBundlePortA=eSWTrunkBundlePortA, eSWSTP=eSWSTP, agentHwVer=agentHwVer, eSWFiltMACPortBasedConfigTable=eSWFiltMACPortBasedConfigTable, eSWVIDIndex=eSWVIDIndex, intraCore8000=intraCore8000, eSWGpPtCtrlBcastFilter=eSWGpPtCtrlBcastFilter, eSWMonVLANID=eSWMonVLANID, eSWAutoNegRemoteAble=eSWAutoNegRemoteAble, eSWGrpNumofPorts=eSWGrpNumofPorts, eSWGrpLED=eSWGrpLED, agentHw=agentHw, eSWMonPort=eSWMonPort, intraSwitch6216M=intraSwitch6216M, eSWIncSetMACStatus=eSWIncSetMACStatus, eSWIntruderPortDisable=eSWIntruderPortDisable, eSWDRAMSize=eSWDRAMSize, eSWPortCtrlBcastFilter=eSWPortCtrlBcastFilter, ipagentBootServerAddr=ipagentBootServerAddr, eSWPtMacInfoEntry=eSWPtMacInfoEntry, eSWVlanMaxCapacity=eSWVlanMaxCapacity, eSWGpPtCtrlStNFw=eSWGpPtCtrlStNFw, eSWEnhIntruderDetected=eSWEnhIntruderDetected, ipagentUnAuthIP=ipagentUnAuthIP, eSWFiltProtPort=eSWFiltProtPort, eSWPortDuplex=eSWPortDuplex, eSWEnhIntruderPortDisable=eSWEnhIntruderPortDisable, eSWEnhIPSpoofing=eSWEnhIPSpoofing, eSWAgentHW=eSWAgentHW, agentNetProtocol=agentNetProtocol, eSWVlanVersion=eSWVlanVersion, eSWSecMonitorPort=eSWSecMonitorPort, eSWSecIntMACAddrTable=eSWSecIntMACAddrTable, eSWPortCtrlVlanID=eSWPortCtrlVlanID, eSWMonIPTable=eSWMonIPTable, eSWAutoPortCtrlTable=eSWAutoPortCtrlTable, eSWGpPtCtrlState=eSWGpPtCtrlState, agentRemoteBootFile=agentRemoteBootFile, agentOutBandBaudRate=agentOutBandBaudRate, ipagentTrapRcvrStatus=ipagentTrapRcvrStatus, ipagentProtocol=ipagentProtocol, eSWMajorVer=eSWMajorVer, eSWDateTime=eSWDateTime, eSWRemoteDownloadFile=eSWRemoteDownloadFile, eSWGrpType=eSWGrpType, eSWRemoteImageServer=eSWRemoteImageServer, eSWPortAutoNegAbility=eSWPortAutoNegAbility, eSWBkpType=eSWBkpType, eSWFiltMACPortBasedConfigEntry=eSWFiltMACPortBasedConfigEntry, eSWGrpReset=eSWGrpReset, eSWAutoPortCtrlEntry=eSWAutoPortCtrlEntry, eSWFiltMACVLANBasedConfigEntry=eSWFiltMACVLANBasedConfigEntry, eSWPortCtrlEntry=eSWPortCtrlEntry, eSWRemoteImageFileName=eSWRemoteImageFileName, agentNetProtoStkCapMap=agentNetProtoStkCapMap, eSWGpPtCtrlTable=eSWGpPtCtrlTable, eSWRemoteDownloadImageBank=eSWRemoteDownloadImageBank, eSWSecurityLevel=eSWSecurityLevel, eSWFiltPMACStatus=eSWFiltPMACStatus, eSWSecIncSetConfigEntry=eSWSecIncSetConfigEntry, eSWCfgFileErrStatus=eSWCfgFileErrStatus, eSWNetworkSecurityVersion=eSWNetworkSecurityVersion, eSWGrpPtCtrlIndex=eSWGrpPtCtrlIndex, agentRemoteBootProtocol=agentRemoteBootProtocol, eSWBCastMcastDuration=eSWBCastMcastDuration, eSWBasic=eSWBasic, eSWTrunkBundleState=eSWTrunkBundleState, eSWPortCtrlSecurityLevel=eSWPortCtrlSecurityLevel, eSWSecConfigTable=eSWSecConfigTable, eSWPortProtocolFilter=eSWPortProtocolFilter, eSWTelnetSessions=eSWTelnetSessions, eSWIncSetMACAddr=eSWIncSetMACAddr, eSWIntMACAddr=eSWIntMACAddr, eSWGpPtInfoLink=eSWGpPtInfoLink, eSWGrpFanStatus=eSWGrpFanStatus, eSWTrunkBundleCapacity=eSWTrunkBundleCapacity, agentReset=agentReset, ipagentTrapRcvrComm=ipagentTrapRcvrComm, eSWIPSpoofing=eSWIPSpoofing, eSWTelnetTimeOut=eSWTelnetTimeOut, intrastack=intrastack, eSWPtMacPort=eSWPtMacPort, eSWBankImageInfoEntry=eSWBankImageInfoEntry, eSWSecConfigEntry=eSWSecConfigEntry, eSWPortCtrlSTP=eSWPortCtrlSTP, eSWStationMove=eSWStationMove, eSWFilteringTypesSupported=eSWFilteringTypesSupported, eSWFiltMACSts=eSWFiltMACSts, eSWGpPtInfoAutoNegAbility=eSWGpPtInfoAutoNegAbility, agentOutBandDialString=agentOutBandDialString, productId=productId, eSWPortGrpIndex=eSWPortGrpIndex, eSWGpPtInfoDuplex=eSWGpPtInfoDuplex, eSWGpPtInfoTable=eSWGpPtInfoTable, eSWFiltProtPortBasedCFGEntry=eSWFiltProtPortBasedCFGEntry, products=products, ipagentTrapRcvrIpAddr=ipagentTrapRcvrIpAddr, eSWGrpID=eSWGrpID, eSWGpPtCtrlIndex=eSWGpPtCtrlIndex, eSWAutoNegReceivedAbility=eSWAutoNegReceivedAbility, agentRunTimeImageMinorVer=agentRunTimeImageMinorVer, eSWSecIncSetConfigTable=eSWSecIncSetConfigTable, eSWPortCtrlIndex=eSWPortCtrlIndex, eSWVlanEntry=eSWVlanEntry, eSWGpPtProtocolFilter=eSWGpPtProtocolFilter, eSWIntruderDetected=eSWIntruderDetected, ipagentTrapRcvrTable=ipagentTrapRcvrTable, eSWFiltProtVLANBasedCFGEntry=eSWFiltProtVLANBasedCFGEntry, eSWGrpDescrption=eSWGrpDescrption, eSWVlanTable=eSWVlanTable, eSWBCastMcastThreshold=eSWBCastMcastThreshold, eSWAgentSW=eSWAgentSW, eSWFlashRAMSize=eSWFlashRAMSize, eSWNetworkSecurityMAXLevels=eSWNetworkSecurityMAXLevels, intraCore9000=intraCore9000, eSWVlanMgmAccess=eSWVlanMgmAccess, ipagentIpNetMask=ipagentIpNetMask, eSWGpPtCtrlSecurityLevel=eSWGpPtCtrlSecurityLevel, eSWFiltProtVLANBasedCFGTable=eSWFiltProtVLANBasedCFGTable, eSWPortType=eSWPortType, agentRunTimeImageMajorVer=agentRunTimeImageMajorVer, eSWGrpState=eSWGrpState, eSWSecIntMACAddrEntry=eSWSecIntMACAddrEntry, eSWAutoNegPortIndex=eSWAutoNegPortIndex, eSWPortCtrlVlanTagging=eSWPortCtrlVlanTagging, eSWPortCtrlTable=eSWPortCtrlTable, eSWPortCtrlTrunkBundleIndex=eSWPortCtrlTrunkBundleIndex, eSWAutoNegAdminState=eSWAutoNegAdminState, eSWFiltPortIndex=eSWFiltPortIndex, agentHwReVer=agentHwReVer, eSWAutoNegGrpIndex=eSWAutoNegGrpIndex, eSWMonitor=eSWMonitor, eSWMinorVer=eSWMinorVer, eSWGrpLastChange=eSWGrpLastChange, eSWGpPtCtrlSTP=eSWGpPtCtrlSTP, eSWActiveImageBank=eSWActiveImageBank, ipagentUnAuthComm=ipagentUnAuthComm, eSWAutoNegRestartAutoConfig=eSWAutoNegRestartAutoConfig, eSWVlanName=eSWVlanName, eSWGpPtInfoSpeed=eSWGpPtInfoSpeed, eSWPortCtrlVlanGroups=eSWPortCtrlVlanGroups, eSWEnhNewNodeDetected=eSWEnhNewNodeDetected, eSWPortInfoEntry=eSWPortInfoEntry, eSWGrpNumofExpPorts=eSWGrpNumofExpPorts, ipagentIpAddr=ipagentIpAddr, eSWIntMACAddrPort=eSWIntMACAddrPort, eSWMonGrp=eSWMonGrp, eSWVlanTypesSupported=eSWVlanTypesSupported, eSWGroupCapacity=eSWGroupCapacity, eSWImageRetryCounter=eSWImageRetryCounter, eSWVLANIndex=eSWVLANIndex, eSWMonIPEntry=eSWMonIPEntry, eSWPortSpeed=eSWPortSpeed, eSWGrpIndex=eSWGrpIndex, eSWPtMacInfoTable=eSWPtMacInfoTable, eSWEnhStationMove=eSWEnhStationMove, eSWFiltProtPortBasedCFGTable=eSWFiltProtPortBasedCFGTable, agentSw=agentSw, eSWType=eSWType, eSWGpPtInfoIndex=eSWGpPtInfoIndex, eSWExpPortConnectStateChange=eSWExpPortConnectStateChange, eSWConfigRetryCounter=eSWConfigRetryCounter, eSWTrunkBundleTable=eSWTrunkBundleTable, eSWAgent=eSWAgent, eSWPortIndex=eSWPortIndex, eSWFiltMACVLANBasedConfigTable=eSWFiltMACVLANBasedConfigTable, eSWUserInterfaceTimeOut=eSWUserInterfaceTimeOut, eSWNewNodeDetected=eSWNewNodeDetected, eSWGroupInfoEntry=eSWGroupInfoEntry, eSWPortLink=eSWPortLink, eSWVlanID=eSWVlanID, eSWIncSetPort=eSWIncSetPort, agentImageLoadMode=agentImageLoadMode, intraSwitch6224=intraSwitch6224, MacAddress=MacAddress, eSWPortCtrlStNFw=eSWPortCtrlStNFw, eSWFilteringInfo=eSWFilteringInfo, concProductId=concProductId, switch=switch, eSWGpPtCtrlEntry=eSWGpPtCtrlEntry)
