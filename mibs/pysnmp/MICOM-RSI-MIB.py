#
# PySNMP MIB module MICOM-RSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-RSI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:02:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, MibIdentifier, iso, Counter64, NotificationType, IpAddress, TimeTicks, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "MibIdentifier", "iso", "Counter64", "NotificationType", "IpAddress", "TimeTicks", "ObjectIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_rsi = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23)).setLabel("micom-rsi")
rsi_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1)).setLabel("rsi-configuration")
rsi_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 2)).setLabel("rsi-control")
rsi_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3)).setLabel("rsi-statistics")
mcmRSISysCfgDefGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 1))
mcmRSISysCfgDefVNCSInstance = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSISysCfgDefVNCSInstance.setStatus('mandatory')
mcmRSISysCfgDefNumCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSISysCfgDefNumCacheEntries.setStatus('mandatory')
mcmRSISysCfgSetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 2))
mcmRSISysCfgSetAddrResRetries = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmRSISysCfgSetAddrResRetries.setStatus('mandatory')
mcmRSISysCfgSetAddrResTimeout = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmRSISysCfgSetAddrResTimeout.setStatus('mandatory')
mcmRSISysCfgSetAddrCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("flush", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmRSISysCfgSetAddrCacheStatus.setStatus('mandatory')
mcmRSICacheCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 3), )
if mibBuilder.loadTexts: mcmRSICacheCfgTable.setStatus('mandatory')
mcmRSICacheCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 3, 1), ).setIndexNames((0, "MICOM-RSI-MIB", "mcmRSICacheCfgDNDigits"))
if mibBuilder.loadTexts: mcmRSICacheCfgEntry.setStatus('mandatory')
mcmRSICacheCfgDNDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSICacheCfgDNDigits.setStatus('mandatory')
mcmRSICacheCfgDNAAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSICacheCfgDNAAddr.setStatus('mandatory')
mcmRSICacheCfgProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSICacheCfgProfileNumber.setStatus('mandatory')
mcmRSICacheCfgNumberOfHits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSICacheCfgNumberOfHits.setStatus('mandatory')
mcmRSICacheCfgServerDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSICacheCfgServerDNA.setStatus('mandatory')
mcmRSIServerTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4), )
if mibBuilder.loadTexts: mcmRSIServerTable.setStatus('mandatory')
mcmRSIServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1), ).setIndexNames((0, "MICOM-RSI-MIB", "mcmRSIServerDNAAddr"))
if mibBuilder.loadTexts: mcmRSIServerEntry.setStatus('mandatory')
mcmRSIServerDNAAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerDNAAddr.setStatus('mandatory')
mcmRSIServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerName.setStatus('mandatory')
mcmRSIServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerType.setStatus('mandatory')
mcmRSIServerPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerPortID.setStatus('mandatory')
mcmRSIServerDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerDLCI.setStatus('mandatory')
mcmRSIServerAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerAvailStatus.setStatus('mandatory')
mcmRSIServerLastDisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerLastDisconnectCause.setStatus('mandatory')
mcmRSIServerRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerRequestCount.setStatus('mandatory')
mcmRSIServerResolvedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerResolvedCount.setStatus('mandatory')
mcmRSIServerNoNumberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerNoNumberCount.setStatus('mandatory')
mcmRSIServerTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerTimeoutCount.setStatus('mandatory')
mcmRSIServerRecoveryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIServerRecoveryCount.setStatus('mandatory')
nvmRSISysCfgDefGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 5))
nvmRSISysCfgDefVNCSInstance = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmRSISysCfgDefVNCSInstance.setStatus('mandatory')
nvmRSISysCfgDefNumCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmRSISysCfgDefNumCacheEntries.setStatus('mandatory')
nvmRSISysCfgSetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 6))
nvmRSISysCfgSetAddrResRetries = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmRSISysCfgSetAddrResRetries.setStatus('mandatory')
nvmRSISysCfgSetAddrResTimeout = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmRSISysCfgSetAddrResTimeout.setStatus('mandatory')
nvmRSISysCfgSetAddrCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmRSISysCfgSetAddrCacheStatus.setStatus('mandatory')
nvmRSIServerTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 7), )
if mibBuilder.loadTexts: nvmRSIServerTable.setStatus('mandatory')
nvmRSIServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 7, 1), ).setIndexNames((0, "MICOM-RSI-MIB", "nvmRSIServerDNAAddr"))
if mibBuilder.loadTexts: nvmRSIServerEntry.setStatus('mandatory')
nvmRSIServerDNAAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmRSIServerDNAAddr.setStatus('mandatory')
nvmRSIServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmRSIServerName.setStatus('mandatory')
nvmRSIServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmRSIServerType.setStatus('mandatory')
nvmRSIServerEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmRSIServerEntryRowStatus.setStatus('mandatory')
mcmRSIStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1))
mcmRSIStatisticsCacheCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsCacheCount.setStatus('mandatory')
mcmRSIStatisticsRequestAllCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsRequestAllCount.setStatus('mandatory')
mcmRSIStatisticsLocalResolvedCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsLocalResolvedCount.setStatus('mandatory')
mcmRSIStatisticsPurgeCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsPurgeCount.setStatus('mandatory')
mcmRSIStatisticsServerCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsServerCount.setStatus('mandatory')
mcmRSIStatisticsServerRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsServerRequestCount.setStatus('mandatory')
mcmRSIStatisticsServerResolvedCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsServerResolvedCount.setStatus('mandatory')
mcmRSIStatisticsServerNoNumberCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsServerNoNumberCount.setStatus('mandatory')
mcmRSIStatisticsTimeoutCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsTimeoutCount.setStatus('mandatory')
mcmRSIStatisticsRecoveryCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmRSIStatisticsRecoveryCount.setStatus('mandatory')
mcmRSICounterResetCmd = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 23, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmRSICounterResetCmd.setStatus('obsolete')
mcmAlarmRsiFailedToLocateRSA = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 23) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmAlarmRsiRSAIsDown = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 23) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-RSI-MIB", "mcmRSIServerDNAAddr"))
mcmAlarmRsiRSAIsUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 23) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-RSI-MIB", "mcmRSIServerDNAAddr"))
mibBuilder.exportSymbols("MICOM-RSI-MIB", micom_rsi=micom_rsi, mcmRSIServerResolvedCount=mcmRSIServerResolvedCount, rsi_statistics=rsi_statistics, nvmRSIServerEntryRowStatus=nvmRSIServerEntryRowStatus, nvmRSISysCfgSetGroup=nvmRSISysCfgSetGroup, mcmRSICacheCfgNumberOfHits=mcmRSICacheCfgNumberOfHits, mcmRSIServerRecoveryCount=mcmRSIServerRecoveryCount, mcmRSIServerPortID=mcmRSIServerPortID, nvmRSIServerTable=nvmRSIServerTable, nvmRSIServerName=nvmRSIServerName, mcmRSIStatisticsServerResolvedCount=mcmRSIStatisticsServerResolvedCount, mcmRSIStatisticsCacheCount=mcmRSIStatisticsCacheCount, mcmRSIServerName=mcmRSIServerName, mcmRSISysCfgDefGroup=mcmRSISysCfgDefGroup, mcmRSIServerLastDisconnectCause=mcmRSIServerLastDisconnectCause, mcmRSIServerNoNumberCount=mcmRSIServerNoNumberCount, mcmRSICacheCfgEntry=mcmRSICacheCfgEntry, nvmRSISysCfgSetAddrResTimeout=nvmRSISysCfgSetAddrResTimeout, mcmRSIServerDNAAddr=mcmRSIServerDNAAddr, nvmRSIServerEntry=nvmRSIServerEntry, mcmAlarmRsiRSAIsDown=mcmAlarmRsiRSAIsDown, nvmRSISysCfgSetAddrCacheStatus=nvmRSISysCfgSetAddrCacheStatus, nvmRSISysCfgDefGroup=nvmRSISysCfgDefGroup, mcmRSICacheCfgTable=mcmRSICacheCfgTable, nvmRSIServerType=nvmRSIServerType, mcmRSICounterResetCmd=mcmRSICounterResetCmd, mcmRSIServerDLCI=mcmRSIServerDLCI, mcmRSIStatisticsServerNoNumberCount=mcmRSIStatisticsServerNoNumberCount, mcmRSIStatisticsPurgeCount=mcmRSIStatisticsPurgeCount, mcmRSISysCfgSetAddrResRetries=mcmRSISysCfgSetAddrResRetries, mcmRSICacheCfgServerDNA=mcmRSICacheCfgServerDNA, mcmRSIServerType=mcmRSIServerType, mcmRSISysCfgDefVNCSInstance=mcmRSISysCfgDefVNCSInstance, mcmAlarmRsiFailedToLocateRSA=mcmAlarmRsiFailedToLocateRSA, mcmRSIServerTimeoutCount=mcmRSIServerTimeoutCount, mcmAlarmRsiRSAIsUp=mcmAlarmRsiRSAIsUp, mcmRSIServerRequestCount=mcmRSIServerRequestCount, mcmRSIServerEntry=mcmRSIServerEntry, mcmRSISysCfgSetAddrCacheStatus=mcmRSISysCfgSetAddrCacheStatus, mcmRSIStatisticsRequestAllCount=mcmRSIStatisticsRequestAllCount, nvmRSIServerDNAAddr=nvmRSIServerDNAAddr, mcmRSICacheCfgProfileNumber=mcmRSICacheCfgProfileNumber, mcmRSICacheCfgDNAAddr=mcmRSICacheCfgDNAAddr, mcmRSICacheCfgDNDigits=mcmRSICacheCfgDNDigits, mcmRSISysCfgSetGroup=mcmRSISysCfgSetGroup, mcmRSISysCfgDefNumCacheEntries=mcmRSISysCfgDefNumCacheEntries, mcmRSIStatisticsRecoveryCount=mcmRSIStatisticsRecoveryCount, rsi_configuration=rsi_configuration, mcmRSIServerTable=mcmRSIServerTable, mcmRSIServerAvailStatus=mcmRSIServerAvailStatus, mcmRSIStatisticsLocalResolvedCount=mcmRSIStatisticsLocalResolvedCount, mcmRSIStatisticsServerRequestCount=mcmRSIStatisticsServerRequestCount, rsi_control=rsi_control, mcmRSIStatisticsTimeoutCount=mcmRSIStatisticsTimeoutCount, mcmRSIStatisticsGroup=mcmRSIStatisticsGroup, mcmRSIStatisticsServerCount=mcmRSIStatisticsServerCount, nvmRSISysCfgDefNumCacheEntries=nvmRSISysCfgDefNumCacheEntries, nvmRSISysCfgSetAddrResRetries=nvmRSISysCfgSetAddrResRetries, nvmRSISysCfgDefVNCSInstance=nvmRSISysCfgDefVNCSInstance, mcmRSISysCfgSetAddrResTimeout=mcmRSISysCfgSetAddrResTimeout)
