#
# PySNMP MIB module HP-ICF-DEV-CONF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DEV-CONF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
VidList, = mibBuilder.importSymbols("HP-ICF-TC", "VidList")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Integer32, Counter64, ModuleIdentity, iso, TimeTicks, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "Counter64", "ModuleIdentity", "iso", "TimeTicks", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "MibIdentifier", "IpAddress")
RowStatus, TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
hpicfDevConf = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126))
hpicfDevConf.setRevisions(('2017-05-02 00:00', '2016-11-02 00:00', '2016-06-07 00:00', '2016-02-01 00:00', '2016-01-28 00:00', '2015-12-18 00:00', '2015-12-04 00:00', '2015-09-08 00:00',))
if mibBuilder.loadTexts: hpicfDevConf.setLastUpdated('201705020000Z')
if mibBuilder.loadTexts: hpicfDevConf.setOrganization('HP Networking')
hpSwitchDevNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 0))
hpSwitchDevScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 1))
hpSwitchDevGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 2))
hpSwitchDevConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3))
hpSwitchDevConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4))
class HpPartnerDeviceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("arubaAccessPoint", 2), ("arubaBridgeRouter", 3), ("hpBridgeRouter", 4), ("ciscoBridgeRouter", 5), ("ciscoPhone", 6), ("scsWanCpe", 7), ("deviceIdentity", 8))

class HpPartnerDeviceTypeList(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("reserved", 0), ("none", 1), ("arubaAccessPoint", 2), ("arubaBridgeRouter", 3), ("hpBridgeRouter", 4), ("ciscoBridgeRouter", 5), ("ciscoPhone", 6), ("scsWanCpe", 7), ("deviceIdentity", 8))

hpSwitchDevProfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1), )
if mibBuilder.loadTexts: hpSwitchDevProfTable.setStatus('current')
hpSwitchDevProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1), ).setIndexNames((0, "HP-ICF-DEV-CONF-MIB", "hpSwitchProfIndex"))
if mibBuilder.loadTexts: hpSwitchDevProfEntry.setStatus('current')
hpSwitchProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpSwitchProfIndex.setStatus('current')
hpSwitchProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfRowStatus.setStatus('current')
hpSwitchProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfName.setStatus('current')
hpSwitchProfUntaggedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfUntaggedVlanID.setStatus('current')
hpSwitchProfTaggedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 5), VidList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfTaggedVlanList.setStatus('current')
hpSwitchProfIngressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfIngressBandwidth.setStatus('current')
hpSwitchProfEgressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfEgressBandwidth.setStatus('current')
hpSwitchProfCosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfCosPriority.setStatus('current')
hpSwitchProfPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("halfDuplex10Mbits", 1), ("halfDuplex100Mbits", 2), ("fullDuplex10Mbits", 3), ("fullDuplex100Mbits", 4), ("autoNeg", 5), ("fullDuplex1000Mbits", 6), ("auto10Mbits", 7), ("auto100Mbits", 8), ("auto1000Mbits", 9), ("auto10Gbits", 10), ("auto10or100Mbits", 11), ("auto40Gbits", 12), ("auto2500Mbits", 13), ("auto5000Mbits", 14), ("auto2500or5000Mbits", 15), ("auto1000or2500Mbits", 16), ("auto1000or2500or5000Mbits", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfPortSpeed.setStatus('current')
hpSwitchProfPoeMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfPoeMaxPower.setStatus('current')
hpSwitchProfPoePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfPoePriority.setStatus('current')
hpSwitchProfJumboFrameSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfJumboFrameSupport.setStatus('current')
hpSwitchProfTunneledNodeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchProfTunneledNodeSupport.setStatus('current')
hpSwitchDevAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 2), )
if mibBuilder.loadTexts: hpSwitchDevAssociationTable.setStatus('deprecated')
hpSwitchDevAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 2, 1), ).setIndexNames((0, "HP-ICF-DEV-CONF-MIB", "hpSwitchDevAssociationType"))
if mibBuilder.loadTexts: hpSwitchDevAssociationEntry.setStatus('deprecated')
hpSwitchDevAssociationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 2, 1, 1), HpPartnerDeviceType())
if mibBuilder.loadTexts: hpSwitchDevAssociationType.setStatus('deprecated')
hpSwitchDevAssociationProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchDevAssociationProfName.setStatus('deprecated')
hpSwitchDevAssociationProfID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchDevAssociationProfID.setStatus('deprecated')
hpSwitchDevAssociationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchDevAssociationStatus.setStatus('deprecated')
hpSwitchRogueDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 3))
hpSwitchRogueDevStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRogueDevStatus.setStatus('current')
hpSwitchRogueDevAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("log", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRogueDevAction.setStatus('current')
hpSwitchRogueDevMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 3, 3), )
if mibBuilder.loadTexts: hpSwitchRogueDevMacTable.setStatus('current')
hpSwitchRogueDevMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 3, 3, 1), ).setIndexNames((0, "HP-ICF-DEV-CONF-MIB", "hpSwitchRogueDevMacAddress"))
if mibBuilder.loadTexts: hpSwitchRogueDevMacEntry.setStatus('current')
hpSwitchRogueDevMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 3, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpSwitchRogueDevMacAddress.setStatus('current')
hpSwitchNeighborDevMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchNeighborDevMacAddress.setStatus('current')
hpSwitchWhitelistMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 4), )
if mibBuilder.loadTexts: hpSwitchWhitelistMacTable.setStatus('current')
hpSwitchWhitelistMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 4, 1), ).setIndexNames((0, "HP-ICF-DEV-CONF-MIB", "hpSwitchWhitelistMacAddress"))
if mibBuilder.loadTexts: hpSwitchWhitelistMacEntry.setStatus('current')
hpSwitchWhitelistMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpSwitchWhitelistMacAddress.setStatus('current')
hpSwitchWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchWhitelistRowStatus.setStatus('current')
hpSwitchDevPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 5), )
if mibBuilder.loadTexts: hpSwitchDevPortTable.setStatus('current')
hpSwitchDevPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 5, 1), ).setIndexNames((0, "HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortIndex"))
if mibBuilder.loadTexts: hpSwitchDevPortEntry.setStatus('current')
hpSwitchDevPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchDevPortIndex.setStatus('current')
hpSwitchDevPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 5, 1, 2), HpPartnerDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDevPortType.setStatus('current')
hpSwitchDevPortProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDevPortProfName.setStatus('current')
hpSwitchDevPortDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDevPortDeviceName.setStatus('current')
hpSwitchDevIdentAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6), )
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationTable.setStatus('current')
hpSwitchDevIdentAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1), ).setIndexNames((0, "HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationType"), (0, "HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationSubType"))
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationEntry.setStatus('current')
hpSwitchDevIdentAssociationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1, 1), HpPartnerDeviceType())
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationType.setStatus('current')
hpSwitchDevIdentAssociationSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationSubType.setStatus('current')
hpSwitchDevIdentAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationRowStatus.setStatus('current')
hpSwitchDevIdentAssociationProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationProfName.setStatus('current')
hpSwitchDevIdentAssociationProfID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationProfID.setStatus('current')
hpSwitchDevIdentAssociationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationStatus.setStatus('current')
hpSwitchDevIdentAssociationDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 4, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDevIdentAssociationDeviceType.setStatus('current')
hpSwitchDevCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 1))
hpSwitchDevCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 1, 1)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchDevProfileGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevAssociationGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchRogueDevGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchWhitelistGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevCompliance = hpSwitchDevCompliance.setStatus('deprecated')
hpSwitchDevCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 1, 2)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchDevAssociationGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchRogueDevGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchWhitelistGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevProfileGroupNew"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevCompliance1 = hpSwitchDevCompliance1.setStatus('deprecated')
hpSwitchDevCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 1, 3)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchRogueDevGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchWhitelistGroup"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevProfileGroupNew"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortGroupNew"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevCompliance2 = hpSwitchDevCompliance2.setStatus('current')
hpSwitchDevConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2))
hpSwitchDevProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 1)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchProfName"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfRowStatus"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfUntaggedVlanID"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfTaggedVlanList"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfIngressBandwidth"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfEgressBandwidth"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfCosPriority"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfPortSpeed"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfPoeMaxPower"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfPoePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevProfileGroup = hpSwitchDevProfileGroup.setStatus('deprecated')
hpSwitchDevAssociationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 2)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchDevAssociationProfName"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevAssociationProfID"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevAssociationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevAssociationGroup = hpSwitchDevAssociationGroup.setStatus('deprecated')
hpSwitchRogueDevGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 3)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchRogueDevStatus"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchRogueDevAction"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchNeighborDevMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRogueDevGroup = hpSwitchRogueDevGroup.setStatus('current')
hpSwitchWhitelistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 4)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchWhitelistRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchWhitelistGroup = hpSwitchWhitelistGroup.setStatus('current')
hpSwitchDevPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 5)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortType"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortProfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevPortGroup = hpSwitchDevPortGroup.setStatus('deprecated')
hpSwitchDevProfileGroupNew = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 6)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchProfName"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfRowStatus"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfUntaggedVlanID"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfTaggedVlanList"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfIngressBandwidth"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfEgressBandwidth"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfCosPriority"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfPortSpeed"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfPoeMaxPower"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfPoePriority"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfJumboFrameSupport"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchProfTunneledNodeSupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevProfileGroupNew = hpSwitchDevProfileGroupNew.setStatus('current')
hpSwitchDevIdentAssociationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 7)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationRowStatus"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationProfName"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationProfID"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationStatus"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevIdentAssociationDeviceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevIdentAssociationGroup = hpSwitchDevIdentAssociationGroup.setStatus('current')
hpSwitchDevPortGroupNew = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 126, 3, 2, 8)).setObjects(("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortType"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortProfName"), ("HP-ICF-DEV-CONF-MIB", "hpSwitchDevPortDeviceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDevPortGroupNew = hpSwitchDevPortGroupNew.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-DEV-CONF-MIB", hpSwitchProfPoeMaxPower=hpSwitchProfPoeMaxPower, hpSwitchDevCompliance1=hpSwitchDevCompliance1, hpSwitchDevAssociationTable=hpSwitchDevAssociationTable, hpSwitchNeighborDevMacAddress=hpSwitchNeighborDevMacAddress, hpSwitchDevCompliances=hpSwitchDevCompliances, hpSwitchDevIdentAssociationGroup=hpSwitchDevIdentAssociationGroup, HpPartnerDeviceType=HpPartnerDeviceType, hpSwitchDevPortIndex=hpSwitchDevPortIndex, hpSwitchProfTaggedVlanList=hpSwitchProfTaggedVlanList, hpSwitchDevIdentAssociationEntry=hpSwitchDevIdentAssociationEntry, hpSwitchRogueDevMacTable=hpSwitchRogueDevMacTable, hpSwitchDevIdentAssociationProfName=hpSwitchDevIdentAssociationProfName, hpSwitchDevPortTable=hpSwitchDevPortTable, hpSwitchProfPoePriority=hpSwitchProfPoePriority, hpSwitchDevCompliance2=hpSwitchDevCompliance2, hpSwitchDevConfigGroups=hpSwitchDevConfigGroups, hpSwitchDevProfileGroupNew=hpSwitchDevProfileGroupNew, hpSwitchDevIdentAssociationTable=hpSwitchDevIdentAssociationTable, hpSwitchDevAssociationType=hpSwitchDevAssociationType, hpSwitchDevConformance=hpSwitchDevConformance, hpSwitchDevGlobals=hpSwitchDevGlobals, hpSwitchDevPortDeviceName=hpSwitchDevPortDeviceName, hpSwitchWhitelistMacEntry=hpSwitchWhitelistMacEntry, hpSwitchDevPortType=hpSwitchDevPortType, hpSwitchProfUntaggedVlanID=hpSwitchProfUntaggedVlanID, PYSNMP_MODULE_ID=hpicfDevConf, hpSwitchDevIdentAssociationType=hpSwitchDevIdentAssociationType, hpSwitchDevPortProfName=hpSwitchDevPortProfName, hpSwitchDevProfTable=hpSwitchDevProfTable, hpSwitchDevIdentAssociationStatus=hpSwitchDevIdentAssociationStatus, hpSwitchDevConfig=hpSwitchDevConfig, hpSwitchDevIdentAssociationSubType=hpSwitchDevIdentAssociationSubType, hpSwitchDevIdentAssociationRowStatus=hpSwitchDevIdentAssociationRowStatus, hpSwitchDevPortEntry=hpSwitchDevPortEntry, hpSwitchDevAssociationStatus=hpSwitchDevAssociationStatus, hpSwitchRogueDevStatus=hpSwitchRogueDevStatus, hpSwitchDevProfEntry=hpSwitchDevProfEntry, hpSwitchRogueDevGroup=hpSwitchRogueDevGroup, hpSwitchProfIndex=hpSwitchProfIndex, hpSwitchDevIdentAssociationProfID=hpSwitchDevIdentAssociationProfID, hpSwitchProfPortSpeed=hpSwitchProfPortSpeed, hpSwitchWhitelistMacAddress=hpSwitchWhitelistMacAddress, hpSwitchDevAssociationGroup=hpSwitchDevAssociationGroup, hpSwitchProfCosPriority=hpSwitchProfCosPriority, hpSwitchProfEgressBandwidth=hpSwitchProfEgressBandwidth, hpSwitchProfJumboFrameSupport=hpSwitchProfJumboFrameSupport, hpSwitchDevAssociationEntry=hpSwitchDevAssociationEntry, hpSwitchRogueDevAction=hpSwitchRogueDevAction, hpSwitchProfTunneledNodeSupport=hpSwitchProfTunneledNodeSupport, hpSwitchProfRowStatus=hpSwitchProfRowStatus, hpSwitchDevAssociationProfName=hpSwitchDevAssociationProfName, hpSwitchDevAssociationProfID=hpSwitchDevAssociationProfID, hpSwitchWhitelistMacTable=hpSwitchWhitelistMacTable, hpSwitchDevIdentAssociationDeviceType=hpSwitchDevIdentAssociationDeviceType, hpSwitchWhitelistGroup=hpSwitchWhitelistGroup, hpSwitchDevScalar=hpSwitchDevScalar, hpSwitchRogueDevice=hpSwitchRogueDevice, hpicfDevConf=hpicfDevConf, hpSwitchRogueDevMacEntry=hpSwitchRogueDevMacEntry, hpSwitchRogueDevMacAddress=hpSwitchRogueDevMacAddress, hpSwitchDevProfileGroup=hpSwitchDevProfileGroup, hpSwitchProfName=hpSwitchProfName, hpSwitchWhitelistRowStatus=hpSwitchWhitelistRowStatus, hpSwitchDevPortGroupNew=hpSwitchDevPortGroupNew, hpSwitchDevPortGroup=hpSwitchDevPortGroup, hpSwitchDevCompliance=hpSwitchDevCompliance, hpSwitchDevNotifications=hpSwitchDevNotifications, HpPartnerDeviceTypeList=HpPartnerDeviceTypeList, hpSwitchProfIngressBandwidth=hpSwitchProfIngressBandwidth)
