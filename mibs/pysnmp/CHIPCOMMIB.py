#
# PySNMP MIB module CHIPCOMMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPCOMMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, ObjectIdentity, Bits, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Unsigned32, Counter64, NotificationType, enterprises, Gauge32, Integer32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Bits", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Unsigned32", "Counter64", "NotificationType", "enterprises", "Gauge32", "Integer32", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
chipAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 8))
chipBootP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 11))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
oncore = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 11))
dmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 12))
onsembleEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 13))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
expDot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
ocPower = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8))
ocPowerControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 1))
ocInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9))
ocInvHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 1))
ocInvMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2))
olPS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
oc61nnMCAR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 35))
oc60nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43))
oc61nnDMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45))
oc61nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46))
oc61nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47))
ol51nnMTPLS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48))
oc60nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50))
ol50nnMRCLS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 51))
ol41nnHMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52))
ol41nnHETP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53))
ol52nnMEC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62))
ol53nnMTDDI = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
chipGenProduct = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 12))).clone(namedValues=NamedValues(("product-5100M-MGT", 1), ("product-5102B-EE", 2), ("product-8383B", 3), ("product-5112H-UTP", 4), ("product-5300M-MGT", 5), ("product-5200M-MGT", 7), ("product-4112H-MTP", 8), ("product-6100M-MGT", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenProduct.setStatus('mandatory')
chipGenServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenServiceDate.setStatus('mandatory')
chipGenNetman = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenNetman.setStatus('mandatory')
chipGenDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenDiagnostics.setStatus('mandatory')
chipGenSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenSerial.setStatus('mandatory')
chipGenID = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipGenID.setStatus('mandatory')
chipGenVers = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenVers.setStatus('mandatory')
chipGenAuthFailureAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenAuthFailureAddr.setStatus('mandatory')
chipGenTimeLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenTimeLastChanged.setStatus('mandatory')
chipEchoStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEcho", 1), ("startEcho", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoStart.setStatus('mandatory')
chipEchoAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoAddr.setStatus('mandatory')
chipEchoPattern = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroes", 1), ("ones", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoPattern.setStatus('mandatory')
chipEchoNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoNumber.setStatus('mandatory')
chipEchoSize = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoSize.setStatus('mandatory')
chipEchoResponseCounts = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipEchoResponseCounts.setStatus('mandatory')
olAgentsMySlot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsMySlot.setStatus('mandatory')
olAgentsMasterReset = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olAgentsMasterReset.setStatus('mandatory')
olAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: olAgentsTable.setStatus('mandatory')
olAgentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olAgentsSlotIndex"))
if mibBuilder.loadTexts: olAgentsEntry.setStatus('mandatory')
olAgentsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsSlotIndex.setStatus('mandatory')
olAgentsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsStationAddr.setStatus('mandatory')
olAgentsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsIpAddress.setStatus('mandatory')
olAgentsMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsMasterStatus.setStatus('mandatory')
olAgentsMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10), ("never", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olAgentsMasterPriority.setStatus('mandatory')
ocAgentsSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocAgentsSubSlot.setStatus('mandatory')
olConcType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("hub-5017C", 1), ("hub-5006C", 2), ("hub-5006C-FT", 3), ("hub-5006C-HC", 4), ("hub-5006C-HC-FT", 5), ("hub-6017C-A", 6), ("hub-4112-HMTP", 7), ("hub-5017C-LS", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olConcType.setStatus('mandatory')
olConcReset = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olConcReset.setStatus('mandatory')
olConcNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olConcNumSlots.setStatus('mandatory')
olConcProfile = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olConcProfile.setStatus('mandatory')
olEnvTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2), ("warning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvTempStatus.setStatus('mandatory')
olEnvPSCapacity = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvPSCapacity.setStatus('mandatory')
olEnvPSTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3), )
if mibBuilder.loadTexts: olEnvPSTable.setStatus('mandatory')
olEnvPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olEnvPSIndex"))
if mibBuilder.loadTexts: olEnvPSEntry.setStatus('mandatory')
olEnvPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvPSIndex.setStatus('mandatory')
olEnvPSAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("standby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olEnvPSAdminState.setStatus('mandatory')
olEnvPSOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("faulty", 3), ("not-installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvPSOperStatus.setStatus('mandatory')
olEnvFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("not-installed", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvFanStatus.setStatus('mandatory')
olEnvTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 5), )
if mibBuilder.loadTexts: olEnvTable.setStatus('mandatory')
olEnvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 5, 1), ).setIndexNames((0, "CHIPCOMMIB", "olEnvType"))
if mibBuilder.loadTexts: olEnvEntry.setStatus('mandatory')
olEnvType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ls-pdb", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvType.setStatus('mandatory')
olEnvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvStatus.setStatus('mandatory')
olModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1), )
if mibBuilder.loadTexts: olModTable.setStatus('mandatory')
olModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "olModSlotIndex"))
if mibBuilder.loadTexts: olModEntry.setStatus('mandatory')
olModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModSlotIndex.setStatus('mandatory')
olModType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 43, 45, 46, 47, 48, 50, 51, 52, 53, 62, 65))).clone(namedValues=NamedValues(("module-unmanageable", 1), ("module-unknown", 2), ("module-50nnM-CTL", 3), ("module-51nnM-MGT", 4), ("module-51nnM-FIB", 5), ("module-51nnM-UTP", 6), ("module-51nnM-TP", 7), ("module-51nnM-BNC", 8), ("module-51nnB-EE", 9), ("module-51nnR-ES", 10), ("module-51nnR-EE", 11), ("module-51nnM-AUIF", 12), ("module-51nnM-AUIM", 13), ("module-5208M-TP", 14), ("module-51nnM-FP", 15), ("module-51nnM-FBP", 16), ("module-51nnM-TPL", 17), ("module-51nnM-TPPL", 18), ("module-52nnM-TP", 19), ("module-52nnM-FR", 20), ("module-51nnM-TS", 21), ("module-51nnM-FL", 22), ("module-50nnM-RCTL", 23), ("module-51nnM-FB", 24), ("module-53nnM-MGT", 25), ("module-53nnM-FBMIC", 26), ("module-53nnM-FIBST", 27), ("module-53nnM-STP", 28), ("module-51nnM-TPCL", 29), ("module-52nnB-TT", 30), ("module-51nnI-x", 31), ("module-52nnM-MGT", 32), ("module-50nnM-HCTL", 33), ("module-61nnM-CAR", 35), ("module-60nnM-MGT", 43), ("module-61nnD-MGT", 45), ("module-61nnM-FBP", 46), ("module-61nnM-TPL", 47), ("module-51nnM-TPLS", 48), ("module-60nnM-RCTL", 50), ("module-50nnM-RCLS", 51), ("module-41nnH-MTP", 52), ("module-41nnH-ETP", 53), ("module-52nnM-EC", 62), ("module-53nnM-TDDI", 65)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModType.setStatus('mandatory')
olModClass = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20))).clone(namedValues=NamedValues(("controller", 1), ("mgmt", 2), ("ethernet-media", 3), ("ethernet-interconnect", 4), ("ethernet-portswitching-media", 5), ("token-ring-media", 6), ("terminal-server", 7), ("fddi-media", 8), ("token-ring-mgmt", 9), ("ethernet-connswitching-media", 10), ("token-ring-interconnect", 11), ("fddi-mgmt", 12), ("oncore-token-ring-media", 13), ("ethernet-carrier", 14), ("oncore-oem-specials", 15), ("oncore-download", 17), ("ethernet-media-extended", 19), ("online-token-ring-mod-interconnect", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModClass.setStatus('mandatory')
olModDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModDescr.setStatus('mandatory')
olModVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModVersion.setStatus('mandatory')
olModVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("chipcom", 1), ("cisco", 2), ("pilkington", 3), ("datability", 5), ("ibm", 6), ("raycom", 7), ("retix", 8), ("intellicom", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModVendor.setStatus('mandatory')
olModResetModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olModResetModule.setStatus('mandatory')
olModConfigToDips = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noConfigure", 1), ("configure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olModConfigToDips.setStatus('mandatory')
olModConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConfigured", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModConfigured.setStatus('mandatory')
olModNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("other", 1), ("isolated", 2), ("port-switching", 3), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19), ("per-connector", 20), ("isolated-1", 21), ("isolated-2", 22), ("isolated-3", 23), ("isolated-4", 24), ("isolated-5", 25), ("isolated-6", 26), ("isolated-7", 27), ("isolated-8", 28), ("isolated-9", 29), ("isolated-10", 30), ("isolated-11", 31), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olModNetwork.setStatus('mandatory')
olModNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("port-switching", 3), ("ethernet", 5), ("token-ring", 6), ("fddi", 7), ("serial", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModNetworkType.setStatus('mandatory')
olModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 20, 21))).clone(namedValues=NamedValues(("okay", 1), ("fatalError", 10), ("booting", 20), ("partial-failure", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModStatus.setStatus('mandatory')
olModNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModNumPorts.setStatus('mandatory')
olModNumTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModNumTrunks.setStatus('mandatory')
olPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2), )
if mibBuilder.loadTexts: olPortTable.setStatus('mandatory')
olPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olPortSlotIndex"), (0, "CHIPCOMMIB", "olPortIndex"))
if mibBuilder.loadTexts: olPortEntry.setStatus('mandatory')
olPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortSlotIndex.setStatus('mandatory')
olPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortIndex.setStatus('mandatory')
olPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("logical", 1), ("media", 2), ("virtual", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortType.setStatus('mandatory')
olPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 23, 24))).clone(namedValues=NamedValues(("backPlane", 1), ("bnc", 2), ("faui", 3), ("maui", 4), ("fiber", 5), ("db-50", 6), ("telco", 7), ("rj45", 8), ("rj45S", 9), ("db-9", 10), ("virtual", 11), ("fddi-lc", 12), ("fddi-st", 13), ("fddi-mic", 14), ("db-25", 15), ("ethernet-sma", 17), ("ethernet-fc", 23), ("ethernet-st", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortConnector.setStatus('mandatory')
olPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("okay", 1), ("linkFailure", 2), ("jabber", 3), ("remoteLinkFailure", 4), ("remoteJabber", 5), ("invalidData", 6), ("lowLight", 7), ("fifoOverrun", 8), ("fifoUnderrun", 9), ("fatalError", 10), ("partition", 11), ("mjlp", 12), ("noCable", 13), ("noSquelch", 14), ("noPhantom", 15), ("okay-standby", 19), ("off", 22), ("connecting", 23), ("backup-link", 24), ("security-breach", 25), ("unknownStatus", 26), ("beacon", 27), ("wireFault", 28), ("macRemoved", 29), ("notInserted", 30), ("speedMismatch", 31), ("attach3174Unknown", 32), ("attach3174To8-3299", 33), ("attach3174To32-3299", 34), ("attach3174ToDirect", 35), ("attach3174Unavailable", 36), ("transientError", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortStatus.setStatus('mandatory')
olPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5), ("local", 6), ("remote", 7), ("remote-diagnostics", 8), ("unknown", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortAdminState.setStatus('mandatory')
olPortNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("other", 1), ("isolated", 2), ("per-module", 4), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19), ("per-connector", 20), ("isolated-1", 21), ("isolated-2", 22), ("isolated-3", 23), ("isolated-4", 24), ("isolated-5", 25), ("isolated-6", 26), ("isolated-7", 27), ("isolated-8", 28), ("isolated-9", 29), ("isolated-10", 30), ("isolated-11", 31), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortNetwork.setStatus('mandatory')
olPortNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 5), ("fddi", 7), ("serial", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortNetworkType.setStatus('mandatory')
olPortAlertFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortAlertFilter.setStatus('mandatory')
olTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3), )
if mibBuilder.loadTexts: olTrunkTable.setStatus('mandatory')
olTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTrunkSlotIndex"), (0, "CHIPCOMMIB", "olTrunkIndex"))
if mibBuilder.loadTexts: olTrunkEntry.setStatus('mandatory')
olTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkSlotIndex.setStatus('mandatory')
olTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkIndex.setStatus('mandatory')
olTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ringIn", 3), ("ringOut", 4), ("backplaneIn", 6), ("backplaneOut", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkType.setStatus('mandatory')
olTrunkConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9))).clone(namedValues=NamedValues(("backplane", 1), ("fiber", 5), ("rj45S", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkConnector.setStatus('mandatory')
olTrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 13, 14, 16, 17, 18, 19, 27, 28))).clone(namedValues=NamedValues(("okay", 1), ("linkFailure", 2), ("fatalError", 10), ("noCable", 13), ("noSquelch", 14), ("lostLock", 16), ("upstreamNeighborLost", 17), ("invalidConfig", 18), ("okay-standby", 19), ("beacon", 27), ("wireFault", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkStatus.setStatus('mandatory')
olTrunkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTrunkAdminState.setStatus('mandatory')
olTrunkWrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrapped", 1), ("unwrapped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkWrapState.setStatus('mandatory')
olTrunkNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 256))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("external", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkNeighbor.setStatus('mandatory')
ol50nnMCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1), )
if mibBuilder.loadTexts: ol50nnMCTLModTable.setStatus('mandatory')
ol50nnMCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol50nnMCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMCTLModEntry.setStatus('mandatory')
ol50nnMCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModSlotIndex.setStatus('mandatory')
ol50nnMCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModTempStatus.setStatus('mandatory')
ol51nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1), )
if mibBuilder.loadTexts: ol51nnMMGTModTable.setStatus('mandatory')
ol51nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMMGTModEntry.setStatus('mandatory')
ol51nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModSlotIndex.setStatus('mandatory')
ol51nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMMGTModMasterPriority.setStatus('mandatory')
ol51nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModMasterStatus.setStatus('mandatory')
ol51nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModStationAddr.setStatus('mandatory')
ol51nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2), )
if mibBuilder.loadTexts: ol51nnMMGTPortTable.setStatus('mandatory')
ol51nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMMGTPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol51nnMMGTPortEntry.setStatus('mandatory')
ol51nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortSlotIndex.setStatus('mandatory')
ol51nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortIndex.setStatus('mandatory')
ol51nnMMGTIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTIpAddress.setStatus('mandatory')
ol51nnMFIBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1), )
if mibBuilder.loadTexts: ol51nnMFIBModTable.setStatus('mandatory')
ol51nnMFIBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFIBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFIBModEntry.setStatus('mandatory')
ol51nnMFIBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModSlotIndex.setStatus('mandatory')
ol51nnMFIBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipNetwork.setStatus('mandatory')
ol51nnMFIBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBModLLW.setStatus('mandatory')
ol51nnMFIBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipLLW.setStatus('mandatory')
ol51nnMFIBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2), )
if mibBuilder.loadTexts: ol51nnMFIBPortTable.setStatus('mandatory')
ol51nnMFIBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFIBPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMFIBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFIBPortEntry.setStatus('mandatory')
ol51nnMFIBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortSlotIndex.setStatus('mandatory')
ol51nnMFIBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortIndex.setStatus('mandatory')
ol51nnMFIBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortAdminState.setStatus('mandatory')
ol51nnMFIBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddySlot.setStatus('mandatory')
ol51nnMFIBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddyPort.setStatus('mandatory')
ol51nnMFIBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortDipAdminState.setStatus('mandatory')
ol51nnMUTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1), )
if mibBuilder.loadTexts: ol51nnMUTPModTable.setStatus('mandatory')
ol51nnMUTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMUTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMUTPModEntry.setStatus('mandatory')
ol51nnMUTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModSlotIndex.setStatus('mandatory')
ol51nnMUTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipNetwork.setStatus('mandatory')
ol51nnMUTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModCrossover.setStatus('mandatory')
ol51nnMUTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipCrossover.setStatus('mandatory')
ol51nnMUTPModFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModFFL.setStatus('mandatory')
ol51nnMUTPModDipFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModDipFFL.setStatus('mandatory')
ol51nnMUTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2), )
if mibBuilder.loadTexts: ol51nnMUTPPortTable.setStatus('mandatory')
ol51nnMUTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMUTPPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMUTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMUTPPortEntry.setStatus('mandatory')
ol51nnMUTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortSlotIndex.setStatus('mandatory')
ol51nnMUTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortIndex.setStatus('mandatory')
ol51nnMUTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortAdminState.setStatus('mandatory')
ol51nnMUTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddySlot.setStatus('mandatory')
ol51nnMUTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddyPort.setStatus('mandatory')
ol51nnMUTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipAdminState.setStatus('mandatory')
ol51nnMUTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortLinkInteg.setStatus('mandatory')
ol51nnMUTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipLinkInteg.setStatus('mandatory')
ol51nnMUTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortSquelch.setStatus('mandatory')
ol51nnMUTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipSquelch.setStatus('mandatory')
ol51nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1), )
if mibBuilder.loadTexts: ol51nnMTPModTable.setStatus('mandatory')
ol51nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPModEntry.setStatus('mandatory')
ol51nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModSlotIndex.setStatus('mandatory')
ol51nnMTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipNetwork.setStatus('mandatory')
ol51nnMTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPModCrossover.setStatus('mandatory')
ol51nnMTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipCrossover.setStatus('mandatory')
ol51nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2), )
if mibBuilder.loadTexts: ol51nnMTPPortTable.setStatus('mandatory')
ol51nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPortEntry.setStatus('mandatory')
ol51nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortSlotIndex.setStatus('mandatory')
ol51nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortIndex.setStatus('mandatory')
ol51nnMTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortAdminState.setStatus('mandatory')
ol51nnMTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddySlot.setStatus('mandatory')
ol51nnMTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddyPort.setStatus('mandatory')
ol51nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipAdminState.setStatus('mandatory')
ol51nnMTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortLinkInteg.setStatus('mandatory')
ol51nnMTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipLinkInteg.setStatus('mandatory')
ol51nnMTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortSquelch.setStatus('mandatory')
ol51nnMTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipSquelch.setStatus('mandatory')
ol51nnMBNCModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1), )
if mibBuilder.loadTexts: ol51nnMBNCModTable.setStatus('mandatory')
ol51nnMBNCModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMBNCModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMBNCModEntry.setStatus('mandatory')
ol51nnMBNCModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModSlotIndex.setStatus('mandatory')
ol51nnMBNCModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModDipNetwork.setStatus('mandatory')
ol51nnMBNCPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2), )
if mibBuilder.loadTexts: ol51nnMBNCPortTable.setStatus('mandatory')
ol51nnMBNCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMBNCPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMBNCPortIndex"))
if mibBuilder.loadTexts: ol51nnMBNCPortEntry.setStatus('mandatory')
ol51nnMBNCPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortSlotIndex.setStatus('mandatory')
ol51nnMBNCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortIndex.setStatus('mandatory')
ol51nnMBNCPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipAdminState.setStatus('mandatory')
ol51nnMBNCPortDipTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminated", 1), ("not-terminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipTermination.setStatus('mandatory')
ol51nnMBNCPortDipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("grounded", 1), ("not-grounded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipGround.setStatus('mandatory')
ol51nnBEEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1), )
if mibBuilder.loadTexts: ol51nnBEEModTable.setStatus('mandatory')
ol51nnBEEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnBEEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnBEEModEntry.setStatus('mandatory')
ol51nnBEEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModSlotIndex.setStatus('mandatory')
ol51nnBEEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModStationAddr.setStatus('mandatory')
ol51nnBEEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModProtocols.setStatus('mandatory')
ol51nnBEEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2), )
if mibBuilder.loadTexts: ol51nnBEEPortTable.setStatus('mandatory')
ol51nnBEEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnBEEPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnBEEPortIndex"))
if mibBuilder.loadTexts: ol51nnBEEPortEntry.setStatus('mandatory')
ol51nnBEEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortSlotIndex.setStatus('mandatory')
ol51nnBEEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIndex.setStatus('mandatory')
ol51nnBEEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIpAddress.setStatus('mandatory')
ol51nnBEEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDipNetwork.setStatus('mandatory')
ol51nnBEEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDefNetwork.setStatus('mandatory')
ol51nnRESModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1), )
if mibBuilder.loadTexts: ol51nnRESModTable.setStatus('mandatory')
ol51nnRESModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnRESModSlotIndex"))
if mibBuilder.loadTexts: ol51nnRESModEntry.setStatus('mandatory')
ol51nnRESModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModSlotIndex.setStatus('mandatory')
ol51nnRESModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModStationAddr.setStatus('mandatory')
ol51nnRESModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModProtocols.setStatus('mandatory')
ol51nnRESPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2), )
if mibBuilder.loadTexts: ol51nnRESPortTable.setStatus('mandatory')
ol51nnRESPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnRESPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnRESPortIndex"))
if mibBuilder.loadTexts: ol51nnRESPortEntry.setStatus('mandatory')
ol51nnRESPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortSlotIndex.setStatus('mandatory')
ol51nnRESPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIndex.setStatus('mandatory')
ol51nnRESPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIpAddress.setStatus('mandatory')
ol51nnRESPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDipNetwork.setStatus('mandatory')
ol51nnRESPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDefNetwork.setStatus('mandatory')
ol51nnREEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1), )
if mibBuilder.loadTexts: ol51nnREEModTable.setStatus('mandatory')
ol51nnREEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnREEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnREEModEntry.setStatus('mandatory')
ol51nnREEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModSlotIndex.setStatus('mandatory')
ol51nnREEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModStationAddr.setStatus('mandatory')
ol51nnREEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModProtocols.setStatus('mandatory')
ol51nnREEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2), )
if mibBuilder.loadTexts: ol51nnREEPortTable.setStatus('mandatory')
ol51nnREEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnREEPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnREEPortIndex"))
if mibBuilder.loadTexts: ol51nnREEPortEntry.setStatus('mandatory')
ol51nnREEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortSlotIndex.setStatus('mandatory')
ol51nnREEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIndex.setStatus('mandatory')
ol51nnREEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIpAddress.setStatus('mandatory')
ol51nnREEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDipNetwork.setStatus('mandatory')
ol51nnREEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDefNetwork.setStatus('mandatory')
ol51nnMAUIFModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1), )
if mibBuilder.loadTexts: ol51nnMAUIFModTable.setStatus('mandatory')
ol51nnMAUIFModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMAUIFModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFModEntry.setStatus('mandatory')
ol51nnMAUIFModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFModSlotIndex.setStatus('mandatory')
ol51nnMAUIFPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2), )
if mibBuilder.loadTexts: ol51nnMAUIFPortTable.setStatus('mandatory')
ol51nnMAUIFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMAUIFPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMAUIFPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFPortEntry.setStatus('mandatory')
ol51nnMAUIFPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortSlotIndex.setStatus('mandatory')
ol51nnMAUIFPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortIndex.setStatus('mandatory')
ol51nnMAUIFPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortAdminState.setStatus('mandatory')
ol51nnMAUIFPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddySlot.setStatus('mandatory')
ol51nnMAUIFPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddyPort.setStatus('mandatory')
ol51nnMAUIFPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipAdminState.setStatus('mandatory')
ol51nnMAUIFPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipNetwork.setStatus('mandatory')
ol51nnMAUIMModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1), )
if mibBuilder.loadTexts: ol51nnMAUIMModTable.setStatus('mandatory')
ol51nnMAUIMModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMAUIMModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMModEntry.setStatus('mandatory')
ol51nnMAUIMModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMModSlotIndex.setStatus('mandatory')
ol51nnMAUIMPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2), )
if mibBuilder.loadTexts: ol51nnMAUIMPortTable.setStatus('mandatory')
ol51nnMAUIMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMAUIMPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMAUIMPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMPortEntry.setStatus('mandatory')
ol51nnMAUIMPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortSlotIndex.setStatus('mandatory')
ol51nnMAUIMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortIndex.setStatus('mandatory')
ol51nnMAUIMPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortAdminState.setStatus('mandatory')
ol51nnMAUIMPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddySlot.setStatus('mandatory')
ol51nnMAUIMPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddyPort.setStatus('mandatory')
ol51nnMAUIMPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipAdminState.setStatus('mandatory')
ol51nnMAUIMPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipNetwork.setStatus('mandatory')
ol51nnMAUIMPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortSQETest.setStatus('mandatory')
ol51nnMAUIMPortDipSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipSQETest.setStatus('mandatory')
ol51nnMAUIMPortCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortCollision.setStatus('mandatory')
ol51nnMAUIMPortDipCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipCollision.setStatus('mandatory')
ol51nnMAUIMPortHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortHalfStep.setStatus('mandatory')
ol51nnMAUIMPortDipHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipHalfStep.setStatus('mandatory')
ol5208MTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1), )
if mibBuilder.loadTexts: ol5208MTPModTable.setStatus('mandatory')
ol5208MTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol5208MTPModSlotIndex"))
if mibBuilder.loadTexts: ol5208MTPModEntry.setStatus('mandatory')
ol5208MTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModSlotIndex.setStatus('mandatory')
ol5208MTPModBypsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPModBypsAdminState.setStatus('mandatory')
ol5208MTPModBypsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModBypsOperState.setStatus('mandatory')
ol5208MTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModDipCableImp.setStatus('mandatory')
ol5208MTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2), )
if mibBuilder.loadTexts: ol5208MTPPortTable.setStatus('mandatory')
ol5208MTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol5208MTPPortSlotIndex"), (0, "CHIPCOMMIB", "ol5208MTPPortIndex"))
if mibBuilder.loadTexts: ol5208MTPPortEntry.setStatus('mandatory')
ol5208MTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortSlotIndex.setStatus('mandatory')
ol5208MTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortIndex.setStatus('mandatory')
ol5208MTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortDipAdminState.setStatus('mandatory')
ol5208MTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPPortStationType.setStatus('mandatory')
ol5208MTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3), )
if mibBuilder.loadTexts: ol5208MTPTrunkTable.setStatus('mandatory')
ol5208MTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol5208MTPTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol5208MTPTrunkIndex"))
if mibBuilder.loadTexts: ol5208MTPTrunkEntry.setStatus('mandatory')
ol5208MTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkSlotIndex.setStatus('mandatory')
ol5208MTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkIndex.setStatus('mandatory')
ol5208MTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipAdminState.setStatus('mandatory')
ol5208MTPTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkCableMon.setStatus('mandatory')
ol5208MTPTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipCableMon.setStatus('mandatory')
ol5208MTPTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkNetMapState.setStatus('mandatory')
ol5208MTPTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkExtBcnRecovery.setStatus('mandatory')
ol51nnMFPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1), )
if mibBuilder.loadTexts: ol51nnMFPModTable.setStatus('mandatory')
ol51nnMFPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFPModEntry.setStatus('mandatory')
ol51nnMFPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPModSlotIndex.setStatus('mandatory')
ol51nnMFPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2), )
if mibBuilder.loadTexts: ol51nnMFPPortTable.setStatus('mandatory')
ol51nnMFPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFPPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMFPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFPPortEntry.setStatus('mandatory')
ol51nnMFPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortSlotIndex.setStatus('mandatory')
ol51nnMFPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortIndex.setStatus('mandatory')
ol51nnMFPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortAdminState.setStatus('mandatory')
ol51nnMFPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddySlot.setStatus('mandatory')
ol51nnMFPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddyPort.setStatus('mandatory')
ol51nnMFPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipAdminState.setStatus('mandatory')
ol51nnMFPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipNetwork.setStatus('mandatory')
ol51nnMFPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortLLW.setStatus('mandatory')
ol51nnMFPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipLLW.setStatus('mandatory')
ol51nnMFPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortHipwr.setStatus('mandatory')
ol51nnMFPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipHipwr.setStatus('mandatory')
ol51nnMFBPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1), )
if mibBuilder.loadTexts: ol51nnMFBPModTable.setStatus('mandatory')
ol51nnMFBPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFBPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBPModEntry.setStatus('mandatory')
ol51nnMFBPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPModSlotIndex.setStatus('mandatory')
ol51nnMFBPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2), )
if mibBuilder.loadTexts: ol51nnMFBPPortTable.setStatus('mandatory')
ol51nnMFBPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFBPPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMFBPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPPortEntry.setStatus('mandatory')
ol51nnMFBPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortSlotIndex.setStatus('mandatory')
ol51nnMFBPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortIndex.setStatus('mandatory')
ol51nnMFBPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortAdminState.setStatus('mandatory')
ol51nnMFBPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddySlot.setStatus('mandatory')
ol51nnMFBPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddyPort.setStatus('mandatory')
ol51nnMFBPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipAdminState.setStatus('mandatory')
ol51nnMFBPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipNetwork.setStatus('mandatory')
ol51nnMFBPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortLLW.setStatus('mandatory')
ol51nnMFBPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipLLW.setStatus('mandatory')
ol51nnMFBPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortHipwr.setStatus('mandatory')
ol51nnMFBPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipHipwr.setStatus('mandatory')
ol51nnMTPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1), )
if mibBuilder.loadTexts: ol51nnMTPLModTable.setStatus('mandatory')
ol51nnMTPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPLModEntry.setStatus('mandatory')
ol51nnMTPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModSlotIndex.setStatus('mandatory')
ol51nnMTPLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModDipNetwork.setStatus('mandatory')
ol51nnMTPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2), )
if mibBuilder.loadTexts: ol51nnMTPLPortTable.setStatus('mandatory')
ol51nnMTPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPLPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMTPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPLPortEntry.setStatus('mandatory')
ol51nnMTPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortSlotIndex.setStatus('mandatory')
ol51nnMTPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortIndex.setStatus('mandatory')
ol51nnMTPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortAdminState.setStatus('mandatory')
ol51nnMTPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddySlot.setStatus('mandatory')
ol51nnMTPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddyPort.setStatus('mandatory')
ol51nnMTPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipAdminState.setStatus('mandatory')
ol51nnMTPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortLinkInteg.setStatus('mandatory')
ol51nnMTPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipLinkInteg.setStatus('mandatory')
ol51nnMTPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortSquelch.setStatus('mandatory')
ol51nnMTPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortJabber.setStatus('mandatory')
ol51nnMTPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipJabber.setStatus('mandatory')
ol51nnMTPPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1), )
if mibBuilder.loadTexts: ol51nnMTPPLModTable.setStatus('mandatory')
ol51nnMTPPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLModEntry.setStatus('mandatory')
ol51nnMTPPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLModSlotIndex.setStatus('mandatory')
ol51nnMTPPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2), )
if mibBuilder.loadTexts: ol51nnMTPPLPortTable.setStatus('mandatory')
ol51nnMTPPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPPLPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMTPPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLPortEntry.setStatus('mandatory')
ol51nnMTPPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortSlotIndex.setStatus('mandatory')
ol51nnMTPPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortIndex.setStatus('mandatory')
ol51nnMTPPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortAdminState.setStatus('mandatory')
ol51nnMTPPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddySlot.setStatus('mandatory')
ol51nnMTPPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddyPort.setStatus('mandatory')
ol51nnMTPPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipAdminState.setStatus('mandatory')
ol51nnMTPPLPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipNetwork.setStatus('mandatory')
ol51nnMTPPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortLinkInteg.setStatus('mandatory')
ol51nnMTPPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipLinkInteg.setStatus('mandatory')
ol51nnMTPPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortSquelch.setStatus('mandatory')
ol51nnMTPPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortJabber.setStatus('mandatory')
ol51nnMTPPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipJabber.setStatus('mandatory')
ol52nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1), )
if mibBuilder.loadTexts: ol52nnMTPModTable.setStatus('mandatory')
ol52nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMTPModEntry.setStatus('mandatory')
ol52nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModSlotIndex.setStatus('mandatory')
ol52nnMTPModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModRingSpeed.setStatus('mandatory')
ol52nnMTPModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipRingSpeed.setStatus('mandatory')
ol52nnMTPModCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModCableImp.setStatus('mandatory')
ol52nnMTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipCableImp.setStatus('mandatory')
ol52nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2), )
if mibBuilder.loadTexts: ol52nnMTPPortTable.setStatus('mandatory')
ol52nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMTPPortSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMTPPortIndex"))
if mibBuilder.loadTexts: ol52nnMTPPortEntry.setStatus('mandatory')
ol52nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortSlotIndex.setStatus('mandatory')
ol52nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortIndex.setStatus('mandatory')
ol52nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortDipAdminState.setStatus('mandatory')
ol52nnMTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPPortStationType.setStatus('mandatory')
ol52nnMTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3), )
if mibBuilder.loadTexts: ol52nnMTPTrunkTable.setStatus('mandatory')
ol52nnMTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMTPTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMTPTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMTPTrunkEntry.setStatus('mandatory')
ol52nnMTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkSlotIndex.setStatus('mandatory')
ol52nnMTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkIndex.setStatus('mandatory')
ol52nnMTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkDipAdminState.setStatus('mandatory')
ol52nnMFRModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1), )
if mibBuilder.loadTexts: ol52nnMFRModTable.setStatus('mandatory')
ol52nnMFRModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMFRModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMFRModEntry.setStatus('mandatory')
ol52nnMFRModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModSlotIndex.setStatus('mandatory')
ol52nnMFRModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRModRingSpeed.setStatus('mandatory')
ol52nnMFRModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModDipRingSpeed.setStatus('mandatory')
ol52nnMFRPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2), )
if mibBuilder.loadTexts: ol52nnMFRPortTable.setStatus('mandatory')
ol52nnMFRPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMFRPortSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMFRPortIndex"))
if mibBuilder.loadTexts: ol52nnMFRPortEntry.setStatus('mandatory')
ol52nnMFRPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortSlotIndex.setStatus('mandatory')
ol52nnMFRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortIndex.setStatus('mandatory')
ol52nnMFRPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortDipAdminState.setStatus('mandatory')
ol52nnMFRPortCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortCableImp.setStatus('mandatory')
ol52nnMFRPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRPortStationType.setStatus('mandatory')
ol52nnMFRTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3), )
if mibBuilder.loadTexts: ol52nnMFRTrunkTable.setStatus('mandatory')
ol52nnMFRTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMFRTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMFRTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMFRTrunkEntry.setStatus('mandatory')
ol52nnMFRTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkSlotIndex.setStatus('mandatory')
ol52nnMFRTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkIndex.setStatus('mandatory')
ol52nnMFRTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipAdminState.setStatus('mandatory')
ol52nnMFRTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCableMon.setStatus('mandatory')
ol52nnMFRTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCableMon.setStatus('mandatory')
ol52nnMFRTrunkCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCompMode.setStatus('mandatory')
ol52nnMFRTrunkDipCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCompMode.setStatus('mandatory')
ol52nnMFRTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkNetMapState.setStatus('mandatory')
ol52nnMFRTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkExtBcnRecovery.setStatus('mandatory')
ol52nnMFRTrunkBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkBuddySlot.setStatus('mandatory')
ol52nnMFRTrunkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-standby", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkAdminState.setStatus('mandatory')
ol51nnMTSModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1), )
if mibBuilder.loadTexts: ol51nnMTSModTable.setStatus('mandatory')
ol51nnMTSModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTSModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTSModEntry.setStatus('mandatory')
ol51nnMTSModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModSlotIndex.setStatus('mandatory')
ol51nnMTSModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModProtocols.setStatus('mandatory')
ol51nnMTSModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModIpAddress.setStatus('mandatory')
ol51nnMTSModTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModTCPPort.setStatus('mandatory')
ol51nnMTSModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModStationAddr.setStatus('mandatory')
ol51nnMTSModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModDipNetwork.setStatus('mandatory')
ol51nnMTSModCPURev = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModCPURev.setStatus('mandatory')
ol51nnMTSPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2), )
if mibBuilder.loadTexts: ol51nnMTSPortTable.setStatus('mandatory')
ol51nnMTSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTSPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMTSPortIndex"))
if mibBuilder.loadTexts: ol51nnMTSPortEntry.setStatus('mandatory')
ol51nnMTSPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortSlotIndex.setStatus('mandatory')
ol51nnMTSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortIndex.setStatus('mandatory')
ol51nnMTSPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("local", 6), ("remote", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTSPortAdminState.setStatus('mandatory')
ol51nnMTSPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("local", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortOperState.setStatus('mandatory')
ol51nnMFLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1), )
if mibBuilder.loadTexts: ol51nnMFLModTable.setStatus('mandatory')
ol51nnMFLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFLModEntry.setStatus('mandatory')
ol51nnMFLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModSlotIndex.setStatus('mandatory')
ol51nnMFLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModDipNetwork.setStatus('mandatory')
ol51nnMFLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2), )
if mibBuilder.loadTexts: ol51nnMFLPortTable.setStatus('mandatory')
ol51nnMFLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFLPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMFLPortIndex"))
if mibBuilder.loadTexts: ol51nnMFLPortEntry.setStatus('mandatory')
ol51nnMFLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortSlotIndex.setStatus('mandatory')
ol51nnMFLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortIndex.setStatus('mandatory')
ol51nnMFLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortAdminState.setStatus('mandatory')
ol51nnMFLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddySlot.setStatus('mandatory')
ol51nnMFLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddyPort.setStatus('mandatory')
ol51nnMFLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortDipAdminState.setStatus('mandatory')
ol50nnMRCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1), )
if mibBuilder.loadTexts: ol50nnMRCTLModTable.setStatus('mandatory')
ol50nnMRCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol50nnMRCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMRCTLModEntry.setStatus('mandatory')
ol50nnMRCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModSlotIndex.setStatus('mandatory')
ol50nnMRCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModOperState.setStatus('mandatory')
ol50nnMRCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModClockStatus.setStatus('mandatory')
ol50nnMRCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModTempStatus.setStatus('mandatory')
ol51nnMFBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1), )
if mibBuilder.loadTexts: ol51nnMFBModTable.setStatus('mandatory')
ol51nnMFBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBModEntry.setStatus('mandatory')
ol51nnMFBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModSlotIndex.setStatus('mandatory')
ol51nnMFBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipNetwork.setStatus('mandatory')
ol51nnMFBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBModLLW.setStatus('mandatory')
ol51nnMFBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipLLW.setStatus('mandatory')
ol51nnMFBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2), )
if mibBuilder.loadTexts: ol51nnMFBPortTable.setStatus('mandatory')
ol51nnMFBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMFBPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMFBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPortEntry.setStatus('mandatory')
ol51nnMFBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortSlotIndex.setStatus('mandatory')
ol51nnMFBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortIndex.setStatus('mandatory')
ol51nnMFBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortAdminState.setStatus('mandatory')
ol51nnMFBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddySlot.setStatus('mandatory')
ol51nnMFBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddyPort.setStatus('mandatory')
ol51nnMFBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortDipAdminState.setStatus('mandatory')
ol53nnMFBMICModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1), )
if mibBuilder.loadTexts: ol53nnMFBMICModTable.setStatus('mandatory')
ol53nnMFBMICModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMFBMICModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICModEntry.setStatus('mandatory')
ol53nnMFBMICModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModSlotIndex.setStatus('mandatory')
ol53nnMFBMICModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamModule.setStatus('mandatory')
ol53nnMFBMICModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamModule.setStatus('mandatory')
ol53nnMFBMICModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamOperPath.setStatus('mandatory')
ol53nnMFBMICModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamOperPath.setStatus('mandatory')
ol53nnMFBMICModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModRingInfo.setStatus('mandatory')
ol53nnMFBMICPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2), )
if mibBuilder.loadTexts: ol53nnMFBMICPortTable.setStatus('mandatory')
ol53nnMFBMICPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMFBMICPortSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMFBMICPortIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICPortEntry.setStatus('mandatory')
ol53nnMFBMICPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortSlotIndex.setStatus('mandatory')
ol53nnMFBMICPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortIndex.setStatus('mandatory')
ol53nnMFBMICPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFBMICPortConfig.setStatus('mandatory')
ol53nnMFBMICPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPcmState.setStatus('mandatory')
ol53nnMFBMICPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortConnectState.setStatus('mandatory')
ol53nnMFBMICPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortNeighbor.setStatus('mandatory')
ol53nnMFBMICPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMFBMICPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortBSFlag.setStatus('mandatory')
ol53nnMFBMICPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPCWithhold.setStatus('mandatory')
ol53nnMFBMICPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortLerCondition.setStatus('mandatory')
ol53nnMFBMICTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3), )
if mibBuilder.loadTexts: ol53nnMFBMICTrunkTable.setStatus('mandatory')
ol53nnMFBMICTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMFBMICTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMFBMICTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICTrunkEntry.setStatus('mandatory')
ol53nnMFBMICTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkSlotIndex.setStatus('mandatory')
ol53nnMFBMICTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkIndex.setStatus('mandatory')
ol53nnMFIBSTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1), )
if mibBuilder.loadTexts: ol53nnMFIBSTModTable.setStatus('mandatory')
ol53nnMFIBSTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMFIBSTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTModEntry.setStatus('mandatory')
ol53nnMFIBSTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModSlotIndex.setStatus('mandatory')
ol53nnMFIBSTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamModule.setStatus('mandatory')
ol53nnMFIBSTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamModule.setStatus('mandatory')
ol53nnMFIBSTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamOperPath.setStatus('mandatory')
ol53nnMFIBSTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamOperPath.setStatus('mandatory')
ol53nnMFIBSTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModRingInfo.setStatus('mandatory')
ol53nnMFIBSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2), )
if mibBuilder.loadTexts: ol53nnMFIBSTPortTable.setStatus('mandatory')
ol53nnMFIBSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMFIBSTPortSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMFIBSTPortIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTPortEntry.setStatus('mandatory')
ol53nnMFIBSTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortSlotIndex.setStatus('mandatory')
ol53nnMFIBSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortIndex.setStatus('mandatory')
ol53nnMFIBSTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConfig.setStatus('mandatory')
ol53nnMFIBSTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPcmState.setStatus('mandatory')
ol53nnMFIBSTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConnectState.setStatus('mandatory')
ol53nnMFIBSTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortNeighbor.setStatus('mandatory')
ol53nnMFIBSTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMFIBSTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortBSFlag.setStatus('mandatory')
ol53nnMFIBSTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPCWithhold.setStatus('mandatory')
ol53nnMFIBSTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortLerCondition.setStatus('mandatory')
ol53nnMFIBSTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3), )
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkTable.setStatus('mandatory')
ol53nnMFIBSTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMFIBSTTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMFIBSTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkEntry.setStatus('mandatory')
ol53nnMFIBSTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkSlotIndex.setStatus('mandatory')
ol53nnMFIBSTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkIndex.setStatus('mandatory')
ol53nnMSTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1), )
if mibBuilder.loadTexts: ol53nnMSTPModTable.setStatus('mandatory')
ol53nnMSTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMSTPModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMSTPModEntry.setStatus('mandatory')
ol53nnMSTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModSlotIndex.setStatus('mandatory')
ol53nnMSTPModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamModule.setStatus('mandatory')
ol53nnMSTPModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamModule.setStatus('mandatory')
ol53nnMSTPModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamOperPath.setStatus('mandatory')
ol53nnMSTPModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamOperPath.setStatus('mandatory')
ol53nnMSTPModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModRingInfo.setStatus('mandatory')
ol53nnMSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2), )
if mibBuilder.loadTexts: ol53nnMSTPPortTable.setStatus('mandatory')
ol53nnMSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMSTPPortSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMSTPPortIndex"))
if mibBuilder.loadTexts: ol53nnMSTPPortEntry.setStatus('mandatory')
ol53nnMSTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortSlotIndex.setStatus('mandatory')
ol53nnMSTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortIndex.setStatus('mandatory')
ol53nnMSTPPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortConfig.setStatus('mandatory')
ol53nnMSTPPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPcmState.setStatus('mandatory')
ol53nnMSTPPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortConnectState.setStatus('mandatory')
ol53nnMSTPPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortNeighbor.setStatus('mandatory')
ol53nnMSTPPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMSTPPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortBSFlag.setStatus('mandatory')
ol53nnMSTPPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPCWithhold.setStatus('mandatory')
ol53nnMSTPPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortLerCondition.setStatus('mandatory')
ol53nnMSTPPortPersonality = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sddi", 1), ("tpddi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortPersonality.setStatus('mandatory')
ol53nnMSTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3), )
if mibBuilder.loadTexts: ol53nnMSTPTrunkTable.setStatus('mandatory')
ol53nnMSTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMSTPTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMSTPTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMSTPTrunkEntry.setStatus('mandatory')
ol53nnMSTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkSlotIndex.setStatus('mandatory')
ol53nnMSTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkIndex.setStatus('mandatory')
ol53nnMTDDIModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1), )
if mibBuilder.loadTexts: ol53nnMTDDIModTable.setStatus('mandatory')
ol53nnMTDDIModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMTDDIModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMTDDIModEntry.setStatus('mandatory')
ol53nnMTDDIModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIModSlotIndex.setStatus('mandatory')
ol53nnMTDDIModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIModDownStreamModule.setStatus('mandatory')
ol53nnMTDDIModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIModUpStreamModule.setStatus('mandatory')
ol53nnMTDDIModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIModDownStreamOperPath.setStatus('mandatory')
ol53nnMTDDIModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIModUpStreamOperPath.setStatus('mandatory')
ol53nnMTDDIModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIModRingInfo.setStatus('mandatory')
ol53nnMTDDIPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2), )
if mibBuilder.loadTexts: ol53nnMTDDIPortTable.setStatus('mandatory')
ol53nnMTDDIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMTDDIPortSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMTDDIPortIndex"))
if mibBuilder.loadTexts: ol53nnMTDDIPortEntry.setStatus('mandatory')
ol53nnMTDDIPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortSlotIndex.setStatus('mandatory')
ol53nnMTDDIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortIndex.setStatus('mandatory')
ol53nnMTDDIPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMTDDIPortConfig.setStatus('mandatory')
ol53nnMTDDIPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortPcmState.setStatus('mandatory')
ol53nnMTDDIPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortConnectState.setStatus('mandatory')
ol53nnMTDDIPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortNeighbor.setStatus('mandatory')
ol53nnMTDDIPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMTDDIPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortBSFlag.setStatus('mandatory')
ol53nnMTDDIPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortPCWithhold.setStatus('mandatory')
ol53nnMTDDIPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDIPortLerCondition.setStatus('mandatory')
ol53nnMTDDITrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 3), )
if mibBuilder.loadTexts: ol53nnMTDDITrunkTable.setStatus('mandatory')
ol53nnMTDDITrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMTDDITrunkSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMTDDITrunkIndex"))
if mibBuilder.loadTexts: ol53nnMTDDITrunkEntry.setStatus('mandatory')
ol53nnMTDDITrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDITrunkSlotIndex.setStatus('mandatory')
ol53nnMTDDITrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 65, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMTDDITrunkIndex.setStatus('mandatory')
ol51nnMTPCLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1), )
if mibBuilder.loadTexts: ol51nnMTPCLModTable.setStatus('mandatory')
ol51nnMTPCLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPCLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLModEntry.setStatus('mandatory')
ol51nnMTPCLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModSlotIndex.setStatus('mandatory')
ol51nnMTPCLModMonitorConn = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connector-1", 1), ("connector-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModMonitorConn.setStatus('mandatory')
ol51nnMTPCLModConn1Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1Network.setStatus('mandatory')
ol51nnMTPCLModConn2Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2Network.setStatus('mandatory')
ol51nnMTPCLModConn1DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1DipNetwork.setStatus('mandatory')
ol51nnMTPCLModConn2DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2DipNetwork.setStatus('mandatory')
ol51nnMTPCLModAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("collisions-31", 1), ("collisions-63", 2), ("collisions-127", 3), ("collisions-255", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModAutoPartition.setStatus('mandatory')
ol51nnMTPCLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2), )
if mibBuilder.loadTexts: ol51nnMTPCLPortTable.setStatus('mandatory')
ol51nnMTPCLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPCLPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMTPCLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLPortEntry.setStatus('mandatory')
ol51nnMTPCLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortSlotIndex.setStatus('mandatory')
ol51nnMTPCLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortIndex.setStatus('mandatory')
ol51nnMTPCLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortAdminState.setStatus('mandatory')
ol51nnMTPCLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddySlot.setStatus('mandatory')
ol51nnMTPCLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddyPort.setStatus('mandatory')
ol51nnMTPCLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipAdminState.setStatus('mandatory')
ol51nnMTPCLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortLinkInteg.setStatus('mandatory')
ol51nnMTPCLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipLinkInteg.setStatus('mandatory')
ol52nnBTTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1), )
if mibBuilder.loadTexts: ol52nnBTTModTable.setStatus('mandatory')
ol52nnBTTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnBTTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnBTTModEntry.setStatus('mandatory')
ol52nnBTTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSlotIndex.setStatus('mandatory')
ol52nnBTTModBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge-type-sr", 1), ("bridge-type-srt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModBridgeType.setStatus('mandatory')
ol52nnBTTModSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSoftwareVersion.setStatus('mandatory')
ol52nnBTTModSRBridgeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSRBridgeNo.setStatus('mandatory')
ol52nnBTTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModNetworkStatus.setStatus('mandatory')
ol52nnBTTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2), )
if mibBuilder.loadTexts: ol52nnBTTPortTable.setStatus('mandatory')
ol52nnBTTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnBTTPortSlotIndex"), (0, "CHIPCOMMIB", "ol52nnBTTPortIndex"))
if mibBuilder.loadTexts: ol52nnBTTPortEntry.setStatus('mandatory')
ol52nnBTTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSlotIndex.setStatus('mandatory')
ol52nnBTTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIndex.setStatus('mandatory')
ol52nnBTTPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10))).clone(namedValues=NamedValues(("backPlane", 1), ("rj45", 8), ("db-9", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortConnector.setStatus('mandatory')
ol52nnBTTPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSTAPState.setStatus('mandatory')
ol52nnBTTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIpAddress.setStatus('mandatory')
ol52nnBTTPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortMACAddress.setStatus('mandatory')
ol52nnBTTPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortThroughput.setStatus('mandatory')
ol52nnBTTPortForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortForwarding.setStatus('mandatory')
ol52nnBTTPortSRRingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSRRingNo.setStatus('mandatory')
ol52nnBTTPortRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortRingSpeed.setStatus('mandatory')
ol52nnBTTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3), )
if mibBuilder.loadTexts: ol52nnBTTTrunkTable.setStatus('mandatory')
ol52nnBTTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnBTTTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol52nnBTTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnBTTTrunkEntry.setStatus('mandatory')
ol52nnBTTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkSlotIndex.setStatus('mandatory')
ol52nnBTTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkIndex.setStatus('mandatory')
ol52nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1), )
if mibBuilder.loadTexts: ol52nnMMGTModTable.setStatus('mandatory')
ol52nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMMGTModEntry.setStatus('mandatory')
ol52nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModSlotIndex.setStatus('mandatory')
ol52nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModMasterPriority.setStatus('mandatory')
ol52nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModMasterStatus.setStatus('mandatory')
ol52nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModStationAddr.setStatus('mandatory')
ol52nnMMGTModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModRingSpeed.setStatus('mandatory')
ol52nnMMGTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModNetworkStatus.setStatus('mandatory')
ol52nnMMGTModMasterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15, 25))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("no-change", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModMasterNetwork.setStatus('mandatory')
ol52nnMMGTModLocalMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModLocalMACAddress.setStatus('mandatory')
ol52nnMMGTModMACAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("burned-in", 1), ("locally-administered", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModMACAddressType.setStatus('mandatory')
ol52nnMMGTModActiveMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModActiveMACAddress.setStatus('mandatory')
ol52nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2), )
if mibBuilder.loadTexts: ol52nnMMGTPortTable.setStatus('mandatory')
ol52nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMMGTPortSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol52nnMMGTPortEntry.setStatus('mandatory')
ol52nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortSlotIndex.setStatus('mandatory')
ol52nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortIndex.setStatus('mandatory')
ol52nnMMGTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortIpAddress.setStatus('mandatory')
ol52nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3), )
if mibBuilder.loadTexts: ol52nnMMGTTrunkTable.setStatus('mandatory')
ol52nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMMGTTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMMGTTrunkEntry.setStatus('mandatory')
ol52nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkSlotIndex.setStatus('mandatory')
ol52nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkIndex.setStatus('mandatory')
ol52nnMMGTTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkCableMon.setStatus('mandatory')
ol52nnMMGTTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkNetMapState.setStatus('mandatory')
ol52nnMMGTTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkExtBcnRecovery.setStatus('mandatory')
ol51nnIxModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1), )
if mibBuilder.loadTexts: ol51nnIxModTable.setStatus('mandatory')
ol51nnIxModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnIxModSlotIndex"))
if mibBuilder.loadTexts: ol51nnIxModEntry.setStatus('mandatory')
ol51nnIxModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSlotIndex.setStatus('mandatory')
ol51nnIxModSwType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bridge", 1), ("switch", 2), ("router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSwType.setStatus('mandatory')
ol51nnIxModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModStationAddr.setStatus('mandatory')
ol51nnIxModDipPromDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModDipPromDefaults.setStatus('mandatory')
ol51nnIxModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModProtocols.setStatus('mandatory')
ol51nnIxPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2), )
if mibBuilder.loadTexts: ol51nnIxPortTable.setStatus('mandatory')
ol51nnIxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnIxPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnIxPortIndex"))
if mibBuilder.loadTexts: ol51nnIxPortEntry.setStatus('mandatory')
ol51nnIxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSlotIndex.setStatus('mandatory')
ol51nnIxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIndex.setStatus('mandatory')
ol51nnIxPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipAdminState.setStatus('mandatory')
ol51nnIxPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSTAPState.setStatus('mandatory')
ol51nnIxPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIpAddress.setStatus('mandatory')
ol51nnIxPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipNetwork.setStatus('mandatory')
ol51nnIxPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDefNetwork.setStatus('mandatory')
ol53nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1), )
if mibBuilder.loadTexts: ol53nnMMGTModTable.setStatus('mandatory')
ol53nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMMGTModEntry.setStatus('mandatory')
ol53nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModSlotIndex.setStatus('mandatory')
ol53nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModMasterPriority.setStatus('mandatory')
ol53nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModMasterStatus.setStatus('mandatory')
ol53nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModStationAddr.setStatus('mandatory')
ol53nnMMGTModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModIpAddress.setStatus('mandatory')
ol53nnMMGTModDownStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamMAC.setStatus('mandatory')
ol53nnMMGTModUpStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamMAC.setStatus('mandatory')
ol53nnMMGTModfddiMACPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModfddiMACPath.setStatus('mandatory')
ol53nnMMGTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamModule.setStatus('mandatory')
ol53nnMMGTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamModule.setStatus('mandatory')
ol53nnMMGTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamOperPath.setStatus('mandatory')
ol53nnMMGTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamOperPath.setStatus('mandatory')
ol53nnMMGTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModRingInfo.setStatus('mandatory')
ol53nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2), )
if mibBuilder.loadTexts: ol53nnMMGTPortTable.setStatus('mandatory')
ol53nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMMGTPortSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol53nnMMGTPortEntry.setStatus('mandatory')
ol53nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortSlotIndex.setStatus('mandatory')
ol53nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortIndex.setStatus('mandatory')
ol53nnMMGTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConfig.setStatus('mandatory')
ol53nnMMGTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPcmState.setStatus('mandatory')
ol53nnMMGTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConnectState.setStatus('mandatory')
ol53nnMMGTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortNeighbor.setStatus('mandatory')
ol53nnMMGTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMMGTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortBSFlag.setStatus('mandatory')
ol53nnMMGTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPCWithhold.setStatus('mandatory')
ol53nnMMGTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortLerCondition.setStatus('mandatory')
ol53nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3), )
if mibBuilder.loadTexts: ol53nnMMGTTrunkTable.setStatus('mandatory')
ol53nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol53nnMMGTTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol53nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMMGTTrunkEntry.setStatus('mandatory')
ol53nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkSlotIndex.setStatus('mandatory')
ol53nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkIndex.setStatus('mandatory')
ol50nnMHCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1), )
if mibBuilder.loadTexts: ol50nnMHCTLModTable.setStatus('mandatory')
ol50nnMHCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol50nnMHCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMHCTLModEntry.setStatus('mandatory')
ol50nnMHCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModSlotIndex.setStatus('mandatory')
ol50nnMHCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModOperState.setStatus('mandatory')
ol50nnMHCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModClockStatus.setStatus('mandatory')
ol50nnMHCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModTempStatus.setStatus('mandatory')
ol50nnMHCTLModPDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModPDBStatus.setStatus('mandatory')
ol50nnMHCTLModDipCh1ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh1ActCol.setStatus('mandatory')
ol50nnMHCTLModDipCh2ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh2ActCol.setStatus('mandatory')
ol50nnMHCTLModDipCh3ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh3ActCol.setStatus('mandatory')
ol50nnMRCLSModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 51, 1), )
if mibBuilder.loadTexts: ol50nnMRCLSModTable.setStatus('mandatory')
ol50nnMRCLSModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 51, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol50nnMRCLSModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMRCLSModEntry.setStatus('mandatory')
ol50nnMRCLSModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 51, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCLSModSlotIndex.setStatus('mandatory')
ol50nnMRCLSModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 51, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCLSModOperState.setStatus('mandatory')
ol50nnMRCLSModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 51, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCLSModClockStatus.setStatus('mandatory')
ol50nnMRCLSModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 51, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCLSModTempStatus.setStatus('mandatory')
ol51nnMTPLSModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 1), )
if mibBuilder.loadTexts: ol51nnMTPLSModTable.setStatus('mandatory')
ol51nnMTPLSModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPLSModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPLSModEntry.setStatus('mandatory')
ol51nnMTPLSModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLSModSlotIndex.setStatus('mandatory')
ol51nnMTPLSModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLSModDipNetwork.setStatus('mandatory')
ol51nnMTPLSModAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("collisions-31", 1), ("collisions-63", 2), ("collisions-127", 3), ("collisions-255", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLSModAutoPartition.setStatus('mandatory')
ol51nnMTPLSPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2), )
if mibBuilder.loadTexts: ol51nnMTPLSPortTable.setStatus('mandatory')
ol51nnMTPLSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol51nnMTPLSPortSlotIndex"), (0, "CHIPCOMMIB", "ol51nnMTPLSPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPLSPortEntry.setStatus('mandatory')
ol51nnMTPLSPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLSPortSlotIndex.setStatus('mandatory')
ol51nnMTPLSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLSPortIndex.setStatus('mandatory')
ol51nnMTPLSPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLSPortAdminState.setStatus('mandatory')
ol51nnMTPLSPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLSPortDipAdminState.setStatus('mandatory')
ol51nnMTPLSPortDipSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLSPortDipSecurity.setStatus('mandatory')
ol51nnMTPLSPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLSPortBuddySlot.setStatus('mandatory')
ol51nnMTPLSPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLSPortBuddyPort.setStatus('mandatory')
ol51nnMTPLSPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLSPortLinkInteg.setStatus('mandatory')
ol51nnMTPLSPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 48, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLSPortDipLinkInteg.setStatus('mandatory')
oc61nnMTPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2), )
if mibBuilder.loadTexts: oc61nnMTPLPortTable.setStatus('mandatory')
oc61nnMTPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc61nnMTPLPortSlotIndex"), (0, "CHIPCOMMIB", "oc61nnMTPLPortIndex"))
if mibBuilder.loadTexts: oc61nnMTPLPortEntry.setStatus('mandatory')
oc61nnMTPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMTPLPortSlotIndex.setStatus('mandatory')
oc61nnMTPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMTPLPortIndex.setStatus('mandatory')
oc61nnMTPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMTPLPortAdminState.setStatus('mandatory')
oc61nnMTPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMTPLPortBuddySlot.setStatus('mandatory')
oc61nnMTPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMTPLPortBuddyPort.setStatus('mandatory')
oc61nnMTPLPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMTPLPortDipNetwork.setStatus('mandatory')
oc61nnMTPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMTPLPortLinkInteg.setStatus('mandatory')
oc61nnMTPLPortAutoPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMTPLPortAutoPolarity.setStatus('mandatory')
oc61nnMTPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 6), )
if mibBuilder.loadTexts: oc61nnMTPLModTable.setStatus('mandatory')
oc61nnMTPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc61nnMTPLModSlotIndex"), (0, "CHIPCOMMIB", "oc61nnMTPLModSubSlotIndex"))
if mibBuilder.loadTexts: oc61nnMTPLModEntry.setStatus('mandatory')
oc61nnMTPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMTPLModSlotIndex.setStatus('mandatory')
oc61nnMTPLModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMTPLModSubSlotIndex.setStatus('mandatory')
oc61nnMTPLModBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMTPLModBootVersion.setStatus('mandatory')
oc61nnMTPLModDipNVRam = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 47, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMTPLModDipNVRam.setStatus('mandatory')
oc61nnMCARModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 35, 6), )
if mibBuilder.loadTexts: oc61nnMCARModTable.setStatus('mandatory')
oc61nnMCARModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 35, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc61nnMCARModSlotIndex"), (0, "CHIPCOMMIB", "oc61nnMCARModSubSlotIndex"))
if mibBuilder.loadTexts: oc61nnMCARModEntry.setStatus('mandatory')
oc61nnMCARModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 35, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMCARModSlotIndex.setStatus('mandatory')
oc61nnMCARModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 35, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMCARModSubSlotIndex.setStatus('mandatory')
oc61nnMCARModBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 35, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMCARModBootVersion.setStatus('mandatory')
oc61nnMFBPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2), )
if mibBuilder.loadTexts: oc61nnMFBPPortTable.setStatus('mandatory')
oc61nnMFBPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc61nnMFBPPortSlotIndex"), (0, "CHIPCOMMIB", "oc61nnMFBPPortIndex"))
if mibBuilder.loadTexts: oc61nnMFBPPortEntry.setStatus('mandatory')
oc61nnMFBPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMFBPPortSlotIndex.setStatus('mandatory')
oc61nnMFBPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMFBPPortIndex.setStatus('mandatory')
oc61nnMFBPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMFBPPortAdminState.setStatus('mandatory')
oc61nnMFBPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMFBPPortBuddySlot.setStatus('mandatory')
oc61nnMFBPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMFBPPortBuddyPort.setStatus('mandatory')
oc61nnMFBPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMFBPPortDipNetwork.setStatus('mandatory')
oc61nnMFBPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnMFBPPortHipwr.setStatus('mandatory')
oc61nnMFBPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 6), )
if mibBuilder.loadTexts: oc61nnMFBPModTable.setStatus('mandatory')
oc61nnMFBPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc61nnMFBPModSlotIndex"), (0, "CHIPCOMMIB", "oc61nnMFBPModSubSlotIndex"))
if mibBuilder.loadTexts: oc61nnMFBPModEntry.setStatus('mandatory')
oc61nnMFBPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMFBPModSlotIndex.setStatus('mandatory')
oc61nnMFBPModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMFBPModSubSlotIndex.setStatus('mandatory')
oc61nnMFBPModBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMFBPModBootVersion.setStatus('mandatory')
oc61nnMFBPModDipNVRam = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 46, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnMFBPModDipNVRam.setStatus('mandatory')
ol60nnMRCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 1), )
if mibBuilder.loadTexts: ol60nnMRCTLModTable.setStatus('mandatory')
ol60nnMRCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol60nnMRCTLModSlotIndex"))
if mibBuilder.loadTexts: ol60nnMRCTLModEntry.setStatus('mandatory')
ol60nnMRCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol60nnMRCTLModSlotIndex.setStatus('mandatory')
ol60nnMRCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol60nnMRCTLModOperState.setStatus('mandatory')
ol60nnMRCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol60nnMRCTLModClockStatus.setStatus('mandatory')
ol60nnMRCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol60nnMRCTLModTempStatus.setStatus('mandatory')
oc60nnMRCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6), )
if mibBuilder.loadTexts: oc60nnMRCTLModTable.setStatus('mandatory')
oc60nnMRCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc60nnMRCTLModSlotIndex"), (0, "CHIPCOMMIB", "oc60nnMRCTLModSubSlotIndex"))
if mibBuilder.loadTexts: oc60nnMRCTLModEntry.setStatus('mandatory')
oc60nnMRCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModSlotIndex.setStatus('mandatory')
oc60nnMRCTLModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModSubSlotIndex.setStatus('mandatory')
oc60nnMRCTLModBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModBootVersion.setStatus('mandatory')
oc60nnMRCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModOperState.setStatus('mandatory')
oc60nnMRCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModClockStatus.setStatus('mandatory')
oc60nnMRCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModTempStatus.setStatus('mandatory')
oc60nnMRCTLModAtoDConverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModAtoDConverterStatus.setStatus('mandatory')
oc60nnMRCTLModPS1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("faulty", 3), ("not-installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModPS1Status.setStatus('mandatory')
oc60nnMRCTLModPS2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("faulty", 3), ("not-installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModPS2Status.setStatus('mandatory')
oc60nnMRCTLModPS3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("faulty", 3), ("not-installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModPS3Status.setStatus('mandatory')
oc60nnMRCTLModPS4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 50, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("faulty", 3), ("not-installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMRCTLModPS4Status.setStatus('mandatory')
oc61nnDMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6), )
if mibBuilder.loadTexts: oc61nnDMGTModTable.setStatus('mandatory')
oc61nnDMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc61nnDMGTModSlotIndex"), (0, "CHIPCOMMIB", "oc61nnDMGTModSubSlotIndex"))
if mibBuilder.loadTexts: oc61nnDMGTModEntry.setStatus('mandatory')
oc61nnDMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnDMGTModSlotIndex.setStatus('mandatory')
oc61nnDMGTModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnDMGTModSubSlotIndex.setStatus('mandatory')
oc61nnDMGTModBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnDMGTModBootVersion.setStatus('mandatory')
oc61nnDMGTModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnDMGTModIpAddress.setStatus('mandatory')
oc61nnDMGTModSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnDMGTModSubnetMask.setStatus('mandatory')
oc61nnDMGTModDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnDMGTModDefaultGateway.setStatus('mandatory')
oc61nnDMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc61nnDMGTModStationAddr.setStatus('mandatory')
oc61nnDMGTModInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("standby", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnDMGTModInterfaceMode.setStatus('mandatory')
oc61nnDMGTModRMONHostStatsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 45, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc61nnDMGTModRMONHostStatsMode.setStatus('mandatory')
oc60nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6), )
if mibBuilder.loadTexts: oc60nnMMGTModTable.setStatus('mandatory')
oc60nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "oc60nnMMGTModSlotIndex"), (0, "CHIPCOMMIB", "oc60nnMMGTModSubSlotIndex"))
if mibBuilder.loadTexts: oc60nnMMGTModEntry.setStatus('mandatory')
oc60nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMMGTModSlotIndex.setStatus('mandatory')
oc60nnMMGTModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMMGTModSubSlotIndex.setStatus('mandatory')
oc60nnMMGTModBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMMGTModBootVersion.setStatus('mandatory')
oc60nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oc60nnMMGTModMasterPriority.setStatus('mandatory')
oc60nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMMGTModMasterStatus.setStatus('mandatory')
oc60nnMMGTModHubSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 43, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oc60nnMMGTModHubSerial.setStatus('mandatory')
ol52nnMECModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1), )
if mibBuilder.loadTexts: ol52nnMECModTable.setStatus('mandatory')
ol52nnMECModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMECModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMECModEntry.setStatus('mandatory')
ol52nnMECModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECModSlotIndex.setStatus('mandatory')
ol52nnMECModSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECModSoftwareVersion.setStatus('mandatory')
ol52nnMECModSystemStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(43, 43)).setFixedLength(43)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECModSystemStatusCode.setStatus('mandatory')
ol52nnMECModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMECModRingSpeed.setStatus('mandatory')
ol52nnMECModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECModNetworkStatus.setStatus('mandatory')
ol52nnMECModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECModIpAddress.setStatus('mandatory')
ol52nnMECModMACStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECModMACStationAddr.setStatus('mandatory')
ol52nnMECPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 2), )
if mibBuilder.loadTexts: ol52nnMECPortTable.setStatus('mandatory')
ol52nnMECPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMECPortSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMECPortIndex"))
if mibBuilder.loadTexts: ol52nnMECPortEntry.setStatus('mandatory')
ol52nnMECPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECPortSlotIndex.setStatus('mandatory')
ol52nnMECPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECPortIndex.setStatus('mandatory')
ol52nnMECTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 3), )
if mibBuilder.loadTexts: ol52nnMECTrunkTable.setStatus('mandatory')
ol52nnMECTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol52nnMECTrunkSlotIndex"), (0, "CHIPCOMMIB", "ol52nnMECTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMECTrunkEntry.setStatus('mandatory')
ol52nnMECTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECTrunkSlotIndex.setStatus('mandatory')
ol52nnMECTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 62, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMECTrunkIndex.setStatus('mandatory')
ol41nnHMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 1), )
if mibBuilder.loadTexts: ol41nnHMTPModTable.setStatus('mandatory')
ol41nnHMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol41nnHMTPModSlotIndex"))
if mibBuilder.loadTexts: ol41nnHMTPModEntry.setStatus('mandatory')
ol41nnHMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHMTPModSlotIndex.setStatus('mandatory')
ol41nnHMTPModSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHMTPModSerialNo.setStatus('mandatory')
ol41nnHMTPModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHMTPModProtocols.setStatus('mandatory')
ol41nnHMTPModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHMTPModIpAddress.setStatus('mandatory')
ol41nnHMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 2), )
if mibBuilder.loadTexts: ol41nnHMTPPortTable.setStatus('mandatory')
ol41nnHMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol41nnHMTPPortSlotIndex"), (0, "CHIPCOMMIB", "ol41nnHMTPPortIndex"))
if mibBuilder.loadTexts: ol41nnHMTPPortEntry.setStatus('mandatory')
ol41nnHMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHMTPPortSlotIndex.setStatus('mandatory')
ol41nnHMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHMTPPortIndex.setStatus('mandatory')
ol41nnHMTPPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol41nnHMTPPortReset.setStatus('mandatory')
ol41nnHMTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 52, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol41nnHMTPPortLinkInteg.setStatus('mandatory')
ol41nnHETPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 1), )
if mibBuilder.loadTexts: ol41nnHETPModTable.setStatus('mandatory')
ol41nnHETPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol41nnHETPModSlotIndex"))
if mibBuilder.loadTexts: ol41nnHETPModEntry.setStatus('mandatory')
ol41nnHETPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHETPModSlotIndex.setStatus('mandatory')
ol41nnHETPModSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHETPModSerialNo.setStatus('mandatory')
ol41nnHETPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 2), )
if mibBuilder.loadTexts: ol41nnHETPPortTable.setStatus('mandatory')
ol41nnHETPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ol41nnHETPPortSlotIndex"), (0, "CHIPCOMMIB", "ol41nnHETPPortIndex"))
if mibBuilder.loadTexts: ol41nnHETPPortEntry.setStatus('mandatory')
ol41nnHETPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHETPPortSlotIndex.setStatus('mandatory')
ol41nnHETPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol41nnHETPPortIndex.setStatus('mandatory')
ol41nnHETPPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol41nnHETPPortReset.setStatus('mandatory')
ol41nnHETPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 53, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol41nnHETPPortLinkInteg.setStatus('mandatory')
olModSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5), )
if mibBuilder.loadTexts: olModSummaryTable.setStatus('mandatory')
olModSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5, 1), ).setIndexNames((0, "CHIPCOMMIB", "olModSummarySlotIndex"))
if mibBuilder.loadTexts: olModSummaryEntry.setStatus('mandatory')
olModSummarySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModSummarySlotIndex.setStatus('mandatory')
olModSummaryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModSummaryInfo.setStatus('mandatory')
ocModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6), )
if mibBuilder.loadTexts: ocModTable.setStatus('mandatory')
ocModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "ocModSlotIndex"), (0, "CHIPCOMMIB", "ocModSubSlotIndex"))
if mibBuilder.loadTexts: ocModEntry.setStatus('mandatory')
ocModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModSlotIndex.setStatus('mandatory')
ocModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModSubSlotIndex.setStatus('mandatory')
ocModType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 43, 45, 46, 47, 48, 50, 51, 52, 53, 62, 65))).clone(namedValues=NamedValues(("module-unmanageable", 1), ("module-unknown", 2), ("module-50nnM-CTL", 3), ("module-51nnM-MGT", 4), ("module-51nnM-FIB", 5), ("module-51nnM-UTP", 6), ("module-51nnM-TP", 7), ("module-51nnM-BNC", 8), ("module-51nnB-EE", 9), ("module-51nnR-ES", 10), ("module-51nnR-EE", 11), ("module-51nnM-AUIF", 12), ("module-51nnM-AUIM", 13), ("module-5208M-TP", 14), ("module-51nnM-FP", 15), ("module-51nnM-FBP", 16), ("module-51nnM-TPL", 17), ("module-51nnM-TPPL", 18), ("module-52nnM-TP", 19), ("module-52nnM-FR", 20), ("module-51nnM-TS", 21), ("module-51nnM-FL", 22), ("module-50nnM-RCTL", 23), ("module-51nnM-FB", 24), ("module-53nnM-MGT", 25), ("module-53nnM-FBMIC", 26), ("module-53nnM-FIBST", 27), ("module-53nnM-STP", 28), ("module-51nnM-TPCL", 29), ("module-52nnB-TT", 30), ("module-51nnI-x", 31), ("module-52nnM-MGT", 32), ("module-50nnM-HCTL", 33), ("module-61nnM-CAR", 35), ("module-60nnM-MGT", 43), ("module-61nnD-MGT", 45), ("module-61nnM-FBP", 46), ("module-61nnM-TPL", 47), ("module-51nnM-TPLS", 48), ("module-60nnM-RCTL", 50), ("module-50nnM-RCLS", 51), ("module-41nnH-MTP", 52), ("module-41nnH-ETP", 53), ("module-52nnM-EC", 62), ("module-53nnM-TDDI", 65)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModType.setStatus('mandatory')
ocModClass = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20))).clone(namedValues=NamedValues(("controller", 1), ("mgmt", 2), ("ethernet-media", 3), ("ethernet-interconnect", 4), ("ethernet-portswitching-media", 5), ("token-ring-media", 6), ("terminal-server", 7), ("fddi-media", 8), ("token-ring-mgmt", 9), ("ethernet-connswitching-media", 10), ("token-ring-interconnect", 11), ("fddi-mgmt", 12), ("oncore-token-ring-media", 13), ("ethernet-carrier", 14), ("oncore-oem-specials", 15), ("network-monitor", 16), ("oncore-download", 17), ("ethernet-media-extended", 19), ("online-token-ring-mod-interconnect", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModClass.setStatus('mandatory')
ocModDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModDescr.setStatus('mandatory')
ocModVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModVersion.setStatus('mandatory')
ocModVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("chipcom", 1), ("cisco", 2), ("pilkington", 3), ("datability", 5), ("ibm", 6), ("raycom", 7), ("retix", 8), ("intellicom", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModVendor.setStatus('mandatory')
ocModResetModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocModResetModule.setStatus('mandatory')
ocModConfigToDips = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noConfigure", 1), ("configure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocModConfigToDips.setStatus('mandatory')
ocModConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConfigured", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModConfigured.setStatus('mandatory')
ocModNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("other", 1), ("isolated", 2), ("port-switching", 3), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19), ("per-connector", 20), ("isolated-1", 21), ("isolated-2", 22), ("isolated-3", 23), ("isolated-4", 24), ("isolated-5", 25), ("isolated-6", 26), ("isolated-7", 27), ("isolated-8", 28), ("isolated-9", 29), ("isolated-10", 30), ("isolated-11", 31), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocModNetwork.setStatus('mandatory')
ocModNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("port-switching", 3), ("ethernet", 5), ("token-ring", 6), ("fddi", 7), ("serial", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModNetworkType.setStatus('mandatory')
ocModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 20, 21, 30, 31))).clone(namedValues=NamedValues(("okay", 1), ("fatalError", 10), ("booting", 20), ("partial-failure", 21), ("notInserted", 30), ("speedMismatch", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModStatus.setStatus('mandatory')
ocModNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModNumPorts.setStatus('mandatory')
ocModNumTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModNumTrunks.setStatus('mandatory')
ocModNumSubSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocModNumSubSlots.setStatus('mandatory')
olNetDPTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1), )
if mibBuilder.loadTexts: olNetDPTable.setStatus('mandatory')
olNetDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "olNetDPDataPath"))
if mibBuilder.loadTexts: olNetDPEntry.setStatus('mandatory')
olNetDPDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-path-1", 6), ("ethernet-path-2", 7), ("ethernet-path-3", 8), ("token-ring-path-1", 9), ("token-ring-path-2", 10), ("token-ring-path-3", 11), ("token-ring-path-4", 12), ("token-ring-path-5", 13), ("token-ring-path-6", 14), ("token-ring-path-7", 15), ("token-ring-path-8", 16), ("token-ring-path-9", 17), ("token-ring-path-10", 18), ("token-ring-path-11", 19), ("token-ring-path-12", 20), ("token-ring-path-13", 21), ("token-ring-path-14", 22), ("token-ring-path-15", 23), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31), ("ethernet-path-4", 32), ("ethernet-path-5", 33), ("ethernet-path-6", 34), ("ethernet-path-7", 35), ("ethernet-path-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetDPDataPath.setStatus('mandatory')
olNetDPNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notUsed", 1), ("otherProto", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetDPNetID.setStatus('mandatory')
olNetSecurityMACTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2), )
if mibBuilder.loadTexts: olNetSecurityMACTable.setStatus('mandatory')
olNetSecurityMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olNetSecurityMACSlotIndex"), (0, "CHIPCOMMIB", "olNetSecurityMACPortIndex"), (0, "CHIPCOMMIB", "olNetSecurityMACAddress"))
if mibBuilder.loadTexts: olNetSecurityMACEntry.setStatus('mandatory')
olNetSecurityMACSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetSecurityMACSlotIndex.setStatus('mandatory')
olNetSecurityMACPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetSecurityMACPortIndex.setStatus('mandatory')
olNetSecurityMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACAddress.setStatus('mandatory')
olNetSecurityMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACMode.setStatus('mandatory')
olNetSecurityMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACStatus.setStatus('mandatory')
olNetOlSec = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3))
olNetOlSecAddrTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: olNetOlSecAddrTable.setStatus('mandatory')
olNetOlSecAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "olNetOlSecAddrSlotIndex"), (0, "CHIPCOMMIB", "olNetOlSecAddrPortIndex"), (0, "CHIPCOMMIB", "olNetOlSecAddrAddress"))
if mibBuilder.loadTexts: olNetOlSecAddrEntry.setStatus('mandatory')
olNetOlSecAddrSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecAddrSlotIndex.setStatus('mandatory')
olNetOlSecAddrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecAddrPortIndex.setStatus('mandatory')
olNetOlSecAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecAddrAddress.setStatus('mandatory')
olNetOlSecAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecAddrStatus.setStatus('mandatory')
olNetOlSecControlTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: olNetOlSecControlTable.setStatus('mandatory')
olNetOlSecControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olNetOlSecControlSlotIndex"), (0, "CHIPCOMMIB", "olNetOlSecControlPortIndex"))
if mibBuilder.loadTexts: olNetOlSecControlEntry.setStatus('mandatory')
olNetOlSecControlSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecControlSlotIndex.setStatus('mandatory')
olNetOlSecControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecControlPortIndex.setStatus('mandatory')
olNetOlSecControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecControlMode.setStatus('mandatory')
olNetOlSecControlSecType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 1), ("intrusion-only", 2), ("eavesdropping-only", 3), ("no-security", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecControlSecType.setStatus('mandatory')
olNetOlSecControlActOnIntr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable-and-trap", 1), ("disable-only", 2), ("trap-only", 3), ("no-action", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecControlActOnIntr.setStatus('mandatory')
olNetOlSecControlClearAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-all-addrs", 1), ("not-clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecControlClearAddrs.setStatus('mandatory')
olNetOlSecControlAutolearnMask = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecControlAutolearnMask.setStatus('mandatory')
olNetOlSecAutolearn = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 3))
olNetOlSecAutolearnTrigger = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autolearn", 1), ("no-autolearn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecAutolearnTrigger.setStatus('mandatory')
olNetOlSecAutolearnDownload = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("download-addresses", 1), ("no-download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecAutolearnDownload.setStatus('mandatory')
olNetOlSecLearnTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 4), )
if mibBuilder.loadTexts: olNetOlSecLearnTable.setStatus('mandatory')
olNetOlSecLearnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 4, 1), ).setIndexNames((0, "CHIPCOMMIB", "olNetOlSecLearnSlotIndex"), (0, "CHIPCOMMIB", "olNetOlSecLearnPortIndex"), (0, "CHIPCOMMIB", "olNetOlSecLearnAddress"))
if mibBuilder.loadTexts: olNetOlSecLearnEntry.setStatus('mandatory')
olNetOlSecLearnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecLearnSlotIndex.setStatus('mandatory')
olNetOlSecLearnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecLearnPortIndex.setStatus('mandatory')
olNetOlSecLearnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 4, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecLearnAddress.setStatus('mandatory')
olNetOlSecLearnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetOlSecLearnStatus.setStatus('mandatory')
olNetOlSecIntruderTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5), )
if mibBuilder.loadTexts: olNetOlSecIntruderTable.setStatus('mandatory')
olNetOlSecIntruderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5, 1), ).setIndexNames((0, "CHIPCOMMIB", "olNetOlSecIntruderChronIndex"))
if mibBuilder.loadTexts: olNetOlSecIntruderEntry.setStatus('mandatory')
olNetOlSecIntruderChronIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecIntruderChronIndex.setStatus('mandatory')
olNetOlSecIntruderSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecIntruderSlot.setStatus('mandatory')
olNetOlSecIntruderPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecIntruderPort.setStatus('mandatory')
olNetOlSecIntruderAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecIntruderAddress.setStatus('mandatory')
olNetOlSecIntruderTimeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecIntruderTimeSince.setStatus('mandatory')
olNetOlSecIntruderDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-disabled", 1), ("not-auto-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecIntruderDisabled.setStatus('mandatory')
olNetOlSecPortIntrTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6), )
if mibBuilder.loadTexts: olNetOlSecPortIntrTable.setStatus('mandatory')
olNetOlSecPortIntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "olNetOlSecPortIntrSlotIndex"), (0, "CHIPCOMMIB", "olNetOlSecPortIntrPortIndex"), (0, "CHIPCOMMIB", "olNetOlSecPortIntrChronIndex"))
if mibBuilder.loadTexts: olNetOlSecPortIntrEntry.setStatus('mandatory')
olNetOlSecPortIntrSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecPortIntrSlotIndex.setStatus('mandatory')
olNetOlSecPortIntrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecPortIntrPortIndex.setStatus('mandatory')
olNetOlSecPortIntrChronIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecPortIntrChronIndex.setStatus('mandatory')
olNetOlSecPortIntrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecPortIntrAddress.setStatus('mandatory')
olNetOlSecPortIntrTimeSince = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecPortIntrTimeSince.setStatus('mandatory')
olNetOlSecPortIntrDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-disabled", 1), ("not-auto-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecPortIntrDisabled.setStatus('mandatory')
olNetOlSecTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 7))
olNetOlSecTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-applicable", 1), ("intrusion-attempt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetOlSecTrapReason.setStatus('mandatory')
olEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1), )
if mibBuilder.loadTexts: olEnetStatsTable.setStatus('mandatory')
olEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "olEnetStatsNetID"))
if mibBuilder.loadTexts: olEnetStatsEntry.setStatus('mandatory')
olEnetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsNetID.setStatus('mandatory')
olEnetStatsFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFramesRcvdOks.setStatus('mandatory')
olEnetStatsOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsOctetsRcvdOks.setStatus('mandatory')
olEnetStatsMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsMcastRcvdOks.setStatus('mandatory')
olEnetStatsBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsBcastRcvdOks.setStatus('mandatory')
olEnetStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFrameTooLongs.setStatus('mandatory')
olEnetStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsAlignmentErrors.setStatus('mandatory')
olEnetStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFCSErrors.setStatus('mandatory')
olEnetStatsRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsRunts.setStatus('mandatory')
olEnetStatsLocalColls = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsLocalColls.setStatus('mandatory')
olEnetStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsDropEvents.setStatus('mandatory')
olEnetStatsModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2), )
if mibBuilder.loadTexts: olEnetStatsModTable.setStatus('mandatory')
olEnetStatsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olEnetStatsModNetID"), (0, "CHIPCOMMIB", "olEnetStatsModSlotIndex"))
if mibBuilder.loadTexts: olEnetStatsModEntry.setStatus('mandatory')
olEnetStatsModNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModNetID.setStatus('mandatory')
olEnetStatsModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModSlotIndex.setStatus('mandatory')
olEnetStatsModFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFramesRcvdOks.setStatus('mandatory')
olEnetStatsModOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModOctetsRcvdOks.setStatus('mandatory')
olEnetStatsModMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModMcastRcvdOks.setStatus('mandatory')
olEnetStatsModBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModBcastRcvdOks.setStatus('mandatory')
olEnetStatsModFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFrameTooLongs.setStatus('mandatory')
olEnetStatsModAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModAlignmentErrors.setStatus('mandatory')
olEnetStatsModFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFCSErrors.setStatus('mandatory')
olEnetStatsModRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModRunts.setStatus('mandatory')
olEnetStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3), )
if mibBuilder.loadTexts: olEnetStatsPortTable.setStatus('mandatory')
olEnetStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olEnetStatsPortSlotIndex"), (0, "CHIPCOMMIB", "olEnetStatsPortIndex"))
if mibBuilder.loadTexts: olEnetStatsPortEntry.setStatus('mandatory')
olEnetStatsPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortNetID.setStatus('mandatory')
olEnetStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortSlotIndex.setStatus('mandatory')
olEnetStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortIndex.setStatus('mandatory')
olEnetStatsPortFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFramesRcvdOks.setStatus('mandatory')
olEnetStatsPortOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortOctetsRcvdOks.setStatus('mandatory')
olEnetStatsPortMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortMcastRcvdOks.setStatus('mandatory')
olEnetStatsPortBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortBcastRcvdOks.setStatus('mandatory')
olEnetStatsPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFrameTooLongs.setStatus('mandatory')
olEnetStatsPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortAlignmentErrors.setStatus('mandatory')
olEnetStatsPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFCSErrors.setStatus('mandatory')
olEnetStatsPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortRunts.setStatus('mandatory')
olEnetStatsPortSrcAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortSrcAddrChanges.setStatus('mandatory')
olEnetStatsPortLastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortLastSrcAddr.setStatus('mandatory')
olEnetStatsPortLastErrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortLastErrAddr.setStatus('mandatory')
olEnetMapTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4), )
if mibBuilder.loadTexts: olEnetMapTable.setStatus('mandatory')
olEnetMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1), ).setIndexNames((0, "CHIPCOMMIB", "olEnetMapNetID"), (0, "CHIPCOMMIB", "olEnetMapAddress"))
if mibBuilder.loadTexts: olEnetMapEntry.setStatus('mandatory')
olEnetMapNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapNetID.setStatus('mandatory')
olEnetMapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapAddress.setStatus('mandatory')
olEnetMapSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapSlotIndex.setStatus('mandatory')
olEnetMapPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapPortIndex.setStatus('mandatory')
olEnetMapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapFrames.setStatus('mandatory')
olEnetMapOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapOctets.setStatus('mandatory')
olEnetMapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapTime.setStatus('mandatory')
chipSnmpDot3RptrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5))
chipRptrBasicPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1))
chipRptrMonitorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2))
chipRptrAddrTrackPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3))
chipRptrRptrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1))
chipRptrGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2))
chipRptrPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3))
chipRptrMonitorRptrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 1))
chipRptrMonitorGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2))
chipRptrMonitorPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3))
chipRptrAddrTrackRptrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 1))
chipRptrAddrTrackGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 2))
chipRptrAddrTrackPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3))
chipRptrRptrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1), )
if mibBuilder.loadTexts: chipRptrRptrInfoTable.setStatus('mandatory')
chipRptrRptrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipRptrRptrInfoSlotIndex"), (0, "CHIPCOMMIB", "chipRptrRptrInfoNetID"))
if mibBuilder.loadTexts: chipRptrRptrInfoEntry.setStatus('mandatory')
chipRptrRptrInfoSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("backplane", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrRptrInfoSlotIndex.setStatus('mandatory')
chipRptrRptrInfoNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrRptrInfoNetID.setStatus('mandatory')
chipRptrGroupCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupCapacity.setStatus('mandatory')
chipRptrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("rptrFailure", 3), ("groupFailure", 4), ("portFailure", 5), ("generalFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrOperStatus.setStatus('mandatory')
chipRptrHealthText = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrHealthText.setStatus('mandatory')
chipRptrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipRptrReset.setStatus('mandatory')
chipRptrNonDisruptTest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSelfTest", 1), ("selfTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipRptrNonDisruptTest.setStatus('mandatory')
chipRptrTotalPartitionedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrTotalPartitionedPorts.setStatus('mandatory')
chipRptrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1), )
if mibBuilder.loadTexts: chipRptrGroupTable.setStatus('mandatory')
chipRptrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipRptrGroupSlotIndex"), (0, "CHIPCOMMIB", "chipRptrGroupNetID"), (0, "CHIPCOMMIB", "chipRptrGroupIndex"))
if mibBuilder.loadTexts: chipRptrGroupEntry.setStatus('mandatory')
chipRptrGroupSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("backplane", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupSlotIndex.setStatus('mandatory')
chipRptrGroupNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupNetID.setStatus('mandatory')
chipRptrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupIndex.setStatus('mandatory')
chipRptrGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupDescr.setStatus('mandatory')
chipRptrGroupObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupObjectID.setStatus('mandatory')
chipRptrGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("operational", 2), ("malfunctioning", 3), ("notPresent", 4), ("underTest", 5), ("resetInProgress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupOperStatus.setStatus('mandatory')
chipRptrGroupLastOperStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupLastOperStatusChange.setStatus('mandatory')
chipRptrGroupPortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrGroupPortCapacity.setStatus('mandatory')
chipRptrPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1), )
if mibBuilder.loadTexts: chipRptrPortTable.setStatus('mandatory')
chipRptrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipRptrPortSlotIndex"), (0, "CHIPCOMMIB", "chipRptrPortNetID"), (0, "CHIPCOMMIB", "chipRptrPortGroupIndex"), (0, "CHIPCOMMIB", "chipRptrPortIndex"))
if mibBuilder.loadTexts: chipRptrPortEntry.setStatus('mandatory')
chipRptrPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("backplane", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrPortSlotIndex.setStatus('mandatory')
chipRptrPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrPortNetID.setStatus('mandatory')
chipRptrPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrPortGroupIndex.setStatus('mandatory')
chipRptrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrPortIndex.setStatus('mandatory')
chipRptrPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipRptrPortAdminStatus.setStatus('mandatory')
chipRptrPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAutoPartitioned", 1), ("autoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrPortAutoPartitionState.setStatus('mandatory')
chipRptrPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrPortOperStatus.setStatus('mandatory')
chipRptrMonitorRptrTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 1, 1), )
if mibBuilder.loadTexts: chipRptrMonitorRptrTable.setStatus('mandatory')
chipRptrMonitorRptrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 1, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipRptrMonitorSlotIndex"), (0, "CHIPCOMMIB", "chipRptrMonitorNetID"))
if mibBuilder.loadTexts: chipRptrMonitorRptrEntry.setStatus('mandatory')
chipRptrMonitorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("backplane", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorSlotIndex.setStatus('mandatory')
chipRptrMonitorNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorNetID.setStatus('mandatory')
chipRptrMonitorTransmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorTransmitCollisions.setStatus('mandatory')
chipRptrMonitorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1), )
if mibBuilder.loadTexts: chipRptrMonitorGroupTable.setStatus('mandatory')
chipRptrMonitorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipRptrMonitorGroupSlotIndex"), (0, "CHIPCOMMIB", "chipRptrMonitorGroupNetID"), (0, "CHIPCOMMIB", "chipRptrMonitorGroupIndex"))
if mibBuilder.loadTexts: chipRptrMonitorGroupEntry.setStatus('mandatory')
chipRptrMonitorGroupSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("backplane", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorGroupSlotIndex.setStatus('mandatory')
chipRptrMonitorGroupNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorGroupNetID.setStatus('mandatory')
chipRptrMonitorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorGroupIndex.setStatus('mandatory')
chipRptrMonitorGroupTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorGroupTotalFrames.setStatus('mandatory')
chipRptrMonitorGroupTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorGroupTotalOctets.setStatus('mandatory')
chipRptrMonitorGroupTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorGroupTotalErrors.setStatus('mandatory')
chipRptrMonitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1), )
if mibBuilder.loadTexts: chipRptrMonitorPortTable.setStatus('mandatory')
chipRptrMonitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipRptrMonitorPortSlotIndex"), (0, "CHIPCOMMIB", "chipRptrMonitorPortNetID"), (0, "CHIPCOMMIB", "chipRptrMonitorPortGroupIndex"), (0, "CHIPCOMMIB", "chipRptrMonitorPortIndex"))
if mibBuilder.loadTexts: chipRptrMonitorPortEntry.setStatus('mandatory')
chipRptrMonitorPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("backplane", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortSlotIndex.setStatus('mandatory')
chipRptrMonitorPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortNetID.setStatus('mandatory')
chipRptrMonitorPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortGroupIndex.setStatus('mandatory')
chipRptrMonitorPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortIndex.setStatus('mandatory')
chipRptrMonitorPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortReadableFrames.setStatus('mandatory')
chipRptrMonitorPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortReadableOctets.setStatus('mandatory')
chipRptrMonitorPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortFCSErrors.setStatus('mandatory')
chipRptrMonitorPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortAlignmentErrors.setStatus('mandatory')
chipRptrMonitorPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortFrameTooLongs.setStatus('mandatory')
chipRptrMonitorPortShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortShortEvents.setStatus('mandatory')
chipRptrMonitorPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortRunts.setStatus('mandatory')
chipRptrMonitorPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortCollisions.setStatus('mandatory')
chipRptrMonitorPortLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortLateEvents.setStatus('mandatory')
chipRptrMonitorPortVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortVeryLongEvents.setStatus('mandatory')
chipRptrMonitorPortDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortDataRateMismatches.setStatus('mandatory')
chipRptrMonitorPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortAutoPartitions.setStatus('mandatory')
chipRptrMonitorPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrMonitorPortTotalErrors.setStatus('mandatory')
chipRptrAddrTrackTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1), )
if mibBuilder.loadTexts: chipRptrAddrTrackTable.setStatus('mandatory')
chipRptrAddrTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipRptrAddrTrackSlotIndex"), (0, "CHIPCOMMIB", "chipRptrAddrTrackGroupNetID"), (0, "CHIPCOMMIB", "chipRptrAddrTrackGroupIndex"), (0, "CHIPCOMMIB", "chipRptrAddrTrackPortIndex"))
if mibBuilder.loadTexts: chipRptrAddrTrackEntry.setStatus('mandatory')
chipRptrAddrTrackSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("backplane", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrAddrTrackSlotIndex.setStatus('mandatory')
chipRptrAddrTrackGroupNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("ethernet-4", 32), ("ethernet-5", 33), ("ethernet-6", 34), ("ethernet-7", 35), ("ethernet-8", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrAddrTrackGroupNetID.setStatus('mandatory')
chipRptrAddrTrackGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrAddrTrackGroupIndex.setStatus('mandatory')
chipRptrAddrTrackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrAddrTrackPortIndex.setStatus('mandatory')
chipRptrAddrTrackLastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrAddrTrackLastSourceAddress.setStatus('mandatory')
chipRptrAddrTrackSourceAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrAddrTrackSourceAddrChanges.setStatus('mandatory')
chipRptrAddrTrackNewLastSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 5, 3, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipRptrAddrTrackNewLastSrcAddress.setStatus('mandatory')
olTRnetMapState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapState.setStatus('mandatory')
olTRnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2), )
if mibBuilder.loadTexts: olTRnetStatsTable.setStatus('mandatory')
olTRnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRnetStatsNetID"))
if mibBuilder.loadTexts: olTRnetStatsEntry.setStatus('mandatory')
olTRnetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsNetID.setStatus('mandatory')
olTRnetStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLineErrors.setStatus('mandatory')
olTRnetStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsBurstErrors.setStatus('mandatory')
olTRnetStatsACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsACErrors.setStatus('mandatory')
olTRnetStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLostFrameErrors.setStatus('mandatory')
olTRnetStatsCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsCongestionErrors.setStatus('mandatory')
olTRnetStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsFrameCopiedErrors.setStatus('mandatory')
olTRnetStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTokenErrors.setStatus('mandatory')
olTRnetStatsDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsDuplicateAddresses.setStatus('mandatory')
olTRnetStatsBeaconEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsBeaconEvents.setStatus('mandatory')
olTRnetStatsLastBeaconSender = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconSender.setStatus('mandatory')
olTRnetStatsLastBeaconNAUN = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconNAUN.setStatus('mandatory')
olTRnetStatsLastBeaconTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconTime.setStatus('mandatory')
olTRnetStatsLastBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("portDisable", 2), ("trunkDisable", 3), ("moduleIsolate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconAction.setStatus('mandatory')
olTRnetStatsTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTotalStations.setStatus('mandatory')
olTRnetStatsConcStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsConcStations.setStatus('mandatory')
olTRnetStatsTotalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTotalPorts.setStatus('mandatory')
olTRnetStatsEnabledPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsEnabledPorts.setStatus('mandatory')
olTRnetStatsActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsActivePorts.setStatus('mandatory')
olTRnetStatsStationTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3), )
if mibBuilder.loadTexts: olTRnetStatsStationTable.setStatus('mandatory')
olTRnetStatsStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRnetStatsStationNetID"), (0, "CHIPCOMMIB", "olTRnetStatsStationAddr"))
if mibBuilder.loadTexts: olTRnetStatsStationEntry.setStatus('mandatory')
olTRnetStatsStationNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationNetID.setStatus('mandatory')
olTRnetStatsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationAddr.setStatus('mandatory')
olTRnetStatsStationSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationSlotIndex.setStatus('mandatory')
olTRnetStatsStationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationPortIndex.setStatus('mandatory')
olTRnetStatsStationNAUNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationNAUNAddress.setStatus('mandatory')
olTRnetStatsStationLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationLineErrors.setStatus('mandatory')
olTRnetStatsStationBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationBurstErrors.setStatus('mandatory')
olTRnetStatsStationACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationACErrors.setStatus('mandatory')
olTRnetStatsStationLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationLostFrameErrors.setStatus('mandatory')
olTRnetStatsStationCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationCongestionErrors.setStatus('mandatory')
olTRnetStatsStationFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationFrameCopiedErrors.setStatus('mandatory')
olTRnetStatsStationTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationTokenErrors.setStatus('mandatory')
olTRnetStatsStationDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationDuplicateAddresses.setStatus('mandatory')
olTRnetStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4), )
if mibBuilder.loadTexts: olTRnetStatsPortTable.setStatus('mandatory')
olTRnetStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRnetStatsPortSlotIndex"), (0, "CHIPCOMMIB", "olTRnetStatsPortIndex"))
if mibBuilder.loadTexts: olTRnetStatsPortEntry.setStatus('mandatory')
olTRnetStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortSlotIndex.setStatus('mandatory')
olTRnetStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortIndex.setStatus('mandatory')
olTRnetStatsPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortNetID.setStatus('mandatory')
olTRnetStatsPortTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortTotalStations.setStatus('mandatory')
olTRnetStatsPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortAddress.setStatus('mandatory')
olTRnetStatsPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortLineErrors.setStatus('mandatory')
olTRnetStatsPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortBurstErrors.setStatus('mandatory')
olTRnetStatsPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortACErrors.setStatus('mandatory')
olTRnetStatsPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortLostFrameErrors.setStatus('mandatory')
olTRnetStatsPortCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortCongestionErrors.setStatus('mandatory')
olTRnetStatsPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortFrameCopiedErrors.setStatus('mandatory')
olTRnetStatsPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortTokenErrors.setStatus('mandatory')
olTRnetStatsPortDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortDuplicateAddresses.setStatus('mandatory')
olTRnetMapSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5))
olTRnetMapSummaryLogicalState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalState.setStatus('mandatory')
olTRnetMapSummaryLogicalLock = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalLock.setStatus('mandatory')
olTRnetMapSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3), )
if mibBuilder.loadTexts: olTRnetMapSummaryTable.setStatus('mandatory')
olTRnetMapSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRnetMapSummaryNetID"), (0, "CHIPCOMMIB", "olTRnetMapSummaryIndex"))
if mibBuilder.loadTexts: olTRnetMapSummaryEntry.setStatus('mandatory')
olTRnetMapSummaryNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryNetID.setStatus('mandatory')
olTRnetMapSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryIndex.setStatus('mandatory')
olTRnetMapSummary32Stations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummary32Stations.setStatus('mandatory')
olTRTrafTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6), )
if mibBuilder.loadTexts: olTRTrafTable.setStatus('mandatory')
olTRTrafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRTrafNetID"))
if mibBuilder.loadTexts: olTRTrafEntry.setStatus('mandatory')
olTRTrafNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafNetID.setStatus('mandatory')
olTRTrafTokenRotationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTokenRotationTime.setStatus('mandatory')
olTRTrafDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafDropEvents.setStatus('mandatory')
olTRTrafOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafOctets.setStatus('mandatory')
olTRTrafFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames.setStatus('mandatory')
olTRTrafMacOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMacOctets.setStatus('mandatory')
olTRTrafMacFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMacFrames.setStatus('mandatory')
olTRTrafBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafBroadcastFrames.setStatus('mandatory')
olTRTrafMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMulticastFrames.setStatus('mandatory')
olTRTrafFrames18to63Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames18to63Octets.setStatus('mandatory')
olTRTrafFrames64to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames64to127Octets.setStatus('mandatory')
olTRTrafFrames128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames128to255Octets.setStatus('mandatory')
olTRTrafFrames256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames256to511Octets.setStatus('mandatory')
olTRTrafFrames512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames512to1023Octets.setStatus('mandatory')
olTRTrafFrames1024to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames1024to2047Octets.setStatus('mandatory')
olTRTrafFrames2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames2048to4095Octets.setStatus('mandatory')
olTRTrafFrames4096to8191Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames4096to8191Octets.setStatus('mandatory')
olTRTrafFrames8192to18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames8192to18000Octets.setStatus('mandatory')
olTRTrafFramesGreaterThan18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFramesGreaterThan18000Octets.setStatus('mandatory')
olTRTrafControlTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7), )
if mibBuilder.loadTexts: olTRTrafControlTable.setStatus('mandatory')
olTRTrafControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRTrafControlNetID"))
if mibBuilder.loadTexts: olTRTrafControlEntry.setStatus('mandatory')
olTRTrafControlNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlNetID.setStatus('mandatory')
olTRTrafControlLogicalState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlLogicalState.setStatus('mandatory')
olTRTrafControlLogicalLock = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlLogicalLock.setStatus('mandatory')
olTRTrafControlClear = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlClear.setStatus('mandatory')
olTRTrafControlLastClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlLastClearTime.setStatus('mandatory')
olTRTrafControlTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTotalStations.setStatus('mandatory')
olTRTrafControlStationLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlStationLastChangeTime.setStatus('mandatory')
olTRTrafControlPortTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlPortTotalStations.setStatus('mandatory')
olTRTrafControlPortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlPortLastChangeTime.setStatus('mandatory')
olTRTrafControlTopNMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlTopNMaxStations.setStatus('mandatory')
olTRTrafControlTopNTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTopNTotalStations.setStatus('mandatory')
olTRTrafControlTopNLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTopNLastChangeTime.setStatus('mandatory')
olTRTrafControlTopNInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlTopNInterval.setStatus('mandatory')
olTRTrafStationTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8), )
if mibBuilder.loadTexts: olTRTrafStationTable.setStatus('mandatory')
olTRTrafStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRTrafStationNetID"), (0, "CHIPCOMMIB", "olTRTrafStationAddress"))
if mibBuilder.loadTexts: olTRTrafStationEntry.setStatus('mandatory')
olTRTrafStationNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationNetID.setStatus('mandatory')
olTRTrafStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationAddress.setStatus('mandatory')
olTRTrafStationSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 254, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("remote-ring", 254), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationSlotIndex.setStatus('mandatory')
olTRTrafStationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationPortIndex.setStatus('mandatory')
olTRTrafStationInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationInFrames.setStatus('mandatory')
olTRTrafStationOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutFrames.setStatus('mandatory')
olTRTrafStationInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationInOctets.setStatus('mandatory')
olTRTrafStationOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutOctets.setStatus('mandatory')
olTRTrafStationOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutErrors.setStatus('mandatory')
olTRTrafStationOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutBroadcastFrames.setStatus('mandatory')
olTRTrafStationOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutMulticastFrames.setStatus('mandatory')
olTRTrafPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9), )
if mibBuilder.loadTexts: olTRTrafPortTable.setStatus('mandatory')
olTRTrafPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRTrafPortSlotIndex"), (0, "CHIPCOMMIB", "olTRTrafPortPortIndex"))
if mibBuilder.loadTexts: olTRTrafPortEntry.setStatus('mandatory')
olTRTrafPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortSlotIndex.setStatus('mandatory')
olTRTrafPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortPortIndex.setStatus('mandatory')
olTRTrafPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortNetID.setStatus('mandatory')
olTRTrafPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortAddress.setStatus('mandatory')
olTRTrafPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortInFrames.setStatus('mandatory')
olTRTrafPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutFrames.setStatus('mandatory')
olTRTrafPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortInOctets.setStatus('mandatory')
olTRTrafPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutOctets.setStatus('mandatory')
olTRTrafPortOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutErrors.setStatus('mandatory')
olTRTrafPortOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutBroadcastFrames.setStatus('mandatory')
olTRTrafPortOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutMulticastFrames.setStatus('mandatory')
olTRTrafTopNTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10), )
if mibBuilder.loadTexts: olTRTrafTopNTable.setStatus('mandatory')
olTRTrafTopNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRTrafTopNNetID"), (0, "CHIPCOMMIB", "olTRTrafTopNStatistic"), (0, "CHIPCOMMIB", "olTRTrafTopNIndex"))
if mibBuilder.loadTexts: olTRTrafTopNEntry.setStatus('mandatory')
olTRTrafTopNNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNNetID.setStatus('mandatory')
olTRTrafTopNStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("olTRTrafTopNInFrames", 1), ("olTRTrafTopNOutFrames", 2), ("olTRTrafTopNInOctets", 3), ("olTRTrafTopNOutOctets", 4), ("olTRTrafTopNOutErrors", 5), ("olTRTrafTopNOutBroadcastFrames", 6), ("olTRTrafTopNOutMulticastFrames", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNStatistic.setStatus('mandatory')
olTRTrafTopNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNIndex.setStatus('mandatory')
olTRTrafTopNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNAddress.setStatus('mandatory')
olTRTrafTopNSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 254, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("remote-ring", 254), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSlotIndex.setStatus('mandatory')
olTRTrafTopNPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNPortIndex.setStatus('mandatory')
olTRTrafTopNInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNInFrames.setStatus('mandatory')
olTRTrafTopNOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutFrames.setStatus('mandatory')
olTRTrafTopNInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNInOctets.setStatus('mandatory')
olTRTrafTopNOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutOctets.setStatus('mandatory')
olTRTrafTopNOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutErrors.setStatus('mandatory')
olTRTrafTopNOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutBroadcastFrames.setStatus('mandatory')
olTRTrafTopNOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutMulticastFrames.setStatus('mandatory')
olTRTrafTopNSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11), )
if mibBuilder.loadTexts: olTRTrafTopNSummaryTable.setStatus('mandatory')
olTRTrafTopNSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1), ).setIndexNames((0, "CHIPCOMMIB", "olTRTrafTopNSummaryNetID"), (0, "CHIPCOMMIB", "olTRTrafTopNSummaryStatistic"), (0, "CHIPCOMMIB", "olTRTrafTopNSummaryIndex"))
if mibBuilder.loadTexts: olTRTrafTopNSummaryEntry.setStatus('mandatory')
olTRTrafTopNSummaryNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryNetID.setStatus('mandatory')
olTRTrafTopNSummaryStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("olTRTrafTopNSummaryInFrames", 1), ("olTRTrafTopNSummaryOutFrames", 2), ("olTRTrafTopNSummaryInOctets", 3), ("olTRTrafTopNSummaryOutOctets", 4), ("olTRTrafTopNSummaryOutErrors", 5), ("olTRTrafTopNSummaryOutBroadcastFrames", 6), ("olTRTrafTopNSummaryOutMulticastFrames", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryStatistic.setStatus('mandatory')
olTRTrafTopNSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryIndex.setStatus('mandatory')
olTRTrafTopNSummaryStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryStations.setStatus('mandatory')
olFDDIStatsModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2), )
if mibBuilder.loadTexts: olFDDIStatsModTable.setStatus('mandatory')
olFDDIStatsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olFDDIStatsModSlotIndex"))
if mibBuilder.loadTexts: olFDDIStatsModEntry.setStatus('mandatory')
olFDDIStatsModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModSlotIndex.setStatus('mandatory')
olFDDIStatsModMgtRcvErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModMgtRcvErrs.setStatus('mandatory')
olFDDIStatsModMgtXmitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModMgtXmitErrs.setStatus('mandatory')
olFDDIStatsModBackplaneErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModBackplaneErrs.setStatus('mandatory')
olFDDIStatsModPllUnlockErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModPllUnlockErrs.setStatus('mandatory')
olFDDIStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3), )
if mibBuilder.loadTexts: olFDDIStatsPortTable.setStatus('mandatory')
olFDDIStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olFDDIStatsPortSlotIndex"), (0, "CHIPCOMMIB", "olFDDIStatsPortIndex"))
if mibBuilder.loadTexts: olFDDIStatsPortEntry.setStatus('mandatory')
olFDDIStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortSlotIndex.setStatus('mandatory')
olFDDIStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortIndex.setStatus('mandatory')
olFDDIStatsPortLCTFailCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLCTFailCts.setStatus('mandatory')
olFDDIStatsPortLerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLerEstimate.setStatus('mandatory')
olFDDIStatsPortLemRejectCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLemRejectCts.setStatus('mandatory')
olFDDIStatsPortLemCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLemCts.setStatus('mandatory')
olFDDInetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4), )
if mibBuilder.loadTexts: olFDDInetStatsTable.setStatus('mandatory')
olFDDInetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1), ).setIndexNames((0, "CHIPCOMMIB", "olFDDInetStatsNetID"))
if mibBuilder.loadTexts: olFDDInetStatsEntry.setStatus('mandatory')
olFDDInetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 16, 17, 18, 19))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsNetID.setStatus('mandatory')
olFDDInetStatsRingOpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsRingOpCounts.setStatus('mandatory')
olFDDInetStatsFrameCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsFrameCounts.setStatus('mandatory')
olFDDInetStatsErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsErrorCounts.setStatus('mandatory')
olFDDInetStatsLostCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsLostCounts.setStatus('mandatory')
olFDDInetStatsFrameErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsFrameErrorRatio.setStatus('mandatory')
olGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1), )
if mibBuilder.loadTexts: olGroupPortTable.setStatus('mandatory')
olGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "olGroupPortSlotIndex"), (0, "CHIPCOMMIB", "olGroupPortIndex"))
if mibBuilder.loadTexts: olGroupPortEntry.setStatus('mandatory')
olGroupPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupPortSlotIndex.setStatus('mandatory')
olGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupPortIndex.setStatus('mandatory')
olGroupPortGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupPortGroupID.setStatus('mandatory')
olGroupSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2), )
if mibBuilder.loadTexts: olGroupSummaryTable.setStatus('mandatory')
olGroupSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olGroupSummaryGroupID"), (0, "CHIPCOMMIB", "olGroupSummaryIndex"))
if mibBuilder.loadTexts: olGroupSummaryEntry.setStatus('mandatory')
olGroupSummaryGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("group-1", 1), ("group-2", 2), ("group-3", 3), ("group-4", 4), ("group-5", 5), ("group-6", 6), ("group-7", 7), ("group-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupSummaryGroupID.setStatus('mandatory')
olGroupSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupSummaryIndex.setStatus('mandatory')
olGroupSummaryPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupSummaryPorts.setStatus('mandatory')
olGroupSet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3))
olGroupSetAction = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add-ports", 1), ("clear-ports", 2), ("set-admin-state", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetAction.setStatus('mandatory')
olGroupSetGroupID = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("group-1", 1), ("group-2", 2), ("group-3", 3), ("group-4", 4), ("group-5", 5), ("group-6", 6), ("group-7", 7), ("group-8", 8), ("all-groups", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetGroupID.setStatus('mandatory')
olGroupSetSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetSlotIndex.setStatus('mandatory')
olGroupSetPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetPortIndex.setStatus('mandatory')
olGroupSetAdminState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetAdminState.setStatus('mandatory')
olThreshTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshTotalEntries.setStatus('mandatory')
olThreshMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshMaxEntries.setStatus('mandatory')
olThreshLastCreatedIndex = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshLastCreatedIndex.setStatus('mandatory')
olThreshAllMode = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshAllMode.setStatus('mandatory')
olThreshTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2), )
if mibBuilder.loadTexts: olThreshTable.setStatus('mandatory')
olThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olThreshIndex"))
if mibBuilder.loadTexts: olThreshEntry.setStatus('mandatory')
olThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshIndex.setStatus('mandatory')
olThreshMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshMode.setStatus('mandatory')
olThreshDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshDescription.setStatus('mandatory')
olThreshObjectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshObjectIdentifier.setStatus('mandatory')
olThreshStatCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("network", 2), ("port", 3), ("station", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatCategory.setStatus('mandatory')
olThreshStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("frames", 2), ("octets", 3), ("broadcast-frames", 4), ("multicast-frames", 5), ("error-frames", 6), ("tr-net-soft-errors", 7), ("tr-net-hard-errors", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatType.setStatus('mandatory')
olThreshStatNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("other", 1), ("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("agent-network", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatNetID.setStatus('mandatory')
olThreshStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatSlotIndex.setStatus('mandatory')
olThreshStatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatPortIndex.setStatus('mandatory')
olThreshStatStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatStationAddr.setStatus('mandatory')
olThreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshInterval.setStatus('mandatory')
olThreshCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delta-above", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshCondition.setStatus('mandatory')
olThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshValue.setStatus('mandatory')
olThreshCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshCurrentValue.setStatus('mandatory')
olThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-statistic-specified", 1), ("statistic-not-accessible", 2), ("not-yet-available", 3), ("valid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshStatus.setStatus('mandatory')
olThreshTimeSinceLastTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshTimeSinceLastTriggered.setStatus('mandatory')
olThreshActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trap-only", 1), ("run-script-only", 2), ("trap-run-script", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshActionType.setStatus('mandatory')
olThreshActionData = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshActionData.setStatus('mandatory')
olThreshActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshActionPriority.setStatus('mandatory')
ocPowerModeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-tolerant", 1), ("not-fault-tolerant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocPowerModeAdminStatus.setStatus('mandatory')
ocPowerModeOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-tolerant", 1), ("not-fault-tolerant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerModeOperStatus.setStatus('mandatory')
ocPowerOverheatPowerDownMode = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocPowerOverheatPowerDownMode.setStatus('mandatory')
ocPowerOutputTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2), )
if mibBuilder.loadTexts: ocPowerOutputTable.setStatus('mandatory')
ocPowerOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "ocPowerOutputType"))
if mibBuilder.loadTexts: ocPowerOutputEntry.setStatus('mandatory')
ocPowerOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("plusFiveVolt", 1), ("minusFiveVolt", 2), ("plusTwelveVolt", 3), ("minusTwelveVolt", 4), ("plusTwoVolt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerOutputType.setStatus('mandatory')
ocPowerOutputVoltageLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerOutputVoltageLevel.setStatus('mandatory')
ocPowerOutputWattageCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerOutputWattageCapacity.setStatus('mandatory')
ocPowerOutputWattageConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerOutputWattageConsumed.setStatus('mandatory')
ocPowerOutputWattageAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerOutputWattageAvailable.setStatus('mandatory')
ocPowerOutputUnmanagedWattageAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerOutputUnmanagedWattageAlloc.setStatus('mandatory')
ocPowerSlotTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 3), )
if mibBuilder.loadTexts: ocPowerSlotTable.setStatus('mandatory')
ocPowerSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "ocPowerSlotIndex"))
if mibBuilder.loadTexts: ocPowerSlotEntry.setStatus('mandatory')
ocPowerSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerSlotIndex.setStatus('mandatory')
ocPowerSlotClass = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10), ("not-applicable", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocPowerSlotClass.setStatus('mandatory')
ocPowerSlotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocPowerSlotAdminStatus.setStatus('mandatory')
ocPowerSlotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("insufficient-power", 3), ("enabled-always", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocPowerSlotOperStatus.setStatus('mandatory')
ocInvHubType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvHubType.setStatus('mandatory')
ocInvHubSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvHubSerialNo.setStatus('mandatory')
ocInvHubHWVer = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvHubHWVer.setStatus('mandatory')
ocInvHubMfr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvHubMfr.setStatus('mandatory')
ocInvHubMfrDate = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvHubMfrDate.setStatus('mandatory')
ocInvModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1), )
if mibBuilder.loadTexts: ocInvModTable.setStatus('mandatory')
ocInvModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "ocInvModSlotIndex"), (0, "CHIPCOMMIB", "ocInvModSubSlotIndex"))
if mibBuilder.loadTexts: ocInvModEntry.setStatus('mandatory')
ocInvModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModSlotIndex.setStatus('mandatory')
ocInvModSubSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModSubSlotIndex.setStatus('mandatory')
ocInvModModel = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModModel.setStatus('mandatory')
ocInvModSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModSerialNo.setStatus('mandatory')
ocInvModHWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModHWVer.setStatus('mandatory')
ocInvModSWVer = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModSWVer.setStatus('mandatory')
ocInvModSWBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModSWBootVer.setStatus('mandatory')
ocInvModMfr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModMfr.setStatus('mandatory')
ocInvModMfrDate = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 9, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocInvModMfrDate.setStatus('mandatory')
olPS2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 1))
olPS2OperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2OperatingSystem.setStatus('mandatory')
olPS2FixedDiskSize = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2FixedDiskSize.setStatus('mandatory')
olPS2RamSize = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2RamSize.setStatus('mandatory')
olPS2McaTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 2), )
if mibBuilder.loadTexts: olPS2McaTable.setStatus('mandatory')
olPS2McaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "olPS2McaIndex"))
if mibBuilder.loadTexts: olPS2McaEntry.setStatus('mandatory')
olPS2McaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2McaIndex.setStatus('mandatory')
olPS2McaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2McaDescription.setStatus('mandatory')
olPS2McaSlotConnectPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2McaSlotConnectPoint.setStatus('mandatory')
olPS2McaPortConnectPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2McaPortConnectPoint.setStatus('mandatory')
olPS2McaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2McaMacAddress.setStatus('mandatory')
olPS2ApplTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 3), )
if mibBuilder.loadTexts: olPS2ApplTable.setStatus('mandatory')
olPS2ApplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 3, 1), ).setIndexNames((0, "CHIPCOMMIB", "olPS2ApplIndex"))
if mibBuilder.loadTexts: olPS2ApplEntry.setStatus('mandatory')
olPS2ApplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2ApplIndex.setStatus('mandatory')
olPS2ApplDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 11, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPS2ApplDescription.setStatus('mandatory')
expDot5Table = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1), )
if mibBuilder.loadTexts: expDot5Table.setStatus('obsolete')
expDot5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "expDot5IfIndex"))
if mibBuilder.loadTexts: expDot5Entry.setStatus('obsolete')
expDot5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5IfIndex.setStatus('obsolete')
expDot5Commands = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-op", 1), ("open", 2), ("reset", 3), ("close", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expDot5Commands.setStatus('obsolete')
expDot5RingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5RingStatus.setStatus('obsolete')
expDot5RingState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openFailure", 5), ("ringFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5RingState.setStatus('obsolete')
expDot5RingOpenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOpen", 1), ("badParam", 2), ("lobeFailed", 3), ("signalLoss", 4), ("insertionTimeout", 5), ("ringFailed", 6), ("beaconing", 7), ("duplicateMAC", 8), ("requestFailed", 9), ("removeReceived", 10), ("open", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5RingOpenStatus.setStatus('obsolete')
expDot5RingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneMegabit", 2), ("fourMegabit", 3), ("sixteenMegabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expDot5RingSpeed.setStatus('obsolete')
expDot5UpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5UpStream.setStatus('obsolete')
expDot5ActMonParticipate = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expDot5ActMonParticipate.setStatus('obsolete')
expDot5Functional = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expDot5Functional.setStatus('obsolete')
expDot5StatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2), )
if mibBuilder.loadTexts: expDot5StatsTable.setStatus('obsolete')
expDot5StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "expDot5StatsIfIndex"))
if mibBuilder.loadTexts: expDot5StatsEntry.setStatus('obsolete')
expDot5StatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsIfIndex.setStatus('obsolete')
expDot5StatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsLineErrors.setStatus('obsolete')
expDot5StatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsBurstErrors.setStatus('obsolete')
expDot5StatsACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsACErrors.setStatus('obsolete')
expDot5StatsAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsAbortTransErrors.setStatus('obsolete')
expDot5StatsInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsInternalErrors.setStatus('obsolete')
expDot5StatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsLostFrameErrors.setStatus('obsolete')
expDot5StatsReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsReceiveCongestions.setStatus('obsolete')
expDot5StatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsFrameCopiedErrors.setStatus('obsolete')
expDot5StatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsTokenErrors.setStatus('obsolete')
expDot5StatsSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsSoftErrors.setStatus('obsolete')
expDot5StatsHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsHardErrors.setStatus('obsolete')
expDot5StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsSignalLoss.setStatus('obsolete')
expDot5StatsTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsTransmitBeacons.setStatus('obsolete')
expDot5StatsRecoverys = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsRecoverys.setStatus('obsolete')
expDot5StatsLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsLobeWires.setStatus('obsolete')
expDot5StatsRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsRemoves.setStatus('obsolete')
expDot5StatsSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsSingles.setStatus('obsolete')
expDot5StatsFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5StatsFreqErrors.setStatus('obsolete')
expDot5TimerTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5), )
if mibBuilder.loadTexts: expDot5TimerTable.setStatus('obsolete')
expDot5TimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1), ).setIndexNames((0, "CHIPCOMMIB", "expDot5TimerIfIndex"))
if mibBuilder.loadTexts: expDot5TimerEntry.setStatus('obsolete')
expDot5TimerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerIfIndex.setStatus('obsolete')
expDot5TimerReturnRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerReturnRepeat.setStatus('obsolete')
expDot5TimerHolding = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerHolding.setStatus('obsolete')
expDot5TimerQueuePDU = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerQueuePDU.setStatus('obsolete')
expDot5TimerValidTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerValidTransmit.setStatus('obsolete')
expDot5TimerNoToken = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerNoToken.setStatus('obsolete')
expDot5TimerActiveMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerActiveMon.setStatus('obsolete')
expDot5TimerStandbyMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerStandbyMon.setStatus('obsolete')
expDot5TimerErrorReport = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerErrorReport.setStatus('obsolete')
expDot5TimerBeaconTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerBeaconTransmit.setStatus('obsolete')
expDot5TimerBeaconReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDot5TimerBeaconReceive.setStatus('obsolete')
expDot5Tests = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 3))
testInsertFunc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 3, 1))
expDot5ChipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4))
chipSetIBM16 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4, 1))
chipSetTItms380 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4, 2))
chipSetTItms380c16 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4, 3))
chipTTYNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYNumber.setStatus('mandatory')
chipTTYTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 5, 2), )
if mibBuilder.loadTexts: chipTTYTable.setStatus('mandatory')
chipTTYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipTTYIndex"))
if mibBuilder.loadTexts: chipTTYEntry.setStatus('mandatory')
chipTTYIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYIndex.setStatus('mandatory')
chipTTYBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 300, 1200, 2400, 4800, 9600, 19200, 38400))).clone(namedValues=NamedValues(("one-hundred-ten", 110), ("three-hundred", 300), ("twelve-hundred", 1200), ("twenty-four-hundred", 2400), ("forty-eight-hundred", 4800), ("ninety-six-hundred", 9600), ("nineteen-two-hundred", 19200), ("thirty-eight-thousand-four-hundred", 38400)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYBaud.setStatus('mandatory')
chipTTYParity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYParity.setStatus('mandatory')
chipTTYStop = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYStop.setStatus('mandatory')
chipTTYData = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("seven", 7), ("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYData.setStatus('mandatory')
chipTTYTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTimeout.setStatus('mandatory')
chipTTYPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYPrompt.setStatus('mandatory')
chipTTYDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("asserted", 1), ("deasserted", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYDTR.setStatus('mandatory')
chipTTYTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTerminalType.setStatus('mandatory')
chipTFTPStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftpNoTransfer", 1), ("tftpGet", 2), ("tftpPut", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPStart.setStatus('mandatory')
chipTFTPSlot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 254, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("all-fddi-port-slots", 254), ("agent-slot", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPSlot.setStatus('mandatory')
chipTFTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPIpAddress.setStatus('mandatory')
chipTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileName.setStatus('mandatory')
chipTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flashCode", 1), ("bootCode", 2), ("ascii", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileType.setStatus('mandatory')
chipTFTPResult = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("clear", 1), ("xferInProgress", 2), ("okay", 3), ("otherTFTPError", 4), ("fileNotFound", 5), ("accessError", 6), ("diskFull", 7), ("illegalTFTPOperation", 8), ("invalidTFTPTransactionID", 9), ("noResponse", 10), ("invalidDownloadKey", 11), ("invalidSlot", 12), ("invalidNetwork", 13), ("fepromErase", 14), ("fepromProg", 15), ("xferError", 16), ("decodeError", 17), ("dlInProgress", 18), ("notYetSupported", 19), ("noModsOfType", 20), ("downloadFailed", 21), ("crcError", 22), ("invalidDLType", 23), ("unknownFEPROMType", 24), ("fileTooLarge", 25), ("fileGetProblem", 26), ("notMaster", 27), ("onlyOperational", 28), ("rejectedByTarget", 29), ("gatewayUnreachable", 30), ("moduleTypeError", 31), ("fileTypeError", 32), ("fileForwardProblem", 33), ("notifyTargetError", 34), ("serverTimeout", 35), ("noModuleInSlot", 36), ("targetTimeout", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTFTPResult.setStatus('mandatory')
chipTFTPSubSlot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPSubSlot.setStatus('mandatory')
chipTFTPTargetLocation = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("target-Device", 1), ("target-SlotSubSlot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPTargetLocation.setStatus('mandatory')
chipDownloadUDKSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadUDKSerial.setStatus('mandatory')
chipDownloadKey = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadKey.setStatus('mandatory')
chipDownloadDateTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipDownloadDateTime.setStatus('mandatory')
chipAlertTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 8, 1), )
if mibBuilder.loadTexts: chipAlertTable.setStatus('mandatory')
chipAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 8, 1, 1), ).setIndexNames((0, "CHIPCOMMIB", "chipAlertIndex"))
if mibBuilder.loadTexts: chipAlertEntry.setStatus('mandatory')
chipAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("snmp-authentication", 1), ("hello", 2), ("change", 3), ("console-display", 4), ("port-up-down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipAlertIndex.setStatus('mandatory')
chipAlertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("filter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipAlertMode.setStatus('mandatory')
chipBootPStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootpNoTransfer", 1), ("bootpRequest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipBootPStart.setStatus('mandatory')
chipBootPPowerUpMode = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipBootPPowerUpMode.setStatus('mandatory')
chipBootPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipBootPIpAddress.setStatus('mandatory')
chipBootPResult = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clear", 1), ("xferInProgress", 2), ("okay", 3), ("noBootPResponse", 4), ("otherBootPError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipBootPResult.setStatus('mandatory')
chipHello = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,1))
chipSlotDown = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,2)).setObjects(("CHIPCOMMIB", "olModSlotIndex"))
chipSlotUp = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,3)).setObjects(("CHIPCOMMIB", "olModSlotIndex"))
chipEnvironment = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,4))
chipHardware = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,5))
chipSoftware = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,6))
chipChange = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,7))
chipFatal = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,8))
chipTrunkDown = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,9)).setObjects(("CHIPCOMMIB", "olTrunkSlotIndex"), ("CHIPCOMMIB", "olTrunkIndex"), ("CHIPCOMMIB", "olTrunkAdminState"), ("CHIPCOMMIB", "olTrunkStatus"))
chipTrunkUp = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,10)).setObjects(("CHIPCOMMIB", "olTrunkSlotIndex"), ("CHIPCOMMIB", "olTrunkIndex"), ("CHIPCOMMIB", "olTrunkAdminState"), ("CHIPCOMMIB", "olTrunkStatus"))
chipPortDown = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,11)).setObjects(("CHIPCOMMIB", "olPortSlotIndex"), ("CHIPCOMMIB", "olPortIndex"), ("CHIPCOMMIB", "olPortAdminState"), ("CHIPCOMMIB", "olPortStatus"))
chipPortUp = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,12)).setObjects(("CHIPCOMMIB", "olPortSlotIndex"), ("CHIPCOMMIB", "olPortIndex"), ("CHIPCOMMIB", "olPortAdminState"), ("CHIPCOMMIB", "olPortStatus"))
chipPing = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,13)).setObjects(("CHIPCOMMIB", "chipEchoAddr"), ("CHIPCOMMIB", "chipEchoNumber"), ("CHIPCOMMIB", "chipEchoResponseCounts"))
chipAboveThreshd = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,14))
chipBelowThreshd = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,15))
chipModuleDown = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,16)).setObjects(("CHIPCOMMIB", "ocModSlotIndex"), ("CHIPCOMMIB", "ocModSubSlotIndex"), ("CHIPCOMMIB", "ocModType"), ("CHIPCOMMIB", "ocModDescr"))
chipModuleUp = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,17)).setObjects(("CHIPCOMMIB", "ocModSlotIndex"), ("CHIPCOMMIB", "ocModSubSlotIndex"), ("CHIPCOMMIB", "ocModType"), ("CHIPCOMMIB", "ocModDescr"))
chipSecurity = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,18)).setObjects(("CHIPCOMMIB", "olNetOlSecTrapReason"))
mibBuilder.exportSymbols("CHIPCOMMIB", ol5208MTPTrunkTable=ol5208MTPTrunkTable, chipRptrPortTable=chipRptrPortTable, ol51nnBEEPortSlotIndex=ol51nnBEEPortSlotIndex, olTRTrafPortOutOctets=olTRTrafPortOutOctets, ol5208MTPPortIndex=ol5208MTPPortIndex, ol52nnBTTTrunkEntry=ol52nnBTTTrunkEntry, olTRnetStatsPortNetID=olTRnetStatsPortNetID, onsembleEthernet=onsembleEthernet, chipAlertEntry=chipAlertEntry, expDot5Table=expDot5Table, ol52nnBTTTrunkSlotIndex=ol52nnBTTTrunkSlotIndex, expDot5ActMonParticipate=expDot5ActMonParticipate, ol53nnMSTPTrunkSlotIndex=ol53nnMSTPTrunkSlotIndex, oc61nnDMGTModInterfaceMode=oc61nnDMGTModInterfaceMode, chipTTYTimeout=chipTTYTimeout, olTRTrafTopNNetID=olTRTrafTopNNetID, ol41nnHETPPortEntry=ol41nnHETPPortEntry, olNetOlSecControlMode=olNetOlSecControlMode, olTRnetStatsStationFrameCopiedErrors=olTRnetStatsStationFrameCopiedErrors, ol50nnMHCTLModClockStatus=ol50nnMHCTLModClockStatus, olTRTrafControlLogicalLock=olTRTrafControlLogicalLock, ol51nnMUTPPortBuddySlot=ol51nnMUTPPortBuddySlot, ol53nnMFBMICTrunkEntry=ol53nnMFBMICTrunkEntry, olTRTrafTopNSummaryStations=olTRTrafTopNSummaryStations, olTRnetStatsPortFrameCopiedErrors=olTRnetStatsPortFrameCopiedErrors, olTRnetMapSummaryTable=olTRnetMapSummaryTable, olPortConnector=olPortConnector, ol52nnMMGTModSlotIndex=ol52nnMMGTModSlotIndex, chipRptrPortEntry=chipRptrPortEntry, ol51nnMFIBModTable=ol51nnMFIBModTable, chipRptrMonitorRptrTable=chipRptrMonitorRptrTable, ol51nnMTPPLPortBuddySlot=ol51nnMTPPLPortBuddySlot, ol51nnIxPortDefNetwork=ol51nnIxPortDefNetwork, olThreshEntry=olThreshEntry, olFDDIStatsPortLemRejectCts=olFDDIStatsPortLemRejectCts, ol51nnMTPPortEntry=ol51nnMTPPortEntry, chipTFTPFileName=chipTFTPFileName, olThreshTable=olThreshTable, ol5208MTPPortEntry=ol5208MTPPortEntry, chipRptrGroupIndex=chipRptrGroupIndex, olAgentsMasterReset=olAgentsMasterReset, ol53nnMTDDIPortConfig=ol53nnMTDDIPortConfig, chipRptrRptrInfoNetID=chipRptrRptrInfoNetID, ol52nnMECTrunkEntry=ol52nnMECTrunkEntry, olNetOlSecPortIntrTimeSince=olNetOlSecPortIntrTimeSince, olPortStatus=olPortStatus, ol51nnMAUIMPortBuddyPort=ol51nnMAUIMPortBuddyPort, chipRptrMonitorTransmitCollisions=chipRptrMonitorTransmitCollisions, midnight=midnight, expDot5Commands=expDot5Commands, ol41nnHETPModTable=ol41nnHETPModTable, ol51nnMTPCLModTable=ol51nnMTPCLModTable, ol51nnMTPPortDipAdminState=ol51nnMTPPortDipAdminState, ocPowerSlotTable=ocPowerSlotTable, expDot5StatsSoftErrors=expDot5StatsSoftErrors, olNetOlSecPortIntrAddress=olNetOlSecPortIntrAddress, expDot5ChipSets=expDot5ChipSets, ol51nnMBNCPortDipTermination=ol51nnMBNCPortDipTermination, olTRTrafStationOutErrors=olTRTrafStationOutErrors, olFDDInetStatsEntry=olFDDInetStatsEntry, olAgentsEntry=olAgentsEntry, ol51nnMFPModTable=ol51nnMFPModTable, ol51nnMTPLSPortEntry=ol51nnMTPLSPortEntry, expDot5StatsFreqErrors=expDot5StatsFreqErrors, ol53nnMSTPPortSlotIndex=ol53nnMSTPPortSlotIndex, olGroupSummaryTable=olGroupSummaryTable, ol53nnMTDDITrunkEntry=ol53nnMTDDITrunkEntry, ol52nnBTTPortConnector=ol52nnBTTPortConnector, olEnetStatsPortMcastRcvdOks=olEnetStatsPortMcastRcvdOks, chipRptrGroupEntry=chipRptrGroupEntry, ol52nnMFRTrunkDipCableMon=ol52nnMFRTrunkDipCableMon, chipRptrMonitorPortInfo=chipRptrMonitorPortInfo, olTRTrafFrames=olTRTrafFrames, olTRTrafStationOutMulticastFrames=olTRTrafStationOutMulticastFrames, ocInvModEntry=ocInvModEntry, ol51nnIxModSlotIndex=ol51nnIxModSlotIndex, ol51nnMTPL=ol51nnMTPL, olThresh=olThresh, expDot5StatsSingles=expDot5StatsSingles, olThreshTimeSinceLastTriggered=olThreshTimeSinceLastTriggered, oc61nnMTPLModDipNVRam=oc61nnMTPLModDipNVRam, ol53nnMFIBSTPortConfig=ol53nnMFIBSTPortConfig, olPS2McaMacAddress=olPS2McaMacAddress, olThreshActionData=olThreshActionData, oc60nnMRCTLModAtoDConverterStatus=oc60nnMRCTLModAtoDConverterStatus, ol51nnRES=ol51nnRES, ol53nnMFIBSTPortBSFlag=ol53nnMFIBSTPortBSFlag, olTRTrafMulticastFrames=olTRTrafMulticastFrames, olFDDIStatsPortLCTFailCts=olFDDIStatsPortLCTFailCts, oc61nnMFBPPortBuddySlot=oc61nnMFBPPortBuddySlot, olSpecMods=olSpecMods, ol51nnRESPortEntry=ol51nnRESPortEntry, chipRptrAddrTrackPackage=chipRptrAddrTrackPackage, chipDownloadDateTime=chipDownloadDateTime, olNetOlSecIntruderTable=olNetOlSecIntruderTable, ol52nnBTTModSoftwareVersion=ol52nnBTTModSoftwareVersion, olTRnetStatsLostFrameErrors=olTRnetStatsLostFrameErrors, olThreshStatNetID=olThreshStatNetID, ol53nnMTDDIPortPCWithhold=ol53nnMTDDIPortPCWithhold, ol51nnMAUIMModEntry=ol51nnMAUIMModEntry, olNetOlSecLearnStatus=olNetOlSecLearnStatus, ol51nnMTSPortSlotIndex=ol51nnMTSPortSlotIndex, expDot5RingState=expDot5RingState, ol52nnMMGTModActiveMACAddress=ol52nnMMGTModActiveMACAddress, olGroups=olGroups, ocModType=ocModType, expDot5StatsReceiveCongestions=expDot5StatsReceiveCongestions, ol51nnMTPLPortBuddySlot=ol51nnMTPLPortBuddySlot, olEnetStatsPortSlotIndex=olEnetStatsPortSlotIndex, chipRptrAddrTrackNewLastSrcAddress=chipRptrAddrTrackNewLastSrcAddress, olTRTrafTopNTable=olTRTrafTopNTable, olPS2McaSlotConnectPoint=olPS2McaSlotConnectPoint, olTRTrafControlClear=olTRTrafControlClear, olFDDInetStatsNetID=olFDDInetStatsNetID, ol53nnMFBMICPortEntry=ol53nnMFBMICPortEntry, olEnvPSEntry=olEnvPSEntry, chipSnmpDot3RptrMgt=chipSnmpDot3RptrMgt, ol53nnMFBMICPortPcmState=ol53nnMFBMICPortPcmState, olThreshInterval=olThreshInterval, ocInventory=ocInventory, ol51nnMTSModTCPPort=ol51nnMTSModTCPPort, ol51nnMTPLSPortIndex=ol51nnMTPLSPortIndex, ol53nnMMGTModDownStreamModule=ol53nnMMGTModDownStreamModule, ol53nnMFBMICPortConfig=ol53nnMFBMICPortConfig, oc60nnMMGTModSubSlotIndex=oc60nnMMGTModSubSlotIndex, expDot5Tests=expDot5Tests, expDot5StatsSignalLoss=expDot5StatsSignalLoss, ol50nnMRCTLModEntry=ol50nnMRCTLModEntry, ol53nnMSTPPortRemoteMACIndicated=ol53nnMSTPPortRemoteMACIndicated, ol51nnMTPCLModEntry=ol51nnMTPCLModEntry, olTRnetStatsPortTable=olTRnetStatsPortTable, ol51nnMMGTModMasterStatus=ol51nnMMGTModMasterStatus, ol52nnMFRPortSlotIndex=ol52nnMFRPortSlotIndex, olPS2RamSize=olPS2RamSize, olNet=olNet, ol53nnMMGTPortSlotIndex=ol53nnMMGTPortSlotIndex, ol50nnMRCLS=ol50nnMRCLS, ol53nnMTDDIPortConnectState=ol53nnMTDDIPortConnectState, olEnvTempStatus=olEnvTempStatus, ol51nnMMGTModMasterPriority=ol51nnMMGTModMasterPriority, ol51nnREEPortDefNetwork=ol51nnREEPortDefNetwork, olTRTrafMacOctets=olTRTrafMacOctets, olTRTrafTopNOutErrors=olTRTrafTopNOutErrors, ol52nnMECModSystemStatusCode=ol52nnMECModSystemStatusCode, ol52nnMFRTrunkExtBcnRecovery=ol52nnMFRTrunkExtBcnRecovery, olModNetworkType=olModNetworkType, ol53nnMFIBSTModSlotIndex=ol53nnMFIBSTModSlotIndex, ol51nnMTPCLPortEntry=ol51nnMTPCLPortEntry, ol51nnMFLModSlotIndex=ol51nnMFLModSlotIndex, olNetOlSecControlActOnIntr=olNetOlSecControlActOnIntr, ol50nnMRCLSModEntry=ol50nnMRCLSModEntry, chipEchoNumber=chipEchoNumber, chipRptrTotalPartitionedPorts=chipRptrTotalPartitionedPorts, expDot5=expDot5, olEnetStatsPortAlignmentErrors=olEnetStatsPortAlignmentErrors, olTRnetStatsStationLineErrors=olTRnetStatsStationLineErrors, oc61nnDMGTModTable=oc61nnDMGTModTable, ocPowerOutputWattageAvailable=ocPowerOutputWattageAvailable, olEnvFanStatus=olEnvFanStatus, olTRTrafControlTable=olTRTrafControlTable, ocPowerSlotClass=ocPowerSlotClass, chipRptrMonitorPortSlotIndex=chipRptrMonitorPortSlotIndex, ocInvHubMfr=ocInvHubMfr, ol51nnMFBPModTable=ol51nnMFBPModTable, ol53nnMFBMICModEntry=ol53nnMFBMICModEntry, chipRptrMonitorPortAlignmentErrors=chipRptrMonitorPortAlignmentErrors, ol52nnMMGTPortIndex=ol52nnMMGTPortIndex, ol53nnMSTPModSlotIndex=ol53nnMSTPModSlotIndex, ol52nnMECModMACStationAddr=ol52nnMECModMACStationAddr, ol5208MTPModBypsOperState=ol5208MTPModBypsOperState, olTRnetStatsStationBurstErrors=olTRnetStatsStationBurstErrors, ocPowerOutputEntry=ocPowerOutputEntry, ol41nnHMTPPortReset=ol41nnHMTPPortReset, chipRptrMonitorPortFCSErrors=chipRptrMonitorPortFCSErrors, ol51nnIxPortIpAddress=ol51nnIxPortIpAddress, oc61nnMFBPPortAdminState=oc61nnMFBPPortAdminState, ol51nnBEEPortIndex=ol51nnBEEPortIndex, ol53nnMFBMICModDownStreamModule=ol53nnMFBMICModDownStreamModule, olEnvPSCapacity=olEnvPSCapacity, ol52nnMFRPortCableImp=ol52nnMFRPortCableImp, oc61nnMTPLPortAutoPolarity=oc61nnMTPLPortAutoPolarity, olTRTrafTopNPortIndex=olTRTrafTopNPortIndex, olTRnetStatsStationCongestionErrors=olTRnetStatsStationCongestionErrors, ol51nnMFBPPortSlotIndex=ol51nnMFBPPortSlotIndex, ol53nnMSTPTrunkEntry=ol53nnMSTPTrunkEntry, ol52nnBTTModSlotIndex=ol52nnBTTModSlotIndex, ol51nnMTPLPortSlotIndex=ol51nnMTPLPortSlotIndex, chipRptrGroupNetID=chipRptrGroupNetID, olEnvEntry=olEnvEntry, olTRnetStatsPortLineErrors=olTRnetStatsPortLineErrors, ol50nnMHCTLModTable=ol50nnMHCTLModTable, olNetOlSecAddrTable=olNetOlSecAddrTable, oc61nnDMGTModRMONHostStatsMode=oc61nnDMGTModRMONHostStatsMode, ol51nnMUTPModFFL=ol51nnMUTPModFFL, olNetOlSecAutolearn=olNetOlSecAutolearn, ol51nnMTPModSlotIndex=ol51nnMTPModSlotIndex, olTRnetStatsBeaconEvents=olTRnetStatsBeaconEvents, chipRptrReset=chipRptrReset, oc61nnMTPLPortAdminState=oc61nnMTPLPortAdminState, olTRTrafStationSlotIndex=olTRTrafStationSlotIndex, ol51nnMTSPortTable=ol51nnMTSPortTable, olTRTrafTopNEntry=olTRTrafTopNEntry, chipEcho=chipEcho, olFDDIStatsModTable=olFDDIStatsModTable, olAgentsSlotIndex=olAgentsSlotIndex, chipRptrPortIndex=chipRptrPortIndex, oc60nnMMGTModMasterStatus=oc60nnMMGTModMasterStatus, olGroupPortEntry=olGroupPortEntry, chipGenNetman=chipGenNetman, ol53nnMFBMICTrunkIndex=ol53nnMFBMICTrunkIndex, oc61nnMTPLModEntry=oc61nnMTPLModEntry, olTRTrafTopNSummaryTable=olTRTrafTopNSummaryTable, ol53nnMMGTModUpStreamMAC=ol53nnMMGTModUpStreamMAC, ol51nnMTPLSPortDipSecurity=ol51nnMTPLSPortDipSecurity, olThreshActionType=olThreshActionType, ol51nnMTPPLPortLinkInteg=ol51nnMTPPLPortLinkInteg, chipRptrMonitorPortGroupIndex=chipRptrMonitorPortGroupIndex, olTRTrafPortPortIndex=olTRTrafPortPortIndex, ocInvHubHWVer=ocInvHubHWVer, ol51nnMTPLSPortBuddyPort=ol51nnMTPLSPortBuddyPort, olEnet=olEnet, ol52nnMFRModDipRingSpeed=ol52nnMFRModDipRingSpeed, ol52nnMFRTrunkSlotIndex=ol52nnMFRTrunkSlotIndex, ol51nnMTPPortDipLinkInteg=ol51nnMTPPortDipLinkInteg, oc61nnMTPLPortIndex=oc61nnMTPLPortIndex, ol51nnMFBPPortDipNetwork=ol51nnMFBPPortDipNetwork, olEnetMapAddress=olEnetMapAddress, oeim=oeim, olFDDInetStatsErrorCounts=olFDDInetStatsErrorCounts, chipRptrMonitorPackage=chipRptrMonitorPackage, ol52nnBTTModNetworkStatus=ol52nnBTTModNetworkStatus, ol50nnMRCTLModSlotIndex=ol50nnMRCTLModSlotIndex, ol41nnHETPModSerialNo=ol41nnHETPModSerialNo, ol53nnMTDDIPortRemoteMACIndicated=ol53nnMTDDIPortRemoteMACIndicated, olTrunkConnector=olTrunkConnector, ol52nnMFRTrunkEntry=ol52nnMFRTrunkEntry, chipRptrHealthText=chipRptrHealthText, ol41nnHMTPPortLinkInteg=ol41nnHMTPPortLinkInteg, chipRptrPortGroupIndex=chipRptrPortGroupIndex, olTRnetStatsEntry=olTRnetStatsEntry, ol51nnMMGTIpAddress=ol51nnMMGTIpAddress, ol51nnMTPLPortTable=ol51nnMTPLPortTable, ol53nnMMGTTrunkEntry=ol53nnMMGTTrunkEntry, olTRnetStatsEnabledPorts=olTRnetStatsEnabledPorts, ol51nnMAUIMPortDipAdminState=ol51nnMAUIMPortDipAdminState, ol53nnMTDDIModEntry=ol53nnMTDDIModEntry, chipBootPResult=chipBootPResult, ol51nnREEModProtocols=ol51nnREEModProtocols, olTRnetStatsPortTokenErrors=olTRnetStatsPortTokenErrors, ol51nnMTPPLModTable=ol51nnMTPPLModTable, expDot5StatsTransmitBeacons=expDot5StatsTransmitBeacons, chipEchoAddr=chipEchoAddr, ol53nnMTDDIModDownStreamModule=ol53nnMTDDIModDownStreamModule, ol51nnBEE=ol51nnBEE)
mibBuilder.exportSymbols("CHIPCOMMIB", ol52nnBTTPortEntry=ol52nnBTTPortEntry, ol60nnMRCTLModSlotIndex=ol60nnMRCTLModSlotIndex, olNetOlSecTrap=olNetOlSecTrap, expDot5StatsACErrors=expDot5StatsACErrors, chipRptrPortInfo=chipRptrPortInfo, ol51nnMAUIFPortIndex=ol51nnMAUIFPortIndex, ol51nnIxModProtocols=ol51nnIxModProtocols, olTRnetMapSummaryLogicalState=olTRnetMapSummaryLogicalState, ol53nnMTDDIPortBSFlag=ol53nnMTDDIPortBSFlag, chipHello=chipHello, ol51nnMTPLSModSlotIndex=ol51nnMTPLSModSlotIndex, olEnetStatsPortEntry=olEnetStatsPortEntry, ol51nnMTPPortAdminState=ol51nnMTPPortAdminState, chipRptrGroupObjectID=chipRptrGroupObjectID, chipTrunkDown=chipTrunkDown, olTRnetMapSummary32Stations=olTRnetMapSummary32Stations, ol51nnMTPLModSlotIndex=ol51nnMTPLModSlotIndex, ol51nnMTSModProtocols=ol51nnMTSModProtocols, ol50nnMHCTLModDipCh3ActCol=ol50nnMHCTLModDipCh3ActCol, chipRptrBasicPackage=chipRptrBasicPackage, chipRptrMonitorPortCollisions=chipRptrMonitorPortCollisions, ol51nnMMGTPortSlotIndex=ol51nnMMGTPortSlotIndex, olThreshStatStationAddr=olThreshStatStationAddr, chipBridge=chipBridge, ol52nnMFRTrunkDipCompMode=ol52nnMFRTrunkDipCompMode, chipRptrGroupLastOperStatusChange=chipRptrGroupLastOperStatusChange, ol52nnMTPModRingSpeed=ol52nnMTPModRingSpeed, ol51nnMFBPModSlotIndex=ol51nnMFBPModSlotIndex, olTRTrafFrames8192to18000Octets=olTRTrafFrames8192to18000Octets, ol52nnMFRPortStationType=ol52nnMFRPortStationType, olFDDInetStatsTable=olFDDInetStatsTable, ol53nnMMGTTrunkIndex=ol53nnMMGTTrunkIndex, olEnvType=olEnvType, emm=emm, ol51nnMTPLS=ol51nnMTPLS, ol53nnMMGTModDownStreamMAC=ol53nnMMGTModDownStreamMAC, ol50nnMRCTLModTempStatus=ol50nnMRCTLModTempStatus, olEnetStatsFCSErrors=olEnetStatsFCSErrors, ol51nnMUTPPortSlotIndex=ol51nnMUTPPortSlotIndex, focus1=focus1, expDot5StatsRemoves=expDot5StatsRemoves, ol53nnMTDDIPortSlotIndex=ol53nnMTDDIPortSlotIndex, oc61nnDMGTModSubnetMask=oc61nnDMGTModSubnetMask, ocInvModModel=ocInvModModel, ocInvModSlotIndex=ocInvModSlotIndex, olModNumTrunks=olModNumTrunks, chipRptrMonitorPortNetID=chipRptrMonitorPortNetID, olAgentsStationAddr=olAgentsStationAddr, olEnetStatsLocalColls=olEnetStatsLocalColls, ol51nnMTSPortOperState=ol51nnMTSPortOperState, ol52nnMMGTPortEntry=ol52nnMMGTPortEntry, olGroupSummaryGroupID=olGroupSummaryGroupID, oc61nnMFBPPortSlotIndex=oc61nnMFBPPortSlotIndex, ol52nnBTT=ol52nnBTT, olTRTrafControlNetID=olTRTrafControlNetID, ol51nnMFBPortEntry=ol51nnMFBPortEntry, olTRnetStatsStationACErrors=olTRnetStatsStationACErrors, olEnvPSIndex=olEnvPSIndex, ol51nnMTPCLModConn1Network=ol51nnMTPCLModConn1Network, chipTFTP=chipTFTP, ol51nnMFLPortSlotIndex=ol51nnMFLPortSlotIndex, olModResetModule=olModResetModule, olEnetMapSlotIndex=olEnetMapSlotIndex, ol51nnMUTP=ol51nnMUTP, ol51nnMFIBPortSlotIndex=ol51nnMFIBPortSlotIndex, ocPowerSlotEntry=ocPowerSlotEntry, olTRTrafStationInOctets=olTRTrafStationInOctets, ol52nnMEC=ol52nnMEC, ol51nnMTPPLPortTable=ol51nnMTPPLPortTable, ocPowerOutputTable=ocPowerOutputTable, olNetOlSecControlEntry=olNetOlSecControlEntry, ol51nnMFPPortIndex=ol51nnMFPPortIndex, olTRnetStatsTotalStations=olTRnetStatsTotalStations, ol53nnMSTPTrunkIndex=ol53nnMSTPTrunkIndex, ol51nnMTPCLPortLinkInteg=ol51nnMTPCLPortLinkInteg, ol51nnMFLPortBuddySlot=ol51nnMFLPortBuddySlot, ol51nnMFBModSlotIndex=ol51nnMFBModSlotIndex, ol51nnMTPLSPortTable=ol51nnMTPLSPortTable, ol51nnRESPortSlotIndex=ol51nnRESPortSlotIndex, olModNumPorts=olModNumPorts, ol51nnMTPCLModSlotIndex=ol51nnMTPCLModSlotIndex, chipRptrNonDisruptTest=chipRptrNonDisruptTest, ocModSubSlotIndex=ocModSubSlotIndex, ol51nnMFPPortBuddySlot=ol51nnMFPPortBuddySlot, olPortEntry=olPortEntry, chipTFTPSubSlot=chipTFTPSubSlot, ol5208MTPModBypsAdminState=ol5208MTPModBypsAdminState, ol41nnHETPModSlotIndex=ol41nnHETPModSlotIndex, olTRTrafControlPortLastChangeTime=olTRTrafControlPortLastChangeTime, ol51nnMFPModEntry=ol51nnMFPModEntry, ol53nnMFBMICPortSlotIndex=ol53nnMFBMICPortSlotIndex, olTRTrafStationInFrames=olTRTrafStationInFrames, ol53nnMFIBSTPortPcmState=ol53nnMFIBSTPortPcmState, expDot5TimerActiveMon=expDot5TimerActiveMon, ol41nnHMTPPortTable=ol41nnHMTPPortTable, chipDownloadUDKSerial=chipDownloadUDKSerial, boardGroup=boardGroup, olThreshValue=olThreshValue, ol51nnMFIBPortBuddySlot=ol51nnMFIBPortBuddySlot, ol41nnHMTPModSlotIndex=ol41nnHMTPModSlotIndex, ol53nnMMGTTrunkTable=ol53nnMMGTTrunkTable, ol51nnMTS=ol51nnMTS, ol52nnBTTModBridgeType=ol52nnBTTModBridgeType, oc61nnMTPLPortSlotIndex=oc61nnMTPLPortSlotIndex, chipChange=chipChange, oc61nnMTPLModSubSlotIndex=oc61nnMTPLModSubSlotIndex, olEnetStatsModFCSErrors=olEnetStatsModFCSErrors, olNetOlSecControlTable=olNetOlSecControlTable, chipTrunkUp=chipTrunkUp, ol53nnMMGTPortConnectState=ol53nnMMGTPortConnectState, olFDDIStatsModEntry=olFDDIStatsModEntry, olTRnetStatsACErrors=olTRnetStatsACErrors, chipTTYData=chipTTYData, olConc=olConc, oc60nnMRCTLModSlotIndex=oc60nnMRCTLModSlotIndex, ol5208MTPTrunkEntry=ol5208MTPTrunkEntry, ol51nnMMGTModEntry=ol51nnMMGTModEntry, ol51nnMFIBModDipNetwork=ol51nnMFIBModDipNetwork, ol51nnMBNCModTable=ol51nnMBNCModTable, olTRnet=olTRnet, ol53nnMFIBSTTrunkEntry=ol53nnMFIBSTTrunkEntry, olEnetStatsMcastRcvdOks=olEnetStatsMcastRcvdOks, olTRTrafPortInFrames=olTRTrafPortInFrames, chipGenDiagnostics=chipGenDiagnostics, oc61nnMFBPModBootVersion=oc61nnMFBPModBootVersion, expDot5TimerQueuePDU=expDot5TimerQueuePDU, ol51nnMFPPortDipLLW=ol51nnMFPPortDipLLW, chipRptrPortAdminStatus=chipRptrPortAdminStatus, ol51nnMFPPortHipwr=ol51nnMFPPortHipwr, olThreshDescription=olThreshDescription, ol53nnMFIBSTModUpStreamOperPath=ol53nnMFIBSTModUpStreamOperPath, chipRptrAddrTrackGroupInfo=chipRptrAddrTrackGroupInfo, chipRptrGroupDescr=chipRptrGroupDescr, ol51nnMAUIMPortDipHalfStep=ol51nnMAUIMPortDipHalfStep, ol53nnMTDDIPortLerCondition=ol53nnMTDDIPortLerCondition, ol53nnMMGTPortConfig=ol53nnMMGTPortConfig, ol52nnBTTPortMACAddress=ol52nnBTTPortMACAddress, ocPowerSlotOperStatus=ocPowerSlotOperStatus, olPS2OperatingSystem=olPS2OperatingSystem, ocInvModMfrDate=ocInvModMfrDate, olTRnetStatsStationNAUNAddress=olTRnetStatsStationNAUNAddress, olFDDIStatsPortEntry=olFDDIStatsPortEntry, ol50nnMHCTLModSlotIndex=ol50nnMHCTLModSlotIndex, ol51nnMTPModDipNetwork=ol51nnMTPModDipNetwork, oc61nnDMGT=oc61nnDMGT, ol52nnMMGTModMasterPriority=ol52nnMMGTModMasterPriority, olNetOlSecLearnPortIndex=olNetOlSecLearnPortIndex, ol53nnMSTPPortLerCondition=ol53nnMSTPPortLerCondition, ol52nnBTTModSRBridgeNo=ol52nnBTTModSRBridgeNo, ol51nnMFPPortTable=ol51nnMFPPortTable, ol52nnMMGTModMACAddressType=ol52nnMMGTModMACAddressType, ol53nnMSTPModRingInfo=ol53nnMSTPModRingInfo, ol51nnRESModStationAddr=ol51nnRESModStationAddr, chipTFTPResult=chipTFTPResult, ol51nnMTSPortIndex=ol51nnMTSPortIndex, ol51nnMTPLSModDipNetwork=ol51nnMTPLSModDipNetwork, olNetOlSecIntruderSlot=olNetOlSecIntruderSlot, hubGroup=hubGroup, chipTFTPSlot=chipTFTPSlot, ol51nnMMGTPortIndex=ol51nnMMGTPortIndex, ocInvModHWVer=ocInvModHWVer, ol51nnMTPCLPortIndex=ol51nnMTPCLPortIndex, oc61nnMCARModSubSlotIndex=oc61nnMCARModSubSlotIndex, olEnetStatsPortFramesRcvdOks=olEnetStatsPortFramesRcvdOks, olEnetStatsPortRunts=olEnetStatsPortRunts, ol53nnMMGTPortBSFlag=ol53nnMMGTPortBSFlag, ol52nnMMGTModTable=ol52nnMMGTModTable, ol51nnMTSPortAdminState=ol51nnMTSPortAdminState, oc61nnMTPLPortBuddyPort=oc61nnMTPLPortBuddyPort, ol5208MTPPortDipAdminState=ol5208MTPPortDipAdminState, ol51nnMTSModEntry=ol51nnMTSModEntry, ocInvModMfr=ocInvModMfr, ocInvHub=ocInvHub, ol41nnHETP=ol41nnHETP, oc61nnMTPLPortTable=oc61nnMTPLPortTable, olPS2McaDescription=olPS2McaDescription, olPortAlertFilter=olPortAlertFilter, ol52nnBTTPortThroughput=ol52nnBTTPortThroughput, ol51nnMUTPModDipFFL=ol51nnMUTPModDipFFL, ol5208MTPTrunkSlotIndex=ol5208MTPTrunkSlotIndex, ol51nnMTPCLPortBuddySlot=ol51nnMTPCLPortBuddySlot, olTRTrafFrames128to255Octets=olTRTrafFrames128to255Octets, ol53nnMFBMICModTable=ol53nnMFBMICModTable, ol51nnMFPPortAdminState=ol51nnMFPPortAdminState, oc61nnDMGTModIpAddress=oc61nnDMGTModIpAddress, olTRnetStatsNetID=olTRnetStatsNetID, ocModVersion=ocModVersion, ol52nnMMGT=ol52nnMMGT, chipSlotUp=chipSlotUp, ol41nnHMTPModSerialNo=ol41nnHMTPModSerialNo, ol51nnBEEPortTable=ol51nnBEEPortTable, oc60nnMRCTLModTable=oc60nnMRCTLModTable, ol51nnMUTPModSlotIndex=ol51nnMUTPModSlotIndex, chipProducts=chipProducts, oc61nnMCARModTable=oc61nnMCARModTable, chipRptrMonitorGroupSlotIndex=chipRptrMonitorGroupSlotIndex, ocInvHubType=ocInvHubType, ol51nnMFBPModEntry=ol51nnMFBPModEntry, ol51nnMTPLPortLinkInteg=ol51nnMTPLPortLinkInteg, ol51nnMTPCLPortAdminState=ol51nnMTPCLPortAdminState, olTRTrafFrames18to63Octets=olTRTrafFrames18to63Octets, olGroupPortIndex=olGroupPortIndex, chipRptrAddrTrackGroupNetID=chipRptrAddrTrackGroupNetID, chipRptrMonitorRptrEntry=chipRptrMonitorRptrEntry, ol53nnMFIBSTTrunkSlotIndex=ol53nnMFIBSTTrunkSlotIndex, ol53nnMTDDIModUpStreamOperPath=ol53nnMTDDIModUpStreamOperPath, ol53nnMMGTPortEntry=ol53nnMMGTPortEntry, ocPowerOutputUnmanagedWattageAlloc=ocPowerOutputUnmanagedWattageAlloc, ol51nnMTPPLPortAdminState=ol51nnMTPPLPortAdminState, oc61nnDMGTModSlotIndex=oc61nnDMGTModSlotIndex, chipTFTPStart=chipTFTPStart, ol51nnMTPPLPortDipJabber=ol51nnMTPPLPortDipJabber, ocModConfigToDips=ocModConfigToDips, oc61nnMFBP=oc61nnMFBP, expDot5TimerStandbyMon=expDot5TimerStandbyMon, olFDDIStatsModBackplaneErrs=olFDDIStatsModBackplaneErrs, expDot5TimerIfIndex=expDot5TimerIfIndex, olNetOlSecControlAutolearnMask=olNetOlSecControlAutolearnMask, olTRTrafDropEvents=olTRTrafDropEvents, olNetOlSecIntruderAddress=olNetOlSecIntruderAddress, ol51nnMFBPPortHipwr=ol51nnMFBPPortHipwr, ol51nnMAUIMModSlotIndex=ol51nnMAUIMModSlotIndex, ol51nnMFBPortDipAdminState=ol51nnMFBPortDipAdminState, ol53nnMFBMICModSlotIndex=ol53nnMFBMICModSlotIndex, chipRptrMonitorPortReadableOctets=chipRptrMonitorPortReadableOctets, ol51nnMTPLModEntry=ol51nnMTPLModEntry, ol51nnMFIBModDipLLW=ol51nnMFIBModDipLLW, olPortType=olPortType, ol51nnREEModEntry=ol51nnREEModEntry, ol53nnMFBMICModUpStreamModule=ol53nnMFBMICModUpStreamModule, olTRTrafTopNStatistic=olTRTrafTopNStatistic, ol52nnMECModNetworkStatus=ol52nnMECModNetworkStatus, ol51nnMBNCPortSlotIndex=ol51nnMBNCPortSlotIndex, olNetOlSecLearnEntry=olNetOlSecLearnEntry, olTRTrafPortSlotIndex=olTRTrafPortSlotIndex, ol51nnMFBPortIndex=ol51nnMFBPortIndex, olPS2ApplEntry=olPS2ApplEntry, chipEchoStart=chipEchoStart, chipTTYParity=chipTTYParity, ol53nnMFIBSTModEntry=ol53nnMFIBSTModEntry, olEnetStatsAlignmentErrors=olEnetStatsAlignmentErrors, ol51nnMBNC=ol51nnMBNC, ol51nnMUTPPortDipAdminState=ol51nnMUTPPortDipAdminState, olEnvPSAdminState=olEnvPSAdminState, ol53nnMMGTPortPcmState=ol53nnMMGTPortPcmState, ol50nnMCTLModEntry=ol50nnMCTLModEntry, ol53nnMMGTModfddiMACPath=ol53nnMMGTModfddiMACPath, ol51nnMFBPPortLLW=ol51nnMFBPPortLLW, olGroupSetSlotIndex=olGroupSetSlotIndex, ol51nnMFIB=ol51nnMFIB, olTRTrafPortEntry=olTRTrafPortEntry, olEnetMapOctets=olEnetMapOctets, chipRptrMonitorPortTable=chipRptrMonitorPortTable, olEnetStatsModFramesRcvdOks=olEnetStatsModFramesRcvdOks)
mibBuilder.exportSymbols("CHIPCOMMIB", ol50nnMCTLModTempStatus=ol50nnMCTLModTempStatus, ol53nnMMGTModRingInfo=ol53nnMMGTModRingInfo, ol51nnMAUIFPortTable=ol51nnMAUIFPortTable, ol52nnMMGTModNetworkStatus=ol52nnMMGTModNetworkStatus, olNetSecurityMACMode=olNetSecurityMACMode, ol51nnMTSModDipNetwork=ol51nnMTSModDipNetwork, chipRptrMonitorNetID=chipRptrMonitorNetID, ol51nnMAUIMPortCollision=ol51nnMAUIMPortCollision, ol53nnMFBMICModDownStreamOperPath=ol53nnMFBMICModDownStreamOperPath, ol51nnMBNCModSlotIndex=ol51nnMBNCModSlotIndex, oc60nnMRCTLModPS4Status=oc60nnMRCTLModPS4Status, ol53nnMSTPPortConnectState=ol53nnMSTPPortConnectState, ol53nnMMGTPortPCWithhold=ol53nnMMGTPortPCWithhold, olAgentsMasterPriority=olAgentsMasterPriority, ol51nnMFIBPortBuddyPort=ol51nnMFIBPortBuddyPort, ol51nnMTPModCrossover=ol51nnMTPModCrossover, ol53nnMFIBSTModRingInfo=ol53nnMFIBSTModRingInfo, ol5208MTPTrunkIndex=ol5208MTPTrunkIndex, ol51nnMFLModTable=ol51nnMFLModTable, olAgentsMySlot=olAgentsMySlot, ol51nnMUTPModDipNetwork=ol51nnMUTPModDipNetwork, olTRnetStatsPortTotalStations=olTRnetStatsPortTotalStations, olThreshTotalEntries=olThreshTotalEntries, ocPowerOutputVoltageLevel=ocPowerOutputVoltageLevel, olTRTrafStationPortIndex=olTRTrafStationPortIndex, ol51nnMTPLPortIndex=ol51nnMTPLPortIndex, ol51nnREEPortTable=ol51nnREEPortTable, ol52nnMFRTrunkBuddySlot=ol52nnMFRTrunkBuddySlot, ol52nnMFRTrunkAdminState=ol52nnMFRTrunkAdminState, ol53nnMTDDIModUpStreamModule=ol53nnMTDDIModUpStreamModule, ol53nnMMGTModUpStreamModule=ol53nnMMGTModUpStreamModule, ol52nnBTTPortSlotIndex=ol52nnBTTPortSlotIndex, olNetOlSecLearnAddress=olNetOlSecLearnAddress, ol52nnMECModIpAddress=ol52nnMECModIpAddress, olNetSecurityMACSlotIndex=olNetSecurityMACSlotIndex, ol52nnMFRPortDipAdminState=ol52nnMFRPortDipAdminState, ol51nnMFBPortAdminState=ol51nnMFBPortAdminState, olNetOlSecPortIntrTable=olNetOlSecPortIntrTable, ol53nnMFIBSTTrunkTable=ol53nnMFIBSTTrunkTable, chipRptrAddrTrackPortIndex=chipRptrAddrTrackPortIndex, ol52nnMFRTrunkCompMode=ol52nnMFRTrunkCompMode, ol51nnMTPLSPortDipLinkInteg=ol51nnMTPLSPortDipLinkInteg, chipTTY=chipTTY, ol52nnBTTPortSTAPState=ol52nnBTTPortSTAPState, ol53nnMMGTModUpStreamOperPath=ol53nnMMGTModUpStreamOperPath, oc61nnMFBPModDipNVRam=oc61nnMFBPModDipNVRam, ocAgentsSubSlot=ocAgentsSubSlot, olNetOlSecControlSecType=olNetOlSecControlSecType, chipRptrAddrTrackSourceAddrChanges=chipRptrAddrTrackSourceAddrChanges, ol51nnMTPLSPortAdminState=ol51nnMTPLSPortAdminState, olEnetStatsPortOctetsRcvdOks=olEnetStatsPortOctetsRcvdOks, chipRptrMonitorRptrInfo=chipRptrMonitorRptrInfo, ol51nnMTPLModDipNetwork=ol51nnMTPLModDipNetwork, ol51nnMMGTModStationAddr=ol51nnMMGTModStationAddr, olThreshStatSlotIndex=olThreshStatSlotIndex, olThreshMaxEntries=olThreshMaxEntries, olTRTrafControlTopNLastChangeTime=olTRTrafControlTopNLastChangeTime, ol51nnIxModTable=ol51nnIxModTable, olTRTrafControlTopNTotalStations=olTRTrafControlTopNTotalStations, ol52nnMTP=ol52nnMTP, ol50nnMRCTLModClockStatus=ol50nnMRCTLModClockStatus, ol51nnMFBModEntry=ol51nnMFBModEntry, olEnetStatsPortIndex=olEnetStatsPortIndex, olTRTrafStationNetID=olTRTrafStationNetID, olTRnetStatsTokenErrors=olTRnetStatsTokenErrors, olNetDPEntry=olNetDPEntry, olGroupSummaryPorts=olGroupSummaryPorts, chipTTYBaud=chipTTYBaud, olModStatus=olModStatus, olTRTrafPortAddress=olTRTrafPortAddress, olNetOlSecAddrSlotIndex=olNetOlSecAddrSlotIndex, expDot5IfIndex=expDot5IfIndex, ol52nnMFRModTable=ol52nnMFRModTable, ol51nnMTPCLPortDipAdminState=ol51nnMTPCLPortDipAdminState, ol51nnMTPLPortDipLinkInteg=ol51nnMTPLPortDipLinkInteg, olPS2McaIndex=olPS2McaIndex, ol51nnMFLPortIndex=ol51nnMFLPortIndex, ol51nnMUTPModDipCrossover=ol51nnMUTPModDipCrossover, ol51nnMUTPPortEntry=ol51nnMUTPPortEntry, ol53nnMFBMICPortRemoteMACIndicated=ol53nnMFBMICPortRemoteMACIndicated, ol53nnMSTPPortIndex=ol53nnMSTPPortIndex, chipRptrMonitorPortRunts=chipRptrMonitorPortRunts, chipBelowThreshd=chipBelowThreshd, ol52nnMECModTable=ol52nnMECModTable, olTrunkStatus=olTrunkStatus, olModVendor=olModVendor, ol51nnMMGTPortEntry=ol51nnMMGTPortEntry, ol52nnMECPortTable=ol52nnMECPortTable, ol52nnMTPPortSlotIndex=ol52nnMTPPortSlotIndex, ol51nnMTPModEntry=ol51nnMTPModEntry, expDot5StatsBurstErrors=expDot5StatsBurstErrors, ol51nnMBNCModDipNetwork=ol51nnMBNCModDipNetwork, olEnetStatsModAlignmentErrors=olEnetStatsModAlignmentErrors, chipAboveThreshd=chipAboveThreshd, ol53nnMSTPModDownStreamOperPath=ol53nnMSTPModDownStreamOperPath, chipRptrGroupPortCapacity=chipRptrGroupPortCapacity, olEnetStatsModFrameTooLongs=olEnetStatsModFrameTooLongs, olTRnetStatsTable=olTRnetStatsTable, ol51nnREE=ol51nnREE, ol41nnHMTPModProtocols=ol41nnHMTPModProtocols, chipRptrMonitorGroupTotalErrors=chipRptrMonitorGroupTotalErrors, oc60nnMMGTModMasterPriority=oc60nnMMGTModMasterPriority, ol53nnMFIBSTPortSlotIndex=ol53nnMFIBSTPortSlotIndex, ol51nnMFP=ol51nnMFP, ol52nnMFRPortTable=ol52nnMFRPortTable, ol53nnMTDDITrunkTable=ol53nnMTDDITrunkTable, olModVersion=olModVersion, olTRnetStatsStationAddr=olTRnetStatsStationAddr, MacAddress=MacAddress, ol51nnMTPPLModSlotIndex=ol51nnMTPPLModSlotIndex, ol53nnMTDDIModRingInfo=ol53nnMTDDIModRingInfo, ol51nnMFBPPortIndex=ol51nnMFBPPortIndex, ol51nnMFIBModLLW=ol51nnMFIBModLLW, ol51nnIxPortEntry=ol51nnIxPortEntry, ol51nnMFLPortAdminState=ol51nnMFLPortAdminState, olPortSlotIndex=olPortSlotIndex, olTRTrafControlLogicalState=olTRTrafControlLogicalState, chipTFTPFileType=chipTFTPFileType, ol52nnMTPTrunkDipAdminState=ol52nnMTPTrunkDipAdminState, olModTable=olModTable, chipGenSerial=chipGenSerial, chipRptrAddrTrackSlotIndex=chipRptrAddrTrackSlotIndex, ol60nnMRCTLModClockStatus=ol60nnMRCTLModClockStatus, ol51nnMUTPPortSquelch=ol51nnMUTPPortSquelch, ol5208MTPTrunkDipAdminState=ol5208MTPTrunkDipAdminState, olTRnetMapState=olTRnetMapState, ol52nnMECPortSlotIndex=ol52nnMECPortSlotIndex, chipRptrMonitorPortEntry=chipRptrMonitorPortEntry, olNetOlSecPortIntrDisabled=olNetOlSecPortIntrDisabled, olGroupPortTable=olGroupPortTable, chipGenServiceDate=chipGenServiceDate, olTRTrafControlEntry=olTRTrafControlEntry, ol51nnIxModDipPromDefaults=ol51nnIxModDipPromDefaults, ol41nnHETPPortSlotIndex=ol41nnHETPPortSlotIndex, ol41nnHMTPPortSlotIndex=ol41nnHMTPPortSlotIndex, ol51nnMTPPLPortBuddyPort=ol51nnMTPPLPortBuddyPort, olFDDIStatsModPllUnlockErrs=olFDDIStatsModPllUnlockErrs, ol52nnMFRModSlotIndex=ol52nnMFRModSlotIndex, expDot5StatsRecoverys=expDot5StatsRecoverys, ol52nnMTPTrunkEntry=ol52nnMTPTrunkEntry, ol51nnMUTPPortBuddyPort=ol51nnMUTPPortBuddyPort, olNetOlSecControlSlotIndex=olNetOlSecControlSlotIndex, ol50nnMHCTL=ol50nnMHCTL, ol41nnHMTPPortIndex=ol41nnHMTPPortIndex, chipSetTItms380=chipSetTItms380, ol51nnMFPPortSlotIndex=ol51nnMFPPortSlotIndex, ol53nnMFIBSTPortNeighbor=ol53nnMFIBSTPortNeighbor, ocModClass=ocModClass, olTRTrafBroadcastFrames=olTRTrafBroadcastFrames, ocModNumSubSlots=ocModNumSubSlots, chipSecurity=chipSecurity, oc61nnMCAR=oc61nnMCAR, ol51nnMAUIMPortSQETest=ol51nnMAUIMPortSQETest, chipRptrMonitorGroupTable=chipRptrMonitorGroupTable, ol51nnMMGTModSlotIndex=ol51nnMMGTModSlotIndex, ol51nnBEEPortIpAddress=ol51nnBEEPortIpAddress, expDot5TimerHolding=expDot5TimerHolding, olNetOlSecAddrStatus=olNetOlSecAddrStatus, expDot5StatsTokenErrors=expDot5StatsTokenErrors, olTRTrafNetID=olTRTrafNetID, olTRTrafControlStationLastChangeTime=olTRTrafControlStationLastChangeTime, expDot5TimerBeaconReceive=expDot5TimerBeaconReceive, oc60nnMRCTLModTempStatus=oc60nnMRCTLModTempStatus, expDot5TimerValidTransmit=expDot5TimerValidTransmit, chipRptrAddrTrackTable=chipRptrAddrTrackTable, ol51nnMAUIMPortBuddySlot=ol51nnMAUIMPortBuddySlot, ol51nnMAUIMPortEntry=ol51nnMAUIMPortEntry, ol53nnMSTP=ol53nnMSTP, ol41nnHMTPModIpAddress=ol41nnHMTPModIpAddress, ol52nnMTPPortIndex=ol52nnMTPPortIndex, alarmGroup=alarmGroup, chipRptrAddrTrackRptrInfo=chipRptrAddrTrackRptrInfo, olFDDIStatsModMgtRcvErrs=olFDDIStatsModMgtRcvErrs, ol5208MTP=ol5208MTP, chipSoftware=chipSoftware, ol52nnBTTTrunkIndex=ol52nnBTTTrunkIndex, chipGenVers=chipGenVers, chipTTYEntry=chipTTYEntry, olAgentsMasterStatus=olAgentsMasterStatus, ol50nnMRCTLModTable=ol50nnMRCTLModTable, olEnetStatsFramesRcvdOks=olEnetStatsFramesRcvdOks, oc61nnMFBPPortEntry=oc61nnMFBPPortEntry, olTRTrafFrames512to1023Octets=olTRTrafFrames512to1023Octets, olEnetStatsModOctetsRcvdOks=olEnetStatsModOctetsRcvdOks, ol53nnMSTPPortConfig=ol53nnMSTPPortConfig, ol52nnMMGTTrunkTable=ol52nnMMGTTrunkTable, olTrunkAdminState=olTrunkAdminState, ol51nnRESModEntry=ol51nnRESModEntry, oc61nnMFBPModTable=oc61nnMFBPModTable, olEnetStatsPortTable=olEnetStatsPortTable, ol52nnMFRPortIndex=ol52nnMFRPortIndex, olGroupPortGroupID=olGroupPortGroupID, olGroupSetAdminState=olGroupSetAdminState, ol51nnMTPPortBuddyPort=ol51nnMTPPortBuddyPort, olTRTrafPortOutBroadcastFrames=olTRTrafPortOutBroadcastFrames, olTRTrafFrames4096to8191Octets=olTRTrafFrames4096to8191Octets, olModSummaryInfo=olModSummaryInfo, olTRTrafControlLastClearTime=olTRTrafControlLastClearTime, chipEchoPattern=chipEchoPattern, olModNetwork=olModNetwork, olNetSecurityMACAddress=olNetSecurityMACAddress, olFDDIStatsPortSlotIndex=olFDDIStatsPortSlotIndex, ol5208MTPPortTable=ol5208MTPPortTable, ol51nnMFPPortEntry=ol51nnMFPPortEntry, olModType=olModType, ol51nnIxPortTable=ol51nnIxPortTable, olTRnetStatsStationTokenErrors=olTRnetStatsStationTokenErrors, olNetOlSecAddrAddress=olNetOlSecAddrAddress, ol53nnMSTPModDownStreamModule=ol53nnMSTPModDownStreamModule, ol51nnBEEModTable=ol51nnBEEModTable, oc61nnMTPLModTable=oc61nnMTPLModTable, ol51nnMTPPLPortSquelch=ol51nnMTPPLPortSquelch, ol51nnMTPCLPortSlotIndex=ol51nnMTPCLPortSlotIndex, olPortIndex=olPortIndex, oc61nnDMGTModDefaultGateway=oc61nnDMGTModDefaultGateway, ol53nnMSTPPortPCWithhold=ol53nnMSTPPortPCWithhold, ol52nnMTPPortEntry=ol52nnMTPPortEntry, ol51nnMFBPPortAdminState=ol51nnMFBPPortAdminState, ol53nnMTDDIModDownStreamOperPath=ol53nnMTDDIModDownStreamOperPath, ol51nnMTSModStationAddr=ol51nnMTSModStationAddr, chipRptrRptrInfo=chipRptrRptrInfo, ol53nnMFIBSTModDownStreamOperPath=ol53nnMFIBSTModDownStreamOperPath, chipRptrGroupCapacity=chipRptrGroupCapacity, olTRTrafTopNSummaryNetID=olTRTrafTopNSummaryNetID, ol51nnMUTPModEntry=ol51nnMUTPModEntry, ol51nnIxPortIndex=ol51nnIxPortIndex, olTRTrafTopNOutOctets=olTRTrafTopNOutOctets, ocPowerOutputType=ocPowerOutputType, ol50nnMRCLSModSlotIndex=ol50nnMRCLSModSlotIndex, olNetOlSec=olNetOlSec, olTRTrafControlTopNInterval=olTRTrafControlTopNInterval, ol50nnMCTL=ol50nnMCTL, chipAlertIndex=chipAlertIndex, ol51nnMAUIMPortHalfStep=ol51nnMAUIMPortHalfStep, ol51nnMTPLPortBuddyPort=ol51nnMTPLPortBuddyPort, ol51nnMBNCModEntry=ol51nnMBNCModEntry, olTRTrafTopNIndex=olTRTrafTopNIndex, trmm=trmm, ol51nnMUTPPortDipSquelch=ol51nnMUTPPortDipSquelch, ol52nnMMGTTrunkExtBcnRecovery=ol52nnMMGTTrunkExtBcnRecovery, olTRTrafStationOutOctets=olTRTrafStationOutOctets, ol51nnMAUIMPortIndex=ol51nnMAUIMPortIndex, expDot5RingOpenStatus=expDot5RingOpenStatus, expDot5StatsLostFrameErrors=expDot5StatsLostFrameErrors, olGroupSetPortIndex=olGroupSetPortIndex, ol53nnMFIBSTPortLerCondition=ol53nnMFIBSTPortLerCondition, ol51nnMFBP=ol51nnMFBP, olTRTrafMacFrames=olTRTrafMacFrames, chipPortUp=chipPortUp, ol51nnREEPortSlotIndex=ol51nnREEPortSlotIndex, olTRTrafPortOutFrames=olTRTrafPortOutFrames, olEnetMapPortIndex=olEnetMapPortIndex, olNetSecurityMACEntry=olNetSecurityMACEntry, ol51nnMAUIFModTable=ol51nnMAUIFModTable)
mibBuilder.exportSymbols("CHIPCOMMIB", ol51nnMFIBModSlotIndex=ol51nnMFIBModSlotIndex, chipRptrGroupTable=chipRptrGroupTable, ol52nnMFRTrunkDipAdminState=ol52nnMFRTrunkDipAdminState, ol51nnMBNCPortDipAdminState=ol51nnMBNCPortDipAdminState, olPS2ApplIndex=olPS2ApplIndex, olNetOlSecAddrEntry=olNetOlSecAddrEntry, ol51nnMFBPortTable=ol51nnMFBPortTable, ol51nnMTPPLModEntry=ol51nnMTPPLModEntry, ol53nnMSTPPortEntry=ol53nnMSTPPortEntry, ol5208MTPTrunkDipCableMon=ol5208MTPTrunkDipCableMon, chipRptrAddrTrackLastSourceAddress=chipRptrAddrTrackLastSourceAddress, oc61nnMFBPPortIndex=oc61nnMFBPPortIndex, ol51nnBEEModStationAddr=ol51nnBEEModStationAddr, oc60nnMRCTLModBootVersion=oc60nnMRCTLModBootVersion, ol52nnMMGTModStationAddr=ol52nnMMGTModStationAddr, oebm=oebm, ol51nnMTPPLPortEntry=ol51nnMTPPLPortEntry, ol51nnRESModTable=ol51nnRESModTable, olModules=olModules, chipTTYTable=chipTTYTable, ol51nnMTPPLPortDipNetwork=ol51nnMTPPLPortDipNetwork, olTRnetStatsTotalPorts=olTRnetStatsTotalPorts, ocPower=ocPower, olTrunkTable=olTrunkTable, ol51nnMFBPortBuddyPort=ol51nnMFBPortBuddyPort, chipSetIBM16=chipSetIBM16, chipRptrPortOperStatus=chipRptrPortOperStatus, ol53nnMMGTModDownStreamOperPath=ol53nnMMGTModDownStreamOperPath, ol53nnMFIBST=ol53nnMFIBST, ol51nnIxModSwType=ol51nnIxModSwType, ol52nnBTTPortSRRingNo=ol52nnBTTPortSRRingNo, chipTTYTerminalType=chipTTYTerminalType, chipModuleUp=chipModuleUp, ol51nnMTPPortDipSquelch=ol51nnMTPPortDipSquelch, olTrunkEntry=olTrunkEntry, ol53nnMFBMICPortTable=ol53nnMFBMICPortTable, olEnetStatsModRunts=olEnetStatsModRunts, chipRptrMonitorPortReadableFrames=chipRptrMonitorPortReadableFrames, ol51nnMTPLSPortDipAdminState=ol51nnMTPLSPortDipAdminState, ol41nnHMTP=ol41nnHMTP, olTRTrafTopNOutFrames=olTRTrafTopNOutFrames, chipRptrGroupInfo=chipRptrGroupInfo, expDot5UpStream=expDot5UpStream, ol51nnMUTPPortAdminState=ol51nnMUTPPortAdminState, olNetOlSecPortIntrPortIndex=olNetOlSecPortIntrPortIndex, ol53nnMMGTTrunkSlotIndex=ol53nnMMGTTrunkSlotIndex, ol51nnREEModTable=ol51nnREEModTable, olEnetStatsOctetsRcvdOks=olEnetStatsOctetsRcvdOks, ol53nnMSTPModTable=ol53nnMSTPModTable, oc61nnMTPLModSlotIndex=oc61nnMTPLModSlotIndex, ol60nnMRCTLModTable=ol60nnMRCTLModTable, chipRptrRptrInfoTable=chipRptrRptrInfoTable, ol51nnMTPPLPortDipLinkInteg=ol51nnMTPPLPortDipLinkInteg, ocModNetwork=ocModNetwork, olNetDPNetID=olNetDPNetID, olTRTrafControlTotalStations=olTRTrafControlTotalStations, ol51nnREEModSlotIndex=ol51nnREEModSlotIndex, olTRnetStatsPortACErrors=olTRnetStatsPortACErrors, oc61nnMTPLPortDipNetwork=oc61nnMTPLPortDipNetwork, olConcProfile=olConcProfile, olThreshCurrentValue=olThreshCurrentValue, olTRTrafPortTable=olTRTrafPortTable, olTRnetStatsLineErrors=olTRnetStatsLineErrors, olTRnetStatsFrameCopiedErrors=olTRnetStatsFrameCopiedErrors, chipRptrMonitorPortShortEvents=chipRptrMonitorPortShortEvents, ol50nnMRCLSModOperState=ol50nnMRCLSModOperState, ol51nnMTPCLModConn1DipNetwork=ol51nnMTPCLModConn1DipNetwork, ol53nnMTDDIPortEntry=ol53nnMTDDIPortEntry, chipAlert=chipAlert, olEnvPSTable=olEnvPSTable, olTRnetStatsLastBeaconTime=olTRnetStatsLastBeaconTime, chipRptrPortNetID=chipRptrPortNetID, olFDDInet=olFDDInet, chipGenTimeLastChanged=chipGenTimeLastChanged, ol53nnMFBMIC=ol53nnMFBMIC, ol53nnMSTPPortBSFlag=ol53nnMSTPPortBSFlag, ol51nnMAUIFModEntry=ol51nnMAUIFModEntry, ol51nnREEPortIpAddress=ol51nnREEPortIpAddress, olTRnetStatsPortBurstErrors=olTRnetStatsPortBurstErrors, chipmib02=chipmib02, olTRTrafTopNSummaryStatistic=olTRTrafTopNSummaryStatistic, ocModDescr=ocModDescr, olPS2McaTable=olPS2McaTable, ol51nnMMGTModTable=ol51nnMMGTModTable, olThreshStatType=olThreshStatType, ol51nnMFBPPortBuddySlot=ol51nnMFBPPortBuddySlot, ol51nnMFBPPortEntry=ol51nnMFBPPortEntry, ol60nnMRCTLModEntry=ol60nnMRCTLModEntry, olTRnetMapSummary=olTRnetMapSummary, ol52nnMTPModDipCableImp=ol52nnMTPModDipCableImp, ol51nnMAUIFPortBuddySlot=ol51nnMAUIFPortBuddySlot, chipDownload=chipDownload, olNetOlSecIntruderTimeSince=olNetOlSecIntruderTimeSince, ocInvMods=ocInvMods, chipRptrRptrInfoEntry=chipRptrRptrInfoEntry, ocPowerModeOperStatus=ocPowerModeOperStatus, expDot5StatsHardErrors=expDot5StatsHardErrors, chipRptrAddrTrackPortInfo=chipRptrAddrTrackPortInfo, ol53nnMMGT=ol53nnMMGT, ol51nnMFPPortBuddyPort=ol51nnMFPPortBuddyPort, ol51nnMFLPortEntry=ol51nnMFLPortEntry, ol51nnMTPPortIndex=ol51nnMTPPortIndex, chipGenID=chipGenID, ol51nnMAUIMPortDipSQETest=ol51nnMAUIMPortDipSQETest, olNetOlSecAutolearnDownload=olNetOlSecAutolearnDownload, chipFatal=chipFatal, oc61nnMFBPModSubSlotIndex=oc61nnMFBPModSubSlotIndex, olGroupSetAction=olGroupSetAction, ocModEntry=ocModEntry, ol51nnMAUIFPortDipNetwork=ol51nnMAUIFPortDipNetwork, ol51nnMUTPPortTable=ol51nnMUTPPortTable, olEnetStatsModNetID=olEnetStatsModNetID, oc61nnDMGTModSubSlotIndex=oc61nnDMGTModSubSlotIndex, chipDownloadKey=chipDownloadKey, olGroupSummaryEntry=olGroupSummaryEntry, oc61nnMTPLPortEntry=oc61nnMTPLPortEntry, ol53nnMFIBSTModDownStreamModule=ol53nnMFIBSTModDownStreamModule, olEnvStatus=olEnvStatus, chipGenAuthFailureAddr=chipGenAuthFailureAddr, ol53nnMFIBSTPortIndex=ol53nnMFIBSTPortIndex, ol50nnMCTLModTable=ol50nnMCTLModTable, chipRptrMonitorPortFrameTooLongs=chipRptrMonitorPortFrameTooLongs, ol51nnMTPCLPortTable=ol51nnMTPCLPortTable, ol53nnMTDDIPortIndex=ol53nnMTDDIPortIndex, ol51nnMTPLPortJabber=ol51nnMTPLPortJabber, chipTTYPrompt=chipTTYPrompt, oc60nnMMGTModHubSerial=oc60nnMMGTModHubSerial, olTRnetStatsPortLostFrameErrors=olTRnetStatsPortLostFrameErrors, chipRptrMonitorPortDataRateMismatches=chipRptrMonitorPortDataRateMismatches, ol53nnMTDDIPortTable=ol53nnMTDDIPortTable, olTRTrafStationEntry=olTRTrafStationEntry, ol5208MTPModSlotIndex=ol5208MTPModSlotIndex, ol50nnMRCLSModTempStatus=ol50nnMRCLSModTempStatus, chipTTYIndex=chipTTYIndex, ol51nnMFLModDipNetwork=ol51nnMFLModDipNetwork, oc61nnMTPLPortBuddySlot=oc61nnMTPLPortBuddySlot, ol51nnMTPLSPortBuddySlot=ol51nnMTPLSPortBuddySlot, ol52nnMMGTModMasterNetwork=ol52nnMMGTModMasterNetwork, ol52nnMTPPortDipAdminState=ol52nnMTPPortDipAdminState, hardwareGroup=hardwareGroup, ol51nnMTPPLPortIndex=ol51nnMTPPLPortIndex, olTRnetStatsPortAddress=olTRnetStatsPortAddress, olNets=olNets, ol50nnMRCTL=ol50nnMRCTL, olTRnetMapSummaryIndex=olTRnetMapSummaryIndex, expDot5RingStatus=expDot5RingStatus, ol53nnMFBMICTrunkSlotIndex=ol53nnMFBMICTrunkSlotIndex, ol51nnMFPPortDipHipwr=ol51nnMFPPortDipHipwr, chipBootPPowerUpMode=chipBootPPowerUpMode, dmm=dmm, ol51nnMAUIFPortDipAdminState=ol51nnMAUIFPortDipAdminState, ocModTable=ocModTable, ol51nnBEEPortEntry=ol51nnBEEPortEntry, olPS2Info=olPS2Info, chipExperiment=chipExperiment, ol51nnMTPLPortAdminState=ol51nnMTPLPortAdminState, ol51nnMTPPL=ol51nnMTPPL, oc60nnMMGT=oc60nnMMGT, olTRTrafControlPortTotalStations=olTRTrafControlPortTotalStations, ol51nnRESPortDipNetwork=ol51nnRESPortDipNetwork, ol41nnHETPPortIndex=ol41nnHETPPortIndex, ol41nnHMTPPortEntry=ol41nnHMTPPortEntry, ol51nnMFBModTable=ol51nnMFBModTable, expDot5Entry=expDot5Entry, ol51nnMFBModDipNetwork=ol51nnMFBModDipNetwork, olGroupSet=olGroupSet, olThreshMode=olThreshMode, ol51nnMTPPortBuddySlot=ol51nnMTPPortBuddySlot, olModSummaryEntry=olModSummaryEntry, chipTFTPIpAddress=chipTFTPIpAddress, ol51nnMTPCLModConn2Network=ol51nnMTPCLModConn2Network, ol41nnHETPPortReset=ol41nnHETPPortReset, ol53nnMMGTModSlotIndex=ol53nnMMGTModSlotIndex, ol50nnMRCLSModTable=ol50nnMRCLSModTable, chipRptrPortAutoPartitionState=chipRptrPortAutoPartitionState, olTRnetStatsPortSlotIndex=olTRnetStatsPortSlotIndex, ocInvModTable=ocInvModTable, ol5208MTPModDipCableImp=ol5208MTPModDipCableImp, ol50nnMHCTLModOperState=ol50nnMHCTLModOperState, ol51nnMTPLPortSquelch=ol51nnMTPLPortSquelch, chipAlertTable=chipAlertTable, ol52nnBTTTrunkTable=ol52nnBTTTrunkTable, olNetSecurityMACStatus=olNetSecurityMACStatus, olEnetStatsRunts=olEnetStatsRunts, ol51nnIxPortSlotIndex=ol51nnIxPortSlotIndex, ol41nnHMTPModTable=ol41nnHMTPModTable, ol51nnMFLModEntry=ol51nnMFLModEntry, oc60nnMRCTLModClockStatus=oc60nnMRCTLModClockStatus, olEnetStatsFrameTooLongs=olEnetStatsFrameTooLongs, ol5208MTPModEntry=ol5208MTPModEntry, olEnetMapFrames=olEnetMapFrames, olConcType=olConcType, ol51nnMMGTPortTable=ol51nnMMGTPortTable, ol52nnMTPPortTable=ol52nnMTPPortTable, olNetOlSecLearnTable=olNetOlSecLearnTable, ol51nnMFBModLLW=ol51nnMFBModLLW, olGroupPortSlotIndex=olGroupPortSlotIndex, ol53nnMMGTPortNeighbor=ol53nnMMGTPortNeighbor, olPS2McaPortConnectPoint=olPS2McaPortConnectPoint, olNetOlSecAutolearnTrigger=olNetOlSecAutolearnTrigger, ol52nnMMGTPortSlotIndex=ol52nnMMGTPortSlotIndex, chipTTYDTR=chipTTYDTR, ol51nnMFBPPortDipAdminState=ol51nnMFBPPortDipAdminState, ol51nnMTPLSModEntry=ol51nnMTPLSModEntry, oc60nnMMGTModEntry=oc60nnMMGTModEntry, olModSummarySlotIndex=olModSummarySlotIndex, ol51nnMAUIMModTable=ol51nnMAUIMModTable, ol51nnMFIBPortIndex=ol51nnMFIBPortIndex, ocInvHubMfrDate=ocInvHubMfrDate, ol53nnMFIBSTModUpStreamModule=ol53nnMFIBSTModUpStreamModule, ol53nnMMGTPortRemoteMACIndicated=ol53nnMMGTPortRemoteMACIndicated, oc61nnMCARModEntry=oc61nnMCARModEntry, ol51nnMFLPortTable=ol51nnMFLPortTable, ol51nnMTPCLModAutoPartition=ol51nnMTPCLModAutoPartition, olNetOlSecAddrPortIndex=olNetOlSecAddrPortIndex, ol51nnMTPLPortDipAdminState=ol51nnMTPLPortDipAdminState, olPS2=olPS2, oc61nnDMGTModStationAddr=oc61nnDMGTModStationAddr, ol51nnMTPPortLinkInteg=ol51nnMTPPortLinkInteg, olTRTrafFrames2048to4095Octets=olTRTrafFrames2048to4095Octets, ol5208MTPModTable=ol5208MTPModTable, ol53nnMFBMICTrunkTable=ol53nnMFBMICTrunkTable, olTRTrafControlTopNMaxStations=olTRTrafControlTopNMaxStations, dot1dBridge=dot1dBridge, ocModSlotIndex=ocModSlotIndex, ol51nnBEEPortDefNetwork=ol51nnBEEPortDefNetwork, ol52nnMMGTModLocalMACAddress=ol52nnMMGTModLocalMACAddress, olTRTrafPortInOctets=olTRTrafPortInOctets, olModDescr=olModDescr, ol53nnMFBMICPortIndex=ol53nnMFBMICPortIndex, ol51nnMTPPortTable=ol51nnMTPPortTable, ol51nnMTPPortSlotIndex=ol51nnMTPPortSlotIndex, ol51nnMFIBPortEntry=ol51nnMFIBPortEntry, olFDDIStatsModSlotIndex=olFDDIStatsModSlotIndex, ocPowerControl=ocPowerControl, ol50nnMHCTLModTempStatus=ol50nnMHCTLModTempStatus, ol51nnMAUIFModSlotIndex=ol51nnMAUIFModSlotIndex, olAgentsTable=olAgentsTable, ol53nnMSTPPortPersonality=ol53nnMSTPPortPersonality, ol53nnMMGTPortIndex=ol53nnMMGTPortIndex, ol51nnMFL=ol51nnMFL, ol51nnMBNCPortIndex=ol51nnMBNCPortIndex, ol51nnBEEModEntry=ol51nnBEEModEntry, ol51nnRESModSlotIndex=ol51nnRESModSlotIndex, expDot5StatsInternalErrors=expDot5StatsInternalErrors, ol52nnMMGTTrunkCableMon=ol52nnMMGTTrunkCableMon, ol53nnMFBMICPortNeighbor=ol53nnMFBMICPortNeighbor, ol51nnMBNCPortDipGround=ol51nnMBNCPortDipGround, ol53nnMTDDIModTable=ol53nnMTDDIModTable, olPS2ApplTable=olPS2ApplTable, oc61nnMCARModBootVersion=oc61nnMCARModBootVersion, ol53nnMFIBSTTrunkIndex=ol53nnMFIBSTTrunkIndex, oc61nnMFBPModEntry=oc61nnMFBPModEntry, ol52nnMECModSlotIndex=ol52nnMECModSlotIndex)
mibBuilder.exportSymbols("CHIPCOMMIB", ol51nnBEEModProtocols=ol51nnBEEModProtocols, ol51nnMFLPortDipAdminState=ol51nnMFLPortDipAdminState, expDot5StatsFrameCopiedErrors=expDot5StatsFrameCopiedErrors, olFDDIStatsPortLemCts=olFDDIStatsPortLemCts, olThreshStatus=olThreshStatus, ol52nnBTTPortForwarding=ol52nnBTTPortForwarding, ol51nnREEModStationAddr=ol51nnREEModStationAddr, olTRnetStatsStationLostFrameErrors=olTRnetStatsStationLostFrameErrors, ocModVendor=ocModVendor, olThreshActionPriority=olThreshActionPriority, olEnetStatsBcastRcvdOks=olEnetStatsBcastRcvdOks, olTRnetStatsLastBeaconNAUN=olTRnetStatsLastBeaconNAUN, ol53nnMSTPModUpStreamModule=ol53nnMSTPModUpStreamModule, oc61nnMTPL=oc61nnMTPL, olFDDIStatsPortLerEstimate=olFDDIStatsPortLerEstimate, ol51nnMFIBModEntry=ol51nnMFIBModEntry, ol52nnMFRTrunkNetMapState=ol52nnMFRTrunkNetMapState, olThreshObjectIdentifier=olThreshObjectIdentifier, olTRTrafStationOutFrames=olTRTrafStationOutFrames, chipAlertMode=chipAlertMode, olTRTrafTopNSummaryEntry=olTRTrafTopNSummaryEntry, expDot5StatsIfIndex=expDot5StatsIfIndex, oc60nnMRCTLModPS1Status=oc60nnMRCTLModPS1Status, ol51nnMTP=ol51nnMTP, ol51nnRESPortIpAddress=ol51nnRESPortIpAddress, olFDDIStatsPortTable=olFDDIStatsPortTable, ol52nnMMGTTrunkSlotIndex=ol52nnMMGTTrunkSlotIndex, fmm=fmm, ocModResetModule=ocModResetModule, olTRTrafPortOutErrors=olTRTrafPortOutErrors, chipRptrMonitorPortVeryLongEvents=chipRptrMonitorPortVeryLongEvents, olPortAdminState=olPortAdminState, ol52nnMMGTModEntry=ol52nnMMGTModEntry, expDot5TimerErrorReport=expDot5TimerErrorReport, olTRTrafTable=olTRTrafTable, ol52nnBTTPortIndex=ol52nnBTTPortIndex, ol51nnRESPortDefNetwork=ol51nnRESPortDefNetwork, ol52nnMFRModEntry=ol52nnMFRModEntry, olTRnetStatsStationPortIndex=olTRnetStatsStationPortIndex, ol51nnMFPPortDipNetwork=ol51nnMFPPortDipNetwork, ol53nnMFIBSTPortRemoteMACIndicated=ol53nnMFIBSTPortRemoteMACIndicated, ol51nnMTPModDipCrossover=ol51nnMTPModDipCrossover, ol5208MTPPortStationType=ol5208MTPPortStationType, olTrunkIndex=olTrunkIndex, olEnetMapTime=olEnetMapTime, ol51nnMFPPortDipAdminState=ol51nnMFPPortDipAdminState, ol53nnMMGTModTable=ol53nnMMGTModTable, olEnetStatsNetID=olEnetStatsNetID, ol51nnMTPCLModMonitorConn=ol51nnMTPCLModMonitorConn, olModClass=olModClass, olFDDInetStatsFrameErrorRatio=olFDDInetStatsFrameErrorRatio, olTrunkType=olTrunkType, olTRnetStatsStationDuplicateAddresses=olTRnetStatsStationDuplicateAddresses, olTRTrafTopNInFrames=olTRTrafTopNInFrames, ol51nnRESModProtocols=ol51nnRESModProtocols, expDot5StatsLineErrors=expDot5StatsLineErrors, ol51nnMTPPortSquelch=ol51nnMTPPortSquelch, ol52nnBTTPortRingSpeed=ol52nnBTTPortRingSpeed, olTRTrafFrames1024to2047Octets=olTRTrafFrames1024to2047Octets, ol53nnMSTPPortNeighbor=ol53nnMSTPPortNeighbor, olEnetStatsPortLastSrcAddr=olEnetStatsPortLastSrcAddr, olTRnetStatsPortDuplicateAddresses=olTRnetStatsPortDuplicateAddresses, ol51nnMFIBPortTable=ol51nnMFIBPortTable, oc61nnMFBPPortDipNetwork=oc61nnMFBPPortDipNetwork, olGroupSummaryIndex=olGroupSummaryIndex, olEnetStatsTable=olEnetStatsTable, ol50nnMRCTLModOperState=ol50nnMRCTLModOperState, olTRnetMapSummaryNetID=olTRnetMapSummaryNetID, ol53nnMMGTModStationAddr=ol53nnMMGTModStationAddr, ocPowerSlotAdminStatus=ocPowerSlotAdminStatus, ol52nnMTPModDipRingSpeed=ol52nnMTPModDipRingSpeed, ol52nnMECModSoftwareVersion=ol52nnMECModSoftwareVersion, ocModNetworkType=ocModNetworkType, olNetOlSecPortIntrSlotIndex=olNetOlSecPortIntrSlotIndex, olTRTrafTopNInOctets=olTRTrafTopNInOctets, ol51nnMTSModCPURev=ol51nnMTSModCPURev, ocInvHubSerialNo=ocInvHubSerialNo, ol51nnMTPCLPortBuddyPort=ol51nnMTPCLPortBuddyPort, ol51nnBEEModSlotIndex=ol51nnBEEModSlotIndex, ol51nnMAUIF=ol51nnMAUIF, olTRnetStatsDuplicateAddresses=olTRnetStatsDuplicateAddresses, ocInvModSWBootVer=ocInvModSWBootVer, olNetOlSecIntruderEntry=olNetOlSecIntruderEntry, ol51nnMFIBPortDipAdminState=ol51nnMFIBPortDipAdminState, ol53nnMSTPPortTable=ol53nnMSTPPortTable, ol50nnMCTLModSlotIndex=ol50nnMCTLModSlotIndex, oc60nnMMGTModBootVersion=oc60nnMMGTModBootVersion, ocInvModSubSlotIndex=ocInvModSubSlotIndex, olThreshStatCategory=olThreshStatCategory, olEnetStatsPortNetID=olEnetStatsPortNetID, chipTFTPTargetLocation=chipTFTPTargetLocation, chipRptrMonitorPortAutoPartitions=chipRptrMonitorPortAutoPartitions, ocInvModSWVer=ocInvModSWVer, oc60nnMRCTLModPS2Status=oc60nnMRCTLModPS2Status, ol51nnRESPortTable=ol51nnRESPortTable, olTRTrafTopNOutBroadcastFrames=olTRTrafTopNOutBroadcastFrames, ol51nnMTPLPortEntry=ol51nnMTPLPortEntry, ol52nnMECTrunkTable=ol52nnMECTrunkTable, chipModuleDown=chipModuleDown, ol51nnREEPortEntry=ol51nnREEPortEntry, ol52nnBTTModEntry=ol52nnBTTModEntry, chipRptrMonitorPortIndex=chipRptrMonitorPortIndex, olTRTrafStationAddress=olTRTrafStationAddress, chipPortDown=chipPortDown, ol51nnMFBPPortBuddyPort=ol51nnMFBPPortBuddyPort, ocPowerModeAdminStatus=ocPowerModeAdminStatus, olPS2ApplDescription=olPS2ApplDescription, olNetOlSecLearnSlotIndex=olNetOlSecLearnSlotIndex, chipRptrMonitorGroupIndex=chipRptrMonitorGroupIndex, ol52nnMFRModRingSpeed=ol52nnMFRModRingSpeed, softwareGroup=softwareGroup, ol5208MTPTrunkNetMapState=ol5208MTPTrunkNetMapState, olTRTrafTopNSlotIndex=olTRTrafTopNSlotIndex, ol53nnMFBMICPortLerCondition=ol53nnMFBMICPortLerCondition, ol52nnMECTrunkIndex=ol52nnMECTrunkIndex, olTRnetStatsPortIndex=olTRnetStatsPortIndex, chipRptrRptrInfoSlotIndex=chipRptrRptrInfoSlotIndex, olNetOlSecIntruderPort=olNetOlSecIntruderPort, olThreshCondition=olThreshCondition, olAgentsIpAddress=olAgentsIpAddress, olTRnetStatsLastBeaconAction=olTRnetStatsLastBeaconAction, ol51nnMTPCL=ol51nnMTPCL, olPortNetwork=olPortNetwork, ol52nnMTPTrunkTable=ol52nnMTPTrunkTable, olNetOlSecTrapReason=olNetOlSecTrapReason, ol52nnMTPModCableImp=ol52nnMTPModCableImp, ol52nnMMGTTrunkIndex=ol52nnMMGTTrunkIndex, olTRTrafPortOutMulticastFrames=olTRTrafPortOutMulticastFrames, ol52nnMTPModTable=ol52nnMTPModTable, ol53nnMTDDITrunkSlotIndex=ol53nnMTDDITrunkSlotIndex, ol51nnMFBPPortDipLLW=ol51nnMFBPPortDipLLW, ol51nnMTSModIpAddress=ol51nnMTSModIpAddress, expDot5TimerNoToken=expDot5TimerNoToken, olTRTrafStationTable=olTRTrafStationTable, ol51nnMTPModTable=ol51nnMTPModTable, ol41nnHETPPortLinkInteg=ol41nnHETPPortLinkInteg, olFDDIStatsPortIndex=olFDDIStatsPortIndex, olTRnetStatsStationNetID=olTRnetStatsStationNetID, olModSummaryTable=olModSummaryTable, ol51nnMUTPModCrossover=ol51nnMUTPModCrossover, ol50nnMHCTLModDipCh2ActCol=ol50nnMHCTLModDipCh2ActCol, oc60nnMRCTLModEntry=oc60nnMRCTLModEntry, oc61nnMFBPPortTable=oc61nnMFBPPortTable, ol50nnMHCTLModDipCh1ActCol=ol50nnMHCTLModDipCh1ActCol, ocModNumPorts=ocModNumPorts, chipRptrMonitorPortTotalErrors=chipRptrMonitorPortTotalErrors, chipRptrMonitorGroupTotalFrames=chipRptrMonitorGroupTotalFrames, ol53nnMMGTPortLerCondition=ol53nnMMGTPortLerCondition, olAlarm=olAlarm, ol53nnMFBMICPortPCWithhold=ol53nnMFBMICPortPCWithhold, olTRnetStatsPortCongestionErrors=olTRnetStatsPortCongestionErrors, ol51nnMTPLSModTable=ol51nnMTPLSModTable, olEnetStatsModBcastRcvdOks=olEnetStatsModBcastRcvdOks, expDot5Functional=expDot5Functional, olEnetMapNetID=olEnetMapNetID, ol52nnMECModRingSpeed=ol52nnMECModRingSpeed, olTrunkWrapState=olTrunkWrapState, ol51nnMTSPortEntry=ol51nnMTSPortEntry, testInsertFunc=testInsertFunc, olTRTrafTokenRotationTime=olTRTrafTokenRotationTime, ol52nnMECTrunkSlotIndex=ol52nnMECTrunkSlotIndex, ol53nnMFIBSTPortEntry=ol53nnMFIBSTPortEntry, ol51nnMAUIFPortAdminState=ol51nnMAUIFPortAdminState, olNetDPDataPath=olNetDPDataPath, olTRTrafTopNSummaryIndex=olTRTrafTopNSummaryIndex, ol51nnMFB=ol51nnMFB, ol51nnMAUIFPortSlotIndex=ol51nnMAUIFPortSlotIndex, chipSlotDown=chipSlotDown, ol51nnMAUIFPortBuddyPort=ol51nnMAUIFPortBuddyPort, ol53nnMFBMICPortConnectState=ol53nnMFBMICPortConnectState, olEnetStatsDropEvents=olEnetStatsDropEvents, ol53nnMTDDI=ol53nnMTDDI, ol5208MTPPortSlotIndex=ol5208MTPPortSlotIndex, oc61nnMTPLPortLinkInteg=oc61nnMTPLPortLinkInteg, olThreshLastCreatedIndex=olThreshLastCreatedIndex, ol60nnMRCTLModOperState=ol60nnMRCTLModOperState, olThreshStatPortIndex=olThreshStatPortIndex, chipRptrGroupSlotIndex=chipRptrGroupSlotIndex, olTRnetStatsLastBeaconSender=olTRnetStatsLastBeaconSender, olTRnetStatsBurstErrors=olTRnetStatsBurstErrors, chipRptrMonitorSlotIndex=chipRptrMonitorSlotIndex, expDot5StatsLobeWires=expDot5StatsLobeWires, ol52nnMMGTPortTable=ol52nnMMGTPortTable, olEnetStatsPortBcastRcvdOks=olEnetStatsPortBcastRcvdOks, olTRnetStatsStationSlotIndex=olTRnetStatsStationSlotIndex, ol51nnMTPPLPortSlotIndex=ol51nnMTPPLPortSlotIndex, olTRnetMapSummaryEntry=olTRnetMapSummaryEntry, olNetOlSecPortIntrChronIndex=olNetOlSecPortIntrChronIndex, ol51nnMFPModSlotIndex=ol51nnMFPModSlotIndex, olEnetStatsModMcastRcvdOks=olEnetStatsModMcastRcvdOks, chipRptrAddrTrackGroupIndex=chipRptrAddrTrackGroupIndex, ol51nnMFPPortLLW=ol51nnMFPPortLLW, olTRTrafFramesGreaterThan18000Octets=olTRTrafFramesGreaterThan18000Octets, ol51nnMAUIMPortDipNetwork=ol51nnMAUIMPortDipNetwork, ol53nnMMGTModMasterStatus=ol53nnMMGTModMasterStatus, olTRnetStatsActivePorts=olTRnetStatsActivePorts, chipRptrPortSlotIndex=chipRptrPortSlotIndex, ol52nnMECPortIndex=ol52nnMECPortIndex, chipRptrOperStatus=chipRptrOperStatus, chipRptrMonitorGroupNetID=chipRptrMonitorGroupNetID, olNetDPTable=olNetDPTable, chipRptrMonitorGroupEntry=chipRptrMonitorGroupEntry, ol53nnMFBMICModRingInfo=ol53nnMFBMICModRingInfo, ol51nnMAUIMPortTable=ol51nnMAUIMPortTable, ocPowerSlotIndex=ocPowerSlotIndex, olGroupSetGroupID=olGroupSetGroupID, ol51nnIxModStationAddr=ol51nnIxModStationAddr, olTRTrafFrames64to127Octets=olTRTrafFrames64to127Octets, ol52nnMMGTPortIpAddress=ol52nnMMGTPortIpAddress, oc61nnMFBPPortBuddyPort=oc61nnMFBPPortBuddyPort, oc61nnMFBPModSlotIndex=oc61nnMFBPModSlotIndex, ol51nnMFBPortBuddySlot=ol51nnMFBPortBuddySlot, oc60nnMRCTLModPS3Status=oc60nnMRCTLModPS3Status, chipHardware=chipHardware, ol51nnMUTPPortDipLinkInteg=ol51nnMUTPPortDipLinkInteg, olTRTrafOctets=olTRTrafOctets, ol5208MTPTrunkCableMon=ol5208MTPTrunkCableMon, ol41nnHMTPModEntry=ol41nnHMTPModEntry, chipSetTItms380c16=chipSetTItms380c16, ol51nnMTPCLPortDipLinkInteg=ol51nnMTPCLPortDipLinkInteg, ol51nnMTSModSlotIndex=ol51nnMTSModSlotIndex, ol51nnMTPLSPortLinkInteg=ol51nnMTPLSPortLinkInteg, ol53nnMSTPModUpStreamOperPath=ol53nnMSTPModUpStreamOperPath, ol51nnREEPortDipNetwork=ol51nnREEPortDipNetwork, olNetOlSecControlPortIndex=olNetOlSecControlPortIndex, ol41nnHETPModEntry=ol41nnHETPModEntry, ol52nnMECPortEntry=ol52nnMECPortEntry, ol52nnMFR=ol52nnMFR, ol53nnMSTPTrunkTable=ol53nnMSTPTrunkTable, expDot5TimerReturnRepeat=expDot5TimerReturnRepeat, oc60nnMRCTLModSubSlotIndex=oc60nnMRCTLModSubSlotIndex, olEnvPSOperStatus=olEnvPSOperStatus, chipEchoSize=chipEchoSize, ol51nnIxPortSTAPState=ol51nnIxPortSTAPState, olPS2FixedDiskSize=olPS2FixedDiskSize, ol52nnMFRTrunkTable=ol52nnMFRTrunkTable, oc60nnMMGTModTable=oc60nnMMGTModTable, ol51nnMAUIFPortEntry=ol51nnMAUIFPortEntry, olFDDInetStatsFrameCounts=olFDDInetStatsFrameCounts, ocPowerOutputWattageCapacity=ocPowerOutputWattageCapacity, ocInvModSerialNo=ocInvModSerialNo, olEnetStatsModTable=olEnetStatsModTable, olPortNetworkType=olPortNetworkType, ol51nnMFBPortSlotIndex=ol51nnMFBPortSlotIndex, ol51nnMFBModDipLLW=ol51nnMFBModDipLLW, olNetOlSecIntruderDisabled=olNetOlSecIntruderDisabled, olModSlotIndex=olModSlotIndex, olTRnetStatsConcStations=olTRnetStatsConcStations, ol53nnMTDDITrunkIndex=ol53nnMTDDITrunkIndex, olThreshAllMode=olThreshAllMode, olThreshControl=olThreshControl, chipBootPIpAddress=chipBootPIpAddress, ol53nnMSTPPortPcmState=ol53nnMSTPPortPcmState, ol51nnIxPortDipAdminState=ol51nnIxPortDipAdminState)
mibBuilder.exportSymbols("CHIPCOMMIB", ol51nnMFBPPortTable=ol51nnMFBPPortTable, expDot5TimerTable=expDot5TimerTable, ol52nnMMGTModMasterStatus=ol52nnMMGTModMasterStatus, olAgents=olAgents, oc61nnMTPLModBootVersion=oc61nnMTPLModBootVersion, olTRnetStatsPortEntry=olTRnetStatsPortEntry, ol53nnMMGTModMasterPriority=ol53nnMMGTModMasterPriority, ol52nnMFRTrunkIndex=ol52nnMFRTrunkIndex, olModEntry=olModEntry, ol52nnMMGTTrunkNetMapState=ol52nnMMGTTrunkNetMapState, olThreshIndex=olThreshIndex, ocModStatus=ocModStatus, expDot5StatsAbortTransErrors=expDot5StatsAbortTransErrors, olTRnetStatsStationEntry=olTRnetStatsStationEntry, olFDDInetStatsLostCounts=olFDDInetStatsLostCounts, olEnetMapEntry=olEnetMapEntry, oc61nnDMGTModEntry=oc61nnDMGTModEntry, ol52nnBTTModTable=ol52nnBTTModTable, oc61nnMCARModSlotIndex=oc61nnMCARModSlotIndex, ol52nnMTPTrunkIndex=ol52nnMTPTrunkIndex, ol51nnIx=ol51nnIx, ol51nnMTPLPortDipJabber=ol51nnMTPLPortDipJabber, olPS2McaEntry=olPS2McaEntry, ol51nnMUTPPortLinkInteg=ol51nnMUTPPortLinkInteg, ocModNumTrunks=ocModNumTrunks, ol51nnMUTPPortIndex=ol51nnMUTPPortIndex, olTRnetStatsStationTable=olTRnetStatsStationTable, oc61nnMFBPPortHipwr=oc61nnMFBPPortHipwr, ol53nnMTDDIPortPcmState=ol53nnMTDDIPortPcmState, chipRptrGroupOperStatus=chipRptrGroupOperStatus, expDot5RingSpeed=expDot5RingSpeed, olEnetStatsPortLastErrAddr=olEnetStatsPortLastErrAddr, ol52nnMFRPortEntry=ol52nnMFRPortEntry, olModConfigToDips=olModConfigToDips, expDot5TimerEntry=expDot5TimerEntry, chipExpTokenRing=chipExpTokenRing, olConcNumSlots=olConcNumSlots, olEnvTable=olEnvTable, chipRptrMonitorPortLateEvents=chipRptrMonitorPortLateEvents, olTRTrafFrames256to511Octets=olTRTrafFrames256to511Octets, ol52nnMMGTModRingSpeed=ol52nnMMGTModRingSpeed, oncore=oncore, olEnetStatsEntry=olEnetStatsEntry, ol52nnMECModEntry=ol52nnMECModEntry, olTRTrafEntry=olTRTrafEntry, chipEnvironment=chipEnvironment, ol53nnMMGTModEntry=ol53nnMMGTModEntry, ol51nnMTPPLPortDipAdminState=ol51nnMTPPLPortDipAdminState, ol52nnMTPPortStationType=ol52nnMTPPortStationType, ol41nnHETPPortTable=ol41nnHETPPortTable, chipTTYStop=chipTTYStop, ol51nnMTPCLModConn2DipNetwork=ol51nnMTPCLModConn2DipNetwork, olPortTable=olPortTable, chipRptrAddrTrackEntry=chipRptrAddrTrackEntry, olNetOlSecIntruderChronIndex=olNetOlSecIntruderChronIndex, ol51nnMTPPLPortJabber=ol51nnMTPPLPortJabber, olNetOlSecControlClearAddrs=olNetOlSecControlClearAddrs, ol53nnMMGTModIpAddress=ol53nnMMGTModIpAddress, ol51nnIxPortDipNetwork=ol51nnIxPortDipNetwork, ol51nnMAUIM=ol51nnMAUIM, ol53nnMFIBSTPortConnectState=ol53nnMFIBSTPortConnectState, ol60nnMRCTLModTempStatus=ol60nnMRCTLModTempStatus, ol5208MTPTrunkExtBcnRecovery=ol5208MTPTrunkExtBcnRecovery, ol51nnMAUIMPortAdminState=ol51nnMAUIMPortAdminState, ol51nnMBNCPortEntry=ol51nnMBNCPortEntry, olEnv=olEnv, olTRTrafTopNAddress=olTRTrafTopNAddress, expDot5StatsTable=expDot5StatsTable, olTRTrafStationOutBroadcastFrames=olTRTrafStationOutBroadcastFrames, olFDDInetStatsRingOpCounts=olFDDInetStatsRingOpCounts, ocPowerOverheatPowerDownMode=ocPowerOverheatPowerDownMode, ol53nnMFIBSTModTable=ol53nnMFIBSTModTable, ol51nnMAUIMPortDipCollision=ol51nnMAUIMPortDipCollision, olTRTrafPortNetID=olTRTrafPortNetID, olNetSecurityMACTable=olNetSecurityMACTable, ol53nnMFBMICModUpStreamOperPath=ol53nnMFBMICModUpStreamOperPath, ol52nnMTPTrunkSlotIndex=ol52nnMTPTrunkSlotIndex, chipRptrMonitorGroupInfo=chipRptrMonitorGroupInfo, olTrunkSlotIndex=olTrunkSlotIndex, olFDDIStatsModMgtXmitErrs=olFDDIStatsModMgtXmitErrs, ol51nnMTPLModTable=ol51nnMTPLModTable, portGroup=portGroup, olTRnetMapSummaryLogicalLock=olTRnetMapSummaryLogicalLock, olNetOlSecPortIntrEntry=olNetOlSecPortIntrEntry, ol51nnMFBPPortDipHipwr=ol51nnMFBPPortDipHipwr, expDot5TimerBeaconTransmit=expDot5TimerBeaconTransmit, ol52nnBTTPortTable=ol52nnBTTPortTable, olEnetStatsPortFCSErrors=olEnetStatsPortFCSErrors, chipTTYNumber=chipTTYNumber, ol51nnREEPortIndex=ol51nnREEPortIndex, olEnetStatsModSlotIndex=olEnetStatsModSlotIndex, chipGen=chipGen, ol51nnMFLPortBuddyPort=ol51nnMFLPortBuddyPort, ol50nnMRCLSModClockStatus=ol50nnMRCLSModClockStatus, chipBootP=chipBootP, ol53nnMFIBSTPortTable=ol53nnMFIBSTPortTable, ol53nnMTDDIModSlotIndex=ol53nnMTDDIModSlotIndex, ol53nnMFIBSTPortPCWithhold=ol53nnMFIBSTPortPCWithhold, oc60nnMRCTLModOperState=oc60nnMRCTLModOperState, olConcReset=olConcReset, chipRptrMonitorGroupTotalOctets=chipRptrMonitorGroupTotalOctets, olModConfigured=olModConfigured, workGroupHub=workGroupHub, olTRTrafTopNOutMulticastFrames=olTRTrafTopNOutMulticastFrames, chipcom=chipcom, ol51nnIxModEntry=ol51nnIxModEntry, ol52nnMFRTrunkCableMon=ol52nnMFRTrunkCableMon, chipGenProduct=chipGenProduct, ol51nnMTSModTable=ol51nnMTSModTable, oc61nnDMGTModBootVersion=oc61nnDMGTModBootVersion, ol51nnMAUIMPortSlotIndex=ol51nnMAUIMPortSlotIndex, olEnetStatsModEntry=olEnetStatsModEntry, chipEchoResponseCounts=chipEchoResponseCounts, olEnetMapTable=olEnetMapTable, ocPowerOutputWattageConsumed=ocPowerOutputWattageConsumed, ol52nnMTPModSlotIndex=ol52nnMTPModSlotIndex, ol53nnMSTPModEntry=ol53nnMSTPModEntry, ol51nnMTPLSPortSlotIndex=ol51nnMTPLSPortSlotIndex, olTrunkNeighbor=olTrunkNeighbor, online=online, ol51nnMUTPModTable=ol51nnMUTPModTable, ol53nnMFBMICPortBSFlag=ol53nnMFBMICPortBSFlag, oc60nnMMGTModSlotIndex=oc60nnMMGTModSlotIndex, ol51nnRESPortIndex=ol51nnRESPortIndex, ocModConfigured=ocModConfigured, ol52nnBTTPortIpAddress=ol52nnBTTPortIpAddress, ol50nnMHCTLModEntry=ol50nnMHCTLModEntry, ol53nnMMGTPortTable=ol53nnMMGTPortTable, chipPing=chipPing, olEnetStatsPortSrcAddrChanges=olEnetStatsPortSrcAddrChanges, ol51nnBEEPortDipNetwork=ol51nnBEEPortDipNetwork, ol50nnMHCTLModPDBStatus=ol50nnMHCTLModPDBStatus, ol51nnMFIBPortAdminState=ol51nnMFIBPortAdminState, olTRnetStatsCongestionErrors=olTRnetStatsCongestionErrors, ol51nnMMGT=ol51nnMMGT, ol52nnMTPModEntry=ol52nnMTPModEntry, oc60nnMRCTL=oc60nnMRCTL, ol51nnMTPLSModAutoPartition=ol51nnMTPLSModAutoPartition, ol52nnMMGTTrunkEntry=ol52nnMMGTTrunkEntry, ol53nnMTDDIPortNeighbor=ol53nnMTDDIPortNeighbor, ol51nnMBNCPortTable=ol51nnMBNCPortTable, olNetSecurityMACPortIndex=olNetSecurityMACPortIndex, olEnetStatsPortFrameTooLongs=olEnetStatsPortFrameTooLongs, expDot5StatsEntry=expDot5StatsEntry, chipBootPStart=chipBootPStart, hubSysGroup=hubSysGroup)
