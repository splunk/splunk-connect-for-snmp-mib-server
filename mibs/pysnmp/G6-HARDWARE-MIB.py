#
# PySNMP MIB module G6-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G6-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
g6, = mibBuilder.importSymbols("MICROSENS-G6-MIB", "g6")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Bits, TimeTicks, IpAddress, Counter64, ObjectIdentity, Counter32, Unsigned32, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Bits", "TimeTicks", "IpAddress", "Counter64", "ObjectIdentity", "Counter32", "Unsigned32", "iso", "enterprises")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
device = ModuleIdentity((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1))
device.setRevisions(('2015-05-22 10:59',))
if mibBuilder.loadTexts: device.setLastUpdated('201505221059Z')
if mibBuilder.loadTexts: device.setOrganization('MICROSENS GmbH & Co. KG')
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31))
hardwareLedTest = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwareLedTest.setStatus('current')
hardwareLedMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1), ("quiet", 2), ("dark", 3), ("lightshow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwareLedMode.setStatus('current')
hardwarePowerSupply1Monitored = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwarePowerSupply1Monitored.setStatus('current')
hardwarePowerSupply2Monitored = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwarePowerSupply2Monitored.setStatus('current')
hardwareFactoryResetButton = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwareFactoryResetButton.setStatus('current')
cableTestConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6), )
if mibBuilder.loadTexts: cableTestConfigTable.setStatus('current')
cableTestConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "cableTestConfigPortIndex"))
if mibBuilder.loadTexts: cableTestConfigEntry.setStatus('current')
cableTestConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: cableTestConfigPortIndex.setStatus('current')
cableTestConfigEnableAutoCableTest = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableTestConfigEnableAutoCableTest.setStatus('current')
cableTestConfigEventGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("anyChange", 1), ("cableUnplugged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableTestConfigEventGeneration.setStatus('current')
cableTestConfigStartTestNow = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableTestConfigStartTestNow.setStatus('current')
ioSignalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7), )
if mibBuilder.loadTexts: ioSignalConfigTable.setStatus('current')
ioSignalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "ioSignalConfigIndex"))
if mibBuilder.loadTexts: ioSignalConfigEntry.setStatus('current')
ioSignalConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ioSignalConfigIndex.setStatus('current')
ioSignalConfigSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("ledBlink", 1), ("relayBlink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigSignalMode.setStatus('current')
ioSignalConfigInput1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("alarmWhenHigh", 1), ("alarmWhenLow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput1Mode.setStatus('current')
ioSignalConfigInput1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput1Name.setStatus('current')
ioSignalConfigInput2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("alarmWhenHigh", 1), ("alarmWhenLow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput2Mode.setStatus('current')
ioSignalConfigInput2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput2Name.setStatus('current')
ioSignalConfigOutput1Trigger = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("whileRunning", 1), ("redundancyFail", 2), ("highTemp", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput1Trigger.setStatus('current')
ioSignalConfigOutput1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput1Name.setStatus('current')
ioSignalConfigOutput2Trigger = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("whileRunning", 1), ("redundancyFail", 2), ("highTemp", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput2Trigger.setStatus('current')
ioSignalConfigOutput2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput2Name.setStatus('current')
hardwarePowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 0), ("overload", 1), ("inputLow", 2), ("fuseFail", 3), ("notApplicable", 4), ("unmanaged", 5), ("notInstalled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarePowerSupply1Status.setStatus('current')
hardwarePowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 0), ("overload", 1), ("inputLow", 2), ("fuseFail", 3), ("notApplicable", 4), ("unmanaged", 5), ("notInstalled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarePowerSupply2Status.setStatus('current')
hardwareRunningOnPoe = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRunningOnPoe.setStatus('current')
hardwareFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 0), ("ok", 1), ("degraded", 2), ("fail", 3), ("missing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareFanStatus.setStatus('current')
hardwareSdCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("empty", 0), ("inserted", 1), ("writeProtected", 2), ("writing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareSdCardStatus.setStatus('current')
hardwareNumOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareNumOfPorts.setStatus('current')
hardwareMaskOfExistingPorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareMaskOfExistingPorts.setStatus('current')
hardwareMaskOfSfpPorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareMaskOfSfpPorts.setStatus('current')
hardwareMaskOfPoePorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareMaskOfPoePorts.setStatus('current')
moduleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109), )
if mibBuilder.loadTexts: moduleInfoTable.setStatus('current')
moduleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "moduleInfoIndex"))
if mibBuilder.loadTexts: moduleInfoEntry.setStatus('current')
moduleInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: moduleInfoIndex.setStatus('current')
moduleInfoUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("baseUnit", 1), ("extension", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoUnitType.setStatus('current')
moduleInfoArticleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoArticleNumber.setStatus('current')
moduleInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoSerialNumber.setStatus('current')
moduleInfoHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoHardwareVersion.setStatus('current')
moduleInfoProjectNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoProjectNumber.setStatus('current')
moduleInfoOccupiedSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoOccupiedSlots.setStatus('current')
moduleInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoDescription.setStatus('current')
slotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110), )
if mibBuilder.loadTexts: slotInfoTable.setStatus('current')
slotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "slotInfoIndex"))
if mibBuilder.loadTexts: slotInfoEntry.setStatus('current')
slotInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: slotInfoIndex.setStatus('current')
slotInfoBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notPresent", 0), ("undefined", 1), ("power", 2), ("cpu", 3), ("port", 4), ("io", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInfoBoardType.setStatus('current')
slotInfoBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInfoBoardId.setStatus('current')
slotInfoVersionBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInfoVersionBits.setStatus('current')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
portInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "portInfoPortIndex"))
if mibBuilder.loadTexts: portInfoEntry.setStatus('current')
portInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: portInfoPortIndex.setStatus('current')
portInfoSystemSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSystemSlot.setStatus('current')
portInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSwitchPort.setStatus('current')
portInfoUserSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoUserSlot.setStatus('current')
portInfoUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoUserPort.setStatus('current')
portInfoSnmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSnmpPort.setStatus('current')
portInfoSnmpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSnmpInstance.setStatus('current')
portInfoHardwarePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoHardwarePort.setStatus('current')
portInfoInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("copper", 0), ("optical", 1), ("dualMedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoInterfaceType.setStatus('current')
portInfoProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 10), Bits().clone(namedValues=NamedValues(("internal", 0), ("ms10Mb", 1), ("ms100Mb", 2), ("ms1000Mb", 3), ("rj45", 4), ("sfp", 5), ("ms1x9", 6), ("poe", 7), ("poePlus", 8), ("pd", 9), ("dualMedia", 10), ("linkPort", 11), ("csfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoProperties.setStatus('current')
portLedsTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112), )
if mibBuilder.loadTexts: portLedsTable.setStatus('current')
portLedsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "portLedsPortIndex"))
if mibBuilder.loadTexts: portLedsEntry.setStatus('current')
portLedsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: portLedsPortIndex.setStatus('current')
portLedsEthernetColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsEthernetColor.setStatus('current')
portLedsEthernetBlinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsEthernetBlinking.setStatus('current')
portLedsPoeColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsPoeColor.setStatus('current')
portLedsPoeBlinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsPoeBlinking.setStatus('current')
deviceLedsTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113), )
if mibBuilder.loadTexts: deviceLedsTable.setStatus('current')
deviceLedsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "deviceLedsIndex"))
if mibBuilder.loadTexts: deviceLedsEntry.setStatus('current')
deviceLedsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: deviceLedsIndex.setStatus('current')
deviceLedsSystem1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem1Color.setStatus('current')
deviceLedsSystem1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem1Blinking.setStatus('current')
deviceLedsSystem2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem2Color.setStatus('current')
deviceLedsSystem2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem2Blinking.setStatus('current')
deviceLedsPowerOn1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn1Color.setStatus('current')
deviceLedsPowerOn1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn1Blinking.setStatus('current')
deviceLedsPowerOn2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn2Color.setStatus('current')
deviceLedsPowerOn2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn2Blinking.setStatus('current')
deviceLedsRing1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing1Color.setStatus('current')
deviceLedsRing1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing1Blinking.setStatus('current')
deviceLedsRing2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing2Color.setStatus('current')
deviceLedsRing2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing2Blinking.setStatus('current')
deviceLedsSignalIn1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn1Color.setStatus('current')
deviceLedsSignalIn1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn1Blinking.setStatus('current')
deviceLedsSignalIn2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn2Color.setStatus('current')
deviceLedsSignalIn2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn2Blinking.setStatus('current')
deviceLedsSignalOut1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut1Color.setStatus('current')
deviceLedsSignalOut1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut1Blinking.setStatus('current')
deviceLedsSignalOut2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut2Color.setStatus('current')
deviceLedsSignalOut2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut2Blinking.setStatus('current')
cableTestStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114), )
if mibBuilder.loadTexts: cableTestStatusTable.setStatus('current')
cableTestStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "cableTestStatusPortIndex"))
if mibBuilder.loadTexts: cableTestStatusEntry.setStatus('current')
cableTestStatusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: cableTestStatusPortIndex.setStatus('current')
cableTestStatusUpdateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusUpdateTimeStamp.setStatus('current')
cableTestStatusPair0State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair0State.setStatus('current')
cableTestStatusPair0DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair0DistanceToFault.setStatus('current')
cableTestStatusPair1State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair1State.setStatus('current')
cableTestStatusPair1DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair1DistanceToFault.setStatus('current')
cableTestStatusPair2State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair2State.setStatus('current')
cableTestStatusPair2DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair2DistanceToFault.setStatus('current')
cableTestStatusPair3State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair3State.setStatus('current')
cableTestStatusPair3DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair3DistanceToFault.setStatus('current')
cableTestStatusCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("pluggedIn", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusCableStatus.setStatus('current')
ioSignalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115), )
if mibBuilder.loadTexts: ioSignalStatusTable.setStatus('current')
ioSignalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "ioSignalStatusIndex"))
if mibBuilder.loadTexts: ioSignalStatusEntry.setStatus('current')
ioSignalStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ioSignalStatusIndex.setStatus('current')
ioSignalStatusInput1AlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusInput1AlarmActive.setStatus('current')
ioSignalStatusInput2AlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusInput2AlarmActive.setStatus('current')
ioSignalStatusOutput1RelayActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusOutput1RelayActive.setStatus('current')
ioSignalStatusOutput2RelayActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusOutput2RelayActive.setStatus('current')
tcamStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116), )
if mibBuilder.loadTexts: tcamStatusTable.setStatus('current')
tcamStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "tcamStatusIndex"))
if mibBuilder.loadTexts: tcamStatusEntry.setStatus('current')
tcamStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: tcamStatusIndex.setStatus('current')
tcamStatusControlFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcamStatusControlFile.setStatus('current')
tcamStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcamStatusDescription.setStatus('current')
mibBuilder.exportSymbols("G6-HARDWARE-MIB", hardware=hardware, cableTestConfigTable=cableTestConfigTable, slotInfoBoardType=slotInfoBoardType, slotInfoIndex=slotInfoIndex, portLedsPoeBlinking=portLedsPoeBlinking, deviceLedsIndex=deviceLedsIndex, slotInfoVersionBits=slotInfoVersionBits, deviceLedsSignalOut1Blinking=deviceLedsSignalOut1Blinking, tcamStatusEntry=tcamStatusEntry, ioSignalConfigOutput1Trigger=ioSignalConfigOutput1Trigger, deviceLedsPowerOn2Color=deviceLedsPowerOn2Color, deviceLedsPowerOn1Blinking=deviceLedsPowerOn1Blinking, hardwarePowerSupply1Monitored=hardwarePowerSupply1Monitored, hardwareLedTest=hardwareLedTest, moduleInfoIndex=moduleInfoIndex, cableTestConfigStartTestNow=cableTestConfigStartTestNow, ioSignalStatusOutput2RelayActive=ioSignalStatusOutput2RelayActive, portInfoEntry=portInfoEntry, portInfoInterfaceType=portInfoInterfaceType, ioSignalConfigIndex=ioSignalConfigIndex, moduleInfoEntry=moduleInfoEntry, hardwareFanStatus=hardwareFanStatus, hardwarePowerSupply2Monitored=hardwarePowerSupply2Monitored, ioSignalConfigTable=ioSignalConfigTable, deviceLedsRing2Color=deviceLedsRing2Color, moduleInfoProjectNumber=moduleInfoProjectNumber, deviceLedsSystem2Color=deviceLedsSystem2Color, deviceLedsSignalIn2Blinking=deviceLedsSignalIn2Blinking, portInfoUserSlot=portInfoUserSlot, cableTestConfigEventGeneration=cableTestConfigEventGeneration, deviceLedsPowerOn1Color=deviceLedsPowerOn1Color, cableTestStatusPair0DistanceToFault=cableTestStatusPair0DistanceToFault, cableTestStatusPair2State=cableTestStatusPair2State, ioSignalConfigInput1Mode=ioSignalConfigInput1Mode, portLedsEthernetColor=portLedsEthernetColor, cableTestStatusEntry=cableTestStatusEntry, portInfoPortIndex=portInfoPortIndex, cableTestStatusPair1DistanceToFault=cableTestStatusPair1DistanceToFault, moduleInfoSerialNumber=moduleInfoSerialNumber, moduleInfoDescription=moduleInfoDescription, cableTestStatusCableStatus=cableTestStatusCableStatus, deviceLedsRing2Blinking=deviceLedsRing2Blinking, cableTestStatusTable=cableTestStatusTable, ioSignalStatusIndex=ioSignalStatusIndex, ioSignalStatusOutput1RelayActive=ioSignalStatusOutput1RelayActive, hardwareNumOfPorts=hardwareNumOfPorts, portInfoProperties=portInfoProperties, deviceLedsSignalIn1Color=deviceLedsSignalIn1Color, cableTestStatusPair0State=cableTestStatusPair0State, portLedsTable=portLedsTable, cableTestStatusPair2DistanceToFault=cableTestStatusPair2DistanceToFault, deviceLedsSystem2Blinking=deviceLedsSystem2Blinking, device=device, hardwareMaskOfExistingPorts=hardwareMaskOfExistingPorts, hardwareMaskOfPoePorts=hardwareMaskOfPoePorts, moduleInfoHardwareVersion=moduleInfoHardwareVersion, portInfoTable=portInfoTable, cableTestStatusPair1State=cableTestStatusPair1State, tcamStatusDescription=tcamStatusDescription, deviceLedsSignalIn2Color=deviceLedsSignalIn2Color, moduleInfoOccupiedSlots=moduleInfoOccupiedSlots, hardwareFactoryResetButton=hardwareFactoryResetButton, ioSignalConfigInput2Name=ioSignalConfigInput2Name, portInfoSystemSlot=portInfoSystemSlot, hardwareMaskOfSfpPorts=hardwareMaskOfSfpPorts, portInfoSnmpPort=portInfoSnmpPort, ioSignalConfigOutput2Trigger=ioSignalConfigOutput2Trigger, deviceLedsPowerOn2Blinking=deviceLedsPowerOn2Blinking, cableTestStatusUpdateTimeStamp=cableTestStatusUpdateTimeStamp, deviceLedsRing1Color=deviceLedsRing1Color, ioSignalConfigSignalMode=ioSignalConfigSignalMode, portInfoSwitchPort=portInfoSwitchPort, cableTestConfigEnableAutoCableTest=cableTestConfigEnableAutoCableTest, deviceLedsSignalOut2Color=deviceLedsSignalOut2Color, portLedsEntry=portLedsEntry, portLedsEthernetBlinking=portLedsEthernetBlinking, hardwareSdCardStatus=hardwareSdCardStatus, ioSignalConfigOutput1Name=ioSignalConfigOutput1Name, cableTestStatusPortIndex=cableTestStatusPortIndex, deviceLedsSignalOut2Blinking=deviceLedsSignalOut2Blinking, ioSignalStatusEntry=ioSignalStatusEntry, deviceLedsSignalIn1Blinking=deviceLedsSignalIn1Blinking, hardwareLedMode=hardwareLedMode, deviceLedsSystem1Blinking=deviceLedsSystem1Blinking, hardwarePowerSupply1Status=hardwarePowerSupply1Status, cableTestConfigEntry=cableTestConfigEntry, slotInfoEntry=slotInfoEntry, cableTestStatusPair3DistanceToFault=cableTestStatusPair3DistanceToFault, tcamStatusControlFile=tcamStatusControlFile, cableTestConfigPortIndex=cableTestConfigPortIndex, portLedsPoeColor=portLedsPoeColor, ioSignalStatusInput1AlarmActive=ioSignalStatusInput1AlarmActive, deviceLedsEntry=deviceLedsEntry, moduleInfoUnitType=moduleInfoUnitType, ioSignalStatusTable=ioSignalStatusTable, portInfoUserPort=portInfoUserPort, deviceLedsTable=deviceLedsTable, ioSignalStatusInput2AlarmActive=ioSignalStatusInput2AlarmActive, moduleInfoTable=moduleInfoTable, portInfoHardwarePort=portInfoHardwarePort, hardwareRunningOnPoe=hardwareRunningOnPoe, cableTestStatusPair3State=cableTestStatusPair3State, slotInfoBoardId=slotInfoBoardId, deviceLedsSystem1Color=deviceLedsSystem1Color, PYSNMP_MODULE_ID=device, slotInfoTable=slotInfoTable, ioSignalConfigEntry=ioSignalConfigEntry, hardwarePowerSupply2Status=hardwarePowerSupply2Status, tcamStatusIndex=tcamStatusIndex, deviceLedsRing1Blinking=deviceLedsRing1Blinking, moduleInfoArticleNumber=moduleInfoArticleNumber, tcamStatusTable=tcamStatusTable, deviceLedsSignalOut1Color=deviceLedsSignalOut1Color, ioSignalConfigInput1Name=ioSignalConfigInput1Name, portInfoSnmpInstance=portInfoSnmpInstance, ioSignalConfigOutput2Name=ioSignalConfigOutput2Name, portLedsPortIndex=portLedsPortIndex, ioSignalConfigInput2Mode=ioSignalConfigInput2Mode)
