#
# PySNMP MIB module IBM2210-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM2210-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
proElsTrapEvent, proElsSubSysEventMsg, proElsTrapSubSystem, proElsTrapSeqs = mibBuilder.importSymbols("PROTEON-MIB", "proElsTrapEvent", "proElsSubSysEventMsg", "proElsTrapSubSystem", "proElsTrapSeqs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Unsigned32, Integer32, Counter64, NotificationType, IpAddress, Gauge32, ModuleIdentity, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, ObjectIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Integer32", "Counter64", "NotificationType", "IpAddress", "Gauge32", "ModuleIdentity", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "ObjectIdentity", "MibIdentifier", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
proteon = MibIdentifier((1, 3, 6, 1, 4, 1, 1))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm2210 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72))
ibm2210admin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 1))
ibm2210system = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 2))
ibm2210hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 3))
ibm2210routing = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 4))
ibm2210switching = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 5))
ibm2210hardwareinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1))
proto = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3))
pDot3ChipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 5))
ibmServiceGenericTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1), )
if mibBuilder.loadTexts: ibmServiceGenericTable.setStatus('mandatory')
ibmServiceGenericEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1), ).setIndexNames((0, "IBM2210-MIB", "ibmServiceGenericPort"))
if mibBuilder.loadTexts: ibmServiceGenericEntry.setStatus('mandatory')
ibmServiceGenericPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServiceGenericPort.setStatus('mandatory')
ibmServiceGenericBaurdrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServiceGenericBaurdrate.setStatus('mandatory')
ibmServiceGenericType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 72, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eia232", 1), ("modem", 2), ("nocard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServiceGenericType.setStatus('mandatory')
proXfaceGenericTable = MibTable((1, 3, 6, 1, 4, 1, 1, 2), )
if mibBuilder.loadTexts: proXfaceGenericTable.setStatus('mandatory')
proXfaceGenericEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: proXfaceGenericEntry.setStatus('mandatory')
proXfaceGenericType = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64))).clone(namedValues=NamedValues(("vi", 1), ("pn10", 2), ("pn80", 3), ("chaos", 4), ("xeth", 5), ("m1822", 6), ("scc", 7), ("ieth", 8), ("peth", 9), ("com2", 10), ("com4", 11), ("omn", 12), ("pn4", 13), ("hyper", 14), ("wdeth", 15), ("gwslc", 16), ("x25", 17), ("pqsx", 18), ("atr", 19), ("fddi", 20), ("vlane", 21), ("vcom4", 22), ("pn16", 23), ("atcomsl", 24), ("ceth", 25), ("csl", 26), ("seth", 27), ("srlygwsl", 28), ("srlyatc2", 29), ("srlycsl", 30), ("srbtnl", 31), ("sdlcrly", 32), ("nseth", 33), ("x25atc2", 34), ("x25csl", 35), ("x25dcsl", 36), ("qsl", 37), ("ydcisdn", 38), ("tsl", 39), ("qslch", 40), ("v25bis", 41), ("hssi", 42), ("quiceth", 43), ("quictkr", 44), ("quicsl", 45), ("quicbisdn", 46), ("vlic", 47), ("atm", 48), ("escon", 49), ("isdnpri", 50), ("quic4wan", 51), ("quic8wan", 52), ("quic4mdm", 53), ("quic8mdm", 54), ("pawx21", 55), ("pawv36", 56), ("pawrs232", 57), ("nwescon", 58), ("atmvirt", 59), ("appnl", 60), ("v34", 61), ("mp", 62), ("atmpmpls", 63), ("eth100", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericType.setStatus('mandatory')
proXfaceGenericCSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericCSR.setStatus('mandatory')
proXfaceGenericIntVec = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericIntVec.setStatus('mandatory')
proXfaceGenericMaintInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintInt.setStatus('mandatory')
proXfaceGenericMaintLim = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintLim.setStatus('mandatory')
proXfaceGenericNextTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericNextTest.setStatus('mandatory')
proXfaceGenericNextMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericNextMaint.setStatus('mandatory')
proXfaceGenericMaintCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintCnt.setStatus('mandatory')
proXfaceGenericMaintFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericMaintFails.setStatus('mandatory')
proXfaceGenericTestPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericTestPasses.setStatus('mandatory')
proXfaceGenericTestFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericTestFails.setStatus('mandatory')
proXfaceGenericModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proXfaceGenericModuleId.setStatus('mandatory')
general = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3, 1))
proip = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3, 2))
defgw = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 3, 2, 1))
proProtoIpDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwAddress.setStatus('mandatory')
proProtoIpDefGwCost = MibScalar((1, 3, 6, 1, 4, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwCost.setStatus('mandatory')
proProtoIpDefGwAge = MibScalar((1, 3, 6, 1, 4, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proProtoIpDefGwAge.setStatus('mandatory')
pDot3ChipMC68EN360 = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 5, 1))
ibmElsTrapV1 = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 72) + (0,1)).setObjects(("PROTEON-MIB", "proElsTrapSeqs"), ("PROTEON-MIB", "proElsTrapSubSystem"), ("PROTEON-MIB", "proElsTrapEvent"))
ibmElsTrapV2 = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 72) + (0,2)).setObjects(("PROTEON-MIB", "proElsSubSysEventMsg"))
mibBuilder.exportSymbols("IBM2210-MIB", pDot3ChipSets=pDot3ChipSets, ibmServiceGenericTable=ibmServiceGenericTable, proXfaceGenericMaintLim=proXfaceGenericMaintLim, ibm2210admin=ibm2210admin, ibm=ibm, proXfaceGenericMaintInt=proXfaceGenericMaintInt, proXfaceGenericTestFails=proXfaceGenericTestFails, proXfaceGenericMaintCnt=proXfaceGenericMaintCnt, defgw=defgw, proXfaceGenericTable=proXfaceGenericTable, ibmServiceGenericEntry=ibmServiceGenericEntry, ibm2210hardwareinfo=ibm2210hardwareinfo, proXfaceGenericIntVec=proXfaceGenericIntVec, ibmServiceGenericType=ibmServiceGenericType, proteon=proteon, ibm2210=ibm2210, ibm2210switching=ibm2210switching, proProtoIpDefGwAge=proProtoIpDefGwAge, ibm2210system=ibm2210system, general=general, ibmServiceGenericBaurdrate=ibmServiceGenericBaurdrate, ibmElsTrapV2=ibmElsTrapV2, proXfaceGenericType=proXfaceGenericType, proXfaceGenericNextMaint=proXfaceGenericNextMaint, proto=proto, proXfaceGenericModuleId=proXfaceGenericModuleId, proXfaceGenericNextTest=proXfaceGenericNextTest, ibmServiceGenericPort=ibmServiceGenericPort, proProtoIpDefGwAddress=proProtoIpDefGwAddress, ibmProd=ibmProd, ibm2210hardware=ibm2210hardware, proXfaceGenericEntry=proXfaceGenericEntry, proip=proip, proXfaceGenericCSR=proXfaceGenericCSR, proXfaceGenericMaintFails=proXfaceGenericMaintFails, pDot3ChipMC68EN360=pDot3ChipMC68EN360, proXfaceGenericTestPasses=proXfaceGenericTestPasses, ibmElsTrapV1=ibmElsTrapV1, ibm2210routing=ibm2210routing, proProtoIpDefGwCost=proProtoIpDefGwCost)
