#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMIDCSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMIDCSU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, TimeTicks, Counter64, Counter32, Unsigned32, iso, Bits, Integer32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "TimeTicks", "Counter64", "Counter32", "Unsigned32", "iso", "Bits", "Integer32", "MibIdentifier", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_idcsu, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-idcsu")
ncmidcsuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000), )
if mibBuilder.loadTexts: ncmidcsuConfigTable.setStatus('mandatory')
ncmidcsuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsucfgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuLineIndex"))
if mibBuilder.loadTexts: ncmidcsuConfigEntry.setStatus('mandatory')
ncmidcsucfgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsucfgNIDIndex.setStatus('mandatory')
ncmidcsuLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuLineIndex.setStatus('mandatory')
ncmidcsuNetLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db-Zero", 1), ("db-Seven-point-five", 2), ("db-Fifteen", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetLineBuildOut.setStatus('mandatory')
ncmidcsuNetworkKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop", 2), ("ais", 3), ("framed-all-ones", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetworkKeepAlive.setStatus('mandatory')
ncmidcsuExcessiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuExcessiveError.setStatus('mandatory')
ncmidcsuOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuOutOfFrame.setStatus('mandatory')
ncmidcsuFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unframed", 1), ("sf", 2), ("esf", 3), ("zbtsi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuFormat.setStatus('mandatory')
ncmidcsuNetDensityEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("fcc-part-68", 2), ("pub-62411", 3), ("eighty-zeroes", 4), ("fifteen-zeroes", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetDensityEnforcement.setStatus('mandatory')
ncmidcsuNetLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuNetLossOfSignal.setStatus('mandatory')
ncmidcsuJitterBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq-Net-16-16", 1), ("eq-Net-40-16", 2), ("eq-Net-16-40", 3), ("eq-Net-40-40", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuJitterBuf.setStatus('mandatory')
ncmidcsuTestSigCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestSigCfgEnable.setStatus('mandatory')
ncmidcsuTestSigCfgFrameSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestSigCfgFrameSignal.setStatus('mandatory')
ncmidcsuCfgRptSendPRM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptSendPRM.setStatus('mandatory')
ncmidcsuCfgRptPollFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptPollFarEnd.setStatus('mandatory')
ncmidcsuCfgRptDataLinkUnsolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptDataLinkUnsolicit.setStatus('mandatory')
ncmidcsuCfgRptAlmReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptAlmReporting.setStatus('mandatory')
ncmidcsuCfgRptPRMType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tELCO", 1), ("uSER", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptPRMType.setStatus('mandatory')
ncmidcsuCfgCodeRegenCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeRegenCRC.setStatus('mandatory')
ncmidcsuCfgCodeXYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeXYellowAlarm.setStatus('mandatory')
ncmidcsuCfgCodeEQFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeEQFIFO.setStatus('mandatory')
ncmidcsuCfgCodeNETFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeNETFIFO.setStatus('mandatory')
ncmidcsuCfgCodeTranMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeTranMode.setStatus('mandatory')
ncmidcsuCfgCodeSend1sLnkIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeSend1sLnkIdle.setStatus('mandatory')
ncmidcsuCfgAlmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmSelfTest.setStatus('mandatory')
ncmidcsuCfgAlmEnableTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmEnableTestState.setStatus('mandatory')
ncmidcsuCfgAlmUnframedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmUnframedMode.setStatus('mandatory')
ncmidcsuCfgAlmOnEqLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnEqLoop.setStatus('mandatory')
ncmidcsuCfgAlmOnNetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnNetLoop.setStatus('mandatory')
ncmidcsuCfgAlmOnPowerUpLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnPowerUpLoop.setStatus('mandatory')
ncmidcsuCfgLoopRespLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespLLB.setStatus('mandatory')
ncmidcsuCfgLoopRespPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespPLB.setStatus('mandatory')
ncmidcsuCfgLoopRespELB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespELB.setStatus('mandatory')
ncmidcsuCfgLoopRespRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespRLB.setStatus('mandatory')
ncmidcsuCfgLoopRespLLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespLLBTONE.setStatus('mandatory')
ncmidcsuCfgLoopRespPLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespPLBTONE.setStatus('mandatory')
ncmidcsuCfgSendReceiveInBandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgSendReceiveInBandCode.setStatus('mandatory')
ncmidcsuThresholdIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001), )
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalTable.setStatus('mandatory')
ncmidcsuThresholdIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuThresholdNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuThresholdIntervalIndex"))
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalEntry.setStatus('mandatory')
ncmidcsuThresholdNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuThresholdNIDIndex.setStatus('mandatory')
ncmidcsuThresholdIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalIndex.setStatus('mandatory')
ncmidcsuBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("ten-to-Four", 2), ("ten-to-Five", 3), ("ten-to-Six", 4), ("ten-to-Seven", 5), ("ten-to-Eight", 6), ("ten-to-Nine", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuBERThreshold.setStatus('mandatory')
ncmidcsubpvSecThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsubpvSecThreshold.setStatus('mandatory')
ncmidcsubpvSecInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsubpvSecInterval.setStatus('mandatory')
ncmidcsuESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuESThreshold.setStatus('mandatory')
ncmidcsuESInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuESInterval.setStatus('mandatory')
ncmidcsuUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuUASThreshold.setStatus('mandatory')
ncmidcsuUASInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuUASInterval.setStatus('mandatory')
ncmidcsuConfigOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002), )
if mibBuilder.loadTexts: ncmidcsuConfigOneTable.setStatus('mandatory')
ncmidcsuConfigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsucfg1NIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuLineIndex1"))
if mibBuilder.loadTexts: ncmidcsuConfigOneEntry.setStatus('mandatory')
ncmidcsucfg1NIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsucfg1NIDIndex.setStatus('mandatory')
ncmidcsuLineIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuLineIndex1.setStatus('mandatory')
ncmidcsuDS0Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuDS0Channel.setStatus('mandatory')
ncmidcsuRLBTimeoutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuRLBTimeoutIndex.setStatus('mandatory')
ncmidcsuNetLofcIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetLofcIndexTime.setStatus('mandatory')
ncmidcsuTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("timing", 1), ("internal", 2), ("external-422", 3), ("reserved", 4), ("net", 5), ("eq", 6), ("reserved-two", 7), ("dsu", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTiming.setStatus('mandatory')
ncmidcsuLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuLineCode.setStatus('mandatory')
ncmidcsuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode-56k", 1), ("mode-64k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuMode.setStatus('mandatory')
ncmidcsuClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sT", 1), ("iNVST", 2), ("tT", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuClock.setStatus('mandatory')
ncmidcsuScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuScramble.setStatus('mandatory')
ncmidcsuLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuLosLead.setStatus('mandatory')
ncmidcsuPortLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuPortLoopEnable.setStatus('mandatory')
ncmidcsuDataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuDataInvert.setStatus('mandatory')
ncmidcsuTimingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTimingUnit.setStatus('mandatory')
ncmidcsuAlarmReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmReporting.setStatus('mandatory')
ncmidcsuDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003), )
if mibBuilder.loadTexts: ncmidcsuDiagnosticTable.setStatus('mandatory')
ncmidcsuDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuDiagNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuDiagnosticIndex"))
if mibBuilder.loadTexts: ncmidcsuDiagnosticEntry.setStatus('mandatory')
ncmidcsuDiagNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuDiagNIDIndex.setStatus('mandatory')
ncmidcsuDiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuDiagnosticIndex.setStatus('mandatory')
ncmidcsuAlarmSetDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmSetDelay.setStatus('mandatory')
ncmidcsuAlarmClearDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmClearDelay.setStatus('mandatory')
ncmidcsuAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmEnable.setStatus('mandatory')
ncmidcsuLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("csu-Payload-Loop-Back", 1), ("line-Loop-Back", 2), ("repeater-Loop-Back", 3), ("csu-Equip-Loop-Back", 4), ("csu-No-Loop-Back", 5), ("deactivate-LLB-and-PLB", 6), ("deactivate-ELB-and-RLB", 7), ("deactivate-Payload-Loop-Back", 8), ("send-Inband-Loop-Up", 9), ("send-Inband-Loop-Down", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuLoopback.setStatus('mandatory')
ncmdteloops = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-loop", 1), ("near-on", 2), ("near-off", 3), ("far-on", 4), ("far-off", 5), ("repeater-loopback", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdteloops.setStatus('mandatory')
ncmidcsuTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-test", 1), ("qrss", 2), ("one-in-eight", 3), ("three-in-twenty-four", 4), ("all-ones", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestPattern.setStatus('mandatory')
ncmidcsuResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuResetPerfReg.setStatus('mandatory')
ncmidcsuTestErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuTestErrorCounter.setStatus('mandatory')
ncmidcsuTestSecondsRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuTestSecondsRemain.setStatus('mandatory')
ncmidcsuTestTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestTimeSeconds.setStatus('mandatory')
ncmidcsuNetLOFCIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetLOFCIndexTime.setStatus('mandatory')
ncmidcsuChannelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuChannelMask.setStatus('mandatory')
ncmidcsuApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("csu", 2), ("smds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuApplication.setStatus('mandatory')
ncmidcsuTestIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestIntervalIndex.setStatus('mandatory')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMIDCSU-MIB", ncmidcsuCfgLoopRespLLB=ncmidcsuCfgLoopRespLLB, ncmidcsuAlarmReporting=ncmidcsuAlarmReporting, ncmidcsuUASInterval=ncmidcsuUASInterval, ncmidcsuTiming=ncmidcsuTiming, ncmidcsuBERThreshold=ncmidcsuBERThreshold, ncmidcsuLineIndex1=ncmidcsuLineIndex1, ncmidcsuESThreshold=ncmidcsuESThreshold, ncmidcsuCfgLoopRespLLBTONE=ncmidcsuCfgLoopRespLLBTONE, ncmidcsuConfigOneTable=ncmidcsuConfigOneTable, ncmidcsuScramble=ncmidcsuScramble, ncmidcsuCfgCodeXYellowAlarm=ncmidcsuCfgCodeXYellowAlarm, ncmidcsuDiagNIDIndex=ncmidcsuDiagNIDIndex, ncmidcsuExcessiveError=ncmidcsuExcessiveError, ncmidcsuPortLoopEnable=ncmidcsuPortLoopEnable, ncmidcsuThresholdIntervalIndex=ncmidcsuThresholdIntervalIndex, ncmidcsubpvSecThreshold=ncmidcsubpvSecThreshold, ncmidcsuDiagnosticEntry=ncmidcsuDiagnosticEntry, ncmidcsuConfigTable=ncmidcsuConfigTable, ncmidcsuESInterval=ncmidcsuESInterval, ncmidcsuCfgRptPRMType=ncmidcsuCfgRptPRMType, ncmidcsuTestTimeSeconds=ncmidcsuTestTimeSeconds, ncmidcsuCfgRptAlmReporting=ncmidcsuCfgRptAlmReporting, ncmidcsuRLBTimeoutIndex=ncmidcsuRLBTimeoutIndex, ncmdteloops=ncmdteloops, ncmidcsuOutOfFrame=ncmidcsuOutOfFrame, ncmidcsuApplication=ncmidcsuApplication, ncmidcsuAlarmSetDelay=ncmidcsuAlarmSetDelay, ncmidcsuLineIndex=ncmidcsuLineIndex, ncmidcsuConfigEntry=ncmidcsuConfigEntry, ncmidcsuUASThreshold=ncmidcsuUASThreshold, ncmidcsuCfgCodeEQFIFO=ncmidcsuCfgCodeEQFIFO, ncmidcsuCfgRptDataLinkUnsolicit=ncmidcsuCfgRptDataLinkUnsolicit, ncmidcsucfg1NIDIndex=ncmidcsucfg1NIDIndex, ncmidcsuNetLOFCIndexTime=ncmidcsuNetLOFCIndexTime, ncmidcsuCfgLoopRespPLB=ncmidcsuCfgLoopRespPLB, ncmidcsuCfgCodeNETFIFO=ncmidcsuCfgCodeNETFIFO, ncmidcsucfgNIDIndex=ncmidcsucfgNIDIndex, ncmidcsuThresholdNIDIndex=ncmidcsuThresholdNIDIndex, ncmidcsuTestIntervalIndex=ncmidcsuTestIntervalIndex, ncmidcsubpvSecInterval=ncmidcsubpvSecInterval, ncmidcsuCfgAlmSelfTest=ncmidcsuCfgAlmSelfTest, ncmidcsuDiagnosticIndex=ncmidcsuDiagnosticIndex, ncmidcsuConfigOneEntry=ncmidcsuConfigOneEntry, ncmidcsuLosLead=ncmidcsuLosLead, ncmidcsuNetworkKeepAlive=ncmidcsuNetworkKeepAlive, ncmidcsuCfgAlmOnPowerUpLoop=ncmidcsuCfgAlmOnPowerUpLoop, ncmidcsuTimingUnit=ncmidcsuTimingUnit, ncmidcsuAlarmClearDelay=ncmidcsuAlarmClearDelay, ncmidcsuFormat=ncmidcsuFormat, ncmidcsuLoopback=ncmidcsuLoopback, ncmidcsuDiagnosticTable=ncmidcsuDiagnosticTable, ncmidcsuCfgRptSendPRM=ncmidcsuCfgRptSendPRM, ncmidcsuTestPattern=ncmidcsuTestPattern, ncmidcsuCfgLoopRespELB=ncmidcsuCfgLoopRespELB, ncmidcsuNetLofcIndexTime=ncmidcsuNetLofcIndexTime, ncmidcsuNetDensityEnforcement=ncmidcsuNetDensityEnforcement, ncmidcsuTestSigCfgEnable=ncmidcsuTestSigCfgEnable, ncmidcsuCfgCodeSend1sLnkIdle=ncmidcsuCfgCodeSend1sLnkIdle, ncmidcsuMode=ncmidcsuMode, ncmidcsuJitterBuf=ncmidcsuJitterBuf, ncmidcsuLineCode=ncmidcsuLineCode, ncmidcsuCfgCodeRegenCRC=ncmidcsuCfgCodeRegenCRC, ncmidcsuClock=ncmidcsuClock, ncmidcsuNetLossOfSignal=ncmidcsuNetLossOfSignal, ncmidcsuCfgAlmEnableTestState=ncmidcsuCfgAlmEnableTestState, ncmidcsuCfgLoopRespRLB=ncmidcsuCfgLoopRespRLB, ncmidcsuCfgRptPollFarEnd=ncmidcsuCfgRptPollFarEnd, ncmidcsuCfgLoopRespPLBTONE=ncmidcsuCfgLoopRespPLBTONE, ncmidcsuThresholdIntervalEntry=ncmidcsuThresholdIntervalEntry, ncmidcsuDS0Channel=ncmidcsuDS0Channel, ncmidcsuTestSigCfgFrameSignal=ncmidcsuTestSigCfgFrameSignal, ncmidcsuDataInvert=ncmidcsuDataInvert, ncmidcsuNetLineBuildOut=ncmidcsuNetLineBuildOut, ncmidcsuResetPerfReg=ncmidcsuResetPerfReg, ncmidcsuCfgCodeTranMode=ncmidcsuCfgCodeTranMode, ncmidcsuCfgAlmUnframedMode=ncmidcsuCfgAlmUnframedMode, ncmidcsuCfgSendReceiveInBandCode=ncmidcsuCfgSendReceiveInBandCode, ncmidcsuTestErrorCounter=ncmidcsuTestErrorCounter, ncmidcsuChannelMask=ncmidcsuChannelMask, ncmidcsuCfgAlmOnEqLoop=ncmidcsuCfgAlmOnEqLoop, ncmidcsuCfgAlmOnNetLoop=ncmidcsuCfgAlmOnNetLoop, ncmidcsuThresholdIntervalTable=ncmidcsuThresholdIntervalTable, ncmidcsuTestSecondsRemain=ncmidcsuTestSecondsRemain, ncmidcsuAlarmEnable=ncmidcsuAlarmEnable)
