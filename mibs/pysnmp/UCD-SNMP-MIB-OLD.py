#
# PySNMP MIB module UCD-SNMP-MIB-OLD (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UCD-SNMP-MIB-OLD
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Unsigned32, NotificationType, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Bits, MibIdentifier, TimeTicks, ModuleIdentity, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "NotificationType", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Bits", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Counter32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ucdavis, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdavis")
processes = MibTable((1, 3, 6, 1, 4, 1, 2021, 1), ).setIndexNames((0, "UCD-SNMP-MIB-OLD", "processIndex"))
if mibBuilder.loadTexts: processes.setStatus('mandatory')
processIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIndex.setStatus('mandatory')
processNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processNames.setStatus('mandatory')
processMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMin.setStatus('mandatory')
processMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMax.setStatus('mandatory')
processCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCount.setStatus('mandatory')
processErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processErrorFlag.setStatus('mandatory')
processErrMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processErrMessage.setStatus('mandatory')
processErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processErrFix.setStatus('mandatory')
extensible = MibTable((1, 3, 6, 1, 4, 1, 2021, 3), ).setIndexNames((0, "UCD-SNMP-MIB-OLD", "extensibleIndex"))
if mibBuilder.loadTexts: extensible.setStatus('mandatory')
extensibleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensibleIndex.setStatus('mandatory')
extensibleNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensibleNames.setStatus('mandatory')
extensibleCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensibleCommand.setStatus('mandatory')
extensibleResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 3, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensibleResult.setStatus('mandatory')
extensibleOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 3, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensibleOutput.setStatus('mandatory')
extensibleErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 3, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extensibleErrFix.setStatus('mandatory')
disk = MibTable((1, 3, 6, 1, 4, 1, 2021, 6), ).setIndexNames((0, "UCD-SNMP-MIB-OLD", "diskIndex"))
if mibBuilder.loadTexts: disk.setStatus('mandatory')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIndex.setStatus('mandatory')
diskPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPath.setStatus('mandatory')
diskDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDevice.setStatus('mandatory')
diskMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskMinimum.setStatus('mandatory')
diskMinPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskMinPercent.setStatus('mandatory')
diskTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotal.setStatus('mandatory')
diskAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAvail.setStatus('mandatory')
diskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskUsed.setStatus('mandatory')
diskPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPercent.setStatus('mandatory')
diskErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskErrorFlag.setStatus('mandatory')
diskErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 6, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskErrorMsg.setStatus('mandatory')
loadaves = MibTable((1, 3, 6, 1, 4, 1, 2021, 7), ).setIndexNames((0, "UCD-SNMP-MIB-OLD", "loadaveIndex"))
if mibBuilder.loadTexts: loadaves.setStatus('mandatory')
loadaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadaveIndex.setStatus('mandatory')
loadaveNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadaveNames.setStatus('mandatory')
loadaveLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadaveLoad.setStatus('mandatory')
loadaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadaveConfig.setStatus('mandatory')
loadaveErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 7, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadaveErrorFlag.setStatus('mandatory')
loadaveErrMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 7, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadaveErrMessage.setStatus('mandatory')
mibBuilder.exportSymbols("UCD-SNMP-MIB-OLD", diskIndex=diskIndex, extensibleNames=extensibleNames, processCount=processCount, extensibleIndex=extensibleIndex, diskPercent=diskPercent, diskDevice=diskDevice, extensibleCommand=extensibleCommand, diskPath=diskPath, diskErrorMsg=diskErrorMsg, loadaveErrMessage=loadaveErrMessage, extensibleErrFix=extensibleErrFix, loadaves=loadaves, processMax=processMax, diskMinPercent=diskMinPercent, loadaveIndex=loadaveIndex, processIndex=processIndex, processErrorFlag=processErrorFlag, extensibleOutput=extensibleOutput, processMin=processMin, extensible=extensible, diskErrorFlag=diskErrorFlag, processes=processes, extensibleResult=extensibleResult, diskUsed=diskUsed, diskMinimum=diskMinimum, processErrMessage=processErrMessage, loadaveNames=loadaveNames, loadaveLoad=loadaveLoad, processNames=processNames, loadaveErrorFlag=loadaveErrorFlag, disk=disk, processErrFix=processErrFix, loadaveConfig=loadaveConfig, diskAvail=diskAvail, diskTotal=diskTotal)
