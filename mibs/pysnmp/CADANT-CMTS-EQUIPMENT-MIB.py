#
# PySNMP MIB module CADANT-CMTS-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:27:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
cadEquipment, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadEquipment")
DiskVolumeUsageLevel, PortMode, CerPortType, CardId, PrimaryState, CerCardType, FlowControlMode, AdminState, PortId, PortDetectedMode, FirmwareSource, EqActionType, CerPicType, PortType, SecondaryState, PicType, CerCardSubType, DuplexStatus = mibBuilder.importSymbols("CADANT-TC", "DiskVolumeUsageLevel", "PortMode", "CerPortType", "CardId", "PrimaryState", "CerCardType", "FlowControlMode", "AdminState", "PortId", "PortDetectedMode", "FirmwareSource", "EqActionType", "CerPicType", "PortType", "SecondaryState", "PicType", "CerCardSubType", "DuplexStatus")
TenthdBmV, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdBmV")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, Bits, Unsigned32, TimeTicks, ModuleIdentity, ObjectIdentity, Integer32, MibIdentifier, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "Bits", "Unsigned32", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibIdentifier", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso")
DateAndTime, DisplayString, TimeStamp, TextualConvention, TruthValue, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TimeStamp", "TextualConvention", "TruthValue", "MacAddress", "RowStatus")
cadEquipmentMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1))
cadEquipmentMib.setRevisions(('2015-10-06 00:00', '2015-08-26 00:00', '2015-08-12 00:00', '2015-07-21 00:00', '2015-07-12 00:00', '2015-07-07 00:00', '2015-06-03 00:00', '2015-06-01 00:00', '2014-12-01 00:00', '2014-10-14 00:00', '2014-08-01 00:00', '2014-03-16 00:00', '2013-05-16 00:00', '2013-04-12 00:00', '2013-02-19 00:00', '2013-01-08 00:00', '2013-01-07 00:00', '2012-09-07 00:00', '2012-07-10 00:00', '2012-07-03 00:00', '2012-05-21 00:00', '2012-05-08 00:00', '2012-05-03 00:00', '2012-05-02 00:00', '2012-04-25 00:00', '2012-04-11 00:00', '2012-03-22 00:00', '2012-01-05 00:00', '2011-09-13 00:00', '2011-08-05 00:00', '2011-07-19 00:00', '2011-07-18 00:00', '2011-07-08 00:00', '2011-06-28 00:00', '2011-06-14 00:00', '2011-03-18 00:00', '2011-03-17 00:00', '2011-01-27 00:00', '2009-07-10 00:00', '2009-03-03 00:00', '2009-01-05 00:00', '2008-10-14 00:00', '2008-10-01 00:00', '2008-07-03 00:00', '2008-06-18 00:00', '2008-04-28 00:00', '2008-04-02 00:00', '2008-02-25 00:00', '2007-11-05 00:00', '2007-01-10 00:00', '2006-11-13 00:00', '2006-09-12 00:00', '2006-08-23 00:00', '2006-02-14 00:00', '2005-08-30 00:00', '2005-04-06 00:00', '2005-02-04 00:00', '2005-01-24 00:00', '2004-12-01 00:00', '2004-11-18 00:00', '2004-11-11 00:00', '2004-09-07 00:00', '2004-07-23 00:00', '2004-03-22 00:00', '2004-03-18 00:00', '2004-02-04 00:00', '2003-12-18 00:00', '2003-03-31 00:00', '2003-03-17 00:00', '2003-03-05 00:00', '2003-03-02 00:00', '2003-01-29 00:00', '2002-12-14 00:00', '2002-11-07 00:00', '2002-09-25 00:00', '2002-09-01 00:00', '2002-05-01 00:00', '2001-12-28 16:30', '2001-12-21 16:30', '2001-10-03 00:00', '2001-07-17 00:00',))
if mibBuilder.loadTexts: cadEquipmentMib.setLastUpdated('201510060000Z')
if mibBuilder.loadTexts: cadEquipmentMib.setOrganization('ARRIS Group, Inc.')
class TestId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class TestType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("test", 1), ("diagnostic", 2), ("unknown", 3))

class TestCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noop", 1), ("stop", 2), ("disable", 3), ("enable", 4), ("runNow", 5))

class TestScheduleCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noop", 1), ("disable", 2), ("enable", 3))

class TestSchedule(TextualConvention, Integer32):
    status = 'current'

class TestResult(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notRun", 1), ("inProgress", 2), ("pass", 3), ("fail", 4), ("inconclusive", 5), ("timeOut", 6), ("abort", 7))

class TestTransactionId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class CerCamFaultTrapType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(12))
    namedValues = NamedValues(("fpgaFatalError", 12))

equipmentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0))
systemGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1))
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemClock.setStatus('current')
trapCounter = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCounter.setStatus('current')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("informational", 7))).clone('cleared')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
systemKey = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemKey.setStatus('current')
cardNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 98), CardId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cardNumber.setStatus('current')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 99), PortId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portNumber.setStatus('current')
diskDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskDriveNumber.setStatus('current')
diskVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskVolumeNumber.setStatus('current')
cerCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 200), CardId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCardNumber.setStatus('current')
cerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 201), PortId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerPortNumber.setStatus('current')
cerDiskDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerDiskDriveNumber.setStatus('current')
cerDiskVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 203), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerDiskVolumeNumber.setStatus('current')
shelfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2))
shelfName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 2), DisplayString().clone('Arris CER CMTS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfName.setStatus('current')
shelfSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSwVersion.setStatus('current')
equipmentState = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3))
cardLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastChangeTime.setStatus('current')
portLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastChangeTime.setStatus('current')
equipmentTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4))
cerCardTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12), )
if mibBuilder.loadTexts: cerCardTable.setStatus('current')
cerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerCardId"))
if mibBuilder.loadTexts: cerCardEntry.setStatus('current')
cerCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 2), CardId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCardId.setStatus('current')
cerCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardName.setStatus('current')
cerCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 4), CerCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardType.setStatus('current')
cerCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 5), CerCardSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardSubType.setStatus('current')
cerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 12), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardAdminState.setStatus('current')
cerCardPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 13), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardPrState.setStatus('current')
cerCardSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 14), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardSecState.setStatus('current')
cerCardDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 15), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDplxStatus.setStatus('current')
cerCardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 17), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardAction.setStatus('current')
cerCardTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 18), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("detected", 3), ("tempoutofrange", 4), ("tempnoreport", 5), ("tempoverheat", 6), ("overload", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardTrapInh.setStatus('current')
cerCardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardNumPorts.setStatus('current')
cerCardDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 20), CerCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDetected.setStatus('current')
cerCardSubDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 21), CerCardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardSubDetected.setStatus('current')
cerCardFwUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardFwUpdateStatus.setStatus('current')
cerCardSpareGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 24), CardId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardSpareGroupId.setStatus('current')
cerCardSpareGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardSpareGroupMode.setStatus('current')
cerCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardUpTime.setStatus('current')
cerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(999, 999), )).clone(999)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardTemperature.setStatus('current')
cerCardPicDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 40), CerPicType().clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardPicDetected.setStatus('current')
cerCardLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardLastResetReason.setStatus('current')
cerCardTemperatureHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 44), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardTemperatureHighWarn.setStatus('current')
cerCardTemperatureHighError = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 45), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardTemperatureHighError.setStatus('current')
cerCardAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardAnnex.setStatus('current')
cerCardNumRfConnectors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardNumRfConnectors.setStatus('current')
cerCardDataTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16), )
if mibBuilder.loadTexts: cerCardDataTable.setStatus('current')
cerCardDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1), )
cerCardEntry.registerAugmentions(("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataEntry"))
cerCardDataEntry.setIndexNames(*cerCardEntry.getIndexNames())
if mibBuilder.loadTexts: cerCardDataEntry.setStatus('current')
cerCardDataSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataSerialNum.setStatus('current')
cerCardDataFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFwVersion.setStatus('current')
cerCardDataHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataHwVersion.setStatus('current')
cerCardDataHwDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataHwDeviations.setStatus('current')
cerCardDataSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataSwVersion.setStatus('current')
cerCardDataCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataCpuType.setStatus('current')
cerCardDataCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 7), Unsigned32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataCpuSpeed.setStatus('current')
cerCardDataBusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 8), Unsigned32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataBusSpeed.setStatus('current')
cerCardDataRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 9), Unsigned32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataRamSize.setStatus('current')
cerCardDataNorFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 10), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataNorFlashSize.setStatus('current')
cerCardDataNandFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 11), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataNandFlashSize.setStatus('current')
cerCardDataFpgaSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 12), FirmwareSource().clone('committed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFpgaSource.setStatus('current')
cerCardDataBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataBootVersion.setStatus('current')
cerCardDataLastBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLastBootVersion.setStatus('current')
cerCardDataLastBootSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 15), FirmwareSource().clone('boot1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLastBootSource.setStatus('current')
cerCardDataPicSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicSerialNum.setStatus('current')
cerCardDataPicHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicHwVersion.setStatus('current')
cerCardDataPicHwDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicHwDeviations.setStatus('current')
cerCardDataPicModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicModelNum.setStatus('current')
cerCardDataMfgDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 20), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataMfgDateTime.setStatus('current')
cerCardDataMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataMfg.setStatus('current')
cerCardDataProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataProductName.setStatus('current')
cerCardDataPartModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPartModelNum.setStatus('current')
cerCardDataProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataProductVersion.setStatus('current')
cerCardDataAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataAssetTag.setStatus('current')
cerCardDataCommittedSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataCommittedSwVersion.setStatus('current')
cerCardDataFeedAPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 27), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFeedAPresent.setStatus('current')
cerCardDataFeedBPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 28), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFeedBPresent.setStatus('current')
cerCardDataAllowedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataAllowedPorts.setStatus('current')
cerCardDataLicenseAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicenseAnnex.setStatus('current')
cerCardDataLicensePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicensePorts.setStatus('current')
cerCardDataLicenseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 32), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicenseDate.setStatus('current')
cerCardDataPatchVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 33), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPatchVersions.setStatus('current')
cerCardDataPicModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 34), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicModelName.setStatus('current')
cerCardDataPicMfgRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicMfgRevision.setStatus('current')
cerCardDataPicMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicMfg.setStatus('current')
cerCardDataPicMfgDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 37), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicMfgDateTime.setStatus('current')
cerPortTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13), )
if mibBuilder.loadTexts: cerPortTable.setStatus('current')
cerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerPortId"))
if mibBuilder.loadTexts: cerPortEntry.setStatus('current')
cerPortCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 2), CardId())
if mibBuilder.loadTexts: cerPortCardId.setStatus('current')
cerPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 3), PortId())
if mibBuilder.loadTexts: cerPortId.setStatus('current')
cerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 4), CerPortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortType.setStatus('current')
cerPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortAdminState.setStatus('current')
cerPortPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 7), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortPrState.setStatus('current')
cerPortSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 8), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortSecState.setStatus('current')
cerPortDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 9), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortDplxStatus.setStatus('current')
cerPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 11), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortAction.setStatus('current')
cerPortTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 12), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("linkUpLinkDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortTrapInh.setStatus('current')
cerPortNumChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortNumChans.setStatus('current')
cerPortDocsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortDocsIfIndex.setStatus('current')
cerPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMacAddress.setStatus('current')
cerPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 16), PortMode().clone('autoNegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortMode.setStatus('current')
cerPortDetectedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 17), PortDetectedMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortDetectedMode.setStatus('current')
cerPortBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortBgpId.setStatus('current')
cerPortConnectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 20), PortId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortConnectorId.setStatus('current')
cerPortCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 21), CerCardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortCardSubType.setStatus('current')
cerPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortDescription.setStatus('current')
cerPortCurrDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 28), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortCurrDsPower.setStatus('current')
cerPortMinDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 29), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMinDsPower.setStatus('current')
cerPortMaxDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 30), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMaxDsPower.setStatus('current')
cerPortTxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 31), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortTxFlowControlMode.setStatus('current')
cerPortRxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 32), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortRxFlowControlMode.setStatus('current')
cerPortTxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 33), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortTxFlowControlDetected.setStatus('current')
cerPortRxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 34), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortRxFlowControlDetected.setStatus('current')
cerPortMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 35), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMacIfIndex.setStatus('current')
cerPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 36), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortGroupId.setStatus('current')
cerPortGroupPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 37), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortGroupPortId.setStatus('current')
cerDiskVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14), )
if mibBuilder.loadTexts: cerDiskVolumeTable.setStatus('current')
cerDiskVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeDriveId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeId"))
if mibBuilder.loadTexts: cerDiskVolumeEntry.setStatus('current')
cerDiskVolumeCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 2), CardId())
if mibBuilder.loadTexts: cerDiskVolumeCardId.setStatus('current')
cerDiskVolumeDriveId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: cerDiskVolumeDriveId.setStatus('current')
cerDiskVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: cerDiskVolumeId.setStatus('current')
cerDiskVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeName.setStatus('current')
cerDiskVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 6), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeSize.setStatus('current')
cerDiskVolumeUsageLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 7), DiskVolumeUsageLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeUsageLevel.setStatus('current')
cerDiskVolumeUsagePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeUsagePercentage.setStatus('current')
cerDiskVolumeUsageCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeUsageCriticalThreshold.setStatus('current')
cerDiskVolumeUsageMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeUsageMajorThreshold.setStatus('current')
cerDiskVolumeUsageMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeUsageMinorThreshold.setStatus('current')
cerDiskVolumeAutoDeleteUnusedFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeAutoDeleteUnusedFile.setStatus('current')
cerDiskVolumeTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 13), Bits().clone(namedValues=NamedValues(("criticalUsageLevel", 0), ("majorUsageLevel", 1), ("minorUsageLevel", 2), ("autoDeleteFiles", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeTrapInh.setStatus('current')
cerDiskVolumeDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 14), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeDiskSize.setStatus('current')
cerDiskVolumeFileName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerDiskVolumeFileName.setStatus('current')
cerFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17), )
if mibBuilder.loadTexts: cerFanStatusTable.setStatus('current')
cerFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerCardId"))
if mibBuilder.loadTexts: cerFanStatusEntry.setStatus('current')
cerFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFan1Speed.setStatus('current')
cerFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFan2Speed.setStatus('current')
cerFan3Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFan3Speed.setStatus('current')
cerFanLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFanLevel.setStatus('current')
cerFanAmbientTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 5), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFanAmbientTemperature.setStatus('current')
cerPemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18), )
if mibBuilder.loadTexts: cerPemStatusTable.setStatus('current')
cerPemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerCardId"))
if mibBuilder.loadTexts: cerPemStatusEntry.setStatus('current')
cerPemLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemLedStatus.setStatus('current')
cerPemFeed1Voltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 2), Integer32()).setUnits('decivolt').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed1Voltage.setStatus('current')
cerPemFeed1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 3), Integer32()).setUnits('deciiamp').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed1Current.setStatus('current')
cerPemFeed2Voltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 4), Integer32()).setUnits('decivolt').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed2Voltage.setStatus('current')
cerPemFeed2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 5), Integer32()).setUnits('deciamp').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed2Current.setStatus('current')
cerPemFeed1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed1Present.setStatus('current')
cerPemFeed2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed2Present.setStatus('current')
cerPemCircuitBreaker1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemCircuitBreaker1Enable.setStatus('current')
cerPemCircuitBreaker2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemCircuitBreaker2Enable.setStatus('current')
cerPemBranchPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 10), Bits().clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5), ("g", 6), ("h", 7), ("i", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemBranchPresent.setStatus('current')
equipmentDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5))
eqDiagConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1))
remainInDiagMode = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remainInDiagMode.setStatus('current')
consoleOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 2), TruthValue().clone('false'))
if mibBuilder.loadTexts: consoleOutput.setStatus('obsolete')
verboseLevel = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verboseLevel.setStatus('current')
diagTestId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 2), TestId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diagTestId.setStatus('current')
cardTestTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3), )
if mibBuilder.loadTexts: cardTestTable.setStatus('current')
cardTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestIndex"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestId"))
if mibBuilder.loadTexts: cardTestEntry.setStatus('current')
cardTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 2), CardId())
if mibBuilder.loadTexts: cardTestIndex.setStatus('current')
cardTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 3), TestId())
if mibBuilder.loadTexts: cardTestId.setStatus('current')
cardTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestName.setStatus('current')
cardTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 5), TestType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestType.setStatus('current')
cardTestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestDescription.setStatus('current')
cardTestCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 7), TestCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestCommand.setStatus('current')
cardTestScheduleCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 8), TestScheduleCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestScheduleCommand.setStatus('current')
cardTestSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 9), TestSchedule()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestSchedule.setStatus('current')
cardTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTime.setStatus('current')
cardTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 11), TestResult().clone('notRun')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResult.setStatus('current')
cardTestResultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResultDesc.setStatus('current')
cardTestTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 13), TestTransactionId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTransId.setStatus('current')
equipmentAudit = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6))
auditAutoScheduling = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditAutoScheduling.setStatus('current')
auditLogOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogOutput.setStatus('current')
auditLogThrottle = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogThrottle.setStatus('current')
auditTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4), )
if mibBuilder.loadTexts: auditTable.setStatus('current')
auditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "auditCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "auditId"))
if mibBuilder.loadTexts: auditEntry.setStatus('current')
auditCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 2), CardId())
if mibBuilder.loadTexts: auditCardId.setStatus('current')
auditId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: auditId.setStatus('current')
auditName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditName.setStatus('current')
auditDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditDescription.setStatus('current')
auditTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTime.setStatus('current')
auditCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("runnow", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditCommand.setStatus('current')
auditStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditStatus.setStatus('current')
auditResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("abort", 4), ("notRun", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditResult.setStatus('current')
auditPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPassedCount.setStatus('current')
auditFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditFailedCount.setStatus('current')
auditCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditCycleCount.setStatus('current')
auditTotalPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalPassedCount.setStatus('current')
auditTotalFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalFailedCount.setStatus('current')
cmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8))
cmMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmMacAddress.setStatus('current')
cmVendor = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmVendor.setStatus('current')
cmResetReason = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetReason.setStatus('current')
cmUChannelID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmUChannelID.setStatus('current')
cmPrimarySID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmPrimarySID.setStatus('current')
cmResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetStatus.setStatus('current')
cmResetUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 7), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetUpTime.setStatus('current')
cmResetInfo = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetInfo.setStatus('current')
cmIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 9), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmIpAddress.setStatus('current')
equipmentError = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9))
fpgaErrorEventTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1), )
if mibBuilder.loadTexts: fpgaErrorEventTable.setStatus('current')
fpgaErrorEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "errEvCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "errEventId"))
if mibBuilder.loadTexts: fpgaErrorEventEntry.setStatus('current')
errEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: errEventId.setStatus('current')
errEvRecoveryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRecoveryEnabled.setStatus('current')
errEvLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLoggingEnabled.setStatus('current')
errEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLogLevel.setStatus('current')
errEvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRowStatus.setStatus('current')
errEvCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 6), CardId())
if mibBuilder.loadTexts: errEvCardId.setStatus('current')
cerSpareModeExt = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11))
cerSpareModeExtTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1), )
if mibBuilder.loadTexts: cerSpareModeExtTable.setStatus('current')
cerSpareModeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerSpareModeCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerSpareModeFaultId"))
if mibBuilder.loadTexts: cerSpareModeExtEntry.setStatus('current')
cerSpareModeCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 1), CardId())
if mibBuilder.loadTexts: cerSpareModeCardId.setStatus('current')
cerSpareModeFaultId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("pingFault", 1), ("initTimeout", 2), ("ersmFault", 3), ("swException", 4), ("bcm3142Err", 5), ("dulFailure", 6), ("dataplaneFailure", 7), ("dsUnderPower", 8), ("dsOverPower", 9), ("sbecOverflow", 10), ("deviceFatal", 11), ("fpgaFatalError", 12), ("clockLost", 13), ("pwrSensorHighFault", 14), ("pwrSensorLowFault", 15), ("fpgaBufferPoolFault", 16), ("dataplaneLinkFault", 17), ("monitoredTaskFailure", 18))))
if mibBuilder.loadTexts: cerSpareModeFaultId.setStatus('current')
cerSpareModeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("manual", 1), ("auto", 2))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cerSpareModeMode.setStatus('current')
cerSpareModeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cerSpareModeRowStatus.setStatus('current')
cadEquipmentMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10))
cadEquipmentMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1))
cadEquipmentMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2))
licenseError = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 12))
cerLicenseTypeStr = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerLicenseTypeStr.setStatus('current')
cerCardPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 25)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardPrState"))
if mibBuilder.loadTexts: cerCardPrStateChange.setStatus('current')
cerCardSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 26)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSecState"))
if mibBuilder.loadTexts: cerCardSecStateChange.setStatus('current')
cerCardDetectedChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 27)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubDetected"))
if mibBuilder.loadTexts: cerCardDetectedChange.setStatus('current')
cerCardDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 28)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDplxStatus"))
if mibBuilder.loadTexts: cerCardDplxStatusChange.setStatus('current')
cerPortPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 29)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"))
if mibBuilder.loadTexts: cerPortPrStateChange.setStatus('current')
cerPortSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 30)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"))
if mibBuilder.loadTexts: cerPortSecStateChange.setStatus('current')
cerPortDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 31)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDplxStatus"))
if mibBuilder.loadTexts: cerPortDplxStatusChange.setStatus('current')
cardTestResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 33)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diagTestId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if mibBuilder.loadTexts: cardTestResultNotification.setStatus('current')
cmResetClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 15)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"))
if mibBuilder.loadTexts: cmResetClearNotification.setStatus('current')
cmResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 16)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetReason"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmPrimarySID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetInfo"))
if mibBuilder.loadTexts: cmResetNotification.setStatus('current')
cerDiskVolumeUsageNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 35)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeName"))
if mibBuilder.loadTexts: cerDiskVolumeUsageNotification.setStatus('current')
cerDiskVolumeAutoDeleteFileNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 36)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeFileName"))
if mibBuilder.loadTexts: cerDiskVolumeAutoDeleteFileNotification.setStatus('current')
cardTempOutOfRangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 19)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOutOfRangeNotification.setStatus('current')
cardTempNoReportNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 20)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempNoReportNotification.setStatus('current')
cardTempOverHeatNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 21)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOverHeatNotification.setStatus('current')
downstreamPowerLoss = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 22)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"))
if mibBuilder.loadTexts: downstreamPowerLoss.setStatus('current')
cmRegistrationNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 23)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmIpAddress"))
if mibBuilder.loadTexts: cmRegistrationNotification.setStatus('current')
noLicenseNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 24)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerLicenseTypeStr"))
if mibBuilder.loadTexts: noLicenseNotification.setStatus('current')
cerCamFaultInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40))
cerCamFaultId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 1), CerCamFaultTrapType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultId.setStatus('current')
cerCamFaultRecovery = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultRecovery.setStatus('current')
cerCamFaultAutoFailback = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 3), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultAutoFailback.setStatus('current')
cerCamFaultErrorStr = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultErrorStr.setStatus('current')
cerCamFaultNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 41)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultRecovery"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultAutoFailback"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultErrorStr"))
if mibBuilder.loadTexts: cerCamFaultNotification.setStatus('current')
systemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemGeneralGroup = systemGeneralGroup.setStatus('current')
equipmentStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 2)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardLastChangeTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "portLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentStateGroup = equipmentStateGroup.setStatus('current')
equipmentShelfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 3)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "shelfName"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfSwVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentShelfGroup = equipmentShelfGroup.setStatus('current')
equipmentCerCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 14)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cerCardName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumPorts"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardFwUpdateStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSpareGroupId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSpareGroupMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTemperature"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTemperatureHighWarn"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTemperatureHighError"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardAnnex"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumRfConnectors"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataHwDeviations"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataSwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataCpuType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataCpuSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataBusSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataRamSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataNorFlashSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataNandFlashSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFpgaSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataLastBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataLastBootSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicHwDeviations"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicModelNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataMfgDateTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataMfg"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataProductName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPartModelNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataProductVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataAssetTag"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataCommittedSwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFeedAPresent"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFeedBPresent"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataAllowedPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCerCardGroup = equipmentCerCardGroup.setStatus('current')
equipmentCerPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 15)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumChans"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDetectedMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortBgpId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortConnectorId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCurrDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMinDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMaxDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortTxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortRxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortTxFlowControlDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortRxFlowControlDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCerPortGroup = equipmentCerPortGroup.setStatus('current')
equipmentDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 6)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "remainInDiagMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "verboseLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentDiagGroup = equipmentDiagGroup.setStatus('current')
equipmentCardTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 8)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestScheduleCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestSchedule"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCardTestGroup = equipmentCardTestGroup.setStatus('current')
equipmentAuditGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 10)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "auditAutoScheduling"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogOutput"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogThrottle"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditName"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditFailedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCycleCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalFailedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentAuditGroup = equipmentAuditGroup.setStatus('current')
cerDiskVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 21)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsagePercentage"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageCriticalThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageMajorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageMinorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeAutoDeleteUnusedFile"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerDiskVolumeGroup = cerDiskVolumeGroup.setStatus('current')
fpgaErrorEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 12)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "errEvRecoveryEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLoggingEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLogLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fpgaErrorEventGroup = fpgaErrorEventGroup.setStatus('current')
cadEquipmentMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemGeneralGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentStateGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentShelfGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCerCardGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCerPortGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentDiagGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCardTestGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentAuditGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "fpgaErrorEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadEquipmentMibCompliance = cadEquipmentMibCompliance.setStatus('current')
mibBuilder.exportSymbols("CADANT-CMTS-EQUIPMENT-MIB", cerCardDataCpuSpeed=cerCardDataCpuSpeed, consoleOutput=consoleOutput, portNumber=portNumber, cadEquipmentMibCompliance=cadEquipmentMibCompliance, cerSpareModeExtTable=cerSpareModeExtTable, cerPortRxFlowControlDetected=cerPortRxFlowControlDetected, cadEquipmentMibGroup=cadEquipmentMibGroup, cerSpareModeMode=cerSpareModeMode, cardTestScheduleCommand=cardTestScheduleCommand, trapCounter=trapCounter, cerCardDplxStatus=cerCardDplxStatus, cardTestName=cardTestName, cerFan1Speed=cerFan1Speed, equipmentError=equipmentError, equipmentState=equipmentState, cardTestResult=cardTestResult, cerDiskVolumeFileName=cerDiskVolumeFileName, cerCardFwUpdateStatus=cerCardFwUpdateStatus, diagTestId=diagTestId, trapSeverity=trapSeverity, cerCardDataPicSerialNum=cerCardDataPicSerialNum, cerCardDataFwVersion=cerCardDataFwVersion, cerCardSecState=cerCardSecState, auditPassedCount=auditPassedCount, cardTestResultNotification=cardTestResultNotification, cerDiskVolumeAutoDeleteUnusedFile=cerDiskVolumeAutoDeleteUnusedFile, cerCardSubDetected=cerCardSubDetected, cerCardDataEntry=cerCardDataEntry, cerDiskVolumeUsagePercentage=cerDiskVolumeUsagePercentage, TestSchedule=TestSchedule, remainInDiagMode=remainInDiagMode, cardTestCommand=cardTestCommand, cerDiskVolumeUsageMinorThreshold=cerDiskVolumeUsageMinorThreshold, cardTestTable=cardTestTable, cardTestEntry=cardTestEntry, errEvLogLevel=errEvLogLevel, verboseLevel=verboseLevel, cerPortMaxDsPower=cerPortMaxDsPower, cerCardTable=cerCardTable, shelfObjects=shelfObjects, diskDriveNumber=diskDriveNumber, cerFan3Speed=cerFan3Speed, cerPortId=cerPortId, cerPortDocsIfIndex=cerPortDocsIfIndex, cerCardDataCpuType=cerCardDataCpuType, CerCamFaultTrapType=CerCamFaultTrapType, cerCardDataPicHwDeviations=cerCardDataPicHwDeviations, cerCardEntry=cerCardEntry, cerPemStatusTable=cerPemStatusTable, cerCamFaultId=cerCamFaultId, cerCardAnnex=cerCardAnnex, cadEquipmentMibCompliances=cadEquipmentMibCompliances, cerCardNumRfConnectors=cerCardNumRfConnectors, cerCardDetected=cerCardDetected, cerDiskVolumeNumber=cerDiskVolumeNumber, cmPrimarySID=cmPrimarySID, cmResetReason=cmResetReason, cerCardPrStateChange=cerCardPrStateChange, cerPortMacAddress=cerPortMacAddress, cerSpareModeRowStatus=cerSpareModeRowStatus, PYSNMP_MODULE_ID=cadEquipmentMib, cerCardDataBootVersion=cerCardDataBootVersion, cerPortGroupPortId=cerPortGroupPortId, cerPemFeed1Present=cerPemFeed1Present, cerCardType=cerCardType, cerCardDataPartModelNum=cerCardDataPartModelNum, cardTestIndex=cardTestIndex, cerCamFaultAutoFailback=cerCamFaultAutoFailback, cerCardDataAssetTag=cerCardDataAssetTag, cerCardDataSwVersion=cerCardDataSwVersion, cerPortTxFlowControlMode=cerPortTxFlowControlMode, fpgaErrorEventEntry=fpgaErrorEventEntry, cerDiskVolumeGroup=cerDiskVolumeGroup, cerCardPrState=cerCardPrState, cerPemFeed1Current=cerPemFeed1Current, cerDiskVolumeDiskSize=cerDiskVolumeDiskSize, cerPemFeed2Present=cerPemFeed2Present, cmRegistrationNotification=cmRegistrationNotification, cerPortCardId=cerPortCardId, cerCardTemperature=cerCardTemperature, cerPortCurrDsPower=cerPortCurrDsPower, cmMacAddress=cmMacAddress, equipmentDiagGroup=equipmentDiagGroup, cardNumber=cardNumber, auditLogThrottle=auditLogThrottle, cerPemFeed2Current=cerPemFeed2Current, auditCycleCount=auditCycleCount, cerCardDataHwDeviations=cerCardDataHwDeviations, auditCommand=auditCommand, cmResetNotification=cmResetNotification, TestCommand=TestCommand, cerDiskVolumeUsageCriticalThreshold=cerDiskVolumeUsageCriticalThreshold, cerPemCircuitBreaker1Enable=cerPemCircuitBreaker1Enable, cerSpareModeExt=cerSpareModeExt, portLastChangeTime=portLastChangeTime, cardTempOverHeatNotification=cardTempOverHeatNotification, cerCamFaultRecovery=cerCamFaultRecovery, auditDescription=auditDescription, cerPortNumber=cerPortNumber, cerCardDataPicModelName=cerCardDataPicModelName, cerDiskVolumeCardId=cerDiskVolumeCardId, auditAutoScheduling=auditAutoScheduling, shelfName=shelfName, cerPemCircuitBreaker2Enable=cerPemCircuitBreaker2Enable, cerPortTrapInh=cerPortTrapInh, cerDiskVolumeName=cerDiskVolumeName, cmResetInfo=cmResetInfo, cerDiskVolumeUsageLevel=cerDiskVolumeUsageLevel, errEvCardId=errEvCardId, cerLicenseTypeStr=cerLicenseTypeStr, cerPortBgpId=cerPortBgpId, cerPortRxFlowControlMode=cerPortRxFlowControlMode, TestTransactionId=TestTransactionId, cerFan2Speed=cerFan2Speed, errEvLoggingEnabled=errEvLoggingEnabled, equipmentCardTestGroup=equipmentCardTestGroup, cerCardDataPicMfg=cerCardDataPicMfg, cerDiskVolumeAutoDeleteFileNotification=cerDiskVolumeAutoDeleteFileNotification, cerCardId=cerCardId, cerPortMode=cerPortMode, cmDevice=cmDevice, cerPortEntry=cerPortEntry, errEvRowStatus=errEvRowStatus, fpgaErrorEventGroup=fpgaErrorEventGroup, cerPortType=cerPortType, cerCardDataNorFlashSize=cerCardDataNorFlashSize, downstreamPowerLoss=downstreamPowerLoss, cerCardDataNandFlashSize=cerCardDataNandFlashSize, auditLogOutput=auditLogOutput, cerCardAdminState=cerCardAdminState, cerPortSecStateChange=cerPortSecStateChange, cerCardName=cerCardName, systemGeneral=systemGeneral, cardTestId=cardTestId, cerPortDplxStatusChange=cerPortDplxStatusChange, cerFanStatusTable=cerFanStatusTable, cerCardDataLicenseDate=cerCardDataLicenseDate, cerDiskVolumeUsageNotification=cerDiskVolumeUsageNotification, cerPemFeed1Voltage=cerPemFeed1Voltage, cerCamFaultNotification=cerCamFaultNotification, cerCardDataFeedBPresent=cerCardDataFeedBPresent, equipmentTraps=equipmentTraps, cmIpAddress=cmIpAddress, TestType=TestType, cerPortAdminState=cerPortAdminState, cerPortDplxStatus=cerPortDplxStatus, cerCardDataLastBootSource=cerCardDataLastBootSource, cerCardSpareGroupId=cerCardSpareGroupId, auditEntry=auditEntry, cerCardSecStateChange=cerCardSecStateChange, auditResult=auditResult, cerPortMinDsPower=cerPortMinDsPower, cerPemBranchPresent=cerPemBranchPresent, cerSpareModeCardId=cerSpareModeCardId, systemKey=systemKey, cadEquipmentMib=cadEquipmentMib, cerCardTemperatureHighError=cerCardTemperatureHighError, cerCardDataAllowedPorts=cerCardDataAllowedPorts, cerPortCardSubType=cerPortCardSubType, cerDiskVolumeTrapInh=cerDiskVolumeTrapInh, cerCardDataPicModelNum=cerCardDataPicModelNum, errEventId=errEventId, cmResetUpTime=cmResetUpTime, cerCardDataMfg=cerCardDataMfg, cardTestTime=cardTestTime, cerCardTemperatureHighWarn=cerCardTemperatureHighWarn, cardTestResultDesc=cardTestResultDesc, cerFanStatusEntry=cerFanStatusEntry, cardTestSchedule=cardTestSchedule, cerCardDplxStatusChange=cerCardDplxStatusChange, auditTotalFailedCount=auditTotalFailedCount, systemGeneralGroup=systemGeneralGroup, cerCardDataHwVersion=cerCardDataHwVersion, cardTestTransId=cardTestTransId, cerCardLastResetReason=cerCardLastResetReason, cerCardDataTable=cerCardDataTable, cerPemStatusEntry=cerPemStatusEntry, cerPortPrStateChange=cerPortPrStateChange, cerCardDataLicensePorts=cerCardDataLicensePorts, cerCardDataLicenseAnnex=cerCardDataLicenseAnnex, cerPortMacIfIndex=cerPortMacIfIndex, cardLastChangeTime=cardLastChangeTime, cerCardDataCommittedSwVersion=cerCardDataCommittedSwVersion, equipmentAudit=equipmentAudit, cerCardSubType=cerCardSubType, cerCardDataRamSize=cerCardDataRamSize, TestScheduleCommand=TestScheduleCommand, diskVolumeNumber=diskVolumeNumber, cardTestDescription=cardTestDescription, cerCamFaultInfo=cerCamFaultInfo, cerCardDetectedChange=cerCardDetectedChange, auditId=auditId, cerCardDataPicMfgDateTime=cerCardDataPicMfgDateTime, cerDiskVolumeEntry=cerDiskVolumeEntry, cerDiskVolumeId=cerDiskVolumeId, equipmentAuditGroup=equipmentAuditGroup, cardTempNoReportNotification=cardTempNoReportNotification, auditName=auditName, cerCardSpareGroupMode=cerCardSpareGroupMode, auditTable=auditTable, cerPemFeed2Voltage=cerPemFeed2Voltage, cerPemLedStatus=cerPemLedStatus, cerSpareModeFaultId=cerSpareModeFaultId, cerCardDataProductName=cerCardDataProductName, cerPortSecState=cerPortSecState, cerCardTrapInh=cerCardTrapInh, cerCardDataPicHwVersion=cerCardDataPicHwVersion, auditFailedCount=auditFailedCount, equipmentCerPortGroup=equipmentCerPortGroup, cerCardPicDetected=cerCardPicDetected, cerCardDataPatchVersions=cerCardDataPatchVersions, cerCardDataSerialNum=cerCardDataSerialNum, cerCardDataFpgaSource=cerCardDataFpgaSource, TestResult=TestResult, cerPortNumChans=cerPortNumChans, cerPortGroupId=cerPortGroupId, auditCardId=auditCardId, cerCardNumPorts=cerCardNumPorts, cerCardNumber=cerCardNumber, cerDiskVolumeUsageMajorThreshold=cerDiskVolumeUsageMajorThreshold, cerCardUpTime=cerCardUpTime, cerPortDetectedMode=cerPortDetectedMode, systemClock=systemClock, cerCardDataPicMfgRevision=cerCardDataPicMfgRevision, cerCamFaultErrorStr=cerCamFaultErrorStr, cerPortTxFlowControlDetected=cerPortTxFlowControlDetected, cerDiskVolumeTable=cerDiskVolumeTable, cardTestType=cardTestType, cerCardDataFeedAPresent=cerCardDataFeedAPresent, auditTotalPassedCount=auditTotalPassedCount, cmResetStatus=cmResetStatus, noLicenseNotification=noLicenseNotification, auditTime=auditTime, cerCardDataProductVersion=cerCardDataProductVersion, cardTempOutOfRangeNotification=cardTempOutOfRangeNotification, cerSpareModeExtEntry=cerSpareModeExtEntry, cerPortPrState=cerPortPrState, equipmentDiag=equipmentDiag, auditStatus=auditStatus, cadEquipmentMibConformance=cadEquipmentMibConformance, equipmentCerCardGroup=equipmentCerCardGroup, cerPortTable=cerPortTable, eqDiagConfig=eqDiagConfig, cmResetClearNotification=cmResetClearNotification, equipmentStateGroup=equipmentStateGroup, cerFanLevel=cerFanLevel, TestId=TestId, cerDiskDriveNumber=cerDiskDriveNumber, licenseError=licenseError, cerCardDataLastBootVersion=cerCardDataLastBootVersion, cerPortConnectorId=cerPortConnectorId, cerCardDataBusSpeed=cerCardDataBusSpeed, cerPortDescription=cerPortDescription, cerDiskVolumeDriveId=cerDiskVolumeDriveId)
mibBuilder.exportSymbols("CADANT-CMTS-EQUIPMENT-MIB", equipmentTbl=equipmentTbl, cerCardAction=cerCardAction, cerDiskVolumeSize=cerDiskVolumeSize, shelfSwVersion=shelfSwVersion, cerFanAmbientTemperature=cerFanAmbientTemperature, fpgaErrorEventTable=fpgaErrorEventTable, cmVendor=cmVendor, errEvRecoveryEnabled=errEvRecoveryEnabled, equipmentShelfGroup=equipmentShelfGroup, cmUChannelID=cmUChannelID, cerPortAction=cerPortAction, cerCardDataMfgDateTime=cerCardDataMfgDateTime)
