#
# PySNMP MIB module DVB-MGTR101290-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DVB-MGTR101290-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:40:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, ObjectIdentity, MibIdentifier, ModuleIdentity, enterprises, NotificationType, iso, Counter32, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "enterprises", "NotificationType", "iso", "Counter32", "IpAddress", "Unsigned32")
RowStatus, TextualConvention, DateAndTime, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DateAndTime", "DisplayString", "TruthValue")
tr101290 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2696, 3, 2))
if mibBuilder.loadTexts: tr101290.setLastUpdated('200111071400Z')
if mibBuilder.loadTexts: tr101290.setOrganization('DVB')
class ActiveTime(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class Availability(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notAvailable", 1), ("testAvailable", 2), ("measurementAvailable", 3), ("measurementAndTestAvailable", 4))

class BERMeasurementMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("iqSeparate", 1), ("iqCombined", 2))

class BitRateElement(TextualConvention, Integer32):
    reference = 'TR 101 290 5.3.3.1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bit", 1), ("byte", 2), ("packet", 3), ("other", 4))

class DeliverySystemType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("cable", 2), ("satellite", 3), ("terrestrial", 4))

class Enable(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("testEnable", 0), ("failTrapEnable", 1), ("unknownTrapEnable", 2))

class FloatingPoint(TextualConvention, OctetString):
    status = 'current'
    displayHint = '63a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 63)

class GroupAvailability(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noSupport", 1), ("selectiveSupport", 2), ("completeSupport", 3))

class GuardInterval(TextualConvention, Integer32):
    reference = 'EN 300 744 section 4.1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("interval1d4", 1), ("interval1d8", 2), ("interval1d16", 3), ("interval1d32", 4))

class Hierarchy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nonHierarchical", 1), ("hierarchicalAlphaOne", 2), ("hierarchicalAphaTwo", 3), ("hierarchicalAlphaFour", 4))

class IndexConsistencyTest(TextualConvention, Integer32):
    reference = 'TR 101 290 section 5.3.4'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("tsIdCheck", 1))

class IndexMIPSyntaxTest(TextualConvention, Integer32):
    reference = 'TR 101 290 section 9.20'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("mipTimingError", 1), ("mipStructureError", 2), ("mipPresenceError", 3), ("mipPointerError", 4), ("mipPeriodicityError", 5), ("mipTsRateError", 6))

class IndexPCRMeasurement(TextualConvention, Integer32):
    reference = 'TR 101 290 section 5.3.2'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("pcrFO", 1), ("pcrDR", 2), ("pcrOJ", 3), ("pcrAC", 4))

class IndexServicePerformance(TextualConvention, Integer32):
    reference = 'TR 101 290 section 5.5'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("serviceAvailability", 1), ("serviceDegradation", 2), ("serviceImpairments", 3))

class IndexTransportStreamTest(TextualConvention, Integer32):
    reference = 'TR 101 290 section 5.2'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1010, 1020, 1031, 1040, 1051, 1060, 2010, 2020, 2031, 2032, 2040, 2050, 2060, 3011, 3012, 3020, 3030, 3041, 3051, 3052, 3061, 3062, 3063, 3070, 3080, 3090, 3100))
    namedValues = NamedValues(("tsSyncLoss", 1010), ("syncByteError", 1020), ("patError2", 1031), ("continuityCountError", 1040), ("pmtError2", 1051), ("pidError", 1060), ("transportError", 2010), ("crcError", 2020), ("pcrRepetitionError", 2031), ("pcrDiscontinuityError", 2032), ("pcrAccuracyError", 2040), ("ptsError", 2050), ("catError", 2060), ("nitActualError", 3011), ("nitOtherError", 3012), ("siRepetitionError", 3020), ("bufferError", 3030), ("unreferencedPID", 3041), ("sdtActualError", 3051), ("sdtOtherError", 3052), ("eitActualError", 3061), ("eitOtherError", 3062), ("eitPfError", 3063), ("rstError", 3070), ("tdtError", 3080), ("emptyBufferError", 3090), ("dataDelayError", 3100))

class InputNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class MeasurementState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 1), ("unknown", 2), ("normal", 3), ("abnormal", 4))

class Modulation(TextualConvention, Integer32):
    reference = 'TR 101 198 (BPSK) EN 300 421 (QPSK) EN 301 210 (8PSK, 16QAM) EN 300 429 (16QAM, 32QAM, 64QAM, 128QAM, 256QAM) EN 300 744 (QPSK, 16QAM, 64QAM, 16QAM/alpha=2, 64QAM/alpha=2, 16QAM/alpha=4, 64QAM/alpha=4) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bpsk", 1), ("qpsk", 2), ("psk8", 3), ("qam16", 4), ("qam32", 5), ("qam64", 6), ("qam128", 7), ("qam256", 8), ("qam16Alpha2", 9), ("qam64Alpha2", 10), ("qam16Alpha4", 11), ("qam64Alpha4", 12))

class PIDPlusOne(TextualConvention, Integer32):
    reference = 'ISO 13818-1 2.1.32'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8192)

class PollingInterval(TextualConvention, Integer32):
    status = 'current'

class RateStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2), ("enabledThrottled", 3))

class ServiceId(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class TerrestrialTransmissionMode(TextualConvention, Integer32):
    reference = 'EN 300 744 section 4.1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("mode2k", 1), ("mode8k", 2))

class TestState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 1), ("unknown", 2), ("pass", 3), ("fail", 4))

class TestSummary(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("tsTsSyncLoss", 0), ("tsSyncByteError", 1), ("tsPatError2", 2), ("tsContinuityCountError", 3), ("tsPmtError2", 4), ("tsPidError", 5), ("tsTransportError", 6), ("tsCrcError", 7), ("tsPcrRepetitionError", 8), ("tsPcrDiscontinuityError", 9), ("tsPcrAccuracyError", 10), ("tsPtsError", 11), ("tsCatError", 12), ("tsNitActualError", 13), ("tsNitOtherError", 14), ("tsSiRepetitionError", 15), ("tsBufferError", 16), ("tsUnreferencedPID", 17), ("tsSdtActualError", 18), ("tsSdtOtherError", 19), ("tsEitActualError", 20), ("tsEitOtherError", 21), ("tsEitPfError", 22), ("tsRstError", 23), ("tsTdtError", 24), ("tsEmptyBufferError", 25), ("tsDataDelayError", 26), ("pcrPcrFO", 27), ("pcrPcrDR", 28), ("pcrPcrOJ", 29), ("pcrPcrAC", 30), ("bitrateTransportStream", 31), ("bitrateService", 32), ("bitratePID", 33), ("tsTsConsistency", 34), ("performanceServiceAvailability", 35), ("performanceServiceDegradation", 36), ("performanceServiceImpairments", 37), ("csSysAvailability", 38), ("csLinkAvailability", 39), ("csBerRS", 40), ("csRFIFSignalPower", 41), ("csNoisePower", 42), ("csMer", 43), ("csSteMean", 44), ("csSteDeviation", 45), ("csCS", 46), ("csAI", 47), ("csQE", 48), ("csRTE", 49), ("csCI", 50), ("csPJ", 51), ("csSNR", 52), ("cNoiseMargin", 53), ("cEstNoiseMargin", 54), ("cSignQualMarT", 55), ("cEND", 56), ("cOutBandEmiss", 57), ("sBerViterbi", 58), ("sIfSpectrum", 59), ("tRFAccuracy", 60), ("tRFChannelWidth", 61), ("tSymbolLength", 62), ("tRFIFPower", 63), ("tRFIFSpectrum", 64), ("tEND", 65), ("tENF", 66), ("tENDLP", 67), ("tENFLP", 68), ("tLinearity", 69), ("tBerViterbi", 70), ("tBerViterbiLP", 71), ("tBerRS", 72), ("tBerRSLP", 73), ("tMER", 74), ("tSteMean", 75), ("tSteDeviation", 76), ("tCS", 77), ("tAI", 78), ("tQE", 79), ("tPJ", 80), ("tMipTimingError", 81), ("tMipStructureError", 82), ("tMipPresenceError", 83), ("tMipPointerError", 84), ("tMipPeriodicityError", 85), ("tMipTsRateError", 86), ("tSepEti", 87), ("tSepSeti", 88))

class TransportStreamID(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class UATMode(TextualConvention, Integer32):
    reference = 'TR 101 290 section 5.4.5'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nConsecutive", 1), ("rollingWindow", 2))

dvb = MibIdentifier((1, 3, 6, 1, 4, 1, 2696))
mg = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3))
tr101290Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1))
tr101290Control = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1))
controlNow = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlNow.setStatus('current')
controlEventPersistence = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 2), FloatingPoint().clone('2')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlEventPersistence.setStatus('current')
controlRFSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 3), )
if mibBuilder.loadTexts: controlRFSystemTable.setStatus('current')
controlRFSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "rfSystemInputNumber"))
if mibBuilder.loadTexts: controlRFSystemEntry.setStatus('current')
rfSystemInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfSystemInputNumber.setStatus('current')
rfSystemDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 3, 1, 2), DeliverySystemType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfSystemDelivery.setStatus('current')
controlSynchronizationTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 4), )
if mibBuilder.loadTexts: controlSynchronizationTable.setStatus('current')
controlSynchronizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 4, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "controlSynchronizationInputNumber"))
if mibBuilder.loadTexts: controlSynchronizationEntry.setStatus('current')
controlSynchronizationInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 4, 1, 1), InputNumber())
if mibBuilder.loadTexts: controlSynchronizationInputNumber.setStatus('current')
controlSynchronizedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 1, 4, 1, 2), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSynchronizedTime.setStatus('current')
tr101290Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2))
trapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 0))
testFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 0, 1)).setObjects(("DVB-MGTR101290-MIB", "trapControlOID"), ("DVB-MGTR101290-MIB", "trapControlGenerationTime"), ("DVB-MGTR101290-MIB", "trapControlFailureSummary"), ("DVB-MGTR101290-MIB", "trapInput"))
if mibBuilder.loadTexts: testFailTrap.setStatus('current')
measurementFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 0, 2)).setObjects(("DVB-MGTR101290-MIB", "trapControlOID"), ("DVB-MGTR101290-MIB", "trapControlGenerationTime"), ("DVB-MGTR101290-MIB", "trapControlMeasurementValue"), ("DVB-MGTR101290-MIB", "trapControlFailureSummary"), ("DVB-MGTR101290-MIB", "trapInput"))
if mibBuilder.loadTexts: measurementFailTrap.setStatus('current')
measurementUnknownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 0, 3)).setObjects(("DVB-MGTR101290-MIB", "trapControlOID"), ("DVB-MGTR101290-MIB", "trapControlGenerationTime"), ("DVB-MGTR101290-MIB", "trapControlFailureSummary"), ("DVB-MGTR101290-MIB", "trapInput"))
if mibBuilder.loadTexts: measurementUnknownTrap.setStatus('current')
trapControlTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1), )
if mibBuilder.loadTexts: trapControlTable.setStatus('current')
trapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "trapControlInputNumber"))
if mibBuilder.loadTexts: trapControlEntry.setStatus('current')
trapControlInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: trapControlInputNumber.setStatus('current')
trapControlOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapControlOID.setStatus('current')
trapControlGenerationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapControlGenerationTime.setStatus('current')
trapControlMeasurementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1, 4), FloatingPoint()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapControlMeasurementValue.setStatus('current')
trapControlRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1, 5), RateStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapControlRateStatus.setStatus('current')
trapControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapControlPeriod.setStatus('current')
trapControlFailureSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 1, 1, 7), TestSummary()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapControlFailureSummary.setStatus('current')
trapInput = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 2, 2), InputNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapInput.setStatus('current')
tr101290Capability = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3))
capabilityMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityMIBRevision.setStatus('current')
capabilityTS = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 5))
capabilityTSGroup = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 5, 1), GroupAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityTSGroup.setStatus('current')
capabilityTSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 5, 2), )
if mibBuilder.loadTexts: capabilityTSTable.setStatus('current')
capabilityTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 5, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "capabilityTSOID"))
if mibBuilder.loadTexts: capabilityTSEntry.setStatus('current')
capabilityTSOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 5, 2, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: capabilityTSOID.setStatus('current')
capabilityTSAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 5, 2, 1, 2), Availability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityTSAvailability.setStatus('current')
capabilityTSPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 5, 2, 1, 3), PollingInterval()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityTSPollInterval.setStatus('current')
capabilityCableSat = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 6))
capabilityCableSatGroup = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 6, 1), GroupAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityCableSatGroup.setStatus('current')
capabilityCableSatTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 6, 2), )
if mibBuilder.loadTexts: capabilityCableSatTable.setStatus('current')
capabilityCableSatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 6, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "capabilityCableSatOID"))
if mibBuilder.loadTexts: capabilityCableSatEntry.setStatus('current')
capabilityCableSatOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 6, 2, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: capabilityCableSatOID.setStatus('current')
capabilityCableSatAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 6, 2, 1, 2), Availability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityCableSatAvailability.setStatus('current')
capabilityCableSatPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 6, 2, 1, 3), PollingInterval()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityCableSatPollInterval.setStatus('current')
capabilityCable = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 7))
capabilityCableGroup = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 7, 1), GroupAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityCableGroup.setStatus('current')
capabilityCableTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 7, 2), )
if mibBuilder.loadTexts: capabilityCableTable.setStatus('current')
capabilityCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 7, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "capabilityCableOID"))
if mibBuilder.loadTexts: capabilityCableEntry.setStatus('current')
capabilityCableOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 7, 2, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: capabilityCableOID.setStatus('current')
capabilityCableAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 7, 2, 1, 2), Availability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityCableAvailability.setStatus('current')
capabilityCablePollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 7, 2, 1, 3), PollingInterval()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityCablePollInterval.setStatus('current')
capabilitySatellite = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 8))
capabilitySatelliteGroup = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 8, 1), GroupAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilitySatelliteGroup.setStatus('current')
capabilitySatelliteTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 8, 2), )
if mibBuilder.loadTexts: capabilitySatelliteTable.setStatus('current')
capabilitySatelliteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 8, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "capabilitySatelliteOID"))
if mibBuilder.loadTexts: capabilitySatelliteEntry.setStatus('current')
capabilitySatelliteOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 8, 2, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: capabilitySatelliteOID.setStatus('current')
capabilitySatelliteAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 8, 2, 1, 2), Availability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilitySatelliteAvailability.setStatus('current')
capabilitySatellitePollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 8, 2, 1, 3), PollingInterval()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilitySatellitePollInterval.setStatus('current')
capabilityTerrestrial = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 9))
capabilityTerrestrialGroup = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 9, 1), GroupAvailability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityTerrestrialGroup.setStatus('current')
capabilityTerrestrialTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 9, 2), )
if mibBuilder.loadTexts: capabilityTerrestrialTable.setStatus('current')
capabilityTerrestrialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 9, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "capabilityTerrestrialOID"))
if mibBuilder.loadTexts: capabilityTerrestrialEntry.setStatus('current')
capabilityTerrestrialOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 9, 2, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: capabilityTerrestrialOID.setStatus('current')
capabilityTerrestrialAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 9, 2, 1, 2), Availability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityTerrestrialAvailability.setStatus('current')
capabilityTerrestrialPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 3, 9, 2, 1, 3), PollingInterval()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: capabilityTerrestrialPollInterval.setStatus('current')
tr101290TS = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5))
tsTests = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2))
tsTestsSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2), )
if mibBuilder.loadTexts: tsTestsSummaryTable.setStatus('current')
tsTestsSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsTestsSummaryTestNumber"), (0, "DVB-MGTR101290-MIB", "tsTestsSummaryInputNumber"))
if mibBuilder.loadTexts: tsTestsSummaryEntry.setStatus('current')
tsTestsSummaryInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsTestsSummaryInputNumber.setStatus('current')
tsTestsSummaryTestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 2), IndexTransportStreamTest())
if mibBuilder.loadTexts: tsTestsSummaryTestNumber.setStatus('current')
tsTestsSummaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 3), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsSummaryState.setStatus('current')
tsTestsSummaryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 4), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsSummaryEnable.setStatus('current')
tsTestsSummaryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsSummaryCounter.setStatus('current')
tsTestsSummaryCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsSummaryCounterDiscontinuity.setStatus('current')
tsTestsSummaryCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsSummaryCounterReset.setStatus('current')
tsTestsSummaryLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsSummaryLatestError.setStatus('current')
tsTestsSummaryActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 2, 1, 9), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsSummaryActiveTime.setStatus('current')
tsTestsPIDTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: tsTestsPIDTable.setStatus('current')
tsTestsPIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsTestsPIDPID"), (0, "DVB-MGTR101290-MIB", "tsTestsPIDTestNumber"), (0, "DVB-MGTR101290-MIB", "tsTestsPIDInputNumber"))
if mibBuilder.loadTexts: tsTestsPIDEntry.setStatus('current')
tsTestsPIDInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsTestsPIDInputNumber.setStatus('current')
tsTestsPIDPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 2), PIDPlusOne())
if mibBuilder.loadTexts: tsTestsPIDPID.setStatus('current')
tsTestsPIDTestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 3), IndexTransportStreamTest())
if mibBuilder.loadTexts: tsTestsPIDTestNumber.setStatus('current')
tsTestsPIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 4), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsTestsPIDRowStatus.setStatus('current')
tsTestsPIDState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 5), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsPIDState.setStatus('current')
tsTestsPIDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 6), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsTestsPIDEnable.setStatus('current')
tsTestsPIDCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsPIDCounter.setStatus('current')
tsTestsPIDCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsPIDCounterDiscontinuity.setStatus('current')
tsTestsPIDCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsTestsPIDCounterReset.setStatus('current')
tsTestsPIDLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsPIDLatestError.setStatus('current')
tsTestsPIDActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 3, 1, 11), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTestsPIDActiveTime.setStatus('current')
tsTestsPreferences = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100))
tsTestsPreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1), )
if mibBuilder.loadTexts: tsTestsPreferencesTable.setStatus('current')
tsTestsPreferencesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsTestsPrefInputNumber"))
if mibBuilder.loadTexts: tsTestsPreferencesEntry.setStatus('current')
tsTestsPrefInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsTestsPrefInputNumber.setStatus('current')
tsTestsPrefTransitionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 2), FloatingPoint().clone('0.5')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefTransitionDuration.setStatus('current')
tsTestsPrefPATSectionIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 3), FloatingPoint().clone('0.5')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefPATSectionIntervalMax.setStatus('current')
tsTestsPrefPMTSectionIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 4), FloatingPoint().clone('0.5')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefPMTSectionIntervalMax.setStatus('current')
tsTestsPrefReferredIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 5), FloatingPoint().clone('5')).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefReferredIntervalMax.setStatus('current')
tsTestsPrefPCRIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 6), FloatingPoint().clone('0.04')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefPCRIntervalMax.setStatus('current')
tsTestsPrefPCRDiscontinuityMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 7), FloatingPoint().clone('0.1')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefPCRDiscontinuityMax.setStatus('current')
tsTestsPrefPCRInaccuracyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 8), FloatingPoint().clone('500E-9')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefPCRInaccuracyMax.setStatus('current')
tsTestsPrefPTSIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 9), FloatingPoint().clone('0.7')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefPTSIntervalMax.setStatus('current')
tsTestsPrefNITActualIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 10), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefNITActualIntervalMax.setStatus('current')
tsTestsPrefNITActualIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 11), FloatingPoint().clone('0.025')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefNITActualIntervalMin.setStatus('current')
tsTestsPrefNITOtherIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 12), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefNITOtherIntervalMax.setStatus('current')
tsTestsPrefSIGapMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 13), FloatingPoint().clone('0.025')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefSIGapMin.setStatus('current')
tsTestsPrefNITTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 14), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefNITTableIntervalMax.setStatus('current')
tsTestsPrefBATTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 15), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefBATTableIntervalMax.setStatus('current')
tsTestsPrefSDTActualTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 16), FloatingPoint().clone('2')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefSDTActualTableIntervalMax.setStatus('current')
tsTestsPrefSDTOtherTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 17), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefSDTOtherTableIntervalMax.setStatus('current')
tsTestsPrefEITPFActualTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 18), FloatingPoint().clone('2')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITPFActualTableIntervalMax.setStatus('current')
tsTestsPrefEITPFOtherTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 19), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITPFOtherTableIntervalMax.setStatus('current')
tsTestsPrefEITSActualNearTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 20), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITSActualNearTableIntervalMax.setStatus('current')
tsTestsPrefEITSActualFarTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 21), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITSActualFarTableIntervalMax.setStatus('current')
tsTestsPrefEITSOtherNearTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 22), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITSOtherNearTableIntervalMax.setStatus('current')
tsTestsPrefEITSOtherFarTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 23), FloatingPoint().clone('30')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITSOtherFarTableIntervalMax.setStatus('current')
tsTestsPrefTxTTableIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 24), FloatingPoint().clone('30')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefTxTTableIntervalMax.setStatus('current')
tsTestsPrefSDTActualIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 25), FloatingPoint().clone('2')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefSDTActualIntervalMax.setStatus('current')
tsTestsPrefSDTActualIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 26), FloatingPoint().clone('0.025')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefSDTActualIntervalMin.setStatus('current')
tsTestsPrefSDTOtherIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 27), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefSDTOtherIntervalMax.setStatus('current')
tsTestsPrefEITActualIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 28), FloatingPoint().clone('2')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITActualIntervalMax.setStatus('current')
tsTestsPrefEITActualIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 29), FloatingPoint().clone('0.025')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITActualIntervalMin.setStatus('current')
tsTestsPrefEITOtherIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 30), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefEITOtherIntervalMax.setStatus('current')
tsTestsPrefRSTIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 31), FloatingPoint().clone('0.025')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefRSTIntervalMin.setStatus('current')
tsTestsPrefTDTIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 32), FloatingPoint().clone('10')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefTDTIntervalMax.setStatus('current')
tsTestsPrefTDTIntervalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 1, 1, 33), FloatingPoint().clone('0.025')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefTDTIntervalMin.setStatus('current')
tsTestsPreferencesPIDTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 2), )
if mibBuilder.loadTexts: tsTestsPreferencesPIDTable.setStatus('current')
tsTestsPreferencesPIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsTestsPrefPIDInputNumber"), (0, "DVB-MGTR101290-MIB", "tsTestsPrefPIDPID"))
if mibBuilder.loadTexts: tsTestsPreferencesPIDEntry.setStatus('current')
tsTestsPrefPIDInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsTestsPrefPIDInputNumber.setStatus('current')
tsTestsPrefPIDPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 2, 1, 2), PIDPlusOne())
if mibBuilder.loadTexts: tsTestsPrefPIDPID.setStatus('current')
tsTestsPrefPIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsTestsPrefPIDRowStatus.setStatus('current')
tsTestsPrefPIDReferredIntervalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 2, 100, 2, 1, 4), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTestsPrefPIDReferredIntervalMax.setStatus('current')
tsMeasurements = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4))
tsPcrMeasurementTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1), )
if mibBuilder.loadTexts: tsPcrMeasurementTable.setStatus('current')
tsPcrMeasurementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsPcrMeasurementPID"), (0, "DVB-MGTR101290-MIB", "tsPcrMeasurementNumber"), (0, "DVB-MGTR101290-MIB", "tsPcrMeasurementInputNumber"))
if mibBuilder.loadTexts: tsPcrMeasurementEntry.setStatus('current')
tsPcrMeasurementInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsPcrMeasurementInputNumber.setStatus('current')
tsPcrMeasurementPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 2), PIDPlusOne())
if mibBuilder.loadTexts: tsPcrMeasurementPID.setStatus('current')
tsPcrMeasurementNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 3), IndexPCRMeasurement())
if mibBuilder.loadTexts: tsPcrMeasurementNumber.setStatus('current')
tsPcrMeasurementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 4), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsPcrMeasurementRowStatus.setStatus('current')
tsPcrMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 5), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPcrMeasurementState.setStatus('current')
tsPcrMeasurementEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 6), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsPcrMeasurementEnable.setStatus('current')
tsPcrMeasurementCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPcrMeasurementCounter.setStatus('current')
tsPcrMeasurementCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPcrMeasurementCounterDiscontinuity.setStatus('current')
tsPcrMeasurementCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsPcrMeasurementCounterReset.setStatus('current')
tsPcrMeasurementLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPcrMeasurementLatestError.setStatus('current')
tsPcrMeasurementActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 11), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPcrMeasurementActiveTime.setStatus('current')
tsPcrMeasurementMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 12), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPcrMeasurementMeasurementState.setStatus('current')
tsPcrMeasurementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 1, 1, 13), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPcrMeasurementValue.setStatus('current')
bitRate = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2))
tsTransportStreamBitRateTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1), )
if mibBuilder.loadTexts: tsTransportStreamBitRateTable.setStatus('current')
tsTransportStreamBitRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsTransportStreamBitRateInputNumber"))
if mibBuilder.loadTexts: tsTransportStreamBitRateEntry.setStatus('current')
tsTransportStreamBitRateInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsTransportStreamBitRateInputNumber.setStatus('current')
tsTransportStreamBitRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateState.setStatus('current')
tsTransportStreamBitRateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 3), Enable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTransportStreamBitRateEnable.setStatus('current')
tsTransportStreamBitRateCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateCounter.setStatus('current')
tsTransportStreamBitRateCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateCounterDiscontinuity.setStatus('current')
tsTransportStreamBitRateCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTransportStreamBitRateCounterReset.setStatus('current')
tsTransportStreamBitRateLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateLatestError.setStatus('current')
tsTransportStreamBitRateActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateActiveTime.setStatus('current')
tsTransportStreamBitRateMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateMeasurementState.setStatus('current')
tsTransportStreamBitRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 10), FloatingPoint()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateValue.setStatus('current')
tsTransportStreamBitRateNomenclature = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsTransportStreamBitRateNomenclature.setStatus('current')
tsServiceBitRateTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2), )
if mibBuilder.loadTexts: tsServiceBitRateTable.setStatus('current')
tsServiceBitRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsServiceBitRateService"), (0, "DVB-MGTR101290-MIB", "tsServiceBitRateInputNumber"))
if mibBuilder.loadTexts: tsServiceBitRateEntry.setStatus('current')
tsServiceBitRateInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsServiceBitRateInputNumber.setStatus('current')
tsServiceBitRateService = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 2), ServiceId())
if mibBuilder.loadTexts: tsServiceBitRateService.setStatus('current')
tsServiceBitRateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsServiceBitRateRowStatus.setStatus('current')
tsServiceBitRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 4), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateState.setStatus('current')
tsServiceBitRateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 5), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsServiceBitRateEnable.setStatus('current')
tsServiceBitRateCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateCounter.setStatus('current')
tsServiceBitRateCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateCounterDiscontinuity.setStatus('current')
tsServiceBitRateCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsServiceBitRateCounterReset.setStatus('current')
tsServiceBitRateLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateLatestError.setStatus('current')
tsServiceBitRateActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 10), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateActiveTime.setStatus('current')
tsServiceBitRateMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 11), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateMeasurementState.setStatus('current')
tsServiceBitRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 12), FloatingPoint()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateValue.setStatus('current')
tsServiceBitRateNomenclature = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServiceBitRateNomenclature.setStatus('current')
tsPIDBitRateTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3), )
if mibBuilder.loadTexts: tsPIDBitRateTable.setStatus('current')
tsPIDBitRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsPIDBitRateInputNumber"), (0, "DVB-MGTR101290-MIB", "tsPIDBitRatePID"))
if mibBuilder.loadTexts: tsPIDBitRateEntry.setStatus('current')
tsPIDBitRateInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsPIDBitRateInputNumber.setStatus('current')
tsPIDBitRatePID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 2), PIDPlusOne())
if mibBuilder.loadTexts: tsPIDBitRatePID.setStatus('current')
tsPIDBitRateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsPIDBitRateRowStatus.setStatus('current')
tsPIDBitRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 4), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateState.setStatus('current')
tsPIDBitRateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 5), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsPIDBitRateEnable.setStatus('current')
tsPIDBitRateCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateCounter.setStatus('current')
tsPIDBitRateCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateCounterDiscontinuity.setStatus('current')
tsPIDBitRateCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsPIDBitRateCounterReset.setStatus('current')
tsPIDBitRateLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateLatestError.setStatus('current')
tsPIDBitRateActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 10), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateActiveTime.setStatus('current')
tsPIDBitRateMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 11), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateMeasurementState.setStatus('current')
tsPIDBitRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 12), FloatingPoint()).setUnits('bit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateValue.setStatus('current')
tsPIDBitRateNomenclature = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 2, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPIDBitRateNomenclature.setStatus('current')
tsConsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3), )
if mibBuilder.loadTexts: tsConsistencyTable.setStatus('current')
tsConsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsConsistencyInputNumber"), (0, "DVB-MGTR101290-MIB", "tsConsistencyTestNumber"))
if mibBuilder.loadTexts: tsConsistencyEntry.setStatus('current')
tsConsistencyInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsConsistencyInputNumber.setStatus('current')
tsConsistencyTestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 2), IndexConsistencyTest())
if mibBuilder.loadTexts: tsConsistencyTestNumber.setStatus('current')
tsConsistencyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 3), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsConsistencyState.setStatus('current')
tsConsistencyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 4), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsConsistencyEnable.setStatus('current')
tsConsistencyCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsConsistencyCounter.setStatus('current')
tsConsistencyCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsConsistencyCounterDiscontinuity.setStatus('current')
tsConsistencyCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsConsistencyCounterReset.setStatus('current')
tsConsistencyLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsConsistencyLatestError.setStatus('current')
tsConsistencyActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 3, 1, 9), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsConsistencyActiveTime.setStatus('current')
tsMeasurePreferences = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100))
tsMeasurePreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1), )
if mibBuilder.loadTexts: tsMeasurePreferencesTable.setStatus('current')
tsMeasurePreferencesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsMeasurePrefInputNumber"))
if mibBuilder.loadTexts: tsMeasurePreferencesEntry.setStatus('current')
tsMeasurePrefInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsMeasurePrefInputNumber.setStatus('current')
tsMeasurePrefPCRDemarcationFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 2), FloatingPoint().clone('0.01')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefPCRDemarcationFrequency.setStatus('current')
tsMeasurePrefPCRFOMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 3), FloatingPoint().clone('810')).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefPCRFOMax.setStatus('current')
tsMeasurePrefPCRDRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 4), FloatingPoint().clone('0.075')).setUnits('Hz/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefPCRDRMax.setStatus('current')
tsMeasurePrefPCROJMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 5), FloatingPoint().clone('25E-06')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefPCROJMax.setStatus('current')
tsMeasurePrefTSBitRateTau = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 6), FloatingPoint().clone('0.1')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefTSBitRateTau.setStatus('current')
tsMeasurePrefTSBitRateN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 7), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefTSBitRateN.setStatus('current')
tsMeasurePrefTSBitRateElement = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 8), BitRateElement().clone('packet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefTSBitRateElement.setStatus('current')
tsMeasurePrefTSBitRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 9), FloatingPoint()).setUnits('bit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefTSBitRateMin.setStatus('current')
tsMeasurePrefTSBitRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 10), FloatingPoint()).setUnits('bit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefTSBitRateMax.setStatus('current')
tsMeasurePrefAllServiceBitRateTau = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 11), FloatingPoint().clone('0.1')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefAllServiceBitRateTau.setStatus('current')
tsMeasurePrefAllServiceBitRateN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 12), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefAllServiceBitRateN.setStatus('current')
tsMeasurePrefAllServiceBitRateElement = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 13), BitRateElement().clone('packet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefAllServiceBitRateElement.setStatus('current')
tsMeasurePrefAllPIDBitRateTau = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 14), FloatingPoint().clone('0.1')).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefAllPIDBitRateTau.setStatus('current')
tsMeasurePrefAllPIDBitRateN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 15), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefAllPIDBitRateN.setStatus('current')
tsMeasurePrefAllPIDBitRateElement = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 16), BitRateElement().clone('packet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefAllPIDBitRateElement.setStatus('current')
tsMeasurePrefExpectedTSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 1, 1, 17), TransportStreamID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMeasurePrefExpectedTSID.setStatus('current')
tsMeasurePreferencesServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2), )
if mibBuilder.loadTexts: tsMeasurePreferencesServiceTable.setStatus('current')
tsMeasurePreferencesServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsMeasurePrefServiceInputNumber"), (0, "DVB-MGTR101290-MIB", "tsMeasurePrefServiceService"))
if mibBuilder.loadTexts: tsMeasurePreferencesServiceEntry.setStatus('current')
tsMeasurePrefServiceInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsMeasurePrefServiceInputNumber.setStatus('current')
tsMeasurePrefServiceService = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 2), ServiceId())
if mibBuilder.loadTexts: tsMeasurePrefServiceService.setStatus('current')
tsMeasurePrefServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefServiceRowStatus.setStatus('current')
tsMeasurePrefServiceBitRateTau = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 4), FloatingPoint().clone('0.1')).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefServiceBitRateTau.setStatus('current')
tsMeasurePrefServiceBitRateN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 5), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefServiceBitRateN.setStatus('current')
tsMeasurePrefServiceBitRateElement = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 6), BitRateElement().clone('packet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefServiceBitRateElement.setStatus('current')
tsMeasurePrefServiceBitRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 7), FloatingPoint()).setUnits('bit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefServiceBitRateMin.setStatus('current')
tsMeasurePrefServiceBitRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 2, 1, 8), FloatingPoint()).setUnits('bit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefServiceBitRateMax.setStatus('current')
tsMeasurePreferencesPIDTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3), )
if mibBuilder.loadTexts: tsMeasurePreferencesPIDTable.setStatus('current')
tsMeasurePreferencesPIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsMeasurePrefPIDInputNumber"), (0, "DVB-MGTR101290-MIB", "tsMeasurePrefPIDPID"))
if mibBuilder.loadTexts: tsMeasurePreferencesPIDEntry.setStatus('current')
tsMeasurePrefPIDInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsMeasurePrefPIDInputNumber.setStatus('current')
tsMeasurePrefPIDPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 2), PIDPlusOne())
if mibBuilder.loadTexts: tsMeasurePrefPIDPID.setStatus('current')
tsMeasurePrefPIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefPIDRowStatus.setStatus('current')
tsMeasurePrefPIDBitRateTau = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 4), FloatingPoint().clone('0.1')).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefPIDBitRateTau.setStatus('current')
tsMeasurePrefPIDBitRateN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 5), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefPIDBitRateN.setStatus('current')
tsMeasurePrefPIDBitRateElement = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 6), BitRateElement().clone('packet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefPIDBitRateElement.setStatus('current')
tsMeasurePrefPIDBitRateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 7), FloatingPoint()).setUnits('bit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefPIDBitRateMin.setStatus('current')
tsMeasurePrefPIDBitRateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 4, 100, 3, 1, 8), FloatingPoint()).setUnits('bit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tsMeasurePrefPIDBitRateMax.setStatus('current')
tsServicePerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5))
tsServicePerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2), )
if mibBuilder.loadTexts: tsServicePerformanceTable.setStatus('current')
tsServicePerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsServicePerformanceNumber"), (0, "DVB-MGTR101290-MIB", "tsServicePerformanceInputNumber"))
if mibBuilder.loadTexts: tsServicePerformanceEntry.setStatus('current')
tsServicePerformanceInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsServicePerformanceInputNumber.setStatus('current')
tsServicePerformanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 2), IndexServicePerformance())
if mibBuilder.loadTexts: tsServicePerformanceNumber.setStatus('current')
tsServicePerformanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 3), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceState.setStatus('current')
tsServicePerformanceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 4), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsServicePerformanceEnable.setStatus('current')
tsServicePerformanceCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceCounter.setStatus('current')
tsServicePerformanceCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceCounterDiscontinuity.setStatus('current')
tsServicePerformanceCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsServicePerformanceCounterReset.setStatus('current')
tsServicePerformanceLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceLatestError.setStatus('current')
tsServicePerformanceActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 9), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceActiveTime.setStatus('current')
tsServicePerformanceMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 10), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceMeasurementState.setStatus('current')
tsServicePerformanceError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceError.setStatus('current')
tsServicePerformanceErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 2, 1, 12), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsServicePerformanceErrorRatio.setStatus('current')
tsServicePerformancePreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 100), )
if mibBuilder.loadTexts: tsServicePerformancePreferencesTable.setStatus('current')
tsServicePerformancePreferencesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 100, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "tsSPPrefInputNumber"), (0, "DVB-MGTR101290-MIB", "tsSPPrefNumber"))
if mibBuilder.loadTexts: tsServicePerformancePreferencesEntry.setStatus('current')
tsSPPrefInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 100, 1, 1), InputNumber())
if mibBuilder.loadTexts: tsSPPrefInputNumber.setStatus('current')
tsSPPrefNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 100, 1, 2), IndexServicePerformance())
if mibBuilder.loadTexts: tsSPPrefNumber.setStatus('current')
tsSPPrefDeltaT = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 100, 1, 3), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsSPPrefDeltaT.setStatus('current')
tsSPPrefEvaluationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 100, 1, 4), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsSPPrefEvaluationTime.setStatus('current')
tsSPPrefThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 5, 5, 100, 1, 5), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsSPPrefThreshold.setStatus('current')
tr101290CableSat = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6))
sysAvailabilityTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1), )
if mibBuilder.loadTexts: sysAvailabilityTable.setStatus('current')
sysAvailabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "sysAvailabilityInputNumber"))
if mibBuilder.loadTexts: sysAvailabilityEntry.setStatus('current')
sysAvailabilityInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: sysAvailabilityInputNumber.setStatus('current')
sysAvailabilityTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityTestState.setStatus('current')
sysAvailabilityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAvailabilityEnable.setStatus('current')
sysAvailabilityCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityCounter.setStatus('current')
sysAvailabilityCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityCounterDiscontinuity.setStatus('current')
sysAvailabilityCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAvailabilityCounterReset.setStatus('current')
sysAvailabilityLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityLatestError.setStatus('current')
sysAvailabilityActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityActiveTime.setStatus('current')
sysAvailabilityMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityMeasurementState.setStatus('current')
sysAvailabilityUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 10), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityUnavailableTime.setStatus('current')
sysAvailabilityRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 11), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityRatio.setStatus('current')
sysAvailabilityInSETI = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailabilityInSETI.setStatus('current')
linkAvailabilityTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2), )
if mibBuilder.loadTexts: linkAvailabilityTable.setStatus('current')
linkAvailabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "linkAvailabilityInputNumber"))
if mibBuilder.loadTexts: linkAvailabilityEntry.setStatus('current')
linkAvailabilityInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: linkAvailabilityInputNumber.setStatus('current')
linkAvailabilityTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityTestState.setStatus('current')
linkAvailabilityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkAvailabilityEnable.setStatus('current')
linkAvailabilityCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityCounter.setStatus('current')
linkAvailabilityCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityCounterDiscontinuity.setStatus('current')
linkAvailabilityCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkAvailabilityCounterReset.setStatus('current')
linkAvailabilityLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityLatestError.setStatus('current')
linkAvailabilityActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityActiveTime.setStatus('current')
linkAvailabilityMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityMeasurementState.setStatus('current')
linkAvailabilityUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 10), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityUnavailableTime.setStatus('current')
linkAvailabilityRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 11), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityRatio.setStatus('current')
linkAvailabilityInSUTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailabilityInSUTI.setStatus('current')
berRSinServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3), )
if mibBuilder.loadTexts: berRSinServiceTable.setStatus('current')
berRSinServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "berRSinServiceInputNumber"))
if mibBuilder.loadTexts: berRSinServiceEntry.setStatus('current')
berRSinServiceInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: berRSinServiceInputNumber.setStatus('current')
berRSinServiceTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSinServiceTestState.setStatus('current')
berRSinServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berRSinServiceEnable.setStatus('current')
berRSinServiceCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSinServiceCounter.setStatus('current')
berRSinServiceCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSinServiceCounterDiscontinuity.setStatus('current')
berRSinServiceCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berRSinServiceCounterReset.setStatus('current')
berRSinServiceLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSinServiceLatestError.setStatus('current')
berRSinServiceActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSinServiceActiveTime.setStatus('current')
berRSinServiceMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSinServiceMeasurementState.setStatus('current')
berRSinServiceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 3, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSinServiceValue.setStatus('current')
rfIFsignalPowerTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6), )
if mibBuilder.loadTexts: rfIFsignalPowerTable.setStatus('current')
rfIFsignalPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "rfIFsignalPowerInputNumber"))
if mibBuilder.loadTexts: rfIFsignalPowerEntry.setStatus('current')
rfIFsignalPowerInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfIFsignalPowerInputNumber.setStatus('current')
rfIFsignalPowerTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIFsignalPowerTestState.setStatus('current')
rfIFsignalPowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfIFsignalPowerEnable.setStatus('current')
rfIFsignalPowerCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIFsignalPowerCounter.setStatus('current')
rfIFsignalPowerCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIFsignalPowerCounterDiscontinuity.setStatus('current')
rfIFsignalPowerCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfIFsignalPowerCounterReset.setStatus('current')
rfIFsignalPowerLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIFsignalPowerLatestError.setStatus('current')
rfIFsignalPowerActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIFsignalPowerActiveTime.setStatus('current')
rfIFsignalPowerMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIFsignalPowerMeasurementState.setStatus('current')
rfIFsignalPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 6, 1, 10), FloatingPoint()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIFsignalPowerValue.setStatus('current')
noisePowerTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7), )
if mibBuilder.loadTexts: noisePowerTable.setStatus('current')
noisePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "noisePowerInputNumber"))
if mibBuilder.loadTexts: noisePowerEntry.setStatus('current')
noisePowerInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 1), InputNumber())
if mibBuilder.loadTexts: noisePowerInputNumber.setStatus('current')
noisePowerTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noisePowerTestState.setStatus('current')
noisePowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noisePowerEnable.setStatus('current')
noisePowerCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noisePowerCounter.setStatus('current')
noisePowerCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noisePowerCounterDiscontinuity.setStatus('current')
noisePowerCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noisePowerCounterReset.setStatus('current')
noisePowerLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noisePowerLatestError.setStatus('current')
noisePowerActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: noisePowerActiveTime.setStatus('current')
noisePowerMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noisePowerMeasurementState.setStatus('current')
noisePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 7, 1, 10), FloatingPoint()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: noisePowerValue.setStatus('current')
iqAnalysisCS = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9))
merCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2), )
if mibBuilder.loadTexts: merCSTable.setStatus('current')
merCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "merCSInputNumber"))
if mibBuilder.loadTexts: merCSEntry.setStatus('current')
merCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: merCSInputNumber.setStatus('current')
merCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merCSTestState.setStatus('current')
merCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: merCSEnable.setStatus('current')
merCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merCSCounter.setStatus('current')
merCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merCSCounterDiscontinuity.setStatus('current')
merCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: merCSCounterReset.setStatus('current')
merCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merCSLatestError.setStatus('current')
merCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: merCSActiveTime.setStatus('current')
merCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merCSMeasurementState.setStatus('current')
merCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 2, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: merCSValue.setStatus('current')
steCS = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3))
steMeanCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1), )
if mibBuilder.loadTexts: steMeanCSTable.setStatus('current')
steMeanCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "steMeanCSInputNumber"))
if mibBuilder.loadTexts: steMeanCSEntry.setStatus('current')
steMeanCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: steMeanCSInputNumber.setStatus('current')
steMeanCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanCSTestState.setStatus('current')
steMeanCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steMeanCSEnable.setStatus('current')
steMeanCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanCSCounter.setStatus('current')
steMeanCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanCSCounterDiscontinuity.setStatus('current')
steMeanCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steMeanCSCounterReset.setStatus('current')
steMeanCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanCSLatestError.setStatus('current')
steMeanCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanCSActiveTime.setStatus('current')
steMeanCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanCSMeasurementState.setStatus('current')
steMeanCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 1, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanCSValue.setStatus('current')
steDeviationCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2), )
if mibBuilder.loadTexts: steDeviationCSTable.setStatus('current')
steDeviationCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "steDeviationCSInputNumber"))
if mibBuilder.loadTexts: steDeviationCSEntry.setStatus('current')
steDeviationCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: steDeviationCSInputNumber.setStatus('current')
steDeviationCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationCSTestState.setStatus('current')
steDeviationCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steDeviationCSEnable.setStatus('current')
steDeviationCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationCSCounter.setStatus('current')
steDeviationCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationCSCounterDiscontinuity.setStatus('current')
steDeviationCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steDeviationCSCounterReset.setStatus('current')
steDeviationCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationCSLatestError.setStatus('current')
steDeviationCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationCSActiveTime.setStatus('current')
steDeviationCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationCSMeasurementState.setStatus('current')
steDeviationCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 3, 2, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationCSValue.setStatus('current')
csCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4), )
if mibBuilder.loadTexts: csCSTable.setStatus('current')
csCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "csCSInputNumber"))
if mibBuilder.loadTexts: csCSEntry.setStatus('current')
csCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 1), InputNumber())
if mibBuilder.loadTexts: csCSInputNumber.setStatus('current')
csCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csCSTestState.setStatus('current')
csCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csCSEnable.setStatus('current')
csCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csCSCounter.setStatus('current')
csCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csCSCounterDiscontinuity.setStatus('current')
csCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csCSCounterReset.setStatus('current')
csCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csCSLatestError.setStatus('current')
csCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: csCSActiveTime.setStatus('current')
csCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csCSMeasurementState.setStatus('current')
csCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 4, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: csCSValue.setStatus('current')
aiCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5), )
if mibBuilder.loadTexts: aiCSTable.setStatus('current')
aiCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "aiCSInputNumber"))
if mibBuilder.loadTexts: aiCSEntry.setStatus('current')
aiCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 1), InputNumber())
if mibBuilder.loadTexts: aiCSInputNumber.setStatus('current')
aiCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCSTestState.setStatus('current')
aiCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCSEnable.setStatus('current')
aiCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCSCounter.setStatus('current')
aiCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCSCounterDiscontinuity.setStatus('current')
aiCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCSCounterReset.setStatus('current')
aiCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCSLatestError.setStatus('current')
aiCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCSActiveTime.setStatus('current')
aiCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCSMeasurementState.setStatus('current')
aiCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 5, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCSValue.setStatus('current')
qeCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6), )
if mibBuilder.loadTexts: qeCSTable.setStatus('current')
qeCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "qeCSInputNumber"))
if mibBuilder.loadTexts: qeCSEntry.setStatus('current')
qeCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 1), InputNumber())
if mibBuilder.loadTexts: qeCSInputNumber.setStatus('current')
qeCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeCSTestState.setStatus('current')
qeCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeCSEnable.setStatus('current')
qeCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeCSCounter.setStatus('current')
qeCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeCSCounterDiscontinuity.setStatus('current')
qeCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeCSCounterReset.setStatus('current')
qeCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeCSLatestError.setStatus('current')
qeCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: qeCSActiveTime.setStatus('current')
qeCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeCSMeasurementState.setStatus('current')
qeCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 6, 1, 10), FloatingPoint()).setUnits('degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: qeCSValue.setStatus('current')
rteCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7), )
if mibBuilder.loadTexts: rteCSTable.setStatus('current')
rteCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "rteCSInputNumber"))
if mibBuilder.loadTexts: rteCSEntry.setStatus('current')
rteCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 1), InputNumber())
if mibBuilder.loadTexts: rteCSInputNumber.setStatus('current')
rteCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rteCSTestState.setStatus('current')
rteCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rteCSEnable.setStatus('current')
rteCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rteCSCounter.setStatus('current')
rteCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rteCSCounterDiscontinuity.setStatus('current')
rteCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rteCSCounterReset.setStatus('current')
rteCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rteCSLatestError.setStatus('current')
rteCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rteCSActiveTime.setStatus('current')
rteCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rteCSMeasurementState.setStatus('current')
rteCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 7, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rteCSValue.setStatus('current')
ciCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8), )
if mibBuilder.loadTexts: ciCSTable.setStatus('current')
ciCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "ciCSInputNumber"))
if mibBuilder.loadTexts: ciCSEntry.setStatus('current')
ciCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 1), InputNumber())
if mibBuilder.loadTexts: ciCSInputNumber.setStatus('current')
ciCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciCSTestState.setStatus('current')
ciCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciCSEnable.setStatus('current')
ciCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciCSCounter.setStatus('current')
ciCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciCSCounterDiscontinuity.setStatus('current')
ciCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciCSCounterReset.setStatus('current')
ciCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciCSLatestError.setStatus('current')
ciCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciCSActiveTime.setStatus('current')
ciCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciCSMeasurementState.setStatus('current')
ciCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 8, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciCSValue.setStatus('current')
pjCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9), )
if mibBuilder.loadTexts: pjCSTable.setStatus('current')
pjCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "pjCSInputNumber"))
if mibBuilder.loadTexts: pjCSEntry.setStatus('current')
pjCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 1), InputNumber())
if mibBuilder.loadTexts: pjCSInputNumber.setStatus('current')
pjCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjCSTestState.setStatus('current')
pjCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pjCSEnable.setStatus('current')
pjCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjCSCounter.setStatus('current')
pjCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjCSCounterDiscontinuity.setStatus('current')
pjCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pjCSCounterReset.setStatus('current')
pjCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjCSLatestError.setStatus('current')
pjCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pjCSActiveTime.setStatus('current')
pjCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjCSMeasurementState.setStatus('current')
pjCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 9, 1, 10), FloatingPoint()).setUnits('degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: pjCSValue.setStatus('current')
snrCSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10), )
if mibBuilder.loadTexts: snrCSTable.setStatus('current')
snrCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "snrCSInputNumber"))
if mibBuilder.loadTexts: snrCSEntry.setStatus('current')
snrCSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 1), InputNumber())
if mibBuilder.loadTexts: snrCSInputNumber.setStatus('current')
snrCSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snrCSTestState.setStatus('current')
snrCSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrCSEnable.setStatus('current')
snrCSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snrCSCounter.setStatus('current')
snrCSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snrCSCounterDiscontinuity.setStatus('current')
snrCSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrCSCounterReset.setStatus('current')
snrCSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snrCSLatestError.setStatus('current')
snrCSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: snrCSActiveTime.setStatus('current')
snrCSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snrCSMeasurementState.setStatus('current')
snrCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 9, 10, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: snrCSValue.setStatus('current')
cableSatPreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100), )
if mibBuilder.loadTexts: cableSatPreferencesTable.setStatus('current')
cableSatPreferencesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "cableSatPrefInputNumber"))
if mibBuilder.loadTexts: cableSatPreferencesEntry.setStatus('current')
cableSatPrefInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 1), InputNumber())
if mibBuilder.loadTexts: cableSatPrefInputNumber.setStatus('current')
cableSatPrefCentreFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 2), FloatingPoint()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefCentreFrequency.setStatus('current')
cableSatPrefModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 3), Modulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefModulation.setStatus('current')
cableSatPrefSysAvailUATMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 4), UATMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSysAvailUATMode.setStatus('current')
cableSatPrefSysAvailN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSysAvailN.setStatus('current')
cableSatPrefSysAvailT = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 6), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSysAvailT.setStatus('current')
cableSatPrefSysAvailM = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSysAvailM.setStatus('current')
cableSatPrefSysAvailTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 8), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSysAvailTI.setStatus('current')
cableSatPrefSysAvailEBPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 9), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSysAvailEBPerCent.setStatus('current')
cableSatPrefSysAvailTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 10), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSysAvailTotalTime.setStatus('current')
cableSatPrefLinkAvailUATMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 11), UATMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefLinkAvailUATMode.setStatus('current')
cableSatPrefLinkAvailN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefLinkAvailN.setStatus('current')
cableSatPrefLinkAvailT = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 13), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefLinkAvailT.setStatus('current')
cableSatPrefLinkAvailM = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefLinkAvailM.setStatus('current')
cableSatPrefLinkAvailTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 15), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefLinkAvailTI.setStatus('current')
cableSatPrefLinkAvailUPPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 16), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefLinkAvailUPPerCent.setStatus('current')
cableSatPrefLinkAvailTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 17), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefLinkAvailTotalTime.setStatus('current')
cableSatPrefBERMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 18), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefBERMax.setStatus('current')
cableSatPrefSignalPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 19), FloatingPoint()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSignalPowerMin.setStatus('current')
cableSatPrefSignalPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 20), FloatingPoint()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSignalPowerMax.setStatus('current')
cableSatPrefNoisePowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 21), FloatingPoint()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefNoisePowerMax.setStatus('current')
cableSatPrefMerCSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 22), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefMerCSMin.setStatus('current')
cableSatPrefSteMeanCSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 23), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSteMeanCSMax.setStatus('current')
cableSatPrefSteDeviationCSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 24), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSteDeviationCSMax.setStatus('current')
cableSatPrefCsCSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 25), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefCsCSMin.setStatus('current')
cableSatPrefAiCSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 26), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefAiCSMax.setStatus('current')
cableSatPrefQeCSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 27), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefQeCSMax.setStatus('current')
cableSatPrefRteCSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 28), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefRteCSMax.setStatus('current')
cableSatPrefCiCSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 29), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefCiCSMin.setStatus('current')
cableSatPrefPjCSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 30), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefPjCSMax.setStatus('current')
cableSatPrefSnrCSMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 6, 100, 1, 31), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableSatPrefSnrCSMin.setStatus('current')
tr101290Cable = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7))
noiseMarginTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1), )
if mibBuilder.loadTexts: noiseMarginTable.setStatus('current')
noiseMarginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "noiseMarginInputNumber"))
if mibBuilder.loadTexts: noiseMarginEntry.setStatus('current')
noiseMarginInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: noiseMarginInputNumber.setStatus('current')
noiseMarginTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseMarginTestState.setStatus('current')
noiseMarginEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noiseMarginEnable.setStatus('current')
noiseMarginCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseMarginCounter.setStatus('current')
noiseMarginCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseMarginCounterDiscontinuity.setStatus('current')
noiseMarginCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noiseMarginCounterReset.setStatus('current')
noiseMarginLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseMarginLatestError.setStatus('current')
noiseMarginActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseMarginActiveTime.setStatus('current')
noiseMarginMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseMarginMeasurementState.setStatus('current')
noiseMarginValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 1, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: noiseMarginValue.setStatus('current')
estNoiseMarginTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2), )
if mibBuilder.loadTexts: estNoiseMarginTable.setStatus('current')
estNoiseMarginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "estNoiseMarginInputNumber"))
if mibBuilder.loadTexts: estNoiseMarginEntry.setStatus('current')
estNoiseMarginInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: estNoiseMarginInputNumber.setStatus('current')
estNoiseMarginTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: estNoiseMarginTestState.setStatus('current')
estNoiseMarginEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: estNoiseMarginEnable.setStatus('current')
estNoiseMarginCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: estNoiseMarginCounter.setStatus('current')
estNoiseMarginCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: estNoiseMarginCounterDiscontinuity.setStatus('current')
estNoiseMarginCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: estNoiseMarginCounterReset.setStatus('current')
estNoiseMarginLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: estNoiseMarginLatestError.setStatus('current')
estNoiseMarginActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: estNoiseMarginActiveTime.setStatus('current')
estNoiseMarginMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: estNoiseMarginMeasurementState.setStatus('current')
estNoiseMarginValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 2, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: estNoiseMarginValue.setStatus('current')
signQualMarTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3), )
if mibBuilder.loadTexts: signQualMarTTable.setStatus('current')
signQualMarTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "signQualMarTInputNumber"))
if mibBuilder.loadTexts: signQualMarTEntry.setStatus('current')
signQualMarTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: signQualMarTInputNumber.setStatus('current')
signQualMarTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signQualMarTTestState.setStatus('current')
signQualMarTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signQualMarTEnable.setStatus('current')
signQualMarTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signQualMarTCounter.setStatus('current')
signQualMarTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signQualMarTCounterDiscontinuity.setStatus('current')
signQualMarTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signQualMarTCounterReset.setStatus('current')
signQualMarTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signQualMarTLatestError.setStatus('current')
signQualMarTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 3, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: signQualMarTActiveTime.setStatus('current')
eNDCTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4), )
if mibBuilder.loadTexts: eNDCTable.setStatus('current')
eNDCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "eNDCInputNumber"))
if mibBuilder.loadTexts: eNDCEntry.setStatus('current')
eNDCInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 1), InputNumber())
if mibBuilder.loadTexts: eNDCInputNumber.setStatus('current')
eNDCTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDCTestState.setStatus('current')
eNDCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNDCEnable.setStatus('current')
eNDCCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDCCounter.setStatus('current')
eNDCCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDCCounterDiscontinuity.setStatus('current')
eNDCCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNDCCounterReset.setStatus('current')
eNDCLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDCLatestError.setStatus('current')
eNDCActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDCActiveTime.setStatus('current')
eNDCMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDCMeasurementState.setStatus('current')
eNDCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 4, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDCValue.setStatus('current')
outBandEmissTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5), )
if mibBuilder.loadTexts: outBandEmissTable.setStatus('current')
outBandEmissEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "outBandEmissInputNumber"))
if mibBuilder.loadTexts: outBandEmissEntry.setStatus('current')
outBandEmissInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 1), InputNumber())
if mibBuilder.loadTexts: outBandEmissInputNumber.setStatus('current')
outBandEmissTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBandEmissTestState.setStatus('current')
outBandEmissEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outBandEmissEnable.setStatus('current')
outBandEmissCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBandEmissCounter.setStatus('current')
outBandEmissCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBandEmissCounterDiscontinuity.setStatus('current')
outBandEmissCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outBandEmissCounterReset.setStatus('current')
outBandEmissLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBandEmissLatestError.setStatus('current')
outBandEmissActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 5, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: outBandEmissActiveTime.setStatus('current')
cablePreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100), )
if mibBuilder.loadTexts: cablePreferencesTable.setStatus('current')
cablePreferencesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "cablePrefInputNumber"))
if mibBuilder.loadTexts: cablePreferencesEntry.setStatus('current')
cablePrefInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 1), InputNumber())
if mibBuilder.loadTexts: cablePrefInputNumber.setStatus('current')
cablePrefNoiseMarginMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 2), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefNoiseMarginMin.setStatus('current')
cablePrefEstNoiseMarginMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 3), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefEstNoiseMarginMin.setStatus('current')
cablePrefSignQualBoxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 4), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefSignQualBoxSize.setStatus('current')
cablePrefSignQualPercentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefSignQualPercentMax.setStatus('current')
cablePrefENDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 6), FloatingPoint().clone('1E-04')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefENDBER.setStatus('current')
cablePrefENDCtoNSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefENDCtoNSpecified.setStatus('current')
cablePrefENDIdeal = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 8), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefENDIdeal.setStatus('current')
cablePrefENDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 7, 100, 1, 9), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cablePrefENDMax.setStatus('current')
tr101290Satellite = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8))
berViterbiSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1), )
if mibBuilder.loadTexts: berViterbiSTable.setStatus('current')
berViterbiSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "berViterbiSInputNumber"))
if mibBuilder.loadTexts: berViterbiSEntry.setStatus('current')
berViterbiSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: berViterbiSInputNumber.setStatus('current')
berViterbiSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSTestState.setStatus('current')
berViterbiSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berViterbiSEnable.setStatus('current')
berViterbiSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSCounter.setStatus('current')
berViterbiSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSCounterDiscontinuity.setStatus('current')
berViterbiSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berViterbiSCounterReset.setStatus('current')
berViterbiSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSLatestError.setStatus('current')
berViterbiSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSActiveTime.setStatus('current')
berViterbiSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSMeasurementState.setStatus('current')
berViterbiSIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSIValue.setStatus('current')
berViterbiSQValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 11), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSQValue.setStatus('current')
berViterbiSMeasurementMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 1, 1, 12), BERMeasurementMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiSMeasurementMethod.setStatus('current')
ifSpectrumTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2), )
if mibBuilder.loadTexts: ifSpectrumTable.setStatus('current')
ifSpectrumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "ifSpectrumInputNumber"))
if mibBuilder.loadTexts: ifSpectrumEntry.setStatus('current')
ifSpectrumInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: ifSpectrumInputNumber.setStatus('current')
ifSpectrumTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpectrumTestState.setStatus('current')
ifSpectrumEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifSpectrumEnable.setStatus('current')
ifSpectrumCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpectrumCounter.setStatus('current')
ifSpectrumCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpectrumCounterDiscontinuity.setStatus('current')
ifSpectrumCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifSpectrumCounterReset.setStatus('current')
ifSpectrumLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpectrumLatestError.setStatus('current')
ifSpectrumActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpectrumActiveTime.setStatus('current')
satellitePreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 100), )
if mibBuilder.loadTexts: satellitePreferencesTable.setStatus('current')
satellitePreferencesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 100, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "satellitePrefInputNumber"))
if mibBuilder.loadTexts: satellitePreferencesEntry.setStatus('current')
satellitePrefInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 100, 1, 1), InputNumber())
if mibBuilder.loadTexts: satellitePrefInputNumber.setStatus('current')
satellitePrefBERMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 8, 100, 1, 2), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satellitePrefBERMax.setStatus('current')
tr101290Terrestrial = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9))
rfTerr = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1))
rfAccuracyTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: rfAccuracyTable.setStatus('current')
rfAccuracyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "rfAccuracyInputNumber"))
if mibBuilder.loadTexts: rfAccuracyEntry.setStatus('current')
rfAccuracyInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfAccuracyInputNumber.setStatus('current')
rfAccuracyTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAccuracyTestState.setStatus('current')
rfAccuracyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfAccuracyEnable.setStatus('current')
rfAccuracyCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAccuracyCounter.setStatus('current')
rfAccuracyCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAccuracyCounterDiscontinuity.setStatus('current')
rfAccuracyCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfAccuracyCounterReset.setStatus('current')
rfAccuracyLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAccuracyLatestError.setStatus('current')
rfAccuracyActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAccuracyActiveTime.setStatus('current')
rfAccuracyMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAccuracyMeasurementState.setStatus('current')
rfAccuracyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 1, 1, 10), FloatingPoint()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAccuracyValue.setStatus('current')
rfChannelWidthTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2), )
if mibBuilder.loadTexts: rfChannelWidthTable.setStatus('current')
rfChannelWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "rfChannelWidthInputNumber"))
if mibBuilder.loadTexts: rfChannelWidthEntry.setStatus('current')
rfChannelWidthInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfChannelWidthInputNumber.setStatus('current')
rfChannelWidthTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfChannelWidthTestState.setStatus('current')
rfChannelWidthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfChannelWidthEnable.setStatus('current')
rfChannelWidthCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfChannelWidthCounter.setStatus('current')
rfChannelWidthCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfChannelWidthCounterDiscontinuity.setStatus('current')
rfChannelWidthCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfChannelWidthCounterReset.setStatus('current')
rfChannelWidthLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfChannelWidthLatestError.setStatus('current')
rfChannelWidthActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfChannelWidthActiveTime.setStatus('current')
rfChannelWidthMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfChannelWidthMeasurementState.setStatus('current')
rfChannelWidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 2, 1, 10), FloatingPoint()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfChannelWidthValue.setStatus('current')
symbolLengthTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3), )
if mibBuilder.loadTexts: symbolLengthTable.setStatus('current')
symbolLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "symbolLengthInputNumber"))
if mibBuilder.loadTexts: symbolLengthEntry.setStatus('current')
symbolLengthInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: symbolLengthInputNumber.setStatus('current')
symbolLengthTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolLengthTestState.setStatus('current')
symbolLengthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: symbolLengthEnable.setStatus('current')
symbolLengthCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolLengthCounter.setStatus('current')
symbolLengthCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolLengthCounterDiscontinuity.setStatus('current')
symbolLengthCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: symbolLengthCounterReset.setStatus('current')
symbolLengthLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolLengthLatestError.setStatus('current')
symbolLengthActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolLengthActiveTime.setStatus('current')
symbolLengthMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolLengthMeasurementState.setStatus('current')
symbolLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 1, 3, 1, 10), FloatingPoint()).setUnits('microsecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: symbolLengthValue.setStatus('current')
rfIfPowerTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5), )
if mibBuilder.loadTexts: rfIfPowerTable.setStatus('current')
rfIfPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "rfIfPowerInputNumber"))
if mibBuilder.loadTexts: rfIfPowerEntry.setStatus('current')
rfIfPowerInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfIfPowerInputNumber.setStatus('current')
rfIfPowerTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfPowerTestState.setStatus('current')
rfIfPowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfIfPowerEnable.setStatus('current')
rfIfPowerCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfPowerCounter.setStatus('current')
rfIfPowerCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfPowerCounterDiscontinuity.setStatus('current')
rfIfPowerCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfIfPowerCounterReset.setStatus('current')
rfIfPowerLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfPowerLatestError.setStatus('current')
rfIfPowerActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfPowerActiveTime.setStatus('current')
rfIfPowerMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfPowerMeasurementState.setStatus('current')
rfIfPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 5, 1, 10), FloatingPoint()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfPowerValue.setStatus('current')
rfIfSpectrumTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7), )
if mibBuilder.loadTexts: rfIfSpectrumTable.setStatus('current')
rfIfSpectrumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "rfIfSpectrumInputNumber"))
if mibBuilder.loadTexts: rfIfSpectrumEntry.setStatus('current')
rfIfSpectrumInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfIfSpectrumInputNumber.setStatus('current')
rfIfSpectrumTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfSpectrumTestState.setStatus('current')
rfIfSpectrumEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfIfSpectrumEnable.setStatus('current')
rfIfSpectrumCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfSpectrumCounter.setStatus('current')
rfIfSpectrumCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfSpectrumCounterDiscontinuity.setStatus('current')
rfIfSpectrumCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfIfSpectrumCounterReset.setStatus('current')
rfIfSpectrumLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfSpectrumLatestError.setStatus('current')
rfIfSpectrumActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 7, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfIfSpectrumActiveTime.setStatus('current')
eNDT = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9))
eNDTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1), )
if mibBuilder.loadTexts: eNDTTable.setStatus('current')
eNDTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "eNDTInputNumber"))
if mibBuilder.loadTexts: eNDTEntry.setStatus('current')
eNDTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: eNDTInputNumber.setStatus('current')
eNDTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTTestState.setStatus('current')
eNDTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNDTEnable.setStatus('current')
eNDTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTCounter.setStatus('current')
eNDTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTCounterDiscontinuity.setStatus('current')
eNDTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNDTCounterReset.setStatus('current')
eNDTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLatestError.setStatus('current')
eNDTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTActiveTime.setStatus('current')
eNDTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTMeasurementState.setStatus('current')
eNDTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 1, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTValue.setStatus('current')
eNFTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2), )
if mibBuilder.loadTexts: eNFTTable.setStatus('current')
eNFTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "eNFTInputNumber"))
if mibBuilder.loadTexts: eNFTEntry.setStatus('current')
eNFTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: eNFTInputNumber.setStatus('current')
eNFTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTTestState.setStatus('current')
eNFTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNFTEnable.setStatus('current')
eNFTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTCounter.setStatus('current')
eNFTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTCounterDiscontinuity.setStatus('current')
eNFTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNFTCounterReset.setStatus('current')
eNFTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLatestError.setStatus('current')
eNFTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTActiveTime.setStatus('current')
eNFTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTMeasurementState.setStatus('current')
eNFTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 2, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTValue.setStatus('current')
eNDTLPTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3), )
if mibBuilder.loadTexts: eNDTLPTable.setStatus('current')
eNDTLPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "eNDTLPInputNumber"))
if mibBuilder.loadTexts: eNDTLPEntry.setStatus('current')
eNDTLPInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: eNDTLPInputNumber.setStatus('current')
eNDTLPTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLPTestState.setStatus('current')
eNDTLPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNDTLPEnable.setStatus('current')
eNDTLPCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLPCounter.setStatus('current')
eNDTLPCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLPCounterDiscontinuity.setStatus('current')
eNDTLPCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNDTLPCounterReset.setStatus('current')
eNDTLPLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLPLatestError.setStatus('current')
eNDTLPActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 8), ActiveTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLPActiveTime.setStatus('current')
eNDTLPMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLPMeasurementState.setStatus('current')
eNDTLPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 3, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNDTLPValue.setStatus('current')
eNFTLPTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4), )
if mibBuilder.loadTexts: eNFTLPTable.setStatus('current')
eNFTLPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "eNDTLPInputNumber"))
if mibBuilder.loadTexts: eNFTLPEntry.setStatus('current')
eNFTLPInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 1), InputNumber())
if mibBuilder.loadTexts: eNFTLPInputNumber.setStatus('current')
eNFTLPTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLPTestState.setStatus('current')
eNFTLPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNFTLPEnable.setStatus('current')
eNFTLPCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLPCounter.setStatus('current')
eNFTLPCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLPCounterDiscontinuity.setStatus('current')
eNFTLPCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eNFTLPCounterReset.setStatus('current')
eNFTLPLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLPLatestError.setStatus('current')
eNFTLPActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 8), ActiveTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLPActiveTime.setStatus('current')
eNFTLPMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLPMeasurementState.setStatus('current')
eNFTLPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 9, 4, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: eNFTLPValue.setStatus('current')
linearityTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10), )
if mibBuilder.loadTexts: linearityTable.setStatus('current')
linearityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "linearityInputNumber"))
if mibBuilder.loadTexts: linearityEntry.setStatus('current')
linearityInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 1), InputNumber())
if mibBuilder.loadTexts: linearityInputNumber.setStatus('current')
linearityTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linearityTestState.setStatus('current')
linearityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linearityEnable.setStatus('current')
linearityCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linearityCounter.setStatus('current')
linearityCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linearityCounterDiscontinuity.setStatus('current')
linearityCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linearityCounterReset.setStatus('current')
linearityLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linearityLatestError.setStatus('current')
linearityActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: linearityActiveTime.setStatus('current')
linearityMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linearityMeasurementState.setStatus('current')
linearityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 10, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: linearityValue.setStatus('current')
berViterbiT = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15))
berViterbiTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1), )
if mibBuilder.loadTexts: berViterbiTTable.setStatus('current')
berViterbiTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "berViterbiTInputNumber"))
if mibBuilder.loadTexts: berViterbiTEntry.setStatus('current')
berViterbiTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: berViterbiTInputNumber.setStatus('current')
berViterbiTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTTestState.setStatus('current')
berViterbiTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berViterbiTEnable.setStatus('current')
berViterbiTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTCounter.setStatus('current')
berViterbiTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTCounterDiscontinuity.setStatus('current')
berViterbiTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berViterbiTCounterReset.setStatus('current')
berViterbiTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLatestError.setStatus('current')
berViterbiTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 8), ActiveTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTActiveTime.setStatus('current')
berViterbiTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTMeasurementState.setStatus('current')
berViterbiTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 1, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTValue.setStatus('current')
berViterbiTLPTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2), )
if mibBuilder.loadTexts: berViterbiTLPTable.setStatus('current')
berViterbiTLPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "berViterbiTLPInputNumber"))
if mibBuilder.loadTexts: berViterbiTLPEntry.setStatus('current')
berViterbiTLPInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: berViterbiTLPInputNumber.setStatus('current')
berViterbiTLPTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLPTestState.setStatus('current')
berViterbiTLPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berViterbiTLPEnable.setStatus('current')
berViterbiTLPCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLPCounter.setStatus('current')
berViterbiTLPCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLPCounterDiscontinuity.setStatus('current')
berViterbiTLPCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berViterbiTLPCounterReset.setStatus('current')
berViterbiTLPLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLPLatestError.setStatus('current')
berViterbiTLPActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 8), ActiveTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLPActiveTime.setStatus('current')
berViterbiTLPMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLPMeasurementState.setStatus('current')
berViterbiTLPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 15, 2, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: berViterbiTLPValue.setStatus('current')
berRS = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16))
berRSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1), )
if mibBuilder.loadTexts: berRSTable.setStatus('current')
berRSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "berRSInputNumber"))
if mibBuilder.loadTexts: berRSEntry.setStatus('current')
berRSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: berRSInputNumber.setStatus('current')
berRSTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSTestState.setStatus('current')
berRSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berRSEnable.setStatus('current')
berRSCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSCounter.setStatus('current')
berRSCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSCounterDiscontinuity.setStatus('current')
berRSCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berRSCounterReset.setStatus('current')
berRSLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLatestError.setStatus('current')
berRSActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 8), ActiveTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSActiveTime.setStatus('current')
berRSMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSMeasurementState.setStatus('current')
berRSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 1, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSValue.setStatus('current')
berRSLPTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2), )
if mibBuilder.loadTexts: berRSLPTable.setStatus('current')
berRSLPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "berRSLPInputNumber"))
if mibBuilder.loadTexts: berRSLPEntry.setStatus('current')
berRSLPInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: berRSLPInputNumber.setStatus('current')
berRSLPTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLPTestState.setStatus('current')
berRSLPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berRSLPEnable.setStatus('current')
berRSLPCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLPCounter.setStatus('current')
berRSLPCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLPCounterDiscontinuity.setStatus('current')
berRSLPCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berRSLPCounterReset.setStatus('current')
berRSLPLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLPLatestError.setStatus('current')
berRSLPActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 8), ActiveTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLPActiveTime.setStatus('current')
berRSLPMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLPMeasurementState.setStatus('current')
berRSLPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 16, 2, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berRSLPValue.setStatus('current')
iqAnalysisT = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18))
merTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2), )
if mibBuilder.loadTexts: merTTable.setStatus('current')
merTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "merTInputNumber"))
if mibBuilder.loadTexts: merTEntry.setStatus('current')
merTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: merTInputNumber.setStatus('current')
merTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merTTestState.setStatus('current')
merTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: merTEnable.setStatus('current')
merTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merTCounter.setStatus('current')
merTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merTCounterDiscontinuity.setStatus('current')
merTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: merTCounterReset.setStatus('current')
merTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merTLatestError.setStatus('current')
merTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: merTActiveTime.setStatus('current')
merTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: merTMeasurementState.setStatus('current')
merTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 2, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: merTValue.setStatus('current')
steT = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3))
steMeanTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1), )
if mibBuilder.loadTexts: steMeanTTable.setStatus('current')
steMeanTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "steMeanTInputNumber"))
if mibBuilder.loadTexts: steMeanTEntry.setStatus('current')
steMeanTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: steMeanTInputNumber.setStatus('current')
steMeanTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanTTestState.setStatus('current')
steMeanTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steMeanTEnable.setStatus('current')
steMeanTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanTCounter.setStatus('current')
steMeanTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanTCounterDiscontinuity.setStatus('current')
steMeanTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steMeanTCounterReset.setStatus('current')
steMeanTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanTLatestError.setStatus('current')
steMeanTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanTActiveTime.setStatus('current')
steMeanTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanTMeasurementState.setStatus('current')
steMeanTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 1, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steMeanTValue.setStatus('current')
steDeviationTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2), )
if mibBuilder.loadTexts: steDeviationTTable.setStatus('current')
steDeviationTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "steDeviationTInputNumber"))
if mibBuilder.loadTexts: steDeviationTEntry.setStatus('current')
steDeviationTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: steDeviationTInputNumber.setStatus('current')
steDeviationTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationTTestState.setStatus('current')
steDeviationTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steDeviationTEnable.setStatus('current')
steDeviationTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationTCounter.setStatus('current')
steDeviationTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationTCounterDiscontinuity.setStatus('current')
steDeviationTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: steDeviationTCounterReset.setStatus('current')
steDeviationTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationTLatestError.setStatus('current')
steDeviationTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationTActiveTime.setStatus('current')
steDeviationTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationTMeasurementState.setStatus('current')
steDeviationTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 3, 2, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steDeviationTValue.setStatus('current')
csTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4), )
if mibBuilder.loadTexts: csTTable.setStatus('current')
csTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "csTInputNumber"))
if mibBuilder.loadTexts: csTEntry.setStatus('current')
csTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 1), InputNumber())
if mibBuilder.loadTexts: csTInputNumber.setStatus('current')
csTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csTTestState.setStatus('current')
csTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTEnable.setStatus('current')
csTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csTCounter.setStatus('current')
csTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csTCounterDiscontinuity.setStatus('current')
csTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTCounterReset.setStatus('current')
csTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csTLatestError.setStatus('current')
csTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: csTActiveTime.setStatus('current')
csTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csTMeasurementState.setStatus('current')
csTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 4, 1, 10), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: csTValue.setStatus('current')
aiTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5), )
if mibBuilder.loadTexts: aiTTable.setStatus('current')
aiTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "aiTInputNumber"))
if mibBuilder.loadTexts: aiTEntry.setStatus('current')
aiTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 1), InputNumber())
if mibBuilder.loadTexts: aiTInputNumber.setStatus('current')
aiTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTTestState.setStatus('current')
aiTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiTEnable.setStatus('current')
aiTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTCounter.setStatus('current')
aiTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTCounterDiscontinuity.setStatus('current')
aiTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiTCounterReset.setStatus('current')
aiTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTLatestError.setStatus('current')
aiTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTActiveTime.setStatus('current')
aiTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTMeasurementState.setStatus('current')
aiTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 5, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTValue.setStatus('current')
qeTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6), )
if mibBuilder.loadTexts: qeTTable.setStatus('current')
qeTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "qeTInputNumber"))
if mibBuilder.loadTexts: qeTEntry.setStatus('current')
qeTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 1), InputNumber())
if mibBuilder.loadTexts: qeTInputNumber.setStatus('current')
qeTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeTTestState.setStatus('current')
qeTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeTEnable.setStatus('current')
qeTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeTCounter.setStatus('current')
qeTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeTCounterDiscontinuity.setStatus('current')
qeTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qeTCounterReset.setStatus('current')
qeTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeTLatestError.setStatus('current')
qeTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: qeTActiveTime.setStatus('current')
qeTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qeTMeasurementState.setStatus('current')
qeTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 6, 1, 10), FloatingPoint()).setUnits('degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: qeTValue.setStatus('current')
pjTTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7), )
if mibBuilder.loadTexts: pjTTable.setStatus('current')
pjTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "pjTInputNumber"))
if mibBuilder.loadTexts: pjTEntry.setStatus('current')
pjTInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 1), InputNumber())
if mibBuilder.loadTexts: pjTInputNumber.setStatus('current')
pjTTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjTTestState.setStatus('current')
pjTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pjTEnable.setStatus('current')
pjTCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjTCounter.setStatus('current')
pjTCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjTCounterDiscontinuity.setStatus('current')
pjTCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pjTCounterReset.setStatus('current')
pjTLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjTLatestError.setStatus('current')
pjTActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: pjTActiveTime.setStatus('current')
pjTMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjTMeasurementState.setStatus('current')
pjTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 18, 7, 1, 10), FloatingPoint()).setUnits('degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: pjTValue.setStatus('current')
mipSyntaxTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20), )
if mibBuilder.loadTexts: mipSyntaxTable.setStatus('current')
mipSyntaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "mipSyntaxTestNumber"), (0, "DVB-MGTR101290-MIB", "mipSyntaxInputNumber"))
if mibBuilder.loadTexts: mipSyntaxEntry.setStatus('current')
mipSyntaxInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 1), InputNumber())
if mibBuilder.loadTexts: mipSyntaxInputNumber.setStatus('current')
mipSyntaxTestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 2), IndexMIPSyntaxTest())
if mibBuilder.loadTexts: mipSyntaxTestNumber.setStatus('current')
mipSyntaxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 3), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSyntaxState.setStatus('current')
mipSyntaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 4), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mipSyntaxEnable.setStatus('current')
mipSyntaxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSyntaxCounter.setStatus('current')
mipSyntaxCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSyntaxCounterDiscontinuity.setStatus('current')
mipSyntaxCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mipSyntaxCounterReset.setStatus('current')
mipSyntaxLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSyntaxLatestError.setStatus('current')
mipSyntaxActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 20, 1, 9), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mipSyntaxActiveTime.setStatus('current')
systemErrorPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21))
sepEtiTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1), )
if mibBuilder.loadTexts: sepEtiTable.setStatus('current')
sepEtiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "sepEtiInputNumber"))
if mibBuilder.loadTexts: sepEtiEntry.setStatus('current')
sepEtiInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: sepEtiInputNumber.setStatus('current')
sepEtiTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepEtiTestState.setStatus('current')
sepEtiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sepEtiEnable.setStatus('current')
sepEtiCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepEtiCounter.setStatus('current')
sepEtiCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepEtiCounterDiscontinuity.setStatus('current')
sepEtiCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sepEtiCounterReset.setStatus('current')
sepEtiLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepEtiLatestError.setStatus('current')
sepEtiActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sepEtiActiveTime.setStatus('current')
sepEtiMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepEtiMeasurementState.setStatus('current')
sepEtiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 1, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepEtiValue.setStatus('current')
sepSetiTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2), )
if mibBuilder.loadTexts: sepSetiTable.setStatus('current')
sepSetiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "sepSetiInputNumber"))
if mibBuilder.loadTexts: sepSetiEntry.setStatus('current')
sepSetiInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: sepSetiInputNumber.setStatus('current')
sepSetiTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 2), TestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepSetiTestState.setStatus('current')
sepSetiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 3), Enable().clone(namedValues=NamedValues(("testEnable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sepSetiEnable.setStatus('current')
sepSetiCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepSetiCounter.setStatus('current')
sepSetiCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepSetiCounterDiscontinuity.setStatus('current')
sepSetiCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sepSetiCounterReset.setStatus('current')
sepSetiLatestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepSetiLatestError.setStatus('current')
sepSetiActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 8), ActiveTime()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: sepSetiActiveTime.setStatus('current')
sepSetiMeasurementState = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 9), MeasurementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepSetiMeasurementState.setStatus('current')
sepSetiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 21, 2, 1, 10), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sepSetiValue.setStatus('current')
terrestrialPreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100), )
if mibBuilder.loadTexts: terrestrialPreferencesTable.setStatus('current')
terrestrialPreferencesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1), ).setIndexNames((0, "DVB-MGTR101290-MIB", "terrestrialPrefInputNumber"))
if mibBuilder.loadTexts: terrestrialPreferencesEntry.setStatus('current')
terrestrialPrefInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 1), InputNumber())
if mibBuilder.loadTexts: terrestrialPrefInputNumber.setStatus('current')
terrestrialPrefCentreFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 2), FloatingPoint()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefCentreFrequency.setStatus('current')
terrestrialPrefBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 3), FloatingPoint()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefBandwidth.setStatus('current')
terrestrialPrefModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 4), Modulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefModulation.setStatus('current')
terrestrialPrefTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 5), TerrestrialTransmissionMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefTransmissionMode.setStatus('current')
terrestrialPrefGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 6), GuardInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefGuardInterval.setStatus('current')
terrestrialPrefHierarchical = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 7), Hierarchy()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefHierarchical.setStatus('current')
terrestrialPrefCentreFreqExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 8), FloatingPoint()).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefCentreFreqExpected.setStatus('current')
terrestrialPrefCentreFreqLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 9), FloatingPoint()).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefCentreFreqLimit.setStatus('current')
terrestrialPrefChannelWidthLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 10), FloatingPoint()).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefChannelWidthLimit.setStatus('current')
terrestrialPrefSymbolLengthLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 11), FloatingPoint()).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSymbolLengthLimit.setStatus('current')
terrestrialPrefPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 12), FloatingPoint()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefPowerMin.setStatus('current')
terrestrialPrefPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 13), FloatingPoint()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefPowerMax.setStatus('current')
terrestrialPrefENDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 14), FloatingPoint().clone('2E-04')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENDBER.setStatus('current')
terrestrialPrefENDIdeal = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 15), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENDIdeal.setStatus('current')
terrestrialPrefENDMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 16), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENDMax.setStatus('current')
terrestrialPrefENFIdeal = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 17), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENFIdeal.setStatus('current')
terrestrialPrefENFMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 18), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENFMax.setStatus('current')
terrestrialPrefENDLPIdeal = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 19), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENDLPIdeal.setStatus('current')
terrestrialPrefENDLPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 20), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENDLPMax.setStatus('current')
terrestrialPrefENFLPIdeal = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 21), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENFLPIdeal.setStatus('current')
terrestrialPrefENFLPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 22), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefENFLPMax.setStatus('current')
terrestrialPrefLinearityMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 23), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefLinearityMin.setStatus('current')
terrestrialPrefBERViterbiMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 24), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefBERViterbiMax.setStatus('current')
terrestrialPrefBERViterbiLPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 25), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefBERViterbiLPMax.setStatus('current')
terrestrialPrefBERRSMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 26), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefBERRSMax.setStatus('current')
terrestrialPrefBERRSLPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 27), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefBERRSLPMax.setStatus('current')
terrestrialPrefMerTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 28), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefMerTMin.setStatus('current')
terrestrialPrefSteMeanMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 29), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSteMeanMax.setStatus('current')
terrestrialPrefSteDeviationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 30), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSteDeviationMax.setStatus('current')
terrestrialPrefCsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 31), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefCsMin.setStatus('current')
terrestrialPrefAiMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 32), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefAiMax.setStatus('current')
terrestrialPrefQeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 33), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefQeMax.setStatus('current')
terrestrialPrefPjMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 34), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefPjMax.setStatus('current')
terrestrialPrefMIPTimingLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 35), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefMIPTimingLimit.setStatus('current')
terrestrialPrefMIPDeviationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 36), FloatingPoint()).setUnits('bit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefMIPDeviationMax.setStatus('current')
terrestrialPrefSEPUATMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 37), UATMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSEPUATMode.setStatus('current')
terrestrialPrefSEPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSEPN.setStatus('current')
terrestrialPrefSEPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 39), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSEPT.setStatus('current')
terrestrialPrefSEPM = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSEPM.setStatus('current')
terrestrialPrefSEPTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 41), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSEPTI.setStatus('current')
terrestrialPrefSEPEBPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 42), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSEPEBPerCent.setStatus('current')
terrestrialPrefSEPMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 2, 1, 9, 100, 1, 43), FloatingPoint()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: terrestrialPrefSEPMeasurementInterval.setStatus('current')
tr101290Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3))
tr101290Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 1))
complianceTransportStream = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 1, 1)).setObjects(("DVB-MGTR101290-MIB", "groupControl"), ("DVB-MGTR101290-MIB", "groupCapability"), ("DVB-MGTR101290-MIB", "groupTransportStream"), ("DVB-MGTR101290-MIB", "groupTrapControl"), ("DVB-MGTR101290-MIB", "groupTraps"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceTransportStream = complianceTransportStream.setStatus('current')
complianceCable = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 1, 2)).setObjects(("DVB-MGTR101290-MIB", "groupControl"), ("DVB-MGTR101290-MIB", "groupTrapControl"), ("DVB-MGTR101290-MIB", "groupTraps"), ("DVB-MGTR101290-MIB", "groupCapability"), ("DVB-MGTR101290-MIB", "groupCable"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceCable = complianceCable.setStatus('current')
complianceSatellite = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 1, 3)).setObjects(("DVB-MGTR101290-MIB", "groupControl"), ("DVB-MGTR101290-MIB", "groupTrapControl"), ("DVB-MGTR101290-MIB", "groupTraps"), ("DVB-MGTR101290-MIB", "groupCapability"), ("DVB-MGTR101290-MIB", "groupSatellite"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceSatellite = complianceSatellite.setStatus('current')
complianceTerrestrial = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 1, 4)).setObjects(("DVB-MGTR101290-MIB", "groupControl"), ("DVB-MGTR101290-MIB", "groupTrapControl"), ("DVB-MGTR101290-MIB", "groupTraps"), ("DVB-MGTR101290-MIB", "groupCapability"), ("DVB-MGTR101290-MIB", "groupTerrestrial"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceTerrestrial = complianceTerrestrial.setStatus('current')
tr101290ObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2))
groupControl = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 1)).setObjects(("DVB-MGTR101290-MIB", "controlNow"), ("DVB-MGTR101290-MIB", "controlEventPersistence"), ("DVB-MGTR101290-MIB", "rfSystemDelivery"), ("DVB-MGTR101290-MIB", "controlSynchronizedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupControl = groupControl.setStatus('current')
groupTrapControl = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 2)).setObjects(("DVB-MGTR101290-MIB", "trapControlOID"), ("DVB-MGTR101290-MIB", "trapControlGenerationTime"), ("DVB-MGTR101290-MIB", "trapControlMeasurementValue"), ("DVB-MGTR101290-MIB", "trapControlRateStatus"), ("DVB-MGTR101290-MIB", "trapControlPeriod"), ("DVB-MGTR101290-MIB", "trapControlFailureSummary"), ("DVB-MGTR101290-MIB", "trapInput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupTrapControl = groupTrapControl.setStatus('current')
groupTraps = NotificationGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 3)).setObjects(("DVB-MGTR101290-MIB", "testFailTrap"), ("DVB-MGTR101290-MIB", "measurementFailTrap"), ("DVB-MGTR101290-MIB", "measurementUnknownTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupTraps = groupTraps.setStatus('current')
groupCapability = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 4)).setObjects(("DVB-MGTR101290-MIB", "capabilityMIBRevision"), ("DVB-MGTR101290-MIB", "capabilityTSGroup"), ("DVB-MGTR101290-MIB", "capabilityTSAvailability"), ("DVB-MGTR101290-MIB", "capabilityTSPollInterval"), ("DVB-MGTR101290-MIB", "capabilityCableSatGroup"), ("DVB-MGTR101290-MIB", "capabilityCableSatAvailability"), ("DVB-MGTR101290-MIB", "capabilityCableSatPollInterval"), ("DVB-MGTR101290-MIB", "capabilityCableGroup"), ("DVB-MGTR101290-MIB", "capabilityCableAvailability"), ("DVB-MGTR101290-MIB", "capabilityCablePollInterval"), ("DVB-MGTR101290-MIB", "capabilitySatelliteGroup"), ("DVB-MGTR101290-MIB", "capabilitySatelliteAvailability"), ("DVB-MGTR101290-MIB", "capabilitySatellitePollInterval"), ("DVB-MGTR101290-MIB", "capabilityTerrestrialGroup"), ("DVB-MGTR101290-MIB", "capabilityTerrestrialAvailability"), ("DVB-MGTR101290-MIB", "capabilityTerrestrialPollInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupCapability = groupCapability.setStatus('current')
groupTransportStream = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 5)).setObjects(("DVB-MGTR101290-MIB", "tsTestsSummaryState"), ("DVB-MGTR101290-MIB", "tsTestsSummaryEnable"), ("DVB-MGTR101290-MIB", "tsTestsSummaryCounter"), ("DVB-MGTR101290-MIB", "tsTestsSummaryCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsTestsSummaryCounterReset"), ("DVB-MGTR101290-MIB", "tsTestsSummaryLatestError"), ("DVB-MGTR101290-MIB", "tsTestsSummaryActiveTime"), ("DVB-MGTR101290-MIB", "tsTestsPIDRowStatus"), ("DVB-MGTR101290-MIB", "tsTestsPIDState"), ("DVB-MGTR101290-MIB", "tsTestsPIDEnable"), ("DVB-MGTR101290-MIB", "tsTestsPIDCounter"), ("DVB-MGTR101290-MIB", "tsTestsPIDCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsTestsPIDCounterReset"), ("DVB-MGTR101290-MIB", "tsTestsPIDLatestError"), ("DVB-MGTR101290-MIB", "tsTestsPIDActiveTime"), ("DVB-MGTR101290-MIB", "tsTestsPrefTransitionDuration"), ("DVB-MGTR101290-MIB", "tsTestsPrefPATSectionIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefPMTSectionIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefReferredIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefPCRIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefPCRDiscontinuityMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefPCRInaccuracyMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefPTSIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefNITActualIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefNITActualIntervalMin"), ("DVB-MGTR101290-MIB", "tsTestsPrefNITOtherIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefSIGapMin"), ("DVB-MGTR101290-MIB", "tsTestsPrefNITTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefBATTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefSDTActualTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefSDTOtherTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITPFActualTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITPFOtherTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITSActualNearTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITSActualFarTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITSOtherNearTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITSOtherFarTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefTxTTableIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefSDTActualIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefSDTActualIntervalMin"), ("DVB-MGTR101290-MIB", "tsTestsPrefSDTOtherIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITActualIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITActualIntervalMin"), ("DVB-MGTR101290-MIB", "tsTestsPrefEITOtherIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefRSTIntervalMin"), ("DVB-MGTR101290-MIB", "tsTestsPrefTDTIntervalMax"), ("DVB-MGTR101290-MIB", "tsTestsPrefTDTIntervalMin"), ("DVB-MGTR101290-MIB", "tsTestsPrefPIDRowStatus"), ("DVB-MGTR101290-MIB", "tsTestsPrefPIDReferredIntervalMax"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementRowStatus"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementState"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementEnable"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementCounter"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementCounterReset"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementLatestError"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementActiveTime"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementMeasurementState"), ("DVB-MGTR101290-MIB", "tsPcrMeasurementValue"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateState"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateEnable"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateCounter"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateCounterReset"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateLatestError"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateActiveTime"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateMeasurementState"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateValue"), ("DVB-MGTR101290-MIB", "tsTransportStreamBitRateNomenclature"), ("DVB-MGTR101290-MIB", "tsServiceBitRateRowStatus"), ("DVB-MGTR101290-MIB", "tsServiceBitRateState"), ("DVB-MGTR101290-MIB", "tsServiceBitRateEnable"), ("DVB-MGTR101290-MIB", "tsServiceBitRateCounter"), ("DVB-MGTR101290-MIB", "tsServiceBitRateCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsServiceBitRateCounterReset"), ("DVB-MGTR101290-MIB", "tsServiceBitRateLatestError"), ("DVB-MGTR101290-MIB", "tsServiceBitRateActiveTime"), ("DVB-MGTR101290-MIB", "tsServiceBitRateMeasurementState"), ("DVB-MGTR101290-MIB", "tsServiceBitRateValue"), ("DVB-MGTR101290-MIB", "tsServiceBitRateNomenclature"), ("DVB-MGTR101290-MIB", "tsPIDBitRateRowStatus"), ("DVB-MGTR101290-MIB", "tsPIDBitRateState"), ("DVB-MGTR101290-MIB", "tsPIDBitRateEnable"), ("DVB-MGTR101290-MIB", "tsPIDBitRateCounter"), ("DVB-MGTR101290-MIB", "tsPIDBitRateCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsPIDBitRateCounterReset"), ("DVB-MGTR101290-MIB", "tsPIDBitRateLatestError"), ("DVB-MGTR101290-MIB", "tsPIDBitRateActiveTime"), ("DVB-MGTR101290-MIB", "tsPIDBitRateMeasurementState"), ("DVB-MGTR101290-MIB", "tsPIDBitRateValue"), ("DVB-MGTR101290-MIB", "tsPIDBitRateNomenclature"), ("DVB-MGTR101290-MIB", "tsConsistencyState"), ("DVB-MGTR101290-MIB", "tsConsistencyEnable"), ("DVB-MGTR101290-MIB", "tsConsistencyCounter"), ("DVB-MGTR101290-MIB", "tsConsistencyCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsConsistencyCounterReset"), ("DVB-MGTR101290-MIB", "tsConsistencyLatestError"), ("DVB-MGTR101290-MIB", "tsConsistencyActiveTime"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPCRDemarcationFrequency"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPCRFOMax"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPCRDRMax"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPCROJMax"), ("DVB-MGTR101290-MIB", "tsMeasurePrefTSBitRateTau"), ("DVB-MGTR101290-MIB", "tsMeasurePrefTSBitRateN"), ("DVB-MGTR101290-MIB", "tsMeasurePrefTSBitRateElement"), ("DVB-MGTR101290-MIB", "tsMeasurePrefTSBitRateMin"), ("DVB-MGTR101290-MIB", "tsMeasurePrefTSBitRateMax"), ("DVB-MGTR101290-MIB", "tsMeasurePrefAllServiceBitRateTau"), ("DVB-MGTR101290-MIB", "tsMeasurePrefAllServiceBitRateN"), ("DVB-MGTR101290-MIB", "tsMeasurePrefAllServiceBitRateElement"), ("DVB-MGTR101290-MIB", "tsMeasurePrefAllPIDBitRateTau"), ("DVB-MGTR101290-MIB", "tsMeasurePrefAllPIDBitRateN"), ("DVB-MGTR101290-MIB", "tsMeasurePrefAllPIDBitRateElement"), ("DVB-MGTR101290-MIB", "tsMeasurePrefExpectedTSID"), ("DVB-MGTR101290-MIB", "tsMeasurePrefServiceRowStatus"), ("DVB-MGTR101290-MIB", "tsMeasurePrefServiceBitRateTau"), ("DVB-MGTR101290-MIB", "tsMeasurePrefServiceBitRateN"), ("DVB-MGTR101290-MIB", "tsMeasurePrefServiceBitRateElement"), ("DVB-MGTR101290-MIB", "tsMeasurePrefServiceBitRateMin"), ("DVB-MGTR101290-MIB", "tsMeasurePrefServiceBitRateMax"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPIDRowStatus"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPIDBitRateTau"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPIDBitRateN"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPIDBitRateElement"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPIDBitRateMin"), ("DVB-MGTR101290-MIB", "tsMeasurePrefPIDBitRateMax"), ("DVB-MGTR101290-MIB", "tsServicePerformanceState"), ("DVB-MGTR101290-MIB", "tsServicePerformanceEnable"), ("DVB-MGTR101290-MIB", "tsServicePerformanceCounter"), ("DVB-MGTR101290-MIB", "tsServicePerformanceCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "tsServicePerformanceCounterReset"), ("DVB-MGTR101290-MIB", "tsServicePerformanceLatestError"), ("DVB-MGTR101290-MIB", "tsServicePerformanceActiveTime"), ("DVB-MGTR101290-MIB", "tsServicePerformanceMeasurementState"), ("DVB-MGTR101290-MIB", "tsServicePerformanceError"), ("DVB-MGTR101290-MIB", "tsServicePerformanceErrorRatio"), ("DVB-MGTR101290-MIB", "tsSPPrefDeltaT"), ("DVB-MGTR101290-MIB", "tsSPPrefEvaluationTime"), ("DVB-MGTR101290-MIB", "tsSPPrefThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupTransportStream = groupTransportStream.setStatus('current')
groupCable = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 6)).setObjects(("DVB-MGTR101290-MIB", "sysAvailabilityTestState"), ("DVB-MGTR101290-MIB", "sysAvailabilityEnable"), ("DVB-MGTR101290-MIB", "sysAvailabilityCounter"), ("DVB-MGTR101290-MIB", "sysAvailabilityCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "sysAvailabilityCounterReset"), ("DVB-MGTR101290-MIB", "sysAvailabilityLatestError"), ("DVB-MGTR101290-MIB", "sysAvailabilityActiveTime"), ("DVB-MGTR101290-MIB", "sysAvailabilityMeasurementState"), ("DVB-MGTR101290-MIB", "sysAvailabilityUnavailableTime"), ("DVB-MGTR101290-MIB", "sysAvailabilityRatio"), ("DVB-MGTR101290-MIB", "sysAvailabilityInSETI"), ("DVB-MGTR101290-MIB", "linkAvailabilityTestState"), ("DVB-MGTR101290-MIB", "linkAvailabilityEnable"), ("DVB-MGTR101290-MIB", "linkAvailabilityCounter"), ("DVB-MGTR101290-MIB", "linkAvailabilityCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "linkAvailabilityCounterReset"), ("DVB-MGTR101290-MIB", "linkAvailabilityLatestError"), ("DVB-MGTR101290-MIB", "linkAvailabilityActiveTime"), ("DVB-MGTR101290-MIB", "linkAvailabilityMeasurementState"), ("DVB-MGTR101290-MIB", "linkAvailabilityUnavailableTime"), ("DVB-MGTR101290-MIB", "linkAvailabilityRatio"), ("DVB-MGTR101290-MIB", "linkAvailabilityInSUTI"), ("DVB-MGTR101290-MIB", "berRSinServiceTestState"), ("DVB-MGTR101290-MIB", "berRSinServiceEnable"), ("DVB-MGTR101290-MIB", "berRSinServiceCounter"), ("DVB-MGTR101290-MIB", "berRSinServiceCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "berRSinServiceCounterReset"), ("DVB-MGTR101290-MIB", "berRSinServiceLatestError"), ("DVB-MGTR101290-MIB", "berRSinServiceActiveTime"), ("DVB-MGTR101290-MIB", "berRSinServiceMeasurementState"), ("DVB-MGTR101290-MIB", "berRSinServiceValue"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerTestState"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerEnable"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerCounter"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerCounterReset"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerLatestError"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerActiveTime"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerMeasurementState"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerValue"), ("DVB-MGTR101290-MIB", "noisePowerTestState"), ("DVB-MGTR101290-MIB", "noisePowerEnable"), ("DVB-MGTR101290-MIB", "noisePowerCounter"), ("DVB-MGTR101290-MIB", "noisePowerCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "noisePowerCounterReset"), ("DVB-MGTR101290-MIB", "noisePowerLatestError"), ("DVB-MGTR101290-MIB", "noisePowerActiveTime"), ("DVB-MGTR101290-MIB", "noisePowerMeasurementState"), ("DVB-MGTR101290-MIB", "noisePowerValue"), ("DVB-MGTR101290-MIB", "merCSTestState"), ("DVB-MGTR101290-MIB", "merCSEnable"), ("DVB-MGTR101290-MIB", "merCSCounter"), ("DVB-MGTR101290-MIB", "merCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "merCSCounterReset"), ("DVB-MGTR101290-MIB", "merCSLatestError"), ("DVB-MGTR101290-MIB", "merCSActiveTime"), ("DVB-MGTR101290-MIB", "merCSMeasurementState"), ("DVB-MGTR101290-MIB", "merCSValue"), ("DVB-MGTR101290-MIB", "steMeanCSTestState"), ("DVB-MGTR101290-MIB", "steMeanCSEnable"), ("DVB-MGTR101290-MIB", "steMeanCSCounter"), ("DVB-MGTR101290-MIB", "steMeanCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "steMeanCSCounterReset"), ("DVB-MGTR101290-MIB", "steMeanCSLatestError"), ("DVB-MGTR101290-MIB", "steMeanCSActiveTime"), ("DVB-MGTR101290-MIB", "steMeanCSMeasurementState"), ("DVB-MGTR101290-MIB", "steMeanCSValue"), ("DVB-MGTR101290-MIB", "steDeviationCSTestState"), ("DVB-MGTR101290-MIB", "steDeviationCSEnable"), ("DVB-MGTR101290-MIB", "steDeviationCSCounter"), ("DVB-MGTR101290-MIB", "steDeviationCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "steDeviationCSCounterReset"), ("DVB-MGTR101290-MIB", "steDeviationCSLatestError"), ("DVB-MGTR101290-MIB", "steDeviationCSActiveTime"), ("DVB-MGTR101290-MIB", "steDeviationCSMeasurementState"), ("DVB-MGTR101290-MIB", "steDeviationCSValue"), ("DVB-MGTR101290-MIB", "csCSTestState"), ("DVB-MGTR101290-MIB", "csCSEnable"), ("DVB-MGTR101290-MIB", "csCSCounter"), ("DVB-MGTR101290-MIB", "csCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "csCSCounterReset"), ("DVB-MGTR101290-MIB", "csCSLatestError"), ("DVB-MGTR101290-MIB", "csCSActiveTime"), ("DVB-MGTR101290-MIB", "csCSMeasurementState"), ("DVB-MGTR101290-MIB", "csCSValue"), ("DVB-MGTR101290-MIB", "aiCSTestState"), ("DVB-MGTR101290-MIB", "aiCSEnable"), ("DVB-MGTR101290-MIB", "aiCSCounter"), ("DVB-MGTR101290-MIB", "aiCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "aiCSCounterReset"), ("DVB-MGTR101290-MIB", "aiCSLatestError"), ("DVB-MGTR101290-MIB", "aiCSActiveTime"), ("DVB-MGTR101290-MIB", "aiCSMeasurementState"), ("DVB-MGTR101290-MIB", "aiCSValue"), ("DVB-MGTR101290-MIB", "qeCSTestState"), ("DVB-MGTR101290-MIB", "qeCSEnable"), ("DVB-MGTR101290-MIB", "qeCSCounter"), ("DVB-MGTR101290-MIB", "qeCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "qeCSCounterReset"), ("DVB-MGTR101290-MIB", "qeCSLatestError"), ("DVB-MGTR101290-MIB", "qeCSActiveTime"), ("DVB-MGTR101290-MIB", "qeCSMeasurementState"), ("DVB-MGTR101290-MIB", "qeCSValue"), ("DVB-MGTR101290-MIB", "rteCSTestState"), ("DVB-MGTR101290-MIB", "rteCSEnable"), ("DVB-MGTR101290-MIB", "rteCSCounter"), ("DVB-MGTR101290-MIB", "rteCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rteCSCounterReset"), ("DVB-MGTR101290-MIB", "rteCSLatestError"), ("DVB-MGTR101290-MIB", "rteCSActiveTime"), ("DVB-MGTR101290-MIB", "rteCSMeasurementState"), ("DVB-MGTR101290-MIB", "rteCSValue"), ("DVB-MGTR101290-MIB", "ciCSTestState"), ("DVB-MGTR101290-MIB", "ciCSEnable"), ("DVB-MGTR101290-MIB", "ciCSCounter"), ("DVB-MGTR101290-MIB", "ciCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "ciCSCounterReset"), ("DVB-MGTR101290-MIB", "ciCSLatestError"), ("DVB-MGTR101290-MIB", "ciCSActiveTime"), ("DVB-MGTR101290-MIB", "ciCSMeasurementState"), ("DVB-MGTR101290-MIB", "ciCSValue"), ("DVB-MGTR101290-MIB", "pjCSTestState"), ("DVB-MGTR101290-MIB", "pjCSEnable"), ("DVB-MGTR101290-MIB", "pjCSCounter"), ("DVB-MGTR101290-MIB", "pjCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "pjCSCounterReset"), ("DVB-MGTR101290-MIB", "pjCSLatestError"), ("DVB-MGTR101290-MIB", "pjCSActiveTime"), ("DVB-MGTR101290-MIB", "pjCSMeasurementState"), ("DVB-MGTR101290-MIB", "pjCSValue"), ("DVB-MGTR101290-MIB", "snrCSTestState"), ("DVB-MGTR101290-MIB", "snrCSEnable"), ("DVB-MGTR101290-MIB", "snrCSCounter"), ("DVB-MGTR101290-MIB", "snrCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "snrCSCounterReset"), ("DVB-MGTR101290-MIB", "snrCSLatestError"), ("DVB-MGTR101290-MIB", "snrCSActiveTime"), ("DVB-MGTR101290-MIB", "snrCSMeasurementState"), ("DVB-MGTR101290-MIB", "snrCSValue"), ("DVB-MGTR101290-MIB", "cableSatPrefCentreFrequency"), ("DVB-MGTR101290-MIB", "cableSatPrefModulation"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailUATMode"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailN"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailT"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailM"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailTI"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailEBPerCent"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailTotalTime"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailUATMode"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailN"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailT"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailM"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailTI"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailUPPerCent"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailTotalTime"), ("DVB-MGTR101290-MIB", "cableSatPrefBERMax"), ("DVB-MGTR101290-MIB", "cableSatPrefSignalPowerMin"), ("DVB-MGTR101290-MIB", "cableSatPrefSignalPowerMax"), ("DVB-MGTR101290-MIB", "cableSatPrefNoisePowerMax"), ("DVB-MGTR101290-MIB", "cableSatPrefMerCSMin"), ("DVB-MGTR101290-MIB", "cableSatPrefSteMeanCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefSteDeviationCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefCsCSMin"), ("DVB-MGTR101290-MIB", "cableSatPrefAiCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefQeCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefRteCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefCiCSMin"), ("DVB-MGTR101290-MIB", "cableSatPrefPjCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefSnrCSMin"), ("DVB-MGTR101290-MIB", "noiseMarginTestState"), ("DVB-MGTR101290-MIB", "noiseMarginEnable"), ("DVB-MGTR101290-MIB", "noiseMarginCounter"), ("DVB-MGTR101290-MIB", "noiseMarginCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "noiseMarginCounterReset"), ("DVB-MGTR101290-MIB", "noiseMarginLatestError"), ("DVB-MGTR101290-MIB", "noiseMarginActiveTime"), ("DVB-MGTR101290-MIB", "noiseMarginMeasurementState"), ("DVB-MGTR101290-MIB", "noiseMarginValue"), ("DVB-MGTR101290-MIB", "estNoiseMarginTestState"), ("DVB-MGTR101290-MIB", "estNoiseMarginEnable"), ("DVB-MGTR101290-MIB", "estNoiseMarginCounter"), ("DVB-MGTR101290-MIB", "estNoiseMarginCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "estNoiseMarginCounterReset"), ("DVB-MGTR101290-MIB", "estNoiseMarginLatestError"), ("DVB-MGTR101290-MIB", "estNoiseMarginActiveTime"), ("DVB-MGTR101290-MIB", "estNoiseMarginMeasurementState"), ("DVB-MGTR101290-MIB", "estNoiseMarginValue"), ("DVB-MGTR101290-MIB", "signQualMarTTestState"), ("DVB-MGTR101290-MIB", "signQualMarTEnable"), ("DVB-MGTR101290-MIB", "signQualMarTCounter"), ("DVB-MGTR101290-MIB", "signQualMarTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "signQualMarTCounterReset"), ("DVB-MGTR101290-MIB", "signQualMarTLatestError"), ("DVB-MGTR101290-MIB", "signQualMarTActiveTime"), ("DVB-MGTR101290-MIB", "eNDCTestState"), ("DVB-MGTR101290-MIB", "eNDCEnable"), ("DVB-MGTR101290-MIB", "eNDCCounter"), ("DVB-MGTR101290-MIB", "eNDCCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "eNDCCounterReset"), ("DVB-MGTR101290-MIB", "eNDCLatestError"), ("DVB-MGTR101290-MIB", "eNDCActiveTime"), ("DVB-MGTR101290-MIB", "eNDCMeasurementState"), ("DVB-MGTR101290-MIB", "eNDCValue"), ("DVB-MGTR101290-MIB", "outBandEmissTestState"), ("DVB-MGTR101290-MIB", "outBandEmissEnable"), ("DVB-MGTR101290-MIB", "outBandEmissCounter"), ("DVB-MGTR101290-MIB", "outBandEmissCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "outBandEmissCounterReset"), ("DVB-MGTR101290-MIB", "outBandEmissLatestError"), ("DVB-MGTR101290-MIB", "outBandEmissActiveTime"), ("DVB-MGTR101290-MIB", "cablePrefNoiseMarginMin"), ("DVB-MGTR101290-MIB", "cablePrefEstNoiseMarginMin"), ("DVB-MGTR101290-MIB", "cablePrefSignQualBoxSize"), ("DVB-MGTR101290-MIB", "cablePrefSignQualPercentMax"), ("DVB-MGTR101290-MIB", "cablePrefENDBER"), ("DVB-MGTR101290-MIB", "cablePrefENDCtoNSpecified"), ("DVB-MGTR101290-MIB", "cablePrefENDIdeal"), ("DVB-MGTR101290-MIB", "cablePrefENDMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupCable = groupCable.setStatus('current')
groupSatellite = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 7)).setObjects(("DVB-MGTR101290-MIB", "sysAvailabilityTestState"), ("DVB-MGTR101290-MIB", "sysAvailabilityEnable"), ("DVB-MGTR101290-MIB", "sysAvailabilityCounter"), ("DVB-MGTR101290-MIB", "sysAvailabilityCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "sysAvailabilityCounterReset"), ("DVB-MGTR101290-MIB", "sysAvailabilityLatestError"), ("DVB-MGTR101290-MIB", "sysAvailabilityActiveTime"), ("DVB-MGTR101290-MIB", "sysAvailabilityMeasurementState"), ("DVB-MGTR101290-MIB", "sysAvailabilityUnavailableTime"), ("DVB-MGTR101290-MIB", "sysAvailabilityRatio"), ("DVB-MGTR101290-MIB", "sysAvailabilityInSETI"), ("DVB-MGTR101290-MIB", "linkAvailabilityTestState"), ("DVB-MGTR101290-MIB", "linkAvailabilityEnable"), ("DVB-MGTR101290-MIB", "linkAvailabilityCounter"), ("DVB-MGTR101290-MIB", "linkAvailabilityCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "linkAvailabilityCounterReset"), ("DVB-MGTR101290-MIB", "linkAvailabilityLatestError"), ("DVB-MGTR101290-MIB", "linkAvailabilityActiveTime"), ("DVB-MGTR101290-MIB", "linkAvailabilityMeasurementState"), ("DVB-MGTR101290-MIB", "linkAvailabilityUnavailableTime"), ("DVB-MGTR101290-MIB", "linkAvailabilityRatio"), ("DVB-MGTR101290-MIB", "linkAvailabilityInSUTI"), ("DVB-MGTR101290-MIB", "berRSinServiceTestState"), ("DVB-MGTR101290-MIB", "berRSinServiceEnable"), ("DVB-MGTR101290-MIB", "berRSinServiceCounter"), ("DVB-MGTR101290-MIB", "berRSinServiceCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "berRSinServiceCounterReset"), ("DVB-MGTR101290-MIB", "berRSinServiceLatestError"), ("DVB-MGTR101290-MIB", "berRSinServiceActiveTime"), ("DVB-MGTR101290-MIB", "berRSinServiceMeasurementState"), ("DVB-MGTR101290-MIB", "berRSinServiceValue"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerTestState"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerEnable"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerCounter"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerCounterReset"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerLatestError"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerActiveTime"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerMeasurementState"), ("DVB-MGTR101290-MIB", "rfIFsignalPowerValue"), ("DVB-MGTR101290-MIB", "noisePowerTestState"), ("DVB-MGTR101290-MIB", "noisePowerEnable"), ("DVB-MGTR101290-MIB", "noisePowerCounter"), ("DVB-MGTR101290-MIB", "noisePowerCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "noisePowerCounterReset"), ("DVB-MGTR101290-MIB", "noisePowerLatestError"), ("DVB-MGTR101290-MIB", "noisePowerActiveTime"), ("DVB-MGTR101290-MIB", "noisePowerMeasurementState"), ("DVB-MGTR101290-MIB", "noisePowerValue"), ("DVB-MGTR101290-MIB", "merCSTestState"), ("DVB-MGTR101290-MIB", "merCSEnable"), ("DVB-MGTR101290-MIB", "merCSCounter"), ("DVB-MGTR101290-MIB", "merCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "merCSCounterReset"), ("DVB-MGTR101290-MIB", "merCSLatestError"), ("DVB-MGTR101290-MIB", "merCSActiveTime"), ("DVB-MGTR101290-MIB", "merCSMeasurementState"), ("DVB-MGTR101290-MIB", "merCSValue"), ("DVB-MGTR101290-MIB", "steMeanCSTestState"), ("DVB-MGTR101290-MIB", "steMeanCSEnable"), ("DVB-MGTR101290-MIB", "steMeanCSCounter"), ("DVB-MGTR101290-MIB", "steMeanCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "steMeanCSCounterReset"), ("DVB-MGTR101290-MIB", "steMeanCSLatestError"), ("DVB-MGTR101290-MIB", "steMeanCSActiveTime"), ("DVB-MGTR101290-MIB", "steMeanCSMeasurementState"), ("DVB-MGTR101290-MIB", "steMeanCSValue"), ("DVB-MGTR101290-MIB", "steDeviationCSTestState"), ("DVB-MGTR101290-MIB", "steDeviationCSEnable"), ("DVB-MGTR101290-MIB", "steDeviationCSCounter"), ("DVB-MGTR101290-MIB", "steDeviationCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "steDeviationCSCounterReset"), ("DVB-MGTR101290-MIB", "steDeviationCSLatestError"), ("DVB-MGTR101290-MIB", "steDeviationCSActiveTime"), ("DVB-MGTR101290-MIB", "steDeviationCSMeasurementState"), ("DVB-MGTR101290-MIB", "steDeviationCSValue"), ("DVB-MGTR101290-MIB", "csCSTestState"), ("DVB-MGTR101290-MIB", "csCSEnable"), ("DVB-MGTR101290-MIB", "csCSCounter"), ("DVB-MGTR101290-MIB", "csCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "csCSCounterReset"), ("DVB-MGTR101290-MIB", "csCSLatestError"), ("DVB-MGTR101290-MIB", "csCSActiveTime"), ("DVB-MGTR101290-MIB", "csCSMeasurementState"), ("DVB-MGTR101290-MIB", "csCSValue"), ("DVB-MGTR101290-MIB", "aiCSTestState"), ("DVB-MGTR101290-MIB", "aiCSEnable"), ("DVB-MGTR101290-MIB", "aiCSCounter"), ("DVB-MGTR101290-MIB", "aiCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "aiCSCounterReset"), ("DVB-MGTR101290-MIB", "aiCSLatestError"), ("DVB-MGTR101290-MIB", "aiCSActiveTime"), ("DVB-MGTR101290-MIB", "aiCSMeasurementState"), ("DVB-MGTR101290-MIB", "aiCSValue"), ("DVB-MGTR101290-MIB", "qeCSTestState"), ("DVB-MGTR101290-MIB", "qeCSEnable"), ("DVB-MGTR101290-MIB", "qeCSCounter"), ("DVB-MGTR101290-MIB", "qeCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "qeCSCounterReset"), ("DVB-MGTR101290-MIB", "qeCSLatestError"), ("DVB-MGTR101290-MIB", "qeCSActiveTime"), ("DVB-MGTR101290-MIB", "qeCSMeasurementState"), ("DVB-MGTR101290-MIB", "qeCSValue"), ("DVB-MGTR101290-MIB", "rteCSTestState"), ("DVB-MGTR101290-MIB", "rteCSEnable"), ("DVB-MGTR101290-MIB", "rteCSCounter"), ("DVB-MGTR101290-MIB", "rteCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rteCSCounterReset"), ("DVB-MGTR101290-MIB", "rteCSLatestError"), ("DVB-MGTR101290-MIB", "rteCSActiveTime"), ("DVB-MGTR101290-MIB", "rteCSMeasurementState"), ("DVB-MGTR101290-MIB", "rteCSValue"), ("DVB-MGTR101290-MIB", "ciCSTestState"), ("DVB-MGTR101290-MIB", "ciCSEnable"), ("DVB-MGTR101290-MIB", "ciCSCounter"), ("DVB-MGTR101290-MIB", "ciCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "ciCSCounterReset"), ("DVB-MGTR101290-MIB", "ciCSLatestError"), ("DVB-MGTR101290-MIB", "ciCSActiveTime"), ("DVB-MGTR101290-MIB", "ciCSMeasurementState"), ("DVB-MGTR101290-MIB", "ciCSValue"), ("DVB-MGTR101290-MIB", "pjCSTestState"), ("DVB-MGTR101290-MIB", "pjCSEnable"), ("DVB-MGTR101290-MIB", "pjCSCounter"), ("DVB-MGTR101290-MIB", "pjCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "pjCSCounterReset"), ("DVB-MGTR101290-MIB", "pjCSLatestError"), ("DVB-MGTR101290-MIB", "pjCSActiveTime"), ("DVB-MGTR101290-MIB", "pjCSMeasurementState"), ("DVB-MGTR101290-MIB", "pjCSValue"), ("DVB-MGTR101290-MIB", "snrCSTestState"), ("DVB-MGTR101290-MIB", "snrCSEnable"), ("DVB-MGTR101290-MIB", "snrCSCounter"), ("DVB-MGTR101290-MIB", "snrCSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "snrCSCounterReset"), ("DVB-MGTR101290-MIB", "snrCSLatestError"), ("DVB-MGTR101290-MIB", "snrCSActiveTime"), ("DVB-MGTR101290-MIB", "snrCSMeasurementState"), ("DVB-MGTR101290-MIB", "snrCSValue"), ("DVB-MGTR101290-MIB", "cableSatPrefCentreFrequency"), ("DVB-MGTR101290-MIB", "cableSatPrefModulation"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailUATMode"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailN"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailT"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailM"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailTI"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailEBPerCent"), ("DVB-MGTR101290-MIB", "cableSatPrefSysAvailTotalTime"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailUATMode"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailN"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailT"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailM"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailTI"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailUPPerCent"), ("DVB-MGTR101290-MIB", "cableSatPrefLinkAvailTotalTime"), ("DVB-MGTR101290-MIB", "cableSatPrefBERMax"), ("DVB-MGTR101290-MIB", "cableSatPrefSignalPowerMin"), ("DVB-MGTR101290-MIB", "cableSatPrefSignalPowerMax"), ("DVB-MGTR101290-MIB", "cableSatPrefNoisePowerMax"), ("DVB-MGTR101290-MIB", "cableSatPrefMerCSMin"), ("DVB-MGTR101290-MIB", "cableSatPrefSteMeanCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefSteDeviationCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefCsCSMin"), ("DVB-MGTR101290-MIB", "cableSatPrefAiCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefQeCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefRteCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefCiCSMin"), ("DVB-MGTR101290-MIB", "cableSatPrefPjCSMax"), ("DVB-MGTR101290-MIB", "cableSatPrefSnrCSMin"), ("DVB-MGTR101290-MIB", "berViterbiSTestState"), ("DVB-MGTR101290-MIB", "berViterbiSEnable"), ("DVB-MGTR101290-MIB", "berViterbiSCounter"), ("DVB-MGTR101290-MIB", "berViterbiSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "berViterbiSCounterReset"), ("DVB-MGTR101290-MIB", "berViterbiSLatestError"), ("DVB-MGTR101290-MIB", "berViterbiSActiveTime"), ("DVB-MGTR101290-MIB", "berViterbiSMeasurementState"), ("DVB-MGTR101290-MIB", "berViterbiSIValue"), ("DVB-MGTR101290-MIB", "berViterbiSQValue"), ("DVB-MGTR101290-MIB", "berViterbiSMeasurementMethod"), ("DVB-MGTR101290-MIB", "ifSpectrumTestState"), ("DVB-MGTR101290-MIB", "ifSpectrumEnable"), ("DVB-MGTR101290-MIB", "ifSpectrumCounter"), ("DVB-MGTR101290-MIB", "ifSpectrumCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "ifSpectrumCounterReset"), ("DVB-MGTR101290-MIB", "ifSpectrumLatestError"), ("DVB-MGTR101290-MIB", "ifSpectrumActiveTime"), ("DVB-MGTR101290-MIB", "satellitePrefBERMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupSatellite = groupSatellite.setStatus('current')
groupTerrestrial = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 2, 3, 2, 8)).setObjects(("DVB-MGTR101290-MIB", "rfAccuracyTestState"), ("DVB-MGTR101290-MIB", "rfAccuracyEnable"), ("DVB-MGTR101290-MIB", "rfAccuracyCounter"), ("DVB-MGTR101290-MIB", "rfAccuracyCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rfAccuracyCounterReset"), ("DVB-MGTR101290-MIB", "rfAccuracyLatestError"), ("DVB-MGTR101290-MIB", "rfAccuracyActiveTime"), ("DVB-MGTR101290-MIB", "rfAccuracyMeasurementState"), ("DVB-MGTR101290-MIB", "rfAccuracyValue"), ("DVB-MGTR101290-MIB", "rfChannelWidthTestState"), ("DVB-MGTR101290-MIB", "rfChannelWidthEnable"), ("DVB-MGTR101290-MIB", "rfChannelWidthCounter"), ("DVB-MGTR101290-MIB", "rfChannelWidthCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rfChannelWidthCounterReset"), ("DVB-MGTR101290-MIB", "rfChannelWidthLatestError"), ("DVB-MGTR101290-MIB", "rfChannelWidthActiveTime"), ("DVB-MGTR101290-MIB", "rfChannelWidthMeasurementState"), ("DVB-MGTR101290-MIB", "rfChannelWidthValue"), ("DVB-MGTR101290-MIB", "symbolLengthTestState"), ("DVB-MGTR101290-MIB", "symbolLengthEnable"), ("DVB-MGTR101290-MIB", "symbolLengthCounter"), ("DVB-MGTR101290-MIB", "symbolLengthCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "symbolLengthCounterReset"), ("DVB-MGTR101290-MIB", "symbolLengthLatestError"), ("DVB-MGTR101290-MIB", "symbolLengthActiveTime"), ("DVB-MGTR101290-MIB", "symbolLengthMeasurementState"), ("DVB-MGTR101290-MIB", "symbolLengthValue"), ("DVB-MGTR101290-MIB", "rfIfPowerTestState"), ("DVB-MGTR101290-MIB", "rfIfPowerEnable"), ("DVB-MGTR101290-MIB", "rfIfPowerCounter"), ("DVB-MGTR101290-MIB", "rfIfPowerCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rfIfPowerCounterReset"), ("DVB-MGTR101290-MIB", "rfIfPowerLatestError"), ("DVB-MGTR101290-MIB", "rfIfPowerActiveTime"), ("DVB-MGTR101290-MIB", "rfIfPowerMeasurementState"), ("DVB-MGTR101290-MIB", "rfIfPowerValue"), ("DVB-MGTR101290-MIB", "rfIfSpectrumTestState"), ("DVB-MGTR101290-MIB", "rfIfSpectrumEnable"), ("DVB-MGTR101290-MIB", "rfIfSpectrumCounter"), ("DVB-MGTR101290-MIB", "rfIfSpectrumCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "rfIfSpectrumCounterReset"), ("DVB-MGTR101290-MIB", "rfIfSpectrumLatestError"), ("DVB-MGTR101290-MIB", "rfIfSpectrumActiveTime"), ("DVB-MGTR101290-MIB", "eNDTTestState"), ("DVB-MGTR101290-MIB", "eNDTEnable"), ("DVB-MGTR101290-MIB", "eNDTCounter"), ("DVB-MGTR101290-MIB", "eNDTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "eNDTCounterReset"), ("DVB-MGTR101290-MIB", "eNDTLatestError"), ("DVB-MGTR101290-MIB", "eNDTActiveTime"), ("DVB-MGTR101290-MIB", "eNDTMeasurementState"), ("DVB-MGTR101290-MIB", "eNDTValue"), ("DVB-MGTR101290-MIB", "eNFTTestState"), ("DVB-MGTR101290-MIB", "eNFTEnable"), ("DVB-MGTR101290-MIB", "eNFTCounter"), ("DVB-MGTR101290-MIB", "eNFTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "eNFTCounterReset"), ("DVB-MGTR101290-MIB", "eNFTLatestError"), ("DVB-MGTR101290-MIB", "eNFTActiveTime"), ("DVB-MGTR101290-MIB", "eNFTMeasurementState"), ("DVB-MGTR101290-MIB", "eNFTValue"), ("DVB-MGTR101290-MIB", "eNDTLPTestState"), ("DVB-MGTR101290-MIB", "eNDTLPEnable"), ("DVB-MGTR101290-MIB", "eNDTLPCounter"), ("DVB-MGTR101290-MIB", "eNDTLPCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "eNDTLPCounterReset"), ("DVB-MGTR101290-MIB", "eNDTLPLatestError"), ("DVB-MGTR101290-MIB", "eNDTLPActiveTime"), ("DVB-MGTR101290-MIB", "eNDTLPMeasurementState"), ("DVB-MGTR101290-MIB", "eNDTLPValue"), ("DVB-MGTR101290-MIB", "eNFTLPTestState"), ("DVB-MGTR101290-MIB", "eNFTLPEnable"), ("DVB-MGTR101290-MIB", "eNFTLPCounter"), ("DVB-MGTR101290-MIB", "eNFTLPCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "eNFTLPCounterReset"), ("DVB-MGTR101290-MIB", "eNFTLPLatestError"), ("DVB-MGTR101290-MIB", "eNFTLPActiveTime"), ("DVB-MGTR101290-MIB", "eNFTLPMeasurementState"), ("DVB-MGTR101290-MIB", "eNFTLPValue"), ("DVB-MGTR101290-MIB", "linearityTestState"), ("DVB-MGTR101290-MIB", "linearityEnable"), ("DVB-MGTR101290-MIB", "linearityCounter"), ("DVB-MGTR101290-MIB", "linearityCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "linearityCounterReset"), ("DVB-MGTR101290-MIB", "linearityLatestError"), ("DVB-MGTR101290-MIB", "linearityActiveTime"), ("DVB-MGTR101290-MIB", "linearityMeasurementState"), ("DVB-MGTR101290-MIB", "linearityValue"), ("DVB-MGTR101290-MIB", "berViterbiTTestState"), ("DVB-MGTR101290-MIB", "berViterbiTEnable"), ("DVB-MGTR101290-MIB", "berViterbiTCounter"), ("DVB-MGTR101290-MIB", "berViterbiTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "berViterbiTCounterReset"), ("DVB-MGTR101290-MIB", "berViterbiTLatestError"), ("DVB-MGTR101290-MIB", "berViterbiTActiveTime"), ("DVB-MGTR101290-MIB", "berViterbiTMeasurementState"), ("DVB-MGTR101290-MIB", "berViterbiTValue"), ("DVB-MGTR101290-MIB", "berViterbiTLPTestState"), ("DVB-MGTR101290-MIB", "berViterbiTLPEnable"), ("DVB-MGTR101290-MIB", "berViterbiTLPCounter"), ("DVB-MGTR101290-MIB", "berViterbiTLPCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "berViterbiTLPCounterReset"), ("DVB-MGTR101290-MIB", "berViterbiTLPLatestError"), ("DVB-MGTR101290-MIB", "berViterbiTLPActiveTime"), ("DVB-MGTR101290-MIB", "berViterbiTLPMeasurementState"), ("DVB-MGTR101290-MIB", "berViterbiTLPValue"), ("DVB-MGTR101290-MIB", "berRSTestState"), ("DVB-MGTR101290-MIB", "berRSEnable"), ("DVB-MGTR101290-MIB", "berRSCounter"), ("DVB-MGTR101290-MIB", "berRSCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "berRSCounterReset"), ("DVB-MGTR101290-MIB", "berRSLatestError"), ("DVB-MGTR101290-MIB", "berRSActiveTime"), ("DVB-MGTR101290-MIB", "berRSMeasurementState"), ("DVB-MGTR101290-MIB", "berRSValue"), ("DVB-MGTR101290-MIB", "berRSLPTestState"), ("DVB-MGTR101290-MIB", "berRSLPEnable"), ("DVB-MGTR101290-MIB", "berRSLPCounter"), ("DVB-MGTR101290-MIB", "berRSLPCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "berRSLPCounterReset"), ("DVB-MGTR101290-MIB", "berRSLPLatestError"), ("DVB-MGTR101290-MIB", "berRSLPActiveTime"), ("DVB-MGTR101290-MIB", "berRSLPMeasurementState"), ("DVB-MGTR101290-MIB", "berRSLPValue"), ("DVB-MGTR101290-MIB", "merTTestState"), ("DVB-MGTR101290-MIB", "merTEnable"), ("DVB-MGTR101290-MIB", "merTCounter"), ("DVB-MGTR101290-MIB", "merTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "merTCounterReset"), ("DVB-MGTR101290-MIB", "merTLatestError"), ("DVB-MGTR101290-MIB", "merTActiveTime"), ("DVB-MGTR101290-MIB", "merTMeasurementState"), ("DVB-MGTR101290-MIB", "merTValue"), ("DVB-MGTR101290-MIB", "steMeanTTestState"), ("DVB-MGTR101290-MIB", "steMeanTEnable"), ("DVB-MGTR101290-MIB", "steMeanTCounter"), ("DVB-MGTR101290-MIB", "steMeanTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "steMeanTCounterReset"), ("DVB-MGTR101290-MIB", "steMeanTLatestError"), ("DVB-MGTR101290-MIB", "steMeanTActiveTime"), ("DVB-MGTR101290-MIB", "steMeanTMeasurementState"), ("DVB-MGTR101290-MIB", "steMeanTValue"), ("DVB-MGTR101290-MIB", "steDeviationTTestState"), ("DVB-MGTR101290-MIB", "steDeviationTEnable"), ("DVB-MGTR101290-MIB", "steDeviationTCounter"), ("DVB-MGTR101290-MIB", "steDeviationTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "steDeviationTCounterReset"), ("DVB-MGTR101290-MIB", "steDeviationTLatestError"), ("DVB-MGTR101290-MIB", "steDeviationTActiveTime"), ("DVB-MGTR101290-MIB", "steDeviationTMeasurementState"), ("DVB-MGTR101290-MIB", "steDeviationTValue"), ("DVB-MGTR101290-MIB", "csTTestState"), ("DVB-MGTR101290-MIB", "csTEnable"), ("DVB-MGTR101290-MIB", "csTCounter"), ("DVB-MGTR101290-MIB", "csTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "csTCounterReset"), ("DVB-MGTR101290-MIB", "csTLatestError"), ("DVB-MGTR101290-MIB", "csTActiveTime"), ("DVB-MGTR101290-MIB", "csTMeasurementState"), ("DVB-MGTR101290-MIB", "csTValue"), ("DVB-MGTR101290-MIB", "aiTTestState"), ("DVB-MGTR101290-MIB", "aiTEnable"), ("DVB-MGTR101290-MIB", "aiTCounter"), ("DVB-MGTR101290-MIB", "aiTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "aiTCounterReset"), ("DVB-MGTR101290-MIB", "aiTLatestError"), ("DVB-MGTR101290-MIB", "aiTActiveTime"), ("DVB-MGTR101290-MIB", "aiTMeasurementState"), ("DVB-MGTR101290-MIB", "aiTValue"), ("DVB-MGTR101290-MIB", "qeTTestState"), ("DVB-MGTR101290-MIB", "qeTEnable"), ("DVB-MGTR101290-MIB", "qeTCounter"), ("DVB-MGTR101290-MIB", "qeTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "qeTCounterReset"), ("DVB-MGTR101290-MIB", "qeTLatestError"), ("DVB-MGTR101290-MIB", "qeTActiveTime"), ("DVB-MGTR101290-MIB", "qeTMeasurementState"), ("DVB-MGTR101290-MIB", "qeTValue"), ("DVB-MGTR101290-MIB", "pjTTestState"), ("DVB-MGTR101290-MIB", "pjTEnable"), ("DVB-MGTR101290-MIB", "pjTCounter"), ("DVB-MGTR101290-MIB", "pjTCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "pjTCounterReset"), ("DVB-MGTR101290-MIB", "pjTLatestError"), ("DVB-MGTR101290-MIB", "pjTActiveTime"), ("DVB-MGTR101290-MIB", "pjTMeasurementState"), ("DVB-MGTR101290-MIB", "pjTValue"), ("DVB-MGTR101290-MIB", "mipSyntaxState"), ("DVB-MGTR101290-MIB", "mipSyntaxEnable"), ("DVB-MGTR101290-MIB", "mipSyntaxCounter"), ("DVB-MGTR101290-MIB", "mipSyntaxCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "mipSyntaxCounterReset"), ("DVB-MGTR101290-MIB", "mipSyntaxLatestError"), ("DVB-MGTR101290-MIB", "mipSyntaxActiveTime"), ("DVB-MGTR101290-MIB", "sepEtiTestState"), ("DVB-MGTR101290-MIB", "sepEtiEnable"), ("DVB-MGTR101290-MIB", "sepEtiCounter"), ("DVB-MGTR101290-MIB", "sepEtiCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "sepEtiCounterReset"), ("DVB-MGTR101290-MIB", "sepEtiLatestError"), ("DVB-MGTR101290-MIB", "sepEtiActiveTime"), ("DVB-MGTR101290-MIB", "sepEtiMeasurementState"), ("DVB-MGTR101290-MIB", "sepEtiValue"), ("DVB-MGTR101290-MIB", "sepSetiTestState"), ("DVB-MGTR101290-MIB", "sepSetiEnable"), ("DVB-MGTR101290-MIB", "sepSetiCounter"), ("DVB-MGTR101290-MIB", "sepSetiCounterDiscontinuity"), ("DVB-MGTR101290-MIB", "sepSetiCounterReset"), ("DVB-MGTR101290-MIB", "sepSetiLatestError"), ("DVB-MGTR101290-MIB", "sepSetiActiveTime"), ("DVB-MGTR101290-MIB", "sepSetiMeasurementState"), ("DVB-MGTR101290-MIB", "sepSetiValue"), ("DVB-MGTR101290-MIB", "terrestrialPrefCentreFrequency"), ("DVB-MGTR101290-MIB", "terrestrialPrefBandwidth"), ("DVB-MGTR101290-MIB", "terrestrialPrefModulation"), ("DVB-MGTR101290-MIB", "terrestrialPrefTransmissionMode"), ("DVB-MGTR101290-MIB", "terrestrialPrefGuardInterval"), ("DVB-MGTR101290-MIB", "terrestrialPrefHierarchical"), ("DVB-MGTR101290-MIB", "terrestrialPrefCentreFreqExpected"), ("DVB-MGTR101290-MIB", "terrestrialPrefCentreFreqLimit"), ("DVB-MGTR101290-MIB", "terrestrialPrefChannelWidthLimit"), ("DVB-MGTR101290-MIB", "terrestrialPrefSymbolLengthLimit"), ("DVB-MGTR101290-MIB", "terrestrialPrefPowerMin"), ("DVB-MGTR101290-MIB", "terrestrialPrefPowerMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefENDBER"), ("DVB-MGTR101290-MIB", "terrestrialPrefENDIdeal"), ("DVB-MGTR101290-MIB", "terrestrialPrefENDMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefENFIdeal"), ("DVB-MGTR101290-MIB", "terrestrialPrefENFMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefENDLPIdeal"), ("DVB-MGTR101290-MIB", "terrestrialPrefENDLPMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefENFLPIdeal"), ("DVB-MGTR101290-MIB", "terrestrialPrefENFLPMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefLinearityMin"), ("DVB-MGTR101290-MIB", "terrestrialPrefBERViterbiMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefBERViterbiLPMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefBERRSMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefBERRSLPMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefMerTMin"), ("DVB-MGTR101290-MIB", "terrestrialPrefSteMeanMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefSteDeviationMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefCsMin"), ("DVB-MGTR101290-MIB", "terrestrialPrefAiMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefQeMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefPjMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefMIPTimingLimit"), ("DVB-MGTR101290-MIB", "terrestrialPrefMIPDeviationMax"), ("DVB-MGTR101290-MIB", "terrestrialPrefSEPUATMode"), ("DVB-MGTR101290-MIB", "terrestrialPrefSEPN"), ("DVB-MGTR101290-MIB", "terrestrialPrefSEPT"), ("DVB-MGTR101290-MIB", "terrestrialPrefSEPM"), ("DVB-MGTR101290-MIB", "terrestrialPrefSEPTI"), ("DVB-MGTR101290-MIB", "terrestrialPrefSEPEBPerCent"), ("DVB-MGTR101290-MIB", "terrestrialPrefSEPMeasurementInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupTerrestrial = groupTerrestrial.setStatus('current')
mibBuilder.exportSymbols("DVB-MGTR101290-MIB", steDeviationTEntry=steDeviationTEntry, capabilityTSAvailability=capabilityTSAvailability, outBandEmissCounter=outBandEmissCounter, csTTable=csTTable, berRSInputNumber=berRSInputNumber, pjTCounter=pjTCounter, iqAnalysisCS=iqAnalysisCS, outBandEmissTestState=outBandEmissTestState, merTCounterReset=merTCounterReset, qeTActiveTime=qeTActiveTime, eNDCEntry=eNDCEntry, sepSetiMeasurementState=sepSetiMeasurementState, tsTestsSummaryEntry=tsTestsSummaryEntry, eNFTLPMeasurementState=eNFTLPMeasurementState, mipSyntaxTable=mipSyntaxTable, linearityEntry=linearityEntry, controlSynchronizationInputNumber=controlSynchronizationInputNumber, cableSatPrefQeCSMax=cableSatPrefQeCSMax, tsConsistencyActiveTime=tsConsistencyActiveTime, berViterbiTLPMeasurementState=berViterbiTLPMeasurementState, terrestrialPrefGuardInterval=terrestrialPrefGuardInterval, symbolLengthMeasurementState=symbolLengthMeasurementState, berRSLPActiveTime=berRSLPActiveTime, tsServicePerformanceTable=tsServicePerformanceTable, tsServiceBitRateNomenclature=tsServiceBitRateNomenclature, tsMeasurePrefServiceBitRateElement=tsMeasurePrefServiceBitRateElement, cableSatPrefCsCSMin=cableSatPrefCsCSMin, tsServicePerformanceCounter=tsServicePerformanceCounter, trapPrefix=trapPrefix, Modulation=Modulation, tsPcrMeasurementNumber=tsPcrMeasurementNumber, steDeviationTLatestError=steDeviationTLatestError, rteCSCounterReset=rteCSCounterReset, eNFTCounter=eNFTCounter, capabilityTS=capabilityTS, tsTransportStreamBitRateEntry=tsTransportStreamBitRateEntry, tsTestsPrefSDTOtherIntervalMax=tsTestsPrefSDTOtherIntervalMax, rfSystemInputNumber=rfSystemInputNumber, csCSCounter=csCSCounter, tsSPPrefThreshold=tsSPPrefThreshold, berViterbiTValue=berViterbiTValue, sysAvailabilityTestState=sysAvailabilityTestState, csCSMeasurementState=csCSMeasurementState, tsTestsPrefNITActualIntervalMin=tsTestsPrefNITActualIntervalMin, signQualMarTActiveTime=signQualMarTActiveTime, pjTTable=pjTTable, tsPcrMeasurementMeasurementState=tsPcrMeasurementMeasurementState, sepEtiValue=sepEtiValue, tsServicePerformanceNumber=tsServicePerformanceNumber, capabilityCablePollInterval=capabilityCablePollInterval, linkAvailabilityCounter=linkAvailabilityCounter, tsPcrMeasurementTable=tsPcrMeasurementTable, tsPIDBitRateState=tsPIDBitRateState, eNDTCounterReset=eNDTCounterReset, merTMeasurementState=merTMeasurementState, pjTEnable=pjTEnable, aiTMeasurementState=aiTMeasurementState, capabilitySatelliteGroup=capabilitySatelliteGroup, tsTestsPrefPIDRowStatus=tsTestsPrefPIDRowStatus, tsPIDBitRateTable=tsPIDBitRateTable, PYSNMP_MODULE_ID=tr101290, linkAvailabilityCounterDiscontinuity=linkAvailabilityCounterDiscontinuity, steMeanCSValue=steMeanCSValue, trapControlTable=trapControlTable, snrCSValue=snrCSValue, pjTInputNumber=pjTInputNumber, pjTTestState=pjTTestState, tsMeasurePrefInputNumber=tsMeasurePrefInputNumber, tsTestsPIDActiveTime=tsTestsPIDActiveTime, estNoiseMarginValue=estNoiseMarginValue, BERMeasurementMethod=BERMeasurementMethod, berViterbiSTable=berViterbiSTable, sepEtiCounterDiscontinuity=sepEtiCounterDiscontinuity, symbolLengthActiveTime=symbolLengthActiveTime, eNDCValue=eNDCValue, ciCSEnable=ciCSEnable, merCSCounter=merCSCounter, rteCSInputNumber=rteCSInputNumber, steDeviationCSCounterReset=steDeviationCSCounterReset, eNFTLPTable=eNFTLPTable, tsTestsPrefSDTActualIntervalMax=tsTestsPrefSDTActualIntervalMax, tsPIDBitRatePID=tsPIDBitRatePID, tsPcrMeasurementPID=tsPcrMeasurementPID, eNDTLPEnable=eNDTLPEnable, capabilitySatellitePollInterval=capabilitySatellitePollInterval, rfAccuracyCounter=rfAccuracyCounter, linkAvailabilityTestState=linkAvailabilityTestState, aiCSTestState=aiCSTestState, tsTestsPrefNITOtherIntervalMax=tsTestsPrefNITOtherIntervalMax, IndexPCRMeasurement=IndexPCRMeasurement, berViterbiSMeasurementState=berViterbiSMeasurementState, Enable=Enable, noiseMarginCounterReset=noiseMarginCounterReset, steDeviationTValue=steDeviationTValue, rfTerr=rfTerr, eNFTLPLatestError=eNFTLPLatestError, sysAvailabilityInputNumber=sysAvailabilityInputNumber, trapControlInputNumber=trapControlInputNumber, signQualMarTLatestError=signQualMarTLatestError, mg=mg, steDeviationCSActiveTime=steDeviationCSActiveTime, trapControlGenerationTime=trapControlGenerationTime, noiseMarginEnable=noiseMarginEnable, eNDTLPMeasurementState=eNDTLPMeasurementState, steMeanTCounter=steMeanTCounter, estNoiseMarginInputNumber=estNoiseMarginInputNumber, terrestrialPreferencesTable=terrestrialPreferencesTable, tsServicePerformancePreferencesTable=tsServicePerformancePreferencesTable, satellitePrefBERMax=satellitePrefBERMax, tsConsistencyEntry=tsConsistencyEntry, tsMeasurePrefPIDBitRateElement=tsMeasurePrefPIDBitRateElement, tsServicePerformanceLatestError=tsServicePerformanceLatestError, berRSinServiceValue=berRSinServiceValue, noiseMarginInputNumber=noiseMarginInputNumber, rfIfSpectrumEnable=rfIfSpectrumEnable, ActiveTime=ActiveTime, steDeviationTTestState=steDeviationTTestState, terrestrialPrefPowerMin=terrestrialPrefPowerMin, merTEnable=merTEnable, tsTransportStreamBitRateMeasurementState=tsTransportStreamBitRateMeasurementState, berViterbiSMeasurementMethod=berViterbiSMeasurementMethod, cableSatPrefCentreFrequency=cableSatPrefCentreFrequency, eNDCCounterDiscontinuity=eNDCCounterDiscontinuity, tsTestsPIDTestNumber=tsTestsPIDTestNumber, berRSValue=berRSValue, aiTInputNumber=aiTInputNumber, tsServiceBitRateLatestError=tsServiceBitRateLatestError, eNDCTestState=eNDCTestState, tsServicePerformanceError=tsServicePerformanceError, csCSEnable=csCSEnable, linearityValue=linearityValue, noiseMarginTable=noiseMarginTable, merCSTestState=merCSTestState, capabilityCableEntry=capabilityCableEntry, steDeviationTActiveTime=steDeviationTActiveTime, signQualMarTCounterDiscontinuity=signQualMarTCounterDiscontinuity, eNDCEnable=eNDCEnable, tsServiceBitRateService=tsServiceBitRateService, pjCSCounterReset=pjCSCounterReset, tsTransportStreamBitRateCounterReset=tsTransportStreamBitRateCounterReset, tsServicePerformanceEntry=tsServicePerformanceEntry, rfIfPowerTable=rfIfPowerTable, rfIfPowerCounter=rfIfPowerCounter, capabilityTSGroup=capabilityTSGroup, rfIFsignalPowerEntry=rfIFsignalPowerEntry, csCSLatestError=csCSLatestError, estNoiseMarginTestState=estNoiseMarginTestState, rfIfSpectrumCounterDiscontinuity=rfIfSpectrumCounterDiscontinuity, tsMeasurePreferencesEntry=tsMeasurePreferencesEntry, merTEntry=merTEntry, linearityTable=linearityTable, tsMeasurePrefPIDBitRateTau=tsMeasurePrefPIDBitRateTau, aiCSMeasurementState=aiCSMeasurementState, berRSTestState=berRSTestState, noisePowerLatestError=noisePowerLatestError, aiTLatestError=aiTLatestError, terrestrialPrefMerTMin=terrestrialPrefMerTMin, linkAvailabilityMeasurementState=linkAvailabilityMeasurementState, rfIFsignalPowerLatestError=rfIFsignalPowerLatestError, berViterbiTLPCounterDiscontinuity=berViterbiTLPCounterDiscontinuity, berRSinServiceMeasurementState=berRSinServiceMeasurementState, tsMeasurePrefServiceRowStatus=tsMeasurePrefServiceRowStatus, symbolLengthCounter=symbolLengthCounter, linkAvailabilityTable=linkAvailabilityTable, ifSpectrumTestState=ifSpectrumTestState, berViterbiTLPActiveTime=berViterbiTLPActiveTime, mipSyntaxCounter=mipSyntaxCounter, tsPIDBitRateLatestError=tsPIDBitRateLatestError, ciCSMeasurementState=ciCSMeasurementState, rfAccuracyTable=rfAccuracyTable, capabilityCableSatOID=capabilityCableSatOID, sepSetiLatestError=sepSetiLatestError, rfChannelWidthInputNumber=rfChannelWidthInputNumber, rfIfPowerTestState=rfIfPowerTestState, signQualMarTEnable=signQualMarTEnable, tsTestsPrefNITTableIntervalMax=tsTestsPrefNITTableIntervalMax, capabilityTSEntry=capabilityTSEntry, pjCSCounter=pjCSCounter, tsMeasurePrefAllServiceBitRateElement=tsMeasurePrefAllServiceBitRateElement, sysAvailabilityCounterDiscontinuity=sysAvailabilityCounterDiscontinuity, cableSatPrefSnrCSMin=cableSatPrefSnrCSMin, cablePrefENDBER=cablePrefENDBER, tr101290Objects=tr101290Objects, tsTestsPrefEITSActualNearTableIntervalMax=tsTestsPrefEITSActualNearTableIntervalMax, controlSynchronizationTable=controlSynchronizationTable, tsPcrMeasurementCounterDiscontinuity=tsPcrMeasurementCounterDiscontinuity, linkAvailabilityEntry=linkAvailabilityEntry, steMeanTInputNumber=steMeanTInputNumber, cableSatPrefSysAvailT=cableSatPrefSysAvailT, eNFTLPEnable=eNFTLPEnable, estNoiseMarginCounterReset=estNoiseMarginCounterReset, tsPIDBitRateCounterReset=tsPIDBitRateCounterReset, steMeanTTestState=steMeanTTestState, symbolLengthCounterReset=symbolLengthCounterReset, mipSyntaxTestNumber=mipSyntaxTestNumber, tsPcrMeasurementState=tsPcrMeasurementState, tsMeasurePreferencesServiceEntry=tsMeasurePreferencesServiceEntry, qeCSLatestError=qeCSLatestError, tr101290Compliances=tr101290Compliances, cableSatPreferencesEntry=cableSatPreferencesEntry, pjTLatestError=pjTLatestError, tsTestsSummaryActiveTime=tsTestsSummaryActiveTime, linearityInputNumber=linearityInputNumber, terrestrialPrefSymbolLengthLimit=terrestrialPrefSymbolLengthLimit, rfAccuracyEnable=rfAccuracyEnable, tsConsistencyLatestError=tsConsistencyLatestError, berRSinServiceCounterDiscontinuity=berRSinServiceCounterDiscontinuity, tsTestsPrefPATSectionIntervalMax=tsTestsPrefPATSectionIntervalMax, cableSatPrefLinkAvailUATMode=cableSatPrefLinkAvailUATMode, tsPcrMeasurementValue=tsPcrMeasurementValue, symbolLengthEntry=symbolLengthEntry, berViterbiTCounter=berViterbiTCounter, tsServiceBitRateCounterDiscontinuity=tsServiceBitRateCounterDiscontinuity, tsPIDBitRateMeasurementState=tsPIDBitRateMeasurementState, TestSummary=TestSummary, rfIfPowerMeasurementState=rfIfPowerMeasurementState, berRSMeasurementState=berRSMeasurementState, noisePowerCounter=noisePowerCounter, tsTestsPreferencesPIDTable=tsTestsPreferencesPIDTable, mipSyntaxCounterDiscontinuity=mipSyntaxCounterDiscontinuity, tsTestsPrefPTSIntervalMax=tsTestsPrefPTSIntervalMax, cableSatPrefAiCSMax=cableSatPrefAiCSMax, sepEtiEntry=sepEtiEntry, tsTestsPrefEITSActualFarTableIntervalMax=tsTestsPrefEITSActualFarTableIntervalMax, steDeviationCSLatestError=steDeviationCSLatestError, noiseMarginMeasurementState=noiseMarginMeasurementState, rfIfSpectrumCounterReset=rfIfSpectrumCounterReset, capabilityTSOID=capabilityTSOID, tsMeasurePrefPIDRowStatus=tsMeasurePrefPIDRowStatus, tr101290CableSat=tr101290CableSat, noisePowerCounterDiscontinuity=noisePowerCounterDiscontinuity, berRSLPLatestError=berRSLPLatestError, berRSEnable=berRSEnable, tsMeasurePrefTSBitRateMax=tsMeasurePrefTSBitRateMax, sepSetiInputNumber=sepSetiInputNumber, csCSInputNumber=csCSInputNumber, capabilityTerrestrialAvailability=capabilityTerrestrialAvailability, cableSatPrefLinkAvailTotalTime=cableSatPrefLinkAvailTotalTime, sepEtiCounter=sepEtiCounter, tsTestsPIDPID=tsTestsPIDPID, tsMeasurePrefServiceInputNumber=tsMeasurePrefServiceInputNumber, csCSValue=csCSValue, snrCSEntry=snrCSEntry, groupTerrestrial=groupTerrestrial, capabilityCableOID=capabilityCableOID, cableSatPrefSysAvailTI=cableSatPrefSysAvailTI, berRSLPTestState=berRSLPTestState, tsTestsPrefEITOtherIntervalMax=tsTestsPrefEITOtherIntervalMax, cableSatPrefLinkAvailM=cableSatPrefLinkAvailM, berRSLPCounterDiscontinuity=berRSLPCounterDiscontinuity, capabilityCable=capabilityCable, rfAccuracyMeasurementState=rfAccuracyMeasurementState, merTValue=merTValue, eNDTLPInputNumber=eNDTLPInputNumber)
mibBuilder.exportSymbols("DVB-MGTR101290-MIB", eNDCInputNumber=eNDCInputNumber, sepSetiActiveTime=sepSetiActiveTime, rfChannelWidthEnable=rfChannelWidthEnable, tsMeasurePrefServiceService=tsMeasurePrefServiceService, qeTCounterDiscontinuity=qeTCounterDiscontinuity, tsTestsPrefSDTActualIntervalMin=tsTestsPrefSDTActualIntervalMin, tsConsistencyTable=tsConsistencyTable, eNDTCounter=eNDTCounter, aiCSValue=aiCSValue, eNFTLPCounterReset=eNFTLPCounterReset, groupTraps=groupTraps, terrestrialPrefBERViterbiLPMax=terrestrialPrefBERViterbiLPMax, berViterbiSEnable=berViterbiSEnable, tsTransportStreamBitRateValue=tsTransportStreamBitRateValue, rfChannelWidthTestState=rfChannelWidthTestState, berViterbiTLPCounter=berViterbiTLPCounter, noiseMarginLatestError=noiseMarginLatestError, tsMeasurePrefTSBitRateElement=tsMeasurePrefTSBitRateElement, rfChannelWidthEntry=rfChannelWidthEntry, rfChannelWidthValue=rfChannelWidthValue, berRSLPInputNumber=berRSLPInputNumber, controlNow=controlNow, tsTestsPrefPCRDiscontinuityMax=tsTestsPrefPCRDiscontinuityMax, rfChannelWidthLatestError=rfChannelWidthLatestError, terrestrialPrefHierarchical=terrestrialPrefHierarchical, merCSCounterReset=merCSCounterReset, qeTEntry=qeTEntry, noiseMarginActiveTime=noiseMarginActiveTime, eNFTLPCounterDiscontinuity=eNFTLPCounterDiscontinuity, eNDTLatestError=eNDTLatestError, rteCSTestState=rteCSTestState, berRSTable=berRSTable, tsTestsSummaryLatestError=tsTestsSummaryLatestError, DeliverySystemType=DeliverySystemType, linkAvailabilityInputNumber=linkAvailabilityInputNumber, tsPIDBitRateNomenclature=tsPIDBitRateNomenclature, qeCSEnable=qeCSEnable, ciCSActiveTime=ciCSActiveTime, aiTTestState=aiTTestState, mipSyntaxInputNumber=mipSyntaxInputNumber, aiCSEnable=aiCSEnable, sepSetiCounterReset=sepSetiCounterReset, terrestrialPrefAiMax=terrestrialPrefAiMax, terrestrialPrefSEPTI=terrestrialPrefSEPTI, eNDCTable=eNDCTable, cableSatPrefSignalPowerMin=cableSatPrefSignalPowerMin, BitRateElement=BitRateElement, qeTInputNumber=qeTInputNumber, rfAccuracyTestState=rfAccuracyTestState, mipSyntaxCounterReset=mipSyntaxCounterReset, capabilityCableSatTable=capabilityCableSatTable, estNoiseMarginEnable=estNoiseMarginEnable, ciCSCounter=ciCSCounter, eNDTLPCounter=eNDTLPCounter, symbolLengthCounterDiscontinuity=symbolLengthCounterDiscontinuity, iqAnalysisT=iqAnalysisT, tsMeasurePrefAllPIDBitRateN=tsMeasurePrefAllPIDBitRateN, symbolLengthTable=symbolLengthTable, eNFTTable=eNFTTable, mipSyntaxState=mipSyntaxState, csTInputNumber=csTInputNumber, terrestrialPrefSteMeanMax=terrestrialPrefSteMeanMax, qeCSTestState=qeCSTestState, linearityCounterReset=linearityCounterReset, terrestrialPrefChannelWidthLimit=terrestrialPrefChannelWidthLimit, ciCSCounterReset=ciCSCounterReset, tsTransportStreamBitRateInputNumber=tsTransportStreamBitRateInputNumber, cablePrefNoiseMarginMin=cablePrefNoiseMarginMin, tsTestsPIDTable=tsTestsPIDTable, estNoiseMarginCounter=estNoiseMarginCounter, sysAvailabilityEntry=sysAvailabilityEntry, qeTMeasurementState=qeTMeasurementState, eNDTActiveTime=eNDTActiveTime, signQualMarTTestState=signQualMarTTestState, controlEventPersistence=controlEventPersistence, terrestrialPrefENDLPIdeal=terrestrialPrefENDLPIdeal, tsMeasurePrefPCRFOMax=tsMeasurePrefPCRFOMax, capabilityTerrestrial=capabilityTerrestrial, qeTCounter=qeTCounter, berRSEntry=berRSEntry, rfIfSpectrumCounter=rfIfSpectrumCounter, steDeviationCSEntry=steDeviationCSEntry, capabilityCableSatAvailability=capabilityCableSatAvailability, mipSyntaxLatestError=mipSyntaxLatestError, berRSinServiceCounter=berRSinServiceCounter, terrestrialPrefENDIdeal=terrestrialPrefENDIdeal, berViterbiTLPCounterReset=berViterbiTLPCounterReset, tsTestsPrefInputNumber=tsTestsPrefInputNumber, measurementFailTrap=measurementFailTrap, cablePrefSignQualPercentMax=cablePrefSignQualPercentMax, terrestrialPrefBERRSMax=terrestrialPrefBERRSMax, tsMeasurePrefAllPIDBitRateTau=tsMeasurePrefAllPIDBitRateTau, tsSPPrefInputNumber=tsSPPrefInputNumber, csCSCounterDiscontinuity=csCSCounterDiscontinuity, groupCable=groupCable, eNDCCounterReset=eNDCCounterReset, systemErrorPerformance=systemErrorPerformance, steMeanCSInputNumber=steMeanCSInputNumber, signQualMarTCounterReset=signQualMarTCounterReset, tsTestsPrefSDTOtherTableIntervalMax=tsTestsPrefSDTOtherTableIntervalMax, outBandEmissEnable=outBandEmissEnable, eNFTLPActiveTime=eNFTLPActiveTime, tsTestsPIDLatestError=tsTestsPIDLatestError, trapControlOID=trapControlOID, rfIfPowerActiveTime=rfIfPowerActiveTime, trapControlPeriod=trapControlPeriod, eNFTTestState=eNFTTestState, steMeanCSActiveTime=steMeanCSActiveTime, snrCSLatestError=snrCSLatestError, terrestrialPrefBERRSLPMax=terrestrialPrefBERRSLPMax, rfIFsignalPowerEnable=rfIFsignalPowerEnable, tsMeasurePrefTSBitRateTau=tsMeasurePrefTSBitRateTau, berViterbiSActiveTime=berViterbiSActiveTime, eNDTEnable=eNDTEnable, sysAvailabilityActiveTime=sysAvailabilityActiveTime, tsPIDBitRateEnable=tsPIDBitRateEnable, linkAvailabilityActiveTime=linkAvailabilityActiveTime, eNDTEntry=eNDTEntry, cableSatPreferencesTable=cableSatPreferencesTable, pjCSActiveTime=pjCSActiveTime, berViterbiTActiveTime=berViterbiTActiveTime, steMeanTActiveTime=steMeanTActiveTime, outBandEmissInputNumber=outBandEmissInputNumber, UATMode=UATMode, outBandEmissLatestError=outBandEmissLatestError, terrestrialPrefQeMax=terrestrialPrefQeMax, berRSLPMeasurementState=berRSLPMeasurementState, berRSLPTable=berRSLPTable, tsTestsSummaryTable=tsTestsSummaryTable, tsTestsPIDInputNumber=tsTestsPIDInputNumber, tsTestsPrefPIDReferredIntervalMax=tsTestsPrefPIDReferredIntervalMax, merTCounterDiscontinuity=merTCounterDiscontinuity, eNFTLatestError=eNFTLatestError, linkAvailabilityInSUTI=linkAvailabilityInSUTI, capabilitySatelliteEntry=capabilitySatelliteEntry, sepEtiTestState=sepEtiTestState, tsMeasurePrefPIDPID=tsMeasurePrefPIDPID, ciCSCounterDiscontinuity=ciCSCounterDiscontinuity, berViterbiTEnable=berViterbiTEnable, sepSetiEntry=sepSetiEntry, InputNumber=InputNumber, tsPcrMeasurementActiveTime=tsPcrMeasurementActiveTime, controlRFSystemEntry=controlRFSystemEntry, merCSMeasurementState=merCSMeasurementState, IndexMIPSyntaxTest=IndexMIPSyntaxTest, capabilitySatelliteAvailability=capabilitySatelliteAvailability, sepSetiEnable=sepSetiEnable, cablePreferencesEntry=cablePreferencesEntry, cableSatPrefRteCSMax=cableSatPrefRteCSMax, measurementUnknownTrap=measurementUnknownTrap, steDeviationCSCounterDiscontinuity=steDeviationCSCounterDiscontinuity, bitRate=bitRate, ciCSValue=ciCSValue, steMeanTValue=steMeanTValue, GroupAvailability=GroupAvailability, berRSCounterReset=berRSCounterReset, rteCSValue=rteCSValue, tr101290Control=tr101290Control, tsMeasurePrefPIDBitRateMin=tsMeasurePrefPIDBitRateMin, capabilityMIBRevision=capabilityMIBRevision, berRSinServiceEnable=berRSinServiceEnable, tsTestsPIDCounterDiscontinuity=tsTestsPIDCounterDiscontinuity, rfChannelWidthCounterReset=rfChannelWidthCounterReset, tsMeasurePreferencesServiceTable=tsMeasurePreferencesServiceTable, rteCSMeasurementState=rteCSMeasurementState, capabilityTerrestrialPollInterval=capabilityTerrestrialPollInterval, tsServicePerformanceCounterReset=tsServicePerformanceCounterReset, TransportStreamID=TransportStreamID, linkAvailabilityUnavailableTime=linkAvailabilityUnavailableTime, ifSpectrumCounterDiscontinuity=ifSpectrumCounterDiscontinuity, terrestrialPrefENFLPMax=terrestrialPrefENFLPMax, IndexConsistencyTest=IndexConsistencyTest, tsTests=tsTests, groupCapability=groupCapability, cableSatPrefInputNumber=cableSatPrefInputNumber, snrCSMeasurementState=snrCSMeasurementState, rfIFsignalPowerCounter=rfIFsignalPowerCounter, tsTestsSummaryCounterDiscontinuity=tsTestsSummaryCounterDiscontinuity, berViterbiSCounterDiscontinuity=berViterbiSCounterDiscontinuity, tsTestsSummaryCounter=tsTestsSummaryCounter, berViterbiSIValue=berViterbiSIValue, csTTestState=csTTestState, pjCSInputNumber=pjCSInputNumber, csTCounterDiscontinuity=csTCounterDiscontinuity, noisePowerTestState=noisePowerTestState, tsMeasurePrefPIDBitRateN=tsMeasurePrefPIDBitRateN, berViterbiTMeasurementState=berViterbiTMeasurementState, cablePrefENDCtoNSpecified=cablePrefENDCtoNSpecified, rfIfPowerEnable=rfIfPowerEnable, steT=steT, eNFTValue=eNFTValue, terrestrialPrefModulation=terrestrialPrefModulation, tsTestsSummaryState=tsTestsSummaryState, snrCSActiveTime=snrCSActiveTime, rfIFsignalPowerInputNumber=rfIFsignalPowerInputNumber, capabilityCableTable=capabilityCableTable, tsTestsSummaryTestNumber=tsTestsSummaryTestNumber, noiseMarginValue=noiseMarginValue, capabilityTSTable=capabilityTSTable, cableSatPrefSteDeviationCSMax=cableSatPrefSteDeviationCSMax, rfChannelWidthCounterDiscontinuity=rfChannelWidthCounterDiscontinuity, complianceSatellite=complianceSatellite, rfAccuracyCounterReset=rfAccuracyCounterReset, cableSatPrefBERMax=cableSatPrefBERMax, capabilityTerrestrialEntry=capabilityTerrestrialEntry, aiTValue=aiTValue, terrestrialPrefPjMax=terrestrialPrefPjMax, noiseMarginTestState=noiseMarginTestState, trapInput=trapInput, aiTCounterReset=aiTCounterReset, tr101290Satellite=tr101290Satellite, satellitePreferencesEntry=satellitePreferencesEntry, eNDCActiveTime=eNDCActiveTime, steDeviationCSCounter=steDeviationCSCounter, steDeviationCSMeasurementState=steDeviationCSMeasurementState, cableSatPrefSignalPowerMax=cableSatPrefSignalPowerMax, noisePowerMeasurementState=noisePowerMeasurementState, cableSatPrefSteMeanCSMax=cableSatPrefSteMeanCSMax, linearityMeasurementState=linearityMeasurementState, rteCSCounterDiscontinuity=rteCSCounterDiscontinuity, eNDCCounter=eNDCCounter, tsServicePerformanceMeasurementState=tsServicePerformanceMeasurementState, tsPIDBitRateCounter=tsPIDBitRateCounter, tsPIDBitRateCounterDiscontinuity=tsPIDBitRateCounterDiscontinuity, capabilityTerrestrialOID=capabilityTerrestrialOID, rfIFsignalPowerTable=rfIFsignalPowerTable, berViterbiSTestState=berViterbiSTestState, rfIfPowerEntry=rfIfPowerEntry, tsPcrMeasurementRowStatus=tsPcrMeasurementRowStatus, qeCSMeasurementState=qeCSMeasurementState, sepEtiCounterReset=sepEtiCounterReset, berRSLPCounter=berRSLPCounter, sepEtiActiveTime=sepEtiActiveTime, terrestrialPrefSEPUATMode=terrestrialPrefSEPUATMode, cableSatPrefPjCSMax=cableSatPrefPjCSMax, tsServicePerformanceCounterDiscontinuity=tsServicePerformanceCounterDiscontinuity, eNDCLatestError=eNDCLatestError, steMeanTCounterDiscontinuity=steMeanTCounterDiscontinuity, eNDTLPTable=eNDTLPTable, dvb=dvb, cableSatPrefLinkAvailT=cableSatPrefLinkAvailT, tsTestsPrefEITActualIntervalMin=tsTestsPrefEITActualIntervalMin, berViterbiTCounterReset=berViterbiTCounterReset, controlRFSystemTable=controlRFSystemTable, noisePowerEnable=noisePowerEnable, tsServicePerformanceEnable=tsServicePerformanceEnable, pjCSValue=pjCSValue, qeTLatestError=qeTLatestError, steMeanCSTestState=steMeanCSTestState, pjCSEntry=pjCSEntry, pjTMeasurementState=pjTMeasurementState, berRSLPEnable=berRSLPEnable, rfIfPowerValue=rfIfPowerValue, csCSCounterReset=csCSCounterReset)
mibBuilder.exportSymbols("DVB-MGTR101290-MIB", linearityLatestError=linearityLatestError, tsPIDBitRateActiveTime=tsPIDBitRateActiveTime, berViterbiSEntry=berViterbiSEntry, qeCSValue=qeCSValue, tsTestsPrefSDTActualTableIntervalMax=tsTestsPrefSDTActualTableIntervalMax, tr101290Cable=tr101290Cable, sysAvailabilityEnable=sysAvailabilityEnable, capabilityCableSat=capabilityCableSat, tsMeasurePreferencesTable=tsMeasurePreferencesTable, ifSpectrumCounter=ifSpectrumCounter, steMeanTMeasurementState=steMeanTMeasurementState, tr101290Terrestrial=tr101290Terrestrial, tsTestsPrefTDTIntervalMin=tsTestsPrefTDTIntervalMin, sysAvailabilityTable=sysAvailabilityTable, eNFTCounterDiscontinuity=eNFTCounterDiscontinuity, terrestrialPrefMIPDeviationMax=terrestrialPrefMIPDeviationMax, tsMeasurePrefTSBitRateN=tsMeasurePrefTSBitRateN, pjCSTestState=pjCSTestState, terrestrialPrefBERViterbiMax=terrestrialPrefBERViterbiMax, cablePrefSignQualBoxSize=cablePrefSignQualBoxSize, tsTransportStreamBitRateTable=tsTransportStreamBitRateTable, berViterbiTLPTable=berViterbiTLPTable, ifSpectrumLatestError=ifSpectrumLatestError, eNDCMeasurementState=eNDCMeasurementState, rfIfSpectrumLatestError=rfIfSpectrumLatestError, berViterbiSCounterReset=berViterbiSCounterReset, complianceCable=complianceCable, terrestrialPrefCentreFreqExpected=terrestrialPrefCentreFreqExpected, sysAvailabilityUnavailableTime=sysAvailabilityUnavailableTime, ciCSInputNumber=ciCSInputNumber, capabilityTerrestrialGroup=capabilityTerrestrialGroup, eNFTEnable=eNFTEnable, tsPcrMeasurementEntry=tsPcrMeasurementEntry, cableSatPrefCiCSMin=cableSatPrefCiCSMin, tsTestsPrefPIDInputNumber=tsTestsPrefPIDInputNumber, complianceTerrestrial=complianceTerrestrial, cableSatPrefSysAvailM=cableSatPrefSysAvailM, rfAccuracyActiveTime=rfAccuracyActiveTime, steMeanTCounterReset=steMeanTCounterReset, outBandEmissCounterDiscontinuity=outBandEmissCounterDiscontinuity, tsMeasurements=tsMeasurements, rteCSActiveTime=rteCSActiveTime, csTCounterReset=csTCounterReset, rfIfPowerCounterReset=rfIfPowerCounterReset, complianceTransportStream=complianceTransportStream, aiTCounter=aiTCounter, tsMeasurePrefServiceBitRateTau=tsMeasurePrefServiceBitRateTau, berViterbiTInputNumber=berViterbiTInputNumber, tsMeasurePrefServiceBitRateN=tsMeasurePrefServiceBitRateN, sepSetiTable=sepSetiTable, berViterbiSCounter=berViterbiSCounter, tsMeasurePrefServiceBitRateMin=tsMeasurePrefServiceBitRateMin, sysAvailabilityCounter=sysAvailabilityCounter, tsTestsPrefTDTIntervalMax=tsTestsPrefTDTIntervalMax, tsPIDBitRateInputNumber=tsPIDBitRateInputNumber, tsMeasurePreferencesPIDTable=tsMeasurePreferencesPIDTable, rteCSLatestError=rteCSLatestError, rfIfSpectrumActiveTime=rfIfSpectrumActiveTime, tsConsistencyState=tsConsistencyState, berRSLPValue=berRSLPValue, cablePrefENDMax=cablePrefENDMax, merTTestState=merTTestState, steDeviationTTable=steDeviationTTable, terrestrialPrefMIPTimingLimit=terrestrialPrefMIPTimingLimit, tsTestsPrefReferredIntervalMax=tsTestsPrefReferredIntervalMax, tsTestsPIDState=tsTestsPIDState, cableSatPrefSysAvailUATMode=cableSatPrefSysAvailUATMode, ciCSEntry=ciCSEntry, tsPIDBitRateEntry=tsPIDBitRateEntry, ifSpectrumEnable=ifSpectrumEnable, PIDPlusOne=PIDPlusOne, linearityCounter=linearityCounter, tsServiceBitRateEnable=tsServiceBitRateEnable, rteCSEnable=rteCSEnable, eNDTInputNumber=eNDTInputNumber, steMeanTTable=steMeanTTable, berRSCounter=berRSCounter, rfAccuracyInputNumber=rfAccuracyInputNumber, FloatingPoint=FloatingPoint, tsMeasurePrefTSBitRateMin=tsMeasurePrefTSBitRateMin, outBandEmissTable=outBandEmissTable, tsMeasurePrefAllServiceBitRateTau=tsMeasurePrefAllServiceBitRateTau, capabilityCableSatGroup=capabilityCableSatGroup, qeTValue=qeTValue, estNoiseMarginEntry=estNoiseMarginEntry, sysAvailabilityMeasurementState=sysAvailabilityMeasurementState, merCSEnable=merCSEnable, tsTransportStreamBitRateNomenclature=tsTransportStreamBitRateNomenclature, aiTEnable=aiTEnable, estNoiseMarginActiveTime=estNoiseMarginActiveTime, steDeviationCSInputNumber=steDeviationCSInputNumber, GuardInterval=GuardInterval, merCSInputNumber=merCSInputNumber, tsPcrMeasurementInputNumber=tsPcrMeasurementInputNumber, pjTEntry=pjTEntry, tsServiceBitRateRowStatus=tsServiceBitRateRowStatus, pjTCounterReset=pjTCounterReset, tsTransportStreamBitRateCounter=tsTransportStreamBitRateCounter, pjTActiveTime=pjTActiveTime, terrestrialPrefENDMax=terrestrialPrefENDMax, eNDT=eNDT, qeTCounterReset=qeTCounterReset, tsTestsSummaryCounterReset=tsTestsSummaryCounterReset, steMeanCSCounter=steMeanCSCounter, terrestrialPrefBandwidth=terrestrialPrefBandwidth, terrestrialPrefCsMin=terrestrialPrefCsMin, tsTestsSummaryEnable=tsTestsSummaryEnable, tsTestsPrefEITSOtherFarTableIntervalMax=tsTestsPrefEITSOtherFarTableIntervalMax, testFailTrap=testFailTrap, rfIfSpectrumTable=rfIfSpectrumTable, terrestrialPrefENFIdeal=terrestrialPrefENFIdeal, tsTestsPrefTransitionDuration=tsTestsPrefTransitionDuration, rteCSTable=rteCSTable, tsTransportStreamBitRateEnable=tsTransportStreamBitRateEnable, sepSetiValue=sepSetiValue, MeasurementState=MeasurementState, csCSTestState=csCSTestState, berViterbiSInputNumber=berViterbiSInputNumber, ciCSLatestError=ciCSLatestError, satellitePreferencesTable=satellitePreferencesTable, eNDTTable=eNDTTable, noiseMarginCounterDiscontinuity=noiseMarginCounterDiscontinuity, rfIfPowerCounterDiscontinuity=rfIfPowerCounterDiscontinuity, berViterbiTLPLatestError=berViterbiTLPLatestError, tsMeasurePreferencesPIDEntry=tsMeasurePreferencesPIDEntry, tsServicePerformancePreferencesEntry=tsServicePerformancePreferencesEntry, symbolLengthInputNumber=symbolLengthInputNumber, qeTTable=qeTTable, tsTestsPrefNITActualIntervalMax=tsTestsPrefNITActualIntervalMax, tsTransportStreamBitRateActiveTime=tsTransportStreamBitRateActiveTime, terrestrialPrefSEPMeasurementInterval=terrestrialPrefSEPMeasurementInterval, trapControlRateStatus=trapControlRateStatus, terrestrialPrefENFMax=terrestrialPrefENFMax, eNDTLPCounterReset=eNDTLPCounterReset, trapControlMeasurementValue=trapControlMeasurementValue, eNFTLPTestState=eNFTLPTestState, estNoiseMarginTable=estNoiseMarginTable, berViterbiTTable=berViterbiTTable, berViterbiTLPValue=berViterbiTLPValue, tsMeasurePrefPIDBitRateMax=tsMeasurePrefPIDBitRateMax, trapControlEntry=trapControlEntry, berRS=berRS, tsTestsPIDEnable=tsTestsPIDEnable, tsTestsPIDCounter=tsTestsPIDCounter, eNFTActiveTime=eNFTActiveTime, steMeanCSEntry=steMeanCSEntry, sepSetiTestState=sepSetiTestState, qeCSActiveTime=qeCSActiveTime, cableSatPrefModulation=cableSatPrefModulation, steMeanCSMeasurementState=steMeanCSMeasurementState, eNDTMeasurementState=eNDTMeasurementState, snrCSCounterReset=snrCSCounterReset, rfIfSpectrumEntry=rfIfSpectrumEntry, linearityEnable=linearityEnable, terrestrialPrefSEPEBPerCent=terrestrialPrefSEPEBPerCent, tsTestsPIDRowStatus=tsTestsPIDRowStatus, aiCSCounterReset=aiCSCounterReset, merCSValue=merCSValue, outBandEmissCounterReset=outBandEmissCounterReset, noisePowerCounterReset=noisePowerCounterReset, tsSPPrefEvaluationTime=tsSPPrefEvaluationTime, aiCSCounterDiscontinuity=aiCSCounterDiscontinuity, rfChannelWidthActiveTime=rfChannelWidthActiveTime, berRSinServiceInputNumber=berRSinServiceInputNumber, aiTActiveTime=aiTActiveTime, tsMeasurePrefExpectedTSID=tsMeasurePrefExpectedTSID, berRSinServiceTestState=berRSinServiceTestState, berRSinServiceLatestError=berRSinServiceLatestError, tsTestsPrefPIDPID=tsTestsPrefPIDPID, rfAccuracyEntry=rfAccuracyEntry, tsTestsPreferencesTable=tsTestsPreferencesTable, steDeviationTCounter=steDeviationTCounter, steDeviationTMeasurementState=steDeviationTMeasurementState, tsTestsPrefEITPFOtherTableIntervalMax=tsTestsPrefEITPFOtherTableIntervalMax, berViterbiSQValue=berViterbiSQValue, ServiceId=ServiceId, estNoiseMarginCounterDiscontinuity=estNoiseMarginCounterDiscontinuity, berViterbiSLatestError=berViterbiSLatestError, tsConsistencyInputNumber=tsConsistencyInputNumber, tsTestsPIDEntry=tsTestsPIDEntry, PollingInterval=PollingInterval, groupSatellite=groupSatellite, steDeviationTEnable=steDeviationTEnable, pjCSMeasurementState=pjCSMeasurementState, tsServiceBitRateState=tsServiceBitRateState, sepEtiInputNumber=sepEtiInputNumber, controlSynchronizedTime=controlSynchronizedTime, tsTestsPrefPCRIntervalMax=tsTestsPrefPCRIntervalMax, noisePowerEntry=noisePowerEntry, sysAvailabilityLatestError=sysAvailabilityLatestError, tsServiceBitRateCounterReset=tsServiceBitRateCounterReset, qeTEnable=qeTEnable, merTActiveTime=merTActiveTime, capabilitySatelliteOID=capabilitySatelliteOID, sysAvailabilityCounterReset=sysAvailabilityCounterReset, rfIFsignalPowerCounterDiscontinuity=rfIFsignalPowerCounterDiscontinuity, snrCSTestState=snrCSTestState, eNDTValue=eNDTValue, capabilitySatellite=capabilitySatellite, tsTestsPrefPCRInaccuracyMax=tsTestsPrefPCRInaccuracyMax, tsMeasurePrefPCRDRMax=tsMeasurePrefPCRDRMax, linkAvailabilityLatestError=linkAvailabilityLatestError, outBandEmissEntry=outBandEmissEntry, eNFTCounterReset=eNFTCounterReset, capabilityTerrestrialTable=capabilityTerrestrialTable, tsTestsPrefTxTTableIntervalMax=tsTestsPrefTxTTableIntervalMax, tsServicePerformance=tsServicePerformance, rfAccuracyLatestError=rfAccuracyLatestError, cableSatPrefSysAvailTotalTime=cableSatPrefSysAvailTotalTime, merTLatestError=merTLatestError, trapControlFailureSummary=trapControlFailureSummary, qeCSEntry=qeCSEntry, tsTestsPreferencesEntry=tsTestsPreferencesEntry, rfIFsignalPowerTestState=rfIFsignalPowerTestState, merCSTable=merCSTable, aiCSInputNumber=aiCSInputNumber, symbolLengthEnable=symbolLengthEnable, eNDTLPValue=eNDTLPValue, terrestrialPrefENFLPIdeal=terrestrialPrefENFLPIdeal, eNFTMeasurementState=eNFTMeasurementState, tsServicePerformanceActiveTime=tsServicePerformanceActiveTime, ciCSTable=ciCSTable, merCSEntry=merCSEntry, tsTestsSummaryInputNumber=tsTestsSummaryInputNumber, cableSatPrefMerCSMin=cableSatPrefMerCSMin, tsSPPrefDeltaT=tsSPPrefDeltaT, pjTValue=pjTValue, rfChannelWidthMeasurementState=rfChannelWidthMeasurementState, steMeanCSCounterDiscontinuity=steMeanCSCounterDiscontinuity, linearityActiveTime=linearityActiveTime, rfIFsignalPowerCounterReset=rfIFsignalPowerCounterReset, terrestrialPrefSEPT=terrestrialPrefSEPT, tsTestsPrefSIGapMin=tsTestsPrefSIGapMin, merTInputNumber=merTInputNumber, tsMeasurePrefAllPIDBitRateElement=tsMeasurePrefAllPIDBitRateElement, tr101290TS=tr101290TS, csTCounter=csTCounter, IndexServicePerformance=IndexServicePerformance, berViterbiTLPEnable=berViterbiTLPEnable, capabilitySatelliteTable=capabilitySatelliteTable, sysAvailabilityRatio=sysAvailabilityRatio, berRSinServiceEntry=berRSinServiceEntry, tr101290Conformance=tr101290Conformance, cableSatPrefSysAvailEBPerCent=cableSatPrefSysAvailEBPerCent, qeTTestState=qeTTestState, csTEntry=csTEntry, mipSyntaxActiveTime=mipSyntaxActiveTime, steDeviationCSTestState=steDeviationCSTestState, pjCSEnable=pjCSEnable, pjCSCounterDiscontinuity=pjCSCounterDiscontinuity, noisePowerActiveTime=noisePowerActiveTime, merCSActiveTime=merCSActiveTime, csCSTable=csCSTable, tsMeasurePrefPCRDemarcationFrequency=tsMeasurePrefPCRDemarcationFrequency)
mibBuilder.exportSymbols("DVB-MGTR101290-MIB", linkAvailabilityRatio=linkAvailabilityRatio, steMeanCSCounterReset=steMeanCSCounterReset, rfIFsignalPowerMeasurementState=rfIFsignalPowerMeasurementState, capabilityCableSatPollInterval=capabilityCableSatPollInterval, tsServiceBitRateMeasurementState=tsServiceBitRateMeasurementState, tsMeasurePreferences=tsMeasurePreferences, tsSPPrefNumber=tsSPPrefNumber, cableSatPrefSysAvailN=cableSatPrefSysAvailN, rfChannelWidthCounter=rfChannelWidthCounter, pjTCounterDiscontinuity=pjTCounterDiscontinuity, outBandEmissActiveTime=outBandEmissActiveTime, terrestrialPrefSteDeviationMax=terrestrialPrefSteDeviationMax, ciCSTestState=ciCSTestState, pjCSTable=pjCSTable, Availability=Availability, tsServiceBitRateTable=tsServiceBitRateTable, csTEnable=csTEnable, steMeanTEnable=steMeanTEnable, IndexTransportStreamTest=IndexTransportStreamTest, tsTestsPrefEITPFActualTableIntervalMax=tsTestsPrefEITPFActualTableIntervalMax, qeCSCounterDiscontinuity=qeCSCounterDiscontinuity, eNDTLPCounterDiscontinuity=eNDTLPCounterDiscontinuity, tsTestsPrefEITActualIntervalMax=tsTestsPrefEITActualIntervalMax, berViterbiTCounterDiscontinuity=berViterbiTCounterDiscontinuity, tsConsistencyTestNumber=tsConsistencyTestNumber, tsConsistencyEnable=tsConsistencyEnable, eNFTLPValue=eNFTLPValue, tsConsistencyCounter=tsConsistencyCounter, terrestrialPrefInputNumber=terrestrialPrefInputNumber, terrestrialPrefPowerMax=terrestrialPrefPowerMax, terrestrialPrefTransmissionMode=terrestrialPrefTransmissionMode, tsTestsPrefEITSOtherNearTableIntervalMax=tsTestsPrefEITSOtherNearTableIntervalMax, csTValue=csTValue, tsServicePerformanceErrorRatio=tsServicePerformanceErrorRatio, rfIFsignalPowerActiveTime=rfIFsignalPowerActiveTime, berRSLatestError=berRSLatestError, capabilityCableSatEntry=capabilityCableSatEntry, tsPcrMeasurementCounterReset=tsPcrMeasurementCounterReset, steDeviationCSValue=steDeviationCSValue, rfIfPowerInputNumber=rfIfPowerInputNumber, capabilityTSPollInterval=capabilityTSPollInterval, cableSatPrefLinkAvailUPPerCent=cableSatPrefLinkAvailUPPerCent, cablePrefEstNoiseMarginMin=cablePrefEstNoiseMarginMin, tsServiceBitRateEntry=tsServiceBitRateEntry, noiseMarginEntry=noiseMarginEntry, aiTEntry=aiTEntry, berRSActiveTime=berRSActiveTime, aiCSLatestError=aiCSLatestError, signQualMarTEntry=signQualMarTEntry, mipSyntaxEnable=mipSyntaxEnable, merTCounter=merTCounter, eNDTLPActiveTime=eNDTLPActiveTime, berViterbiT=berViterbiT, steCS=steCS, symbolLengthLatestError=symbolLengthLatestError, rfIFsignalPowerValue=rfIFsignalPowerValue, snrCSCounter=snrCSCounter, berViterbiTLatestError=berViterbiTLatestError, linearityTestState=linearityTestState, capabilityCableAvailability=capabilityCableAvailability, cableSatPrefLinkAvailN=cableSatPrefLinkAvailN, tsPIDBitRateValue=tsPIDBitRateValue, TestState=TestState, terrestrialPrefSEPN=terrestrialPrefSEPN, csTActiveTime=csTActiveTime, qeCSTable=qeCSTable, linkAvailabilityCounterReset=linkAvailabilityCounterReset, tsPIDBitRateRowStatus=tsPIDBitRateRowStatus, tsTestsPreferencesPIDEntry=tsTestsPreferencesPIDEntry, eNDTCounterDiscontinuity=eNDTCounterDiscontinuity, TerrestrialTransmissionMode=TerrestrialTransmissionMode, terrestrialPreferencesEntry=terrestrialPreferencesEntry, groupTransportStream=groupTransportStream, cablePreferencesTable=cablePreferencesTable, steDeviationCSEnable=steDeviationCSEnable, tsConsistencyCounterReset=tsConsistencyCounterReset, berViterbiTLPTestState=berViterbiTLPTestState, aiTTable=aiTTable, ifSpectrumTable=ifSpectrumTable, RateStatus=RateStatus, eNDTLPTestState=eNDTLPTestState, berViterbiTEntry=berViterbiTEntry, cableSatPrefLinkAvailTI=cableSatPrefLinkAvailTI, sepEtiEnable=sepEtiEnable, tsServicePerformanceState=tsServicePerformanceState, terrestrialPrefLinearityMin=terrestrialPrefLinearityMin, cablePrefENDIdeal=cablePrefENDIdeal, tsTestsPreferences=tsTestsPreferences, steMeanCSEnable=steMeanCSEnable, cablePrefInputNumber=cablePrefInputNumber, berRSLPEntry=berRSLPEntry, terrestrialPrefENDBER=terrestrialPrefENDBER, steMeanTLatestError=steMeanTLatestError, qeCSCounterReset=qeCSCounterReset, tsPcrMeasurementCounter=tsPcrMeasurementCounter, sepEtiLatestError=sepEtiLatestError, berRSinServiceActiveTime=berRSinServiceActiveTime, tsTestsPIDCounterReset=tsTestsPIDCounterReset, noiseMarginCounter=noiseMarginCounter, signQualMarTCounter=signQualMarTCounter, tsMeasurePrefAllServiceBitRateN=tsMeasurePrefAllServiceBitRateN, aiCSActiveTime=aiCSActiveTime, tsServicePerformanceInputNumber=tsServicePerformanceInputNumber, tsServiceBitRateCounter=tsServiceBitRateCounter, signQualMarTTable=signQualMarTTable, rteCSCounter=rteCSCounter, steMeanTEntry=steMeanTEntry, aiCSTable=aiCSTable, berRSCounterDiscontinuity=berRSCounterDiscontinuity, eNFTInputNumber=eNFTInputNumber, groupTrapControl=groupTrapControl, tsTransportStreamBitRateCounterDiscontinuity=tsTransportStreamBitRateCounterDiscontinuity, rfIfSpectrumTestState=rfIfSpectrumTestState, eNFTEntry=eNFTEntry, tsMeasurePrefPCROJMax=tsMeasurePrefPCROJMax, linkAvailabilityEnable=linkAvailabilityEnable, sepSetiCounter=sepSetiCounter, snrCSCounterDiscontinuity=snrCSCounterDiscontinuity, sepEtiMeasurementState=sepEtiMeasurementState, tsServiceBitRateValue=tsServiceBitRateValue, tsTestsPrefBATTableIntervalMax=tsTestsPrefBATTableIntervalMax, berViterbiTLPInputNumber=berViterbiTLPInputNumber, tr101290Trap=tr101290Trap, tsPcrMeasurementLatestError=tsPcrMeasurementLatestError, rfAccuracyValue=rfAccuracyValue, ifSpectrumEntry=ifSpectrumEntry, qeCSInputNumber=qeCSInputNumber, rfChannelWidthTable=rfChannelWidthTable, groupControl=groupControl, noisePowerValue=noisePowerValue, cableSatPrefNoisePowerMax=cableSatPrefNoisePowerMax, eNDTLPLatestError=eNDTLPLatestError, csTLatestError=csTLatestError, satellitePrefInputNumber=satellitePrefInputNumber, tr101290Capability=tr101290Capability, Hierarchy=Hierarchy, sysAvailabilityInSETI=sysAvailabilityInSETI, berViterbiTLPEntry=berViterbiTLPEntry, berRSinServiceCounterReset=berRSinServiceCounterReset, csCSEntry=csCSEntry, berViterbiTTestState=berViterbiTTestState, controlSynchronizationEntry=controlSynchronizationEntry, aiTCounterDiscontinuity=aiTCounterDiscontinuity, ifSpectrumCounterReset=ifSpectrumCounterReset, steDeviationTInputNumber=steDeviationTInputNumber, eNDTLPEntry=eNDTLPEntry, signQualMarTInputNumber=signQualMarTInputNumber, csCSActiveTime=csCSActiveTime, berRSLPCounterReset=berRSLPCounterReset, linearityCounterDiscontinuity=linearityCounterDiscontinuity, eNFTLPEntry=eNFTLPEntry, snrCSEnable=snrCSEnable, merCSCounterDiscontinuity=merCSCounterDiscontinuity, ifSpectrumActiveTime=ifSpectrumActiveTime, mipSyntaxEntry=mipSyntaxEntry, steDeviationTCounterDiscontinuity=steDeviationTCounterDiscontinuity, rfIfSpectrumInputNumber=rfIfSpectrumInputNumber, terrestrialPrefSEPM=terrestrialPrefSEPM, capabilityCableGroup=capabilityCableGroup, rteCSEntry=rteCSEntry, estNoiseMarginLatestError=estNoiseMarginLatestError, estNoiseMarginMeasurementState=estNoiseMarginMeasurementState, csTMeasurementState=csTMeasurementState, eNFTLPInputNumber=eNFTLPInputNumber, rfAccuracyCounterDiscontinuity=rfAccuracyCounterDiscontinuity, rfSystemDelivery=rfSystemDelivery, tsPcrMeasurementEnable=tsPcrMeasurementEnable, tsTransportStreamBitRateLatestError=tsTransportStreamBitRateLatestError, merTTable=merTTable, merCSLatestError=merCSLatestError, terrestrialPrefENDLPMax=terrestrialPrefENDLPMax, aiCSEntry=aiCSEntry, tsServiceBitRateInputNumber=tsServiceBitRateInputNumber, noisePowerInputNumber=noisePowerInputNumber, pjCSLatestError=pjCSLatestError, sepSetiCounterDiscontinuity=sepSetiCounterDiscontinuity, rfIfPowerLatestError=rfIfPowerLatestError, berRSinServiceTable=berRSinServiceTable, tsConsistencyCounterDiscontinuity=tsConsistencyCounterDiscontinuity, sepEtiTable=sepEtiTable, steDeviationCSTable=steDeviationCSTable, tsTransportStreamBitRateState=tsTransportStreamBitRateState, snrCSTable=snrCSTable, tr101290=tr101290, snrCSInputNumber=snrCSInputNumber, eNFTLPCounter=eNFTLPCounter, tsTestsPrefPMTSectionIntervalMax=tsTestsPrefPMTSectionIntervalMax, terrestrialPrefCentreFreqLimit=terrestrialPrefCentreFreqLimit, tr101290ObjectGroups=tr101290ObjectGroups, tsTestsPrefRSTIntervalMin=tsTestsPrefRSTIntervalMin, symbolLengthTestState=symbolLengthTestState, symbolLengthValue=symbolLengthValue, aiCSCounter=aiCSCounter, noisePowerTable=noisePowerTable, steDeviationTCounterReset=steDeviationTCounterReset, tsMeasurePrefServiceBitRateMax=tsMeasurePrefServiceBitRateMax, terrestrialPrefCentreFrequency=terrestrialPrefCentreFrequency, steMeanCSTable=steMeanCSTable, eNDTTestState=eNDTTestState, tsServiceBitRateActiveTime=tsServiceBitRateActiveTime, tsMeasurePrefPIDInputNumber=tsMeasurePrefPIDInputNumber, qeCSCounter=qeCSCounter, steMeanCSLatestError=steMeanCSLatestError, ifSpectrumInputNumber=ifSpectrumInputNumber)
