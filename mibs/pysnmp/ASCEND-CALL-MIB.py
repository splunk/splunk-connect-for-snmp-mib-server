#
# PySNMP MIB module ASCEND-CALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-CALL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:10:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
callStatusGroup, = mibBuilder.importSymbols("ASCEND-MIB", "callStatusGroup")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, iso, ObjectIdentity, Counter64, Bits, Unsigned32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "iso", "ObjectIdentity", "Counter64", "Bits", "Unsigned32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
callStatusMaximumEntries = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusMaximumEntries.setStatus('mandatory')
callStatusTable = MibTable((1, 3, 6, 1, 4, 1, 529, 11, 2), )
if mibBuilder.loadTexts: callStatusTable.setStatus('mandatory')
callStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 11, 2, 1), ).setIndexNames((0, "ASCEND-CALL-MIB", "callStatusIndex"))
if mibBuilder.loadTexts: callStatusEntry.setStatus('mandatory')
callStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusIndex.setStatus('mandatory')
callStatusValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusValidFlag.setStatus('mandatory')
callStatusStartingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusStartingTimeStamp.setStatus('mandatory')
callStatusCallReferenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusCallReferenceNum.setStatus('mandatory')
callStatusDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusDataRate.setStatus('mandatory')
callStatusSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusSlotNumber.setStatus('mandatory')
callStatusSlotLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusSlotLineNumber.setStatus('mandatory')
callStatusSlotChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusSlotChannelNumber.setStatus('mandatory')
callStatusModemSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusModemSlotNumber.setStatus('mandatory')
callStatusModemOnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusModemOnSlot.setStatus('mandatory')
callStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusIfIndex.setStatus('mandatory')
callSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callSessionIndex.setStatus('mandatory')
callStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("callOutgoing", 1), ("callIncoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusType.setStatus('mandatory')
callStatusXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusXmitRate.setStatus('mandatory')
callStatusPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("callPortUnknown", 1), ("callPortAsync", 2), ("callPortSync", 3), ("callPortISDNSync", 4), ("callPortISDNAsyncV120", 5), ("callPortISDNAsyncV110", 6), ("callPortVirtual", 7), ("callPortISDNAsyncV32", 8), ("callPortISDNAsyncVDSP", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusPortType.setStatus('mandatory')
callStatusCalledParyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusCalledParyID.setStatus('mandatory')
callStatusCallingPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusCallingPartyID.setStatus('mandatory')
callStatusMultiLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callStatusMultiLinkID.setStatus('mandatory')
callStatusHighWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callStatusHighWaterMark.setStatus('mandatory')
callCurrentAnalogOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentAnalogOutgoing.setStatus('mandatory')
callCurrentAnalogIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentAnalogIncoming.setStatus('mandatory')
callCurrentDigitalOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentDigitalOutgoing.setStatus('mandatory')
callCurrentDigitalIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentDigitalIncoming.setStatus('mandatory')
callCurrentFROutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentFROutgoing.setStatus('mandatory')
callCurrentFRIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callCurrentFRIncoming.setStatus('mandatory')
callTotalAnalogOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalAnalogOutgoing.setStatus('mandatory')
callTotalAnalogIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalAnalogIncoming.setStatus('mandatory')
callTotalDigitalOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalDigitalOutgoing.setStatus('mandatory')
callTotalDigitalIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalDigitalIncoming.setStatus('mandatory')
callTotalFROutgoing = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalFROutgoing.setStatus('mandatory')
callTotalFRIncoming = MibScalar((1, 3, 6, 1, 4, 1, 529, 11, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callTotalFRIncoming.setStatus('mandatory')
callActiveTable = MibTable((1, 3, 6, 1, 4, 1, 529, 11, 16), )
if mibBuilder.loadTexts: callActiveTable.setStatus('mandatory')
callActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 11, 16, 1), ).setIndexNames((0, "ASCEND-CALL-MIB", "callActiveCallReferenceNum"))
if mibBuilder.loadTexts: callActiveEntry.setStatus('mandatory')
callActiveCallReferenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCallReferenceNum.setStatus('mandatory')
callActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveIndex.setStatus('mandatory')
callActiveValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveValidFlag.setStatus('mandatory')
callActiveStartingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveStartingTimeStamp.setStatus('mandatory')
callActiveDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveDataRate.setStatus('mandatory')
callActiveSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSlotNumber.setStatus('mandatory')
callActiveSlotLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSlotLineNumber.setStatus('mandatory')
callActiveSlotChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSlotChannelNumber.setStatus('mandatory')
callActiveModemSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveModemSlotNumber.setStatus('mandatory')
callActiveModemOnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveModemOnSlot.setStatus('mandatory')
callActiveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveIfIndex.setStatus('mandatory')
callActiveSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveSessionIndex.setStatus('mandatory')
callActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("callOutgoing", 1), ("callIncoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveType.setStatus('mandatory')
callActiveXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveXmitRate.setStatus('mandatory')
callActivePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("callPortUnknown", 1), ("callPortAsync", 2), ("callPortSync", 3), ("callPortISDNSync", 4), ("callPortISDNAsyncV120", 5), ("callPortISDNAsyncV110", 6), ("callPortVirtual", 7), ("callPortISDNAsyncV32", 8), ("callPortISDNAsyncVDSP", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActivePortType.setStatus('mandatory')
callActiveCalledParyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCalledParyID.setStatus('mandatory')
callActiveCallingPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCallingPartyID.setStatus('mandatory')
callActiveMultiLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 11, 16, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveMultiLinkID.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-CALL-MIB", callStatusIndex=callStatusIndex, callStatusXmitRate=callStatusXmitRate, callActiveSlotNumber=callActiveSlotNumber, callActiveEntry=callActiveEntry, callActiveTable=callActiveTable, callStatusStartingTimeStamp=callStatusStartingTimeStamp, callActiveDataRate=callActiveDataRate, callActiveType=callActiveType, callStatusCallReferenceNum=callStatusCallReferenceNum, callStatusTable=callStatusTable, callActiveIndex=callActiveIndex, callStatusType=callStatusType, callCurrentAnalogIncoming=callCurrentAnalogIncoming, callActiveSlotChannelNumber=callActiveSlotChannelNumber, callActiveModemSlotNumber=callActiveModemSlotNumber, callStatusSlotChannelNumber=callStatusSlotChannelNumber, callCurrentFRIncoming=callCurrentFRIncoming, callTotalFROutgoing=callTotalFROutgoing, callStatusPortType=callStatusPortType, callActiveValidFlag=callActiveValidFlag, callCurrentDigitalOutgoing=callCurrentDigitalOutgoing, callActiveModemOnSlot=callActiveModemOnSlot, callStatusModemOnSlot=callStatusModemOnSlot, callActiveCallReferenceNum=callActiveCallReferenceNum, callStatusMaximumEntries=callStatusMaximumEntries, callTotalFRIncoming=callTotalFRIncoming, callCurrentAnalogOutgoing=callCurrentAnalogOutgoing, callSessionIndex=callSessionIndex, callStatusEntry=callStatusEntry, callStatusIfIndex=callStatusIfIndex, callStatusSlotLineNumber=callStatusSlotLineNumber, callStatusCalledParyID=callStatusCalledParyID, callStatusCallingPartyID=callStatusCallingPartyID, callActiveIfIndex=callActiveIfIndex, callCurrentFROutgoing=callCurrentFROutgoing, callActiveSessionIndex=callActiveSessionIndex, callActiveCalledParyID=callActiveCalledParyID, callActiveSlotLineNumber=callActiveSlotLineNumber, callTotalAnalogOutgoing=callTotalAnalogOutgoing, callCurrentDigitalIncoming=callCurrentDigitalIncoming, callActivePortType=callActivePortType, callActiveMultiLinkID=callActiveMultiLinkID, callTotalDigitalIncoming=callTotalDigitalIncoming, callActiveStartingTimeStamp=callActiveStartingTimeStamp, callTotalDigitalOutgoing=callTotalDigitalOutgoing, callActiveCallingPartyID=callActiveCallingPartyID, callStatusDataRate=callStatusDataRate, callStatusSlotNumber=callStatusSlotNumber, callStatusMultiLinkID=callStatusMultiLinkID, callStatusValidFlag=callStatusValidFlag, callTotalAnalogIncoming=callTotalAnalogIncoming, callActiveXmitRate=callActiveXmitRate, callStatusModemSlotNumber=callStatusModemSlotNumber, callStatusHighWaterMark=callStatusHighWaterMark)
