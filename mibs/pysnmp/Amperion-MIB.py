#
# PySNMP MIB module Amperion-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Amperion-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, ObjectIdentity, Unsigned32, Opaque, Integer32, Gauge32, Bits, NotificationType, iso, Counter32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "ObjectIdentity", "Unsigned32", "Opaque", "Integer32", "Gauge32", "Bits", "NotificationType", "iso", "Counter32", "TimeTicks", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
amperion = ModuleIdentity((1, 3, 6, 1, 4, 1, 13995))
if mibBuilder.loadTexts: amperion.setLastUpdated('200305080000Z')
if mibBuilder.loadTexts: amperion.setOrganization('Amperion')
ds2 = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1))
powerline = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 1))
plMibIIExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1))
plCards = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2))
plCdNumber = MibScalar((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdNumber.setStatus('current')
plCdTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: plCdTable.setStatus('current')
plCdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "Amperion-MIB", "plCdIndex"))
if mibBuilder.loadTexts: plCdEntry.setStatus('current')
plCdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: plCdIndex.setStatus('current')
plCdType = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("he", 0), ("cpe", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdType.setStatus('current')
plCdLink = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("link1", 1), ("link2", 2), ("link3", 3), ("link4", 4), ("link5", 5), ("link6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plCdLink.setStatus('current')
plCdShortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plCdShortMacAddress.setStatus('current')
plCdLongMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdLongMacAddress.setStatus('current')
plCdHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdHardwareVersion.setStatus('current')
plCdFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdFirmwareVersion.setStatus('current')
plCdDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdDriverVersion.setStatus('current')
plCdReset = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plCdReset.setStatus('current')
plCdFactoryReset = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plCdFactoryReset.setStatus('current')
plCdSaveAsPermanent = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plCdSaveAsPermanent.setStatus('current')
plCdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdStatus.setStatus('current')
plCdRemoteList = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdRemoteList.setStatus('current')
plCdNumRemoteList = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plCdNumRemoteList.setStatus('current')
plNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 1, 2))
plNetTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 1, 1, 2, 1), )
if mibBuilder.loadTexts: plNetTable.setStatus('current')
plNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 1, 1, 2, 1, 1), ).setIndexNames((0, "Amperion-MIB", "plNetShortMacAddress"))
if mibBuilder.loadTexts: plNetEntry.setStatus('current')
plNetShortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: plNetShortMacAddress.setStatus('current')
plNetLongMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14)).clone('0x000000000000')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plNetLongMacAddress.setStatus('current')
plNetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 2, 1, 1, 8), RowStatus().clone('createAndWait')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: plNetRowStatus.setStatus('current')
plTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3))
plInpTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2), )
if mibBuilder.loadTexts: plInpTable.setStatus('current')
plInpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: plInpEntry.setStatus('current')
plInpTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpTotalOctets.setStatus('current')
plInpGain = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plInpGain.setStatus('current')
plInpAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("agcdisabled", 0), ("agcenabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plInpAGC.setStatus('current')
plInpMaxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plInpMaxGain.setStatus('current')
plInpThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plInpThresholds.setStatus('current')
plInpAttenuationGain = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plInpAttenuationGain.setStatus('current')
plInpSamsDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpSamsDecode.setStatus('current')
plInpSamsGood = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpSamsGood.setStatus('current')
plInpSamsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpSamsBad.setStatus('current')
plInpNodeTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4), )
if mibBuilder.loadTexts: plInpNodeTable.setStatus('current')
plInpNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Amperion-MIB", "plNetShortMacAddress"))
if mibBuilder.loadTexts: plInpNodeEntry.setStatus('current')
plInpNodeReceivedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeReceivedPkts.setStatus('current')
plInpNodeReceivedUnrecPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeReceivedUnrecPkts.setStatus('current')
plInpNodeReceivedCorrectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeReceivedCorrectedPkts.setStatus('current')
plInpNodeReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeReceivedOctets.setStatus('current')
plInpNodeReceivedCorrectedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeReceivedCorrectedOctets.setStatus('current')
plInpNodeReceivedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeReceivedPower.setStatus('current')
plInpNodePLR = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodePLR.setStatus('current')
plInpNodeMeanBPC = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeMeanBPC.setStatus('current')
plInpNodeSNRChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeSNRChanges.setStatus('current')
plInpNodeSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeSNR.setStatus('current')
plInpNodeBPC = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeBPC.setStatus('current')
plInpNodeCFR = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeCFR.setStatus('current')
plInpNodeEnableCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plInpNodeEnableCarriers.setStatus('current')
plInpNodeProtocolEnableCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plInpNodeProtocolEnableCarriers.setStatus('current')
plInpNodeEnableProtocolEnableCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 1, 1, 3, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plInpNodeEnableProtocolEnableCarriers.setStatus('current')
plTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 1, 4))
plRemoteCPE = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 1, 5))
internal = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 1, 2))
amperionSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 2))
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('####')).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
partNumber = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('####')).setMaxAccess("readonly")
if mibBuilder.loadTexts: partNumber.setStatus('current')
rombootVersion = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('####')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rombootVersion.setStatus('current')
alarms = MibTable((1, 3, 6, 1, 4, 1, 13995, 2, 4), )
if mibBuilder.loadTexts: alarms.setStatus('current')
alarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 2, 4, 1), ).setIndexNames((0, "Amperion-MIB", "alarmIndex"))
if mibBuilder.loadTexts: alarmsEntry.setStatus('current')
alarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: alarmIndex.setStatus('current')
description = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: description.setStatus('current')
productType = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("ohInjector", 1), ("ohExtractor", 2), ("ohRepeater", 3), ("ohRepeaterExt", 4), ("ugInjector", 5), ("ugExtractor", 6), ("ugRepeater", 7), ("ugRepeaterExt", 8))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
linuxVersion = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('####')).setMaxAccess("readonly")
if mibBuilder.loadTexts: linuxVersion.setStatus('current')
amperionSysDescr = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('####')).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionSysDescr.setStatus('current')
amperionSysObjectID = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionSysObjectID.setStatus('current')
amperionSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionSysUpTime.setStatus('current')
amperionSysContact = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('Amperion Inc. Andover MA')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionSysContact.setStatus('current')
amperionSysName = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('Amperion')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionSysName.setStatus('current')
amperionSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionSysLocation.setStatus('current')
amperionSysServices = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionSysServices.setStatus('current')
amperionTrapMgr1 = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 18), IpAddress().clone(hexValue="7f000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionTrapMgr1.setStatus('current')
amperionTrapMgr2 = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 19), IpAddress().clone(hexValue="7f000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionTrapMgr2.setStatus('current')
amperionTrapMgr3 = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 20), IpAddress().clone(hexValue="7f000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionTrapMgr3.setStatus('current')
userGpsInfoString = MibScalar((1, 3, 6, 1, 4, 1, 13995, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGpsInfoString.setStatus('current')
softwareUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 3))
serverAddress = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverAddress.setStatus('current')
currentState = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentState.setStatus('current')
bootPartition = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootPartition.setStatus('current')
upgradePartition = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2))).clone('backup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradePartition.setStatus('current')
currentPartition = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("backup", 2))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPartition.setStatus('current')
commandOptions = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandOptions.setStatus('current')
primaryPartitionContents = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryPartitionContents.setStatus('current')
primaryCRC = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("failed", 2))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryCRC.setStatus('current')
backupPartitionContents = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupPartitionContents.setStatus('current')
backupCRC = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("failed", 2))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupCRC.setStatus('current')
lastStatus = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastStatus.setStatus('current')
filename = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('ampmulti')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filename.setStatus('current')
server1Address = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: server1Address.setStatus('current')
server2Address = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: server2Address.setStatus('current')
upgradeSchedule = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('None scheduled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeSchedule.setStatus('current')
rebootSchedule = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('None scheduled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootSchedule.setStatus('current')
login = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('anonymous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login.setStatus('current')
password = MibScalar((1, 3, 6, 1, 4, 1, 13995, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('root@Amperion000000.com')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('current')
swupgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13995, 3, 19)).setObjects(("Amperion-MIB", "backupPartitionContents"), ("Amperion-MIB", "backupCRC"), ("Amperion-MIB", "primaryPartitionContents"), ("Amperion-MIB", "primaryCRC"), ("Amperion-MIB", "bootPartition"))
if mibBuilder.loadTexts: swupgradeCompleted.setStatus('current')
psGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 4))
psImageChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 14)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: psImageChecksumError.setStatus('current')
criticalBatteryShutdownWarning = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 15)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: criticalBatteryShutdownWarning.setStatus('current')
p12vOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 16)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: p12vOutOfRange.setStatus('current')
m8point5vOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 17)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: m8point5vOutOfRange.setStatus('current')
p5vOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 18)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: p5vOutOfRange.setStatus('current')
p3point3vOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 19)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: p3point3vOutOfRange.setStatus('current')
batteryVoltsOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 20)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: batteryVoltsOutOfRange.setStatus('current')
mcuTempOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 21)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: mcuTempOutOfRange.setStatus('current')
batteryTempOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 22)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: batteryTempOutOfRange.setStatus('current')
psDetectedCommLapse = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 23)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: psDetectedCommLapse.setStatus('current')
criticalRequestAborted = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 24)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: criticalRequestAborted.setStatus('current')
powerSupplyInternalError = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 25)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: powerSupplyInternalError.setStatus('current')
psBatteryNotConnected = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 26)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: psBatteryNotConnected.setStatus('current')
psAcOnOff = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 27)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: psAcOnOff.setStatus('current')
psHardwareError = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 29)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: psHardwareError.setStatus('current')
npuDetectedCommLapse = NotificationType((1, 3, 6, 1, 4, 1, 13995, 4, 34)).setObjects(("Amperion-MIB", "eventDescription"))
if mibBuilder.loadTexts: npuDetectedCommLapse.setStatus('current')
acLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLineVoltage.setStatus('current')
plus12v = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus12v.setStatus('current')
minus8point5v = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minus8point5v.setStatus('current')
plus5v = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus5v.setStatus('current')
plus3point3v = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plus3point3v.setStatus('current')
batteryCaseTemp = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCaseTemp.setStatus('current')
internalMcuTemp = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMcuTemp.setStatus('current')
batteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrent.setStatus('current')
batteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVoltage.setStatus('current')
mcuSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcuSoftwareVersion.setStatus('current')
powerCycleNpu = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("commit", 1))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerCycleNpu.setStatus('current')
psMode = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("protocol", 0), ("dump", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psMode.setStatus('current')
shutdownNpu = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("commit", 1))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shutdownNpu.setStatus('current')
psEt = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEt.setStatus('current')
npuEt = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npuEt.setStatus('current')
npuPuTimes = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npuPuTimes.setStatus('current')
eventDescription = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDescription.setStatus('current')
psHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13995, 4, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHardwareVersion.setStatus('current')
amperionInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 5))
interfaceAdminDown = NotificationType((1, 3, 6, 1, 4, 1, 13995, 5, 3)).setObjects(("Amperion-MIB", "amperionifDescr"))
if mibBuilder.loadTexts: interfaceAdminDown.setStatus('current')
interfaceAdminUp = NotificationType((1, 3, 6, 1, 4, 1, 13995, 5, 4)).setObjects(("Amperion-MIB", "amperionifDescr"))
if mibBuilder.loadTexts: interfaceAdminUp.setStatus('current')
amperionifNumber = MibScalar((1, 3, 6, 1, 4, 1, 13995, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifNumber.setStatus('current')
amperionifTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 5, 2), )
if mibBuilder.loadTexts: amperionifTable.setStatus('current')
amperionifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: amperionifEntry.setStatus('current')
amperionifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifDescr.setStatus('current')
amperionifType = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnx25", 4), ("rfc877x25", 5), ("ethernetcsmacd", 6), ("iso88023csmacd", 7), ("iso88024tokenBus", 8), ("iso88025tokenRing", 9), ("iso88026man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("framerelay", 32), ("ieee80211b", 33), ("ieee80211a", 34), ("ieee80211g", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifType.setStatus('current')
amperionifMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifMtu.setStatus('current')
amperionifSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifSpeed.setStatus('current')
amperionifPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifPhysAddress.setStatus('current')
amperionifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionifAdminStatus.setStatus('current')
amperionifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifOperStatus.setStatus('current')
amperionifLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifLastChange.setStatus('current')
amperionifInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifInOctets.setStatus('current')
amperionifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifInUcastPkts.setStatus('current')
amperionifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifInNUcastPkts.setStatus('current')
amperionifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifInDiscards.setStatus('current')
amperionifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifInErrors.setStatus('current')
amperionifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifInUnknownProtos.setStatus('current')
amperionifOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifOutOctets.setStatus('current')
amperionifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifOutUcastPkts.setStatus('current')
amperionifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifOutNUcastPkts.setStatus('current')
amperionifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifOutDiscards.setStatus('current')
amperionifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifOutErrors.setStatus('current')
amperionifOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifOutQLen.setStatus('current')
amperionifSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionifSpecific.setStatus('current')
amperionWirelessConfigEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessConfigEssid.setStatus('current')
amperionWirelessConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("adhoc", 1), ("managed", 2), ("master", 3), ("repeater", 4))).clone('master')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessConfigMode.setStatus('current')
amperionWirelessConfigChanFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessConfigChanFreq.setStatus('current')
amperionWirelessConfigKey = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessConfigKey.setStatus('current')
amperionWirelessConfigWifType = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wtype11a", 1), ("wtype11b", 2), ("wtype11g", 3))).clone('wtype11b')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessConfigWifType.setStatus('current')
amperionWirelessLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionWirelessLinkQuality.setStatus('current')
amperionWirelessSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionWirelessSignalLevel.setStatus('current')
amperionWirelessNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionWirelessNoiseLevel.setStatus('current')
amperionWirelessActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessActivate.setStatus('current')
amperionWirelessConfigBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessConfigBitRate.setStatus('current')
amperionWirelessConfigWDSPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 5, 2, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amperionWirelessConfigWDSPeer.setStatus('current')
amperionWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 6))
ampMacAcceptTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 6, 3), )
if mibBuilder.loadTexts: ampMacAcceptTable.setStatus('current')
ampMacAcceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 6, 3, 1), ).setIndexNames((0, "Amperion-MIB", "macAcceptTableIndex"))
if mibBuilder.loadTexts: ampMacAcceptEntry.setStatus('current')
macAcceptTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 6, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: macAcceptTableIndex.setStatus('current')
macAcceptTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 6, 3, 1, 2), RowStatus().clone('createAndGo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAcceptTableRowStatus.setStatus('current')
macAcceptTableMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 6, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone('00:00:00:00:00:00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAcceptTableMacAddress.setStatus('current')
macAcceptTableWirelessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAcceptTableWirelessIf.setStatus('current')
accessControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 13995, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlStatus.setStatus('current')
amperionipAddrTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 7), )
if mibBuilder.loadTexts: amperionipAddrTable.setStatus('current')
amperionipAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 7, 1), ).setIndexNames((0, "Amperion-MIB", "amperionipAdEntAddr"))
if mibBuilder.loadTexts: amperionipAddrEntry.setStatus('current')
amperionipAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: amperionipAdEntAddr.setStatus('current')
amperionipAdEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionipAdEntIfName.setStatus('current')
amperionipAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionipAdEntNetMask.setStatus('current')
amperionipAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionipAdEntBcastAddr.setStatus('current')
amperionipAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperionipAdEntReasmMaxSize.setStatus('current')
amperionipAdEntActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 7, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: amperionipAdEntActivate.setStatus('current')
amperionipAdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: amperionipAdRowStatus.setStatus('current')
qualityOfService = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 8))
serviceClassA = MibScalar((1, 3, 6, 1, 4, 1, 13995, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 65536)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceClassA.setStatus('current')
serviceClassB = MibScalar((1, 3, 6, 1, 4, 1, 13995, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 65536)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceClassB.setStatus('current')
serviceClassC = MibScalar((1, 3, 6, 1, 4, 1, 13995, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 65536)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceClassC.setStatus('current')
serviceClassD = MibScalar((1, 3, 6, 1, 4, 1, 13995, 8, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 65536)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceClassD.setStatus('current')
subscriberTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 8, 5), )
if mibBuilder.loadTexts: subscriberTable.setStatus('current')
subscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 8, 5, 1), ).setIndexNames((0, "Amperion-MIB", "index"))
if mibBuilder.loadTexts: subscriberEntry.setStatus('current')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 8, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: index.setStatus('current')
name = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 8, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: name.setStatus('current')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 8, 5, 1, 3), IpAddress().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 8, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone('00:00:00:00:00:00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAddress.setStatus('current')
serviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("classA", 1), ("classB", 2), ("classC", 3), ("classD", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceClass.setStatus('current')
rowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 8, 5, 1, 6), RowStatus().clone('createAndGo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rowStatus.setStatus('current')
upstreamDownstreamRatio = MibScalar((1, 3, 6, 1, 4, 1, 13995, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('1:3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upstreamDownstreamRatio.setStatus('current')
qosStatus = MibScalar((1, 3, 6, 1, 4, 1, 13995, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosStatus.setStatus('current')
afe = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 9))
afeExtractor = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 9, 1))
afeExtTxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeExtTxGain.setStatus('current')
afeExtRxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeExtRxGain.setStatus('current')
afeExtDownstream = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeExtDownstream.setStatus('current')
afeExtUpstream = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeExtUpstream.setStatus('current')
afeExtActivate = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeExtActivate.setStatus('current')
afeInjector = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 9, 2))
afeInjTxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeInjTxGain.setStatus('current')
afeInjRxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeInjRxGain.setStatus('current')
afeInjDownstream = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeInjDownstream.setStatus('current')
afeInjUpstream = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeInjUpstream.setStatus('current')
afeInjActivate = MibScalar((1, 3, 6, 1, 4, 1, 13995, 9, 2, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: afeInjActivate.setStatus('current')
amperionRoutes = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 10))
amperionRouteTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 10, 1), )
if mibBuilder.loadTexts: amperionRouteTable.setStatus('current')
amperionRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1), ).setIndexNames((0, "Amperion-MIB", "ipRouteDest"))
if mibBuilder.loadTexts: amperionRouteEntry.setStatus('current')
ipRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteDest.setStatus('current')
ipRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteIfIndex.setStatus('current')
ipRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric1.setStatus('current')
ipRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric2.setStatus('current')
ipRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric3.setStatus('current')
ipRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric4.setStatus('current')
ipRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteNextHop.setStatus('current')
ipRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4))).clone('direct')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteType.setStatus('current')
ipRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isis", 9), ("esis", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteProto.setStatus('current')
ipRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteAge.setStatus('current')
ipRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMask.setStatus('current')
ipRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric5.setStatus('current')
ipRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfo.setStatus('current')
ipDefRouteActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 10, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefRouteActivate.setStatus('current')
plc = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 11))
plcExtractor = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 11, 1))
plcExtTxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcExtTxGain.setStatus('current')
plcExtRxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcExtRxGain.setStatus('current')
plcInjector = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 11, 2))
plcInjTxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInjTxGain.setStatus('current')
plcInjRxGain = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInjRxGain.setStatus('current')
plcUp = NotificationType((1, 3, 6, 1, 4, 1, 13995, 11, 3)).setObjects(("Amperion-MIB", "plcEventDescription"))
if mibBuilder.loadTexts: plcUp.setStatus('current')
plcDown = NotificationType((1, 3, 6, 1, 4, 1, 13995, 11, 4)).setObjects(("Amperion-MIB", "plcEventDescription"))
if mibBuilder.loadTexts: plcDown.setStatus('current')
afeCpldResetCount = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: afeCpldResetCount.setStatus('current')
plcLossCount = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcLossCount.setStatus('current')
resetCounters = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetCounters.setStatus('current')
optimizationTable = MibTable((1, 3, 6, 1, 4, 1, 13995, 11, 8), )
if mibBuilder.loadTexts: optimizationTable.setStatus('current')
optimizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1), ).setIndexNames((0, "Amperion-MIB", "extrIpaddress"), (0, "Amperion-MIB", "extrChannelNumber"))
if mibBuilder.loadTexts: optimizationEntry.setStatus('current')
extrIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extrIpaddress.setStatus('current')
extrChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extrChannelNumber.setStatus('current')
upstreamFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upstreamFreq.setStatus('current')
downstreamFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downstreamFreq.setStatus('current')
rxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxGain.setStatus('current')
txGain = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txGain.setStatus('current')
plcThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcThroughput.setStatus('current')
upStreamDownStream = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upStreamDownStream.setStatus('current')
gpsInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13995, 11, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsInfo.setStatus('current')
plcEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 13995, 11, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcEventDescription.setStatus('current')
tempGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13995, 12))
tempFanState = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempFanState.setStatus('current')
tempFanTargetTemp = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 70)).clone(25)).setUnits('degrees celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempFanTargetTemp.setStatus('current')
tempEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 130))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempEventDescription.setStatus('current')
tempHighWarnLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 13995, 12, 4)).setObjects(("Amperion-MIB", "tempEventDescription"), ("Amperion-MIB", "tempHighWarnLimit"), ("Amperion-MIB", "tempSystemTemp"))
if mibBuilder.loadTexts: tempHighWarnLimitTrap.setStatus('current')
tempHighErrorLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 13995, 12, 6)).setObjects(("Amperion-MIB", "tempEventDescription"), ("Amperion-MIB", "tempHighErrorLimit"), ("Amperion-MIB", "tempSystemTemp"))
if mibBuilder.loadTexts: tempHighErrorLimitTrap.setStatus('current')
tempLowWarnLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 13995, 12, 7)).setObjects(("Amperion-MIB", "tempEventDescription"), ("Amperion-MIB", "tempLowWarnLimit"), ("Amperion-MIB", "tempSystemTemp"))
if mibBuilder.loadTexts: tempLowWarnLimitTrap.setStatus('current')
tempLowErrorLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 13995, 12, 8)).setObjects(("Amperion-MIB", "tempEventDescription"), ("Amperion-MIB", "tempLowErrorLimit"), ("Amperion-MIB", "tempSystemTemp"))
if mibBuilder.loadTexts: tempLowErrorLimitTrap.setStatus('current')
tempHighWarnLimit = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150)).clone(65)).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighWarnLimit.setStatus('current')
tempHighErrorLimit = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150)).clone(100)).setUnits('degrees Celscius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighErrorLimit.setStatus('current')
tempLowWarnLimit = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 60)).clone(-10)).setUnits('degrees Celscius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowWarnLimit.setStatus('current')
tempLowErrorLimit = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 60)).clone(-30)).setUnits('degrees Celscius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowErrorLimit.setStatus('current')
tempHighWarnHist = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 150)).clone(55)).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighWarnHist.setStatus('current')
tempHighErrorHist = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 150)).clone(90)).setUnits('degrees Celscius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighErrorHist.setStatus('current')
tempLowWarnHist = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 60))).setUnits('degrees Celscius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowWarnHist.setStatus('current')
tempLowErrorHist = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 60)).clone(-20)).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowErrorHist.setStatus('current')
tempSystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 13995, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSystemTemp.setStatus('current')
mibBuilder.exportSymbols("Amperion-MIB", npuDetectedCommLapse=npuDetectedCommLapse, productType=productType, plInpNodeReceivedPkts=plInpNodeReceivedPkts, commandOptions=commandOptions, plcInjector=plcInjector, tempLowErrorLimitTrap=tempLowErrorLimitTrap, batteryTempOutOfRange=batteryTempOutOfRange, amperionifInUnknownProtos=amperionifInUnknownProtos, qosStatus=qosStatus, plCdNumber=plCdNumber, plNetEntry=plNetEntry, plInpGain=plInpGain, plInpNodeCFR=plInpNodeCFR, amperionTrapMgr3=amperionTrapMgr3, plInpNodeEnableProtocolEnableCarriers=plInpNodeEnableProtocolEnableCarriers, amperionSysDescr=amperionSysDescr, serviceClassB=serviceClassB, mcuSoftwareVersion=mcuSoftwareVersion, plNetwork=plNetwork, afeInjActivate=afeInjActivate, plcExtTxGain=plcExtTxGain, macAcceptTableWirelessIf=macAcceptTableWirelessIf, ipDefRouteActivate=ipDefRouteActivate, tempHighWarnLimit=tempHighWarnLimit, plInpAGC=plInpAGC, plInpNodeMeanBPC=plInpNodeMeanBPC, criticalRequestAborted=criticalRequestAborted, txGain=txGain, backupCRC=backupCRC, amperionifInDiscards=amperionifInDiscards, plcDown=plcDown, amperionifOutOctets=amperionifOutOctets, rxGain=rxGain, plInpNodeSNRChanges=plInpNodeSNRChanges, filename=filename, amperionRouteEntry=amperionRouteEntry, amperionifOutDiscards=amperionifOutDiscards, amperionSysName=amperionSysName, criticalBatteryShutdownWarning=criticalBatteryShutdownWarning, tempEventDescription=tempEventDescription, tempLowWarnLimit=tempLowWarnLimit, afeInjRxGain=afeInjRxGain, PYSNMP_MODULE_ID=amperion, amperionipAddrTable=amperionipAddrTable, subscriberTable=subscriberTable, ampMacAcceptTable=ampMacAcceptTable, amperionRouteTable=amperionRouteTable, plTraps=plTraps, plcInjRxGain=plcInjRxGain, tempFanTargetTemp=tempFanTargetTemp, rowStatus=rowStatus, tempHighWarnLimitTrap=tempHighWarnLimitTrap, tempLowWarnHist=tempLowWarnHist, afeExtDownstream=afeExtDownstream, plRemoteCPE=plRemoteCPE, tempFanState=tempFanState, description=description, psHardwareError=psHardwareError, afeExtTxGain=afeExtTxGain, ipRouteProto=ipRouteProto, amperionRoutes=amperionRoutes, shutdownNpu=shutdownNpu, plCdDriverVersion=plCdDriverVersion, plCdEntry=plCdEntry, alarms=alarms, amperionifOutUcastPkts=amperionifOutUcastPkts, primaryCRC=primaryCRC, plInpNodePLR=plInpNodePLR, amperionTrapMgr2=amperionTrapMgr2, serviceClassC=serviceClassC, amperionifAdminStatus=amperionifAdminStatus, plus3point3v=plus3point3v, amperionSystem=amperionSystem, amperionWirelessConfigWifType=amperionWirelessConfigWifType, tempHighErrorLimitTrap=tempHighErrorLimitTrap, upstreamDownstreamRatio=upstreamDownstreamRatio, amperionifInErrors=amperionifInErrors, psDetectedCommLapse=psDetectedCommLapse, plNetRowStatus=plNetRowStatus, batteryCurrent=batteryCurrent, internalMcuTemp=internalMcuTemp, upgradeSchedule=upgradeSchedule, plCdTable=plCdTable, psGroup=psGroup, amperionifPhysAddress=amperionifPhysAddress, p12vOutOfRange=p12vOutOfRange, psBatteryNotConnected=psBatteryNotConnected, amperionifOutErrors=amperionifOutErrors, amperionWirelessConfigKey=amperionWirelessConfigKey, amperionWirelessLinkQuality=amperionWirelessLinkQuality, macAcceptTableRowStatus=macAcceptTableRowStatus, amperionipAdEntNetMask=amperionipAdEntNetMask, plus12v=plus12v, ipRouteMetric4=ipRouteMetric4, amperionWirelessSignalLevel=amperionWirelessSignalLevel, tempSystemTemp=tempSystemTemp, plNetLongMacAddress=plNetLongMacAddress, plInpMaxGain=plInpMaxGain, amperionWirelessConfigChanFreq=amperionWirelessConfigChanFreq, amperionifLastChange=amperionifLastChange, macAcceptTableMacAddress=macAcceptTableMacAddress, ipRouteType=ipRouteType, afeInjUpstream=afeInjUpstream, eventDescription=eventDescription, plInpEntry=plInpEntry, password=password, amperionipAdEntActivate=amperionipAdEntActivate, plInpThresholds=plInpThresholds, accessControlStatus=accessControlStatus, plCdLongMacAddress=plCdLongMacAddress, plInpSamsDecode=plInpSamsDecode, amperionSysLocation=amperionSysLocation, psImageChecksumError=psImageChecksumError, plCards=plCards, name=name, amperionifInNUcastPkts=amperionifInNUcastPkts, ipRouteInfo=ipRouteInfo, amperionWirelessConfigMode=amperionWirelessConfigMode, plInpTotalOctets=plInpTotalOctets, amperionipAdEntReasmMaxSize=amperionipAdEntReasmMaxSize, psHardwareVersion=psHardwareVersion, amperionTrapMgr1=amperionTrapMgr1, afeExtUpstream=afeExtUpstream, plInpNodeReceivedUnrecPkts=plInpNodeReceivedUnrecPkts, npuEt=npuEt, minus8point5v=minus8point5v, psAcOnOff=psAcOnOff, plCdFirmwareVersion=plCdFirmwareVersion, ipRouteMask=ipRouteMask, ipRouteNextHop=ipRouteNextHop, plMibIIExtension=plMibIIExtension, extrChannelNumber=extrChannelNumber, plCdNumRemoteList=plCdNumRemoteList, bootPartition=bootPartition, upStreamDownStream=upStreamDownStream, amperionSysContact=amperionSysContact, plCdIndex=plCdIndex, plInpNodeBPC=plInpNodeBPC, serialNumber=serialNumber, amperionifInOctets=amperionifInOctets, amperionifSpecific=amperionifSpecific, amperionWirelessActivate=amperionWirelessActivate, macAddress=macAddress, afeInjDownstream=afeInjDownstream, plcInjTxGain=plcInjTxGain, plInpNodeReceivedOctets=plInpNodeReceivedOctets, amperionifType=amperionifType, plCdStatus=plCdStatus, tempLowWarnLimitTrap=tempLowWarnLimitTrap, psMode=psMode, afeExtRxGain=afeExtRxGain, batteryVoltage=batteryVoltage, serviceClassA=serviceClassA, subscriberEntry=subscriberEntry, serviceClass=serviceClass, plcExtRxGain=plcExtRxGain, plcUp=plcUp, ipRouteMetric3=ipRouteMetric3, optimizationEntry=optimizationEntry, powerline=powerline, amperionipAdEntAddr=amperionipAdEntAddr, afeInjTxGain=afeInjTxGain, plCdType=plCdType, amperionSysServices=amperionSysServices, amperionInterfaces=amperionInterfaces, ds2=ds2, login=login, amperionifTable=amperionifTable, softwareUpgrade=softwareUpgrade, ipRouteMetric2=ipRouteMetric2, amperionifEntry=amperionifEntry, ipAddress=ipAddress, gpsInfo=gpsInfo, tempHighErrorHist=tempHighErrorHist, rombootVersion=rombootVersion, lastStatus=lastStatus, server2Address=server2Address, serviceClassD=serviceClassD, plInpTable=plInpTable, batteryVoltsOutOfRange=batteryVoltsOutOfRange, ipRouteMetric1=ipRouteMetric1, server1Address=server1Address, plCdHardwareVersion=plCdHardwareVersion, plTransmission=plTransmission, amperionifSpeed=amperionifSpeed, acLineVoltage=acLineVoltage, plCdShortMacAddress=plCdShortMacAddress, amperionWirelessConfigBitRate=amperionWirelessConfigBitRate, afeInjector=afeInjector, plInpNodeSNR=plInpNodeSNR, plInpNodeTable=plInpNodeTable, primaryPartitionContents=primaryPartitionContents, partNumber=partNumber, amperionifDescr=amperionifDescr, plCdReset=plCdReset, amperionipAdEntBcastAddr=amperionipAdEntBcastAddr, psEt=psEt, amperionWirelessConfigWDSPeer=amperionWirelessConfigWDSPeer, ipRouteAge=ipRouteAge, serverAddress=serverAddress, plNetTable=plNetTable, linuxVersion=linuxVersion, interfaceAdminUp=interfaceAdminUp, plcEventDescription=plcEventDescription, tempHighWarnHist=tempHighWarnHist, amperionifNumber=amperionifNumber, plus5v=plus5v, optimizationTable=optimizationTable, plCdSaveAsPermanent=plCdSaveAsPermanent, userGpsInfoString=userGpsInfoString, amperionipAddrEntry=amperionipAddrEntry, plc=plc, amperionSysUpTime=amperionSysUpTime, internal=internal, resetCounters=resetCounters, alarmIndex=alarmIndex, plInpAttenuationGain=plInpAttenuationGain, plCdFactoryReset=plCdFactoryReset, p5vOutOfRange=p5vOutOfRange, mcuTempOutOfRange=mcuTempOutOfRange, powerSupplyInternalError=powerSupplyInternalError, powerCycleNpu=powerCycleNpu, plCdRemoteList=plCdRemoteList, amperionifMtu=amperionifMtu, ampMacAcceptEntry=ampMacAcceptEntry, qualityOfService=qualityOfService, afeCpldResetCount=afeCpldResetCount, afeExtActivate=afeExtActivate, plcLossCount=plcLossCount, tempHighErrorLimit=tempHighErrorLimit, plInpNodeProtocolEnableCarriers=plInpNodeProtocolEnableCarriers, amperionifOutQLen=amperionifOutQLen, amperionWirelessConfigEssid=amperionWirelessConfigEssid, plInpNodeReceivedCorrectedPkts=plInpNodeReceivedCorrectedPkts, currentState=currentState, amperionifInUcastPkts=amperionifInUcastPkts, backupPartitionContents=backupPartitionContents, plInpNodeEnableCarriers=plInpNodeEnableCarriers, amperionSysObjectID=amperionSysObjectID, upgradePartition=upgradePartition, m8point5vOutOfRange=m8point5vOutOfRange, plcExtractor=plcExtractor, tempLowErrorHist=tempLowErrorHist, extrIpaddress=extrIpaddress, currentPartition=currentPartition, amperionipAdRowStatus=amperionipAdRowStatus, tempGroup=tempGroup, ipRouteDest=ipRouteDest, rebootSchedule=rebootSchedule, plInpNodeReceivedPower=plInpNodeReceivedPower, alarmsEntry=alarmsEntry, plCdLink=plCdLink, downstreamFreq=downstreamFreq, plInpNodeReceivedCorrectedOctets=plInpNodeReceivedCorrectedOctets)
mibBuilder.exportSymbols("Amperion-MIB", plNetShortMacAddress=plNetShortMacAddress, npuPuTimes=npuPuTimes, upstreamFreq=upstreamFreq, amperionifOperStatus=amperionifOperStatus, amperionWirelessNoiseLevel=amperionWirelessNoiseLevel, index=index, plcThroughput=plcThroughput, plInpNodeEntry=plInpNodeEntry, p3point3vOutOfRange=p3point3vOutOfRange, amperionifOutNUcastPkts=amperionifOutNUcastPkts, macAcceptTableIndex=macAcceptTableIndex, ipRouteIfIndex=ipRouteIfIndex, interfaceAdminDown=interfaceAdminDown, amperionWireless=amperionWireless, amperionipAdEntIfName=amperionipAdEntIfName, afe=afe, afeExtractor=afeExtractor, ipRouteMetric5=ipRouteMetric5, tempLowErrorLimit=tempLowErrorLimit, swupgradeCompleted=swupgradeCompleted, amperion=amperion, plInpSamsGood=plInpSamsGood, plInpSamsBad=plInpSamsBad, batteryCaseTemp=batteryCaseTemp)
