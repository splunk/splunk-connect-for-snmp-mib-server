#
# PySNMP MIB module H3C-RCR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-RCR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:10:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ModuleIdentity, ObjectIdentity, Integer32, Bits, TimeTicks, NotificationType, MibIdentifier, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "ObjectIdentity", "Integer32", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cRcr = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48))
h3cRcr.setRevisions(('2005-06-28 19:36',))
if mibBuilder.loadTexts: h3cRcr.setLastUpdated('200506281936Z')
if mibBuilder.loadTexts: h3cRcr.setOrganization('Huawei 3Com Technologies Co., Ltd.')
h3cRcrMR = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1))
h3cRcrMRGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 1))
h3cRcrMRAllMaxUsedBandRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrMRAllMaxUsedBandRate.setStatus('current')
h3cRcrMRAllMinUsedBandRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrMRAllMinUsedBandRate.setStatus('current')
h3cRcrMRListenTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrMRListenTime.setStatus('current')
h3cRcrMRStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 2), )
if mibBuilder.loadTexts: h3cRcrMRStateTable.setStatus('current')
h3cRcrMRStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 2, 1), ).setIndexNames((0, "H3C-RCR-MIB", "h3cRcrMRName"))
if mibBuilder.loadTexts: h3cRcrMRStateEntry.setStatus('current')
h3cRcrMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cRcrMRName.setStatus('current')
h3cRcrMRState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("controlled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrMRState.setStatus('current')
h3cRcrMRAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrMRAuthType.setStatus('current')
h3cRcrMRAuthPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrMRAuthPwd.setStatus('current')
h3cRcrMROutIfStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 3), )
if mibBuilder.loadTexts: h3cRcrMROutIfStateTable.setStatus('current')
h3cRcrMROutIfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 3, 1), ).setIndexNames((0, "H3C-RCR-MIB", "h3cRcrMRName"), (0, "H3C-RCR-MIB", "h3cRcrMROutIfName"))
if mibBuilder.loadTexts: h3cRcrMROutIfStateEntry.setStatus('current')
h3cRcrMROutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: h3cRcrMROutIfName.setStatus('current')
h3cRcrMROutIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("notExist", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrMROutIfState.setStatus('current')
h3cRcrMROutIfMaxUsedBandRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrMROutIfMaxUsedBandRate.setStatus('current')
h3cRcrMROutIfMinUsedBandRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrMROutIfMinUsedBandRate.setStatus('current')
h3cRcrMROutIfUsedBandRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrMROutIfUsedBandRate.setStatus('current')
h3cRcrCR = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2))
h3cRcrCRGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1))
h3cRcrCRState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRState.setStatus('current')
h3cRcrCRPortNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRPortNum.setStatus('current')
h3cRcrCRCtrlMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("control", 1), ("observe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRCtrlMode.setStatus('current')
h3cRcrCRChooseMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("best", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRChooseMode.setStatus('current')
h3cRcrCRKeepaliveTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRKeepaliveTime.setStatus('current')
h3cRcrCRPolicyMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("prefix", 1), ("operation", 2), ("study", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRPolicyMode.setStatus('current')
h3cRcrCRStudyMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("maxThoughout", 1), ("maxDelay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRStudyMode.setStatus('current')
h3cRcrCRStudyIpPrefixNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRStudyIpPrefixNum.setStatus('current')
h3cRcrCRIpPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRIpPrefixLen.setStatus('current')
h3cRcrCRRcrPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2), )
if mibBuilder.loadTexts: h3cRcrCRRcrPolicyTable.setStatus('current')
h3cRcrCRRcrPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1), ).setIndexNames((0, "H3C-RCR-MIB", "h3cRcrCRRcrPlyID"))
if mibBuilder.loadTexts: h3cRcrCRRcrPolicyEntry.setStatus('current')
h3cRcrCRRcrPlyID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cRcrCRRcrPlyID.setStatus('current')
h3cRcrCRRcrPlyMatchIPListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRRcrPlyMatchIPListName.setStatus('current')
h3cRcrCRRcrPlyMatchStudyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRRcrPlyMatchStudyEnable.setStatus('current')
h3cRcrCRRcrPlyMatchOperPlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRRcrPlyMatchOperPlyName.setStatus('current')
h3cRcrCRRcrAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 3999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRRcrAclNumber.setStatus('current')
h3cRcrCRRcrPlyDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRRcrPlyDelayTime.setStatus('current')
h3cRcrCRRcrPlyLossRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cRcrCRRcrPlyLossRate.setStatus('current')
h3cRcrCRMatPrefixPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3), )
if mibBuilder.loadTexts: h3cRcrCRMatPrefixPerfTable.setStatus('current')
h3cRcrCRMatPrefixPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3, 1), ).setIndexNames((0, "H3C-RCR-MIB", "h3cRcrCRMatPrefPerfAddrType"), (0, "H3C-RCR-MIB", "h3cRcrCRMatPrefPerfDestIPAddr"), (0, "H3C-RCR-MIB", "h3cRcrCRMatPrefPerfDestMaskLen"))
if mibBuilder.loadTexts: h3cRcrCRMatPrefixPerfEntry.setStatus('current')
h3cRcrCRMatPrefPerfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: h3cRcrCRMatPrefPerfAddrType.setStatus('current')
h3cRcrCRMatPrefPerfDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: h3cRcrCRMatPrefPerfDestIPAddr.setStatus('current')
h3cRcrCRMatPrefPerfDestMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: h3cRcrCRMatPrefPerfDestMaskLen.setStatus('current')
h3cRcrCRMatPrefPerfDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRMatPrefPerfDelayTime.setStatus('current')
h3cRcrCRMatPrefPerfLossRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRMatPrefPerfLossRate.setStatus('current')
h3cRcrCRMatPrefPerfThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 3, 1, 6), Integer32()).setUnits('kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRMatPrefPerfThroughput.setStatus('current')
h3cRcrCRAdjustPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4), )
if mibBuilder.loadTexts: h3cRcrCRAdjustPrefixTable.setStatus('current')
h3cRcrCRAdjustPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1), ).setIndexNames((0, "H3C-RCR-MIB", "h3cRcrCRAdjuPrefDestAddrType"), (0, "H3C-RCR-MIB", "h3cRcrCRAdjuPrefDestAddr"), (0, "H3C-RCR-MIB", "h3cRcrCRAdjuPrefMaskLen"), (0, "H3C-RCR-MIB", "h3cRcrCRAdjuPrefPreMRName"), (0, "H3C-RCR-MIB", "h3cRcrCRAdjuPrefPreOutIfName"))
if mibBuilder.loadTexts: h3cRcrCRAdjustPrefixEntry.setStatus('current')
h3cRcrCRAdjuPrefDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefDestAddrType.setStatus('current')
h3cRcrCRAdjuPrefDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefDestAddr.setStatus('current')
h3cRcrCRAdjuPrefMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefMaskLen.setStatus('current')
h3cRcrCRAdjuPrefPreMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefPreMRName.setStatus('current')
h3cRcrCRAdjuPrefPreOutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefPreOutIfName.setStatus('current')
h3cRcrCRAdjuPrefCurMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefCurMRName.setStatus('current')
h3cRcrCRAdjuPrefCurOutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefCurOutIfName.setStatus('current')
h3cRcrCRAdjuPrefPersistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 8), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefPersistTime.setStatus('current')
h3cRcrCRAdjuPrefAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 48, 2, 4, 1, 9), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRcrCRAdjuPrefAgeTime.setStatus('current')
mibBuilder.exportSymbols("H3C-RCR-MIB", h3cRcr=h3cRcr, h3cRcrCRRcrPlyLossRate=h3cRcrCRRcrPlyLossRate, h3cRcrCRMatPrefPerfLossRate=h3cRcrCRMatPrefPerfLossRate, h3cRcrCRRcrAclNumber=h3cRcrCRRcrAclNumber, h3cRcrCRMatPrefPerfThroughput=h3cRcrCRMatPrefPerfThroughput, h3cRcrCRAdjuPrefPreMRName=h3cRcrCRAdjuPrefPreMRName, h3cRcrCRAdjuPrefAgeTime=h3cRcrCRAdjuPrefAgeTime, h3cRcrMROutIfMinUsedBandRate=h3cRcrMROutIfMinUsedBandRate, h3cRcrCRMatPrefPerfDestIPAddr=h3cRcrCRMatPrefPerfDestIPAddr, h3cRcrCRKeepaliveTime=h3cRcrCRKeepaliveTime, h3cRcrCRAdjustPrefixTable=h3cRcrCRAdjustPrefixTable, h3cRcrCRPolicyMode=h3cRcrCRPolicyMode, h3cRcrCRStudyMode=h3cRcrCRStudyMode, h3cRcrMRGroup=h3cRcrMRGroup, h3cRcrCRMatPrefPerfDelayTime=h3cRcrCRMatPrefPerfDelayTime, h3cRcrCRMatPrefixPerfEntry=h3cRcrCRMatPrefixPerfEntry, h3cRcrCRAdjuPrefDestAddrType=h3cRcrCRAdjuPrefDestAddrType, h3cRcrMROutIfMaxUsedBandRate=h3cRcrMROutIfMaxUsedBandRate, h3cRcrCRAdjuPrefCurOutIfName=h3cRcrCRAdjuPrefCurOutIfName, h3cRcrCRRcrPlyMatchOperPlyName=h3cRcrCRRcrPlyMatchOperPlyName, h3cRcrCRRcrPolicyEntry=h3cRcrCRRcrPolicyEntry, PYSNMP_MODULE_ID=h3cRcr, h3cRcrCRState=h3cRcrCRState, h3cRcrMRName=h3cRcrMRName, h3cRcrCRAdjuPrefPersistTime=h3cRcrCRAdjuPrefPersistTime, h3cRcrMRListenTime=h3cRcrMRListenTime, h3cRcrCRGroup=h3cRcrCRGroup, h3cRcrCRRcrPlyMatchStudyEnable=h3cRcrCRRcrPlyMatchStudyEnable, h3cRcrCRAdjuPrefPreOutIfName=h3cRcrCRAdjuPrefPreOutIfName, h3cRcrCRChooseMode=h3cRcrCRChooseMode, h3cRcrMRStateEntry=h3cRcrMRStateEntry, h3cRcrCRMatPrefPerfAddrType=h3cRcrCRMatPrefPerfAddrType, h3cRcrCRRcrPlyID=h3cRcrCRRcrPlyID, h3cRcrCRStudyIpPrefixNum=h3cRcrCRStudyIpPrefixNum, h3cRcrCRMatPrefixPerfTable=h3cRcrCRMatPrefixPerfTable, h3cRcrCRRcrPolicyTable=h3cRcrCRRcrPolicyTable, h3cRcrCRAdjuPrefMaskLen=h3cRcrCRAdjuPrefMaskLen, h3cRcrMRAllMaxUsedBandRate=h3cRcrMRAllMaxUsedBandRate, h3cRcrMROutIfName=h3cRcrMROutIfName, h3cRcrMRAllMinUsedBandRate=h3cRcrMRAllMinUsedBandRate, h3cRcrMROutIfStateEntry=h3cRcrMROutIfStateEntry, h3cRcrMROutIfUsedBandRate=h3cRcrMROutIfUsedBandRate, h3cRcrMR=h3cRcrMR, h3cRcrMRStateTable=h3cRcrMRStateTable, h3cRcrMRAuthType=h3cRcrMRAuthType, h3cRcrMRState=h3cRcrMRState, h3cRcrCRAdjuPrefDestAddr=h3cRcrCRAdjuPrefDestAddr, h3cRcrCRRcrPlyDelayTime=h3cRcrCRRcrPlyDelayTime, h3cRcrCRIpPrefixLen=h3cRcrCRIpPrefixLen, h3cRcrCRCtrlMode=h3cRcrCRCtrlMode, h3cRcrCRMatPrefPerfDestMaskLen=h3cRcrCRMatPrefPerfDestMaskLen, h3cRcrCRRcrPlyMatchIPListName=h3cRcrCRRcrPlyMatchIPListName, h3cRcrCRAdjustPrefixEntry=h3cRcrCRAdjustPrefixEntry, h3cRcrCRPortNum=h3cRcrCRPortNum, h3cRcrCRAdjuPrefCurMRName=h3cRcrCRAdjuPrefCurMRName, h3cRcrCR=h3cRcrCR, h3cRcrMROutIfState=h3cRcrMROutIfState, h3cRcrMROutIfStateTable=h3cRcrMROutIfStateTable, h3cRcrMRAuthPwd=h3cRcrMRAuthPwd)
