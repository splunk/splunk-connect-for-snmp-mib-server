#
# PySNMP MIB module EATON-EPDU-PU-MI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EATON-EPDU-PU-MI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, MibIdentifier, Counter32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Integer32, ObjectIdentity, iso, IpAddress, Unsigned32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Integer32", "ObjectIdentity", "iso", "IpAddress", "Unsigned32", "Gauge32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pulizzi = ModuleIdentity((1, 3, 6, 1, 4, 1, 20677))
pulizzi.setRevisions(('2010-02-03 12:00', '2009-01-08 12:00', '2008-12-19 12:00', '2008-11-06 12:00', '2008-08-25 12:00', '2008-07-09 12:00',))
if mibBuilder.loadTexts: pulizzi.setLastUpdated('201002031200Z')
if mibBuilder.loadTexts: pulizzi.setOrganization('Eaton Corporation')
monitoredepdu = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3))
epdum1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1))
epdum11 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1))
unitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1))
networkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3))
chanNames = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4))
lowCurrentThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5))
highCurrentThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6))
lowTempThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 7))
highTempThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 8))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25, 5))
uptime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uptime.setStatus('current')
unitName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitName.setStatus('current')
lowCurrentThreshold1old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 3), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold1old.setStatus('deprecated')
lowCurrentThreshold2old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 4), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold2old.setStatus('deprecated')
lowCurrentThreshold3old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 5), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold3old.setStatus('deprecated')
lowCurrentThreshold4old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 6), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold4old.setStatus('deprecated')
lowCurrentThreshold5old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 7), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold5old.setStatus('deprecated')
lowCurrentThreshold6old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 8), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold6old.setStatus('deprecated')
lowCurrentThreshold7old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 9), Integer32()).setUnits('Amps or Degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold7old.setStatus('deprecated')
lowCurrentThreshold8old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 10), Integer32()).setUnits('Amps or Degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold8old.setStatus('deprecated')
highCurrentThreshold1old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 11), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold1old.setStatus('deprecated')
highCurrentThreshold2old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 12), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold2old.setStatus('deprecated')
highCurrentThreshold3old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 13), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold3old.setStatus('deprecated')
highCurrentThreshold4old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 14), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold4old.setStatus('deprecated')
highCurrentThreshold5old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 15), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold5old.setStatus('deprecated')
highCurrentThreshold6old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 16), Integer32()).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold6old.setStatus('deprecated')
highCurrentThreshold7old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 17), Integer32()).setUnits('Amps or Degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold7old.setStatus('deprecated')
highCurrentThreshold8old = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 18), Integer32()).setUnits('Amps or Degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold8old.setStatus('deprecated')
temperature1Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperature1Enable.setStatus('current')
temperature2Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperature2Enable.setStatus('current')
firmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareRevision.setStatus('current')
assetID = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: assetID.setStatus('current')
numCurrentChannels = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCurrentChannels.setStatus('current')
currentMonitorType = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("totalUnitCurrent", 1), ("branchCurrent", 2), ("outletCurrent", 3), ("threePhaseCurrent", 4), ("splitPhaseCurrent", 5), ("singlePhaseWithBranch", 6), ("threePhaseWithBranch", 7), ("splitPhaseWithBranch", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorType.setStatus('current')
unitIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitIPAddress.setStatus('current')
unitSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSubnetMask.setStatus('current')
unitGateway = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitGateway.setStatus('current')
unitMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitMACAddress.setStatus('current')
trapDestIP = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestIP.setStatus('current')
mailServerIP = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailServerIP.setStatus('current')
alertEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertEmailAddress.setStatus('current')
chan1 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 1), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan1.setStatus('current')
chan2 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 2), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan2.setStatus('current')
chan3 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 3), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan3.setStatus('current')
chan4 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 4), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan4.setStatus('current')
chan5 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 5), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan5.setStatus('current')
chan6 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 6), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan6.setStatus('current')
chan7 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 7), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan7.setStatus('current')
chan8 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 8), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan8.setStatus('current')
chan9 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 9), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan9.setStatus('current')
chan10 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 10), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan10.setStatus('current')
chan11 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 11), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan11.setStatus('current')
chan12 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 12), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan12.setStatus('current')
chan13 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 13), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan13.setStatus('current')
chan14 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 14), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan14.setStatus('current')
chan15 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 15), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan15.setStatus('current')
chan16 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 16), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan16.setStatus('current')
chan17 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 17), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan17.setStatus('current')
chan18 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 18), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan18.setStatus('current')
chan19 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 19), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan19.setStatus('current')
chan20 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 20), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan20.setStatus('current')
chan21 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 21), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan21.setStatus('current')
chan22 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 22), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan22.setStatus('current')
chan23 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 23), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan23.setStatus('current')
chan24 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 24), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan24.setStatus('current')
chan25 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 25), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan25.setStatus('current')
chan26 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 26), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan26.setStatus('current')
chan27 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 27), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan27.setStatus('current')
chan28 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 28), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan28.setStatus('current')
chan29 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 29), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan29.setStatus('current')
chan30 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 30), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan30.setStatus('current')
chan31 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 31), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan31.setStatus('current')
chan32 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 32), Integer32()).setUnits('0.1 Amps RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: chan32.setStatus('current')
tempChan1 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 248), Integer32()).setUnits('Degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempChan1.setStatus('current')
tempChan2 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 3, 249), Integer32()).setUnits('Degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempChan2.setStatus('current')
chan1Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan1Name.setStatus('current')
chan2Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan2Name.setStatus('current')
chan3Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan3Name.setStatus('current')
chan4Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan4Name.setStatus('current')
chan5Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan5Name.setStatus('current')
chan6Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan6Name.setStatus('current')
chan7Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan7Name.setStatus('current')
chan8Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan8Name.setStatus('current')
chan9Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan9Name.setStatus('current')
chan10Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan10Name.setStatus('current')
chan11Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan11Name.setStatus('current')
chan12Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan12Name.setStatus('current')
chan13Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan13Name.setStatus('current')
chan14Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan14Name.setStatus('current')
chan15Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan15Name.setStatus('current')
chan16Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan16Name.setStatus('current')
chan17Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan17Name.setStatus('current')
chan18Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan18Name.setStatus('current')
chan19Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan19Name.setStatus('current')
chan20Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan20Name.setStatus('current')
chan21Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan21Name.setStatus('current')
chan22Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan22Name.setStatus('current')
chan23Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan23Name.setStatus('current')
chan24Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan24Name.setStatus('current')
chan25Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan25Name.setStatus('current')
chan26Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan26Name.setStatus('current')
chan27Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan27Name.setStatus('current')
chan28Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan28Name.setStatus('current')
chan29Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan29Name.setStatus('current')
chan30Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan30Name.setStatus('current')
chan31Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan31Name.setStatus('current')
chan32Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chan32Name.setStatus('current')
temp1Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 248), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temp1Name.setStatus('current')
temp2Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 4, 249), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temp2Name.setStatus('current')
lowCurrentThreshold1 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold1.setStatus('current')
lowCurrentThreshold2 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold2.setStatus('current')
lowCurrentThreshold3 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold3.setStatus('current')
lowCurrentThreshold4 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold4.setStatus('current')
lowCurrentThreshold5 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold5.setStatus('current')
lowCurrentThreshold6 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold6.setStatus('current')
lowCurrentThreshold7 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold7.setStatus('current')
lowCurrentThreshold8 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold8.setStatus('current')
lowCurrentThreshold9 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold9.setStatus('current')
lowCurrentThreshold10 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold10.setStatus('current')
lowCurrentThreshold11 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold11.setStatus('current')
lowCurrentThreshold12 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold12.setStatus('current')
lowCurrentThreshold13 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold13.setStatus('current')
lowCurrentThreshold14 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold14.setStatus('current')
lowCurrentThreshold15 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold15.setStatus('current')
lowCurrentThreshold16 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold16.setStatus('current')
lowCurrentThreshold17 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold17.setStatus('current')
lowCurrentThreshold18 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold18.setStatus('current')
lowCurrentThreshold19 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold19.setStatus('current')
lowCurrentThreshold20 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold20.setStatus('current')
lowCurrentThreshold21 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold21.setStatus('current')
lowCurrentThreshold22 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold22.setStatus('current')
lowCurrentThreshold23 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold23.setStatus('current')
lowCurrentThreshold24 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold24.setStatus('current')
lowCurrentThreshold25 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold25.setStatus('current')
lowCurrentThreshold26 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold26.setStatus('current')
lowCurrentThreshold27 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold27.setStatus('current')
lowCurrentThreshold28 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold28.setStatus('current')
lowCurrentThreshold29 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold29.setStatus('current')
lowCurrentThreshold30 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold30.setStatus('current')
lowCurrentThreshold31 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold31.setStatus('current')
lowCurrentThreshold32 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 5, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowCurrentThreshold32.setStatus('current')
highCurrentThreshold1 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold1.setStatus('current')
highCurrentThreshold2 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold2.setStatus('current')
highCurrentThreshold3 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold3.setStatus('current')
highCurrentThreshold4 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold4.setStatus('current')
highCurrentThreshold5 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold5.setStatus('current')
highCurrentThreshold6 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold6.setStatus('current')
highCurrentThreshold7 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold7.setStatus('current')
highCurrentThreshold8 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold8.setStatus('current')
highCurrentThreshold9 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold9.setStatus('current')
highCurrentThreshold10 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold10.setStatus('current')
highCurrentThreshold11 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold11.setStatus('current')
highCurrentThreshold12 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold12.setStatus('current')
highCurrentThreshold13 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold13.setStatus('current')
highCurrentThreshold14 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold14.setStatus('current')
highCurrentThreshold15 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold15.setStatus('current')
highCurrentThreshold16 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold16.setStatus('current')
highCurrentThreshold17 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold17.setStatus('current')
highCurrentThreshold18 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold18.setStatus('current')
highCurrentThreshold19 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold19.setStatus('current')
highCurrentThreshold20 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold20.setStatus('current')
highCurrentThreshold21 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold21.setStatus('current')
highCurrentThreshold22 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold22.setStatus('current')
highCurrentThreshold23 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold23.setStatus('current')
highCurrentThreshold24 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold24.setStatus('current')
highCurrentThreshold25 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold25.setStatus('current')
highCurrentThreshold26 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold26.setStatus('current')
highCurrentThreshold27 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold27.setStatus('current')
highCurrentThreshold28 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold28.setStatus('current')
highCurrentThreshold29 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold29.setStatus('current')
highCurrentThreshold30 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold30.setStatus('current')
highCurrentThreshold31 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold31.setStatus('current')
highCurrentThreshold32 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 6, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highCurrentThreshold32.setStatus('current')
lowTempThreshold1 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setUnits('Degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowTempThreshold1.setStatus('current')
lowTempThreshold2 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setUnits('Degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowTempThreshold2.setStatus('current')
highTempThreshold1 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setUnits('Degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highTempThreshold1.setStatus('current')
highTempThreshold2 = MibScalar((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setUnits('Degrees').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highTempThreshold2.setStatus('current')
compliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25, 1)).setObjects(("EATON-EPDU-PU-MI-MIB", "thresholdGroup"), ("EATON-EPDU-PU-MI-MIB", "unitGroup"), ("EATON-EPDU-PU-MI-MIB", "measurementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliances = compliances.setStatus('current')
oldCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25, 2)).setObjects(("EATON-EPDU-PU-MI-MIB", "thresholdGroupOld"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldCompliances = oldCompliances.setStatus('deprecated')
unitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25, 5, 1)).setObjects(("EATON-EPDU-PU-MI-MIB", "mailServerIP"), ("EATON-EPDU-PU-MI-MIB", "alertEmailAddress"), ("EATON-EPDU-PU-MI-MIB", "assetID"), ("EATON-EPDU-PU-MI-MIB", "chan10Name"), ("EATON-EPDU-PU-MI-MIB", "chan11Name"), ("EATON-EPDU-PU-MI-MIB", "chan12Name"), ("EATON-EPDU-PU-MI-MIB", "chan13Name"), ("EATON-EPDU-PU-MI-MIB", "chan14Name"), ("EATON-EPDU-PU-MI-MIB", "chan15Name"), ("EATON-EPDU-PU-MI-MIB", "chan16Name"), ("EATON-EPDU-PU-MI-MIB", "chan17Name"), ("EATON-EPDU-PU-MI-MIB", "chan18Name"), ("EATON-EPDU-PU-MI-MIB", "chan19Name"), ("EATON-EPDU-PU-MI-MIB", "chan1Name"), ("EATON-EPDU-PU-MI-MIB", "chan20Name"), ("EATON-EPDU-PU-MI-MIB", "chan21Name"), ("EATON-EPDU-PU-MI-MIB", "chan22Name"), ("EATON-EPDU-PU-MI-MIB", "chan23Name"), ("EATON-EPDU-PU-MI-MIB", "chan24Name"), ("EATON-EPDU-PU-MI-MIB", "chan25Name"), ("EATON-EPDU-PU-MI-MIB", "chan26Name"), ("EATON-EPDU-PU-MI-MIB", "chan27Name"), ("EATON-EPDU-PU-MI-MIB", "chan28Name"), ("EATON-EPDU-PU-MI-MIB", "chan29Name"), ("EATON-EPDU-PU-MI-MIB", "chan2Name"), ("EATON-EPDU-PU-MI-MIB", "chan30Name"), ("EATON-EPDU-PU-MI-MIB", "chan31Name"), ("EATON-EPDU-PU-MI-MIB", "chan32Name"), ("EATON-EPDU-PU-MI-MIB", "chan3Name"), ("EATON-EPDU-PU-MI-MIB", "chan4Name"), ("EATON-EPDU-PU-MI-MIB", "chan5Name"), ("EATON-EPDU-PU-MI-MIB", "chan6Name"), ("EATON-EPDU-PU-MI-MIB", "chan7Name"), ("EATON-EPDU-PU-MI-MIB", "chan8Name"), ("EATON-EPDU-PU-MI-MIB", "chan9Name"), ("EATON-EPDU-PU-MI-MIB", "currentMonitorType"), ("EATON-EPDU-PU-MI-MIB", "firmwareRevision"), ("EATON-EPDU-PU-MI-MIB", "numCurrentChannels"), ("EATON-EPDU-PU-MI-MIB", "temp1Name"), ("EATON-EPDU-PU-MI-MIB", "temp2Name"), ("EATON-EPDU-PU-MI-MIB", "temperature1Enable"), ("EATON-EPDU-PU-MI-MIB", "temperature2Enable"), ("EATON-EPDU-PU-MI-MIB", "trapDestIP"), ("EATON-EPDU-PU-MI-MIB", "unitGateway"), ("EATON-EPDU-PU-MI-MIB", "unitIPAddress"), ("EATON-EPDU-PU-MI-MIB", "unitMACAddress"), ("EATON-EPDU-PU-MI-MIB", "unitName"), ("EATON-EPDU-PU-MI-MIB", "unitSubnetMask"), ("EATON-EPDU-PU-MI-MIB", "uptime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitGroup = unitGroup.setStatus('current')
measurementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25, 5, 2)).setObjects(("EATON-EPDU-PU-MI-MIB", "chan1"), ("EATON-EPDU-PU-MI-MIB", "chan10"), ("EATON-EPDU-PU-MI-MIB", "chan11"), ("EATON-EPDU-PU-MI-MIB", "chan12"), ("EATON-EPDU-PU-MI-MIB", "chan13"), ("EATON-EPDU-PU-MI-MIB", "chan14"), ("EATON-EPDU-PU-MI-MIB", "chan15"), ("EATON-EPDU-PU-MI-MIB", "chan16"), ("EATON-EPDU-PU-MI-MIB", "chan17"), ("EATON-EPDU-PU-MI-MIB", "chan18"), ("EATON-EPDU-PU-MI-MIB", "chan19"), ("EATON-EPDU-PU-MI-MIB", "chan2"), ("EATON-EPDU-PU-MI-MIB", "chan20"), ("EATON-EPDU-PU-MI-MIB", "chan21"), ("EATON-EPDU-PU-MI-MIB", "chan22"), ("EATON-EPDU-PU-MI-MIB", "chan23"), ("EATON-EPDU-PU-MI-MIB", "chan24"), ("EATON-EPDU-PU-MI-MIB", "chan25"), ("EATON-EPDU-PU-MI-MIB", "chan26"), ("EATON-EPDU-PU-MI-MIB", "chan27"), ("EATON-EPDU-PU-MI-MIB", "chan28"), ("EATON-EPDU-PU-MI-MIB", "chan29"), ("EATON-EPDU-PU-MI-MIB", "chan3"), ("EATON-EPDU-PU-MI-MIB", "chan30"), ("EATON-EPDU-PU-MI-MIB", "chan31"), ("EATON-EPDU-PU-MI-MIB", "chan32"), ("EATON-EPDU-PU-MI-MIB", "chan4"), ("EATON-EPDU-PU-MI-MIB", "chan5"), ("EATON-EPDU-PU-MI-MIB", "chan6"), ("EATON-EPDU-PU-MI-MIB", "chan7"), ("EATON-EPDU-PU-MI-MIB", "chan8"), ("EATON-EPDU-PU-MI-MIB", "chan9"), ("EATON-EPDU-PU-MI-MIB", "tempChan1"), ("EATON-EPDU-PU-MI-MIB", "tempChan2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementGroup = measurementGroup.setStatus('current')
thresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25, 5, 3)).setObjects(("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold1"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold10"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold11"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold12"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold13"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold14"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold15"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold16"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold17"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold18"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold19"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold2"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold20"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold21"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold22"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold23"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold24"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold25"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold26"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold27"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold28"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold29"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold3"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold30"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold31"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold32"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold4"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold5"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold6"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold7"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold8"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold9"), ("EATON-EPDU-PU-MI-MIB", "highTempThreshold1"), ("EATON-EPDU-PU-MI-MIB", "highTempThreshold2"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold1"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold10"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold11"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold12"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold13"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold14"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold15"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold16"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold17"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold18"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold19"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold2"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold20"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold21"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold22"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold23"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold24"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold25"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold26"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold27"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold28"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold29"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold3"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold30"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold31"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold32"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold4"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold5"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold6"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold7"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold8"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold9"), ("EATON-EPDU-PU-MI-MIB", "lowTempThreshold1"), ("EATON-EPDU-PU-MI-MIB", "lowTempThreshold2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    thresholdGroup = thresholdGroup.setStatus('current')
thresholdGroupOld = ObjectGroup((1, 3, 6, 1, 4, 1, 20677, 3, 1, 1, 25, 5, 4)).setObjects(("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold1old"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold2old"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold3old"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold4old"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold5old"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold6old"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold7old"), ("EATON-EPDU-PU-MI-MIB", "highCurrentThreshold8old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold1old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold2old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold3old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold4old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold5old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold6old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold7old"), ("EATON-EPDU-PU-MI-MIB", "lowCurrentThreshold8old"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    thresholdGroupOld = thresholdGroupOld.setStatus('deprecated')
mibBuilder.exportSymbols("EATON-EPDU-PU-MI-MIB", chanNames=chanNames, highCurrentThreshold18=highCurrentThreshold18, chan11Name=chan11Name, chan9Name=chan9Name, chan26=chan26, highCurrentThreshold25=highCurrentThreshold25, lowCurrentThreshold2old=lowCurrentThreshold2old, chan29=chan29, highCurrentThreshold20=highCurrentThreshold20, unitConfig=unitConfig, highCurrentThreshold16=highCurrentThreshold16, numCurrentChannels=numCurrentChannels, highCurrentThreshold21=highCurrentThreshold21, highCurrentThreshold22=highCurrentThreshold22, lowCurrentThreshold8old=lowCurrentThreshold8old, lowCurrentThreshold16=lowCurrentThreshold16, highCurrentThreshold23=highCurrentThreshold23, chan15Name=chan15Name, lowCurrentThreshold19=lowCurrentThreshold19, lowCurrentThreshold21=lowCurrentThreshold21, chan12Name=chan12Name, chan12=chan12, highCurrentThreshold26=highCurrentThreshold26, highCurrentThreshold31=highCurrentThreshold31, chan10=chan10, chan18=chan18, highCurrentThreshold2old=highCurrentThreshold2old, lowCurrentThreshold13=lowCurrentThreshold13, thresholdGroup=thresholdGroup, highCurrentThreshold29=highCurrentThreshold29, lowCurrentThreshold31=lowCurrentThreshold31, highTempThresh=highTempThresh, chan16Name=chan16Name, highCurrentThreshold19=highCurrentThreshold19, monitoredepdu=monitoredepdu, chan10Name=chan10Name, lowCurrentThreshold30=lowCurrentThreshold30, highCurrentThreshold32=highCurrentThreshold32, chan4=chan4, highCurrentThreshold24=highCurrentThreshold24, chan1=chan1, chan21Name=chan21Name, chan31Name=chan31Name, lowCurrentThreshold28=lowCurrentThreshold28, measurementGroup=measurementGroup, tempChan1=tempChan1, networkSettings=networkSettings, lowCurrentThreshold5=lowCurrentThreshold5, lowCurrentThreshold26=lowCurrentThreshold26, chan31=chan31, unitSubnetMask=unitSubnetMask, chan3Name=chan3Name, highCurrentThreshold15=highCurrentThreshold15, chan30Name=chan30Name, lowCurrentThreshold3=lowCurrentThreshold3, chan19Name=chan19Name, chan22Name=chan22Name, highCurrentThreshold3=highCurrentThreshold3, lowCurrentThreshold1old=lowCurrentThreshold1old, unitMACAddress=unitMACAddress, highCurrentThreshold27=highCurrentThreshold27, tempChan2=tempChan2, lowCurrentThreshold22=lowCurrentThreshold22, temp1Name=temp1Name, lowCurrentThreshold17=lowCurrentThreshold17, highCurrentThreshold2=highCurrentThreshold2, lowCurrentThreshold12=lowCurrentThreshold12, highTempThreshold2=highTempThreshold2, chan25Name=chan25Name, chan15=chan15, chan27=chan27, chan29Name=chan29Name, chan16=chan16, chan28=chan28, lowCurrentThreshold14=lowCurrentThreshold14, highCurrentThreshold4=highCurrentThreshold4, temperature2Enable=temperature2Enable, chan4Name=chan4Name, chan20=chan20, oldCompliances=oldCompliances, lowCurrentThreshold29=lowCurrentThreshold29, highCurrentThreshold3old=highCurrentThreshold3old, unitGateway=unitGateway, highCurrentThreshold1=highCurrentThreshold1, trapDestIP=trapDestIP, highCurrentThreshold8=highCurrentThreshold8, highCurrentThreshold9=highCurrentThreshold9, lowCurrentThreshold1=lowCurrentThreshold1, thresholdGroupOld=thresholdGroupOld, chan17Name=chan17Name, chan26Name=chan26Name, chan19=chan19, temperature1Enable=temperature1Enable, lowTempThreshold1=lowTempThreshold1, chan3=chan3, chan21=chan21, pulizzi=pulizzi, chan7=chan7, highCurrentThreshold11=highCurrentThreshold11, highCurrentThreshold12=highCurrentThreshold12, highCurrentThreshold14=highCurrentThreshold14, lowCurrentThreshold23=lowCurrentThreshold23, chan23Name=chan23Name, lowCurrentThreshold6old=lowCurrentThreshold6old, chan30=chan30, lowCurrentThreshold20=lowCurrentThreshold20, lowCurrentThreshold27=lowCurrentThreshold27, chan24=chan24, lowCurrentThreshold7=lowCurrentThreshold7, highCurrentThreshold10=highCurrentThreshold10, chan23=chan23, chan14Name=chan14Name, chan2=chan2, lowCurrentThresh=lowCurrentThresh, lowCurrentThreshold32=lowCurrentThreshold32, highCurrentThreshold4old=highCurrentThreshold4old, currentMonitorType=currentMonitorType, lowCurrentThreshold18=lowCurrentThreshold18, lowCurrentThreshold2=lowCurrentThreshold2, chan8Name=chan8Name, highCurrentThreshold1old=highCurrentThreshold1old, chan28Name=chan28Name, epdum11=epdum11, highCurrentThreshold30=highCurrentThreshold30, highCurrentThreshold28=highCurrentThreshold28, lowCurrentThreshold9=lowCurrentThreshold9, highCurrentThreshold6=highCurrentThreshold6, chan14=chan14, chan13=chan13, uptime=uptime, lowCurrentThreshold11=lowCurrentThreshold11, temp2Name=temp2Name, chan6=chan6, chan17=chan17, lowCurrentThreshold4old=lowCurrentThreshold4old, lowTempThresh=lowTempThresh, chan24Name=chan24Name, lowCurrentThreshold4=lowCurrentThreshold4, chan18Name=chan18Name, lowTempThreshold2=lowTempThreshold2, lowCurrentThreshold24=lowCurrentThreshold24, chan32Name=chan32Name, chan6Name=chan6Name, unitName=unitName, mailServerIP=mailServerIP, chan32=chan32, lowCurrentThreshold15=lowCurrentThreshold15, lowCurrentThreshold3old=lowCurrentThreshold3old, measurements=measurements, highCurrentThresh=highCurrentThresh, chan11=chan11, chan5=chan5, chan7Name=chan7Name, compliances=compliances, epdum1=epdum1, chan25=chan25, chan22=chan22, lowCurrentThreshold5old=lowCurrentThreshold5old, chan13Name=chan13Name, highCurrentThreshold13=highCurrentThreshold13, PYSNMP_MODULE_ID=pulizzi, lowCurrentThreshold10=lowCurrentThreshold10, chan27Name=chan27Name, unitGroup=unitGroup, unitIPAddress=unitIPAddress, highCurrentThreshold17=highCurrentThreshold17, chan9=chan9, chan1Name=chan1Name, chan20Name=chan20Name, highCurrentThreshold6old=highCurrentThreshold6old, lowCurrentThreshold6=lowCurrentThreshold6, highCurrentThreshold7=highCurrentThreshold7, alertEmailAddress=alertEmailAddress, highCurrentThreshold7old=highCurrentThreshold7old, chan8=chan8, chan2Name=chan2Name, lowCurrentThreshold25=lowCurrentThreshold25, highCurrentThreshold8old=highCurrentThreshold8old, lowCurrentThreshold8=lowCurrentThreshold8, conformance=conformance, lowCurrentThreshold7old=lowCurrentThreshold7old, firmwareRevision=firmwareRevision, highCurrentThreshold5=highCurrentThreshold5, highTempThreshold1=highTempThreshold1, assetID=assetID, highCurrentThreshold5old=highCurrentThreshold5old, chan5Name=chan5Name, groups=groups)
