#
# PySNMP MIB module Wellfleet-LAPB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-LAPB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, ObjectIdentity, MibIdentifier, Integer32, Counter64, Counter32, iso, Unsigned32, IpAddress, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "ObjectIdentity", "MibIdentifier", "Integer32", "Counter64", "Counter32", "iso", "Unsigned32", "IpAddress", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfDataLink, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDataLink")
wfLapbTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8), )
if mibBuilder.loadTexts: wfLapbTable.setStatus('mandatory')
wfLapbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1), ).setIndexNames((0, "Wellfleet-LAPB-MIB", "wfLapbLineNumber"), (0, "Wellfleet-LAPB-MIB", "wfLapbLLIndex"))
if mibBuilder.loadTexts: wfLapbEntry.setStatus('mandatory')
wfLapbDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbDelete.setStatus('mandatory')
wfLapbDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbDisable.setStatus('mandatory')
wfLapbState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbState.setStatus('mandatory')
wfLapbLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbLineNumber.setStatus('mandatory')
wfLapbLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbLLIndex.setStatus('mandatory')
wfLapbCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbCct.setStatus('mandatory')
wfLapbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dxe", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbStationType.setStatus('mandatory')
wfLapbControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbControlField.setStatus('mandatory')
wfLapbN1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4500)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbN1FrameSize.setStatus('mandatory')
wfLapbKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbKWindowSize.setStatus('mandatory')
wfLapbN2RxmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbN2RxmitCount.setStatus('mandatory')
wfLapbT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT1AckTimer.setStatus('mandatory')
wfLapbT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT2AckDelayTimer.setStatus('mandatory')
wfLapbT3DisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT3DisconnectTimer.setStatus('mandatory')
wfLapbT4IdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT4IdleTimer.setStatus('mandatory')
wfLapbActionInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("activeDisc", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbActionInitiate.setStatus('mandatory')
wfLapbXidDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbXidDisable.setStatus('mandatory')
wfLapbCommandAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbCommandAddress.setStatus('mandatory')
wfLapbResponseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("dte", 3), ("dce", 1))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbResponseAddress.setStatus('mandatory')
wfLapbWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7))).clone(namedValues=NamedValues(("standard", 1), ("x25", 6), ("lapb", 7))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbWanProtocol.setStatus('mandatory')
wfLapbRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRxOctets.setStatus('mandatory')
wfLapbRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRxFrames.setStatus('mandatory')
wfLapbTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbTxOctets.setStatus('mandatory')
wfLapbTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbTxFrames.setStatus('mandatory')
wfLapbReXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbReXmits.setStatus('mandatory')
wfLapbRejectsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRejectsTx.setStatus('mandatory')
wfLapbRejectsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRejectsRx.setStatus('mandatory')
wfLapbFrameRejectsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbFrameRejectsTx.setStatus('mandatory')
wfLapbFrameRejectsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbFrameRejectsRx.setStatus('mandatory')
wfLapbRRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRRsTx.setStatus('mandatory')
wfLapbRRsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRRsRx.setStatus('mandatory')
wfLapbRNRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRNRsTx.setStatus('mandatory')
wfLapbRNRsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRNRsRx.setStatus('mandatory')
wfLapbResets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbResets.setStatus('mandatory')
wfLapbNormalDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbNormalDisc.setStatus('mandatory')
wfLapbAbnormalDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbAbnormalDisc.setStatus('mandatory')
wfLapbSetupAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbSetupAllowed.setStatus('mandatory')
wfLapbSetupRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbSetupRefused.setStatus('mandatory')
wfLapbNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gosip", 1), ("net2", 2))).clone('net2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbNetworkType.setStatus('mandatory')
wfLapbIdleRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbIdleRRFrames.setStatus('mandatory')
wfLapbClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("ipex", 3))).clone('x25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbClientType.setStatus('mandatory')
wfLapbRetransmitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbRetransmitTimer.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-LAPB-MIB", wfLapbTxOctets=wfLapbTxOctets, wfLapbCommandAddress=wfLapbCommandAddress, wfLapbIdleRRFrames=wfLapbIdleRRFrames, wfLapbAbnormalDisc=wfLapbAbnormalDisc, wfLapbCct=wfLapbCct, wfLapbLineNumber=wfLapbLineNumber, wfLapbFrameRejectsRx=wfLapbFrameRejectsRx, wfLapbTable=wfLapbTable, wfLapbWanProtocol=wfLapbWanProtocol, wfLapbControlField=wfLapbControlField, wfLapbStationType=wfLapbStationType, wfLapbRRsRx=wfLapbRRsRx, wfLapbKWindowSize=wfLapbKWindowSize, wfLapbState=wfLapbState, wfLapbReXmits=wfLapbReXmits, wfLapbClientType=wfLapbClientType, wfLapbSetupRefused=wfLapbSetupRefused, wfLapbResponseAddress=wfLapbResponseAddress, wfLapbTxFrames=wfLapbTxFrames, wfLapbXidDisable=wfLapbXidDisable, wfLapbRNRsRx=wfLapbRNRsRx, wfLapbEntry=wfLapbEntry, wfLapbRRsTx=wfLapbRRsTx, wfLapbT4IdleTimer=wfLapbT4IdleTimer, wfLapbT3DisconnectTimer=wfLapbT3DisconnectTimer, wfLapbRxFrames=wfLapbRxFrames, wfLapbFrameRejectsTx=wfLapbFrameRejectsTx, wfLapbN1FrameSize=wfLapbN1FrameSize, wfLapbN2RxmitCount=wfLapbN2RxmitCount, wfLapbActionInitiate=wfLapbActionInitiate, wfLapbDelete=wfLapbDelete, wfLapbDisable=wfLapbDisable, wfLapbRejectsRx=wfLapbRejectsRx, wfLapbT2AckDelayTimer=wfLapbT2AckDelayTimer, wfLapbRejectsTx=wfLapbRejectsTx, wfLapbNormalDisc=wfLapbNormalDisc, wfLapbSetupAllowed=wfLapbSetupAllowed, wfLapbRetransmitTimer=wfLapbRetransmitTimer, wfLapbResets=wfLapbResets, wfLapbT1AckTimer=wfLapbT1AckTimer, wfLapbRxOctets=wfLapbRxOctets, wfLapbRNRsTx=wfLapbRNRsTx, wfLapbLLIndex=wfLapbLLIndex, wfLapbNetworkType=wfLapbNetworkType)
