#
# PySNMP MIB module CT-ELS100-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-ELS100-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:13:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifInErrors, ifOutErrors = mibBuilder.importSymbols("IF-MIB", "ifInErrors", "ifOutErrors")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysObjectID, = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID")
enterprises, iso, Counter64, Counter32, Unsigned32, Gauge32, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Bits, ObjectIdentity, IpAddress, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "Counter64", "Counter32", "Unsigned32", "Gauge32", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Bits", "ObjectIdentity", "IpAddress", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
els_100 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8)).setLabel("els-100")
kxhw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 1))
kxsw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 2))
kxadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 3))
kxswdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 4))
kxaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 5))
kxif = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 6))
kxuart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 7))
kxproto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 8))
kxtrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 9))
kxworkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 10))
kxtrapMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 11))
kxmirrorgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 8, 12))
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("els-100-bridge", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
kxhwDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxhwDiagCode.setStatus('mandatory')
kxhwManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxhwManufData.setStatus('mandatory')
kxhwPortCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxhwPortCount.setStatus('mandatory')
kxswNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswNumber.setStatus('mandatory')
kxswFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 2, 2), )
if mibBuilder.loadTexts: kxswFilesetTable.setStatus('mandatory')
kxswFilesetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxswIndex"))
if mibBuilder.loadTexts: kxswFilesetEntry.setStatus('mandatory')
kxswIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswIndex.setStatus('mandatory')
kxswDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswDesc.setStatus('mandatory')
kxswCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswCount.setStatus('mandatory')
kxswType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswType.setStatus('mandatory')
kxswSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswSizes.setStatus('mandatory')
kxswStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswStarts.setStatus('mandatory')
kxswBases = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswBases.setStatus('mandatory')
kxswFlashBank = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswFlashBank.setStatus('mandatory')
kxadminFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminFatalErr.setStatus('mandatory')
kxadminAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminAnyPass.setStatus('mandatory')
kxadminGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminGetPass.setStatus('mandatory')
kxadminNMSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminNMSIPAddr.setStatus('mandatory')
kxadminStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminStorageFailure.setStatus('mandatory')
kxadminAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminAuthenticationFailure.setStatus('mandatory')
kxadminNAMReceiveCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminNAMReceiveCongests.setStatus('mandatory')
kxadminArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminArpEntries.setStatus('mandatory')
kxadminArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminArpStatics.setStatus('mandatory')
kxadminArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminArpOverflows.setStatus('mandatory')
kxadminRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminRipPreference.setStatus('mandatory')
kxadminRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxadminRipRouteDiscards.setStatus('mandatory')
kxadminRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminRebootConfig.setStatus('mandatory')
kxadminDisableButton = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminDisableButton.setStatus('mandatory')
kxadminButtonSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("led-any-activity", 1), ("led-rx-activity", 2), ("led-tx-activity", 3), ("led-any-collision", 4), ("led-programmed", 5), ("led-duplex", 6), ("led-speed", 7), ("led-mirror", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminButtonSelection.setStatus('mandatory')
kxadminLEDProgramOption = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("program-led-any-error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxadminLEDProgramOption.setStatus('mandatory')
kxswdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswdisDesc.setStatus('mandatory')
kxswdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxswdisAccess.setStatus('mandatory')
kxswdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxswdisWriteStatus.setStatus('mandatory')
kxswdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxswdisConfigIp.setStatus('mandatory')
kxswdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxswdisConfigRetryTime.setStatus('mandatory')
kxswdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxswdisConfigTotalTimeout.setStatus('mandatory')
kxaddrStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxaddrStatics.setStatus('mandatory')
kxaddrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxaddrDynamics.setStatus('mandatory')
kxaddrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrDynamicMax.setStatus('mandatory')
kxaddrDynamicOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxaddrDynamicOverflows.setStatus('mandatory')
kxaddrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrFlags.setStatus('mandatory')
kxaddrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrMAC.setStatus('mandatory')
kxaddrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrPort.setStatus('mandatory')
kxaddrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("update", 4), ("delete", 5), ("read-block", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrOperation.setStatus('mandatory')
kxaddrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrIndex.setStatus('mandatory')
kxaddrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrNext.setStatus('mandatory')
kxaddrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrBlockSize.setStatus('mandatory')
kxaddrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 5, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxaddrBlock.setStatus('mandatory')
kxifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 6, 1), )
if mibBuilder.loadTexts: kxifTable.setStatus('mandatory')
kxifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxifIndex"))
if mibBuilder.loadTexts: kxifEntry.setStatus('mandatory')
kxifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxifIndex.setStatus('mandatory')
kxifRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxifRxCnt.setStatus('mandatory')
kxifTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxifTxCnt.setStatus('mandatory')
kxifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxifThreshold.setStatus('mandatory')
kxifThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxifThresholdTime.setStatus('mandatory')
kxifRxQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxifRxQueueThresh.setStatus('mandatory')
kxifRxQueueThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxifRxQueueThreshTime.setStatus('mandatory')
kxifFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxifFunction.setStatus('mandatory')
kxifStatisticsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 6, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxifStatisticsTime.setStatus('mandatory')
kxuartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 7, 1), )
if mibBuilder.loadTexts: kxuartTable.setStatus('mandatory')
kxuartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 7, 1, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxuartIndex"))
if mibBuilder.loadTexts: kxuartEntry.setStatus('mandatory')
kxuartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxuartIndex.setStatus('mandatory')
kxuartBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("external-clock", 1), ("b1200-baud", 2), ("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6), ("b38400-baud", 7), ("b56-kilobits", 8), ("b1544-kilobits", 9), ("b2048-kilobits", 10), ("b45-megabits", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxuartBaud.setStatus('mandatory')
kxuartAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxuartAlignmentErrors.setStatus('mandatory')
kxuartOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxuartOverrunErrors.setStatus('mandatory')
kxprotoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 8, 1), )
if mibBuilder.loadTexts: kxprotoTable.setStatus('mandatory')
kxprotoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 8, 1, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxprotoIfIndex"))
if mibBuilder.loadTexts: kxprotoEntry.setStatus('mandatory')
kxprotoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxprotoIfIndex.setStatus('mandatory')
kxprotoBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("transparent", 1), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxprotoBridge.setStatus('mandatory')
kxprotoSuppressBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxprotoSuppressBpdu.setStatus('mandatory')
kxprotoRipListen = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxprotoRipListen.setStatus('mandatory')
kxprotoTrunking = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxprotoTrunking.setStatus('mandatory')
kxtrunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 9, 1), )
if mibBuilder.loadTexts: kxtrunkTable.setStatus('mandatory')
kxtrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxtrunkIfIndex"))
if mibBuilder.loadTexts: kxtrunkEntry.setStatus('mandatory')
kxtrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkIfIndex.setStatus('mandatory')
kxtrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("closed", 2), ("oneway", 3), ("joined", 4), ("perturbed", 5), ("helddown", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkState.setStatus('mandatory')
kxtrunkRemoteBridgeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkRemoteBridgeAddr.setStatus('mandatory')
kxtrunkRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkRemoteIp.setStatus('mandatory')
kxtrunkLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("ack-lost", 4), ("standby", 5), ("too-many-groups", 6), ("no-ack", 7), ("perturbed-threshold", 8), ("self-connect", 9), ("port-moved", 10), ("multiple-lan-types", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkLastError.setStatus('mandatory')
kxtrunkLinkOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkLinkOrdinal.setStatus('mandatory')
kxtrunkLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkLinkCount.setStatus('mandatory')
kxtrunkLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrunkLastChange.setStatus('mandatory')
kxWorkGroupNextNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxWorkGroupNextNumber.setStatus('mandatory')
kxWorkGroupCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxWorkGroupCurrentCount.setStatus('mandatory')
kxWorkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxWorkGroupMaxCount.setStatus('mandatory')
kxWorkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 10, 4), )
if mibBuilder.loadTexts: kxWorkGroupTable.setStatus('mandatory')
kxWorkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 10, 4, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxWorkGroupNumber"))
if mibBuilder.loadTexts: kxWorkGroupEntry.setStatus('mandatory')
kxWorkGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 10, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxWorkGroupNumber.setStatus('mandatory')
kxWorkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 10, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxWorkGroupName.setStatus('mandatory')
kxWorkGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 10, 4, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxWorkGroupPorts.setStatus('mandatory')
kxWorkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("all", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxWorkGroupType.setStatus('mandatory')
kxtrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 11, 1), )
if mibBuilder.loadTexts: kxtrapControlTable.setStatus('mandatory')
kxtrapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 11, 1, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxtrapIndex"))
if mibBuilder.loadTexts: kxtrapControlEntry.setStatus('mandatory')
kxtrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapIndex.setStatus('mandatory')
kxtrapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxtrapEnabled.setStatus('mandatory')
kxtrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxtrapSeverity.setStatus('mandatory')
kxtrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapText.setStatus('mandatory')
kxtrapSeverityControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 11, 2), )
if mibBuilder.loadTexts: kxtrapSeverityControlTable.setStatus('mandatory')
kxtrapSeverityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 11, 2, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxtrapSeverity"))
if mibBuilder.loadTexts: kxtrapSeverityControlEntry.setStatus('mandatory')
kxtrapSeverityControlSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxtrapSeverityControlSeverity.setStatus('mandatory')
kxtrapSeverityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxtrapSeverityEnable.setStatus('mandatory')
kxtrapIncludeText = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxtrapIncludeText.setStatus('mandatory')
kxtrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 11, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxtrapTime.setStatus('mandatory')
kxtrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxtrapRetry.setStatus('mandatory')
kxtrapNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapNumber.setStatus('mandatory')
kxtrapTable = MibTable((1, 3, 6, 1, 4, 1, 97, 8, 11, 7), )
if mibBuilder.loadTexts: kxtrapTable.setStatus('mandatory')
kxtrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 8, 11, 7, 1), ).setIndexNames((0, "CT-ELS100-MIB", "kxtrapEntryIndex"))
if mibBuilder.loadTexts: kxtrapEntry.setStatus('mandatory')
kxtrapEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapEntryIndex.setStatus('mandatory')
kxtrapEntryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapEntryTimeStamp.setStatus('mandatory')
kxtrapEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapEntryText.setStatus('mandatory')
kxtrapEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapEntryNumber.setStatus('mandatory')
kxtrapEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 8, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kxtrapEntrySeverity.setStatus('mandatory')
kxmirrorMode = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("tx", 2), ("rx", 3), ("rxandtx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxmirrorMode.setStatus('mandatory')
kxmirrorDiagPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxmirrorDiagPort.setStatus('mandatory')
kxmirrorTargetPortLists = MibScalar((1, 3, 6, 1, 4, 1, 97, 8, 12, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kxmirrorTargetPortLists.setStatus('mandatory')
kxPortFunctionsTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,1)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxifFunction"))
kxRxQueuesTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,2)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxifRxQueueThreshTime"))
kxTxStormFlagTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,3)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"))
kxTxCongestsTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,4)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxadminNAMReceiveCongests"))
kxTrunkStateTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,5)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxtrunkState"))
kxTrunkBridgeAddrTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,6)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxtrunkRemoteBridgeAddr"))
kxTrunkIPAddrTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,7)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxtrunkRemoteIp"))
kxTrunkErrorTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,8)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxtrunkLastError"))
kxTrunkLinkOrdinalTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,9)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxtrunkLinkOrdinal"))
kxTrunkLinkCountTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,10)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxtrunkLinkCount"))
kxDiagUnitBootedTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,11)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("CT-ELS100-MIB", "kxadminFatalErr"))
kxStorageFailureTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,12)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"))
kxIfErrorsTrap = NotificationType((1, 3, 6, 1, 2, 1, 1, 2) + (0,13)).setObjects(("CT-ELS100-MIB", "kxtrapSeverity"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"))
mibBuilder.exportSymbols("CT-ELS100-MIB", kxaddrDynamics=kxaddrDynamics, kxifTable=kxifTable, kxaddr=kxaddr, kxswdis=kxswdis, sysReset=sysReset, sysTrapPort=sysTrapPort, kxhwPortCount=kxhwPortCount, kxifThreshold=kxifThreshold, kxmirrorTargetPortLists=kxmirrorTargetPortLists, kxifThresholdTime=kxifThresholdTime, kxTrunkErrorTrap=kxTrunkErrorTrap, kxswdisConfigIp=kxswdisConfigIp, kxtrapEntryText=kxtrapEntryText, kxWorkGroupType=kxWorkGroupType, kxadminDisableButton=kxadminDisableButton, kxtrunkEntry=kxtrunkEntry, kxtrapSeverityEnable=kxtrapSeverityEnable, kxaddrNext=kxaddrNext, kxadminNMSIPAddr=kxadminNMSIPAddr, kxifFunction=kxifFunction, kxtrunkIfIndex=kxtrunkIfIndex, kxadmin=kxadmin, kxaddrStatics=kxaddrStatics, kxtrapRetry=kxtrapRetry, kxifRxCnt=kxifRxCnt, kxtrapEntrySeverity=kxtrapEntrySeverity, kxTrunkLinkCountTrap=kxTrunkLinkCountTrap, kxStorageFailureTrap=kxStorageFailureTrap, kxadminFatalErr=kxadminFatalErr, kxPortFunctionsTrap=kxPortFunctionsTrap, kxhw=kxhw, kxswFlashBank=kxswFlashBank, kxaddrFlags=kxaddrFlags, kxtrunkTable=kxtrunkTable, kxprotoTable=kxprotoTable, kxadminRipRouteDiscards=kxadminRipRouteDiscards, kxworkgroup=kxworkgroup, kxifRxQueueThreshTime=kxifRxQueueThreshTime, kxifTxCnt=kxifTxCnt, kxprotoEntry=kxprotoEntry, kxtrapSeverityControlEntry=kxtrapSeverityControlEntry, kxtrapNumber=kxtrapNumber, kxTrunkIPAddrTrap=kxTrunkIPAddrTrap, kxWorkGroupName=kxWorkGroupName, kxTrunkLinkOrdinalTrap=kxTrunkLinkOrdinalTrap, kxswdisWriteStatus=kxswdisWriteStatus, kxtrapEntryIndex=kxtrapEntryIndex, kxprotoIfIndex=kxprotoIfIndex, kxtrapIncludeText=kxtrapIncludeText, kxWorkGroupPorts=kxWorkGroupPorts, kxWorkGroupTable=kxWorkGroupTable, kxWorkGroupNextNumber=kxWorkGroupNextNumber, kxmirrorMode=kxmirrorMode, kxadminAnyPass=kxadminAnyPass, kxaddrDynamicMax=kxaddrDynamicMax, kxTxCongestsTrap=kxTxCongestsTrap, kxIfErrorsTrap=kxIfErrorsTrap, kxuartIndex=kxuartIndex, kxadminRipPreference=kxadminRipPreference, kxtrunkRemoteIp=kxtrunkRemoteIp, kxadminLEDProgramOption=kxadminLEDProgramOption, kxmirrorgroup=kxmirrorgroup, kxWorkGroupEntry=kxWorkGroupEntry, kxuartAlignmentErrors=kxuartAlignmentErrors, kxifIndex=kxifIndex, sigma=sigma, kxtrapSeverityControlTable=kxtrapSeverityControlTable, kxuart=kxuart, kxswSizes=kxswSizes, kxaddrIndex=kxaddrIndex, kxtrapSeverity=kxtrapSeverity, kxtrunkLastError=kxtrunkLastError, kxswDesc=kxswDesc, kxtrapSeverityControlSeverity=kxtrapSeverityControlSeverity, kxswdisAccess=kxswdisAccess, kxadminNAMReceiveCongests=kxadminNAMReceiveCongests, kxswdisConfigRetryTime=kxswdisConfigRetryTime, sys=sys, kxtrunkLinkOrdinal=kxtrunkLinkOrdinal, kxadminArpStatics=kxadminArpStatics, kxadminButtonSelection=kxadminButtonSelection, els_100=els_100, kxadminArpEntries=kxadminArpEntries, kxswdisConfigTotalTimeout=kxswdisConfigTotalTimeout, kxmirrorDiagPort=kxmirrorDiagPort, kxproto=kxproto, kxtrunkRemoteBridgeAddr=kxtrunkRemoteBridgeAddr, kxtrapEntry=kxtrapEntry, kxswType=kxswType, kxadminArpOverflows=kxadminArpOverflows, kxswBases=kxswBases, kxaddrMAC=kxaddrMAC, kxadminAuthenticationFailure=kxadminAuthenticationFailure, kxhwManufData=kxhwManufData, kxWorkGroupCurrentCount=kxWorkGroupCurrentCount, kxaddrOperation=kxaddrOperation, kxtrapMgt=kxtrapMgt, kxtrapEntryNumber=kxtrapEntryNumber, kxifRxQueueThresh=kxifRxQueueThresh, kxaddrDynamicOverflows=kxaddrDynamicOverflows, kxswCount=kxswCount, kxtrapEntryTimeStamp=kxtrapEntryTimeStamp, kxtrunkLinkCount=kxtrunkLinkCount, kxprotoTrunking=kxprotoTrunking, kxswFilesetEntry=kxswFilesetEntry, kxuartOverrunErrors=kxuartOverrunErrors, kxtrapIndex=kxtrapIndex, kxuartBaud=kxuartBaud, kxprotoBridge=kxprotoBridge, sysID=sysID, kxtrapTime=kxtrapTime, kxtrapControlEntry=kxtrapControlEntry, kxifStatisticsTime=kxifStatisticsTime, kxswNumber=kxswNumber, kxadminStorageFailure=kxadminStorageFailure, kxifEntry=kxifEntry, kxaddrBlock=kxaddrBlock, kxtrapEnabled=kxtrapEnabled, kxWorkGroupMaxCount=kxWorkGroupMaxCount, kxprotoSuppressBpdu=kxprotoSuppressBpdu, kxswStarts=kxswStarts, kxtrunkLastChange=kxtrunkLastChange, kxDiagUnitBootedTrap=kxDiagUnitBootedTrap, kxaddrBlockSize=kxaddrBlockSize, kxWorkGroupNumber=kxWorkGroupNumber, kxuartTable=kxuartTable, kxtrapControlTable=kxtrapControlTable, kxTrunkBridgeAddrTrap=kxTrunkBridgeAddrTrap, kxtrapTable=kxtrapTable, kxTrunkStateTrap=kxTrunkStateTrap, kxadminGetPass=kxadminGetPass, kxswFilesetTable=kxswFilesetTable, kxtrunkState=kxtrunkState, kxtrapText=kxtrapText, kxTxStormFlagTrap=kxTxStormFlagTrap, kxif=kxif, kxtrunk=kxtrunk, kxhwDiagCode=kxhwDiagCode, kxswIndex=kxswIndex, kxsw=kxsw, kxadminRebootConfig=kxadminRebootConfig, kxaddrPort=kxaddrPort, kxswdisDesc=kxswdisDesc, kxRxQueuesTrap=kxRxQueuesTrap, kxprotoRipListen=kxprotoRipListen, kxuartEntry=kxuartEntry)
