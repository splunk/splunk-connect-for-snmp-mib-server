#
# PySNMP MIB module Wellfleet-ATM-LE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ATM-LE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, IpAddress, Counter64, MibIdentifier, ModuleIdentity, Bits, Counter32, TimeTicks, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "IpAddress", "Counter64", "MibIdentifier", "ModuleIdentity", "Bits", "Counter32", "TimeTicks", "iso", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfAtmLeGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfAtmLeGroup")
wfAtmLecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1), )
if mibBuilder.loadTexts: wfAtmLecConfigTable.setStatus('mandatory')
wfAtmLecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wflecConfigCct"))
if mibBuilder.loadTexts: wfAtmLecConfigEntry.setStatus('mandatory')
wflecConfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfDelete.setStatus('mandatory')
wflecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecRowStatus.setStatus('mandatory')
wflecConfigCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecConfigCct.setStatus('mandatory')
wflecOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecOwner.setStatus('mandatory')
wflecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autocfg", 1), ("mancfg", 2))).clone('autocfg')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigMode.setStatus('mandatory')
wflecConfigLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("ieee8023", 2), ("ieee8025", 3))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigLanType.setStatus('mandatory')
wflecConfigMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspec", 1), ("size1516", 2), ("size4544", 3), ("size9234", 4), ("size18190", 5))).clone('unspec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigMaxDataFrameSize.setStatus('mandatory')
wflecConfigLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigLanName.setStatus('mandatory')
wflecConfigLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigLesAtmAddress.setStatus('mandatory')
wflecControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecControlTimeout.setStatus('mandatory')
wflecMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMaxUnknownFrameCount.setStatus('mandatory')
wflecMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMaxUnknownFrameTime.setStatus('mandatory')
wflecVccTimeoutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200))).clone(namedValues=NamedValues(("vcctmodef", 1200))).clone('vcctmodef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecVccTimeoutPeriod.setStatus('mandatory')
wflecMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMaxRetryCount.setStatus('mandatory')
wflecAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecAgingTime.setStatus('mandatory')
wflecForwardDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecForwardDelayTime.setStatus('mandatory')
wflecExpectedArpResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecExpectedArpResponseTime.setStatus('mandatory')
wflecFlushTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecFlushTimeOut.setStatus('mandatory')
wflecPathSwitchingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecPathSwitchingDelay.setStatus('mandatory')
wflecLocalSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecLocalSegmentID.setStatus('mandatory')
wflecMulticastSendType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abr", 1), ("vbr", 2), ("cbr", 3))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMulticastSendType.setStatus('mandatory')
wflecMulticastSendAvgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMulticastSendAvgRate.setStatus('mandatory')
wflecMulticastSendPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMulticastSendPeakRate.setStatus('mandatory')
wflecConnectionCompleteTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConnectionCompleteTimer.setStatus('mandatory')
wflecFlushEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecFlushEnable.setStatus('mandatory')
wflecConfigRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigRetry.setStatus('mandatory')
wflecMulticastFwdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("mcsfwdtmodef", 5))).clone('mcsfwdtmodef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMulticastFwdTimeout.setStatus('mandatory')
wflecMulticastFwdRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("mcsfwdrtrydef", 10))).clone('mcsfwdrtrydef')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecMulticastFwdRetry.setStatus('mandatory')
wflecDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecDebugLevel.setStatus('mandatory')
wflecConfigLECSAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigLECSAtmAddress.setStatus('mandatory')
wflecConfigV2Capable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecConfigV2Capable.setStatus('mandatory')
wfAtmLecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2), )
if mibBuilder.loadTexts: wfAtmLecStatusTable.setStatus('mandatory')
wfAtmLecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wflecStatusCct"))
if mibBuilder.loadTexts: wfAtmLecStatusEntry.setStatus('mandatory')
wflecStatusCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecStatusCct.setStatus('mandatory')
wflecPrimaryAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecPrimaryAtmAddress.setStatus('mandatory')
wflecID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecID.setStatus('mandatory')
wflecInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initial", 1), ("lecsconnect", 2), ("configure", 3), ("join", 4), ("reg", 5), ("busconnect", 6), ("operational", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInterfaceState.setStatus('mandatory')
wflecLastFailureRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("tmo", 2), ("undef", 3), ("vrsnotsup", 4), ("invreq", 5), ("dupdst", 6), ("dupatmadr", 7), ("insufres", 8), ("accdenied", 9), ("invreqid", 10), ("invdst", 11), ("invatmadr", 12), ("nocfg", 13), ("lecfgerr", 14), ("insufinfo", 15))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecLastFailureRespCode.setStatus('mandatory')
wflecLastFailureState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecLastFailureState.setStatus('mandatory')
wflecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("prot1", 1))).clone('prot1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecProtocol.setStatus('mandatory')
wflecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecVersion.setStatus('mandatory')
wflecTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecTopologyChange.setStatus('mandatory')
wflecConfigServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecConfigServerAtmAddress.setStatus('mandatory')
wflecConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("viailmi", 1), ("knownadr", 2), ("cfgpvc", 3), ("nolecs", 4))).clone('nolecs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecConfigSource.setStatus('mandatory')
wflecActualLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("ieee8023", 2), ("ieee8025", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecActualLanType.setStatus('mandatory')
wflecActualMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspec", 1), ("size1516", 2), ("size4544", 3), ("size9234", 4), ("size18190", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecActualMaxDataFrameSize.setStatus('mandatory')
wflecActualLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecActualLanName.setStatus('mandatory')
wflecActualLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecActualLesAtmAddress.setStatus('mandatory')
wflecProxyClient = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecProxyClient.setStatus('mandatory')
wfAtmLecOperConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3), )
if mibBuilder.loadTexts: wfAtmLecOperConfigTable.setStatus('mandatory')
wfAtmLecOperConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wflecOperConfigCct"))
if mibBuilder.loadTexts: wfAtmLecOperConfigEntry.setStatus('mandatory')
wflecOperConfigCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigCct.setStatus('mandatory')
wflecOperConfigControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigControlTimeout.setStatus('mandatory')
wflecOperConfigMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigMaxUnknownFrameCount.setStatus('mandatory')
wflecOperConfigMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigMaxUnknownFrameTime.setStatus('mandatory')
wflecOperConfigVccTimeoutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigVccTimeoutPeriod.setStatus('mandatory')
wflecOperConfigMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigMaxRetryCount.setStatus('mandatory')
wflecOperConfigAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigAgingTime.setStatus('mandatory')
wflecOperConfigForwardDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigForwardDelayTime.setStatus('mandatory')
wflecOperConfigTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigTopologyChange.setStatus('mandatory')
wflecOperConfigExpectedArpResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigExpectedArpResponseTime.setStatus('mandatory')
wflecOperConfigFlushTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigFlushTimeOut.setStatus('mandatory')
wflecOperConfigPathSwitchingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigPathSwitchingDelay.setStatus('mandatory')
wflecOperConfigLocalSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigLocalSegmentID.setStatus('mandatory')
wflecOperConfigMulticastSendType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigMulticastSendType.setStatus('mandatory')
wflecOperConfigMulticastSendAvgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigMulticastSendAvgRate.setStatus('mandatory')
wflecOperConfigMulticastSendPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigMulticastSendPeakRate.setStatus('mandatory')
wflecOperConfigConnectionCompleteTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOperConfigConnectionCompleteTimer.setStatus('mandatory')
wfAtmLecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4), )
if mibBuilder.loadTexts: wfAtmLecStatisticsTable.setStatus('mandatory')
wfAtmLecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wflecStatisticsCct"))
if mibBuilder.loadTexts: wfAtmLecStatisticsEntry.setStatus('mandatory')
wflecArpRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecArpRequestsOut.setStatus('mandatory')
wflecArpRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecArpRequestsIn.setStatus('mandatory')
wflecArpRepliesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecArpRepliesOut.setStatus('mandatory')
wflecArpRepliesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecArpRepliesIn.setStatus('mandatory')
wflecControlFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlFramesOut.setStatus('mandatory')
wflecControlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlFramesIn.setStatus('mandatory')
wflecSvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecSvcFailures.setStatus('mandatory')
wflecStatisticsCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecStatisticsCct.setStatus('mandatory')
wflecUnknownFramesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecUnknownFramesDropped.setStatus('mandatory')
wflecInDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInDataFrames.setStatus('mandatory')
wflecInUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInUnicastFrames.setStatus('mandatory')
wflecInUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInUnicastOctets.setStatus('mandatory')
wflecInMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInMulticastFrames.setStatus('mandatory')
wflecInMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInMulticastOctets.setStatus('mandatory')
wflecInBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInBroadcastFrames.setStatus('mandatory')
wflecInBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecInBroadcastOctets.setStatus('mandatory')
wflecOutDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutDataFrames.setStatus('mandatory')
wflecOutUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutUnknownFrames.setStatus('mandatory')
wflecOutUnknownOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutUnknownOctets.setStatus('mandatory')
wflecOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutMulticastFrames.setStatus('mandatory')
wflecOutMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutMulticastOctets.setStatus('mandatory')
wflecOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutBroadcastFrames.setStatus('mandatory')
wflecOutBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutBroadcastOctets.setStatus('mandatory')
wflecOutUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutUnicastFrames.setStatus('mandatory')
wflecOutUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecOutUnicastOctets.setStatus('mandatory')
wfAtmLecServerVccTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5), )
if mibBuilder.loadTexts: wfAtmLecServerVccTable.setStatus('mandatory')
wfAtmLecServerVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wflecServerVccCct"))
if mibBuilder.loadTexts: wfAtmLecServerVccEntry.setStatus('mandatory')
wflecConfigDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecConfigDirectInterface.setStatus('mandatory')
wflecConfigDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecConfigDirectVpi.setStatus('mandatory')
wflecConfigDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecConfigDirectVci.setStatus('mandatory')
wflecControlDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlDirectInterface.setStatus('mandatory')
wflecControlDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlDirectVpi.setStatus('mandatory')
wflecControlDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlDirectVci.setStatus('mandatory')
wflecControlDistributeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlDistributeInterface.setStatus('mandatory')
wflecControlDistributeVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlDistributeVpi.setStatus('mandatory')
wflecControlDistributeVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecControlDistributeVci.setStatus('mandatory')
wflecMulticastSendInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMulticastSendInterface.setStatus('mandatory')
wflecMulticastSendVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMulticastSendVpi.setStatus('mandatory')
wflecMulticastSendVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMulticastSendVci.setStatus('mandatory')
wflecMulticastForwardInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMulticastForwardInterface.setStatus('mandatory')
wflecMulticastForwardVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMulticastForwardVpi.setStatus('mandatory')
wflecMulticastForwardVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMulticastForwardVci.setStatus('mandatory')
wflecServerVccCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecServerVccCct.setStatus('mandatory')
wfAtmLecAtmAddressTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 6), )
if mibBuilder.loadTexts: wfAtmLecAtmAddressTable.setStatus('mandatory')
wfAtmLecAtmAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 6, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wflecAtmAddressCct"), (0, "Wellfleet-ATM-LE-MIB", "wflecAtmAddress"))
if mibBuilder.loadTexts: wfAtmLecAtmAddressEntry.setStatus('mandatory')
wflecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecAtmAddress.setStatus('mandatory')
wflecAtmAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enbl", 1), ("dsbl", 2))).clone('enbl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wflecAtmAddressStatus.setStatus('mandatory')
wflecAtmAddressCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecAtmAddressCct.setStatus('mandatory')
wfAtmLecMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 7), )
if mibBuilder.loadTexts: wfAtmLecMacAddressTable.setStatus('mandatory')
wfAtmLecMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 7, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wflecMacAddressCct"), (0, "Wellfleet-ATM-LE-MIB", "wflecMacAddress"))
if mibBuilder.loadTexts: wfAtmLecMacAddressEntry.setStatus('mandatory')
wflecMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMacAddress.setStatus('mandatory')
wflecMacAddressAtmBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMacAddressAtmBinding.setStatus('mandatory')
wflecMacAddressCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflecMacAddressCct.setStatus('mandatory')
wfAtmLeArpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8), )
if mibBuilder.loadTexts: wfAtmLeArpTable.setStatus('mandatory')
wfAtmLeArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wfleArpCct"), (0, "Wellfleet-ATM-LE-MIB", "wfleArpMacAddress"))
if mibBuilder.loadTexts: wfAtmLeArpEntry.setStatus('mandatory')
wfleArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleArpMacAddress.setStatus('mandatory')
wfleArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleArpAtmAddress.setStatus('mandatory')
wfleArpIsRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleArpIsRemoteAddress.setStatus('mandatory')
wfleArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ctrl", 2), ("data", 3), ("vol", 4), ("nonvol", 5))).clone('vol')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleArpEntryType.setStatus('mandatory')
wfleArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enbl", 1), ("dsbl", 2))).clone('enbl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfleArpRowStatus.setStatus('mandatory')
wfleArpCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleArpCct.setStatus('mandatory')
wfleArpVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleArpVpi.setStatus('mandatory')
wfleArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleArpVci.setStatus('mandatory')
wfAtmLeRDArpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9), )
if mibBuilder.loadTexts: wfAtmLeRDArpTable.setStatus('mandatory')
wfAtmLeRDArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wfleRDArpCct"), (0, "Wellfleet-ATM-LE-MIB", "wfleRDArpSegmentID"), (0, "Wellfleet-ATM-LE-MIB", "wfleRDArpBridgeNumber"))
if mibBuilder.loadTexts: wfAtmLeRDArpEntry.setStatus('mandatory')
wfleRDArpSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleRDArpSegmentID.setStatus('mandatory')
wfleRDArpBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleRDArpBridgeNumber.setStatus('mandatory')
wfleRDArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleRDArpAtmAddress.setStatus('mandatory')
wfleRDArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ctrl", 2), ("data", 3), ("vol", 4), ("nonvol", 5))).clone('vol')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleRDArpEntryType.setStatus('mandatory')
wfleRDArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enbl", 1), ("dsbl", 2))).clone('enbl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfleRDArpRowStatus.setStatus('mandatory')
wfleRDArpCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleRDArpCct.setStatus('mandatory')
wfleRDArpVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleRDArpVpi.setStatus('mandatory')
wfleRDArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfleRDArpVci.setStatus('mandatory')
wfAtmLecConfigLesTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10), )
if mibBuilder.loadTexts: wfAtmLecConfigLesTable.setStatus('mandatory')
wfAtmLecConfigLesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10, 1), ).setIndexNames((0, "Wellfleet-ATM-LE-MIB", "wfAtmLecConfigLesCct"), (0, "Wellfleet-ATM-LE-MIB", "wfAtmLecConfigLesIndex"))
if mibBuilder.loadTexts: wfAtmLecConfigLesEntry.setStatus('mandatory')
wfAtmLecConfigLesDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmLecConfigLesDelete.setStatus('mandatory')
wfAtmLecConfigLesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmLecConfigLesEnable.setStatus('mandatory')
wfAtmLecConfigLesCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLecConfigLesCct.setStatus('mandatory')
wfAtmLecConfigLesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAtmLecConfigLesIndex.setStatus('mandatory')
wfAtmLecConfigLesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmLecConfigLesAddress.setStatus('mandatory')
wfAtmLecConfigLesName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 5, 20, 10, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmLecConfigLesName.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-ATM-LE-MIB", wfAtmLecConfigLesDelete=wfAtmLecConfigLesDelete, wflecMulticastForwardVpi=wflecMulticastForwardVpi, wflecConfigLesAtmAddress=wflecConfigLesAtmAddress, wfleArpEntryType=wfleArpEntryType, wflecActualLesAtmAddress=wflecActualLesAtmAddress, wfAtmLecOperConfigTable=wfAtmLecOperConfigTable, wflecOperConfigConnectionCompleteTimer=wflecOperConfigConnectionCompleteTimer, wfAtmLeRDArpEntry=wfAtmLeRDArpEntry, wflecArpRepliesIn=wflecArpRepliesIn, wflecInterfaceState=wflecInterfaceState, wfleArpRowStatus=wfleArpRowStatus, wflecOperConfigMulticastSendAvgRate=wflecOperConfigMulticastSendAvgRate, wflecControlDistributeVci=wflecControlDistributeVci, wflecInMulticastOctets=wflecInMulticastOctets, wflecControlDirectVci=wflecControlDirectVci, wfAtmLecConfigLesEnable=wfAtmLecConfigLesEnable, wflecMulticastSendVpi=wflecMulticastSendVpi, wfAtmLeRDArpTable=wfAtmLeRDArpTable, wflecOutUnicastOctets=wflecOutUnicastOctets, wflecVccTimeoutPeriod=wflecVccTimeoutPeriod, wflecMulticastFwdTimeout=wflecMulticastFwdTimeout, wflecArpRequestsOut=wflecArpRequestsOut, wfAtmLecStatisticsTable=wfAtmLecStatisticsTable, wfAtmLecConfigLesAddress=wfAtmLecConfigLesAddress, wflecInUnicastOctets=wflecInUnicastOctets, wflecConfigDirectInterface=wflecConfigDirectInterface, wflecOutMulticastOctets=wflecOutMulticastOctets, wflecConfigLanType=wflecConfigLanType, wflecDebugLevel=wflecDebugLevel, wfAtmLecMacAddressEntry=wfAtmLecMacAddressEntry, wfAtmLecConfigLesEntry=wfAtmLecConfigLesEntry, wflecControlDirectInterface=wflecControlDirectInterface, wfleArpIsRemoteAddress=wfleArpIsRemoteAddress, wflecOutUnknownFrames=wflecOutUnknownFrames, wfleArpAtmAddress=wfleArpAtmAddress, wflecInBroadcastOctets=wflecInBroadcastOctets, wflecStatusCct=wflecStatusCct, wflecOwner=wflecOwner, wflecVersion=wflecVersion, wflecControlFramesIn=wflecControlFramesIn, wflecControlFramesOut=wflecControlFramesOut, wfAtmLecAtmAddressEntry=wfAtmLecAtmAddressEntry, wflecConfigDirectVpi=wflecConfigDirectVpi, wflecSvcFailures=wflecSvcFailures, wflecMaxUnknownFrameCount=wflecMaxUnknownFrameCount, wflecOperConfigPathSwitchingDelay=wflecOperConfigPathSwitchingDelay, wflecConfigLanName=wflecConfigLanName, wflecStatisticsCct=wflecStatisticsCct, wflecUnknownFramesDropped=wflecUnknownFramesDropped, wflecFlushEnable=wflecFlushEnable, wflecMulticastFwdRetry=wflecMulticastFwdRetry, wflecMulticastForwardVci=wflecMulticastForwardVci, wflecOutDataFrames=wflecOutDataFrames, wfAtmLecConfigLesName=wfAtmLecConfigLesName, wflecControlDistributeVpi=wflecControlDistributeVpi, wfAtmLecServerVccTable=wfAtmLecServerVccTable, wflecControlTimeout=wflecControlTimeout, wfleRDArpBridgeNumber=wfleRDArpBridgeNumber, wfAtmLecConfigLesTable=wfAtmLecConfigLesTable, wfAtmLecConfigTable=wfAtmLecConfigTable, wflecOperConfigTopologyChange=wflecOperConfigTopologyChange, wfleRDArpSegmentID=wfleRDArpSegmentID, wflecMulticastForwardInterface=wflecMulticastForwardInterface, wflecOperConfigMaxUnknownFrameCount=wflecOperConfigMaxUnknownFrameCount, wflecOperConfigVccTimeoutPeriod=wflecOperConfigVccTimeoutPeriod, wflecConfDelete=wflecConfDelete, wflecActualMaxDataFrameSize=wflecActualMaxDataFrameSize, wfAtmLecStatusEntry=wfAtmLecStatusEntry, wflecID=wflecID, wflecMulticastSendInterface=wflecMulticastSendInterface, wfAtmLecConfigLesCct=wfAtmLecConfigLesCct, wflecArpRequestsIn=wflecArpRequestsIn, wflecConfigV2Capable=wflecConfigV2Capable, wflecProxyClient=wflecProxyClient, wflecActualLanName=wflecActualLanName, wflecFlushTimeOut=wflecFlushTimeOut, wfAtmLeArpTable=wfAtmLeArpTable, wflecConfigSource=wflecConfigSource, wflecAtmAddress=wflecAtmAddress, wfAtmLecServerVccEntry=wfAtmLecServerVccEntry, wflecConfigMaxDataFrameSize=wflecConfigMaxDataFrameSize, wflecOperConfigLocalSegmentID=wflecOperConfigLocalSegmentID, wflecOutBroadcastFrames=wflecOutBroadcastFrames, wfleArpCct=wfleArpCct, wflecConfigServerAtmAddress=wflecConfigServerAtmAddress, wflecServerVccCct=wflecServerVccCct, wflecOperConfigControlTimeout=wflecOperConfigControlTimeout, wfAtmLecOperConfigEntry=wfAtmLecOperConfigEntry, wflecArpRepliesOut=wflecArpRepliesOut, wfAtmLecAtmAddressTable=wfAtmLecAtmAddressTable, wflecMacAddressCct=wflecMacAddressCct, wfAtmLecStatisticsEntry=wfAtmLecStatisticsEntry, wflecLocalSegmentID=wflecLocalSegmentID, wflecAgingTime=wflecAgingTime, wflecPathSwitchingDelay=wflecPathSwitchingDelay, wflecControlDistributeInterface=wflecControlDistributeInterface, wflecConnectionCompleteTimer=wflecConnectionCompleteTimer, wfleRDArpCct=wfleRDArpCct, wfAtmLeArpEntry=wfAtmLeArpEntry, wfleArpVpi=wfleArpVpi, wflecControlDirectVpi=wflecControlDirectVpi, wflecMaxUnknownFrameTime=wflecMaxUnknownFrameTime, wflecOperConfigMaxUnknownFrameTime=wflecOperConfigMaxUnknownFrameTime, wflecPrimaryAtmAddress=wflecPrimaryAtmAddress, wflecProtocol=wflecProtocol, wflecMulticastSendAvgRate=wflecMulticastSendAvgRate, wflecLastFailureState=wflecLastFailureState, wfleArpMacAddress=wfleArpMacAddress, wflecMulticastSendPeakRate=wflecMulticastSendPeakRate, wflecOperConfigExpectedArpResponseTime=wflecOperConfigExpectedArpResponseTime, wflecRowStatus=wflecRowStatus, wflecConfigMode=wflecConfigMode, wfleRDArpRowStatus=wfleRDArpRowStatus, wflecInBroadcastFrames=wflecInBroadcastFrames, wflecInUnicastFrames=wflecInUnicastFrames, wflecOutUnknownOctets=wflecOutUnknownOctets, wfleRDArpAtmAddress=wfleRDArpAtmAddress, wfAtmLecMacAddressTable=wfAtmLecMacAddressTable, wflecConfigDirectVci=wflecConfigDirectVci, wflecOperConfigMulticastSendPeakRate=wflecOperConfigMulticastSendPeakRate, wflecMacAddress=wflecMacAddress, wflecConfigRetry=wflecConfigRetry, wfleRDArpEntryType=wfleRDArpEntryType, wflecMacAddressAtmBinding=wflecMacAddressAtmBinding, wflecExpectedArpResponseTime=wflecExpectedArpResponseTime, wfleArpVci=wfleArpVci, wflecAtmAddressStatus=wflecAtmAddressStatus, wfAtmLecStatusTable=wfAtmLecStatusTable, wfAtmLecConfigLesIndex=wfAtmLecConfigLesIndex, wflecConfigCct=wflecConfigCct, wflecOperConfigAgingTime=wflecOperConfigAgingTime, wflecOutMulticastFrames=wflecOutMulticastFrames, wflecActualLanType=wflecActualLanType, wflecOperConfigCct=wflecOperConfigCct, wflecInMulticastFrames=wflecInMulticastFrames, wflecTopologyChange=wflecTopologyChange, wflecOperConfigForwardDelayTime=wflecOperConfigForwardDelayTime, wfAtmLecConfigEntry=wfAtmLecConfigEntry, wflecOutUnicastFrames=wflecOutUnicastFrames, wflecAtmAddressCct=wflecAtmAddressCct, wflecOperConfigMaxRetryCount=wflecOperConfigMaxRetryCount, wflecOperConfigFlushTimeOut=wflecOperConfigFlushTimeOut, wflecInDataFrames=wflecInDataFrames, wflecLastFailureRespCode=wflecLastFailureRespCode, wflecConfigLECSAtmAddress=wflecConfigLECSAtmAddress, wflecMulticastSendVci=wflecMulticastSendVci, wfleRDArpVci=wfleRDArpVci, wflecForwardDelayTime=wflecForwardDelayTime, wflecMaxRetryCount=wflecMaxRetryCount, wflecOutBroadcastOctets=wflecOutBroadcastOctets, wfleRDArpVpi=wfleRDArpVpi, wflecMulticastSendType=wflecMulticastSendType, wflecOperConfigMulticastSendType=wflecOperConfigMulticastSendType)
