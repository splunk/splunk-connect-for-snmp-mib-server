#
# PySNMP MIB module ZHNHPNA (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNHPNA
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Counter64, MibIdentifier, Unsigned32, Gauge32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, NotificationType, enterprises, Counter32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "MibIdentifier", "Unsigned32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "NotificationType", "enterprises", "Counter32", "IpAddress", "Bits")
MacAddress, TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
zhnHpna = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47))
zhnHpna.setRevisions(('2012-04-25 12:00', '2012-01-30 12:00',))
if mibBuilder.loadTexts: zhnHpna.setLastUpdated('201204251200Z')
if mibBuilder.loadTexts: zhnHpna.setOrganization('Zhone Technologies, Inc.')
zhnHpnaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1))
hpnaDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1), )
if mibBuilder.loadTexts: hpnaDeviceTable.setStatus('current')
hpnaDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1), ).setIndexNames((0, "ZHNHPNA", "hpnaDeviceIndex"))
if mibBuilder.loadTexts: hpnaDeviceEntry.setStatus('current')
hpnaDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnaDeviceIndex.setStatus('current')
hpnaDeviceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaDeviceMAC.setStatus('current')
hpnaDeviceHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaDeviceHWVersion.setStatus('current')
hpnaDeviceFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaDeviceFWVersion.setStatus('current')
hcnaDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2), )
if mibBuilder.loadTexts: hcnaDeviceTable.setStatus('current')
hcnaDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1), ).setIndexNames((0, "ZHNHPNA", "hcnaDeviceIndex"))
if mibBuilder.loadTexts: hcnaDeviceEntry.setStatus('current')
hcnaDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hcnaDeviceIndex.setStatus('current')
hcnaDeviceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaDeviceMAC.setStatus('current')
hcnaDeviceHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaDeviceHWVersion.setStatus('current')
hcnaDeviceFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaDeviceFWVersion.setStatus('current')
hpnaStationsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3), )
if mibBuilder.loadTexts: hpnaStationsTable.setStatus('current')
hpnaStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1), ).setIndexNames((0, "ZHNHPNA", "hpnaStationIndex"))
if mibBuilder.loadTexts: hpnaStationsEntry.setStatus('current')
hpnaStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnaStationIndex.setStatus('current')
hpnaStationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationSource.setStatus('current')
hpnaStationDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationDestination.setStatus('current')
hpnaStationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationRate.setStatus('current')
hpnaStationSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationSymbolRate.setStatus('current')
hpnaStationBitsPerSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationBitsPerSymbol.setStatus('current')
hpnaStationRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationRxPower.setStatus('current')
hcnaStationsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4), )
if mibBuilder.loadTexts: hcnaStationsTable.setStatus('current')
hcnaStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1), ).setIndexNames((0, "ZHNHPNA", "hcnaStationIndex"))
if mibBuilder.loadTexts: hcnaStationsEntry.setStatus('current')
hcnaStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hcnaStationIndex.setStatus('current')
hcnaStationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationSource.setStatus('current')
hcnaStationDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationDestination.setStatus('current')
hcnaStationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationRate.setStatus('current')
hcnaStationSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationSymbolRate.setStatus('current')
hcnaStationBitsPerSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationBitsPerSymbol.setStatus('current')
hcnaStationRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationRxPower.setStatus('current')
zhnHpnaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2))
zhnHpnaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1))
zhnHpnaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 2))
zhnHpnaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 2, 1)).setObjects(("ZHNHPNA", "zhnHpnaDeviceGroup"), ("ZHNHPNA", "zhnHcnaDeviceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHpnaCompliance = zhnHpnaCompliance.setStatus('current')
zhnHpnaDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 1)).setObjects(("ZHNHPNA", "hpnaDeviceMAC"), ("ZHNHPNA", "hpnaDeviceHWVersion"), ("ZHNHPNA", "hpnaDeviceFWVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHpnaDeviceGroup = zhnHpnaDeviceGroup.setStatus('current')
zhnHcnaDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 2)).setObjects(("ZHNHPNA", "hcnaDeviceMAC"), ("ZHNHPNA", "hcnaDeviceHWVersion"), ("ZHNHPNA", "hcnaDeviceFWVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHcnaDeviceGroup = zhnHcnaDeviceGroup.setStatus('current')
zhnHpnaStationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 3)).setObjects(("ZHNHPNA", "hpnaStationSource"), ("ZHNHPNA", "hpnaStationDestination"), ("ZHNHPNA", "hpnaStationRate"), ("ZHNHPNA", "hpnaStationSymbolRate"), ("ZHNHPNA", "hpnaStationBitsPerSymbol"), ("ZHNHPNA", "hpnaStationRxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHpnaStationsGroup = zhnHpnaStationsGroup.setStatus('current')
zhnHcnaStationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 4)).setObjects(("ZHNHPNA", "hcnaStationSource"), ("ZHNHPNA", "hcnaStationDestination"), ("ZHNHPNA", "hcnaStationRate"), ("ZHNHPNA", "hcnaStationSymbolRate"), ("ZHNHPNA", "hcnaStationBitsPerSymbol"), ("ZHNHPNA", "hcnaStationRxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHcnaStationsGroup = zhnHcnaStationsGroup.setStatus('current')
mibBuilder.exportSymbols("ZHNHPNA", hpnaDeviceTable=hpnaDeviceTable, zhnHpnaObjects=zhnHpnaObjects, hcnaStationDestination=hcnaStationDestination, hcnaStationRxPower=hcnaStationRxPower, hcnaStationsTable=hcnaStationsTable, hpnaDeviceFWVersion=hpnaDeviceFWVersion, hpnaDeviceIndex=hpnaDeviceIndex, hpnaStationIndex=hpnaStationIndex, hpnaStationBitsPerSymbol=hpnaStationBitsPerSymbol, hpnaDeviceHWVersion=hpnaDeviceHWVersion, hpnaDeviceMAC=hpnaDeviceMAC, hpnaStationRxPower=hpnaStationRxPower, hcnaStationIndex=hcnaStationIndex, hcnaStationSymbolRate=hcnaStationSymbolRate, zhnHcnaDeviceGroup=zhnHcnaDeviceGroup, PYSNMP_MODULE_ID=zhnHpna, hcnaDeviceMAC=hcnaDeviceMAC, hcnaDeviceFWVersion=hcnaDeviceFWVersion, hcnaStationsEntry=hcnaStationsEntry, hpnaStationSource=hpnaStationSource, zhnHpna=zhnHpna, zhnHpnaDeviceGroup=zhnHpnaDeviceGroup, hcnaDeviceEntry=hcnaDeviceEntry, zhnHcnaStationsGroup=zhnHcnaStationsGroup, hpnaStationsEntry=hpnaStationsEntry, hcnaDeviceIndex=hcnaDeviceIndex, hpnaStationSymbolRate=hpnaStationSymbolRate, hcnaStationSource=hcnaStationSource, hcnaStationRate=hcnaStationRate, hpnaStationRate=hpnaStationRate, zhnHpnaCompliance=zhnHpnaCompliance, zhnHpnaConformance=zhnHpnaConformance, hcnaDeviceTable=hcnaDeviceTable, zhnHpnaStationsGroup=zhnHpnaStationsGroup, hpnaStationsTable=hpnaStationsTable, zhnHpnaCompliances=zhnHpnaCompliances, hpnaStationDestination=hpnaStationDestination, hcnaDeviceHWVersion=hcnaDeviceHWVersion, zhnHpnaGroups=zhnHpnaGroups, hpnaDeviceEntry=hpnaDeviceEntry, hcnaStationBitsPerSymbol=hcnaStationBitsPerSymbol)
