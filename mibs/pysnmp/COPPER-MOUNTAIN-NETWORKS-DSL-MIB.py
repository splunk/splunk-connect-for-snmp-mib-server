#
# PySNMP MIB module COPPER-MOUNTAIN-NETWORKS-DSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COPPER-MOUNTAIN-NETWORKS-DSL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Counter32, Bits, NotificationType, enterprises, Integer32, Counter64, NotificationType, iso, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter32", "Bits", "NotificationType", "enterprises", "Integer32", "Counter64", "NotificationType", "iso", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
coppermountain = MibIdentifier((1, 3, 6, 1, 4, 1, 1996))
cmRegistry = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1))
cmCE120Platform = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1, 1))
cmCE150Platform = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1, 2))
cmCE200Platform = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1, 3))
cmTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10))
cmHDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 3))
cmIface = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 4))
cmEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 5))
cmFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 6))
cmDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 7))
cmIDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 8))
cmFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 9))
cmATM = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 10))
cmIMUX = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 11))
cmDataPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 12))
cmCE200 = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20))
cmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 1))
cmBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 2))
cmState = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 3))
cmShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 4))
cmFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 5))
cmCpeBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 6))
cmHSSI = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 7))
cmV35 = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 8))
cmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 9))
cmLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 10))
cmVBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 11))
cmMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 12))
cmAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 13))
cmEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 14))
cmUserGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 15))
cmMaint = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 16))
cmProxyArp = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 17))
cmMultiShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 18))
cmDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 19))
cmServiceClass = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 20))
cmEndPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 21))
cmOperator = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 22))
cmRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 23))
cmSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 24))
class DLCI(Integer32):
    pass

class PerfTotalCount(Gauge32):
    pass

class CmObjectPII(Integer32):
    pass

cmHDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1), )
if mibBuilder.loadTexts: cmHDSLModemTable.setStatus('mandatory')
cmHDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmHDSLModemEntry.setStatus('mandatory')
cmHDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemIndex.setStatus('mandatory')
cmHDSLModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("central", 0), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemType.setStatus('mandatory')
cmHDSLModemTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemTxGain.setStatus('mandatory')
cmHDSLModemTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("external-analog-loopback", 1), ("digital-near-loopback", 2), ("digital-far-loopback", 3), ("tx-isolated-plus3-pulse", 4), ("tx-isolated-plus1-pulse", 5), ("tx-isolated-minus1-pulse", 6), ("tx-isolated-minus3-pulse", 7), ("continuous-4level-txmission", 8), ("continuous-2level-txmission", 9), ("set-nominal-VCXO-frequency", 10), ("set-minimum-VCXO-frequency", 11), ("set-maximum-VCXO-frequency", 12), ("internal-analog-loopback", 13), ("isolated-analog-loopback", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemTestMode.setStatus('mandatory')
cmHDSLModemNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemNoiseMargin.setStatus('mandatory')
cmHDSLModemBPSwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemBPSwMajorVersion.setStatus('mandatory')
cmHDSLModemBPSwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemBPSwMinorVersion.setStatus('mandatory')
cmHDSLModemBPHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemBPHwVersion.setStatus('mandatory')
cmHDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemDataRate.setStatus('mandatory')
cmHDSLModemCpeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemCpeCode.setStatus('mandatory')
cmHDSLModemSuccessfulTrains = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemSuccessfulTrains.setStatus('mandatory')
cmHDSLModemFailedTrainingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemFailedTrainingAttempts.setStatus('mandatory')
cmHDSLModemCpeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemCpeResponses.setStatus('mandatory')
cmHDSLModemMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("none", 2), ("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemMinRate.setStatus('mandatory')
cmHDSLModemCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("unknown", 1), ("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemCurrentRate.setStatus('mandatory')
cmHDSLModemCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("retrain", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemCommand.setStatus('mandatory')
cmHDSLPerfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2), )
if mibBuilder.loadTexts: cmHDSLPerfIntervalTable.setStatus('obsolete')
cmHDSLPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLPerfIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLPerfIntervalNumber"))
if mibBuilder.loadTexts: cmHDSLPerfIntervalEntry.setStatus('obsolete')
cmHDSLPerfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: cmHDSLPerfIndex.setStatus('obsolete')
cmHDSLPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cmHDSLPerfIntervalNumber.setStatus('obsolete')
cmHDSLPerfTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 3), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfTxUnderruns.setStatus('obsolete')
cmHDSLPerfRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 4), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxTruncated.setStatus('obsolete')
cmHDSLPerfRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 5), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxBig.setStatus('obsolete')
cmHDSLPerfRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxAborts.setStatus('obsolete')
cmHDSLPerfRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxAlignmentErrors.setStatus('obsolete')
cmHDSLPerfRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxCRCErrors.setStatus('obsolete')
cmHDSLPerfRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 9), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxOverruns.setStatus('obsolete')
cmHDSLPerfRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 10), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxValidFrames.setStatus('obsolete')
cmHDSLPerfTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 11), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfTxValidFrames.setStatus('obsolete')
cmHDSLPerfRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 12), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxNoBuffers.setStatus('obsolete')
cmCpeHDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3), )
if mibBuilder.loadTexts: cmCpeHDSLModemTable.setStatus('mandatory')
cmCpeHDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmCpeHDSLModemEntry.setStatus('mandatory')
cmCpeHDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemIndex.setStatus('mandatory')
cmCpeHDSLModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("central", 0), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemType.setStatus('mandatory')
cmCpeHDSLModemTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemTxGain.setStatus('mandatory')
cmCpeHDSLModemTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("external-analog-loopback", 1), ("digital-near-loopback", 2), ("digital-far-loopback", 3), ("tx-isolated-plus3-pulse", 4), ("tx-isolated-plus1-pulse", 5), ("tx-isolated-minus1-pulse", 6), ("tx-isolated-minus3-pulse", 7), ("continuous-4level-txmission", 8), ("continuous-2level-txmission", 9), ("set-nominal-VCXO-frequency", 10), ("set-minimum-VCXO-frequency", 11), ("set-maximum-VCXO-frequency", 12), ("internal-analog-loopback", 13), ("isolated-analog-loopback", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemTestMode.setStatus('mandatory')
cmCpeHDSLModemNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemNoiseMargin.setStatus('mandatory')
cmCpeHDSLModemBPSwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemBPSwMajorVersion.setStatus('mandatory')
cmCpeHDSLModemBPSwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemBPSwMinorVersion.setStatus('mandatory')
cmCpeHDSLModemBPHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemBPHwVersion.setStatus('mandatory')
cmCpeHDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemDataRate.setStatus('mandatory')
cmSDSLTestTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4), )
if mibBuilder.loadTexts: cmSDSLTestTable.setStatus('mandatory')
cmSDSLTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmSDSLTestEntry.setStatus('mandatory')
cmSDSLTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestIndex.setStatus('mandatory')
cmSDSLTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSDSLTestAction.setStatus('mandatory')
cmSDSLTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("complete", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestStatus.setStatus('mandatory')
cmSDSLTestTestCompleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestTestCompleteTime.setStatus('mandatory')
cmSDSLTestContinuityTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestContinuityTestResult.setStatus('mandatory')
cmSDSLTestNearEndLoopProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("possibleShort", 2), ("possibleOpen", 3), ("pending", 4), ("cpeTalking", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestNearEndLoopProfile.setStatus('mandatory')
cmSDSLTestDebugResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestDebugResult.setStatus('mandatory')
cmSDSLTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("profile", 2), ("seekMaxRate", 3), ("cpeDownload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSDSLTestType.setStatus('mandatory')
cmSDSLTestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("unknown", 1), ("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestMaxRate.setStatus('mandatory')
cmIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1), )
if mibBuilder.loadTexts: cmIfaceTable.setStatus('mandatory')
cmIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIfacePII"))
if mibBuilder.loadTexts: cmIfaceEntry.setStatus('mandatory')
cmIfacePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfacePII.setStatus('mandatory')
cmIfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceIfIndex.setStatus('mandatory')
cmIfaceNetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("vwan", 3), ("frame", 4), ("copperVPN", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceNetModel.setStatus('mandatory')
cmIfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceIpAddr.setStatus('mandatory')
cmIfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceNetMask.setStatus('mandatory')
cmIfaceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceMacAddr.setStatus('mandatory')
cmIfaceBurnedInMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceBurnedInMacAddr.setStatus('mandatory')
cmIfaceFarEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceFarEndAddr.setStatus('mandatory')
cmIfaceDestPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 9), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceDestPII.setStatus('mandatory')
cmIfaceFwdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 1), ("fullIP", 2), ("policyIP", 3), ("vwan-pp", 4), ("vwan-bridge", 5), ("policyIP-enet", 6), ("frame-mux", 7), ("copperVPN", 9), ("copperVPNauto", 10), ("hdlc-vc-payload", 11), ("vc-vc-payload", 12), ("ppp-hdlc-1973", 13), ("frf8-1490-1483", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceFwdMode.setStatus('mandatory')
cmIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceName.setStatus('mandatory')
cmIfaceAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceAdditionalInfo.setStatus('mandatory')
cmIfaceCMCPCompatible = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceCMCPCompatible.setStatus('mandatory')
cmIfaceEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("rfc1483", 2), ("rfc1490", 3), ("hdlc", 4), ("ppp-hdlc", 5), ("rfc1973", 6), ("q922", 7), ("q922-1490", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceEncapsulationType.setStatus('mandatory')
cmIfaceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceGroupName.setStatus('mandatory')
cmIfaceServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceServiceClass.setStatus('mandatory')
cmSubIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2), )
if mibBuilder.loadTexts: cmSubIfaceTable.setStatus('mandatory')
cmSubIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmSubIfacePII"))
if mibBuilder.loadTexts: cmSubIfaceEntry.setStatus('mandatory')
cmSubIfacePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSubIfacePII.setStatus('mandatory')
cmSubIfaceDestPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 2), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfaceDestPII.setStatus('mandatory')
cmSubIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfaceName.setStatus('mandatory')
cmSubIfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfaceRowStatus.setStatus('mandatory')
cmSubIfacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfacePriority.setStatus('mandatory')
cmFrDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1), )
if mibBuilder.loadTexts: cmFrDlcmiTable.setStatus('mandatory')
cmFrDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFrDlcmiIfIndex"))
if mibBuilder.loadTexts: cmFrDlcmiEntry.setStatus('mandatory')
cmFrDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiIfIndex.setStatus('mandatory')
cmFrDlcmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiAdminState.setStatus('mandatory')
cmFrDlcmiOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiOperState.setStatus('mandatory')
cmFrDlcmiFirstDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiFirstDLCI.setStatus('mandatory')
cmFrDlcmiLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiLMIMode.setStatus('mandatory')
cmFrDlcmiDceN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiDceN392.setStatus('mandatory')
cmFrDlcmiDceN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiDceN393.setStatus('mandatory')
cmFrDlcmiDceT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiDceT392.setStatus('mandatory')
cmFrDlcmiRcvUnknownDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiRcvUnknownDLCI.setStatus('mandatory')
cmFrDlcmiLMITxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMITxStatusEnquiries.setStatus('mandatory')
cmFrDlcmiLMITxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMITxStatusResponses.setStatus('mandatory')
cmFrDlcmiLMIRxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMIRxStatusEnquiries.setStatus('mandatory')
cmFrDlcmiLMIRxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMIRxStatusResponses.setStatus('mandatory')
cmFrDlcmiLMIRxUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMIRxUpdates.setStatus('mandatory')
cmFrDlcmiUnknownLMIMessagesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiUnknownLMIMessagesRcvd.setStatus('mandatory')
cmFrDlcmiLostLMISequences = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLostLMISequences.setStatus('mandatory')
cmFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2), )
if mibBuilder.loadTexts: cmFrCircuitTable.setStatus('mandatory')
cmFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFrCircuitIfIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFrCircuitDlci"))
if mibBuilder.loadTexts: cmFrCircuitEntry.setStatus('mandatory')
cmFrCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitIfIndex.setStatus('mandatory')
cmFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitDlci.setStatus('mandatory')
cmFrCircuitOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitOperState.setStatus('mandatory')
cmFrCircuitFramesDroppedTxUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedTxUnavail.setStatus('mandatory')
cmFrCircuitFramesDroppedRxUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedRxUnavail.setStatus('mandatory')
cmFrCircuitFramesDroppedExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedExcess.setStatus('mandatory')
cmAtmVclTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1), )
if mibBuilder.loadTexts: cmAtmVclTable.setStatus('mandatory')
cmAtmVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAtmVclPII"))
if mibBuilder.loadTexts: cmAtmVclEntry.setStatus('mandatory')
cmAtmVclPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclPII.setStatus('mandatory')
cmAtmVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclVpi.setStatus('mandatory')
cmAtmVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclVci.setStatus('mandatory')
cmAtmVclAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclAdminStatus.setStatus('mandatory')
cmAtmVclOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclOperStatus.setStatus('mandatory')
cmAtmVclLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclLastChange.setStatus('mandatory')
cmAtmVclAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("aal5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclAalType.setStatus('mandatory')
cmAtmVclAal5CpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclAal5CpcsTransmitSduSize.setStatus('mandatory')
cmAtmVclAal5CpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclAal5CpcsReceiveSduSize.setStatus('mandatory')
cmAtmVclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclRowStatus.setStatus('mandatory')
cmDS3AtmTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2), )
if mibBuilder.loadTexts: cmDS3AtmTable.setStatus('mandatory')
cmDS3AtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDS3AtmPII"))
if mibBuilder.loadTexts: cmDS3AtmEntry.setStatus('mandatory')
cmDS3AtmPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDS3AtmPII.setStatus('mandatory')
cmDS3AtmCbitParityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDS3AtmCbitParityEnable.setStatus('mandatory')
cmDS3AtmCellPayloadScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDS3AtmCellPayloadScrambling.setStatus('mandatory')
cmDS3AtmCellMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plcp", 1), ("hec", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDS3AtmCellMapping.setStatus('mandatory')
cmNameTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1), )
if mibBuilder.loadTexts: cmNameTable.setStatus('mandatory')
cmNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"))
if mibBuilder.loadTexts: cmNameEntry.setStatus('mandatory')
cmNameIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNameIfName.setStatus('mandatory')
cmNamePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1, 1, 2), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNamePII.setStatus('mandatory')
cmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2), )
if mibBuilder.loadTexts: cmGroupTable.setStatus('mandatory')
cmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"))
if mibBuilder.loadTexts: cmGroupEntry.setStatus('mandatory')
cmGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmGroupName.setStatus('mandatory')
cmGroupNewGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmGroupNewGrpName.setStatus('mandatory')
cmGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmGroupRowStatus.setStatus('mandatory')
cmMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3), )
if mibBuilder.loadTexts: cmMemberTable.setStatus('mandatory')
cmMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMemberPII"))
if mibBuilder.loadTexts: cmMemberEntry.setStatus('mandatory')
cmMemberGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMemberGrpName.setStatus('mandatory')
cmMemberPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1, 2), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMemberPII.setStatus('mandatory')
cmMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMemberRowStatus.setStatus('mandatory')
cmCpeEthernetIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1), )
if mibBuilder.loadTexts: cmCpeEthernetIntervalTable.setStatus('mandatory')
cmCpeEthernetIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeEthernetIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeEthernetIntervalNumber"))
if mibBuilder.loadTexts: cmCpeEthernetIntervalEntry.setStatus('mandatory')
cmCpeEthernetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetIndex.setStatus('mandatory')
cmCpeEthernetIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetIntervalNumber.setStatus('mandatory')
cmCpeEthernetIntUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetIntUnknowns.setStatus('mandatory')
cmCpeEthernetRxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxOK.setStatus('mandatory')
cmCpeEthernetRxNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxNoBufs.setStatus('mandatory')
cmCpeEthernetRxMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxMiss.setStatus('mandatory')
cmCpeEthernetRxSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxSkip.setStatus('mandatory')
cmCpeEthernetRxRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxRunt.setStatus('mandatory')
cmCpeEthernetRxExtraData = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxExtraData.setStatus('mandatory')
cmCpeEthernetRxCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxCRCError.setStatus('mandatory')
cmCpeEthernetRxAlignError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxAlignError.setStatus('mandatory')
cmCpeEthernetRxDribbleBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxDribbleBits.setStatus('mandatory')
cmCpeEthernetTxTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxTooBig.setStatus('mandatory')
cmCpeEthernetTxNotReady = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxNotReady.setStatus('mandatory')
cmCpeEthernetTxLossCRS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxLossCRS.setStatus('mandatory')
cmCpeEthernetTxSQEErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxSQEErr.setStatus('mandatory')
cmCpeEthernetTxOutOfWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxOutOfWindow.setStatus('mandatory')
cmCpeEthernetTxJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxJabber.setStatus('mandatory')
cmCpeEthernetTx16Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTx16Collisions.setStatus('mandatory')
cmCpeEthernetTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxCollisions.setStatus('mandatory')
cmCpeEthernetTxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxOK.setStatus('mandatory')
cmFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1), )
if mibBuilder.loadTexts: cmFilterTable.setStatus('mandatory')
cmFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFilterIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFilterFilterNumber"))
if mibBuilder.loadTexts: cmFilterEntry.setStatus('mandatory')
cmFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFilterIndex.setStatus('mandatory')
cmFilterFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFilterFilterNumber.setStatus('mandatory')
cmFilterFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("insert", 2), ("delete", 3), ("deleteList", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterFunction.setStatus('mandatory')
cmFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcMask.setStatus('mandatory')
cmFilterSrcAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcAdrs.setStatus('mandatory')
cmFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstMask.setStatus('mandatory')
cmFilterDstAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstAdrs.setStatus('mandatory')
cmFilterIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterIpProtocol.setStatus('mandatory')
cmFilterSrcPortCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("less", 2), ("equal", 3), ("greater", 4), ("notEqual", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcPortCompare.setStatus('mandatory')
cmFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcPort.setStatus('mandatory')
cmFilterDstPortCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("less", 2), ("equal", 3), ("greater", 4), ("notEqual", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstPortCompare.setStatus('mandatory')
cmFilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstPort.setStatus('mandatory')
cmFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("block", 2), ("chain", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterAction.setStatus('mandatory')
cmDSLIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1), )
if mibBuilder.loadTexts: cmDSLIntervalTable.setStatus('mandatory')
cmDSLIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLIntervalIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLIntervalNumber"))
if mibBuilder.loadTexts: cmDSLIntervalEntry.setStatus('mandatory')
cmDSLIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalIndex.setStatus('mandatory')
cmDSLIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalNumber.setStatus('mandatory')
cmDSLIntervalTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTxUnderruns.setStatus('mandatory')
cmDSLIntervalRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxTruncated.setStatus('mandatory')
cmDSLIntervalRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxBig.setStatus('mandatory')
cmDSLIntervalRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxAborts.setStatus('mandatory')
cmDSLIntervalRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxAlignmentErrors.setStatus('mandatory')
cmDSLIntervalRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxCRCErrors.setStatus('mandatory')
cmDSLIntervalRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxOverruns.setStatus('mandatory')
cmDSLIntervalRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxValidFrames.setStatus('mandatory')
cmDSLIntervalTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTxValidFrames.setStatus('mandatory')
cmDSLIntervalRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 12), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxNoBuffers.setStatus('mandatory')
cmDSLIntervalTimeTagBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTimeTagBegin.setStatus('mandatory')
cmDSLIntervalTimeTagEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTimeTagEnd.setStatus('mandatory')
cmDSLIntervalMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalMinNoiseMargin.setStatus('mandatory')
cmDSLIntervalRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 16), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxValidOctets.setStatus('mandatory')
cmDSLIntervalTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 17), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTxValidOctets.setStatus('mandatory')
cmDSLIntervalPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 18), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalPortUpTime.setStatus('mandatory')
cmDSLCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2), )
if mibBuilder.loadTexts: cmDSLCurrentTable.setStatus('mandatory')
cmDSLCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLCurrentIndex"))
if mibBuilder.loadTexts: cmDSLCurrentEntry.setStatus('mandatory')
cmDSLCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentIndex.setStatus('mandatory')
cmDSLCurrentTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentTxUnderruns.setStatus('mandatory')
cmDSLCurrentRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxTruncated.setStatus('mandatory')
cmDSLCurrentRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxBig.setStatus('mandatory')
cmDSLCurrentRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxAborts.setStatus('mandatory')
cmDSLCurrentRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxAlignmentErrors.setStatus('mandatory')
cmDSLCurrentRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxCRCErrors.setStatus('mandatory')
cmDSLCurrentRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxOverruns.setStatus('mandatory')
cmDSLCurrentRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxValidFrames.setStatus('mandatory')
cmDSLCurrentTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentTxValidFrames.setStatus('mandatory')
cmDSLCurrentRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 12), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxNoBuffers.setStatus('mandatory')
cmDSLCurrentMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentMinNoiseMargin.setStatus('mandatory')
cmDSLCurrentRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxValidOctets.setStatus('mandatory')
cmDSLCurrentTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentTxValidOctets.setStatus('mandatory')
cmDSLCurrentPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 16), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentPortUpTime.setStatus('mandatory')
cmDSLYesterdaysTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3), )
if mibBuilder.loadTexts: cmDSLYesterdaysTable.setStatus('mandatory')
cmDSLYesterdaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLYesterdaysIndex"))
if mibBuilder.loadTexts: cmDSLYesterdaysEntry.setStatus('mandatory')
cmDSLYesterdaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysIndex.setStatus('mandatory')
cmDSLYesterdaysTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysTxUnderruns.setStatus('mandatory')
cmDSLYesterdaysRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxTruncated.setStatus('mandatory')
cmDSLYesterdaysRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxBig.setStatus('mandatory')
cmDSLYesterdaysRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxAborts.setStatus('mandatory')
cmDSLYesterdaysRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxAlignmentErrors.setStatus('mandatory')
cmDSLYesterdaysRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxCRCErrors.setStatus('mandatory')
cmDSLYesterdaysRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxOverruns.setStatus('mandatory')
cmDSLYesterdaysRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxValidFrames.setStatus('mandatory')
cmDSLYesterdaysTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysTxValidFrames.setStatus('mandatory')
cmDSLYesterdaysRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxNoBuffers.setStatus('mandatory')
cmDSLYesterdaysMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysMinNoiseMargin.setStatus('mandatory')
cmDSLYesterdaysRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxValidOctets.setStatus('mandatory')
cmDSLYesterdaysTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysTxValidOctets.setStatus('mandatory')
cmDSLYesterdaysPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysPortUpTime.setStatus('mandatory')
cmDSLTodaysTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4), )
if mibBuilder.loadTexts: cmDSLTodaysTable.setStatus('mandatory')
cmDSLTodaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLTodaysIndex"))
if mibBuilder.loadTexts: cmDSLTodaysEntry.setStatus('mandatory')
cmDSLTodaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysIndex.setStatus('mandatory')
cmDSLTodaysTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysTxUnderruns.setStatus('mandatory')
cmDSLTodaysRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxTruncated.setStatus('mandatory')
cmDSLTodaysRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxBig.setStatus('mandatory')
cmDSLTodaysRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxAborts.setStatus('mandatory')
cmDSLTodaysRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxAlignmentErrors.setStatus('mandatory')
cmDSLTodaysRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxCRCErrors.setStatus('mandatory')
cmDSLTodaysRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxOverruns.setStatus('mandatory')
cmDSLTodaysRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxValidFrames.setStatus('mandatory')
cmDSLTodaysTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysTxValidFrames.setStatus('mandatory')
cmDSLTodaysRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxNoBuffers.setStatus('mandatory')
cmDSLTodaysMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysMinNoiseMargin.setStatus('mandatory')
cmDSLTodaysRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxValidOctets.setStatus('mandatory')
cmDSLTodaysTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysTxValidOctets.setStatus('mandatory')
cmDSLTodaysPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysPortUpTime.setStatus('mandatory')
cmDSL24HrTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5), )
if mibBuilder.loadTexts: cmDSL24HrTable.setStatus('mandatory')
cmDSL24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSL24HrIndex"))
if mibBuilder.loadTexts: cmDSL24HrEntry.setStatus('mandatory')
cmDSL24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrIndex.setStatus('mandatory')
cmDSL24HrTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrTxUnderruns.setStatus('mandatory')
cmDSL24HrRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxTruncated.setStatus('mandatory')
cmDSL24HrRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxBig.setStatus('mandatory')
cmDSL24HrRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxAborts.setStatus('mandatory')
cmDSL24HrRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxAlignmentErrors.setStatus('mandatory')
cmDSL24HrRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxCRCErrors.setStatus('mandatory')
cmDSL24HrRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxOverruns.setStatus('mandatory')
cmDSL24HrRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxValidFrames.setStatus('mandatory')
cmDSL24HrTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrTxValidFrames.setStatus('mandatory')
cmDSL24HrRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxNoBuffers.setStatus('mandatory')
cmDSL24HrMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrMinNoiseMargin.setStatus('mandatory')
cmDSL24HrRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxValidOctets.setStatus('mandatory')
cmDSL24HrTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrTxValidOctets.setStatus('mandatory')
cmDSL24HrPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrPortUpTime.setStatus('mandatory')
cmCpeDSLIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6), )
if mibBuilder.loadTexts: cmCpeDSLIntervalTable.setStatus('mandatory')
cmCpeDSLIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDSLIntervalIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDSLIntervalNumber"))
if mibBuilder.loadTexts: cmCpeDSLIntervalEntry.setStatus('mandatory')
cmCpeDSLIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalIndex.setStatus('mandatory')
cmCpeDSLIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalNumber.setStatus('mandatory')
cmCpeDSLIntervalTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalTxUnderruns.setStatus('mandatory')
cmCpeDSLIntervalRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxTruncated.setStatus('mandatory')
cmCpeDSLIntervalRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxBig.setStatus('mandatory')
cmCpeDSLIntervalRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxAborts.setStatus('mandatory')
cmCpeDSLIntervalRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxAlignmentErrors.setStatus('mandatory')
cmCpeDSLIntervalRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxCRCErrors.setStatus('mandatory')
cmCpeDSLIntervalRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxOverruns.setStatus('mandatory')
cmCpeDSLIntervalRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxValidFrames.setStatus('mandatory')
cmCpeDSLIntervalTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalTxValidFrames.setStatus('mandatory')
cmCpeDSLIntervalRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxNoBuffers.setStatus('mandatory')
cmCpeDSLIntervalRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxValidOctets.setStatus('mandatory')
cmCpeDSLIntervalTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalTxValidOctets.setStatus('mandatory')
cmIDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1), )
if mibBuilder.loadTexts: cmIDSLModemTable.setStatus('mandatory')
cmIDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmIDSLModemEntry.setStatus('mandatory')
cmIDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemIndex.setStatus('mandatory')
cmIDSLModemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemOperState.setStatus('mandatory')
cmIDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 144))).clone(namedValues=NamedValues(("dr64Kbps", 64), ("dr128Kbps", 128), ("dr144Kbps", 144)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLModemDataRate.setStatus('mandatory')
cmIDSLModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inactive", 2), ("activating", 3), ("activated", 4), ("activatedCpeDetected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemState.setStatus('mandatory')
cmIDSLModemTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lineTerminated", 1), ("networkTerminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemTerminationMode.setStatus('mandatory')
cmIDSLModemCpeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLModemCpeCode.setStatus('mandatory')
cmIDSLModemSuccessfulTrains = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemSuccessfulTrains.setStatus('mandatory')
cmIDSLModemFailedTrainingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemFailedTrainingAttempts.setStatus('mandatory')
cmIDSLModemCpeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemCpeResponses.setStatus('mandatory')
cmIDSLModemNetworkElements = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("oneElement", 1), ("twoElements", 2), ("threeElements", 3), ("fourElements", 4), ("fiveElements", 5), ("sixElements", 6), ("cpeOnly", 7), ("unknown", 8), ("invalid", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemNetworkElements.setStatus('mandatory')
cmIDSLModemActivationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLModemActivationInterval.setStatus('mandatory')
cmCpeIDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2), )
if mibBuilder.loadTexts: cmCpeIDSLModemTable.setStatus('mandatory')
cmCpeIDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmCpeIDSLModemEntry.setStatus('mandatory')
cmCpeIDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemIndex.setStatus('mandatory')
cmCpeIDSLModemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemOperState.setStatus('mandatory')
cmCpeIDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 144))).clone(namedValues=NamedValues(("dr64Kbps", 64), ("dr128Kbps", 128), ("dr144Kbps", 144)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemDataRate.setStatus('mandatory')
cmCpeIDSLModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("activating", 3), ("activated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemState.setStatus('mandatory')
cmCpeIDSLModemTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lineTerminated", 1), ("networkTerminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemTerminationMode.setStatus('mandatory')
cmBundleTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1), )
if mibBuilder.loadTexts: cmBundleTable.setStatus('mandatory')
cmBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBundlePII"))
if mibBuilder.loadTexts: cmBundleEntry.setStatus('mandatory')
cmBundlePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundlePII.setStatus('mandatory')
cmBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleRowStatus.setStatus('mandatory')
cmBundleMember1PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 3), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember1PII.setStatus('mandatory')
cmBundleMember1EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember1EndPointID.setStatus('mandatory')
cmBundleMember1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember1Status.setStatus('mandatory')
cmBundleMember2PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 6), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember2PII.setStatus('mandatory')
cmBundleMember2EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember2EndPointID.setStatus('mandatory')
cmBundleMember2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember2Status.setStatus('mandatory')
cmBundleMember3PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 9), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember3PII.setStatus('mandatory')
cmBundleMember3EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember3EndPointID.setStatus('mandatory')
cmBundleMember3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember3Status.setStatus('mandatory')
cmBundleMember4PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 12), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember4PII.setStatus('mandatory')
cmBundleMember4EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember4EndPointID.setStatus('mandatory')
cmBundleMember4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember4Status.setStatus('mandatory')
cmCpeDataPortTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1), )
if mibBuilder.loadTexts: cmCpeDataPortTable.setStatus('mandatory')
cmCpeDataPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDataPortIndex"))
if mibBuilder.loadTexts: cmCpeDataPortEntry.setStatus('mandatory')
cmCpeDataPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIndex.setStatus('mandatory')
cmCpeDataPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eia-530", 1), ("v35", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortType.setStatus('mandatory')
cmCpeDataPortForceDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortForceDSR.setStatus('mandatory')
cmCpeDataPortIgnoreDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortIgnoreDTR.setStatus('mandatory')
cmCpeDataPortIgnoreRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortIgnoreRTS.setStatus('mandatory')
cmCpeDataPortTerminalTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortTerminalTiming.setStatus('mandatory')
cmCpeDataPortTM = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTM.setStatus('mandatory')
cmCpeDataPortLL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortLL.setStatus('mandatory')
cmCpeDataPortRL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortRL.setStatus('mandatory')
cmCpeDataPortDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDTR.setStatus('mandatory')
cmCpeDataPortRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortRTS.setStatus('mandatory')
cmCpeDataPortDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDSR.setStatus('mandatory')
cmCpeDataPortCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortCTS.setStatus('mandatory')
cmCpeDataPortDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDCD.setStatus('mandatory')
cmCpeDataPortTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTxClockSource.setStatus('mandatory')
cmCpeDataPortDTEDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDTEDCE.setStatus('mandatory')
cmCpeDataPortCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("crc-ccitt", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortCRC.setStatus('mandatory')
cmCpeDataPortClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3136000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortClockRate.setStatus('mandatory')
cmCpeDataPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortAdminState.setStatus('mandatory')
cmCpeDataPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortOperState.setStatus('mandatory')
cmCpeDataPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortLoopbackConfig.setStatus('mandatory')
cmCpeDataPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortLoopbackStatus.setStatus('mandatory')
cmCpeDataPortIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2), )
if mibBuilder.loadTexts: cmCpeDataPortIntervalTable.setStatus('mandatory')
cmCpeDataPortIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDataPortIntervalIndex"))
if mibBuilder.loadTexts: cmCpeDataPortIntervalEntry.setStatus('mandatory')
cmCpeDataPortIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalIndex.setStatus('mandatory')
cmCpeDataPortIntervalIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalIntervalNumber.setStatus('mandatory')
cmCpeDataPortIntervalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxFrames.setStatus('mandatory')
cmCpeDataPortIntervalRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxOctets.setStatus('mandatory')
cmCpeDataPortIntervalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxDiscards.setStatus('mandatory')
cmCpeDataPortIntervalRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxErrors.setStatus('mandatory')
cmCpeDataPortIntervalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxFrames.setStatus('mandatory')
cmCpeDataPortIntervalTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxOctets.setStatus('mandatory')
cmCpeDataPortIntervalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxDiscards.setStatus('mandatory')
cmCpeDataPortIntervalTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxErrors.setStatus('mandatory')
cmCpeDataPortTotalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3), )
if mibBuilder.loadTexts: cmCpeDataPortTotalTable.setStatus('mandatory')
cmCpeDataPortTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDataPortTotalIndex"))
if mibBuilder.loadTexts: cmCpeDataPortTotalEntry.setStatus('mandatory')
cmCpeDataPortTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalIndex.setStatus('mandatory')
cmCpeDataPortTotalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxFrames.setStatus('mandatory')
cmCpeDataPortTotalRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxOctets.setStatus('mandatory')
cmCpeDataPortTotalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxDiscards.setStatus('mandatory')
cmCpeDataPortTotalRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxErrors.setStatus('mandatory')
cmCpeDataPortTotalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxFrames.setStatus('mandatory')
cmCpeDataPortTotalTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxOctets.setStatus('mandatory')
cmCpeDataPortTotalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxDiscards.setStatus('mandatory')
cmCpeDataPortTotalTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxErrors.setStatus('mandatory')
cmSysObjectClass = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256))).clone(namedValues=NamedValues(("system", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysObjectClass.setStatus('mandatory')
cmSysOperState = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysOperState.setStatus('mandatory')
cmSysMaster = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysMaster.setStatus('mandatory')
cmSysTrapAddress = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 4), IpAddress())
if mibBuilder.loadTexts: cmSysTrapAddress.setStatus('obsolete')
cmSysConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysConfigFileName.setStatus('mandatory')
cmSysCommand = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("readConfig", 2), ("saveConfig", 3), ("restart", 4), ("takeover", 5), ("relinquish", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysCommand.setStatus('mandatory')
cmSysCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("pending", 2), ("inprogress", 3), ("aborted", 4), ("succeeded", 5), ("failed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCommandStatus.setStatus('mandatory')
cmSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysVersion.setStatus('mandatory')
cmSysCalendarTime = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysCalendarTime.setStatus('mandatory')
cmSysPrimaryPII = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 10), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysPrimaryPII.setStatus('mandatory')
cmSysSecondaryPII = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 11), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysSecondaryPII.setStatus('mandatory')
cmSysRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysRedundancy.setStatus('mandatory')
cmSysConfigSynch = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saved", 1), ("notSaved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysConfigSynch.setStatus('mandatory')
cmSysMyPII = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 14), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysMyPII.setStatus('mandatory')
cmSysShelfCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysShelfCount.setStatus('mandatory')
cmSysExpIpSubNet = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysExpIpSubNet.setStatus('mandatory')
cmBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1), )
if mibBuilder.loadTexts: cmBoardTable.setStatus('mandatory')
cmBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"))
if mibBuilder.loadTexts: cmBoardEntry.setStatus('mandatory')
cmBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardIndex.setStatus('mandatory')
cmBoardObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardObjectClass.setStatus('mandatory')
cmBoardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardOperState.setStatus('mandatory')
cmBoardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardUpTime.setStatus('mandatory')
cmBoardFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardFileName.setStatus('mandatory')
cmBoardFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardFileDate.setStatus('mandatory')
cmBoardHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 9, 13, 14, 15, 19, 20, 21))).clone(namedValues=NamedValues(("hwSystemControlModule", 1), ("hwSDSL10xModule-1", 2), ("hwBufferControlModule", 4), ("hwV35-Wan", 5), ("hwSDSL10xModule", 6), ("hwSDSL30xModule", 7), ("hwHSSI-WAN", 9), ("hwDS3RFR-WAN", 13), ("hwSDSL30xModule-24", 14), ("hwIDSLModule-24", 15), ("hwCopperBaySCM", 19), ("hwLANModule", 20), ("hwDS3ATM-WAN", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardHwType.setStatus('mandatory')
cmBoardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardNumPorts.setStatus('mandatory')
cmBoardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardHwVersion.setStatus('mandatory')
cmBoardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardSwVersion.setStatus('mandatory')
cmBoardPromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardPromVersion.setStatus('mandatory')
cmBoardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("systemMaster", 2), ("shelfMaster", 3), ("standby", 4), ("primary", 5), ("secondary", 6))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardRole.setStatus('mandatory')
cmBoardConfigChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardConfigChange.setStatus('mandatory')
cmBoardCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("restart", 1), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBoardCommand.setStatus('mandatory')
cmBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardSerialNumber.setStatus('mandatory')
cmBoardClusterRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("master", 2), ("expansion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardClusterRole.setStatus('mandatory')
cmBoardInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardInformation.setStatus('mandatory')
cmIDSLBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2), )
if mibBuilder.loadTexts: cmIDSLBoardTable.setStatus('mandatory')
cmIDSLBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardIndex"))
if mibBuilder.loadTexts: cmIDSLBoardEntry.setStatus('mandatory')
cmIDSLBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLBoardIndex.setStatus('mandatory')
cmIDSLBoardTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internallyTimed", 1), ("locallyTimed", 2), ("networkTimedSlave", 3), ("networkTimedMaster", 4), ("networkTimedBackup", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLBoardTimingMode.setStatus('mandatory')
cmIDSLBoardTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internallyTimed", 1), ("locallyTimed", 2), ("networkTimedSlave", 3), ("networkTimedMaster", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLBoardTimingStatus.setStatus('mandatory')
cmIDSLBoardTimingAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLBoardTimingAvailable.setStatus('mandatory')
cmStateTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1), )
if mibBuilder.loadTexts: cmStateTable.setStatus('mandatory')
cmStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmStateGenericClass"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmStateIndex"))
if mibBuilder.loadTexts: cmStateEntry.setStatus('mandatory')
cmStateGenericClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 768, 1024, 1280, 2304))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("board", 768), ("port", 1024), ("link", 1280), ("support", 2304)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateGenericClass.setStatus('mandatory')
cmStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateIndex.setStatus('mandatory')
cmStateObjClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateObjClass.setStatus('mandatory')
cmStateOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateOperState.setStatus('mandatory')
cmStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateLastChange.setStatus('mandatory')
cmShelfTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1), )
if mibBuilder.loadTexts: cmShelfTable.setStatus('mandatory')
cmShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmShelfIndex"))
if mibBuilder.loadTexts: cmShelfEntry.setStatus('mandatory')
cmShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfIndex.setStatus('mandatory')
cmShelfObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfObjectClass.setStatus('mandatory')
cmShelfOperability = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfOperability.setStatus('mandatory')
cmShelfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfUpTime.setStatus('mandatory')
cmShelfMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfMaster.setStatus('mandatory')
cmShelfBoardMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfBoardMap.setStatus('mandatory')
cmShelfCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmShelfCommand.setStatus('mandatory')
cmShelfShelfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfShelfNumber.setStatus('mandatory')
cmFileBootDevice = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("fileServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFileBootDevice.setStatus('mandatory')
cmFileFSName = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFileFSName.setStatus('mandatory')
cmFileFSAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSAddr.setStatus('mandatory')
cmFileFSUsername = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSUsername.setStatus('mandatory')
cmFileFSPassword = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSPassword.setStatus('mandatory')
cmFileFLASHDir = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFileFLASHDir.setStatus('mandatory')
cmFileFSDir = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSDir.setStatus('mandatory')
cmCpeBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1), )
if mibBuilder.loadTexts: cmCpeBoardTable.setStatus('mandatory')
cmCpeBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeBoardIndex"))
if mibBuilder.loadTexts: cmCpeBoardEntry.setStatus('mandatory')
cmCpeBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardIndex.setStatus('mandatory')
cmCpeBoardObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardObjectClass.setStatus('mandatory')
cmCpeBoardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardOperState.setStatus('mandatory')
cmCpeBoardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardUpTime.setStatus('mandatory')
cmCpeBoardFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardFileName.setStatus('mandatory')
cmCpeBoardFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardFileDate.setStatus('mandatory')
cmCpeBoardHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 8, 10, 16, 17, 22, 23))).clone(namedValues=NamedValues(("hwCR201-10x", 3), ("hwCR201-30x", 8), ("hwCR201-SDSL", 10), ("hwNetopia-SDSL", 16), ("hwCR201-IDSL", 17), ("hwCPE-SDSL", 22), ("hwCPE-IDSL", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardHwType.setStatus('mandatory')
cmCpeBoardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardNumPorts.setStatus('mandatory')
cmCpeBoardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardHwVersion.setStatus('mandatory')
cmCpeBoardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardSwVersion.setStatus('mandatory')
cmCpeBoardPromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardPromVersion.setStatus('mandatory')
cmCpeBoardConfigChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardConfigChange.setStatus('mandatory')
cmCpeBoardCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("restart", 1), ("erase", 2), ("upgrade", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeBoardCommand.setStatus('mandatory')
cmCpeBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardSerialNumber.setStatus('mandatory')
cmCpeBoardVendorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardVendorDescription.setStatus('mandatory')
cmCpeBoardGroupMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardGroupMap.setStatus('mandatory')
cmCpeBoardManagementOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardManagementOptions.setStatus('mandatory')
cmHSSITable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1), )
if mibBuilder.loadTexts: cmHSSITable.setStatus('mandatory')
cmHSSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHSSIIndex"))
if mibBuilder.loadTexts: cmHSSIEntry.setStatus('mandatory')
cmHSSIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIIndex.setStatus('mandatory')
cmHSSIIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIIfIndex.setStatus('mandatory')
cmHSSIDCEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-ready", 1), ("ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIDCEReady.setStatus('mandatory')
cmHSSIDTEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-ready", 1), ("ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIDTEReady.setStatus('mandatory')
cmHSSIDTEDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIDTEDCE.setStatus('mandatory')
cmHSSILoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local-line", 2), ("remote-line", 3), ("local-digital", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSILoopback.setStatus('mandatory')
cmHSSITestmode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSITestmode.setStatus('mandatory')
cmHSSISync = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync-off", 1), ("sync-on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSISync.setStatus('mandatory')
cmHSSITxClockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSITxClockPresent.setStatus('mandatory')
cmHSSICRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("crc-16", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHSSICRC.setStatus('mandatory')
cmHSSIClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHSSIClockRate.setStatus('mandatory')
cmHSSIAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIAdminState.setStatus('mandatory')
cmHSSIOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIOperState.setStatus('mandatory')
cmV35Table = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1), )
if mibBuilder.loadTexts: cmV35Table.setStatus('mandatory')
cmV35Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmV35Index"))
if mibBuilder.loadTexts: cmV35Entry.setStatus('mandatory')
cmV35Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35Index.setStatus('mandatory')
cmV35IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35IfIndex.setStatus('mandatory')
cmV35DSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DSR.setStatus('mandatory')
cmV35DCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DCD.setStatus('mandatory')
cmV35CTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35CTS.setStatus('mandatory')
cmV35DTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DTR.setStatus('mandatory')
cmV35RTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35RTS.setStatus('mandatory')
cmV35DTEDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DTEDCE.setStatus('mandatory')
cmV35Sync = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync-off", 1), ("sync-on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35Sync.setStatus('mandatory')
cmV35TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-ext", 1), ("clock-int", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35TxClockSource.setStatus('mandatory')
cmV35CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("crc-CCITT", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmV35CRC.setStatus('mandatory')
cmV35ClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35ClockRate.setStatus('mandatory')
cmV35AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35AdminState.setStatus('mandatory')
cmV35OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35OperState.setStatus('mandatory')
cmTrapEventSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventSeqNum.setStatus('mandatory')
cmTrapCriticalAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapCriticalAlarmCount.setStatus('mandatory')
cmTrapMajorAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapMajorAlarmCount.setStatus('mandatory')
cmTrapMinorAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapMinorAlarmCount.setStatus('mandatory')
cmTrapWarningCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapWarningCount.setStatus('mandatory')
cmTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6), )
if mibBuilder.loadTexts: cmTrapReceiverTable.setStatus('obsolete')
cmTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapReceiverIPAddr"))
if mibBuilder.loadTexts: cmTrapReceiverEntry.setStatus('obsolete')
cmTrapReceiverIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: cmTrapReceiverIPAddr.setStatus('obsolete')
cmTrapReceiverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: cmTrapReceiverPort.setStatus('obsolete')
cmTrapReceiverCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 3), DisplayString())
if mibBuilder.loadTexts: cmTrapReceiverCommunity.setStatus('obsolete')
cmTrapReceiverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("create", 4), ("createAndWait", 5), ("delete", 6))))
if mibBuilder.loadTexts: cmTrapReceiverRowStatus.setStatus('obsolete')
cmTrapReceiverOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 5), DisplayString())
if mibBuilder.loadTexts: cmTrapReceiverOwnerString.setStatus('obsolete')
cmTrapEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7), )
if mibBuilder.loadTexts: cmTrapEventLogTable.setStatus('mandatory')
cmTrapEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"))
if mibBuilder.loadTexts: cmTrapEventLogEntry.setStatus('mandatory')
cmTrapEventLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogSeqNum.setStatus('mandatory')
cmTrapEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47))).clone(namedValues=NamedValues(("coldStart", 1), ("boardDown", 2), ("boardUp", 3), ("linkDown", 4), ("linkUp", 5), ("loginFailed", 6), ("loginSucceeded", 7), ("loginsSaturated", 8), ("loginsAvailable", 9), ("loginSuspended", 10), ("loginAllowed", 11), ("bootFileFail", 12), ("bootFileSucceeded", 13), ("logout", 14), ("attributeChanged", 15), ("configReadFail", 16), ("configReadSucceed", 17), ("configWriteFail", 18), ("configWriteSucceed", 19), ("stateChange", 20), ("dLCIStateDisabled", 21), ("dLCIStateEnabled", 22), ("diagnostic", 23), ("boardRestart", 24), ("fanFault", 25), ("fanFaultClear", 26), ("powerSupplyFault", 27), ("powerSupplyClear", 28), ("testStatus", 29), ("testError", 30), ("loopStatusChange", 31), ("risingThresholdAlert", 32), ("ds3LineStatusAlarm", 33), ("ds3LineStatusClear", 34), ("idslTimingLossAlarm", 35), ("idslTimingLossClear", 36), ("redundancyChanged", 37), ("roleChanged", 38), ("redundancyConflict", 39), ("maintSucceed", 40), ("maintFailed", 41), ("fallingThresholdAlert", 42), ("rateFallbackAlarm", 43), ("rateFallbackClear", 44), ("endPointConflictAlarm", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogType.setStatus('mandatory')
cmTrapEventLogObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogObjectClass.setStatus('mandatory')
cmTrapEventLogClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogClassId.setStatus('mandatory')
cmTrapEventLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogProbableCause.setStatus('mandatory')
cmTrapEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("information", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogSeverity.setStatus('mandatory')
cmTrapEventLogTimeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogTimeTag.setStatus('mandatory')
cmTrapEventLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogText.setStatus('mandatory')
cmTrapAlarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8), )
if mibBuilder.loadTexts: cmTrapAlarmLogTable.setStatus('mandatory')
cmTrapAlarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapAlarmLogSeqNum"))
if mibBuilder.loadTexts: cmTrapAlarmLogEntry.setStatus('mandatory')
cmTrapAlarmLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogSeqNum.setStatus('mandatory')
cmTrapAlarmLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47))).clone(namedValues=NamedValues(("coldStart", 1), ("boardDown", 2), ("boardUp", 3), ("linkDown", 4), ("linkUp", 5), ("loginFailed", 6), ("loginSucceeded", 7), ("loginsSaturated", 8), ("loginsAvailable", 9), ("loginSuspended", 10), ("loginAllowed", 11), ("bootFileFail", 12), ("bootFileSucceeded", 13), ("logout", 14), ("attributeChanged", 15), ("configReadFail", 16), ("configReadSucceed", 17), ("configWriteFail", 18), ("configWriteSucceed", 19), ("stateChange", 20), ("dLCIStateDisabled", 21), ("dLCIStateEnabled", 22), ("diagnostic", 23), ("boardRestart", 24), ("fanFault", 25), ("fanFaultClear", 26), ("powerSupplyFault", 27), ("powerSupplyClear", 28), ("testStatus", 29), ("testError", 30), ("loopStatusChange", 31), ("risingThresholdAlert", 32), ("ds3LineStatusAlarm", 33), ("ds3LineStatusClear", 34), ("idslTimingLossAlarm", 35), ("idslTimingLossClear", 36), ("redundancyChanged", 37), ("roleChanged", 38), ("redundancyConflict", 39), ("maintSucceed", 40), ("maintFailed", 41), ("fallingThresholdAlert", 42), ("rateFallbackAlarm", 43), ("rateFallbackClear", 44), ("endPointConflictAlarm", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogType.setStatus('mandatory')
cmTrapAlarmLogObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogObjectClass.setStatus('mandatory')
cmTrapAlarmLogClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogClassId.setStatus('mandatory')
cmTrapAlarmLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogProbableCause.setStatus('mandatory')
cmTrapAlarmLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("information", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapAlarmLogSeverity.setStatus('mandatory')
cmTrapAlarmLogTimeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogTimeTag.setStatus('mandatory')
cmTrapAlarmLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogText.setStatus('mandatory')
cmTrapTypeLogTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9), )
if mibBuilder.loadTexts: cmTrapTypeLogTable.setStatus('mandatory')
cmTrapTypeLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapTypeLogType"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapTypeLogSeqNum"))
if mibBuilder.loadTexts: cmTrapTypeLogEntry.setStatus('mandatory')
cmTrapTypeLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47))).clone(namedValues=NamedValues(("coldStart", 1), ("boardDown", 2), ("boardUp", 3), ("linkDown", 4), ("linkUp", 5), ("loginFailed", 6), ("loginSucceeded", 7), ("loginsSaturated", 8), ("loginsAvailable", 9), ("loginSuspended", 10), ("loginAllowed", 11), ("bootFileFail", 12), ("bootFileSucceeded", 13), ("logout", 14), ("attributeChanged", 15), ("configReadFail", 16), ("configReadSucceed", 17), ("configWriteFail", 18), ("configWriteSucceed", 19), ("stateChange", 20), ("dLCIStateDisabled", 21), ("dLCIStateEnabled", 22), ("diagnostic", 23), ("boardRestart", 24), ("fanFault", 25), ("fanFaultClear", 26), ("powerSupplyFault", 27), ("powerSupplyClear", 28), ("testStatus", 29), ("testError", 30), ("loopStatusChange", 31), ("risingThresholdAlert", 32), ("ds3LineStatusAlarm", 33), ("ds3LineStatusClear", 34), ("idslTimingLossAlarm", 35), ("idslTimingLossClear", 36), ("redundancyChanged", 37), ("roleChanged", 38), ("redundancyConflict", 39), ("maintSucceed", 40), ("maintFailed", 41), ("fallingThresholdAlert", 42), ("rateFallbackAlarm", 43), ("rateFallbackClear", 44), ("endPointConflictAlarm", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogType.setStatus('mandatory')
cmTrapTypeLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogSeqNum.setStatus('mandatory')
cmTrapTypeLogObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogObjectClass.setStatus('mandatory')
cmTrapTypeLogClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogClassId.setStatus('mandatory')
cmTrapTypeLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogProbableCause.setStatus('mandatory')
cmTrapTypeLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("information", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogSeverity.setStatus('mandatory')
cmTrapTypeLogTimeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogTimeTag.setStatus('mandatory')
cmTrapTypeLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogText.setStatus('mandatory')
cmTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10), )
if mibBuilder.loadTexts: cmTrapDestinationTable.setStatus('mandatory')
cmTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapDestinationIpAddr"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapDestinationPort"))
if mibBuilder.loadTexts: cmTrapDestinationEntry.setStatus('mandatory')
cmTrapDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapDestinationIpAddr.setStatus('mandatory')
cmTrapDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapDestinationPort.setStatus('mandatory')
cmTrapDestinationCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapDestinationCommunity.setStatus('mandatory')
cmTrapDestinationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapDestinationRowStatus.setStatus('mandatory')
cmTrapDestinationOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapDestinationOwnerString.setStatus('mandatory')
cmLoopID = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopID.setStatus('mandatory')
cmLoopInterface = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopInterface.setStatus('mandatory')
cmLoopType = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noLoop", 1), ("scm-DSLModulePort", 2), ("scm-CR-Eth", 3), ("scm-CPE-BER", 5), ("scm-WAN-LocalDigital", 7), ("scm-WAN-LocalLine", 8), ("scm-WAN-RemoteLine", 9), ("scm-WAN-Generator", 10), ("scm-DSLModuleEOC", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopType.setStatus('mandatory')
cmLoopAction = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("init", 2), ("start", 3), ("stop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopAction.setStatus('mandatory')
cmLoopDuration = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopDuration.setStatus('mandatory')
cmLoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("done", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopStatus.setStatus('mandatory')
cmLoopTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopTimeElapsed.setStatus('mandatory')
cmLoopTermCode = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("inProgress", 1), ("dbSendError", 2), ("durationExpired", 3), ("operatorStopped", 4), ("noLCresponse", 5), ("noCPEresponse", 6), ("lcInitError", 7), ("cpeInitError", 8), ("cpeStartError", 9), ("lcSstartError", 10), ("cpeDisabled", 11), ("lcDisabled", 12), ("noLinkStateChange", 13), ("idle", 14), ("mioInitError", 15), ("mioDisabled", 16), ("noMIOResponse", 17), ("lcReportError", 18), ("berCountOverflow", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopTermCode.setStatus('mandatory')
cmLoopTxCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopTxCount.setStatus('mandatory')
cmLoopRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopRxErrors.setStatus('mandatory')
cmLoopOwnerString = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopOwnerString.setStatus('mandatory')
cmLoopTestParameter1 = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopTestParameter1.setStatus('mandatory')
cmLoopErrorInfo = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("illegalTestParameter1", 2), ("modemIsNT", 3), ("modemUntrained", 4), ("eocAddr2Big", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopErrorInfo.setStatus('mandatory')
cmLoopHistTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12), )
if mibBuilder.loadTexts: cmLoopHistTable.setStatus('mandatory')
cmLoopHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopID"))
if mibBuilder.loadTexts: cmLoopHistEntry.setStatus('mandatory')
cmLoopHistID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistID.setStatus('mandatory')
cmLoopHistInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistInterface.setStatus('mandatory')
cmLoopHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noLoop", 1), ("scm-DSLModulePort", 2), ("scm-CR-Eth", 3), ("scm-CPE-BER", 5), ("scm-WAN-LocalDigital", 7), ("scm-WAN-LocalLine", 8), ("scm-WAN-RemoteLine", 9), ("scm-WAN-Generator", 10), ("scm-DSLModuleEOC", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistType.setStatus('mandatory')
cmLoopHistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("init", 2), ("start", 3), ("stop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistAction.setStatus('mandatory')
cmLoopHistDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistDuration.setStatus('mandatory')
cmLoopHistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("done", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistStatus.setStatus('mandatory')
cmLoopHistTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTimeElapsed.setStatus('mandatory')
cmLoopHistTermCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("inProgress", 1), ("dbSendError", 2), ("durationExpired", 3), ("operatorStopped", 4), ("noLCresponse", 5), ("noCPEresponse", 6), ("lcInitError", 7), ("cpeInitError", 8), ("cpeStartError", 9), ("lcSstartError", 10), ("cpeDisabled", 11), ("lcDisabled", 12), ("noLinkStateChange", 13), ("idle", 14), ("mioInitError", 15), ("mioDisabled", 16), ("noMIOResponse", 17), ("lcReportError", 18), ("berCountOverflow", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTermCode.setStatus('mandatory')
cmLoopHistTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTxCount.setStatus('mandatory')
cmLoopHistRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistRxErrors.setStatus('mandatory')
cmLoopHistOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistOwnerString.setStatus('mandatory')
cmLoopHistTestParameter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTestParameter1.setStatus('mandatory')
cmLoopHistErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("illegalTestParameter1", 2), ("modemIsNT", 3), ("modemUntrained", 4), ("eocAddr2Big", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistErrorInfo.setStatus('mandatory')
cmVBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1), )
if mibBuilder.loadTexts: cmVBridgeTable.setStatus('mandatory')
cmVBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmVBridgePII"))
if mibBuilder.loadTexts: cmVBridgeEntry.setStatus('mandatory')
cmVBridgePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgePII.setStatus('mandatory')
cmVBridgeNMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNMAC.setStatus('mandatory')
cmVBridgeNMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNMulticast.setStatus('mandatory')
cmVBridgeNUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNUnicast.setStatus('mandatory')
cmVBridgeNDSL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNDSL.setStatus('mandatory')
cmVBridgeNUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNUnknownDest.setStatus('mandatory')
cmVBridgeNOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNOverflow.setStatus('mandatory')
cmVBridgeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ipSpecial", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmVBridgeOption.setStatus('mandatory')
cmMACTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1), )
if mibBuilder.loadTexts: cmMACTable.setStatus('mandatory')
cmMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMACPII"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMACIndex"))
if mibBuilder.loadTexts: cmMACEntry.setStatus('mandatory')
cmMACPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACPII.setStatus('mandatory')
cmMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACIndex.setStatus('mandatory')
cmMACMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACMAC.setStatus('mandatory')
cmMACTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACTTL.setStatus('mandatory')
cmMACDslPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACDslPII.setStatus('mandatory')
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

cmAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1), )
if mibBuilder.loadTexts: cmAlarmTable.setStatus('mandatory')
cmAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmIndex"))
if mibBuilder.loadTexts: cmAlarmEntry.setStatus('mandatory')
cmAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmIndex.setStatus('mandatory')
cmAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmInterval.setStatus('mandatory')
cmAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmVariable.setStatus('mandatory')
cmAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("absoluteValue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmSampleType.setStatus('mandatory')
cmAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmValue.setStatus('mandatory')
cmAlarmStartupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("risingAlarm", 1), ("fallingAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmStartupAlarm.setStatus('mandatory')
cmAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmRisingThreshold.setStatus('mandatory')
cmAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmFallingThreshold.setStatus('mandatory')
cmAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 12), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmStatus.setStatus('mandatory')
cmAlarmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmSwitch.setStatus('mandatory')
cmAlarmSamplingInterval = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmSamplingInterval.setStatus('mandatory')
cmMaintCmdTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1), )
if mibBuilder.loadTexts: cmMaintCmdTable.setStatus('mandatory')
cmMaintCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMaintCmdCommand"))
if mibBuilder.loadTexts: cmMaintCmdEntry.setStatus('mandatory')
cmMaintCmdCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("statsAuto", 1), ("statsManual", 2), ("configBackup", 3), ("configRestore", 4), ("bulkCPEDownload", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdCommand.setStatus('mandatory')
cmMaintCmdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdRowStatus.setStatus('mandatory')
cmMaintCmdStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdStartTime.setStatus('mandatory')
cmMaintCmdRecurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdRecurrence.setStatus('mandatory')
cmMaintCmdReportingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdReportingPeriod.setStatus('mandatory')
cmMaintCmdPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdPrimaryIpAddr.setStatus('mandatory')
cmMaintCmdSecondaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdSecondaryIpAddr.setStatus('mandatory')
cmMaintCmdDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdDirectory.setStatus('mandatory')
cmMaintCmdBaseFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdBaseFileName.setStatus('mandatory')
cmMaintCmdUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdUserName.setStatus('mandatory')
cmMaintCmdPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdPassword.setStatus('mandatory')
cmMaintCmdPreviousTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdPreviousTime.setStatus('mandatory')
cmMaintCmdNextTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdNextTime.setStatus('mandatory')
cmMaintCmdCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("savedToPrimary", 2), ("savedToSecondary", 3), ("failed", 4), ("inProgress", 5), ("succeeded", 6), ("aborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdCommandStatus.setStatus('mandatory')
cmMaintCmdStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdStatusText.setStatus('mandatory')
cmMaintStatsDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintStatsDelimiter.setStatus('mandatory')
cmProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1), )
if mibBuilder.loadTexts: cmProxyArpTable.setStatus('mandatory')
cmProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmProxyArpPII"))
if mibBuilder.loadTexts: cmProxyArpEntry.setStatus('mandatory')
cmProxyArpPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmProxyArpPII.setStatus('mandatory')
cmProxyArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmProxyArpRowStatus.setStatus('mandatory')
cmTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1), )
if mibBuilder.loadTexts: cmTrunkIfTable.setStatus('mandatory')
cmTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkIfIndex"))
if mibBuilder.loadTexts: cmTrunkIfEntry.setStatus('mandatory')
cmTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfIndex.setStatus('mandatory')
cmTrunkIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfOperState.setStatus('mandatory')
cmTrunkIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrunkIfAdminState.setStatus('mandatory')
cmTrunkIfSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfSentPackets.setStatus('mandatory')
cmTrunkIfSentError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfSentError.setStatus('mandatory')
cmTrunkIfRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfRecvPackets.setStatus('mandatory')
cmTrunkIfRecvError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfRecvError.setStatus('mandatory')
cmTrunkConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2), )
if mibBuilder.loadTexts: cmTrunkConnectionTable.setStatus('mandatory')
cmTrunkConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkConnectionTrunkMaster"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkConnectionIndex"))
if mibBuilder.loadTexts: cmTrunkConnectionEntry.setStatus('mandatory')
cmTrunkConnectionTrunkMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionTrunkMaster.setStatus('mandatory')
cmTrunkConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionIndex.setStatus('mandatory')
cmTrunkConnectionOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionOperState.setStatus('mandatory')
cmTrunkConnectionLowPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionLowPII.setStatus('mandatory')
cmTrunkConnectionHighPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 5), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionHighPII.setStatus('mandatory')
cmTrunkTopoTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3), )
if mibBuilder.loadTexts: cmTrunkTopoTable.setStatus('mandatory')
cmTrunkTopoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkTopoSrc"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkTopoDest"))
if mibBuilder.loadTexts: cmTrunkTopoEntry.setStatus('mandatory')
cmTrunkTopoSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoSrc.setStatus('mandatory')
cmTrunkTopoDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 2), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoDest.setStatus('mandatory')
cmTrunkTopoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 3), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoInterface.setStatus('mandatory')
cmTrunkTopoNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoNextHop.setStatus('mandatory')
cmTrunkTopoHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoHops.setStatus('mandatory')
cmDHCPTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1), )
if mibBuilder.loadTexts: cmDHCPTable.setStatus('mandatory')
cmDHCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDHCPPII"))
if mibBuilder.loadTexts: cmDHCPEntry.setStatus('mandatory')
cmDHCPPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDHCPPII.setStatus('mandatory')
cmDHCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDHCPRowStatus.setStatus('mandatory')
cmDHCPIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDHCPIpAddress.setStatus('mandatory')
cmDHCPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDHCPNetMask.setStatus('mandatory')
cmServiceClassAweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassAweight.setStatus('mandatory')
cmServiceClassBweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassBweight.setStatus('mandatory')
cmServiceClassCweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassCweight.setStatus('mandatory')
cmServiceClassDweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassDweight.setStatus('mandatory')
cmEndPointPortTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1), )
if mibBuilder.loadTexts: cmEndPointPortTable.setStatus('mandatory')
cmEndPointPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortBasePII"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortNumber"))
if mibBuilder.loadTexts: cmEndPointPortEntry.setStatus('mandatory')
cmEndPointPortBasePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortBasePII.setStatus('mandatory')
cmEndPointPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortNumber.setStatus('mandatory')
cmEndPointPortEndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortEndPointID.setStatus('mandatory')
cmEndPointPortPartnerPortPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortPartnerPortPII.setStatus('mandatory')
cmEndPointPortPartnerBundlePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 5), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortPartnerBundlePII.setStatus('mandatory')
cmEndPointPortNumMatchingEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortNumMatchingEndPoint.setStatus('mandatory')
cmEndPointConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2), )
if mibBuilder.loadTexts: cmEndPointConfigTable.setStatus('mandatory')
cmEndPointConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointConfigPII"))
if mibBuilder.loadTexts: cmEndPointConfigEntry.setStatus('mandatory')
cmEndPointConfigPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigPII.setStatus('mandatory')
cmEndPointConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEndPointConfigRowStatus.setStatus('mandatory')
cmEndPointConfigBulkDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEndPointConfigBulkDownload.setStatus('mandatory')
cmEndPointConfigDownloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("pending", 2), ("inProgress", 3), ("failed", 4), ("completed", 5), ("notDownloadable", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigDownloadStatus.setStatus('mandatory')
cmEndPointConfigDownloadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigDownloadStartTime.setStatus('mandatory')
cmEndPointConfigDownloadEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigDownloadEndTime.setStatus('mandatory')
cmActiveSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1), )
if mibBuilder.loadTexts: cmActiveSessionTable.setStatus('mandatory')
cmActiveSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionSessionID"))
if mibBuilder.loadTexts: cmActiveSessionEntry.setStatus('mandatory')
cmActiveSessionSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionSessionID.setStatus('mandatory')
cmActiveSessionOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionOperatorName.setStatus('mandatory')
cmActiveSessionContext = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 32, 64))).clone(namedValues=NamedValues(("http", 1), ("snmp", 2), ("telnet", 4), ("serial", 8), ("ftp", 32), ("shell", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionContext.setStatus('mandatory')
cmActiveSessionPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("view", 1), ("monitor", 2), ("provision", 3), ("security", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionPrivilege.setStatus('mandatory')
cmActiveSessionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionIpAddress.setStatus('mandatory')
cmActiveSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionStartTime.setStatus('mandatory')
cmActiveSessionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionIdleTimeout.setStatus('mandatory')
cmRadiusAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthentication.setStatus('mandatory')
cmRadiusAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthKey.setStatus('mandatory')
cmRadiusAuthPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthPrimaryIpAddr.setStatus('mandatory')
cmRadiusAuthPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthPrimaryPort.setStatus('mandatory')
cmRadiusAuthSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthSecondaryIpAddr.setStatus('mandatory')
cmRadiusAuthSecondaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthSecondaryPort.setStatus('mandatory')
cmRadiusAuthTertiaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthTertiaryIpAddr.setStatus('mandatory')
cmRadiusAuthTertiaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthTertiaryPort.setStatus('mandatory')
cmRadiusAcctPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctPrimaryIpAddr.setStatus('mandatory')
cmRadiusAcctPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctPrimaryPort.setStatus('mandatory')
cmRadiusAcctSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctSecondaryIpAddr.setStatus('mandatory')
cmRadiusAcctSecondaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctSecondaryPort.setStatus('mandatory')
cmRadiusAcctTertiaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctTertiaryIpAddr.setStatus('mandatory')
cmRadiusAcctTertiaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctTertiaryPort.setStatus('mandatory')
cmSNMPResponseString = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 24, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSNMPResponseString.setStatus('mandatory')
cmLoginError = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,1)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmLoginOK = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,2)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmLogout = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,3)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmLoginsSaturated = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,4)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmLoginsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,5)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmBoardUp = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,6)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmBoardDown = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,7)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmLoginsSuspended = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,8)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmLoginsAllowed = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,9)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmBootFileError = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,10)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardFileName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmBootFileOK = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,11)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardFileName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmAttributeChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,12)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmConfigFileReadFailed = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,13)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmConfigFileReadOk = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,14)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmConfigFileWriteFailed = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,15)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmConfigFileWriteOk = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,16)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmOperStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,17)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmStateOperState"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmDiagnostic = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,18)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmBoardRestart = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,19)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,20)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmFanFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,21)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,22)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmPowerSupplyFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,23)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmLoopStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,24)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopStatus"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopID"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopInterface"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopOwnerString"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopTermCode"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopTimeElapsed"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopTxCount"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopRxErrors"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,25)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmVariable"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmSampleType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmValue"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmRisingThreshold"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmIDSLBoardTimingLoss = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,26)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardTimingMode"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmIDSLBoardTimingLossClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,27)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardTimingMode"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,28)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmSysPrimaryPII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmRedundancyChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,29)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmSysRedundancy"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmRedundancyConflict = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,30)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmMaintCmdStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,31)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMaintCmdCommand"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMaintCmdCommandStatus"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmFallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,32)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmVariable"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmSampleType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmValue"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmFallingThreshold"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmRateFallback = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,33)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemCurrentRate"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmRateFallbackClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,34)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemCurrentRate"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
cmEndPointConflictAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,35)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortBasePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortEndPointID"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortPartnerBundlePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
mibBuilder.exportSymbols("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", cmSystem=cmSystem, cmAlarm=cmAlarm, cmCpeHDSLModemEntry=cmCpeHDSLModemEntry, cmCpeBoardCommand=cmCpeBoardCommand, cmEndPointConfigRowStatus=cmEndPointConfigRowStatus, cmDSLCurrentRxValidFrames=cmDSLCurrentRxValidFrames, cmSubIfaceRowStatus=cmSubIfaceRowStatus, cmTrapTypeLogTable=cmTrapTypeLogTable, cmBundleEntry=cmBundleEntry, cmEndPointConflictAlarm=cmEndPointConflictAlarm, cmTrunkConnectionLowPII=cmTrunkConnectionLowPII, cmDSL=cmDSL, PerfTotalCount=PerfTotalCount, cmTrapTypeLogEntry=cmTrapTypeLogEntry, cmTrapReceiverCommunity=cmTrapReceiverCommunity, cmSDSLTestIndex=cmSDSLTestIndex, cmCpeEthernetTxNotReady=cmCpeEthernetTxNotReady, cmCpeDataPortIntervalRxOctets=cmCpeDataPortIntervalRxOctets, cmProxyArpEntry=cmProxyArpEntry, cmIfaceServiceClass=cmIfaceServiceClass, cmProxyArpPII=cmProxyArpPII, cmBoardUpTime=cmBoardUpTime, cmCpeBoardOperState=cmCpeBoardOperState, cmBundleMember1PII=cmBundleMember1PII, cmDSLCurrentRxAlignmentErrors=cmDSLCurrentRxAlignmentErrors, cmAlarmSamplingInterval=cmAlarmSamplingInterval, cmCpeDataPortTotalRxOctets=cmCpeDataPortTotalRxOctets, cmIfaceIpAddr=cmIfaceIpAddr, cmFrDlcmiLMITxStatusEnquiries=cmFrDlcmiLMITxStatusEnquiries, cmDSLIntervalRxAborts=cmDSLIntervalRxAborts, cmCpeDataPortTotalTxOctets=cmCpeDataPortTotalTxOctets, cmConfigFileWriteFailed=cmConfigFileWriteFailed, cmFrDlcmiLMIRxStatusResponses=cmFrDlcmiLMIRxStatusResponses, cmCpeDSLIntervalTable=cmCpeDSLIntervalTable, cmCpeBoardObjectClass=cmCpeBoardObjectClass, cmFrameRelay=cmFrameRelay, cmBundleMember2EndPointID=cmBundleMember2EndPointID, cmCpeBoardTable=cmCpeBoardTable, cmCpeDataPortTotalRxDiscards=cmCpeDataPortTotalRxDiscards, cmCpeDSLIntervalRxAlignmentErrors=cmCpeDSLIntervalRxAlignmentErrors, cmCpeBoardManagementOptions=cmCpeBoardManagementOptions, cmTrunkTopoEntry=cmTrunkTopoEntry, cmFileBootDevice=cmFileBootDevice, cmCpeDataPortForceDSR=cmCpeDataPortForceDSR, cmShelfIndex=cmShelfIndex, cmSDSLTestNearEndLoopProfile=cmSDSLTestNearEndLoopProfile, cmActiveSessionOperatorName=cmActiveSessionOperatorName, cmTrunkConnectionOperState=cmTrunkConnectionOperState, cmEndPointPortPartnerPortPII=cmEndPointPortPartnerPortPII, cmBundleRowStatus=cmBundleRowStatus, cmDSLCurrentRxCRCErrors=cmDSLCurrentRxCRCErrors, cmFilterDstPortCompare=cmFilterDstPortCompare, cmCpeEthernetIntervalEntry=cmCpeEthernetIntervalEntry, cmBoardTable=cmBoardTable, cmCpeHDSLModemTxGain=cmCpeHDSLModemTxGain, cmCpeDataPortTxClockSource=cmCpeDataPortTxClockSource, cmDSLYesterdaysTxValidOctets=cmDSLYesterdaysTxValidOctets, cmEndPointConfigPII=cmEndPointConfigPII, cmCpeEthernetRxExtraData=cmCpeEthernetRxExtraData, cmCpeEthernetRxOK=cmCpeEthernetRxOK, cmIfaceFwdMode=cmIfaceFwdMode, cmServiceClassBweight=cmServiceClassBweight, cmTrunkConnectionEntry=cmTrunkConnectionEntry, cmDSLCurrentTable=cmDSLCurrentTable, cmDSLIntervalRxBig=cmDSLIntervalRxBig, cmRadiusAuthTertiaryPort=cmRadiusAuthTertiaryPort, cmCpeEthernetRxNoBufs=cmCpeEthernetRxNoBufs, cmBoardHwType=cmBoardHwType, cmV35OperState=cmV35OperState, cmProxyArpTable=cmProxyArpTable, cmIfaceEntry=cmIfaceEntry, cmV35CRC=cmV35CRC, cmVBridgeTable=cmVBridgeTable, cmRadiusAuthentication=cmRadiusAuthentication, cmFilterSrcAdrs=cmFilterSrcAdrs, cmMultiShelf=cmMultiShelf, cmBoardClusterRole=cmBoardClusterRole, cmFrDlcmiAdminState=cmFrDlcmiAdminState, cmStateTable=cmStateTable, cmNameEntry=cmNameEntry, cmShelfUpTime=cmShelfUpTime, cmConfigFileReadOk=cmConfigFileReadOk, cmDSL24HrPortUpTime=cmDSL24HrPortUpTime, cmHDSLModemCpeResponses=cmHDSLModemCpeResponses, cmMaintCmdRowStatus=cmMaintCmdRowStatus, cmCpeEthernetTxJabber=cmCpeEthernetTxJabber, cmCpeDSLIntervalRxTruncated=cmCpeDSLIntervalRxTruncated, cmStateOperState=cmStateOperState, cmCpeEthernetTxOK=cmCpeEthernetTxOK, cmV35=cmV35, cmSDSLTestAction=cmSDSLTestAction, cmVBridgeNMAC=cmVBridgeNMAC, cmMemberEntry=cmMemberEntry, cmBundleMember3EndPointID=cmBundleMember3EndPointID, cmHDSLPerfIndex=cmHDSLPerfIndex, cmBoardFileDate=cmBoardFileDate, cmDSLIntervalTable=cmDSLIntervalTable, cmDSLIntervalTxValidOctets=cmDSLIntervalTxValidOctets, cmActiveSessionStartTime=cmActiveSessionStartTime, cmBundleMember4EndPointID=cmBundleMember4EndPointID, cmLoginsSuspended=cmLoginsSuspended, cmBoard=cmBoard, cmPowerSupplyFailure=cmPowerSupplyFailure, cmHDSLModemTable=cmHDSLModemTable, cmHDSLPerfTxUnderruns=cmHDSLPerfTxUnderruns, cmDSLIntervalRxNoBuffers=cmDSLIntervalRxNoBuffers, cmLoopErrorInfo=cmLoopErrorInfo, cmDHCPIpAddress=cmDHCPIpAddress, cmTrapEventLogSeqNum=cmTrapEventLogSeqNum, cmLogout=cmLogout, cmLoopStatus=cmLoopStatus, cmBoardDown=cmBoardDown, cmBootFileError=cmBootFileError, cmCpeEthernetTxOutOfWindow=cmCpeEthernetTxOutOfWindow, cmDataPort=cmDataPort, cmEndPointPortTable=cmEndPointPortTable, cmHSSIEntry=cmHSSIEntry, cmCpeHDSLModemType=cmCpeHDSLModemType, cmDSLCurrentRxValidOctets=cmDSLCurrentRxValidOctets, cmFileFSUsername=cmFileFSUsername, cmCpeBoardConfigChange=cmCpeBoardConfigChange, cmFilterDstPort=cmFilterDstPort, cmMaintCmdPassword=cmMaintCmdPassword, cmIDSLModemSuccessfulTrains=cmIDSLModemSuccessfulTrains, cmFrCircuitEntry=cmFrCircuitEntry, cmBoardRole=cmBoardRole, cmIDSLModemTerminationMode=cmIDSLModemTerminationMode, cmCpeDataPortTM=cmCpeDataPortTM, cmAlarmStartupAlarm=cmAlarmStartupAlarm, cmTrapDestinationTable=cmTrapDestinationTable, cmTrunkIfOperState=cmTrunkIfOperState, cmActiveSessionTable=cmActiveSessionTable, cmAtmVclAalType=cmAtmVclAalType, cmCpeDataPortDSR=cmCpeDataPortDSR, cmHDSLModemBPSwMinorVersion=cmHDSLModemBPSwMinorVersion, cmCE200=cmCE200, cmFrDlcmiLMIRxUpdates=cmFrDlcmiLMIRxUpdates, cmHDSLModemCurrentRate=cmHDSLModemCurrentRate, cmCpeDataPortTotalEntry=cmCpeDataPortTotalEntry, cmHDSLPerfRxTruncated=cmHDSLPerfRxTruncated, cmLoopHistTermCode=cmLoopHistTermCode, cmDSL24HrRxTruncated=cmDSL24HrRxTruncated, cmMaintCmdUserName=cmMaintCmdUserName, cmAtmVclAal5CpcsReceiveSduSize=cmAtmVclAal5CpcsReceiveSduSize, cmBundleMember4Status=cmBundleMember4Status, cmHSSIClockRate=cmHSSIClockRate, cmSysMaster=cmSysMaster, cmCpeBoardIndex=cmCpeBoardIndex, cmCpeHDSLModemBPSwMinorVersion=cmCpeHDSLModemBPSwMinorVersion, cmDS3AtmCellMapping=cmDS3AtmCellMapping, cmIfaceIfIndex=cmIfaceIfIndex, cmShelfOperability=cmShelfOperability, cmSysOperState=cmSysOperState, cmTrapAlarmLogText=cmTrapAlarmLogText, cmSysShelfCount=cmSysShelfCount, cmTrunkIfAdminState=cmTrunkIfAdminState, cmDSL24HrRxAborts=cmDSL24HrRxAborts, cmState=cmState, cmAtmVclEntry=cmAtmVclEntry, cmDSLTodaysRxBig=cmDSLTodaysRxBig, cmDSL24HrRxBig=cmDSL24HrRxBig, cmFrDlcmiDceT392=cmFrDlcmiDceT392, cmTrapMinorAlarmCount=cmTrapMinorAlarmCount, cmCpeHDSLModemBPSwMajorVersion=cmCpeHDSLModemBPSwMajorVersion, cmHSSISync=cmHSSISync, cmHDSLPerfRxCRCErrors=cmHDSLPerfRxCRCErrors, cmTrapReceiverPort=cmTrapReceiverPort, cmFallingAlarm=cmFallingAlarm, cmAtmVclVpi=cmAtmVclVpi, cmVBridgeNMulticast=cmVBridgeNMulticast, cmLoopTermCode=cmLoopTermCode, cmRateFallbackClear=cmRateFallbackClear, cmMemberGrpName=cmMemberGrpName, cmDSLYesterdaysTxUnderruns=cmDSLYesterdaysTxUnderruns, cmDS3AtmEntry=cmDS3AtmEntry, cmSysVersion=cmSysVersion, cmCpeEthernetIndex=cmCpeEthernetIndex, cmDSLCurrentPortUpTime=cmDSLCurrentPortUpTime, cmDSLTodaysTxValidOctets=cmDSLTodaysTxValidOctets, cmTrapEventLogProbableCause=cmTrapEventLogProbableCause, cmFrDlcmiRcvUnknownDLCI=cmFrDlcmiRcvUnknownDLCI, cmCpeIDSLModemOperState=cmCpeIDSLModemOperState, cmBoardNumPorts=cmBoardNumPorts, cmEndPointPortEndPointID=cmEndPointPortEndPointID, cmV35AdminState=cmV35AdminState, cmTrunkConnectionIndex=cmTrunkConnectionIndex, cmHDSLPerfIntervalTable=cmHDSLPerfIntervalTable, cmHSSIAdminState=cmHSSIAdminState, cmTrapDestinationPort=cmTrapDestinationPort, cmAtmVclRowStatus=cmAtmVclRowStatus, cmNameIfName=cmNameIfName, cmTrunkConnectionTrunkMaster=cmTrunkConnectionTrunkMaster, cmCpeBoard=cmCpeBoard, cmDSLYesterdaysTable=cmDSLYesterdaysTable, cmIDSLBoardTimingAvailable=cmIDSLBoardTimingAvailable, cmTrapReceiverRowStatus=cmTrapReceiverRowStatus, cmDSL24HrTxUnderruns=cmDSL24HrTxUnderruns, cmLoopOwnerString=cmLoopOwnerString, cmShelfTable=cmShelfTable, cmLoopHistTable=cmLoopHistTable, cmLoopHistDuration=cmLoopHistDuration, cmIfaceMacAddr=cmIfaceMacAddr, cmTrapTypeLogClassId=cmTrapTypeLogClassId, cmCpeDSLIntervalTxUnderruns=cmCpeDSLIntervalTxUnderruns, cmDSLTodaysTable=cmDSLTodaysTable, cmEndPointPortEntry=cmEndPointPortEntry, cmMaintCmdNextTime=cmMaintCmdNextTime, cmLoopTxCount=cmLoopTxCount, cmCpeEthernetRxDribbleBits=cmCpeEthernetRxDribbleBits, cmSDSLTestTestCompleteTime=cmSDSLTestTestCompleteTime, EntryStatus=EntryStatus, cmIDSLBoardTimingMode=cmIDSLBoardTimingMode, cmSubIfaceDestPII=cmSubIfaceDestPII, cmTrapReceiverEntry=cmTrapReceiverEntry, cmCpeIDSLModemIndex=cmCpeIDSLModemIndex, cmMACPII=cmMACPII, cmAlarmEntry=cmAlarmEntry, cmCpeDataPortTotalRxFrames=cmCpeDataPortTotalRxFrames, cmEndPointConfigBulkDownload=cmEndPointConfigBulkDownload, cmRedundancyChange=cmRedundancyChange, cmMaintCmdEntry=cmMaintCmdEntry, cmTrunkIfTable=cmTrunkIfTable, cmMaintCmdPreviousTime=cmMaintCmdPreviousTime, cmCpeBoardUpTime=cmCpeBoardUpTime, cmCpeDataPortType=cmCpeDataPortType, cmNameTable=cmNameTable, cmBundleMember2PII=cmBundleMember2PII, cmHSSIDCEReady=cmHSSIDCEReady, cmSNMP=cmSNMP, cmDSLTodaysPortUpTime=cmDSLTodaysPortUpTime, cmMAC=cmMAC, cmBoardSwVersion=cmBoardSwVersion, cmSubIfacePriority=cmSubIfacePriority, cmDS3AtmTable=cmDS3AtmTable, cmShelfEntry=cmShelfEntry, cmCpeDataPortTotalTable=cmCpeDataPortTotalTable, cmHSSIDTEReady=cmHSSIDTEReady, cmCpeHDSLModemIndex=cmCpeHDSLModemIndex, cmShelf=cmShelf, cmMaintCmdCommandStatus=cmMaintCmdCommandStatus, cmOperator=cmOperator, cmMaintCmdStatusChange=cmMaintCmdStatusChange, cmFilterDstMask=cmFilterDstMask, cmCpeBoardFileName=cmCpeBoardFileName, cmSysObjectClass=cmSysObjectClass, cmIDSLBoardTable=cmIDSLBoardTable, cmCpeDataPortIntervalIndex=cmCpeDataPortIntervalIndex, cmIDSLBoardEntry=cmIDSLBoardEntry, cmTrapAlarmLogSeqNum=cmTrapAlarmLogSeqNum, cmEndPointConfigTable=cmEndPointConfigTable, cmMaint=cmMaint, cmRadiusAuthTertiaryIpAddr=cmRadiusAuthTertiaryIpAddr, cmTrapEventLogType=cmTrapEventLogType, cmAlarmVariable=cmAlarmVariable)
mibBuilder.exportSymbols("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", cmLoginsAllowed=cmLoginsAllowed, cmTrunkTopoTable=cmTrunkTopoTable, cmCpeDataPortTotalTxErrors=cmCpeDataPortTotalTxErrors, cmSysMyPII=cmSysMyPII, cmLoopHistStatus=cmLoopHistStatus, cmMaintCmdStatusText=cmMaintCmdStatusText, cmFilterEntry=cmFilterEntry, cmEndPointPortNumMatchingEndPoint=cmEndPointPortNumMatchingEndPoint, cmVBridgeNDSL=cmVBridgeNDSL, cmIfaceFarEndAddr=cmIfaceFarEndAddr, cmDSLIntervalPortUpTime=cmDSLIntervalPortUpTime, cmFrCircuitFramesDroppedTxUnavail=cmFrCircuitFramesDroppedTxUnavail, cmCpeHDSLModemNoiseMargin=cmCpeHDSLModemNoiseMargin, cmBundleMember2Status=cmBundleMember2Status, cmMemberTable=cmMemberTable, cmCpeDataPortOperState=cmCpeDataPortOperState, cmLoopHistAction=cmLoopHistAction, cmDSLTodaysRxValidFrames=cmDSLTodaysRxValidFrames, cmTrapEventLogClassId=cmTrapEventLogClassId, cmIface=cmIface, cmFrDlcmiDceN393=cmFrDlcmiDceN393, cmCpeDataPortIntervalRxDiscards=cmCpeDataPortIntervalRxDiscards, cmHDSLModemFailedTrainingAttempts=cmHDSLModemFailedTrainingAttempts, cmCpeDataPortTerminalTiming=cmCpeDataPortTerminalTiming, cmMACTable=cmMACTable, cmTrapWarningCount=cmTrapWarningCount, cmIDSLModemFailedTrainingAttempts=cmIDSLModemFailedTrainingAttempts, cmShelfMaster=cmShelfMaster, cmV35Sync=cmV35Sync, cmCpeHDSLModemDataRate=cmCpeHDSLModemDataRate, cmTrapEventLogTimeTag=cmTrapEventLogTimeTag, cmTrapAlarmLogProbableCause=cmTrapAlarmLogProbableCause, cmMACDslPII=cmMACDslPII, coppermountain=coppermountain, cmRadiusAcctTertiaryIpAddr=cmRadiusAcctTertiaryIpAddr, cmIDSLModemCpeResponses=cmIDSLModemCpeResponses, cmTrapDestinationEntry=cmTrapDestinationEntry, cmFilterDstAdrs=cmFilterDstAdrs, cmFrDlcmiLMIMode=cmFrDlcmiLMIMode, cmVBridgePII=cmVBridgePII, cmMACIndex=cmMACIndex, cmCpeBoardGroupMap=cmCpeBoardGroupMap, cmSysExpIpSubNet=cmSysExpIpSubNet, cmCpeDataPortIntervalTxOctets=cmCpeDataPortIntervalTxOctets, cmSubIfacePII=cmSubIfacePII, cmFilterIndex=cmFilterIndex, cmLoopHistEntry=cmLoopHistEntry, cmFrDlcmiLMITxStatusResponses=cmFrDlcmiLMITxStatusResponses, cmDSLYesterdaysRxNoBuffers=cmDSLYesterdaysRxNoBuffers, cmDSLIntervalRxValidOctets=cmDSLIntervalRxValidOctets, cmCpeDataPortIntervalTxDiscards=cmCpeDataPortIntervalTxDiscards, cmDSLCurrentRxTruncated=cmDSLCurrentRxTruncated, cmAlarmValue=cmAlarmValue, cmAlarmRisingThreshold=cmAlarmRisingThreshold, cmCpeIDSLModemState=cmCpeIDSLModemState, cmHDSLModemMinRate=cmHDSLModemMinRate, cmCpeEthernetIntervalNumber=cmCpeEthernetIntervalNumber, cmCpeEthernetRxRunt=cmCpeEthernetRxRunt, cmCpeDSLIntervalNumber=cmCpeDSLIntervalNumber, cmBoardSerialNumber=cmBoardSerialNumber, cmDSLIntervalRxAlignmentErrors=cmDSLIntervalRxAlignmentErrors, cmCpeIDSLModemTerminationMode=cmCpeIDSLModemTerminationMode, cmHSSICRC=cmHSSICRC, cmIDSLBoardTimingStatus=cmIDSLBoardTimingStatus, cmTrapEventLogTable=cmTrapEventLogTable, cmFrDlcmiIfIndex=cmFrDlcmiIfIndex, cmFilterAction=cmFilterAction, cmFrDlcmiUnknownLMIMessagesRcvd=cmFrDlcmiUnknownLMIMessagesRcvd, cmFile=cmFile, cmDSLCurrentIndex=cmDSLCurrentIndex, cmFileFSPassword=cmFileFSPassword, cmDSLTodaysTxUnderruns=cmDSLTodaysTxUnderruns, cmDSLTodaysRxAborts=cmDSLTodaysRxAborts, cmBundleMember4PII=cmBundleMember4PII, cmProxyArpRowStatus=cmProxyArpRowStatus, cmDSLIntervalEntry=cmDSLIntervalEntry, cmHSSILoopback=cmHSSILoopback, cmDSLIntervalTimeTagBegin=cmDSLIntervalTimeTagBegin, cmDSLYesterdaysRxBig=cmDSLYesterdaysRxBig, cmDSLTodaysEntry=cmDSLTodaysEntry, cmCpeDataPortIntervalIntervalNumber=cmCpeDataPortIntervalIntervalNumber, cmDSL24HrRxValidOctets=cmDSL24HrRxValidOctets, cmEthernet=cmEthernet, cmIDSLModemIndex=cmIDSLModemIndex, cmIDSLBoardIndex=cmIDSLBoardIndex, cmCpeDataPortTable=cmCpeDataPortTable, cmRadiusAcctSecondaryPort=cmRadiusAcctSecondaryPort, cmSNMPResponseString=cmSNMPResponseString, cmCpeBoardHwType=cmCpeBoardHwType, cmLoopHistRxErrors=cmLoopHistRxErrors, cmGroupTable=cmGroupTable, cmCpeDataPortAdminState=cmCpeDataPortAdminState, cmDSLCurrentRxNoBuffers=cmDSLCurrentRxNoBuffers, cmCpeDataPortIntervalTable=cmCpeDataPortIntervalTable, cmActiveSessionIdleTimeout=cmActiveSessionIdleTimeout, cmTrunkTopoDest=cmTrunkTopoDest, cmRadiusAuthKey=cmRadiusAuthKey, cmSysTrapAddress=cmSysTrapAddress, cmFilterFunction=cmFilterFunction, cmHDSLModemNoiseMargin=cmHDSLModemNoiseMargin, cmDSLIntervalNumber=cmDSLIntervalNumber, cmMaintCmdReportingPeriod=cmMaintCmdReportingPeriod, cmDHCPPII=cmDHCPPII, cmDSLTodaysRxNoBuffers=cmDSLTodaysRxNoBuffers, cmHDSLModemTxGain=cmHDSLModemTxGain, cmCpeHDSLModemTable=cmCpeHDSLModemTable, cmCpeEthernetIntervalTable=cmCpeEthernetIntervalTable, cmMaintCmdSecondaryIpAddr=cmMaintCmdSecondaryIpAddr, cmLoginsSaturated=cmLoginsSaturated, cmLoginError=cmLoginError, cmDSLCurrentRxOverruns=cmDSLCurrentRxOverruns, cmV35RTS=cmV35RTS, cmIDSLBoardTimingLoss=cmIDSLBoardTimingLoss, cmIfaceAdditionalInfo=cmIfaceAdditionalInfo, cmCpeBoardSwVersion=cmCpeBoardSwVersion, cmConfigFileWriteOk=cmConfigFileWriteOk, cmHDSLPerfRxAlignmentErrors=cmHDSLPerfRxAlignmentErrors, cmFilterFilterNumber=cmFilterFilterNumber, cmCpeBoardEntry=cmCpeBoardEntry, cmBundleMember3Status=cmBundleMember3Status, cmHSSIIfIndex=cmHSSIIfIndex, cmCE120Platform=cmCE120Platform, cmIDSLModemState=cmIDSLModemState, cmCpeDSLIntervalRxCRCErrors=cmCpeDSLIntervalRxCRCErrors, cmHDSLPerfIntervalNumber=cmHDSLPerfIntervalNumber, cmHSSI=cmHSSI, cmFilterIpProtocol=cmFilterIpProtocol, cmMACEntry=cmMACEntry, cmHDSLPerfRxOverruns=cmHDSLPerfRxOverruns, cmMaintCmdTable=cmMaintCmdTable, cmRedundancyConflict=cmRedundancyConflict, cmSubIfaceName=cmSubIfaceName, cmTrunkIfSentError=cmTrunkIfSentError, cmBoardObjectClass=cmBoardObjectClass, cmIfaceCMCPCompatible=cmIfaceCMCPCompatible, cmDSL24HrTxValidFrames=cmDSL24HrTxValidFrames, cmBoardInformation=cmBoardInformation, cmDSLYesterdaysIndex=cmDSLYesterdaysIndex, cmBoardRestart=cmBoardRestart, cmV35CTS=cmV35CTS, cmTrapTypeLogObjectClass=cmTrapTypeLogObjectClass, cmDS3AtmCellPayloadScrambling=cmDS3AtmCellPayloadScrambling, cmTrapMajorAlarmCount=cmTrapMajorAlarmCount, cmCpeBoardFileDate=cmCpeBoardFileDate, cmDSLYesterdaysPortUpTime=cmDSLYesterdaysPortUpTime, cmAlarmStatus=cmAlarmStatus, cmActiveSessionContext=cmActiveSessionContext, cmTrapEventLogObjectClass=cmTrapEventLogObjectClass, cmEndPointConfigEntry=cmEndPointConfigEntry, cmFileFSDir=cmFileFSDir, cmAtmVclVci=cmAtmVclVci, cmBundleMember3PII=cmBundleMember3PII, cmTrapTypeLogSeverity=cmTrapTypeLogSeverity, cmFrDlcmiFirstDLCI=cmFrDlcmiFirstDLCI, cmTrapReceiverTable=cmTrapReceiverTable, cmTrunkIfIndex=cmTrunkIfIndex, cmActiveSessionPrivilege=cmActiveSessionPrivilege, cmFrCircuitOperState=cmFrCircuitOperState, cmFrCircuitIfIndex=cmFrCircuitIfIndex, cmDSLTodaysTxValidFrames=cmDSLTodaysTxValidFrames, cmMaintStatsDelimiter=cmMaintStatsDelimiter, cmHDSLPerfRxNoBuffers=cmHDSLPerfRxNoBuffers, cmCpeDataPortCTS=cmCpeDataPortCTS, cmBoardConfigChange=cmBoardConfigChange, cmLoopHistTxCount=cmLoopHistTxCount, cmRadiusAcctTertiaryPort=cmRadiusAcctTertiaryPort, cmDSLTodaysRxOverruns=cmDSLTodaysRxOverruns, cmV35DSR=cmV35DSR, cmFileFLASHDir=cmFileFLASHDir, cmProxyArp=cmProxyArp, cmTrapAlarmLogObjectClass=cmTrapAlarmLogObjectClass, cmCpeDataPortTotalTxFrames=cmCpeDataPortTotalTxFrames, cmMaintCmdBaseFileName=cmMaintCmdBaseFileName, cmMaintCmdDirectory=cmMaintCmdDirectory, cmLoopHistType=cmLoopHistType, cmIfaceNetMask=cmIfaceNetMask, cmIfaceEncapsulationType=cmIfaceEncapsulationType, cmIDSLModemEntry=cmIDSLModemEntry, cmDSLTodaysMinNoiseMargin=cmDSLTodaysMinNoiseMargin, cmDSLYesterdaysRxValidOctets=cmDSLYesterdaysRxValidOctets, cmTrunkTopoInterface=cmTrunkTopoInterface, cmFrDlcmiLostLMISequences=cmFrDlcmiLostLMISequences, cmMaintCmdStartTime=cmMaintCmdStartTime, cmCpeEthernetTxLossCRS=cmCpeEthernetTxLossCRS, cmCpeDataPortDTEDCE=cmCpeDataPortDTEDCE, cmBoardHwVersion=cmBoardHwVersion, cmLoopType=cmLoopType, cmDSLIntervalRxCRCErrors=cmDSLIntervalRxCRCErrors, cmDHCPEntry=cmDHCPEntry, cmBundlePII=cmBundlePII, cmLoopTestParameter1=cmLoopTestParameter1, cmFanFailureClear=cmFanFailureClear, cmCpeDSLIntervalRxOverruns=cmCpeDSLIntervalRxOverruns, cmCpeEthernetTxTooBig=cmCpeEthernetTxTooBig, cmSysCommandStatus=cmSysCommandStatus, cmMemberRowStatus=cmMemberRowStatus, cmEvent=cmEvent, cmIDSLModemCpeCode=cmIDSLModemCpeCode, cmV35Index=cmV35Index, cmIfaceDestPII=cmIfaceDestPII, cmDSL24HrMinNoiseMargin=cmDSL24HrMinNoiseMargin, cmFrCircuitFramesDroppedRxUnavail=cmFrCircuitFramesDroppedRxUnavail, cmDSLCurrentTxValidOctets=cmDSLCurrentTxValidOctets, cmCpeDSLIntervalIndex=cmCpeDSLIntervalIndex, cmCpeBoardHwVersion=cmCpeBoardHwVersion, cmHDSLPerfRxBig=cmHDSLPerfRxBig, cmDSL24HrIndex=cmDSL24HrIndex, cmSDSLTestDebugResult=cmSDSLTestDebugResult, cmBoardFileName=cmBoardFileName, cmFrDlcmiOperState=cmFrDlcmiOperState, cmVBridge=cmVBridge, cmFileFSAddr=cmFileFSAddr, cmLoopTimeElapsed=cmLoopTimeElapsed, cmPowerSupplyFailureClear=cmPowerSupplyFailureClear, cmSDSLTestType=cmSDSLTestType, cmDiagnostic=cmDiagnostic, cmAlarmSampleType=cmAlarmSampleType, cmDSLTodaysRxAlignmentErrors=cmDSLTodaysRxAlignmentErrors, cmEndPointPortNumber=cmEndPointPortNumber, cmSysSecondaryPII=cmSysSecondaryPII, cmFrCircuitTable=cmFrCircuitTable, cmLoginOK=cmLoginOK, cmGroupEntry=cmGroupEntry, cmTrapAlarmLogTimeTag=cmTrapAlarmLogTimeTag, cmDSLCurrentEntry=cmDSLCurrentEntry, cmRadiusAuthPrimaryPort=cmRadiusAuthPrimaryPort, cmCpeDSLIntervalRxNoBuffers=cmCpeDSLIntervalRxNoBuffers, cmHSSITestmode=cmHSSITestmode, cmCpeEthernetIntUnknowns=cmCpeEthernetIntUnknowns, cmFilterSrcMask=cmFilterSrcMask, cmV35IfIndex=cmV35IfIndex, cmHSSIOperState=cmHSSIOperState, cmLoopHistID=cmLoopHistID, cmCpeDataPortLoopbackStatus=cmCpeDataPortLoopbackStatus, cmSDSLTestMaxRate=cmSDSLTestMaxRate, cmDSL24HrEntry=cmDSL24HrEntry, cmBootFileOK=cmBootFileOK, cmRateFallback=cmRateFallback, cmIDSL=cmIDSL, cmFrDlcmiTable=cmFrDlcmiTable, cmCpeBoardNumPorts=cmCpeBoardNumPorts, cmAtmVclLastChange=cmAtmVclLastChange, cmStateObjClass=cmStateObjClass, cmBundleMember1Status=cmBundleMember1Status, cmServiceClassAweight=cmServiceClassAweight, cmCpeHDSLModemBPHwVersion=cmCpeHDSLModemBPHwVersion, cmDHCPTable=cmDHCPTable, cmDSLIntervalMinNoiseMargin=cmDSLIntervalMinNoiseMargin, cmRadiusAuthSecondaryPort=cmRadiusAuthSecondaryPort, cmAtmVclPII=cmAtmVclPII, cmHDSLModemType=cmHDSLModemType, cmIfaceNetModel=cmIfaceNetModel, cmShelfObjectClass=cmShelfObjectClass, cmGroupRowStatus=cmGroupRowStatus)
mibBuilder.exportSymbols("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", cmDHCP=cmDHCP, cmTrunkIfRecvPackets=cmTrunkIfRecvPackets, cmTrapReceiverIPAddr=cmTrapReceiverIPAddr, cmTransmission=cmTransmission, cmTrapTypeLogProbableCause=cmTrapTypeLogProbableCause, cmLoopInterface=cmLoopInterface, cmCpeEthernetRxSkip=cmCpeEthernetRxSkip, cmCpeDataPortTotalTxDiscards=cmCpeDataPortTotalTxDiscards, cmV35ClockRate=cmV35ClockRate, cmCpeBoardSerialNumber=cmCpeBoardSerialNumber, cmDSLYesterdaysRxTruncated=cmDSLYesterdaysRxTruncated, cmIDSLModemTable=cmIDSLModemTable, cmMemberPII=cmMemberPII, cmDSLIntervalRxTruncated=cmDSLIntervalRxTruncated, cmSysConfigSynch=cmSysConfigSynch, cmTrapDestinationRowStatus=cmTrapDestinationRowStatus, cmTrunkIfSentPackets=cmTrunkIfSentPackets, cmRadius=cmRadius, cmDSLYesterdaysRxValidFrames=cmDSLYesterdaysRxValidFrames, cmCpeEthernetRxAlignError=cmCpeEthernetRxAlignError, cmAtmVclAal5CpcsTransmitSduSize=cmAtmVclAal5CpcsTransmitSduSize, cmBundleMember1EndPointID=cmBundleMember1EndPointID, cmServiceClassDweight=cmServiceClassDweight, cmDSLCurrentRxAborts=cmDSLCurrentRxAborts, cmSDSLTestContinuityTestResult=cmSDSLTestContinuityTestResult, cmVBridgeNUnicast=cmVBridgeNUnicast, cmLoopHistOwnerString=cmLoopHistOwnerString, cmDSLIntervalIndex=cmDSLIntervalIndex, cmEndPoint=cmEndPoint, cmAlarmFallingThreshold=cmAlarmFallingThreshold, cmGroupName=cmGroupName, cmHDSLModemBPSwMajorVersion=cmHDSLModemBPSwMajorVersion, cmIMUX=cmIMUX, cmDSLIntervalTxValidFrames=cmDSLIntervalTxValidFrames, cmBoardOperState=cmBoardOperState, cmLoopHistErrorInfo=cmLoopHistErrorInfo, cmLoopAction=cmLoopAction, cmCpeIDSLModemDataRate=cmCpeIDSLModemDataRate, cmTrapAlarmLogTable=cmTrapAlarmLogTable, cmCpeDataPortDCD=cmCpeDataPortDCD, cmCpeEthernetRxCRCError=cmCpeEthernetRxCRCError, cmFrDlcmiEntry=cmFrDlcmiEntry, cmTrapDestinationIpAddr=cmTrapDestinationIpAddr, cmLoopStatusChange=cmLoopStatusChange, cmMACTTL=cmMACTTL, cmActiveSessionEntry=cmActiveSessionEntry, cmCpeDSLIntervalRxValidFrames=cmCpeDSLIntervalRxValidFrames, cmV35DTEDCE=cmV35DTEDCE, cmDSL24HrRxNoBuffers=cmDSL24HrRxNoBuffers, cmCpeDataPortIntervalTxFrames=cmCpeDataPortIntervalTxFrames, cmTrunkIfRecvError=cmTrunkIfRecvError, cmCpeBoardPromVersion=cmCpeBoardPromVersion, cmV35TxClockSource=cmV35TxClockSource, cmShelfCommand=cmShelfCommand, cmLoopHistInterface=cmLoopHistInterface, cmHDSLModemDataRate=cmHDSLModemDataRate, cmShelfBoardMap=cmShelfBoardMap, cmSubIfaceTable=cmSubIfaceTable, cmTrapCriticalAlarmCount=cmTrapCriticalAlarmCount, cmLoopID=cmLoopID, cmCpeEthernetTx16Collisions=cmCpeEthernetTx16Collisions, cmTrapReceiverOwnerString=cmTrapReceiverOwnerString, cmVBridgeOption=cmVBridgeOption, cmIDSLModemDataRate=cmIDSLModemDataRate, cmHSSIDTEDCE=cmHSSIDTEDCE, cmFileFSName=cmFileFSName, cmVBridgeEntry=cmVBridgeEntry, cmIfacePII=cmIfacePII, cmEndPointConfigDownloadEndTime=cmEndPointConfigDownloadEndTime, cmNamePII=cmNamePII, cmSubIfaceEntry=cmSubIfaceEntry, cmSysPrimaryPII=cmSysPrimaryPII, cmTrapTypeLogTimeTag=cmTrapTypeLogTimeTag, cmV35DCD=cmV35DCD, cmSysCommand=cmSysCommand, cmLoopRxErrors=cmLoopRxErrors, cmCpeDSLIntervalRxAborts=cmCpeDSLIntervalRxAborts, cmDSLTodaysRxCRCErrors=cmDSLTodaysRxCRCErrors, cmHSSITxClockPresent=cmHSSITxClockPresent, cmEndPointConfigDownloadStatus=cmEndPointConfigDownloadStatus, cmDSLCurrentMinNoiseMargin=cmDSLCurrentMinNoiseMargin, cmAtmVclTable=cmAtmVclTable, cmCpeDataPortEntry=cmCpeDataPortEntry, cmCpeDataPortTotalIndex=cmCpeDataPortTotalIndex, cmSysCalendarTime=cmSysCalendarTime, cmGroupNewGrpName=cmGroupNewGrpName, cmCpeDSLIntervalTxValidOctets=cmCpeDSLIntervalTxValidOctets, cmTrunkTopoHops=cmTrunkTopoHops, cmHDSLPerfTxValidFrames=cmHDSLPerfTxValidFrames, cmAlarmIndex=cmAlarmIndex, cmSDSLTestTable=cmSDSLTestTable, cmDSLYesterdaysRxAlignmentErrors=cmDSLYesterdaysRxAlignmentErrors, cmRadiusAcctPrimaryPort=cmRadiusAcctPrimaryPort, cmMACMAC=cmMACMAC, cmFilterTable=cmFilterTable, cmCE150Platform=cmCE150Platform, cmTrunkTopoNextHop=cmTrunkTopoNextHop, cmHSSITable=cmHSSITable, cmAlarmSwitch=cmAlarmSwitch, cmIfaceTable=cmIfaceTable, cmFrDlcmiDceN392=cmFrDlcmiDceN392, cmAtmVclOperStatus=cmAtmVclOperStatus, cmDSLYesterdaysRxAborts=cmDSLYesterdaysRxAborts, cmDSLCurrentTxValidFrames=cmDSLCurrentTxValidFrames, cmDSLIntervalRxOverruns=cmDSLIntervalRxOverruns, cmDS3AtmCbitParityEnable=cmDS3AtmCbitParityEnable, cmIDSLModemActivationInterval=cmIDSLModemActivationInterval, cmCpeDataPortIgnoreRTS=cmCpeDataPortIgnoreRTS, cmCpeDataPortRTS=cmCpeDataPortRTS, cmTrapEventSeqNum=cmTrapEventSeqNum, cmCpeDataPortTotalRxErrors=cmCpeDataPortTotalRxErrors, cmTrunkConnectionHighPII=cmTrunkConnectionHighPII, cmBoardUp=cmBoardUp, cmRadiusAuthSecondaryIpAddr=cmRadiusAuthSecondaryIpAddr, cmDSL24HrTxValidOctets=cmDSL24HrTxValidOctets, cmHDSL=cmHDSL, cmDSLIntervalTimeTagEnd=cmDSLIntervalTimeTagEnd, cmIfaceBurnedInMacAddr=cmIfaceBurnedInMacAddr, cmEndPointPortBasePII=cmEndPointPortBasePII, cmServiceClassCweight=cmServiceClassCweight, cmFrCircuitFramesDroppedExcess=cmFrCircuitFramesDroppedExcess, cmTrapTypeLogText=cmTrapTypeLogText, cmDSLTodaysIndex=cmDSLTodaysIndex, cmHDSLModemCommand=cmHDSLModemCommand, cmFrCircuitDlci=cmFrCircuitDlci, cmCpeIDSLModemEntry=cmCpeIDSLModemEntry, cmActiveSessionIpAddress=cmActiveSessionIpAddress, cmStateGenericClass=cmStateGenericClass, cmAtmVclAdminStatus=cmAtmVclAdminStatus, cmHDSLModemTestMode=cmHDSLModemTestMode, cmHDSLPerfRxValidFrames=cmHDSLPerfRxValidFrames, cmHDSLPerfIntervalEntry=cmHDSLPerfIntervalEntry, cmStateEntry=cmStateEntry, cmFilterSrcPortCompare=cmFilterSrcPortCompare, CmObjectPII=CmObjectPII, cmCpeIDSLModemTable=cmCpeIDSLModemTable, cmTrapDestinationOwnerString=cmTrapDestinationOwnerString, cmBoardIndex=cmBoardIndex, cmCpeBoardVendorDescription=cmCpeBoardVendorDescription, cmFanFailure=cmFanFailure, cmCpeDataPortLoopbackConfig=cmCpeDataPortLoopbackConfig, cmDSLIntervalTxUnderruns=cmDSLIntervalTxUnderruns, cmHDSLModemSuccessfulTrains=cmHDSLModemSuccessfulTrains, cmCpeDataPortIgnoreDTR=cmCpeDataPortIgnoreDTR, cmTrapTypeLogType=cmTrapTypeLogType, cmRadiusAcctPrimaryIpAddr=cmRadiusAcctPrimaryIpAddr, cmHDSLModemBPHwVersion=cmHDSLModemBPHwVersion, cmUserGroup=cmUserGroup, cmCpeDataPortIntervalRxErrors=cmCpeDataPortIntervalRxErrors, cmDSLTodaysRxTruncated=cmDSLTodaysRxTruncated, cmBoardCommand=cmBoardCommand, cmHDSLModemEntry=cmHDSLModemEntry, cmDSLYesterdaysRxCRCErrors=cmDSLYesterdaysRxCRCErrors, cmDHCPRowStatus=cmDHCPRowStatus, cmSysRedundancy=cmSysRedundancy, cmATM=cmATM, cmDSLYesterdaysTxValidFrames=cmDSLYesterdaysTxValidFrames, cmHDSLPerfRxAborts=cmHDSLPerfRxAborts, cmCpeDataPortRL=cmCpeDataPortRL, cmOperStateChange=cmOperStateChange, cmRoleChange=cmRoleChange, cmRegistry=cmRegistry, cmRadiusAuthPrimaryIpAddr=cmRadiusAuthPrimaryIpAddr, cmCpeEthernetTxCollisions=cmCpeEthernetTxCollisions, cmCpeDataPortIndex=cmCpeDataPortIndex, cmDSLTodaysRxValidOctets=cmDSLTodaysRxValidOctets, cmCpeEthernetTxSQEErr=cmCpeEthernetTxSQEErr, cmShelfShelfNumber=cmShelfShelfNumber, cmTrapDestinationCommunity=cmTrapDestinationCommunity, cmAttributeChange=cmAttributeChange, cmV35Table=cmV35Table, cmActiveSessionSessionID=cmActiveSessionSessionID, cmIDSLModemNetworkElements=cmIDSLModemNetworkElements, cmTrapAlarmLogType=cmTrapAlarmLogType, cmCpeDSLIntervalRxValidOctets=cmCpeDSLIntervalRxValidOctets, cmServiceClass=cmServiceClass, cmDSL24HrRxCRCErrors=cmDSL24HrRxCRCErrors, cmTrunkTopoSrc=cmTrunkTopoSrc, cmTrapAlarmLogEntry=cmTrapAlarmLogEntry, cmHDSLModemIndex=cmHDSLModemIndex, cmDSLYesterdaysRxOverruns=cmDSLYesterdaysRxOverruns, cmFilterSrcPort=cmFilterSrcPort, cmCpeDSLIntervalEntry=cmCpeDSLIntervalEntry, cmIfaceGroupName=cmIfaceGroupName, cmSDSLTestStatus=cmSDSLTestStatus, cmTrapTypeLogSeqNum=cmTrapTypeLogSeqNum, cmCpeDataPortIntervalRxFrames=cmCpeDataPortIntervalRxFrames, cmV35DTR=cmV35DTR, cmMaintCmdRecurrence=cmMaintCmdRecurrence, cmTrunkIfEntry=cmTrunkIfEntry, cmDSL24HrRxAlignmentErrors=cmDSL24HrRxAlignmentErrors, cmDSLYesterdaysEntry=cmDSLYesterdaysEntry, cmFilter=cmFilter, cmDSLIntervalRxValidFrames=cmDSLIntervalRxValidFrames, cmMaintCmdCommand=cmMaintCmdCommand, cmFrDlcmiLMIRxStatusEnquiries=cmFrDlcmiLMIRxStatusEnquiries, cmDSLCurrentTxUnderruns=cmDSLCurrentTxUnderruns, cmRisingAlarm=cmRisingAlarm, cmTrunkConnectionTable=cmTrunkConnectionTable, cmBoardEntry=cmBoardEntry, cmHDSLModemCpeCode=cmHDSLModemCpeCode, cmIfaceName=cmIfaceName, cmEndPointConfigDownloadStartTime=cmEndPointConfigDownloadStartTime, DLCI=DLCI, cmTrapAlarmLogSeverity=cmTrapAlarmLogSeverity, cmVBridgeNUnknownDest=cmVBridgeNUnknownDest, cmDSL24HrRxValidFrames=cmDSL24HrRxValidFrames, cmDS3AtmPII=cmDS3AtmPII, cmDSL24HrRxOverruns=cmDSL24HrRxOverruns, cmCpeDataPortDTR=cmCpeDataPortDTR, cmStateIndex=cmStateIndex, cmRadiusAcctSecondaryIpAddr=cmRadiusAcctSecondaryIpAddr, cmLoginsAvailable=cmLoginsAvailable, cmCpeHDSLModemTestMode=cmCpeHDSLModemTestMode, cmBoardPromVersion=cmBoardPromVersion, cmAlarmTable=cmAlarmTable, cmCpeDataPortIntervalEntry=cmCpeDataPortIntervalEntry, cmConfigFileReadFailed=cmConfigFileReadFailed, cmMaintCmdPrimaryIpAddr=cmMaintCmdPrimaryIpAddr, cmIDSLModemOperState=cmIDSLModemOperState, cmDSLYesterdaysMinNoiseMargin=cmDSLYesterdaysMinNoiseMargin, cmCpeDataPortLL=cmCpeDataPortLL, cmStateLastChange=cmStateLastChange, cmCpeDSLIntervalTxValidFrames=cmCpeDSLIntervalTxValidFrames, cmCpeDataPortIntervalTxErrors=cmCpeDataPortIntervalTxErrors, cmV35Entry=cmV35Entry, cmLoop=cmLoop, cmCE200Platform=cmCE200Platform, cmTrap=cmTrap, cmLoopDuration=cmLoopDuration, cmEndPointPortPartnerBundlePII=cmEndPointPortPartnerBundlePII, cmTrapEventLogText=cmTrapEventLogText, cmLoopHistTimeElapsed=cmLoopHistTimeElapsed, cmHSSIIndex=cmHSSIIndex, cmTrapEventLogEntry=cmTrapEventLogEntry, cmSDSLTestEntry=cmSDSLTestEntry, cmDSLCurrentRxBig=cmDSLCurrentRxBig, cmTrapAlarmLogClassId=cmTrapAlarmLogClassId, cmCpeEthernetRxMiss=cmCpeEthernetRxMiss, cmDSL24HrTable=cmDSL24HrTable, cmTrapEventLogSeverity=cmTrapEventLogSeverity, cmCpeDSLIntervalRxBig=cmCpeDSLIntervalRxBig, cmIDSLBoardTimingLossClear=cmIDSLBoardTimingLossClear, cmAlarmInterval=cmAlarmInterval, cmCpeDataPortCRC=cmCpeDataPortCRC, cmVBridgeNOverflow=cmVBridgeNOverflow, cmDHCPNetMask=cmDHCPNetMask, cmCpeDataPortClockRate=cmCpeDataPortClockRate, cmLoopHistTestParameter1=cmLoopHistTestParameter1, cmBundleTable=cmBundleTable, cmSysConfigFileName=cmSysConfigFileName)
