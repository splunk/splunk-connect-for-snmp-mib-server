#
# PySNMP MIB module BAS-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-OSPF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
BasSlotId, BasChassisId, basAliasOspf, BasLogicalPortId, BasInterfaceId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "BasChassisId", "basAliasOspf", "BasLogicalPortId", "BasInterfaceId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, Gauge32, ModuleIdentity, iso, IpAddress, Counter64, Counter32, MibIdentifier, Integer32, ObjectIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Gauge32", "ModuleIdentity", "iso", "IpAddress", "Counter64", "Counter32", "MibIdentifier", "Integer32", "ObjectIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
basOspf = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1))
if mibBuilder.loadTexts: basOspf.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basOspf.setOrganization('Broadband Access Systems')
class AreaID(TextualConvention, IpAddress):
    status = 'current'

class RouterID(TextualConvention, IpAddress):
    status = 'current'

class Metric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class BigMetric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class Status(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class PositiveInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class HelloRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class UpToMaxAge(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 3600)

class InterfaceIndex(TextualConvention, Integer32):
    status = 'current'

class DesignatedRouterPriority(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class TOSType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 30)

basOspfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1))
basOspfGeneralGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1), )
if mibBuilder.loadTexts: basOspfGeneralGroupTable.setStatus('current')
basOspfGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfGeneralGroupChassis"), (0, "BAS-OSPF-MIB", "basOspfGeneralGroupSlot"), (0, "BAS-OSPF-MIB", "basOspfGeneralGroupIf"), (0, "BAS-OSPF-MIB", "basOspfGeneralGroupLPort"))
if mibBuilder.loadTexts: basOspfGeneralGroupEntry.setStatus('current')
basOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 1), RouterID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfRouterId.setStatus('current')
basOspfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 2), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfAdminStat.setStatus('current')
basOspfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVersionNumber.setStatus('current')
basOspfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaBdrRtrStatus.setStatus('current')
basOspfASBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfASBdrRtrStatus.setStatus('current')
basOspfExternLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExternLsaCount.setStatus('current')
basOspfExternLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExternLsaCksumSum.setStatus('current')
basOspfTOSSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfTOSSupport.setStatus('current')
basOspfOriginateNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfOriginateNewLsas.setStatus('current')
basOspfRxNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfRxNewLsas.setStatus('current')
basOspfExtLsdbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfExtLsdbLimit.setStatus('current')
basOspfMulticastExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfMulticastExtensions.setStatus('current')
basOspfExitOverflowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 13), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfExitOverflowInterval.setStatus('current')
basOspfDemandExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basOspfDemandExtensions.setStatus('current')
basOspfGeneralGroupChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 15), BasChassisId())
if mibBuilder.loadTexts: basOspfGeneralGroupChassis.setStatus('current')
basOspfGeneralGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 16), BasSlotId())
if mibBuilder.loadTexts: basOspfGeneralGroupSlot.setStatus('current')
basOspfGeneralGroupIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 17), BasInterfaceId())
if mibBuilder.loadTexts: basOspfGeneralGroupIf.setStatus('current')
basOspfGeneralGroupLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 1, 1, 18), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfGeneralGroupLPort.setStatus('current')
basOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2), )
if mibBuilder.loadTexts: basOspfAreaTable.setStatus('current')
basOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfAreaChassis"), (0, "BAS-OSPF-MIB", "basOspfAreaSlot"), (0, "BAS-OSPF-MIB", "basOspfAreaIf"), (0, "BAS-OSPF-MIB", "basOspfAreaLPort"), (0, "BAS-OSPF-MIB", "basOspfAreaId"))
if mibBuilder.loadTexts: basOspfAreaEntry.setStatus('current')
basOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaId.setStatus('current')
basOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfAuthType.setStatus('obsolete')
basOspfImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3))).clone('importExternal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfImportAsExtern.setStatus('current')
basOspfSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfSpfRuns.setStatus('current')
basOspfAreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaBdrRtrCount.setStatus('current')
basOspfAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAsBdrRtrCount.setStatus('current')
basOspfAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaLsaCount.setStatus('current')
basOspfAreaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaLsaCksumSum.setStatus('current')
basOspfAreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2))).clone('noAreaSummary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfAreaSummary.setStatus('current')
basOspfAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfAreaStatus.setStatus('current')
basOspfAreaChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 11), BasChassisId())
if mibBuilder.loadTexts: basOspfAreaChassis.setStatus('current')
basOspfAreaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 12), BasSlotId())
if mibBuilder.loadTexts: basOspfAreaSlot.setStatus('current')
basOspfAreaIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 13), BasInterfaceId())
if mibBuilder.loadTexts: basOspfAreaIf.setStatus('current')
basOspfAreaLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 2, 1, 14), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfAreaLPort.setStatus('current')
basOspfStubAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3), )
if mibBuilder.loadTexts: basOspfStubAreaTable.setStatus('current')
basOspfStubAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfStubAreaChassis"), (0, "BAS-OSPF-MIB", "basOspfStubAreaSlot"), (0, "BAS-OSPF-MIB", "basOspfStubAreaIf"), (0, "BAS-OSPF-MIB", "basOspfStubAreaLPort"), (0, "BAS-OSPF-MIB", "basOspfStubAreaId"), (0, "BAS-OSPF-MIB", "basOspfStubTOS"))
if mibBuilder.loadTexts: basOspfStubAreaEntry.setStatus('current')
basOspfStubAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfStubAreaId.setStatus('current')
basOspfStubTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfStubTOS.setStatus('current')
basOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 3), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfStubMetric.setStatus('current')
basOspfStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfStubStatus.setStatus('current')
basOspfStubMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfMetric", 1), ("comparableCost", 2), ("nonComparable", 3))).clone('ospfMetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfStubMetricType.setStatus('current')
basOspfStubAreaChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basOspfStubAreaChassis.setStatus('current')
basOspfStubAreaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basOspfStubAreaSlot.setStatus('current')
basOspfStubAreaIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basOspfStubAreaIf.setStatus('current')
basOspfStubAreaLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 3, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfStubAreaLPort.setStatus('current')
basOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4), )
if mibBuilder.loadTexts: basOspfLsdbTable.setStatus('current')
basOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfLsdbChassis"), (0, "BAS-OSPF-MIB", "basOspfLsdbSlot"), (0, "BAS-OSPF-MIB", "basOspfLsdbIf"), (0, "BAS-OSPF-MIB", "basOspfLsdbLPort"), (0, "BAS-OSPF-MIB", "basOspfLsdbAreaId"), (0, "BAS-OSPF-MIB", "basOspfLsdbType"), (0, "BAS-OSPF-MIB", "basOspfLsdbLsid"), (0, "BAS-OSPF-MIB", "basOspfLsdbRouterId"))
if mibBuilder.loadTexts: basOspfLsdbEntry.setStatus('current')
basOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbAreaId.setStatus('current')
basOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbType.setStatus('current')
basOspfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbLsid.setStatus('current')
basOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbRouterId.setStatus('current')
basOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbSequence.setStatus('current')
basOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbAge.setStatus('current')
basOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbChecksum.setStatus('current')
basOspfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfLsdbAdvertisement.setStatus('current')
basOspfLsdbChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 9), BasChassisId())
if mibBuilder.loadTexts: basOspfLsdbChassis.setStatus('current')
basOspfLsdbSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 10), BasSlotId())
if mibBuilder.loadTexts: basOspfLsdbSlot.setStatus('current')
basOspfLsdbIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 11), BasInterfaceId())
if mibBuilder.loadTexts: basOspfLsdbIf.setStatus('current')
basOspfLsdbLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 4, 1, 12), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfLsdbLPort.setStatus('current')
basOspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6), )
if mibBuilder.loadTexts: basOspfHostTable.setStatus('current')
basOspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfHostChassis"), (0, "BAS-OSPF-MIB", "basOspfHostSlot"), (0, "BAS-OSPF-MIB", "basOspfHostIf"), (0, "BAS-OSPF-MIB", "basOspfHostLPort"), (0, "BAS-OSPF-MIB", "basOspfHostIpAddress"), (0, "BAS-OSPF-MIB", "basOspfHostTOS"))
if mibBuilder.loadTexts: basOspfHostEntry.setStatus('current')
basOspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfHostIpAddress.setStatus('current')
basOspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfHostTOS.setStatus('current')
basOspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfHostMetric.setStatus('current')
basOspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfHostStatus.setStatus('current')
basOspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 5), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfHostAreaID.setStatus('current')
basOspfHostChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basOspfHostChassis.setStatus('current')
basOspfHostSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basOspfHostSlot.setStatus('current')
basOspfHostIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basOspfHostIf.setStatus('current')
basOspfHostLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 6, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfHostLPort.setStatus('current')
basOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7), )
if mibBuilder.loadTexts: basOspfIfTable.setStatus('current')
basOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfIfChassis"), (0, "BAS-OSPF-MIB", "basOspfIfSlot"), (0, "BAS-OSPF-MIB", "basOspfIfIf"), (0, "BAS-OSPF-MIB", "basOspfIfLPort"), (0, "BAS-OSPF-MIB", "basOspfIfIpAddress"), (0, "BAS-OSPF-MIB", "basOspfAddressLessIf"))
if mibBuilder.loadTexts: basOspfIfEntry.setStatus('current')
basOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfIpAddress.setStatus('current')
basOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAddressLessIf.setStatus('current')
basOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfAreaId.setStatus('current')
basOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfType.setStatus('current')
basOspfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfAdminStat.setStatus('current')
basOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfRtrPriority.setStatus('current')
basOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfTransitDelay.setStatus('current')
basOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfRetransInterval.setStatus('current')
basOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 9), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfHelloInterval.setStatus('current')
basOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfRtrDeadInterval.setStatus('current')
basOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfPollInterval.setStatus('current')
basOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfState.setStatus('current')
basOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfDesignatedRouter.setStatus('current')
basOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfBackupDesignatedRouter.setStatus('current')
basOspfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfEvents.setStatus('current')
basOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfAuthKey.setStatus('current')
basOspfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfStatus.setStatus('current')
basOspfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfMulticastForwarding.setStatus('current')
basOspfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfDemand.setStatus('current')
basOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfAuthType.setStatus('current')
basOspfIfChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 21), BasChassisId())
if mibBuilder.loadTexts: basOspfIfChassis.setStatus('current')
basOspfIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 22), BasSlotId())
if mibBuilder.loadTexts: basOspfIfSlot.setStatus('current')
basOspfIfIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 23), BasInterfaceId())
if mibBuilder.loadTexts: basOspfIfIf.setStatus('current')
basOspfIfLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 7, 1, 24), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfIfLPort.setStatus('current')
basOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8), )
if mibBuilder.loadTexts: basOspfIfMetricTable.setStatus('current')
basOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfIfMetricChassis"), (0, "BAS-OSPF-MIB", "basOspfIfMetricSlot"), (0, "BAS-OSPF-MIB", "basOspfIfMetricIf"), (0, "BAS-OSPF-MIB", "basOspfIfMetricLPort"), (0, "BAS-OSPF-MIB", "basOspfIfMetricIpAddress"), (0, "BAS-OSPF-MIB", "basOspfIfMetricAddressLessIf"), (0, "BAS-OSPF-MIB", "basOspfIfMetricTOS"))
if mibBuilder.loadTexts: basOspfIfMetricEntry.setStatus('current')
basOspfIfMetricIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfMetricIpAddress.setStatus('current')
basOspfIfMetricAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfMetricAddressLessIf.setStatus('current')
basOspfIfMetricTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 3), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfIfMetricTOS.setStatus('current')
basOspfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 4), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfMetricValue.setStatus('current')
basOspfIfMetricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfIfMetricStatus.setStatus('current')
basOspfIfMetricChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basOspfIfMetricChassis.setStatus('current')
basOspfIfMetricSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basOspfIfMetricSlot.setStatus('current')
basOspfIfMetricIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basOspfIfMetricIf.setStatus('current')
basOspfIfMetricLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 8, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfIfMetricLPort.setStatus('current')
basOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9), )
if mibBuilder.loadTexts: basOspfVirtIfTable.setStatus('current')
basOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfVirtIfChassis"), (0, "BAS-OSPF-MIB", "basOspfVirtIfSlot"), (0, "BAS-OSPF-MIB", "basOspfVirtIfIf"), (0, "BAS-OSPF-MIB", "basOspfVirtIfLPort"), (0, "BAS-OSPF-MIB", "basOspfVirtIfAreaId"), (0, "BAS-OSPF-MIB", "basOspfVirtIfNeighbor"))
if mibBuilder.loadTexts: basOspfVirtIfEntry.setStatus('current')
basOspfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtIfAreaId.setStatus('current')
basOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtIfNeighbor.setStatus('current')
basOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfVirtIfTransitDelay.setStatus('current')
basOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfVirtIfRetransInterval.setStatus('current')
basOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfVirtIfHelloInterval.setStatus('current')
basOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 6), PositiveInteger().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfVirtIfRtrDeadInterval.setStatus('current')
basOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtIfState.setStatus('current')
basOspfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtIfEvents.setStatus('current')
basOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfVirtIfAuthKey.setStatus('current')
basOspfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfVirtIfStatus.setStatus('current')
basOspfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfVirtIfAuthType.setStatus('current')
basOspfVirtIfChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 12), BasChassisId())
if mibBuilder.loadTexts: basOspfVirtIfChassis.setStatus('current')
basOspfVirtIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 13), BasSlotId())
if mibBuilder.loadTexts: basOspfVirtIfSlot.setStatus('current')
basOspfVirtIfIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 14), BasInterfaceId())
if mibBuilder.loadTexts: basOspfVirtIfIf.setStatus('current')
basOspfVirtIfLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 9, 1, 15), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfVirtIfLPort.setStatus('current')
basOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10), )
if mibBuilder.loadTexts: basOspfNbrTable.setStatus('current')
basOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfNbrChassis"), (0, "BAS-OSPF-MIB", "basOspfNbrSlot"), (0, "BAS-OSPF-MIB", "basOspfNbrIf"), (0, "BAS-OSPF-MIB", "basOspfNbrLPort"), (0, "BAS-OSPF-MIB", "basOspfNbrIpAddr"), (0, "BAS-OSPF-MIB", "basOspfNbrAddressLessIndex"))
if mibBuilder.loadTexts: basOspfNbrEntry.setStatus('current')
basOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrIpAddr.setStatus('current')
basOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrAddressLessIndex.setStatus('current')
basOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 3), RouterID().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrRtrId.setStatus('current')
basOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrOptions.setStatus('current')
basOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 5), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfNbrPriority.setStatus('current')
basOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrState.setStatus('current')
basOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrEvents.setStatus('current')
basOspfNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrLsRetransQLen.setStatus('current')
basOspfNbmaNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfNbmaNbrStatus.setStatus('current')
basOspfNbmaNbrPermanence = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2))).clone('permanent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbmaNbrPermanence.setStatus('current')
basOspfNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfNbrHelloSuppressed.setStatus('current')
basOspfNbrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 12), BasChassisId())
if mibBuilder.loadTexts: basOspfNbrChassis.setStatus('current')
basOspfNbrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 13), BasSlotId())
if mibBuilder.loadTexts: basOspfNbrSlot.setStatus('current')
basOspfNbrIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 14), BasInterfaceId())
if mibBuilder.loadTexts: basOspfNbrIf.setStatus('current')
basOspfNbrLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 10, 1, 15), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfNbrLPort.setStatus('current')
basOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11), )
if mibBuilder.loadTexts: basOspfVirtNbrTable.setStatus('current')
basOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfVirtNbrChassis"), (0, "BAS-OSPF-MIB", "basOspfVirtNbrSlot"), (0, "BAS-OSPF-MIB", "basOspfVirtNbrIf"), (0, "BAS-OSPF-MIB", "basOspfVirtNbrLPort"), (0, "BAS-OSPF-MIB", "basOspfVirtNbrArea"), (0, "BAS-OSPF-MIB", "basOspfVirtNbrRtrId"))
if mibBuilder.loadTexts: basOspfVirtNbrEntry.setStatus('current')
basOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrArea.setStatus('current')
basOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrRtrId.setStatus('current')
basOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrIpAddr.setStatus('current')
basOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrOptions.setStatus('current')
basOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrState.setStatus('current')
basOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrEvents.setStatus('current')
basOspfVirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrLsRetransQLen.setStatus('current')
basOspfVirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfVirtNbrHelloSuppressed.setStatus('current')
basOspfVirtNbrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 9), BasChassisId())
if mibBuilder.loadTexts: basOspfVirtNbrChassis.setStatus('current')
basOspfVirtNbrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 10), BasSlotId())
if mibBuilder.loadTexts: basOspfVirtNbrSlot.setStatus('current')
basOspfVirtNbrIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 11), BasInterfaceId())
if mibBuilder.loadTexts: basOspfVirtNbrIf.setStatus('current')
basOspfVirtNbrLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 11, 1, 12), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfVirtNbrLPort.setStatus('current')
basOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12), )
if mibBuilder.loadTexts: basOspfExtLsdbTable.setStatus('current')
basOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfExtLsdbChassis"), (0, "BAS-OSPF-MIB", "basOspfExtLsdbSlot"), (0, "BAS-OSPF-MIB", "basOspfExtLsdbIf"), (0, "BAS-OSPF-MIB", "basOspfExtLsdbLPort"), (0, "BAS-OSPF-MIB", "basOspfExtLsdbType"), (0, "BAS-OSPF-MIB", "basOspfExtLsdbLsid"), (0, "BAS-OSPF-MIB", "basOspfExtLsdbRouterId"))
if mibBuilder.loadTexts: basOspfExtLsdbEntry.setStatus('current')
basOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("asExternalLink", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExtLsdbType.setStatus('current')
basOspfExtLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExtLsdbLsid.setStatus('current')
basOspfExtLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExtLsdbRouterId.setStatus('current')
basOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExtLsdbSequence.setStatus('current')
basOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExtLsdbAge.setStatus('current')
basOspfExtLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExtLsdbChecksum.setStatus('current')
basOspfExtLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfExtLsdbAdvertisement.setStatus('current')
basOspfExtLsdbChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 8), BasChassisId())
if mibBuilder.loadTexts: basOspfExtLsdbChassis.setStatus('current')
basOspfExtLsdbSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 9), BasSlotId())
if mibBuilder.loadTexts: basOspfExtLsdbSlot.setStatus('current')
basOspfExtLsdbIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 10), BasInterfaceId())
if mibBuilder.loadTexts: basOspfExtLsdbIf.setStatus('current')
basOspfExtLsdbLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 12, 1, 11), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfExtLsdbLPort.setStatus('current')
basOspfRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 13))
basOspfIntraArea = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 13, 1))
basOspfInterArea = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 13, 2))
basOspfExternalType1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 13, 3))
basOspfExternalType2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 13, 4))
basOspfAreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14), )
if mibBuilder.loadTexts: basOspfAreaAggregateTable.setStatus('current')
basOspfAreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1), ).setIndexNames((0, "BAS-OSPF-MIB", "basOspfAreaAggregateChassis"), (0, "BAS-OSPF-MIB", "basOspfAreaAggregateSlot"), (0, "BAS-OSPF-MIB", "basOspfAreaAggregateIf"), (0, "BAS-OSPF-MIB", "basOspfAreaAggregateLPort"), (0, "BAS-OSPF-MIB", "basOspfAreaAggregateAreaID"), (0, "BAS-OSPF-MIB", "basOspfAreaAggregateLsdbType"), (0, "BAS-OSPF-MIB", "basOspfAreaAggregateNet"), (0, "BAS-OSPF-MIB", "basOspfAreaAggregateMask"))
if mibBuilder.loadTexts: basOspfAreaAggregateEntry.setStatus('current')
basOspfAreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaAggregateAreaID.setStatus('current')
basOspfAreaAggregateLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7))).clone(namedValues=NamedValues(("summaryLink", 3), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaAggregateLsdbType.setStatus('current')
basOspfAreaAggregateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaAggregateNet.setStatus('current')
basOspfAreaAggregateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basOspfAreaAggregateMask.setStatus('current')
basOspfAreaAggregateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfAreaAggregateStatus.setStatus('current')
basOspfAreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2))).clone('advertiseMatching')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basOspfAreaAggregateEffect.setStatus('current')
basOspfAreaAggregateChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 7), BasChassisId())
if mibBuilder.loadTexts: basOspfAreaAggregateChassis.setStatus('current')
basOspfAreaAggregateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 8), BasSlotId())
if mibBuilder.loadTexts: basOspfAreaAggregateSlot.setStatus('current')
basOspfAreaAggregateIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 9), BasInterfaceId())
if mibBuilder.loadTexts: basOspfAreaAggregateIf.setStatus('current')
basOspfAreaAggregateLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 7, 1, 14, 1, 10), BasLogicalPortId())
if mibBuilder.loadTexts: basOspfAreaAggregateLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-OSPF-MIB", basOspfAreaAggregateEffect=basOspfAreaAggregateEffect, basOspfHostLPort=basOspfHostLPort, basOspfLsdbAdvertisement=basOspfLsdbAdvertisement, basOspfNbmaNbrStatus=basOspfNbmaNbrStatus, basOspf=basOspf, basOspfGeneralGroupEntry=basOspfGeneralGroupEntry, basOspfAreaAggregateMask=basOspfAreaAggregateMask, basOspfHostMetric=basOspfHostMetric, basOspfHostSlot=basOspfHostSlot, basOspfStubAreaEntry=basOspfStubAreaEntry, basOspfIfDesignatedRouter=basOspfIfDesignatedRouter, basOspfNbmaNbrPermanence=basOspfNbmaNbrPermanence, basOspfVirtNbrHelloSuppressed=basOspfVirtNbrHelloSuppressed, basOspfLsdbLPort=basOspfLsdbLPort, basOspfIfMetricIpAddress=basOspfIfMetricIpAddress, PositiveInteger=PositiveInteger, basOspfLsdbAge=basOspfLsdbAge, basOspfVirtNbrSlot=basOspfVirtNbrSlot, basOspfAuthType=basOspfAuthType, basOspfAreaSummary=basOspfAreaSummary, basOspfAreaAggregateNet=basOspfAreaAggregateNet, basOspfStubMetricType=basOspfStubMetricType, basOspfVirtIfEvents=basOspfVirtIfEvents, basOspfIfMetricEntry=basOspfIfMetricEntry, PYSNMP_MODULE_ID=basOspf, basOspfNbrAddressLessIndex=basOspfNbrAddressLessIndex, basOspfVersionNumber=basOspfVersionNumber, basOspfNbrState=basOspfNbrState, basOspfExtLsdbLsid=basOspfExtLsdbLsid, basOspfExtLsdbIf=basOspfExtLsdbIf, basOspfExternalType1=basOspfExternalType1, basOspfIfMetricTable=basOspfIfMetricTable, basOspfVirtNbrTable=basOspfVirtNbrTable, basOspfTOSSupport=basOspfTOSSupport, basOspfStubAreaTable=basOspfStubAreaTable, basOspfExtLsdbEntry=basOspfExtLsdbEntry, AreaID=AreaID, basOspfGeneralGroupTable=basOspfGeneralGroupTable, basOspfAreaEntry=basOspfAreaEntry, basOspfGeneralGroupChassis=basOspfGeneralGroupChassis, basOspfVirtIfAuthType=basOspfVirtIfAuthType, UpToMaxAge=UpToMaxAge, basOspfHostStatus=basOspfHostStatus, basOspfExtLsdbTable=basOspfExtLsdbTable, basOspfExtLsdbChassis=basOspfExtLsdbChassis, basOspfIfMulticastForwarding=basOspfIfMulticastForwarding, basOspfVirtIfNeighbor=basOspfVirtIfNeighbor, basOspfExtLsdbLPort=basOspfExtLsdbLPort, basOspfVirtNbrEvents=basOspfVirtNbrEvents, basOspfIfSlot=basOspfIfSlot, basOspfIfMetricAddressLessIf=basOspfIfMetricAddressLessIf, basOspfLsdbTable=basOspfLsdbTable, basOspfMulticastExtensions=basOspfMulticastExtensions, basOspfAreaLsaCount=basOspfAreaLsaCount, basOspfLsdbLsid=basOspfLsdbLsid, basOspfIfAuthType=basOspfIfAuthType, basOspfVirtNbrState=basOspfVirtNbrState, basOspfIfAreaId=basOspfIfAreaId, InterfaceIndex=InterfaceIndex, RouterID=RouterID, basOspfNbrEvents=basOspfNbrEvents, basOspfVirtNbrOptions=basOspfVirtNbrOptions, basOspfVirtIfRtrDeadInterval=basOspfVirtIfRtrDeadInterval, basOspfVirtIfAreaId=basOspfVirtIfAreaId, basOspfNbrHelloSuppressed=basOspfNbrHelloSuppressed, basOspfHostChassis=basOspfHostChassis, basOspfNbrSlot=basOspfNbrSlot, basOspfVirtIfTable=basOspfVirtIfTable, basOspfVirtIfRetransInterval=basOspfVirtIfRetransInterval, basOspfVirtIfLPort=basOspfVirtIfLPort, basOspfIfDemand=basOspfIfDemand, Metric=Metric, basOspfImportAsExtern=basOspfImportAsExtern, basOspfNbrLsRetransQLen=basOspfNbrLsRetransQLen, basOspfNbrLPort=basOspfNbrLPort, basOspfLsdbSlot=basOspfLsdbSlot, basOspfIfRtrDeadInterval=basOspfIfRtrDeadInterval, basOspfLsdbRouterId=basOspfLsdbRouterId, basOspfVirtNbrEntry=basOspfVirtNbrEntry, HelloRange=HelloRange, basOspfIfMetricValue=basOspfIfMetricValue, basOspfRouterId=basOspfRouterId, basOspfIfMetricChassis=basOspfIfMetricChassis, basOspfAreaLPort=basOspfAreaLPort, basOspfExtLsdbAge=basOspfExtLsdbAge, basOspfIfIpAddress=basOspfIfIpAddress, basOspfIfState=basOspfIfState, basOspfNbrEntry=basOspfNbrEntry, basOspfVirtIfHelloInterval=basOspfVirtIfHelloInterval, basOspfNbrTable=basOspfNbrTable, basOspfHostTable=basOspfHostTable, basOspfIfPollInterval=basOspfIfPollInterval, basOspfNbrIpAddr=basOspfNbrIpAddr, basOspfAreaTable=basOspfAreaTable, basOspfStubMetric=basOspfStubMetric, basOspfAsBdrRtrCount=basOspfAsBdrRtrCount, basOspfIfType=basOspfIfType, basOspfVirtNbrLPort=basOspfVirtNbrLPort, basOspfExtLsdbSlot=basOspfExtLsdbSlot, basOspfAreaAggregateChassis=basOspfAreaAggregateChassis, basOspfAreaLsaCksumSum=basOspfAreaLsaCksumSum, basOspfRxNewLsas=basOspfRxNewLsas, basOspfAreaAggregateIf=basOspfAreaAggregateIf, basOspfAdminStat=basOspfAdminStat, basOspfIfEvents=basOspfIfEvents, basOspfVirtIfStatus=basOspfVirtIfStatus, basOspfVirtIfAuthKey=basOspfVirtIfAuthKey, basOspfIfRtrPriority=basOspfIfRtrPriority, basOspfLsdbEntry=basOspfLsdbEntry, basOspfObjects=basOspfObjects, basOspfVirtIfTransitDelay=basOspfVirtIfTransitDelay, basOspfHostEntry=basOspfHostEntry, basOspfVirtIfEntry=basOspfVirtIfEntry, basOspfAreaBdrRtrStatus=basOspfAreaBdrRtrStatus, basOspfIfChassis=basOspfIfChassis, basOspfLsdbType=basOspfLsdbType, basOspfExitOverflowInterval=basOspfExitOverflowInterval, basOspfExtLsdbSequence=basOspfExtLsdbSequence, basOspfAreaAggregateLPort=basOspfAreaAggregateLPort, basOspfAreaAggregateEntry=basOspfAreaAggregateEntry, basOspfInterArea=basOspfInterArea, basOspfHostIpAddress=basOspfHostIpAddress, basOspfStubAreaLPort=basOspfStubAreaLPort, basOspfIfAuthKey=basOspfIfAuthKey, basOspfIfEntry=basOspfIfEntry, basOspfAreaIf=basOspfAreaIf, basOspfASBdrRtrStatus=basOspfASBdrRtrStatus, basOspfVirtNbrLsRetransQLen=basOspfVirtNbrLsRetransQLen, basOspfIfMetricStatus=basOspfIfMetricStatus, basOspfIfMetricLPort=basOspfIfMetricLPort, basOspfIfAdminStat=basOspfIfAdminStat, basOspfVirtIfSlot=basOspfVirtIfSlot, basOspfVirtIfState=basOspfVirtIfState, basOspfNbrChassis=basOspfNbrChassis, basOspfExternLsaCksumSum=basOspfExternLsaCksumSum, basOspfIfMetricIf=basOspfIfMetricIf, basOspfExtLsdbChecksum=basOspfExtLsdbChecksum, basOspfAreaChassis=basOspfAreaChassis, basOspfNbrOptions=basOspfNbrOptions, basOspfNbrIf=basOspfNbrIf, basOspfVirtIfChassis=basOspfVirtIfChassis, basOspfIfMetricSlot=basOspfIfMetricSlot, basOspfLsdbChassis=basOspfLsdbChassis, basOspfIfTable=basOspfIfTable, basOspfExternalType2=basOspfExternalType2, basOspfExtLsdbLimit=basOspfExtLsdbLimit, basOspfIfStatus=basOspfIfStatus, basOspfStubAreaId=basOspfStubAreaId, basOspfExternLsaCount=basOspfExternLsaCount, basOspfAreaBdrRtrCount=basOspfAreaBdrRtrCount, basOspfAreaId=basOspfAreaId, basOspfStubAreaChassis=basOspfStubAreaChassis, basOspfAreaAggregateAreaID=basOspfAreaAggregateAreaID, basOspfAreaAggregateSlot=basOspfAreaAggregateSlot, basOspfStubAreaIf=basOspfStubAreaIf, basOspfVirtNbrIf=basOspfVirtNbrIf, basOspfStubAreaSlot=basOspfStubAreaSlot, basOspfIfBackupDesignatedRouter=basOspfIfBackupDesignatedRouter, basOspfLsdbSequence=basOspfLsdbSequence, basOspfVirtNbrChassis=basOspfVirtNbrChassis, basOspfExtLsdbAdvertisement=basOspfExtLsdbAdvertisement, basOspfNbrRtrId=basOspfNbrRtrId, basOspfIntraArea=basOspfIntraArea, TOSType=TOSType, basOspfStubStatus=basOspfStubStatus, basOspfIfIf=basOspfIfIf, basOspfExtLsdbType=basOspfExtLsdbType, basOspfIfHelloInterval=basOspfIfHelloInterval, basOspfOriginateNewLsas=basOspfOriginateNewLsas, basOspfGeneralGroupIf=basOspfGeneralGroupIf, basOspfExtLsdbRouterId=basOspfExtLsdbRouterId, basOspfStubTOS=basOspfStubTOS, basOspfAreaAggregateStatus=basOspfAreaAggregateStatus, basOspfVirtIfIf=basOspfVirtIfIf, basOspfVirtNbrRtrId=basOspfVirtNbrRtrId, basOspfLsdbIf=basOspfLsdbIf, basOspfNbrPriority=basOspfNbrPriority, basOspfLsdbChecksum=basOspfLsdbChecksum, basOspfAddressLessIf=basOspfAddressLessIf, basOspfDemandExtensions=basOspfDemandExtensions, basOspfGeneralGroupLPort=basOspfGeneralGroupLPort, basOspfVirtNbrIpAddr=basOspfVirtNbrIpAddr, basOspfHostTOS=basOspfHostTOS, basOspfIfTransitDelay=basOspfIfTransitDelay, basOspfAreaAggregateLsdbType=basOspfAreaAggregateLsdbType, basOspfAreaStatus=basOspfAreaStatus, basOspfVirtNbrArea=basOspfVirtNbrArea, basOspfRouteGroup=basOspfRouteGroup, basOspfAreaSlot=basOspfAreaSlot, basOspfGeneralGroupSlot=basOspfGeneralGroupSlot, basOspfIfRetransInterval=basOspfIfRetransInterval, basOspfSpfRuns=basOspfSpfRuns, BigMetric=BigMetric, basOspfLsdbAreaId=basOspfLsdbAreaId, Status=Status, basOspfHostAreaID=basOspfHostAreaID, basOspfHostIf=basOspfHostIf, basOspfIfLPort=basOspfIfLPort, basOspfAreaAggregateTable=basOspfAreaAggregateTable, basOspfIfMetricTOS=basOspfIfMetricTOS, DesignatedRouterPriority=DesignatedRouterPriority)
