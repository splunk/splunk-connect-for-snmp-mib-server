#
# PySNMP MIB module OLIVETTI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLIVETTI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, NotificationType, Counter32, ModuleIdentity, ObjectIdentity, Unsigned32, Integer32, Bits, TimeTicks, enterprises, IpAddress, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "NotificationType", "Counter32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Integer32", "Bits", "TimeTicks", "enterprises", "IpAddress", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
olivetti = MibIdentifier((1, 3, 6, 1, 4, 1, 279))
lms = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2))
lms_trap = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 3)).setLabel("lms-trap")
pb_dos = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 3)).setLabel("pb-dos")
lsx_unix = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6)).setLabel("lsx-unix")
pc_win = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 7)).setLabel("pc-win")
win_nt = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 8)).setLabel("win-nt")
pc_dos = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 9)).setLabel("pc-dos")
lms_sys_map = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 9999)).setLabel("lms-sys-map")
lms_SysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setLabel("lms-SysName")
if mibBuilder.loadTexts: lms_SysName.setStatus('mandatory')
lms_SubAddress = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setLabel("lms-SubAddress")
if mibBuilder.loadTexts: lms_SubAddress.setStatus('mandatory')
lms_LogType = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("lms-LogType")
if mibBuilder.loadTexts: lms_LogType.setStatus('mandatory')
lms_FilterType = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("lms-FilterType")
if mibBuilder.loadTexts: lms_FilterType.setStatus('mandatory')
lms_RecLevel = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setLabel("lms-RecLevel")
if mibBuilder.loadTexts: lms_RecLevel.setStatus('mandatory')
lms_RecCode = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setLabel("lms-RecCode")
if mibBuilder.loadTexts: lms_RecCode.setStatus('mandatory')
lms_ProductId = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setLabel("lms-ProductId")
if mibBuilder.loadTexts: lms_ProductId.setStatus('mandatory')
lms_Class = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setLabel("lms-Class")
if mibBuilder.loadTexts: lms_Class.setStatus('mandatory')
lms_SubClass = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setLabel("lms-SubClass")
if mibBuilder.loadTexts: lms_SubClass.setStatus('mandatory')
lms_ResourceName = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setLabel("lms-ResourceName")
if mibBuilder.loadTexts: lms_ResourceName.setStatus('mandatory')
lms_GenerationDate = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setLabel("lms-GenerationDate")
if mibBuilder.loadTexts: lms_GenerationDate.setStatus('mandatory')
lms_LogString = MibScalar((1, 3, 6, 1, 4, 1, 279, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5000))).setLabel("lms-LogString")
if mibBuilder.loadTexts: lms_LogString.setStatus('mandatory')
trap_lms = NotificationType((1, 3, 6, 1, 4, 1, 279) + (0,138)).setLabel("trap-lms").setObjects(("OLIVETTI-MIB", "lms_SysName"), ("OLIVETTI-MIB", "lms_SubAddress"), ("OLIVETTI-MIB", "lms_LogType"), ("OLIVETTI-MIB", "lms_FilterType"), ("OLIVETTI-MIB", "lms_RecLevel"), ("OLIVETTI-MIB", "lms_RecCode"), ("OLIVETTI-MIB", "lms_ProductId"), ("OLIVETTI-MIB", "lms_Class"), ("OLIVETTI-MIB", "lms_SubClass"), ("OLIVETTI-MIB", "lms_ResourceName"), ("OLIVETTI-MIB", "lms_GenerationDate"), ("OLIVETTI-MIB", "lms_LogString"))
uxlms_systemrm = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 7)).setLabel("uxlms-systemrm")
uxlms_system = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 7, 0)).setLabel("uxlms-system")
uxlms_systemrmTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 7, 0, 1), ).setLabel("uxlms-systemrmTable")
if mibBuilder.loadTexts: uxlms_systemrmTable.setStatus('mandatory')
uxlms_systemrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 7, 0, 1, 1), ).setLabel("uxlms-systemrmEntry").setIndexNames((0, "OLIVETTI-MIB", "uxlms-systemrmSysName"), (0, "OLIVETTI-MIB", "uxlms-systemrmInstName"), (0, "OLIVETTI-MIB", "uxlms-systemrmSubAddr"))
if mibBuilder.loadTexts: uxlms_systemrmEntry.setStatus('mandatory')
uxlms_systemrmSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 7, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxlms-systemrmSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlms_systemrmSysName.setStatus('mandatory')
uxlms_systemrmInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 7, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxlms-systemrmInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlms_systemrmInstName.setStatus('mandatory')
uxlms_systemrmSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 7, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxlms-systemrmSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlms_systemrmSubAddr.setStatus('mandatory')
uxlms_nms = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 12)).setLabel("uxlms-nms")
uxlms_sdrm = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 12, 2)).setLabel("uxlms-sdrm")
uxlms_sdrmTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 12, 2, 1), ).setLabel("uxlms-sdrmTable")
if mibBuilder.loadTexts: uxlms_sdrmTable.setStatus('mandatory')
uxlms_sdrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 12, 2, 1, 1), ).setLabel("uxlms-sdrmEntry").setIndexNames((0, "OLIVETTI-MIB", "uxlms-sdrmSysName"), (0, "OLIVETTI-MIB", "uxlms-sdrmInstName"), (0, "OLIVETTI-MIB", "uxlms-sdrmSubAddr"))
if mibBuilder.loadTexts: uxlms_sdrmEntry.setStatus('mandatory')
uxlms_sdrmSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 12, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxlms-sdrmSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlms_sdrmSysName.setStatus('mandatory')
uxlms_sdrmInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 12, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxlms-sdrmInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlms_sdrmInstName.setStatus('mandatory')
uxlms_sdrmSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 12, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxlms-sdrmSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlms_sdrmSubAddr.setStatus('mandatory')
lmssysmapTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 9999, 1), )
if mibBuilder.loadTexts: lmssysmapTable.setStatus('mandatory')
lmssysmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 9999, 1, 1), ).setIndexNames((0, "OLIVETTI-MIB", "lmsSystemName"))
if mibBuilder.loadTexts: lmssysmapEntry.setStatus('mandatory')
lmsSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 9999, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSystemName.setStatus('mandatory')
lmsSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 9999, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSystemStatus.setStatus('mandatory')
lmsSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 9999, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSystemType.setStatus('mandatory')
lmsSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 9999, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSystemClass.setStatus('mandatory')
pblms_systemrm = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 3, 7)).setLabel("pblms-systemrm")
pblms_system = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 3, 7, 0)).setLabel("pblms-system")
pblms_systemrmTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 3, 7, 0, 1), ).setLabel("pblms-systemrmTable")
if mibBuilder.loadTexts: pblms_systemrmTable.setStatus('mandatory')
pblms_systemrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 3, 7, 0, 1, 1), ).setLabel("pblms-systemrmEntry").setIndexNames((0, "OLIVETTI-MIB", "pblms-systemrmSysName"), (0, "OLIVETTI-MIB", "pblms-systemrmInstName"), (0, "OLIVETTI-MIB", "pblms-systemrmSubAddr"))
if mibBuilder.loadTexts: pblms_systemrmEntry.setStatus('mandatory')
pblms_systemrmSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 3, 7, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("pblms-systemrmSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: pblms_systemrmSysName.setStatus('mandatory')
pblms_systemrmInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 3, 7, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("pblms-systemrmInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: pblms_systemrmInstName.setStatus('mandatory')
pblms_systemrmSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 3, 7, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("pblms-systemrmSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pblms_systemrmSubAddr.setStatus('mandatory')
winlms_systemrm = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 7, 7)).setLabel("winlms-systemrm")
winlms_system = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 7, 7, 0)).setLabel("winlms-system")
winlms_systemrmTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 7, 7, 0, 1), ).setLabel("winlms-systemrmTable")
if mibBuilder.loadTexts: winlms_systemrmTable.setStatus('mandatory')
winlms_systemrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 7, 7, 0, 1, 1), ).setLabel("winlms-systemrmEntry").setIndexNames((0, "OLIVETTI-MIB", "winlms-systemrmSysName"), (0, "OLIVETTI-MIB", "winlms-systemrmInstName"), (0, "OLIVETTI-MIB", "winlms-systemrmSubAddr"))
if mibBuilder.loadTexts: winlms_systemrmEntry.setStatus('mandatory')
winlms_systemrmSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 7, 7, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("winlms-systemrmSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: winlms_systemrmSysName.setStatus('mandatory')
winlms_systemrmInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 7, 7, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("winlms-systemrmInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: winlms_systemrmInstName.setStatus('mandatory')
winlms_systemrmSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 7, 7, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("winlms-systemrmSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: winlms_systemrmSubAddr.setStatus('mandatory')
winlms_nms = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 7, 12)).setLabel("winlms-nms")
winlms_sdrm = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 7, 12, 2)).setLabel("winlms-sdrm")
winlms_sdrmTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 7, 12, 2, 1), ).setLabel("winlms-sdrmTable")
if mibBuilder.loadTexts: winlms_sdrmTable.setStatus('mandatory')
winlms_sdrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 7, 12, 2, 1, 1), ).setLabel("winlms-sdrmEntry").setIndexNames((0, "OLIVETTI-MIB", "winlms-sdrmSysName"), (0, "OLIVETTI-MIB", "winlms-sdrmInstName"), (0, "OLIVETTI-MIB", "winlms-sdrmSubAddr"))
if mibBuilder.loadTexts: winlms_sdrmEntry.setStatus('mandatory')
winlms_sdrmSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 7, 12, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("winlms-sdrmSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: winlms_sdrmSysName.setStatus('mandatory')
winlms_sdrmInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 7, 12, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("winlms-sdrmInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: winlms_sdrmInstName.setStatus('mandatory')
winlms_sdrmSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 7, 12, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("winlms-sdrmSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: winlms_sdrmSubAddr.setStatus('mandatory')
ntlms_systemrm = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 8, 7)).setLabel("ntlms-systemrm")
ntlms_system = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 8, 7, 0)).setLabel("ntlms-system")
ntlms_systemrmTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 8, 7, 0, 1), ).setLabel("ntlms-systemrmTable")
if mibBuilder.loadTexts: ntlms_systemrmTable.setStatus('mandatory')
ntlms_systemrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 8, 7, 0, 1, 1), ).setLabel("ntlms-systemrmEntry").setIndexNames((0, "OLIVETTI-MIB", "ntlms-systemrmSysName"), (0, "OLIVETTI-MIB", "ntlms-systemrmInstName"), (0, "OLIVETTI-MIB", "ntlms-systemrmSubAddr"))
if mibBuilder.loadTexts: ntlms_systemrmEntry.setStatus('mandatory')
ntlms_systemrmSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 8, 7, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("ntlms-systemrmSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: ntlms_systemrmSysName.setStatus('mandatory')
ntlms_systemrmInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 8, 7, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("ntlms-systemrmInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: ntlms_systemrmInstName.setStatus('mandatory')
ntlms_systemrmSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 8, 7, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("ntlms-systemrmSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ntlms_systemrmSubAddr.setStatus('mandatory')
ntlms_nms = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 8, 12)).setLabel("ntlms-nms")
ntlms_sdrm = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 8, 12, 2)).setLabel("ntlms-sdrm")
ntlms_sdrmTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 8, 12, 2, 1), ).setLabel("ntlms-sdrmTable")
if mibBuilder.loadTexts: ntlms_sdrmTable.setStatus('mandatory')
ntlms_sdrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 8, 12, 2, 1, 1), ).setLabel("ntlms-sdrmEntry").setIndexNames((0, "OLIVETTI-MIB", "ntlms-sdrmSysName"), (0, "OLIVETTI-MIB", "ntlms-sdrmInstName"), (0, "OLIVETTI-MIB", "ntlms-sdrmSubAddr"))
if mibBuilder.loadTexts: ntlms_sdrmEntry.setStatus('mandatory')
ntlms_sdrmSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 8, 12, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("ntlms-sdrmSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: ntlms_sdrmSysName.setStatus('mandatory')
ntlms_sdrmInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 8, 12, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("ntlms-sdrmInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: ntlms_sdrmInstName.setStatus('mandatory')
ntlms_sdrmSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 8, 12, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("ntlms-sdrmSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ntlms_sdrmSubAddr.setStatus('mandatory')
uxlmx_LM = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 13)).setLabel("uxlmx-LM")
uxlmx_SRVLM = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101)).setLabel("uxlmx-SRVLM")
uxlmx_SRVLMTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1), ).setLabel("uxlmx-SRVLMTable")
if mibBuilder.loadTexts: uxlmx_SRVLMTable.setStatus('mandatory')
uxlmx_SRVLMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1), ).setLabel("uxlmx-SRVLMEntry").setIndexNames((0, "OLIVETTI-MIB", "uxlmx-SRVLMSysName"), (0, "OLIVETTI-MIB", "uxlmx-SRVLMInstName"), (0, "OLIVETTI-MIB", "uxlmx-SRVLMSubAddr"))
if mibBuilder.loadTexts: uxlmx_SRVLMEntry.setStatus('mandatory')
uxlmx_SRVLMSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxlmx-SRVLMSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_SRVLMSysName.setStatus('mandatory')
uxlmx_SRVLMInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxlmx-SRVLMInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_SRVLMInstName.setStatus('mandatory')
uxlmx_SRVLMSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxlmx-SRVLMSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_SRVLMSubAddr.setStatus('mandatory')
uxlmx_wknumNCBs = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 4), Counter32()).setLabel("uxlmx-wknumNCBs").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wknumNCBs.setStatus('mandatory')
uxlmx_wkfiNCBs = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 5), Counter32()).setLabel("uxlmx-wkfiNCBs").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wkfiNCBs.setStatus('mandatory')
uxlmx_wkfcNCBs = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 6), Counter32()).setLabel("uxlmx-wkfcNCBs").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wkfcNCBs.setStatus('mandatory')
uxlmx_wksesstart = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 7), Counter32()).setLabel("uxlmx-wksesstart").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wksesstart.setStatus('mandatory')
uxlmx_wksessfail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 8), Counter32()).setLabel("uxlmx-wksessfail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wksessfail.setStatus('mandatory')
uxlmx_wkuses = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 9), Counter32()).setLabel("uxlmx-wkuses").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wkuses.setStatus('mandatory')
uxlmx_wkusefail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 10), Counter32()).setLabel("uxlmx-wkusefail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wkusefail.setStatus('mandatory')
uxlmx_wkautorec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 11), Counter32()).setLabel("uxlmx-wkautorec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_wkautorec.setStatus('mandatory')
uxlmx_svfopens = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 12), Counter32()).setLabel("uxlmx-svfopens").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svfopens.setStatus('mandatory')
uxlmx_svdevopens = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 13), Counter32()).setLabel("uxlmx-svdevopens").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svdevopens.setStatus('mandatory')
uxlmx_svjobsqueued = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 14), Counter32()).setLabel("uxlmx-svjobsqueued").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svjobsqueued.setStatus('mandatory')
uxlmx_svsopens = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 15), Counter32()).setLabel("uxlmx-svsopens").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svsopens.setStatus('mandatory')
uxlmx_svstimedout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 16), Counter32()).setLabel("uxlmx-svstimedout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svstimedout.setStatus('mandatory')
uxlmx_svserrorout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 17), Counter32()).setLabel("uxlmx-svserrorout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svserrorout.setStatus('mandatory')
uxlmx_svpwerrors = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 18), Counter32()).setLabel("uxlmx-svpwerrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svpwerrors.setStatus('mandatory')
uxlmx_svpermerrors = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 19), Counter32()).setLabel("uxlmx-svpermerrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svpermerrors.setStatus('mandatory')
uxlmx_svsyserrors = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 20), Counter32()).setLabel("uxlmx-svsyserrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svsyserrors.setStatus('mandatory')
uxlmx_svbytessent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 21), Counter32()).setLabel("uxlmx-svbytessent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svbytessent.setStatus('mandatory')
uxlmx_svbytesrcvd = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 22), Counter32()).setLabel("uxlmx-svbytesrcvd").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svbytesrcvd.setStatus('mandatory')
uxlmx_svavresponse = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 13, 101, 1, 1, 23), Counter32()).setLabel("uxlmx-svavresponse").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlmx_svavresponse.setStatus('mandatory')
uxos_core = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77)).setLabel("uxos-core")
uxos_disc = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 65)).setLabel("uxos-disc")
uxos_cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 1)).setLabel("uxos-cpu")
uxos_nproc = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 2)).setLabel("uxos-nproc")
uxos_ufsfreeinode = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 3)).setLabel("uxos-ufsfreeinode")
uxos_physmem = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 4)).setLabel("uxos-physmem")
uxos_filecnt = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 5)).setLabel("uxos-filecnt")
uxos_boottime = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 6)).setLabel("uxos-boottime")
uxos_sysinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7)).setLabel("uxos-sysinfo")
uxos_minfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8)).setLabel("uxos-minfo")
uxos_vminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9)).setLabel("uxos-vminfo")
uxos_syserr = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10)).setLabel("uxos-syserr")
uxos_kmeminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11)).setLabel("uxos-kmeminfo")
uxos_rtminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12)).setLabel("uxos-rtminfo")
uxos_var = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13)).setLabel("uxos-var")
uxos_shlbinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14)).setLabel("uxos-shlbinfo")
uxos_flckinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15)).setLabel("uxos-flckinfo")
uxos_tune = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16)).setLabel("uxos-tune")
uxos_avenrun = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17)).setLabel("uxos-avenrun")
uxos_vmcnt = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18)).setLabel("uxos-vmcnt")
uxos_vmrate = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19)).setLabel("uxos-vmrate")
uxos_vmsum = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20)).setLabel("uxos-vmsum")
uxos_vmtotal = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21)).setLabel("uxos-vmtotal")
uxos_lbolt = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 22)).setLabel("uxos-lbolt")
uxos_availsmem = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 23)).setLabel("uxos-availsmem")
uxos_availrmem = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 24)).setLabel("uxos-availrmem")
uxos_availkmem = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 25)).setLabel("uxos-availkmem")
uxos_namecache = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26)).setLabel("uxos-namecache")
uxos_buffercache = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27)).setLabel("uxos-buffercache")
uxos_aioinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28)).setLabel("uxos-aioinfo")
uxos_lioinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29)).setLabel("uxos-lioinfo")
uxos_ipcinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30)).setLabel("uxos-ipcinfo")
uxos_flockinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31)).setLabel("uxos-flockinfo")
uxos_segminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32)).setLabel("uxos-segminfo")
uxos_vxinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33)).setLabel("uxos-vxinfo")
uxos_scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0)).setLabel("uxos-scsi")
uxos_cpuTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 1, 1), ).setLabel("uxos-cpuTable")
if mibBuilder.loadTexts: uxos_cpuTable.setStatus('mandatory')
uxos_cpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 1, 1, 1), ).setLabel("uxos-cpuEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-cpuSysName"), (0, "OLIVETTI-MIB", "uxos-cpuInstName"), (0, "OLIVETTI-MIB", "uxos-cpuSubAddr"))
if mibBuilder.loadTexts: uxos_cpuEntry.setStatus('mandatory')
uxos_cpuSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-cpuSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuSysName.setStatus('mandatory')
uxos_cpuInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-cpuInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuInstName.setStatus('mandatory')
uxos_cpuSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-cpuSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuSubAddr.setStatus('mandatory')
uxos_numOfCpu = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 1, 1, 1, 4), Counter32()).setLabel("uxos-numOfCpu").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numOfCpu.setStatus('mandatory')
uxos_nprocTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 2, 1), ).setLabel("uxos-nprocTable")
if mibBuilder.loadTexts: uxos_nprocTable.setStatus('mandatory')
uxos_nprocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 2, 1, 1), ).setLabel("uxos-nprocEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-nprocSysName"), (0, "OLIVETTI-MIB", "uxos-nprocInstName"), (0, "OLIVETTI-MIB", "uxos-nprocSubAddr"))
if mibBuilder.loadTexts: uxos_nprocEntry.setStatus('mandatory')
uxos_nprocSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-nprocSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_nprocSysName.setStatus('mandatory')
uxos_nprocInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-nprocInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_nprocInstName.setStatus('mandatory')
uxos_nprocSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-nprocSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_nprocSubAddr.setStatus('mandatory')
uxos_numOfProc = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 2, 1, 1, 4), Counter32()).setLabel("uxos-numOfProc").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numOfProc.setStatus('mandatory')
uxos_ufsfreeinodeTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 3, 1), ).setLabel("uxos-ufsfreeinodeTable")
if mibBuilder.loadTexts: uxos_ufsfreeinodeTable.setStatus('mandatory')
uxos_ufsfreeinodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 3, 1, 1), ).setLabel("uxos-ufsfreeinodeEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-ufsfreeinodeSysName"), (0, "OLIVETTI-MIB", "uxos-ufsfreeinodeInstName"), (0, "OLIVETTI-MIB", "uxos-ufsfreeinodeSubAddr"))
if mibBuilder.loadTexts: uxos_ufsfreeinodeEntry.setStatus('mandatory')
uxos_ufsfreeinodeSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-ufsfreeinodeSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ufsfreeinodeSysName.setStatus('mandatory')
uxos_ufsfreeinodeInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-ufsfreeinodeInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ufsfreeinodeInstName.setStatus('mandatory')
uxos_ufsfreeinodeSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-ufsfreeinodeSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ufsfreeinodeSubAddr.setStatus('mandatory')
uxos_numOfUfsfreeinode = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 3, 1, 1, 4), Counter32()).setLabel("uxos-numOfUfsfreeinode").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numOfUfsfreeinode.setStatus('mandatory')
uxos_memTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 4, 1), ).setLabel("uxos-memTable")
if mibBuilder.loadTexts: uxos_memTable.setStatus('mandatory')
uxos_memEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 4, 1, 1), ).setLabel("uxos-memEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-memSysName"), (0, "OLIVETTI-MIB", "uxos-memInstName"), (0, "OLIVETTI-MIB", "uxos-memSubAddr"))
if mibBuilder.loadTexts: uxos_memEntry.setStatus('mandatory')
uxos_memSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-memSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_memSysName.setStatus('mandatory')
uxos_memInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-memInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_memInstName.setStatus('mandatory')
uxos_memSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-memSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_memSubAddr.setStatus('mandatory')
uxos_memSize = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 4, 1, 1, 4), Counter32()).setLabel("uxos-memSize").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_memSize.setStatus('mandatory')
uxos_fileTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 5, 1), ).setLabel("uxos-fileTable")
if mibBuilder.loadTexts: uxos_fileTable.setStatus('mandatory')
uxos_fileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 5, 1, 1), ).setLabel("uxos-fileEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-fileSysName"), (0, "OLIVETTI-MIB", "uxos-fileInstName"), (0, "OLIVETTI-MIB", "uxos-fileSubAddr"))
if mibBuilder.loadTexts: uxos_fileEntry.setStatus('mandatory')
uxos_fileSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-fileSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_fileSysName.setStatus('mandatory')
uxos_fileInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-fileInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_fileInstName.setStatus('mandatory')
uxos_fileSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-fileSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_fileSubAddr.setStatus('mandatory')
uxos_numOfFile = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 5, 1, 1, 4), Counter32()).setLabel("uxos-numOfFile").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numOfFile.setStatus('mandatory')
uxos_bootTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 6, 1), ).setLabel("uxos-bootTable")
if mibBuilder.loadTexts: uxos_bootTable.setStatus('mandatory')
uxos_bootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 6, 1, 1), ).setLabel("uxos-bootEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-bootSysName"), (0, "OLIVETTI-MIB", "uxos-bootInstName"), (0, "OLIVETTI-MIB", "uxos-bootSubAddr"))
if mibBuilder.loadTexts: uxos_bootEntry.setStatus('mandatory')
uxos_bootSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-bootSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_bootSysName.setStatus('mandatory')
uxos_bootInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-bootInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_bootInstName.setStatus('mandatory')
uxos_bootSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-bootSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_bootSubAddr.setStatus('mandatory')
uxos_bootTime = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 6, 1, 1, 4), Counter32()).setLabel("uxos-bootTime").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_bootTime.setStatus('mandatory')
uxos_lboltTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 22, 1), ).setLabel("uxos-lboltTable")
if mibBuilder.loadTexts: uxos_lboltTable.setStatus('mandatory')
uxos_lboltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 22, 1, 1), ).setLabel("uxos-lboltEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-lboltSysName"), (0, "OLIVETTI-MIB", "uxos-lboltInstName"), (0, "OLIVETTI-MIB", "uxos-lboltSubAddr"))
if mibBuilder.loadTexts: uxos_lboltEntry.setStatus('mandatory')
uxos_lboltSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 22, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-lboltSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lboltSysName.setStatus('mandatory')
uxos_lboltInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 22, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-lboltInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lboltInstName.setStatus('mandatory')
uxos_lboltSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 22, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-lboltSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lboltSubAddr.setStatus('mandatory')
uxos_numOfTick = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 22, 1, 1, 4), Counter32()).setLabel("uxos-numOfTick").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numOfTick.setStatus('mandatory')
uxos_kmemTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 25, 1), ).setLabel("uxos-kmemTable")
if mibBuilder.loadTexts: uxos_kmemTable.setStatus('mandatory')
uxos_kmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 25, 1, 1), ).setLabel("uxos-kmemEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-kmemSysName"), (0, "OLIVETTI-MIB", "uxos-kmemInstName"), (0, "OLIVETTI-MIB", "uxos-kmemSubAddr"))
if mibBuilder.loadTexts: uxos_kmemEntry.setStatus('mandatory')
uxos_kmemSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 25, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-kmemSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_kmemSysName.setStatus('mandatory')
uxos_kmemInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 25, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-kmemInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_kmemInstName.setStatus('mandatory')
uxos_kmemSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 25, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-kmemSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_kmemSubAddr.setStatus('mandatory')
uxos_kmemNumOfPages = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 25, 1, 1, 4), Counter32()).setLabel("uxos-kmemNumOfPages").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_kmemNumOfPages.setStatus('mandatory')
uxos_rmemTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 24, 1), ).setLabel("uxos-rmemTable")
if mibBuilder.loadTexts: uxos_rmemTable.setStatus('mandatory')
uxos_rmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 24, 1, 1), ).setLabel("uxos-rmemEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-rmemSysName"), (0, "OLIVETTI-MIB", "uxos-rmemInstName"), (0, "OLIVETTI-MIB", "uxos-rmemSubAddr"))
if mibBuilder.loadTexts: uxos_rmemEntry.setStatus('mandatory')
uxos_rmemSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 24, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-rmemSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rmemSysName.setStatus('mandatory')
uxos_rmemInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 24, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-rmemInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rmemInstName.setStatus('mandatory')
uxos_rmemSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 24, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-rmemSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rmemSubAddr.setStatus('mandatory')
uxos_rmemNumOfPages = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 24, 1, 1, 4), Counter32()).setLabel("uxos-rmemNumOfPages").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rmemNumOfPages.setStatus('mandatory')
uxos_smemTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 23, 1), ).setLabel("uxos-smemTable")
if mibBuilder.loadTexts: uxos_smemTable.setStatus('mandatory')
uxos_smemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 23, 1, 1), ).setLabel("uxos-smemEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-smemSysName"), (0, "OLIVETTI-MIB", "uxos-smemInstName"), (0, "OLIVETTI-MIB", "uxos-smemSubAddr"))
if mibBuilder.loadTexts: uxos_smemEntry.setStatus('mandatory')
uxos_smemSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 23, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-smemSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smemSysName.setStatus('mandatory')
uxos_smemInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 23, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-smemInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smemInstName.setStatus('mandatory')
uxos_smemSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 23, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-smemSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smemSubAddr.setStatus('mandatory')
uxos_smemNumOfPages = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 23, 1, 1, 4), Counter32()).setLabel("uxos-smemNumOfPages").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smemNumOfPages.setStatus('mandatory')
uxos_sysTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1), ).setLabel("uxos-sysTable")
if mibBuilder.loadTexts: uxos_sysTable.setStatus('mandatory')
uxos_sysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1), ).setLabel("uxos-sysEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-sysSysName"), (0, "OLIVETTI-MIB", "uxos-sysInstName"), (0, "OLIVETTI-MIB", "uxos-sysSubAddr"))
if mibBuilder.loadTexts: uxos_sysEntry.setStatus('mandatory')
uxos_sysSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-sysSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sysSysName.setStatus('mandatory')
uxos_sysInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-sysInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sysInstName.setStatus('mandatory')
uxos_sysSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-sysSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sysSubAddr.setStatus('mandatory')
uxos_cpuIdle = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 4), Counter32()).setLabel("uxos-cpuIdle").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuIdle.setStatus('mandatory')
uxos_cpuUser = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 5), Counter32()).setLabel("uxos-cpuUser").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuUser.setStatus('mandatory')
uxos_cpuKernel = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 6), Counter32()).setLabel("uxos-cpuKernel").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuKernel.setStatus('mandatory')
uxos_cpuWait = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 7), Counter32()).setLabel("uxos-cpuWait").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuWait.setStatus('mandatory')
uxos_cpuSxbrk = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 8), Counter32()).setLabel("uxos-cpuSxbrk").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cpuSxbrk.setStatus('mandatory')
uxos_wIo = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 9), Counter32()).setLabel("uxos-wIo").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_wIo.setStatus('mandatory')
uxos_wSwap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 10), Counter32()).setLabel("uxos-wSwap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_wSwap.setStatus('mandatory')
uxos_wPio = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 11), Counter32()).setLabel("uxos-wPio").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_wPio.setStatus('mandatory')
uxos_bread = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 12), Counter32()).setLabel("uxos-bread").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_bread.setStatus('mandatory')
uxos_bwrite = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 13), Counter32()).setLabel("uxos-bwrite").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_bwrite.setStatus('mandatory')
uxos_lread = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 14), Counter32()).setLabel("uxos-lread").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lread.setStatus('mandatory')
uxos_lwrite = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 15), Counter32()).setLabel("uxos-lwrite").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lwrite.setStatus('mandatory')
uxos_phread = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 16), Counter32()).setLabel("uxos-phread").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_phread.setStatus('mandatory')
uxos_phwrite = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 17), Counter32()).setLabel("uxos-phwrite").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_phwrite.setStatus('mandatory')
uxos_swapin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 18), Counter32()).setLabel("uxos-swapin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_swapin.setStatus('mandatory')
uxos_swapout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 19), Counter32()).setLabel("uxos-swapout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_swapout.setStatus('mandatory')
uxos_pswapin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 20), Counter32()).setLabel("uxos-pswapin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pswapin.setStatus('mandatory')
uxos_pswapout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 21), Counter32()).setLabel("uxos-pswapout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pswapout.setStatus('mandatory')
uxos_pswitch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 22), Counter32()).setLabel("uxos-pswitch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pswitch.setStatus('mandatory')
uxos_syscall = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 23), Counter32()).setLabel("uxos-syscall").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_syscall.setStatus('mandatory')
uxos_sysread = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 24), Counter32()).setLabel("uxos-sysread").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sysread.setStatus('mandatory')
uxos_syswrite = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 25), Counter32()).setLabel("uxos-syswrite").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_syswrite.setStatus('mandatory')
uxos_sysfork = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 26), Counter32()).setLabel("uxos-sysfork").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sysfork.setStatus('mandatory')
uxos_sysexec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 27), Counter32()).setLabel("uxos-sysexec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sysexec.setStatus('mandatory')
uxos_runque = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 28), Counter32()).setLabel("uxos-runque").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_runque.setStatus('mandatory')
uxos_runocc = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 29), Counter32()).setLabel("uxos-runocc").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_runocc.setStatus('mandatory')
uxos_swpque = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 30), Counter32()).setLabel("uxos-swpque").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_swpque.setStatus('mandatory')
uxos_swpocc = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 31), Counter32()).setLabel("uxos-swpocc").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_swpocc.setStatus('mandatory')
uxos_iget = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 32), Counter32()).setLabel("uxos-iget").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_iget.setStatus('mandatory')
uxos_namei = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 33), Counter32()).setLabel("uxos-namei").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_namei.setStatus('mandatory')
uxos_dirblk = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 34), Counter32()).setLabel("uxos-dirblk").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_dirblk.setStatus('mandatory')
uxos_readch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 35), Counter32()).setLabel("uxos-readch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_readch.setStatus('mandatory')
uxos_writech = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 36), Counter32()).setLabel("uxos-writech").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_writech.setStatus('mandatory')
uxos_rcvint = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 37), Counter32()).setLabel("uxos-rcvint").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rcvint.setStatus('mandatory')
uxos_xmtint = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 38), Counter32()).setLabel("uxos-xmtint").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_xmtint.setStatus('mandatory')
uxos_mdmint = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 39), Counter32()).setLabel("uxos-mdmint")
if mibBuilder.loadTexts: uxos_mdmint.setStatus('mandatory')
uxos_rawch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 40), Counter32()).setLabel("uxos-rawch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rawch.setStatus('mandatory')
uxos_canch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 41), Counter32()).setLabel("uxos-canch")
if mibBuilder.loadTexts: uxos_canch.setStatus('mandatory')
uxos_outch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 42), Counter32()).setLabel("uxos-outch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_outch.setStatus('mandatory')
uxos_msg = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 43), Counter32()).setLabel("uxos-msg").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg.setStatus('mandatory')
uxos_sema = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 7, 1, 1, 44), Counter32()).setLabel("uxos-sema").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sema.setStatus('mandatory')
uxos_minfoTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1), ).setLabel("uxos-minfoTable")
if mibBuilder.loadTexts: uxos_minfoTable.setStatus('mandatory')
uxos_minfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1), ).setLabel("uxos-minfoEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-minfoSysName"), (0, "OLIVETTI-MIB", "uxos-minfoInstName"), (0, "OLIVETTI-MIB", "uxos-minfoSubAddr"))
if mibBuilder.loadTexts: uxos_minfoEntry.setStatus('mandatory')
uxos_minfoSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-minfoSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_minfoSysName.setStatus('mandatory')
uxos_minfoInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-minfoInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_minfoInstName.setStatus('mandatory')
uxos_minfoSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-minfoSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_minfoSubAddr.setStatus('mandatory')
uxos_freememLeast = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 4), Counter32()).setLabel("uxos-freememLeast").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_freememLeast.setStatus('mandatory')
uxos_freememMost = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 5), Counter32()).setLabel("uxos-freememMost").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_freememMost.setStatus('mandatory')
uxos_freeswap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 6), Counter32()).setLabel("uxos-freeswap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_freeswap.setStatus('mandatory')
uxos_sumvfault = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 7), Counter32()).setLabel("uxos-sumvfault").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvfault.setStatus('mandatory')
uxos_demand = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 8), Counter32()).setLabel("uxos-demand").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_demand.setStatus('mandatory')
uxos_swap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 9), Counter32()).setLabel("uxos-swap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_swap.setStatus('mandatory')
uxos_cache = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 10), Counter32()).setLabel("uxos-cache").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cache.setStatus('mandatory')
uxos_file = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 11), Counter32()).setLabel("uxos-file").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_file.setStatus('mandatory')
uxos_pfault = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 12), Counter32()).setLabel("uxos-pfault").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pfault.setStatus('mandatory')
uxos_cw = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 13), Counter32()).setLabel("uxos-cw").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cw.setStatus('mandatory')
uxos_steal = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 14), Counter32()).setLabel("uxos-steal").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_steal.setStatus('mandatory')
uxos_freedpgs = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 15), Counter32()).setLabel("uxos-freedpgs").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_freedpgs.setStatus('mandatory')
uxos_vfpg = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 16), Counter32()).setLabel("uxos-vfpg")
if mibBuilder.loadTexts: uxos_vfpg.setStatus('mandatory')
uxos_sfpg = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 17), Counter32()).setLabel("uxos-sfpg")
if mibBuilder.loadTexts: uxos_sfpg.setStatus('mandatory')
uxos_vspg = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 18), Counter32()).setLabel("uxos-vspg")
if mibBuilder.loadTexts: uxos_vspg.setStatus('mandatory')
uxos_sspg = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 19), Counter32()).setLabel("uxos-sspg")
if mibBuilder.loadTexts: uxos_sspg.setStatus('mandatory')
uxos_unmodsw = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 20), Counter32()).setLabel("uxos-unmodsw").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_unmodsw.setStatus('mandatory')
uxos_unmodfl = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 21), Counter32()).setLabel("uxos-unmodfl").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_unmodfl.setStatus('mandatory')
uxos_psoutok = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 22), Counter32()).setLabel("uxos-psoutok")
if mibBuilder.loadTexts: uxos_psoutok.setStatus('mandatory')
uxos_psinfail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 23), Counter32()).setLabel("uxos-psinfail")
if mibBuilder.loadTexts: uxos_psinfail.setStatus('mandatory')
uxos_psinok = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 24), Counter32()).setLabel("uxos-psinok")
if mibBuilder.loadTexts: uxos_psinok.setStatus('mandatory')
uxos_rsout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 25), Counter32()).setLabel("uxos-rsout")
if mibBuilder.loadTexts: uxos_rsout.setStatus('mandatory')
uxos_rsin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 26), Counter32()).setLabel("uxos-rsin")
if mibBuilder.loadTexts: uxos_rsin.setStatus('mandatory')
uxos_shmem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 8, 1, 1, 27), Counter32()).setLabel("uxos-shmem")
if mibBuilder.loadTexts: uxos_shmem.setStatus('mandatory')
uxos_vminfoTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1), ).setLabel("uxos-vminfoTable")
if mibBuilder.loadTexts: uxos_vminfoTable.setStatus('mandatory')
uxos_vminfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1), ).setLabel("uxos-vminfoEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-vminfoSysName"), (0, "OLIVETTI-MIB", "uxos-vminfoInstName"), (0, "OLIVETTI-MIB", "uxos-vminfoSubAddr"))
if mibBuilder.loadTexts: uxos_vminfoEntry.setStatus('mandatory')
uxos_vminfoSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vminfoSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vminfoSysName.setStatus('mandatory')
uxos_vminfoInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vminfoInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vminfoInstName.setStatus('mandatory')
uxos_vminfoSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vminfoSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vminfoSubAddr.setStatus('mandatory')
uxos_vPgrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 4), Counter32()).setLabel("uxos-vPgrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPgrec.setStatus('mandatory')
uxos_vXsfrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 5), Counter32()).setLabel("uxos-vXsfrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vXsfrec.setStatus('mandatory')
uxos_vXifrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 6), Counter32()).setLabel("uxos-vXifrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vXifrec.setStatus('mandatory')
uxos_vPgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 7), Counter32()).setLabel("uxos-vPgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPgin.setStatus('mandatory')
uxos_vPgpgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 8), Counter32()).setLabel("uxos-vPgpgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPgpgin.setStatus('mandatory')
uxos_vPgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 9), Counter32()).setLabel("uxos-vPgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPgout.setStatus('mandatory')
uxos_vPgpgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 10), Counter32()).setLabel("uxos-vPgpgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPgpgout.setStatus('mandatory')
uxos_vSwpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 11), Counter32()).setLabel("uxos-vSwpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vSwpout.setStatus('mandatory')
uxos_vPswpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 12), Counter32()).setLabel("uxos-vPswpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPswpout.setStatus('mandatory')
uxos_vSwpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 13), Counter32()).setLabel("uxos-vSwpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vSwpin.setStatus('mandatory')
uxos_vPswpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 14), Counter32()).setLabel("uxos-vPswpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPswpin.setStatus('mandatory')
uxos_vDfree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 15), Counter32()).setLabel("uxos-vDfree").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vDfree.setStatus('mandatory')
uxos_vScan = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 16), Counter32()).setLabel("uxos-vScan").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vScan.setStatus('mandatory')
uxos_vPfault = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 17), Counter32()).setLabel("uxos-vPfault").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPfault.setStatus('mandatory')
uxos_vVfault = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 18), Counter32()).setLabel("uxos-vVfault").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vVfault.setStatus('mandatory')
uxos_vSftlock = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 9, 1, 1, 19), Counter32()).setLabel("uxos-vSftlock").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vSftlock.setStatus('mandatory')
uxos_syserrTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1), ).setLabel("uxos-syserrTable")
if mibBuilder.loadTexts: uxos_syserrTable.setStatus('mandatory')
uxos_syserrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1), ).setLabel("uxos-syserrEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-syserrSysName"), (0, "OLIVETTI-MIB", "uxos-syserrInstName"), (0, "OLIVETTI-MIB", "uxos-syserrSubAddr"))
if mibBuilder.loadTexts: uxos_syserrEntry.setStatus('mandatory')
uxos_syserrSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-syserrSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_syserrSysName.setStatus('mandatory')
uxos_syserrInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-syserrInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_syserrInstName.setStatus('mandatory')
uxos_syserrSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-syserrSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_syserrSubAddr.setStatus('mandatory')
uxos_inodeovf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 4), Counter32()).setLabel("uxos-inodeovf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_inodeovf.setStatus('mandatory')
uxos_ufsinodeovf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 5), Counter32()).setLabel("uxos-ufsinodeovf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ufsinodeovf.setStatus('mandatory')
uxos_fileovf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 6), Counter32()).setLabel("uxos-fileovf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_fileovf.setStatus('mandatory')
uxos_textovf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 7), Counter32()).setLabel("uxos-textovf")
if mibBuilder.loadTexts: uxos_textovf.setStatus('mandatory')
uxos_procovf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 10, 1, 1, 8), Counter32()).setLabel("uxos-procovf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_procovf.setStatus('mandatory')
uxos_kmeminfoTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1), ).setLabel("uxos-kmeminfoTable")
if mibBuilder.loadTexts: uxos_kmeminfoTable.setStatus('mandatory')
uxos_kmeminfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1), ).setLabel("uxos-kmeminfoEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-kmeminfoSysName"), (0, "OLIVETTI-MIB", "uxos-kmeminfoInstName"), (0, "OLIVETTI-MIB", "uxos-kmeminfoSubAddr"))
if mibBuilder.loadTexts: uxos_kmeminfoEntry.setStatus('mandatory')
uxos_kmeminfoSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-kmeminfoSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_kmeminfoSysName.setStatus('mandatory')
uxos_kmeminfoInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-kmeminfoInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_kmeminfoInstName.setStatus('mandatory')
uxos_kmeminfoSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-kmeminfoSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_kmeminfoSubAddr.setStatus('mandatory')
uxos_smlMem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 4), Counter32()).setLabel("uxos-smlMem").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smlMem.setStatus('mandatory')
uxos_smlAlloc = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 5), Counter32()).setLabel("uxos-smlAlloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smlAlloc.setStatus('mandatory')
uxos_smlFail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 6), Counter32()).setLabel("uxos-smlFail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smlFail.setStatus('mandatory')
uxos_lgMem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 7), Counter32()).setLabel("uxos-lgMem").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lgMem.setStatus('mandatory')
uxos_lgAlloc = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 8), Counter32()).setLabel("uxos-lgAlloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lgAlloc.setStatus('mandatory')
uxos_lgFail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 9), Counter32()).setLabel("uxos-lgFail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lgFail.setStatus('mandatory')
uxos_ovszMem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 10), Counter32()).setLabel("uxos-ovszMem").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ovszMem.setStatus('mandatory')
uxos_ovszAlloc = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 11), Counter32()).setLabel("uxos-ovszAlloc").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ovszAlloc.setStatus('mandatory')
uxos_ovszFail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 11, 1, 1, 12), Counter32()).setLabel("uxos-ovszFail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ovszFail.setStatus('mandatory')
uxos_rtminfoTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1), ).setLabel("uxos-rtminfoTable")
if mibBuilder.loadTexts: uxos_rtminfoTable.setStatus('mandatory')
uxos_rtminfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1, 1), ).setLabel("uxos-rtminfoEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-rtminfoSysName"), (0, "OLIVETTI-MIB", "uxos-rtminfoInstName"), (0, "OLIVETTI-MIB", "uxos-rtminfoSubAddr"))
if mibBuilder.loadTexts: uxos_rtminfoEntry.setStatus('mandatory')
uxos_rtminfoSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-rtminfoSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rtminfoSysName.setStatus('mandatory')
uxos_rtminfoInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-rtminfoInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rtminfoInstName.setStatus('mandatory')
uxos_rtminfoSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-rtminfoSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rtminfoSubAddr.setStatus('mandatory')
uxos_evPost = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1, 1, 4), Counter32()).setLabel("uxos-evPost").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_evPost.setStatus('mandatory')
uxos_evPoll = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1, 1, 5), Counter32()).setLabel("uxos-evPoll").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_evPoll.setStatus('mandatory')
uxos_evTrap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 12, 1, 1, 6), Counter32()).setLabel("uxos-evTrap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_evTrap.setStatus('mandatory')
uxos_varTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1), ).setLabel("uxos-varTable")
if mibBuilder.loadTexts: uxos_varTable.setStatus('mandatory')
uxos_varEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1), ).setLabel("uxos-varEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-varSysName"), (0, "OLIVETTI-MIB", "uxos-varInstName"), (0, "OLIVETTI-MIB", "uxos-varSubAddr"))
if mibBuilder.loadTexts: uxos_varEntry.setStatus('mandatory')
uxos_varSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-varSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_varSysName.setStatus('mandatory')
uxos_varInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-varInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_varInstName.setStatus('mandatory')
uxos_varSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-varSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_varSubAddr.setStatus('mandatory')
uxos_vBuf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 4), Counter32()).setLabel("uxos-vBuf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vBuf.setStatus('mandatory')
uxos_vCall = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 5), Counter32()).setLabel("uxos-vCall").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vCall.setStatus('mandatory')
uxos_vProc = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 6), Counter32()).setLabel("uxos-vProc").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vProc.setStatus('mandatory')
uxos_vFiller = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 7), Counter32()).setLabel("uxos-vFiller")
if mibBuilder.loadTexts: uxos_vFiller.setStatus('mandatory')
uxos_vNglobpris = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 8), Counter32()).setLabel("uxos-vNglobpris").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vNglobpris.setStatus('mandatory')
uxos_vMaxsyspri = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 9), Counter32()).setLabel("uxos-vMaxsyspri").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vMaxsyspri.setStatus('mandatory')
uxos_vClist = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 10), Counter32()).setLabel("uxos-vClist").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vClist.setStatus('mandatory')
uxos_vMaxup = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 11), Counter32()).setLabel("uxos-vMaxup").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vMaxup.setStatus('mandatory')
uxos_vHbuf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 12), Counter32()).setLabel("uxos-vHbuf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vHbuf.setStatus('mandatory')
uxos_vHmask = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 13), Counter32()).setLabel("uxos-vHmask").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vHmask.setStatus('mandatory')
uxos_vPbuf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 14), Counter32()).setLabel("uxos-vPbuf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPbuf.setStatus('mandatory')
uxos_vSptmap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 15), Counter32()).setLabel("uxos-vSptmap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vSptmap.setStatus('mandatory')
uxos_vMaxpmem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 16), Counter32()).setLabel("uxos-vMaxpmem").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vMaxpmem.setStatus('mandatory')
uxos_vAutoup = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 17), Counter32()).setLabel("uxos-vAutoup").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vAutoup.setStatus('mandatory')
uxos_vBufhwm = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 18), Counter32()).setLabel("uxos-vBufhwm").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vBufhwm.setStatus('mandatory')
uxos_vScrn = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 19), Counter32()).setLabel("uxos-vScrn").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vScrn.setStatus('mandatory')
uxos_vEmap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 20), Counter32()).setLabel("uxos-vEmap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vEmap.setStatus('mandatory')
uxos_vSxt = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 21), Counter32()).setLabel("uxos-vSxt").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vSxt.setStatus('mandatory')
uxos_vXsdsegs = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 22), Counter32()).setLabel("uxos-vXsdsegs").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vXsdsegs.setStatus('mandatory')
uxos_vXsdslots = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 23), Counter32()).setLabel("uxos-vXsdslots").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vXsdslots.setStatus('mandatory')
uxos_vPhash = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 13, 1, 1, 24), Counter32()).setLabel("uxos-vPhash").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vPhash.setStatus('mandatory')
uxos_shlbinfoTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1), ).setLabel("uxos-shlbinfoTable")
if mibBuilder.loadTexts: uxos_shlbinfoTable.setStatus('mandatory')
uxos_shlbinfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1), ).setLabel("uxos-shlbinfoEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-shlbinfoSysName"), (0, "OLIVETTI-MIB", "uxos-shlbinfoInstName"), (0, "OLIVETTI-MIB", "uxos-shlbinfoSubAddr"))
if mibBuilder.loadTexts: uxos_shlbinfoEntry.setStatus('mandatory')
uxos_shlbinfoSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-shlbinfoSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shlbinfoSysName.setStatus('mandatory')
uxos_shlbinfoInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-shlbinfoInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shlbinfoInstName.setStatus('mandatory')
uxos_shlbinfoSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-shlbinfoSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shlbinfoSubAddr.setStatus('mandatory')
uxos_shlbs = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1, 4), Counter32()).setLabel("uxos-shlbs").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shlbs.setStatus('mandatory')
uxos_shlblnks = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1, 5), Counter32()).setLabel("uxos-shlblnks").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shlblnks.setStatus('mandatory')
uxos_shlbovf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1, 6), Counter32()).setLabel("uxos-shlbovf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shlbovf.setStatus('mandatory')
uxos_shlbatts = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 14, 1, 1, 7), Counter32()).setLabel("uxos-shlbatts").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shlbatts.setStatus('mandatory')
uxos_flckinfoTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15, 1), ).setLabel("uxos-flckinfoTable")
if mibBuilder.loadTexts: uxos_flckinfoTable.setStatus('mandatory')
uxos_flckinfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15, 1, 1), ).setLabel("uxos-flckinfoEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-flckinfoSysName"), (0, "OLIVETTI-MIB", "uxos-flckinfoInstName"), (0, "OLIVETTI-MIB", "uxos-flckinfoSubAddr"))
if mibBuilder.loadTexts: uxos_flckinfoEntry.setStatus('mandatory')
uxos_flckinfoSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-flckinfoSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_flckinfoSysName.setStatus('mandatory')
uxos_flckinfoInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-flckinfoInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_flckinfoInstName.setStatus('mandatory')
uxos_flckinfoSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-flckinfoSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_flckinfoSubAddr.setStatus('mandatory')
uxos_reccnt = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15, 1, 1, 4), Counter32()).setLabel("uxos-reccnt").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_reccnt.setStatus('mandatory')
uxos_rectot = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 15, 1, 1, 5), Counter32()).setLabel("uxos-rectot").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rectot.setStatus('mandatory')
uxos_tuneTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1), ).setLabel("uxos-tuneTable")
if mibBuilder.loadTexts: uxos_tuneTable.setStatus('mandatory')
uxos_tuneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1), ).setLabel("uxos-tuneEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-tuneSysName"), (0, "OLIVETTI-MIB", "uxos-tuneInstName"), (0, "OLIVETTI-MIB", "uxos-tuneSubAddr"))
if mibBuilder.loadTexts: uxos_tuneEntry.setStatus('mandatory')
uxos_tuneSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-tuneSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tuneSysName.setStatus('mandatory')
uxos_tuneInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-tuneInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tuneInstName.setStatus('mandatory')
uxos_tuneSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-tuneSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tuneSubAddr.setStatus('mandatory')
uxos_tGpgslo = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 4), Counter32()).setLabel("uxos-tGpgslo").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tGpgslo.setStatus('mandatory')
uxos_tGpgshi = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 5), Counter32()).setLabel("uxos-tGpgshi").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tGpgshi.setStatus('mandatory')
uxos_tPadd = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 6), Counter32()).setLabel("uxos-tPadd").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tPadd.setStatus('mandatory')
uxos_tNotused = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 7), Counter32()).setLabel("uxos-tNotused")
if mibBuilder.loadTexts: uxos_tNotused.setStatus('mandatory')
uxos_tAgeinterval = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 8), Counter32()).setLabel("uxos-tAgeinterval").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tAgeinterval.setStatus('mandatory')
uxos_tPadd11 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 9), Counter32()).setLabel("uxos-tPadd11").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tPadd11.setStatus('mandatory')
uxos_tPadd12 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 10), Counter32()).setLabel("uxos-tPadd12").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tPadd12.setStatus('mandatory')
uxos_tPadd13 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 11), Counter32()).setLabel("uxos-tPadd13").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tPadd13.setStatus('mandatory')
uxos_tFsflushr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 12), Counter32()).setLabel("uxos-tFsflushr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tFsflushr.setStatus('mandatory')
uxos_tMinarmem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 13), Counter32()).setLabel("uxos-tMinarmem").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tMinarmem.setStatus('mandatory')
uxos_tMinasmem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 14), Counter32()).setLabel("uxos-tMinasmem").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tMinasmem.setStatus('mandatory')
uxos_tDmalimit = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 15), Counter32()).setLabel("uxos-tDmalimit").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tDmalimit.setStatus('mandatory')
uxos_tFlckrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 16), Counter32()).setLabel("uxos-tFlckrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tFlckrec.setStatus('mandatory')
uxos_tMinakmem = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 16, 1, 1, 17), Counter32()).setLabel("uxos-tMinakmem").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tMinakmem.setStatus('mandatory')
uxos_avenrunTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1), ).setLabel("uxos-avenrunTable")
if mibBuilder.loadTexts: uxos_avenrunTable.setStatus('mandatory')
uxos_avenrunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1, 1), ).setLabel("uxos-avenrunEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-avenrunSysName"), (0, "OLIVETTI-MIB", "uxos-avenrunInstName"), (0, "OLIVETTI-MIB", "uxos-avenrunSubAddr"))
if mibBuilder.loadTexts: uxos_avenrunEntry.setStatus('mandatory')
uxos_avenrunSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-avenrunSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_avenrunSysName.setStatus('mandatory')
uxos_avenrunInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-avenrunInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_avenrunInstName.setStatus('mandatory')
uxos_avenrunSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-avenrunSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_avenrunSubAddr.setStatus('mandatory')
uxos_avenrun1 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1, 1, 4), Counter32()).setLabel("uxos-avenrun1").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_avenrun1.setStatus('mandatory')
uxos_avenrun2 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1, 1, 5), Counter32()).setLabel("uxos-avenrun2").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_avenrun2.setStatus('mandatory')
uxos_avenrun3 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 17, 1, 1, 6), Counter32()).setLabel("uxos-avenrun3").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_avenrun3.setStatus('mandatory')
uxos_vmcntTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1), ).setLabel("uxos-vmcntTable")
if mibBuilder.loadTexts: uxos_vmcntTable.setStatus('mandatory')
uxos_vmcntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1), ).setLabel("uxos-vmcntEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-vmcntSysName"), (0, "OLIVETTI-MIB", "uxos-vmcntInstName"), (0, "OLIVETTI-MIB", "uxos-vmcntSubAddr"))
if mibBuilder.loadTexts: uxos_vmcntEntry.setStatus('mandatory')
uxos_vmcntSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmcntSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmcntSysName.setStatus('mandatory')
uxos_vmcntInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmcntInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmcntInstName.setStatus('mandatory')
uxos_vmcntSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmcntSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmcntSubAddr.setStatus('mandatory')
uxos_cntvSwtch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 4), Counter32()).setLabel("uxos-cntvSwtch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvSwtch.setStatus('mandatory')
uxos_cntvTrap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 5), Counter32()).setLabel("uxos-cntvTrap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvTrap.setStatus('mandatory')
uxos_cntvSyscall = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 6), Counter32()).setLabel("uxos-cntvSyscall").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvSyscall.setStatus('mandatory')
uxos_cntvIntr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 7), Counter32()).setLabel("uxos-cntvIntr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvIntr.setStatus('mandatory')
uxos_cntvPdma = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 8), Counter32()).setLabel("uxos-cntvPdma").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPdma.setStatus('mandatory')
uxos_cntvPswpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 9), Counter32()).setLabel("uxos-cntvPswpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPswpin.setStatus('mandatory')
uxos_cntvPswpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 10), Counter32()).setLabel("uxos-cntvPswpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPswpout.setStatus('mandatory')
uxos_cntvPgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 11), Counter32()).setLabel("uxos-cntvPgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPgin.setStatus('mandatory')
uxos_cntvPgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 12), Counter32()).setLabel("uxos-cntvPgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPgout.setStatus('mandatory')
uxos_cntvPgpgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 13), Counter32()).setLabel("uxos-cntvPgpgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPgpgin.setStatus('mandatory')
uxos_cntvPgpgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 14), Counter32()).setLabel("uxos-cntvPgpgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPgpgout.setStatus('mandatory')
uxos_cntvIntrans = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 15), Counter32()).setLabel("uxos-cntvIntrans").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvIntrans.setStatus('mandatory')
uxos_cntvPgrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 16), Counter32()).setLabel("uxos-cntvPgrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPgrec.setStatus('mandatory')
uxos_cntvXsfrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 17), Counter32()).setLabel("uxos-cntvXsfrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvXsfrec.setStatus('mandatory')
uxos_cntvXifrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 18), Counter32()).setLabel("uxos-cntvXifrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvXifrec.setStatus('mandatory')
uxos_cntvExfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 19), Counter32()).setLabel("uxos-cntvExfod")
if mibBuilder.loadTexts: uxos_cntvExfod.setStatus('mandatory')
uxos_cntvZfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 20), Counter32()).setLabel("uxos-cntvZfod").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvZfod.setStatus('mandatory')
uxos_cntvVrfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 21), Counter32()).setLabel("uxos-cntvVrfod")
if mibBuilder.loadTexts: uxos_cntvVrfod.setStatus('mandatory')
uxos_cntvNexfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 22), Counter32()).setLabel("uxos-cntvNexfod")
if mibBuilder.loadTexts: uxos_cntvNexfod.setStatus('mandatory')
uxos_cntvNzfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 23), Counter32()).setLabel("uxos-cntvNzfod")
if mibBuilder.loadTexts: uxos_cntvNzfod.setStatus('mandatory')
uxos_cntvNvrfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 24), Counter32()).setLabel("uxos-cntvNvrfod")
if mibBuilder.loadTexts: uxos_cntvNvrfod.setStatus('mandatory')
uxos_cntvPgfrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 25), Counter32()).setLabel("uxos-cntvPgfrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvPgfrec.setStatus('mandatory')
uxos_cntvFaults = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 26), Counter32()).setLabel("uxos-cntvFaults").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvFaults.setStatus('mandatory')
uxos_cntvScan = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 27), Counter32()).setLabel("uxos-cntvScan").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvScan.setStatus('mandatory')
uxos_cntvRev = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 28), Counter32()).setLabel("uxos-cntvRev").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvRev.setStatus('mandatory')
uxos_cntvSeqfree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 29), Counter32()).setLabel("uxos-cntvSeqfree")
if mibBuilder.loadTexts: uxos_cntvSeqfree.setStatus('mandatory')
uxos_cntvDfree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 30), Counter32()).setLabel("uxos-cntvDfree").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvDfree.setStatus('mandatory')
uxos_cntvFastpgrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 31), Counter32()).setLabel("uxos-cntvFastpgrec")
if mibBuilder.loadTexts: uxos_cntvFastpgrec.setStatus('mandatory')
uxos_cntvSwpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 32), Counter32()).setLabel("uxos-cntvSwpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvSwpin.setStatus('mandatory')
uxos_cntvSwpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 18, 1, 1, 33), Counter32()).setLabel("uxos-cntvSwpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cntvSwpout.setStatus('mandatory')
uxos_vmrateTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1), ).setLabel("uxos-vmrateTable")
if mibBuilder.loadTexts: uxos_vmrateTable.setStatus('mandatory')
uxos_vmrateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1), ).setLabel("uxos-vmrateEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-vmrateSysName"), (0, "OLIVETTI-MIB", "uxos-vmrateInstName"), (0, "OLIVETTI-MIB", "uxos-vmrateSubAddr"))
if mibBuilder.loadTexts: uxos_vmrateEntry.setStatus('mandatory')
uxos_vmrateSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmrateSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmrateSysName.setStatus('mandatory')
uxos_vmrateInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmrateInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmrateInstName.setStatus('mandatory')
uxos_vmrateSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmrateSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmrateSubAddr.setStatus('mandatory')
uxos_ratevSwtch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 4), Counter32()).setLabel("uxos-ratevSwtch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevSwtch.setStatus('mandatory')
uxos_ratevTrap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 5), Counter32()).setLabel("uxos-ratevTrap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevTrap.setStatus('mandatory')
uxos_ratevSyscall = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 6), Counter32()).setLabel("uxos-ratevSyscall").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevSyscall.setStatus('mandatory')
uxos_ratevIntr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 7), Counter32()).setLabel("uxos-ratevIntr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevIntr.setStatus('mandatory')
uxos_ratevPdma = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 8), Counter32()).setLabel("uxos-ratevPdma").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPdma.setStatus('mandatory')
uxos_ratevPswpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 9), Counter32()).setLabel("uxos-ratevPswpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPswpin.setStatus('mandatory')
uxos_ratevPswpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 10), Counter32()).setLabel("uxos-ratevPswpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPswpout.setStatus('mandatory')
uxos_ratevPgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 11), Counter32()).setLabel("uxos-ratevPgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPgin.setStatus('mandatory')
uxos_ratevPgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 12), Counter32()).setLabel("uxos-ratevPgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPgout.setStatus('mandatory')
uxos_ratevPgpgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 13), Counter32()).setLabel("uxos-ratevPgpgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPgpgin.setStatus('mandatory')
uxos_ratevPgpgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 14), Counter32()).setLabel("uxos-ratevPgpgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPgpgout.setStatus('mandatory')
uxos_ratevIntrans = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 15), Counter32()).setLabel("uxos-ratevIntrans").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevIntrans.setStatus('mandatory')
uxos_ratevPgrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 16), Counter32()).setLabel("uxos-ratevPgrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPgrec.setStatus('mandatory')
uxos_ratevXsfrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 17), Counter32()).setLabel("uxos-ratevXsfrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevXsfrec.setStatus('mandatory')
uxos_ratevXifrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 18), Counter32()).setLabel("uxos-ratevXifrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevXifrec.setStatus('mandatory')
uxos_ratevExfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 19), Counter32()).setLabel("uxos-ratevExfod")
if mibBuilder.loadTexts: uxos_ratevExfod.setStatus('mandatory')
uxos_ratevZfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 20), Counter32()).setLabel("uxos-ratevZfod").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevZfod.setStatus('mandatory')
uxos_ratevVrfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 21), Counter32()).setLabel("uxos-ratevVrfod")
if mibBuilder.loadTexts: uxos_ratevVrfod.setStatus('mandatory')
uxos_ratevNexfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 22), Counter32()).setLabel("uxos-ratevNexfod")
if mibBuilder.loadTexts: uxos_ratevNexfod.setStatus('mandatory')
uxos_ratevNzfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 23), Counter32()).setLabel("uxos-ratevNzfod")
if mibBuilder.loadTexts: uxos_ratevNzfod.setStatus('mandatory')
uxos_ratevNvrfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 24), Counter32()).setLabel("uxos-ratevNvrfod")
if mibBuilder.loadTexts: uxos_ratevNvrfod.setStatus('mandatory')
uxos_ratevPgfrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 25), Counter32()).setLabel("uxos-ratevPgfrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevPgfrec.setStatus('mandatory')
uxos_ratevFaults = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 26), Counter32()).setLabel("uxos-ratevFaults").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevFaults.setStatus('mandatory')
uxos_ratevScan = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 27), Counter32()).setLabel("uxos-ratevScan").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevScan.setStatus('mandatory')
uxos_ratevRev = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 28), Counter32()).setLabel("uxos-ratevRev").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevRev.setStatus('mandatory')
uxos_ratevSeqfree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 29), Counter32()).setLabel("uxos-ratevSeqfree")
if mibBuilder.loadTexts: uxos_ratevSeqfree.setStatus('mandatory')
uxos_ratevDfree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 30), Counter32()).setLabel("uxos-ratevDfree").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevDfree.setStatus('mandatory')
uxos_ratevFastpgrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 31), Counter32()).setLabel("uxos-ratevFastpgrec")
if mibBuilder.loadTexts: uxos_ratevFastpgrec.setStatus('mandatory')
uxos_ratevSwpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 32), Counter32()).setLabel("uxos-ratevSwpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevSwpin.setStatus('mandatory')
uxos_ratevSwpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 19, 1, 1, 33), Counter32()).setLabel("uxos-ratevSwpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ratevSwpout.setStatus('mandatory')
uxos_vmsumTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1), ).setLabel("uxos-vmsumTable")
if mibBuilder.loadTexts: uxos_vmsumTable.setStatus('mandatory')
uxos_vmsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1), ).setLabel("uxos-vmsumEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-vmsumSysName"), (0, "OLIVETTI-MIB", "uxos-vmsumInstName"), (0, "OLIVETTI-MIB", "uxos-vmsumSubAddr"))
if mibBuilder.loadTexts: uxos_vmsumEntry.setStatus('mandatory')
uxos_vmsumSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmsumSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmsumSysName.setStatus('mandatory')
uxos_vmsumInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmsumInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmsumInstName.setStatus('mandatory')
uxos_vmsumSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmsumSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmsumSubAddr.setStatus('mandatory')
uxos_sumvSwtch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 4), Counter32()).setLabel("uxos-sumvSwtch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvSwtch.setStatus('mandatory')
uxos_sumvTrap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 5), Counter32()).setLabel("uxos-sumvTrap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvTrap.setStatus('mandatory')
uxos_sumvSyscall = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 6), Counter32()).setLabel("uxos-sumvSyscall").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvSyscall.setStatus('mandatory')
uxos_sumvIntr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 7), Counter32()).setLabel("uxos-sumvIntr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvIntr.setStatus('mandatory')
uxos_sumvPdma = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 8), Counter32()).setLabel("uxos-sumvPdma").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPdma.setStatus('mandatory')
uxos_sumvPswpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 9), Counter32()).setLabel("uxos-sumvPswpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPswpin.setStatus('mandatory')
uxos_sumvPswpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 10), Counter32()).setLabel("uxos-sumvPswpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPswpout.setStatus('mandatory')
uxos_sumvPgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 11), Counter32()).setLabel("uxos-sumvPgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPgin.setStatus('mandatory')
uxos_sumvPgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 12), Counter32()).setLabel("uxos-sumvPgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPgout.setStatus('mandatory')
uxos_sumvPgpgin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 13), Counter32()).setLabel("uxos-sumvPgpgin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPgpgin.setStatus('mandatory')
uxos_sumvPgpgout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 14), Counter32()).setLabel("uxos-sumvPgpgout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPgpgout.setStatus('mandatory')
uxos_sumvIntrans = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 15), Counter32()).setLabel("uxos-sumvIntrans").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvIntrans.setStatus('mandatory')
uxos_sumvPgrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 16), Counter32()).setLabel("uxos-sumvPgrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPgrec.setStatus('mandatory')
uxos_sumvXsfrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 17), Counter32()).setLabel("uxos-sumvXsfrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvXsfrec.setStatus('mandatory')
uxos_sumvXifrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 18), Counter32()).setLabel("uxos-sumvXifrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvXifrec.setStatus('mandatory')
uxos_sumvExfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 19), Counter32()).setLabel("uxos-sumvExfod")
if mibBuilder.loadTexts: uxos_sumvExfod.setStatus('mandatory')
uxos_sumvZfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 20), Counter32()).setLabel("uxos-sumvZfod").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvZfod.setStatus('mandatory')
uxos_sumvVrfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 21), Counter32()).setLabel("uxos-sumvVrfod")
if mibBuilder.loadTexts: uxos_sumvVrfod.setStatus('mandatory')
uxos_sumvNexfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 22), Counter32()).setLabel("uxos-sumvNexfod")
if mibBuilder.loadTexts: uxos_sumvNexfod.setStatus('mandatory')
uxos_sumvNzfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 23), Counter32()).setLabel("uxos-sumvNzfod")
if mibBuilder.loadTexts: uxos_sumvNzfod.setStatus('mandatory')
uxos_sumvNvrfod = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 24), Counter32()).setLabel("uxos-sumvNvrfod")
if mibBuilder.loadTexts: uxos_sumvNvrfod.setStatus('mandatory')
uxos_sumvPgfrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 25), Counter32()).setLabel("uxos-sumvPgfrec").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvPgfrec.setStatus('mandatory')
uxos_sumvFaults = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 26), Counter32()).setLabel("uxos-sumvFaults").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvFaults.setStatus('mandatory')
uxos_sumvScan = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 27), Counter32()).setLabel("uxos-sumvScan").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvScan.setStatus('mandatory')
uxos_sumvRev = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 28), Counter32()).setLabel("uxos-sumvRev").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvRev.setStatus('mandatory')
uxos_sumvSeqfree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 29), Counter32()).setLabel("uxos-sumvSeqfree")
if mibBuilder.loadTexts: uxos_sumvSeqfree.setStatus('mandatory')
uxos_sumvDfree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 30), Counter32()).setLabel("uxos-sumvDfree").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvDfree.setStatus('mandatory')
uxos_sumvFastpgrec = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 31), Counter32()).setLabel("uxos-sumvFastpgrec")
if mibBuilder.loadTexts: uxos_sumvFastpgrec.setStatus('mandatory')
uxos_sumvSwpin = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 32), Counter32()).setLabel("uxos-sumvSwpin").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvSwpin.setStatus('mandatory')
uxos_sumvSwpout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 20, 1, 1, 33), Counter32()).setLabel("uxos-sumvSwpout").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sumvSwpout.setStatus('mandatory')
uxos_vmtotalTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1), ).setLabel("uxos-vmtotalTable")
if mibBuilder.loadTexts: uxos_vmtotalTable.setStatus('mandatory')
uxos_vmtotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1), ).setLabel("uxos-vmtotalEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-vmtotalSysName"), (0, "OLIVETTI-MIB", "uxos-vmtotalInstName"), (0, "OLIVETTI-MIB", "uxos-vmtotalSubAddr"))
if mibBuilder.loadTexts: uxos_vmtotalEntry.setStatus('mandatory')
uxos_vmtotalSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmtotalSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmtotalSysName.setStatus('mandatory')
uxos_vmtotalInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmtotalInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmtotalInstName.setStatus('mandatory')
uxos_vmtotalSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vmtotalSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vmtotalSubAddr.setStatus('mandatory')
uxos_tRq = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 4), Counter32()).setLabel("uxos-tRq").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tRq.setStatus('mandatory')
uxos_tDw = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 5), Counter32()).setLabel("uxos-tDw").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tDw.setStatus('mandatory')
uxos_tPw = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 6), Counter32()).setLabel("uxos-tPw").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tPw.setStatus('mandatory')
uxos_tSl = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 7), Counter32()).setLabel("uxos-tSl").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tSl.setStatus('mandatory')
uxos_tSw = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 8), Counter32()).setLabel("uxos-tSw").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tSw.setStatus('mandatory')
uxos_tVm = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 9), Counter32()).setLabel("uxos-tVm")
if mibBuilder.loadTexts: uxos_tVm.setStatus('mandatory')
uxos_tAvm = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 10), Counter32()).setLabel("uxos-tAvm")
if mibBuilder.loadTexts: uxos_tAvm.setStatus('mandatory')
uxos_tRm = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 11), Counter32()).setLabel("uxos-tRm").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tRm.setStatus('mandatory')
uxos_tArm = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 12), Counter32()).setLabel("uxos-tArm").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tArm.setStatus('mandatory')
uxos_tVmtxt = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 13), Counter32()).setLabel("uxos-tVmtxt").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tVmtxt.setStatus('mandatory')
uxos_tAvmtxt = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 14), Counter32()).setLabel("uxos-tAvmtxt")
if mibBuilder.loadTexts: uxos_tAvmtxt.setStatus('mandatory')
uxos_tRmtxt = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 15), Counter32()).setLabel("uxos-tRmtxt")
if mibBuilder.loadTexts: uxos_tRmtxt.setStatus('mandatory')
uxos_tArmtxt = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 16), Counter32()).setLabel("uxos-tArmtxt")
if mibBuilder.loadTexts: uxos_tArmtxt.setStatus('mandatory')
uxos_tFree = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 21, 1, 1, 17), Counter32()).setLabel("uxos-tFree").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_tFree.setStatus('mandatory')
uxos_namecacheTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1), ).setLabel("uxos-namecacheTable")
if mibBuilder.loadTexts: uxos_namecacheTable.setStatus('mandatory')
uxos_namecacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1), ).setLabel("uxos-namecacheEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-namecacheSysName"), (0, "OLIVETTI-MIB", "uxos-namecacheInstName"), (0, "OLIVETTI-MIB", "uxos-namecacheSubAddr"))
if mibBuilder.loadTexts: uxos_namecacheEntry.setStatus('mandatory')
uxos_namecacheSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-namecacheSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_namecacheSysName.setStatus('mandatory')
uxos_namecacheInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-namecacheInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_namecacheInstName.setStatus('mandatory')
uxos_namecacheSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-namecacheSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_namecacheSubAddr.setStatus('mandatory')
uxos_hits = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 4), Counter32()).setLabel("uxos-hits").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_hits.setStatus('mandatory')
uxos_misses = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 5), Counter32()).setLabel("uxos-misses").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_misses.setStatus('mandatory')
uxos_enters = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 6), Counter32()).setLabel("uxos-enters").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_enters.setStatus('mandatory')
uxos_dblEnters = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 7), Counter32()).setLabel("uxos-dblEnters").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_dblEnters.setStatus('mandatory')
uxos_longEnter = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 8), Counter32()).setLabel("uxos-longEnter").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_longEnter.setStatus('mandatory')
uxos_longLook = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 9), Counter32()).setLabel("uxos-longLook").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_longLook.setStatus('mandatory')
uxos_lruEmpty = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 10), Counter32()).setLabel("uxos-lruEmpty")
if mibBuilder.loadTexts: uxos_lruEmpty.setStatus('mandatory')
uxos_purges = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 26, 1, 1, 11), Counter32()).setLabel("uxos-purges").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_purges.setStatus('mandatory')
uxos_buffercacheTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1), ).setLabel("uxos-buffercacheTable")
if mibBuilder.loadTexts: uxos_buffercacheTable.setStatus('mandatory')
uxos_buffercacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1), ).setLabel("uxos-buffercacheEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-buffercacheSysName"), (0, "OLIVETTI-MIB", "uxos-buffercacheInstName"), (0, "OLIVETTI-MIB", "uxos-buffercacheSubAddr"))
if mibBuilder.loadTexts: uxos_buffercacheEntry.setStatus('mandatory')
uxos_buffercacheSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-buffercacheSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_buffercacheSysName.setStatus('mandatory')
uxos_buffercacheInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-buffercacheInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_buffercacheInstName.setStatus('mandatory')
uxos_buffercacheSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-buffercacheSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_buffercacheSubAddr.setStatus('mandatory')
uxos_cachehit = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 4), Counter32()).setLabel("uxos-cachehit").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cachehit.setStatus('mandatory')
uxos_cachemiss = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 5), Counter32()).setLabel("uxos-cachemiss").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cachemiss.setStatus('mandatory')
uxos_freehit = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 6), Counter32()).setLabel("uxos-freehit").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_freehit.setStatus('mandatory')
uxos_freemiss = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 7), Counter32()).setLabel("uxos-freemiss").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_freemiss.setStatus('mandatory')
uxos_bbusy = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 8), Counter32()).setLabel("uxos-bbusy").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_bbusy.setStatus('mandatory')
uxos_pfreemiss = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 9), Counter32()).setLabel("uxos-pfreemiss").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pfreemiss.setStatus('mandatory')
uxos_prepfreemiss = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 10), Counter32()).setLabel("uxos-prepfreemiss").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_prepfreemiss.setStatus('mandatory')
uxos_spare = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 27, 1, 1, 11), Counter32()).setLabel("uxos-spare")
if mibBuilder.loadTexts: uxos_spare.setStatus('mandatory')
uxos_aioTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1), ).setLabel("uxos-aioTable")
if mibBuilder.loadTexts: uxos_aioTable.setStatus('mandatory')
uxos_aioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1), ).setLabel("uxos-aioEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-aioSysName"), (0, "OLIVETTI-MIB", "uxos-aioInstName"), (0, "OLIVETTI-MIB", "uxos-aioSubAddr"))
if mibBuilder.loadTexts: uxos_aioEntry.setStatus('mandatory')
uxos_aioSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-aioSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aioSysName.setStatus('mandatory')
uxos_aioInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-aioInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aioInstName.setStatus('mandatory')
uxos_aioSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-aioSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aioSubAddr.setStatus('mandatory')
uxos_aioread = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 4), Counter32()).setLabel("uxos-aioread").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aioread.setStatus('mandatory')
uxos_aiowrite = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 5), Counter32()).setLabel("uxos-aiowrite").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aiowrite.setStatus('mandatory')
uxos_aiolock = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 6), Counter32()).setLabel("uxos-aiolock").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aiolock.setStatus('mandatory')
uxos_aiopoll = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 7), Counter32()).setLabel("uxos-aiopoll").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aiopoll.setStatus('mandatory')
uxos_aiohfbuf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 8), Counter32()).setLabel("uxos-aiohfbuf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aiohfbuf.setStatus('mandatory')
uxos_aiohab = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 9), Counter32()).setLabel("uxos-aiohab").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aiohab.setStatus('mandatory')
uxos_aiomsb = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 28, 1, 1, 10), Counter32()).setLabel("uxos-aiomsb").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_aiomsb.setStatus('mandatory')
uxos_lioTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1), ).setLabel("uxos-lioTable")
if mibBuilder.loadTexts: uxos_lioTable.setStatus('mandatory')
uxos_lioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1), ).setLabel("uxos-lioEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-lioSysName"), (0, "OLIVETTI-MIB", "uxos-lioInstName"), (0, "OLIVETTI-MIB", "uxos-lioSubAddr"))
if mibBuilder.loadTexts: uxos_lioEntry.setStatus('mandatory')
uxos_lioSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-lioSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lioSysName.setStatus('mandatory')
uxos_lioInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-lioInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lioInstName.setStatus('mandatory')
uxos_lioSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-lioSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lioSubAddr.setStatus('mandatory')
uxos_liocall = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 4), Counter32()).setLabel("uxos-liocall").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_liocall.setStatus('mandatory')
uxos_lioread = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 5), Counter32()).setLabel("uxos-lioread").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lioread.setStatus('mandatory')
uxos_liowrite = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 6), Counter32()).setLabel("uxos-liowrite").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_liowrite.setStatus('mandatory')
uxos_liolock = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 7), Counter32()).setLabel("uxos-liolock").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_liolock.setStatus('mandatory')
uxos_liopoll = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 8), Counter32()).setLabel("uxos-liopoll").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_liopoll.setStatus('mandatory')
uxos_liowait = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 29, 1, 1, 9), Counter32()).setLabel("uxos-liowait").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_liowait.setStatus('mandatory')
uxos_ipcTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1), ).setLabel("uxos-ipcTable")
if mibBuilder.loadTexts: uxos_ipcTable.setStatus('mandatory')
uxos_ipcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1), ).setLabel("uxos-ipcEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-ipcSysName"), (0, "OLIVETTI-MIB", "uxos-ipcInstName"), (0, "OLIVETTI-MIB", "uxos-ipcSubAddr"))
if mibBuilder.loadTexts: uxos_ipcEntry.setStatus('mandatory')
uxos_ipcSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-ipcSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ipcSysName.setStatus('mandatory')
uxos_ipcInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-ipcInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ipcInstName.setStatus('mandatory')
uxos_ipcSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-ipcSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_ipcSubAddr.setStatus('mandatory')
uxos_shm_get = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 4), Counter32()).setLabel("uxos-shm-get").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shm_get.setStatus('mandatory')
uxos_shm_get_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 5), Counter32()).setLabel("uxos-shm-get-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shm_get_fail.setStatus('mandatory')
uxos_shm_atch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 6), Counter32()).setLabel("uxos-shm-atch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shm_atch.setStatus('mandatory')
uxos_shm_atch_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 7), Counter32()).setLabel("uxos-shm-atch-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shm_atch_fail.setStatus('mandatory')
uxos_shm_dtch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 8), Counter32()).setLabel("uxos-shm-dtch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shm_dtch.setStatus('mandatory')
uxos_shm_cntl = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 9), Counter32()).setLabel("uxos-shm-cntl").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_shm_cntl.setStatus('mandatory')
uxos_msg_get = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 10), Counter32()).setLabel("uxos-msg-get").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_get.setStatus('mandatory')
uxos_msg_get_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 11), Counter32()).setLabel("uxos-msg-get-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_get_fail.setStatus('mandatory')
uxos_msg_snd = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 12), Counter32()).setLabel("uxos-msg-snd").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_snd.setStatus('mandatory')
uxos_msg_snd_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 13), Counter32()).setLabel("uxos-msg-snd-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_snd_fail.setStatus('mandatory')
uxos_msg_snd_sleep = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 14), Counter32()).setLabel("uxos-msg-snd-sleep").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_snd_sleep.setStatus('mandatory')
uxos_msg_snd_intr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 15), Counter32()).setLabel("uxos-msg-snd-intr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_snd_intr.setStatus('mandatory')
uxos_msg_snd_again = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 16), Counter32()).setLabel("uxos-msg-snd-again").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_snd_again.setStatus('mandatory')
uxos_msg_rcv = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 17), Counter32()).setLabel("uxos-msg-rcv").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_rcv.setStatus('mandatory')
uxos_msg_rcv_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 18), Counter32()).setLabel("uxos-msg-rcv-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_rcv_fail.setStatus('mandatory')
uxos_msg_rcv_sleep = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 19), Counter32()).setLabel("uxos-msg-rcv-sleep").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_rcv_sleep.setStatus('mandatory')
uxos_msg_rcv_intr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 20), Counter32()).setLabel("uxos-msg-rcv-intr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_rcv_intr.setStatus('mandatory')
uxos_msg_rcv_again = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 21), Counter32()).setLabel("uxos-msg-rcv-again").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_rcv_again.setStatus('mandatory')
uxos_msg_cntl = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 22), Counter32()).setLabel("uxos-msg-cntl").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_cntl.setStatus('mandatory')
uxos_msg_lock_sleep = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 23), Counter32()).setLabel("uxos-msg-lock-sleep").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_msg_lock_sleep.setStatus('mandatory')
uxos_sem_get = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 24), Counter32()).setLabel("uxos-sem-get").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_get.setStatus('mandatory')
uxos_sem_get_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 25), Counter32()).setLabel("uxos-sem-get-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_get_fail.setStatus('mandatory')
uxos_sem_op = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 26), Counter32()).setLabel("uxos-sem-op").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_op.setStatus('mandatory')
uxos_sem_op_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 27), Counter32()).setLabel("uxos-sem-op-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_op_fail.setStatus('mandatory')
uxos_sem_op_sleep = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 28), Counter32()).setLabel("uxos-sem-op-sleep").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_op_sleep.setStatus('mandatory')
uxos_sem_op_intr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 29), Counter32()).setLabel("uxos-sem-op-intr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_op_intr.setStatus('mandatory')
uxos_sem_op_again = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 30), Counter32()).setLabel("uxos-sem-op-again").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_op_again.setStatus('mandatory')
uxos_sem_cntl = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 30, 1, 1, 31), Counter32()).setLabel("uxos-sem-cntl").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_sem_cntl.setStatus('mandatory')
uxos_flockTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1), ).setLabel("uxos-flockTable")
if mibBuilder.loadTexts: uxos_flockTable.setStatus('mandatory')
uxos_flockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1), ).setLabel("uxos-flockEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-flockSysName"), (0, "OLIVETTI-MIB", "uxos-flockInstName"), (0, "OLIVETTI-MIB", "uxos-flockSubAddr"))
if mibBuilder.loadTexts: uxos_flockEntry.setStatus('mandatory')
uxos_flockSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-flockSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_flockSysName.setStatus('mandatory')
uxos_flockInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-flockInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_flockInstName.setStatus('mandatory')
uxos_flockSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-flockSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_flockSubAddr.setStatus('mandatory')
uxos_lock_read = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 4), Counter32()).setLabel("uxos-lock-read").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_read.setStatus('mandatory')
uxos_lock_rd_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 5), Counter32()).setLabel("uxos-lock-rd-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_rd_fail.setStatus('mandatory')
uxos_lock_rd_sleep = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 6), Counter32()).setLabel("uxos-lock-rd-sleep").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_rd_sleep.setStatus('mandatory')
uxos_lock_rd_intr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 7), Counter32()).setLabel("uxos-lock-rd-intr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_rd_intr.setStatus('mandatory')
uxos_lock_rd_again = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 8), Counter32()).setLabel("uxos-lock-rd-again").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_rd_again.setStatus('mandatory')
uxos_lock_write = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 9), Counter32()).setLabel("uxos-lock-write").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_write.setStatus('mandatory')
uxos_lock_wr_fail = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 10), Counter32()).setLabel("uxos-lock-wr-fail").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_wr_fail.setStatus('mandatory')
uxos_lock_wr_sleep = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 11), Counter32()).setLabel("uxos-lock-wr-sleep").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_wr_sleep.setStatus('mandatory')
uxos_lock_wr_intr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 12), Counter32()).setLabel("uxos-lock-wr-intr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_wr_intr.setStatus('mandatory')
uxos_lock_wr_again = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 13), Counter32()).setLabel("uxos-lock-wr-again").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lock_wr_again.setStatus('mandatory')
uxos_unlock = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 31, 1, 1, 14), Counter32()).setLabel("uxos-unlock").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_unlock.setStatus('mandatory')
uxos_smTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1), ).setLabel("uxos-smTable")
if mibBuilder.loadTexts: uxos_smTable.setStatus('mandatory')
uxos_smEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1), ).setLabel("uxos-smEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-smSysName"), (0, "OLIVETTI-MIB", "uxos-smInstName"), (0, "OLIVETTI-MIB", "uxos-smSubAddr"))
if mibBuilder.loadTexts: uxos_smEntry.setStatus('mandatory')
uxos_smSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-smSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smSysName.setStatus('mandatory')
uxos_smInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-smInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smInstName.setStatus('mandatory')
uxos_smSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-smSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_smSubAddr.setStatus('mandatory')
uxos_fault = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 4), Counter32()).setLabel("uxos-fault").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_fault.setStatus('mandatory')
uxos_faulta = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 5), Counter32()).setLabel("uxos-faulta").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_faulta.setStatus('mandatory')
uxos_getmap = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 6), Counter32()).setLabel("uxos-getmap").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_getmap.setStatus('mandatory')
uxos_get_use = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 7), Counter32()).setLabel("uxos-get-use").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_get_use.setStatus('mandatory')
uxos_get_reclaim = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 8), Counter32()).setLabel("uxos-get-reclaim").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_get_reclaim.setStatus('mandatory')
uxos_get_reuse = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 9), Counter32()).setLabel("uxos-get-reuse").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_get_reuse.setStatus('mandatory')
uxos_rel_async = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 10), Counter32()).setLabel("uxos-rel-async").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rel_async.setStatus('mandatory')
uxos_rel_write = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 11), Counter32()).setLabel("uxos-rel-write").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rel_write.setStatus('mandatory')
uxos_rel_free = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 12), Counter32()).setLabel("uxos-rel-free").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rel_free.setStatus('mandatory')
uxos_rel_abort = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 13), Counter32()).setLabel("uxos-rel-abort").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rel_abort.setStatus('mandatory')
uxos_rel_dontneed = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 14), Counter32()).setLabel("uxos-rel-dontneed").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_rel_dontneed.setStatus('mandatory')
uxos_release = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 15), Counter32()).setLabel("uxos-release").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_release.setStatus('mandatory')
uxos_pagecreate = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 16), Counter32()).setLabel("uxos-pagecreate").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pagecreate.setStatus('mandatory')
uxos_pagemiss = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 17), Counter32()).setLabel("uxos-pagemiss").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pagemiss.setStatus('mandatory')
uxos_pagemissatch = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 32, 1, 1, 18), Counter32()).setLabel("uxos-pagemissatch").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_pagemissatch.setStatus('mandatory')
uxos_vxTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1), ).setLabel("uxos-vxTable")
if mibBuilder.loadTexts: uxos_vxTable.setStatus('mandatory')
uxos_vxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1, 1), ).setLabel("uxos-vxEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-vxSysName"), (0, "OLIVETTI-MIB", "uxos-vxInstName"), (0, "OLIVETTI-MIB", "uxos-vxSubAddr"))
if mibBuilder.loadTexts: uxos_vxEntry.setStatus('mandatory')
uxos_vxSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vxSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vxSysName.setStatus('mandatory')
uxos_vxInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vxInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vxInstName.setStatus('mandatory')
uxos_vxSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-vxSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vxSubAddr.setStatus('mandatory')
uxos_vxipage = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1, 1, 4), Counter32()).setLabel("uxos-vxipage").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vxipage.setStatus('mandatory')
uxos_vxinopage = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1, 1, 5), Counter32()).setLabel("uxos-vxinopage").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vxinopage.setStatus('mandatory')
uxos_vxinodeovf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 77, 33, 1, 1, 6), Counter32()).setLabel("uxos-vxinodeovf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_vxinodeovf.setStatus('mandatory')
uxos_diskTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1), ).setLabel("uxos-diskTable")
if mibBuilder.loadTexts: uxos_diskTable.setStatus('mandatory')
uxos_diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1), ).setLabel("uxos-diskEntry").setIndexNames((0, "OLIVETTI-MIB", "uxos-diskSysName"), (0, "OLIVETTI-MIB", "uxos-diskInstName"), (0, "OLIVETTI-MIB", "uxos-diskSubAddr"))
if mibBuilder.loadTexts: uxos_diskEntry.setStatus('mandatory')
uxos_diskSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-diskSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_diskSysName.setStatus('mandatory')
uxos_diskInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxos-diskInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_diskInstName.setStatus('mandatory')
uxos_diskSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxos-diskSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_diskSubAddr.setStatus('mandatory')
uxos_numRW = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 4), Counter32()).setLabel("uxos-numRW").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numRW.setStatus('mandatory')
uxos_numOtherOp = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 5), Counter32()).setLabel("uxos-numOtherOp").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numOtherOp.setStatus('mandatory')
uxos_numJobsToDr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 6), Counter32()).setLabel("uxos-numJobsToDr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numJobsToDr.setStatus('mandatory')
uxos_numUnlogErr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 7), Counter32()).setLabel("uxos-numUnlogErr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_numUnlogErr.setStatus('mandatory')
uxos_totBlkTrans = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 8), Counter32()).setLabel("uxos-totBlkTrans").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_totBlkTrans.setStatus('mandatory')
uxos_totBlkResp = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 9), Counter32()).setLabel("uxos-totBlkResp").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_totBlkResp.setStatus('mandatory')
uxos_cumulUse = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 10), Counter32()).setLabel("uxos-cumulUse").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cumulUse.setStatus('mandatory')
uxos_major = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 11), Counter32()).setLabel("uxos-major").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_major.setStatus('mandatory')
uxos_minor = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 12), Counter32()).setLabel("uxos-minor").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_minor.setStatus('mandatory')
uxos_totNumRead = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 13), Counter32()).setLabel("uxos-totNumRead").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_totNumRead.setStatus('mandatory')
uxos_totNumWrite = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 14), Counter32()).setLabel("uxos-totNumWrite").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_totNumWrite.setStatus('mandatory')
uxos_cumulQueLen = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 15), Counter32()).setLabel("uxos-cumulQueLen").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cumulQueLen.setStatus('mandatory')
uxos_maxQueLen = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 16), Counter32()).setLabel("uxos-maxQueLen").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_maxQueLen.setStatus('mandatory')
uxos_minQueLen = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 17), Counter32()).setLabel("uxos-minQueLen").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_minQueLen.setStatus('mandatory')
uxos_cumulSeekDist = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 18), Counter32()).setLabel("uxos-cumulSeekDist").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_cumulSeekDist.setStatus('mandatory')
uxos_driveActive = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 19), Counter32()).setLabel("uxos-driveActive").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_driveActive.setStatus('mandatory')
uxos_drivePerf = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 20), Counter32()).setLabel("uxos-drivePerf").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_drivePerf.setStatus('mandatory')
uxos_startOfQueue = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 21), Integer32()).setLabel("uxos-startOfQueue").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_startOfQueue.setStatus('mandatory')
uxos_lastInQueue = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 22), Integer32()).setLabel("uxos-lastInQueue").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_lastInQueue.setStatus('mandatory')
uxos_queue01 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 23), Integer32()).setLabel("uxos-queue01").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue01.setStatus('mandatory')
uxos_queue02 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 24), Integer32()).setLabel("uxos-queue02").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue02.setStatus('mandatory')
uxos_queue11 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 25), Integer32()).setLabel("uxos-queue11").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue11.setStatus('mandatory')
uxos_queue12 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 26), Integer32()).setLabel("uxos-queue12").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue12.setStatus('mandatory')
uxos_queue21 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 27), Integer32()).setLabel("uxos-queue21").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue21.setStatus('mandatory')
uxos_queue22 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 28), Integer32()).setLabel("uxos-queue22").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue22.setStatus('mandatory')
uxos_queue31 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 29), Integer32()).setLabel("uxos-queue31").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue31.setStatus('mandatory')
uxos_queue32 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 30), Integer32()).setLabel("uxos-queue32").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue32.setStatus('mandatory')
uxos_queue41 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 31), Integer32()).setLabel("uxos-queue41").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue41.setStatus('mandatory')
uxos_queue42 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 32), Integer32()).setLabel("uxos-queue42").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue42.setStatus('mandatory')
uxos_queue51 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 33), Integer32()).setLabel("uxos-queue51").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue51.setStatus('mandatory')
uxos_queue52 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 34), Integer32()).setLabel("uxos-queue52").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue52.setStatus('mandatory')
uxos_queue61 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 35), Integer32()).setLabel("uxos-queue61").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue61.setStatus('mandatory')
uxos_queue62 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 36), Integer32()).setLabel("uxos-queue62").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue62.setStatus('mandatory')
uxos_queue71 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 37), Integer32()).setLabel("uxos-queue71").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue71.setStatus('mandatory')
uxos_queue72 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 38), Integer32()).setLabel("uxos-queue72").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue72.setStatus('mandatory')
uxos_queue81 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 39), Integer32()).setLabel("uxos-queue81").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue81.setStatus('mandatory')
uxos_queue82 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 40), Integer32()).setLabel("uxos-queue82").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue82.setStatus('mandatory')
uxos_queue91 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 41), Integer32()).setLabel("uxos-queue91").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue91.setStatus('mandatory')
uxos_queue92 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 65, 0, 1, 1, 42), Integer32()).setLabel("uxos-queue92").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxos_queue92.setStatus('mandatory')
wan = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 15))
lapb = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2))
x25 = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3))
tp02 = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4))
lapbTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1), )
if mibBuilder.loadTexts: lapbTable.setStatus('mandatory')
lapbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1), ).setIndexNames((0, "OLIVETTI-MIB", "uxlapb-lapbSysName"), (0, "OLIVETTI-MIB", "uxlapb-lapbInstName"), (0, "OLIVETTI-MIB", "uxlapb-lapbSubAddr"))
if mibBuilder.loadTexts: lapbEntry.setStatus('mandatory')
uxlapb_lapbSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxlapb-lapbSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_lapbSysName.setStatus('mandatory')
uxlapb_lapbInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxlapb-lapbInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_lapbInstName.setStatus('mandatory')
uxlapb_lapbSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxlapb-lapbSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_lapbSubAddr.setStatus('mandatory')
uxlapb_numOfzerotime = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 4), Counter32()).setLabel("uxlapb-numOfzerotime").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfzerotime.setStatus('mandatory')
uxlapb_numOfinfosent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 5), Counter32()).setLabel("uxlapb-numOfinfosent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfinfosent.setStatus('mandatory')
uxlapb_numOfinforece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 6), Counter32()).setLabel("uxlapb-numOfinforece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfinforece.setStatus('mandatory')
uxlapb_numOfrrsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 7), Counter32()).setLabel("uxlapb-numOfrrsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfrrsent.setStatus('mandatory')
uxlapb_numOfrrrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 8), Counter32()).setLabel("uxlapb-numOfrrrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfrrrece.setStatus('mandatory')
uxlapb_numOfrnrsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 9), Counter32()).setLabel("uxlapb-numOfrnrsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfrnrsent.setStatus('mandatory')
uxlapb_numOfrnrrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 10), Counter32()).setLabel("uxlapb-numOfrnrrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfrnrrece.setStatus('mandatory')
uxlapb_numOfSABMitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 11), Counter32()).setLabel("uxlapb-numOfSABMitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfSABMitsent.setStatus('mandatory')
uxlapb_numOfSABMnitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 12), Counter32()).setLabel("uxlapb-numOfSABMnitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfSABMnitsent.setStatus('mandatory')
uxlapb_numOfSABMitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 13), Counter32()).setLabel("uxlapb-numOfSABMitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfSABMitrece.setStatus('mandatory')
uxlapb_numOfSABMnitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 14), Counter32()).setLabel("uxlapb-numOfSABMnitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfSABMnitrece.setStatus('mandatory')
uxlapb_numOfDISCitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 15), Counter32()).setLabel("uxlapb-numOfDISCitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDISCitsent.setStatus('mandatory')
uxlapb_numOfDISCnitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 16), Counter32()).setLabel("uxlapb-numOfDISCnitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDISCnitsent.setStatus('mandatory')
uxlapb_numOfDISCitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 17), Counter32()).setLabel("uxlapb-numOfDISCitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDISCitrece.setStatus('mandatory')
uxlapb_numOfDISCnitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 18), Counter32()).setLabel("uxlapb-numOfDISCnitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDISCnitrece.setStatus('mandatory')
uxlapb_numOfUAitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 19), Counter32()).setLabel("uxlapb-numOfUAitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfUAitsent.setStatus('mandatory')
uxlapb_numOfUAnitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 20), Counter32()).setLabel("uxlapb-numOfUAnitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfUAnitsent.setStatus('mandatory')
uxlapb_numOfUAitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 21), Counter32()).setLabel("uxlapb-numOfUAitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfUAitrece.setStatus('mandatory')
uxlapb_numOfUAnitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 22), Counter32()).setLabel("uxlapb-numOfUAnitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfUAnitrece.setStatus('mandatory')
uxlapb_numOfDMitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 23), Counter32()).setLabel("uxlapb-numOfDMitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDMitsent.setStatus('mandatory')
uxlapb_numOfDMnitsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 24), Counter32()).setLabel("uxlapb-numOfDMnitsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDMnitsent.setStatus('mandatory')
uxlapb_numOfDMitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 25), Counter32()).setLabel("uxlapb-numOfDMitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDMitrece.setStatus('mandatory')
uxlapb_numOfDMnitrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 26), Counter32()).setLabel("uxlapb-numOfDMnitrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfDMnitrece.setStatus('mandatory')
uxlapb_numOffrmrsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 27), Counter32()).setLabel("uxlapb-numOffrmrsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOffrmrsent.setStatus('mandatory')
uxlapb_numOffrmrrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 28), Counter32()).setLabel("uxlapb-numOffrmrrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOffrmrrece.setStatus('mandatory')
uxlapb_numOfrejsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 29), Counter32()).setLabel("uxlapb-numOfrejsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfrejsent.setStatus('mandatory')
uxlapb_numOfrejrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 30), Counter32()).setLabel("uxlapb-numOfrejrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfrejrece.setStatus('mandatory')
uxlapb_numOfbusycondet = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 31), Counter32()).setLabel("uxlapb-numOfbusycondet").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfbusycondet.setStatus('mandatory')
uxlapb_numOfbusyconent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 32), Counter32()).setLabel("uxlapb-numOfbusyconent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfbusyconent.setStatus('mandatory')
uxlapb_numOfdataoctsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 33), Counter32()).setLabel("uxlapb-numOfdataoctsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfdataoctsent.setStatus('mandatory')
uxlapb_numOfdataoctrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 34), Counter32()).setLabel("uxlapb-numOfdataoctrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfdataoctrece.setStatus('mandatory')
uxlapb_numOfoutsequence = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 35), Counter32()).setLabel("uxlapb-numOfoutsequence").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfoutsequence.setStatus('mandatory')
uxlapb_numOfretrframes = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 36), Counter32()).setLabel("uxlapb-numOfretrframes").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfretrframes.setStatus('mandatory')
uxlapb_numOfinvalidframes = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 37), Counter32()).setLabel("uxlapb-numOfinvalidframes").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfinvalidframes.setStatus('mandatory')
uxlapb_numOfphystxerrors = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 38), Counter32()).setLabel("uxlapb-numOfphystxerrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfphystxerrors.setStatus('mandatory')
uxlapb_numOfReserved1 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 39), Counter32()).setLabel("uxlapb-numOfReserved1").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfReserved1.setStatus('mandatory')
uxlapb_numOfReserved2 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 40), Counter32()).setLabel("uxlapb-numOfReserved2").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfReserved2.setStatus('mandatory')
uxlapb_numOfReserved3 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 41), Counter32()).setLabel("uxlapb-numOfReserved3").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfReserved3.setStatus('mandatory')
uxlapb_numOfReserved4 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 42), Counter32()).setLabel("uxlapb-numOfReserved4").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfReserved4.setStatus('mandatory')
uxlapb_numOfInformatype = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 2, 1, 1, 43), Counter32()).setLabel("uxlapb-numOfInformatype").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxlapb_numOfInformatype.setStatus('mandatory')
x25Table = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1), )
if mibBuilder.loadTexts: x25Table.setStatus('mandatory')
x25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1), ).setIndexNames((0, "OLIVETTI-MIB", "uxx25-x25SysName"), (0, "OLIVETTI-MIB", "uxx25-x25InstName"), (0, "OLIVETTI-MIB", "uxx25-x25SubAddr"))
if mibBuilder.loadTexts: x25Entry.setStatus('mandatory')
uxx25_x25SysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxx25-x25SysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_x25SysName.setStatus('mandatory')
uxx25_x25InstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxx25-x25InstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_x25InstName.setStatus('mandatory')
uxx25_x25SubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxx25-x25SubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_x25SubAddr.setStatus('mandatory')
uxx25_numOfzerot = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 4), Counter32()).setLabel("uxx25-numOfzerot").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfzerot.setStatus('mandatory')
uxx25_numOfrestsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 5), Counter32()).setLabel("uxx25-numOfrestsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrestsent.setStatus('mandatory')
uxx25_numOfrestrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 6), Counter32()).setLabel("uxx25-numOfrestrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrestrece.setStatus('mandatory')
uxx25_numOfcallsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 7), Counter32()).setLabel("uxx25-numOfcallsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfcallsent.setStatus('mandatory')
uxx25_numOfcallrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 8), Counter32()).setLabel("uxx25-numOfcallrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfcallrece.setStatus('mandatory')
uxx25_numOfclearsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 9), Counter32()).setLabel("uxx25-numOfclearsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfclearsent.setStatus('mandatory')
uxx25_numOfclearrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 10), Counter32()).setLabel("uxx25-numOfclearrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfclearrece.setStatus('mandatory')
uxx25_numOfdatasent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 11), Counter32()).setLabel("uxx25-numOfdatasent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfdatasent.setStatus('mandatory')
uxx25_numOfdatarece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 12), Counter32()).setLabel("uxx25-numOfdatarece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfdatarece.setStatus('mandatory')
uxx25_numOfoctsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 13), Counter32()).setLabel("uxx25-numOfoctsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfoctsent.setStatus('mandatory')
uxx25_numOfoctrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 14), Counter32()).setLabel("uxx25-numOfoctrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfoctrece.setStatus('mandatory')
uxx25_numOfintersent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 15), Counter32()).setLabel("uxx25-numOfintersent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfintersent.setStatus('mandatory')
uxx25_numOfinterrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 16), Counter32()).setLabel("uxx25-numOfinterrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfinterrece.setStatus('mandatory')
uxx25_numOfrrxsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 17), Counter32()).setLabel("uxx25-numOfrrxsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrrxsent.setStatus('mandatory')
uxx25_numOfrrxrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 18), Counter32()).setLabel("uxx25-numOfrrxrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrrxrece.setStatus('mandatory')
uxx25_numOfrnrxsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 19), Counter32()).setLabel("uxx25-numOfrnrxsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrnrxsent.setStatus('mandatory')
uxx25_numOfrnrxrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 20), Counter32()).setLabel("uxx25-numOfrnrxrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrnrxrece.setStatus('mandatory')
uxx25_numOfresetsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 21), Counter32()).setLabel("uxx25-numOfresetsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfresetsent.setStatus('mandatory')
uxx25_numOfresetrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 22), Counter32()).setLabel("uxx25-numOfresetrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfresetrece.setStatus('mandatory')
uxx25_numOfrejxsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 23), Counter32()).setLabel("uxx25-numOfrejxsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrejxsent.setStatus('mandatory')
uxx25_numOfrejxrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 24), Counter32()).setLabel("uxx25-numOfrejxrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrejxrece.setStatus('mandatory')
uxx25_numOfdiagnsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 25), Counter32()).setLabel("uxx25-numOfdiagnsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfdiagnsent.setStatus('mandatory')
uxx25_numOfdiagnrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 26), Counter32()).setLabel("uxx25-numOfdiagnrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfdiagnrece.setStatus('mandatory')
uxx25_numOfregistsent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 27), Counter32()).setLabel("uxx25-numOfregistsent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfregistsent.setStatus('mandatory')
uxx25_numOfregistrece = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 28), Counter32()).setLabel("uxx25-numOfregistrece").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfregistrece.setStatus('mandatory')
uxx25_numOfrestretries = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 29), Counter32()).setLabel("uxx25-numOfrestretries").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrestretries.setStatus('mandatory')
uxx25_numOfrestunsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 30), Counter32()).setLabel("uxx25-numOfrestunsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrestunsucfull.setStatus('mandatory')
uxx25_numOfsyntaxerrors = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 31), Counter32()).setLabel("uxx25-numOfsyntaxerrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfsyntaxerrors.setStatus('mandatory')
uxx25_numOflogicalerrors = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 32), Counter32()).setLabel("uxx25-numOflogicalerrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOflogicalerrors.setStatus('mandatory')
uxx25_numOfcallunsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 33), Counter32()).setLabel("uxx25-numOfcallunsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfcallunsucfull.setStatus('mandatory')
uxx25_numOfclearretries = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 34), Counter32()).setLabel("uxx25-numOfclearretries").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfclearretries.setStatus('mandatory')
uxx25_numOfclearunsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 35), Counter32()).setLabel("uxx25-numOfclearunsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfclearunsucfull.setStatus('mandatory')
uxx25_numOfinterunsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 36), Counter32()).setLabel("uxx25-numOfinterunsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfinterunsucfull.setStatus('mandatory')
uxx25_numOfresetretries = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 37), Counter32()).setLabel("uxx25-numOfresetretries").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfresetretries.setStatus('mandatory')
uxx25_numOfresetunsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 38), Counter32()).setLabel("uxx25-numOfresetunsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfresetunsucfull.setStatus('mandatory')
uxx25_numOfdataretrsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 39), Counter32()).setLabel("uxx25-numOfdataretrsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfdataretrsucfull.setStatus('mandatory')
uxx25_numOfdataretrunsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 40), Counter32()).setLabel("uxx25-numOfdataretrunsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfdataretrunsucfull.setStatus('mandatory')
uxx25_numOfrejretries = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 41), Counter32()).setLabel("uxx25-numOfrejretries").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrejretries.setStatus('mandatory')
uxx25_numOfrejunsucfull = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 42), Counter32()).setLabel("uxx25-numOfrejunsucfull").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfrejunsucfull.setStatus('mandatory')
uxx25_numOfInformat = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 3, 1, 1, 43), Counter32()).setLabel("uxx25-numOfInformat").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxx25_numOfInformat.setStatus('mandatory')
tp02Table = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1), )
if mibBuilder.loadTexts: tp02Table.setStatus('mandatory')
tp02Entry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1), ).setIndexNames((0, "OLIVETTI-MIB", "uxtp02-tp02SysName"), (0, "OLIVETTI-MIB", "uxtp02-tp02InstName"), (0, "OLIVETTI-MIB", "uxtp02-tp02SubAddr"))
if mibBuilder.loadTexts: tp02Entry.setStatus('mandatory')
uxtp02_tp02SysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxtp02-tp02SysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_tp02SysName.setStatus('mandatory')
uxtp02_tp02InstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("uxtp02-tp02InstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_tp02InstName.setStatus('mandatory')
uxtp02_tp02SubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("uxtp02-tp02SubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_tp02SubAddr.setStatus('mandatory')
uxtp02_numOfzeroingtime = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 4), Counter32()).setLabel("uxtp02-numOfzeroingtime").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfzeroingtime.setStatus('mandatory')
uxtp02_numOfnumberTPDUSent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 5), Counter32()).setLabel("uxtp02-numOfnumberTPDUSent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfnumberTPDUSent.setStatus('mandatory')
uxtp02_numOfnumberTPDUReceived = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 6), Counter32()).setLabel("uxtp02-numOfnumberTPDUReceived").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfnumberTPDUReceived.setStatus('mandatory')
uxtp02_numOftDataSent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 7), Counter32()).setLabel("uxtp02-numOftDataSent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOftDataSent.setStatus('mandatory')
uxtp02_numOftExpeditedDataSent = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 8), Counter32()).setLabel("uxtp02-numOftExpeditedDataSent").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOftExpeditedDataSent.setStatus('mandatory')
uxtp02_numOftDataReceived = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 9), Counter32()).setLabel("uxtp02-numOftDataReceived").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOftDataReceived.setStatus('mandatory')
uxtp02_numOftExpeditedDataReceived = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 10), Counter32()).setLabel("uxtp02-numOftExpeditedDataReceived").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOftExpeditedDataReceived.setStatus('mandatory')
uxtp02_numOfopenConnection = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 11), Counter32()).setLabel("uxtp02-numOfopenConnection").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfopenConnection.setStatus('mandatory')
uxtp02_numOfctTPDUSuccessfullIncoming = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 12), Counter32()).setLabel("uxtp02-numOfctTPDUSuccessfullIncoming").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfctTPDUSuccessfullIncoming.setStatus('mandatory')
uxtp02_numOfctTPDUSuccessfullOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 13), Counter32()).setLabel("uxtp02-numOfctTPDUSuccessfullOutgoing").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfctTPDUSuccessfullOutgoing.setStatus('mandatory')
uxtp02_numOfctTPDUUnSuccessfullIncoming = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 14), Counter32()).setLabel("uxtp02-numOfctTPDUUnSuccessfullIncoming").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfctTPDUUnSuccessfullIncoming.setStatus('mandatory')
uxtp02_numOfctTPDUUnSuccessfullOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 15), Counter32()).setLabel("uxtp02-numOfctTPDUUnSuccessfullOutgoing").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfctTPDUUnSuccessfullOutgoing.setStatus('mandatory')
uxtp02_numOfctTPDUCongestion = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 16), Counter32()).setLabel("uxtp02-numOfctTPDUCongestion").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfctTPDUCongestion.setStatus('mandatory')
uxtp02_numOfctTPDUConfProtErrorDetected = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 17), Counter32()).setLabel("uxtp02-numOfctTPDUConfProtErrorDetected").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfctTPDUConfProtErrorDetected.setStatus('mandatory')
uxtp02_numOfctTPDURefusedConfProtError = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 18), Counter32()).setLabel("uxtp02-numOfctTPDURefusedConfProtError").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfctTPDURefusedConfProtError.setStatus('mandatory')
uxtp02_numOfdetectedTPDUProtocolError = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 19), Counter32()).setLabel("uxtp02-numOfdetectedTPDUProtocolError").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfdetectedTPDUProtocolError.setStatus('mandatory')
uxtp02_numOfrefusedTPDUProtocolError = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 15, 4, 1, 1, 20), Counter32()).setLabel("uxtp02-numOfrefusedTPDUProtocolError").setMaxAccess("readonly")
if mibBuilder.loadTexts: uxtp02_numOfrefusedTPDUProtocolError.setStatus('mandatory')
elc_MAC = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 18)).setLabel("elc-MAC")
elc_ELC = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0)).setLabel("elc-ELC")
elc_ELCTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1), ).setLabel("elc-ELCTable")
if mibBuilder.loadTexts: elc_ELCTable.setStatus('mandatory')
elc_ELCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1), ).setLabel("elc-ELCEntry").setIndexNames((0, "OLIVETTI-MIB", "elcSysName"), (0, "OLIVETTI-MIB", "elcInstName"), (0, "OLIVETTI-MIB", "elcSubAddr"))
if mibBuilder.loadTexts: elc_ELCEntry.setStatus('mandatory')
elcSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcSysName.setStatus('mandatory')
elcInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcInstName.setStatus('mandatory')
elcSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcSubAddr.setStatus('mandatory')
elctxsuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxsuccess.setStatus('mandatory')
elctxcollision = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxcollision.setStatus('mandatory')
elcSQEtsterrors = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcSQEtsterrors.setStatus('mandatory')
elcrxsuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcrxsuccess.setStatus('mandatory')
elcrxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcrxCRC.setStatus('mandatory')
elcrxalignment = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcrxalignment.setStatus('mandatory')
elcrxnobuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcrxnobuffer.setStatus('mandatory')
elcrxoverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcrxoverrun.setStatus('mandatory')
elcrxshframe = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcrxshframe.setStatus('mandatory')
elcrxcollision = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elcrxcollision.setStatus('mandatory')
elctxattempted = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxattempted.setStatus('mandatory')
elctxlostCS = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxlostCS.setStatus('mandatory')
elctxlostCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxlostCTS.setStatus('mandatory')
elctxunderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxunderrun.setStatus('mandatory')
elctxmaxcollision = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxmaxcollision.setStatus('mandatory')
elctxdeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxdeferred.setStatus('mandatory')
elctxframexceeding = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxframexceeding.setStatus('mandatory')
elctxbytesuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 18, 0, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elctxbytesuccess.setStatus('mandatory')
ethe_MAC1 = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 19)).setLabel("ethe-MAC1")
ethe_ETH = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0)).setLabel("ethe-ETH")
ethe_ETHTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1), ).setLabel("ethe-ETHTable")
if mibBuilder.loadTexts: ethe_ETHTable.setStatus('mandatory')
ethe_ETHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1), ).setLabel("ethe-ETHEntry").setIndexNames((0, "OLIVETTI-MIB", "etheSysName"), (0, "OLIVETTI-MIB", "etheInstName"), (0, "OLIVETTI-MIB", "etheSubAddr"))
if mibBuilder.loadTexts: ethe_ETHEntry.setStatus('mandatory')
etheSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etheSysName.setStatus('mandatory')
etheInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etheInstName.setStatus('mandatory')
etheSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etheSubAddr.setStatus('mandatory')
ethetxsuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxsuccess.setStatus('mandatory')
ethetxcollision = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxcollision.setStatus('mandatory')
etheSQEtsterrors = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etheSQEtsterrors.setStatus('mandatory')
etherxsuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherxsuccess.setStatus('mandatory')
etherxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherxCRC.setStatus('mandatory')
etherxalignment = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherxalignment.setStatus('mandatory')
etherxnobuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherxnobuffer.setStatus('mandatory')
etherxoverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherxoverrun.setStatus('mandatory')
etherxshframe = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherxshframe.setStatus('mandatory')
etherxcollision = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherxcollision.setStatus('mandatory')
ethetxattempted = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxattempted.setStatus('mandatory')
ethetxlostCS = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxlostCS.setStatus('mandatory')
ethetxlostCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxlostCTS.setStatus('mandatory')
ethetxunderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxunderrun.setStatus('mandatory')
ethetxmaxcollision = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxmaxcollision.setStatus('mandatory')
ethetxdeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxdeferred.setStatus('mandatory')
ethetxframexceeding = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxframexceeding.setStatus('mandatory')
ethetxbytesuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 19, 0, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethetxbytesuccess.setStatus('mandatory')
netb_NB = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 17)).setLabel("netb-NB")
netb_NBEUI = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0)).setLabel("netb-NBEUI")
netb_NBEUITable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1), ).setLabel("netb-NBEUITable")
if mibBuilder.loadTexts: netb_NBEUITable.setStatus('mandatory')
netb_NBEUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1), ).setLabel("netb-NBEUIEntry").setIndexNames((0, "OLIVETTI-MIB", "netbSysName"), (0, "OLIVETTI-MIB", "netbInstName"), (0, "OLIVETTI-MIB", "netbSubAddr"))
if mibBuilder.loadTexts: netb_NBEUIEntry.setStatus('mandatory')
netbSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbSysName.setStatus('mandatory')
netbInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbInstName.setStatus('mandatory')
netbSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbSubAddr.setStatus('mandatory')
netbreserved = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbreserved.setStatus('mandatory')
netbreleaselevel = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbreleaselevel.setStatus('mandatory')
netbsoftwarelevel = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbsoftwarelevel.setStatus('mandatory')
netbadaptertype = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbadaptertype.setStatus('mandatory')
netbparamstype = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbparamstype.setStatus('mandatory')
netbreportingperiod = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbreportingperiod.setStatus('mandatory')
netbrxFRMR = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbrxFRMR.setStatus('mandatory')
netbtxFRMR = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbtxFRMR.setStatus('mandatory')
netbrxIframeserr = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbrxIframeserr.setStatus('mandatory')
netbtxaborted = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbtxaborted.setStatus('mandatory')
netbtxsuccesspack = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbtxsuccesspack.setStatus('mandatory')
netbrxsuccesspack = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbrxsuccesspack.setStatus('mandatory')
netbtxIframeserr = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbtxIframeserr.setStatus('mandatory')
netbrxnobuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbrxnobuffer.setStatus('mandatory')
netbT1expired = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbT1expired.setStatus('mandatory')
netbTiexpired = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbTiexpired.setStatus('mandatory')
netbfreeNCB = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbfreeNCB.setStatus('mandatory')
netbconfiguredNCB = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbconfiguredNCB.setStatus('mandatory')
netbmaxNCB = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbmaxNCB.setStatus('mandatory')
netbtxnobuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbtxnobuffer.setStatus('mandatory')
netbmaxdatagram = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbmaxdatagram.setStatus('mandatory')
netbpendingsession = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbpendingsession.setStatus('mandatory')
netbconfiguredpending = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbconfiguredpending.setStatus('mandatory')
netbmaxpending = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbmaxpending.setStatus('mandatory')
netbmaxdatapacket = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbmaxdatapacket.setStatus('mandatory')
netbnumbernames = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbnumbernames.setStatus('mandatory')
netbnumbersessions = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbnumbersessions.setStatus('mandatory')
netbDATAGRAMoutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbDATAGRAMoutstanding.setStatus('mandatory')
netbANYoustanding = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 17, 0, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbANYoustanding.setStatus('mandatory')
onetware_NW = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 53)).setLabel("onetware-NW")
onetware_SRVNW = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1)).setLabel("onetware-SRVNW")
onetware_SRVNWTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1), ).setLabel("onetware-SRVNWTable")
if mibBuilder.loadTexts: onetware_SRVNWTable.setStatus('mandatory')
onetware_SRVNWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1), ).setLabel("onetware-SRVNWEntry").setIndexNames((0, "OLIVETTI-MIB", "onetwareSysName"), (0, "OLIVETTI-MIB", "onetwareInstName"), (0, "OLIVETTI-MIB", "onetwareSubAddr"))
if mibBuilder.loadTexts: onetware_SRVNWEntry.setStatus('mandatory')
onetwareSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareSysName.setStatus('mandatory')
onetwareInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareInstName.setStatus('mandatory')
onetwareSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareSubAddr.setStatus('mandatory')
onetwareMaxClientConnSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxClientConnSupported.setStatus('mandatory')
onetwareClientConnInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareClientConnInUse.setStatus('mandatory')
onetwarePeakClientConnUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwarePeakClientConnUsed.setStatus('mandatory')
onetwareMaxVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxVolumes.setStatus('mandatory')
onetwareNWProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareNWProcs.setStatus('mandatory')
onetwareTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareTotalPackets.setStatus('mandatory')
onetwareCreateConnectionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareCreateConnectionRequests.setStatus('mandatory')
onetwareCreateFileRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareCreateFileRequests.setStatus('mandatory')
onetwareOpenRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareOpenRequests.setStatus('mandatory')
onetwareReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareReadRequests.setStatus('mandatory')
onetwareWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareWriteRequests.setStatus('mandatory')
onetwareNumOpenFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareNumOpenFiles.setStatus('mandatory')
onetwareMaxSimultaneousOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxSimultaneousOpens.setStatus('mandatory')
onetwareLostPacketResends = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareLostPacketResends.setStatus('mandatory')
onetwareCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareCacheHits.setStatus('mandatory')
onetwareCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareCacheMisses.setStatus('mandatory')
onetwarePrintRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwarePrintRequests.setStatus('mandatory')
onetwareMessageRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareMessageRequests.setStatus('mandatory')
onetwareDirectoryRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareDirectoryRequests.setStatus('mandatory')
onetwareBinderyAndMiscRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareBinderyAndMiscRequests.setStatus('mandatory')
onetwareUnknownRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareUnknownRequests.setStatus('mandatory')
onetwareSharedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareSharedMemorySize.setStatus('mandatory')
onetwareCurrentSharedMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareCurrentSharedMemoryUsage.setStatus('mandatory')
onetwareMaxSharedMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxSharedMemoryUsed.setStatus('mandatory')
onetwareLogicalLockRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareLogicalLockRequests.setStatus('mandatory')
onetwareNumLogicalLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareNumLogicalLocks.setStatus('mandatory')
onetwareMaxSimultaneousLogLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxSimultaneousLogLocks.setStatus('mandatory')
onetwareFileLockRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareFileLockRequests.setStatus('mandatory')
onetwareNumFileLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareNumFileLocks.setStatus('mandatory')
onetwareMaxSimultaneousFileLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxSimultaneousFileLocks.setStatus('mandatory')
onetwarePhysLockRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwarePhysLockRequests.setStatus('mandatory')
onetwareNumPhysLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareNumPhysLocks.setStatus('mandatory')
onetwareMaxSimultaneousPhysLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxSimultaneousPhysLocks.setStatus('mandatory')
onetwareSemaphoreRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onetwareSemaphoreRequests.setStatus('mandatory')
onetwareNumSemaphores = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareNumSemaphores.setStatus('mandatory')
onetwareMaxSimultaneousSemaphores = MibTableColumn((1, 3, 6, 1, 4, 1, 279, 2, 6, 53, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onetwareMaxSimultaneousSemaphores.setStatus('mandatory')
tnetb_TNB = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 16)).setLabel("tnetb-TNB")
tnetb_NETB = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0)).setLabel("tnetb-NETB")
tnetb_NETBTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1), ).setLabel("tnetb-NETBTable")
if mibBuilder.loadTexts: tnetb_NETBTable.setStatus('mandatory')
tnetb_NETBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1), ).setLabel("tnetb-NETBEntry").setIndexNames((0, "OLIVETTI-MIB", "tnetb-NETBSysName"), (0, "OLIVETTI-MIB", "tnetb-NETBInstName"), (0, "OLIVETTI-MIB", "tnetb-NETBSubAddr"))
if mibBuilder.loadTexts: tnetb_NETBEntry.setStatus('mandatory')
tnetb_NETBSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-NETBSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBSysName.setStatus('mandatory')
tnetb_NETBInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("tnetb-NETBInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBInstName.setStatus('mandatory')
tnetb_NETBSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-NETBSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBSubAddr.setStatus('mandatory')
tnetb_NETBtxPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 4), Counter32()).setLabel("tnetb-NETBtxPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBtxPDU.setStatus('mandatory')
tnetb_NETBrxPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 5), Counter32()).setLabel("tnetb-NETBrxPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBrxPDU.setStatus('mandatory')
tnetb_NETBsuccessregistr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 6), Counter32()).setLabel("tnetb-NETBsuccessregistr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBsuccessregistr.setStatus('mandatory')
tnetb_NETBunsuccessregistr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 7), Counter32()).setLabel("tnetb-NETBunsuccessregistr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBunsuccessregistr.setStatus('mandatory')
tnetb_NETBsuccessderegistr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 8), Counter32()).setLabel("tnetb-NETBsuccessderegistr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBsuccessderegistr.setStatus('mandatory')
tnetb_NETBunsuccessderegistr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 9), Counter32()).setLabel("tnetb-NETBunsuccessderegistr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBunsuccessderegistr.setStatus('mandatory')
tnetb_NETBresolutednames = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 10), Counter32()).setLabel("tnetb-NETBresolutednames").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBresolutednames.setStatus('mandatory')
tnetb_NETBunresolutednames = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 11), Counter32()).setLabel("tnetb-NETBunresolutednames").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBunresolutednames.setStatus('mandatory')
tnetb_NETBreserved = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 12), Counter32()).setLabel("tnetb-NETBreserved")
if mibBuilder.loadTexts: tnetb_NETBreserved.setStatus('mandatory')
tnetb_NETBrxinvalidPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 0, 1, 1, 13), Counter32()).setLabel("tnetb-NETBrxinvalidPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NETBrxinvalidPDU.setStatus('mandatory')
tnetb_TRSP = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1)).setLabel("tnetb-TRSP")
tnetb_TRSPTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1), ).setLabel("tnetb-TRSPTable")
if mibBuilder.loadTexts: tnetb_TRSPTable.setStatus('mandatory')
tnetb_TRSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1), ).setLabel("tnetb-TRSPEntry").setIndexNames((0, "OLIVETTI-MIB", "tnetb-TRSPSysName"), (0, "OLIVETTI-MIB", "tnetb-TRSPInstName"), (0, "OLIVETTI-MIB", "tnetb-TRSPSubAddr"))
if mibBuilder.loadTexts: tnetb_TRSPEntry.setStatus('mandatory')
tnetb_TRSPSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-TRSPSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPSysName.setStatus('mandatory')
tnetb_TRSPInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("tnetb-TRSPInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPInstName.setStatus('mandatory')
tnetb_TRSPSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-TRSPSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPSubAddr.setStatus('mandatory')
tnetb_TRSPreserved1 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 4), Counter32()).setLabel("tnetb-TRSPreserved1").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPreserved1.setStatus('mandatory')
tnetb_TRSPsuppconnection = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 5), Integer32()).setLabel("tnetb-TRSPsuppconnection").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPsuppconnection.setStatus('mandatory')
tnetb_TRSPreserved2 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 6), Counter32()).setLabel("tnetb-TRSPreserved2").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPreserved2.setStatus('mandatory')
tnetb_TRSPreserved3 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 7), Counter32()).setLabel("tnetb-TRSPreserved3").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPreserved3.setStatus('mandatory')
tnetb_TRSPreserved4 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 8), Counter32()).setLabel("tnetb-TRSPreserved4").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPreserved4.setStatus('mandatory')
tnetb_TRSPreserved5 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 9), Counter32()).setLabel("tnetb-TRSPreserved5").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPreserved5.setStatus('mandatory')
tnetb_TRSPtxTPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 10), Counter32()).setLabel("tnetb-TRSPtxTPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPtxTPDU.setStatus('mandatory')
tnetb_TRSPrxTPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 11), Counter32()).setLabel("tnetb-TRSPrxTPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPrxTPDU.setStatus('mandatory')
tnetb_TRSPtxretranTPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 12), Counter32()).setLabel("tnetb-TRSPtxretranTPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPtxretranTPDU.setStatus('mandatory')
tnetb_TRSPtxretranDATATPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 13), Counter32()).setLabel("tnetb-TRSPtxretranDATATPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPtxretranDATATPDU.setStatus('mandatory')
tnetb_TRSPactiveconnection = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 14), Integer32()).setLabel("tnetb-TRSPactiveconnection").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPactiveconnection.setStatus('mandatory')
tnetb_TRSPreserved6 = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 15), Counter32()).setLabel("tnetb-TRSPreserved6").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPreserved6.setStatus('mandatory')
tnetb_TRSPsuccessinconnect = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 16), Counter32()).setLabel("tnetb-TRSPsuccessinconnect").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPsuccessinconnect.setStatus('mandatory')
tnetb_TRSPsuccessoutconnect = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 17), Counter32()).setLabel("tnetb-TRSPsuccessoutconnect").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPsuccessoutconnect.setStatus('mandatory')
tnetb_TRSPunsuccessinconnect = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 18), Counter32()).setLabel("tnetb-TRSPunsuccessinconnect").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPunsuccessinconnect.setStatus('mandatory')
tnetb_TRSPunsuccessoutconnect = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 19), Counter32()).setLabel("tnetb-TRSPunsuccessoutconnect").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPunsuccessoutconnect.setStatus('mandatory')
tnetb_TRSPconnectinactivity = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 20), Counter32()).setLabel("tnetb-TRSPconnectinactivity").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPconnectinactivity.setStatus('mandatory')
tnetb_TRSPprotocolerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 21), Counter32()).setLabel("tnetb-TRSPprotocolerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPprotocolerror.setStatus('mandatory')
tnetb_TRSPrxinvalidTPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 22), Counter32()).setLabel("tnetb-TRSPrxinvalidTPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPrxinvalidTPDU.setStatus('mandatory')
tnetb_TRSPrxTSDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 23), Counter32()).setLabel("tnetb-TRSPrxTSDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPrxTSDU.setStatus('mandatory')
tnetb_TRSPtxTSDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 24), Counter32()).setLabel("tnetb-TRSPtxTSDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPtxTSDU.setStatus('mandatory')
tnetb_TRSPtxdatabyte = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 25), Counter32()).setLabel("tnetb-TRSPtxdatabyte").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPtxdatabyte.setStatus('mandatory')
tnetb_TRSPrxdatabyte = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 26), Counter32()).setLabel("tnetb-TRSPrxdatabyte").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPrxdatabyte.setStatus('mandatory')
tnetb_TRSPallocerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 27), Counter32()).setLabel("tnetb-TRSPallocerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPallocerror.setStatus('mandatory')
tnetb_TRSPtxdatagramTPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 28), Counter32()).setLabel("tnetb-TRSPtxdatagramTPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPtxdatagramTPDU.setStatus('mandatory')
tnetb_TRSPrxdatagrmTPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 29), Counter32()).setLabel("tnetb-TRSPrxdatagrmTPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPrxdatagrmTPDU.setStatus('mandatory')
tnetb_TRSPoverrunTPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 30), Counter32()).setLabel("tnetb-TRSPoverrunTPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPoverrunTPDU.setStatus('mandatory')
tnetb_TRSPopenerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 31), Counter32()).setLabel("tnetb-TRSPopenerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPopenerror.setStatus('mandatory')
tnetb_TRSPnoendpoint = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 1, 1, 1, 32), Counter32()).setLabel("tnetb-TRSPnoendpoint").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_TRSPnoendpoint.setStatus('mandatory')
tnetb_NTWK = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2)).setLabel("tnetb-NTWK")
tnetb_NTWKTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1), ).setLabel("tnetb-NTWKTable")
if mibBuilder.loadTexts: tnetb_NTWKTable.setStatus('mandatory')
tnetb_NTWKEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1), ).setLabel("tnetb-NTWKEntry").setIndexNames((0, "OLIVETTI-MIB", "tnetb-NTWKSysName"), (0, "OLIVETTI-MIB", "tnetb-NTWKInstName"), (0, "OLIVETTI-MIB", "tnetb-NTWKSubAddr"))
if mibBuilder.loadTexts: tnetb_NTWKEntry.setStatus('mandatory')
tnetb_NTWKSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-NTWKSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKSysName.setStatus('mandatory')
tnetb_NTWKInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("tnetb-NTWKInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKInstName.setStatus('mandatory')
tnetb_NTWKSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-NTWKSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKSubAddr.setStatus('mandatory')
tnetb_NTWKresourceerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 4), Counter32()).setLabel("tnetb-NTWKresourceerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKresourceerror.setStatus('mandatory')
tnetb_NTWKrxPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 5), Counter32()).setLabel("tnetb-NTWKrxPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKrxPDU.setStatus('mandatory')
tnetb_NTWKtxPDU = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 6), Counter32()).setLabel("tnetb-NTWKtxPDU").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKtxPDU.setStatus('mandatory')
tnetb_NTWKrxbyte = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 7), Counter32()).setLabel("tnetb-NTWKrxbyte").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKrxbyte.setStatus('mandatory')
tnetb_NTWKtxbyte = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 8), Counter32()).setLabel("tnetb-NTWKtxbyte").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKtxbyte.setStatus('mandatory')
tnetb_NTWKtxsegmented = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 9), Counter32()).setLabel("tnetb-NTWKtxsegmented").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKtxsegmented.setStatus('mandatory')
tnetb_NTWKtxnetworkerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 10), Counter32()).setLabel("tnetb-NTWKtxnetworkerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKtxnetworkerror.setStatus('mandatory')
tnetb_NTWKrxnetworkerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 11), Counter32()).setLabel("tnetb-NTWKrxnetworkerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKrxnetworkerror.setStatus('mandatory')
tnetb_NTWKtxcongested = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 12), Counter32()).setLabel("tnetb-NTWKtxcongested").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKtxcongested.setStatus('mandatory')
tnetb_NTWKrxreassembled = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 13), Counter32()).setLabel("tnetb-NTWKrxreassembled").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKrxreassembled.setStatus('mandatory')
tnetb_NTWKreassemblytimeout = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 14), Counter32()).setLabel("tnetb-NTWKreassemblytimeout").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKreassemblytimeout.setStatus('mandatory')
tnetb_NTWKtxforwarded = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 15), Counter32()).setLabel("tnetb-NTWKtxforwarded").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKtxforwarded.setStatus('mandatory')
tnetb_NTWKPDUbadformat = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 16), Counter32()).setLabel("tnetb-NTWKPDUbadformat").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKPDUbadformat.setStatus('mandatory')
tnetb_NTWKPDUdestinunreach = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 17), Counter32()).setLabel("tnetb-NTWKPDUdestinunreach").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKPDUdestinunreach.setStatus('mandatory')
tnetb_NTWKPDUunsupportedoption = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 18), Counter32()).setLabel("tnetb-NTWKPDUunsupportedoption").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKPDUunsupportedoption.setStatus('mandatory')
tnetb_NTWKlifetime = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 2, 1, 1, 19), Counter32()).setLabel("tnetb-NTWKlifetime").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_NTWKlifetime.setStatus('mandatory')
tnetb_LLCN = MibIdentifier((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3)).setLabel("tnetb-LLCN")
tnetb_LLCNTable = MibTable((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1), ).setLabel("tnetb-LLCNTable")
if mibBuilder.loadTexts: tnetb_LLCNTable.setStatus('mandatory')
tnetb_LLCNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1), ).setLabel("tnetb-LLCNEntry").setIndexNames((0, "OLIVETTI-MIB", "tnetb-LLCNSysName"), (0, "OLIVETTI-MIB", "tnetb-LLCNInstName"), (0, "OLIVETTI-MIB", "tnetb-LLCNSubAddr"))
if mibBuilder.loadTexts: tnetb_LLCNEntry.setStatus('mandatory')
tnetb_LLCNSysName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-LLCNSysName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNSysName.setStatus('mandatory')
tnetb_LLCNInstName = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("tnetb-LLCNInstName").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNInstName.setStatus('mandatory')
tnetb_LLCNSubAddr = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setLabel("tnetb-LLCNSubAddr").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNSubAddr.setStatus('mandatory')
tnetb_LLCNtxUI5rame = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 4), Counter32()).setLabel("tnetb-LLCNtxUI5rame").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNtxUI5rame.setStatus('mandatory')
tnetb_LLCNrxUIframe = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 5), Counter32()).setLabel("tnetb-LLCNrxUIframe").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNrxUIframe.setStatus('mandatory')
tnetb_LLCNtxMACerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 6), Counter32()).setLabel("tnetb-LLCNtxMACerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNtxMACerror.setStatus('mandatory')
tnetb_LLCNrxMACerror = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 7), Counter32()).setLabel("tnetb-LLCNrxMACerror").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNrxMACerror.setStatus('mandatory')
tnetb_LLCNtxTESTframe = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 8), Counter32()).setLabel("tnetb-LLCNtxTESTframe").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNtxTESTframe.setStatus('mandatory')
tnetb_LLCNrxTESTframe = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 9), Counter32()).setLabel("tnetb-LLCNrxTESTframe").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNrxTESTframe.setStatus('mandatory')
tnetb_LLCNtxXIDframe = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 10), Counter32()).setLabel("tnetb-LLCNtxXIDframe").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNtxXIDframe.setStatus('mandatory')
tnetb_LLCNrxXIDframe = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 11), Counter32()).setLabel("tnetb-LLCNrxXIDframe").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNrxXIDframe.setStatus('mandatory')
tnetb_LLCNtxTESTresponse = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 12), Counter32()).setLabel("tnetb-LLCNtxTESTresponse").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNtxTESTresponse.setStatus('mandatory')
tnetb_LLCNrxTESTresponse = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 13), Counter32()).setLabel("tnetb-LLCNrxTESTresponse").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNrxTESTresponse.setStatus('mandatory')
tnetb_LLCNtxXIDresponse = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 14), Counter32()).setLabel("tnetb-LLCNtxXIDresponse").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNtxXIDresponse.setStatus('mandatory')
tnetb_LLCNrxXIDresponse = MibScalar((1, 3, 6, 1, 4, 1, 279, 2, 6, 16, 3, 1, 1, 15), Counter32()).setLabel("tnetb-LLCNrxXIDresponse").setMaxAccess("readonly")
if mibBuilder.loadTexts: tnetb_LLCNrxXIDresponse.setStatus('mandatory')
mibBuilder.exportSymbols("OLIVETTI-MIB", pblms_systemrmInstName=pblms_systemrmInstName, uxos_cntvSwpin=uxos_cntvSwpin, uxos_ratevFaults=uxos_ratevFaults, netbconfiguredNCB=netbconfiguredNCB, lms_ProductId=lms_ProductId, uxos_lioSubAddr=uxos_lioSubAddr, onetwareBinderyAndMiscRequests=onetwareBinderyAndMiscRequests, uxos_smemEntry=uxos_smemEntry, uxos_kmemInstName=uxos_kmemInstName, uxos_ratevPgpgout=uxos_ratevPgpgout, uxos_sumvIntr=uxos_sumvIntr, uxos_startOfQueue=uxos_startOfQueue, uxos_smemInstName=uxos_smemInstName, uxos_queue21=uxos_queue21, tnetb_TRSPreserved5=tnetb_TRSPreserved5, uxx25_numOfresetrece=uxx25_numOfresetrece, uxos_aioread=uxos_aioread, onetwareLogicalLockRequests=onetwareLogicalLockRequests, uxos_demand=uxos_demand, uxos_tDw=uxos_tDw, uxos_spare=uxos_spare, ethetxframexceeding=ethetxframexceeding, netbmaxdatapacket=netbmaxdatapacket, uxos_lioTable=uxos_lioTable, tnetb_NTWKTable=tnetb_NTWKTable, onetwareCacheMisses=onetwareCacheMisses, tnetb_LLCNSubAddr=tnetb_LLCNSubAddr, uxlms_sdrmSysName=uxlms_sdrmSysName, uxos_psoutok=uxos_psoutok, uxos_vSftlock=uxos_vSftlock, uxlapb_numOfReserved1=uxlapb_numOfReserved1, uxos_disc=uxos_disc, uxos_ratevTrap=uxos_ratevTrap, uxos_numOfCpu=uxos_numOfCpu, uxos_cntvSwpout=uxos_cntvSwpout, netbnumbernames=netbnumbernames, uxos_rsout=uxos_rsout, lms_ResourceName=lms_ResourceName, uxos_lock_write=uxos_lock_write, uxos_vBuf=uxos_vBuf, uxos_vxinodeovf=uxos_vxinodeovf, ntlms_systemrm=ntlms_systemrm, uxos_vPfault=uxos_vPfault, lms_Class=lms_Class, uxlapb_numOfbusyconent=uxlapb_numOfbusyconent, uxos_tDmalimit=uxos_tDmalimit, lms_LogString=lms_LogString, pb_dos=pb_dos, uxos_kmemEntry=uxos_kmemEntry, uxos_lgFail=uxos_lgFail, uxtp02_numOfnumberTPDUReceived=uxtp02_numOfnumberTPDUReceived, pblms_systemrm=pblms_systemrm, uxos_queue12=uxos_queue12, tnetb_TRSPrxdatabyte=tnetb_TRSPrxdatabyte, uxos_flockSysName=uxos_flockSysName, uxlapb_numOffrmrrece=uxlapb_numOffrmrrece, uxos_buffercacheSysName=uxos_buffercacheSysName, uxos_rel_async=uxos_rel_async, onetwareDirectoryRequests=onetwareDirectoryRequests, uxos_minor=uxos_minor, uxos_rel_abort=uxos_rel_abort, etheInstName=etheInstName, uxos_ratevPswpout=uxos_ratevPswpout, uxos_cpuUser=uxos_cpuUser, elc_ELC=elc_ELC, uxos_vmtotal=uxos_vmtotal, uxos_longEnter=uxos_longEnter, onetwareMaxSimultaneousSemaphores=onetwareMaxSimultaneousSemaphores, uxlmx_svbytesrcvd=uxlmx_svbytesrcvd, tnetb_TRSPsuppconnection=tnetb_TRSPsuppconnection, uxtp02_numOfctTPDUSuccessfullOutgoing=uxtp02_numOfctTPDUSuccessfullOutgoing, uxos_bootTable=uxos_bootTable, uxos_dblEnters=uxos_dblEnters, elctxsuccess=elctxsuccess, uxos_rmemEntry=uxos_rmemEntry, uxos_lioSysName=uxos_lioSysName, uxos_cntvSyscall=uxos_cntvSyscall, ntlms_sdrmTable=ntlms_sdrmTable, uxos_flockEntry=uxos_flockEntry, ethe_MAC1=ethe_MAC1, uxos_tRmtxt=uxos_tRmtxt, onetware_SRVNWTable=onetware_SRVNWTable, uxos_rtminfoSubAddr=uxos_rtminfoSubAddr, uxos_sysInstName=uxos_sysInstName, tnetb_NTWKrxreassembled=tnetb_NTWKrxreassembled, uxos_flockInstName=uxos_flockInstName, tnetb_NTWKrxbyte=tnetb_NTWKrxbyte, uxos_queue82=uxos_queue82, uxos_sumvPgfrec=uxos_sumvPgfrec, uxlapb_numOfdataoctrece=uxlapb_numOfdataoctrece, uxos_rmemSubAddr=uxos_rmemSubAddr, uxos_aiohab=uxos_aiohab, elctxlostCTS=elctxlostCTS, lapbEntry=lapbEntry, uxos_vNglobpris=uxos_vNglobpris, uxos_msg_rcv_sleep=uxos_msg_rcv_sleep, ethetxlostCTS=ethetxlostCTS, uxtp02_tp02SysName=uxtp02_tp02SysName, uxos_ipcinfo=uxos_ipcinfo, uxos_numJobsToDr=uxos_numJobsToDr, uxos_sysexec=uxos_sysexec, uxos_shlbinfoSubAddr=uxos_shlbinfoSubAddr, tp02=tp02, uxlapb_numOfReserved4=uxlapb_numOfReserved4, uxos_totNumWrite=uxos_totNumWrite, uxos_vDfree=uxos_vDfree, uxos_queue91=uxos_queue91, uxos_pswitch=uxos_pswitch, pblms_systemrmSysName=pblms_systemrmSysName, uxos_shm_get=uxos_shm_get, uxos_evPoll=uxos_evPoll, uxos_vmrateInstName=uxos_vmrateInstName, tnetb_NETBSysName=tnetb_NETBSysName, uxos_freememLeast=uxos_freememLeast, uxos_rtminfoTable=uxos_rtminfoTable, uxos_smlMem=uxos_smlMem, netbSubAddr=netbSubAddr, uxos_bootSysName=uxos_bootSysName, uxos_shlbs=uxos_shlbs, uxos_ovszMem=uxos_ovszMem, uxos_tVm=uxos_tVm, uxos_ufsfreeinodeTable=uxos_ufsfreeinodeTable, uxos_pswapout=uxos_pswapout, uxx25_numOfoctsent=uxx25_numOfoctsent, netbmaxNCB=netbmaxNCB, uxlms_sdrm=uxlms_sdrm, uxos_tFlckrec=uxos_tFlckrec, uxos_lock_rd_intr=uxos_lock_rd_intr, uxos_core=uxos_core, uxos_dirblk=uxos_dirblk, netbmaxdatagram=netbmaxdatagram, uxlapb_numOfrrrece=uxlapb_numOfrrrece, uxlapb_lapbInstName=uxlapb_lapbInstName, uxos_ratevExfod=uxos_ratevExfod, uxos_ratevPgrec=uxos_ratevPgrec, uxos_ratevXifrec=uxos_ratevXifrec, uxx25_numOfrejxsent=uxx25_numOfrejxsent, uxos_msg_snd=uxos_msg_snd, uxos_lock_wr_sleep=uxos_lock_wr_sleep, uxos_sumvFaults=uxos_sumvFaults, etheSysName=etheSysName, uxos_tuneSysName=uxos_tuneSysName, netbadaptertype=netbadaptertype, uxos_shlbinfoTable=uxos_shlbinfoTable, uxos_vmsum=uxos_vmsum, uxos_msg_lock_sleep=uxos_msg_lock_sleep, uxos_get_reuse=uxos_get_reuse, tnetb_TRSPSubAddr=tnetb_TRSPSubAddr, tnetb_NTWKtxsegmented=tnetb_NTWKtxsegmented, uxos_rtminfoEntry=uxos_rtminfoEntry, uxos_vminfoInstName=uxos_vminfoInstName, uxos_syserrSubAddr=uxos_syserrSubAddr, onetwareSharedMemorySize=onetwareSharedMemorySize, uxos_getmap=uxos_getmap, uxlapb_numOfDISCnitsent=uxlapb_numOfDISCnitsent, x25Entry=x25Entry, uxos_cpuEntry=uxos_cpuEntry, uxos_namecache=uxos_namecache, uxlmx_SRVLMInstName=uxlmx_SRVLMInstName, uxos_queue71=uxos_queue71, uxx25_numOfdiagnsent=uxx25_numOfdiagnsent, uxos_lboltEntry=uxos_lboltEntry, uxos_drivePerf=uxos_drivePerf, uxos_readch=uxos_readch, uxos_liopoll=uxos_liopoll, uxos_flockTable=uxos_flockTable, uxos_sysTable=uxos_sysTable, onetwareClientConnInUse=onetwareClientConnInUse, uxos_vmrateEntry=uxos_vmrateEntry, uxos_syserrEntry=uxos_syserrEntry, uxos_ratevZfod=uxos_ratevZfod, uxos_get_reclaim=uxos_get_reclaim, uxos_avenrunSubAddr=uxos_avenrunSubAddr, uxos_avenrunSysName=uxos_avenrunSysName, uxos_sumvExfod=uxos_sumvExfod, uxos_pfreemiss=uxos_pfreemiss, uxos_shm_get_fail=uxos_shm_get_fail, uxos_phwrite=uxos_phwrite, elc_ELCEntry=elc_ELCEntry, uxos_ratevSwpout=uxos_ratevSwpout, uxos_tPadd12=uxos_tPadd12, uxos_lock_read=uxos_lock_read, uxos_numOfTick=uxos_numOfTick, uxos_vPswpin=uxos_vPswpin, uxos_vmcntTable=uxos_vmcntTable, uxos_cntvZfod=uxos_cntvZfod, uxos_queue72=uxos_queue72, uxos_sumvfault=uxos_sumvfault, netbparamstype=netbparamstype, uxx25_numOfoctrece=uxx25_numOfoctrece, uxos_vSwpout=uxos_vSwpout, uxtp02_numOftDataReceived=uxtp02_numOftDataReceived, tnetb_TRSPrxTPDU=tnetb_TRSPrxTPDU, uxx25_numOfresetretries=uxx25_numOfresetretries, uxos_swapout=uxos_swapout, uxos_rectot=uxos_rectot, netbtxsuccesspack=netbtxsuccesspack, uxlmx_wknumNCBs=uxlmx_wknumNCBs, tnetb_TRSPsuccessoutconnect=tnetb_TRSPsuccessoutconnect, tnetb_TRSPnoendpoint=tnetb_TRSPnoendpoint, uxos_rel_dontneed=uxos_rel_dontneed, uxos_cntvFastpgrec=uxos_cntvFastpgrec, etheSubAddr=etheSubAddr, uxos_smlFail=uxos_smlFail, uxos_bwrite=uxos_bwrite, uxos_file=uxos_file, uxos_sumvSyscall=uxos_sumvSyscall, lms_FilterType=lms_FilterType, uxos_filecnt=uxos_filecnt, lms_trap=lms_trap, uxos_var=uxos_var, uxos_minfoEntry=uxos_minfoEntry, uxtp02_numOfctTPDUUnSuccessfullIncoming=uxtp02_numOfctTPDUUnSuccessfullIncoming, netb_NBEUI=netb_NBEUI, onetwareNumLogicalLocks=onetwareNumLogicalLocks, uxos_flckinfoEntry=uxos_flckinfoEntry, uxos_bootEntry=uxos_bootEntry, uxos_lioinfo=uxos_lioinfo, uxos_flckinfo=uxos_flckinfo, uxos_longLook=uxos_longLook, uxos_tPadd13=uxos_tPadd13, uxos_pagecreate=uxos_pagecreate, uxos_vmcntSubAddr=uxos_vmcntSubAddr, uxos_vxinopage=uxos_vxinopage, uxos_cachehit=uxos_cachehit, uxlapb_numOfzerotime=uxlapb_numOfzerotime, uxos_ufsinodeovf=uxos_ufsinodeovf, ethetxattempted=ethetxattempted, uxos_sumvDfree=uxos_sumvDfree, uxos_varSysName=uxos_varSysName, uxos_namecacheEntry=uxos_namecacheEntry, uxos_fileInstName=uxos_fileInstName, uxos_unmodfl=uxos_unmodfl, uxos_hits=uxos_hits, uxos_cpu=uxos_cpu, winlms_sdrmTable=winlms_sdrmTable, uxos_pfault=uxos_pfault, uxos_lread=uxos_lread, uxos_varEntry=uxos_varEntry, uxos_ratevPgout=uxos_ratevPgout, uxos_vmsumEntry=uxos_vmsumEntry, etherxalignment=etherxalignment, tnetb_TRSPrxTSDU=tnetb_TRSPrxTSDU, tnetb_LLCNtxTESTresponse=tnetb_LLCNtxTESTresponse, tnetb_LLCNrxTESTframe=tnetb_LLCNrxTESTframe, onetwareNumSemaphores=onetwareNumSemaphores, uxos_inodeovf=uxos_inodeovf, uxos_lboltSysName=uxos_lboltSysName, uxos_kmeminfoTable=uxos_kmeminfoTable, uxlmx_SRVLMTable=uxlmx_SRVLMTable, uxos_msg_rcv_again=uxos_msg_rcv_again, uxos_rmemNumOfPages=uxos_rmemNumOfPages, elcrxcollision=elcrxcollision, uxos_cntvXsfrec=uxos_cntvXsfrec)
mibBuilder.exportSymbols("OLIVETTI-MIB", uxos_sumvPswpin=uxos_sumvPswpin, tnetb_NTWKtxPDU=tnetb_NTWKtxPDU, uxos_cpuInstName=uxos_cpuInstName, onetwareMaxSimultaneousPhysLocks=onetwareMaxSimultaneousPhysLocks, tnetb_LLCNrxXIDresponse=tnetb_LLCNrxXIDresponse, uxos_aioTable=uxos_aioTable, uxos_avenrunEntry=uxos_avenrunEntry, ntlms_sdrmInstName=ntlms_sdrmInstName, uxos_tune=uxos_tune, uxos_aiowrite=uxos_aiowrite, uxos_freememMost=uxos_freememMost, uxos_segminfo=uxos_segminfo, uxos_unlock=uxos_unlock, uxos_cntvSwtch=uxos_cntvSwtch, tnetb_NETBunresolutednames=tnetb_NETBunresolutednames, lmsSystemClass=lmsSystemClass, onetwareSemaphoreRequests=onetwareSemaphoreRequests, tnetb_NETBSubAddr=tnetb_NETBSubAddr, uxos_sumvPswpout=uxos_sumvPswpout, uxos_numOtherOp=uxos_numOtherOp, tnetb_LLCNtxXIDframe=tnetb_LLCNtxXIDframe, uxlapb_numOffrmrsent=uxlapb_numOffrmrsent, uxos_wIo=uxos_wIo, netbpendingsession=netbpendingsession, uxlapb_numOfrejrece=uxlapb_numOfrejrece, uxos_avenrun=uxos_avenrun, uxos_lioInstName=uxos_lioInstName, uxos_ipcInstName=uxos_ipcInstName, uxos_cumulSeekDist=uxos_cumulSeekDist, uxos_ratevSyscall=uxos_ratevSyscall, uxtp02_numOfdetectedTPDUProtocolError=uxtp02_numOfdetectedTPDUProtocolError, ethetxmaxcollision=ethetxmaxcollision, uxlmx_SRVLMSysName=uxlmx_SRVLMSysName, uxlmx_svbytessent=uxlmx_svbytessent, uxx25_numOfcallsent=uxx25_numOfcallsent, pblms_systemrmTable=pblms_systemrmTable, winlms_systemrmTable=winlms_systemrmTable, uxx25_numOfrestrece=uxx25_numOfrestrece, uxx25_numOfregistrece=uxx25_numOfregistrece, netbfreeNCB=netbfreeNCB, uxos_buffercacheInstName=uxos_buffercacheInstName, uxos_shlblnks=uxos_shlblnks, netbnumbersessions=netbnumbersessions, uxos_iget=uxos_iget, uxos_cntvSeqfree=uxos_cntvSeqfree, uxos_numUnlogErr=uxos_numUnlogErr, uxos_queue51=uxos_queue51, uxos_vPgrec=uxos_vPgrec, lapbTable=lapbTable, uxos_kmemSysName=uxos_kmemSysName, uxos_flckinfoSubAddr=uxos_flckinfoSubAddr, onetwareReadRequests=onetwareReadRequests, tnetb_NTWKresourceerror=tnetb_NTWKresourceerror, elc_ELCTable=elc_ELCTable, uxlapb_numOfoutsequence=uxlapb_numOfoutsequence, lms_sys_map=lms_sys_map, onetware_SRVNW=onetware_SRVNW, uxos_shlbinfo=uxos_shlbinfo, tnetb_NTWKPDUbadformat=tnetb_NTWKPDUbadformat, uxx25_numOfrrxrece=uxx25_numOfrrxrece, pc_win=pc_win, elctxattempted=elctxattempted, uxos_psinok=uxos_psinok, uxos_vPgin=uxos_vPgin, elctxframexceeding=elctxframexceeding, netbInstName=netbInstName, tnetb_LLCNInstName=tnetb_LLCNInstName, pc_dos=pc_dos, uxos_aioInstName=uxos_aioInstName, uxos_sem_op_sleep=uxos_sem_op_sleep, tnetb_TRSPprotocolerror=tnetb_TRSPprotocolerror, uxos_sumvRev=uxos_sumvRev, uxlmx_svsopens=uxlmx_svsopens, onetwareWriteRequests=onetwareWriteRequests, uxos_rmemTable=uxos_rmemTable, uxos_vxipage=uxos_vxipage, uxos_vPhash=uxos_vPhash, uxlapb_numOfSABMitrece=uxlapb_numOfSABMitrece, uxos_syserr=uxos_syserr, uxos_swpocc=uxos_swpocc, uxos_cntvPswpin=uxos_cntvPswpin, ntlms_sdrmSysName=ntlms_sdrmSysName, uxx25_numOfclearrece=uxx25_numOfclearrece, netbconfiguredpending=netbconfiguredpending, uxos_sem_op_fail=uxos_sem_op_fail, tnetb_TRSPopenerror=tnetb_TRSPopenerror, uxos_vSxt=uxos_vSxt, uxos_tPadd11=uxos_tPadd11, uxx25_numOfcallunsucfull=uxx25_numOfcallunsucfull, uxlms_sdrmEntry=uxlms_sdrmEntry, netbtxFRMR=netbtxFRMR, uxos_tSl=uxos_tSl, uxlms_sdrmTable=uxlms_sdrmTable, uxos_ratevPgpgin=uxos_ratevPgpgin, tnetb_NTWKInstName=tnetb_NTWKInstName, uxos_vmtotalEntry=uxos_vmtotalEntry, lmsSystemStatus=lmsSystemStatus, uxos_sumvPgout=uxos_sumvPgout, etherxoverrun=etherxoverrun, uxos_buffercache=uxos_buffercache, uxlmx_svdevopens=uxlmx_svdevopens, uxos_vBufhwm=uxos_vBufhwm, olivetti=olivetti, uxos_vPgpgout=uxos_vPgpgout, uxos_tMinasmem=uxos_tMinasmem, uxos_sem_get_fail=uxos_sem_get_fail, uxlapb_numOfrejsent=uxlapb_numOfrejsent, uxos_vSwpin=uxos_vSwpin, tnetb_LLCNtxUI5rame=tnetb_LLCNtxUI5rame, uxx25_numOfrrxsent=uxx25_numOfrrxsent, ethetxdeferred=ethetxdeferred, tnetb_LLCNtxMACerror=tnetb_LLCNtxMACerror, uxos_cachemiss=uxos_cachemiss, uxx25_numOfdiagnrece=uxx25_numOfdiagnrece, tnetb_TRSPtxretranDATATPDU=tnetb_TRSPtxretranDATATPDU, uxos_tArmtxt=uxos_tArmtxt, uxos_ratevNzfod=uxos_ratevNzfod, tnetb_TRSPsuccessinconnect=tnetb_TRSPsuccessinconnect, tnetb_LLCNrxXIDframe=tnetb_LLCNrxXIDframe, uxos_lock_wr_intr=uxos_lock_wr_intr, elcrxnobuffer=elcrxnobuffer, tnetb_NTWKPDUunsupportedoption=tnetb_NTWKPDUunsupportedoption, tnetb_NETBTable=tnetb_NETBTable, uxos_tAvm=uxos_tAvm, netb_NBEUITable=netb_NBEUITable, onetwareCreateConnectionRequests=onetwareCreateConnectionRequests, uxx25_numOfresetsent=uxx25_numOfresetsent, uxos_syserrSysName=uxos_syserrSysName, pblms_system=pblms_system, uxos_msg_get_fail=uxos_msg_get_fail, uxos_tRm=uxos_tRm, uxos_rel_free=uxos_rel_free, elcrxalignment=elcrxalignment, lms_LogType=lms_LogType, uxos_namei=uxos_namei, onetwareMaxSimultaneousFileLocks=onetwareMaxSimultaneousFileLocks, netbrxsuccesspack=netbrxsuccesspack, uxos_ratevPgin=uxos_ratevPgin, uxlapb_numOfUAnitsent=uxlapb_numOfUAnitsent, uxlapb_numOfinvalidframes=uxlapb_numOfinvalidframes, uxos_vmsumSubAddr=uxos_vmsumSubAddr, uxos_sumvZfod=uxos_sumvZfod, uxos_vXifrec=uxos_vXifrec, uxos_bread=uxos_bread, ethetxbytesuccess=ethetxbytesuccess, uxlms_systemrmEntry=uxlms_systemrmEntry, elctxbytesuccess=elctxbytesuccess, ntlms_system=ntlms_system, elcrxCRC=elcrxCRC, uxos_ipcEntry=uxos_ipcEntry, uxos_tAvmtxt=uxos_tAvmtxt, tnetb_NTWK=tnetb_NTWK, uxos_vmcntSysName=uxos_vmcntSysName, uxx25_numOfInformat=uxx25_numOfInformat, uxos_vmtotalSysName=uxos_vmtotalSysName, uxos_lock_wr_again=uxos_lock_wr_again, uxos_vVfault=uxos_vVfault, uxos_minQueLen=uxos_minQueLen, uxos_avenrunInstName=uxos_avenrunInstName, uxos_sspg=uxos_sspg, uxos_queue62=uxos_queue62, uxlapb_numOfrnrrece=uxlapb_numOfrnrrece, uxos_tPw=uxos_tPw, uxos_kmeminfoSubAddr=uxos_kmeminfoSubAddr, uxx25_numOfclearunsucfull=uxx25_numOfclearunsucfull, uxos_runque=uxos_runque, uxos_vmrateSubAddr=uxos_vmrateSubAddr, uxos_liowrite=uxos_liowrite, netbreportingperiod=netbreportingperiod, uxos_lboltInstName=uxos_lboltInstName, tnetb_TRSPreserved1=tnetb_TRSPreserved1, uxos_nprocTable=uxos_nprocTable, uxos_nprocEntry=uxos_nprocEntry, uxos_lock_rd_fail=uxos_lock_rd_fail, ntlms_systemrmInstName=ntlms_systemrmInstName, tnetb_LLCNTable=tnetb_LLCNTable, uxos_cntvPgpgin=uxos_cntvPgpgin, uxos_rtminfoInstName=uxos_rtminfoInstName, uxlmx_svstimedout=uxlmx_svstimedout, uxtp02_numOfctTPDUConfProtErrorDetected=uxtp02_numOfctTPDUConfProtErrorDetected, uxos_diskSysName=uxos_diskSysName, uxos_cntvTrap=uxos_cntvTrap, uxos_numOfFile=uxos_numOfFile, uxos_rcvint=uxos_rcvint, uxos_lastInQueue=uxos_lastInQueue, uxos_vSptmap=uxos_vSptmap, uxos_vXsdsegs=uxos_vXsdsegs, uxx25_numOfregistsent=uxx25_numOfregistsent, elctxdeferred=elctxdeferred, tnetb_TRSPreserved3=tnetb_TRSPreserved3, uxos_sysread=uxos_sysread, uxos_shm_cntl=uxos_shm_cntl, winlms_systemrmSubAddr=winlms_systemrmSubAddr, uxos_fault=uxos_fault, elctxcollision=elctxcollision, netb_NBEUIEntry=netb_NBEUIEntry, uxos_aiomsb=uxos_aiomsb, uxx25_x25InstName=uxx25_x25InstName, netbtxIframeserr=netbtxIframeserr, uxos_sem_op_intr=uxos_sem_op_intr, uxos_vFiller=uxos_vFiller, uxos_shm_dtch=uxos_shm_dtch, uxos_sysSysName=uxos_sysSysName, uxos_rtminfoSysName=uxos_rtminfoSysName, uxos_queue52=uxos_queue52, uxos_ratevXsfrec=uxos_ratevXsfrec, uxx25_x25SysName=uxx25_x25SysName, uxos_vxSysName=uxos_vxSysName, uxtp02_numOfrefusedTPDUProtocolError=uxtp02_numOfrefusedTPDUProtocolError, uxos_queue32=uxos_queue32, uxos_bootTime=uxos_bootTime, uxos_kmeminfoEntry=uxos_kmeminfoEntry, tnetb_NTWKtxforwarded=tnetb_NTWKtxforwarded, tnetb_TRSPtxretranTPDU=tnetb_TRSPtxretranTPDU, winlms_systemrmInstName=winlms_systemrmInstName, uxos_shlbinfoInstName=uxos_shlbinfoInstName, uxos_ratevSeqfree=uxos_ratevSeqfree, uxos_wSwap=uxos_wSwap, uxos_diskEntry=uxos_diskEntry, uxlmx_wkautorec=uxlmx_wkautorec, uxos_nprocSysName=uxos_nprocSysName, uxos_flockinfo=uxos_flockinfo, uxos_vPswpout=uxos_vPswpout, uxos_sumvPgrec=uxos_sumvPgrec, lmsSystemName=lmsSystemName, uxos_shm_atch_fail=uxos_shm_atch_fail, elc_MAC=elc_MAC, uxos_cumulUse=uxos_cumulUse, uxos_msg_get=uxos_msg_get, uxos_queue41=uxos_queue41, uxos_memSysName=uxos_memSysName, uxos_smemNumOfPages=uxos_smemNumOfPages, tnetb_NETBreserved=tnetb_NETBreserved, winlms_sdrmSysName=winlms_sdrmSysName, uxos_sumvPgin=uxos_sumvPgin, uxos_tuneSubAddr=uxos_tuneSubAddr, elcSubAddr=elcSubAddr, uxos_vxEntry=uxos_vxEntry, onetwareOpenRequests=onetwareOpenRequests, uxlmx_svsyserrors=uxlmx_svsyserrors, uxlapb_numOfretrframes=uxlapb_numOfretrframes, uxos_misses=uxos_misses, lms_RecLevel=lms_RecLevel, uxtp02_numOfctTPDUSuccessfullIncoming=uxtp02_numOfctTPDUSuccessfullIncoming, elcrxshframe=elcrxshframe, elcrxsuccess=elcrxsuccess, uxos_memTable=uxos_memTable, uxos_vmcntInstName=uxos_vmcntInstName, uxlms_systemrmSysName=uxlms_systemrmSysName, uxos_msg_rcv_fail=uxos_msg_rcv_fail, tnetb_NTWKtxcongested=tnetb_NTWKtxcongested, uxos_syscall=uxos_syscall, uxos_cntvPgin=uxos_cntvPgin, uxos_vScan=uxos_vScan)
mibBuilder.exportSymbols("OLIVETTI-MIB", uxos_procovf=uxos_procovf, uxos_shm_atch=uxos_shm_atch, etherxCRC=etherxCRC, uxx25_x25SubAddr=uxx25_x25SubAddr, uxos_maxQueLen=uxos_maxQueLen, netbreleaselevel=netbreleaselevel, tnetb_TRSPEntry=tnetb_TRSPEntry, uxos_vMaxup=uxos_vMaxup, uxos_phread=uxos_phread, uxos_namecacheInstName=uxos_namecacheInstName, uxos_cntvPgout=uxos_cntvPgout, uxlapb_numOfinfosent=uxlapb_numOfinfosent, uxlapb_numOfDISCnitrece=uxlapb_numOfDISCnitrece, uxos_sumvTrap=uxos_sumvTrap, uxos_cntvPgfrec=uxos_cntvPgfrec, uxlmx_wkfiNCBs=uxlmx_wkfiNCBs, uxos_vminfoSubAddr=uxos_vminfoSubAddr, uxlmx_wkfcNCBs=uxlmx_wkfcNCBs, uxx25_numOfdataretrunsucfull=uxx25_numOfdataretrunsucfull, uxos_numOfUfsfreeinode=uxos_numOfUfsfreeinode, uxos_pagemissatch=uxos_pagemissatch, uxos_physmem=uxos_physmem, uxos_lioEntry=uxos_lioEntry, tnetb_NTWKrxnetworkerror=tnetb_NTWKrxnetworkerror, uxlmx_LM=uxlmx_LM, ethetxunderrun=ethetxunderrun, uxlapb_numOfrnrsent=uxlapb_numOfrnrsent, uxos_memSubAddr=uxos_memSubAddr, uxx25_numOfdatarece=uxx25_numOfdatarece, uxos_textovf=uxos_textovf, uxos_ratevNexfod=uxos_ratevNexfod, uxos_aioEntry=uxos_aioEntry, uxos_buffercacheEntry=uxos_buffercacheEntry, tnetb_TRSP=tnetb_TRSP, uxos_smlAlloc=uxos_smlAlloc, netbtxnobuffer=netbtxnobuffer, uxos_sfpg=uxos_sfpg, uxos_avenrun3=uxos_avenrun3, uxx25_numOfrestretries=uxx25_numOfrestretries, tnetb_TRSPtxTSDU=tnetb_TRSPtxTSDU, uxos_msg_snd_intr=uxos_msg_snd_intr, uxlapb_lapbSysName=uxlapb_lapbSysName, netbANYoustanding=netbANYoustanding, winlms_systemrmSysName=winlms_systemrmSysName, uxos_cpuSubAddr=uxos_cpuSubAddr, netbT1expired=netbT1expired, uxos_cntvPdma=uxos_cntvPdma, tnetb_LLCN=tnetb_LLCN, uxos_boottime=uxos_boottime, uxos_cntvPgrec=uxos_cntvPgrec, elcInstName=elcInstName, uxos_tPadd=uxos_tPadd, onetwareInstName=onetwareInstName, onetwareMaxClientConnSupported=onetwareMaxClientConnSupported, uxlmx_svpermerrors=uxlmx_svpermerrors, uxos_prepfreemiss=uxos_prepfreemiss, uxos_bbusy=uxos_bbusy, uxos_kmemNumOfPages=uxos_kmemNumOfPages, uxlapb_numOfDISCitsent=uxlapb_numOfDISCitsent, winlms_systemrm=winlms_systemrm, uxos_smSysName=uxos_smSysName, winlms_sdrm=winlms_sdrm, uxos_sysfork=uxos_sysfork, uxlmx_SRVLMSubAddr=uxlmx_SRVLMSubAddr, ntlms_systemrmSubAddr=ntlms_systemrmSubAddr, uxos_cw=uxos_cw, uxx25_numOfcallrece=uxx25_numOfcallrece, uxos_runocc=uxos_runocc, etheSQEtsterrors=etheSQEtsterrors, netbreserved=netbreserved, onetwareTotalPackets=onetwareTotalPackets, uxlapb_numOfUAnitrece=uxlapb_numOfUAnitrece, uxos_namecacheTable=uxos_namecacheTable, uxos_cntvScan=uxos_cntvScan, uxx25_numOflogicalerrors=uxx25_numOflogicalerrors, uxos_minfo=uxos_minfo, uxos_syserrInstName=uxos_syserrInstName, uxlapb_lapbSubAddr=uxlapb_lapbSubAddr, uxos_tuneTable=uxos_tuneTable, tnetb_TRSPrxinvalidTPDU=tnetb_TRSPrxinvalidTPDU, uxos_reccnt=uxos_reccnt, uxos_vmtotalInstName=uxos_vmtotalInstName, uxos_psinfail=uxos_psinfail, uxx25_numOfclearretries=uxx25_numOfclearretries, uxlapb_numOfDMitsent=uxlapb_numOfDMitsent, uxos_cpuSxbrk=uxos_cpuSxbrk, etherxsuccess=etherxsuccess, uxlapb_numOfUAitsent=uxlapb_numOfUAitsent, uxos_lioread=uxos_lioread, tnetb_TRSPactiveconnection=tnetb_TRSPactiveconnection, uxos_ratevSwpin=uxos_ratevSwpin, uxos_swap=uxos_swap, uxx25_numOfinterrece=uxx25_numOfinterrece, uxos_rel_write=uxos_rel_write, uxos_xmtint=uxos_xmtint, uxos_vAutoup=uxos_vAutoup, uxos_sem_cntl=uxos_sem_cntl, uxlapb_numOfInformatype=uxlapb_numOfInformatype, onetwareNumPhysLocks=onetwareNumPhysLocks, uxos_ratevVrfod=uxos_ratevVrfod, uxos_aiolock=uxos_aiolock, uxos_diskTable=uxos_diskTable, uxos_ufsfreeinodeSubAddr=uxos_ufsfreeinodeSubAddr, onetwareLostPacketResends=onetwareLostPacketResends, uxos_bootSubAddr=uxos_bootSubAddr, winlms_system=winlms_system, uxos_vmsumInstName=uxos_vmsumInstName, uxos_diskSubAddr=uxos_diskSubAddr, onetwareMessageRequests=onetwareMessageRequests, uxos_tFree=uxos_tFree, uxos_mdmint=uxos_mdmint, uxos_fileovf=uxos_fileovf, uxos_ratevNvrfod=uxos_ratevNvrfod, uxlmx_wksessfail=uxlmx_wksessfail, tnetb_TRSPTable=tnetb_TRSPTable, uxos_freedpgs=uxos_freedpgs, tnetb_NETBsuccessderegistr=tnetb_NETBsuccessderegistr, onetwareMaxSharedMemoryUsed=onetwareMaxSharedMemoryUsed, tnetb_LLCNEntry=tnetb_LLCNEntry, uxos_liolock=uxos_liolock, uxx25_numOfdatasent=uxx25_numOfdatasent, uxos_vminfo=uxos_vminfo, uxos_vminfoSysName=uxos_vminfoSysName, uxlapb_numOfDISCitrece=uxlapb_numOfDISCitrece, netbrxFRMR=netbrxFRMR, onetwareSysName=onetwareSysName, uxos_vmtotalTable=uxos_vmtotalTable, uxos_vxInstName=uxos_vxInstName, uxos_sumvNexfod=uxos_sumvNexfod, uxos_sumvScan=uxos_sumvScan, uxtp02_tp02SubAddr=uxtp02_tp02SubAddr, uxos_sysEntry=uxos_sysEntry, uxlms_system=uxlms_system, uxos_minfoSysName=uxos_minfoSysName, uxos_minfoTable=uxos_minfoTable, uxos_shmem=uxos_shmem, uxos_nprocInstName=uxos_nprocInstName, uxos_numOfProc=uxos_numOfProc, uxos_syserrTable=uxos_syserrTable, uxlmx_svfopens=uxlmx_svfopens, tnetb_NTWKtxnetworkerror=tnetb_NTWKtxnetworkerror, uxos_faulta=uxos_faulta, uxos_ufsfreeinodeEntry=uxos_ufsfreeinodeEntry, uxos_lock_rd_again=uxos_lock_rd_again, etherxnobuffer=etherxnobuffer, uxos_msg=uxos_msg, uxos_vMaxpmem=uxos_vMaxpmem, uxos_enters=uxos_enters, uxos_tMinarmem=uxos_tMinarmem, uxos_vHmask=uxos_vHmask, uxos_sem_get=uxos_sem_get, uxos_aiopoll=uxos_aiopoll, uxos_get_use=uxos_get_use, onetwarePrintRequests=onetwarePrintRequests, uxos_aioinfo=uxos_aioinfo, uxos_tAgeinterval=uxos_tAgeinterval, uxos_msg_rcv_intr=uxos_msg_rcv_intr, uxos_vXsfrec=uxos_vXsfrec, uxos_cntvPgpgout=uxos_cntvPgpgout, onetwareCreateFileRequests=onetwareCreateFileRequests, tnetb_NETBrxPDU=tnetb_NETBrxPDU, netbTiexpired=netbTiexpired, uxos_purges=uxos_purges, uxtp02_numOfctTPDUUnSuccessfullOutgoing=uxtp02_numOfctTPDUUnSuccessfullOutgoing, uxos_ratevPswpin=uxos_ratevPswpin, uxos_sumvSwtch=uxos_sumvSwtch, uxos_driveActive=uxos_driveActive, uxtp02_tp02InstName=uxtp02_tp02InstName, uxos_flckinfoSysName=uxos_flckinfoSysName, uxlapb_numOfSABMnitrece=uxlapb_numOfSABMnitrece, uxos_diskInstName=uxos_diskInstName, uxos_aiohfbuf=uxos_aiohfbuf, tnetb_TRSPallocerror=tnetb_TRSPallocerror, uxos_vEmap=uxos_vEmap, uxos_lock_wr_fail=uxos_lock_wr_fail, tnetb_TRSPtxdatagramTPDU=tnetb_TRSPtxdatagramTPDU, uxos_vminfoEntry=uxos_vminfoEntry, uxos_vspg=uxos_vspg, uxos_totNumRead=uxos_totNumRead, uxos_cntvVrfod=uxos_cntvVrfod, tnetb_TRSPreserved2=tnetb_TRSPreserved2, uxx25_numOfrestsent=uxx25_numOfrestsent, uxlapb_numOfDMitrece=uxlapb_numOfDMitrece, uxlapb_numOfReserved3=uxlapb_numOfReserved3, tnetb_LLCNrxUIframe=tnetb_LLCNrxUIframe, uxos_vmtotalSubAddr=uxos_vmtotalSubAddr, uxos_sumvSeqfree=uxos_sumvSeqfree, uxx25_numOfrestunsucfull=uxx25_numOfrestunsucfull, uxos_ufsfreeinodeSysName=uxos_ufsfreeinodeSysName, uxos_steal=uxos_steal, uxx25_numOfsyntaxerrors=uxx25_numOfsyntaxerrors, tnetb_TRSPreserved6=tnetb_TRSPreserved6, uxos_vmsumTable=uxos_vmsumTable, uxx25_numOfrnrxsent=uxx25_numOfrnrxsent, uxos_varTable=uxos_varTable, uxos_vmrate=uxos_vmrate, lmssysmapTable=lmssysmapTable, uxos_writech=uxos_writech, uxos_ipcTable=uxos_ipcTable, uxos_sysSubAddr=uxos_sysSubAddr, uxos_availkmem=uxos_availkmem, tnetb_LLCNtxXIDresponse=tnetb_LLCNtxXIDresponse, uxos_ipcSysName=uxos_ipcSysName, lms=lms, tnetb_TNB=tnetb_TNB, tnetb_NTWKrxPDU=tnetb_NTWKrxPDU, uxlmx_SRVLMEntry=uxlmx_SRVLMEntry, uxx25_numOfresetunsucfull=uxx25_numOfresetunsucfull, uxos_kmeminfoInstName=uxos_kmeminfoInstName, lms_SubClass=lms_SubClass, uxos_vmcntEntry=uxos_vmcntEntry, uxlapb_numOfbusycondet=uxlapb_numOfbusycondet, uxos_unmodsw=uxos_unmodsw, onetware_SRVNWEntry=onetware_SRVNWEntry, uxos_smemSubAddr=uxos_smemSubAddr, uxlms_nms=uxlms_nms, onetwareUnknownRequests=onetwareUnknownRequests, uxos_vxTable=uxos_vxTable, uxos_lboltTable=uxos_lboltTable, uxlmx_wksesstart=uxlmx_wksesstart, netbsoftwarelevel=netbsoftwarelevel, uxos_fileTable=uxos_fileTable, uxlapb_numOfinforece=uxlapb_numOfinforece, ntlms_systemrmEntry=ntlms_systemrmEntry, uxos_ratevSwtch=uxos_ratevSwtch, tp02Table=tp02Table, onetwareCurrentSharedMemoryUsage=onetwareCurrentSharedMemoryUsage, uxos_vPgpgin=uxos_vPgpgin, winlms_sdrmSubAddr=winlms_sdrmSubAddr, uxx25_numOfrejretries=uxx25_numOfrejretries, uxos_pswapin=uxos_pswapin, uxos_smEntry=uxos_smEntry, tnetb_NETBunsuccessderegistr=tnetb_NETBunsuccessderegistr, tnetb_TRSPSysName=tnetb_TRSPSysName, win_nt=win_nt, uxos_sumvFastpgrec=uxos_sumvFastpgrec, uxos_memSize=uxos_memSize, uxos_namecacheSysName=uxos_namecacheSysName, onetwareFileLockRequests=onetwareFileLockRequests, tnetb_NTWKreassemblytimeout=tnetb_NTWKreassemblytimeout, onetwareMaxSimultaneousOpens=onetwareMaxSimultaneousOpens, tnetb_TRSPoverrunTPDU=tnetb_TRSPoverrunTPDU, elctxmaxcollision=elctxmaxcollision, netbSysName=netbSysName, tnetb_NETBresolutednames=tnetb_NETBresolutednames, tnetb_TRSPreserved4=tnetb_TRSPreserved4, tnetb_TRSPrxdatagrmTPDU=tnetb_TRSPrxdatagrmTPDU, uxos_memInstName=uxos_memInstName, tp02Entry=tp02Entry, uxos_tuneEntry=uxos_tuneEntry, uxos_sumvIntrans=uxos_sumvIntrans, uxos_smTable=uxos_smTable, uxos_fileSysName=uxos_fileSysName, onetwarePeakClientConnUsed=onetwarePeakClientConnUsed)
mibBuilder.exportSymbols("OLIVETTI-MIB", uxos_vxinfo=uxos_vxinfo, lmsSystemType=lmsSystemType, uxos_rmemInstName=uxos_rmemInstName, uxos_kmeminfoSysName=uxos_kmeminfoSysName, uxos_cntvRev=uxos_cntvRev, x25Table=x25Table, uxos_ratevPdma=uxos_ratevPdma, uxos_totBlkResp=uxos_totBlkResp, tnetb_NETBrxinvalidPDU=tnetb_NETBrxinvalidPDU, uxlms_systemrmTable=uxlms_systemrmTable, uxos_cntvIntrans=uxos_cntvIntrans, tnetb_NETB=tnetb_NETB, ntlms_systemrmSysName=ntlms_systemrmSysName, uxos_memEntry=uxos_memEntry, uxos_ufsfreeinode=uxos_ufsfreeinode, uxos_availsmem=uxos_availsmem, uxos_smemTable=uxos_smemTable, uxos_ratevRev=uxos_ratevRev, uxos_msg_cntl=uxos_msg_cntl, uxos_lwrite=uxos_lwrite, uxos_smemSysName=uxos_smemSysName, uxos_vProc=uxos_vProc, wan=wan, uxos_tSw=uxos_tSw, winlms_nms=winlms_nms, uxos_vfpg=uxos_vfpg, uxx25_numOfclearsent=uxx25_numOfclearsent, tnetb_TRSPunsuccessinconnect=tnetb_TRSPunsuccessinconnect, uxlms_systemrm=uxlms_systemrm, elcrxoverrun=elcrxoverrun, uxtp02_numOfzeroingtime=uxtp02_numOfzeroingtime, pblms_systemrmSubAddr=pblms_systemrmSubAddr, uxos_wPio=uxos_wPio, ethetxlostCS=ethetxlostCS, uxlapb_numOfUAitrece=uxlapb_numOfUAitrece, uxos_smInstName=uxos_smInstName, uxtp02_numOfctTPDURefusedConfProtError=uxtp02_numOfctTPDURefusedConfProtError, uxlms_systemrmSubAddr=uxlms_systemrmSubAddr, uxos_minfoInstName=uxos_minfoInstName, uxos_buffercacheSubAddr=uxos_buffercacheSubAddr, ntlms_nms=ntlms_nms, winlms_sdrmEntry=winlms_sdrmEntry, uxos_sumvNzfod=uxos_sumvNzfod, uxos_sem_op_again=uxos_sem_op_again, lms_SubAddress=lms_SubAddress, uxos_lock_rd_sleep=uxos_lock_rd_sleep, uxos_rsin=uxos_rsin, uxos_queue01=uxos_queue01, uxos_cpuKernel=uxos_cpuKernel, tnetb_LLCNSysName=tnetb_LLCNSysName, tnetb_LLCNrxMACerror=tnetb_LLCNrxMACerror, uxos_sem_op=uxos_sem_op, uxos_nproc=uxos_nproc, netbrxIframeserr=netbrxIframeserr, onetwareSubAddr=onetwareSubAddr, tnetb_LLCNrxTESTresponse=tnetb_LLCNrxTESTresponse, uxos_tNotused=uxos_tNotused, uxos_cpuSysName=uxos_cpuSysName, lmssysmapEntry=lmssysmapEntry, uxos_minfoSubAddr=uxos_minfoSubAddr, uxos_sumvNvrfod=uxos_sumvNvrfod, uxos_liocall=uxos_liocall, uxlmx_svavresponse=uxlmx_svavresponse, uxx25_numOfdataretrsucfull=uxx25_numOfdataretrsucfull, uxos_vmsumSysName=uxos_vmsumSysName, uxos_tArm=uxos_tArm, tnetb_NETBInstName=tnetb_NETBInstName, uxos_shlbatts=uxos_shlbatts, uxos_shlbovf=uxos_shlbovf, uxos_queue11=uxos_queue11, uxlapb_numOfReserved2=uxlapb_numOfReserved2, tnetb_NTWKlifetime=tnetb_NTWKlifetime, uxos_evPost=uxos_evPost, uxos_shlbinfoEntry=uxos_shlbinfoEntry, uxos_sema=uxos_sema, onetwareNumFileLocks=onetwareNumFileLocks, uxtp02_numOftExpeditedDataSent=uxtp02_numOftExpeditedDataSent, uxos_vPbuf=uxos_vPbuf, tnetb_TRSPtxdatabyte=tnetb_TRSPtxdatabyte, uxos_kmemSubAddr=uxos_kmemSubAddr, uxos_cntvXifrec=uxos_cntvXifrec, tnetb_NTWKSysName=tnetb_NTWKSysName, uxos_ratevFastpgrec=uxos_ratevFastpgrec, uxos_swpque=uxos_swpque, uxos_cpuTable=uxos_cpuTable, uxos_sumvSwpin=uxos_sumvSwpin, tnetb_LLCNtxTESTframe=tnetb_LLCNtxTESTframe, uxos_sumvVrfod=uxos_sumvVrfod, uxos_vxSubAddr=uxos_vxSubAddr, uxtp02_numOftExpeditedDataReceived=uxtp02_numOftExpeditedDataReceived, uxlmx_svpwerrors=uxlmx_svpwerrors, uxos_vminfoTable=uxos_vminfoTable, uxtp02_numOftDataSent=uxtp02_numOftDataSent, uxlmx_wkuses=uxlmx_wkuses, uxos_flckinfoTable=uxos_flckinfoTable, uxos_vmrateTable=uxos_vmrateTable, uxos_cntvExfod=uxos_cntvExfod, elcSQEtsterrors=elcSQEtsterrors, uxos_cntvNzfod=uxos_cntvNzfod, uxos_buffercacheTable=uxos_buffercacheTable, uxos_msg_snd_fail=uxos_msg_snd_fail, tnetb_NETBsuccessregistr=tnetb_NETBsuccessregistr, uxos_sumvPgpgout=uxos_sumvPgpgout, uxos_smSubAddr=uxos_smSubAddr, uxos_pagemiss=uxos_pagemiss, uxos_tGpgslo=uxos_tGpgslo, uxos_bootInstName=uxos_bootInstName, uxos_lgMem=uxos_lgMem, uxos_totBlkTrans=uxos_totBlkTrans, uxos_queue31=uxos_queue31, uxos_rtminfo=uxos_rtminfo, uxos_msg_rcv=uxos_msg_rcv, elctxlostCS=elctxlostCS, ethe_ETH=ethe_ETH, uxx25_numOfrejunsucfull=uxx25_numOfrejunsucfull, uxlapb_numOfrrsent=uxlapb_numOfrrsent, uxos_syswrite=uxos_syswrite, uxos_avenrun1=uxos_avenrun1, uxlapb_numOfSABMnitsent=uxlapb_numOfSABMnitsent, uxos_avenrun2=uxos_avenrun2, uxlapb_numOfDMnitsent=uxlapb_numOfDMnitsent, tnetb_NETBEntry=tnetb_NETBEntry, uxos_queue22=uxos_queue22, onetware_NW=onetware_NW, uxlapb_numOfphystxerrors=uxlapb_numOfphystxerrors, uxlapb_numOfSABMitsent=uxlapb_numOfSABMitsent, onetwareCacheHits=onetwareCacheHits, uxos_queue61=uxos_queue61, uxos_avenrunTable=uxos_avenrunTable, uxos_scsi=uxos_scsi, onetwareNWProcs=onetwareNWProcs, uxos_ratevIntrans=uxos_ratevIntrans, uxtp02_numOfctTPDUCongestion=uxtp02_numOfctTPDUCongestion, uxos_tFsflushr=uxos_tFsflushr, tnetb_NTWKSubAddr=tnetb_NTWKSubAddr, uxx25_numOfrejxrece=uxx25_numOfrejxrece, uxos_major=uxos_major, uxos_evTrap=uxos_evTrap, tnetb_TRSPInstName=tnetb_TRSPInstName, trap_lms=trap_lms, uxos_cntvIntr=uxos_cntvIntr, uxos_cntvNvrfod=uxos_cntvNvrfod, ntlms_sdrmSubAddr=ntlms_sdrmSubAddr, tnetb_NTWKEntry=tnetb_NTWKEntry, uxos_tuneInstName=uxos_tuneInstName, onetwareMaxVolumes=onetwareMaxVolumes, uxlms_sdrmInstName=uxlms_sdrmInstName, uxos_aioSubAddr=uxos_aioSubAddr, uxlapb_numOfDMnitrece=uxlapb_numOfDMnitrece, netbDATAGRAMoutstanding=netbDATAGRAMoutstanding, uxos_rawch=uxos_rawch, uxos_tMinakmem=uxos_tMinakmem, uxos_queue42=uxos_queue42, uxos_namecacheSubAddr=uxos_namecacheSubAddr, uxos_aioSysName=uxos_aioSysName, uxos_flockSubAddr=uxos_flockSubAddr, uxos_vCall=uxos_vCall, winlms_sdrmInstName=winlms_sdrmInstName, uxos_swapin=uxos_swapin, ntlms_systemrmTable=ntlms_systemrmTable, lapb=lapb, netbtxaborted=netbtxaborted, pblms_systemrmEntry=pblms_systemrmEntry, uxlmx_SRVLM=uxlmx_SRVLM, uxos_ratevDfree=uxos_ratevDfree, uxlms_sdrmSubAddr=uxlms_sdrmSubAddr, uxos_ipcSubAddr=uxos_ipcSubAddr, uxos_sumvXsfrec=uxos_sumvXsfrec, uxx25_numOfrnrxrece=uxx25_numOfrnrxrece, uxos_freeswap=uxos_freeswap, uxos_sumvPgpgin=uxos_sumvPgpgin, uxos_freemiss=uxos_freemiss, uxlmx_svserrorout=uxlmx_svserrorout, uxos_vScrn=uxos_vScrn, uxtp02_numOfnumberTPDUSent=uxtp02_numOfnumberTPDUSent, netbmaxpending=netbmaxpending, uxos_liowait=uxos_liowait, x25=x25, ethetxsuccess=ethetxsuccess, uxos_kmeminfo=uxos_kmeminfo, uxos_msg_snd_sleep=uxos_msg_snd_sleep, uxos_queue92=uxos_queue92, tnetb_TRSPconnectinactivity=tnetb_TRSPconnectinactivity, uxos_queue02=uxos_queue02, tnetb_NETBunsuccessregistr=tnetb_NETBunsuccessregistr, uxlmx_wkusefail=uxlmx_wkusefail, uxos_shlbinfoSysName=uxos_shlbinfoSysName, uxos_cntvNexfod=uxos_cntvNexfod, uxos_queue81=uxos_queue81, winlms_systemrmEntry=winlms_systemrmEntry, uxos_freehit=uxos_freehit, uxos_cumulQueLen=uxos_cumulQueLen, uxos_cache=uxos_cache, ethetxcollision=ethetxcollision, etherxshframe=etherxshframe, uxos_cpuIdle=uxos_cpuIdle, uxos_lgAlloc=uxos_lgAlloc, uxos_tGpgshi=uxos_tGpgshi, uxos_ovszFail=uxos_ovszFail, uxos_tRq=uxos_tRq, uxos_lruEmpty=uxos_lruEmpty, uxos_fileSubAddr=uxos_fileSubAddr, lms_GenerationDate=lms_GenerationDate, tnetb_TRSPunsuccessoutconnect=tnetb_TRSPunsuccessoutconnect, tnetb_TRSPtxTPDU=tnetb_TRSPtxTPDU, lms_SysName=lms_SysName, uxos_sumvSwpout=uxos_sumvSwpout, ethe_ETHEntry=ethe_ETHEntry, uxos_sumvXifrec=uxos_sumvXifrec, uxos_flckinfoInstName=uxos_flckinfoInstName, uxos_tVmtxt=uxos_tVmtxt, uxx25_numOfinterunsucfull=uxx25_numOfinterunsucfull, onetwarePhysLockRequests=onetwarePhysLockRequests, tnetb_NETBtxPDU=tnetb_NETBtxPDU, uxos_ovszAlloc=uxos_ovszAlloc, lsx_unix=lsx_unix, uxos_cpuWait=uxos_cpuWait, uxx25_numOfzerot=uxx25_numOfzerot, uxlmx_svjobsqueued=uxlmx_svjobsqueued, uxos_vmcnt=uxos_vmcnt, uxos_vMaxsyspri=uxos_vMaxsyspri, uxos_outch=uxos_outch, uxos_rmemSysName=uxos_rmemSysName, uxos_vClist=uxos_vClist, uxos_kmemTable=uxos_kmemTable, uxos_vHbuf=uxos_vHbuf, uxos_ratevIntr=uxos_ratevIntr, lms_RecCode=lms_RecCode, uxos_nprocSubAddr=uxos_nprocSubAddr, uxlapb_numOfdataoctsent=uxlapb_numOfdataoctsent, uxos_varInstName=uxos_varInstName, etherxcollision=etherxcollision, netbrxnobuffer=netbrxnobuffer, uxos_vPgout=uxos_vPgout, ethe_ETHTable=ethe_ETHTable, uxos_cntvDfree=uxos_cntvDfree, uxos_lboltSubAddr=uxos_lboltSubAddr, ntlms_sdrm=ntlms_sdrm, uxos_msg_snd_again=uxos_msg_snd_again, uxos_varSubAddr=uxos_varSubAddr, uxx25_numOfintersent=uxx25_numOfintersent, elcSysName=elcSysName, onetwareNumOpenFiles=onetwareNumOpenFiles, onetwareMaxSimultaneousLogLocks=onetwareMaxSimultaneousLogLocks, tnetb_NTWKtxbyte=tnetb_NTWKtxbyte, uxos_cntvFaults=uxos_cntvFaults, uxos_lbolt=uxos_lbolt, uxos_release=uxos_release, uxos_sumvPdma=uxos_sumvPdma, uxos_canch=uxos_canch, uxos_ufsfreeinodeInstName=uxos_ufsfreeinodeInstName, uxos_cntvPswpout=uxos_cntvPswpout, uxos_fileEntry=uxos_fileEntry, netb_NB=netb_NB)
mibBuilder.exportSymbols("OLIVETTI-MIB", uxos_vmrateSysName=uxos_vmrateSysName, uxos_availrmem=uxos_availrmem, ntlms_sdrmEntry=ntlms_sdrmEntry, uxos_ratevScan=uxos_ratevScan, uxos_ratevPgfrec=uxos_ratevPgfrec, uxos_vXsdslots=uxos_vXsdslots, uxos_numRW=uxos_numRW, uxos_sysinfo=uxos_sysinfo, elctxunderrun=elctxunderrun, uxlms_systemrmInstName=uxlms_systemrmInstName, uxtp02_numOfopenConnection=uxtp02_numOfopenConnection, tnetb_NTWKPDUdestinunreach=tnetb_NTWKPDUdestinunreach)
