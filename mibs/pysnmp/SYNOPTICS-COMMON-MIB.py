#
# PySNMP MIB module SYNOPTICS-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYNOPTICS-COMMON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, IpAddress, Integer32, Counter32, MibIdentifier, Bits, iso, NotificationType, TimeTicks, ObjectIdentity, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "IpAddress", "Integer32", "Counter32", "MibIdentifier", "Bits", "iso", "NotificationType", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
series3000, SnpxChassisType, SnpxBackplaneType, s3SnmpAgent = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "series3000", "SnpxChassisType", "SnpxBackplaneType", "s3SnmpAgent")
class S3ModuleType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129))
    namedValues = NamedValues(("empty", 1), ("other", 2), ("m3302", 3), ("m3304-ST", 4), ("m3305", 5), ("m3308", 6), ("m3313", 7), ("m3313M", 8), ("m3314-ST", 9), ("m3314M-ST", 10), ("m3323", 11), ("m3324-ST", 12), ("m3502", 13), ("m3532", 14), ("m3552", 15), ("m3301", 16), ("m3307", 17), ("m3356", 18), ("m3512", 19), ("m3514", 20), ("m3505", 21), ("m3554", 22), ("m3534", 23), ("m3383", 24), ("m3384", 25), ("m331x", 26), ("m351x", 27), ("m3502-A", 28), ("m3902", 29), ("m3904", 30), ("m3910S", 31), ("m3386", 32), ("m3394", 33), ("m3395", 34), ("m3323S", 35), ("m3324S-ST", 36), ("m3307A", 37), ("m3308A", 38), ("m3505A", 39), ("m3513", 40), ("m3333", 41), ("m3334-ST", 42), ("m3040", 43), ("m3100R", 44), ("notUsed45", 45), ("notUsed46", 46), ("m2810-hm", 47), ("m2810-nmm", 48), ("m3313S", 49), ("m3314S", 50), ("m3368", 51), ("m3512S", 52), ("m3513S", 53), ("m3514S", 54), ("m3522", 55), ("m2912", 56), ("m2914", 57), ("notUsed58", 58), ("m3301-75", 59), ("m3301-93", 60), ("m271x-nmm", 61), ("m2705-hm", 62), ("m2715-hm", 63), ("m2813-nmm", 64), ("m2814-nmm", 65), ("m2813-hm", 66), ("m2814-hm", 67), ("m2803-hm", 68), ("m2804-hm", 69), ("m3395A", 70), ("m3040S", 71), ("m3502B", 72), ("m3505B", 73), ("m2715-F-hm", 74), ("m2712-hm", 75), ("m2712-F-hm", 76), ("m2702-hm", 77), ("m2702-C-hm", 78), ("m2705-F-hm", 79), ("m2702-F-hm", 80), ("m2705-C-hm", 81), ("m3902A", 82), ("m2912A", 83), ("m3313A", 84), ("m3314A", 85), ("m3307HD", 86), ("m3328", 87), ("m3904-2SM", 88), ("m3910S-SM", 89), ("m3800", 90), ("m3910S-SD", 91), ("m3904-4SM", 92), ("m2915", 93), ("m3910SA", 94), ("m3910SA-SM", 95), ("m3905", 96), ("m2715B-hm", 97), ("m2705B-hm", 98), ("m2715B-F-hm", 99), ("m2712B-hm", 100), ("m2712B-F-hm", 101), ("m2702B-C-hm", 102), ("m3304A", 103), ("m3486", 104), ("m3308B", 105), ("m2813SA-nmm", 106), ("m2814SA-nmm", 107), ("m3517SA", 108), ("m810M", 109), ("m3313SA", 110), ("m3314SA", 111), ("m3522A", 112), ("m3504-ST", 113), ("m3513SA", 114), ("mAlcatel-Eth-nmm", 115), ("mAlcatel-Eth-hm1", 116), ("mAlcatel-Eth-hm", 117), ("m2486-nmm", 118), ("m2486-hm", 119), ("m3174", 120), ("m271xSA-nmm", 121), ("m3299C", 122), ("m3299U", 123), ("m3299F", 124), ("m2300x", 125), ("m2310x", 126), ("m3410", 127), ("m3405", 128), ("m3475", 129))

class S3PsType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("low", 2), ("medium", 3), ("high", 4), ("redundantCapable", 5), ("empty", 6))

s3AgentSw = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 2, 1))
s3AgentNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 2, 2))
s3AgentIpProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1))
s3AgentHw = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 2, 4))
s3AgentSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 2, 5))
s3AgentLocImage = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 2, 6))
s3000Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 1))
s3000RedundantPs = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10))
s3000Ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 2))
s3000TokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 3))
s3000FDDI = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 4))
s3000Bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 5))
s3000TerminalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 6))
s3000LattisTalk = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 7))
s3000Trb = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 3, 8))
s3ChassisType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 1), SnpxChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisType.setStatus('mandatory')
s3ChassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 2), SnpxBackplaneType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisBkplType.setStatus('mandatory')
s3ChassisBkplRev = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisBkplRev.setStatus('mandatory')
s3ChassisPsType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 4), S3PsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisPsType.setStatus('mandatory')
s3ChassisPsStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("primaryFail", 2), ("secondaryFail", 3), ("bothFail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisPsStatus.setStatus('mandatory')
s3ChassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisFanStatus.setStatus('mandatory')
s3SlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7), )
if mibBuilder.loadTexts: s3SlotConfigTable.setStatus('mandatory')
s3SlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7, 1), ).setIndexNames((0, "SYNOPTICS-COMMON-MIB", "s3SlotNumber"))
if mibBuilder.loadTexts: s3SlotConfigEntry.setStatus('mandatory')
s3SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3SlotNumber.setStatus('mandatory')
s3SlotModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3SlotModuleId.setStatus('mandatory')
s3SlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7, 1, 3), S3ModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3SlotModuleType.setStatus('deprecated')
s3SlotModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3SlotModuleDescr.setStatus('mandatory')
s3SlotModuleLed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3SlotModuleLed.setStatus('mandatory')
s3SlotModuleMdaId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3SlotModuleMdaId.setStatus('mandatory')
s3CommonBoardTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8), )
if mibBuilder.loadTexts: s3CommonBoardTable.setStatus('mandatory')
s3CommonBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1), ).setIndexNames((0, "SYNOPTICS-COMMON-MIB", "s3CommonBoardIndex"))
if mibBuilder.loadTexts: s3CommonBoardEntry.setStatus('mandatory')
s3CommonBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3CommonBoardIndex.setStatus('mandatory')
s3CommonBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 88, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 119, 120, 121, 122, 250, 251, 252))).clone(namedValues=NamedValues(("m331x", 1), ("m3302", 2), ("m332x", 3), ("m3304ST", 4), ("m3305", 5), ("m333x", 6), ("m3307", 7), ("m3308", 8), ("m3301", 9), ("m3904", 10), ("m3902", 11), ("m3910S", 12), ("m331xS", 14), ("m3100R", 15), ("m3502", 16), ("m3502A", 17), ("m353x", 18), ("m3040", 19), ("m3505", 20), ("m3505A", 21), ("m355x", 22), ("m3040S", 23), ("m351x", 24), ("m332xS", 25), ("m338x", 26), ("m3328", 27), ("m3395", 28), ("m3394", 29), ("m3522", 30), ("m3395A", 31), ("m3800", 32), ("m3368", 36), ("m3308A", 38), ("m2810nmm", 39), ("m2810hm", 40), ("m3301ohms75", 41), ("m3301ohms93", 42), ("m2912", 43), ("m2914", 44), ("m3502B", 45), ("m3505B", 46), ("m3307HD", 47), ("m2702Fhm", 48), ("m2712Fhm", 49), ("m2712hm", 50), ("m2702hm", 51), ("m2813nmm", 52), ("m2813hm", 53), ("m2814hm", 54), ("m2803hm", 55), ("m3356", 56), ("m2814nmm", 57), ("m2804hm", 58), ("m2702Chm", 59), ("m2715Fhm", 60), ("m2705Fhm", 61), ("m2705Chm", 62), ("m3902A", 63), ("m2912A", 64), ("m271xnmm", 65), ("m2715hm", 66), ("m3910SSD", 67), ("m3313A", 68), ("m3314A", 69), ("m3304A", 70), ("m3910SA", 71), ("m2705hm", 72), ("m3905", 73), ("m2915", 74), ("m2715Bhm", 75), ("m2705Bhm", 76), ("m2715BFhm", 77), ("m2712Bhm", 78), ("m2712BFhm", 79), ("m2702BChm", 80), ("m3486", 82), ("m810m", 88), ("m3517SA", 101), ("m3308B", 102), ("m2813SAnmm", 103), ("m2814SAnmm", 104), ("m3313SA", 105), ("m3314SA", 106), ("m3174", 107), ("m3522A", 108), ("m3513SA", 109), ("m271xSAnmm", 110), ("m2300x", 114), ("m2310x", 115), ("m3299C", 116), ("m3299U", 117), ("m3299F", 119), ("m3410", 120), ("m3405", 121), ("m3475", 122), ("mAlcatelEthConcnmm", 250), ("mAlcatelEthConchm", 251), ("mAlcatelEthExpConchm", 252)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3CommonBoardId.setStatus('mandatory')
s3CommonBoardHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3CommonBoardHwVer.setStatus('mandatory')
s3CommonBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3CommonBoardStatus.setStatus('mandatory')
s3CommonBoardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3CommonBoardReset.setStatus('mandatory')
s3CommonBoardPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("partition", 2), ("timedPartition", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3CommonBoardPartStatus.setStatus('mandatory')
s3CommonBoardNmCntlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notNmControl", 1), ("nmControl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3CommonBoardNmCntlStatus.setStatus('mandatory')
s3CommonBoardPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3CommonBoardPsStatus.setStatus('mandatory')
s3CommonBoardPartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 8, 1, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3CommonBoardPartTime.setStatus('mandatory')
s3SlotConfigOctetString = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 144))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3SlotConfigOctetString.setStatus('mandatory')
s3RedPsPlus5vCurrent = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsPlus5vCurrent.setStatus('mandatory')
s3RedPsPlus12vCurrent = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsPlus12vCurrent.setStatus('mandatory')
s3RedPsAmbientTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normalTemperature", 2), ("aboveNormalTemp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsAmbientTempStatus.setStatus('mandatory')
s3RedPsAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsAmbientTemperature.setStatus('mandatory')
s3RedPsPrimaryConfig = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 5), S3PsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsPrimaryConfig.setStatus('mandatory')
s3RedPsSecondaryConfig = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 6), S3PsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsSecondaryConfig.setStatus('mandatory')
s3RedPsDiodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("bothOk", 2), ("primaryFail", 3), ("secondaryFail", 4), ("bothFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsDiodeStatus.setStatus('mandatory')
s3RedPsPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("bothOk", 2), ("primaryFail", 3), ("secondaryFail", 4), ("bothFail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3RedPsPowerAlarm.setStatus('mandatory')
s3ChassisBkPlEthChanDiv = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisBkPlEthChanDiv.setStatus('mandatory')
s3ChassisEnetChannelAType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("aSegmentable", 2), ("aNotSegmentable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3ChassisEnetChannelAType.setStatus('mandatory')
s3AgentType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("other", 1), ("m3313", 2), ("m3313M", 3), ("m3314-ST", 4), ("m3314M-ST", 5), ("m2310", 6), ("m3512", 7), ("m3514", 8), ("m332x", 9), ("m3356", 10), ("m332xS", 11), ("m3910S", 12), ("m3395", 13), ("m3394", 14), ("m3513", 15), ("m331xS", 16), ("m291x", 17), ("m271x", 18), ("m281x", 19), ("m331xA", 20), ("m3522", 21), ("m2722", 22), ("m281xSA", 23), ("m810M", 24), ("m351xSA", 25), ("m331xSA", 26), ("m271xSA", 27), ("m2486", 28), ("m2300x", 29), ("m2310x", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentType.setStatus('mandatory')
s3AgentFwVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentFwVer.setStatus('mandatory')
s3AgentSwMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentSwMajorVer.setStatus('mandatory')
s3AgentSwMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentSwMinorVer.setStatus('mandatory')
s3AgentBootProtocol = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("bootp-tftp", 2), ("tftp-only", 3), ("ieee802-1e", 4), ("proprietary", 5), ("dll-download", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentBootProtocol.setStatus('mandatory')
s3AgentBootFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentBootFile.setStatus('mandatory')
s3AgentAuthTrap = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentAuthTrap.setStatus('deprecated')
s3AgentLocation = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentLocation.setStatus('deprecated')
s3AgentMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentMibLevel.setStatus('mandatory')
s3AgentFeatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentFeatureLevel.setStatus('deprecated')
s3AgentMySlotId = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentMySlotId.setStatus('mandatory')
s3AgentUnAuthIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentUnAuthIp.setStatus('mandatory')
s3AgentUnAuthComm = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentUnAuthComm.setStatus('mandatory')
s3AgentSwLicenseCode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentSwLicenseCode.setStatus('mandatory')
s3AgentPerformance = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentPerformance.setStatus('mandatory')
s3AgentSwMaintVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentSwMaintVer.setStatus('mandatory')
s3AgentConfigLoadMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("remoteConfig", 2), ("localConfig", 3), ("localAsBackup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentConfigLoadMode.setStatus('mandatory')
s3AgentConfigActualSource = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("remoteConfig", 2), ("localConfig", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentConfigActualSource.setStatus('mandatory')
s3AgentMgmtProtoMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipx", 3), ("ipAndIpx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentMgmtProtoMode.setStatus('mandatory')
s3AgentActualMgmtProtocol = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipx", 3), ("ipAndIpx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentActualMgmtProtocol.setStatus('mandatory')
s3AgentImageFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentImageFile.setStatus('mandatory')
s3AgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentIpAddr.setStatus('mandatory')
s3AgentNetMask = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentNetMask.setStatus('mandatory')
s3AgentDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentDefaultGateway.setStatus('mandatory')
s3AgentBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentBootServerAddr.setStatus('mandatory')
s3AgentSecDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentSecDefaultGateway.setStatus('mandatory')
s3AgentPingDefaultRtrSwitch = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentPingDefaultRtrSwitch.setStatus('mandatory')
s3AgentPingDefaultRtrTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentPingDefaultRtrTime.setStatus('mandatory')
s3AgentBootRouter = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentBootRouter.setStatus('mandatory')
s3AgentTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 2, 3), )
if mibBuilder.loadTexts: s3AgentTrapReceiverTable.setStatus('mandatory')
s3AgentTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 2, 3, 1), ).setIndexNames((0, "SYNOPTICS-COMMON-MIB", "s3AgentTrapRcvrNetAddress"))
if mibBuilder.loadTexts: s3AgentTrapReceiverEntry.setStatus('mandatory')
s3AgentTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentTrapRcvrStatus.setStatus('mandatory')
s3AgentTrapRcvrNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentTrapRcvrNetAddress.setStatus('mandatory')
s3AgentTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentTrapRcvrComm.setStatus('mandatory')
s3AgentTrapRcvrAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentTrapRcvrAgeTime.setStatus('mandatory')
s3AgentStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentStatus.setStatus('mandatory')
s3AgentMdaHwVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentMdaHwVer.setStatus('mandatory')
s3AgentMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentMode.setStatus('mandatory')
s3AgentReset = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentReset.setStatus('mandatory')
s3AgentRestart = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRestart", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentRestart.setStatus('mandatory')
s3AgentBootMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eeprom", 1), ("net", 2), ("otherCase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentBootMode.setStatus('mandatory')
s3AgentWriteEeprom = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noWriteEeprom", 1), ("writeEeprom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentWriteEeprom.setStatus('mandatory')
s3AgentBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentBaudRate.setStatus('mandatory')
s3AgentInitString = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3AgentInitString.setStatus('mandatory')
s3AgentEepromSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentEepromSize.setStatus('mandatory')
s3AgentEpromSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentEpromSize.setStatus('mandatory')
s3AgentDramSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentDramSize.setStatus('mandatory')
s3AgentHexDisplay = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentHexDisplay.setStatus('mandatory')
s3AgentFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3AgentFlashStatus.setStatus('mandatory')
s3LocImageValid = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("localImageValid", 2), ("localImageInvalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3LocImageValid.setStatus('mandatory')
s3LocImageMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3LocImageMajorVersion.setStatus('mandatory')
s3LocImageMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3LocImageMinorVersion.setStatus('mandatory')
s3LocImageLoadMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("remoteBoot", 2), ("localBoot", 3), ("localAsBackup", 4), ("remoteNoUpdate", 5), ("remoteNewUpdate", 6), ("localAutoUpdate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s3LocImageLoadMode.setStatus('mandatory')
s3LocImageActualSource = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("remoteImage", 2), ("localImage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3LocImageActualSource.setStatus('mandatory')
s3LocImageMaintVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s3LocImageMaintVersion.setStatus('mandatory')
mibBuilder.exportSymbols("SYNOPTICS-COMMON-MIB", s3ChassisEnetChannelAType=s3ChassisEnetChannelAType, s3000FDDI=s3000FDDI, s3SlotNumber=s3SlotNumber, s3000LattisTalk=s3000LattisTalk, s3000Trb=s3000Trb, s3SlotConfigTable=s3SlotConfigTable, s3AgentHw=s3AgentHw, s3ChassisBkPlEthChanDiv=s3ChassisBkPlEthChanDiv, s3SlotModuleDescr=s3SlotModuleDescr, s3AgentBootFile=s3AgentBootFile, s3LocImageValid=s3LocImageValid, s3RedPsPlus12vCurrent=s3RedPsPlus12vCurrent, s3CommonBoardIndex=s3CommonBoardIndex, s3AgentAuthTrap=s3AgentAuthTrap, s3AgentDefaultGateway=s3AgentDefaultGateway, s3RedPsSecondaryConfig=s3RedPsSecondaryConfig, s3AgentSpecific=s3AgentSpecific, s3AgentEpromSize=s3AgentEpromSize, s3AgentLocation=s3AgentLocation, s3000Chassis=s3000Chassis, s3AgentConfigLoadMode=s3AgentConfigLoadMode, s3AgentMode=s3AgentMode, s3AgentTrapRcvrComm=s3AgentTrapRcvrComm, s3CommonBoardPartTime=s3CommonBoardPartTime, s3000TokenRing=s3000TokenRing, s3CommonBoardTable=s3CommonBoardTable, s3ChassisType=s3ChassisType, s3AgentSecDefaultGateway=s3AgentSecDefaultGateway, s3AgentIpProtocol=s3AgentIpProtocol, s3AgentPerformance=s3AgentPerformance, s3LocImageMinorVersion=s3LocImageMinorVersion, s3ChassisBkplType=s3ChassisBkplType, s3AgentNetProtocol=s3AgentNetProtocol, s3CommonBoardEntry=s3CommonBoardEntry, s3SlotConfigEntry=s3SlotConfigEntry, s3SlotModuleLed=s3SlotModuleLed, s3AgentImageFile=s3AgentImageFile, s3LocImageMaintVersion=s3LocImageMaintVersion, S3ModuleType=S3ModuleType, s3SlotModuleId=s3SlotModuleId, s3CommonBoardStatus=s3CommonBoardStatus, s3AgentFeatureLevel=s3AgentFeatureLevel, s3AgentMySlotId=s3AgentMySlotId, s3AgentEepromSize=s3AgentEepromSize, s3ChassisPsStatus=s3ChassisPsStatus, s3RedPsPlus5vCurrent=s3RedPsPlus5vCurrent, s3AgentConfigActualSource=s3AgentConfigActualSource, s3AgentFlashStatus=s3AgentFlashStatus, s3LocImageLoadMode=s3LocImageLoadMode, s3RedPsPowerAlarm=s3RedPsPowerAlarm, s3AgentBaudRate=s3AgentBaudRate, s3CommonBoardPartStatus=s3CommonBoardPartStatus, s3ChassisFanStatus=s3ChassisFanStatus, s3LocImageActualSource=s3LocImageActualSource, s3AgentTrapReceiverTable=s3AgentTrapReceiverTable, s3AgentSwMinorVer=s3AgentSwMinorVer, s3LocImageMajorVersion=s3LocImageMajorVersion, s3AgentMgmtProtoMode=s3AgentMgmtProtoMode, s3AgentUnAuthIp=s3AgentUnAuthIp, s3AgentType=s3AgentType, S3PsType=S3PsType, s3AgentReset=s3AgentReset, s3CommonBoardHwVer=s3CommonBoardHwVer, s3AgentNetMask=s3AgentNetMask, s3AgentTrapRcvrAgeTime=s3AgentTrapRcvrAgeTime, s3AgentBootProtocol=s3AgentBootProtocol, s3AgentInitString=s3AgentInitString, s3AgentFwVer=s3AgentFwVer, s3AgentSwMajorVer=s3AgentSwMajorVer, s3AgentMibLevel=s3AgentMibLevel, s3000Bridge=s3000Bridge, s3SlotModuleMdaId=s3SlotModuleMdaId, s3AgentSw=s3AgentSw, s3AgentRestart=s3AgentRestart, s3000TerminalServer=s3000TerminalServer, s3AgentDramSize=s3AgentDramSize, s3AgentIpAddr=s3AgentIpAddr, s3SlotModuleType=s3SlotModuleType, s3AgentSwLicenseCode=s3AgentSwLicenseCode, s3ChassisBkplRev=s3ChassisBkplRev, s3SlotConfigOctetString=s3SlotConfigOctetString, s3AgentLocImage=s3AgentLocImage, s3AgentBootServerAddr=s3AgentBootServerAddr, s3AgentTrapRcvrNetAddress=s3AgentTrapRcvrNetAddress, s3AgentWriteEeprom=s3AgentWriteEeprom, s3AgentPingDefaultRtrTime=s3AgentPingDefaultRtrTime, s3AgentTrapRcvrStatus=s3AgentTrapRcvrStatus, s3AgentPingDefaultRtrSwitch=s3AgentPingDefaultRtrSwitch, s3CommonBoardPsStatus=s3CommonBoardPsStatus, s3AgentSwMaintVer=s3AgentSwMaintVer, s3000Ethernet=s3000Ethernet, s3CommonBoardReset=s3CommonBoardReset, s3AgentHexDisplay=s3AgentHexDisplay, s3RedPsDiodeStatus=s3RedPsDiodeStatus, s3AgentTrapReceiverEntry=s3AgentTrapReceiverEntry, s3AgentUnAuthComm=s3AgentUnAuthComm, s3CommonBoardNmCntlStatus=s3CommonBoardNmCntlStatus, s3AgentStatus=s3AgentStatus, s3000RedundantPs=s3000RedundantPs, s3RedPsAmbientTempStatus=s3RedPsAmbientTempStatus, s3ChassisPsType=s3ChassisPsType, s3RedPsPrimaryConfig=s3RedPsPrimaryConfig, s3AgentMdaHwVer=s3AgentMdaHwVer, s3CommonBoardId=s3CommonBoardId, s3RedPsAmbientTemperature=s3RedPsAmbientTemperature, s3AgentBootRouter=s3AgentBootRouter, s3AgentBootMode=s3AgentBootMode, s3AgentActualMgmtProtocol=s3AgentActualMgmtProtocol)
