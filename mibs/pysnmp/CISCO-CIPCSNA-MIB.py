#
# PySNMP MIB module CISCO-CIPCSNA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CIPCSNA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
cipCardEntryIndex, cipCardDtrBrdIndex, cipCardSubChannelIndex = mibBuilder.importSymbols("CISCO-CHANNEL-MIB", "cipCardEntryIndex", "cipCardDtrBrdIndex", "cipCardSubChannelIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
llcSapNumber, llcPortVirtualIndex = mibBuilder.importSymbols("CISCO-SNA-LLC-MIB", "llcSapNumber", "llcPortVirtualIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, Counter64, MibIdentifier, Bits, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, TimeTicks, Counter32, NotificationType, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "MibIdentifier", "Bits", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "TimeTicks", "Counter32", "NotificationType", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
ciscoCipCsnaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 33))
ciscoCipCsnaMIB.setRevisions(('1998-01-06 00:00', '1995-08-21 00:00', '1995-04-28 00:00',))
if mibBuilder.loadTexts: ciscoCipCsnaMIB.setLastUpdated('9508210000Z')
if mibBuilder.loadTexts: ciscoCipCsnaMIB.setOrganization('cisco IBM engineering Working Group')
class ChannelPath(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 2)

class ChannelDevice(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 2)

cipCsnaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 1))
cipCsnaChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1))
cipSession = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2))
cipCsnaConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3))
cipCardCsnaAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1), )
if mibBuilder.loadTexts: cipCardCsnaAdminTable.setStatus('current')
cipCardCsnaAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"))
if mibBuilder.loadTexts: cipCardCsnaAdminEntry.setStatus('current')
cipCardCsnaAdminPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1, 1, 1), ChannelPath()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardCsnaAdminPath.setStatus('current')
cipCardCsnaAdminDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1, 1, 2), ChannelDevice()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardCsnaAdminDevice.setStatus('current')
cipCardCsnaAdminBlockDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardCsnaAdminBlockDelayTime.setStatus('current')
cipCardCsnaAdminBlockDelayLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(20470)).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardCsnaAdminBlockDelayLength.setStatus('current')
cipCardCsnaAdminMaxBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 65535)).clone(20470)).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardCsnaAdminMaxBlockLength.setStatus('current')
cipCardCsnaAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardCsnaAdminRowStatus.setStatus('current')
cipCardCsnaOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 2), )
if mibBuilder.loadTexts: cipCardCsnaOperTable.setStatus('current')
cipCardCsnaOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"))
if mibBuilder.loadTexts: cipCardCsnaOperEntry.setStatus('current')
cipCardCsnaOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("closed", 0), ("pendingOpen", 1), ("open", 2), ("pendingSetup", 3), ("setupComplete", 4), ("pendingClose", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaOperState.setStatus('current')
cipCardCsnaOperSlowDownState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("slowDownSent", 1), ("slowDownReceived", 2), ("slowDownSentAndReceived", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaOperSlowDownState.setStatus('current')
cipCardCsnaOperBlockDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaOperBlockDelayTime.setStatus('current')
cipCardCsnaOperBlockDelayLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaOperBlockDelayLength.setStatus('current')
cipCardCsnaOperMaxBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 65535))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaOperMaxBlockLength.setStatus('current')
cipCardCsnaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3), )
if mibBuilder.loadTexts: cipCardCsnaStatsTable.setStatus('current')
cipCardCsnaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"))
if mibBuilder.loadTexts: cipCardCsnaStatsEntry.setStatus('current')
cipCardCsnaStatsBlocksTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBlocksTxd.setStatus('current')
cipCardCsnaStatsBlocksRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBlocksRxd.setStatus('current')
cipCardCsnaStatsBytesTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 3), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBytesTxd.setStatus('current')
cipCardCsnaStatsHCBytesTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 4), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsHCBytesTxd.setStatus('current')
cipCardCsnaStatsBytesRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBytesRxd.setStatus('current')
cipCardCsnaStatsHCBytesRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 6), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsHCBytesRxd.setStatus('current')
cipCardCsnaStatsBlocksTxByBlockDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBlocksTxByBlockDelayTime.setStatus('current')
cipCardCsnaStatsBytesTxByBlockDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBytesTxByBlockDelayTime.setStatus('current')
cipCardCsnaStatsHCBytesTxByBlockDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsHCBytesTxByBlockDelayTime.setStatus('current')
cipCardCsnaStatsBlocksTxByBlockDelayLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBlocksTxByBlockDelayLength.setStatus('current')
cipCardCsnaStatsBytesTxByBlockDelayLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBytesTxByBlockDelayLength.setStatus('current')
cipCardCsnaStatsHCBytesTxByBlockDelayLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsHCBytesTxByBlockDelayLength.setStatus('current')
cipCardCsnaStatsBlocksTxByMaxBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBlocksTxByMaxBlockLength.setStatus('current')
cipCardCsnaStatsBytesTxByMaxBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsBytesTxByMaxBlockLength.setStatus('current')
cipCardCsnaStatsHCBytesTxByMaxBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsHCBytesTxByMaxBlockLength.setStatus('current')
cipCardCsnaStatsSlowDownsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsSlowDownsReceived.setStatus('current')
cipCardCsnaStatsSlowDownsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaStatsSlowDownsSent.setStatus('current')
cipCardSessionsAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 1), )
if mibBuilder.loadTexts: cipCardSessionsAdminTable.setStatus('current')
cipCardSessionsAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"))
if mibBuilder.loadTexts: cipCardSessionsAdminEntry.setStatus('current')
cipCardAdminMaxLlc2Sessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipCardAdminMaxLlc2Sessions.setStatus('current')
cipCardSessionsOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 2), )
if mibBuilder.loadTexts: cipCardSessionsOperTable.setStatus('current')
cipCardSessionsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"))
if mibBuilder.loadTexts: cipCardSessionsOperEntry.setStatus('current')
cipCardOperMaxLlc2Sessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardOperMaxLlc2Sessions.setStatus('current')
cipCardSessionsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 3), )
if mibBuilder.loadTexts: cipCardSessionsStatsTable.setStatus('current')
cipCardSessionsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"))
if mibBuilder.loadTexts: cipCardSessionsStatsEntry.setStatus('current')
cipCardStatsHiWaterLlc2Sessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardStatsHiWaterLlc2Sessions.setStatus('current')
cipCardStatsLlc2SessionAllocationErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardStatsLlc2SessionAllocationErrs.setStatus('current')
cipCardCsnaConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3, 1), )
if mibBuilder.loadTexts: cipCardCsnaConnTable.setStatus('current')
cipCardCsnaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SNA-LLC-MIB", "llcPortVirtualIndex"), (0, "CISCO-SNA-LLC-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: cipCardCsnaConnEntry.setStatus('current')
cipCardCsnaConnActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaConnActiveSessions.setStatus('current')
cipCardCsnaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaSlot.setStatus('current')
cipCardCsnaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaPort.setStatus('current')
cipCardCsnaConnPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3, 1, 1, 4), ChannelPath()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaConnPath.setStatus('current')
cipCardCsnaConnDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 33, 1, 3, 1, 1, 5), ChannelDevice()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardCsnaConnDevice.setStatus('current')
cipCsnaNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 2))
cipCsnaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 2, 0))
cipCsnaOpenDuplicateSapFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 33, 2, 0, 1)).setObjects(("CISCO-CIPCSNA-MIB", "cipCardCsnaSlot"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaPort"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaConnPath"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaConnDevice"))
if mibBuilder.loadTexts: cipCsnaOpenDuplicateSapFailure.setStatus('current')
cipCsnaLlc2ConnectionLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 33, 2, 0, 2)).setObjects(("CISCO-CIPCSNA-MIB", "cipCardAdminMaxLlc2Sessions"), ("CISCO-CIPCSNA-MIB", "cipCardOperMaxLlc2Sessions"), ("CISCO-CIPCSNA-MIB", "cipCardStatsHiWaterLlc2Sessions"), ("CISCO-CIPCSNA-MIB", "cipCardStatsLlc2SessionAllocationErrs"))
if mibBuilder.loadTexts: cipCsnaLlc2ConnectionLimitExceeded.setStatus('current')
ciscoCipCsnaMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 3))
ciscoCipCsnaMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 3, 1))
ciscoCipCsnaMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 33, 3, 2))
ciscoCipCsnaMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 33, 3, 1, 1)).setObjects(("CISCO-CIPCSNA-MIB", "ciscoCsnaGroup"), ("CISCO-CIPCSNA-MIB", "ciscoMaxSessionsGroup"), ("CISCO-CIPCSNA-MIB", "ciscoCsnaConnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipCsnaMibCompliance = ciscoCipCsnaMibCompliance.setStatus('current')
ciscoCsnaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 33, 3, 2, 1)).setObjects(("CISCO-CIPCSNA-MIB", "cipCardCsnaAdminPath"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaAdminDevice"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaAdminBlockDelayTime"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaAdminBlockDelayLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaAdminMaxBlockLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaAdminRowStatus"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaOperState"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaOperSlowDownState"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaOperBlockDelayTime"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaOperBlockDelayLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaOperMaxBlockLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBlocksTxd"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBlocksRxd"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBytesTxd"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsHCBytesTxd"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBytesRxd"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsHCBytesRxd"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBlocksTxByBlockDelayTime"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBytesTxByBlockDelayTime"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsHCBytesTxByBlockDelayTime"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBlocksTxByBlockDelayLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBytesTxByBlockDelayLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsHCBytesTxByBlockDelayLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBlocksTxByMaxBlockLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsBytesTxByMaxBlockLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsHCBytesTxByMaxBlockLength"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsSlowDownsSent"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaStatsSlowDownsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCsnaGroup = ciscoCsnaGroup.setStatus('current')
ciscoMaxSessionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 33, 3, 2, 2)).setObjects(("CISCO-CIPCSNA-MIB", "cipCardAdminMaxLlc2Sessions"), ("CISCO-CIPCSNA-MIB", "cipCardOperMaxLlc2Sessions"), ("CISCO-CIPCSNA-MIB", "cipCardStatsHiWaterLlc2Sessions"), ("CISCO-CIPCSNA-MIB", "cipCardStatsLlc2SessionAllocationErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMaxSessionsGroup = ciscoMaxSessionsGroup.setStatus('current')
ciscoCsnaConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 33, 3, 2, 3)).setObjects(("CISCO-CIPCSNA-MIB", "cipCardCsnaConnActiveSessions"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaSlot"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaPort"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaConnPath"), ("CISCO-CIPCSNA-MIB", "cipCardCsnaConnDevice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCsnaConnGroup = ciscoCsnaConnGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CIPCSNA-MIB", cipCardCsnaOperSlowDownState=cipCardCsnaOperSlowDownState, cipCardSessionsOperTable=cipCardSessionsOperTable, cipCardSessionsAdminTable=cipCardSessionsAdminTable, cipCardCsnaStatsSlowDownsReceived=cipCardCsnaStatsSlowDownsReceived, cipCardCsnaStatsSlowDownsSent=cipCardCsnaStatsSlowDownsSent, ciscoCipCsnaMibGroups=ciscoCipCsnaMibGroups, cipCardCsnaOperBlockDelayTime=cipCardCsnaOperBlockDelayTime, cipCardCsnaStatsHCBytesRxd=cipCardCsnaStatsHCBytesRxd, cipCardCsnaOperState=cipCardCsnaOperState, cipCardCsnaSlot=cipCardCsnaSlot, cipCardAdminMaxLlc2Sessions=cipCardAdminMaxLlc2Sessions, cipCardCsnaStatsHCBytesTxd=cipCardCsnaStatsHCBytesTxd, cipCardCsnaStatsBlocksTxByBlockDelayLength=cipCardCsnaStatsBlocksTxByBlockDelayLength, cipCardSessionsStatsEntry=cipCardSessionsStatsEntry, cipCardCsnaConnDevice=cipCardCsnaConnDevice, cipCsnaLlc2ConnectionLimitExceeded=cipCsnaLlc2ConnectionLimitExceeded, cipCardCsnaConnActiveSessions=cipCardCsnaConnActiveSessions, cipCardCsnaStatsBlocksRxd=cipCardCsnaStatsBlocksRxd, cipCardOperMaxLlc2Sessions=cipCardOperMaxLlc2Sessions, cipCsnaOpenDuplicateSapFailure=cipCsnaOpenDuplicateSapFailure, cipCardCsnaAdminMaxBlockLength=cipCardCsnaAdminMaxBlockLength, cipCardStatsLlc2SessionAllocationErrs=cipCardStatsLlc2SessionAllocationErrs, ciscoCsnaConnGroup=ciscoCsnaConnGroup, cipCsnaNotificationPrefix=cipCsnaNotificationPrefix, cipCardCsnaAdminBlockDelayLength=cipCardCsnaAdminBlockDelayLength, cipCardCsnaStatsBlocksTxd=cipCardCsnaStatsBlocksTxd, PYSNMP_MODULE_ID=ciscoCipCsnaMIB, cipCardCsnaStatsBytesTxd=cipCardCsnaStatsBytesTxd, ChannelDevice=ChannelDevice, cipCardCsnaStatsHCBytesTxByBlockDelayTime=cipCardCsnaStatsHCBytesTxByBlockDelayTime, cipCardCsnaOperBlockDelayLength=cipCardCsnaOperBlockDelayLength, cipCardStatsHiWaterLlc2Sessions=cipCardStatsHiWaterLlc2Sessions, cipCsnaNotifications=cipCsnaNotifications, cipCardCsnaAdminEntry=cipCardCsnaAdminEntry, cipCardCsnaStatsBytesTxByBlockDelayTime=cipCardCsnaStatsBytesTxByBlockDelayTime, cipCardCsnaStatsEntry=cipCardCsnaStatsEntry, cipCardCsnaOperTable=cipCardCsnaOperTable, ciscoCipCsnaMIB=ciscoCipCsnaMIB, cipCsnaChannel=cipCsnaChannel, cipCardCsnaStatsBlocksTxByBlockDelayTime=cipCardCsnaStatsBlocksTxByBlockDelayTime, cipCardCsnaStatsBytesTxByBlockDelayLength=cipCardCsnaStatsBytesTxByBlockDelayLength, cipCardCsnaStatsBytesTxByMaxBlockLength=cipCardCsnaStatsBytesTxByMaxBlockLength, cipCardSessionsAdminEntry=cipCardSessionsAdminEntry, cipCardSessionsStatsTable=cipCardSessionsStatsTable, ciscoMaxSessionsGroup=ciscoMaxSessionsGroup, cipCardCsnaAdminDevice=cipCardCsnaAdminDevice, ciscoCsnaGroup=ciscoCsnaGroup, cipCardCsnaPort=cipCardCsnaPort, ciscoCipCsnaMibConformance=ciscoCipCsnaMibConformance, cipCardCsnaAdminPath=cipCardCsnaAdminPath, cipCardCsnaAdminTable=cipCardCsnaAdminTable, cipCardCsnaOperEntry=cipCardCsnaOperEntry, cipCardCsnaStatsHCBytesTxByBlockDelayLength=cipCardCsnaStatsHCBytesTxByBlockDelayLength, cipCardCsnaStatsHCBytesTxByMaxBlockLength=cipCardCsnaStatsHCBytesTxByMaxBlockLength, ChannelPath=ChannelPath, ciscoCipCsnaMibCompliances=ciscoCipCsnaMibCompliances, cipCardCsnaConnTable=cipCardCsnaConnTable, cipSession=cipSession, ciscoCipCsnaMibCompliance=ciscoCipCsnaMibCompliance, cipCardCsnaConnPath=cipCardCsnaConnPath, cipCardCsnaStatsTable=cipCardCsnaStatsTable, cipCsnaObjects=cipCsnaObjects, cipCardCsnaStatsBytesRxd=cipCardCsnaStatsBytesRxd, cipCardCsnaStatsBlocksTxByMaxBlockLength=cipCardCsnaStatsBlocksTxByMaxBlockLength, cipCardCsnaAdminRowStatus=cipCardCsnaAdminRowStatus, cipCardCsnaOperMaxBlockLength=cipCardCsnaOperMaxBlockLength, cipCardCsnaConnEntry=cipCardCsnaConnEntry, cipCsnaConnection=cipCsnaConnection, cipCardCsnaAdminBlockDelayTime=cipCardCsnaAdminBlockDelayTime, cipCardSessionsOperEntry=cipCardSessionsOperEntry)
