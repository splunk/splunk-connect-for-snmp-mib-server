#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMDSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMDSU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Bits, MibIdentifier, iso, Unsigned32, Counter32, NotificationType, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Bits", "MibIdentifier", "iso", "Unsigned32", "Counter32", "NotificationType", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_dds, ncm_dbu, ncm_dsu = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-dds", "ncm-dbu", "ncm-dsu")
ncmdsuCommonTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000), )
if mibBuilder.loadTexts: ncmdsuCommonTable.setStatus('mandatory')
ncmdsuCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuIndex"))
if mibBuilder.loadTexts: ncmdsuCommonEntry.setStatus('mandatory')
ncmdsuNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuNIDIndex.setStatus('mandatory')
ncmdsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuIndex.setStatus('mandatory')
ncmdsuPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("v35", 2), ("rs-449", 3), ("eia530", 4), ("rS-232", 5), ("wrong-DIM", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortType.setStatus('mandatory')
ncmdsuPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 1), ("inband-loop", 2), ("local-loop", 3), ("sending-loop-up", 4), ("sending-loop-down", 5), ("verilink-loop-up", 6), ("verilink-loop-down", 7), ("local-loop-up", 8), ("local-loop-down", 9), ("v54-loop-up", 10), ("v54-loop-down", 11), ("dds-latching-loop-up", 12), ("dds-latching-loop-down", 13), ("dds-nonlatching-loop-up", 14), ("dds-nonlatching-loop-down", 15), ("ft1-loop-up", 16), ("ft1-loop-down", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortLoopback.setStatus('mandatory')
ncmdsuPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-test", 1), ("start-test", 2), ("run-ber-test", 3), ("stop-ber-test", 4), ("test-511", 5), ("test-2047", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortTest.setStatus('mandatory')
ncmdsuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001), )
if mibBuilder.loadTexts: ncmdsuConfigTable.setStatus('mandatory')
ncmdsuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuNIDConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuLineIndex"))
if mibBuilder.loadTexts: ncmdsuConfigEntry.setStatus('mandatory')
ncmdsuNIDConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuNIDConfigIndex.setStatus('mandatory')
ncmdsuLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuLineIndex.setStatus('mandatory')
ncmdsubus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("busA", 2), ("busB", 3), ("busC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsubus.setStatus('mandatory')
ncmdsuPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortChannel.setStatus('mandatory')
ncmdsuPortConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortConfiguration.setStatus('mandatory')
ncmcsushelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsushelf.setStatus('mandatory')
ncmcsuslot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuslot.setStatus('mandatory')
ncmdsuAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nO", 1), ("yES", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuAlarmEnable.setStatus('mandatory')
ncmdsuLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuLosLead.setStatus('mandatory')
ncmdsuTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("port1", 2), ("port2", 3), ("cSU", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuTimingSource.setStatus('mandatory')
ncmdsuDTESpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("mode-64k", 2), ("mode-56k", 3), ("mode-38-4", 4), ("mode-19-2", 5), ("mode-9-6", 6), ("mode-4-8", 7), ("mode-2-4", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuDTESpeed.setStatus('mandatory')
ncmdsustatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003), )
if mibBuilder.loadTexts: ncmdsustatTable.setStatus('mandatory')
ncmdsustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuNIDstatIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsustatIndex"))
if mibBuilder.loadTexts: ncmdsustatEntry.setStatus('mandatory')
ncmdsuNIDstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuNIDstatIndex.setStatus('mandatory')
ncmdsustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsustatIndex.setStatus('mandatory')
ncmdsuPortLowbattery = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-low-battery", 1), ("low-battery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLowbattery.setStatus('mandatory')
ncmdsuPortLOSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-Los-status", 1), ("los-status", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLOSstatus.setStatus('mandatory')
ncmdsuPortblockerrorcounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortblockerrorcounter.setStatus('mandatory')
ncmdsuPortTestSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortTestSeconds.setStatus('mandatory')
ncmdsuPortrateper8000 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortrateper8000.setStatus('mandatory')
ncmdsuPortLeadStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLeadStatus1.setStatus('mandatory')
ncmdsuPortLeadStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLeadStatus2.setStatus('mandatory')
ncmdbuPrimaryLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("oK", 1), ("aSC", 2), ("lOF", 3), ("cD", 4), ("uSER", 5), ("yEL", 6), ("bER", 7), ("aLLONE", 8), ("lOS", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuPrimaryLineStatus.setStatus('mandatory')
ncmdbuLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sTANDBY", 1), ("aCTIVE", 2), ("eRROR", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuLineStatus.setStatus('mandatory')
ncmdbuSwitchBy = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nONE", 1), ("aSC", 2), ("lOF", 3), ("cD", 4), ("uSER", 5), ("yEL", 6), ("bER", 7), ("aLLONE", 8), ("lOS", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuSwitchBy.setStatus('mandatory')
ncmdbuReceivedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuReceivedCode.setStatus('mandatory')
ncmdsuPortTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortTestResults.setStatus('mandatory')
ncmdsuPortDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortDiagStatus.setStatus('mandatory')
ncmddsMainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000), )
if mibBuilder.loadTexts: ncmddsMainConfigTable.setStatus('mandatory')
ncmddsMainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsNIDMainConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsMainLineIndex"))
if mibBuilder.loadTexts: ncmddsMainConfigEntry.setStatus('mandatory')
ncmddsNIDMainConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsNIDMainConfigIndex.setStatus('mandatory')
ncmddsMainLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsMainLineIndex.setStatus('mandatory')
ncmddsdsubus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("busA", 2), ("busB", 3), ("busC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsdsubus.setStatus('mandatory')
ncmddsPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortChannel.setStatus('mandatory')
ncmddsPortConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortConfiguration.setStatus('mandatory')
ncmddscsushelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddscsushelf.setStatus('mandatory')
ncmddscsuslot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddscsuslot.setStatus('mandatory')
ncmddsLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsLosLead.setStatus('mandatory')
ncmddsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001), )
if mibBuilder.loadTexts: ncmddsConfigTable.setStatus('mandatory')
ncmddsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsNIDConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsConfigLineIndex"))
if mibBuilder.loadTexts: ncmddsConfigEntry.setStatus('mandatory')
ncmddsNIDConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsNIDConfigIndex.setStatus('mandatory')
ncmddsConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsConfigLineIndex.setStatus('mandatory')
ncmddsPortLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortLoopEnable.setStatus('mandatory')
ncmddsPortReceiveLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dSU", 1), ("channel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortReceiveLoopCode.setStatus('mandatory')
ncmddsPortRemoteLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v54", 1), ("fTI", 2), ("verilink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortRemoteLoopCode.setStatus('mandatory')
ncmddsPortAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortAlarmEnable.setStatus('mandatory')
ncmddsPortAlarmClearDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortAlarmClearDelayTime.setStatus('mandatory')
ncmddsPortAbnormalStationCodeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortAbnormalStationCodeThreshold.setStatus('mandatory')
ncmddsPortControlModeIdleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortControlModeIdleThreshold.setStatus('mandatory')
ncmddsPortMuxOutofSyncThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortMuxOutofSyncThreshold.setStatus('mandatory')
ncmddsPortUnAssignedMuxChannelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortUnAssignedMuxChannelThreshold.setStatus('mandatory')
ncmddsPortGroup1Codes = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortGroup1Codes.setStatus('mandatory')
ncmddsPort56KStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsPort56KStatus.setStatus('mandatory')
ncmddsPortReceived56KCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("umc", 1), ("tip", 2), ("ta", 3), ("ma", 4), ("rc", 5), ("bl", 6), ("lbe", 7), ("fev", 8), ("asc", 9), ("oos", 10), ("cmi", 11), ("tc", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsPortReceived56KCode.setStatus('mandatory')
ncmddsmode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode-56k", 1), ("mode-64k", 2), ("mode-56kncmdds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsmode.setStatus('mandatory')
ncmddsLatchingLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("chan-loop-up", 1), ("dsu-loop-up", 2), ("ocu-loop-up", 3), ("chan-loop-dn", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsLatchingLoopbackType.setStatus('mandatory')
ncmddsLatchingLoopbackDevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsLatchingLoopbackDevNo.setStatus('mandatory')
ncmdbuMainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000), )
if mibBuilder.loadTexts: ncmdbuMainConfigTable.setStatus('mandatory')
ncmdbuMainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuNIDMainConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuMainLineIndex"))
if mibBuilder.loadTexts: ncmdbuMainConfigEntry.setStatus('mandatory')
ncmdbuNIDMainConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuNIDMainConfigIndex.setStatus('mandatory')
ncmdbuMainLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuMainLineIndex.setStatus('mandatory')
ncmdbudsubus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("busA", 2), ("busB", 3), ("busC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbudsubus.setStatus('mandatory')
ncmdbuPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuPortChannel.setStatus('mandatory')
ncmdbuPortConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuPortConfiguration.setStatus('mandatory')
ncmdbucsushelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbucsushelf.setStatus('mandatory')
ncmdbucsuslot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbucsuslot.setStatus('mandatory')
ncmdbuLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuLosLead.setStatus('mandatory')
ncmdbuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001), )
if mibBuilder.loadTexts: ncmdbuConfigTable.setStatus('mandatory')
ncmdbuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuNIDConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuLineIndex"))
if mibBuilder.loadTexts: ncmdbuConfigEntry.setStatus('mandatory')
ncmdbuNIDConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuNIDConfigIndex.setStatus('mandatory')
ncmdbuLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuLineIndex.setStatus('mandatory')
ncmdbuAllOnesSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuAllOnesSwitchOverTime.setStatus('mandatory')
ncmdbuSwitchOnBERThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nO", 1), ("yES", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuSwitchOnBERThresholdExceeded.setStatus('mandatory')
ncmdbuDialBackupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual-manual", 1), ("automatic-automatic", 2), ("automatic-manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuDialBackupMode.setStatus('mandatory')
ncmdbuBackupConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("deactivate", 2), ("activate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuBackupConnection.setStatus('mandatory')
ncmdbumode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode-56k", 1), ("mode-64k", 2), ("mode-56kncmdds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbumode.setStatus('mandatory')
ncmdbuLoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("fT1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuLoopType.setStatus('mandatory')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMDSU-MIB", ncmddsPortConfiguration=ncmddsPortConfiguration, ncmdsuConfigTable=ncmdsuConfigTable, ncmdbuMainLineIndex=ncmdbuMainLineIndex, ncmdbuSwitchOnBERThresholdExceeded=ncmdbuSwitchOnBERThresholdExceeded, ncmdsuIndex=ncmdsuIndex, ncmdsuPortrateper8000=ncmdsuPortrateper8000, ncmdbuMainConfigEntry=ncmdbuMainConfigEntry, ncmddsNIDMainConfigIndex=ncmddsNIDMainConfigIndex, ncmdsuPortLOSstatus=ncmdsuPortLOSstatus, ncmdsuPortTestSeconds=ncmdsuPortTestSeconds, ncmddsLatchingLoopbackType=ncmddsLatchingLoopbackType, ncmddsConfigEntry=ncmddsConfigEntry, ncmddsMainConfigTable=ncmddsMainConfigTable, ncmdsuDTESpeed=ncmdsuDTESpeed, ncmdsuPortConfiguration=ncmdsuPortConfiguration, ncmdbumode=ncmdbumode, ncmddsNIDConfigIndex=ncmddsNIDConfigIndex, ncmdsuPortLeadStatus2=ncmdsuPortLeadStatus2, ncmdsuConfigEntry=ncmdsuConfigEntry, ncmdsuLineIndex=ncmdsuLineIndex, ncmdbuConfigEntry=ncmdbuConfigEntry, ncmdbucsuslot=ncmdbucsuslot, ncmdbuPortConfiguration=ncmdbuPortConfiguration, ncmdbuLosLead=ncmdbuLosLead, ncmcsushelf=ncmcsushelf, ncmddsPortAbnormalStationCodeThreshold=ncmddsPortAbnormalStationCodeThreshold, ncmddsPortGroup1Codes=ncmddsPortGroup1Codes, ncmdsuTimingSource=ncmdsuTimingSource, ncmdsuPortDiagStatus=ncmdsuPortDiagStatus, ncmdbuPortChannel=ncmdbuPortChannel, ncmddsPortControlModeIdleThreshold=ncmddsPortControlModeIdleThreshold, ncmdbuConfigTable=ncmdbuConfigTable, ncmdbuDialBackupMode=ncmdbuDialBackupMode, ncmddsPort56KStatus=ncmddsPort56KStatus, ncmdsustatEntry=ncmdsustatEntry, ncmddsPortChannel=ncmddsPortChannel, ncmdsuNIDConfigIndex=ncmdsuNIDConfigIndex, ncmdsuPortLoopback=ncmdsuPortLoopback, ncmdsuPortTestResults=ncmdsuPortTestResults, ncmddsPortRemoteLoopCode=ncmddsPortRemoteLoopCode, ncmddsPortReceiveLoopCode=ncmddsPortReceiveLoopCode, ncmddsConfigTable=ncmddsConfigTable, ncmddsdsubus=ncmddsdsubus, ncmddsPortUnAssignedMuxChannelThreshold=ncmddsPortUnAssignedMuxChannelThreshold, ncmdbuNIDConfigIndex=ncmdbuNIDConfigIndex, ncmdsuCommonTable=ncmdsuCommonTable, ncmdsuPortTest=ncmdsuPortTest, ncmddsConfigLineIndex=ncmddsConfigLineIndex, ncmdbuLoopType=ncmdbuLoopType, ncmddscsushelf=ncmddscsushelf, ncmdsuPortLowbattery=ncmdsuPortLowbattery, ncmdsuPortblockerrorcounter=ncmdsuPortblockerrorcounter, ncmdbuNIDMainConfigIndex=ncmdbuNIDMainConfigIndex, ncmdsuNIDIndex=ncmdsuNIDIndex, ncmdsubus=ncmdsubus, ncmddsMainConfigEntry=ncmddsMainConfigEntry, ncmdbudsubus=ncmdbudsubus, ncmddsPortAlarmClearDelayTime=ncmddsPortAlarmClearDelayTime, ncmdbuSwitchBy=ncmdbuSwitchBy, ncmdsuPortChannel=ncmdsuPortChannel, ncmdbuMainConfigTable=ncmdbuMainConfigTable, ncmdbuLineIndex=ncmdbuLineIndex, ncmdsustatTable=ncmdsustatTable, ncmddsLosLead=ncmddsLosLead, ncmdsuAlarmEnable=ncmdsuAlarmEnable, ncmcsuslot=ncmcsuslot, ncmdsuNIDstatIndex=ncmdsuNIDstatIndex, ncmdbuBackupConnection=ncmdbuBackupConnection, ncmdbuReceivedCode=ncmdbuReceivedCode, ncmdbuAllOnesSwitchOverTime=ncmdbuAllOnesSwitchOverTime, ncmddsMainLineIndex=ncmddsMainLineIndex, ncmdbucsushelf=ncmdbucsushelf, ncmdsustatIndex=ncmdsustatIndex, ncmdsuLosLead=ncmdsuLosLead, ncmddsPortAlarmEnable=ncmddsPortAlarmEnable, ncmddsmode=ncmddsmode, ncmdbuPrimaryLineStatus=ncmdbuPrimaryLineStatus, ncmddsLatchingLoopbackDevNo=ncmddsLatchingLoopbackDevNo, ncmdbuLineStatus=ncmdbuLineStatus, ncmddsPortMuxOutofSyncThreshold=ncmddsPortMuxOutofSyncThreshold, ncmddscsuslot=ncmddscsuslot, ncmddsPortReceived56KCode=ncmddsPortReceived56KCode, ncmdsuCommonEntry=ncmdsuCommonEntry, ncmdsuPortType=ncmdsuPortType, ncmdsuPortLeadStatus1=ncmdsuPortLeadStatus1, ncmddsPortLoopEnable=ncmddsPortLoopEnable)
