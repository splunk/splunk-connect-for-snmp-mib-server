#
# PySNMP MIB module PDN-IFEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-IFEXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:30:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdnIfExt, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdnIfExt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, iso, ObjectIdentity, Unsigned32, Counter32, TimeTicks, Counter64, NotificationType, Bits, ModuleIdentity, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "iso", "ObjectIdentity", "Unsigned32", "Counter32", "TimeTicks", "Counter64", "NotificationType", "Bits", "ModuleIdentity", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
pdnIfExtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1))
pdnIfExtTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 2))
pdnIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 1), )
if mibBuilder.loadTexts: pdnIfExtTable.setStatus('mandatory')
pdnIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 1, 1), ).setIndexNames((0, "PDN-IFEXT-MIB", "pdnIfExtIndex"))
if mibBuilder.loadTexts: pdnIfExtEntry.setStatus('mandatory')
pdnIfExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIfExtIndex.setStatus('mandatory')
pdnIfExtInOctetRollovers = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIfExtInOctetRollovers.setStatus('mandatory')
pdnIfExtOutOctetRollovers = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIfExtOutOctetRollovers.setStatus('mandatory')
pdnIfExtTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIfExtTotalUASs.setStatus('mandatory')
pdnIfExtTestConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 2, 1), )
if mibBuilder.loadTexts: pdnIfExtTestConfigTable.setStatus('mandatory')
pdnIfExtTestConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 2, 1, 1), ).setIndexNames((0, "PDN-IFEXT-MIB", "pdnIfExtTestConfigIfIndex"))
if mibBuilder.loadTexts: pdnIfExtTestConfigEntry.setStatus('mandatory')
pdnIfExtTestConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIfExtTestConfigIfIndex.setStatus('mandatory')
pdnIfExtTestConfigNearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnIfExtTestConfigNearTimer.setStatus('mandatory')
pdnIfExtTestConfigFarTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnIfExtTestConfigFarTimer.setStatus('mandatory')
pdnIfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 2), )
if mibBuilder.loadTexts: pdnIfTable.setStatus('mandatory')
pdnIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PDN-IFEXT-MIB", "pdnIfAddr"))
if mibBuilder.loadTexts: pdnIfEntry.setStatus('mandatory')
pdnIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnIfAddr.setStatus('mandatory')
pdnIfAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnIfAddrMask.setStatus('mandatory')
pdnIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 12, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnIfStatus.setStatus('mandatory')
mibBuilder.exportSymbols("PDN-IFEXT-MIB", pdnIfExtConfig=pdnIfExtConfig, pdnIfExtTable=pdnIfExtTable, pdnIfExtTestConfigTable=pdnIfExtTestConfigTable, pdnIfExtTestConfigEntry=pdnIfExtTestConfigEntry, pdnIfAddr=pdnIfAddr, pdnIfStatus=pdnIfStatus, pdnIfExtOutOctetRollovers=pdnIfExtOutOctetRollovers, pdnIfEntry=pdnIfEntry, pdnIfExtInOctetRollovers=pdnIfExtInOctetRollovers, pdnIfExtTotalUASs=pdnIfExtTotalUASs, pdnIfTable=pdnIfTable, pdnIfExtTestConfigNearTimer=pdnIfExtTestConfigNearTimer, pdnIfAddrMask=pdnIfAddrMask, pdnIfExtTestConfig=pdnIfExtTestConfig, pdnIfExtTestConfigIfIndex=pdnIfExtTestConfigIfIndex, pdnIfExtIndex=pdnIfExtIndex, pdnIfExtTestConfigFarTimer=pdnIfExtTestConfigFarTimer, pdnIfExtEntry=pdnIfExtEntry)
