#
# PySNMP MIB module CPQSTDEQ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQSTDEQ-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, ModuleIdentity, ObjectIdentity, NotificationType, Counter64, iso, Gauge32, Unsigned32, TimeTicks, MibIdentifier, NotificationType, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Counter64", "iso", "Gauge32", "Unsigned32", "TimeTicks", "MibIdentifier", "NotificationType", "Bits", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqStdEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1))
cpqSeMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 1))
cpqSeComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2))
cpqSeInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 1))
cpqSeProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 2))
cpqSeMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 3))
cpqSeIsaCmos = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 4))
cpqSeEisaNvram = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 5))
cpqSeRom = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 6))
cpqSeKeyboard = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 7))
cpqSeVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 8))
cpqSeSerialPort = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 9))
cpqSeParallelPort = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 10))
cpqSeFloppyDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 11))
cpqSeFixedDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 12))
cpqSePci = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 13))
cpqSePCCard = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 14))
cpqSeUSBPort = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 15))
cpqSeCell = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 16))
cpqSeIOC = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 17))
cpqSePartition = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 18))
cpqSeCabinet = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 19))
cpqSeComplex = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 20))
cpqSeLED = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 21))
cpqSeUSBDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 22))
cpqSeOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4))
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("false", 1), ("true", 2))

cpqSeMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeMibRevMajor.setStatus('mandatory')
cpqSeMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeMibRevMinor.setStatus('mandatory')
cpqSeMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeMibCondition.setStatus('mandatory')
cpqSeOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSeOsCommonPollFreq.setStatus('mandatory')
cpqSeOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqSeOsCommonModuleTable.setStatus('deprecated')
cpqSeOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqSeOsCommonModuleEntry.setStatus('deprecated')
cpqSeOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeOsCommonModuleIndex.setStatus('deprecated')
cpqSeOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeOsCommonModuleName.setStatus('deprecated')
cpqSeOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeOsCommonModuleVersion.setStatus('deprecated')
cpqSeOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeOsCommonModuleDate.setStatus('deprecated')
cpqSeOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeOsCommonModulePurpose.setStatus('deprecated')
cpqSeCpuTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1), )
if mibBuilder.loadTexts: cpqSeCpuTable.setStatus('mandatory')
cpqSeCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeCpuUnitIndex"))
if mibBuilder.loadTexts: cpqSeCpuEntry.setStatus('mandatory')
cpqSeCpuUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuUnitIndex.setStatus('mandatory')
cpqSeCpuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuSlot.setStatus('mandatory')
cpqSeCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuName.setStatus('mandatory')
cpqSeCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuSpeed.setStatus('mandatory')
cpqSeCpuStep = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuStep.setStatus('mandatory')
cpqSeCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuStatus.setStatus('mandatory')
cpqSeCpuExtSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuExtSpeed.setStatus('mandatory')
cpqSeCpuDesigner = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("intel", 2), ("amd", 3), ("cyrix", 4), ("ti", 5), ("nexgen", 6), ("compaq", 7), ("samsung", 8), ("mitsubishi", 9), ("mips", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuDesigner.setStatus('mandatory')
cpqSeCpuSocketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuSocketNumber.setStatus('mandatory')
cpqSeCpuThreshPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupported", 1), ("false", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuThreshPassed.setStatus('mandatory')
cpqSeCpuHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuHwLocation.setStatus('optional')
cpqSeCpuCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCellTablePtr.setStatus('optional')
cpqSeCpuPowerpodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notfailed", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuPowerpodStatus.setStatus('optional')
cpqSeCpuArchitectureRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuArchitectureRevision.setStatus('optional')
cpqSeCpuCore = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCore.setStatus('optional')
cpqSeCPUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUSerialNumber.setStatus('optional')
cpqSeCPUPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUPartNumber.setStatus('optional')
cpqSeCPUSerialNumberMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUSerialNumberMfgr.setStatus('optional')
cpqSeCPUPartNumberMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUPartNumberMfgr.setStatus('optional')
cpqSeCPUCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUCoreIndex.setStatus('optional')
cpqSeCPUMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUMaxSpeed.setStatus('optional')
cpqSeCPUCoreThreadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUCoreThreadIndex.setStatus('optional')
cpqSeCPUChipGenerationName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUChipGenerationName.setStatus('optional')
cpqSeCPUMultiThreadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUMultiThreadStatus.setStatus('optional')
cpqSeCPUCoreMaxThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCPUCoreMaxThreads.setStatus('optional')
cpqSeCpuLowPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("lowpowered", 2), ("normalpowered", 3), ("highpowered", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuLowPowerStatus.setStatus('mandatory')
cpqSeCpuPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("false", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuPrimary.setStatus('mandatory')
cpqSeCpuCoreSteppingText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCoreSteppingText.setStatus('optional')
cpqSeCpuCurrentPerformanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCurrentPerformanceState.setStatus('optional')
cpqSeCpuMinPerformanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuMinPerformanceState.setStatus('optional')
cpqSeCpuMaxPerformanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuMaxPerformanceState.setStatus('optional')
cpqSeFpuTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2), )
if mibBuilder.loadTexts: cpqSeFpuTable.setStatus('mandatory')
cpqSeFpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeFpuUnitIndex"), (0, "CPQSTDEQ-MIB", "cpqSeFpuChipIndex"))
if mibBuilder.loadTexts: cpqSeFpuEntry.setStatus('mandatory')
cpqSeFpuUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFpuUnitIndex.setStatus('mandatory')
cpqSeFpuChipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFpuChipIndex.setStatus('mandatory')
cpqSeFpuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFpuSlot.setStatus('mandatory')
cpqSeFpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFpuName.setStatus('mandatory')
cpqSeFpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFpuSpeed.setStatus('mandatory')
cpqSeFpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("embedded", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFpuType.setStatus('mandatory')
cpqSeFpuHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFpuHwLocation.setStatus('optional')
cpqSeCpuCacheTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3), )
if mibBuilder.loadTexts: cpqSeCpuCacheTable.setStatus('mandatory')
cpqSeCpuCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeCpuCacheUnitIndex"), (0, "CPQSTDEQ-MIB", "cpqSeCpuCacheLevelIndex"))
if mibBuilder.loadTexts: cpqSeCpuCacheEntry.setStatus('mandatory')
cpqSeCpuCacheUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheUnitIndex.setStatus('mandatory')
cpqSeCpuCacheLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheLevelIndex.setStatus('mandatory')
cpqSeCpuCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheSize.setStatus('mandatory')
cpqSeCpuCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheSpeed.setStatus('mandatory')
cpqSeCpuCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheStatus.setStatus('mandatory')
cpqSeCpuCacheWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("write-through", 2), ("write-back", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheWritePolicy.setStatus('mandatory')
cpqSeCpuCacheHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheHwLocation.setStatus('optional')
cpqSeCpuCacheCpuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheCpuSlot.setStatus('optional')
cpqSeCpuCacheCpuCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCpuCacheCpuCoreIndex.setStatus('optional')
cpqSeBaseMem = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeBaseMem.setStatus('mandatory')
cpqSeTotalMem = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeTotalMem.setStatus('mandatory')
cpqSeTotalMemMB = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeTotalMemMB.setStatus('mandatory')
cpqSeIsaCmosRaw = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeIsaCmosRaw.setStatus('mandatory')
cpqSeEisaSlotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1), )
if mibBuilder.loadTexts: cpqSeEisaSlotTable.setStatus('mandatory')
cpqSeEisaSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaSlotIndex"))
if mibBuilder.loadTexts: cpqSeEisaSlotEntry.setStatus('mandatory')
cpqSeEisaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaSlotIndex.setStatus('mandatory')
cpqSeEisaSlotRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaSlotRaw.setStatus('mandatory')
cpqSeEisaSlotBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaSlotBoardId.setStatus('mandatory')
cpqSeEisaSlotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaSlotBoardName.setStatus('mandatory')
cpqSeEisaSlotCfRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaSlotCfRev.setStatus('mandatory')
cpqSeEisaSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("isa8Bit", 2), ("isa16Bit", 3), ("eisa32Bit", 4), ("eisaBusMaster32Bit", 5), ("other", 6), ("reserved", 7), ("reserved2", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaSlotType.setStatus('mandatory')
cpqSeEisaFunctTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2), )
if mibBuilder.loadTexts: cpqSeEisaFunctTable.setStatus('mandatory')
cpqSeEisaFunctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaFunctSlotIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaFunctIndex"))
if mibBuilder.loadTexts: cpqSeEisaFunctEntry.setStatus('mandatory')
cpqSeEisaFunctSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFunctSlotIndex.setStatus('mandatory')
cpqSeEisaFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFunctIndex.setStatus('mandatory')
cpqSeEisaFunctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFunctStatus.setStatus('mandatory')
cpqSeEisaFunctType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFunctType.setStatus('mandatory')
cpqSeEisaFunctCfgRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFunctCfgRev.setStatus('mandatory')
cpqSeEisaFunctSels = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFunctSels.setStatus('mandatory')
cpqSeEisaFunctInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFunctInfo.setStatus('mandatory')
cpqSeEisaMemTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3), )
if mibBuilder.loadTexts: cpqSeEisaMemTable.setStatus('mandatory')
cpqSeEisaMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaMemSlotIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaMemFunctIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaMemAllocIndex"))
if mibBuilder.loadTexts: cpqSeEisaMemEntry.setStatus('mandatory')
cpqSeEisaMemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemSlotIndex.setStatus('mandatory')
cpqSeEisaMemFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemFunctIndex.setStatus('mandatory')
cpqSeEisaMemAllocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemAllocIndex.setStatus('mandatory')
cpqSeEisaMemStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemStartAddr.setStatus('mandatory')
cpqSeEisaMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemSize.setStatus('mandatory')
cpqSeEisaMemShare = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonshareable", 1), ("shareable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemShare.setStatus('mandatory')
cpqSeEisaMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("systemBaseOrExtended", 1), ("expanded", 2), ("virtual", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemType.setStatus('mandatory')
cpqSeEisaMemCache = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCached", 1), ("writeThroughCached", 2), ("writeBackCached", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemCache.setStatus('mandatory')
cpqSeEisaMemAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemAccess.setStatus('mandatory')
cpqSeEisaMemDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemDecode.setStatus('mandatory')
cpqSeEisaMemDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaMemDataSize.setStatus('mandatory')
cpqSeEisaIntTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4), )
if mibBuilder.loadTexts: cpqSeEisaIntTable.setStatus('mandatory')
cpqSeEisaIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaIntSlotIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaIntFunctIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaIntAllocIndex"))
if mibBuilder.loadTexts: cpqSeEisaIntEntry.setStatus('mandatory')
cpqSeEisaIntSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaIntSlotIndex.setStatus('mandatory')
cpqSeEisaIntFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaIntFunctIndex.setStatus('mandatory')
cpqSeEisaIntAllocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaIntAllocIndex.setStatus('mandatory')
cpqSeEisaIntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaIntNum.setStatus('mandatory')
cpqSeEisaIntShare = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonshareable", 1), ("shareable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaIntShare.setStatus('mandatory')
cpqSeEisaIntTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("edge", 1), ("level", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaIntTrigger.setStatus('mandatory')
cpqSeEisaDmaTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5), )
if mibBuilder.loadTexts: cpqSeEisaDmaTable.setStatus('mandatory')
cpqSeEisaDmaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaDmaSlotIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaDmaFunctIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaDmaAllocIndex"))
if mibBuilder.loadTexts: cpqSeEisaDmaEntry.setStatus('mandatory')
cpqSeEisaDmaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaSlotIndex.setStatus('mandatory')
cpqSeEisaDmaFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaFunctIndex.setStatus('mandatory')
cpqSeEisaDmaAllocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaAllocIndex.setStatus('mandatory')
cpqSeEisaDmaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaChannel.setStatus('mandatory')
cpqSeEisaDmaShare = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonshareable", 1), ("shareable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaShare.setStatus('mandatory')
cpqSeEisaDmaTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("isaTiming", 1), ("typeA", 2), ("typeB", 3), ("burstTypeC", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaTiming.setStatus('mandatory')
cpqSeEisaDmaXfer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaXfer.setStatus('mandatory')
cpqSeEisaDmaXferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("byte", 1), ("word", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaDmaXferCount.setStatus('mandatory')
cpqSeEisaPortTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6), )
if mibBuilder.loadTexts: cpqSeEisaPortTable.setStatus('mandatory')
cpqSeEisaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaPortSlotIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaPortFunctIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaPortAllocIndex"))
if mibBuilder.loadTexts: cpqSeEisaPortEntry.setStatus('mandatory')
cpqSeEisaPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaPortSlotIndex.setStatus('mandatory')
cpqSeEisaPortFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaPortFunctIndex.setStatus('mandatory')
cpqSeEisaPortAllocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaPortAllocIndex.setStatus('mandatory')
cpqSeEisaPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaPortAddr.setStatus('mandatory')
cpqSeEisaPortShare = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonshareable", 1), ("shareable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaPortShare.setStatus('mandatory')
cpqSeEisaPortSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaPortSize.setStatus('mandatory')
cpqSeEisaFreeFormTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 7), )
if mibBuilder.loadTexts: cpqSeEisaFreeFormTable.setStatus('mandatory')
cpqSeEisaFreeFormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 7, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaFreeFormSlotIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaFreeFormFunctIndex"))
if mibBuilder.loadTexts: cpqSeEisaFreeFormEntry.setStatus('mandatory')
cpqSeEisaFreeFormSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFreeFormSlotIndex.setStatus('mandatory')
cpqSeEisaFreeFormFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFreeFormFunctIndex.setStatus('mandatory')
cpqSeEisaFreeFormValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 205))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaFreeFormValue.setStatus('mandatory')
cpqSeEisaInitTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8), )
if mibBuilder.loadTexts: cpqSeEisaInitTable.setStatus('mandatory')
cpqSeEisaInitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeEisaInitSlotIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaInitFunctIndex"), (0, "CPQSTDEQ-MIB", "cpqSeEisaInitAllocIndex"))
if mibBuilder.loadTexts: cpqSeEisaInitEntry.setStatus('mandatory')
cpqSeEisaInitSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitSlotIndex.setStatus('mandatory')
cpqSeEisaInitFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitFunctIndex.setStatus('mandatory')
cpqSeEisaInitAllocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitAllocIndex.setStatus('mandatory')
cpqSeEisaInitUseMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useValueOnly", 1), ("useValueAndMask", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitUseMask.setStatus('mandatory')
cpqSeEisaInitAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("eightBitAddress", 2), ("sixteenBitAddress", 3), ("thirtyTwoBitAddress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitAccess.setStatus('mandatory')
cpqSeEisaInitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitAddr.setStatus('mandatory')
cpqSeEisaInitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitValue.setStatus('mandatory')
cpqSeEisaInitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 5, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeEisaInitMask.setStatus('mandatory')
cpqSeSysRomVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeSysRomVer.setStatus('mandatory')
cpqSeOptRomTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 2), )
if mibBuilder.loadTexts: cpqSeOptRomTable.setStatus('mandatory')
cpqSeOptRomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 2, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeOptRomAddrIndex"))
if mibBuilder.loadTexts: cpqSeOptRomEntry.setStatus('mandatory')
cpqSeOptRomAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeOptRomAddrIndex.setStatus('mandatory')
cpqSeOptRomSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeOptRomSize.setStatus('mandatory')
cpqSeBiosRomDataRaw = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeBiosRomDataRaw.setStatus('mandatory')
cpqSeRedundantSysRomVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeRedundantSysRomVer.setStatus('mandatory')
cpqSeSmbiosVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeSmbiosVer.setStatus('mandatory')
cpqSeMPFwVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeMPFwVer.setStatus('optional')
cpqSeBMCFwVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeBMCFwVer.setStatus('optional')
cpqSeHPVMFwVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeHPVMFwVer.setStatus('optional')
cpqSeKeyboardDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeKeyboardDesc.setStatus('mandatory')
cpqSeVideoDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeVideoDesc.setStatus('mandatory')
cpqSeSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 9, 1), )
if mibBuilder.loadTexts: cpqSeSerialPortTable.setStatus('mandatory')
cpqSeSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 9, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeSerialPortIndex"))
if mibBuilder.loadTexts: cpqSeSerialPortEntry.setStatus('mandatory')
cpqSeSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeSerialPortIndex.setStatus('mandatory')
cpqSeSerialPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeSerialPortAddr.setStatus('mandatory')
cpqSeSerialPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeSerialPortDesc.setStatus('mandatory')
cpqSeSerialPortHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeSerialPortHwLocation.setStatus('optional')
cpqSeParallelPortTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 10, 1), )
if mibBuilder.loadTexts: cpqSeParallelPortTable.setStatus('mandatory')
cpqSeParallelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 10, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeParallelPortIndex"))
if mibBuilder.loadTexts: cpqSeParallelPortEntry.setStatus('mandatory')
cpqSeParallelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeParallelPortIndex.setStatus('mandatory')
cpqSeParallelPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeParallelPortAddr.setStatus('mandatory')
cpqSeParallelPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeParallelPortDesc.setStatus('mandatory')
cpqSeParrallelPortHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeParrallelPortHwLocation.setStatus('optional')
cpqSeFloppyDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 11, 1), )
if mibBuilder.loadTexts: cpqSeFloppyDiskTable.setStatus('mandatory')
cpqSeFloppyDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 11, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeFloppyDiskIndex"))
if mibBuilder.loadTexts: cpqSeFloppyDiskEntry.setStatus('mandatory')
cpqSeFloppyDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFloppyDiskIndex.setStatus('mandatory')
cpqSeFloppyDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("drive360k", 2), ("drive1200k", 3), ("drive720k", 4), ("drive1440k", 5), ("drive120mb", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFloppyDiskType.setStatus('mandatory')
cpqSeFloppyDiskHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFloppyDiskHwLocation.setStatus('optional')
cpqSeFixedDiskTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1), )
if mibBuilder.loadTexts: cpqSeFixedDiskTable.setStatus('mandatory')
cpqSeFixedDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeFixedDiskIndex"))
if mibBuilder.loadTexts: cpqSeFixedDiskEntry.setStatus('mandatory')
cpqSeFixedDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFixedDiskIndex.setStatus('mandatory')
cpqSeFixedDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFixedDiskType.setStatus('mandatory')
cpqSeFixedDiskCyls = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFixedDiskCyls.setStatus('mandatory')
cpqSeFixedDiskHeads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFixedDiskHeads.setStatus('mandatory')
cpqSeFixedDiskSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFixedDiskSectors.setStatus('mandatory')
cpqSeFixedDiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFixedDiskCapacity.setStatus('mandatory')
cpqSeFixedDiskHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 12, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeFixedDiskHwLocation.setStatus('optional')
cpqSePciSlotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1), )
if mibBuilder.loadTexts: cpqSePciSlotTable.setStatus('mandatory')
cpqSePciSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSePciSlotBusNumberIndex"), (0, "CPQSTDEQ-MIB", "cpqSePciSlotDeviceNumberIndex"))
if mibBuilder.loadTexts: cpqSePciSlotEntry.setStatus('mandatory')
cpqSePciSlotBusNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotBusNumberIndex.setStatus('mandatory')
cpqSePciSlotDeviceNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotDeviceNumberIndex.setStatus('mandatory')
cpqSePciPhysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciPhysSlot.setStatus('mandatory')
cpqSePciSlotSubSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotSubSystemID.setStatus('mandatory')
cpqSePciSlotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotBoardName.setStatus('mandatory')
cpqSePciSlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("thirtyTwoBit", 3), ("sixtyFourBit", 4), ("oneTwentyEightBit", 5), ("x1", 6), ("x2", 7), ("x4", 8), ("x8", 9), ("x12", 10), ("x16", 11), ("x32", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotWidth.setStatus('mandatory')
cpqSePciSlotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("thirtyThreeMHz", 3), ("sixtySixMHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotSpeed.setStatus('deprecated')
cpqSePciSlotExtendedInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotExtendedInfo.setStatus('mandatory')
cpqSePciSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pci", 3), ("pci66", 4), ("pcix", 5), ("pciexpress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotType.setStatus('mandatory')
cpqSePciSlotCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pci", 3), ("pci66", 4), ("pcix", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotCurrentMode.setStatus('mandatory')
cpqSePciMaxSlotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMaxSlotSpeed.setStatus('mandatory')
cpqSePciXMaxSlotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciXMaxSlotSpeed.setStatus('mandatory')
cpqSePciCurrentSlotSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciCurrentSlotSpeed.setStatus('mandatory')
cpqSePciHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciHwLocation.setStatus('optional')
cpqSePciSlotIOCTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotIOCTablePtr.setStatus('mandatory')
cpqSePciSlotHeaderType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSlotHeaderType.setStatus('mandatory')
cpqSePciIsSlot0Embedded = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciIsSlot0Embedded.setStatus('optional')
cpqSePcieSlotMaxLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePcieSlotMaxLinkSpeed.setStatus('optional')
cpqSePcieSlotMaxLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePcieSlotMaxLinkWidth.setStatus('optional')
cpqSePciFunctTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2), )
if mibBuilder.loadTexts: cpqSePciFunctTable.setStatus('mandatory')
cpqSePciFunctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSePciFunctBusNumberIndex"), (0, "CPQSTDEQ-MIB", "cpqSePciFunctDeviceNumberIndex"), (0, "CPQSTDEQ-MIB", "cpqSePciFunctIndex"))
if mibBuilder.loadTexts: cpqSePciFunctEntry.setStatus('mandatory')
cpqSePciFunctBusNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctBusNumberIndex.setStatus('mandatory')
cpqSePciFunctDeviceNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctDeviceNumberIndex.setStatus('mandatory')
cpqSePciFunctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctIndex.setStatus('mandatory')
cpqSePciFunctClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctClassCode.setStatus('mandatory')
cpqSePciFunctClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctClassDescription.setStatus('mandatory')
cpqSePciFunctDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctDeviceID.setStatus('mandatory')
cpqSePciFunctVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctVendorID.setStatus('mandatory')
cpqSePciFunctRevID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctRevID.setStatus('mandatory')
cpqSePciFunctIntLine = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctIntLine.setStatus('mandatory')
cpqSePciFunctDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctDevStatus.setStatus('mandatory')
cpqSePciFunctHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciFunctHwLocation.setStatus('optional')
cpqSePcieFunctNegotiatedLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePcieFunctNegotiatedLinkSpeed.setStatus('optional')
cpqSePcieFunctNegotiatedLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePcieFunctNegotiatedLinkWidth.setStatus('optional')
cpqSePcieFunctMaxLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePcieFunctMaxLinkSpeed.setStatus('optional')
cpqSePcieFunctMaxLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePcieFunctMaxLinkWidth.setStatus('optional')
cpqSePciMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3), )
if mibBuilder.loadTexts: cpqSePciMemoryTable.setStatus('mandatory')
cpqSePciMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSePciMemoryBusNumberIndex"), (0, "CPQSTDEQ-MIB", "cpqSePciMemoryDeviceNumberIndex"), (0, "CPQSTDEQ-MIB", "cpqSePciMemoryFunctionIndex"), (0, "CPQSTDEQ-MIB", "cpqSePciMemoryIndex"))
if mibBuilder.loadTexts: cpqSePciMemoryEntry.setStatus('mandatory')
cpqSePciMemoryBusNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemoryBusNumberIndex.setStatus('mandatory')
cpqSePciMemoryDeviceNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemoryDeviceNumberIndex.setStatus('mandatory')
cpqSePciMemoryFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemoryFunctionIndex.setStatus('mandatory')
cpqSePciMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemoryIndex.setStatus('mandatory')
cpqSePciMemoryBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemoryBaseAddr.setStatus('mandatory')
cpqSePciMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("io", 2), ("memory-mapped", 3), ("exp-rom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemoryType.setStatus('mandatory')
cpqSePciMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemorySize.setStatus('mandatory')
cpqSePciMemoryHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciMemoryHwLocation.setStatus('optional')
cpqSePciSegmentMode = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("single-segment", 2), ("multi-segment", 3), ("auto-segment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePciSegmentMode.setStatus('optional')
cpqSePCCardSlotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1), )
if mibBuilder.loadTexts: cpqSePCCardSlotTable.setStatus('mandatory')
cpqSePCCardSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSePCCardSlotIndex"))
if mibBuilder.loadTexts: cpqSePCCardSlotEntry.setStatus('mandatory')
cpqSePCCardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardSlotIndex.setStatus('mandatory')
cpqSePCCardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardCondition.setStatus('mandatory')
cpqSePCCardPhysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardPhysLocation.setStatus('mandatory')
cpqSePCCardSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardSlotType.setStatus('mandatory')
cpqSePCCardSlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("width8bit", 3), ("width16bit", 4), ("width32bit", 5), ("width64bit", 6), ("width128bit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardSlotWidth.setStatus('mandatory')
cpqSePCCardSlotThermalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardSlotThermalCapacity.setStatus('mandatory')
cpqSePCCardSlotThermalSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardSlotThermalSensor.setStatus('mandatory')
cpqSePCCardSlotPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardSlotPowerState.setStatus('mandatory')
cpqSePCCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("thermalDegraded", 3), ("thermalFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardStatus.setStatus('mandatory')
cpqSePCCardDeviceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardDeviceInfo.setStatus('mandatory')
cpqSePCCardProductInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardProductInfo.setStatus('mandatory')
cpqSePCCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardSerialNumber.setStatus('mandatory')
cpqSePCCardAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 14, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePCCardAssetTag.setStatus('mandatory')
cpqSeUSBPortTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 15, 1), )
if mibBuilder.loadTexts: cpqSeUSBPortTable.setStatus('mandatory')
cpqSeUSBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 15, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeUSBPortIndex"))
if mibBuilder.loadTexts: cpqSeUSBPortEntry.setStatus('mandatory')
cpqSeUSBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeUSBPortIndex.setStatus('mandatory')
cpqSeUSBPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("usbPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeUSBPortType.setStatus('mandatory')
cpqSeUSBPortHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeUSBPortHwLocation.setStatus('optional')
cpqSeCellTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1), )
if mibBuilder.loadTexts: cpqSeCellTable.setStatus('optional')
cpqSeCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeCellUnitIndex"))
if mibBuilder.loadTexts: cpqSeCellEntry.setStatus('optional')
cpqSeCellUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellUnitIndex.setStatus('optional')
cpqSeCellCabinetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellCabinetNumber.setStatus('optional')
cpqSeCellCellNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellCellNumber.setStatus('optional')
cpqSeCellIOCTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellIOCTablePtr.setStatus('optional')
cpqSeCellPDHCFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellPDHCFirmwareRevision.setStatus('optional')
cpqSeCellSysFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellSysFwVersion.setStatus('optional')
cpqSeCellBootInhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellBootInhibited.setStatus('optional')
cpqSeCellToScanBusConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellToScanBusConnectionStatus.setStatus('optional')
cpqSeCellHasCoreIO = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellHasCoreIO.setStatus('optional')
cpqSeCellBoardSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellBoardSpeed.setStatus('optional')
cpqSeCellPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellPresent.setStatus('optional')
cpqSeCellHasPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellHasPower.setStatus('optional')
cpqSeCellReadyForReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellReadyForReconfig.setStatus('optional')
cpqSeCellTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellTotalMemory.setStatus('optional')
cpqSeCellLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSeCellLEDState.setStatus('optional')
cpqSeCellState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSeCellState.setStatus('optional')
cpqSeCellCLMRequestPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellCLMRequestPercentage.setStatus('optional')
cpqSeCellCLMRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellCLMRequestSize.setStatus('optional')
cpqSeCellCLMAllocatedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellCLMAllocatedSize.setStatus('optional')
cpqSeCellInterleaveAllocatedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellInterleaveAllocatedSize.setStatus('optional')
cpqSeCellHasInterleaveMem = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellHasInterleaveMem.setStatus('optional')
cpqSeCellSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellSerialNumber.setStatus('optional')
cpqSeCellCLMCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 16, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCellCLMCondition.setStatus('optional')
cpqSeIOCTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1), )
if mibBuilder.loadTexts: cpqSeIOCTable.setStatus('optional')
cpqSeIOCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeIOCUnitIndex"))
if mibBuilder.loadTexts: cpqSeIOCEntry.setStatus('optional')
cpqSeIOCUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeIOCUnitIndex.setStatus('optional')
cpqSeIOCCabinetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeIOCCabinetNumber.setStatus('optional')
cpqSeIOCBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeIOCBayNumber.setStatus('optional')
cpqSeIOCIOCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeIOCIOCNumber.setStatus('optional')
cpqSeIOCPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("powered-off", 2), ("powered-on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeIOCPowerState.setStatus('optional')
cpqSeIOCLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 17, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSeIOCLEDState.setStatus('optional')
cpqSePartitionTotalCPU = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionTotalCPU.setStatus('optional')
cpqSePartitionAvailableCellSlots = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionAvailableCellSlots.setStatus('optional')
cpqSePartitionInstalledCells = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionInstalledCells.setStatus('optional')
cpqSePartitionPoweredOnCells = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionPoweredOnCells.setStatus('optional')
cpqSePartitionReadyForReconfigCells = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionReadyForReconfigCells.setStatus('optional')
cpqSePartitionMemInterleavingType = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionMemInterleavingType.setStatus('optional')
cpqSePartitionName = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionName.setStatus('optional')
cpqSePartitionCoreCell = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionCoreCell.setStatus('optional')
cpqSePartitionCoreCellCabinet = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionCoreCellCabinet.setStatus('optional')
cpqSePartitionCLMRequestPercentage = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionCLMRequestPercentage.setStatus('optional')
cpqSePartitionCLMRequestSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionCLMRequestSize.setStatus('optional')
cpqSePartitionCLMAllocatedSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionCLMAllocatedSize.setStatus('optional')
cpqSePartitionInterleaveAllocatedSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionInterleaveAllocatedSize.setStatus('optional')
cpqSePartitionHasInterleaveMem = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionHasInterleaveMem.setStatus('optional')
cpqSePartitionNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 18, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSePartitionNumber.setStatus('optional')
cpqSeCabinetTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 19, 1), )
if mibBuilder.loadTexts: cpqSeCabinetTable.setStatus('optional')
cpqSeCabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 19, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeCabinetUnitIndex"))
if mibBuilder.loadTexts: cpqSeCabinetEntry.setStatus('optional')
cpqSeCabinetUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCabinetUnitIndex.setStatus('optional')
cpqSeCabinetCPULED = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 19, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCabinetCPULED.setStatus('optional')
cpqSeCabinetIOXLED = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 19, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCabinetIOXLED.setStatus('optional')
cpqSeCabinetTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 19, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeCabinetTypeNum.setStatus('optional')
cpqSeCabinetLED = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 19, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSeCabinetLED.setStatus('optional')
cpqSeComplexUUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexUUID.setStatus('optional')
cpqSeComplexTotalCabinet = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexTotalCabinet.setStatus('optional')
cpqSeComplexComputeCabinet = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexComputeCabinet.setStatus('optional')
cpqSeComplexIOXCabinet = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexIOXCabinet.setStatus('optional')
cpqSeComplexName = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexName.setStatus('optional')
cpqSeComplexLockedProperty = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexLockedProperty.setStatus('optional')
cpqSeComplexCellSlotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7), )
if mibBuilder.loadTexts: cpqSeComplexCellSlotStatusTable.setStatus('optional')
cpqSeComplexCellSlotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeComplexCellSlotStatusIndex"))
if mibBuilder.loadTexts: cpqSeComplexCellSlotStatusEntry.setStatus('optional')
cpqSeComplexCellSlotStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexCellSlotStatusIndex.setStatus('optional')
cpqSeComplexCellSlotStatusCabinetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexCellSlotStatusCabinetNo.setStatus('optional')
cpqSeComplexCellSlotStatusSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexCellSlotStatusSlotNo.setStatus('optional')
cpqSeComplexCellSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3), ("assigned-powered-off", 4), ("free-powered-on", 5), ("free-powered-off", 6), ("empty", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexCellSlotStatus.setStatus('optional')
cpqSeComplexCellSlotPartitionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexCellSlotPartitionNo.setStatus('optional')
cpqSeComplexCellSlotPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 20, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeComplexCellSlotPartitionName.setStatus('optional')
cpqSeLEDTable = MibTable((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1), )
if mibBuilder.loadTexts: cpqSeLEDTable.setStatus('optional')
cpqSeLEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1, 1), ).setIndexNames((0, "CPQSTDEQ-MIB", "cpqSeLEDIndex"))
if mibBuilder.loadTexts: cpqSeLEDEntry.setStatus('optional')
cpqSeLEDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeLEDIndex.setStatus('optional')
cpqSeLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSeLEDState.setStatus('optional')
cpqSeLEDStateDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSeLEDStateDuration.setStatus('optional')
cpqSeLEDLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeLEDLocationType.setStatus('optional')
cpqSeLEDDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeLEDDescription.setStatus('optional')
cpqSeLEDHardwareLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 1, 2, 21, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeLEDHardwareLocation.setStatus('optional')
cpqSeUSBDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeUSBDeviceType.setStatus('optional')
cpqSeUSBDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 232, 1, 2, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSeUSBDeviceName.setStatus('optional')
cpqSeCpuThresholdPassed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSeCpuSlot"), ("CPQSTDEQ-MIB", "cpqSeCpuSocketNumber"))
cpqSePCCardThermalDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSePCCardDeviceInfo"), ("CPQSTDEQ-MIB", "cpqSePCCardProductInfo"), ("CPQSTDEQ-MIB", "cpqSePCCardSlotIndex"))
cpqSePCCardThermalFailure = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSePCCardDeviceInfo"), ("CPQSTDEQ-MIB", "cpqSePCCardProductInfo"), ("CPQSTDEQ-MIB", "cpqSePCCardSlotIndex"))
cpqSePCCardThermalSafe = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSePCCardSlotIndex"))
cpqSe2CpuThresholdPassed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSeCpuSlot"), ("CPQSTDEQ-MIB", "cpqSeCpuSocketNumber"), ("CPQSTDEQ-MIB", "cpqSeCpuSpeed"), ("CPQSTDEQ-MIB", "cpqSeCpuExtSpeed"), ("CPQSTDEQ-MIB", "cpqSeCpuCacheSize"))
cpqSeCpuStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSeCpuUnitIndex"), ("CPQSTDEQ-MIB", "cpqSeCpuSlot"), ("CPQSTDEQ-MIB", "cpqSeCpuName"), ("CPQSTDEQ-MIB", "cpqSeCpuSpeed"), ("CPQSTDEQ-MIB", "cpqSeCpuStep"), ("CPQSTDEQ-MIB", "cpqSeCpuStatus"), ("CPQSTDEQ-MIB", "cpqSeCpuExtSpeed"), ("CPQSTDEQ-MIB", "cpqSeCpuSocketNumber"), ("CPQSTDEQ-MIB", "cpqSeCpuHwLocation"))
cpqSeCpuPowerPodstatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSeCpuUnitIndex"), ("CPQSTDEQ-MIB", "cpqSeCpuSlot"), ("CPQSTDEQ-MIB", "cpqSeCpuName"), ("CPQSTDEQ-MIB", "cpqSeCpuSpeed"), ("CPQSTDEQ-MIB", "cpqSeCpuStep"), ("CPQSTDEQ-MIB", "cpqSeCpuPowerpodStatus"), ("CPQSTDEQ-MIB", "cpqSeCpuExtSpeed"), ("CPQSTDEQ-MIB", "cpqSeCpuSocketNumber"), ("CPQSTDEQ-MIB", "cpqSeCpuHwLocation"))
cpqSeUSBStorageDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSeUSBDeviceType"), ("CPQSTDEQ-MIB", "cpqSeUSBDeviceName"))
cpqSeUSBStorageDeviceRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,1009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTDEQ-MIB", "cpqSeUSBDeviceType"), ("CPQSTDEQ-MIB", "cpqSeUSBDeviceName"))
mibBuilder.exportSymbols("CPQSTDEQ-MIB", cpqSeFloppyDiskTable=cpqSeFloppyDiskTable, cpqSeEisaSlotRaw=cpqSeEisaSlotRaw, cpqSeSerialPortHwLocation=cpqSeSerialPortHwLocation, cpqSePcieFunctMaxLinkSpeed=cpqSePcieFunctMaxLinkSpeed, cpqSe2CpuThresholdPassed=cpqSe2CpuThresholdPassed, cpqSeComponent=cpqSeComponent, cpqSeCpuName=cpqSeCpuName, cpqSeEisaDmaTable=cpqSeEisaDmaTable, cpqSePCCardSlotEntry=cpqSePCCardSlotEntry, cpqSeCpuLowPowerStatus=cpqSeCpuLowPowerStatus, cpqSeMibRevMajor=cpqSeMibRevMajor, cpqSeCellReadyForReconfig=cpqSeCellReadyForReconfig, cpqSeLED=cpqSeLED, cpqSeCpuMaxPerformanceState=cpqSeCpuMaxPerformanceState, cpqSeCpuCore=cpqSeCpuCore, cpqSePartitionHasInterleaveMem=cpqSePartitionHasInterleaveMem, cpqSeUSBPortHwLocation=cpqSeUSBPortHwLocation, cpqSeEisaIntSlotIndex=cpqSeEisaIntSlotIndex, cpqSeEisaFreeFormFunctIndex=cpqSeEisaFreeFormFunctIndex, cpqSeComplexCellSlotPartitionNo=cpqSeComplexCellSlotPartitionNo, cpqSeFixedDiskTable=cpqSeFixedDiskTable, cpqSePciSlotHeaderType=cpqSePciSlotHeaderType, cpqSeFpuSlot=cpqSeFpuSlot, cpqSePCCardPhysLocation=cpqSePCCardPhysLocation, cpqSeIOCTable=cpqSeIOCTable, cpqSeIsaCmos=cpqSeIsaCmos, cpqSeCpuCacheHwLocation=cpqSeCpuCacheHwLocation, cpqSeLEDHardwareLocation=cpqSeLEDHardwareLocation, cpqSeFpuType=cpqSeFpuType, cpqSePcieSlotMaxLinkWidth=cpqSePcieSlotMaxLinkWidth, cpqSeCellSysFwVersion=cpqSeCellSysFwVersion, cpqSePciMemoryBaseAddr=cpqSePciMemoryBaseAddr, cpqSeOsCommonModuleDate=cpqSeOsCommonModuleDate, cpqSeIOCUnitIndex=cpqSeIOCUnitIndex, cpqSeCpuCacheWritePolicy=cpqSeCpuCacheWritePolicy, cpqSeCpuArchitectureRevision=cpqSeCpuArchitectureRevision, cpqSeCellHasInterleaveMem=cpqSeCellHasInterleaveMem, cpqSeComplexTotalCabinet=cpqSeComplexTotalCabinet, cpqSeLEDDescription=cpqSeLEDDescription, cpqSeProcessor=cpqSeProcessor, cpqSeCPUCoreIndex=cpqSeCPUCoreIndex, cpqSeCellState=cpqSeCellState, cpqSeSerialPortEntry=cpqSeSerialPortEntry, cpqSePCCardSlotWidth=cpqSePCCardSlotWidth, cpqSeCpuMinPerformanceState=cpqSeCpuMinPerformanceState, cpqSeFloppyDiskType=cpqSeFloppyDiskType, cpqSeEisaDmaChannel=cpqSeEisaDmaChannel, cpqSeCpuCacheSize=cpqSeCpuCacheSize, cpqSeLEDTable=cpqSeLEDTable, cpqSePCCardAssetTag=cpqSePCCardAssetTag, cpqStdEquipment=cpqStdEquipment, cpqSeFpuTable=cpqSeFpuTable, cpqSeCPUPartNumber=cpqSeCPUPartNumber, cpqSePciFunctClassDescription=cpqSePciFunctClassDescription, cpqSeParrallelPortHwLocation=cpqSeParrallelPortHwLocation, cpqSePartitionNumber=cpqSePartitionNumber, cpqSeCpuUnitIndex=cpqSeCpuUnitIndex, cpqSePCCardSlotThermalCapacity=cpqSePCCardSlotThermalCapacity, cpqSeCabinetTable=cpqSeCabinetTable, cpqSeMPFwVer=cpqSeMPFwVer, cpqSePCCardStatus=cpqSePCCardStatus, cpqSeEisaIntAllocIndex=cpqSeEisaIntAllocIndex, cpqSeCPUMaxSpeed=cpqSeCPUMaxSpeed, cpqSeCellInterleaveAllocatedSize=cpqSeCellInterleaveAllocatedSize, cpqSeEisaSlotTable=cpqSeEisaSlotTable, cpqSeIOCBayNumber=cpqSeIOCBayNumber, cpqSeLEDState=cpqSeLEDState, cpqSeEisaFunctCfgRev=cpqSeEisaFunctCfgRev, cpqSeEisaMemFunctIndex=cpqSeEisaMemFunctIndex, cpqSePartitionCLMAllocatedSize=cpqSePartitionCLMAllocatedSize, cpqSeMibRev=cpqSeMibRev, cpqSeEisaDmaAllocIndex=cpqSeEisaDmaAllocIndex, cpqSeCellToScanBusConnectionStatus=cpqSeCellToScanBusConnectionStatus, cpqSeEisaIntShare=cpqSeEisaIntShare, cpqSeFixedDiskHeads=cpqSeFixedDiskHeads, cpqSeEisaInitEntry=cpqSeEisaInitEntry, cpqSeEisaMemDataSize=cpqSeEisaMemDataSize, cpqSeTotalMem=cpqSeTotalMem, cpqSeComplexLockedProperty=cpqSeComplexLockedProperty, cpqSeFpuHwLocation=cpqSeFpuHwLocation, cpqSeEisaPortEntry=cpqSeEisaPortEntry, cpqSePciMemoryFunctionIndex=cpqSePciMemoryFunctionIndex, cpqSePciSlotSubSystemID=cpqSePciSlotSubSystemID, cpqSeIOCLEDState=cpqSeIOCLEDState, cpqSeCellPresent=cpqSeCellPresent, cpqSeSerialPort=cpqSeSerialPort, cpqSeRedundantSysRomVer=cpqSeRedundantSysRomVer, cpqSeMemory=cpqSeMemory, cpqSeUSBStorageDeviceAttached=cpqSeUSBStorageDeviceAttached, cpqSeEisaDmaXfer=cpqSeEisaDmaXfer, cpqSePartitionTotalCPU=cpqSePartitionTotalCPU, cpqSeCPUChipGenerationName=cpqSeCPUChipGenerationName, cpqSeComplexUUID=cpqSeComplexUUID, cpqSeCellCabinetNumber=cpqSeCellCabinetNumber, cpqSePciXMaxSlotSpeed=cpqSePciXMaxSlotSpeed, cpqSeCPUSerialNumberMfgr=cpqSeCPUSerialNumberMfgr, cpqSeBiosRomDataRaw=cpqSeBiosRomDataRaw, cpqSeCpuStatus=cpqSeCpuStatus, cpqSeOsCommonPollFreq=cpqSeOsCommonPollFreq, cpqSeKeyboardDesc=cpqSeKeyboardDesc, cpqSeEisaFunctIndex=cpqSeEisaFunctIndex, cpqSeCellCLMRequestPercentage=cpqSeCellCLMRequestPercentage, cpqSeCPUMultiThreadStatus=cpqSeCPUMultiThreadStatus, cpqSeUSBPortType=cpqSeUSBPortType, cpqSePCCardSlotPowerState=cpqSePCCardSlotPowerState, cpqSePCCardSlotIndex=cpqSePCCardSlotIndex, cpqSePCCardSlotThermalSensor=cpqSePCCardSlotThermalSensor, cpqSeComplexCellSlotStatus=cpqSeComplexCellSlotStatus, cpqSeFpuName=cpqSeFpuName, cpqSeCpuCacheCpuSlot=cpqSeCpuCacheCpuSlot, cpqSePciFunctDevStatus=cpqSePciFunctDevStatus, cpqSeCpuPowerpodStatus=cpqSeCpuPowerpodStatus, cpqSeParallelPortTable=cpqSeParallelPortTable, cpqSePci=cpqSePci, cpqSeComplexComputeCabinet=cpqSeComplexComputeCabinet, cpqSeComplexName=cpqSeComplexName, cpqSePciSlotCurrentMode=cpqSePciSlotCurrentMode, cpqSeCpuTable=cpqSeCpuTable, cpqSePartitionMemInterleavingType=cpqSePartitionMemInterleavingType, cpqSeEisaSlotEntry=cpqSeEisaSlotEntry, cpqSeFloppyDisk=cpqSeFloppyDisk, cpqSeHPVMFwVer=cpqSeHPVMFwVer, cpqSeCpuStep=cpqSeCpuStep, cpqSeKeyboard=cpqSeKeyboard, cpqSeEisaInitSlotIndex=cpqSeEisaInitSlotIndex, cpqSeFixedDiskSectors=cpqSeFixedDiskSectors, cpqSePciSlotExtendedInfo=cpqSePciSlotExtendedInfo, cpqSeEisaFunctSels=cpqSeEisaFunctSels, cpqSePartitionName=cpqSePartitionName, cpqSeEisaSlotBoardId=cpqSeEisaSlotBoardId, cpqSeComplexIOXCabinet=cpqSeComplexIOXCabinet, cpqSeEisaMemDecode=cpqSeEisaMemDecode, cpqSeEisaIntEntry=cpqSeEisaIntEntry, cpqSeEisaFreeFormTable=cpqSeEisaFreeFormTable, cpqSePciFunctHwLocation=cpqSePciFunctHwLocation, cpqSeComplex=cpqSeComplex, cpqSeOsCommonModuleIndex=cpqSeOsCommonModuleIndex, cpqSeSerialPortAddr=cpqSeSerialPortAddr, cpqSePciFunctEntry=cpqSePciFunctEntry, cpqSeCellBoardSpeed=cpqSeCellBoardSpeed, cpqSeFixedDisk=cpqSeFixedDisk, cpqSeCellCellNumber=cpqSeCellCellNumber, cpqSeEisaPortShare=cpqSeEisaPortShare, cpqSeEisaSlotType=cpqSeEisaSlotType, cpqSeCabinetIOXLED=cpqSeCabinetIOXLED, cpqSeUSBDeviceType=cpqSeUSBDeviceType, cpqSePciFunctIntLine=cpqSePciFunctIntLine, cpqSePciFunctBusNumberIndex=cpqSePciFunctBusNumberIndex, cpqSeFixedDiskCyls=cpqSeFixedDiskCyls, cpqSeCpuCacheSpeed=cpqSeCpuCacheSpeed, cpqSeLEDStateDuration=cpqSeLEDStateDuration, cpqSePciMemoryDeviceNumberIndex=cpqSePciMemoryDeviceNumberIndex, cpqSeEisaSlotIndex=cpqSeEisaSlotIndex, cpqSeOsCommonModuleName=cpqSeOsCommonModuleName, cpqSeFloppyDiskHwLocation=cpqSeFloppyDiskHwLocation, cpqSeEisaInitAllocIndex=cpqSeEisaInitAllocIndex, cpqSeCellPDHCFirmwareRevision=cpqSeCellPDHCFirmwareRevision, cpqSePciFunctClassCode=cpqSePciFunctClassCode, cpqSeFixedDiskHwLocation=cpqSeFixedDiskHwLocation, cpqSePciSlotBusNumberIndex=cpqSePciSlotBusNumberIndex, cpqSeCpuCacheStatus=cpqSeCpuCacheStatus, cpqSePartitionCoreCellCabinet=cpqSePartitionCoreCellCabinet, cpqSeCellCLMRequestSize=cpqSeCellCLMRequestSize, cpqSeComplexCellSlotStatusTable=cpqSeComplexCellSlotStatusTable, cpqSeEisaPortAddr=cpqSeEisaPortAddr, cpqSePciSlotType=cpqSePciSlotType, cpqSeTotalMemMB=cpqSeTotalMemMB, cpqSePCCardSerialNumber=cpqSePCCardSerialNumber, cpqSeCpuCacheCpuCoreIndex=cpqSeCpuCacheCpuCoreIndex, cpqSeCpuCacheLevelIndex=cpqSeCpuCacheLevelIndex, cpqSeEisaDmaEntry=cpqSeEisaDmaEntry, cpqSeFloppyDiskEntry=cpqSeFloppyDiskEntry, cpqSeEisaMemAllocIndex=cpqSeEisaMemAllocIndex, cpqSeMibCondition=cpqSeMibCondition, cpqSePCCardCondition=cpqSePCCardCondition, cpqSeEisaInitFunctIndex=cpqSeEisaInitFunctIndex, cpqSePciSlotBoardName=cpqSePciSlotBoardName, cpqSePciHwLocation=cpqSePciHwLocation, cpqSePcieFunctNegotiatedLinkSpeed=cpqSePcieFunctNegotiatedLinkSpeed, cpqSeUSBPortTable=cpqSeUSBPortTable, cpqSeSerialPortTable=cpqSeSerialPortTable, cpqSePciMemoryHwLocation=cpqSePciMemoryHwLocation, cpqSePciMemorySize=cpqSePciMemorySize, cpqSeLEDIndex=cpqSeLEDIndex, cpqSeEisaFunctEntry=cpqSeEisaFunctEntry, cpqSeEisaDmaFunctIndex=cpqSeEisaDmaFunctIndex, cpqSePartitionPoweredOnCells=cpqSePartitionPoweredOnCells, cpqSeCpuSocketNumber=cpqSeCpuSocketNumber, cpqSePcieFunctMaxLinkWidth=cpqSePcieFunctMaxLinkWidth, cpqSeEisaInitTable=cpqSeEisaInitTable, cpqSeParallelPortDesc=cpqSeParallelPortDesc, cpqSeCpuPrimary=cpqSeCpuPrimary, cpqSePciSegmentMode=cpqSePciSegmentMode, TruthValue=TruthValue, cpqSeEisaDmaTiming=cpqSeEisaDmaTiming, cpqSePCCardThermalSafe=cpqSePCCardThermalSafe, cpqSeCellTable=cpqSeCellTable, cpqSeEisaFunctSlotIndex=cpqSeEisaFunctSlotIndex, cpqSeUSBStorageDeviceRemoved=cpqSeUSBStorageDeviceRemoved, cpqSeEisaFunctType=cpqSeEisaFunctType, cpqSeCpuDesigner=cpqSeCpuDesigner, cpqSeEisaFreeFormValue=cpqSeEisaFreeFormValue, cpqSeCpuThreshPassed=cpqSeCpuThreshPassed, cpqSeCpuStatusChange=cpqSeCpuStatusChange, cpqSeEisaDmaShare=cpqSeEisaDmaShare, cpqSeEisaInitMask=cpqSeEisaInitMask, cpqSeSysRomVer=cpqSeSysRomVer, cpqSeFixedDiskIndex=cpqSeFixedDiskIndex, cpqSeCpuSlot=cpqSeCpuSlot, cpqSePciMemoryIndex=cpqSePciMemoryIndex, cpqSeOsCommon=cpqSeOsCommon, cpqSePartitionCLMRequestSize=cpqSePartitionCLMRequestSize, cpqSePciPhysSlot=cpqSePciPhysSlot, cpqSePciIsSlot0Embedded=cpqSePciIsSlot0Embedded, cpqSeFixedDiskType=cpqSeFixedDiskType, cpqSePciSlotIOCTablePtr=cpqSePciSlotIOCTablePtr, cpqSeEisaPortSlotIndex=cpqSeEisaPortSlotIndex, cpqSePartitionInstalledCells=cpqSePartitionInstalledCells, cpqSeCpuExtSpeed=cpqSeCpuExtSpeed, cpqSeEisaDmaXferCount=cpqSeEisaDmaXferCount, cpqSeParallelPortIndex=cpqSeParallelPortIndex, cpqSePciSlotWidth=cpqSePciSlotWidth, cpqSeEisaInitAddr=cpqSeEisaInitAddr, cpqSeRom=cpqSeRom, cpqSeCPUPartNumberMfgr=cpqSeCPUPartNumberMfgr, cpqSeLEDLocationType=cpqSeLEDLocationType, cpqSePartition=cpqSePartition, cpqSePciMemoryEntry=cpqSePciMemoryEntry, cpqSeCpuPowerPodstatusChange=cpqSeCpuPowerPodstatusChange, cpqSeCpuThresholdPassed=cpqSeCpuThresholdPassed, cpqSeCabinetLED=cpqSeCabinetLED, cpqSeCellHasPower=cpqSeCellHasPower, cpqSeCpuCacheTable=cpqSeCpuCacheTable, cpqSePciFunctVendorID=cpqSePciFunctVendorID, cpqSeCpuCacheUnitIndex=cpqSeCpuCacheUnitIndex, cpqSePciMaxSlotSpeed=cpqSePciMaxSlotSpeed, cpqSeEisaMemShare=cpqSeEisaMemShare, cpqSeCellLEDState=cpqSeCellLEDState, cpqSeCPUCoreThreadIndex=cpqSeCPUCoreThreadIndex, cpqSeInterface=cpqSeInterface, cpqSeCpuCoreSteppingText=cpqSeCpuCoreSteppingText, cpqSeCPUSerialNumber=cpqSeCPUSerialNumber, cpqSeCabinetUnitIndex=cpqSeCabinetUnitIndex, cpqSePciSlotTable=cpqSePciSlotTable, cpqSeCpuCurrentPerformanceState=cpqSeCpuCurrentPerformanceState, cpqSePartitionAvailableCellSlots=cpqSePartitionAvailableCellSlots, cpqSePciFunctDeviceID=cpqSePciFunctDeviceID, cpqSeIOCCabinetNumber=cpqSeIOCCabinetNumber, cpqSePCCardSlotType=cpqSePCCardSlotType, cpqSeUSBPortIndex=cpqSeUSBPortIndex, cpqSeEisaInitAccess=cpqSeEisaInitAccess, cpqSePciSlotSpeed=cpqSePciSlotSpeed, cpqSePartitionCoreCell=cpqSePartitionCoreCell, cpqSePciFunctTable=cpqSePciFunctTable)
mibBuilder.exportSymbols("CPQSTDEQ-MIB", cpqSeEisaInitValue=cpqSeEisaInitValue, cpqSeCPUCoreMaxThreads=cpqSeCPUCoreMaxThreads, cpqSeOsCommonModuleTable=cpqSeOsCommonModuleTable, cpqSeEisaMemCache=cpqSeEisaMemCache, cpqSeCellHasCoreIO=cpqSeCellHasCoreIO, cpqSeIOCPowerState=cpqSeIOCPowerState, cpqSeEisaIntTable=cpqSeEisaIntTable, cpqSeEisaMemAccess=cpqSeEisaMemAccess, cpqSeFpuChipIndex=cpqSeFpuChipIndex, cpqSeLEDEntry=cpqSeLEDEntry, cpqSePartitionCLMRequestPercentage=cpqSePartitionCLMRequestPercentage, cpqSeOsCommonModuleEntry=cpqSeOsCommonModuleEntry, cpqSeUSBPortEntry=cpqSeUSBPortEntry, cpqSeEisaSlotCfRev=cpqSeEisaSlotCfRev, cpqSeEisaIntNum=cpqSeEisaIntNum, cpqSeIOC=cpqSeIOC, cpqSeOsCommonModuleVersion=cpqSeOsCommonModuleVersion, cpqSeEisaIntTrigger=cpqSeEisaIntTrigger, cpqSeCabinetEntry=cpqSeCabinetEntry, cpqSeUSBDeviceName=cpqSeUSBDeviceName, cpqSeCpuHwLocation=cpqSeCpuHwLocation, cpqSeEisaMemSize=cpqSeEisaMemSize, cpqSePCCardDeviceInfo=cpqSePCCardDeviceInfo, cpqSeEisaPortTable=cpqSeEisaPortTable, cpqSeCpuEntry=cpqSeCpuEntry, cpqSePciFunctRevID=cpqSePciFunctRevID, cpqSeCellTotalMemory=cpqSeCellTotalMemory, cpqSePciSlotDeviceNumberIndex=cpqSePciSlotDeviceNumberIndex, cpqSeParallelPort=cpqSeParallelPort, cpqSeComplexCellSlotStatusEntry=cpqSeComplexCellSlotStatusEntry, cpqSeCellUnitIndex=cpqSeCellUnitIndex, cpqSeOptRomTable=cpqSeOptRomTable, cpqSeEisaFreeFormEntry=cpqSeEisaFreeFormEntry, cpqSeEisaFreeFormSlotIndex=cpqSeEisaFreeFormSlotIndex, cpqSeVideoDesc=cpqSeVideoDesc, cpqSeEisaMemStartAddr=cpqSeEisaMemStartAddr, cpqSeFixedDiskEntry=cpqSeFixedDiskEntry, cpqSeEisaMemEntry=cpqSeEisaMemEntry, cpqSePCCard=cpqSePCCard, cpqSeCabinetTypeNum=cpqSeCabinetTypeNum, cpqSeEisaFunctTable=cpqSeEisaFunctTable, cpqSeMibRevMinor=cpqSeMibRevMinor, cpqSeFpuEntry=cpqSeFpuEntry, cpqSeComplexCellSlotPartitionName=cpqSeComplexCellSlotPartitionName, cpqSeIOCIOCNumber=cpqSeIOCIOCNumber, cpqSeCpuCacheEntry=cpqSeCpuCacheEntry, cpqSeCpuCellTablePtr=cpqSeCpuCellTablePtr, cpqSeFpuSpeed=cpqSeFpuSpeed, cpqSeIsaCmosRaw=cpqSeIsaCmosRaw, cpqSeEisaFunctInfo=cpqSeEisaFunctInfo, cpqSeEisaFunctStatus=cpqSeEisaFunctStatus, cpqSeComplexCellSlotStatusIndex=cpqSeComplexCellSlotStatusIndex, cpqSeEisaMemTable=cpqSeEisaMemTable, cpqSeVideo=cpqSeVideo, cpqSeParallelPortAddr=cpqSeParallelPortAddr, cpqSePciFunctIndex=cpqSePciFunctIndex, cpqSePartitionReadyForReconfigCells=cpqSePartitionReadyForReconfigCells, cpqSePartitionInterleaveAllocatedSize=cpqSePartitionInterleaveAllocatedSize, cpqSeCellEntry=cpqSeCellEntry, cpqSeIOCEntry=cpqSeIOCEntry, cpqSeSerialPortIndex=cpqSeSerialPortIndex, cpqSeSerialPortDesc=cpqSeSerialPortDesc, cpqSePcieFunctNegotiatedLinkWidth=cpqSePcieFunctNegotiatedLinkWidth, cpqSeEisaSlotBoardName=cpqSeEisaSlotBoardName, cpqSeCellCLMAllocatedSize=cpqSeCellCLMAllocatedSize, cpqSeEisaPortFunctIndex=cpqSeEisaPortFunctIndex, cpqSeCellSerialNumber=cpqSeCellSerialNumber, cpqSeEisaInitUseMask=cpqSeEisaInitUseMask, cpqSeUSBDevice=cpqSeUSBDevice, cpqSePciMemoryType=cpqSePciMemoryType, cpqSeOptRomEntry=cpqSeOptRomEntry, cpqSeEisaIntFunctIndex=cpqSeEisaIntFunctIndex, cpqSePCCardProductInfo=cpqSePCCardProductInfo, cpqSePciSlotEntry=cpqSePciSlotEntry, cpqSeCell=cpqSeCell, cpqSeCabinet=cpqSeCabinet, cpqSeOsCommonModulePurpose=cpqSeOsCommonModulePurpose, cpqSeEisaPortSize=cpqSeEisaPortSize, cpqSePciFunctDeviceNumberIndex=cpqSePciFunctDeviceNumberIndex, cpqSeCabinetCPULED=cpqSeCabinetCPULED, cpqSePcieSlotMaxLinkSpeed=cpqSePcieSlotMaxLinkSpeed, cpqSePciCurrentSlotSpeed=cpqSePciCurrentSlotSpeed, cpqSeCpuSpeed=cpqSeCpuSpeed, cpqSeCellBootInhibited=cpqSeCellBootInhibited, cpqSeEisaNvram=cpqSeEisaNvram, cpqSeComplexCellSlotStatusCabinetNo=cpqSeComplexCellSlotStatusCabinetNo, cpqSeComplexCellSlotStatusSlotNo=cpqSeComplexCellSlotStatusSlotNo, cpqSeFixedDiskCapacity=cpqSeFixedDiskCapacity, cpqSeUSBPort=cpqSeUSBPort, cpqSePCCardThermalDegraded=cpqSePCCardThermalDegraded, cpqSeCellIOCTablePtr=cpqSeCellIOCTablePtr, cpqSeEisaPortAllocIndex=cpqSeEisaPortAllocIndex, cpqSeOptRomAddrIndex=cpqSeOptRomAddrIndex, cpqSeSmbiosVer=cpqSeSmbiosVer, cpqSeParallelPortEntry=cpqSeParallelPortEntry, cpqSeEisaMemSlotIndex=cpqSeEisaMemSlotIndex, cpqSeFloppyDiskIndex=cpqSeFloppyDiskIndex, cpqSePCCardSlotTable=cpqSePCCardSlotTable, cpqSeEisaMemType=cpqSeEisaMemType, cpqSeEisaDmaSlotIndex=cpqSeEisaDmaSlotIndex, cpqSeOptRomSize=cpqSeOptRomSize, cpqSeCellCLMCondition=cpqSeCellCLMCondition, cpqSePCCardThermalFailure=cpqSePCCardThermalFailure, cpqSeFpuUnitIndex=cpqSeFpuUnitIndex, cpqSePciMemoryBusNumberIndex=cpqSePciMemoryBusNumberIndex, cpqSeBaseMem=cpqSeBaseMem, cpqSeBMCFwVer=cpqSeBMCFwVer, cpqSePciMemoryTable=cpqSePciMemoryTable)
