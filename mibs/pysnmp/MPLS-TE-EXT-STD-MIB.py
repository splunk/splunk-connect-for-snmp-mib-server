#
# PySNMP MIB module MPLS-TE-EXT-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-TE-EXT-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:04:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
IndexIntegerNextFree, = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexIntegerNextFree")
MplsNodeId, MplsCcId, MplsIccId, MplsGlobalId = mibBuilder.importSymbols("MPLS-TC-EXT-STD-MIB", "MplsNodeId", "MplsCcId", "MplsIccId", "MplsGlobalId")
MplsTunnelIndex, MplsExtendedTunnelId, mplsStdMIB, MplsTunnelInstanceIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelIndex", "MplsExtendedTunnelId", "mplsStdMIB", "MplsTunnelInstanceIndex")
mplsTunnelEgressLSRId, mplsTunnelIngressLSRId, mplsTunnelIndex, mplsTunnelInstance = mibBuilder.importSymbols("MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId", "mplsTunnelIngressLSRId", "mplsTunnelIndex", "mplsTunnelInstance")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Bits, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ObjectIdentity, Counter32, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ObjectIdentity", "Counter32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "TimeTicks")
TruthValue, RowPointer, RowStatus, StorageType, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowPointer", "RowStatus", "StorageType", "DisplayString", "TextualConvention")
mplsTeExtStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 20))
mplsTeExtStdMIB.setRevisions(('2015-02-02 00:00',))
if mibBuilder.loadTexts: mplsTeExtStdMIB.setLastUpdated('201502020000Z')
if mibBuilder.loadTexts: mplsTeExtStdMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
mplsTeExtObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 20, 0))
mplsTeExtConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 20, 1))
mplsTunnelExtNodeConfigLocalIdNext = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 1), IndexIntegerNextFree().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigLocalIdNext.setStatus('current')
mplsTunnelExtNodeConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2), )
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigTable.setStatus('current')
mplsTunnelExtNodeConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1), ).setIndexNames((0, "MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigLocalId"))
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigEntry.setStatus('current')
mplsTunnelExtNodeConfigLocalId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 1), MplsExtendedTunnelId())
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigLocalId.setStatus('current')
mplsTunnelExtNodeConfigGlobalId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 2), MplsGlobalId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigGlobalId.setStatus('current')
mplsTunnelExtNodeConfigCcId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 3), MplsCcId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigCcId.setStatus('current')
mplsTunnelExtNodeConfigIccId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 4), MplsIccId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigIccId.setStatus('current')
mplsTunnelExtNodeConfigNodeId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 5), MplsNodeId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigNodeId.setStatus('current')
mplsTunnelExtNodeConfigIccValid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigIccValid.setStatus('current')
mplsTunnelExtNodeConfigStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigStorageType.setStatus('current')
mplsTunnelExtNodeConfigRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtNodeConfigRowStatus.setStatus('current')
mplsTunnelExtNodeIpMapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 3), )
if mibBuilder.loadTexts: mplsTunnelExtNodeIpMapTable.setStatus('current')
mplsTunnelExtNodeIpMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 3, 1), ).setIndexNames((0, "MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeIpMapGlobalId"), (0, "MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeIpMapNodeId"))
if mibBuilder.loadTexts: mplsTunnelExtNodeIpMapEntry.setStatus('current')
mplsTunnelExtNodeIpMapGlobalId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 3, 1, 1), MplsGlobalId())
if mibBuilder.loadTexts: mplsTunnelExtNodeIpMapGlobalId.setStatus('current')
mplsTunnelExtNodeIpMapNodeId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 3, 1, 2), MplsNodeId())
if mibBuilder.loadTexts: mplsTunnelExtNodeIpMapNodeId.setStatus('current')
mplsTunnelExtNodeIpMapLocalId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 3, 1, 3), MplsExtendedTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelExtNodeIpMapLocalId.setStatus('current')
mplsTunnelExtNodeIccMapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 4), )
if mibBuilder.loadTexts: mplsTunnelExtNodeIccMapTable.setStatus('current')
mplsTunnelExtNodeIccMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 4, 1), ).setIndexNames((0, "MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeIccMapCcId"), (0, "MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeIccMapIccId"), (0, "MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeIccMapNodeId"))
if mibBuilder.loadTexts: mplsTunnelExtNodeIccMapEntry.setStatus('current')
mplsTunnelExtNodeIccMapCcId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 4, 1, 1), MplsCcId())
if mibBuilder.loadTexts: mplsTunnelExtNodeIccMapCcId.setStatus('current')
mplsTunnelExtNodeIccMapIccId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 4, 1, 2), MplsIccId())
if mibBuilder.loadTexts: mplsTunnelExtNodeIccMapIccId.setStatus('current')
mplsTunnelExtNodeIccMapNodeId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 4, 1, 3), MplsNodeId())
if mibBuilder.loadTexts: mplsTunnelExtNodeIccMapNodeId.setStatus('current')
mplsTunnelExtNodeIccMapLocalId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 4, 1, 4), MplsExtendedTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelExtNodeIccMapLocalId.setStatus('current')
mplsTunnelExtTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5), )
if mibBuilder.loadTexts: mplsTunnelExtTable.setStatus('current')
mplsTunnelExtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsTunnelExtEntry.setStatus('current')
mplsTunnelExtOppositeDirPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1, 1), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtOppositeDirPtr.setStatus('current')
mplsTunnelExtOppositeDirTnlValid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtOppositeDirTnlValid.setStatus('current')
mplsTunnelExtDestTnlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1, 3), MplsTunnelIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtDestTnlIndex.setStatus('current')
mplsTunnelExtDestTnlLspIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1, 4), MplsTunnelInstanceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtDestTnlLspIndex.setStatus('current')
mplsTunnelExtDestTnlValid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtDestTnlValid.setStatus('current')
mplsTunnelExtIngressLSRLocalIdValid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtIngressLSRLocalIdValid.setStatus('current')
mplsTunnelExtEgressLSRLocalIdValid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 20, 0, 5, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExtEgressLSRLocalIdValid.setStatus('current')
mplsTeExtCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 20, 1, 1))
mplsTeExtGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 20, 1, 2))
mplsTeExtModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 20, 1, 1, 1)).setObjects(("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtGroup"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtIpOperatorGroup"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtIccOperatorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeExtModuleFullCompliance = mplsTeExtModuleFullCompliance.setStatus('current')
mplsTeExtModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 20, 1, 1, 2)).setObjects(("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtGroup"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtIpOperatorGroup"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtIccOperatorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeExtModuleReadOnlyCompliance = mplsTeExtModuleReadOnlyCompliance.setStatus('current')
mplsTunnelExtGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 20, 1, 2, 1)).setObjects(("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtOppositeDirPtr"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtOppositeDirTnlValid"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtDestTnlIndex"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtDestTnlLspIndex"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtDestTnlValid"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtIngressLSRLocalIdValid"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtEgressLSRLocalIdValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelExtGroup = mplsTunnelExtGroup.setStatus('current')
mplsTunnelExtIpOperatorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 20, 1, 2, 2)).setObjects(("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigLocalIdNext"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigGlobalId"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigNodeId"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeIpMapLocalId"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigStorageType"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelExtIpOperatorGroup = mplsTunnelExtIpOperatorGroup.setStatus('current')
mplsTunnelExtIccOperatorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 20, 1, 2, 3)).setObjects(("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigLocalIdNext"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigCcId"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigIccId"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigNodeId"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigIccValid"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeIccMapLocalId"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigStorageType"), ("MPLS-TE-EXT-STD-MIB", "mplsTunnelExtNodeConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelExtIccOperatorGroup = mplsTunnelExtIccOperatorGroup.setStatus('current')
mibBuilder.exportSymbols("MPLS-TE-EXT-STD-MIB", mplsTunnelExtDestTnlIndex=mplsTunnelExtDestTnlIndex, mplsTunnelExtNodeIpMapGlobalId=mplsTunnelExtNodeIpMapGlobalId, mplsTunnelExtEntry=mplsTunnelExtEntry, mplsTunnelExtOppositeDirTnlValid=mplsTunnelExtOppositeDirTnlValid, mplsTunnelExtNodeConfigIccValid=mplsTunnelExtNodeConfigIccValid, mplsTunnelExtDestTnlValid=mplsTunnelExtDestTnlValid, mplsTunnelExtNodeIpMapEntry=mplsTunnelExtNodeIpMapEntry, mplsTunnelExtEgressLSRLocalIdValid=mplsTunnelExtEgressLSRLocalIdValid, mplsTunnelExtNodeIccMapIccId=mplsTunnelExtNodeIccMapIccId, mplsTunnelExtNodeIccMapLocalId=mplsTunnelExtNodeIccMapLocalId, mplsTunnelExtOppositeDirPtr=mplsTunnelExtOppositeDirPtr, mplsTunnelExtNodeIpMapNodeId=mplsTunnelExtNodeIpMapNodeId, mplsTeExtConformance=mplsTeExtConformance, mplsTunnelExtNodeConfigLocalIdNext=mplsTunnelExtNodeConfigLocalIdNext, PYSNMP_MODULE_ID=mplsTeExtStdMIB, mplsTunnelExtNodeConfigNodeId=mplsTunnelExtNodeConfigNodeId, mplsTunnelExtIccOperatorGroup=mplsTunnelExtIccOperatorGroup, mplsTunnelExtNodeConfigCcId=mplsTunnelExtNodeConfigCcId, mplsTunnelExtNodeIpMapTable=mplsTunnelExtNodeIpMapTable, mplsTunnelExtNodeConfigIccId=mplsTunnelExtNodeConfigIccId, mplsTeExtObjects=mplsTeExtObjects, mplsTeExtGroups=mplsTeExtGroups, mplsTunnelExtGroup=mplsTunnelExtGroup, mplsTunnelExtNodeConfigGlobalId=mplsTunnelExtNodeConfigGlobalId, mplsTunnelExtIpOperatorGroup=mplsTunnelExtIpOperatorGroup, mplsTunnelExtNodeIccMapEntry=mplsTunnelExtNodeIccMapEntry, mplsTeExtStdMIB=mplsTeExtStdMIB, mplsTeExtModuleFullCompliance=mplsTeExtModuleFullCompliance, mplsTeExtCompliances=mplsTeExtCompliances, mplsTunnelExtNodeIccMapNodeId=mplsTunnelExtNodeIccMapNodeId, mplsTunnelExtIngressLSRLocalIdValid=mplsTunnelExtIngressLSRLocalIdValid, mplsTunnelExtNodeConfigRowStatus=mplsTunnelExtNodeConfigRowStatus, mplsTunnelExtNodeConfigLocalId=mplsTunnelExtNodeConfigLocalId, mplsTunnelExtNodeIccMapTable=mplsTunnelExtNodeIccMapTable, mplsTunnelExtNodeConfigStorageType=mplsTunnelExtNodeConfigStorageType, mplsTunnelExtDestTnlLspIndex=mplsTunnelExtDestTnlLspIndex, mplsTunnelExtNodeIpMapLocalId=mplsTunnelExtNodeIpMapLocalId, mplsTunnelExtNodeIccMapCcId=mplsTunnelExtNodeIccMapCcId, mplsTeExtModuleReadOnlyCompliance=mplsTeExtModuleReadOnlyCompliance, mplsTunnelExtNodeConfigEntry=mplsTunnelExtNodeConfigEntry, mplsTunnelExtTable=mplsTunnelExtTable, mplsTunnelExtNodeConfigTable=mplsTunnelExtNodeConfigTable)
